#!/usr/bin/env node\n\n/**\n * Enhanced API Key Validation Test Suite\n * Tests the comprehensive validation and connection testing features\n */\n\nconst path = require('path');\n\n// Import the enhanced API key service\nconst apiKeyService = require('./webapp/lambda/utils/apiKeyService');\nconst apiKeyTesting = require('./webapp/lambda/utils/apiKeyTesting');\n\n/**\n * Test data for validation scenarios\n */\nconst testCases = {\n  alpaca: {\n    valid: {\n      keyId: 'PKABCDEFGHIJKLMNOPQR',\n      secretKey: 'abcdefghijklmnopqrstuvwxyz1234567890+/=='\n    },\n    invalid: {\n      keyIdTooShort: 'PK12345',\n      keyIdWrongPrefix: 'ABCDEFGHIJKLMNOPQRST',\n      keyIdLowercase: 'pkabcdefghijklmnopqr',\n      secretKeyTooShort: 'short',\n      secretKeyInvalidChars: 'abcd@#$%invalid_chars_here_1234567890'\n    },\n    placeholder: {\n      keyId: 'test',\n      secretKey: 'password'\n    }\n  },\n  td_ameritrade: {\n    valid: {\n      keyId: 'ABCDEFGHIJKLMNOPQRST@AMER.OAUTHAP',\n      keyIdShort: 'CONSUMER_KEY_1234567890'\n    },\n    invalid: {\n      keyIdTooShort: 'SHORT',\n      keyIdTooLong: 'THIS_IS_A_VERY_LONG_CONSUMER_KEY_THAT_EXCEEDS_FIFTY_CHARACTERS_LIMIT',\n      keyIdInvalidChars: 'INVALID#CHARS!HERE'\n    }\n  },\n  polygon: {\n    valid: {\n      keyId: 'abcdefghijklmnopqrstuvwxyz123456'\n    },\n    invalid: {\n      keyIdTooShort: 'short_key',\n      keyIdTooLong: 'this_key_is_way_too_long_for_polygon',\n      keyIdInvalidChars: 'invalid@chars#here!'\n    }\n  },\n  finnhub: {\n    valid: {\n      keyId: 'abcdefghijklmnopqrst'\n    },\n    invalid: {\n      keyIdTooShort: 'short',\n      keyIdTooLong: 'this_key_is_too_long_for_finnhub',\n      keyIdUppercase: 'ABCDEFGHIJKLMNOPQRST',\n      keyIdInvalidChars: 'invalid_chars@here!'\n    }\n  }\n};\n\n/**\n * Run validation tests for a specific provider\n */\nfunction testProviderValidation(provider, cases) {\n  console.log(`\\n🧪 Testing ${provider.toUpperCase()} validation:`);\n  console.log('─'.repeat(50));\n  \n  let passed = 0;\n  let failed = 0;\n  \n  // Test valid cases\n  if (cases.valid) {\n    Object.entries(cases.valid).forEach(([testName, value]) => {\n      try {\n        const result = apiKeyService.validateApiKeyFormat(\n          provider, \n          value, \n          testName === 'secretKey' ? null : cases.valid.secretKey\n        );\n        \n        if (result.valid) {\n          console.log(`   ✅ Valid ${testName}: PASS`);\n          passed++;\n        } else {\n          console.log(`   ❌ Valid ${testName}: FAIL - ${result.error}`);\n          failed++;\n        }\n      } catch (error) {\n        console.log(`   💥 Valid ${testName}: ERROR - ${error.message}`);\n        failed++;\n      }\n    });\n  }\n  \n  // Test invalid cases\n  if (cases.invalid) {\n    Object.entries(cases.invalid).forEach(([testName, value]) => {\n      try {\n        const result = apiKeyService.validateApiKeyFormat(\n          provider, \n          value, \n          testName.includes('secret') ? null : cases.valid?.secretKey\n        );\n        \n        if (!result.valid) {\n          console.log(`   ✅ Invalid ${testName}: PASS (correctly rejected)`);\n          passed++;\n        } else {\n          console.log(`   ❌ Invalid ${testName}: FAIL (should be rejected)`);\n          failed++;\n        }\n      } catch (error) {\n        console.log(`   💥 Invalid ${testName}: ERROR - ${error.message}`);\n        failed++;\n      }\n    });\n  }\n  \n  // Test placeholder cases\n  if (cases.placeholder) {\n    Object.entries(cases.placeholder).forEach(([testName, value]) => {\n      try {\n        const result = apiKeyService.validateApiKeyFormat(provider, value);\n        \n        if (!result.valid && result.errorCode === 'PLACEHOLDER_VALUE') {\n          console.log(`   ✅ Placeholder ${testName}: PASS (correctly detected)`);\n          passed++;\n        } else {\n          console.log(`   ❌ Placeholder ${testName}: FAIL (should detect placeholder)`);\n          failed++;\n        }\n      } catch (error) {\n        console.log(`   💥 Placeholder ${testName}: ERROR - ${error.message}`);\n        failed++;\n      }\n    });\n  }\n  \n  const total = passed + failed;\n  const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;\n  console.log(`\\n   📊 ${provider.toUpperCase()} Results: ${passed}/${total} passed (${successRate}%)`);\n  \n  return { passed, failed, total };\n}\n\n/**\n * Test connection testing functionality\n */\nasync function testConnectionTesting() {\n  console.log(`\\n🌐 Testing API Connection Testing:`);\n  console.log('─'.repeat(50));\n  \n  const providers = ['alpaca', 'td_ameritrade', 'polygon', 'finnhub', 'unsupported'];\n  \n  for (const provider of providers) {\n    try {\n      console.log(`\\n   🔍 Testing ${provider} connection support:`);\n      \n      const isSupported = apiKeyTesting.isProviderSupported(provider);\n      console.log(`     Supported: ${isSupported ? '✅ Yes' : '❌ No'}`);\n      \n      if (isSupported) {\n        // Test with dummy credentials (should fail gracefully)\n        const testKey = provider === 'alpaca' ? 'PKTEST12345678901234' : 'TESTKEY1234567890';\n        const testSecret = provider === 'alpaca' ? 'testsecret1234567890123456789012345678' : null;\n        \n        console.log(`     Testing connection with dummy credentials...`);\n        const result = await apiKeyTesting.testConnection(provider, testKey, testSecret);\n        \n        console.log(`     Result: ${result.success ? '✅ Success' : '❌ Failed'} (${result.testTime}ms)`);\n        if (!result.success) {\n          console.log(`     Error: ${result.error}`);\n          console.log(`     Error Code: ${result.errorCode}`);\n          if (result.suggestions && result.suggestions.length > 0) {\n            console.log(`     Suggestions: ${result.suggestions.slice(0, 2).join(', ')}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.log(`     💥 Error testing ${provider}: ${error.message}`);\n    }\n    \n    // Small delay to avoid overwhelming APIs\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\n/**\n * Test error code and suggestion system\n */\nfunction testErrorHandling() {\n  console.log(`\\n🚨 Testing Error Handling System:`);\n  console.log('─'.repeat(50));\n  \n  const errorTestCases = [\n    { provider: '', apiKey: '', expected: 'MISSING_REQUIRED_FIELDS' },\n    { provider: 'alpaca', apiKey: 'test', expected: 'PLACEHOLDER_VALUE' },\n    { provider: 'alpaca', apiKey: 'WRONGFORMAT', expected: 'INVALID_ALPACA_KEY_FORMAT' },\n    { provider: 'td_ameritrade', apiKey: 'X', expected: 'INVALID_TD_KEY_LENGTH' },\n    { provider: 'unknown', apiKey: 'X', expected: 'INVALID_GENERIC_KEY_LENGTH' }\n  ];\n  \n  let passed = 0;\n  let failed = 0;\n  \n  errorTestCases.forEach(({ provider, apiKey, expected }, index) => {\n    try {\n      const result = apiKeyService.validateApiKeyFormat(provider, apiKey);\n      \n      if (!result.valid && result.errorCode === expected) {\n        console.log(`   ✅ Error Test ${index + 1}: PASS (${expected})`);\n        passed++;\n      } else {\n        console.log(`   ❌ Error Test ${index + 1}: FAIL - Expected ${expected}, got ${result.errorCode}`);\n        failed++;\n      }\n      \n      // Check if suggestions are provided\n      if (result.suggestions && result.suggestions.length > 0) {\n        console.log(`     💡 Has suggestions: Yes (${result.suggestions.length})`);\n      }\n    } catch (error) {\n      console.log(`   💥 Error Test ${index + 1}: ERROR - ${error.message}`);\n      failed++;\n    }\n  });\n  \n  const total = passed + failed;\n  const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;\n  console.log(`\\n   📊 Error Handling Results: ${passed}/${total} passed (${successRate}%)`);\n  \n  return { passed, failed, total };\n}\n\n/**\n * Main test execution\n */\nasync function runTestSuite() {\n  console.log('🚀 Enhanced API Key Validation Test Suite');\n  console.log('🎯 Testing format validation, error handling, and connection testing');\n  console.log('=' .repeat(80));\n  \n  let totalPassed = 0;\n  let totalFailed = 0;\n  let totalTests = 0;\n  \n  try {\n    // Test validation for each provider\n    for (const [provider, cases] of Object.entries(testCases)) {\n      const result = testProviderValidation(provider, cases);\n      totalPassed += result.passed;\n      totalFailed += result.failed;\n      totalTests += result.total;\n    }\n    \n    // Test error handling system\n    const errorResult = testErrorHandling();\n    totalPassed += errorResult.passed;\n    totalFailed += errorResult.failed;\n    totalTests += errorResult.total;\n    \n    // Test connection testing functionality\n    await testConnectionTesting();\n    \n    // Generate summary report\n    console.log('\\n' + '=' .repeat(80));\n    console.log('📋 TEST SUITE SUMMARY REPORT');\n    console.log('=' .repeat(80));\n    \n    const overallSuccessRate = totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0;\n    \n    console.log(`\\n📊 Overall Results:`);\n    console.log(`   Total Tests: ${totalTests}`);\n    console.log(`   ✅ Passed: ${totalPassed} (${overallSuccessRate}%)`);\n    console.log(`   ❌ Failed: ${totalFailed}`);\n    \n    console.log(`\\n🔧 Enhanced Features Tested:`);\n    console.log(`   ✅ Format validation with specific provider rules`);\n    console.log(`   ✅ Placeholder value detection`);\n    console.log(`   ✅ Detailed error codes and messages`);\n    console.log(`   ✅ Contextual suggestions for each error type`);\n    console.log(`   ✅ Real-time connection testing support`);\n    console.log(`   ✅ Network error handling and timeouts`);\n    \n    console.log(`\\n🎯 Provider Support:`);\n    const supportedProviders = apiKeyTesting.getSupportedProviders();\n    supportedProviders.forEach(provider => {\n      console.log(`   ✅ ${provider.toUpperCase()}: Format validation + Connection testing`);\n    });\n    \n    console.log('\\n' + '=' .repeat(80));\n    console.log('🏁 Enhanced API Key Validation Test Complete');\n    \n    if (totalFailed === 0) {\n      console.log('🎉 All tests passed! Enhanced validation system is working correctly.');\n      return true;\n    } else {\n      console.log(`⚠️  ${totalFailed} tests failed. Review implementation.`);\n      return false;\n    }\n    \n  } catch (error) {\n    console.error('💥 Test suite crashed:', error);\n    return false;\n  }\n}\n\n// Run the test suite\nif (require.main === module) {\n  runTestSuite()\n    .then(success => {\n      process.exit(success ? 0 : 1);\n    })\n    .catch(error => {\n      console.error('💥 Test execution failed:', error);\n      process.exit(1);\n    });\n}\n\nmodule.exports = { runTestSuite, testProviderValidation, testConnectionTesting };