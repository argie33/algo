AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Core infrastructure stack – IAM, VPC, Subnets, Internet, NAT instances in
  two ASGs (one per AZ) with automatic EIP assignment & route updates,
  Spot-ASG Bastion, auto-shutdown Lambda, ECR registry, S3 code bucket, and
  VPC endpoints for RDS/ECS/Lambda/S3.

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr1:
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnetCidr2:
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnetCidr1:
    Type: String
    Default: "10.0.101.0/24"
  PrivateSubnetCidr2:
    Type: String
    Default: "10.0.102.0/24"

  DBStackName:
    Type: String
    Default: "stocks-db-lambda-stack"
    Description: Name of the CFN stack exporting DBEndpoint & DBPort
  DBSecretName:
    Type: String
    Default: "stocks-db-credentials"
    Description: SecretsManager secret holding DB credentials JSON

Resources:

  ### IAM ###

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-admin-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ### VPC & Subnets ###

  StocksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: stocks-vpc }]

  StocksIGW:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StocksVPC
      InternetGatewayId: !Ref StocksIGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref StocksVPC }

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StocksIGW

  PubSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PubSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false

  ### NAT Instance IAM & Profile ###

  NATInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ec2.amazonaws.com] }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NATModify
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                  - ec2:AssociateAddress
                  - ec2:ReplaceRoute
                Resource: "*"

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref NATInstanceRole ]

  NATInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref StocksVPC
      GroupDescription: NAT instance SG
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ### NAT Launch Template ###

  NATLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.nano
        ImageId: ami-0c94855ba95c71c99
        IamInstanceProfile:
          Name: !Ref NATInstanceProfile
        SecurityGroupIds:
          - !Ref NATInstanceSG
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: stocks-nat
        UserData:
          Fn::Base64: |
            #!/bin/bash
            set -eux
            # disable source/dest check
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            aws ec2 modify-instance-attribute \
              --instance-id $INSTANCE_ID \
              --no-source-dest-check
            # enable forwarding & NAT
            sysctl -w net.ipv4.ip_forward=1
            yum install -y iptables-services
            systemctl enable iptables
            systemctl start iptables
            iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

  ### EIPs for NAT ###

  NAT1EIP:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  NAT2EIP:
    Type: AWS::EC2::EIP
    Properties: { Domain: vpc }

  ### NAT Auto Scaling Groups ###

  NATASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: stocks-nat-asg-az1
      VPCZoneIdentifier: [ !Ref PublicSubnet1 ]
      LaunchTemplate:
        LaunchTemplateId: !Ref NATLaunchTemplate
        Version: !GetAtt NATLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: stocks-nat-az1
          PropagateAtLaunch: true

  NATASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: stocks-nat-asg-az2
      VPCZoneIdentifier: [ !Ref PublicSubnet2 ]
      LaunchTemplate:
        LaunchTemplateId: !Ref NATLaunchTemplate
        Version: !GetAtt NATLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: stocks-nat-az2
          PropagateAtLaunch: true

  ### Private Route Tables (no default route here; updated by Lambda) ###

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref StocksVPC }

  Priv1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref StocksVPC }

  Priv2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ### VPC Endpoints ###

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Interface Endpoints
      VpcId: !Ref StocksVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref StocksVPC
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2

  VPCEndpointRDS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.rds
      VpcId: !Ref StocksVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  VPCEndpointECS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecs
      VpcId: !Ref StocksVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  VPCEndpointLambda:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.lambda
      VpcId: !Ref StocksVPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  ### Bastion Spot ASG & Auto-shutdown – unchanged from previous template ###

  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ec2.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref BastionInstanceRole ]

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref StocksVPC
      GroupDescription: Bastion host SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-0c94855ba95c71c99
        IamInstanceProfile:
          Name: !Ref BastionInstanceProfile
        SecurityGroupIds:
          - !Ref BastionSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags: [{ Key: Name, Value: stocks-bastion }]
        UserData:
          Fn::Base64: |
            #!/bin/bash
            set -eux
            yum update -y
            yum remove -y postgresql postgresql-libs
            amazon-linux-extras enable postgresql10
            yum clean metadata
            yum install -y jq postgresql
            aws configure set region us-east-1
            CREDS=$(aws secretsmanager get-secret-value \
              --secret-id "${DBSecretName}" \
              --query SecretString --output text)
            DB_USER=$(echo "$CREDS" | jq -r .username)
            DB_PASSWORD=$(echo "$CREDS" | jq -r .password)
            DB_NAME=$(echo "$CREDS" | jq -r .dbname)
            DB_HOST=$(aws cloudformation describe-stacks \
              --stack-name "${DBStackName}" \
              --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" \
              --output text)
            DB_PORT=$(aws cloudformation describe-stacks \
              --stack-name "${DBStackName}" \
              --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" \
              --output text)
            echo "${DB_HOST}:${DB_PORT}:${DB_NAME}:${DB_USER}:${DB_PASSWORD}" \
              > /home/ec2-user/.pgpass
            chmod 600 /home/ec2-user/.pgpass
            chown ec2-user:ec2-user /home/ec2-user/.pgpass
            cat << 'EOF' >> /home/ec2-user/.bash_profile
            export AWS_DEFAULT_REGION=us-east-1
            export DB_HOST=${DB_HOST}
            export DB_PORT=${DB_PORT}
            export DB_USER=${DB_USER}
            export DB_NAME=${DB_NAME}
            export PGHOST=${DB_HOST}
            export PGPORT=${DB_PORT}
            export PGUSER=${DB_USER}
            export PGDATABASE=${DB_NAME}
            EOF
            chown ec2-user:ec2-user /home/ec2-user/.bash_profile

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: stocks-bastion-asg
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: !GetAtt BastionLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: stocks-bastion
          PropagateAtLaunch: true

  BastionStopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StopBastion
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: autoscaling:UpdateAutoScalingGroup
                Resource: "*"

  BastionStopFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BastionStopRole.Arn
      Environment:
        Variables:
          ASG_NAME: stocks-bastion-asg
      Code:
        ZipFile: |
          import boto3, os
          client = boto3.client('autoscaling')
          def handler(event, context):
              client.update_auto_scaling_group(
                AutoScalingGroupName=os.environ['ASG_NAME'],
                MinSize=0,
                DesiredCapacity=0
              )

  BastionStopRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scale bastion down at 6 PM CT daily
      ScheduleExpression: cron(0 23 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt BastionStopFunction.Arn
          Id: StopBastionTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BastionStopFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BastionStopRule.Arn

  ### ECR Registry ###

  ContainerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: stocks-app-registry
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules":[
              {
                "rulePriority":1,
                "description":"Expire images older than 30 days",
                "selection":{"tagStatus":"any","countType":"sinceImagePushed","countUnit":"days","countNumber":30},
                "action":{"type":"expire"}
              }
            ]
          }

  ### S3 Code Bucket ###

  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: stocks-algo-app-code
      VersioningConfiguration: { Status: Enabled }
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

  ### NAT Route Updater Lambda ###

  NATRouteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NATRoutePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AssociateAddress
                  - ec2:ReplaceRoute
                Resource: "*"

  NATRouteFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt NATRouteRole.Arn
      Timeout: 60
      Environment:
        Variables:
          ASG1: !Ref NATASG1
          ASG2: !Ref NATASG2
          EIP1: !Ref NAT1EIP
          EIP2: !Ref NAT2EIP
          RT1: !Ref PrivateRouteTable1
          RT2: !Ref PrivateRouteTable2
      Code:
        ZipFile: |
          import boto3, os
          ec2 = boto3.client('ec2')
          def handler(event, context):
              d = event['detail']
              asg = d['AutoScalingGroupName']
              iid = d['EC2InstanceId']
              if asg == os.environ['ASG1']:
                  ec2.associate_address(
                    InstanceId=iid,
                    AllocationId=os.environ['EIP1']
                  )
                  ec2.replace_route(
                    RouteTableId=os.environ['RT1'],
                    DestinationCidrBlock='0.0.0.0/0',
                    InstanceId=iid
                  )
              elif asg == os.environ['ASG2']:
                  ec2.associate_address(
                    InstanceId=iid,
                    AllocationId=os.environ['EIP2']
                  )
                  ec2.replace_route(
                    RouteTableId=os.environ['RT2'],
                    DestinationCidrBlock='0.0.0.0/0',
                    InstanceId=iid
                  )

  NATEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Watch ASG launches/terminations to update NAT routes
      EventPattern:
        source: ["aws.autoscaling"]
        detail-type:
          - "EC2 Instance-launch Successful"
          - "EC2 Instance-terminate Successful"
        detail:
          AutoScalingGroupName:
            - !Ref NATASG1
            - !Ref NATASG2
      Targets:
        - Arn: !GetAtt NATRouteFunction.Arn
          Id: NATRouteTarget

  NATRoutePerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NATRouteFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NATEventRule.Arn

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref StocksVPC
    Export: { Name: StocksCore-VpcId }
  PublicSubnet1Id:
    Description: First public subnet
    Value: !Ref PublicSubnet1
    Export: { Name: StocksCore-PublicSubnet1Id }
  PublicSubnet2Id:
    Description: Second public subnet
    Value: !Ref PublicSubnet2
    Export: { Name: StocksCore-PublicSubnet2Id }
  PrivateSubnet1Id:
    Description: First private subnet
    Value: !Ref PrivateSubnet1
    Export: { Name: StocksCore-PrivateSubnet1Id }
  PrivateSubnet2Id:
    Description: Second private subnet
    Value: !Ref PrivateSubnet2
    Export: { Name: StocksCore-PrivateSubnet2Id }
  LambdaSecurityGroupId:
    Description: SG for VPC Lambdas
    Value: !Ref LambdaSecurityGroup
    Export: { Name: StocksCore-LambdaSecurityGroupId }
  LambdaExecutionRoleArn:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export: { Name: StocksCore-LambdaExecutionRoleArn }
  ContainerRepositoryUri:
    Description: ECR repository URI
    Value: !GetAtt ContainerRepository.RepositoryUri
    Export: { Name: StocksCore-ContainerRepositoryUri }
  CodeBucketName:
    Description: S3 bucket for Lambda code
    Value: !Ref CodeBucket
    Export: { Name: StocksCore-CodeBucketName }
