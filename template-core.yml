AWSTemplateFormatVersion: '2010-09-09'
Description: Core infrastructure stack â€“ IAM, Network, Storage, Bastion, auto-shutdown, ECR registry, and S3 code bucket

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr1:
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnetCidr2:
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnetCidr1:
    Type: String
    Default: "10.0.101.0/24"
  PrivateSubnetCidr2:
    Type: String
    Default: "10.0.102.0/24"

Resources:
  ### IAM & VPC Core ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-admin-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  StocksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: stocks-vpc

  StocksIGW:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: StocksIGW
    Properties:
      VpcId: !Ref StocksVPC
      InternetGatewayId: !Ref StocksIGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StocksIGW

  PubSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PubSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatEIP
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Lambda SG in stocks VPC"
      VpcId: !Ref StocksVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ### Bastion for SSM port-forwarding ###
  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionInstanceRole

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref StocksVPC
      GroupDescription: Bastion host SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0c94855ba95c71c99  # Amazon Linux 2 (us-east-1)
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref BastionInstanceProfile
      Tags:
        - Key: Name
          Value: stocks-bastion
      UserData: !Base64 |
        #!/bin/bash
        set -eux
        yum update -y
        yum install -y jq postgresql
        aws configure set region us-east-1
        
        # Fetch DB credentials and connection info
        CREDS=$(aws secretsmanager get-secret-value \
          --secret-id stocks-db-credentials \
          --query SecretString --output text)
        DB_USER=$(echo "$CREDS" | jq -r .username)
        DB_PASSWORD=$(echo "$CREDS" | jq -r .password)
        STACK_NAME=stocks-db-lambda-stack
        DB_HOST=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" \
          --output text)
        DB_PORT=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" \
          --output text)
        DB_NAME=stocks
        
        # Configure psql access via .pgpass
        echo "$DB_HOST:$DB_PORT:$DB_NAME:$DB_USER:$DB_PASSWORD" > /home/ec2-user/.pgpass
        chmod 600 /home/ec2-user/.pgpass
        chown ec2-user:ec2-user /home/ec2-user/.pgpass
        
        # Add environment variables to bash profile
        cat << 'EOF' >> /home/ec2-user/.bash_profile
        export AWS_DEFAULT_REGION=us-east-1
        export DB_HOST=$DB_HOST
        export DB_PORT=$DB_PORT
        export DB_USER=$DB_USER
        export DB_NAME=$DB_NAME
        export PGHOST=$DB_HOST
        export PGPORT=$DB_PORT
        export PGUSER=$DB_USER
        export PGDATABASE=$DB_NAME
        EOF
        chown ec2-user:ec2-user /home/ec2-user/.bash_profile

  ### Lambda + EventBridge to stop bastion at 6 PM CT (23:00 UTC) ###
  BastionStopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StopBastion
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ec2:StopInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${BastionHost}

  BastionStopFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BastionStopRole.Arn
      Environment:
        Variables:
          BASTION_ID: !Ref BastionHost
      Code:
        ZipFile: |
          import boto3, os
          ec2 = boto3.client('ec2')
          def handler(event, context):
              ec2.stop_instances(InstanceIds=[os.environ['BASTION_ID']])

  BastionStopRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Daily stop of bastion at 6 PM CT"
      ScheduleExpression: cron(0 23 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt BastionStopFunction.Arn
          Id: StopBastionTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BastionStopFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BastionStopRule.Arn

  ### New: ECR Container Registry ###
  ContainerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: stocks-app-registry
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Expire images older than 30 days",
                "selection": {
                  "tagStatus": "any",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  ### New: S3 bucket for Lambda code ###
  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: stocks-algo-app-code
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref StocksVPC
    Export:
      Name: StocksCore-VpcId

  PublicSubnet1Id:
    Description: First public subnet
    Value: !Ref PublicSubnet1
    Export:
      Name: StocksCore-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Second public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: StocksCore-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: First private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: StocksCore-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: StocksCore-PrivateSubnet2Id

  LambdaSecurityGroupId:
    Description: SG for VPC Lambdas
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: StocksCore-LambdaSecurityGroupId

  LambdaExecutionRoleArn:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: StocksCore-LambdaExecutionRoleArn

  ContainerRepositoryUri:
    Description: ECR repository URI
    Value: !GetAtt ContainerRepository.RepositoryUri
    Export:
      Name: StocksCore-ContainerRepositoryUri

  CodeBucketName:
    Description: S3 bucket for Lambda code
    Value: !Ref CodeBucket
    Export:
      Name: StocksCore-CodeBucketName
