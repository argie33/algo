AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Core infrastructure stack â€“ IAM, VPC, Subnets, Internet Gateway, Bastion host (Spot ASG),
  auto-shutdown Lambda, ECR registry, S3 code bucket.
  **NAT Gateway removed to save cost** (private subnets will egress via IGW or NAT).

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr1:
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnetCidr2:
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnetCidr1:
    Type: String
    Default: "10.0.101.0/24"
  PrivateSubnetCidr2:
    Type: String
    Default: "10.0.102.0/24"
  DBStackName:
    Type: String
    Default: "stocks-db-lambda-stack"
  DBSecretName:
    Type: String
    Default: "stocks-db-credentials"

Resources:

  ### 1) OIDC provider for GitHub Actions ###
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1

  ### 2) Role that GitHub Actions will assume ###
  GitHubActionsDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GitHubActionsDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
              StringLike:
                "token.actions.githubusercontent.com:sub": "repo:*/*:ref:refs/heads/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ### 3) Lambda execution role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-admin-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ### 4) VPC & Networking ###
  StocksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: stocks-vpc

  StocksIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: stocks-igw

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StocksVPC
      InternetGatewayId: !Ref StocksIGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: stocks-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: stocks-public-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC
      Tags:
        - Key: Name
          Value: stocks-public-rt

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StocksIGW

  PublicSubnetRouteAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: stocks-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: stocks-private-2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC
      Tags:
        - Key: Name
          Value: stocks-private-rt

  PrivateSubnetRouteAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ### 5) Lambda Security Group ###
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda SG in stocks VPC
      VpcId: !Ref StocksVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  ### 6) Bastion host (Spot ASG) ###
  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: BastionCFNAndSecretAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DBStackName}/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBSecretName}*

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionInstanceRole

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion host SG (SSH/HTTPS in, all out)
      VpcId: !Ref StocksVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0abcdef1234567890   # Replace with your AMI
      IamInstanceProfile: !Ref BastionInstanceProfile
      SecurityGroups:
        - !Ref BastionSecurityGroup

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref BastionLaunchConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: stocks-bastion
          PropagateAtLaunch: true

  ### 7) Auto-shutdown Lambda ###
  ShutdownFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AutoScalingReadOnlyAccess

  AutoShutdownFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: shutdown-bastion
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ShutdownFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          def handler(event, context):
              boto3.client('autoscaling').update_auto_scaling_group(
                  AutoScalingGroupName='stocks-bastion-asg',
                  MinSize=0,
                  DesiredCapacity=0
              )

  ShutdownEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt AutoShutdownFunction.Arn
          Id: StopBastion

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutoShutdownFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ShutdownEventRule.Arn

  ### 8) ECR Registry ###
  ECRRegistry:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: stocks-app-registry

  ### 9) S3 Code Bucket ###
  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-code"

Outputs:
  VpcId:
    Value: !Ref StocksVPC
    Export:
      Name: StocksCore-VpcId
  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
    Export:
      Name: StocksCore-PublicSubnet1Id
  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
    Export:
      Name: StocksCore-PublicSubnet2Id
  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1
    Export:
      Name: StocksCore-PrivateSubnet1Id
  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2
    Export:
      Name: StocksCore-PrivateSubnet2Id
  WebIdentityProviderArn:
    Value: !Ref GitHubOidcProvider
    Export:
      Name: StocksCore-WebIdentityProviderArn
  DeployRoleArn:
    Value: !GetAtt GitHubActionsDeployRole.Arn
    Export:
      Name: StocksCore-GitHubActionsDeployRoleArn
  BastionSecurityGroupId:
    Value: !Ref BastionSecurityGroup
    Export:
      Name: StocksCore-BastionSecurityGroupId
