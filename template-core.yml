AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Core infrastructure stack â€“ VPC, Subnets, Internet Gateway, Bastion host (Spot ASG),
  auto-shutdown Lambda, ECR registry, and S3 code bucket.
  **NAT Gateway removed to save cost**.

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnetCidr1:
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnetCidr2:
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnetCidr1:
    Type: String
    Default: "10.0.101.0/24"
  PrivateSubnetCidr2:
    Type: String
    Default: "10.0.102.0/24"
  DBStackName:
    Type: String
    Default: "stocks-db-lambda-stack"
  DBSecretName:
    Type: String
    Default: "stocks-db-secrets"
  BastionInstanceType:
    Type: String
    Default: "t3.micro"
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type for the Bastion host
  BastionAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
    Description: SSM Parameter path for the latest Amazon Linux 2 AMI

Resources:

  ### 1) Lambda execution role ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-admin-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ### 2) VPC & Networking ###
  StocksVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: stocks-vpc

  StocksIGW:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref StocksVPC
      InternetGatewayId: !Ref StocksIGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref StocksIGW

  PubSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PubSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StocksVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StocksVPC

  PrivSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ### 3) Bastion host (Spot ASG) ###
  BastionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: BastionCFNAndSecretAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DBStackName}/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DBSecretName}*

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionInstanceRole

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref StocksVPC
      GroupDescription: Bastion host SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: stocks-bastion-lt
      LaunchTemplateData:
        InstanceType: !Ref BastionInstanceType
        ImageId: !Ref BastionAmiId
        IamInstanceProfile:
          Name: !Ref BastionInstanceProfile
        SecurityGroupIds:
          - !Ref BastionSecurityGroup
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
        UserData:
          Fn::Base64: |
            #!/bin/bash
            set -eux

            # single-step install of Postgres client 10
            amazon-linux-extras install -y postgresql10

            # install the correct psql client, plus jq & AWS CLI
            yum install -y awscli jq

            # Configure AWS region
            aws configure set region ${AWS::Region}

            # Fetch DB credentials
            CREDS=$(aws secretsmanager get-secret-value \
              --secret-id "${DBSecretName}" \
              --query SecretString --output text)
            DB_USER=$(echo "$CREDS" | jq -r .username)
            DB_PASSWORD=$(echo "$CREDS" | jq -r .password)
            DB_NAME=$(echo "$CREDS" | jq -r .dbname)

            # Fetch DB endpoint & port
            DB_HOST=$(aws cloudformation describe-stacks \
              --stack-name "${DBStackName}" \
              --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" \
              --output text)
            DB_PORT=$(aws cloudformation describe-stacks \
              --stack-name "${DBStackName}" \
              --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" \
              --output text)

            # Write .pgpass for psql access
            cat <<EOF > /home/ec2-user/.pgpass
            $DB_HOST:$DB_PORT:$DB_NAME:$DB_USER:$DB_PASSWORD
            EOF
            chmod 600 /home/ec2-user/.pgpass
            chown ec2-user:ec2-user /home/ec2-user/.pgpass

  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: stocks-bastion-asg
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: !GetAtt BastionLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: stocks-bastion
          PropagateAtLaunch: true

  ### 4) Auto-shutdown Lambda ###
  BastionStopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StopBastion
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:UpdateAutoScalingGroup
                Resource: '*'

  BastionStopFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BastionStopRole.Arn
      Code:
        ZipFile: |
          import boto3, os
          client = boto3.client('autoscaling')
          def handler(event, context):
              client.update_auto_scaling_group(
                  AutoScalingGroupName=os.environ['ASG_NAME'],
                  MinSize=0,
                  DesiredCapacity=0
              )
      Environment:
        Variables:
          ASG_NAME: stocks-bastion-asg

  BastionStopRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scale bastion down at 6 PM CT daily
      ScheduleExpression: cron(0 23 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt BastionStopFunction.Arn
          Id: StopBastionTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BastionStopFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BastionStopRule.Arn

  ### 5) ECR Registry ###
  ContainerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: stocks-app-registry
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules":[
              {
                "rulePriority":1,
                "selection":{ "tagStatus":"any","countType":"sinceImagePushed","countUnit":"days","countNumber":30 },
                "action":{"type":"expire"}
              }
            ]
          }

  ### 6) S3 Code Bucket ###
  CodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: stocks-algo-app-code
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

Outputs:
  VpcId:
    Value: !Ref StocksVPC
    Export:
      Name: StocksCore-VpcId

  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
    Export:
      Name: StocksCore-PublicSubnet1Id

  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
    Export:
      Name: StocksCore-PublicSubnet2Id

  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1
    Export:
      Name: StocksCore-PrivateSubnet1Id

  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2
    Export:
      Name: StocksCore-PrivateSubnet2Id

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: StocksCore-LambdaExecutionRoleArn

  ContainerRepositoryUri:
    Value: !GetAtt ContainerRepository.RepositoryUri
    Export:
      Name: StocksCore-ContainerRepositoryUri

  CodeBucketName:
    Value: !Ref CodeBucket
    Export:
      Name: StocksCore-CodeBucketName

  BastionSecurityGroupId:
    Value: !Ref BastionSecurityGroup
    Export:
      Name: StocksCore-BastionSecurityGroupId
