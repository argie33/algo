AWSTemplateFormatVersion: '2010-09-09'
Description: Webapp Database initialization using ECS task (runs only when database schema changes)

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming

  WebappDBInitImageTag:
    Type: String
    Description: Docker image tag for webapp database initialization
    Default: latest

Resources:
  # Log Group for Webapp DB Init
  WebappDBInitLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/webapp-db-init-${EnvironmentName}'
      RetentionInDays: 14

  # Task Definition for Webapp DB Initialization
  WebappDBInitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'webapp-db-init-${EnvironmentName}'
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ExecutionRoleArn: !ImportValue StocksApp-TaskExecutionRoleArn
      TaskRoleArn: !ImportValue StocksApp-TaskExecutionRoleArn
      ContainerDefinitions:
        - Name: webapp-db-init
          Image: !Join [":", [!ImportValue StocksCore-ContainerRepositoryUri, !Ref WebappDBInitImageTag]]
          Essential: true
          Environment:
            - Name: DB_SECRET_ARN
              Value: !ImportValue StocksApp-SecretArn
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebappDBInitLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Lambda role for triggering ECS task
  WebappDBInitTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSTaskRunPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !ImportValue StocksApp-TaskExecutionRoleArn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub '${WebappDBInitLogGroup}:*'

  # Lambda function to trigger ECS task
  WebappDBInitTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-webapp-db-init-trigger'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt WebappDBInitTriggerRole.Arn
      Timeout: 900  # 15 minutes
      Environment:
        Variables:
          CLUSTER_ARN: !ImportValue StocksApp-ClusterArn
          TASK_DEFINITION: !Ref WebappDBInitTaskDefinition
          SUBNET_1: !ImportValue StocksCore-PublicSubnet1Id
          SUBNET_2: !ImportValue StocksCore-PublicSubnet2Id
          SECURITY_GROUP: !ImportValue StocksApp-EcsTasksSecurityGroupId
          LOG_GROUP: !Ref WebappDBInitLogGroup
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import time
          import os
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          ecs = boto3.client('ecs')
          logs = boto3.client('logs')
          
          def handler(event, context):
              logger.info(f"Event: {json.dumps(event)}")
              
              try:
                  # Get environment variables
                  cluster_arn = os.environ['CLUSTER_ARN']
                  task_definition = os.environ['TASK_DEFINITION']
                  subnet_1 = os.environ['SUBNET_1']
                  subnet_2 = os.environ['SUBNET_2']
                  security_group = os.environ['SECURITY_GROUP']
                  log_group = os.environ['LOG_GROUP']
                  
                  # Run the ECS task
                  logger.info("Starting webapp database initialization ECS task")
                  response = ecs.run_task(
                      cluster=cluster_arn,
                      taskDefinition=task_definition,
                      launchType='FARGATE',
                      networkConfiguration={
                          'awsvpcConfiguration': {
                              'subnets': [subnet_1, subnet_2],
                              'securityGroups': [security_group],
                              'assignPublicIp': 'ENABLED'
                          }
                      },
                      tags=[
                          {
                              'key': 'Purpose',
                              'value': 'WebappDatabaseInitialization'
                          },
                          {
                              'key': 'Environment',
                              'value': os.environ.get('ENVIRONMENT', 'dev')
                          }
                      ]
                  )
                  
                  if not response['tasks']:
                      raise Exception("Failed to start ECS task")
                  
                  task_arn = response['tasks'][0]['taskArn']
                  logger.info(f"Started ECS task: {task_arn}")
                  
                  # Wait for task to complete
                  waiter = ecs.get_waiter('tasks_stopped')
                  waiter.wait(
                      cluster=cluster_arn,
                      tasks=[task_arn],
                      WaiterConfig={
                          'Delay': 15,
                          'MaxAttempts': 60  # 15 minutes max
                      }
                  )
                  
                  # Check task status
                  tasks = ecs.describe_tasks(
                      cluster=cluster_arn,
                      tasks=[task_arn]
                  )
                  
                  if tasks['tasks']:
                      task = tasks['tasks'][0]
                      exit_code = task.get('containers', [{}])[0].get('exitCode', -1)
                      
                      if exit_code == 0:
                          logger.info("Webapp database initialization completed successfully")
                          return {
                              'statusCode': 200,
                              'body': json.dumps({
                                  'message': 'Database initialization completed successfully',
                                  'taskArn': task_arn,
                                  'exitCode': exit_code
                              })
                          }
                      else:
                          # Get recent logs for debugging
                          try:
                              log_events = logs.get_log_events(
                                  logGroupName=log_group,
                                  logStreamName=f"ecs/webapp-db-init/{task_arn.split('/')[-1]}",
                                  limit=20
                              )
                              recent_logs = [event['message'] for event in log_events['events'][-10:]]
                              logger.error(f"Recent logs: {recent_logs}")
                          except Exception as log_error:
                              logger.warning(f"Could not retrieve logs: {log_error}")
                          
                          raise Exception(f"Task failed with exit code: {exit_code}")
                  else:
                      raise Exception("Task not found")
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Database initialization failed'
                      })
                  }

Outputs:
  WebappDBInitTaskDefinitionArn:
    Description: ARN of the webapp DB initialization task definition
    Value: !Ref WebappDBInitTaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-WebappDBInitTaskDefArn'
  
  WebappDBInitLogGroup:
    Description: CloudWatch log group for webapp DB initialization
    Value: !Ref WebappDBInitLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-WebappDBInitLogGroup'

  WebappDBInitTriggerFunctionArn:
    Description: ARN of the Lambda function that triggers webapp DB initialization
    Value: !GetAtt WebappDBInitTriggerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebappDBInitTriggerFunctionArn'