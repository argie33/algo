AWSTemplateFormatVersion: '2010-09-09'
Description: Infra stack – RDS, Secrets, Lambda (symbols-loader), ECS cluster.

Parameters:
  # NEW – the ZIP key created by the workflow
  CodeKey:
    Type: String
    Description: S3 key for the symbols-loader Lambda zip (e.g. loadstocksymbols-<SHA>.zip)

  RDSUsername:
    Type: String
    Description: RDS master username
  RDSPassword:
    Type: String
    NoEcho: true
    Description: RDS master password
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: VPC CIDR for DB & ECS SG ingress

Resources:
  # …(DB subnet group, SG, RDS, secret – unchanged)…

  LoadStockSymbolsFunction:
    Type: AWS::Lambda::Function
    DependsOn: [StocksDBInstance, DBCredentialsSecret]
    Properties:
      FunctionName: loadstocksymbols
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName    # bucket exported by core stack
        S3Key:   !Ref CodeKey                              # <-- now driven by parameter
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBCredentialsSecret

  StocksEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: stocks-cluster

Outputs:
  ClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt StocksEcsCluster.Arn
    Export:
      Name: StocksInfra-ClusterArn

  SecretArn:
    Description: DB credentials secret ARN
    Value: !Ref DBCredentialsSecret
    Export:
      Name: StocksInfra-SecretArn

  DBSecurityGroupId:
    Description: Security Group for RDS & ECS tasks
    Value: !Ref StocksDBSecurityGroup
    Export:
      Name: StocksInfra-DBSecurityGroupId
