AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infra stack â€“ RDS instance & subnet group, SecretsManager DB secret,
  Lambda (symbols-loader), and ECS Cluster only.

Parameters:
  CodeKey:
    Type: String
    Description: S3 key of the symbols-loader Lambda ZIP
  RDSUsername:
    Type: String
    Description: RDS master username
  RDSPassword:
    Type: String
    NoEcho: true
    Description: RDS master password
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: VPC CIDR for DB & ECS SG ingress

Resources:

  StocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private subnets for RDS
      SubnetIds:
        - !ImportValue StocksCore-PrivateSubnet1Id
        - !ImportValue StocksCore-PrivateSubnet2Id

  StocksDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres access
      VpcId: !ImportValue StocksCore-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCidr

  StocksDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - StocksDBSubnetGroup
      - StocksDBSecurityGroup
    Properties:
      DBInstanceIdentifier: stocks
      DBName: stocks
      Engine: postgres
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      VPCSecurityGroups: [ !Ref StocksDBSecurityGroup ]
      DBSubnetGroupName: !Ref StocksDBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false

  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: StocksDBInstance
    Properties:
      Name: stocks-db-credentials
      Description: JSON with username, password, host, port, dbname
      SecretString:
        Fn::Join:
          - ""
          - - '{"username":"'
            - !Ref RDSUsername
            - '","password":"'
            - !Ref RDSPassword
            - '","host":"'
            - !GetAtt StocksDBInstance.Endpoint.Address
            - '","port":"'
            - !GetAtt StocksDBInstance.Endpoint.Port
            - '","dbname":"stocks"}'

  LoadStockSymbolsFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - StocksDBInstance
      - DBCredentialsSecret
    Properties:
      FunctionName: loadstocksymbols
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref CodeKey
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBCredentialsSecret

  StocksEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: stocks-cluster

Outputs:
  ClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt StocksEcsCluster.Arn
    Export:
      Name: StocksInfra-ClusterArn

  SecretArn:
    Description: DB credentials secret ARN
    Value: !Ref DBCredentialsSecret
    Export:
      Name: StocksInfra-SecretArn

  DBSecurityGroupId:
    Description: Security Group for RDS & ECS tasks
    Value: !Ref StocksDBSecurityGroup
    Export:
      Name: StocksInfra-DBSecurityGroupId
