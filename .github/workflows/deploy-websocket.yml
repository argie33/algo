name: Deploy WebSocket Real-time Data Stack

on:
  push:
    branches:
      - '*'
    paths:
      - 'template-realtime-websocket.yml'
      - '.github/workflows/deploy-websocket.yml'
      - 'webapp/frontend/src/services/liveDataService.js'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy

jobs:
  deploy-websocket:
    name: Deploy WebSocket Stack
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get CloudFormation templates bucket from core stack
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "Using S3 bucket: $BUCKET"

      - name: Check and handle stack state
        id: check-stack
        run: |
          # Check if stack exists and its state
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-websocket-stack-v2 \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          echo "STACK_STATUS=$STACK_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ]; then
            echo "Stack is in failed state ($STACK_STATUS), deleting it first..."
            aws cloudformation delete-stack --stack-name stocks-websocket-stack-v2
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name stocks-websocket-stack-v2
            echo "Stack deleted successfully"
          elif [ "$STACK_STATUS" = "DELETE_IN_PROGRESS" ]; then
            echo "Stack is being deleted, waiting for completion..."
            aws cloudformation wait stack-delete-complete --stack-name stocks-websocket-stack-v2
            echo "Stack deletion completed"
          fi

      - name: Deploy WebSocket stack
        run: |
          # Check if template is small enough to deploy directly
          TEMPLATE_SIZE=$(wc -c < template-realtime-websocket.yml)
          echo "Template size: $TEMPLATE_SIZE bytes"
          
          if [ $TEMPLATE_SIZE -lt 51200 ]; then
            echo "Template is small enough, deploying directly without S3..."
            aws cloudformation deploy \
              --stack-name stocks-websocket-stack-v2 \
              --template-file template-realtime-websocket.yml \
              --parameter-overrides \
                Environment=dev \
              --capabilities CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changeset
          else
            echo "Template is large, using S3 bucket..."
            aws cloudformation deploy \
              --stack-name stocks-websocket-stack-v2 \
              --template-file template-realtime-websocket.yml \
              --parameter-overrides \
                Environment=dev \
              --capabilities CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changeset \
              --s3-bucket ${{ steps.bucket.outputs.CF_BUCKET }}
          fi

      - name: Get WebSocket API endpoint
        id: websocket
        run: |
          ENDPOINT=$(aws cloudformation list-exports \
            --query "Exports[?Name=='stocks-websocket-stack-WebSocketApiEndpoint'].Value" \
            --output text)
          echo "WEBSOCKET_ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
          echo "WebSocket endpoint: $ENDPOINT"

      - name: Update frontend environment with WebSocket endpoint
        run: |
          # Update the frontend .env file with the WebSocket endpoint
          echo "REACT_APP_WS_URL=${{ steps.websocket.outputs.WEBSOCKET_ENDPOINT }}" >> webapp/frontend/.env
          echo "REACT_APP_AUTO_CONNECT_WS=true" >> webapp/frontend/.env
          echo "Updated frontend environment with WebSocket endpoint"

      - name: Test WebSocket endpoint
        run: |
          ENDPOINT="${{ steps.websocket.outputs.WEBSOCKET_ENDPOINT }}"
          if [ -n "$ENDPOINT" ] && [ "$ENDPOINT" != "None" ]; then
            echo "‚úÖ WebSocket endpoint is available: $ENDPOINT"
            
            # Test if the endpoint is accessible (basic connectivity test)
            # Note: This is a basic test - full WebSocket testing would require more complex setup
            HTTP_ENDPOINT=$(echo $ENDPOINT | sed 's/wss:/https:/' | sed 's/ws:/http:/')
            
            # Test the health of the API Gateway
            if curl -s -f "${HTTP_ENDPOINT%/*}/health" >/dev/null 2>&1; then
              echo "‚úÖ API Gateway is responding"
            else
              echo "‚ö†Ô∏è  API Gateway health check failed, but WebSocket may still work"
            fi
          else
            echo "‚ùå WebSocket endpoint not found"
            exit 1
          fi

      - name: Display deployment summary
        run: |
          echo "üöÄ WebSocket Real-time Data Stack Deployment Summary"
          echo "=================================================="
          echo "Stack Name: stocks-websocket-stack"
          echo "WebSocket Endpoint: ${{ steps.websocket.outputs.WEBSOCKET_ENDPOINT }}"
          echo "Environment: dev"
          echo "Region: ${{ env.AWS_REGION }}"
          echo ""
          echo "‚úÖ Deployment completed successfully!"
          echo ""
          echo "Next steps:"
          echo "1. Frontend will automatically connect to WebSocket"
          echo "2. Market data will stream every 5 seconds"
          echo "3. Subscribe to symbols via WebSocket API"
          echo "4. Monitor ElastiCache and DynamoDB for performance"