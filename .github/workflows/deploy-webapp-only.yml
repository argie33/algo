name: Deploy Webapp Only

on:
  push:
    branches: [ main, loaddata ]
    paths:
      - 'webapp/**'
      - '!webapp/../**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy-webapp

jobs:
  deploy-webapp:
    name: Deploy Webapp
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: webapp/lambda/package-lock.json
      
      - name: Install Lambda dependencies
        run: |
          cd webapp/lambda
          npm ci
      
      - name: Get database secret ARN
        id: db-config
        run: |
          echo "üîç Looking for database secret ARN..."
          
          # Try CloudFormation exports first (most reliable)
          DB_SECRET_ARN=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-SecretArn'].Value | [0]" \
            --output text \
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
          
          # If not found, try common patterns
          if [ "$DB_SECRET_ARN" = "None" ] || [ -z "$DB_SECRET_ARN" ]; then
            echo "‚ö†Ô∏è Not found in CloudFormation exports, searching secrets..."
            POSSIBLE_PATTERNS=("stocks-db-secrets" "rds-db-credentials" "financial-dashboard-db")
            for pattern in "${POSSIBLE_PATTERNS[@]}"; do
              DB_SECRET_ARN=$(aws secretsmanager list-secrets \
                --query "SecretList[?contains(Name, '${pattern}')].ARN | [0]" \
                --output text \
                --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
              
              if [ "$DB_SECRET_ARN" != "None" ] && [ -n "$DB_SECRET_ARN" ]; then
                echo "‚úÖ Found database secret: $DB_SECRET_ARN"
                break
              fi
            done
          else
            echo "‚úÖ Found database secret from CloudFormation: $DB_SECRET_ARN"
          fi
          
          if [ "$DB_SECRET_ARN" = "None" ] || [ -z "$DB_SECRET_ARN" ]; then
            echo "‚ùå Database secret not found!"
            echo "Please ensure the stocks-app CloudFormation stack is deployed."
            exit 1
          fi
          
          echo "DB_SECRET_ARN=$DB_SECRET_ARN" >> $GITHUB_OUTPUT
      
      - name: Package Lambda function
        run: |
          cd webapp/lambda
          echo "üì¶ Creating Lambda deployment package..."
          zip -r ../lambda-package.zip . -x "*.git*" "node_modules/.cache/*" "*.log"
          echo "‚úÖ Lambda package created: $(ls -lh ../lambda-package.zip)"
      
      - name: Deploy Lambda function
        run: |
          cd webapp
          
          FUNCTION_NAME="financial-dashboard-api-dev"
          DB_SECRET_ARN="${{ steps.db-config.outputs.DB_SECRET_ARN }}"
          
          echo "üöÄ Deploying Lambda function: $FUNCTION_NAME"
          echo "üîê Using database secret: $DB_SECRET_ARN"
          
          # Check if function exists
          if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
            echo "üìù Updating existing Lambda function..."
            
            # Update function code
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://lambda-package.zip \
              --region ${{ env.AWS_REGION }}
            
            # Update environment variables with correct DB secret
            aws lambda update-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --environment Variables="{NODE_ENV=production,DB_SECRET_ARN=$DB_SECRET_ARN,WEBAPP_AWS_REGION=${{ env.AWS_REGION }}}" \
              --region ${{ env.AWS_REGION }}
            
            echo "‚úÖ Lambda function updated successfully"
          else
            echo "‚ùå Lambda function $FUNCTION_NAME does not exist!"
            echo "Please create the function first or check the function name."
            exit 1
          fi
      
      - name: Wait for deployment to propagate
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30
      
      - name: Test API endpoints
        run: |
          API_URL="https://ye9syrnj8c.execute-api.us-east-1.amazonaws.com/dev"
          
          echo "üß™ Testing API endpoints..."
          
          # Test health endpoint
          echo "Testing $API_URL/health"
          HEALTH_RESPONSE=$(curl -s "$API_URL/health" || echo "Failed")
          echo "Health response: $HEALTH_RESPONSE"
          
          # Test stocks endpoint
          echo "Testing $API_URL/api/stocks?limit=2"
          STOCKS_RESPONSE=$(curl -s "$API_URL/api/stocks?limit=2" || echo "Failed")
          echo "Stocks response: $STOCKS_RESPONSE"
          
          # Test technical endpoint
          echo "Testing $API_URL/technical/daily?limit=2"
          TECHNICAL_RESPONSE=$(curl -s "$API_URL/technical/daily?limit=2" || echo "Failed")
          echo "Technical response: $TECHNICAL_RESPONSE"
      
      - name: Build and deploy frontend
        run: |
          cd webapp/frontend
          
          echo "üì¶ Installing frontend dependencies..."
          npm ci
          
          echo "üèóÔ∏è Building frontend..."
          npm run build
          
          echo "‚úÖ Frontend built successfully"
          echo "üìÅ Build output:"
          ls -la dist/
      
      - name: Deployment summary
        run: |
          echo "üéâ Webapp deployment completed!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "  üîó API Gateway: https://ye9syrnj8c.execute-api.us-east-1.amazonaws.com/dev"
          echo "  üåê CloudFront: https://d3l4xs591x8ev6.cloudfront.net"
          echo "  üíæ Database Secret: ${{ steps.db-config.outputs.DB_SECRET_ARN }}"
          echo ""
          echo "üîç Next steps:"
          echo "  1. Test your Stock Explorer page"
          echo "  2. Test your Technical Analysis page" 
          echo "  3. Verify API keys and user profile pages"