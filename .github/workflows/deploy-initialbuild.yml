name: Deploy InitialBuild Branch

on:
  push:
    branches: [ initialbuild ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  STACK_NAME: stocks-webapp-initialbuild
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy-initialbuild

      - name: Get infrastructure parameters
        id: params
        run: |
          DB_SECRET_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-SecretArn'].Value" --output text)
          DB_ENDPOINT=$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-DBEndpoint'].Value" --output text)
          API_KEY_SECRET_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ApiKeyEncryptionSecretArn'].Value" --output text)
          
          echo "DB_SECRET_ARN=$DB_SECRET_ARN" >> $GITHUB_OUTPUT
          echo "DB_ENDPOINT=$DB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "API_KEY_SECRET_ARN=$API_KEY_SECRET_ARN" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Infrastructure parameters:"
          echo "  DB_SECRET_ARN: $DB_SECRET_ARN"
          echo "  DB_ENDPOINT: $DB_ENDPOINT"
          echo "  API_KEY_SECRET_ARN: $API_KEY_SECRET_ARN"

      - name: Deploy Lambda webapp
        run: |
          echo "üöÄ Deploying Lambda webapp for initialbuild branch..."
          
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file template-webapp-lambda.yml \
            --parameter-overrides \
              DatabaseSecretArn=${{ steps.params.outputs.DB_SECRET_ARN }} \
              DatabaseEndpoint=${{ steps.params.outputs.DB_ENDPOINT }} \
              EnvironmentName=${{ env.ENVIRONMENT }} \
              FrontendProdUrl="https://d1zb7knau41vl9.cloudfront.net" \
              IncludeDevUrls=true \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Get deployment outputs
        id: outputs
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
            --output text)
          
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionName'].OutputValue" \
            --output text)
          
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "FUNCTION_NAME=$FUNCTION_NAME" >> $GITHUB_OUTPUT
          
          echo "üìã Deployment outputs:"
          echo "  API_URL: $API_URL"
          echo "  FUNCTION_NAME: $FUNCTION_NAME"

      - name: Update Lambda function code
        run: |
          echo "üì¶ Updating Lambda function code..."
          cd webapp/lambda
          
          # Create deployment package
          zip -r ../../lambda-deployment.zip . \
            -x "node_modules/*" \
            -x "*.git*" \
            -x "*.DS_Store*" \
            -x "tests/*" \
            -x "coverage/*"
          
          cd ../..
          
          # Update function code
          if [ -n "${{ steps.outputs.outputs.FUNCTION_NAME }}" ]; then
            aws lambda update-function-code \
              --function-name ${{ steps.outputs.outputs.FUNCTION_NAME }} \
              --zip-file fileb://lambda-deployment.zip \
              --region ${{ env.AWS_REGION }}
            
            echo "‚è≥ Waiting for function update to complete..."
            aws lambda wait function-updated \
              --function-name ${{ steps.outputs.outputs.FUNCTION_NAME }} \
              --region ${{ env.AWS_REGION }}
          else
            echo "‚ö†Ô∏è Function name not found in outputs"
          fi
          
          rm -f lambda-deployment.zip

      - name: Test API deployment
        run: |
          echo "üß™ Testing API deployment..."
          
          if [ -n "${{ steps.outputs.outputs.API_URL }}" ]; then
            # Test basic health endpoint
            echo "Testing health endpoint..."
            curl -v -H "Origin: https://d1zb7knau41vl9.cloudfront.net" \
              "${{ steps.outputs.outputs.API_URL }}/health" || true
            
            # Test OPTIONS preflight request
            echo "Testing OPTIONS preflight..."
            curl -v -X OPTIONS \
              -H "Origin: https://d1zb7knau41vl9.cloudfront.net" \
              -H "Access-Control-Request-Method: GET" \
              -H "Access-Control-Request-Headers: Content-Type,Authorization" \
              "${{ steps.outputs.outputs.API_URL }}/health" || true
          else
            echo "‚ö†Ô∏è API URL not found in outputs"
          fi

      - name: Summary
        run: |
          echo "üéâ InitialBuild deployment complete!"
          echo ""
          echo "üì° API Gateway URL: ${{ steps.outputs.outputs.API_URL }}"
          echo "üîß Lambda Function: ${{ steps.outputs.outputs.FUNCTION_NAME }}"
          echo ""
          echo "üß™ Test your API:"
          echo "  curl -H \"Origin: https://d1zb7knau41vl9.cloudfront.net\" ${{ steps.outputs.outputs.API_URL }}/health"
          echo ""
          echo "üìù Update your frontend to use the new API URL if needed"