# Pull Request Testing Workflow
#
# Fast testing pipeline for pull requests focused on critical tests
# Complements the main test-automation.yml workflow

name: 🔍 PR Testing Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, loaddata, develop]

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  # Fast testing environment variables
  CI: true
  SKIP_PREFLIGHT_CHECK: true

jobs:
  # Job 1: Quick Code Quality Check
  code-quality:
    name: 🎯 Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies in parallel
        run: |
          cd webapp/frontend && npm ci &
          cd webapp/lambda && npm ci &
          wait

      - name: Run linting
        run: |
          cd webapp/frontend && npm run lint &
          cd webapp/lambda && npm run lint &
          wait

      - name: Run type checking
        run: |
          cd webapp/frontend && npm run typecheck &
          cd webapp/lambda && npm run typecheck &
          wait

      - name: Run formatting check
        run: |
          cd webapp/frontend && npm run format:check &
          cd webapp/lambda && npm run format:check &
          wait

  # Job 2: Critical Unit Tests
  critical-unit-tests:
    name: ⚡ Critical Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Frontend
        if: matrix.component == 'frontend'
        working-directory: ./webapp/frontend
        run: npm ci

      - name: Install dependencies - Backend
        if: matrix.component == 'backend'
        working-directory: ./webapp/lambda
        run: npm ci

      - name: Run critical tests - Frontend
        if: matrix.component == 'frontend'
        working-directory: ./webapp/frontend
        run: npm run test:critical
        env:
          VITE_API_URL: http://localhost:3001

      - name: Run critical tests - Backend
        if: matrix.component == 'backend'
        working-directory: ./webapp/lambda
        run: npm run test:critical
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret
          API_KEY_ENCRYPTION_SECRET: test-encryption-secret-32-characters

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: critical-test-results-${{ matrix.component }}
          path: |
            webapp/${{ matrix.component }}/coverage/
            webapp/${{ matrix.component }}/test-results/
          retention-days: 3

  # Job 3: Security Validation
  security-validation:
    name: 🛡️ Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd webapp/frontend && npm ci &
          cd webapp/lambda && npm ci &
          wait

      - name: Run security audits
        run: |
          cd webapp/frontend && npm audit --audit-level=high &
          cd webapp/lambda && npm audit --audit-level=high &
          wait

      - name: Run security tests
        run: |
          cd webapp/frontend && npm run test:security &
          cd webapp/lambda && npm run test:security &
          wait
        env:
          NODE_ENV: test
          VITE_API_URL: http://localhost:3001
          JWT_SECRET: test-jwt-secret
          API_KEY_ENCRYPTION_SECRET: test-encryption-secret-32-characters

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-validation-results
          path: |
            webapp/frontend/test-results/security/
            webapp/lambda/test-results/security/
          retention-days: 7

  # Job 4: Build Validation
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, critical-unit-tests]
    
    strategy:
      matrix:
        environment: [development, production]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./webapp/frontend
        run: npm ci

      - name: Build for development
        if: matrix.environment == 'development'
        working-directory: ./webapp/frontend
        run: npm run build
        env:
          NODE_ENV: development
          VITE_API_URL: https://jh28jhdp01.execute-api.us-east-1.amazonaws.com/dev

      - name: Build for production
        if: matrix.environment == 'production'
        working-directory: ./webapp/frontend
        run: npm run build-prod
        env:
          NODE_ENV: production

      - name: Validate build artifacts
        working-directory: ./webapp/frontend
        run: |
          # Check if build created dist directory
          test -d dist || (echo "❌ Build failed - no dist directory" && exit 1)
          
          # Check if index.html exists
          test -f dist/index.html || (echo "❌ Build failed - no index.html" && exit 1)
          
          # Check if assets directory exists
          test -d dist/assets || (echo "❌ Build failed - no assets directory" && exit 1)
          
          # Check bundle size (should be reasonable)
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=10485760  # 10MB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "⚠️ Warning: Bundle size ${BUNDLE_SIZE} bytes exceeds ${MAX_SIZE} bytes"
          else
            echo "✅ Bundle size ${BUNDLE_SIZE} bytes is within limits"
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.environment }}
          path: webapp/frontend/dist/
          retention-days: 3

  # Job 5: API Contract Validation
  api-contract-validation:
    name: 📋 API Contract Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [critical-unit-tests, build-validation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: ./webapp/lambda
        run: npm ci

      - name: Run contract tests
        working-directory: ./webapp/lambda
        run: npm run test:contract
        env:
          NODE_ENV: test
          API_BASE_URL: http://localhost:3001
          JWT_SECRET: test-jwt-secret
          API_KEY_ENCRYPTION_SECRET: test-encryption-secret-32-characters

      - name: Generate contract report
        working-directory: ./webapp/lambda
        run: npm run test:contract:report
        if: always()

      - name: Upload contract results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-contract-validation-results
          path: webapp/lambda/test-results/contract-reports/
          retention-days: 7

  # Job 6: PR Summary
  pr-summary:
    name: 📊 PR Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, critical-unit-tests, security-validation, build-validation, api-contract-validation]
    if: always()

    steps:
      - name: Generate PR test summary
        run: |
          echo "# 🔍 PR Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Function to get result emoji
          get_result_emoji() {
            case $1 in
              "success") echo "✅" ;;
              "failure") echo "❌" ;;
              "cancelled") echo "⏭️" ;;
              "skipped") echo "⏭️" ;;
              *) echo "⚠️" ;;
            esac
          }
          
          # Check each job result
          echo "$(get_result_emoji '${{ needs.code-quality.result }}') **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "$(get_result_emoji '${{ needs.critical-unit-tests.result }}') **Critical Unit Tests**: ${{ needs.critical-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "$(get_result_emoji '${{ needs.security-validation.result }}') **Security Validation**: ${{ needs.security-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "$(get_result_emoji '${{ needs.build-validation.result }}') **Build Validation**: ${{ needs.build-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "$(get_result_emoji '${{ needs.api-contract-validation.result }}') **API Contract Validation**: ${{ needs.api-contract-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.critical-unit-tests.result }}" == "success" && 
                "${{ needs.security-validation.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                "${{ needs.api-contract-validation.result }}" == "success" ]]; then
            echo "## ✅ PR Ready for Review" >> $GITHUB_STEP_SUMMARY
            echo "All critical tests passed. This PR is ready for code review." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please review the individual job results and fix issues before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review failed tests and fix any issues" >> $GITHUB_STEP_SUMMARY
          echo "- Request code review if all tests pass" >> $GITHUB_STEP_SUMMARY
          echo "- Full test suite will run on merge to main branch" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 7: Auto-merge Check
  auto-merge-check:
    name: 🤖 Auto-merge Eligibility
    runs-on: ubuntu-latest
    needs: [code-quality, critical-unit-tests, security-validation, build-validation, api-contract-validation]
    if: github.event.pull_request.draft == false && github.actor == 'dependabot[bot]'
    
    steps:
      - name: Check auto-merge eligibility
        run: |
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.critical-unit-tests.result }}" == "success" && 
                "${{ needs.security-validation.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" && 
                "${{ needs.api-contract-validation.result }}" == "success" ]]; then
            echo "✅ PR eligible for auto-merge"
            echo "AUTO_MERGE_ELIGIBLE=true" >> $GITHUB_ENV
          else
            echo "❌ PR not eligible for auto-merge - tests failed"
            echo "AUTO_MERGE_ELIGIBLE=false" >> $GITHUB_ENV
          fi

      - name: Enable auto-merge for Dependabot
        if: env.AUTO_MERGE_ELIGIBLE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '✅ Auto-approved: All tests passed for Dependabot PR'
            });