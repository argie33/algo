name: deploy-app-stocks-redesigned
# Redesigned 2025-07-15 - Efficient data loading with one-time vs recurring separation

on:
  push:
    branches: ['*']
  workflow_dispatch:
    inputs:
      load_type:
        description: 'Type of data load'
        required: true
        default: 'incremental'
        type: choice
        options:
          - 'initial'      # Full historical load
          - 'incremental'  # Daily updates only
          - 'fundamentals' # Regular fundamental data
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  LOAD_TYPE: ${{ github.event.inputs.load_type || 'incremental' }}

jobs:
  ################################################################################
  # 1) Infrastructure and validation
  ################################################################################
  validate-environment:
    name: Validate environment and dependencies
    runs-on: ubuntu-latest
    outputs:
      CF_BUCKET: ${{ steps.bucket.outputs.CF_BUCKET }}
      can_proceed: ${{ steps.validation.outputs.can_proceed }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Validate core infrastructure
        id: validation
        run: |
          echo "Validating core infrastructure..."
          
          # Check if core stack exists
          if ! aws cloudformation describe-stacks --stack-name StocksCore-Stack >/dev/null 2>&1; then
            echo "ERROR: StocksCore-Stack not found"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if app stack exists
          if ! aws cloudformation describe-stacks --stack-name stocks-app-stack >/dev/null 2>&1; then
            echo "ERROR: stocks-app-stack not found"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check database connectivity
          DB_ENDPOINT=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-RDSEndpoint'].Value" \
            --output text)
          
          if [ -z "$DB_ENDPOINT" ]; then
            echo "ERROR: Database endpoint not found"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ All infrastructure validation passed"
          echo "can_proceed=true" >> $GITHUB_OUTPUT

      - name: Get CloudFormation bucket
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT

  ################################################################################
  # 2) Build and push only changed images
  ################################################################################
  build-and-push:
    name: Build and push Docker images
    needs: [validate-environment]
    if: needs.validate-environment.outputs.can_proceed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push loader images
        run: |
          # Create ECR repository if it doesn't exist
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          
          # Get ECR URI
          URI=$(aws ecr describe-repositories \
            --repository-names "$REPO" \
            --query 'repositories[0].repositoryUri' --output text)
          
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin "$URI"
          
          # Build unified loader image
          docker build -t "$URI:data-loader" -f Dockerfile.data-loader .
          docker push "$URI:data-loader"
          
          echo "✅ Images built and pushed successfully"

  ################################################################################
  # 3) Deploy ECS task definitions
  ################################################################################
  deploy-tasks:
    name: Deploy ECS task definitions
    needs: [validate-environment, build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Deploy application stack with task definitions
        run: |
          aws cloudformation deploy \
            --stack-name stocks-app-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --s3-bucket ${{ needs.validate-environment.outputs.CF_BUCKET }}

  ################################################################################
  # 4) One-time initial data loads
  ################################################################################
  initial-data-loads:
    name: Initial data loads (one-time)
    needs: [validate-environment, build-and-push, deploy-tasks]
    if: env.LOAD_TYPE == 'initial'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Run initial symbol loads
        run: |
          echo "Running initial symbol and company data loads..."
          
          # Get cluster name from exports
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run symbols loader
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-symbols \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-symbols","command":["python","loadsymbols.py"]}]}'
          
          echo "✅ Initial symbol loads completed"

      - name: Run initial price loads (full historical)
        run: |
          echo "Running initial price loads (full historical data)..."
          
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run full historical price loads
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-pricedaily \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-pricedaily","command":["python","loadpricedaily.py","--historical"]}]}'
          
          echo "✅ Initial price loads completed"

      - name: Run initial technical loads
        run: |
          echo "Running initial technical indicator loads..."
          
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run full technical indicator calculations
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-technicals \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-technicals","command":["python","loadtechnicals.py","--historical"]}]}'
          
          echo "✅ Initial technical loads completed"

  ################################################################################
  # 5) Regular fundamental data loads
  ################################################################################
  fundamental-data-loads:
    name: Regular fundamental data loads
    needs: [validate-environment, build-and-push, deploy-tasks]
    if: env.LOAD_TYPE == 'fundamentals' || env.LOAD_TYPE == 'incremental'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Run fundamental data loaders
        run: |
          echo "Running fundamental data loaders..."
          
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run fundamental loaders in parallel
          LOADERS=(
            "earnings-estimate:loadearningsestimate.py"
            "earnings-history:loadearningshistory.py"
            "revenue-estimate:loadrevenueestimate.py"
            "financials:loadfinancials.py"
            "analyst-upgrades:loadanalystupgradedowngrade.py"
          )
          
          for loader in "${LOADERS[@]}"; do
            IFS=':' read -r task_suffix script <<< "$loader"
            echo "Running $script..."
            
            aws ecs run-task \
              --cluster "$CLUSTER" \
              --task-definition "stocks-app-$task_suffix" \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
              --overrides "{\"containerOverrides\":[{\"name\":\"stocks-app-$task_suffix\",\"command\":[\"python\",\"$script\"]}]}" &
          done
          
          wait
          echo "✅ Fundamental data loads completed"

  ################################################################################
  # 6) Incremental price and technical loads
  ################################################################################
  incremental-data-loads:
    name: Incremental price and technical loads
    needs: [validate-environment, build-and-push, deploy-tasks]
    if: env.LOAD_TYPE == 'incremental'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Run incremental price loads
        run: |
          echo "Running incremental price loads (recent data only)..."
          
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run incremental price loads
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-pricedaily \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-pricedaily","command":["python","loadpricedaily.py","--incremental"]}]}'
          
          echo "✅ Incremental price loads completed"

      - name: Run incremental technical loads
        run: |
          echo "Running incremental technical loads..."
          
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          # Run incremental technical loads
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-technicals \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-technicals","command":["python","loadtechnicals.py","--incremental"]}]}'
          
          echo "✅ Incremental technical loads completed"

  ################################################################################
  # 7) Data validation and cleanup
  ################################################################################
  validate-data:
    name: Validate data quality
    needs: [initial-data-loads, fundamental-data-loads, incremental-data-loads]
    if: always() && (needs.initial-data-loads.result == 'success' || needs.fundamental-data-loads.result == 'success' || needs.incremental-data-loads.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Validate data quality
        run: |
          echo "Validating data quality..."
          
          # Run data validation script
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ECSClusterName'].Value" \
            --output text)
          
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --task-definition stocks-app-validator \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet1'].Value" --output text),$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-PrivateSubnet2'].Value" --output text)],securityGroups=[$(aws cloudformation list-exports --query "Exports[?Name=='StocksApp-ECSSecurityGroup'].Value" --output text)]}" \
            --overrides '{"containerOverrides":[{"name":"stocks-app-validator","command":["python","validate_data_loaders.py"]}]}'
          
          echo "✅ Data validation completed"

      - name: Update last run status
        run: |
          echo "Updating last run status in database..."
          echo "Load type: ${{ env.LOAD_TYPE }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "✅ Data loading workflow completed successfully"