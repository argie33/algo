name: run-single-task

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to run'
        required: true
        type: choice
        options:
          - symbols
          - symbolsalt
          - econ
          - pricedaily
          - priceweekly
          - pricemonthly
          - latestpricedaily
          - latestpriceweekly
          - latestpricemonthly
          - latesttechnicalsdaily
          - latesttechnicalsweekly
          - latesttechnicalsmonthly
          - technicalsdaily
          - technicalsweekly
          - technicalsmonthly
          - loadinfo
          - earningsestimate
          - earningsmetrics
          - earningshistory
          - revenueestimate
          - swingtrader
          - calendar
          - buyselldaily
          - buysellweekly
          - buysellmonthly
          - naaim
          - aaii
          - feargreed
          - quarterlybalancesheet
          - annualbalancesheet
          - quarterlyincomestatement
          - annualincomestatement
          - quarterlycashflow
          - annualcashflow
          - ttmincomestatement
          - ttmcashflow
          - fundamentalmetrics
          - analystupgradedowngrade
          - financials
          - sentiment
          - technicals
          - market
          - momentum
          - sentiment_realtime
          - positioning
          - qualitymetrics
          - valuemetrics
          - valuescores
          - growthmetrics
          - loadnews

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy

jobs:
  run-task:
    name: Run ${{ github.event.inputs.component }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get task definition mapping
        id: task-mapping
        run: |
          # Map component names to CloudFormation output keys
          case "${{ github.event.inputs.component }}" in
            "symbols") echo "task_output_key=SymbolsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "symbolsalt") echo "task_output_key=SymbolsAltTaskDefArn" >> $GITHUB_OUTPUT ;;
            "econ") echo "task_output_key=EconTaskDefArn" >> $GITHUB_OUTPUT ;;
            "pricedaily") echo "task_output_key=PriceDailyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "priceweekly") echo "task_output_key=PriceWeeklyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "pricemonthly") echo "task_output_key=PriceMonthlyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latestpricedaily") echo "task_output_key=LatestPriceDailyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latestpriceweekly") echo "task_output_key=LatestPriceWeeklyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latestpricemonthly") echo "task_output_key=LatestPriceMonthlyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latesttechnicalsdaily") echo "task_output_key=LatestTechnicalsDailyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latesttechnicalsweekly") echo "task_output_key=LatestTechnicalsWeeklyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "latesttechnicalsmonthly") echo "task_output_key=LatestTechnicalsMonthlyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "technicalsdaily") echo "task_output_key=TechnicalsDailyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "technicalsweekly") echo "task_output_key=TechnicalsWeeklyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "technicalsmonthly") echo "task_output_key=TechnicalsMonthlyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "loadinfo") echo "task_output_key=LoadInfoTaskDefArn" >> $GITHUB_OUTPUT ;;
            "earningsestimate") echo "task_output_key=EarningsEstimateTaskDefArn" >> $GITHUB_OUTPUT ;;
            "earningsmetrics") echo "task_output_key=EarningsMetricsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "earningshistory") echo "task_output_key=EarningsHistoryTaskDefArn" >> $GITHUB_OUTPUT ;;
            "revenueestimate") echo "task_output_key=RevenueEstimateTaskDefArn" >> $GITHUB_OUTPUT ;;
            "swingtrader") echo "task_output_key=SwingTraderTaskDefArn" >> $GITHUB_OUTPUT ;;
            "calendar") echo "task_output_key=CalendarTaskDefArn" >> $GITHUB_OUTPUT ;;
            "buyselldaily") echo "task_output_key=BuySellDailyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "buysellweekly") echo "task_output_key=BuySellWeeklyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "buysellmonthly") echo "task_output_key=BuySellMonthlyTaskDefArn" >> $GITHUB_OUTPUT ;;
            "naaim") echo "task_output_key=NaaimTaskDefArn" >> $GITHUB_OUTPUT ;;
            "aaii") echo "task_output_key=AaiiTaskDefArn" >> $GITHUB_OUTPUT ;;
            "feargreed") echo "task_output_key=FearGreedTaskDefArn" >> $GITHUB_OUTPUT ;;
            "quarterlybalancesheet") echo "task_output_key=QuarterlyBalanceSheetTaskDefArn" >> $GITHUB_OUTPUT ;;
            "annualbalancesheet") echo "task_output_key=AnnualBalanceSheetTaskDefArn" >> $GITHUB_OUTPUT ;;
            "quarterlyincomestatement") echo "task_output_key=QuarterlyIncomeStatementTaskDefArn" >> $GITHUB_OUTPUT ;;
            "annualincomestatement") echo "task_output_key=AnnualIncomeStatementTaskDefArn" >> $GITHUB_OUTPUT ;;
            "quarterlycashflow") echo "task_output_key=QuarterlyCashFlowTaskDefArn" >> $GITHUB_OUTPUT ;;
            "annualcashflow") echo "task_output_key=AnnualCashFlowTaskDefArn" >> $GITHUB_OUTPUT ;;
            "ttmincomestatement") echo "task_output_key=TtmIncomeStatementTaskDefArn" >> $GITHUB_OUTPUT ;;
            "ttmcashflow") echo "task_output_key=TtmCashFlowTaskDefArn" >> $GITHUB_OUTPUT ;;
            "fundamentalmetrics") echo "task_output_key=FundamentalMetricsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "analystupgradedowngrade") echo "task_output_key=AnalystUpgradeDowngradeTaskDefArn" >> $GITHUB_OUTPUT ;;
            "financials") echo "task_output_key=FinancialsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "sentiment") echo "task_output_key=SentimentTaskDefArn" >> $GITHUB_OUTPUT ;;
            "technicals") echo "task_output_key=TechnicalsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "market") echo "task_output_key=MarketTaskDefArn" >> $GITHUB_OUTPUT ;;
            "momentum") echo "task_output_key=MomentumTaskDefArn" >> $GITHUB_OUTPUT ;;
            "sentiment_realtime") echo "task_output_key=SentimentRealtimeTaskDefArn" >> $GITHUB_OUTPUT ;;
            "positioning") echo "task_output_key=PositioningTaskDefArn" >> $GITHUB_OUTPUT ;;
            "qualitymetrics") echo "task_output_key=QualityMetricsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "valuemetrics") echo "task_output_key=ValueMetricsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "valuescores") echo "task_output_key=ValueScoresTaskDefArn" >> $GITHUB_OUTPUT ;;
            "growthmetrics") echo "task_output_key=GrowthMetricsTaskDefArn" >> $GITHUB_OUTPUT ;;
            "loadnews") echo "task_output_key=LoadNewsTaskDefArn" >> $GITHUB_OUTPUT ;;
            *) echo "Unknown component: ${{ github.event.inputs.component }}"; exit 1 ;;
          esac

      - name: Fetch Task Definition ARN
        id: task-def
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='${{ steps.task-mapping.outputs.task_output_key }}'].OutputValue" \
            --output text)
          echo "task_def_arn=$ARN" >> $GITHUB_OUTPUT

      - name: Get cluster and subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation describe-stacks \
            --stack-name stocks-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EcsClusterArn'].OutputValue" \
            --output text)
          SUBNETS=$(aws cloudformation describe-stacks \
            --stack-name stocks-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='DataSubnetIds'].OutputValue" \
            --output text)
          SECURITY_GROUP=$(aws cloudformation describe-stacks \
            --stack-name stocks-app-stack \
            --query "Stacks[0].Outputs[?OutputKey=='DataSecurityGroupId'].OutputValue" \
            --output text)
          echo "cluster=$CLUSTER" >> $GITHUB_OUTPUT
          echo "subnets=$SUBNETS" >> $GITHUB_OUTPUT
          echo "security_group=$SECURITY_GROUP" >> $GITHUB_OUTPUT

      - name: Run ECS Task
        id: run-task
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.cluster }}" \
            --task-definition "${{ steps.task-def.outputs.task_def_arn }}" \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.subnets }}],securityGroups=[${{ steps.infra.outputs.security_group }}],assignPublicIp=DISABLED}" \
            --count 1 \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "Started ECS task: $TASK_ARN"

      - name: Wait for task completion
        run: |
          echo "Waiting for task to complete..."
          aws ecs wait tasks-stopped \
            --cluster "${{ steps.infra.outputs.cluster }}" \
            --tasks "${{ steps.run-task.outputs.task_arn }}"
          
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.cluster }}" \
            --tasks "${{ steps.run-task.outputs.task_arn }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          
          if [[ "$EXIT_CODE" == "0" ]]; then
            echo "Task completed successfully"
          else
            echo "Task failed with exit code: $EXIT_CODE"
            exit 1
          fi