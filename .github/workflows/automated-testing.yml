name: Automated Testing Suite

on:
  push:
    branches: [ main, develop ]
    # Note: initialbuild branch testing handled by deploy-webapp.yml
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run automated tests every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - security
          - react-hooks

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'unit' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Run unit tests
      run: |
        cd webapp/frontend
        npm run test:unit
        
    - name: Generate coverage report
      run: |
        cd webapp/frontend
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./webapp/frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          webapp/frontend/test-results/
          webapp/frontend/coverage/
          
    - name: Configure AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsTestResultsRole
        aws-region: us-east-1
        
    - name: Upload test results to S3
      if: always()
      continue-on-error: true
      run: |
        cd webapp/frontend
        
        # Create simple JSON summary
        TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
        cat > test-summary.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run": "${{ github.run_id }}",
          "commit": "${{ github.sha }}",
          "branch": "${GITHUB_REF#refs/heads/}",
          "success": $([ -f "test-results/results.json" ] && jq -r '.success // false' test-results/results.json || echo "false")
        }
        EOF
        
        # Create upload directory with only essential files
        mkdir -p test-upload
        [ -f "test-results/results.json" ] && cp test-results/results.json test-upload/
        [ -f "test-summary.json" ] && cp test-summary.json test-upload/
        
        # Upload to S3
        BUCKET="algo-test-results-dev-${{ secrets.AWS_ACCOUNT_ID }}"
        aws s3 cp test-upload/ s3://${BUCKET}/unit-tests/${GITHUB_REF#refs/heads/}/${TIMESTAMP}/ --recursive
        
        echo "✅ Test results uploaded to S3"
          
  # Integration Tests - DISABLED: Now handled by deploy-webapp.yml
  integration-tests:
    name: Integration Tests (Disabled - Use deploy-webapp workflow)
    runs-on: ubuntu-latest
    if: false  # Disabled - integration tests now run in deploy-webapp.yml
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Setup test database
      run: |
        cd webapp/lambda
        npm install
        POSTGRES_HOST=localhost POSTGRES_PORT=5432 POSTGRES_DB=testdb POSTGRES_USER=testuser POSTGRES_PASSWORD=testpass node test-db-setup.js
        
    - name: Run integration tests
      run: |
        cd webapp/frontend
        npm run test:integration
      env:
        API_BASE_URL: http://localhost:3000
        TEST_DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: webapp/frontend/test-results/
        
  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Build application
      run: |
        cd webapp/frontend
        npm run build
        
    - name: Install Artillery
      run: npm install -g artillery@latest
      
    - name: Run performance tests
      run: |
        cd webapp/frontend
        npm run test:performance
        
    - name: Run load tests
      run: |
        cd webapp/frontend
        artillery run src/tests/performance/load-test.yml --output load-test-results.json
        
    - name: Generate performance report
      run: |
        cd webapp/frontend
        artillery report load-test-results.json --output performance-report.html
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          webapp/frontend/load-test-results.json
          webapp/frontend/performance-report.html
          
  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'security' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Run security audit
      run: |
        cd webapp/frontend
        npm audit --audit-level=moderate
        
    - name: Run security tests
      run: |
        cd webapp/frontend
        npm run test:security
        
    - name: Install OWASP ZAP
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
        tar -xzf ZAP_2.14.0_Linux.tar.gz
        
    - name: Build and start application
      run: |
        cd webapp/frontend
        npm run build
        npm run preview &
        sleep 30
        
    - name: Run OWASP ZAP security scan
      run: |
        cd ZAP_2.14.0
        ./zap.sh -cmd -quickurl http://localhost:4173 -quickprogress -quickout zap-report.html
        
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          webapp/frontend/test-results/
          ZAP_2.14.0/zap-report.html
          
  # React Hooks Tests
  react-hooks-tests:
    name: React Hooks Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'react-hooks' || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Run React hooks diagnostics
      run: |
        cd webapp/frontend
        npm run debug:react
        
    - name: Run React hooks tests
      run: |
        cd webapp/frontend
        npm run test:unit -- --testNamePattern="React Hooks"
        
    - name: Generate hooks diagnostic report
      run: |
        cd webapp/frontend
        node -e "
          const { runReactHooksDiagnostics } = require('./src/utils/reactHooksDebugger.js');
          runReactHooksDiagnostics().then(report => {
            console.log('React Hooks Diagnostic Report:', JSON.stringify(report, null, 2));
          });
        "
        
    - name: Upload hooks test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: react-hooks-test-results
        path: webapp/frontend/test-results/
        
  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd webapp/frontend
        npm ci
        
    - name: Install Playwright
      run: |
        cd webapp/frontend
        npx playwright install --with-deps chromium
        
    - name: Build application
      run: |
        cd webapp/frontend
        npm run build
        
    - name: Start application
      run: |
        cd webapp/frontend
        npm run preview &
        sleep 30
        
    - name: Run E2E tests
      run: |
        cd webapp/frontend
        npm run test:e2e
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          webapp/frontend/test-results/
          webapp/frontend/playwright-report/
          
  # Comprehensive Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, react-hooks-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate simple test summary
      run: |
        # Create JSON summary
        cat > test-summary.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run": "${{ github.run_id }}",
          "unit_tests": $([ -d "unit-test-results" ] && echo "true" || echo "false"),
          "integration_tests": $([ -d "integration-test-results" ] && echo "true" || echo "false"),
          "performance_tests": $([ -d "performance-test-results" ] && echo "true" || echo "false"),
          "security_tests": $([ -d "security-test-results" ] && echo "true" || echo "false")
        }
        EOF
        echo "Test summary generated"
        
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.json
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
          const passed = Object.values(summary).filter(v => v === true).length;
          const total = Object.keys(summary).filter(k => k.includes('tests')).length;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Test Results\n\n${passed}/${total} test suites completed successfully.\n\nWorkflow: ${summary.workflow_run}`
          });
          
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Evaluate quality gates
      run: |
        echo "Evaluating quality gates..."
        
        # Check if critical tests passed
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "❌ Unit tests failed - blocking deployment"
          exit 1
        fi
        
        if [ "${{ needs.integration-tests.result }}" != "success" ]; then
          echo "❌ Integration tests failed - blocking deployment"
          exit 1
        fi
        
        if [ "${{ needs.security-tests.result }}" != "success" ]; then
          echo "❌ Security tests failed - blocking deployment"
          exit 1
        fi
        
        # Performance tests are warning-only
        if [ "${{ needs.performance-tests.result }}" != "success" ]; then
          echo "⚠️ Performance tests failed - deployment allowed but needs attention"
        fi
        
        echo "✅ All quality gates passed"
        
    - name: Update deployment status
      if: success()
      run: |
        echo "✅ Quality gates passed - deployment approved"
        echo "DEPLOYMENT_APPROVED=true" >> $GITHUB_ENV
        
    - name: Block deployment on quality gate failure
      if: failure()
      run: |
        echo "❌ Quality gates failed - deployment blocked"
        echo "DEPLOYMENT_APPROVED=false" >> $GITHUB_ENV
        exit 1