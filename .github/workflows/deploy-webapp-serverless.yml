name: Deploy Serverless Webapp

on:
  push:
    branches: [ main, initialbuild ]
    paths:
      - 'webapp/**'

env:
  AWS_REGION: us-east-1
  STACK_NAME: stocks-serverless-webapp
  LAMBDA_CODE_KEY: api.zip
  APP_BUCKET: stocks-algo-app-code
  SITE_BUCKET: stocks-algo-site-code
  CERT_ARN: ${{ secrets.CERT_ARN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Package API Lambda
        run: |
          cd webapp/lambda
          zip -r ../../${{ env.LAMBDA_CODE_KEY }} .

      - name: Upload Lambda code
        run: |
          aws s3 cp \
            ${{ env.LAMBDA_CODE_KEY }} \
            s3://${{ env.APP_BUCKET }}/${{ env.LAMBDA_CODE_KEY }}

      - name: Deploy Serverless Webapp
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file webapp/template-webapp-serverless.yml \
            --parameter-overrides \
              LambdaCodeKey=${{ env.LAMBDA_CODE_KEY }} \
              CertificateArn=${{ env.CERT_ARN }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Build Frontend
        run: |
          cd webapp/frontend
          npm install
          
          # Get CloudFormation outputs for Cognito configuration
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          CLIENT_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          COGNITO_DOMAIN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolDomain`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SPAUrl`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          echo "🔧 Configuring frontend with:"
          echo "  API_URL: $API_URL"
          echo "  USER_POOL_ID: $USER_POOL_ID"
          echo "  CLIENT_ID: $CLIENT_ID"
          echo "  COGNITO_DOMAIN: $COGNITO_DOMAIN"
          echo "  CLOUDFRONT_URL: $CLOUDFRONT_URL"
          
          # Setup production configuration
          node scripts/setup-prod.js "$API_URL" "production" "$USER_POOL_ID" "$CLIENT_ID" "$COGNITO_DOMAIN" "$CLOUDFRONT_URL"
          
          # Build the application
          npm run build
          
          # Create simple index.html if spa/ folder is expected
          mkdir -p ../spa
          cp -r dist/* ../spa/

      - name: Sync SPA to site bucket
        run: |
          aws s3 sync webapp/spa/ s3://${{ env.SITE_BUCKET }} --delete

      - name: Test Lambda deployment and show logs
        run: |
          # Get Lambda function name from CloudFormation stack
          LAMBDA_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [ -z "$LAMBDA_NAME" ]; then
            echo "⚠️ Could not find Lambda function name, trying alternative approaches..."
            
            # Try to find Lambda function by stack resources
            LAMBDA_NAME=$(aws cloudformation describe-stack-resources \
              --stack-name ${{ env.STACK_NAME }} \
              --query 'StackResources[?ResourceType==`AWS::Lambda::Function`].PhysicalResourceId' \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$LAMBDA_NAME" ]; then
              echo "✅ Found Lambda function via stack resources: $LAMBDA_NAME"
            else
              echo "Available outputs:"
              aws cloudformation describe-stacks \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'Stacks[0].Outputs[].{Key:OutputKey,Value:OutputValue}' \
                --output table || echo "No outputs found"
              exit 1
            fi
          else
            echo "✅ Lambda function name: $LAMBDA_NAME"
          fi
          
          # Test the Lambda function
          echo "🧪 Testing Lambda function..."
          aws lambda invoke \
            --function-name "$LAMBDA_NAME" \
            --payload '{"httpMethod":"GET","path":"/health","headers":{}}' \
            test-response.json
          
          echo "Lambda Response:"
          cat test-response.json
          echo ""
          
          # Get recent logs from multiple streams
          echo "📋 Recent Lambda logs:"
          LOG_GROUP="/aws/lambda/$LAMBDA_NAME"
          
          # Get last 3 log streams
          aws logs describe-log-streams \
            --log-group-name "$LOG_GROUP" \
            --order-by LastEventTime \
            --descending \
            --limit 3 \
            --query 'logStreams[].logStreamName' \
            --output text | while read stream; do
              if [ -n "$stream" ]; then
                echo "--- Log Stream: $stream ---"
                aws logs get-log-events \
                  --log-group-name "$LOG_GROUP" \
                  --log-stream-name "$stream" \
                  --limit 30 \
                  --query 'events[].[timestamp,message]' \
                  --output text | while read timestamp message; do
                    if [ -n "$timestamp" ]; then
                      formatted_time=$(date -d "@$((timestamp/1000))" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "time")
                      echo "[$formatted_time] $message"
                    fi
                  done
                echo ""
              fi
            done || echo "No logs found"
          
          # Test API Gateway endpoint
          echo "🌐 Testing API Gateway endpoint..."
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$API_URL" ]; then
            echo "Testing: $API_URL/health"
            curl -s -w "\nHTTP Status: %{http_code}\n" "$API_URL/health" || echo "API Gateway test failed"
          else
            echo "No API Gateway endpoint found"
          fi
