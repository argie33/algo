name: deploy-app-template

on:
  push:
    branches:
      - main

env:
  AWS_REGION:        us-east-1
  AWS_ROLE_ARN:      arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION:  github-deploy

jobs:

  ##########################################
  # 0) Filter â€” what files actually changed #
  ##########################################
  filter:
    runs-on: ubuntu-latest
    outputs:
      symbols:       ${{ steps.filter.outputs.symbols }}
      econ:          ${{ steps.filter.outputs.econ }}
      containers:    ${{ steps.filter.outputs.containers }}
      findata:       ${{ steps.filter.outputs.findata }}
      pricedaily:    ${{ steps.filter.outputs.pricedaily }}
      priceweekly:   ${{ steps.filter.outputs.priceweekly }}
      pricemonthly:  ${{ steps.filter.outputs.pricemonthly }}
    steps:
      - uses: actions/checkout@v3

      - name: Detect which parts changed
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            symbols:
              - 'loadstocksymbols.py'
              - 'requirements-loadstocksymbols.txt'
            econ:
              - 'loadecondata.py'
              - 'requirements-loadecondata.txt'
            containers:
              - 'Dockerfile.findata'
              - 'scripts/findata/**'
              - 'Dockerfile.pricedaily'
              - 'scripts/pricedaily/**'
              - 'Dockerfile.priceweekly'
              - 'scripts/priceweekly/**'
              - 'Dockerfile.pricemonthly'
              - 'scripts/pricemonthly/**'
            findata:
              - 'Dockerfile.findata'
              - 'scripts/findata/**'
            pricedaily:
              - 'Dockerfile.pricedaily'
              - 'scripts/pricedaily/**'
            priceweekly:
              - 'Dockerfile.priceweekly'
              - 'scripts/priceweekly/**'
            pricemonthly:
              - 'Dockerfile.pricemonthly'
              - 'scripts/pricemonthly/**'

  ###################################################################
  # 1) Build & upload symbols-loader Lambda (always, small / fast) #
  ###################################################################
  build_and_upload_symbols:
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ always() }}            # always build so CFN can update if needed
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Get Lambda code bucket
        id: get_bucket
        run: |
          BUCKET=$(aws cloudformation describe-stacks \
            --stack-name stocks-core-stack \
            --query "Stacks[0].Outputs[?OutputKey=='CodeBucketName'].OutputValue" \
            --output text)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install symbols-loader deps
        run: |
          rm -rf symbols_package && mkdir symbols_package
          pip install --upgrade pip
          pip install -r requirements-loadstocksymbols.txt -t symbols_package

      - name: Package symbols-loader
        run: |
          cp loadstocksymbols.py symbols_package/index.py
          cd symbols_package && zip -r "../symbols-${{ github.sha }}.zip" . && cd ..

      - name: Upload symbols package
        id: upload
        run: |
          aws s3 cp symbols-${{ github.sha }}.zip \
            s3://${{ steps.get_bucket.outputs.bucket }}/ \
            --region ${{ env.AWS_REGION }}
          echo "code_key=symbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  #####################################################################
  # 2) Build & upload econ-data loader Lambda (always, small / fast) #
  #####################################################################
  build_and_upload_econ:
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ always() }}
    outputs:
      econ_code_key: ${{ steps.upload_econ.outputs.code_key }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Get Lambda code bucket
        id: get_bucket_econ
        run: |
          BUCKET=$(aws cloudformation describe-stacks \
            --stack-name stocks-core-stack \
            --query "Stacks[0].Outputs[?OutputKey=='CodeBucketName'].OutputValue" \
            --output text)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install econ-data deps
        run: |
          rm -rf econ_package && mkdir econ_package
          pip install --upgrade pip
          pip install -r requirements-loadecondata.txt -t econ_package

      - name: Package econ-data loader
        run: |
          cp loadecondata.py econ_package/index.py
          cd econ_package && zip -r "../econ-${{ github.sha }}.zip" . && cd ..

      - name: Upload econ package
        id: upload_econ
        run: |
          aws s3 cp econ-${{ github.sha }}.zip \
            s3://${{ steps.get_bucket_econ.outputs.bucket }}/ \
            --region ${{ env.AWS_REGION }}
          echo "code_key=econ-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ##########################################################
  # 3) Deploy Lambdas (always) & Invoke only if changed   #
  ##########################################################
  deploy_and_run_lambdas:
    needs:
      - build_and_upload_symbols
      - build_and_upload_econ
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Deploy Lambda stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_symbols.outputs.code_key }} \
              EconomicCodeKey=${{ needs.build_and_upload_econ.outputs.econ_code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Invoke symbols-loader
        if: needs.filter.outputs.symbols == 'true'
        run: |
          aws lambda invoke \
            --function-name loadstocksymbols \
            --invocation-type Event \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null || true

      - name: Invoke econ-data loader
        if: needs.filter.outputs.econ == 'true'
        run: |
          aws lambda invoke \
            --function-name loadecondata \
            --invocation-type Event \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null || true

  ###################################################
  # 4) Build & push ECS containers if any changed  #
  ###################################################
  build_and_push_containers:
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.containers == 'true'
    outputs:
      findata_tag:      ${{ steps.findata.outputs.tag }}
      pricedaily_tag:   ${{ steps.pricedaily.outputs.tag }}
      priceweekly_tag:  ${{ steps.weekly.outputs.tag }}
      pricemonthly_tag: ${{ steps.monthly.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v1

      - name: Get or create ECR repo
        id: get_uri
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $REPO
          URI=$(aws ecr describe-repositories \
            --repository-names $REPO \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "repo_uri=$URI" >> $GITHUB_OUTPUT

      - name: Build & push findata container
        id: findata
        run: |
          TAG=findata-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricedaily container
        id: pricedaily
        run: |
          TAG=pricedaily-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricedaily -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push priceweekly container
        id: weekly
        run: |
          TAG=priceweekly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.priceweekly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricemonthly container
        id: monthly
        run: |
          TAG=pricemonthly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricemonthly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  #############################################
  # 5) Deploy ECS TaskDefinitions (if changed)#
  #############################################
  deploy_ecs_tasks:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    if: needs.filter.outputs.containers == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Deploy ECS CFN stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              FindataImageTag=${{ needs.build_and_push_containers.outputs.findata_tag }} \
              PriceImageTag=${{ needs.build_and_push_containers.outputs.pricedaily_tag }} \
              PriceWeeklyImageTag=${{ needs.build_and_push_containers.outputs.priceweekly_tag }} \
              PriceMonthlyImageTag=${{ needs.build_and_push_containers.outputs.pricemonthly_tag }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

  ##########################################################
  # 6â€“9) Run each ECS task only if its container changed  #
  ##########################################################
  run_findata:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    if: needs.filter.outputs.findata == 'true'
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Fetch findata service name
        id: svc
        run: |
          svc=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataLoaderServiceName'].OutputValue" \
            --output text)
          echo "service=$svc" >> $GITHUB_OUTPUT

      - name: Scale findata-loader up
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 1

      - name: Wait for stability
        run: |
          aws ecs wait services-stable --cluster stocks-cluster --services ${{ steps.svc.outputs.service }}

      - name: Scale findata-loader down
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 0

  run_pricedaily:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    if: needs.filter.outputs.pricedaily == 'true'
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Fetch pricedaily service name
        id: svc
        run: |
          svc=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceDailyLoaderServiceName'].OutputValue" \
            --output text)
          echo "service=$svc" >> $GITHUB_OUTPUT

      - name: Scale pricedaily-loader up
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 1

      - name: Wait for stability
        run: |
          aws ecs wait services-stable --cluster stocks-cluster --services ${{ steps.svc.outputs.service }}

      - name: Scale pricedaily-loader down
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 0

  run_priceweekly:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    if: needs.filter.outputs.priceweekly == 'true'
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Fetch priceweekly service name
        id: svc
        run: |
          svc=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyLoaderServiceName'].OutputValue" \
            --output text)
          echo "service=$svc" >> $GITHUB_OUTPUT

      - name: Scale priceweekly-loader up
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 1

      - name: Wait for stability
        run: |
          aws ecs wait services-stable --cluster stocks-cluster --services ${{ steps.svc.outputs.service }}

      - name: Scale priceweekly-loader down
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 0

  run_pricemonthly:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    if: needs.filter.outputs.pricemonthly == 'true'
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}

      - name: Fetch pricemonthly service name
        id: svc
        run: |
          svc=$(aws cloudformation.describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyLoaderServiceName'].OutputValue" \
            --output text)
          echo "service=$svc" >> $GITHUB_OUTPUT

      - name: Scale pricemonthly-loader up
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 1

      - name: Wait for stability
        run: |
          aws ecs wait services-stable --cluster stocks-cluster --services ${{ steps.svc.outputs.service }}

      - name: Scale pricemonthly-loader down
        run: |
          aws ecs update-service --cluster stocks-cluster --service ${{ steps.svc.outputs.service }} --desired-count 0
