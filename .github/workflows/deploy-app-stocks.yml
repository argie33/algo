# .github/workflows/deploy-app-template.yml
name: deploy-app-template

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  # 1) Package & upload symbols‑loader Lambda
  build_and_upload_lambda:
    name: Build & upload Lambda package
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Lambda dependencies
        run: |
          rm -rf package && mkdir package
          python -m pip install --upgrade pip
          if [ ! -f requirements-loadstocksymbols.txt ]; then
            echo "✖ requirements-loadstocksymbols.txt not found!" >&2
            exit 1
          fi
          pip install -r requirements-loadstocksymbols.txt -t package

      - name: Copy function code & verify dependencies
        run: |
          cp loadstocksymbols.py package/index.py
          ls -R package

      - name: Zip Lambda bundle
        run: |
          cd package
          zip -r "../loadstocksymbols-${{ github.sha }}.zip" .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Upload Lambda to S3
        id: upload
        run: |
          aws s3 cp "loadstocksymbols-${{ github.sha }}.zip" \
            s3://stocks-algo-app-code/loadstocksymbols-${{ github.sha }}.zip
          echo "code_key=loadstocksymbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  # 2) Deploy RDS, SecretsManager, Lambda & ECS Cluster
  deploy_db_lambda:
    name: Deploy DB, Lambda & ECS Cluster
    needs: build_and_upload_lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed DB stack if needed
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-db-lambda-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo NOT_FOUND)
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-db-lambda-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-db-lambda-stack
          fi

      - name: Deploy DB, Lambda & ECS Cluster
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_lambda.outputs.code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Invoke symbols‑loader Lambda and fail on error
        run: |
          aws lambda invoke \
            --function-name loadstocksymbols \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          cat response.json
          if grep -q '"FunctionError"' response.json; then
            echo "✖ Lambda execution failed" >&2
            exit 1
          fi

  # 3) Build & push two Docker images: findata & pricedaily
  build_and_push_container:
    name: Build & push Docker images
    needs: deploy_db_lambda
    runs-on: ubuntu-latest
    outputs:
      findata_tag: ${{ steps.build_findata.outputs.tag }}
      pricedaily_tag: ${{ steps.build_price.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Ensure ECR repo exists & get URI
        id: get_uri
        run: |
          set -e
          REPO_NAME=stocks-app-registry
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME" >/dev/null
          fi
          REPO_URI=$(aws ecr describe-repositories \
            --repository-names "$REPO_NAME" \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "repo_uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push findata image
        id: build_findata
        run: |
          TAG=findata-${{ github.sha }}
          IMAGE="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t "$IMAGE" .
          docker push "$IMAGE"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricedaily image
        id: build_price
        run: |
          TAG=pricedaily-${{ github.sha }}
          IMAGE="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricedaily -t "$IMAGE" .
          docker push "$IMAGE"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # 4) Deploy ECS Tasks stack with parameters and conditionally run tasks
  deploy_ecs_tasks:
    name: Deploy & run ECS Tasks
    needs: build_and_push_container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Collect core exports
        id: exports
        run: |
          echo "DbSecretArn=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksDBLambdaStack-SecretArn'].Value\" \
            --output text)" >> $GITHUB_ENV
          echo "ClusterArn=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksDBLambdaStack-ClusterArn'].Value\" \
            --output text)" >> $GITHUB_ENV
          echo "ContainerRepositoryUri=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksCore-ContainerRepositoryUri'].Value\" \
            --output text)" >> $GITHUB_ENV
          echo "PrivateSubnet1Id=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksCore-PrivateSubnet1Id'].Value\" \
            --output text)" >> $GITHUB_ENV
          echo "PrivateSubnet2Id=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksCore-PrivateSubnet2Id'].Value\" \
            --output text)" >> $GITHUB_ENV
          echo "SecurityGroupId=$(aws cloudformation list-exports \
            --query \"Exports[?Name=='StocksCore-LambdaSecurityGroupId'].Value\" \
            --output text)" >> $GITHUB_ENV

      - name: Deploy ECS tasks stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              DbSecretArn=$DbSecretArn \
              ClusterArn=$ClusterArn \
              ContainerRepositoryUri=$ContainerRepositoryUri \
              PrivateSubnet1Id=$PrivateSubnet1Id \
              PrivateSubnet2Id=$PrivateSubnet2Id \
              SecurityGroupId=$SecurityGroupId \
              FindataImageTag=${{ needs.build_and_push_container.outputs.findata_tag }} \
              PriceImageTag=${{ needs.build_and_push_container.outputs.pricedaily_tag }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Fetch TaskDefinition ARNs
        id: fetch_arns
        run: |
          FINDATA_ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataTaskDefinitionArn'].OutputValue" \
            --output text)
          PRICE_ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefinitionArn'].OutputValue" \
            --output text)
          echo "FINDATA_ARN=$FINDATA_ARN" >> $GITHUB_ENV
          echo "PRICE_ARN=$PRICE_ARN" >> $GITHUB_ENV

      - name: Run findata-loader on Fargate (if not already running)
        run: |
          SN1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet1Id'].Value" --output text)
          SN2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet2Id'].Value" --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-LambdaSecurityGroupId'].Value" --output text)

          COUNT=$(aws ecs list-tasks \
            --cluster stocks-cluster \
            --family findata-loader \
            --desired-status RUNNING \
            --query 'length(taskArns)' \
            --output text)

          if [ "$COUNT" -gt 0 ]; then
            echo "→ findata-loader already running ($COUNT), skipping."
          else
            aws ecs run-task \
              --cluster stocks-cluster \
              --launch-type FARGATE \
              --task-definition "$FINDATA_ARN" \
              --network-configuration "awsvpcConfiguration={subnets=[$SN1,$SN2],securityGroups=[$SG],assignPublicIp=DISABLED}" \
              --count 1
            echo "→ Launched one findata-loader."
          fi

      - name: Run pricedaily-loader on Fargate (if not already running)
        run: |
          SN1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet1Id'].Value" --output text)
          SN2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet2Id'].Value" --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-LambdaSecurityGroupId'].Value" --output text)

          COUNT=$(aws ecs list-tasks \
            --cluster stocks-cluster \
            --family pricedaily-loader \
            --desired-status RUNNING \
            --query 'length(taskArns)' \
            --output text)

          if [ "$COUNT" -gt 0 ]; then
            echo "→ pricedaily-loader already running ($COUNT), skipping."
          else
            aws ecs run-task \
              --cluster stocks-cluster \
              --launch-type FARGATE \
              --task-definition "$PRICE_ARN" \
              --network-configuration "awsvpcConfiguration={subnets=[$SN1,$SN2],securityGroups=[$SG],assignPublicIp=DISABLED}" \
              --count 1
            echo "→ Launched one pricedaily-loader."
          fi
