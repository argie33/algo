name: deploy-app-template

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: ["*"]

env:
  AWS_REGION:       us-east-1
  AWS_ROLE_ARN:     arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy

jobs:
  ##########################################
  # 0) Filter — detect which parts changed #
  ##########################################
  filter:
    runs-on: ubuntu-latest
    outputs:
      symbols:        ${{ steps.f.outputs.symbols }}
      econ:           ${{ steps.f.outputs.econ }}
      monthlyprice:   ${{ steps.f.outputs.monthlyprice }}
      findata:        ${{ steps.f.outputs.findata }}
      pricedaily:     ${{ steps.f.outputs.pricedaily }}
      priceweekly:    ${{ steps.f.outputs.priceweekly }}
      pricemonthly:   ${{ steps.f.outputs.pricemonthly }}
      technicaldaily: ${{ steps.f.outputs.technicaldaily }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changed paths
        id: f
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before }}
          filters: |
            symbols:
              - 'loadstocksymbols.py'
              - 'requirements-loadstocksymbols.txt'
              - 'Dockerfile.stocksymbols'
            econ:
              - 'loadecondata.py'
              - 'requirements-loadecondata.txt'
              - 'Dockerfile.econdata'
            monthlyprice:
              - 'loadpricemonthly.py'
              - 'requirements-loadpricemonthly.txt'
              - 'Dockerfile.monthlyprice'
            findata:
              - 'loadfinancialdata.py'
              - 'requirements-loadfinancialdata.txt'
              - 'Dockerfile.findata'
            pricedaily:
              - 'loadpricedaily.py'
              - 'requirements-loadpricedaily.txt'
              - 'Dockerfile.pricedaily'
            priceweekly:
              - 'loadpriceweekly.py'
              - 'requirements-loadpriceweekly.txt'
              - 'Dockerfile.priceweekly'
            pricemonthly:
              - 'loadpricemonthly.py'
              - 'requirements-loadpricemonthly.txt'
              - 'Dockerfile.pricemonthly'
            technicaldaily:
              - 'loadtechnicalsdaily.py'
              - 'requirements-loadtechnicalsdaily.txt'
              - 'Dockerfile.technicalsdaily'

  ####################################################
  # 1) stock-symbols ECS: build → deploy CFN → run   #
  ####################################################
  symbols:
    needs: filter
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get or create ECR repo
        id: ecr
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
            --repository-names "$REPO" \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "uri=$URI" >> $GITHUB_OUTPUT

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ steps.ecr.outputs.uri }}

      - name: Build & push stock-symbols image
        id: image
        run: |
          TAG=stocksymbols-${{ github.sha }}
          IMG="${{ steps.ecr.outputs.uri }}:$TAG"
          docker build -f Dockerfile.stocksymbols -t "$IMG" .
          docker push "$IMG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Fetch existing ECS stack params
        id: params
        run: |
          for key in FindataImageTag PriceImageTag PriceWeeklyImageTag PriceMonthlyImageTag TechnicalDailyImageTag EconDataImageTag MonthlyPriceImageTag; do
            val=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
                  --query "Stacks[0].Parameters[?ParameterKey=='${key}'].ParameterValue" --output text)
            echo "${key,,}=$val" >> $GITHUB_OUTPUT
          done

      - name: Deploy ECS CFN (stock-symbols)
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              FindataImageTag=${{ steps.params.outputs.findataimagetag }} \
              PriceImageTag=${{ steps.params.outputs.priceimagetag }} \
              PriceWeeklyImageTag=${{ steps.params.outputs.priceweeklyimagetag }} \
              PriceMonthlyImageTag=${{ steps.params.outputs.pricemonthlyimagetag }} \
              TechnicalDailyImageTag=${{ steps.params.outputs.technicaldailyimagetag }} \
              StockSymbolsImageTag=${{ steps.image.outputs.tag }} \
              EconDataImageTag=${{ steps.params.outputs.econdataimagetag }} \
              MonthlyPriceImageTag=${{ steps.params.outputs.monthlypriceimagetag }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Run stock-symbols loader
        run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsServiceName'].OutputValue" --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  ####################################################
  # 2) econ-data ECS: build → deploy CFN → run       #
  ####################################################
  econ:
    needs: filter
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get or create ECR repo
        id: ecr
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
            --repository-names "$REPO" \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "uri=$URI" >> $GITHUB_OUTPUT

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ steps.ecr.outputs.uri }}

      - name: Build & push econ-data image
        id: image
        run: |
          TAG=econdata-${{ github.sha }}
          IMG="${{ steps.ecr.outputs.uri }}:$TAG"
          docker build -f Dockerfile.econdata -t "$IMG" .
          docker push "$IMG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Fetch existing ECS stack params
        id: params
        run: |
          for key in FindataImageTag PriceImageTag PriceWeeklyImageTag PriceMonthlyImageTag TechnicalDailyImageTag StockSymbolsImageTag MonthlyPriceImageTag; do
            val=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
                  --query "Stacks[0].Parameters[?ParameterKey=='${key}'].ParameterValue" --output text)
            echo "${key,,}=$val" >> $GITHUB_OUTPUT
          done

      - name: Deploy ECS CFN (econ-data)
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              FindataImageTag=${{ steps.params.outputs.findataimagetag }} \
              PriceImageTag=${{ steps.params.outputs.priceimagetag }} \
              PriceWeeklyImageTag=${{ steps.params.outputs.priceweeklyimagetag }} \
              PriceMonthlyImageTag=${{ steps.params.outputs.pricemonthlyimagetag }} \
              TechnicalDailyImageTag=${{ steps.params.outputs.technicaldailyimagetag }} \
              StockSymbolsImageTag=${{ steps.params.outputs.stocksymbolsimagetag }} \
              EconDataImageTag=${{ steps.image.outputs.tag }} \
              MonthlyPriceImageTag=${{ steps.params.outputs.monthlypriceimagetag }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Run econ-data loader
        run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataServiceName'].OutputValue" --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  ####################################################
  # 3) findata, pricedaily, priceweekly, pricemonthly,#
  #    technicaldaily jobs remain unchanged          #
  ####################################################
  findata:
    needs: filter
    if: ${{ needs.filter.outputs.findata == 'true' }}
    uses: ./.github/workflows/_findata-ecs.yml

  pricedaily:
    needs: filter
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    uses: ./.github/workflows/_pricedaily-ecs.yml

  priceweekly:
    needs: filter
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    uses: ./.github/workflows/_priceweekly-ecs.yml

  pricemonthly:
    needs: filter
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    uses: ./.github/workflows/_pricemonthly-ecs.yml

  technicaldaily:
    needs: filter
    if: ${{ needs.filter.outputs.technicaldaily == 'true' }}
    uses: ./.github/workflows/_technicaldaily-ecs.yml
