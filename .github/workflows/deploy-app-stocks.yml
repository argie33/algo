name: deploy-app-stocks

# Trigger on any branch push
on:
  push:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:       us-east-1
  AWS_ROLE_ARN:     arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY:     ${{ secrets.FRED_API_KEY }}

################################################################################
# 1) Detect changed components                                                 #
################################################################################
jobs:
  filter:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      symbols:        ${{ steps.paths.outputs.symbols }}
      econ:           ${{ steps.paths.outputs.econ }}
      findata:        ${{ steps.paths.outputs.findata }}
      pricedaily:     ${{ steps.paths.outputs.pricedaily }}
      priceweekly:    ${{ steps.paths.outputs.priceweekly }}
      pricemonthly:   ${{ steps.paths.outputs.pricemonthly }}
      technicaldaily: ${{ steps.paths.outputs.technicaldaily }}
      any:            ${{ steps.any.outputs.any }}
      matrix:         ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: paths
        name: Which files changed?
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before }}
          filters: |
            symbols:
              - 'loadstocksymbols.py'
              - 'requirements-loadstocksymbols.txt'
              - 'Dockerfile.stocksymbols'
            econ:
              - 'loadecondata.py'
              - 'requirements-loadecondata.txt'
              - 'Dockerfile.econdata'
            findata:
              - 'loadfinancialdata.py'
              - 'requirements-loadfinancialdata.txt'
              - 'Dockerfile.findata'
            pricedaily:
              - 'loadpricedaily.py'
              - 'requirements-loadpricedaily.txt'
              - 'Dockerfile.pricedaily'
            priceweekly:
              - 'loadpriceweekly.py'
              - 'requirements-loadpriceweekly.txt'
              - 'Dockerfile.priceweekly'
            pricemonthly:
              - 'loadpricemonthly.py'
              - 'requirements-pricemonthly.txt'
              - 'Dockerfile.pricemonthly'
            technicaldaily:
              - 'loadtechnicalsdaily.py'
              - 'requirements-loadtechnicalsdaily.txt'
              - 'Dockerfile.technicalsdaily'

      - id: any
        name: Any changes?
        run: |
          if [ "${{ steps.paths.outputs.symbols }}"    = "true" ] || \
             [ "${{ steps.paths.outputs.econ }}"       = "true" ] || \
             [ "${{ steps.paths.outputs.findata }}"    = "true" ] || \
             [ "${{ steps.paths.outputs.pricedaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.priceweekly }}"= "true" ] || \
             [ "${{ steps.paths.outputs.pricemonthly }}"= "true" ] || \
             [ "${{ steps.paths.outputs.technicaldaily }}"= "true" ]; then
            echo "any=true" >> $GITHUB_OUTPUT
          else
            echo "any=false" >> $GITHUB_OUTPUT
          fi

      - id: matrix
        name: Build matrix
        run: |
          arr=""
          for l in symbols econ findata pricedaily priceweekly pricemonthly technicaldaily; do
            if [ "${{ steps.paths.outputs[$l] }}" = "true" ]; then
              arr="$arr,'$l'"
            fi
          done
          arr="[${arr#,}]"
          echo "matrix=$arr" >> $GITHUB_OUTPUT

################################################################################
# 2) Build changed images                                                      #
################################################################################
  build:
    name: Build changed images
    needs: filter
    runs-on: ubuntu-latest
    if: ${{ needs.filter.outputs.any == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        loader: ${{ fromJson(needs.filter.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Build & push Docker image
        id: build
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" \
            >/dev/null 2>&1 || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"

          case "${{ matrix.loader }}" in
            symbols)        DOCKERFILE=Dockerfile.stocksymbols;   PREFIX=StockSymbolsImageTag;;
            econ)           DOCKERFILE=Dockerfile.econdata;      PREFIX=EconDataImageTag;;
            findata)        DOCKERFILE=Dockerfile.findata;       PREFIX=FindataImageTag;;
            pricedaily)     DOCKERFILE=Dockerfile.pricedaily;    PREFIX=PriceImageTag;;
            priceweekly)    DOCKERFILE=Dockerfile.priceweekly;   PREFIX=PriceWeeklyImageTag;;
            pricemonthly)   DOCKERFILE=Dockerfile.pricemonthly;  PREFIX=PriceMonthlyImageTag;;
            technicaldaily) DOCKERFILE=Dockerfile.technicalsdaily;PREFIX=TechnicalDailyImageTag;;
          esac

          TAG=${{ matrix.loader }}-${{ github.sha }}
          docker build -f "$DOCKERFILE" -t "$URI:$TAG" .
          docker push "$URI:$TAG"

          echo "${PREFIX}=$TAG" > tag.out

      - name: Upload tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-tags
          path: tag.out

################################################################################
# 3) Deploy                                                                   #
################################################################################
  deploy:
    name: Deploy ECS CloudFormation
    needs:
      - filter
      - build
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch existing ECS stack params
        run: |
          if aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack >/dev/null 2>&1; then
            for key in \
              StockSymbolsImageTag EconDataImageTag FindataImageTag \
              PriceImageTag PriceWeeklyImageTag PriceMonthlyImageTag TechnicalDailyImageTag; do
              echo "${key}=$(aws cloudformation describe-stacks \
                --stack-name stocks-ecs-tasks-stack \
                --query \"Stacks[0].Parameters[?ParameterKey=='${key}'].ParameterValue\" \
                --output text)" >> tags.env
            done
          fi
          cat tags.env

      - name: Download new tags
        uses: actions/download-artifact@v3
        with:
          name: build-tags
          path: new-tags

      - name: Merge in new tags
        run: |
          for f in new-tags/*; do
            kv=$(cat "$f")
            key="${kv%%=*}"
            val="${kv#*=}"
            if grep -q "^${key}=" tags.env; then
              sed -i "s|^${key}=.*|${key}=${val}|" tags.env
            else
              echo "${key}=${val}" >> tags.env
            fi
          done
          cat tags.env

      - name: Deploy ECS stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=$(grep ^StockSymbolsImageTag tags.env \| cut -d= -f2-) \
              EconDataImageTag=$(grep ^EconDataImageTag tags.env \| cut -d= -f2-) \
              FindataImageTag=$(grep ^FindataImageTag tags.env \| cut -d= -f2-) \
              PriceImageTag=$(grep ^PriceImageTag tags.env \| cut -d= -f2-) \
              PriceWeeklyImageTag=$(grep ^PriceWeeklyImageTag tags.env \| cut -d= -f2-) \
              PriceMonthlyImageTag=$(grep ^PriceMonthlyImageTag tags.env \| cut -d= -f2-) \
              TechnicalDailyImageTag=$(grep ^TechnicalDailyImageTag tags.env \| cut -d= -f2-) \
              FREDApiKey=$FRED_API_KEY \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

################################################################################
# 4) Run each changed loader                                                  #
################################################################################
  run_symbols:
    name: Run stock-symbols loader
    needs: deploy
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_econ:
    name: Run econ-data loader
    needs: deploy
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_findata:
    name: Run findata loader
    needs: deploy
    if: ${{ needs.filter.outputs.findata == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricedaily:
    name: Run pricedaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_priceweekly:
    name: Run priceweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PricemonthlyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait and … ~                                   
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_technicaldaily:
    name: Run technicaldaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicaldaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalDailyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0
