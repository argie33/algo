name: deploy-app-template

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  # 1) Package & upload symbols‑loader Lambda
  build_and_upload_lambda:
    # … unchanged …

  # 2) Deploy RDS, SecretsManager, Lambda & ECS Cluster
  deploy_db_lambda:
    # … unchanged …

  # 3) Build & push Docker image for ECS tasks
  build_and_push_container:
    name: Build & push Docker image
    needs: deploy_db_lambda
    runs-on: ubuntu-latest
    outputs:
      uri: ${{ steps.get_uri.outputs.uri }}
      tag: ${{ steps.build.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Get ECR repository URI
        id: get_uri
        run: |
          # derive your ECR repo URI from account, region & known repo name
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION=$(aws configure get region)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/stocks-app-registry"
          echo "uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push image
        id: build
        run: |
          docker build -t ${{ steps.get_uri.outputs.uri }}:${{ github.sha }} .
          docker push ${{ steps.get_uri.outputs.uri }}:${{ github.sha }}
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # 4) Deploy ECS Tasks stack
  deploy_ecs_tasks:
    name: Deploy ECS Tasks
    needs:
      - deploy_db_lambda
      - build_and_push_container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed ECS-tasks stack if needed
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-ecs-tasks-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-ecs-tasks-stack
          fi

      - name: Deploy ECS tasks stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              ClusterName=stocks-cluster \
              ContainerRepositoryUri=${{ needs.build_and_push_container.outputs.uri }} \
              ImageTag=${{ needs.build_and_push_container.outputs.tag }} \
              DBSecretArn=$(aws cloudformation describe-stacks \
                --stack-name stocks-db-lambda-stack \
                --query "Stacks[0].Outputs[?OutputKey=='SecretArn'].OutputValue" \
                --output text) \
              Subnet1Id=$(aws cloudformation list-exports \
                --query "Exports[?Name=='StocksCore-PrivateSubnet1Id'].Value" \
                --output text) \
              Subnet2Id=$(aws cloudformation list-exports \
                --query "Exports[?Name=='StocksCore-PrivateSubnet2Id'].Value" \
                --output text) \
              SecurityGroupId=$(aws cloudformation list-exports \
                --query "Exports[?Name=='StocksCore-LambdaSecurityGroupId'].Value" \
                --output text) \
            --capabilities CAPABILITY_NAMED_IAM
