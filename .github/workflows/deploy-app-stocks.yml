name: deploy-app-stocks

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY: ${{ secrets.FRED_API_KEY }}

jobs:
################################################################################
# Path filtering                                                              #
################################################################################
  filter:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      tasks: ${{ steps.filter.outputs.tasks }}
      qualitymetrics: ${{ steps.filter.outputs.qualitymetrics }}
      valuemetrics: ${{ steps.filter.outputs.valuemetrics }}
      stepfunctions: ${{ steps.filter.outputs.stepfunctions }}
      symbols: ${{ steps.filter.outputs.symbols }}
      symbolsalt: ${{ steps.filter.outputs.symbolsalt }}
      econ: ${{ steps.filter.outputs.econ }}
      pricedaily: ${{ steps.filter.outputs.pricedaily }}
      priceweekly: ${{ steps.filter.outputs.priceweekly }}
      pricemonthly: ${{ steps.filter.outputs.pricemonthly }}
      technicalsdaily: ${{ steps.filter.outputs.technicalsdaily }}
      technicalsweekly: ${{ steps.filter.outputs.technicalsweekly }}
      technicalsmonthly: ${{ steps.filter.outputs.technicalsmonthly }}
      loadinfo: ${{ steps.filter.outputs.loadinfo }}
      earningshistory: ${{ steps.filter.outputs.earningshistory }}
      earningsestimate: ${{ steps.filter.outputs.earningsestimate }}
      earningsmetrics: ${{ steps.filter.outputs.earningsmetrics }}
      revenueestimate: ${{ steps.filter.outputs.revenueestimate }}
      swingtrader: ${{ steps.filter.outputs.swingtrader }}
      buyselldaily: ${{ steps.filter.outputs.buyselldaily }}
      buysellweekly: ${{ steps.filter.outputs.buysellweekly }}
      buysellmonthly: ${{ steps.filter.outputs.buysellmonthly }}
      latestpricedaily: ${{ steps.filter.outputs.latestpricedaily }}
      latestpriceweekly: ${{ steps.filter.outputs.latestpriceweekly }}
      latestpricemonthly: ${{ steps.filter.outputs.latestpricemonthly }}
      latesttechnicalsdaily: ${{ steps.filter.outputs.latesttechnicalsdaily }}
      latesttechnicalsweekly: ${{ steps.filter.outputs.latesttechnicalsweekly }}
      latesttechnicalsmonthly: ${{ steps.filter.outputs.latesttechnicalsmonthly }}
      naaim: ${{ steps.filter.outputs.naaim }}
      aaii: ${{ steps.filter.outputs.aaii }}
      feargreed: ${{ steps.filter.outputs.feargreed }}
      quarterlybalancesheet: ${{ steps.filter.outputs.quarterlybalancesheet }}
      annualbalancesheet: ${{ steps.filter.outputs.annualbalancesheet }}
      quarterlyincomestatement: ${{ steps.filter.outputs.quarterlyincomestatement }}
      annualincomestatement: ${{ steps.filter.outputs.annualincomestatement }}
      quarterlycashflow: ${{ steps.filter.outputs.quarterlycashflow }}
      annualcashflow: ${{ steps.filter.outputs.annualcashflow }}
      ttmincomestatement: ${{ steps.filter.outputs.ttmincomestatement }}
      ttmcashflow: ${{ steps.filter.outputs.ttmcashflow }}
      loadnews: ${{ steps.filter.outputs.loadnews }}
      fundamentalmetrics: ${{ steps.filter.outputs.fundamentalmetrics }}
      analystupgradedowngrade: ${{ steps.filter.outputs.analystupgradedowngrade }}
      financials: ${{ steps.filter.outputs.financials }}
      sentiment: ${{ steps.filter.outputs.sentiment }}
      technicals: ${{ steps.filter.outputs.technicals }}
      market: ${{ steps.filter.outputs.market }}
      momentum: ${{ steps.filter.outputs.momentum }}
      sentiment_realtime: ${{ steps.filter.outputs.sentiment_realtime }}
      positioning: ${{ steps.filter.outputs.positioning }}
      qualityscores: ${{ steps.filter.outputs.qualityscores }}
      valuescores: ${{ steps.filter.outputs.valuescores }}
      growthmetrics: ${{ steps.filter.outputs.growthmetrics }}
      calendar: ${{ steps.filter.outputs.calendar }}
      any: ${{ steps.filter.outputs.any }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'cloudformation/template-app-stocks.yml'
              - '.github/workflows/deploy-app-stocks.yml'
            tasks:
              - 'cloudformation/template-app-ecs-tasks.yml'
              - 'requirements.txt'
              - 'scripts/**'
            qualitymetrics:
              - 'scripts/quality-metrics/**'
            valuemetrics:
              - 'scripts/value-metrics/**'
            stepfunctions:
              - 'cloudformation/template-step-functions-orchestration.yml'
            symbols:
              - 'scripts/stock-symbols/**'
            symbolsalt:
              - 'scripts/symbols-alt/**'
            econ:
              - 'scripts/econ-data/**'
            pricedaily:
              - 'loadpricedaily.py'
              - 'Dockerfile.pricedaily'
              - 'requirements-loadpricedaily.txt'
            priceweekly:
              - 'scripts/priceweekly/**'
            pricemonthly:
              - 'scripts/pricemonthly/**'
            technicalsdaily:
              - 'scripts/technicals-daily/**'
            technicalsweekly:
              - 'scripts/technicals-weekly/**'
            technicalsmonthly:
              - 'scripts/technicals-monthly/**'
            loadinfo:
              - 'scripts/load-info/**'
            earningshistory:
              - 'scripts/earnings-history/**'
            earningsestimate:
              - 'scripts/earnings-estimate/**'
            earningsmetrics:
              - 'scripts/earnings-metrics/**'
            revenueestimate:
              - 'scripts/revenue-estimate/**'
            swingtrader:
              - 'scripts/swing-trader/**'
            buyselldaily:
              - 'scripts/buysell-daily/**'
            buysellweekly:
              - 'scripts/buysell-weekly/**'
            buysellmonthly:
              - 'scripts/buysell-monthly/**'
            latestpricedaily:
              - 'scripts/load-latest-price-daily/**'
            latestpriceweekly:
              - 'scripts/load-latest-price-weekly/**'
            latestpricemonthly:
              - 'scripts/load-latest-price-monthly/**'
            latesttechnicalsdaily:
              - 'scripts/latest-technicals-daily/**'
            latesttechnicalsweekly:
              - 'scripts/latest-technicals-weekly/**'
            latesttechnicalsmonthly:
              - 'scripts/latest-technicals-monthly/**'
            naaim:
              - 'scripts/naaim/**'
            aaii:
              - 'scripts/aaii/**'
            feargreed:
              - 'scripts/fear-greed/**'
            quarterlybalancesheet:
              - 'scripts/quarterly-balance-sheet/**'
            annualbalancesheet:
              - 'scripts/annual-balance-sheet/**'
            quarterlyincomestatement:
              - 'scripts/quarterly-income-statement/**'
            annualincomestatement:
              - 'scripts/annual-income-statement/**'
            quarterlycashflow:
              - 'scripts/quarterly-cash-flow/**'
            annualcashflow:
              - 'scripts/annual-cash-flow/**'
            ttmincomestatement:
              - 'scripts/ttm-income-statement/**'
            ttmcashflow:
              - 'scripts/ttm-cash-flow/**'
            loadnews:
              - 'scripts/load-news/**'
            fundamentalmetrics:
              - 'scripts/fundamental-metrics/**'
            analystupgradedowngrade:
              - 'scripts/analyst-upgrade-downgrade/**'
            financials:
              - 'scripts/financials/**'
            sentiment:
              - 'scripts/sentiment/**'
            technicals:
              - 'scripts/technicals/**'
            market:
              - 'scripts/market/**'
            momentum:
              - 'scripts/momentum/**'
            sentiment_realtime:
              - 'scripts/sentiment-realtime/**'
            positioning:
              - 'scripts/positioning/**'
            qualityscores:
              - 'scripts/quality-scores/**'
            valuescores:
              - 'scripts/value-scores/**'
            growthmetrics:
              - 'scripts/growth-metrics/**'
            calendar:
              - 'scripts/calendar/**'
            any:
              - 'scripts/**'
              - 'cloudformation/**'
              - '.github/workflows/**'
              - 'requirements.txt'
              - 'load*.py'
              - 'Dockerfile.*'
              - 'requirements-*.txt'

# 6) Run value-metrics loader
  run_valuemetrics:
    name: Run value-metrics calculator
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.valuemetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ValueMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run value-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started value-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Value-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Value-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

# 6) Run quality-metrics loader
  run_qualitymetrics:
    name: Run quality-metrics calculator
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.qualitymetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QualityMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run quality-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started quality-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Quality-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Quality-metrics failed with exit code $EXIT"
            exit $EXIT
          fi
################################################################################
# 1) Deploy core infrastructure (RDS, Secrets, ECS cluster)                    #
################################################################################
  infra:
    name: Deploy application stack
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.app == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get CloudFormation templates bucket from core stack
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "Using S3 bucket: $BUCKET"

      - name: Set image tag defaults
        run: |
          echo "VALUE_METRICS_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "QUALITY_METRICS_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy application stack
        run: |
          # Check if template file exists
          if [ ! -f template-app-stocks.yml ]; then
            echo "❌ template-app-stocks.yml not found in current directory"
            ls -la
            exit 1
          fi
          
          # Check template size
          TEMPLATE_SIZE=$(wc -c < template-app-stocks.yml)
          echo "Template size: $TEMPLATE_SIZE bytes"
          
          if [ $TEMPLATE_SIZE -lt 51200 ]; then
            echo "Template is small enough, deploying directly without S3..."
            aws cloudformation deploy \
              --stack-name stocks-app-stack \
              --template-file template-app-stocks.yml \
              --parameter-overrides \
                RDSUsername=${{ secrets.RDS_USERNAME }} \
                RDSPassword=${{ secrets.RDS_PASSWORD }} \
                FREDApiKey=${{ secrets.FRED_API_KEY }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changeset
          else
            echo "Template is too large, using S3 bucket..."
            aws cloudformation deploy \
              --stack-name stocks-app-stack \
              --template-file template-app-stocks.yml \
              --parameter-overrides \
                RDSUsername=${{ secrets.RDS_USERNAME }} \
                RDSPassword=${{ secrets.RDS_PASSWORD }} \
                FREDApiKey=${{ secrets.FRED_API_KEY }} \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --s3-bucket ${{ steps.bucket.outputs.CF_BUCKET }} \
              --no-fail-on-empty-changeset
          fi

################################################################################
# 2) Detect changed components                                                 #
################################################################################
  detect-changes:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      app:               ${{ steps.paths.outputs.app }}
      symbols:           ${{ steps.paths.outputs.symbols }}
      econ:              ${{ steps.paths.outputs.econ }}
      pricedaily:        ${{ steps.paths.outputs.pricedaily }}
      priceweekly:       ${{ steps.paths.outputs.priceweekly }}
      pricemonthly:      ${{ steps.paths.outputs.pricemonthly }}
      latestpricedaily: ${{ steps.paths.outputs.latestpricedaily }}
      latestpriceweekly: ${{ steps.paths.outputs.latestpriceweekly }}
      latestpricemonthly: ${{ steps.paths.outputs.latestpricemonthly }}
      latesttechnicalsdaily: ${{ steps.paths.outputs.latesttechnicalsdaily }}
      latesttechnicalsweekly: ${{ steps.paths.outputs.latesttechnicalsweekly }}
      latesttechnicalsmonthly: ${{ steps.paths.outputs.latesttechnicalsmonthly }}
      technicalsdaily:   ${{ steps.paths.outputs.technicalsdaily }}
      loadinfo:          ${{ steps.paths.outputs.loadinfo }}
      earningsestimate:  ${{ steps.paths.outputs.earningsestimate }}
      earningsmetrics:   ${{ steps.paths.outputs.earningsmetrics }}
      earningshistory:   ${{ steps.paths.outputs.earningshistory }}
      revenueestimate:   ${{ steps.paths.outputs.revenueestimate }}
      technicalsweekly:  ${{ steps.paths.outputs.technicalsweekly }}
      technicalsmonthly: ${{ steps.paths.outputs.technicalsmonthly }}
      swingtrader:       ${{ steps.paths.outputs.swingtrader }}
      calendar:          ${{ steps.paths.outputs.calendar }}
      buyselldaily:      ${{ steps.paths.outputs.buyselldaily }}
      buysellweekly:     ${{ steps.paths.outputs.buysellweekly }}
      buysellmonthly:    ${{ steps.paths.outputs.buysellmonthly }}
      naaim:             ${{ steps.paths.outputs.naaim }}
      aaii:              ${{ steps.paths.outputs.aaii }}
      feargreed:         ${{ steps.paths.outputs.feargreed }}
      quarterlybalancesheet: ${{ steps.paths.outputs.quarterlybalancesheet }}
      annualbalancesheet: ${{ steps.paths.outputs.annualbalancesheet }}
      quarterlyincomestatement: ${{ steps.paths.outputs.quarterlyincomestatement }}
      annualincomestatement: ${{ steps.paths.outputs.annualincomestatement }}
      quarterlycashflow: ${{ steps.paths.outputs.quarterlycashflow }}
      annualcashflow: ${{ steps.paths.outputs.annualcashflow }}
      ttmincomestatement: ${{ steps.paths.outputs.ttmincomestatement }}
      ttmcashflow: ${{ steps.paths.outputs.ttmcashflow }}
      fundamentalmetrics: ${{ steps.paths.outputs.fundamentalmetrics }}
      analystupgradedowngrade: ${{ steps.paths.outputs.analystupgradedowngrade }}
      financials: ${{ steps.paths.outputs.financials }}
      symbolsalt: ${{ steps.paths.outputs.symbolsalt }}
      sentiment: ${{ steps.paths.outputs.sentiment }}
      technicals: ${{ steps.paths.outputs.technicals }}
      market: ${{ steps.paths.outputs.market }}
      momentum: ${{ steps.paths.outputs.momentum }}
      sentiment_realtime: ${{ steps.paths.outputs.sentiment_realtime }}
      positioning: ${{ steps.paths.outputs.positioning }}
      qualitymetrics: ${{ steps.paths.outputs.qualitymetrics }}
      valuemetrics: ${{ steps.paths.outputs.valuemetrics }}
      valuescores: ${{ steps.paths.outputs.valuescores }}
      growthmetrics: ${{ steps.paths.outputs.growthmetrics }}
      loadnews: ${{ steps.paths.outputs.loadnews }}
      qualityscores: ${{ steps.paths.outputs.qualityscores }}
      any:               ${{ steps.any.outputs.any }}
      matrix:            ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: paths
        name: Which files changed?
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before != '0000000000000000000000000000000000000000' && github.event.before || github.sha }}
          filters: |
            app:
              - 'template-app-stocks.yml'
            symbols:
              - 'loadstocksymbols.py'
              - 'Dockerfile.stocksymbols'
              - 'requirements-loadstocksymbols.txt'
            econ:
              - 'loadecondata.py'
              - 'Dockerfile.econdata'
              - 'requirements-loadecondata.txt'
            pricedaily:
              - 'loadpricedaily.py'
              - 'Dockerfile.pricedaily'
              - 'requirements-loadpricedaily.txt'
            priceweekly:
              - 'loadpriceweekly.py'
              - 'Dockerfile.priceweekly'
              - 'requirements-loadpriceweekly.txt'
            pricemonthly:
              - 'loadpricemonthly.py'
              - 'Dockerfile.pricemonthly'
              - 'requirements-loadpricemonthly.txt'
            latestpricedaily:
              - 'loadlatestpricedaily.py'
              - 'Dockerfile.latestpricedaily'
              - 'requirements-loadlatestpricedaily.txt'
            latestpriceweekly:
              - 'loadlatestpriceweekly.py'
              - 'Dockerfile.latestpriceweekly'
              - 'requirements-loadlatestpriceweekly.txt'
            latestpricemonthly:
              - 'loadlatestpricemonthly.py'
              - 'Dockerfile.latestpricemonthly'
              - 'requirements-loadlatestpricemonthly.txt'
            latesttechnicalsdaily:
              - 'loadlatesttechnicalsdaily.py'
              - 'Dockerfile.latesttechnicalsdaily'
              - 'requirements-loadlatesttechnicalsdaily.txt'
            latesttechnicalsweekly:
              - 'loadlatesttechnicalsweekly.py'
              - 'Dockerfile.latesttechnicalsweekly'
              - 'requirements-loadlatesttechnicalsweekly.txt'
            latesttechnicalsmonthly:
              - 'loadlatesttechnicalsmonthly.py'
              - 'Dockerfile.latesttechnicalsmonthly'
              - 'requirements-loadlatesttechnicalsmonthly.txt'
            technicalsdaily:
              - 'loadtechnicalsdaily.py'
              - 'Dockerfile.technicalsdaily'
              - 'requirements-loadtechnicalsdaily.txt'
            loadinfo:
              - 'loadinfo.py'
              - 'Dockerfile.loadinfo'
              - 'requirements-loadinfo.txt'
            loadnews:
              - 'loadnews.py'
              - 'Dockerfile.loadnews'
              - 'requirements-loadnews.txt'
            earningsestimate:
              - 'loadearningsestimate.py'
              - 'Dockerfile.loadearningsestimate'
              - 'requirements-loadearningsestimate.txt'
            earningsmetrics:
              - 'loadearningsmetrics.py'
              - 'Dockerfile.earningsmetrics'
              - 'requirements-earningsmetrics.txt'
            earningshistory:
              - 'loadearningshistory.py'
              - 'Dockerfile.loadearningshistory'
              - 'requirements-loadearningshistory.txt'
            revenueestimate:
              - 'loadrevenueestimate.py'
              - 'Dockerfile.loadrevenueestimate'
              - 'requirements-loadrevenueestimate.txt'
            technicalsweekly:
              - 'loadtechnicalsweekly.py'
              - 'Dockerfile.technicalsweekly'
              - 'requirements-loadtechnicalsweekly.txt'
            technicalsmonthly:
              - 'loadtechnicalsmonthly.py'
              - 'Dockerfile.technicalsmonthly'
              - 'requirements-loadtechnicalsmonthly.txt'
            swingtrader:
              - 'swingtrader.py'
              - 'Dockerfile.swingtrader'
              - 'requirements-swingtrader.txt'
            calendar:
              - 'loadcalendar.py'
              - 'Dockerfile.loadcalendar'
              - 'requirements-loadcalendar.txt'
            buyselldaily:
              - 'loadbuyselldaily.py'
              - 'Dockerfile.buyselldaily'
              - 'requirements-loadbuysell.txt'
            buysellweekly:
              - 'loadbuysellweekly.py'
              - 'Dockerfile.buysell'
              - 'requirements-loadbuysell.txt'
            buysellmonthly:
              - 'loadbuysellmonthly.py'
              - 'Dockerfile.buysell'
              - 'requirements-loadbuysell.txt'
            naaim:
              - 'loadnaaim.py'
              - 'Dockerfile.loadnaaim'
              - 'requirements-loadnaaim.txt'
            aaii:
              - 'loadaaiidata.py'
              - 'Dockerfile.loadaaiidata'
              - 'requirements-loadaaiidata.txt'
            feargreed:
              - 'loadfeargreed.py'
              - 'Dockerfile.loadfeargreed'
              - 'requirements-loadfeargreed.txt'
            quarterlybalancesheet:
              - 'loadquarterlybalancesheet.py'
              - 'Dockerfile.quarterlybalancesheet'
              - 'requirements-loadquarterlybalancesheet.txt'
            annualbalancesheet:
              - 'loadannualbalancesheet.py'
              - 'Dockerfile.annualbalancesheet'
              - 'requirements-loadannualbalancesheet.txt'
            quarterlyincomestatement:
              - 'loadquarterlyincomestatement.py'
              - 'Dockerfile.quarterlyincomestatement'
              - 'requirements-loadquarterlyincomestatement.txt'
            annualincomestatement:
              - 'loadannualincomestatement.py'
              - 'Dockerfile.annualincomestatement'
              - 'requirements-loadannualincomestatement.txt'
            quarterlycashflow:
              - 'loadquarterlycashflow.py'
              - 'Dockerfile.quarterlycashflow'
              - 'requirements-loadquarterlycashflow.txt'
            annualcashflow:
              - 'loadannualcashflow.py'
              - 'Dockerfile.annualcashflow'
              - 'requirements-loadannualcashflow.txt'
            ttmincomestatement:
              - 'loadttmincomestatement.py'
              - 'Dockerfile.ttmincomestatement'
              - 'requirements-loadttmincomestatement.txt'
            ttmcashflow:
              - 'loadttmcashflow.py'
              - 'Dockerfile.ttmcashflow'
              - 'requirements-loadttmcashflow.txt'
            fundamentalmetrics:
              - 'loadfundamentalmetrics.py'
              - 'Dockerfile.loadfundamentalmetrics'
              - 'requirements-loadfundamentalmetrics.txt'
            analystupgradedowngrade:
              - 'loadanalystupgradedowngrade.py'
              - 'Dockerfile.loadanalystupgradedowngrade'
              - 'requirements-loadanalystupgradedowngrade.txt'
            symbolsalt:
              - 'loadsymbols.py'
              - 'Dockerfile.loadsymbols'
              - 'requirements-loadsymbols.txt'
            financials:
              - 'loadfinancials.py'
              - 'Dockerfile.loadfinancials'
              - 'requirements-loadfinancials.txt'
            sentiment:
              - 'loadsentiment.py'
              - 'Dockerfile.loadsentiment'
              - 'requirements-loadsentiment.txt'
            technicals:
              - 'loadtechnicals.py'
              - 'Dockerfile.loadtechnicals'
              - 'requirements-loadtechnicals.txt'
            market:
              - 'loadmarket.py'
              - 'Dockerfile.loadmarket'
              - 'requirements-loadmarket.txt'
            momentum:
              - 'loadmomentum.py'
              - 'Dockerfile.loadmomentum'
              - 'requirements-loadmomentum.txt'
            sentiment_realtime:
              - 'loadsentiment_realtime.py'
              - 'Dockerfile.loadsentiment_realtime'
              - 'requirements-loadsentiment_realtime.txt'
            positioning:
              - 'loadpositioning.py'
              - 'Dockerfile.loadpositioning'
              - 'requirements-loadpositioning.txt'
            qualitymetrics:
              - 'calculate_quality_metrics.py'
              - 'Dockerfile.quality-metrics'
              - 'requirements.txt'
            valuemetrics:
              - 'calculate_value_metrics.py'
              - 'Dockerfile.value-metrics'
              - 'requirements.txt'
            valuescores:
              - 'calculate_value_scores.py'
              - 'Dockerfile.calculate_value_scores'
              - 'requirements-value-scores.txt'
            growthmetrics:
              - 'calculate_growth_metrics.py'
              - 'Dockerfile.growth-metrics'
              - 'requirements.txt'

      - id: any
        name: Any changes?
        run: |
          if [ "${{ steps.paths.outputs.symbols }}" = "true" ] || \
             [ "${{ steps.paths.outputs.econ }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricedaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.priceweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricemonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsdaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.loadinfo }}" = "true" ] || \
             [ "${{ steps.paths.outputs.loadnews }}" = "true" ] || \
             [ "${{ steps.paths.outputs.earningsestimate }}" = "true" ] || \
             [ "${{ steps.paths.outputs.earningsmetrics }}" = "true" ] || \
             [ "${{ steps.paths.outputs.earningshistory }}" = "true" ] || \
             [ "${{ steps.paths.outputs.revenueestimate }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsmonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.swingtrader }}" = "true" ] || \
             [ "${{ steps.paths.outputs.calendar }}" = "true" ] || \
             [ "${{ steps.paths.outputs.buyselldaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.buysellweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.buysellmonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latestpricedaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latestpriceweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latestpricemonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latesttechnicalsdaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latesttechnicalsweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.latesttechnicalsmonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.naaim }}" = "true" ] || \
             [ "${{ steps.paths.outputs.aaii }}" = "true" ] || \
             [ "${{ steps.paths.outputs.feargreed }}" = "true" ] || \
             [ "${{ steps.paths.outputs.quarterlybalancesheet }}" = "true" ] || \
             [ "${{ steps.paths.outputs.annualbalancesheet }}" = "true" ] || \
             [ "${{ steps.paths.outputs.quarterlyincomestatement }}" = "true" ] || \
             [ "${{ steps.paths.outputs.annualincomestatement }}" = "true" ] || \
             [ "${{ steps.paths.outputs.quarterlycashflow }}" = "true" ] || \
             [ "${{ steps.paths.outputs.annualcashflow }}" = "true" ] || \
             [ "${{ steps.paths.outputs.ttmincomestatement }}" = "true" ] || \
             [ "${{ steps.paths.outputs.ttmcashflow }}" = "true" ] || \
             [ "${{ steps.paths.outputs.fundamentalmetrics }}" = "true" ] || \
             [ "${{ steps.paths.outputs.analystupgradedowngrade }}" = "true" ] || \
             [ "${{ steps.paths.outputs.symbols }}" = "true" ] || \
             [ "${{ steps.paths.outputs.financials }}" = "true" ] || \
             [ "${{ steps.paths.outputs.sentiment }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicals }}" = "true" ] || \
             [ "${{ steps.paths.outputs.market }}" = "true" ] || \
             [ "${{ steps.paths.outputs.momentum }}" = "true" ] || \
             [ "${{ steps.paths.outputs.sentiment_realtime }}" = "true" ] || \
             [ "${{ steps.paths.outputs.positioning }}" = "true" ] || \
             [ "${{ steps.paths.outputs.qualitymetrics }}" = "true" ] || \
             [ "${{ steps.paths.outputs.valuemetrics }}" = "true" ] || \
             [ "${{ steps.paths.outputs.valuescores }}" = "true" ] || \
             [ "${{ steps.paths.outputs.growthmetrics }}" = "true" ] || \
             [ "${{ steps.paths.outputs.app }}" = "true" ]; then
            echo "any=true" >> $GITHUB_OUTPUT
          else
            echo "any=false" >> $GITHUB_OUTPUT
          fi

      - id: matrix
        name: Build matrix
        run: |
          arr=""
          [ "${{ steps.paths.outputs.symbols }}" = "true" ]         && arr="$arr,\"symbols\""
          [ "${{ steps.paths.outputs.econ }}"    = "true" ]         && arr="$arr,\"econ\""
          [ "${{ steps.paths.outputs.pricedaily }}" = "true" ]      && arr="$arr,\"pricedaily\""
          [ "${{ steps.paths.outputs.priceweekly }}" = "true" ]     && arr="$arr,\"priceweekly\""
          [ "${{ steps.paths.outputs.pricemonthly }}" = "true" ]    && arr="$arr,\"pricemonthly\""
          [ "${{ steps.paths.outputs.technicalsdaily }}" = "true" ] && arr="$arr,\"technicalsdaily\""
          [ "${{ steps.paths.outputs.loadinfo }}" = "true" ]        && arr="$arr,\"loadinfo\""
          [ "${{ steps.paths.outputs.loadnews }}" = "true" ]        && arr="$arr,\"loadnews\""
          [ "${{ steps.paths.outputs.earningsestimate }}" = "true" ] && arr="$arr,\"earningsestimate\""
          [ "${{ steps.paths.outputs.earningsmetrics }}" = "true" ] && arr="$arr,\"earningsmetrics\""
          [ "${{ steps.paths.outputs.earningshistory }}" = "true" ] && arr="$arr,\"earningshistory\""
          [ "${{ steps.paths.outputs.revenueestimate }}" = "true" ] && arr="$arr,\"revenueestimate\""
          [ "${{ steps.paths.outputs.technicalsweekly }}" = "true" ] && arr="$arr,\"technicalsweekly\""
          [ "${{ steps.paths.outputs.technicalsmonthly }}" = "true" ] && arr="$arr,\"technicalsmonthly\""
          [ "${{ steps.paths.outputs.swingtrader }}" = "true" ]     && arr="$arr,\"swingtrader\""
          [ "${{ steps.paths.outputs.calendar }}" = "true" ]        && arr="$arr,\"calendar\""
          [ "${{ steps.paths.outputs.buyselldaily }}" = "true" ]    && arr="$arr,\"buyselldaily\""
          [ "${{ steps.paths.outputs.buysellweekly }}" = "true" ]   && arr="$arr,\"buysellweekly\""
          [ "${{ steps.paths.outputs.buysellmonthly }}" = "true" ]  && arr="$arr,\"buysellmonthly\""
          [ "${{ steps.paths.outputs.latestpricedaily }}" = "true" ]  && arr="$arr,\"latestpricedaily\""
          [ "${{ steps.paths.outputs.latestpriceweekly }}" = "true" ] && arr="$arr,\"latestpriceweekly\""
          [ "${{ steps.paths.outputs.latestpricemonthly }}" = "true" ] && arr="$arr,\"latestpricemonthly\""
          [ "${{ steps.paths.outputs.latesttechnicalsdaily }}" = "true" ]  && arr="$arr,\"latesttechnicalsdaily\""
          [ "${{ steps.paths.outputs.latesttechnicalsweekly }}" = "true" ] && arr="$arr,\"latesttechnicalsweekly\""
          [ "${{ steps.paths.outputs.latesttechnicalsmonthly }}" = "true" ] && arr="$arr,\"latesttechnicalsmonthly\""
          [ "${{ steps.paths.outputs.naaim }}" = "true" ]           && arr="$arr,\"naaim\""
          [ "${{ steps.paths.outputs.aaii }}" = "true" ]            && arr="$arr,\"aaii\""
          [ "${{ steps.paths.outputs.feargreed }}" = "true" ]       && arr="$arr,\"feargreed\""
          [ "${{ steps.paths.outputs.quarterlybalancesheet }}" = "true" ] && arr="$arr,\"quarterlybalancesheet\""
          [ "${{ steps.paths.outputs.annualbalancesheet }}" = "true" ] && arr="$arr,\"annualbalancesheet\""
          [ "${{ steps.paths.outputs.quarterlyincomestatement }}" = "true" ] && arr="$arr,\"quarterlyincomestatement\""
          [ "${{ steps.paths.outputs.annualincomestatement }}" = "true" ] && arr="$arr,\"annualincomestatement\""
          [ "${{ steps.paths.outputs.quarterlycashflow }}" = "true" ] && arr="$arr,\"quarterlycashflow\""
          [ "${{ steps.paths.outputs.annualcashflow }}" = "true" ] && arr="$arr,\"annualcashflow\""
          [ "${{ steps.paths.outputs.ttmincomestatement }}" = "true" ] && arr="$arr,\"ttmincomestatement\""
          [ "${{ steps.paths.outputs.ttmcashflow }}" = "true" ] && arr="$arr,\"ttmcashflow\""
          [ "${{ steps.paths.outputs.fundamentalmetrics }}" = "true" ] && arr="$arr,\"fundamentalmetrics\""
          [ "${{ steps.paths.outputs.analystupgradedowngrade }}" = "true" ] && arr="$arr,\"analystupgradedowngrade\""
          [ "${{ steps.paths.outputs.symbolsalt }}" = "true" ] && arr="$arr,\"symbolsalt\""
          [ "${{ steps.paths.outputs.financials }}" = "true" ] && arr="$arr,\"financials\""
          [ "${{ steps.paths.outputs.sentiment }}" = "true" ] && arr="$arr,\"sentiment\""
          [ "${{ steps.paths.outputs.technicals }}" = "true" ] && arr="$arr,\"technicals\""
          [ "${{ steps.paths.outputs.market }}" = "true" ] && arr="$arr,\"market\""
          [ "${{ steps.paths.outputs.momentum }}" = "true" ] && arr="$arr,\"momentum\""
          [ "${{ steps.paths.outputs.sentiment_realtime }}" = "true" ] && arr="$arr,\"sentiment_realtime\""
          [ "${{ steps.paths.outputs.positioning }}" = "true" ] && arr="$arr,\"positioning\""
          [ "${{ steps.paths.outputs.qualitymetrics }}" = "true" ] && arr="$arr,\"qualitymetrics\""
          [ "${{ steps.paths.outputs.valuemetrics }}" = "true" ] && arr="$arr,\"valuemetrics\""
          [ "${{ steps.paths.outputs.valuescores }}" = "true" ] && arr="$arr,\"valuescores\""
          [ "${{ steps.paths.outputs.growthmetrics }}" = "true" ] && arr="$arr,\"growthmetrics\""
          
          echo "matrix=[${arr#,}]" >> $GITHUB_OUTPUT

################################################################################
# 4) Build only the changed Docker images                                      #
################################################################################
  build:
    name: Build changed images
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.any == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        loader: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - id: build
        name: Build & push Docker image
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin "$URI"
          case "${{ matrix.loader }}" in
            symbols)          DOCKERFILE=Dockerfile.stocksymbols;   PARAM=StockSymbolsImageTag;;\
            econ)             DOCKERFILE=Dockerfile.econdata;       PARAM=EconDataImageTag;;\
            pricedaily)       DOCKERFILE=Dockerfile.pricedaily;     PARAM=PriceImageTag;;\
            priceweekly)      DOCKERFILE=Dockerfile.priceweekly;    PARAM=PriceWeeklyImageTag;;\
            pricemonthly)     DOCKERFILE=Dockerfile.pricemonthly;   PARAM=PriceMonthlyImageTag;;\
            latestpricedaily)   DOCKERFILE=Dockerfile.latestpricedaily;   PARAM=LatestPriceDailyImageTag;;\
            latestpriceweekly)  DOCKERFILE=Dockerfile.latestpriceweekly;  PARAM=LatestPriceWeeklyImageTag;;\
            latestpricemonthly) DOCKERFILE=Dockerfile.latestpricemonthly; PARAM=LatestPriceMonthlyImageTag;;\
            loadinfo)         DOCKERFILE=Dockerfile.loadinfo;       PARAM=LoadInfoImageTag;;\
            loadnews)         DOCKERFILE=Dockerfile.loadnews;       PARAM=LoadNewsImageTag;;\
            earningsestimate) DOCKERFILE=Dockerfile.loadearningsestimate;   PARAM=EarningsEstimateImageTag;;\
            earningsmetrics)  DOCKERFILE=Dockerfile.earningsmetrics;        PARAM=EarningsMetricsImageTag;;\
            earningshistory)  DOCKERFILE=Dockerfile.loadearningshistory;   PARAM=EarningsHistoryImageTag;;\
            revenueestimate)  DOCKERFILE=Dockerfile.loadrevenueestimate;   PARAM=RevenueEstimateImageTag;;\
            technicalsdaily)  DOCKERFILE=Dockerfile.technicalsdaily; PARAM=TechnicalsDailyImageTag;;\
            technicalsweekly) DOCKERFILE=Dockerfile.technicalsweekly;PARAM=TechnicalsWeeklyImageTag;;\
            technicalsmonthly)DOCKERFILE=Dockerfile.technicalsmonthly;PARAM=TechnicalsMonthlyImageTag;;\
            swingtrader)      DOCKERFILE=Dockerfile.swingtrader;    PARAM=SwingTraderImageTag;;\
            calendar)         DOCKERFILE=Dockerfile.loadcalendar;   PARAM=CalendarImageTag;;\
            buyselldaily)     DOCKERFILE=Dockerfile.buyselldaily;        PARAM=BuySellDailyImageTag;;\
            buysellweekly)    DOCKERFILE=Dockerfile.buysellweekly;        PARAM=BuySellWeeklyImageTag;;\
            buysellmonthly)   DOCKERFILE=Dockerfile.buysellmonthly;        PARAM=BuySellMonthlyImageTag;;\
            latesttechnicalsdaily)   DOCKERFILE=Dockerfile.latesttechnicalsdaily;   PARAM=LatestTechnicalsDailyImageTag;;\
            latesttechnicalsweekly)  DOCKERFILE=Dockerfile.latesttechnicalsweekly;  PARAM=LatestTechnicalsWeeklyImageTag;;\
            latesttechnicalsmonthly) DOCKERFILE=Dockerfile.latesttechnicalsmonthly; PARAM=LatestTechnicalsMonthlyImageTag;;\
            naaim)            DOCKERFILE=Dockerfile.loadnaaim;          PARAM=NaaimImageTag;;\
            aaii)             DOCKERFILE=Dockerfile.loadaaiidata;           PARAM=AaiiImageTag;;\
            feargreed)        DOCKERFILE=Dockerfile.loadfeargreed;      PARAM=FearGreedImageTag;;\
            quarterlybalancesheet) DOCKERFILE=Dockerfile.quarterlybalancesheet; PARAM=QuarterlyBalanceSheetImageTag;;\
            annualbalancesheet) DOCKERFILE=Dockerfile.annualbalancesheet; PARAM=AnnualBalanceSheetImageTag;;\
            quarterlyincomestatement) DOCKERFILE=Dockerfile.quarterlyincomestatement; PARAM=QuarterlyIncomeStatementImageTag;;\
            annualincomestatement) DOCKERFILE=Dockerfile.annualincomestatement; PARAM=AnnualIncomeStatementImageTag;;\
            quarterlycashflow) DOCKERFILE=Dockerfile.quarterlycashflow; PARAM=QuarterlyCashFlowImageTag;;\
            annualcashflow) DOCKERFILE=Dockerfile.annualcashflow; PARAM=AnnualCashFlowImageTag;;\
            ttmincomestatement) DOCKERFILE=Dockerfile.ttmincomestatement; PARAM=TTMIncomeStatementImageTag;;\
            ttmcashflow) DOCKERFILE=Dockerfile.ttmcashflow; PARAM=TTMCashFlowImageTag;;\
            fundamentalmetrics) DOCKERFILE=Dockerfile.fundamentalmetrics; PARAM=FundamentalMetricsImageTag;;\
            analystupgradedowngrade) DOCKERFILE=Dockerfile.loadanalystupgradedowngrade; PARAM=AnalystUpgradeDowngradeImageTag;;\
            symbolsalt) DOCKERFILE=Dockerfile.loadsymbols; PARAM=SymbolsAltImageTag;;\
            financials) DOCKERFILE=Dockerfile.loadfinancials; PARAM=FinancialsImageTag;;\
            sentiment) DOCKERFILE=Dockerfile.loadsentiment; PARAM=SentimentImageTag;;\
            technicals) DOCKERFILE=Dockerfile.loadtechnicals; PARAM=TechnicalsImageTag;;\
            market) DOCKERFILE=Dockerfile.loadmarket; PARAM=MarketImageTag;;\
            momentum) DOCKERFILE=Dockerfile.loadmomentum; PARAM=MomentumImageTag;;\
            sentiment_realtime) DOCKERFILE=Dockerfile.loadsentiment_realtime; PARAM=SentimentRealtimeImageTag;;\
            positioning) DOCKERFILE=Dockerfile.loadpositioning; PARAM=PositioningImageTag;;\
            qualitymetrics) DOCKERFILE=Dockerfile.quality-metrics; PARAM=QualityMetricsImageTag;;\
            valuemetrics) DOCKERFILE=Dockerfile.value-metrics; PARAM=ValueMetricsImageTag;;\
            valuescores) DOCKERFILE=Dockerfile.calculate_value_scores; PARAM=ValueScoresImageTag;;\
            growthmetrics) DOCKERFILE=Dockerfile.growth-metrics; PARAM=GrowthMetricsImageTag;;\
          esac
          TAG=${{ matrix.loader }}-${{ github.sha }}
          docker buildx build \
            --platform linux/arm64 \
            --push \
            -f "$DOCKERFILE" \
            -t "$URI:$TAG" \
            .
          echo "${PARAM}=$TAG" > build_tag_${{ matrix.loader }}.txt

      - uses: actions/upload-artifact@v4
        with:
          name: build-tags-${{ matrix.loader }}
          path: build_tag_${{ matrix.loader }}.txt

################################################################################
# 5) Deploy ECS‐tasks stack (build artifacts → CFN → container-insights)       #
################################################################################
  deploy-tasks:
    name: Deploy ECS-tasks stack
    needs: [build, detect-changes]
    if: ${{ needs.detect-changes.outputs.any == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get CloudFormation templates bucket from core stack
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "Using S3 bucket: $BUCKET"

      - name: Download all build-tag artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-tags-*
          path: .
          merge-multiple: true      
      
      - name: Generate tags.env
        shell: bash
        run: |
          cat build_tag_*.txt > tags.env
          if [ ! -f tags.env ]; then
            echo "No build tag files found or tags.env not created" >&2
            exit 1
          fi

      - name: Wait for app stack to finish exporting
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name stocks-app-stack --query 'Stacks[0].StackStatus' --output text)
          if [[ "$STATUS" == "UPDATE_IN_PROGRESS" || "$STATUS" == "CREATE_IN_PROGRESS" ]]; then
            aws cloudformation wait stack-update-complete --stack-name stocks-app-stack
          else
            echo "Stack is not updating, skipping wait."
          fi

      - name: Delete ECS tasks stack if not in a stable state (idempotency fix)
        shell: bash
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "")
          if [[ "$STATUS" == "ROLLBACK_COMPLETE" || "$STATUS" == "DELETE_FAILED" || "$STATUS" == "CREATE_FAILED" ]]; then
            echo "Stack in $STATUS, deleting before redeploy."
            aws cloudformation delete-stack --stack-name stocks-ecs-tasks-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-ecs-tasks-stack
            echo "Stack deleted."
          elif [[ -z "$STATUS" ]]; then
            echo "Stack does not exist, nothing to delete."
          else
            echo "Stack status is $STATUS, not deleting."
          fi

      - name: Get current stack parameters
        id: current-params
        run: |
          # Get current parameter values from existing stack (if it exists)
          if aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack >/dev/null 2>&1; then
            aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
              --query 'Stacks[0].Parameters' --output json > current_params.json
            echo "Stack exists, using current parameters for unchanged components"
          else
            echo "[]" > current_params.json
            echo "Stack does not exist, will create new stack"
          fi

      - name: Build selective parameter overrides
        id: build-params
        run: |
          # Function to get current parameter value
          get_current_param() {
            local param_name="$1"
            jq -r ".[] | select(.ParameterKey == \"$param_name\") | .ParameterValue" current_params.json
          }
          
          # Function to get new tag value
          get_new_tag() {
            local tag_name="$1"
            grep "^${tag_name}=" tags.env | cut -d= -f2- || echo ""
          }
          
          # Start building parameter overrides
          PARAMS="FREDApiKey=${{ secrets.FRED_API_KEY }} IBKRUsername=${{ secrets.IBKR_USERNAME }} IBKRPassword=${{ secrets.IBKR_PASSWORD }}"
          
          # Define component to parameter mapping
          declare -A COMPONENT_PARAMS
          COMPONENT_PARAMS["symbols"]="StockSymbolsImageTag"
          COMPONENT_PARAMS["econ"]="EconDataImageTag"
          COMPONENT_PARAMS["pricedaily"]="PriceImageTag"
          COMPONENT_PARAMS["priceweekly"]="PriceWeeklyImageTag"
          COMPONENT_PARAMS["pricemonthly"]="PriceMonthlyImageTag"
          COMPONENT_PARAMS["latestpricedaily"]="LatestPriceDailyImageTag"
          COMPONENT_PARAMS["latestpriceweekly"]="LatestPriceWeeklyImageTag"
          COMPONENT_PARAMS["latestpricemonthly"]="LatestPriceMonthlyImageTag"
          COMPONENT_PARAMS["technicalsdaily"]="TechnicalsDailyImageTag"
          COMPONENT_PARAMS["loadinfo"]="LoadInfoImageTag"
          COMPONENT_PARAMS["loadnews"]="LoadNewsImageTag"
          COMPONENT_PARAMS["earningsestimate"]="EarningsEstimateImageTag"
          COMPONENT_PARAMS["earningsmetrics"]="EarningsMetricsImageTag"
          COMPONENT_PARAMS["earningshistory"]="EarningsHistoryImageTag"
          COMPONENT_PARAMS["revenueestimate"]="RevenueEstimateImageTag"
          COMPONENT_PARAMS["technicalsweekly"]="TechnicalsWeeklyImageTag"
          COMPONENT_PARAMS["technicalsmonthly"]="TechnicalsMonthlyImageTag"
          COMPONENT_PARAMS["buyselldaily"]="BuySellDailyImageTag"
          COMPONENT_PARAMS["buysellweekly"]="BuySellWeeklyImageTag"
          COMPONENT_PARAMS["buysellmonthly"]="BuySellMonthlyImageTag"
          COMPONENT_PARAMS["swingtrader"]="SwingTraderImageTag"
          COMPONENT_PARAMS["calendar"]="CalendarImageTag"
          COMPONENT_PARAMS["latesttechnicalsdaily"]="LatestTechnicalsDailyImageTag"
          COMPONENT_PARAMS["latesttechnicalsweekly"]="LatestTechnicalsWeeklyImageTag"
          COMPONENT_PARAMS["latesttechnicalsmonthly"]="LatestTechnicalsMonthlyImageTag"
          COMPONENT_PARAMS["naaim"]="NaaimImageTag"
          COMPONENT_PARAMS["aaii"]="AaiiImageTag"
          COMPONENT_PARAMS["feargreed"]="FearGreedImageTag"
          COMPONENT_PARAMS["quarterlybalancesheet"]="QuarterlyBalanceSheetImageTag"
          COMPONENT_PARAMS["annualbalancesheet"]="AnnualBalanceSheetImageTag"
          COMPONENT_PARAMS["quarterlyincomestatement"]="QuarterlyIncomeStatementImageTag"
          COMPONENT_PARAMS["annualincomestatement"]="AnnualIncomeStatementImageTag"
          COMPONENT_PARAMS["quarterlycashflow"]="QuarterlyCashFlowImageTag"
          COMPONENT_PARAMS["annualcashflow"]="AnnualCashFlowImageTag"
          COMPONENT_PARAMS["ttmincomestatement"]="TTMIncomeStatementImageTag"
          COMPONENT_PARAMS["ttmcashflow"]="TTMCashFlowImageTag"
          COMPONENT_PARAMS["qualitymetrics"]="QualityMetricsImageTag"
          COMPONENT_PARAMS["valuemetrics"]="ValueMetricsImageTag"
          COMPONENT_PARAMS["fundamentalmetrics"]="FundamentalMetricsImageTag"
          COMPONENT_PARAMS["analystupgradedowngrade"]="AnalystUpgradeDowngradeImageTag"
          COMPONENT_PARAMS["financials"]="FinancialsImageTag"
          COMPONENT_PARAMS["symbolsalt"]="SymbolsAltImageTag"
          COMPONENT_PARAMS["sentiment"]="SentimentImageTag"
          COMPONENT_PARAMS["technicals"]="TechnicalsImageTag"
          COMPONENT_PARAMS["market"]="MarketImageTag"
          COMPONENT_PARAMS["momentum"]="MomentumImageTag"
          COMPONENT_PARAMS["sentiment_realtime"]="SentimentRealtimeImageTag"
          COMPONENT_PARAMS["positioning"]="PositioningImageTag"
          COMPONENT_PARAMS["valuescores"]="ValueScoresImageTag"
          COMPONENT_PARAMS["growthmetrics"]="GrowthMetricsImageTag"
          COMPONENT_PARAMS["qualityscores"]="QualityScoresImageTag"
          
          # Define components that have changed
          CHANGED_COMPONENTS=()
          [[ "${{ needs.detect-changes.outputs.symbols }}" == "true" ]] && CHANGED_COMPONENTS+=("symbols")
          [[ "${{ needs.detect-changes.outputs.econ }}" == "true" ]] && CHANGED_COMPONENTS+=("econ")
          [[ "${{ needs.detect-changes.outputs.pricedaily }}" == "true" ]] && CHANGED_COMPONENTS+=("pricedaily")
          [[ "${{ needs.detect-changes.outputs.priceweekly }}" == "true" ]] && CHANGED_COMPONENTS+=("priceweekly")
          [[ "${{ needs.detect-changes.outputs.pricemonthly }}" == "true" ]] && CHANGED_COMPONENTS+=("pricemonthly")
          [[ "${{ needs.detect-changes.outputs.latestpricedaily }}" == "true" ]] && CHANGED_COMPONENTS+=("latestpricedaily")
          [[ "${{ needs.detect-changes.outputs.latestpriceweekly }}" == "true" ]] && CHANGED_COMPONENTS+=("latestpriceweekly")
          [[ "${{ needs.detect-changes.outputs.latestpricemonthly }}" == "true" ]] && CHANGED_COMPONENTS+=("latestpricemonthly")
          [[ "${{ needs.detect-changes.outputs.technicalsdaily }}" == "true" ]] && CHANGED_COMPONENTS+=("technicalsdaily")
          [[ "${{ needs.detect-changes.outputs.loadinfo }}" == "true" ]] && CHANGED_COMPONENTS+=("loadinfo")
          [[ "${{ needs.detect-changes.outputs.loadnews }}" == "true" ]] && CHANGED_COMPONENTS+=("loadnews")
          [[ "${{ needs.detect-changes.outputs.earningsestimate }}" == "true" ]] && CHANGED_COMPONENTS+=("earningsestimate")
          [[ "${{ needs.detect-changes.outputs.earningsmetrics }}" == "true" ]] && CHANGED_COMPONENTS+=("earningsmetrics")
          [[ "${{ needs.detect-changes.outputs.earningshistory }}" == "true" ]] && CHANGED_COMPONENTS+=("earningshistory")
          [[ "${{ needs.detect-changes.outputs.revenueestimate }}" == "true" ]] && CHANGED_COMPONENTS+=("revenueestimate")
          [[ "${{ needs.detect-changes.outputs.technicalsweekly }}" == "true" ]] && CHANGED_COMPONENTS+=("technicalsweekly")
          [[ "${{ needs.detect-changes.outputs.technicalsmonthly }}" == "true" ]] && CHANGED_COMPONENTS+=("technicalsmonthly")
          [[ "${{ needs.detect-changes.outputs.buyselldaily }}" == "true" ]] && CHANGED_COMPONENTS+=("buyselldaily")
          [[ "${{ needs.detect-changes.outputs.buysellweekly }}" == "true" ]] && CHANGED_COMPONENTS+=("buysellweekly")
          [[ "${{ needs.detect-changes.outputs.buysellmonthly }}" == "true" ]] && CHANGED_COMPONENTS+=("buysellmonthly")
          [[ "${{ needs.detect-changes.outputs.swingtrader }}" == "true" ]] && CHANGED_COMPONENTS+=("swingtrader")
          [[ "${{ needs.detect-changes.outputs.calendar }}" == "true" ]] && CHANGED_COMPONENTS+=("calendar")
          [[ "${{ needs.detect-changes.outputs.latesttechnicalsdaily }}" == "true" ]] && CHANGED_COMPONENTS+=("latesttechnicalsdaily")
          [[ "${{ needs.detect-changes.outputs.latesttechnicalsweekly }}" == "true" ]] && CHANGED_COMPONENTS+=("latesttechnicalsweekly")
          [[ "${{ needs.detect-changes.outputs.latesttechnicalsmonthly }}" == "true" ]] && CHANGED_COMPONENTS+=("latesttechnicalsmonthly")
          [[ "${{ needs.detect-changes.outputs.naaim }}" == "true" ]] && CHANGED_COMPONENTS+=("naaim")
          [[ "${{ needs.detect-changes.outputs.aaii }}" == "true" ]] && CHANGED_COMPONENTS+=("aaii")
          [[ "${{ needs.detect-changes.outputs.feargreed }}" == "true" ]] && CHANGED_COMPONENTS+=("feargreed")
          [[ "${{ needs.detect-changes.outputs.quarterlybalancesheet }}" == "true" ]] && CHANGED_COMPONENTS+=("quarterlybalancesheet")
          [[ "${{ needs.detect-changes.outputs.annualbalancesheet }}" == "true" ]] && CHANGED_COMPONENTS+=("annualbalancesheet")
          [[ "${{ needs.detect-changes.outputs.quarterlyincomestatement }}" == "true" ]] && CHANGED_COMPONENTS+=("quarterlyincomestatement")
          [[ "${{ needs.detect-changes.outputs.annualincomestatement }}" == "true" ]] && CHANGED_COMPONENTS+=("annualincomestatement")
          [[ "${{ needs.detect-changes.outputs.quarterlycashflow }}" == "true" ]] && CHANGED_COMPONENTS+=("quarterlycashflow")
          [[ "${{ needs.detect-changes.outputs.annualcashflow }}" == "true" ]] && CHANGED_COMPONENTS+=("annualcashflow")
          [[ "${{ needs.detect-changes.outputs.ttmincomestatement }}" == "true" ]] && CHANGED_COMPONENTS+=("ttmincomestatement")
          [[ "${{ needs.detect-changes.outputs.ttmcashflow }}" == "true" ]] && CHANGED_COMPONENTS+=("ttmcashflow")
          [[ "${{ needs.detect-changes.outputs.qualitymetrics }}" == "true" ]] && CHANGED_COMPONENTS+=("qualitymetrics")
          [[ "${{ needs.detect-changes.outputs.valuemetrics }}" == "true" ]] && CHANGED_COMPONENTS+=("valuemetrics")
          [[ "${{ needs.detect-changes.outputs.fundamentalmetrics }}" == "true" ]] && CHANGED_COMPONENTS+=("fundamentalmetrics")
          [[ "${{ needs.detect-changes.outputs.analystupgradedowngrade }}" == "true" ]] && CHANGED_COMPONENTS+=("analystupgradedowngrade")
          [[ "${{ needs.detect-changes.outputs.financials }}" == "true" ]] && CHANGED_COMPONENTS+=("financials")
          [[ "${{ needs.detect-changes.outputs.symbolsalt }}" == "true" ]] && CHANGED_COMPONENTS+=("symbolsalt")
          [[ "${{ needs.detect-changes.outputs.sentiment }}" == "true" ]] && CHANGED_COMPONENTS+=("sentiment")
          [[ "${{ needs.detect-changes.outputs.technicals }}" == "true" ]] && CHANGED_COMPONENTS+=("technicals")
          [[ "${{ needs.detect-changes.outputs.market }}" == "true" ]] && CHANGED_COMPONENTS+=("market")
          [[ "${{ needs.detect-changes.outputs.momentum }}" == "true" ]] && CHANGED_COMPONENTS+=("momentum")
          [[ "${{ needs.detect-changes.outputs.sentiment_realtime }}" == "true" ]] && CHANGED_COMPONENTS+=("sentiment_realtime")
          [[ "${{ needs.detect-changes.outputs.positioning }}" == "true" ]] && CHANGED_COMPONENTS+=("positioning")
          [[ "${{ needs.detect-changes.outputs.valuescores }}" == "true" ]] && CHANGED_COMPONENTS+=("valuescores")
          [[ "${{ needs.detect-changes.outputs.growthmetrics }}" == "true" ]] && CHANGED_COMPONENTS+=("growthmetrics")
          [[ "${{ needs.detect-changes.outputs.qualityscores }}" == "true" ]] && CHANGED_COMPONENTS+=("qualityscores")
          
          echo "Changed components: ${CHANGED_COMPONENTS[@]}"
          
          # Add parameters for changed components only
          for component in "${CHANGED_COMPONENTS[@]}"; do
            if [[ -n "${COMPONENT_PARAMS[$component]}" ]]; then
              param_name="${COMPONENT_PARAMS[$component]}"
              new_value=$(get_new_tag "$param_name")
              if [[ -n "$new_value" ]]; then
                PARAMS+=" ${param_name}=${new_value}"
                echo "Adding parameter: ${param_name}=${new_value}"
              fi
            fi
          done
          
          echo "PARAMETER_OVERRIDES=$PARAMS" >> $GITHUB_OUTPUT
          echo "Final parameter overrides: $PARAMS"

      - name: Deploy ECS-tasks CloudFormation stack (selective)
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides ${{ steps.build-params.outputs.PARAMETER_OVERRIDES }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --s3-bucket ${{ steps.bucket.outputs.CF_BUCKET }}

      - name: Enable ECS Container Insights
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          aws ecs update-cluster-settings \
            --cluster "$CLUSTER" \
            --settings name=containerInsights,value=enabled


################################################################################
# 6) Run each changed loader                                                    #
################################################################################
  run_symbols:
    name: Run stock-symbols loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buy-sell Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started buy-sell task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ stock-symbols task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ stock-symbols failed with exit code $EXIT"
            exit $EXIT
          fi

  run_symbolsalt:
    name: Run symbols-alt loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.symbolsalt == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SymbolsAltTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run symbols-alt Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started symbols-alt task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ symbols-alt task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ symbols-alt failed with exit code $EXIT"
            exit $EXIT
          fi

  run_econ:
    name: Run econ-data loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run econ-data Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started econ-data task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ econ-data task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ econ-data failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricedaily:
    name: Run pricedaily loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run pricedaily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started pricedaily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ pricedaily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ pricedaily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_priceweekly:
    name: Run priceweekly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run priceweekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started priceweekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ priceweekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ priceweekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run pricemonthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started pricemonthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ pricemonthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ pricemonthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsdaily:
    name: Run technicals-daily loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.technicalsdaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicals-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ technicals-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ technicals-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_loadinfo:
    name: Run load-info loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.loadinfo == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadInfoTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-info Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started load-info task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ load-info task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ load-info failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningshistory:
    name: Run earnings history loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.earningshistory == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsHistoryTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings history Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started earnings task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ earnings task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ earnings failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningsestimate:
    name: Run earnings estimate loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.earningsestimate == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsEstimateTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings estimate Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started earnings estimate task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ earnings estimate task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ earnings estimate failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningsmetrics:
    name: Run earnings metrics loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.earningsmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started earnings metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ earnings metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ earnings metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_revenueestimate:
    name: Run revenue estimate loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.revenueestimate == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='RevenueEstimateTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run revenue estimate Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started revenue estimate task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ revenue estimate task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ revenue estimate failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsmonthly:
    name: Run technicals-monthly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.technicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicals-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ technicals-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ technicals-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_swingtrader:
    name: Run swing-trader loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.swingtrader == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SwingTraderTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run swing-trader Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started swing-trader task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ swing-trader task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs.describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ swing-trader failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buyselldaily:
    name: Run buysell daily loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.buyselldaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started buysell daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ buysell daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ buysell daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buysellweekly:
    name: Run buysell weekly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.buysellweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started buysell weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ buysell weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ buysell weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buysellmonthly:
    name: Run buysell monthly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.buysellmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started buysell monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ buysell monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ buysell monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpricedaily:
    name: Run load-latest-price-daily loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latestpricedaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started load-latest-price-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ load-latest-price-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ load-latest-price-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpriceweekly:
    name: Run load-latest-price-weekly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latestpriceweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started load-latest-price-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ load-latest-price-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ load-latest-price-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpricemonthly:
    name: Run load-latest-price-monthly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latestpricemonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started load-latest-price-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ load-latest-price-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ load-latest-price-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_naaim:
    name: Run NAAIM loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.naaim == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='NaaimTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run NAAIM Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started NAAIM task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ NAAIM task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ NAAIM failed with exit code $EXIT"
            exit $EXIT
          fi

  run_aaii:
    name: Run AAII loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.aaii == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AaiiTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run AAII Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started AAII task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ AAII task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ AAII failed with exit code $EXIT"
            exit $EXIT
          fi

  run_feargreed:
    name: Run Fear & Greed loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.feargreed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FearGreedTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Fear & Greed Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Fear & Greed task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Fear & Greed task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Fear & Greed failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlybalancesheet:
    name: Run Quarterly Balance Sheet loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.quarterlybalancesheet == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyBalanceSheetTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Balance Sheet Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Quarterly Balance Sheet task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Quarterly Balance Sheet task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Quarterly Balance Sheet failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualbalancesheet:
    name: Run Annual Balance Sheet loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.annualbalancesheet == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualBalanceSheetTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Balance Sheet Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Annual Balance Sheet task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Annual Balance Sheet task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Annual Balance Sheet failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlyincomestatement:
    name: Run Quarterly Income Statement loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.quarterlyincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Quarterly Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Quarterly Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Quarterly Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualincomestatement:
    name: Run Annual Income Statement loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.annualincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Annual Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Annual Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Annual Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlycashflow:
    name: Run Quarterly Cash Flow loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.quarterlycashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Quarterly Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Quarterly Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Quarterly Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualcashflow:
    name: Run Annual Cash Flow loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.annualcashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started Annual Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Annual Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Annual Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

  run_ttmincomestatement:
    name: Run TTM Income Statement loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.ttmincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TTMIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run TTM Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started TTM Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ TTM Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ TTM Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_ttmcashflow:
    name: Run TTM Cash Flow loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.ttmcashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TTMCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run TTM Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started TTM Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ TTM Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ TTM Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

# 6) Run loadnews loader
  run_loadnews:
    name: Run load-news loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.loadnews == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadNewsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUBNETS=$SUB1,$SUB2" >> $GITHUB_OUTPUT

      - name: Run load-news Fargate task
        id: run
        run: |
          aws ecs run-task \
            --cluster ${{ steps.infra.outputs.CLUSTER }} \
            --task-definition ${{ steps.td.outputs.TASK_DEF_ARN }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUBNETS }}],assignPublicIp=ENABLED}" \
            --count 1

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Load News task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Load News failed with exit code $EXIT"
            exit $EXIT
          fi

################################################################################
# Missing loader jobs                                                          #
################################################################################
  run_fundamentalmetrics:
    name: Run fundamental-metrics loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.fundamentalmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FundamentalMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run fundamental-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started fundamental-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Fundamental-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Fundamental-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_analystupgradedowngrade:
    name: Run analyst-upgrade-downgrade loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.analystupgradedowngrade == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnalystUpgradeDowngradeTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run analyst-upgrade-downgrade Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started analyst-upgrade-downgrade task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Analyst-upgrade-downgrade task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Analyst-upgrade-downgrade failed with exit code $EXIT"
            exit $EXIT
          fi

  run_financials:
    name: Run financials loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.financials == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FinancialsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run financials Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started financials task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Financials task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Financials failed with exit code $EXIT"
            exit $EXIT
          fi

  run_sentiment:
    name: Run sentiment loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.sentiment == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SentimentTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run sentiment Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started sentiment task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Sentiment task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Sentiment failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicals:
    name: Run technicals loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.technicals == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicals task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Technicals task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Technicals failed with exit code $EXIT"
            exit $EXIT
          fi

  run_market:
    name: Run market loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.market == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='MarketTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run market Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started market task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Market task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Market failed with exit code $EXIT"
            exit $EXIT
          fi

  run_momentum:
    name: Run momentum loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.momentum == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='MomentumTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run momentum Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started momentum task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Momentum task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Momentum failed with exit code $EXIT"
            exit $EXIT
          fi

  run_sentiment_realtime:
    name: Run sentiment-realtime loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.sentiment_realtime == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SentimentRealtimeTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run sentiment-realtime Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started sentiment-realtime task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Sentiment-realtime task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Sentiment-realtime failed with exit code $EXIT"
            exit $EXIT
          fi

  run_positioning:
    name: Run positioning loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.positioning == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PositioningTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run positioning Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started positioning task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Positioning task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Positioning failed with exit code $EXIT"
            exit $EXIT
          fi

  run_qualityscores:
    name: Run quality-scores calculator
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.qualityscores == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QualityScoresTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run quality-scores Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started quality-scores task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Quality-scores task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Quality-scores failed with exit code $EXIT"
            exit $EXIT
          fi

  run_valuescores:
    name: Run value-scores calculator
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.valuescores == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ValueScoresTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run value-scores Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started value-scores task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Value-scores task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Value-scores failed with exit code $EXIT"
            exit $EXIT
          fi

  run_growthmetrics:
    name: Run growth-metrics calculator
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.growthmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='GrowthMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run growth-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started growth-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Growth-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Growth-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsweekly:
    name: Run technicals-weekly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.technicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicals-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Technicals-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Technicals-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsdaily:
    name: Run latest-technicals-daily loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latesttechnicalsdaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started latest-technicals-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Latest-technicals-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Latest-technicals-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsweekly:
    name: Run latest-technicals-weekly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latesttechnicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started latest-technicals-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Latest-technicals-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Latest-technicals-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsmonthly:
    name: Run latest-technicals-monthly loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.latesttechnicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started latest-technicals-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Latest-technicals-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Latest-technicals-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_calendar:
    name: Run calendar loader
    needs: [deploy-tasks, detect-changes]
    if: ${{ needs.detect-changes.outputs.calendar == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='CalendarTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run calendar Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started calendar task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ Calendar task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" != "None" ] && [ "$EXIT" != "" ] && [[ "$EXIT" =~ ^[0-9]+$ ]] && [ "$EXIT" -ne 0 ]; then
            echo "❌ Calendar failed with exit code $EXIT"
            exit $EXIT
          fi