name: deploy-app-stocks

on:
  push:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
  IBKR_USERNAME: ${{ secrets.IBKR_USERNAME }}
  IBKR_PASSWORD: ${{ secrets.IBKR_PASSWORD }}

jobs:
  ##########################################################################
  # 1) Detect changed components                                           #
  ##########################################################################
  filter:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      symbols:       ${{ steps.paths.outputs.symbols }}
      econ:          ${{ steps.paths.outputs.econ }}
      findata:       ${{ steps.paths.outputs.findata }}
      pricedaily:    ${{ steps.paths.outputs.pricedaily }}
      priceweekly:   ${{ steps.paths.outputs.priceweekly }}
      pricemonthly:  ${{ steps.paths.outputs.pricemonthly }}
      technicalsdaily:   ${{ steps.paths.outputs.technicalsdaily }}
      loadinfo:      ${{ steps.paths.outputs.loadinfo }}
      earnings:      ${{ steps.paths.outputs.earnings }}
      technicalsweekly:  ${{ steps.paths.outputs.technicalsweekly }}
      technicalsmonthly: ${{ steps.paths.outputs.technicalsmonthly }}
      buysell:       ${{ steps.paths.outputs.buysell }}
      swingtrader:   ${{ steps.paths.outputs.swingtrader }}
      cf_templates:  ${{ steps.paths.outputs.cf_templates }}
      any:           ${{ steps.any.outputs.any }}
      matrix:        ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: paths
        name: Which files changed?
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before != '0000000000000000000000000000000000000000' && github.event.before || github.sha }}
          filters: |
            symbols:
              - loadstocksymbols.py
              - requirements-loadstocksymbols.txt
              - Dockerfile.stocksymbols
            econ:
              - loadecondata.py
              - requirements-loadecondata.txt
              - Dockerfile.econdata
            findata:
              - loadfinancialdata.py
              - requirements-loadfinancialdata.txt
              - Dockerfile.findata
            pricedaily:
              - loadpricedaily.py
              - requirements-loadpricedaily.txt
              - Dockerfile.pricedaily
            priceweekly:
              - loadpriceweekly.py
              - requirements-loadpriceweekly.txt
              - Dockerfile.priceweekly
            pricemonthly:
              - loadpricemonthly.py
              - requirements-loadpricemonthly.txt
              - Dockerfile.pricemonthly
            technicalsdaily:
              - loadtechnicalsdaily.py
              - requirements-loadtechnicalsdaily.txt
              - Dockerfile.technicalsdaily
            loadinfo:
              - loadinfo.py
              - requirements-loadinfo.txt
              - Dockerfile.loadinfo
            earnings:
              - loadearnings.py
              - requirements-loadearnings.txt
              - Dockerfile.loadearnings
            technicalsweekly:
              - loadtechnicalsweekly.py
              - requirements-loadtechnicalsweekly.txt
              - Dockerfile.technicalsweekly
            technicalsmonthly:
              - loadtechnicalsmonthly.py
              - requirements-loadtechnicalsmonthly.txt
              - Dockerfile.technicalsmonthly
            buysell:
              - loadbuysell.py
              - requirements-loadbuysell.txt
              - Dockerfile.buysell
            swingtrader:
              - swingtrader.py
              - requirements-swingtrader.txt
              - Dockerfile.swingtrader
            cf_templates:
              - template-app.yml

      - id: any
        name: Any loader code changes?
        run: |
          if [ "${{ steps.paths.outputs.symbols }}" = "true" ] || \
             [ "${{ steps.paths.outputs.econ }}" = "true" ] || \
             [ "${{ steps.paths.outputs.findata }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricedaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.priceweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricemonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsdaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.loadinfo }}" = "true" ] || \
             [ "${{ steps.paths.outputs.earnings }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsmonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.buysell }}" = "true" ] || \
             [ "${{ steps.paths.outputs.swingtrader }}" = "true" ]; then
            echo "any=true" >> $GITHUB_OUTPUT
          else
            echo "any=false" >> $GITHUB_OUTPUT
          fi

      - id: matrix
        name: Build matrix
        run: |
          arr=""
          [ "${{ steps.paths.outputs.symbols }}" = "true" ]       && arr="$arr,\"symbols\""
          [ "${{ steps.paths.outputs.econ }}" = "true" ]          && arr="$arr,\"econ\""
          [ "${{ steps.paths.outputs.findata }}" = "true" ]       && arr="$arr,\"findata\""
          [ "${{ steps.paths.outputs.pricedaily }}" = "true" ]    && arr="$arr,\"pricedaily\""
          [ "${{ steps.paths.outputs.priceweekly }}" = "true" ]   && arr="$arr,\"priceweekly\""
          [ "${{ steps.paths.outputs.pricemonthly }}" = "true" ]  && arr="$arr,\"pricemonthly\""
          [ "${{ steps.paths.outputs.technicalsdaily }}" = "true" ] && arr="$arr,\"technicalsdaily\""
          [ "${{ steps.paths.outputs.loadinfo }}" = "true" ]      && arr="$arr,\"loadinfo\""
          [ "${{ steps.paths.outputs.earnings }}" = "true" ]      && arr="$arr,\"earnings\""
          [ "${{ steps.paths.outputs.technicalsweekly }}" = "true" ] && arr="$arr,\"technicalsweekly\""
          [ "${{ steps.paths.outputs.technicalsmonthly }}" = "true" ] && arr="$arr,\"technicalsmonthly\""
          [ "${{ steps.paths.outputs.buysell }}" = "true" ]       && arr="$arr,\"buysell\""
          [ "${{ steps.paths.outputs.swingtrader }}" = "true" ]   && arr="$arr,\"swingtrader\""
          matrix="[${arr#,}]"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  ##########################################################################
  # 2) Build changed images                                                 #
  ##########################################################################
  build:
    name: Build changed images
    needs: filter
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest
    # … (unchanged from original)

  ##########################################################################
  # 3) Deploy RDS & Secrets (only on CF-template changes)                    #
  ##########################################################################
  deploy-db:
    name: Deploy RDS & Secrets Stack
    needs: filter
    if: ${{ needs.filter.outputs.cf_templates == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Deploy DB stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-app-db-stack \
            --template-file template-app.yml \
            --parameter-overrides \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=$FRED_API_KEY \
            --capabilities CAPABILITY_NAMED_IAM

  ##########################################################################
  # 4) Deploy ECS CloudFormation                                           #
  ##########################################################################
  deploy:
    name: Deploy ECS CloudFormation
    needs:
      - filter
      - build
      - deploy-db
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest

    # ensure the IBKR ARNs are in-scope for this job
    env:
      IBKR_USERNAME_SECRET_ARN: ${{ secrets.IBKR_USERNAME_SECRET_ARN }}
      IBKR_PASSWORD_SECRET_ARN: ${{ secrets.IBKR_PASSWORD_SECRET_ARN }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch existing tags
        run: |
          if aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack >/dev/null 2>&1; then
            for key in \
              StockSymbolsImageTag EconDataImageTag FindataImageTag \
              PriceImageTag PriceWeeklyImageTag PriceMonthlyImageTag \
              TechnicalsDailyImageTag LoadInfoImageTag EarningsImageTag \
              TechnicalsWeeklyImageTag TechnicalsMonthlyImageTag \
              BuySellImageTag SwingTraderImageTag; do
              echo "${key}=$(aws cloudformation describe-stacks \
                --stack-name stocks-ecs-tasks-stack \
                --query "Stacks[0].Parameters[?ParameterKey=='${key}'].ParameterValue" \
                --output text)" >> tags.env
            done
          fi
          cat tags.env

      - name: Download new tags
        uses: actions/download-artifact@v4
        with:
          path: new-tags

      - name: Merge tags
        run: |
          find new-tags -type f -name 'build_tag_*.txt' -print0 | \
          while IFS= read -r -d '' f; do
            kv=$(<"$f"); key=${kv%%=*}; val=${kv#*=}
            if grep -q "^$key=" tags.env; then
              sed -i "s|^$key=.*|$key=$val|" tags.env
            else
              echo "$key=$val" >> tags.env
            fi
          done
          cat tags.env

      - name: Deploy stack
        run: |
          echo "Using IBKR ARNs: $IBKR_USERNAME_SECRET_ARN / $IBKR_PASSWORD_SECRET_ARN"
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=$(grep '^StockSymbolsImageTag=' tags.env | cut -d= -f2-) \
              EconDataImageTag=$(grep '^EconDataImageTag=' tags.env | cut -d= -f2-) \
              FindataImageTag=$(grep '^FindataImageTag=' tags.env | cut -d= -f2-) \
              PriceImageTag=$(grep '^PriceImageTag=' tags.env | cut -d= -f2-) \
              PriceWeeklyImageTag=$(grep '^PriceWeeklyImageTag=' tags.env | cut -d= -f2-) \
              PriceMonthlyImageTag=$(grep '^PriceMonthlyImageTag=' tags.env | cut -d= -f2-) \
              TechnicalsDailyImageTag=$(grep '^TechnicalsDailyImageTag=' tags.env | cut -d= -f2-) \
              LoadInfoImageTag=$(grep '^LoadInfoImageTag=' tags.env | cut -d= -f2-) \
              EarningsImageTag=$(grep '^EarningsImageTag=' tags.env | cut -d= -f2-) \
              TechnicalsWeeklyImageTag=$(grep '^TechnicalsWeeklyImageTag=' tags.env | cut -d= -f2-) \
              TechnicalsMonthlyImageTag=$(grep '^TechnicalsMonthlyImageTag=' tags.env | cut -d= -f2-) \
              BuySellImageTag=$(grep '^BuySellImageTag=' tags.env | cut -d= -f2-) \
              SwingTraderImageTag=$(grep '^SwingTraderImageTag=' tags.env | cut -d= -f2-) \
              FREDApiKey=$FRED_API_KEY \
              IBKRUsername=$IBKR_USERNAME \
              IBKRPassword=$IBKR_PASSWORD \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Enable ECS Container Insights
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          aws ecs update-cluster-settings \
            --cluster "$CLUSTER" \
            --settings name=containerInsights,value=enabled

  ##########################################################################
  # 5) Run each changed loader                                             #
  ##########################################################################
  run_symbols:
    name: Run stock-symbols loader
    needs: deploy
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT
      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
      - name: Run stock-symbols Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started stock-symbols task $TASK_ARN"
      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ stock-symbols task did not stop within 60m"
            exit 1
          fi
      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ stock-symbols failed with exit code $EXIT"
            exit $EXIT
          fi

  run_econ:
    name: Run econ-data loader
    needs: deploy
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run econ-data Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started econ-data task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ econ-data task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ econ-data failed with exit code $EXIT"
            exit $EXIT
          fi

  run_findata:
    name: Run findata loader
    needs: deploy
    if: ${{ needs.filter.outputs.findata == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run findata Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started findata task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ findata task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ findata failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricedaily:
    name: Run pricedaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run pricedaily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started pricedaily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ pricedaily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ pricedaily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_priceweekly:
    name: Run priceweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run priceweekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started priceweekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ priceweekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ priceweekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run pricemonthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started pricemonthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ pricemonthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ pricemonthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsdaily:
    name: Run technicalsdaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicalsdaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run technicalsdaily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicalsdaily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ technicalsdaily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs.describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ technicalsdaily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_loadinfo:
    name: Run loadinfo loader
    needs: deploy
    if: ${{ needs.filter.outputs.loadinfo == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadInfoTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PUBLICSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PUBLICSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run loadinfo Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started loadinfo task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs.describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ loadinfo task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs.describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0]; then
            echo "❌ loadinfo failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earnings:
    name: Run earnings loader
    needs: deploy
    if: ${{ needs.filter.outputs.earnings == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run earnings Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started earnings task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ earnings task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ earnings failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsweekly:
    name: Run technicalsweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run technicalsweekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicalsweekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ technicalsweekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ technicalsweekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsmonthly:
    name: Run technicalsmonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run technicalsmonthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started technicalsmonthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ technicalsmonthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ technicalsmonthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buysell:
    name: Run buysell loader
    needs: deploy
    if: ${{ needs.filter.outputs.buysell == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run buysell Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started buysell task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ buysell task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ buysell failed with exit code $EXIT"
            exit $EXIT
          fi

  run_swingtrader:
    name: Run swingtrader loader
    needs: deploy
    if: ${{ needs.filter.outputs.swingtrader == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:      ${{ env.AWS_REGION }}
          role-to-assume:  ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation.describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SwingTraderTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation.list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation.list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation.list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run swingtrader Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "🟢 Started swingtrader task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs.describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i – status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "❌ swingtrader task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs.describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "→ Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "❌ swingtrader failed with exit code $EXIT"
            exit $EXIT
          fi

