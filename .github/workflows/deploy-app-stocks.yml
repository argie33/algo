name: deploy-app-template

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # 1) Package & upload symbols-loader Lambda
  build_and_upload_lambda:
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Lambda dependencies
        run: |
          rm -rf package && mkdir package
          pip install --upgrade pip
          if [ -f requirements-loadstocksymbols.txt ]; then
            pip install -r requirements-loadstocksymbols.txt -t package
          fi

      - name: Package Lambda
        run: |
          cp loadstocksymbols.py package/index.py
          cd package
          zip -r "../loadstocksymbols-${{ github.sha }}.zip" .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - id: upload
        name: Upload Lambda to S3
        run: |
          aws s3 cp "loadstocksymbols-${{ github.sha }}.zip" \
            s3://stocks-algo-app-code/loadstocksymbols-${{ github.sha }}.zip
          echo "code_key=loadstocksymbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  # 2) Build & push Docker image, set image_tag output
  build_and_push_fin_container:
    needs: build_and_upload_lambda
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build_push.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - id: aws_account
        name: Get AWS Account ID
        run: |
          echo "::set-output name=account_id::$(aws sts get-caller-identity --query Account --output text)"

      - id: build_push
        name: Build, tag & push Docker image
        run: |
          IMAGE_TAG="${{ github.sha }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          aws ecr describe-repositories --repository-names stocks-app-registry || \
            aws ecr create-repository --repository-name stocks-app-registry

          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com

          docker build -t ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/stocks-app-registry:${IMAGE_TAG} .
          docker push ${{ steps.aws_account.outputs.account_id }}.dkr.ecr.us-east-1.amazonaws.com/stocks-app-registry:${IMAGE_TAG}

  # 3) Deploy infra stack (RDS, Secret, Lambda, ECS Cluster) using template-app-stocks-main.yml
  deploy_infra:
    needs: build_and_push_fin_container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed infra stack
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-infra-stack \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-infra-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-infra-stack
          fi

      - name: Deploy infra stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-infra-stack \
            --template-file template-app-stocks-main.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_lambda.outputs.code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

  # 4) Deploy tasks & schedules using template-app-stocks-app.yml (takes only ImageTag)
  deploy_tasks:
    needs: deploy_infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed tasks stack
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-tasks-stack \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-tasks-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-tasks-stack
          fi

      - name: Deploy tasks stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-tasks-stack \
            --template-file template-app-stocks-app.yml \
            --parameter-overrides \
              ImageTag=${{ needs.build_and_push_fin_container.outputs.image_tag }} \
            --capabilities CAPABILITY_NAMED_IAM
