# .github/workflows/deploy-app-template.yml
name: deploy-app-template

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main

env:
  AWS_REGION:       us-east-1
  AWS_ROLE_ARN:     arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy

jobs:
  ################################################
  # 0) Read toggles                              #
  ################################################
  set_flags:
    runs-on: ubuntu-latest
    outputs:
      run_symbols:      ${{ steps.set.outputs.run_symbols }}
      run_econ:         ${{ steps.set.outputs.run_econ }}
      run_lambdas:      ${{ steps.set.outputs.run_lambdas }}
      build_containers: ${{ steps.set.outputs.build_containers }}
      deploy_ecs:       ${{ steps.set.outputs.deploy_ecs }}
      run_findata:      ${{ steps.set.outputs.run_findata }}
      run_pricedaily:   ${{ steps.set.outputs.run_pricedaily }}
      run_priceweekly:  ${{ steps.set.outputs.run_priceweekly }}
      run_pricemonthly: ${{ steps.set.outputs.run_pricemonthly }}
    steps:
      - name: Set flags from env
        id: set
        run: |
          for v in RUN_SYMBOLS RUN_ECON RUN_LAMBDAS BUILD_CONTAINERS DEPLOY_ECS RUN_FINDATA RUN_PRICEDAILY RUN_PRICEWEEKLY RUN_PRICEMONTHLY; do
            echo "${v,,}=${!v}" >> $GITHUB_OUTPUT
          done

  ################################################
  # 1) Package & upload symbols‑loader Lambda   #
  ################################################
  build_and_upload_symbols:
    needs: set_flags
    if: ${{ needs.set_flags.outputs.run_symbols == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com

      - name: Lookup S3 bucket for code
        id: bucket
        run: |
          B=$(aws cloudformation describe-stacks \
              --stack-name stocks-core-stack \
              --query "Stacks[0].Outputs[?OutputKey=='CodeBucketName'].OutputValue" \
              --output text)
          echo "bucket=$B" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install symbols‑loader deps
        run: |
          rm -rf symbols_package && mkdir symbols_package
          pip install --upgrade pip
          pip install -r requirements-loadstocksymbols.txt -t symbols_package

      - name: Package symbols‑loader
        run: |
          cp loadstocksymbols.py symbols_package/index.py
          cd symbols_package
          zip -r "../symbols-${{ github.sha }}.zip" .
          cd ..

      - name: Inspect ZIP contents (symbols)
        run: unzip -l symbols-${{ github.sha }}.zip | sed -n '1,20p'

      - name: Upload symbols package to S3
        id: upload
        run: |
          aws s3 cp symbols-${{ github.sha }}.zip \
            s3://${{ steps.bucket.outputs.bucket }}/ \
            --region ${{ env.AWS_REGION }}
          echo "code_key=symbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ################################################
  # 2) Package & upload econ‑data Lambda        #
  ################################################
  build_and_upload_econ:
    needs: set_flags
    if: ${{ needs.set_flags.outputs.run_econ == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      econ_code_key: ${{ steps.upload_econ.outputs.code_key }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com

      - name: Lookup S3 bucket for code
        id: bucket_econ
        run: |
          B=$(aws cloudformation describe-stacks \
              --stack-name stocks-core-stack \
              --query "Stacks[0].Outputs[?OutputKey=='CodeBucketName'].OutputValue" \
              --output text)
          echo "bucket=$B" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install econ‑data loader deps
        run: |
          rm -rf econ_package && mkdir econ_package
          pip install --upgrade pip
          pip install -r requirements-loadecondata.txt -t econ_package

      - name: Package econ‑data loader
        run: |
          cp loadfinancialdata.py econ_package/index.py
          cd econ_package
          zip -r "../econ-${{ github.sha }}.zip" .
          cd ..

      - name: Inspect ZIP contents (econ)
        run: unzip -l econ-${{ github.sha }}.zip | sed -n '1,20p'

      - name: Upload econ‑data package to S3
        id: upload_econ
        run: |
          aws s3 cp econ-${{ github.sha }}.zip \
            s3://${{ steps.bucket_econ.outputs.bucket }}/ \
            --region ${{ env.AWS_REGION }}
          echo "code_key=econ-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ################################################
  # 3) Deploy RDS & Lambdas                     #
  ################################################
  deploy_and_run_lambdas:
    needs:
      - build_and_upload_symbols
      - build_and_upload_econ
    if: ${{ needs.set_flags.outputs.run_lambdas == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com

      - name: Deploy application CloudFormation
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_symbols.outputs.code_key }} \
              EconomicCodeKey=${{ needs.build_and_upload_econ.outputs.econ_code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Debug: Describe deployed Lambda functions
        run: |
          aws lambda get-function --function-name loadstocksymbols
          aws lambda get-function --function-name loadecondata

      - name: Invoke loadstocksymbols (async)
        run: |
          aws lambda invoke \
            --function-name loadstocksymbols \
            --invocation-type Event \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null || true

      - name: Invoke loadecondata (async)
        run: |
          aws lambda invoke \
            --function-name loadecondata \
            --invocation-type Event \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            /dev/null || true

  ################################################
  # 4) Build & push ECS container images        #
  ################################################
  build_and_push_containers:
    needs: deploy_and_run_lambdas
    if: ${{ needs.set_flags.outputs.build_containers == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      findata_tag:      ${{ steps.findata.outputs.tag }}
      pricedaily_tag:   ${{ steps.pricedaily.outputs.tag }}
      priceweekly_tag:  ${{ steps.weekly.outputs.tag }}
      pricemonthly_tag: ${{ steps.monthly.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: List workspace files
        run: ls -R .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Ensure ECR repo exists & get URI
        id: get_uri
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $REPO
          URI=$(aws ecr describe-repositories \
            --repository-names $REPO \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "repo_uri=$URI" >> $GITHUB_OUTPUT

      - name: Build & push findata container
        id: findata
        run: |
          TAG=findata-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricedaily container
        id: pricedaily
        run: |
          TAG=pricedaily-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricedaily -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push priceweekly container
        id: weekly
        run: |
          TAG=priceweekly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.priceweekly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricemonthly container
        id: monthly
        run: |
          TAG=pricemonthly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricemonthly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  ################################################
  # 5) Deploy ECS TaskDefinitions                #
  ################################################
  deploy_ecs_tasks:
    needs: build_and_push_containers
    if: ${{ needs.set_flags.outputs.deploy_ecs == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      findata_arn:  ${{ steps.fetch.outputs.findata_arn }}
      price_arn:    ${{ steps.fetch.outputs.price_arn }}
      weekly_arn:   ${{ steps.fetch.outputs.weekly_arn }}
      monthly_arn:  ${{ steps.fetch.outputs.monthly_arn }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com

      - name: Deploy ECS TaskDefinitions stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              FindataImageTag=${{ needs.build_and_push_containers.outputs.findata_tag }} \
              PriceImageTag=${{ needs.build_and_push_containers.outputs.pricedaily_tag }} \
              PriceWeeklyImageTag=${{ needs.build_and_push_containers.outputs.priceweekly_tag }} \
              PriceMonthlyImageTag=${{ needs.build_and_push_containers.outputs.pricemonthly_tag }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Debug: show CFN Outputs JSON
        run: aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack

      - name: Fetch ECS TaskDefinition ARNs
        id: fetch
        run: |
          echo "findata_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='FindataTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "price_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "weekly_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "monthly_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT

  ################################################
  # 6) Run ECS tasks in sequence                 #
  ################################################
  run_findata:
    needs: deploy_ecs_tasks
    if: ${{ needs.set_flags.outputs.run_findata == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Debug: show fetched findata ARN
        run: echo "findata_arn = '${{ needs.deploy_ecs_tasks.outputs.findata_arn }}'"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com
      - name: Run findata-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.findata_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PUBLIC_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  run_pricedaily:
    needs: run_findata
    if: ${{ needs.set_flags.outputs.run_pricedaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Debug: show fetched pricedaily ARN
        run: echo "price_arn = '${{ needs.deploy_ecs_tasks.outputs.price_arn }}'"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com
      - name: Run pricedaily-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.price_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PUBLIC_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  run_priceweekly:
    needs: run_pricedaily
    if: ${{ needs.set_flags.outputs.run_priceweekly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Debug: show fetched priceweekly ARN
        run: echo "weekly_arn = '${{ needs.deploy_ecs_tasks.outputs.weekly_arn }}'"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com
      - name: Run priceweekly-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.weekly_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PUBLIC_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  run_pricemonthly:
    needs: run_priceweekly
    if: ${{ needs.set_flags.outputs.run_pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Debug: show fetched pricemonthly ARN
        run: echo "monthly_arn = '${{ needs.deploy_ecs_tasks.outputs.monthly_arn }}'"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
          aws-region:        ${{ env.AWS_REGION }}
          audience:          sts.amazonaws.com
      - name: Run pricemonthly-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.monthly_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PUBLIC_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1
