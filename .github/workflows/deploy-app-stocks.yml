name: deploy-app-template

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ###############################
  # 1) Build & upload symbols  #
  ###############################
  build_and_upload_symbols:
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install symbols‑loader deps
        run: |
          rm -rf symbols_package && mkdir symbols_package
          pip install --upgrade pip
          pip install -r requirements-loadstocksymbols.txt -t symbols_package
      - name: Package symbols‑loader
        run: |
          cp loadstocksymbols.py symbols_package/index.py
          cd symbols_package && zip -r "../symbols-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload symbols‑loader ZIP
        id: upload
        run: |
          aws s3 cp "symbols-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "code_key=symbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ####################################
  # 2) Build & upload econ‑data     #
  ####################################
  build_and_upload_econ:
    runs-on: ubuntu-latest
    outputs:
      econ_code_key: ${{ steps.upload.outputs.econ_code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install econ‑data deps
        run: |
          rm -rf econ_package && mkdir econ_package
          pip install --upgrade pip
          pip install -r requirements-loadecondata.txt -t econ_package
      - name: Package econ‑data loader
        run: |
          cp loadecondata.py econ_package/index.py
          cd econ_package && zip -r "../econ-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload econ‑data ZIP
        id: upload
        run: |
          aws s3 cp "econ-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "econ_code_key=econ-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  #################################################
  # 3) Deploy & run symbols‑loader & econ‑data   #
  #################################################
  deploy_and_run_lambdas:
    needs:
      - build_and_upload_symbols
      - build_and_upload_econ
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Wait for core infra
        run: |
          aws cloudformation wait stack-create-complete --stack-name stocks-core-stack

      - name: Cleanup failed DB stack
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-db-lambda-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo NOT_FOUND)
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-db-lambda-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-db-lambda-stack
          fi

      - name: Wait for DB stack readiness
        run: |
          echo "Checking DB stack status..."
          while STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-db-lambda-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null); \
            [ "$STATUS" = "CREATE_IN_PROGRESS" ] || \
            [ "$STATUS" = "ROLLBACK_IN_PROGRESS" ] || \
            [ "$STATUS" = "UPDATE_IN_PROGRESS" ] || \
            [ "$STATUS" = "UPDATE_ROLLBACK_IN_PROGRESS" ]; do
            echo "DB stack is $STATUS, waiting 30s..."
            sleep 30
          done

      - name: Deploy App stack
        run: |
          MAX_RETRIES=5
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Deployment attempt $i/$MAX_RETRIES..."
            if aws cloudformation deploy \
              --stack-name stocks-db-lambda-stack \
              --template-file template-app-stocks.yml \
              --parameter-overrides \
                CodeKey=${{ needs.build_and_upload_symbols.outputs.code_key }} \
                EconomicCodeKey=${{ needs.build_and_upload_econ.outputs.econ_code_key }} \
                RDSUsername=${{ secrets.RDS_USERNAME }} \
                RDSPassword=${{ secrets.RDS_PASSWORD }} \
                FREDApiKey=${{ secrets.FRED_API_KEY }} \
              --capabilities CAPABILITY_NAMED_IAM; then
              echo "CloudFormation deploy succeeded."
              break
            else
              echo "Deploy failed on attempt $i."
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Retrying in $((i * 15))s..."
                sleep $((i * 15))
              else
                echo "Max retries reached. Exiting with failure."
                exit 1
              fi
            fi
          done

      - name: Invoke symbols‑loader
        run: |
          aws lambda invoke \
            --function-name loadstocksymbols \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            symbols_response.json || true

      - name: Invoke econ‑data loader
        run: |
          aws lambda invoke \
            --function-name loadecondata \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            econ_response.json || true

  ########################################
  # 4) Build & push ECS container images#
  ########################################
  build_and_push_containers:
    needs: deploy_and_run_lambdas
    runs-on: ubuntu-latest
    outputs:
      repo_uri:         ${{ steps.get_uri.outputs.repo_uri }}
      findata_tag:      ${{ steps.findata.outputs.tag }}
      pricedaily_tag:   ${{ steps.pricedaily.outputs.tag }}
      priceweekly_tag:  ${{ steps.weekly.outputs.tag }}
      pricemonthly_tag: ${{ steps.monthly.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Ensure ECR exists & get URI
        id: get_uri
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $REPO
          URI=$(aws ecr describe-repositories \
            --repository-names $REPO \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "repo_uri=$URI" >> $GITHUB_OUTPUT

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push findata
        id: findata
        run: |
          TAG=findata-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricedaily
        id: pricedaily
        run: |
          TAG=pricedaily-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricedaily -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push priceweekly
        id: weekly
        run: |
          TAG=priceweekly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.priceweekly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricemonthly
        id: monthly
        run: |
          TAG=pricemonthly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricemonthly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  #################################################
  # 5) Deploy ECS TaskDefinitions                 #
  #################################################
  deploy_ecs_tasks:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    outputs:
      findata_arn: ${{ steps.deploy.outputs.findata_arn }}
      price_arn:   ${{ steps.deploy.outputs.price_arn }}
      weekly_arn:  ${{ steps.deploy.outputs.weekly_arn }}
      monthly_arn: ${{ steps.deploy.outputs.monthly_arn }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Deploy ECS TaskDefinitions
        id: deploy
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              FindataImageTag=${{ needs.build_and_push_containers.outputs.findata_tag }} \
              PriceImageTag=${{ needs.build_and_push_containers.outputs.pricedaily_tag }} \
              PriceWeeklyImageTag=${{ needs.build_and_push_containers.outputs.priceweekly_tag }} \
              PriceMonthlyImageTag=${{ needs.build_and_push_containers.outputs.pricemonthly_tag }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Fetch TaskDefinition ARNs
        run: |
          echo "findata_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='FindataTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "price_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "weekly_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT
          echo "monthly_arn=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query \"Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefinitionArn'].OutputValue\" \
            --output text)" >> $GITHUB_OUTPUT

  #################################################
  # 6a) Run findata ECS task                     #
  #################################################
  run_findata:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Run findata-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.findata_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PRIVATE_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  #################################################
  # 6b) Run pricedaily ECS task                  #
  #################################################
  run_pricedaily:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Run pricedaily-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.price_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PRIVATE_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  #################################################
  # 6c) Run priceweekly ECS task                 #
  #################################################
  run_priceweekly:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Run priceweekly-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.weekly_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PRIVATE_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1

  #################################################
  # 6d) Run pricemonthly ECS task                #
  #################################################
  run_pricemonthly:
    needs: deploy_ecs_tasks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Run pricemonthly-loader
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ needs.deploy_ecs_tasks.outputs.monthly_arn }}" \
            --network-configuration '{"awsvpcConfiguration":{"subnets":[${{ secrets.PRIVATE_SUBNET_IDS }}],"assignPublicIp":"ENABLED"}}' \
            --count 1
