name: deploy-app-template

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  ###############################
  # 1) Build & upload symbols  #
  ###############################
  build_and_upload_symbols:
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install symbols‑loader dependencies
        run: |
          rm -rf symbols_package && mkdir symbols_package
          pip install --upgrade pip
          pip install -r requirements-loadstocksymbols.txt -t symbols_package
      - name: Package symbols‑loader
        run: |
          cp loadstocksymbols.py symbols_package/index.py
          cd symbols_package && zip -r "../symbols-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload symbols‑loader ZIP to S3
        id: upload
        run: |
          aws s3 cp "symbols-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "code_key=symbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ####################################
  # 2) Build & upload econ‑data     #
  ####################################
  build_and_upload_econ:
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install econ‑data dependencies
        run: |
          rm -rf econ_package && mkdir econ_package
          pip install --upgrade pip
          pip install -r requirements-loadecondata.txt -t econ_package
      - name: Package econ‑data loader
        run: |
          cp loadecondata.py econ_package/index.py
          cd econ_package && zip -r "../econ-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload econ‑data ZIP to S3
        id: upload
        run: |
          aws s3 cp "econ-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "code_key=econ-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  #################################################
  # 3) Deploy DB & invoke econ‑data loader once  #
  #################################################
  deploy_and_run_econ:
    needs:
      - build_and_upload_symbols
      - build_and_upload_econ
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Wait for core infra
        run: aws cloudformation wait stack-create-complete --stack-name stocks-core-stack

      - name: Cleanup FAILED App stack if needed
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-db-lambda-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo NOT_FOUND)
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting old stocks-db-lambda-stack in ROLLBACK_COMPLETE…"
            aws cloudformation delete-stack --stack-name stocks-db-lambda-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-db-lambda-stack
          fi

      - name: Deploy App stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_symbols.outputs.code_key }} \
              EconomicCodeKey=${{ needs.build_and_upload_econ.outputs.code_key }} \
              MonthlyCodeKey=${{ needs.build_and_upload_econ.outputs.code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Invoke econ‑data loader
        run: |
          aws lambda invoke \
            --function-name loadecondata \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            econ_response.json || true

  ########################################
  # 4) Build & push all ECS containers #
  ########################################
  build_and_push_containers:
    needs: deploy_and_run_econ
    runs-on: ubuntu-latest
    outputs:
      repo_uri:        ${{ steps.get_uri.outputs.repo_uri }}
      findata_tag:     ${{ steps.findata.outputs.tag }}
      pricedaily_tag:  ${{ steps.pricedaily.outputs.tag }}
      priceweekly_tag: ${{ steps.weekly.outputs.tag }}
      pricemonthly_tag: ${{ steps.monthly.outputs.tag }}  # <-- fixed space after colon
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Ensure ECR exists & get URI
        id: get_uri
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $REPO
          URI=$(aws ecr describe-repositories \
            --repository-names $REPO \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "repo_uri=$URI" >> $GITHUB_OUTPUT

      - name: Build & push findata
        id: findata
        run: |
          TAG=findata-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricedaily
        id: pricedaily
        run: |
          TAG=pricedaily-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricedaily -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push priceweekly
        id: weekly
        run: |
          TAG=priceweekly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.priceweekly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & push pricemonthly
        id: monthly
        run: |
          TAG=pricemonthly-${{ github.sha }}
          IMG="${{ steps.get_uri.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.pricemonthly -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  #################################################
  # 5a) Run fin‑data ECS task                     #
  #################################################
  run_findata:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Fetch TaskDefinition ARN & run
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataTaskDefinitionArn'].OutputValue" \
            --output text)
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "$ARN" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 5b) Run pricedaily ECS task                  #
  #################################################
  run_pricedaily:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Fetch ARN & run
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefinitionArn'].OutputValue" \
            --output text)
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "$ARN" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 5c) Run priceweekly ECS task                 #
  #################################################
  run_priceweekly:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Fetch ARN & run
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefinitionArn'].OutputValue" \
            --output text)
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "$ARN" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 5d) Run pricemonthly ECS task                #
  #################################################
  run_pricemonthly:
    needs: build_and_push_containers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Fetch ARN & run
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefinitionArn'].OutputValue" \
            --output text)
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "$ARN" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1
