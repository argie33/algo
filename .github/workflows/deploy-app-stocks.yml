name: deploy-app-stocks

# Trigger on any branch push
on:
  push:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:       us-east-1
  AWS_ROLE_ARN:     arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY:     ${{ secrets.FRED_API_KEY }}

jobs:
  ###################################################
  # 1) Deploy the App stack (RDS + ECS cluster +    #
  #    Task Execution Role) to create all exports  #
  ###################################################
  deploy_app:
    name: Deploy Application Stack
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Deploy App CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-app-stack \
            --template-file template-app-stocks.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ env.FRED_API_KEY }}

  ###################################################
  # 2) Filter — detect exactly what changed         #
  #    (must wait for deploy_app to create exports)#
  ###################################################
  filter:
    name: Detect changed components
    needs: deploy_app
    runs-on: ubuntu-latest
    outputs:
      symbols:        ${{ steps.check.outputs.symbols }}
      econ:           ${{ steps.check.outputs.econ }}
      findata:        ${{ steps.check.outputs.findata }}
      pricedaily:     ${{ steps.check.outputs.pricedaily }}
      priceweekly:    ${{ steps.check.outputs.priceweekly }}
      pricemonthly:   ${{ steps.check.outputs.pricemonthly }}
      technicaldaily: ${{ steps.check.outputs.technicaldaily }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: check
        name: Detect which parts changed
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before }}
          filters: |
            symbols:
              - 'loadstocksymbols.py'
              - 'requirements-loadstocksymbols.txt'
              - 'Dockerfile.stocksymbols'
            econ:
              - 'loadecondata.py'
              - 'requirements-loadecondata.txt'
              - 'Dockerfile.econdata'
            findata:
              - 'loadfinancialdata.py'
              - 'requirements-loadfinancialdata.txt'
              - 'Dockerfile.findata'
            pricedaily:
              - 'loadpricedaily.py'
              - 'requirements-loadpricedaily.txt'
              - 'Dockerfile.pricedaily'
            priceweekly:
              - 'loadpriceweekly.py'
              - 'requirements-loadpriceweekly.txt'
              - 'Dockerfile.priceweekly'
            pricemonthly:
              - 'loadpricemonthly.py'
              - 'requirements-loadpricemonthly.txt'
              - 'Dockerfile.pricemonthly'
            technicaldaily:
              - 'loadtechnicalsdaily.py'
              - 'requirements-loadtechnicalsdaily.txt'
              - 'Dockerfile.technicalsdaily'

################################################################################
# 3) Build & push each Docker image — if nothing changed, re‑use existing tag #
################################################################################

  build_stocksymbols:
    name: Build & push stock‑symbols image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch existing StockSymbolsImageTag
        id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='StockSymbolsImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT

      - name: Build & push (if changed)
        id: build
        if: ${{ needs.filter.outputs.symbols == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=stocksymbols-${{ github.sha }}
          docker build -f Dockerfile.stocksymbols -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set final tag
        id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_econdata:
    name: Build & push econ‑data image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='EconDataImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.econ == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=econdata-${{ github.sha }}
          docker build -f Dockerfile.econdata -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_findata:
    name: Build & push findata image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='FindataImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.findata == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=findata-${{ github.sha }}
          docker build -f Dockerfile.findata -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_pricedaily:
    name: Build & push pricedaily image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='PriceImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.pricedaily == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=pricedaily-${{ github.sha }}
          docker build -f Dockerfile.pricedaily -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_priceweekly:
    name: Build & push priceweekly image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='PriceWeeklyImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.priceweekly == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=priceweekly-${{ github.sha }}
          docker build -f Dockerfile.priceweekly -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_pricemonthly:
    name: Build & push pricemonthly image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='PriceMonthlyImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=pricemonthly-${{ github.sha }}
          docker build -f Dockerfile.pricemonthly -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

  build_technicaldaily:
    name: Build & push technicaldaily image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: existing
        run: |
          EXISTING=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Parameters[?ParameterKey=='TechnicalDailyImageTag'].ParameterValue" \
            --output text)
          echo "existing=$EXISTING" >> $GITHUB_OUTPUT
      - id: build
        if: ${{ needs.filter.outputs.technicaldaily == 'true' }}
        run: |
          REPO=stocks-app-registry
          aws ecr.describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr.get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"
          TAG=technicaldaily-${{ github.sha }}
          docker build -f Dockerfile.technicalsdaily -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
      - id: set
        run: |
          if [[ -n "${{ steps.build.outputs.image_tag }}" ]]; then
            echo "tag=${{ steps.build.outputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.existing.outputs.existing }}" >> $GITHUB_OUTPUT
          fi

################################################################################
# 4) Update the single ECS CFN stack in one shot                                #
################################################################################

  update_ecs_stack:
    name: Update ECS CFN Tasks Stack
    needs:
      - build_stocksymbols
      - build_econdata
      - build_findata
      - build_pricedaily
      - build_priceweekly
      - build_pricemonthly
      - build_technicaldaily
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Guard & delete ROLLBACK_COMPLETE stack
        run: |
          if STATUS=$(aws cloudformation describe-stacks \
                         --stack-name stocks-ecs-tasks-stack \
                         --query "Stacks[0].StackStatus" --output text 2>/dev/null); then
            if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
              aws cloudformation delete-stack --stack-name stocks-ecs-tasks-stack
              aws cloudformation wait stack-delete-complete --stack-name stocks-ecs-tasks-stack
            fi
          fi

      - name: Deploy ECS CFN (all tags)
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=${{ needs.build_stocksymbols.outputs.tag }} \
              EconDataImageTag=${{ needs.build_econdata.outputs.tag }} \
              FindataImageTag=${{ needs.build_findata.outputs.tag }} \
              PriceImageTag=${{ needs.build_pricedaily.outputs.tag }} \
              PriceWeeklyImageTag=${{ needs.build_priceweekly.outputs.tag }} \
              PriceMonthlyImageTag=${{ needs.build_pricemonthly.outputs.tag }} \
              TechnicalDailyImageTag=${{ needs.build_technicaldaily.outputs.tag }} \
              FREDApiKey=${{ env.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

################################################################################
# 5) Run only the loaders that changed (scale up → wait → scale down)           #
################################################################################

  run_loaders:
    name: Run Changed Loaders
    needs:
      - update_ecs_stack
      - filter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        loader: [stocksymbols,econdata,findata,pricedaily,priceweekly,pricemonthly,technicaldaily]
    if: ${{ needs.filter.outputs[matrix.loader] == 'true' }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Run ${{ matrix.loader }} loader
        run: |
          case "${{ matrix.loader }}" in
            stocksymbols)  OUT=StockSymbolsServiceName;;
            econdata)      OUT=EconDataServiceName;;
            findata)       OUT=FindataServiceName;;
            pricedaily)    OUT=PriceServiceName;;
            priceweekly)   OUT=PriceWeeklyServiceName;;
            pricemonthly)  OUT=PricemonthlyServiceName;;
            technicaldaily)OUT=TechnicalDailyServiceName;;
          esac

          SVC=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='$OUT'].OutputValue" \
            --output text)

          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0
