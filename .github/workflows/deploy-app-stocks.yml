name: deploy-app-stocks

on:
  push:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY: ${{ secrets.FRED_API_KEY }}

jobs:
  ##########################################################################
  # 1) Detect changed components                                           #
  ##########################################################################
  filter:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      symbols:          ${{ steps.paths.outputs.symbols }}
      econ:             ${{ steps.paths.outputs.econ }}
      findata:          ${{ steps.paths.outputs.findata }}
      pricedaily:       ${{ steps.paths.outputs.pricedaily }}
      priceweekly:      ${{ steps.paths.outputs.priceweekly }}
      pricemonthly:     ${{ steps.paths.outputs.pricemonthly }}
      technicaldaily:   ${{ steps.paths.outputs.technicaldaily }}
      loadkeystats:     ${{ steps.paths.outputs.loadkeystats }}
      earnings:         ${{ steps.paths.outputs.earnings }}
      technicalsweekly: ${{ steps.paths.outputs.technicalsweekly }}
      technicalsmonthly: ${{ steps.paths.outputs.technicalsmonthly }}
      any:              ${{ steps.any.outputs.any }}
      matrix:           ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: paths
        name: Which files changed?
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before != '0000000000000000000000000000000000000000' && github.event.before || github.sha }}
          filters: |
            symbols:
              - loadstocksymbols.py
              - requirements-loadstocksymbols.txt
              - Dockerfile.stocksymbols
            econ:
              - loadecondata.py
              - requirements-loadecondata.txt
              - Dockerfile.econdata
            findata:
              - loadfinancialdata.py
              - requirements-loadfinancialdata.txt
              - Dockerfile.findata
            pricedaily:
              - loadpricedaily.py
              - requirements-loadpricedaily.txt
              - Dockerfile.pricedaily
            priceweekly:
              - loadpriceweekly.py
              - requirements-loadpriceweekly.txt
              - Dockerfile.priceweekly
            pricemonthly:
              - loadpricemonthly.py
              - requirements-loadpricemonthly.txt
              - Dockerfile.pricemonthly
            technicaldaily:
              - loadtechnicalsdaily.py
              - requirements-loadtechnicalsdaily.txt
              - Dockerfile.technicalsdaily
            loadkeystats:
              - loadkeystats.py
              - requirements-loadkeystats.txt
              - Dockerfile.loadkeystats
            earnings:
              - loadearnings.py
              - requirements-loadearnings.txt
              - Dockerfile.loadearnings
            technicalsweekly:
              - loadtechnicalsweekly.py
              - requirements-loadtechnicalsweekly.txt
              - Dockerfile.technicalsweekly
            technicalsmonthly:
              - loadtechnicalsmonthly.py
              - requirements-loadtechnicalsmonthly.txt
              - Dockerfile.technicalsmonthly

      - id: any
        name: Any changes?
        run: |
          if [ "${{ steps.paths.outputs.symbols }}" = "true" ] || \
             [ "${{ steps.paths.outputs.econ }}"    = "true" ] || \
             [ "${{ steps.paths.outputs.findata }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricedaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.priceweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.pricemonthly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicaldaily }}" = "true" ] || \
             [ "${{ steps.paths.outputs.loadkeystats }}" = "true" ] || \
             [ "${{ steps.paths.outputs.earnings }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsweekly }}" = "true" ] || \
             [ "${{ steps.paths.outputs.technicalsmonthly }}" = "true" ]; then
            echo "any=true" >> $GITHUB_OUTPUT
          else
            echo "any=false" >> $GITHUB_OUTPUT
          fi

      - id: matrix
        name: Build matrix
        env:
          SYMBOLS:          ${{ steps.paths.outputs.symbols }}
          ECON:             ${{ steps.paths.outputs.econ }}
          FINDATA:          ${{ steps.paths.outputs.findata }}
          PRICEDAILY:       ${{ steps.paths.outputs.pricedaily }}
          PRICEWEEKLY:      ${{ steps.paths.outputs.priceweekly }}
          PRICEMONTHLY:     ${{ steps.paths.outputs.pricemonthly }}
          TECHNICALDAILY:   ${{ steps.paths.outputs.technicaldaily }}
          LOADKEYSTATS:     ${{ steps.paths.outputs.loadkeystats }}
          EARNINGS:         ${{ steps.paths.outputs.earnings }}
          TECHNICALSWEEKLY: ${{ steps.paths.outputs.technicalsweekly }}
          TECHNICALSMONTHLY:${{ steps.paths.outputs.technicalsmonthly }}
        run: |
          arr=""
          [ "$SYMBOLS" = "true" ] && arr="$arr,\"symbols\""
          [ "$ECON" = "true" ] && arr="$arr,\"econ\""
          [ "$FINDATA" = "true" ] && arr="$arr,\"findata\""
          [ "$PRICEDAILY" = "true" ] && arr="$arr,\"pricedaily\""
          [ "$PRICEWEEKLY" = "true" ] && arr="$arr,\"priceweekly\""
          [ "$PRICEMONTHLY" = "true" ] && arr="$arr,\"pricemonthly\""
          [ "$TECHNICALDAILY" = "true" ] && arr="$arr,\"technicaldaily\""
          [ "$LOADKEYSTATS" = "true" ] && arr="$arr,\"loadkeystats\""
          [ "$EARNINGS" = "true" ] && arr="$arr,\"earnings\""
          [ "$TECHNICALSWEEKLY" = "true" ] && arr="$arr,\"technicalsweekly\""
          [ "$TECHNICALSMONTHLY" = "true" ] && arr="$arr,\"technicalsmonthly\""
          matrix="[${arr#,}]"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  ##########################################################################
  # 2) Build changed images                                                 #
  ##########################################################################
  build:
    name: Build changed images
    needs: filter
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        loader: ${{ fromJson(needs.filter.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - id: build
        name: Build & push Docker image
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "$URI"

          case "${{ matrix.loader }}" in
            symbols)          DOCKERFILE=Dockerfile.stocksymbols;   PARAM=StockSymbolsImageTag;;
            econ)             DOCKERFILE=Dockerfile.econdata;       PARAM=EconDataImageTag;;
            findata)          DOCKERFILE=Dockerfile.findata;        PARAM=FindataImageTag;;
            pricedaily)       DOCKERFILE=Dockerfile.pricedaily;     PARAM=PriceImageTag;;
            priceweekly)      DOCKERFILE=Dockerfile.priceweekly;    PARAM=PriceWeeklyImageTag;;
            pricemonthly)     DOCKERFILE=Dockerfile.pricemonthly;   PARAM=PriceMonthlyImageTag;;
            technicaldaily)   DOCKERFILE=Dockerfile.technicalsdaily; PARAM=TechnicalDailyImageTag;;
            loadkeystats)     DOCKERFILE=Dockerfile.loadkeystats;   PARAM=LoadKeyStatsImageTag;;
            earnings)         DOCKERFILE=Dockerfile.loadearnings;   PARAM=EarningsImageTag;;
            technicalsweekly) DOCKERFILE=Dockerfile.technicalsweekly;PARAM=TechnicalsWeeklyImageTag;;
            technicalsmonthly)DOCKERFILE=Dockerfile.technicalsmonthly;PARAM=TechnicalsMonthlyImageTag;;
          esac

          TAG=${{ matrix.loader }}-${{ github.sha }}
          docker build -f "$DOCKERFILE" -t "$URI:$TAG" .
          docker push "$URI:$TAG"
          echo "${PARAM}=$TAG" > build_tag_${{ matrix.loader }}.txt

      - name: Upload tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-tags-${{ matrix.loader }}
          path: build_tag_${{ matrix.loader }}.txt

  ##########################################################################
  # 3) Deploy ECS CloudFormation                                           #
  ##########################################################################
  deploy:
    name: Deploy ECS CloudFormation
    needs:
      - filter
      - build
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch existing tags
        run: |
          if aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack >/dev/null 2>&1; then
            for key in \
              StockSymbolsImageTag EconDataImageTag FindataImageTag \
              PriceImageTag PriceWeeklyImageTag PriceMonthlyImageTag \
              TechnicalDailyImageTag LoadKeyStatsImageTag EarningsImageTag \
              TechnicalsWeeklyImageTag TechnicalsMonthlyImageTag; do
              echo "${key}=$(aws cloudformation describe-stacks \
                --stack-name stocks-ecs-tasks-stack \
                --query "Stacks[0].Parameters[?ParameterKey=='${key}'].ParameterValue" \
                --output text)" >> tags.env
            done
          fi
          cat tags.env

      - name: Download new tags
        uses: actions/download-artifact@v4
        with:
          path: new-tags

      - name: Merge tags
        run: |
          find new-tags -type f -name 'build_tag_*.txt' -print0 | \
          while IFS= read -r -d '' f; do
            kv=$(<"$f"); key=${kv%%=*}; val=${kv#*=}
            if grep -q "^$key=" tags.env; then
              sed -i "s|^$key=.*|$key=$val|" tags.env
            else
              echo "$key=$val" >> tags.env
            fi
          done
          cat tags.env

      - name: Deploy stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=$(grep '^StockSymbolsImageTag=' tags.env | cut -d= -f2-) \
              EconDataImageTag=$(grep '^EconDataImageTag=' tags.env | cut -d= -f2-) \
              FindataImageTag=$(grep '^FindataImageTag=' tags.env | cut -d= -f2-) \
              PriceImageTag=$(grep '^PriceImageTag=' tags.env | cut -d= -f2-) \
              PriceWeeklyImageTag=$(grep '^PriceWeeklyImageTag=' tags.env | cut -d= -f2-) \
              PriceMonthlyImageTag=$(grep '^PriceMonthlyImageTag=' tags.env | cut -d= -f2-) \
              TechnicalDailyImageTag=$(grep '^TechnicalDailyImageTag=' tags.env | cut -d= -f2-) \
              LoadKeyStatsImageTag=$(grep '^LoadKeyStatsImageTag=' tags.env | cut -d= -f2-) \
              EarningsImageTag=$(grep '^EarningsImageTag=' tags.env | cut -d= -f2-) \
              TechnicalsWeeklyImageTag=$(grep '^TechnicalsWeeklyImageTag=' tags.env | cut -d= -f2-) \
              TechnicalsMonthlyImageTag=$(grep '^TechnicalsMonthlyImageTag=' tags.env | cut -d= -f2-) \
              FREDApiKey=$FRED_API_KEY \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

  ##########################################################################
  # 4) Run each changed loader                                             #
  ##########################################################################
  run_symbols:
    name: Run stock-symbols loader
    needs: deploy
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_econ:
    name: Run econ-data loader
    needs: deploy
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_findata:
    name: Run findata loader
    needs: deploy
    if: ${{ needs.filter.outputs.findata == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricedaily:
    name: Run pricedaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_priceweekly:
    name: Run priceweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PricemonthlyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_technicaldaily:
    name: Run technicaldaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicaldaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalDailyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_loadkeystats:
    name: Run loadkeystats loader
    needs: deploy
    if: ${{ needs.filter.outputs.loadkeystats == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadKeyStatsServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_earnings:
    name: Run earnings loader
    needs: deploy
    if: ${{ needs.filter.outputs.earnings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_technicalsweekly:
    name: Run technicalsweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsWeeklyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_technicalsmonthly:
    name: Run technicalsmonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation.describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsMonthlyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0
