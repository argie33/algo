name: deploy-app-stocks

on:
  push:
    branches:
      - '*'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:       us-east-1
  AWS_ROLE_ARN:     arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY:     ${{ secrets.FRED_API_KEY }}

##############################################################################
# 1) Detect changed components                                               #
##############################################################################
jobs:
  filter:
    name: Detect changed components
    runs-on: ubuntu-latest
    outputs:
      symbols:        ${{ steps.paths.outputs.symbols }}
      econ:           ${{ steps.paths.outputs.econ }}
      findata:        ${{ steps.paths.outputs.findata }}
      pricedaily:     ${{ steps.paths.outputs.pricedaily }}
      priceweekly:    ${{ steps.paths.outputs.priceweekly }}
      pricemonthly:   ${{ steps.paths.outputs.pricemonthly }}
      technicaldaily: ${{ steps.paths.outputs.technicaldaily }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: paths
        name: Which files changed?
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.event.before }}
          filters: |
            symbols:
              - loadstocksymbols.py
              - requirements-loadstocksymbols.txt
              - Dockerfile.stocksymbols
            econ:
              - loadecondata.py
              - requirements-loadecondata.txt
              - Dockerfile.econdata
            findata:
              - loadfinancialdata.py
              - requirements-loadfinancialdata.txt
              - Dockerfile.findata
            pricedaily:
              - loadpricedaily.py
              - requirements-loadpricedaily.txt
              - Dockerfile.pricedaily
            priceweekly:
              - loadpriceweekly.py
              - requirements-loadpriceweekly.txt
              - Dockerfile.priceweekly
            pricemonthly:
              - loadpricemonthly.py
              - requirements-pricemonthly.txt
              - Dockerfile.pricemonthly
            technicaldaily:
              - loadtechnicalsdaily.py
              - requirements-loadtechnicalsdaily.txt
              - Dockerfile.technicalsdaily

##############################################################################
# 2) Build & push Docker images  (always-run but branch inside)              #
##############################################################################

  symbols_build:
    name: Build stock-symbols image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          # fetch existing URI
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)

          if [ "${{ needs.filter.outputs.symbols }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=stocksymbols-${{ github.sha }}
            docker build -f Dockerfile.stocksymbols -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='StockSymbolsImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  econ_build:
    name: Build econ-data image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.econ }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=econdata-${{ github.sha }}
            docker build -f Dockerfile.econdata -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='EconDataImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  findata_build:
    name: Build findata image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.findata }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=findata-${{ github.sha }}
            docker build -f Dockerfile.findata -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='FindataImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  pricedaily_build:
    name: Build pricedaily image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.pricedaily }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=pricedaily-${{ github.sha }}
            docker build -f Dockerfile.pricedaily -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='PriceImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  priceweekly_build:
    name: Build priceweekly image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.priceweekly }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=priceweekly-${{ github.sha }}
            docker build -f Dockerfile.priceweekly -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='PriceWeeklyImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  pricemonthly_build:
    name: Build pricemonthly image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.pricemonthly }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=pricemonthly-${{ github.sha }}
            docker build -f Dockerfile.pricemonthly -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='PriceMonthlyImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

  technicaldaily_build:
    name: Build technicaldaily image
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - id: set-tag
        name: Determine tag & optionally build
        env:
          REPO: stocks-app-registry
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 \
            || aws ecr.create-repository --repository-name "$REPO"
          URI=$(aws ecr.describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          if [ "${{ needs.filter.outputs.technicaldaily }}" == "true" ]; then
            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin "$URI"
            TAG=technicaldaily-${{ github.sha }}
            docker build -f Dockerfile.technicalsdaily -t "$URI:$TAG" .
            docker push "$URI:$TAG"
            echo "::set-output name=tag::$TAG"
          else
            OLD=$(aws cloudformation describe-stacks \
                    --stack-name stocks-ecs-tasks-stack \
                    --query "Stacks[0].Parameters[?ParameterKey=='TechnicalDailyImageTag'].ParameterValue" \
                    --output text || echo "")
            echo "::set-output name=tag::$OLD"
          fi

##############################################################################
# 3) Deploy ECS CloudFormation          (only if any changed)               #
##############################################################################
  deploy:
    name: Deploy ECS CloudFormation
    needs:
      - filter
      - symbols_build
      - econ_build
      - findata_build
      - pricedaily_build
      - priceweekly_build
      - pricemonthly_build
      - technicaldaily_build
    if: |
      needs.filter.outputs.symbols == 'true' ||
      needs.filter.outputs.econ == 'true'    ||
      needs.filter.outputs.findata == 'true' ||
      needs.filter.outputs.pricedaily == 'true' ||
      needs.filter.outputs.priceweekly == 'true' ||
      needs.filter.outputs.pricemonthly == 'true'||
      needs.filter.outputs.technicaldaily == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Deploy ECS stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=${{ needs.symbols_build.outputs.tag }} \
              EconDataImageTag=${{ needs.econ_build.outputs.tag }} \
              FindataImageTag=${{ needs.findata_build.outputs.tag }} \
              PriceImageTag=${{ needs.pricedaily_build.outputs.tag }} \
              PriceWeeklyImageTag=${{ needs.priceweekly_build.outputs.tag }} \
              PriceMonthlyImageTag=${{ needs.pricemonthly_build.outputs.tag }} \
              TechnicalDailyImageTag=${{ needs.technicaldaily_build.outputs.tag }} \
              FREDApiKey=$FRED_API_KEY \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

##############################################################################
# 4) Run each changed loader                                                 #
##############################################################################

  run_symbols:
    name: Run stock-symbols loader
    needs: deploy
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_econ:
    name: Run econ-data loader
    needs: deploy
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_findata:
    name: Run findata loader
    needs: deploy
    if: ${{ needs.filter.outputs.findata == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricedaily:
    name: Run pricedaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_priceweekly:
    name: Run priceweekly loader
    needs: deploy
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: deploy
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PricemonthlyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0

  run_technicaldaily:
    name: Run technicaldaily loader
    needs: deploy
    if: ${{ needs.filter.outputs.technicaldaily == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}
      - run: |
          SVC=$(aws cloudformation describe-stacks --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalDailyServiceName'].OutputValue" \
            --output text)
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 1
          aws ecs wait services-stable --cluster stocks-cluster --services "$SVC"
          aws ecs update-service --cluster stocks-cluster --service "$SVC" --desired-count 0
