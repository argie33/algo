# .github/workflows/deploy-app-template.yml
name: deploy-app-template

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  # 1) Package & upload symbols‑loader Lambda
  build_and_upload_lambda:
    name: Build & upload Lambda package
    runs-on: ubuntu-latest
    outputs:
      code_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Lambda dependencies
        run: |
          rm -rf package && mkdir package
          python -m pip install --upgrade pip
          if [ ! -f requirements-loadstocksymbols.txt ]; then
            echo "✖ requirements-loadstocksymbols.txt not found!" >&2
            exit 1
          fi
          pip install -r requirements-loadstocksymbols.txt -t package

      - name: Copy function code & verify dependencies
        run: |
          cp loadstocksymbols.py package/index.py
          ls -R package

      - name: Zip Lambda bundle
        run: |
          cd package
          zip -r "../loadstocksymbols-${{ github.sha }}.zip" .
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Upload Lambda to S3
        id: upload
        run: |
          aws s3 cp "loadstocksymbols-${{ github.sha }}.zip" \
            s3://stocks-algo-app-code/loadstocksymbols-${{ github.sha }}.zip
          echo "code_key=loadstocksymbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  # 2) Deploy RDS, SecretsManager, Lambda & ECS Cluster
  deploy_db_lambda:
    name: Deploy DB, Lambda & ECS Cluster
    needs: build_and_upload_lambda
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed stack if needed
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-db-lambda-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo NOT_FOUND)
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-db-lambda-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-db-lambda-stack
          fi

      - name: Deploy DB, Lambda & ECS Cluster
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              CodeKey=${{ needs.build_and_upload_lambda.outputs.code_key }} \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Invoke loadstocksymbols Lambda and fail on error
        run: |
          aws lambda invoke \
            --function-name loadstocksymbols \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          cat response.json
          if grep -q '"FunctionError"' response.json; then
            echo "✖ Lambda execution failed" >&2
            exit 1
          fi

  # 3) Build & push Docker image for ECS tasks
  build_and_push_container:
    name: Build & push Docker image
    needs: deploy_db_lambda
    runs-on: ubuntu-latest
    outputs:
      uri: ${{ steps.get_uri.outputs.uri }}
      tag: ${{ steps.build.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Ensure ECR repository exists & get URI
        id: get_uri
        run: |
          set -e
          REPO_NAME=stocks-app-registry

          # Create the repo if it doesn’t exist
          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO_NAME" >/dev/null
          fi

          # Fetch its full URI
          REPO_URI=$(aws ecr describe-repositories \
            --repository-names "$REPO_NAME" \
            --query 'repositories[0].repositoryUri' \
            --output text)

          if [ -z "$REPO_URI" ]; then
            echo "✖ ERROR: failed to fetch URI for ECR repo '$REPO_NAME'!" >&2
            exit 1
          fi

          echo "uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push image
        id: build
        run: |
          IMAGE_URI="${{ steps.get_uri.outputs.uri }}:${{ github.sha }}"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # 4) Deploy ECS Tasks stack and run one immediately
  deploy_ecs_tasks:
    name: Deploy ECS Tasks
    needs:
      - deploy_db_lambda
      - build_and_push_container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Fetch ECR repo URI
        id: fetch_ecr
        run: |
          ECR_URI=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-ContainerRepositoryUri'].Value" \
            --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Debug ECR URI & Tag
        run: |
          echo "→ ECR_URI='${ECR_URI}'"
          echo "→ IMAGE_TAG='${GITHUB_SHA}'"
          if [ -z "$ECR_URI" ]; then
            echo "✖ ERROR: ECR_URI is empty!" >&2
            exit 1
          fi

      - name: Deploy ECS tasks stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              ImageTag=${GITHUB_SHA} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Run ECS DataLoader task immediately
        run: |
          SN1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet1Id'].Value" \
            --output text)
          SN2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PrivateSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-LambdaSecurityGroupId'].Value" \
            --output text)

          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition stocks-data-loader \
            --network-configuration "awsvpcConfiguration={subnets=[$SN1,$SN2],securityGroups=[$SG],assignPublicIp=DISABLED}" \
            --count 1

          echo "Triggered one run of stocks-data-loader on Fargate."
