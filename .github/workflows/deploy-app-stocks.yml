name: deploy-app-template

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:

  ###############################
  # 1) Build & upload Lambdas  #
  ###############################

  build_and_upload_symbols:
    name: Build & upload symbols‐loader
    runs-on: ubuntu-latest
    outputs:
      symbols_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.9' }
      - name: Install dependencies
        run: |
          rm -rf symbols_package && mkdir symbols_package
          pip install --upgrade pip
          pip install -r requirements-loadstocksymbols.txt -t symbols_package
      - name: Package
        run: |
          cp loadstocksymbols.py symbols_package/index.py
          cd symbols_package && zip -r "../symbols-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload to S3
        id: upload
        run: |
          aws s3 cp "symbols-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "code_key=symbols-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  build_and_upload_econ:
    name: Build & upload econ‑data loader
    runs-on: ubuntu-latest
    outputs:
      econ_key: ${{ steps.upload.outputs.code_key }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.9' }
      - name: Install dependencies
        run: |
          rm -rf econ_package && mkdir econ_package
          pip install --upgrade pip
          pip install -r requirements-loadecondata.txt -t econ_package
      - name: Package
        run: |
          cp loadecondata.py econ_package/index.py
          cd econ_package && zip -r "../econ-${{ github.sha }}.zip" . && cd ..
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Upload to S3
        id: upload
        run: |
          aws s3 cp "econ-${{ github.sha }}.zip" s3://stocks-algo-app-code/
          echo "code_key=econ-${{ github.sha }}.zip" >> $GITHUB_OUTPUT

  ########################################
  # 2) Deploy App stack & invoke Econ   #
  ########################################

  deploy_and_run_econ:
    name: Deploy DB & invoke econ‑data
    needs:
      - build_and_upload_symbols
      - build_and_upload_econ
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Wait for core infra
        run: aws cloudformation wait stack-create-complete --stack-name stocks-core-stack

      - name: Deploy App stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-db-lambda-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
                CodeKey=${{ needs.build_and_upload_symbols.outputs.symbols_key }} \
                EconomicCodeKey=${{ needs.build_and_upload_econ.outputs.econ_key }} \
                RDSUsername=${{ secrets.RDS_USERNAME }} \
                RDSPassword=${{ secrets.RDS_PASSWORD }} \
                FREDApiKey=${{ secrets.FRED_API_KEY }} \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Invoke econ‑data loader
        run: |
          aws lambda invoke \
            --function-name loadecondata \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            econ_response.json || true

  ##############################
  # 3) Setup ECR              #
  ##############################

  setup_ecr:
    name: Ensure ECR & get repo URI
    needs: deploy_and_run_econ
    runs-on: ubuntu-latest
    outputs:
      repo_uri: ${{ steps.get_uri.outputs.repo_uri }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Create or describe ECR
        id: get_uri
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names $REPO >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $REPO
          URI=$(aws ecr describe-repositories \
                  --repository-names $REPO \
                  --query 'repositories[0].repositoryUri' \
                  --output text)
          echo "repo_uri=$URI" >> $GITHUB_OUTPUT

  #################################################
  # 4a) Build & push findata-container & run it  #
  #################################################

  build_push_findata:
    name: Build & push findata container
    needs: setup_ecr
    runs-on: ubuntu-latest
    outputs:
      findata_tag: ${{ steps.build.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Build & push
        id: build
        run: |
          TAG=findata-${{ github.sha }}
          IMG="${{ needs.setup_ecr.outputs.repo_uri }}:$TAG"
          docker build -f Dockerfile.findata -t $IMG .
          docker push $IMG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  run_findata:
    name: Run fin‑data ECS task
    needs: build_push_findata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          role-session-name: github-deploy
          aws-region: us-east-1
          audience: sts.amazonaws.com
      - name: Fetch TaskDefinition ARN
        id: get_arn
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FindataTaskDefinitionArn'].OutputValue" \
            --output text)
          echo "arn=$ARN" >> $GITHUB_OUTPUT
      - name: Run fin‑data task
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ steps.get_arn.outputs.arn }}" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 4b) Run pricedaily‑loader ECS task           #
  #################################################

  run_daily_price:
    name: Run daily‑price ECS task
    needs: run_findata
    runs-on: ubuntu-latest
    steps:
      # same configure‑aws step…
      - name: Fetch PriceTaskDefinitionArn
        id: get_daily_arn
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefinitionArn'].OutputValue" \
            --output text)
          echo "arn=$ARN" >> $GITHUB_OUTPUT
      - name: Run price‑daily task
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ steps.get_daily_arn.outputs.arn }}" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 4c) Run priceweekly‑loader ECS task          #
  #################################################

  run_weekly_price:
    name: Run weekly‑price ECS task
    needs: run_daily_price
    runs-on: ubuntu-latest
    steps:
      # …configure‑aws
      - name: Fetch Weekly ARN
        id: get_weekly_arn
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefinitionArn'].OutputValue" \
            --output text)
          echo "arn=$ARN" >> $GITHUB_OUTPUT
      - name: Run weekly‑price task
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ steps.get_weekly_arn.outputs.arn }}" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1

  #################################################
  # 4d) Run pricemonthly‑loader ECS task         #
  #################################################

  run_monthly_price:
    name: Run monthly‑price ECS task
    needs: run_weekly_price
    runs-on: ubuntu-latest
    steps:
      # …configure‑aws
      - name: Fetch Monthly ARN
        id: get_monthly_arn
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefinitionArn'].OutputValue" \
            --output text)
          echo "arn=$ARN" >> $GITHUB_OUTPUT
      - name: Run monthly‑price task
        run: |
          aws ecs run-task \
            --cluster stocks-cluster \
            --launch-type FARGATE \
            --task-definition "${{ steps.get_monthly_arn.outputs.arn }}" \
            --network-configuration awsvpcConfiguration="{subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],assignPublicIp=ENABLED}" \
            --count 1
