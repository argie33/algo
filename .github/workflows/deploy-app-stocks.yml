name: deploy-app-stocks

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    paths:
      - 'loadstocksymbols.py'
      - 'template-app-stocks.yml'
      - '.github/workflows/deploy-app-stocks.yml'
      - 'scripts/**'
      - 'Dockerfile*'
      - '!webapp/**'
      - '!.github/workflows/deploy-webapp.yml'
  pull_request:
    branches:
      - '*'
    paths:
      - 'loadstocksymbols.py'
      - 'template-app-stocks.yml'
      - '.github/workflows/deploy-app-stocks.yml'
      - 'scripts/**'
      - 'Dockerfile*'
      - '!webapp/**'
      - '!.github/workflows/deploy-webapp.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
  AWS_ROLE_SESSION: github-deploy
  FRED_API_KEY: ${{ secrets.FRED_API_KEY }}

jobs:
################################################################################
# Path filtering                                                              #
################################################################################
  filter:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      tasks: ${{ steps.filter.outputs.tasks }}
      symbols: ${{ steps.filter.outputs.symbols }}
      qualitymetrics: ${{ steps.filter.outputs.qualitymetrics }}
      valuemetrics: ${{ steps.filter.outputs.valuemetrics }}
      stepfunctions: ${{ steps.filter.outputs.stepfunctions }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'cloudformation/template-app-stocks.yml'
              - '.github/workflows/deploy-app-stocks.yml'
            tasks:
              - 'cloudformation/template-app-ecs-tasks.yml'
              - 'requirements.txt'
              - 'scripts/**'
            symbols:
              - 'loadstocksymbols.py'
              - 'Dockerfile.stocksymbols'
            qualitymetrics:
              - 'scripts/quality-metrics/**'
            valuemetrics:
              - 'scripts/value-metrics/**'
            stepfunctions:
              - 'cloudformation/template-step-functions-orchestration.yml'

# 6) Run value-metrics loader
  run_valuemetrics:
    name: Run value-metrics calculator
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.valuemetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ValueMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run value-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started value-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Value-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Value-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

# 6) Run quality-metrics loader
  run_qualitymetrics:
    name: Run quality-metrics calculator
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.qualitymetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QualityMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run quality-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started quality-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Quality-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "ERROR: Quality-metrics failed with exit code $EXIT"
            exit $EXIT
          fi
################################################################################
# 1) Deploy core infrastructure (RDS, Secrets, ECS cluster)                    #
################################################################################
  infra:
    name: Deploy application stack
    needs: filter
    if: ${{ needs.filter.outputs.app == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get CloudFormation templates bucket from core stack
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "Using S3 bucket: $BUCKET"

      - name: Set image tag defaults
        run: |
          echo "VALUE_METRICS_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "QUALITY_METRICS_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy application stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-app-stack \
            --template-file template-app-stocks.yml \
            --parameter-overrides \
              RDSUsername=${{ secrets.RDS_USERNAME }} \
              RDSPassword=${{ secrets.RDS_PASSWORD }} \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
              ValueMetricsImageTag=${{ env.VALUE_METRICS_IMAGE_TAG }} \
              QualityMetricsImageTag=${{ env.QUALITY_METRICS_IMAGE_TAG }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --s3-bucket ${{ steps.bucket.outputs.CF_BUCKET }}


################################################################################
# 4) Build only the changed Docker images                                      #
################################################################################
  build:
    name: Build changed images
    needs: filter
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        loader: ${{ fromJson(needs.filter.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - id: build
        name: Build & push Docker image
        run: |
          REPO=stocks-app-registry
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$REPO"
          URI=$(aws ecr describe-repositories \
                  --repository-names "$REPO" \
                  --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin "$URI"
          case "${{ matrix.loader }}" in
            symbols)          DOCKERFILE=Dockerfile.stocksymbols;   PARAM=StockSymbolsImageTag;;\
            econ)             DOCKERFILE=Dockerfile.econdata;       PARAM=EconDataImageTag;;\
            pricedaily)       DOCKERFILE=Dockerfile.pricedaily;     PARAM=PriceImageTag;;\
            priceweekly)      DOCKERFILE=Dockerfile.priceweekly;    PARAM=PriceWeeklyImageTag;;\
            pricemonthly)     DOCKERFILE=Dockerfile.pricemonthly;   PARAM=PriceMonthlyImageTag;;\
            latestpricedaily)   DOCKERFILE=Dockerfile.latestpricedaily;   PARAM=LatestPriceDailyImageTag;;\
            latestpriceweekly)  DOCKERFILE=Dockerfile.latestpriceweekly;  PARAM=LatestPriceWeeklyImageTag;;\
            latestpricemonthly) DOCKERFILE=Dockerfile.latestpricemonthly; PARAM=LatestPriceMonthlyImageTag;;\
            loadinfo)         DOCKERFILE=Dockerfile.loadinfo;       PARAM=LoadInfoImageTag;;\
            loadnews)         DOCKERFILE=Dockerfile.loadnews;       PARAM=LoadNewsImageTag;;\
            earningsestimate) DOCKERFILE=Dockerfile.loadearningsestimate;   PARAM=EarningsEstimateImageTag;;\
            earningsmetrics)  DOCKERFILE=Dockerfile.earningsmetrics;        PARAM=EarningsMetricsImageTag;;\
            earningshistory)  DOCKERFILE=Dockerfile.loadearningshistory;   PARAM=EarningsHistoryImageTag;;\
            revenueestimate)  DOCKERFILE=Dockerfile.loadrevenueestimate;   PARAM=RevenueEstimateImageTag;;\
            technicalsdaily)  DOCKERFILE=Dockerfile.technicalsdaily; PARAM=TechnicalsDailyImageTag;;\
            technicalsweekly) DOCKERFILE=Dockerfile.technicalsweekly;PARAM=TechnicalsWeeklyImageTag;;\
            technicalsmonthly)DOCKERFILE=Dockerfile.technicalsmonthly;PARAM=TechnicalsMonthlyImageTag;;\
            swingtrader)      DOCKERFILE=Dockerfile.swingtrader;    PARAM=SwingTraderImageTag;;\
            calendar)         DOCKERFILE=Dockerfile.loadcalendar;   PARAM=CalendarImageTag;;\
            buyselldaily)     DOCKERFILE=Dockerfile.buyselldaily;        PARAM=BuySellDailyImageTag;;\
            buysellweekly)    DOCKERFILE=Dockerfile.buysellweekly;        PARAM=BuySellWeeklyImageTag;;\
            buysellmonthly)   DOCKERFILE=Dockerfile.buysellmonthly;        PARAM=BuySellMonthlyImageTag;;\
            latesttechnicalsdaily)   DOCKERFILE=Dockerfile.latesttechnicalsdaily;   PARAM=LatestTechnicalsDailyImageTag;;\
            latesttechnicalsweekly)  DOCKERFILE=Dockerfile.latesttechnicalsweekly;  PARAM=LatestTechnicalsWeeklyImageTag;;\
            latesttechnicalsmonthly) DOCKERFILE=Dockerfile.latesttechnicalsmonthly; PARAM=LatestTechnicalsMonthlyImageTag;;\
            naaim)            DOCKERFILE=Dockerfile.loadnaaim;          PARAM=NaaimImageTag;;\
            aaii)             DOCKERFILE=Dockerfile.loadaaiidata;           PARAM=AaiiImageTag;;\
            feargreed)        DOCKERFILE=Dockerfile.loadfeargreed;      PARAM=FearGreedImageTag;;\
            quarterlybalancesheet) DOCKERFILE=Dockerfile.quarterlybalancesheet; PARAM=QuarterlyBalanceSheetImageTag;;\
            annualbalancesheet) DOCKERFILE=Dockerfile.annualbalancesheet; PARAM=AnnualBalanceSheetImageTag;;\
            quarterlyincomestatement) DOCKERFILE=Dockerfile.quarterlyincomestatement; PARAM=QuarterlyIncomeStatementImageTag;;\
            annualincomestatement) DOCKERFILE=Dockerfile.annualincomestatement; PARAM=AnnualIncomeStatementImageTag;;\
            quarterlycashflow) DOCKERFILE=Dockerfile.quarterlycashflow; PARAM=QuarterlyCashFlowImageTag;;\
            annualcashflow) DOCKERFILE=Dockerfile.annualcashflow; PARAM=AnnualCashFlowImageTag;;\
            ttmincomestatement) DOCKERFILE=Dockerfile.ttmincomestatement; PARAM=TTMIncomeStatementImageTag;;\
            ttmcashflow) DOCKERFILE=Dockerfile.ttmcashflow; PARAM=TTMCashFlowImageTag;;\
            fundamentalmetrics) DOCKERFILE=Dockerfile.fundamentalmetrics; PARAM=FundamentalMetricsImageTag;;\
            analystupgradedowngrade) DOCKERFILE=Dockerfile.loadanalystupgradedowngrade; PARAM=AnalystUpgradeDowngradeImageTag;;
            financials) DOCKERFILE=Dockerfile.loadfinancials; PARAM=FinancialsImageTag;;\
            sentiment) DOCKERFILE=Dockerfile.loadsentiment; PARAM=SentimentImageTag;;\
            technicals) DOCKERFILE=Dockerfile.loadtechnicals; PARAM=TechnicalsImageTag;;\
            market) DOCKERFILE=Dockerfile.loadmarket; PARAM=MarketImageTag;;\
            momentum) DOCKERFILE=Dockerfile.loadmomentum; PARAM=MomentumImageTag;;\
            sentiment_realtime) DOCKERFILE=Dockerfile.loadsentiment_realtime; PARAM=SentimentRealtimeImageTag;;\
            positioning) DOCKERFILE=Dockerfile.loadpositioning; PARAM=PositioningImageTag;;\
            qualitymetrics) DOCKERFILE=Dockerfile.quality-metrics; PARAM=QualityMetricsImageTag;;\
            valuemetrics) DOCKERFILE=Dockerfile.value-metrics; PARAM=ValueMetricsImageTag;;\
            valuescores) DOCKERFILE=Dockerfile.calculate_value_scores; PARAM=ValueScoresImageTag;;\
            growthmetrics) DOCKERFILE=Dockerfile.growth-metrics; PARAM=GrowthMetricsImageTag;;\
          esac
          TAG=${{ matrix.loader }}-${{ github.sha }}
          docker buildx build \
            --platform linux/arm64 \
            --push \
            -f "$DOCKERFILE" \
            -t "$URI:$TAG" \
            .
          echo "${PARAM}=$TAG" > build_tag_${{ matrix.loader }}.txt

      - uses: actions/upload-artifact@v4
        with:
          name: build-tags-${{ matrix.loader }}
          path: build_tag_${{ matrix.loader }}.txt

################################################################################
# 5) Deploy ECS‚Äêtasks stack (build artifacts ‚Üí CFN ‚Üí container-insights)       #
################################################################################
  deploy-tasks:
    name: Deploy ECS-tasks stack
    needs: [build, filter]
    if: ${{ needs.filter.outputs.any == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Get CloudFormation templates bucket from core stack
        id: bucket
        run: |
          BUCKET=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-CfTemplatesBucketName'].Value" \
            --output text)
          echo "CF_BUCKET=$BUCKET" >> $GITHUB_OUTPUT
          echo "Using S3 bucket: $BUCKET"

      - name: Download all build-tag artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-tags-*
          path: .
          merge-multiple: true      
      
      - name: Generate tags.env
        shell: bash
        run: |
          cat build_tag_*.txt > tags.env
          if [ ! -f tags.env ]; then
            echo "No build tag files found or tags.env not created" >&2
            exit 1
          fi

      - name: Wait for app stack to finish exporting
        run: |
          STATUS=$(aws cloudformation describe-stacks --stack-name stocks-app-stack --query 'Stacks[0].StackStatus' --output text)
          if [[ "$STATUS" == "UPDATE_IN_PROGRESS" || "$STATUS" == "CREATE_IN_PROGRESS" ]]; then
            aws cloudformation wait stack-update-complete --stack-name stocks-app-stack
          else
            echo "Stack is not updating, skipping wait."
          fi

      - name: Delete ECS tasks stack if not in a stable state (idempotency fix)
        shell: bash
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "")
          if [[ "$STATUS" == "ROLLBACK_COMPLETE" || "$STATUS" == "DELETE_FAILED" || "$STATUS" == "CREATE_FAILED" ]]; then
            echo "Stack in $STATUS, deleting before redeploy."
            aws cloudformation delete-stack --stack-name stocks-ecs-tasks-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-ecs-tasks-stack
            echo "Stack deleted."
          elif [[ -z "$STATUS" ]]; then
            echo "Stack does not exist, nothing to delete."
          else
            echo "Stack status is $STATUS, not deleting."
          fi

      - name: Deploy ECS-tasks CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-ecs-tasks-stack \
            --template-file template-app-ecs-tasks.yml \
            --parameter-overrides \
              StockSymbolsImageTag=$(grep '^StockSymbolsImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              EconDataImageTag=$(grep '^EconDataImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              PriceImageTag=$(grep '^PriceImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              PriceWeeklyImageTag=$(grep '^PriceWeeklyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              PriceMonthlyImageTag=$(grep '^PriceMonthlyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestPriceDailyImageTag=$(grep '^LatestPriceDailyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestPriceWeeklyImageTag=$(grep '^LatestPriceWeeklyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestPriceMonthlyImageTag=$(grep '^LatestPriceMonthlyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              TechnicalsDailyImageTag=$(grep '^TechnicalsDailyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LoadInfoImageTag=$(grep '^LoadInfoImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LoadNewsImageTag=$(grep '^LoadNewsImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              EarningsEstimateImageTag=$(grep '^EarningsEstimateImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              EarningsMetricsImageTag=$(grep '^EarningsMetricsImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              EarningsHistoryImageTag=$(grep '^EarningsHistoryImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              RevenueEstimateImageTag=$(grep '^RevenueEstimateImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              TechnicalsWeeklyImageTag=$(grep '^TechnicalsWeeklyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              TechnicalsMonthlyImageTag=$(grep '^TechnicalsMonthlyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              SwingTraderImageTag=$(grep '^SwingTraderImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              CalendarImageTag=$(grep '^CalendarImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              BuySellDailyImageTag=$(grep '^BuySellDailyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              BuySellWeeklyImageTag=$(grep '^BuySellWeeklyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              BuySellMonthlyImageTag=$(grep '^BuySellMonthlyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestTechnicalsDailyImageTag=$(grep '^LatestTechnicalsDailyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestTechnicalsWeeklyImageTag=$(grep '^LatestTechnicalsWeeklyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              LatestTechnicalsMonthlyImageTag=$(grep '^LatestTechnicalsMonthlyImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              NaaimImageTag=$(grep '^NaaimImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              AaiiImageTag=$(grep '^AaiiImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              FearGreedImageTag=$(grep '^FearGreedImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              QuarterlyBalanceSheetImageTag=$(grep '^QuarterlyBalanceSheetImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              AnnualBalanceSheetImageTag=$(grep '^AnnualBalanceSheetImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              QuarterlyIncomeStatementImageTag=$(grep '^QuarterlyIncomeStatementImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              AnnualIncomeStatementImageTag=$(grep '^AnnualIncomeStatementImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              QuarterlyCashFlowImageTag=$(grep '^QuarterlyCashFlowImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              AnnualCashFlowImageTag=$(grep '^AnnualCashFlowImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              TTMIncomeStatementImageTag=$(grep '^TTMIncomeStatementImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              TTMCashFlowImageTag=$(grep '^TTMCashFlowImageTag=' tags.env | cut -d= -f2- || echo "latest") \
              FREDApiKey=${{ secrets.FRED_API_KEY }} \
              IBKRUsername=${{ secrets.IBKR_USERNAME }} \
              IBKRPassword=${{ secrets.IBKR_PASSWORD }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --s3-bucket ${{ steps.bucket.outputs.CF_BUCKET }}

      - name: Enable ECS Container Insights
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          aws ecs update-cluster-settings \
            --cluster "$CLUSTER" \
            --settings name=containerInsights,value=enabled

################################################################################
# 6) Run each changed loader                                                    #
################################################################################
  run_symbols:
    name: Run stock-symbols loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.symbols == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='StockSymbolsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run stock-symbols Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started stock-symbols task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå stock-symbols task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå stock-symbols failed with exit code $EXIT"
            exit $EXIT
          fi

  run_econ:
    name: Run econ-data loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.econ == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EconDataTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT

      - name: Run econ-data Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started econ-data task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå econ-data task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå econ-data failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricedaily:
    name: Run pricedaily loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.pricedaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run pricedaily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started pricedaily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå pricedaily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå pricedaily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_priceweekly:
    name: Run priceweekly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.priceweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run priceweekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started priceweekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå priceweekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå priceweekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_pricemonthly:
    name: Run pricemonthly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.pricemonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PriceMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run pricemonthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started pricemonthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå pricemonthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå pricemonthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsdaily:
    name: Run technicals-daily loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.technicalsdaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started technicals-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå technicals-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå technicals-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_loadinfo:
    name: Run load-info loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.loadinfo == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadInfoTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-info Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started load-info task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå load-info task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå load-info failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningshistory:
    name: Run earnings history loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.earningshistory == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsHistoryTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings history Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started earnings task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå earnings task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå earnings failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningsestimate:
    name: Run earnings estimate loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.earningsestimate == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsEstimateTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings estimate Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started earnings estimate task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå earnings estimate task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå earnings estimate failed with exit code $EXIT"
            exit $EXIT
          fi

  run_earningsmetrics:
    name: Run earnings metrics loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.earningsmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='EarningsMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run earnings metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started earnings metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå earnings metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå earnings metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_revenueestimate:
    name: Run revenue estimate loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.revenueestimate == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='RevenueEstimateTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run revenue estimate Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started revenue estimate task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå revenue estimate task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå revenue estimate failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsmonthly:
    name: Run technicals-monthly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.technicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started technicals-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå technicals-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå technicals-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_swingtrader:
    name: Run swing-trader loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.swingtrader == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SwingTraderTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run swing-trader Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started swing-trader task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå swing-trader task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs.describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå swing-trader failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buyselldaily:
    name: Run buysell daily loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.buyselldaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started buysell daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå buysell daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå buysell daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buysellweekly:
    name: Run buysell weekly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.buysellweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started buysell weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå buysell weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå buysell weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_buysellmonthly:
    name: Run buysell monthly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.buysellmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='BuySellMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run buysell monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started buysell monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå buysell monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå buysell monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpricedaily:
    name: Run load-latest-price-daily loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latestpricedaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started load-latest-price-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå load-latest-price-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå load-latest-price-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpriceweekly:
    name: Run load-latest-price-weekly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latestpriceweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started load-latest-price-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå load-latest-price-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå load-latest-price-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latestpricemonthly:
    name: Run load-latest-price-monthly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latestpricemonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestPriceMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run load-latest-price-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started load-latest-price-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå load-latest-price-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå load-latest-price-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_naaim:
    name: Run NAAIM loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.naaim == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='NaaimTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run NAAIM Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started NAAIM task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå NAAIM task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå NAAIM failed with exit code $EXIT"
            exit $EXIT
          fi

  run_aaii:
    name: Run AAII loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.aaii == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AaiiTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run AAII Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started AAII task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå AAII task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå AAII failed with exit code $EXIT"
            exit $EXIT
          fi

  run_feargreed:
    name: Run Fear & Greed loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.feargreed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FearGreedTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Fear & Greed Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Fear & Greed task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Fear & Greed task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Fear & Greed failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlybalancesheet:
    name: Run Quarterly Balance Sheet loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.quarterlybalancesheet == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyBalanceSheetTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Balance Sheet Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Quarterly Balance Sheet task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Quarterly Balance Sheet task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Quarterly Balance Sheet failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualbalancesheet:
    name: Run Annual Balance Sheet loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.annualbalancesheet == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualBalanceSheetTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Balance Sheet Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Annual Balance Sheet task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Annual Balance Sheet task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Annual Balance Sheet failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlyincomestatement:
    name: Run Quarterly Income Statement loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.quarterlyincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Quarterly Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Quarterly Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Quarterly Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualincomestatement:
    name: Run Annual Income Statement loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.annualincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Annual Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Annual Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Annual Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_quarterlycashflow:
    name: Run Quarterly Cash Flow loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.quarterlycashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='QuarterlyCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Quarterly Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Quarterly Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Quarterly Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Quarterly Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

  run_annualcashflow:
    name: Run Annual Cash Flow loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.annualcashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnnualCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run Annual Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started Annual Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Annual Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Annual Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

  run_ttmincomestatement:
    name: Run TTM Income Statement loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.ttmincomestatement == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TTMIncomeStatementTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run TTM Income Statement Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started TTM Income Statement task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå TTM Income Statement task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå TTM Income Statement failed with exit code $EXIT"
            exit $EXIT
          fi

  run_ttmcashflow:
    name: Run TTM Cash Flow loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.ttmcashflow == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TTMCashFlowTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets & SG
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run TTM Cash Flow Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started TTM Cash Flow task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå TTM Cash Flow task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå TTM Cash Flow failed with exit code $EXIT"
            exit $EXIT
          fi

# 6) Run loadnews loader
  run_loadnews:
    name: Run load-news loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.loadnews == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LoadNewsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUBNETS=$SUB1,$SUB2" >> $GITHUB_OUTPUT

      - name: Run load-news Fargate task
        id: run
        run: |
          aws ecs run-task \
            --cluster ${{ steps.infra.outputs.CLUSTER }} \
            --task-definition ${{ steps.td.outputs.TASK_DEF_ARN }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUBNETS }}],assignPublicIp=ENABLED}" \
            --count 1

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Load News task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Load News failed with exit code $EXIT"
            exit $EXIT
          fi

################################################################################
# Missing loader jobs                                                          #
################################################################################
  run_fundamentalmetrics:
    name: Run fundamental-metrics loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.fundamentalmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FundamentalMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run fundamental-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started fundamental-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Fundamental-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Fundamental-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_analystupgradedowngrade:
    name: Run analyst-upgrade-downgrade loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.analystupgradedowngrade == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='AnalystUpgradeDowngradeTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run analyst-upgrade-downgrade Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started analyst-upgrade-downgrade task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Analyst-upgrade-downgrade task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Analyst-upgrade-downgrade failed with exit code $EXIT"
            exit $EXIT
          fi

  run_financials:
    name: Run financials loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.financials == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='FinancialsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run financials Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started financials task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Financials task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Financials failed with exit code $EXIT"
            exit $EXIT
          fi

  run_sentiment:
    name: Run sentiment loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.sentiment == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SentimentTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run sentiment Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started sentiment task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Sentiment task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Sentiment failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicals:
    name: Run technicals loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.technicals == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started technicals task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Technicals task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Technicals failed with exit code $EXIT"
            exit $EXIT
          fi

  run_market:
    name: Run market loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.market == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='MarketTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run market Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started market task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Market task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Market failed with exit code $EXIT"
            exit $EXIT
          fi

  run_momentum:
    name: Run momentum loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.momentum == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='MomentumTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run momentum Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started momentum task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Momentum task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Momentum failed with exit code $EXIT"
            exit $EXIT
          fi

  run_sentiment_realtime:
    name: Run sentiment-realtime loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.sentiment_realtime == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SentimentRealtimeTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run sentiment-realtime Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started sentiment-realtime task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Sentiment-realtime task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Sentiment-realtime failed with exit code $EXIT"
            exit $EXIT
          fi

  run_positioning:
    name: Run positioning loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.positioning == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='PositioningTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run positioning Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started positioning task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Positioning task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Positioning failed with exit code $EXIT"
            exit $EXIT
          fi

  run_valuescores:
    name: Run value-scores calculator
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.valuescores == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ValueScoresTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run value-scores Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started value-scores task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Value-scores task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Value-scores failed with exit code $EXIT"
            exit $EXIT
          fi

  run_growthmetrics:
    name: Run growth-metrics calculator
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.growthmetrics == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='GrowthMetricsTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run growth-metrics Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started growth-metrics task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Growth-metrics task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Growth-metrics failed with exit code $EXIT"
            exit $EXIT
          fi

  run_technicalsweekly:
    name: Run technicals-weekly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.technicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TechnicalsWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run technicals-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started technicals-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Technicals-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Technicals-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsdaily:
    name: Run latest-technicals-daily loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latesttechnicalsdaily == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsDailyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-daily Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started latest-technicals-daily task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Latest-technicals-daily task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Latest-technicals-daily failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsweekly:
    name: Run latest-technicals-weekly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latesttechnicalsweekly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsWeeklyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-weekly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started latest-technicals-weekly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Latest-technicals-weekly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Latest-technicals-weekly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_latesttechnicalsmonthly:
    name: Run latest-technicals-monthly loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.latesttechnicalsmonthly == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='LatestTechnicalsMonthlyTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run latest-technicals-monthly Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started latest-technicals-monthly task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Latest-technicals-monthly task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Latest-technicals-monthly failed with exit code $EXIT"
            exit $EXIT
          fi

  run_calendar:
    name: Run calendar loader
    needs: [deploy-tasks, filter]
    if: ${{ needs.filter.outputs.calendar == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:        ${{ env.AWS_REGION }}
          role-to-assume:    ${{ env.AWS_ROLE_ARN }}
          role-session-name: ${{ env.AWS_ROLE_SESSION }}

      - name: Fetch Task Definition ARN
        id: td
        run: |
          ARN=$(aws cloudformation describe-stacks \
            --stack-name stocks-ecs-tasks-stack \
            --query "Stacks[0].Outputs[?OutputKey=='CalendarTaskDefArn'].OutputValue" \
            --output text)
          echo "TASK_DEF_ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Fetch cluster ARN & subnets
        id: infra
        run: |
          CLUSTER=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-ClusterArn'].Value" \
            --output text)
          SUB1=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet1Id'].Value" \
            --output text)
          SUB2=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksCore-PublicSubnet2Id'].Value" \
            --output text)
          SG=$(aws cloudformation list-exports \
            --query "Exports[?Name=='StocksApp-EcsTasksSecurityGroupId'].Value" \
            --output text)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_OUTPUT
          echo "SUB1=$SUB1" >> $GITHUB_OUTPUT
          echo "SUB2=$SUB2" >> $GITHUB_OUTPUT
          echo "SG=$SG" >> $GITHUB_OUTPUT

      - name: Run calendar Fargate task
        id: run
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --launch-type FARGATE \
            --task-definition "${{ steps.td.outputs.TASK_DEF_ARN }}" \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra.outputs.SUB1 }},${{ steps.infra.outputs.SUB2 }}],securityGroups=[${{ steps.infra.outputs.SG }}],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "üü¢ Started calendar task $TASK_ARN"

      - name: Wait up to 60m for task to stop
        run: |
          for i in $(seq 1 180); do
            STATUS=$(aws ecs describe-tasks \
              --cluster "${{ steps.infra.outputs.CLUSTER }}" \
              --tasks "${{ steps.run.outputs.TASK_ARN }}" \
              --query 'tasks[0].lastStatus' \
              --output text)
            echo "Attempt $i ‚Äì status=$STATUS"
            [ "$STATUS" = "STOPPED" ] && break
            sleep 20
          done
          if [ "$STATUS" != "STOPPED" ]; then
            echo "‚ùå Calendar task did not stop within 60m"
            exit 1
          fi

      - name: Check container exit code
        run: |
          EXIT=$(aws ecs describe-tasks \
            --cluster "${{ steps.infra.outputs.CLUSTER }}" \
            --tasks "${{ steps.run.outputs.TASK_ARN }}" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          echo "‚Üí Exit code: $EXIT"
          if [ "$EXIT" -ne 0 ]; then
            echo "‚ùå Calendar failed with exit code $EXIT"
            exit $EXIT
          fi