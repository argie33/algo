# .github/workflows/deploy-core.yml
  name: Deploy core infrastructure

  on:
    push:
      branches: [ "**" ]
      paths:
        - 'template-core.yml'
        - '.github/workflows/deploy-core.yml'
    workflow_dispatch:

  permissions:
    id-token: write
    contents: read

  jobs:
    deploy_core:
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository
          uses: actions/checkout@v3

        - name: Configure AWS credentials via OIDC
          uses: aws-actions/configure-aws-credentials@v2
          with:
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
            role-session-name: github-deploy
            aws-region: us-east-1
            audience: sts.amazonaws.com

        - name: Cleanup failed core stack if needed
          run: |
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name stocks-core-stack \
              --query "Stacks[0].StackStatus" \
              --output text 2>/dev/null || echo NOT_FOUND)
            if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
              aws cloudformation delete-stack --stack-name stocks-core-stack
              aws cloudformation wait stack-delete-complete --stack-name stocks-core-stack
            fi

        - name: Check template size and deploy core CloudFormation stack
          run: |
            # Check if template is small enough to deploy directly
            TEMPLATE_SIZE=$(wc -c < template-core.yml)
            echo "Template size: $TEMPLATE_SIZE bytes"
            
            if [ $TEMPLATE_SIZE -lt 51200 ]; then
              echo "Template is small enough, deploying directly without S3..."
              aws cloudformation deploy \
                --stack-name stocks-core-stack \
                --template-file template-core.yml \
                --capabilities CAPABILITY_NAMED_IAM \
                --no-fail-on-empty-changeset
            else
              echo "Template is too large, creating temporary S3 bucket..."
              # Create a temporary bucket for large templates
              TEMP_BUCKET="stocks-cf-temp-$(date +%s)"
              aws s3 mb s3://$TEMP_BUCKET --region us-east-1
              
              aws cloudformation deploy \
                --stack-name stocks-core-stack \
                --template-file template-core.yml \
                --s3-bucket $TEMP_BUCKET \
                --capabilities CAPABILITY_NAMED_IAM \
                --no-fail-on-empty-changeset
              
              # Clean up temp bucket
              aws s3 rb s3://$TEMP_BUCKET --force
            fi

        - name: Wait for Bastion to be running
          id: wait_bastion
          run: |
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=stocks-bastion" \
                      "Name=instance-state-name,Values=pending,running" \
              --query "Reservations[0].Instances[0].InstanceId" \
              --output text)
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
            echo "id=$INSTANCE_ID" >> $GITHUB_OUTPUT

        - name: Wait for Bastion to be fully initialized
          run: |
            aws ec2 wait instance-status-ok --instance-ids "${{ steps.wait_bastion.outputs.id }}"
            sleep 15

        - name: Verify Bastion setup via SSM
          run: |
            INSTANCE_ID=${{ steps.wait_bastion.outputs.id }}
            echo "Checking if PostgreSQL installation completed..."
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name AWS-RunShellScript \
              --parameters commands=["psql --version || echo 'PostgreSQL not yet installed'"] \
              --query "Command.CommandId" --output text)
            sleep 15
            OUTPUT=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" --output text)
            echo "Bastion PostgreSQL status: $OUTPUT"
            echo "âœ… Bastion host is running and accessible via SSM"