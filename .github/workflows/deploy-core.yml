# .github/workflows/deploy-core.yml
name: Deploy core infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy_core:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Cleanup failed core stack if needed
        run: |
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name stocks-core-stack \
            --query "Stacks[0].StackStatus" \
            --output text 2>/dev/null || echo "NOT_FOUND")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name stocks-core-stack
            aws cloudformation wait stack-delete-complete --stack-name stocks-core-stack
          fi

      - name: Deploy core CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name stocks-core-stack \
            --template-file template-core.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              DBStackName=stocks-db-lambda-stack \
              DBSecretName=stocks-db-credentials

      - name: Wait for Bastion to be running
        id: wait_bastion
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=stocks-bastion" \
                     "Name=instance-state-name,Values=pending,running" \
            --query "Reservations[0].Instances[0].InstanceId" --output text)
          echo "Found Bastion instance: $INSTANCE_ID"
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Verify Bastion setup via SSM
        id: verify_bastion
        run: |
          INSTANCE_ID=${{ steps.wait_bastion.outputs.id }}
          echo "Sending SSM command to $INSTANCE_ID..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --comment "Verify PSQL installed" \
            --parameters commands=["psql --version"] \
            --query "Command.CommandId" --output text)

          sleep 15

          OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" --output text)

          echo "---- Bastion psql version ----"
          echo "$OUTPUT"
          echo "-------------------------------"

          echo "$OUTPUT" | grep -q "psql" || (echo "ERROR: psql client not installed" && exit 1)
