name: Deploy core infrastructure

on:
  push:
    branches: [ "*" ]
    paths:
      - 'template-core.yml'
      - '.github/workflows/deploy-core.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy_core:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # 1) STATIC CREDS: delete any stale OIDC provider and deploy the core stack
      - name: Configure AWS via static creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Delete existing GitHub OIDC provider (if any)
        run: |
          for arn in $(aws iam list-open-id-connect-providers \
                        --query 'OpenIDConnectProviderList[].Arn' \
                        --output text); do
            if [[ "$arn" == *"token.actions.githubusercontent.com"* ]]; then
              echo "Deleting existing OIDC provider $arn"
              aws iam delete-open-id-connect-provider \
                --open-id-connect-provider-arn "$arn"
            fi
          done

      - name: Deploy core CloudFormation stack (creates new OIDC Provider)
        run: |
          aws cloudformation deploy \
            --stack-name  stocks-core-stack \
            --template-file template-core.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
               VpcCidr=10.0.0.0/16 \
               PublicSubnetCidr1=10.0.1.0/24 \
               PublicSubnetCidr2=10.0.2.0/24 \
               PrivateSubnetCidr1=10.0.101.0/24 \
               PrivateSubnetCidr2=10.0.102.0/24 \
               DBStackName=stocks-db-lambda-stack \
               DBSecretName=stocks-db-credentials \
            --no-fail-on-empty-changeset

      # 2) OIDC CREDS: now that the provider exists, switch to OIDC for all remaining steps
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          aws-region:      us-east-1

      - name: Wait for Bastion to be running
        id: wait_bastion
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=stocks-bastion" \
                     "Name=instance-state-name,Values=pending,running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for Bastion to be fully initialized
        run: |
          aws ec2 wait instance-status-ok --instance-ids "${{ steps.wait_bastion.outputs.id }}"
          sleep 15

      - name: Verify Bastion setup via SSM
        run: |
          INSTANCE_ID=${{ steps.wait_bastion.outputs.id }}
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --parameters commands=["psql --version"] \
            --query "Command.CommandId" --output text)
          sleep 15
          OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" --output text)
          echo "$OUTPUT" | grep -q "psql" || (echo "ERROR: psql not installed" && exit 1)
