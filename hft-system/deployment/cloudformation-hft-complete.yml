AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete HFT System Infrastructure with Time Series and Market Data Services'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [production, staging, development]
    Description: Environment name

  InstanceType:
    Type: String
    Default: c6in.8xlarge
    AllowedValues: [c6in.4xlarge, c6in.8xlarge, c6in.16xlarge, c6in.24xlarge]
    Description: EC2 instance type for trading servers

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

  AlertEmail:
    Type: String
    Description: Email for critical alerts
    Default: alerts@yourcompany.com

Conditions:
  IsProduction: !Equals [!Ref Environment, production]

Resources:
  # =====================================
  # TIME SERIES DATA SERVICES
  # =====================================
  
  # Amazon Timestream for high-performance time series data
  HFTTimestreamDatabase:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: !Sub 'hft-timeseries-${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: MarketData

  # Market data table - tick by tick data
  MarketDataTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref HFTTimestreamDatabase
      TableName: market-data
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 24    # 24 hours in memory
        MagneticStoreRetentionPeriodInDays: 365  # 1 year on disk
      Tags:
        - Key: DataType
          Value: MarketData

  # Trading metrics table
  TradingMetricsTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref HFTTimestreamDatabase
      TableName: trading-metrics
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 72    # 3 days in memory
        MagneticStoreRetentionPeriodInDays: 2555 # 7 years on disk
      Tags:
        - Key: DataType
          Value: TradingMetrics

  # Performance metrics table
  PerformanceMetricsTable:
    Type: AWS::Timestream::Table
    Properties:
      DatabaseName: !Ref HFTTimestreamDatabase
      TableName: performance-metrics
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 24
        MagneticStoreRetentionPeriodInDays: 90
      Tags:
        - Key: DataType
          Value: Performance

  # =====================================
  # REAL-TIME DATA PROCESSING
  # =====================================

  # Kinesis Data Streams for real-time market data ingestion
  MarketDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub 'hft-market-data-${Environment}'
      ShardCount: !If [IsProduction, 10, 2]
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      StreamModeDetails:
        StreamMode: PROVISIONED
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Kinesis Analytics for real-time processing
  MarketDataAnalytics:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      ApplicationName: !Sub 'hft-analytics-${Environment}'
      RuntimeEnvironment: FLINK-1_15
      ServiceExecutionRole: !GetAtt KinesisAnalyticsRole.Arn
      ApplicationConfiguration:
        ApplicationCodeConfiguration:
          CodeContent:
            TextContent: |
              CREATE TABLE market_data_source (
                symbol VARCHAR(10),
                price DOUBLE,
                volume BIGINT,
                timestamp_ms BIGINT,
                bid_price DOUBLE,
                ask_price DOUBLE,
                bid_size BIGINT,
                ask_size BIGINT,
                WATERMARK FOR ROWTIME AS ROWTIME - INTERVAL '5' SECOND
              ) WITH (
                'connector' = 'kinesis',
                'stream' = 'hft-market-data-${Environment}',
                'aws.region' = '${AWS::Region}',
                'scan.stream.initpos' = 'LATEST',
                'format' = 'json'
              );
              
              CREATE TABLE vwap_sink (
                symbol VARCHAR(10),
                vwap DOUBLE,
                volume_sum BIGINT,
                window_start TIMESTAMP(3),
                window_end TIMESTAMP(3)
              ) WITH (
                'connector' = 'timestream',
                'database' = 'hft-timeseries-${Environment}',
                'table' = 'market-data'
              );
              
              INSERT INTO vwap_sink
              SELECT 
                symbol,
                SUM(price * volume) / SUM(volume) as vwap,
                SUM(volume) as volume_sum,
                window_start,
                window_end
              FROM TABLE(
                TUMBLE(TABLE market_data_source, DESCRIPTOR(ROWTIME), INTERVAL '1' MINUTE)
              )
              GROUP BY symbol, window_start, window_end;
          CodeContentType: PLAINTEXT
        FlinkApplicationConfiguration:
          CheckpointConfiguration:
            ConfigurationType: CUSTOM
            CheckpointingEnabled: true
            CheckpointInterval: 60000
          MonitoringConfiguration:
            ConfigurationType: CUSTOM
            LogLevel: INFO
            MetricsLevel: APPLICATION
          ParallelismConfiguration:
            ConfigurationType: CUSTOM
            Parallelism: !If [IsProduction, 4, 2]
            ParallelismPerKPU: 1
            AutoScalingEnabled: true

  # =====================================
  # MARKET DATA FEEDS AND CONNECTIVITY
  # =====================================

  # AWS Data Exchange for market data feeds
  MarketDataSubscription:
    Type: AWS::DataExchange::DataSet
    Condition: IsProduction
    Properties:
      Name: !Sub 'market-data-feed-${Environment}'
      Description: 'Real-time market data feed subscription'
      AssetType: 'S3_SNAPSHOT'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda for market data ingestion
  MarketDataIngestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hft-market-data-ingestion-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt MarketDataLambdaRole.Arn
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          KINESIS_STREAM: !Ref MarketDataStream
          TIMESTREAM_DATABASE: !Ref HFTTimestreamDatabase
          TIMESTREAM_TABLE: !Ref MarketDataTable
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          from datetime import datetime
          
          kinesis = boto3.client('kinesis')
          timestream = boto3.client('timestream-write')
          
          def lambda_handler(event, context):
              # Process incoming market data
              records = []
              
              for record in event.get('Records', []):
                  # Parse market data record
                  data = json.loads(record['body'])
                  
                  # Prepare for Kinesis
                  kinesis_record = {
                      'Data': json.dumps(data),
                      'PartitionKey': data['symbol']
                  }
                  
                  # Send to Kinesis for real-time processing
                  kinesis.put_record(
                      StreamName=os.environ['KINESIS_STREAM'],
                      **kinesis_record
                  )
                  
                  # Prepare for Timestream
                  timestream_record = {
                      'Time': str(int(data['timestamp'] * 1000)),
                      'TimeUnit': 'MILLISECONDS',
                      'Dimensions': [
                          {'Name': 'symbol', 'Value': data['symbol']},
                          {'Name': 'venue', 'Value': data.get('venue', 'default')}
                      ],
                      'MeasureName': 'market_data',
                      'MeasureValue': str(data['price']),
                      'MeasureValueType': 'DOUBLE'
                  }
                  records.append(timestream_record)
              
              # Batch write to Timestream
              if records:
                  timestream.write_records(
                      DatabaseName=os.environ['TIMESTREAM_DATABASE'],
                      TableName=os.environ['TIMESTREAM_TABLE'],
                      Records=records
                  )
              
              return {'statusCode': 200, 'body': f'Processed {len(records)} records'}

  # =====================================
  # PARAMETER STORE FOR CONFIGURATION
  # =====================================

  # System configuration parameters
  TradingSystemConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/hft/${Environment}/config/system'
      Type: String
      Value: !Sub |
        {
          "environment": "${Environment}",
          "timestream_database": "${HFTTimestreamDatabase}",
          "market_data_stream": "${MarketDataStream}",
          "max_position_size": 10000,
          "max_daily_loss": 5000,
          "risk_check_interval_ms": 100
        }
      Description: 'HFT System Configuration'
      Tags:
        Environment: !Ref Environment

  # Strategy configurations
  StrategyConfigs:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/hft/${Environment}/config/strategies'
      Type: String
      Value: |
        {
          "scalping": {
            "enabled": true,
            "allocation": 0.4,
            "profit_target_ticks": 2,
            "stop_loss_ticks": 3,
            "max_position_size": 1000
          },
          "momentum": {
            "enabled": true,
            "allocation": 0.4,
            "fast_ma_period": 10,
            "slow_ma_period": 30,
            "momentum_threshold": 0.003
          },
          "mean_reversion": {
            "enabled": true,
            "allocation": 0.2,
            "lookback_period": 20,
            "zscore_entry_threshold": 2.0,
            "zscore_exit_threshold": 0.5
          }
        }
      Description: 'Trading Strategy Configurations'

  # Market data symbols
  TradingSymbols:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/hft/${Environment}/config/symbols'
      Type: StringList
      Value: 'AAPL,MSFT,GOOGL,TSLA,AMZN,NVDA,META,SPY,QQQ,IWM'
      Description: 'Trading symbols for the HFT system'

  # =====================================
  # SECRETS MANAGER FOR API KEYS
  # =====================================

  # Market data API credentials
  MarketDataAPIKeys:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'hft/${Environment}/market-data-api'
      Description: 'API keys for market data providers'
      SecretString: !Sub |
        {
          "polygon_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "alpha_vantage_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "iex_cloud_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "finnhub_api_key": "REPLACE_WITH_ACTUAL_KEY"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Broker API credentials
  BrokerAPIKeys:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'hft/${Environment}/broker-api'
      Description: 'API keys for broker connections'
      SecretString: !Sub |
        {
          "alpaca_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "alpaca_secret_key": "REPLACE_WITH_ACTUAL_SECRET",
          "ib_api_key": "REPLACE_WITH_ACTUAL_KEY",
          "td_ameritrade_api_key": "REPLACE_WITH_ACTUAL_KEY"
        }

  # =====================================
  # EVENT BRIDGE FOR SYSTEM COORDINATION
  # =====================================

  # Custom event bus for HFT system events
  HFTEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub 'hft-events-${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Market open/close event rules
  MarketOpenRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref HFTEventBus
      Name: !Sub 'market-open-${Environment}'
      Description: 'Trigger when market opens'
      ScheduleExpression: 'cron(30 9 ? * MON-FRI *)'  # 9:30 AM EST weekdays
      State: ENABLED
      Targets:
        - Arn: !GetAtt TradingSystemControlFunction.Arn
          Id: 'MarketOpenTarget'
          Input: '{"action": "start_trading"}'

  MarketCloseRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref HFTEventBus
      Name: !Sub 'market-close-${Environment}'
      Description: 'Trigger when market closes'
      ScheduleExpression: 'cron(0 16 ? * MON-FRI *)'  # 4:00 PM EST weekdays
      State: ENABLED
      Targets:
        - Arn: !GetAtt TradingSystemControlFunction.Arn
          Id: 'MarketCloseTarget'
          Input: '{"action": "stop_trading"}'

  # =====================================
  # LAMBDA FUNCTIONS FOR SYSTEM CONTROL
  # =====================================

  # Trading system control function
  TradingSystemControlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hft-system-control-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt TradingControlLambdaRole.Arn
      Timeout: 60
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          EVENT_BUS: !Ref HFTEventBus
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          eventbridge = boto3.client('events')
          ssm = boto3.client('ssm')
          
          def lambda_handler(event, context):
              action = event.get('action')
              
              if action == 'start_trading':
                  # Send start trading event
                  response = eventbridge.put_events(
                      Entries=[
                          {
                              'Source': 'hft.system',
                              'DetailType': 'Trading Command',
                              'Detail': json.dumps({'command': 'START'}),
                              'EventBusName': os.environ['EVENT_BUS']
                          }
                      ]
                  )
                  
              elif action == 'stop_trading':
                  # Send stop trading event
                  response = eventbridge.put_events(
                      Entries=[
                          {
                              'Source': 'hft.system',
                              'DetailType': 'Trading Command',
                              'Detail': json.dumps({'command': 'STOP'}),
                              'EventBusName': os.environ['EVENT_BUS']
                          }
                      ]
                  )
              
              return {'statusCode': 200, 'body': f'Executed {action}'}

  # Risk monitoring function
  RiskMonitoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'hft-risk-monitor-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt RiskMonitorLambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          TIMESTREAM_DATABASE: !Ref HFTTimestreamDatabase
          ALERT_TOPIC: !Ref AlertsTopic
      Code:
        ZipFile: |
          import boto3
          import json
          from datetime import datetime, timedelta
          
          timestream = boto3.client('timestream-query')
          sns = boto3.client('sns')
          
          def lambda_handler(event, context):
              # Query recent trading metrics
              query = f"""
              SELECT 
                  symbol,
                  SUM(measure_value::double) as total_pnl,
                  COUNT(*) as trade_count
              FROM "{os.environ['TIMESTREAM_DATABASE']}"."trading-metrics"
              WHERE time > ago(1h)
                AND measure_name = 'realized_pnl'
              GROUP BY symbol
              HAVING SUM(measure_value::double) < -1000
              """
              
              try:
                  response = timestream.query(QueryString=query)
                  
                  for row in response.get('Rows', []):
                      symbol = row['Data'][0]['ScalarValue']
                      pnl = float(row['Data'][1]['ScalarValue'])
                      
                      # Send alert for significant losses
                      sns.publish(
                          TopicArn=os.environ['ALERT_TOPIC'],
                          Subject=f'Risk Alert: {symbol} Loss',
                          Message=f'Symbol {symbol} has loss of ${pnl:.2f} in the last hour'
                      )
                      
              except Exception as e:
                  print(f"Error querying risk metrics: {e}")
              
              return {'statusCode': 200}

  # =====================================
  # IAM ROLES AND POLICIES
  # =====================================

  # Kinesis Analytics execution role
  KinesisAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/KinesisAnalyticsServiceRole
      Policies:
        - PolicyName: TimestreamWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:WriteRecords
                  - timestream:DescribeEndpoints
                Resource: !GetAtt MarketDataTable.Arn

  # Market data ingestion Lambda role
  MarketDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MarketDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - timestream:WriteRecords
                  - timestream:DescribeEndpoints
                Resource:
                  - !GetAtt MarketDataStream.Arn
                  - !GetAtt MarketDataTable.Arn

  # Trading control Lambda role
  TradingControlLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt HFTEventBus.Arn

  # Risk monitoring Lambda role
  RiskMonitorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RiskMonitorAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - timestream:Query
                  - timestream:DescribeEndpoints
                  - sns:Publish
                Resource:
                  - !GetAtt HFTTimestreamDatabase.Arn
                  - !Ref AlertsTopic

  # =====================================
  # EXISTING SERVICES (from original)
  # =====================================

  # DynamoDB, SNS, CloudWatch from original template
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'hft-alerts-${Environment}'
      DisplayName: HFT System Alerts
      KmsMasterKeyId: alias/aws/sns

  AlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertsTopic
      Endpoint: !Ref AlertEmail

  # =====================================
  # CLOUDWATCH DASHBOARDS
  # =====================================

  ComprehensiveDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'HFT-Complete-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Kinesis", "IncomingRecords", "StreamName", "${MarketDataStream}"],
                  [".", "OutgoingRecords", ".", "."]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Market Data Ingestion"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Timestream", "UserRecordsIngested", "DatabaseName", "${HFTTimestreamDatabase}"],
                  [".", "SystemErrors", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Time Series Storage"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["HFT/Trading", "SignalsGenerated"],
                  [".", "OrdersSent"],
                  [".", "OrdersFilled"],
                  [".", "RealizedPnL"]
                ],
                "period": 60,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Trading Performance"
              }
            }
          ]
        }

Outputs:
  TimestreamDatabase:
    Description: Timestream database for time series data
    Value: !Ref HFTTimestreamDatabase
    Export:
      Name: !Sub '${Environment}-HFT-Timestream-DB'

  MarketDataStreamName:
    Description: Kinesis stream for real-time market data
    Value: !Ref MarketDataStream
    Export:
      Name: !Sub '${Environment}-HFT-MarketData-Stream'

  EventBusName:
    Description: EventBridge bus for system coordination
    Value: !Ref HFTEventBus
    Export:
      Name: !Sub '${Environment}-HFT-Event-Bus'

  SystemConfigParameter:
    Description: Parameter store path for system configuration
    Value: !Ref TradingSystemConfig
    Export:
      Name: !Sub '${Environment}-HFT-System-Config'

  MarketDataAPISecret:
    Description: Secrets Manager secret for market data API keys
    Value: !Ref MarketDataAPIKeys
    Export:
      Name: !Sub '${Environment}-HFT-MarketData-Secret'

  BrokerAPISecret:
    Description: Secrets Manager secret for broker API keys
    Value: !Ref BrokerAPIKeys
    Export:
      Name: !Sub '${Environment}-HFT-Broker-Secret'