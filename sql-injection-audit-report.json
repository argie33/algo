{
  "timestamp": "2025-07-18T20:51:38.704Z",
  "overallRisk": "CRITICAL",
  "summary": {
    "filesScanned": 294,
    "vulnerabilitiesFound": 2684,
    "criticalIssues": 77,
    "highRiskIssues": 2320,
    "mediumRiskIssues": 287,
    "lowRiskIssues": 0
  },
  "vulnerabilities": [
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 20,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌍 AWS Region: ${process.env.AWS_REGION || 'us-east-1'}`",
      "context": "    18:     console.log('🔍 CloudFormation Stack Status Checker');\n    19:     console.log('=====================================');\n>>> 20:     console.log(`🌍 AWS Region: ${process.env.AWS_REGION || 'us-east-1'}`);\n    21:     \n    22:     try {"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 40,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Found ${stacks.length} stacks:`",
      "context": "    38:         const stacks = listResponse.StackSummaries || [];\n    39:         \n>>> 40:         console.log(`📊 Found ${stacks.length} stacks:`);\n    41:         stacks.forEach(stack => {\n    42:             console.log(`   ${stack.StackName}: ${stack.StackStatus} (${stack.CreationTime?.toISOString()})`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\\n📋 Stack: ${stackName}`",
      "context": "    59:                 const stack = response.Stacks[0];\n    60:                 \n>>> 61:                 console.log(`\\n📋 Stack: ${stackName}`);\n    62:                 console.log(`   Status: ${stack.StackStatus}`);\n    63:                 console.log(`   Created: ${stack.CreationTime?.toISOString()}`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Status: ${stack.StackStatus}`",
      "context": "    60:                 \n    61:                 console.log(`\\n📋 Stack: ${stackName}`);\n>>> 62:                 console.log(`   Status: ${stack.StackStatus}`);\n    63:                 console.log(`   Created: ${stack.CreationTime?.toISOString()}`);\n    64:                 console.log(`   Updated: ${stack.LastUpdatedTime?.toISOString() || 'Never'}`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📤 Outputs (${stack.Outputs.length}):`",
      "context": "    66:                 // Check outputs\n    67:                 if (stack.Outputs && stack.Outputs.length > 0) {\n>>> 68:                     console.log(`   📤 Outputs (${stack.Outputs.length}):`);\n    69:                     stack.Outputs.forEach(output => {\n    70:                         console.log(`      ${output.OutputKey}: ${output.OutputValue}`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 70,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`      ${output.OutputKey}: ${output.OutputValue}`",
      "context": "    68:                     console.log(`   📤 Outputs (${stack.Outputs.length}):`);\n    69:                     stack.Outputs.forEach(output => {\n>>> 70:                         console.log(`      ${output.OutputKey}: ${output.OutputValue}`);\n    71:                     });\n    72:                 } else {"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📥 Parameters (${stack.Parameters.length}):`",
      "context": "    76:                 // Check parameters\n    77:                 if (stack.Parameters && stack.Parameters.length > 0) {\n>>> 78:                     console.log(`   📥 Parameters (${stack.Parameters.length}):`);\n    79:                     stack.Parameters.forEach(param => {\n    80:                         // Hide sensitive values"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`      ${param.ParameterKey}: ${value}`",
      "context": "    82:                                      param.ParameterKey.toLowerCase().includes('password') ? \n    83:                                      '[HIDDEN]' : param.ParameterValue;\n>>> 84:                         console.log(`      ${param.ParameterKey}: ${value}`);\n    85:                     });\n    86:                 }"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 95,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🎯 Found needed outputs: ${foundOutputs.map(o => o.OutputKey).join(', ')}`",
      "context": "    93:                 \n    94:                 if (foundOutputs.length > 0) {\n>>> 95:                     console.log(`   🎯 Found needed outputs: ${foundOutputs.map(o => o.OutputKey).join(', ')}`);\n    96:                 } else {\n    97:                     console.log(`   ⚠️ Missing needed outputs: ${neededOutputs.join(', ')}`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 97,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ⚠️ Missing needed outputs: ${neededOutputs.join(', ')}`",
      "context": "    95:                     console.log(`   🎯 Found needed outputs: ${foundOutputs.map(o => o.OutputKey).join(', ')}`);\n    96:                 } else {\n>>> 97:                     console.log(`   ⚠️ Missing needed outputs: ${neededOutputs.join(', ')}`);\n    98:                 }\n    99:                 "
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ❌ Stack ${stackName} not found`",
      "context": "    100:             } catch (error) {\n    101:                 if (error.name === 'ValidationError') {\n>>> 102:                     console.log(`   ❌ Stack ${stackName} not found`);\n    103:                 } else {\n    104:                     console.log(`   ❌ Error checking ${stackName}: ${error.message}`);"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 104,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ❌ Error checking ${stackName}: ${error.message}`",
      "context": "    102:                     console.log(`   ❌ Stack ${stackName} not found`);\n    103:                 } else {\n>>> 104:                     console.log(`   ❌ Error checking ${stackName}: ${error.message}`);\n    105:                 }\n    106:             }"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 10,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Configure AWS SDK\nconst cfClient = new CloudFormationClient({\n    region: process.env.AWS_REGION || '",
      "context": "    8:  */\n    9: \n>>> 10: const { CloudFormationClient, DescribeStacksCommand, ListStacksCommand } = require('@aws-sdk/client-cloudformation');\n    11: \n    12: // Configure AWS SDK"
    },
    {
      "file": "webapp/lambda/check-cloudformation-status.js",
      "line": 20,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`🌍 AWS Region: ${process.env.AWS_REGION || '",
      "context": "    18:     console.log('🔍 CloudFormation Stack Status Checker');\n    19:     console.log('=====================================');\n>>> 20:     console.log(`🌍 AWS Region: ${process.env.AWS_REGION || 'us-east-1'}`);\n    21:     \n    22:     try {"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 13,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 ${req.method} ${req.path} - Origin: ${req.headers.origin}`",
      "context": "    11: // CRITICAL: CORS middleware must be FIRST - based on working version\n    12: app.use((req, res, next) => {\n>>> 13:   console.log(`📡 ${req.method} ${req.path} - Origin: ${req.headers.origin}`);\n    14:   \n    15:   const origin = req.headers.origin;"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 124,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[INFO] ${msg}`",
      "context": "    122:       // Fallback logger\n    123:       logger = {\n>>> 124:         info: (msg, data) => console.log(`[INFO] ${msg}`, data || ''),\n    125:         error: (msg, error, data) => console.error(`[ERROR] ${msg}`, error?.message || error, data || ''),\n    126:         warn: (msg, data) => console.warn(`[WARN] ${msg}`, data || ''),"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[ERROR] ${msg}`",
      "context": "    123:       logger = {\n    124:         info: (msg, data) => console.log(`[INFO] ${msg}`, data || ''),\n>>> 125:         error: (msg, error, data) => console.error(`[ERROR] ${msg}`, error?.message || error, data || ''),\n    126:         warn: (msg, data) => console.warn(`[WARN] ${msg}`, data || ''),\n    127:         debug: (msg, data) => console.debug(`[DEBUG] ${msg}`, data || ''),"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 126,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[WARN] ${msg}`",
      "context": "    124:         info: (msg, data) => console.log(`[INFO] ${msg}`, data || ''),\n    125:         error: (msg, error, data) => console.error(`[ERROR] ${msg}`, error?.message || error, data || ''),\n>>> 126:         warn: (msg, data) => console.warn(`[WARN] ${msg}`, data || ''),\n    127:         debug: (msg, data) => console.debug(`[DEBUG] ${msg}`, data || ''),\n    128:         getCorrelationId: () => Math.random().toString(36).substr(2, 9)"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[DEBUG] ${msg}`",
      "context": "    125:         error: (msg, error, data) => console.error(`[ERROR] ${msg}`, error?.message || error, data || ''),\n    126:         warn: (msg, data) => console.warn(`[WARN] ${msg}`, data || ''),\n>>> 127:         debug: (msg, data) => console.debug(`[DEBUG] ${msg}`, data || ''),\n    128:         getCorrelationId: () => Math.random().toString(36).substr(2, 9)\n    129:       };"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 187,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔒 Security event: ${event.eventType} [${event.severity}] from ${event.sourceIP}`",
      "context": "    185:       // Set up security event listeners\n    186:       securityService.on('securityEvent', (event) => {\n>>> 187:         console.log(`🔒 Security event: ${event.eventType} [${event.severity}] from ${event.sourceIP}`);\n    188:       });\n    189:       "
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Security alert: ${alert.alertType}`",
      "context": "    189:       \n    190:       securityService.on('securityAlert', (alert) => {\n>>> 191:         console.warn(`🚨 Security alert: ${alert.alertType}`, alert.details);\n    192:       });\n    193:       "
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 195,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Threat level changed: ${change.from} → ${change.to}`",
      "context": "    193:       \n    194:       securityService.on('threatLevelChanged', (change) => {\n>>> 195:         console.warn(`🎯 Threat level changed: ${change.from} → ${change.to}`);\n    196:       });\n    197:       "
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 386,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Loaded ${routeName} route at ${mountPath}`",
      "context": "    384:     const route = require(routePath);\n    385:     app.use(mountPath, route);\n>>> 386:     console.log(`✅ Loaded ${routeName} route at ${mountPath}`);\n    387:     return true;\n    388:   } catch (error) {"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 389,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to load ${routeName} route:`",
      "context": "    387:     return true;\n    388:   } catch (error) {\n>>> 389:     console.error(`❌ Failed to load ${routeName} route:`, error.message);\n    390:     \n    391:     // Create error stub route"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 397,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${routeName} service temporarily unavailable`",
      "context": "    395:       res.status(503).json({\n    396:         success: false,\n>>> 397:         error: `${routeName} service temporarily unavailable`,\n    398:         message: 'Route failed to load - check logs for details',\n    399:         timestamp: new Date().toISOString(),"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 473,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📦 Routes loaded: ${loadedRoutes}/${routes.length} successful, ${failedRoutes} failed`",
      "context": "    471: });\n    472: \n>>> 473: console.log(`📦 Routes loaded: ${loadedRoutes}/${routes.length} successful, ${failedRoutes} failed`);\n    474: \n    475: // Health endpoints with database integration"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 601,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider} API key saved successfully`",
      "context": "    599:       success: true,\n    600:       data: result.rows[0],\n>>> 601:       message: `${provider} API key saved successfully`,\n    602:       timestamp: new Date().toISOString(),\n    603:       correlation_id: req.correlationId"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 638,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`API key for ${provider} not found`",
      "context": "    636:       return res.status(404).json({\n    637:         success: false,\n>>> 638:         message: `API key for ${provider} not found`\n    639:       });\n    640:     }"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 644,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider} API key deleted successfully`",
      "context": "    642:     res.json({\n    643:       success: true,\n>>> 644:       message: `${provider} API key deleted successfully`,\n    645:       timestamp: new Date().toISOString(),\n    646:       correlation_id: req.correlationId"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 929,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Endpoint ${req.originalUrl} not found`",
      "context": "    927:   res.status(404).json({\n    928:     success: false,\n>>> 929:     error: `Endpoint ${req.originalUrl} not found`,\n    930:     message: 'Route not implemented',\n    931:     method: req.method,"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 484,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    environment: process.env.NODE_ENV || '",
      "context": "    482:     message: 'Financial Dashboard API - Production Ready',\n    483:     timestamp: new Date().toISOString(),\n>>> 484:     version: '2.0.0',\n    485:     environment: process.env.NODE_ENV || 'production',\n    486:     status: 'operational',"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 513,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        API_KEY_ENCRYPTION_SECRET_ARN: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN ? '",
      "context": "    511:         NODE_ENV: process.env.NODE_ENV,\n    512:         AWS_REGION: process.env.AWS_REGION,\n>>> 513:         DB_SECRET_ARN: !!process.env.DB_SECRET_ARN ? 'SET' : 'MISSING',\n    514:         API_KEY_ENCRYPTION_SECRET_ARN: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN ? 'SET' : 'MISSING'\n    515:       },"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 858,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    route_loading: {\n      all_routes_loaded: loadedRoutes === routes.length,\n      total_routes: routes.length,\n      loaded_routes: loadedRoutes,\n      failed_routes: failedRoutes,\n      success_rate: Math.round((loadedRoutes / routes.length) * 100)\n    },\n    configuration: {\n      database_configured: !!process.env.DB_SECRET_ARN,\n      api_keys_configured: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n      aws_region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || '",
      "context": "    856:     message: 'Financial Dashboard API - System Status',\n    857:     timestamp: new Date().toISOString(),\n>>> 858:     system_status: 'OPERATIONAL',\n    859:     route_loading: {\n    860:       all_routes_loaded: loadedRoutes === routes.length,"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 869,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    },\n    missing_critical_vars: [\n      !process.env.DB_SECRET_ARN && '",
      "context": "    867:       database_configured: !!process.env.DB_SECRET_ARN,\n    868:       api_keys_configured: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n>>> 869:       aws_region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'unknown'\n    870:     },\n    871:     missing_critical_vars: ["
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 872,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      !process.env.DB_ENDPOINT && '",
      "context": "    870:     },\n    871:     missing_critical_vars: [\n>>> 872:       !process.env.DB_SECRET_ARN && 'DB_SECRET_ARN',\n    873:       !process.env.DB_ENDPOINT && 'DB_ENDPOINT', \n    874:       !process.env.API_KEY_ENCRYPTION_SECRET_ARN && 'API_KEY_ENCRYPTION_SECRET_ARN'"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', \n      !process.env.API_KEY_ENCRYPTION_SECRET_ARN && '",
      "context": "    871:     missing_critical_vars: [\n    872:       !process.env.DB_SECRET_ARN && 'DB_SECRET_ARN',\n>>> 873:       !process.env.DB_ENDPOINT && 'DB_ENDPOINT', \n    874:       !process.env.API_KEY_ENCRYPTION_SECRET_ARN && 'API_KEY_ENCRYPTION_SECRET_ARN'\n    875:     ].filter(Boolean),"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 887,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    timestamp: new Date().toISOString(),\n    request_info: {\n      method: req.method,\n      path: req.path,\n      headers: req.headers,\n      query: req.query\n    },\n    system_info: {\n      node_version: process.version,\n      memory: process.memoryUsage(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV\n    },\n    correlation_id: req.correlationId\n  });\n});\n\n// Default route\napp.get('",
      "context": "    885:   res.json({\n    886:     success: true,\n>>> 887:     message: 'Debug endpoint - Lambda is functional',\n    888:     timestamp: new Date().toISOString(),\n    889:     request_info: {"
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 187,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${event.sourceIP}",
      "context": "    185:       // Set up security event listeners\n    186:       securityService.on('securityEvent', (event) => {\n>>> 187:         console.log(`🔒 Security event: ${event.eventType} [${event.severity}] from ${event.sourceIP}`);\n    188:       });\n    189:       "
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 627,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const result = await dbManager.query(\n      '",
      "context": "    625:   try {\n    626:     const userId = req.user?.id || 'demo-user';\n>>> 627:     const { provider } = req.params;\n    628:     \n    629:     const result = await dbManager.query("
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 721,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    const result = await dbManager.query(\n      `",
      "context": "    719:   try {\n    720:     const userId = req.user?.id || 'demo-user';\n>>> 721:     const { email = true, push = true, sms = false } = req.body;\n    722:     \n    723:     const result = await dbManager.query("
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 721,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    const result = await dbManager.query(\n      `",
      "context": "    719:   try {\n    720:     const userId = req.user?.id || 'demo-user';\n>>> 721:     const { email = true, push = true, sms = false } = req.body;\n    722:     \n    723:     const result = await dbManager.query("
    },
    {
      "file": "webapp/lambda/index.js",
      "line": 893,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query\n    },\n    system_info: {\n      node_version: process.version,\n      memory: process.memoryUsage(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV\n    },\n    correlation_id: req.correlationId\n  });\n});\n\n// Default route\napp.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Financial Dashboard API',\n    version: '2.0.0',\n    status: 'operational',\n    timestamp: new Date().toISOString(),\n    features: ['market-data', 'portfolio', 'real-time', 'analytics'],\n    correlation_id: req.correlationId\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  const logger = getLogger();\n  logger.warn('Unhandled route accessed', {\n    method: req.method,\n    url: req.originalUrl,\n    origin: req.headers.origin\n  });\n  \n  res.status(404).json({\n    success: false,\n    error: `",
      "context": "    891:       path: req.path,\n    892:       headers: req.headers,\n>>> 893:       query: req.query\n    894:     },\n    895:     system_info: {"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 179,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.options.keyPrefix}${identifier}:${category}:${userTier}`",
      "context": "    177:      */\n    178:     generateKey(identifier, category, userTier) {\n>>> 179:         return `${this.options.keyPrefix}${identifier}:${category}:${userTier}`;\n    180:     }\n    181: "
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 215,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.options.keyPrefix}blocked:${ip}`",
      "context": "    213:         if (this.redis) {\n    214:             try {\n>>> 215:                 const blockKey = `${this.options.keyPrefix}blocked:${ip}`;\n    216:                 const isBlocked = await this.redis.exists(blockKey);\n    217:                 return isBlocked === 1;"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 215,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.options.keyPrefix}blocked:${ip}`",
      "context": "    213:         if (this.redis) {\n    214:             try {\n>>> 215:                 const blockKey = `${this.options.keyPrefix}blocked:${ip}`;\n    216:                 const isBlocked = await this.redis.exists(blockKey);\n    217:                 return isBlocked === 1;"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${now}-${Math.random()}`",
      "context": "    353:         \n    354:         // Add current request\n>>> 355:         pipeline.zadd(key, now, `${now}-${Math.random()}`);\n    356:         \n    357:         // Set expiry"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 442,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`activity:${identifier}`",
      "context": "    440:      */\n    441:     async trackActivity(identifier, ip, userAgent, category, rateLimitResult, config) {\n>>> 442:         const activityKey = `activity:${identifier}`;\n    443:         const now = Date.now();\n    444:         "
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 473,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`suspicious:${ip}`",
      "context": "    471:      */\n    472:     async detectAnomalies(identifier, ip, activity, config) {\n>>> 473:         const suspiciousKey = `suspicious:${ip}`;\n    474:         \n    475:         if (!this.suspiciousIPs.has(suspiciousKey)) {"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 673,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Rate limiter cleanup: ${this.memoryStore.size} active limiters, ${this.suspiciousIPs.size} suspicious IPs`",
      "context": "    671:             }\n    672: \n>>> 673:             console.log(`Rate limiter cleanup: ${this.memoryStore.size} active limiters, ${this.suspiciousIPs.size} suspicious IPs`);\n    674:         }, 10 * 60 * 1000); // Every 10 minutes\n    675:     }"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 681,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[RATE LIMITER SECURITY] ${type}:`",
      "context": "    679:      */\n    680:     logSecurityEvent(type, details) {\n>>> 681:         console.warn(`[RATE LIMITER SECURITY] ${type}:`, details);\n    682:         // In production, integrate with security monitoring\n    683:     }"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 15,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass AdvancedRateLimiter {\n    constructor(options = {}) {\n        this.options = {\n            redisHost: options.redisHost || process.env.REDIS_HOST || '",
      "context": "    13: \n    14: const Redis = require('ioredis');\n>>> 15: const crypto = require('crypto');\n    16: \n    17: class AdvancedRateLimiter {"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 20,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            redisPort: options.redisPort || process.env.REDIS_PORT || 6379,\n            redisPassword: options.redisPassword || process.env.REDIS_PASSWORD,\n            keyPrefix: options.keyPrefix || '",
      "context": "    18:     constructor(options = {}) {\n    19:         this.options = {\n>>> 20:             redisHost: options.redisHost || process.env.REDIS_HOST || 'localhost',\n    21:             redisPort: options.redisPort || process.env.REDIS_PORT || 6379,\n    22:             redisPassword: options.redisPassword || process.env.REDIS_PASSWORD,"
    },
    {
      "file": "webapp/lambda/middleware/advancedRateLimit.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            enableRedis: options.enableRedis !== false && (process.env.REDIS_HOST || process.env.NODE_ENV === '",
      "context": "    21:             redisPort: options.redisPort || process.env.REDIS_PORT || 6379,\n    22:             redisPassword: options.redisPassword || process.env.REDIS_PASSWORD,\n>>> 23:             keyPrefix: options.keyPrefix || 'rate_limit:',\n    24:             enableRedis: options.enableRedis !== false && (process.env.REDIS_HOST || process.env.NODE_ENV === 'production'),\n    25:             ...options"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 121,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`",
      "context": "    119:   \n    120:   try {\n>>> 121:     console.log(`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n    122:     console.log(`🌍 [${requestId}] Security Context:`, {\n    123:       NODE_ENV: process.env.NODE_ENV,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌍 [${requestId}] Security Context:`",
      "context": "    120:   try {\n    121:     console.log(`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n>>> 122:     console.log(`🌍 [${requestId}] Security Context:`, {\n    123:       NODE_ENV: process.env.NODE_ENV,\n    124:       clientIp,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 143,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎫 [${requestId}] Authorization header present:`",
      "context": "    141:     const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    142:     \n>>> 143:     console.log(`🎫 [${requestId}] Authorization header present:`, !!authHeader);\n    144:     console.log(`🎫 [${requestId}] Token extracted:`, !!token);\n    145: "
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎫 [${requestId}] Token extracted:`",
      "context": "    142:     \n    143:     console.log(`🎫 [${requestId}] Authorization header present:`, !!authHeader);\n>>> 144:     console.log(`🎫 [${requestId}] Token extracted:`, !!token);\n    145: \n    146:     // Get verifier (will load config if needed)"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 147,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Getting JWT verifier...`",
      "context": "    145: \n    146:     // Get verifier (will load config if needed)\n>>> 147:     console.log(`🔍 [${requestId}] Getting JWT verifier...`);\n    148:     const jwtVerifier = await getVerifier();\n    149: "
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] JWT verifier not available`",
      "context": "    150:     // If no verifier is available, check if we should allow in development\n    151:     if (!jwtVerifier) {\n>>> 152:       console.error(`❌ [${requestId}] JWT verifier not available`);\n    153:       console.error(`❌ [${requestId}] Config status:`, {\n    154:         cognitoConfigLoaded: !!cognitoConfig,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 153,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Config status:`",
      "context": "    151:     if (!jwtVerifier) {\n    152:       console.error(`❌ [${requestId}] JWT verifier not available`);\n>>> 153:       console.error(`❌ [${requestId}] Config status:`, {\n    154:         cognitoConfigLoaded: !!cognitoConfig,\n    155:         userPoolId: process.env.COGNITO_USER_POOL_ID ? 'SET' : 'MISSING',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No token found in Authorization header`",
      "context": "    174:     // Token already extracted above\n    175:     if (!token) {\n>>> 176:       console.error(`❌ [${requestId}] No token found in Authorization header`);\n    177:       return res.status(401).json({\n    178:         error: 'Authentication required',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 188,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Token found, verifying with Cognito...`",
      "context": "    186:     }\n    187: \n>>> 188:     console.log(`✅ [${requestId}] Token found, verifying with Cognito...`);\n    189:     // Verify the JWT token\n    190:     const payload = await jwtVerifier.verify(token);"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${requestId}] Token verified successfully`",
      "context": "    189:     // Verify the JWT token\n    190:     const payload = await jwtVerifier.verify(token);\n>>> 191:     console.log(`🎯 [${requestId}] Token verified successfully`);\n    192:     \n    193:     // Add comprehensive user information to request with security context"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 221,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] User authenticated successfully:`",
      "context": "    219: \n    220:     // Log successful authentication with security details\n>>> 221:     console.log(`✅ [${requestId}] User authenticated successfully:`, {\n    222:       userId: req.user.sub,\n    223:       email: req.user.email,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 232,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`👤 [${requestId}] User authenticated in ${duration}ms:`",
      "context": "    230: \n    231:     const duration = Date.now() - startTime;\n>>> 232:     console.log(`👤 [${requestId}] User authenticated in ${duration}ms:`, {\n    233:       sub: req.user.sub,\n    234:       email: req.user.email,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 242,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication error after ${duration}ms:`",
      "context": "    240:   } catch (error) {\n    241:     const duration = Date.now() - startTime;\n>>> 242:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    243:       name: error.name,\n    244:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 250,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🕐 [${requestId}] Token expired`",
      "context": "    248:     // Handle specific JWT errors\n    249:     if (error.name === 'TokenExpiredError') {\n>>> 250:       console.error(`🕐 [${requestId}] Token expired`);\n    251:       return res.status(401).json({\n    252:         error: 'Token expired',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 259,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] Invalid token format`",
      "context": "    257:     \n    258:     if (error.name === 'JsonWebTokenError') {\n>>> 259:       console.error(`🚫 [${requestId}] Invalid token format`);\n    260:       return res.status(401).json({\n    261:         error: 'Invalid token',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 268,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] JWT verification failed:`",
      "context": "    266: \n    267:     if (error.name === 'JwtVerifyError') {\n>>> 268:       console.error(`🚫 [${requestId}] JWT verification failed:`, error.message);\n    269:       return res.status(401).json({\n    270:         error: 'Token verification failed',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 [${requestId}] Network error during token verification`",
      "context": "    276:     // Handle network/service errors\n    277:     if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n>>> 278:       console.error(`🌐 [${requestId}] Network error during token verification`);\n    279:       return res.status(503).json({\n    280:         error: 'Authentication service unavailable',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 286,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔥 [${requestId}] Generic authentication failure:`",
      "context": "    284:     }\n    285: \n>>> 286:     console.error(`🔥 [${requestId}] Generic authentication failure:`, error);\n    287:     return res.status(401).json({\n    288:       error: 'Authentication failed',"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 319,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Access denied. Required roles: ${roles.join(', ')}`",
      "context": "    317:       return res.status(403).json({\n    318:         error: 'Insufficient permissions',\n>>> 319:         message: `Access denied. Required roles: ${roles.join(', ')}`\n    320:       });\n    321:     }"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 3,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Initialize secrets manager client\nconst secretsManager = new SecretsManagerClient({\n  region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    1: const { CognitoJwtVerifier } = require('aws-jwt-verify');\n    2: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n>>> 3: const crypto = require('crypto');\n    4: \n    5: // Initialize secrets manager client"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 7,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n});\n\n// Cache for Cognito config\nlet cognitoConfig = null;\nlet configLoadPromise = null;\n\n// Load Cognito configuration from Secrets Manager or environment\nasync function loadCognitoConfig() {\n  // If already loaded, return cached config\n  if (cognitoConfig) {\n    return cognitoConfig;\n  }\n\n  // If loading is in progress, wait for it\n  if (configLoadPromise) {\n    return configLoadPromise;\n  }\n\n  // Start loading config\n  configLoadPromise = (async () => {\n    try {\n      // First try to load from Secrets Manager if ARN is provided\n      if (process.env.COGNITO_SECRET_ARN) {\n        console.log('",
      "context": "    5: // Initialize secrets manager client\n    6: const secretsManager = new SecretsManagerClient({\n>>> 7:   region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || 'us-east-1'\n    8: });\n    9: "
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        const command = new GetSecretValueCommand({\n          SecretId: process.env.COGNITO_SECRET_ARN\n        });\n        const response = await secretsManager.send(command);\n        const secret = JSON.parse(response.SecretString);\n        \n        cognitoConfig = {\n          userPoolId: secret.userPoolId,\n          clientId: secret.clientId,\n          domain: secret.domain,\n          region: secret.region\n        };\n        \n        console.log('",
      "context": "    29:       // First try to load from Secrets Manager if ARN is provided\n    30:       if (process.env.COGNITO_SECRET_ARN) {\n>>> 31:         console.log('Loading Cognito config from Secrets Manager...');\n    32:         const command = new GetSecretValueCommand({\n    33:           SecretId: process.env.COGNITO_SECRET_ARN"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 45,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        return cognitoConfig;\n      }\n      \n      // Fall back to environment variables\n      if (process.env.COGNITO_USER_POOL_ID && process.env.COGNITO_CLIENT_ID) {\n        cognitoConfig = {\n          userPoolId: process.env.COGNITO_USER_POOL_ID,\n          clientId: process.env.COGNITO_CLIENT_ID,\n          region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    43:         };\n    44:         \n>>> 45:         console.log('Cognito config loaded from Secrets Manager');\n    46:         return cognitoConfig;\n    47:       }"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 122,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`, {\n      NODE_ENV: process.env.NODE_ENV,\n      clientIp,\n      userAgent: userAgent.substring(0, 100), // Truncate for logging\n      hasUserPoolId: !!process.env.COGNITO_USER_POOL_ID,\n      hasClientId: !!process.env.COGNITO_CLIENT_ID,\n      hasSecretArn: !!process.env.COGNITO_SECRET_ARN,\n      timestamp: new Date().toISOString()\n    });\n    \n    // SECURITY: Remove development bypass to prevent production exploitation\n    // Development bypass completely removed for security reasons\n    // All requests must use proper Cognito authentication\n    \n    // Note: Development bypass was removed due to security risk\n    // Use proper Cognito tokens even in development environment\n    \n    // Check for demo/development tokens first\n    const authHeader = req.headers['",
      "context": "    120:   try {\n    121:     console.log(`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n>>> 122:     console.log(`🌍 [${requestId}] Security Context:`, {\n    123:       NODE_ENV: process.env.NODE_ENV,\n    124:       clientIp,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 155,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        clientId: process.env.COGNITO_CLIENT_ID ? '",
      "context": "    153:       console.error(`❌ [${requestId}] Config status:`, {\n    154:         cognitoConfigLoaded: !!cognitoConfig,\n>>> 155:         userPoolId: process.env.COGNITO_USER_POOL_ID ? 'SET' : 'MISSING',\n    156:         clientId: process.env.COGNITO_CLIENT_ID ? 'SET' : 'MISSING',\n    157:         secretArn: process.env.COGNITO_SECRET_ARN ? 'SET' : 'MISSING'"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 162,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    160:       return res.status(503).json({\n    161:         error: 'Authentication service unavailable',\n>>> 162:         message: 'Unable to verify authentication tokens. Please check Cognito configuration.',\n    163:         details: process.env.NODE_ENV === 'development' ? {\n    164:           requestId,"
    },
    {
      "file": "webapp/lambda/middleware/auth-backup.js",
      "line": 242,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`, {\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === '",
      "context": "    240:   } catch (error) {\n    241:     const duration = Date.now() - startTime;\n>>> 242:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    243:       name: error.name,\n    244:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`",
      "context": "    167:   \n    168:   try {\n>>> 169:     console.log(`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n    170:     \n    171:     // Get authorization header"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 175,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎫 [${requestId}] Token present: ${!!token}`",
      "context": "    173:     const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    174:     \n>>> 175:     console.log(`🎫 [${requestId}] Token present: ${!!token}`);\n    176:     \n    177:     // If no token provided, check if we're in development mode"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] No token provided, using development bypass`",
      "context": "    178:     if (!token) {\n    179:       if (allowDevBypass) {\n>>> 180:         console.log(`🔧 [${requestId}] No token provided, using development bypass`);\n    181:         \n    182:         // Create development user"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 200,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development authentication successful`",
      "context": "    198:         };\n    199:         \n>>> 200:         console.log(`✅ [${requestId}] Development authentication successful`);\n    201:         return next();\n    202:       } else {"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 203,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No token found and development bypass disabled`",
      "context": "    201:         return next();\n    202:       } else {\n>>> 203:         console.error(`❌ [${requestId}] No token found and development bypass disabled`);\n    204:         return res.status(401).json({\n    205:           error: 'Authentication required',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Valid development token detected`",
      "context": "    218:       const devValidation = validateDevToken(token);\n    219:       if (devValidation.valid) {\n>>> 220:         console.log(`🔧 [${requestId}] Valid development token detected`);\n    221:         \n    222:         req.user = {"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development token authentication successful`",
      "context": "    237:         };\n    238:         \n>>> 239:         console.log(`✅ [${requestId}] Development token authentication successful`);\n    240:         return next();\n    241:       }"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 245,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Attempting Cognito JWT verification...`",
      "context": "    243: \n    244:     // Try Cognito JWT verification\n>>> 245:     console.log(`🔍 [${requestId}] Attempting Cognito JWT verification...`);\n    246:     const jwtVerifier = await getVerifier();\n    247: "
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Cognito not available, allowing development access`",
      "context": "    249:       // No Cognito verifier available\n    250:       if (allowDevBypass) {\n>>> 251:         console.log(`🔧 [${requestId}] Cognito not available, allowing development access`);\n    252:         \n    253:         // Create development user even with invalid token"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development fallback authentication successful`",
      "context": "    269:         };\n    270:         \n>>> 271:         console.log(`✅ [${requestId}] Development fallback authentication successful`);\n    272:         return next();\n    273:       } else {"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Cognito verifier not available and development bypass disabled`",
      "context": "    272:         return next();\n    273:       } else {\n>>> 274:         console.error(`❌ [${requestId}] Cognito verifier not available and development bypass disabled`);\n    275:         return res.status(503).json({\n    276:           error: 'Authentication service unavailable',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 289,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${requestId}] Cognito token verified successfully`",
      "context": "    287:     // Verify Cognito JWT token\n    288:     const payload = await jwtVerifier.verify(token);\n>>> 289:     console.log(`🎯 [${requestId}] Cognito token verified successfully`);\n    290:     \n    291:     // Add user information to request"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 319,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Cognito authentication successful in ${duration}ms`",
      "context": "    317: \n    318:     const duration = Date.now() - startTime;\n>>> 319:     console.log(`✅ [${requestId}] Cognito authentication successful in ${duration}ms`);\n    320:     \n    321:     next();"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication error after ${duration}ms:`",
      "context": "    323:   } catch (error) {\n    324:     const duration = Date.now() - startTime;\n>>> 325:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    326:       name: error.name,\n    327:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 333,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🕐 [${requestId}] Token expired`",
      "context": "    331:     // Handle specific JWT errors\n    332:     if (error.name === 'TokenExpiredError') {\n>>> 333:       console.error(`🕐 [${requestId}] Token expired`);\n    334:       return res.status(401).json({\n    335:         error: 'Token expired',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 342,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] Invalid token format`",
      "context": "    340:     \n    341:     if (error.name === 'JsonWebTokenError') {\n>>> 342:       console.error(`🚫 [${requestId}] Invalid token format`);\n    343:       return res.status(401).json({\n    344:         error: 'Invalid token',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 351,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] JWT verification failed:`",
      "context": "    349: \n    350:     if (error.name === 'JwtVerifyError') {\n>>> 351:       console.error(`🚫 [${requestId}] JWT verification failed:`, error.message);\n    352:       return res.status(401).json({\n    353:         error: 'Token verification failed',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 361,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 [${requestId}] Network error during token verification`",
      "context": "    359:     // Handle network/service errors\n    360:     if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n>>> 361:       console.error(`🌐 [${requestId}] Network error during token verification`);\n    362:       return res.status(503).json({\n    363:         error: 'Authentication service unavailable',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Authentication failed, using development fallback`",
      "context": "    369:     // Development fallback for authentication errors\n    370:     if (allowDevBypass) {\n>>> 371:       console.warn(`🔧 [${requestId}] Authentication failed, using development fallback`);\n    372:       \n    373:       req.user = {"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 391,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development error fallback successful`",
      "context": "    389:       };\n    390:       \n>>> 391:       console.log(`✅ [${requestId}] Development error fallback successful`);\n    392:       return next();\n    393:     }"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 395,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔥 [${requestId}] Final authentication failure:`",
      "context": "    393:     }\n    394: \n>>> 395:     console.error(`🔥 [${requestId}] Final authentication failure:`, error);\n    396:     return res.status(401).json({\n    397:       error: 'Authentication failed',"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 430,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Access denied. Required roles: ${roles.join(', ')}`",
      "context": "    428:       return res.status(403).json({\n    429:         error: 'Insufficient permissions',\n>>> 430:         message: `Access denied. Required roles: ${roles.join(', ')}`\n    431:       });\n    432:     }"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 9,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Initialize secrets manager client\nconst secretsManager = new SecretsManagerClient({\n  region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    7: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    8: const crypto = require('crypto');\n>>> 9: const jwt = require('jsonwebtoken');\n    10: \n    11: // Initialize secrets manager client"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 13,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n});\n\n// Cache for Cognito config\nlet cognitoConfig = null;\nlet configLoadPromise = null;\nlet verifier = null;\nlet verifierPromise = null;\n\n// Development authentication settings\nconst isDevelopment = process.env.NODE_ENV === '",
      "context": "    11: // Initialize secrets manager client\n    12: const secretsManager = new SecretsManagerClient({\n>>> 13:   region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || 'us-east-1'\n    14: });\n    15: "
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || !process.env.NODE_ENV;\nconst allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === '",
      "context": "    21: \n    22: // Development authentication settings\n>>> 23: const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n    24: const allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === 'true' || isDevelopment;\n    25: "
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 24,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || isDevelopment;\n\n/**\n * Load Cognito configuration from Secrets Manager or environment\n */\nasync function loadCognitoConfig() {\n  if (cognitoConfig) {\n    return cognitoConfig;\n  }\n\n  if (configLoadPromise) {\n    return configLoadPromise;\n  }\n\n  configLoadPromise = (async () => {\n    try {\n      // First try to load from Secrets Manager if ARN is provided\n      if (process.env.COGNITO_SECRET_ARN) {\n        console.log('",
      "context": "    22: // Development authentication settings\n    23: const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n>>> 24: const allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === 'true' || isDevelopment;\n    25: \n    26: /**"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 42,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        const command = new GetSecretValueCommand({\n          SecretId: process.env.COGNITO_SECRET_ARN\n        });\n        const response = await secretsManager.send(command);\n        const secret = JSON.parse(response.SecretString);\n        \n        cognitoConfig = {\n          userPoolId: secret.userPoolId,\n          clientId: secret.clientId,\n          domain: secret.domain,\n          region: secret.region\n        };\n        \n        console.log('",
      "context": "    40:       // First try to load from Secrets Manager if ARN is provided\n    41:       if (process.env.COGNITO_SECRET_ARN) {\n>>> 42:         console.log('📡 Loading Cognito config from Secrets Manager...');\n    43:         const command = new GetSecretValueCommand({\n    44:           SecretId: process.env.COGNITO_SECRET_ARN"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 56,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        return cognitoConfig;\n      }\n      \n      // Fall back to environment variables\n      if (process.env.COGNITO_USER_POOL_ID && process.env.COGNITO_CLIENT_ID) {\n        cognitoConfig = {\n          userPoolId: process.env.COGNITO_USER_POOL_ID,\n          clientId: process.env.COGNITO_CLIENT_ID,\n          region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    54:         };\n    55:         \n>>> 56:         console.log('✅ Cognito config loaded from Secrets Manager');\n    57:         return cognitoConfig;\n    58:       }"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 139,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n  };\n\n  const secret = process.env.DEV_JWT_SECRET || '",
      "context": "    137:     exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours\n    138:     aud: 'development-client',\n>>> 139:     iss: 'https://cognito-idp.us-east-1.amazonaws.com/development'\n    140:   };\n    141: "
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 142,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  return jwt.sign(payload, secret);\n}\n\n/**\n * Validate development token\n */\nfunction validateDevToken(token) {\n  try {\n    const secret = process.env.DEV_JWT_SECRET || '",
      "context": "    140:   };\n    141: \n>>> 142:   const secret = process.env.DEV_JWT_SECRET || 'development-secret-key';\n    143:   return jwt.sign(payload, secret);\n    144: }"
    },
    {
      "file": "webapp/lambda/middleware/auth.js",
      "line": 325,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`, {\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === '",
      "context": "    323:   } catch (error) {\n    324:     const duration = Date.now() - startTime;\n>>> 325:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    326:       name: error.name,\n    327:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`",
      "context": "    167:   \n    168:   try {\n>>> 169:     console.log(`🔐 [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n    170:     \n    171:     // Get authorization header"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 175,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎫 [${requestId}] Token present: ${!!token}`",
      "context": "    173:     const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    174:     \n>>> 175:     console.log(`🎫 [${requestId}] Token present: ${!!token}`);\n    176:     \n    177:     // If no token provided, check if we're in development mode"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] No token provided, using development bypass`",
      "context": "    178:     if (!token) {\n    179:       if (allowDevBypass) {\n>>> 180:         console.log(`🔧 [${requestId}] No token provided, using development bypass`);\n    181:         \n    182:         // Create development user"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 200,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development authentication successful`",
      "context": "    198:         };\n    199:         \n>>> 200:         console.log(`✅ [${requestId}] Development authentication successful`);\n    201:         return next();\n    202:       } else {"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 203,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No token found and development bypass disabled`",
      "context": "    201:         return next();\n    202:       } else {\n>>> 203:         console.error(`❌ [${requestId}] No token found and development bypass disabled`);\n    204:         return res.status(401).json({\n    205:           error: 'Authentication required',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Valid development token detected`",
      "context": "    218:       const devValidation = validateDevToken(token);\n    219:       if (devValidation.valid) {\n>>> 220:         console.log(`🔧 [${requestId}] Valid development token detected`);\n    221:         \n    222:         req.user = {"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development token authentication successful`",
      "context": "    237:         };\n    238:         \n>>> 239:         console.log(`✅ [${requestId}] Development token authentication successful`);\n    240:         return next();\n    241:       }"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 245,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Attempting Cognito JWT verification...`",
      "context": "    243: \n    244:     // Try Cognito JWT verification\n>>> 245:     console.log(`🔍 [${requestId}] Attempting Cognito JWT verification...`);\n    246:     const jwtVerifier = await getVerifier();\n    247: "
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Cognito not available, allowing development access`",
      "context": "    249:       // No Cognito verifier available\n    250:       if (allowDevBypass) {\n>>> 251:         console.log(`🔧 [${requestId}] Cognito not available, allowing development access`);\n    252:         \n    253:         // Create development user even with invalid token"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development fallback authentication successful`",
      "context": "    269:         };\n    270:         \n>>> 271:         console.log(`✅ [${requestId}] Development fallback authentication successful`);\n    272:         return next();\n    273:       } else {"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Cognito verifier not available and development bypass disabled`",
      "context": "    272:         return next();\n    273:       } else {\n>>> 274:         console.error(`❌ [${requestId}] Cognito verifier not available and development bypass disabled`);\n    275:         return res.status(503).json({\n    276:           error: 'Authentication service unavailable',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 289,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${requestId}] Cognito token verified successfully`",
      "context": "    287:     // Verify Cognito JWT token\n    288:     const payload = await jwtVerifier.verify(token);\n>>> 289:     console.log(`🎯 [${requestId}] Cognito token verified successfully`);\n    290:     \n    291:     // Add user information to request"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 319,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Cognito authentication successful in ${duration}ms`",
      "context": "    317: \n    318:     const duration = Date.now() - startTime;\n>>> 319:     console.log(`✅ [${requestId}] Cognito authentication successful in ${duration}ms`);\n    320:     \n    321:     next();"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication error after ${duration}ms:`",
      "context": "    323:   } catch (error) {\n    324:     const duration = Date.now() - startTime;\n>>> 325:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    326:       name: error.name,\n    327:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 333,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🕐 [${requestId}] Token expired`",
      "context": "    331:     // Handle specific JWT errors\n    332:     if (error.name === 'TokenExpiredError') {\n>>> 333:       console.error(`🕐 [${requestId}] Token expired`);\n    334:       return res.status(401).json({\n    335:         error: 'Token expired',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 342,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] Invalid token format`",
      "context": "    340:     \n    341:     if (error.name === 'JsonWebTokenError') {\n>>> 342:       console.error(`🚫 [${requestId}] Invalid token format`);\n    343:       return res.status(401).json({\n    344:         error: 'Invalid token',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 351,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 [${requestId}] JWT verification failed:`",
      "context": "    349: \n    350:     if (error.name === 'JwtVerifyError') {\n>>> 351:       console.error(`🚫 [${requestId}] JWT verification failed:`, error.message);\n    352:       return res.status(401).json({\n    353:         error: 'Token verification failed',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 361,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 [${requestId}] Network error during token verification`",
      "context": "    359:     // Handle network/service errors\n    360:     if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n>>> 361:       console.error(`🌐 [${requestId}] Network error during token verification`);\n    362:       return res.status(503).json({\n    363:         error: 'Authentication service unavailable',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Authentication failed, using development fallback`",
      "context": "    369:     // Development fallback for authentication errors\n    370:     if (allowDevBypass) {\n>>> 371:       console.warn(`🔧 [${requestId}] Authentication failed, using development fallback`);\n    372:       \n    373:       req.user = {"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 391,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Development error fallback successful`",
      "context": "    389:       };\n    390:       \n>>> 391:       console.log(`✅ [${requestId}] Development error fallback successful`);\n    392:       return next();\n    393:     }"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 395,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔥 [${requestId}] Final authentication failure:`",
      "context": "    393:     }\n    394: \n>>> 395:     console.error(`🔥 [${requestId}] Final authentication failure:`, error);\n    396:     return res.status(401).json({\n    397:       error: 'Authentication failed',"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 430,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Access denied. Required roles: ${roles.join(', ')}`",
      "context": "    428:       return res.status(403).json({\n    429:         error: 'Insufficient permissions',\n>>> 430:         message: `Access denied. Required roles: ${roles.join(', ')}`\n    431:       });\n    432:     }"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 9,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Initialize secrets manager client\nconst secretsManager = new SecretsManagerClient({\n  region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    7: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    8: const crypto = require('crypto');\n>>> 9: const jwt = require('jsonwebtoken');\n    10: \n    11: // Initialize secrets manager client"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 13,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n});\n\n// Cache for Cognito config\nlet cognitoConfig = null;\nlet configLoadPromise = null;\nlet verifier = null;\nlet verifierPromise = null;\n\n// Development authentication settings\nconst isDevelopment = process.env.NODE_ENV === '",
      "context": "    11: // Initialize secrets manager client\n    12: const secretsManager = new SecretsManagerClient({\n>>> 13:   region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || 'us-east-1'\n    14: });\n    15: "
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || !process.env.NODE_ENV;\nconst allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === '",
      "context": "    21: \n    22: // Development authentication settings\n>>> 23: const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n    24: const allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === 'true' || isDevelopment;\n    25: "
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 24,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || isDevelopment;\n\n/**\n * Load Cognito configuration from Secrets Manager or environment\n */\nasync function loadCognitoConfig() {\n  if (cognitoConfig) {\n    return cognitoConfig;\n  }\n\n  if (configLoadPromise) {\n    return configLoadPromise;\n  }\n\n  configLoadPromise = (async () => {\n    try {\n      // First try to load from Secrets Manager if ARN is provided\n      if (process.env.COGNITO_SECRET_ARN) {\n        console.log('",
      "context": "    22: // Development authentication settings\n    23: const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n>>> 24: const allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === 'true' || isDevelopment;\n    25: \n    26: /**"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 42,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        const command = new GetSecretValueCommand({\n          SecretId: process.env.COGNITO_SECRET_ARN\n        });\n        const response = await secretsManager.send(command);\n        const secret = JSON.parse(response.SecretString);\n        \n        cognitoConfig = {\n          userPoolId: secret.userPoolId,\n          clientId: secret.clientId,\n          domain: secret.domain,\n          region: secret.region\n        };\n        \n        console.log('",
      "context": "    40:       // First try to load from Secrets Manager if ARN is provided\n    41:       if (process.env.COGNITO_SECRET_ARN) {\n>>> 42:         console.log('📡 Loading Cognito config from Secrets Manager...');\n    43:         const command = new GetSecretValueCommand({\n    44:           SecretId: process.env.COGNITO_SECRET_ARN"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 56,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        return cognitoConfig;\n      }\n      \n      // Fall back to environment variables\n      if (process.env.COGNITO_USER_POOL_ID && process.env.COGNITO_CLIENT_ID) {\n        cognitoConfig = {\n          userPoolId: process.env.COGNITO_USER_POOL_ID,\n          clientId: process.env.COGNITO_CLIENT_ID,\n          region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || '",
      "context": "    54:         };\n    55:         \n>>> 56:         console.log('✅ Cognito config loaded from Secrets Manager');\n    57:         return cognitoConfig;\n    58:       }"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 139,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n  };\n\n  const secret = process.env.DEV_JWT_SECRET || '",
      "context": "    137:     exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours\n    138:     aud: 'development-client',\n>>> 139:     iss: 'https://cognito-idp.us-east-1.amazonaws.com/development'\n    140:   };\n    141: "
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 142,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  return jwt.sign(payload, secret);\n}\n\n/**\n * Validate development token\n */\nfunction validateDevToken(token) {\n  try {\n    const secret = process.env.DEV_JWT_SECRET || '",
      "context": "    140:   };\n    141: \n>>> 142:   const secret = process.env.DEV_JWT_SECRET || 'development-secret-key';\n    143:   return jwt.sign(payload, secret);\n    144: }"
    },
    {
      "file": "webapp/lambda/middleware/authEnhanced.js",
      "line": 325,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`, {\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === '",
      "context": "    323:   } catch (error) {\n    324:     const duration = Date.now() - startTime;\n>>> 325:     console.error(`❌ [${requestId}] Authentication error after ${duration}ms:`, {\n    326:       name: error.name,\n    327:       message: error.message,"
    },
    {
      "file": "webapp/lambda/middleware/compliance.js",
      "line": 54,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.method}_${req.path.replace(/\\/api\\//, '').toUpperCase()}`",
      "context": "    52:       const auditData = {\n    53:         userId: req.user?.id || req.headers['x-user-id'] || 'anonymous',\n>>> 54:         action: `${req.method}_${req.path.replace(/\\/api\\//, '').toUpperCase()}`,\n    55:         resource: this.getResourceFromPath(req.path),\n    56:         details: {"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userAgent}:${acceptLanguage}:${acceptEncoding}:${ip}`",
      "context": "    70:         const ip = req.ip || req.connection.remoteAddress;\n    71:         \n>>> 72:         const fingerprintData = `${userAgent}:${acceptLanguage}:${acceptEncoding}:${ip}`;\n    73:         return crypto.createHash('sha256').update(fingerprintData).digest('hex');\n    74:     }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 114,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Device fingerprint mismatch for user ${session.userId}`",
      "context": "    112:         const currentFingerprint = this.generateDeviceFingerprint(req);\n    113:         if (session.deviceFingerprint !== currentFingerprint) {\n>>> 114:             console.warn(`🚨 Device fingerprint mismatch for user ${session.userId}`);\n    115:             return { valid: false, reason: 'device_mismatch' };\n    116:         }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 143,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 JWT device mismatch for user ${decoded.userId}`",
      "context": "    141:                 const currentFingerprint = this.generateDeviceFingerprint(req);\n    142:                 if (decoded.deviceId !== currentFingerprint) {\n>>> 143:                     console.warn(`🚨 JWT device mismatch for user ${decoded.userId}`);\n    144:                     return { valid: false, reason: 'device_mismatch' };\n    145:                 }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 JWT validation failed: ${error.message}`",
      "context": "    148:             return { valid: true, decoded };\n    149:         } catch (error) {\n>>> 150:             console.warn(`🚨 JWT validation failed: ${error.message}`);\n    151:             return { valid: false, reason: 'invalid_token' };\n    152:         }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 177,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔒 Account locked for ${identifier} due to ${attempts.count} failed attempts`",
      "context": "    175:         if (attempts.count >= this.maxFailedAttempts) {\n    176:             attempts.lockedUntil = currentTime + this.lockoutDuration;\n>>> 177:             console.warn(`🔒 Account locked for ${identifier} due to ${attempts.count} failed attempts`);\n    178:         }\n    179: "
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 223,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🛡️ Device trusted for user ${userId}`",
      "context": "    221:             expiresAt: Date.now() + this.deviceTrustDuration\n    222:         });\n>>> 223:         console.log(`🛡️ Device trusted for user ${userId}`);\n    224:     }\n    225: "
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 424,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Untrusted device access attempt for user ${authResult.userId}`",
      "context": "    422:                     if (!deviceTrusted && authResult.authMethod !== 'api_key') {\n    423:                         // Log security event\n>>> 424:                         console.warn(`🚨 Untrusted device access attempt for user ${authResult.userId}`);\n    425:                         \n    426:                         // You might want to require additional verification here"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 467,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Insufficient permissions for user ${req.user.userId}: required ${allowedRoles}, has ${userRole}`",
      "context": "    465:             const userRole = req.user.role || 'user';\n    466:             if (!allowedRoles.includes(userRole)) {\n>>> 467:                 console.warn(`🚨 Insufficient permissions for user ${req.user.userId}: required ${allowedRoles}, has ${userRole}`);\n    468:                 return res.status(403).json({\n    469:                     success: false,"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 496,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Missing permission for user ${req.user.userId}: required ${permission}`",
      "context": "    494:             const userPermissions = req.user.permissions || [];\n    495:             if (!userPermissions.includes(permission)) {\n>>> 496:                 console.warn(`🚨 Missing permission for user ${req.user.userId}: required ${permission}`);\n    497:                 return res.status(403).json({\n    498:                     success: false,"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 626,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${clientIP}:${req.path}`",
      "context": "    624:      */\n    625:     isRateLimited(req, clientIP) {\n>>> 626:         const key = `${clientIP}:${req.path}`;\n    627:         const now = Date.now();\n    628:         const windowMs = this.config.rateLimit.windowMs;"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 683,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`suspicious:${clientIP}`",
      "context": "    681:      */\n    682:     detectSuspiciousActivity(req, clientIP) {\n>>> 683:         const key = `suspicious:${clientIP}`;\n    684:         const now = Date.now();\n    685:         const windowMs = 60 * 60 * 1000; // 1 hour"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 886,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`suspicious:${ip}`",
      "context": "    884: \n    885:     flagSuspiciousActivity(ip, type) {\n>>> 886:         const key = `suspicious:${ip}`;\n    887:         const suspicious = this.suspiciousActivityStore.get(key);\n    888:         if (suspicious) {"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 991,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 Auth cleanup: ${cleanedSessions} sessions, ${cleanedAttempts} attempts, ${cleanedDevices} devices, ${cleanedRateLimit} rate limits, ${cleanedSuspicious} suspicious`",
      "context": "    989: \n    990:         if (cleanedSessions + cleanedAttempts + cleanedDevices + cleanedRateLimit + cleanedSuspicious > 0) {\n>>> 991:             console.log(`🧹 Auth cleanup: ${cleanedSessions} sessions, ${cleanedAttempts} attempts, ${cleanedDevices} devices, ${cleanedRateLimit} rate limits, ${cleanedSuspicious} suspicious`);\n    992:         }\n    993:     }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 1019,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔒 Revoked ${revokedCount} sessions for user ${userId}`",
      "context": "    1017:             }\n    1018:         }\n>>> 1019:         console.log(`🔒 Revoked ${revokedCount} sessions for user ${userId}`);\n    1020:         return revokedCount;\n    1021:     }"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 10,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass EnhancedAuthMiddleware {\n    constructor() {\n        this.authService = new EnhancedAuthService();\n        this.jwtSecret = process.env.JWT_SECRET || '",
      "context": "    8: const crypto = require('crypto');\n    9: const { EnhancedAuthService } = require('../services/EnhancedAuthService');\n>>> 10: const logger = require('../utils/logger');\n    11: \n    12: class EnhancedAuthMiddleware {"
    },
    {
      "file": "webapp/lambda/middleware/enhancedAuth.js",
      "line": 46,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "') || [],\n                trustedProxies: process.env.TRUSTED_PROXIES?.split('",
      "context": "    44:                 lockoutDuration: 30 * 60 * 1000, // 30 minutes\n    45:                 suspiciousThreshold: 10,\n>>> 46:                 ipWhitelist: process.env.IP_WHITELIST?.split(',') || [],\n    47:                 trustedProxies: process.env.TRUSTED_PROXIES?.split(',') || []\n    48:             },"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 41,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[SECURITY EVENT] ${type}:`",
      "context": "    39:  */\n    40: function logSecurityEvent(type, details) {\n>>> 41:     console.warn(`[SECURITY EVENT] ${type}:`, details);\n    42:     // In production, this would integrate with security monitoring systems\n    43:     // like AWS CloudWatch, Splunk, or dedicated SIEM solutions"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 418,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${path}.${key}`",
      "context": "    416:     const checkObject = (obj, path = '') => {\n    417:         for (const [key, value] of Object.entries(obj)) {\n>>> 418:             const currentPath = path ? `${path}.${key}` : key;\n    419:             \n    420:             if (typeof value === 'string') {"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 428,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${currentPath}[${i}]`",
      "context": "    426:                 for (let i = 0; i < value.length; i++) {\n    427:                     if (typeof value[i] === 'string') {\n>>> 428:                         const result = checkForInjection(value[i], `${currentPath}[${i}]`);\n    429:                         if (!result.safe) {\n    430:                             return result;"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 428,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${currentPath}[${i}]`",
      "context": "    426:                 for (let i = 0; i < value.length; i++) {\n    427:                     if (typeof value[i] === 'string') {\n>>> 428:                         const result = checkForInjection(value[i], `${currentPath}[${i}]`);\n    429:                         if (!result.safe) {\n    430:                             return result;"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 478,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Potentially malicious ${suspiciousInput.type.toUpperCase()} injection detected in ${suspiciousInput.field}`",
      "context": "    476:                     success: false,\n    477:                     error: 'Security violation detected',\n>>> 478:                     message: `Potentially malicious ${suspiciousInput.type.toUpperCase()} injection detected in ${suspiciousInput.field}`,\n    479:                     code: 'INJECTION_DETECTED',\n    480:                     severity: suspiciousInput.severity,"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 616,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`File ${file.name} exceeds maximum size of ${maxFileSize} bytes`",
      "context": "    614:                     success: false,\n    615:                     error: 'File too large',\n>>> 616:                     message: `File ${file.name} exceeds maximum size of ${maxFileSize} bytes`,\n    617:                     field: fieldName\n    618:                 });"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 634,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`File type ${file.mimetype} not allowed`",
      "context": "    632:                     success: false,\n    633:                     error: 'Invalid file type',\n>>> 634:                     message: `File type ${file.mimetype} not allowed`,\n    635:                     allowedTypes: allowedMimeTypes,\n    636:                     field: fieldName"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 654,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`File extension ${fileExtension} not allowed`",
      "context": "    652:                     success: false,\n    653:                     error: 'Invalid file extension',\n>>> 654:                     message: `File extension ${fileExtension} not allowed`,\n    655:                     allowedExtensions,\n    656:                     field: fieldName"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 697,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Request size ${sizeInBytes} bytes exceeds limit of ${limitInBytes} bytes`",
      "context": "    695:                     success: false,\n    696:                     error: 'Request too large',\n>>> 697:                     message: `Request size ${sizeInBytes} bytes exceeds limit of ${limitInBytes} bytes`,\n    698:                     maxSize: limit,\n    699:                     code: 'PAYLOAD_TOO_LARGE'"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 273,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            // Skip rate limiting in development mode\n            return process.env.NODE_ENV === '",
      "context": "    271:             error: 'Too many authentication attempts, please try again later',\n    272:             retryAfter: 15 * 60, // 15 minutes in seconds\n>>> 273:             securityEvent: 'EXCESSIVE_AUTH_ATTEMPTS'\n    274:         },\n    275:         standardHeaders: true,"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 303,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    301:         max: 100, // 100 requests per minute\n    302:         message: {\n>>> 303:             error: 'Too many API requests, please slow down',\n    304:             retryAfter: 60\n    305:         },"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 303,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    301:         max: 100, // 100 requests per minute\n    302:         message: {\n>>> 303:             error: 'Too many API requests, please slow down',\n    304:             retryAfter: 60\n    305:         },"
    },
    {
      "file": "webapp/lambda/middleware/enhancedValidation.js",
      "line": 451,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query, name: 'query' },\n        { data: req.body, name: 'body' },\n        { data: req.params, name: 'params' },\n        { data: req.headers, name: 'headers' }\n    ].filter(source => source.data && typeof source.data === 'object');\n    \n    for (const source of sources) {\n        const suspiciousInput = checkObject(source.data, source.name);\n        if (suspiciousInput) {\n            // Log detailed security event\n            logSecurityEvent('INJECTION_ATTEMPT_DETECTED', {\n                type: suspiciousInput.type,\n                severity: suspiciousInput.severity,\n                field: suspiciousInput.field,\n                source: source.name,\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                sample: suspiciousInput.sample,\n                matches: suspiciousInput.matches,\n                timestamp: new Date().toISOString()\n            });\n            \n            // Block the request with detailed error for high severity\n            if (suspiciousInput.severity === 'CRITICAL' || suspiciousInput.severity === 'HIGH') {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Security violation detected',\n                    message: `",
      "context": "    449:     // Check all input sources\n    450:     const sources = [\n>>> 451:         { data: req.query, name: 'query' },\n    452:         { data: req.body, name: 'body' },\n    453:         { data: req.params, name: 'params' },"
    },
    {
      "file": "webapp/lambda/middleware/errorHandler.js",
      "line": 91,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Error handler sending response with CORS headers: ${status} ${message}`",
      "context": "    89:   res.setHeader('X-Correlation-ID', requestId);\n    90: \n>>> 91:   console.log(`🚨 Error handler sending response with CORS headers: ${status} ${message}`);\n    92:   res.status(status).json(response);\n    93: };"
    },
    {
      "file": "webapp/lambda/middleware/errorHandler.js",
      "line": 58,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  } else if (err.message) {\n    // If we have a custom error message, use it\n    if (err.status) status = err.status;\n    message = err.message;\n  }\n\n  const response = {\n    error: {\n      status,\n      message,\n      timestamp: new Date().toISOString(),\n      path: req.url,\n      request_id: requestId\n    }\n  };\n\n  // Add details in development mode\n  if (process.env.NODE_ENV === '",
      "context": "    56:     status = 500;\n    57:     message = 'Database configuration error';\n>>> 58:     details = 'Required database table not found';\n    59:   } else if (err.message) {\n    60:     // If we have a custom error message, use it"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Currency must be one of: ${this.allowedCurrencies.join(', ')}`",
      "context": "    161:                 .optional()\n    162:                 .isIn(this.allowedCurrencies)\n>>> 163:                 .withMessage(`Currency must be one of: ${this.allowedCurrencies.join(', ')}`),\n    164:             body('riskTolerance')\n    165:                 .optional()"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 179,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Timeframe must be one of: ${this.allowedTimeframes.join(', ')}`",
      "context": "    177:                 .optional()\n    178:                 .isIn(this.allowedTimeframes)\n>>> 179:                 .withMessage(`Timeframe must be one of: ${this.allowedTimeframes.join(', ')}`),\n    180:             query('indicators')\n    181:                 .optional()"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Suspicious request pattern detected from ${req.ip}: ${pattern}`",
      "context": "    272:             for (const pattern of suspiciousPatterns) {\n    273:                 if (pattern.test(requestData)) {\n>>> 274:                     console.warn(`🚨 Suspicious request pattern detected from ${req.ip}: ${pattern}`);\n    275:                     return res.status(400).json({\n    276:                         success: false,"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 301,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Validation errors for ${req.method} ${req.path}:`",
      "context": "    299:                 }));\n    300: \n>>> 301:                 console.warn(`🚨 Validation errors for ${req.method} ${req.path}:`, validationErrors);\n    302: \n    303:                 return res.status(400).json({"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 331,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Potential SQL injection attempt at ${path}: ${obj.substring(0, 100)}`",
      "context": "    329:                     for (const pattern of sqlPatterns) {\n    330:                         if (pattern.test(obj)) {\n>>> 331:                             console.warn(`🚨 Potential SQL injection attempt at ${path}: ${obj.substring(0, 100)}`);\n    332:                             return true;\n    333:                         }"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 337,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${path}[${i}]`",
      "context": "    335:                 } else if (Array.isArray(obj)) {\n    336:                     for (let i = 0; i < obj.length; i++) {\n>>> 337:                         if (checkForSql(obj[i], `${path}[${i}]`)) return true;\n    338:                     }\n    339:                 } else if (obj && typeof obj === 'object') {"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 341,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${path}.${key}`",
      "context": "    339:                 } else if (obj && typeof obj === 'object') {\n    340:                     for (const [key, value] of Object.entries(obj)) {\n>>> 341:                         if (checkForSql(value, `${path}.${key}`)) return true;\n    342:                     }\n    343:                 }"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 274,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${req.ip}",
      "context": "    272:             for (const pattern of suspiciousPatterns) {\n    273:                 if (pattern.test(requestData)) {\n>>> 274:                     console.warn(`🚨 Suspicious request pattern detected from ${req.ip}: ${pattern}`);\n    275:                     return res.status(400).json({\n    276:                         success: false,"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 238,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body) {\n                req.body = sanitizeObject(req.body);\n            }\n            if (req.query) {\n                req.query = sanitizeObject(req.query);\n            }\n            if (req.params) {\n                req.params = sanitizeObject(req.params);\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Rate limiting validation\n     */\n    validateRateLimit() {\n        return (req, res, next) => {\n            // Check for suspicious request patterns\n            const suspiciousPatterns = [\n                /union\\s+select/i,\n                /drop\\s+table/i,\n                /'.*or.*'.*='.*'/i,\n                /script\\s*>/i,\n                /javascript:/i\n            ];\n\n            const requestData = JSON.stringify({\n                body: req.body,\n                query: req.query,\n                params: req.params\n            });\n\n            for (const pattern of suspiciousPatterns) {\n                if (pattern.test(requestData)) {\n                    console.warn(`",
      "context": "    236: \n    237:             // Sanitize request body, query, and params\n>>> 238:             if (req.body) {\n    239:                 req.body = sanitizeObject(req.body);\n    240:             }"
    },
    {
      "file": "webapp/lambda/middleware/inputValidation.js",
      "line": 347,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body, 'body') || \n                checkForSql(req.query, 'query') || \n                checkForSql(req.params, 'params')) {\n                \n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid request format',\n                    code: 'SECURITY_VIOLATION'",
      "context": "    345:             };\n    346: \n>>> 347:             if (checkForSql(req.body, 'body') || \n    348:                 checkForSql(req.query, 'query') || \n    349:                 checkForSql(req.params, 'params')) {"
    },
    {
      "file": "webapp/lambda/middleware/performanceMonitoring.js",
      "line": 16,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`req_${Math.random().toString(36).substr(2, 9)}`",
      "context": "    14:     return (req, res, next) => {\n    15:       const startTime = Date.now();\n>>> 16:       const requestId = `req_${Math.random().toString(36).substr(2, 9)}`;\n    17:       \n    18:       // Store request start time"
    },
    {
      "file": "webapp/lambda/middleware/performanceMonitoring.js",
      "line": 58,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`api_response_time_${endpoint}`",
      "context": "    56:     // Record response time metric\n    57:     this.performanceService.recordMetric(\n>>> 58:       `api_response_time_${endpoint}`,\n    59:       responseTime,\n    60:       'api',"
    },
    {
      "file": "webapp/lambda/middleware/performanceMonitoring.js",
      "line": 86,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`api_error_rate_${endpoint}`",
      "context": "    84:     if (isError) {\n    85:       this.performanceService.recordMetric(\n>>> 86:         `api_error_rate_${endpoint}`,\n    87:         1,\n    88:         'api',"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 55,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${ip}:${this.hashString(userAgent)}:${userId}`",
      "context": "    53:         \n    54:         // Create composite identifier\n>>> 55:         return `${ip}:${this.hashString(userAgent)}:${userId}`;\n    56:     }\n    57: "
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 83,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Blacklisting IP ${ip} for ${reason}`",
      "context": "    81:      */\n    82:     blacklistIP(ip, reason = 'abuse_detected', duration = 24 * 60 * 60 * 1000) {\n>>> 83:         console.warn(`🚨 Blacklisting IP ${ip} for ${reason}`);\n    84:         this.blacklistedIPs.add(ip);\n    85:         "
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 89,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Removed IP ${ip} from blacklist`",
      "context": "    87:         setTimeout(() => {\n    88:             this.blacklistedIPs.delete(ip);\n>>> 89:             console.log(`✅ Removed IP ${ip} from blacklist`);\n    90:         }, duration);\n    91:     }"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 124,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Suspicious activity from ${ip}: ${reason} (count: ${suspicious.count})`",
      "context": "    122:         }\n    123: \n>>> 124:         console.warn(`⚠️ Suspicious activity from ${ip}: ${reason} (count: ${suspicious.count})`);\n    125:     }\n    126: "
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 134,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 Blocked request from blacklisted IP: ${req.ip}`",
      "context": "    132:             // Check blacklist first\n    133:             if (this.isBlacklisted(req)) {\n>>> 134:                 console.warn(`🚫 Blocked request from blacklisted IP: ${req.ip}`);\n    135:                 return res.status(429).json({\n    136:                     success: false,"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${category}:${clientId}`",
      "context": "    144:             const limit = this.limits[category];\n    145:             const currentTime = Date.now();\n>>> 146:             const key = `${category}:${clientId}`;\n    147: \n    148:             // Get or create request record"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 162,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 Rate limit block active for ${clientId} in ${category} (${remainingTime}s remaining)`",
      "context": "    160:             if (record.blockedUntil > currentTime) {\n    161:                 const remainingTime = Math.ceil((record.blockedUntil - currentTime) / 1000);\n>>> 162:                 console.warn(`🚫 Rate limit block active for ${clientId} in ${category} (${remainingTime}s remaining)`);\n    163:                 \n    164:                 this.trackSuspiciousActivity(req, 'rate_limit_violation');"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 189,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Rate limit exceeded for ${clientId} in ${category}. Blocked for ${blockDurationSeconds}s`",
      "context": "    187:                 const blockDurationSeconds = Math.ceil(limit.blockDuration / 1000);\n    188:                 \n>>> 189:                 console.warn(`🚨 Rate limit exceeded for ${clientId} in ${category}. Blocked for ${blockDurationSeconds}s`);\n    190:                 \n    191:                 this.trackSuspiciousActivity(req, 'rate_limit_exceeded');"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 213,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Client ${clientId} approaching rate limit in ${category}: ${remaining} requests remaining`",
      "context": "    211:             // Warning when approaching limit\n    212:             if (remaining <= 5) {\n>>> 213:                 console.warn(`⚠️ Client ${clientId} approaching rate limit in ${category}: ${remaining} requests remaining`);\n    214:             }\n    215: "
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 249,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`abuse:${clientId}`",
      "context": "    247:             const clientId = this.getClientId(req);\n    248:             const currentTime = Date.now();\n>>> 249:             const abuseKey = `abuse:${clientId}`;\n    250: \n    251:             // Track request patterns"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 358,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 Cleaned up ${cleanedCount} old rate limiting records`",
      "context": "    356: \n    357:         if (cleanedCount > 0) {\n>>> 358:             console.log(`🧹 Cleaned up ${cleanedCount} old rate limiting records`);\n    359:         }\n    360:     }"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 393,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Manually removed IP ${ip} from blacklist`",
      "context": "    391:         this.blacklistedIPs.delete(ip);\n    392:         this.suspiciousIPs.delete(ip);\n>>> 393:         console.log(`✅ Manually removed IP ${ip} from blacklist`);\n    394:     }\n    395: "
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${category}:${clientId}`",
      "context": "    144:             const limit = this.limits[category];\n    145:             const currentTime = Date.now();\n>>> 146:             const key = `${category}:${clientId}`;\n    147: \n    148:             // Get or create request record"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 408,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Cleared rate limits for client ${clientId} in ${category || 'all categories'}`",
      "context": "    406:             }\n    407:         }\n>>> 408:         console.log(`✅ Cleared rate limits for client ${clientId} in ${category || 'all categories'}`);\n    409:     }\n    410: }"
    },
    {
      "file": "webapp/lambda/middleware/rateLimiting.js",
      "line": 124,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${ip}",
      "context": "    122:         }\n    123: \n>>> 124:         console.warn(`⚠️ Suspicious activity from ${ip}: ${reason} (count: ${suspicious.count})`);\n    125:     }\n    126: "
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 75,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 SQL injection attempt detected in field '${fieldName}': ${input.substring(0, 100)}`",
      "context": "    73:     for (const pattern of this.dangerousPatterns) {\n    74:       if (pattern.test(input)) {\n>>> 75:         console.warn(`🚨 SQL injection attempt detected in field '${fieldName}': ${input.substring(0, 100)}`);\n    76:         return {\n    77:           valid: false,"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 104,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Unauthorized field access attempt: ${fieldName}`",
      "context": "    102:     // Must be in whitelist\n    103:     if (!allowedFields.has(fieldName)) {\n>>> 104:       console.warn(`🚨 Unauthorized field access attempt: ${fieldName}`);\n    105:       return false;\n    106:     }"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Invalid field name pattern: ${fieldName}`",
      "context": "    108:     // Additional pattern validation\n    109:     if (!/^[a-z_][a-z0-9_]*$/.test(fieldName)) {\n>>> 110:       console.warn(`🚨 Invalid field name pattern: ${fieldName}`);\n    111:       return false;\n    112:     }"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 145,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid environment variable name: ${varName}`",
      "context": "    143:     // Validate environment variable name\n    144:     if (!/^[A-Z_][A-Z0-9_]*$/.test(varName)) {\n>>> 145:       throw new Error(`Invalid environment variable name: ${varName}`);\n    146:     }\n    147: "
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid field name: ${field}`",
      "context": "    174:       // Validate field name\n    175:       if (!this.validateFieldName(field, validFields)) {\n>>> 176:         throw new Error(`Invalid field name: ${field}`);\n    177:       }\n    178: "
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid value for field ${field}: ${validation.error}`",
      "context": "    180:       const validation = this.validateInput(String(value), field);\n    181:       if (!validation.valid) {\n>>> 182:         throw new Error(`Invalid value for field ${field}: ${validation.error}`);\n    183:       }\n    184: "
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 185,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${field} = $${paramIndex}`",
      "context": "    183:       }\n    184: \n>>> 185:       whereClause.push(`${field} = $${paramIndex}`);\n    186:       params.push(validation.sanitized);\n    187:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 194,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND ${whereClause.join(' AND ')}`",
      "context": "    192:     if (whereClause.length > 0) {\n    193:       if (baseQuery.toLowerCase().includes('where')) {\n>>> 194:         finalQuery += ` AND ${whereClause.join(' AND ')}`;\n    195:       } else {\n    196:         finalQuery += ` WHERE ${whereClause.join(' AND ')}`;"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` WHERE ${whereClause.join(' AND ')}`",
      "context": "    194:         finalQuery += ` AND ${whereClause.join(' AND ')}`;\n    195:       } else {\n>>> 196:         finalQuery += ` WHERE ${whereClause.join(' AND ')}`;\n    197:       }\n    198:     }"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 230,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${path}.${key}`",
      "context": "    228:     const validateObject = (obj, path = '') => {\n    229:       for (const [key, value] of Object.entries(obj)) {\n>>> 230:         const fullPath = path ? `${path}.${key}` : key;\n    231:         \n    232:         if (typeof value === 'string') {"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 236,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 SQL injection attempt in ${fullPath}:`",
      "context": "    234:           if (!validation.valid) {\n    235:             // Log security event\n>>> 236:             console.warn(`🚨 SQL injection attempt in ${fullPath}:`, {\n    237:               ip: req.ip,\n    238:               userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/middleware/sqlInjectionProtection.js",
      "line": 254,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query && Object.keys(req.query).length > 0) {\n      validateObject(req.query, 'query');\n    }\n\n    // Validate body parameters\n    if (req.body && Object.keys(req.body).length > 0) {\n      validateObject(req.body, 'body');\n    }\n\n    // Validate route parameters\n    if (req.params && Object.keys(req.params).length > 0) {\n      validateObject(req.params, 'params');\n    }\n  }\n\n  /**\n   * Log security events\n   */\n  logSecurityEvent(event) {\n    const securityLog = {\n      timestamp: new Date().toISOString(),\n      type: 'SQL_INJECTION_ATTEMPT',\n      severity: event.risk || 'MEDIUM',\n      details: event,\n      source: 'SQLInjectionProtection'\n    };\n\n    console.warn('🚨 SECURITY EVENT:'",
      "context": "    252: \n    253:     // Validate query parameters\n>>> 254:     if (req.query && Object.keys(req.query).length > 0) {\n    255:       validateObject(req.query, 'query');\n    256:     }"
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 151,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId}:${category}`",
      "context": "    149:   const windowMs = config.windowMs;\n    150:   const maxRequests = config.maxRequests;\n>>> 151:   const key = `${userId}:${category}`;\n    152: \n    153:   // Initialize user rate limit data if not exists"
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 178,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Rate limit exceeded for ${category} endpoints. You've made ${userLimit.requests.length} requests in the last ${windowMs/1000} seconds (limit: ${maxRequests}).`",
      "context": "    176:     return {\n    177:       allowed: false,\n>>> 178:       message: `Rate limit exceeded for ${category} endpoints. You've made ${userLimit.requests.length} requests in the last ${windowMs/1000} seconds (limit: ${maxRequests}).`,\n    179:       retryAfter,\n    180:       limits: {"
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 219,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`anonymous:${clientIP}:${category}`",
      "context": "    217:   const clientIP = req.ip || req.connection.remoteAddress;\n    218:   const now = Date.now();\n>>> 219:   const key = `anonymous:${clientIP}:${category}`;\n    220:   \n    221:   // Strict limits for anonymous users"
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 282,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.method} ${req.path}`",
      "context": "    280: \n    281:   // Track unique endpoints\n>>> 282:   history.endpoints.add(`${req.method} ${req.path}`);\n    283:   history.lastActivity = now;\n    284: "
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 353,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Suspicious activity detected for user ${userId.substring(0, 8)}...: ${type}`",
      "context": "    351:   suspiciousActivity.set(userId, activities.filter(a => a.timestamp > oneHourAgo));\n    352: \n>>> 353:   console.warn(`🚨 Suspicious activity detected for user ${userId.substring(0, 8)}...: ${type}`, details);\n    354: }\n    355: "
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 443,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 Rate limit cleanup: ${userRateLimits.size} active limits, ${userRequestHistory.size} active users`",
      "context": "    441:   }\n    442:   \n>>> 443:   console.log(`🧹 Rate limit cleanup: ${userRateLimits.size} active limits, ${userRequestHistory.size} active users`);\n    444: }, 10 * 60 * 1000); // Every 10 minutes\n    445: "
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 106,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "')) {\n      return null;\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Verify JWT token\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    104:   try {\n    105:     const authHeader = req.headers.authorization;\n>>> 106:     if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    107:       return null;\n    108:     }"
    },
    {
      "file": "webapp/lambda/middleware/userRateLimit.js",
      "line": 115,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    return payload.sub; // User ID\n\n  } catch (error) {\n    // Invalid or expired token\n    return null;\n  }\n}\n\n/**\n * Get user tier from user ID (could be from database or user attributes)\n */\nasync function getUserTier(userId) {\n  // For now, return '",
      "context": "    113:     const verifier = jwt.CognitoJwtVerifier.create({\n    114:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 115:       tokenUse: 'access',\n    116:       clientId: process.env.COGNITO_CLIENT_ID\n    117:     });"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 267,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${fieldName} is required`",
      "context": "    265:             // Check if required field is missing\n    266:             if (rules.required && (!found || value === null || value === undefined || value === '')) {\n>>> 267:                 errors.push(`${fieldName} is required`);\n    268:                 continue;\n    269:             }"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 283,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${fieldName} is invalid`",
      "context": "    281:             // Validate the sanitized value\n    282:             if (rules.validator && !rules.validator(value)) {\n>>> 283:                 errors.push(rules.errorMessage || `${fieldName} is invalid`);\n    284:                 continue;\n    285:             }"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 348,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${key}.${nestedCheck}`",
      "context": "    346:             if (typeof value === 'object' && value !== null) {\n    347:                 const nestedCheck = checkObject(value);\n>>> 348:                 if (nestedCheck) return `${key}.${nestedCheck}`;\n    349:             }\n    350:         }"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 20,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 15 * 60 // 15 minutes in seconds\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            // Skip rate limiting in development mode\n            return process.env.NODE_ENV === '",
      "context": "    18:         max: 5, // 5 attempts per window\n    19:         message: {\n>>> 20:             error: 'Too many authentication attempts, please try again later',\n    21:             retryAfter: 15 * 60 // 15 minutes in seconds\n    22:         },"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 36,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    34:         max: 100, // 100 requests per minute\n    35:         message: {\n>>> 36:             error: 'Too many API requests, please slow down',\n    37:             retryAfter: 60\n    38:         },"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 36,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    34:         max: 100, // 100 requests per minute\n    35:         message: {\n>>> 36:             error: 'Too many API requests, please slow down',\n    37:             retryAfter: 60\n    38:         },"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 66,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            retryAfter: 5 * 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false\n    })\n};\n\n/**\n * Slow down configurations to add delays before hard rate limits\n */\nconst slowDownConfigs = {\n    api: slowDown({\n        windowMs: 60 * 1000, // 1 minute\n        delayAfter: 50, // After 50 requests\n        delayMs: 500, // Add 500ms delay\n        maxDelayMs: 5000, // Maximum 5 second delay\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    64:         max: 10, // 10 requests per 5 minutes\n    65:         message: {\n>>> 66:             error: 'Rate limit exceeded for resource-intensive operation',\n    67:             retryAfter: 5 * 60\n    68:         },"
    },
    {
      "file": "webapp/lambda/middleware/validation.js",
      "line": 84,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n        }\n    }),\n\n    trading: slowDown({\n        windowMs: 60 * 1000, // 1 minute\n        delayAfter: 100, // After 100 requests\n        delayMs: 200, // Add 200ms delay\n        maxDelayMs: 2000, // Maximum 2 second delay\n        skip: (req) => {\n            return process.env.NODE_ENV === '",
      "context": "    82:         maxDelayMs: 5000, // Maximum 5 second delay\n    83:         skip: (req) => {\n>>> 84:             return process.env.NODE_ENV === 'development';\n    85:         }\n    86:     }),"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 179,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📅 Analysis Date: ${new Date().toISOString()}`",
      "context": "    177:   console.log('🎯 Production Readiness Analysis');\n    178:   console.log('='.repeat(60));\n>>> 179:   console.log(`📅 Analysis Date: ${new Date().toISOString()}`);\n    180:   console.log();\n    181:   "
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${index + 1}. ${issue.title} (${issue.id})`",
      "context": "    184:   \n    185:   CRITICAL_ISSUES_DISCOVERED.forEach((issue, index) => {\n>>> 186:     console.log(`${index + 1}. ${issue.title} (${issue.id})`);\n    187:     console.log(`   Impact: ${issue.impact}`);\n    188:     console.log(`   Description: ${issue.description}`);"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 187,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Impact: ${issue.impact}`",
      "context": "    185:   CRITICAL_ISSUES_DISCOVERED.forEach((issue, index) => {\n    186:     console.log(`${index + 1}. ${issue.title} (${issue.id})`);\n>>> 187:     console.log(`   Impact: ${issue.impact}`);\n    188:     console.log(`   Description: ${issue.description}`);\n    189:     console.log(`   Root Cause: ${issue.rootCause}`);"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 188,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Description: ${issue.description}`",
      "context": "    186:     console.log(`${index + 1}. ${issue.title} (${issue.id})`);\n    187:     console.log(`   Impact: ${issue.impact}`);\n>>> 188:     console.log(`   Description: ${issue.description}`);\n    189:     console.log(`   Root Cause: ${issue.rootCause}`);\n    190:     console.log(`   Solution: ${issue.solution}`);"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 189,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Root Cause: ${issue.rootCause}`",
      "context": "    187:     console.log(`   Impact: ${issue.impact}`);\n    188:     console.log(`   Description: ${issue.description}`);\n>>> 189:     console.log(`   Root Cause: ${issue.rootCause}`);\n    190:     console.log(`   Solution: ${issue.solution}`);\n    191:     console.log(`   Logging: ${issue.logging}`);"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Solution: ${issue.solution}`",
      "context": "    188:     console.log(`   Description: ${issue.description}`);\n    189:     console.log(`   Root Cause: ${issue.rootCause}`);\n>>> 190:     console.log(`   Solution: ${issue.solution}`);\n    191:     console.log(`   Logging: ${issue.logging}`);\n    192:     console.log();"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   Logging: ${issue.logging}`",
      "context": "    189:     console.log(`   Root Cause: ${issue.rootCause}`);\n    190:     console.log(`   Solution: ${issue.solution}`);\n>>> 191:     console.log(`   Logging: ${issue.logging}`);\n    192:     console.log();\n    193:   });"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 199,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 ${category.category}:`",
      "context": "    197:   \n    198:   PRODUCTION_READINESS_REQUIREMENTS.forEach(category => {\n>>> 199:     console.log(`🔧 ${category.category}:`);\n    200:     category.requirements.forEach(req => {\n    201:       console.log(`   • ${req}`);"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 201,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   • ${req}`",
      "context": "    199:     console.log(`🔧 ${category.category}:`);\n    200:     category.requirements.forEach(req => {\n>>> 201:       console.log(`   • ${req}`);\n    202:     });\n    203:     console.log();"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 213,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ${index + 1}. Fix ${issue.title}`",
      "context": "    211:   console.log('Priority 1 - Critical Infrastructure:');\n    212:   highImpactIssues.slice(0, 3).forEach((issue, index) => {\n>>> 213:     console.log(`   ${index + 1}. Fix ${issue.title}`);\n    214:     console.log(`      Action: ${issue.solution}`);\n    215:   });"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`      Action: ${issue.solution}`",
      "context": "    212:   highImpactIssues.slice(0, 3).forEach((issue, index) => {\n    213:     console.log(`   ${index + 1}. Fix ${issue.title}`);\n>>> 214:     console.log(`      Action: ${issue.solution}`);\n    215:   });\n    216:   "
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 219,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ${index + 4}. Fix ${issue.title}`",
      "context": "    217:   console.log('\\\\nPriority 2 - Application Layer:');\n    218:   highImpactIssues.slice(3, 6).forEach((issue, index) => {\n>>> 219:     console.log(`   ${index + 4}. Fix ${issue.title}`);\n    220:     console.log(`      Action: ${issue.solution}`);\n    221:   });"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`      Action: ${issue.solution}`",
      "context": "    212:   highImpactIssues.slice(0, 3).forEach((issue, index) => {\n    213:     console.log(`   ${index + 1}. Fix ${issue.title}`);\n>>> 214:     console.log(`      Action: ${issue.solution}`);\n    215:   });\n    216:   "
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ${index + 7}. Fix ${issue.title}`",
      "context": "    223:   console.log('\\\\nPriority 3 - Monitoring & Optimization:');\n    224:   highImpactIssues.slice(6).forEach((issue, index) => {\n>>> 225:     console.log(`   ${index + 7}. Fix ${issue.title}`);\n    226:     console.log(`      Action: ${issue.solution}`);\n    227:   });"
    },
    {
      "file": "webapp/lambda/production-readiness-analysis.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`      Action: ${issue.solution}`",
      "context": "    212:   highImpactIssues.slice(0, 3).forEach((issue, index) => {\n    213:     console.log(`   ${index + 1}. Fix ${issue.title}`);\n>>> 214:     console.log(`      Action: ${issue.solution}`);\n    215:   });\n    216:   "
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`admin-dashboard-${Date.now()}`",
      "context": "    154: router.get('/dashboard', async (req, res) => {\n    155:   try {\n>>> 156:     const correlationId = `admin-dashboard-${Date.now()}`;\n    157:     \n    158:     logger.info('Admin dashboard requested', { correlationId });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 300,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Provider ${provider.name} configuration updated`",
      "context": "    298:     adminState.alerts.push({\n    299:       type: 'provider_update',\n>>> 300:       message: `Provider ${provider.name} configuration updated`,\n    301:       timestamp: new Date().toISOString(),\n    302:       severity: 'info',"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 309,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Provider ${provider.name} updated successfully`",
      "context": "    307:       success: true,\n    308:       data: updatedProvider,\n>>> 309:       message: `Provider ${provider.name} updated successfully`\n    310:     });\n    311: "
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 703,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`High monthly cost: $${provider.monthly_cost}`",
      "context": "    701:         type: 'high_cost',\n    702:         provider: provider.name,\n>>> 703:         message: `High monthly cost: $${provider.monthly_cost}`,\n    704:         severity: 'warning'\n    705:       });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 712,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Expensive per-request cost: $${provider.cost_per_request}`",
      "context": "    710:         type: 'expensive_requests',\n    711:         provider: provider.name,\n>>> 712:         message: `Expensive per-request cost: $${provider.cost_per_request}`,\n    713:         severity: 'info'\n    714:       });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 785,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Potential savings of $${costOptimization.potentialSavings} identified`",
      "context": "    783:       type: 'cost',\n    784:       priority: 'high',\n>>> 785:       message: `Potential savings of $${costOptimization.potentialSavings} identified`,\n    786:       action: 'Review provider configurations and optimize usage'\n    787:     });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 795,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${unhealthyProviders.length} providers need attention`",
      "context": "    793:       type: 'health',\n    794:       priority: 'medium',\n>>> 795:       message: `${unhealthyProviders.length} providers need attention`,\n    796:       action: 'Review and fix provider issues'\n    797:     });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 840,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Critical latency: ${provider.latency}ms`",
      "context": "    838:         type: 'latency',\n    839:         provider: provider.name,\n>>> 840:         message: `Critical latency: ${provider.latency}ms`,\n    841:         severity: 'critical'\n    842:       });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 849,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Low reliability: ${(provider.reliability * 100).toFixed(1)}%`",
      "context": "    847:         type: 'reliability',\n    848:         provider: provider.name,\n>>> 849:         message: `Low reliability: ${(provider.reliability * 100).toFixed(1)}%`,\n    850:         severity: 'warning'\n    851:       });"
    },
    {
      "file": "webapp/lambda/routes/admin.js",
      "line": 272,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const updates = req.body;\n    \n    const provider = adminState.providers.get(providerId);\n    if (!provider) {\n      return res.status(404).json({\n        success: false,\n        error: 'Provider not found'\n      });\n    }\n\n    // Validate updates\n    const validatedUpdates = validateProviderUpdates(updates);\n    \n    // Apply updates\n    const updatedProvider = { ...provider, ...validatedUpdates };\n    adminState.providers.set(providerId, updatedProvider);\n    \n    // Log the change\n    logger.info('Provider updated', {\n      providerId,\n      updates: validatedUpdates,\n      adminUser: req.user.userId\n    });\n\n    // Add to alerts\n    adminState.alerts.push({\n      type: 'provider_update',\n      message: `",
      "context": "    270: router.put('/providers/:providerId', async (req, res) => {\n    271:   try {\n>>> 272:     const { providerId } = req.params;\n    273:     const updates = req.body;\n    274:     "
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 100,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Based on your portfolio analysis:\n    \n• Total Portfolio Value: $${portfolioContext.totalValue.toFixed(2)}\n• Total Gain/Loss: ${portfolioContext.totalGainLoss >= 0 ? '+' : ''}$${portfolioContext.totalGainLoss.toFixed(2)} (${portfolioContext.gainLossPercent.toFixed(2)}%)\n• Number of Holdings: ${portfolioContext.holdings.length}\n\nYour top holdings by value:\n${portfolioContext.holdings.slice(0, 5).map((holding, index) => \n  `${index + 1}. ${holding.symbol}: $${parseFloat(holding.market_value).toFixed(2)} (${parseFloat(holding.unrealized_plpc || 0).toFixed(2)}%)`",
      "context": "    98:   \n    99:   if (message.includes('portfolio') && portfolioContext) {\n>>> 100:     response = `Based on your portfolio analysis:\n    101:     \n    102: • Total Portfolio Value: $${portfolioContext.totalValue.toFixed(2)}"
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 17,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'],\n  features: {\n    portfolioAnalysis: true,\n    marketInsights: true,\n    stockResearch: true,\n    investmentAdvice: true,\n    digitalHuman: process.env.NVIDIA_DIGITAL_HUMAN_ENABLED === '",
      "context": "    15:   maxHistoryLength: 50,\n    16:   maxResponseLength: 1000,\n>>> 17:   supportedLanguages: ['en'],\n    18:   features: {\n    19:     portfolioAnalysis: true,"
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    voiceChat: process.env.VOICE_CHAT_ENABLED === '",
      "context": "    21:     stockResearch: true,\n    22:     investmentAdvice: true,\n>>> 23:     digitalHuman: process.env.NVIDIA_DIGITAL_HUMAN_ENABLED === 'true',\n    24:     voiceChat: process.env.VOICE_CHAT_ENABLED === 'true'\n    25:   }"
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 259,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  if (!message || !message.trim()) {\n    return res.status(400).json({\n      success: false,\n      error: 'Message is required'\n    });\n  }\n\n  try {\n    // Add user message to history\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: message.trim(),\n      context: context\n    };\n    addToHistory(userId, userMessage);\n\n    // Generate AI response\n    const aiResponse = await generateAIResponse(message, userId, context);\n    \n    // Add AI response to history\n    const assistantMessage = {\n      id: Date.now() + 1,\n      type: 'assistant',\n      content: aiResponse.content,\n      suggestions: aiResponse.suggestions,\n      context: aiResponse.context\n    };\n    addToHistory(userId, assistantMessage);\n\n    res.json({\n      success: true,\n      message: assistantMessage,\n      conversationId: userId // In production, use proper conversation IDs\n    });\n  } catch (error) {\n    console.error('Error processing AI chat:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process message'\n    });\n  }\n});\n\n// Get conversation history\nrouter.get('/history', async (req, res) => {\n  const userId = req.user.sub;\n  const { limit = 20 } = req.query;\n\n  try {\n    const history = getUserHistory(userId);\n    const recentHistory = history.slice(-parseInt(limit));\n\n    res.json({\n      success: true,\n      history: recentHistory,\n      total: history.length\n    });\n  } catch (error) {\n    console.error('Error fetching conversation history:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch conversation history'\n    });\n  }\n});\n\n// Clear conversation history\nrouter.delete('/history', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    conversationHistory.delete(userId);\n    \n    res.json({\n      success: true,\n      message: 'Conversation history cleared'\n    });\n  } catch (error) {\n    console.error('Error clearing conversation history:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to clear conversation history'\n    });\n  }\n});\n\n// Get AI assistant configuration\nrouter.get('/config', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    let preferences = {\n      ai_voice_enabled: false,\n      ai_digital_human_enabled: false,\n      ai_auto_voice_response: false,\n      ai_language: 'en'\n    };\n\n    // Try to get user preferences from database\n    try {\n      const userPrefs = await query(`",
      "context": "    257: router.post('/chat', async (req, res) => {\n    258:   const userId = req.user.sub;\n>>> 259:   const { message, context = {} } = req.body;\n    260: \n    261:   if (!message || !message.trim()) {"
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 414,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    // Update user preferences in database\n    await query(`",
      "context": "    412:     autoVoiceResponse, \n    413:     language = 'en' \n>>> 414:   } = req.body;\n    415: \n    416:   try {"
    },
    {
      "file": "webapp/lambda/routes/ai-assistant.js",
      "line": 547,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    // This would integrate with speech-to-text and text-to-speech services\n    // Check if voice chat is enabled\n    if (!AI_CONFIG.features.voiceChat) {\n      return res.status(503).json({\n        success: false,\n        error: 'Voice chat feature is not currently enabled',\n        availableFeatures: ['text chat', 'portfolio analysis', 'market insights']\n      });\n    }\n    \n    // Voice chat processing would integrate with speech-to-text and text-to-speech services\n    res.json({\n      success: false,\n      error: 'Voice chat integration requires additional setup',\n      message: 'Please use text chat for now. Voice features require AWS Transcribe and Polly configuration.',\n      recommendedAction: 'Continue with text-based conversation'\n    });\n  } catch (error) {\n    console.error('Error processing voice chat:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process voice input'\n    });\n  }\n});\n\n// Digital human endpoint (for future NVIDIA integration)\nrouter.post('/digital-human', async (req, res) => {\n  const userId = req.user.sub;\n  const { message, avatar = 'default' } = req.body;\n\n  try {\n    // This would integrate with NVIDIA Digital Human API\n    // Check if digital human is enabled\n    if (!AI_CONFIG.features.digitalHuman) {\n      return res.status(503).json({\n        success: false,\n        error: 'Digital human feature is not currently enabled',\n        message: 'This feature requires NVIDIA Omniverse integration',\n        availableFeatures: ['text chat', 'portfolio analysis', 'market insights']\n      });\n    }\n    \n    // Digital human integration would require NVIDIA Omniverse or similar platform\n    res.json({\n      success: false,\n      error: 'Digital human integration requires additional infrastructure',\n      message: 'This feature requires NVIDIA Digital Human setup and GPU infrastructure.',\n      recommendedAction: 'Continue with standard text-based AI assistant'\n    });\n  } catch (error) {\n    console.error('Error processing digital human request:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process digital human request'",
      "context": "    545: router.post('/voice', async (req, res) => {\n    546:   const userId = req.user.sub;\n>>> 547:   const { audioData, format = 'webm' } = req.body;\n    548: \n    549:   try {"
    },
    {
      "file": "webapp/lambda/routes/alerts.js",
      "line": 117,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          id,\n          alert_id,\n          title,\n          message,\n          category,\n          priority,\n          read_at,\n          created_at,\n          metadata\n        FROM alert_notifications\n        ${whereClause}\n        ORDER BY created_at DESC\n        LIMIT $${params.length + 1} OFFSET $${params.length + 2}\n      `",
      "context": "    115:       }\n    116: \n>>> 117:       const result = await query(`\n    118:         SELECT \n    119:           id,"
    },
    {
      "file": "webapp/lambda/routes/alerts.js",
      "line": 134,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT COUNT(*) as total\n        FROM alert_notifications\n        ${whereClause}\n      `",
      "context": "    132:       `, [...params, limit, offset]);\n    133: \n>>> 134:       const countResult = await query(`\n    135:         SELECT COUNT(*) as total\n    136:         FROM alert_notifications"
    },
    {
      "file": "webapp/lambda/routes/alerts.js",
      "line": 104,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50;\n    const offset = parseInt(req.query.offset) || 0;\n    const unreadOnly = req.query.unread === 'true';\n\n    // Try to get notifications from database\n    try {\n      let whereClause = '",
      "context": "    102:   try {\n    103:     const userId = req.user.sub;\n>>> 104:     const limit = parseInt(req.query.limit) || 50;\n    105:     const offset = parseInt(req.query.offset) || 0;\n    106:     const unreadOnly = req.query.unread === 'true';"
    },
    {
      "file": "webapp/lambda/routes/algorithmicTrading.js",
      "line": 120,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Available strategies: ${availableStrategies.map(s => s.id).join(', ')}`",
      "context": "    118:         success: false,\n    119:         error: 'Invalid strategy',\n>>> 120:         message: `Available strategies: ${availableStrategies.map(s => s.id).join(', ')}`,\n    121:         availableStrategies\n    122:       });"
    },
    {
      "file": "webapp/lambda/routes/algorithmicTrading.js",
      "line": 285,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${indicatorId} calculation failed:`",
      "context": "    283:     \n    284:   } catch (error) {\n>>> 285:     console.error(`${indicatorId} calculation failed:`, error);\n    286:     res.status(500).json({\n    287:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/algorithmicTrading.js",
      "line": 288,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to calculate ${indicatorId}`",
      "context": "    286:     res.status(500).json({\n    287:       success: false,\n>>> 288:       error: `Failed to calculate ${indicatorId}`,\n    289:       message: error.message,\n    290:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/algorithmicTrading.js",
      "line": 399,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`2024-01-${i.toString().padStart(2, '0')}`",
      "context": "    397:         open: 100 + Math.random() * 5 - 2.5,\n    398:         volume: 1000 + Math.random() * 500,\n>>> 399:         timestamp: `2024-01-${i.toString().padStart(2, '0')}`\n    400:       });\n    401:     }"
    },
    {
      "file": "webapp/lambda/routes/algorithmicTrading.js",
      "line": 16,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    if (data.length < 50) {\n      return res.status(400).json({\n        success: false,\n        error: 'Insufficient data',\n        message: 'At least 50 data points required for technical analysis'\n      });\n    }\n    \n    const results = technicalAnalysis.calculateIndicators(data, indicators);\n    \n    res.json({\n      success: true,\n      data: results,\n      count: data.length,\n      indicators: indicators,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Technical indicators calculation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate technical indicators',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Generate trading signal\nrouter.post('/signal', async (req, res) => {\n  try {\n    const { data, indicators = ['RSI', 'MACD', 'BOLLINGER_BANDS'] } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    const signal = technicalAnalysis.generateTradingSignal(data, indicators);\n    \n    res.json({\n      success: true,\n      data: signal,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Trading signal generation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate trading signal',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Run backtest\nrouter.post('/backtest', async (req, res) => {\n  try {\n    const { \n      data, \n      strategy = 'MULTI_INDICATOR',\n      options = {}\n    } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    if (data.length < 100) {\n      return res.status(400).json({\n        success: false,\n        error: 'Insufficient data',\n        message: 'At least 100 data points required for backtesting'\n      });\n    }\n    \n    // Validate strategy\n    const availableStrategies = backtesting.getAvailableStrategies();\n    const validStrategy = availableStrategies.find(s => s.id === strategy);\n    \n    if (!validStrategy) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid strategy',\n        message: `",
      "context": "    14: router.post('/indicators', async (req, res) => {\n    15:   try {\n>>> 16:     const { data, indicators = ['RSI', 'MACD', 'BOLLINGER_BANDS'] } = req.body;\n    17:     \n    18:     if (!data || !Array.isArray(data)) {"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 9,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n      const upgradesQuery = `",
      "context": "    7: router.get('/upgrades', async (req, res) => {\n    8:   try {\n>>> 9:     const page = parseInt(req.query.page) || 1;\n    10:     const limit = parseInt(req.query.limit) || 25;\n    11:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 78,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    const recQuery = `",
      "context": "    76: router.get('/:ticker/recommendations', async (req, res) => {\n    77:   try {\n>>> 78:     const { ticker } = req.params;\n    79: \n    80:     const recQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 111,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    const estimatesQuery = `",
      "context": "    109: router.get('/:ticker/earnings-estimates', async (req, res) => {\n    110:   try {\n>>> 111:     const { ticker } = req.params;\n    112: \n    113:     const estimatesQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 143,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    const revenueQuery = `",
      "context": "    141: router.get('/:ticker/revenue-estimates', async (req, res) => {\n    142:   try {\n>>> 143:     const { ticker } = req.params;\n    144: \n    145:     const revenueQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 174,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    const historyQuery = `",
      "context": "    172: router.get('/:ticker/earnings-history', async (req, res) => {\n    173:   try {\n>>> 174:     const { ticker } = req.params;\n    175: \n    176:     const historyQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 206,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const revisionsQuery = `",
      "context": "    204: router.get('/:ticker/eps-revisions', async (req, res) => {\n    205:   try {\n>>> 206:     const { ticker } = req.params;\n    207:     \n    208:     const revisionsQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 254,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const trendQuery = `",
      "context": "    252: router.get('/:ticker/eps-trend', async (req, res) => {\n    253:   try {\n>>> 254:     const { ticker } = req.params;\n    255:     \n    256:     const trendQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 303,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const growthQuery = `",
      "context": "    301: router.get('/:ticker/growth-estimates', async (req, res) => {\n    302:   try {\n>>> 303:     const { ticker } = req.params;\n    304:     \n    305:     const growthQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 350,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const recommendationsQuery = `",
      "context": "    348: router.get('/:ticker/recommendations', async (req, res) => {\n    349:   try {\n>>> 350:     const { ticker } = req.params;\n    351:     \n    352:     const recommendationsQuery = `"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 394,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    // Get all analyst data in parallel\n    const [\n      earningsEstimates,\n      revenueEstimates,\n      earningsHistory,\n      epsRevisions,\n      epsTrend,\n      growthEstimates,\n      recommendations\n    ] = await Promise.all([\n      query(`",
      "context": "    392: router.get('/:ticker/overview', async (req, res) => {\n    393:   try {\n>>> 394:     const { ticker } = req.params;\n    395:     \n    396:     // Get all analyst data in parallel"
    },
    {
      "file": "webapp/lambda/routes/analysts.js",
      "line": 445,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 10;\n    \n    // Get the most recent date with analyst actions\n    const recentDateQuery = `\n      SELECT DISTINCT date \n      FROM analyst_upgrade_downgrade \n      ORDER BY date DESC \n      LIMIT 1\n    `;\n    \n    const recentDateResult = await query(recentDateQuery);\n    \n    if (!recentDateResult.rows || recentDateResult.rows.length === 0) {\n      return res.json({\n        data: [],\n        summary: {\n          date: null,\n          total_actions: 0,\n          upgrades: 0,\n          downgrades: 0\n        },\n        message: 'No analyst actions found'\n      });\n    }\n    \n    const mostRecentDate = recentDateResult.rows[0].date;\n    \n    // Get all actions for the most recent date\n    const recentActionsQuery = `\n      SELECT \n        aud.symbol,\n        s.short_name AS company_name,\n        aud.from_grade,\n        aud.to_grade,\n        aud.action,\n        aud.firm,\n        aud.date,\n        aud.details,\n        CASE \n          WHEN LOWER(aud.action) LIKE '%up%' OR LOWER(aud.action) LIKE '%buy%' OR LOWER(aud.action) LIKE '%positive%' THEN 'upgrade'\n          WHEN LOWER(aud.action) LIKE '%down%' OR LOWER(aud.action) LIKE '%sell%' OR LOWER(aud.action) LIKE '%negative%' THEN 'downgrade'\n          ELSE 'neutral'",
      "context": "    443: router.get('/recent-actions', async (req, res) => {\n    444:   try {\n>>> 445:     const limit = parseInt(req.query.limit) || 10;\n    446:     \n    447:     // Get the most recent date with analyst actions"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 43,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authorization: Bearer ${token}`",
      "context": "    41:       token: token,\n    42:       usage: {\n>>> 43:         header: `Authorization: Bearer ${token}`,\n    44:         curlExample: `curl -H \"Authorization: Bearer ${token}\" http://localhost:3000/api/health`,\n    45:         userId: userId,"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 44,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`curl -H \"Authorization: Bearer ${token}\" http://localhost:3000/api/health`",
      "context": "    42:       usage: {\n    43:         header: `Authorization: Bearer ${token}`,\n>>> 44:         curlExample: `curl -H \"Authorization: Bearer ${token}\" http://localhost:3000/api/health`,\n    45:         userId: userId,\n    46:         email: email,"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${baseUrl}/api/auth-status/status`",
      "context": "    188:       endpoints: {\n    189:         'auth-status': {\n>>> 190:           url: `${baseUrl}/api/auth-status/status`,\n    191:           method: 'GET',\n    192:           description: 'Get authentication system status',"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${baseUrl}/api/auth-status/generate-dev-token`",
      "context": "    194:         },\n    195:         'generate-token': {\n>>> 196:           url: `${baseUrl}/api/auth-status/generate-dev-token`,\n    197:           method: 'GET',\n    198:           description: 'Generate development token',"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 202,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${baseUrl}/api/auth-status/validate-token`",
      "context": "    200:         },\n    201:         'validate-token': {\n>>> 202:           url: `${baseUrl}/api/auth-status/validate-token`,\n    203:           method: 'GET',\n    204:           description: 'Validate provided token',"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 206,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authorization: Bearer ${testToken}`",
      "context": "    204:           description: 'Validate provided token',\n    205:           requiresAuth: true,\n>>> 206:           header: `Authorization: Bearer ${testToken}`\n    207:         },\n    208:         'user-info': {"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 209,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${baseUrl}/api/auth-status/user-info`",
      "context": "    207:         },\n    208:         'user-info': {\n>>> 209:           url: `${baseUrl}/api/auth-status/user-info`,\n    210:           method: 'GET',\n    211:           description: 'Get authenticated user information',"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 206,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authorization: Bearer ${testToken}`",
      "context": "    204:           description: 'Validate provided token',\n    205:           requiresAuth: true,\n>>> 206:           header: `Authorization: Bearer ${testToken}`\n    207:         },\n    208:         'user-info': {"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 216,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${baseUrl}/api/health/api-services`",
      "context": "    214:         },\n    215:         'health-check': {\n>>> 216:           url: `${baseUrl}/api/health/api-services`,\n    217:           method: 'GET',\n    218:           description: 'Test API services with authentication',"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`curl \"${baseUrl}/api/auth-status/status\"`",
      "context": "    222:       sampleToken: testToken,\n    223:       curlExamples: {\n>>> 224:         'test-without-auth': `curl \"${baseUrl}/api/auth-status/status\"`,\n    225:         'test-with-auth': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/auth-status/user-info\"`,\n    226:         'test-api-services': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/health/api-services\"`"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/auth-status/user-info\"`",
      "context": "    223:       curlExamples: {\n    224:         'test-without-auth': `curl \"${baseUrl}/api/auth-status/status\"`,\n>>> 225:         'test-with-auth': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/auth-status/user-info\"`,\n    226:         'test-api-services': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/health/api-services\"`\n    227:       }"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 226,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/health/api-services\"`",
      "context": "    224:         'test-without-auth': `curl \"${baseUrl}/api/auth-status/status\"`,\n    225:         'test-with-auth': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/auth-status/user-info\"`,\n>>> 226:         'test-api-services': `curl -H \"Authorization: Bearer ${testToken}\" \"${baseUrl}/api/health/api-services\"`\n    227:       }\n    228:     });"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', async (req, res) => {\n  try {\n    const isDevelopment = process.env.NODE_ENV === '",
      "context": "    19:  * Generate a development token for testing (development mode only)\n    20:  */\n>>> 21: router.get('/generate-dev-token', async (req, res) => {\n    22:   try {\n    23:     const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || !process.env.NODE_ENV;\n    \n    if (!isDevelopment) {\n      return res.status(403).json({\n        success: false,\n        error: '",
      "context": "    21: router.get('/generate-dev-token', async (req, res) => {\n    22:   try {\n>>> 23:     const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n    24:     \n    25:     if (!isDevelopment) {"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', async (req, res) => {\n  try {\n    const isDevelopment = process.env.NODE_ENV === '",
      "context": "    19:  * Generate a development token for testing (development mode only)\n    20:  */\n>>> 21: router.get('/generate-dev-token', async (req, res) => {\n    22:   try {\n    23:     const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 23,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || !process.env.NODE_ENV;\n    \n    if (!isDevelopment) {\n      return res.status(403).json({\n        success: false,\n        error: '",
      "context": "    21: router.get('/generate-dev-token', async (req, res) => {\n    22:   try {\n>>> 23:     const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\n    24:     \n    25:     if (!isDevelopment) {"
    },
    {
      "file": "webapp/lambda/routes/auth-status.js",
      "line": 33,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.userId || 'dev-user-' + Date.now();\n    const email = req.query.email || 'dev@example.com';\n    \n    const token = generateTestToken(userId, email);\n    \n    res.json({\n      success: true,\n      message: 'Development token generated successfully',\n      token: token,\n      usage: {\n        header: `",
      "context": "    31:     }\n    32: \n>>> 33:     const userId = req.query.userId || 'dev-user-' + Date.now();\n    34:     const email = req.query.email || 'dev@example.com';\n    35:     "
    },
    {
      "file": "webapp/lambda/routes/auth.js",
      "line": 28,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n  \n  if (!token) {\n    return res.status(400).json(error('Token is required'));\n  }\n\n  // This would validate the JWT token\n  res.json(success({\n    valid: true,\n    message: 'Token validation endpoint operational'",
      "context": "    26: // Token validation endpoint\n    27: router.post('/validate', (req, res) => {\n>>> 28:   const { token } = req.body;\n    29:   \n    30:   if (!token) {"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + quantity + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 238,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + symbol + '",
      "context": "    236:     if (quantity > 0) {\n    237:       buy(symbol, quantity, stockData.close);\n>>> 238:       log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 43,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`backtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`",
      "context": "    41: \n    42:     // Create unique backtest ID\n>>> 43:     const backtestId = `backtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    44:     \n    45:     // Store backtest as running"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 360,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      with(context) {\n        ${strategyCode}\n      }\n    `",
      "context": "    358:   try {\n    359:     // Basic syntax validation\n>>> 360:     new Function('context', `\n    361:       with(context) {\n    362:         ${strategyCode}"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 388,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Dangerous pattern detected: ${pattern.source}`",
      "context": "    386:         return res.status(400).json({\n    387:           success: false,\n>>> 388:           error: `Dangerous pattern detected: ${pattern.source}`\n    389:         });\n    390:       }"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 203,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE market_cap > 1000000000\n      ORDER BY market_cap DESC\n      LIMIT 500\n    `);\n\n    res.json({\n      success: true,\n      symbols: result.rows\n    });\n  } catch (error) {\n    console.error('Error fetching symbols:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch symbols'\n    });\n  }\n});\n\n// Get strategy templates\nrouter.get('/templates', (req, res) => {\n  const templates = [\n    {\n      id: 'buy_and_hold',\n      name: 'Buy and Hold',\n      description: 'Simple buy and hold strategy',\n      code: `\n// Buy and Hold Strategy\nif (dayCount === 1) {\n  // Buy equal amounts of each symbol on first day\n  const cashPerSymbol = cash / data.length;\n  \n  for (const [symbol, stockData] of Object.entries(data)) {\n    const quantity = Math.floor(cashPerSymbol / stockData.close);\n    if (quantity > 0) {\n      buy(symbol, quantity, stockData.close);\n      log('Bought ' + quantity + ' shares of ' + symbol +",
      "context": "    201:       FROM stock_fundamentals sf\n    202:       JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n>>> 203:       WHERE market_cap > 1000000000\n    204:       ORDER BY market_cap DESC\n    205:       LIMIT 500"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 25,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    // Validate inputs\n    if (!strategyCode || !symbols || !startDate || !endDate) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required parameters: strategyCode, symbols, startDate, endDate'\n      });\n    }\n\n    if (!Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols must be a non-empty array'\n      });\n    }\n\n    // Create unique backtest ID\n    const backtestId = `",
      "context": "    23:       maxPositions = 10,\n    24:       benchmark = 'SPY'\n>>> 25:     } = req.body;\n    26: \n    27:     // Validate inputs"
    },
    {
      "file": "webapp/lambda/routes/backtest-new.js",
      "line": 349,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n  \n  if (!strategyCode) {\n    return res.status(400).json({\n      success: false,\n      error: 'Strategy code is required'\n    });\n  }\n\n  try {\n    // Basic syntax validation\n    new Function('context', `",
      "context": "    347: // Validate strategy code\n    348: router.post('/validate', (req, res) => {\n>>> 349:   const { strategyCode } = req.body;\n    350:   \n    351:   if (!strategyCode) {"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strategy execution error: ${error.message}`",
      "context": "    194:       return result;\n    195:     } catch (error) {\n>>> 196:       throw new Error(`Strategy execution error: ${error.message}`);\n    197:     }\n    198:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 568,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Starting backtest: ${symbols.length} symbols, ${startDate} to ${endDate}`",
      "context": "    566:     } = req.validated;\n    567: \n>>> 568:     console.log(`🔄 Starting backtest: ${symbols.length} symbols, ${startDate} to ${endDate}`);\n    569: \n    570:     // Initialize backtest engine with validated parameters"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 716,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error fetching data for ${symbol}:`",
      "context": "    714:     return result.rows;\n    715:   } catch (error) {\n>>> 716:     console.error(`Error fetching data for ${symbol}:`, error);\n    717:     return res.status(500).json({ error: 'Database error', details: error.message });\n    718:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 745,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Trying ${symbolQuery.name} table...`",
      "context": "    743:     for (const symbolQuery of symbolQueries) {\n    744:       try {\n>>> 745:         console.log(`🔍 Trying ${symbolQuery.name} table...`);\n    746:         const result = await query(symbolQuery.query, [`%${search}%`, limit]);\n    747:         "
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 746,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    744:       try {\n    745:         console.log(`🔍 Trying ${symbolQuery.name} table...`);\n>>> 746:         const result = await query(symbolQuery.query, [`%${search}%`, limit]);\n    747:         \n    748:         if (result && Array.isArray(result.rows) && result.rows.length > 0) {"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 749,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${result.rows.length} symbols in ${symbolQuery.name}`",
      "context": "    747:         \n    748:         if (result && Array.isArray(result.rows) && result.rows.length > 0) {\n>>> 749:           console.log(`✅ Found ${result.rows.length} symbols in ${symbolQuery.name}`);\n    750:           return res.json({\n    751:             success: true,"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 758,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Table ${symbolQuery.name} failed:`",
      "context": "    756:         }\n    757:       } catch (tableError) {\n>>> 758:         console.log(`⚠️ Table ${symbolQuery.name} failed:`, tableError.message);\n    759:         continue;\n    760:       }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 815,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`",
      "context": "    813:     if (quantity > 0) {\n    814:       buy(symbol, quantity, price);\n>>> 815:       log(\\`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`);\n    816:     }\n    817:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 815,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`",
      "context": "    813:     if (quantity > 0) {\n    814:       buy(symbol, quantity, price);\n>>> 815:       log(\\`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`);\n    816:     }\n    817:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 897,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`RSI Buy: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`",
      "context": "    895:       if (quantity > 0) {\n    896:         buy(symbol, quantity, price);\n>>> 897:         log(\\`RSI Buy: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`);\n    898:       }\n    899:     } else if (position && rsi > RSI_OVERBOUGHT) {"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 901,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`RSI Sell: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`",
      "context": "    899:     } else if (position && rsi > RSI_OVERBOUGHT) {\n    900:       sell(symbol, position.quantity, price);\n>>> 901:       log(\\`RSI Sell: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`);\n    902:     }\n    903:   }"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 1123,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`with(context) { ${strategy} }`",
      "context": "    1121:     // Basic syntax validation\n    1122:     try {\n>>> 1123:       new Function('context', `with(context) { ${strategy} }`);\n    1124:       res.json({ valid: true, message: 'Strategy code is valid' });\n    1125:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 681,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.id);\n  if (!strategy) return res.status(404).json({ error: 'Not found' });\n  res.json({ strategy });\n});\n\nrouter.delete('/strategies/:id', (req, res) => {\n  backtestStore.deleteStrategy(req.params.id);\n  res.json({ success: true });\n});\n\n// Get historical data for a symbol\nasync function getHistoricalData(symbol, startDate, endDate) {\n  try {\n    const sqlQuery = `",
      "context": "    679: \n    680: router.get('/strategies/:id', (req, res) => {\n>>> 681:   const strategy = backtestStore.getStrategy(req.params.id);\n    682:   if (!strategy) return res.status(404).json({ error: 'Not found' });\n    683:   res.json({ strategy });"
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 998,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50;\n    const offset = parseInt(req.query.offset) || 0;\n    \n    // Try to get backtest history from database\n    try {\n      const result = await query(`",
      "context": "    996:   try {\n    997:     const userId = req.user.sub;\n>>> 998:     const limit = parseInt(req.query.limit) || 50;\n    999:     const offset = parseInt(req.query.offset) || 0;\n    1000:     "
    },
    {
      "file": "webapp/lambda/routes/backtest.js",
      "line": 1115,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!strategy) {\n      return res.status(400).json({ error: 'Strategy code is required' });\n    }\n\n    // Basic syntax validation\n    try {\n      new Function('context', `",
      "context": "    1113: router.post('/validate', async (req, res) => {\n    1114:   try {\n>>> 1115:     const { strategy } = req.body;\n    1116:     \n    1117:     if (!strategy) {"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 170,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM calendar_events ce\n      ${whereClause}\n    `",
      "context": "    168:     `;\n    169: \n>>> 170:     const countQuery = `\n    171:       SELECT COUNT(*) as total\n    172:       FROM calendar_events ce"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 36,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE table_schema = 'public' \n        AND table_name = 'calendar_events'\n      );\n    `;\n    \n    const tableExists = await query(tableExistsQuery);\n    console.log('Table exists check:', tableExists.rows[0]);\n    \n    if (tableExists.rows[0].exists) {\n      // Count total records\n      const countQuery = `SELECT COUNT(*) as total FROM calendar_events`;\n      const countResult = await query(countQuery);\n      console.log('Total calendar events:', countResult.rows[0]);\n      \n      // Get sample records\n      const sampleQuery = `\n        SELECT symbol, event_type, start_date, title, fetched_at\n        FROM calendar_events \n        ORDER BY fetched_at DESC \n        LIMIT 5\n      `;\n      const sampleResult = await query(sampleQuery);\n      console.log('Sample records:', sampleResult.rows);\n      \n      res.json({\n        tableExists: true,\n        totalRecords: parseInt(countResult.rows[0].total),\n        sampleRecords: sampleResult.rows,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      res.json({\n        tableExists: false,\n        message: 'calendar_events table does not exist',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error in calendar debug:', error);\n    res.status(500).json({ \n      error: 'Debug check failed', \n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Simple test endpoint that returns raw data\nrouter.get('/test', async (req, res) => {\n  try {\n    console.log('Calendar test endpoint called');\n    \n    const testQuery = `\n      SELECT \n        symbol,\n        event_type,\n        start_date,\n        end_date,\n        title\n      FROM calendar_events\n      ORDER BY start_date ASC\n      LIMIT 10\n    `;\n    \n    const result = await query(testQuery);\n    \n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n    \n    res.json({\n      success: true,\n      count: result.rows.length,\n      data: result.rows,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in calendar test:', error);\n    res.status(500).json({ \n      error: 'Test failed', \n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get calendar events (earnings, dividends, splits, etc.)\nrouter.get('/events', async (req, res) => {\n  try {\n    console.log('Calendar events endpoint called with params:', req.query);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const timeFilter = req.query.type || 'upcoming';\n\n    let whereClause = 'WHERE 1=1';\n    // Apply time filters (convert CURRENT_DATE to timestamp for proper comparison)\n    const params = [];\n    switch (timeFilter) {\n      case 'this_week':\n        whereClause += ` AND start_date >= CURRENT_DATE::timestamp AND start_date < (CURRENT_DATE + INTERVAL '7 days')::timestamp`;\n        break;\n      case 'next_week':\n        whereClause += ` AND start_date >= (CURRENT_DATE + INTERVAL '7 days')::timestamp AND start_date < (CURRENT_DATE + INTERVAL '14 days')::timestamp`;\n        break;\n      case 'this_month':\n        whereClause += ` AND start_date >= CURRENT_DATE::timestamp AND start_date < (CURRENT_DATE + INTERVAL '30 days')::timestamp`;\n        break;\n      case 'upcoming':\n      default:\n        whereClause +",
      "context": "    34:       SELECT EXISTS (\n    35:         SELECT FROM information_schema.tables \n>>> 36:         WHERE table_schema = 'public' \n    37:         AND table_name = 'calendar_events'\n    38:       );"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 127,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const timeFilter = req.query.type || 'upcoming';\n\n    let whereClause = 'WHERE 1=1';\n    // Apply time filters (convert CURRENT_DATE to timestamp for proper comparison)\n    const params = [];\n    switch (timeFilter) {\n      case 'this_week':\n        whereClause += ` AND start_date >= CURRENT_DATE::timestamp AND start_date < (CURRENT_DATE + INTERVAL '7 days')::timestamp`;\n        break;\n      case 'next_week':\n        whereClause += ` AND start_date >= (CURRENT_DATE + INTERVAL '7 days')::timestamp AND start_date < (CURRENT_DATE + INTERVAL '14 days')::timestamp`;\n        break;\n      case 'this_month':\n        whereClause += ` AND start_date >= CURRENT_DATE::timestamp AND start_date < (CURRENT_DATE + INTERVAL '30 days')::timestamp`;\n        break;\n      case 'upcoming':\n      default:\n        whereClause += ` AND start_date >= CURRENT_DATE::timestamp`;\n        break;\n    }\n\n    console.log('Using whereClause:', whereClause);\n\n    const eventsQuery = `",
      "context": "    125: router.get('/events', async (req, res) => {\n    126:   try {\n>>> 127:     console.log('Calendar events endpoint called with params:', req.query);\n    128:     \n    129:     const page = parseInt(req.query.page) || 1;"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 250,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n\n    const estimatesQuery = `",
      "context": "    248: router.get('/earnings-estimates', async (req, res) => {\n    249:   try {\n>>> 250:     const page = parseInt(req.query.page) || 1;\n    251:     const limit = parseInt(req.query.limit) || 25;\n    252:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 343,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n\n    const historyQuery = `",
      "context": "    341: router.get('/earnings-history', async (req, res) => {\n    342:   try {\n>>> 343:     const page = parseInt(req.query.page) || 1;\n    344:     const limit = parseInt(req.query.limit) || 25;\n    345:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/calendar.js",
      "line": 441,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n\n    const metricsQuery = `",
      "context": "    439: router.get('/earnings-metrics', async (req, res) => {\n    440:   try {\n>>> 441:     const page = parseInt(req.query.page) || 1;\n    442:     const limit = parseInt(req.query.limit) || 25;\n    443:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/commodities.js",
      "line": 136,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.category;\n    const symbol = req.query.symbol;\n\n    let commodities = [\n      {\n        symbol: 'CL',\n        name: 'Crude Oil',\n        category: 'energy',\n        price: 78.45,\n        change: 0.67,\n        changePercent: 0.86,\n        unit: 'per barrel',\n        currency: 'USD',\n        volume: 245678,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'GC',\n        name: 'Gold',\n        category: 'precious-metals',\n        price: 2034.20,\n        change: -5.30,\n        changePercent: -0.26,\n        unit: 'per ounce',\n        currency: 'USD',\n        volume: 89432,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'SI',\n        name: 'Silver',\n        category: 'precious-metals',\n        price: 24.67,\n        change: 0.23,\n        changePercent: 0.94,\n        unit: 'per ounce',\n        currency: 'USD',\n        volume: 34567,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'HG',\n        name: 'Copper',\n        category: 'base-metals',\n        price: 3.89,\n        change: 0.045,\n        changePercent: 1.17,\n        unit: 'per pound',\n        currency: 'USD',\n        volume: 67890,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'NG',\n        name: 'Natural Gas',\n        category: 'energy',\n        price: 2.87,\n        change: -0.12,\n        changePercent: -4.02,\n        unit: 'per MMBtu',\n        currency: 'USD',\n        volume: 123456,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'ZW',\n        name: 'Wheat',\n        category: 'agriculture',\n        price: 6.45,\n        change: -0.08,\n        changePercent: -1.22,\n        unit: 'per bushel',\n        currency: 'USD',\n        volume: 45678,\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n\n    // Filter by category if specified\n    if (category) {\n      commodities = commodities.filter(c => c.category === category);\n    }\n\n    // Filter by symbol if specified\n    if (symbol) {\n      commodities = commodities.filter(c => c.symbol === symbol);\n    }\n\n    res.json({\n      success: true,\n      data: commodities,\n      filters: {\n        category: category || null,\n        symbol: symbol || null\n      },\n      metadata: {\n        totalCount: commodities.length,\n        priceDate: new Date().toISOString()\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching commodity prices:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch commodity prices',\n      details: error.message\n    });\n  }\n});\n\n// Get market summary\nrouter.get('/market-summary', (req, res) => {\n  try {\n    const summary = {\n      overview: {\n        totalMarketCap: 4.2e12,\n        totalVolume: 1.8e9,\n        activeContracts: 125847,\n        tradingSession: 'open'\n      },\n      performance: {\n        '1d': {\n          gainers: 18,\n          losers: 12,\n          unchanged: 3,\n          topGainer: { symbol: 'HG', name: 'Copper', change: 1.17 },\n          topLoser: { symbol: 'NG', name: 'Natural Gas', change: -4.02 }\n        }\n      },\n      sectors: [\n        {\n          name: 'Energy',\n          weight: 0.35,\n          change: 0.62,\n          volume: 8.9e8\n        },\n        {\n          name: 'Precious Metals',\n          weight: 0.25,\n          change: -0.15,\n          volume: 3.2e8\n        }\n      ]\n    };\n\n    res.json({\n      success: true,\n      data: summary,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching market summary:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market summary',\n      details: error.message\n    });\n  }\n});\n\n// Get correlations\nrouter.get('/correlations', (req, res) => {\n  try {\n    const correlations = {\n      overview: {\n        description: 'Correlation matrix for major commodity sectors',\n        period: '90d',\n        lastUpdated: new Date().toISOString()\n      },\n      matrix: {\n        'energy': {\n          'energy': 1.00,\n          'precious-metals': -0.23,\n          'base-metals': 0.47,\n          'agriculture': 0.12,\n          'livestock': 0.08\n        },\n        'precious-metals': {\n          'energy': -0.23,\n          'precious-metals': 1.00,\n          'base-metals': 0.18,\n          'agriculture': -0.05,\n          'livestock': -0.02\n        }\n      }\n    };\n\n    res.json({\n      success: true,\n      data: correlations,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching correlations:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch correlations'",
      "context": "    134: router.get('/prices', (req, res) => {\n    135:   try {\n>>> 136:     const category = req.query.category;\n    137:     const symbol = req.query.symbol;\n    138: "
    },
    {
      "file": "webapp/lambda/routes/compliance.js",
      "line": 23,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Supported frameworks: ${supportedFrameworks.join(', ')}`",
      "context": "    21:         success: false,\n    22:         error: 'Unsupported compliance framework',\n>>> 23:         message: `Supported frameworks: ${supportedFrameworks.join(', ')}`\n    24:       });\n    25:     }"
    },
    {
      "file": "webapp/lambda/routes/compliance.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Data deletion request ${result.status}: ${result.reason}`",
      "context": "    137:         message: result.status === 'processed' \n    138:           ? 'Data deletion request processed successfully'\n>>> 139:           : `Data deletion request ${result.status}: ${result.reason}`\n    140:       },\n    141:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/compliance.js",
      "line": 14,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { startDate, endDate, includeDetails = false } = req.query;\n    \n    const supportedFrameworks = ['GDPR', 'SOX', 'PCI_DSS', 'FINRA', 'SEC'];\n    \n    if (!supportedFrameworks.includes(framework.toUpperCase())) {\n      return res.status(400).json({\n        success: false,\n        error: 'Unsupported compliance framework',\n        message: `",
      "context": "    12: router.get('/reports/:framework', async (req, res) => {\n    13:   try {\n>>> 14:     const { framework } = req.params;\n    15:     const { startDate, endDate, includeDetails = false } = req.query;\n    16:     "
    },
    {
      "file": "webapp/lambda/routes/crypto-advanced.js",
      "line": 148,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${symbols[i]}_${symbols[j]}`",
      "context": "    146:         for (let j = i + 1; j < symbols.length; j++) {\n    147:           const correlation = await this.calculatePairCorrelation(symbols[i], symbols[j]);\n>>> 148:           correlations[`${symbols[i]}_${symbols[j]}`] = correlation;\n    149:         }\n    150:       }"
    },
    {
      "file": "webapp/lambda/routes/crypto-advanced.js",
      "line": 566,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Over-concentrated in ${holding.symbol} (${(weight * 100).toFixed(1)}%)`",
      "context": "    564:         type: 'concentration',\n    565:         priority: 'high',\n>>> 566:         message: `Over-concentrated in ${holding.symbol} (${(weight * 100).toFixed(1)}%)`,\n    567:         action: 'Consider reducing position size to improve diversification'\n    568:       });"
    },
    {
      "file": "webapp/lambda/routes/crypto-advanced.js",
      "line": 273,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = 'BTC'\n          AND interval_type = '1d'\n          AND timestamp >= NOW() - INTERVAL '30 days'\n        ORDER BY timestamp\n      `);\n\n      if (marketReturns.rows.length < 2) return 1.0;\n\n      // Calculate market daily returns\n      const btcReturns = [];\n      for (let i = 1; i < marketReturns.rows.length; i++) {\n        const dailyReturn = (marketReturns.rows[i].close_price - marketReturns.rows[i-1].close_price) / \n          marketReturns.rows[i-1].close_price;\n        btcReturns.push(dailyReturn);\n      }\n\n      // Calculate portfolio beta (simplified)\n      const portfolioSymbols = portfolioData.map(h => h.symbol);\n      let weightedBeta = 0;\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n\n      for (const holding of portfolioData) {\n        const weight = (holding.quantity * holding.current_price) / totalValue;\n        const assetBeta = await this.calculateAssetBeta(holding.symbol, btcReturns);\n        weightedBeta +",
      "context": "    271:         SELECT close_price, timestamp\n    272:         FROM crypto_prices\n>>> 273:         WHERE symbol = 'BTC'\n    274:           AND interval_type = '1d'\n    275:           AND timestamp >= NOW() - INTERVAL '30 days'"
    },
    {
      "file": "webapp/lambda/routes/crypto-risk.js",
      "line": 546,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio VaR is ${riskMetrics.var.var_percentage.toFixed(1)}%, indicating high potential losses`",
      "context": "    544:           priority: 'high',\n    545:           title: 'High Value at Risk Detected',\n>>> 546:           description: `Portfolio VaR is ${riskMetrics.var.var_percentage.toFixed(1)}%, indicating high potential losses`,\n    547:           actions: [\n    548:             'Consider reducing position sizes',"
    },
    {
      "file": "webapp/lambda/routes/crypto-risk.js",
      "line": 606,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Worst-case scenario shows ${riskMetrics.stressTests.worst_case_scenario.loss_percentage.toFixed(1)}% loss`",
      "context": "    604:           priority: 'high',\n    605:           title: 'Poor Stress Test Performance',\n>>> 606:           description: `Worst-case scenario shows ${riskMetrics.stressTests.worst_case_scenario.loss_percentage.toFixed(1)}% loss`,\n    607:           actions: [\n    608:             'Implement hedging strategies',"
    },
    {
      "file": "webapp/lambda/routes/crypto-signals.js",
      "line": 22,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient price data for ${symbol}`",
      "context": "    20:       \n    21:       if (priceData.length < 50) {\n>>> 22:         throw new Error(`Insufficient price data for ${symbol}`);\n    23:       }\n    24: "
    },
    {
      "file": "webapp/lambda/routes/crypto-signals.js",
      "line": 650,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { timeframe = '1h' } = req.query;\n    \n    logger.info('Crypto signals generation request', {\n      symbol,\n      timeframe,\n      correlation_id: correlationId\n    });\n\n    // Generate comprehensive signals\n    const signalData = await signalsEngine.generateSignals(symbol.toUpperCase(), timeframe);\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_signals_generation_complete', duration, {\n      symbol,\n      timeframe,\n      correlation_id: correlationId,\n      signal_strength: signalData.overallSignal.strength\n    });\n\n    res.json({\n      success: true,\n      data: signalData,\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto signals generation failed', error, {\n      symbol: req.params.symbol,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate crypto trading signals',\n      error_code: 'CRYPTO_SIGNALS_GENERATION_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\n// GET /crypto-signals/multi/:symbols - Generate signals for multiple symbols\nrouter.get('/multi/:symbols', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    const symbols = req.params.symbols.split(',').map(s => s.trim().toUpperCase());\n    const { timeframe = '1h' } = req.query;\n    \n    logger.info('Multi-crypto signals generation request', {\n      symbols,\n      timeframe,\n      correlation_id: correlationId\n    });\n\n    // Generate signals for all symbols in parallel\n    const signalPromises = symbols.map(symbol => \n      signalsEngine.generateSignals(symbol, timeframe)\n        .catch(error => ({\n          symbol,\n          error: error.message\n        }))\n    );\n\n    const results = await Promise.all(signalPromises);\n\n    // Separate successful results from errors\n    const successful = results.filter(r => !r.error);\n    const failed = results.filter(r => r.error);\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('multi_crypto_signals_generation', duration, {\n      symbols,\n      successful_count: successful.length,\n      failed_count: failed.length,\n      correlation_id: correlationId\n    });\n\n    res.json({\n      success: true,\n      data: {\n        signals: successful,\n        errors: failed,\n        summary: {\n          total_requested: symbols.length,\n          successful: successful.length,\n          failed: failed.length\n        }\n      },\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Multi-crypto signals generation failed', error, {\n      symbols: req.params.symbols,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate multi-crypto trading signals',\n      error_code: 'MULTI_CRYPTO_SIGNALS_FAILED'",
      "context": "    648:   \n    649:   try {\n>>> 650:     const { symbol } = req.params;\n    651:     const { timeframe = '1h' } = req.query;\n    652:     "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 486,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + (params.length + 1) + '",
      "context": "    484:     \n    485:     if (symbol) {\n>>> 486:       whereClause += ' AND (related_symbols LIKE $' + (params.length + 1) + ' OR related_symbols LIKE $' + (params.length + 2) + ')';\n    487:       params.push(`%${symbol.toUpperCase()}%`);\n    488:       params.push(`%${symbol.toLowerCase()}%`);"
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 486,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + (params.length + 2) + '",
      "context": "    484:     \n    485:     if (symbol) {\n>>> 486:       whereClause += ' AND (related_symbols LIKE $' + (params.length + 1) + ' OR related_symbols LIKE $' + (params.length + 2) + ')';\n    487:       params.push(`%${symbol.toUpperCase()}%`);\n    488:       params.push(`%${symbol.toLowerCase()}%`);"
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 228,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    226:     if (search) {\n    227:       whereClause += ' AND (symbol ILIKE $3 OR name ILIKE $3)';\n>>> 228:       params.push(`%${search}%`);\n    229:     }\n    230: "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 228,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    226:     if (search) {\n    227:       whereClause += ' AND (symbol ILIKE $3 OR name ILIKE $3)';\n>>> 228:       params.push(`%${search}%`);\n    229:     }\n    230: "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 254,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total \n      FROM crypto_assets \n      ${countWhere}\n    `",
      "context": "    252:     const countWhere = search ? 'WHERE is_active = true AND (symbol ILIKE $1 OR name ILIKE $1)' : 'WHERE is_active = true';\n    253:     \n>>> 254:     const countResult = await query(`\n    255:       SELECT COUNT(*) as total \n    256:       FROM crypto_assets "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 487,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${symbol.toUpperCase()}%`",
      "context": "    485:     if (symbol) {\n    486:       whereClause += ' AND (related_symbols LIKE $' + (params.length + 1) + ' OR related_symbols LIKE $' + (params.length + 2) + ')';\n>>> 487:       params.push(`%${symbol.toUpperCase()}%`);\n    488:       params.push(`%${symbol.toLowerCase()}%`);\n    489:     }"
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 488,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${symbol.toLowerCase()}%`",
      "context": "    486:       whereClause += ' AND (related_symbols LIKE $' + (params.length + 1) + ' OR related_symbols LIKE $' + (params.length + 2) + ')';\n    487:       params.push(`%${symbol.toUpperCase()}%`);\n>>> 488:       params.push(`%${symbol.toLowerCase()}%`);\n    489:     }\n    490: "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 223,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE is_active = true';\n    let params = [limit, offset];\n    \n    if (search) {\n      whereClause +",
      "context": "    221:     const search = req.query.search || '';\n    222: \n>>> 223:     let whereClause = 'WHERE is_active = true';\n    224:     let params = [limit, offset];\n    225:     "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 183,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const limit = parseInt(req.query.limit) || 100;\n    \n    const result = await query(`",
      "context": "    181: router.get('/prices/:symbol', async (req, res) => {\n    182:   try {\n>>> 183:     const { symbol } = req.params;\n    184:     const limit = parseInt(req.query.limit) || 100;\n    185:     "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 218,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 50;\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n\n    let whereClause = 'WHERE is_active = true';\n    let params = [limit, offset];\n    \n    if (search) {\n      whereClause += '",
      "context": "    216: router.get('/assets', async (req, res) => {\n    217:   try {\n>>> 218:     const page = parseInt(req.query.page) || 1;\n    219:     const limit = parseInt(req.query.limit) || 50;\n    220:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 282,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.chain;\n    const limit = parseInt(req.query.limit) || 50;\n\n    let whereClause = '';\n    let params = [limit];\n    \n    if (chain) {\n      whereClause = '",
      "context": "    280: router.get('/defi/tvl', async (req, res) => {\n    281:   try {\n>>> 282:     const chain = req.query.chain;\n    283:     const limit = parseInt(req.query.limit) || 50;\n    284: "
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 369,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const days = parseInt(req.query.days) || 30;\n    const interval = req.query.interval || 'daily'; // daily, hourly\n    \n    // Calculate the date range\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - days);\n\n    const result = await query(`",
      "context": "    367: router.get('/historical/:symbol', async (req, res) => {\n    368:   try {\n>>> 369:     const { symbol } = req.params;\n    370:     const days = parseInt(req.query.days) || 30;\n    371:     const interval = req.query.interval || 'daily'; // daily, hourly"
    },
    {
      "file": "webapp/lambda/routes/crypto.js",
      "line": 473,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 20;\n    const category = req.query.category; // bitcoin, ethereum, defi, nft, etc.\n    const symbol = req.query.symbol;\n    \n    let whereClause = '';\n    let params = [limit];\n    \n    if (category) {\n      whereClause += '",
      "context": "    471: router.get('/news', async (req, res) => {\n    472:   try {\n>>> 473:     const limit = parseInt(req.query.limit) || 20;\n    474:     const category = req.query.category; // bitcoin, ethereum, defi, nft, etc.\n    475:     const symbol = req.query.symbol;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`WHERE symbol = $${paramCount}`",
      "context": "    273:     if (symbol) {\n    274:       paramCount++;\n>>> 275:       whereClause = `WHERE symbol = $${paramCount}`;\n    276:       queryParams.push(symbol.toUpperCase());\n    277:     }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 279,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        period,\n        current_estimate,\n        seven_days_ago,\n        thirty_days_ago,\n        sixty_days_ago,\n        ninety_days_ago,\n        revision_direction,\n        fetched_at\n      FROM eps_revisions\n      ${whereClause}\n      ORDER BY symbol, period DESC\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    277:     }\n    278: \n>>> 279:     const revisionsQuery = `\n    280:       SELECT \n    281:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 296,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total FROM eps_revisions ${whereClause}\n    `",
      "context": "    294:     `;\n    295: \n>>> 296:     const countQuery = `\n    297:       SELECT COUNT(*) as total FROM eps_revisions ${whereClause}\n    298:     `;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`WHERE symbol = $${paramCount}`",
      "context": "    273:     if (symbol) {\n    274:       paramCount++;\n>>> 275:       whereClause = `WHERE symbol = $${paramCount}`;\n    276:       queryParams.push(symbol.toUpperCase());\n    277:     }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 350,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        period,\n        current_estimate,\n        seven_days_ago,\n        thirty_days_ago,\n        sixty_days_ago,\n        ninety_days_ago,\n        number_of_revisions_up,\n        number_of_revisions_down,\n        fetched_at\n      FROM eps_trend\n      ${whereClause}\n      ORDER BY symbol, period DESC\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    348:     }\n    349: \n>>> 350:     const trendQuery = `\n    351:       SELECT \n    352:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 368,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total FROM eps_trend ${whereClause}\n    `",
      "context": "    366:     `;\n    367: \n>>> 368:     const countQuery = `\n    369:       SELECT COUNT(*) as total FROM eps_trend ${whereClause}\n    370:     `;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`WHERE symbol = $${paramCount}`",
      "context": "    273:     if (symbol) {\n    274:       paramCount++;\n>>> 275:       whereClause = `WHERE symbol = $${paramCount}`;\n    276:       queryParams.push(symbol.toUpperCase());\n    277:     }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 422,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        period,\n        growth_estimate,\n        number_of_analysts,\n        low_estimate,\n        high_estimate,\n        mean_estimate,\n        fetched_at\n      FROM growth_estimates\n      ${whereClause}\n      ORDER BY symbol, period DESC\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    420:     }\n    421: \n>>> 422:     const growthQuery = `\n    423:       SELECT \n    424:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 438,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total FROM growth_estimates ${whereClause}\n    `",
      "context": "    436:     `;\n    437: \n>>> 438:     const countQuery = `\n    439:       SELECT COUNT(*) as total FROM growth_estimates ${whereClause}\n    440:     `;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 488,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`WHERE series_id = $${paramCount}`",
      "context": "    486:     if (series) {\n    487:       paramCount++;\n>>> 488:       whereClause = `WHERE series_id = $${paramCount}`;\n    489:       queryParams.push(series);\n    490:     }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 492,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        series_id,\n        date,\n        value,\n        title,\n        units,\n        frequency,\n        last_updated\n      FROM economic_data\n      ${whereClause}\n      ORDER BY series_id, date DESC\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    490:     }\n    491: \n>>> 492:     const economicQuery = `\n    493:       SELECT \n    494:         series_id,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 507,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total FROM economic_data ${whereClause}\n    `",
      "context": "    505:     `;\n    506: \n>>> 507:     const countQuery = `\n    508:       SELECT COUNT(*) as total FROM economic_data ${whereClause}\n    509:     `;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 547,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Economic data endpoint called with limit: ${limit}`",
      "context": "    545:   try {\n    546:     const limit = Math.min(parseInt(req.query.limit) || 50, 100);\n>>> 547:     console.log(`Economic data endpoint called with limit: ${limit}`);\n    548:     \n    549:     const economicQuery = `"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 667,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            SELECT \n              '${table.name}' as table_name,\n              COUNT(*) as record_count,\n              MAX(fetched_at) as last_updated\n            FROM ${table.name}\n          `",
      "context": "    665:         let tableQuery;\n    666:         if (table.hasTimestamp) {\n>>> 667:           tableQuery = `\n    668:             SELECT \n    669:               '${table.name}' as table_name,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 675,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            SELECT \n              '${table.name}' as table_name,\n              COUNT(*) as record_count,\n              NULL as last_updated\n            FROM ${table.name}\n          `",
      "context": "    673:           `;\n    674:         } else {\n>>> 675:           tableQuery = `\n    676:             SELECT \n    677:               '${table.name}' as table_name,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 761,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${table} not accessible:`",
      "context": "    759: \n    760:       } catch (tableError) {\n>>> 761:         console.warn(`Table ${table} not accessible:`, tableError.message);\n    762:         results[name] = [];\n    763:       }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 794,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n          SELECT DISTINCT item_name, COUNT(*) as occurrence_count\n          FROM ${table}\n          GROUP BY item_name\n          ORDER BY item_name\n        `",
      "context": "    792:     for (const table of tables) {\n    793:       try {\n>>> 794:         const metricsQuery = `\n    795:           SELECT DISTINCT item_name, COUNT(*) as occurrence_count\n    796:           FROM ${table}"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 761,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${table} not accessible:`",
      "context": "    759: \n    760:       } catch (tableError) {\n>>> 761:         console.warn(`Table ${table} not accessible:`, tableError.message);\n    762:         results[name] = [];\n    763:       }"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 856,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [DATA] NAAIM query returned ${dataResult.rows.length} records`",
      "context": "    854:     ]);\n    855:     \n>>> 856:     console.log(`📊 [DATA] NAAIM query returned ${dataResult.rows.length} records`);\n    857:     \n    858:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 902,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`😨 [DATA] Fear & Greed query returned ${dataResult.rows.length} records`",
      "context": "    900:     ]);\n    901:     \n>>> 902:     console.log(`😨 [DATA] Fear & Greed query returned ${dataResult.rows.length} records`);\n    903:     \n    904:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 949,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [DATA] AAII sentiment query returned ${dataResult.rows.length} records`",
      "context": "    947:     ]);\n    948:     \n>>> 949:     console.log(`📈 [DATA] AAII sentiment query returned ${dataResult.rows.length} records`);\n    950:     \n    951:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1011,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚙️ [DATA] Status query returned ${statusResult.rows.length} loaders`",
      "context": "    1009:     ]);\n    1010:     \n>>> 1011:     console.log(`⚙️ [DATA] Status query returned ${statusResult.rows.length} loaders`);\n    1012:     \n    1013:     // Calculate summary statistics"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1045,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [DATA] Trigger request for loader: ${loaderName}`",
      "context": "    1043:   try {\n    1044:     const { loaderName } = req.params;\n>>> 1045:     console.log(`🚀 [DATA] Trigger request for loader: ${loaderName}`);\n    1046:     \n    1047:     // Validate loader name"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1052,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid loader name. Valid loaders: ${validLoaders.join(', ')}`",
      "context": "    1050:       return res.status(400).json({\n    1051:         success: false,\n>>> 1052:         error: `Invalid loader name. Valid loaders: ${validLoaders.join(', ')}`,\n    1053:         timestamp: new Date().toISOString()\n    1054:       });"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1059,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`task-${loaderName}-${Date.now()}`",
      "context": "    1057:     // In a full implementation, this would trigger the ECS task\n    1058:     // For now, return a placeholder response\n>>> 1059:     const taskId = `task-${loaderName}-${Date.now()}`;\n    1060:     \n    1061:     console.log(`🚀 [DATA] Would trigger ECS task for ${loaderName} with ID: ${taskId}`);"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1061,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [DATA] Would trigger ECS task for ${loaderName} with ID: ${taskId}`",
      "context": "    1059:     const taskId = `task-${loaderName}-${Date.now()}`;\n    1060:     \n>>> 1061:     console.log(`🚀 [DATA] Would trigger ECS task for ${loaderName} with ID: ${taskId}`);\n    1062:     \n    1063:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1066,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Data loader '${loaderName}' cannot be triggered without ECS integration`",
      "context": "    1064:       success: false,\n    1065:       error: 'ECS task triggering requires additional infrastructure setup',\n>>> 1066:       message: `Data loader '${loaderName}' cannot be triggered without ECS integration`,\n    1067:       data: {\n    1068:         requestedLoader: loaderName,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1081,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [DATA] Trigger error for ${req.params.loaderName}:`",
      "context": "    1079:     \n    1080:   } catch (error) {\n>>> 1081:     console.error(`❌ [DATA] Trigger error for ${req.params.loaderName}:`, error);\n    1082:     res.status(500).json({ \n    1083:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 672,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.name}",
      "context": "    670:               COUNT(*) as record_count,\n    671:               MAX(fetched_at) as last_updated\n>>> 672:             FROM ${table.name}\n    673:           `;\n    674:         } else {"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 672,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.name}",
      "context": "    670:               COUNT(*) as record_count,\n    671:               MAX(fetched_at) as last_updated\n>>> 672:             FROM ${table.name}\n    673:           `;\n    674:         } else {"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 735,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    733:         const financialQuery = `\n    734:           SELECT date, item_name, value\n>>> 735:           FROM ${table}\n    736:           WHERE symbol = $1\n    737:           ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 735,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    733:         const financialQuery = `\n    734:           SELECT date, item_name, value\n>>> 735:           FROM ${table}\n    736:           WHERE symbol = $1\n    737:           ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 264,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const symbol = req.query.symbol;\n\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    if (symbol) {\n      paramCount++;\n      whereClause = `",
      "context": "    262: router.get('/eps-revisions', async (req, res) => {\n    263:   try {\n>>> 264:     const page = parseInt(req.query.page) || 1;\n    265:     const limit = parseInt(req.query.limit) || 25;\n    266:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 264,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const symbol = req.query.symbol;\n\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    if (symbol) {\n      paramCount++;\n      whereClause = `",
      "context": "    262: router.get('/eps-revisions', async (req, res) => {\n    263:   try {\n>>> 264:     const page = parseInt(req.query.page) || 1;\n    265:     const limit = parseInt(req.query.limit) || 25;\n    266:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 264,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const symbol = req.query.symbol;\n\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    if (symbol) {\n      paramCount++;\n      whereClause = `",
      "context": "    262: router.get('/eps-revisions', async (req, res) => {\n    263:   try {\n>>> 264:     const page = parseInt(req.query.page) || 1;\n    265:     const limit = parseInt(req.query.limit) || 25;\n    266:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 477,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n    const series = req.query.series;\n\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    if (series) {\n      paramCount++;\n      whereClause = `",
      "context": "    475: router.get('/economic', async (req, res) => {\n    476:   try {\n>>> 477:     const page = parseInt(req.query.page) || 1;\n    478:     const limit = parseInt(req.query.limit) || 25;\n    479:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 546,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50, 100);\n    console.log(`",
      "context": "    544: router.get('/economic/data', async (req, res) => {\n    545:   try {\n>>> 546:     const limit = Math.min(parseInt(req.query.limit) || 50, 100);\n    547:     console.log(`Economic data endpoint called with limit: ${limit}`);\n    548:     "
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 582,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50;\n    const naaimQuery = `",
      "context": "    580: router.get('/naaim', async (req, res) => {\n    581:   try {\n>>> 582:     const limit = parseInt(req.query.limit) || 50;\n    583:     const naaimQuery = `\n    584:       SELECT "
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 614,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50;    const fearGreedQuery = `",
      "context": "    612: router.get('/fear-greed', async (req, res) => {\n    613:   try {\n>>> 614:     const limit = parseInt(req.query.limit) || 50;    const fearGreedQuery = `\n    615:       SELECT \n    616:         date,"
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 714,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const limit = parseInt(req.query.limit) || 10;\n\n    // Query all financial statement types\n    const queries = [\n      { name: 'TTM Income Statement', table: 'ttm_income_stmt' },\n      { name: 'TTM Cash Flow', table: 'ttm_cashflow' },\n      { name: 'Annual Income Statement', table: 'income_stmt' },\n      { name: 'Annual Cash Flow', table: 'cash_flow' },\n      { name: 'Balance Sheet', table: 'balance_sheet' },\n      { name: 'Quarterly Income Statement', table: 'quarterly_income_stmt' },\n      { name: 'Quarterly Cash Flow', table: 'quarterly_cashflow' },\n      { name: 'Quarterly Balance Sheet', table: 'quarterly_balance_sheet' }\n    ];\n\n    const results = {};\n\n    for (const { name, table } of queries) {\n      try {\n        const financialQuery = `",
      "context": "    712: router.get('/financials/:symbol', async (req, res) => {\n    713:   try {\n>>> 714:     const { symbol } = req.params;\n    715:     const limit = parseInt(req.query.limit) || 10;\n    716: "
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1044,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    console.log(`",
      "context": "    1042: router.post('/trigger/:loaderName', async (req, res) => {\n    1043:   try {\n>>> 1044:     const { loaderName } = req.params;\n    1045:     console.log(`🚀 [DATA] Trigger request for loader: ${loaderName}`);\n    1046:     "
    },
    {
      "file": "webapp/lambda/routes/data.js",
      "line": 1081,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.loaderName}:`, error);\n    res.status(500).json({ \n      success: false,\n      error: 'Failed to trigger data loader'",
      "context": "    1079:     \n    1080:   } catch (error) {\n>>> 1081:     console.error(`❌ [DATA] Trigger error for ${req.params.loaderName}:`, error);\n    1082:     res.status(500).json({ \n    1083:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Database performance analysis initiated`",
      "context": "    69:     const { includeSlowQueries, includeIndexAnalysis, includeTableStats } = req.body;\n    70: \n>>> 71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n    72:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    73:       options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n>>> 72:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    73:       options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },\n    74:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`rec_${analysis.id}_${index}`",
      "context": "    100:     analysis.recommendations = analysis.recommendations.map((rec, index) => ({\n    101:       ...rec,\n>>> 102:       id: `rec_${analysis.id}_${index}`,\n    103:       analysisId: analysis.id\n    104:     }));"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 108,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database analysis completed in ${totalDuration}ms`",
      "context": "    106:     const totalDuration = Date.now() - requestStart;\n    107: \n>>> 108:     console.log(`✅ [${requestId}] Database analysis completed in ${totalDuration}ms`, {\n    109:       analysisId: analysis.id,\n    110:       slowQueries: analysis.slowQueries.length,"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    130:     }, {\n    131:       requestId,\n>>> 132:       analysisDuration: `${totalDuration}ms`\n    133:     });\n    134: "
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 137,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database analysis FAILED after ${errorDuration}ms:`",
      "context": "    135:   } catch (error) {\n    136:     const errorDuration = Date.now() - requestStart;\n>>> 137:     console.error(`❌ [${requestId}] Database analysis FAILED after ${errorDuration}ms:`, {\n    138:       error: error.message,\n    139:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${errorDuration}ms`",
      "context": "    142:     res.serverError('Database performance analysis failed', {\n    143:       requestId,\n>>> 144:       duration: `${errorDuration}ms`,\n    145:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    146:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${requestId}] Database optimization initiated`",
      "context": "    158:     const { dryRun, maxIndexes, applyRecommendations } = req.body;\n    159: \n>>> 160:     console.log(`🔧 [${requestId}] Database optimization initiated`, {\n    161:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    162:       dryRun,"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n>>> 72:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    73:       options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },\n    74:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`rec_${analysis.id}_${analysis.recommendations.indexOf(rec)}`",
      "context": "    184:     // Filter recommendations to only those requested\n    185:     const requestedRecommendations = analysis.recommendations.filter(rec => {\n>>> 186:       const recId = `rec_${analysis.id}_${analysis.recommendations.indexOf(rec)}`;\n    187:       return applyRecommendations.includes(recId);\n    188:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 205,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database optimization completed in ${totalDuration}ms`",
      "context": "    203:     const totalDuration = Date.now() - requestStart;\n    204: \n>>> 205:     console.log(`✅ [${requestId}] Database optimization completed in ${totalDuration}ms`, {\n    206:       dryRun,\n    207:       applied: optimizationResults.applied.length,"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    130:     }, {\n    131:       requestId,\n>>> 132:       analysisDuration: `${totalDuration}ms`\n    133:     });\n    134: "
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 231,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database optimization FAILED after ${errorDuration}ms:`",
      "context": "    229:   } catch (error) {\n    230:     const errorDuration = Date.now() - requestStart;\n>>> 231:     console.error(`❌ [${requestId}] Database optimization FAILED after ${errorDuration}ms:`, {\n    232:       error: error.message,\n    233:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${errorDuration}ms`",
      "context": "    142:     res.serverError('Database performance analysis failed', {\n    143:       requestId,\n>>> 144:       duration: `${errorDuration}ms`,\n    145:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    146:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Database metrics request`",
      "context": "    249: \n    250:   try {\n>>> 251:     console.log(`📊 [${requestId}] Database metrics request`, {\n    252:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'\n    253:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n>>> 72:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    73:       options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },\n    74:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 268,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database metrics request failed:`",
      "context": "    266: \n    267:   } catch (error) {\n>>> 268:     console.error(`❌ [${requestId}] Database metrics request failed:`, {\n    269:       error: error.message\n    270:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 286,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${requestId}] Database schema request`",
      "context": "    284: \n    285:   try {\n>>> 286:     console.log(`📋 [${requestId}] Database schema request`, {\n    287:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'\n    288:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n>>> 72:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    73:       options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },\n    74:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 310,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database schema request failed:`",
      "context": "    308: \n    309:   } catch (error) {\n>>> 310:     console.error(`❌ [${requestId}] Database schema request failed:`, {\n    311:       error: error.message\n    312:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 349,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database health check failed:`",
      "context": "    347: \n    348:   } catch (error) {\n>>> 349:     console.error(`❌ [${requestId}] Database health check failed:`, {\n    350:       error: error.message\n    351:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 144,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      originalError: process.env.NODE_ENV === '",
      "context": "    142:     res.serverError('Database performance analysis failed', {\n    143:       requestId,\n>>> 144:       duration: `${errorDuration}ms`,\n    145:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    146:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 144,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      originalError: process.env.NODE_ENV === '",
      "context": "    142:     res.serverError('Database performance analysis failed', {\n    143:       requestId,\n>>> 144:       duration: `${errorDuration}ms`,\n    145:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    146:     });"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 272,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n      requestId,\n      originalError: process.env.NODE_ENV === '",
      "context": "    270:     });\n    271: \n>>> 272:     res.serverError('Failed to get database metrics', {\n    273:       requestId,\n    274:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 272,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n      requestId,\n      originalError: process.env.NODE_ENV === '",
      "context": "    270:     });\n    271: \n>>> 272:     res.serverError('Failed to get database metrics', {\n    273:       requestId,\n    274:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 272,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n      requestId,\n      originalError: process.env.NODE_ENV === '",
      "context": "    270:     });\n    271: \n>>> 272:     res.serverError('Failed to get database metrics', {\n    273:       requestId,\n    274:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 69,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    console.log(`",
      "context": "    67: \n    68:   try {\n>>> 69:     const { includeSlowQueries, includeIndexAnalysis, includeTableStats } = req.body;\n    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {"
    },
    {
      "file": "webapp/lambda/routes/database-optimization.js",
      "line": 69,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    console.log(`",
      "context": "    67: \n    68:   try {\n>>> 69:     const { includeSlowQueries, includeIndexAnalysis, includeTableStats } = req.body;\n    70: \n    71:     console.log(`🔍 [${requestId}] Database performance analysis initiated`, {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 22,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏥 [${diagnosticId}] Starting comprehensive health check...`",
      "context": "    20:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    21:     \n>>> 22:     console.log(`🏥 [${diagnosticId}] Starting comprehensive health check...`);\n    23:     \n    24:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 33,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏥 [${diagnosticId}] Checking circuit breaker health...`",
      "context": "    31:         \n    32:         // Circuit breaker health\n>>> 33:         console.log(`🏥 [${diagnosticId}] Checking circuit breaker health...`);\n    34:         const circuitBreakerHealth = circuitBreakerReset.getCircuitBreakerStatus();\n    35:         health.checks.circuitBreakers = {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 41,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏥 [${diagnosticId}] Testing database connectivity...`",
      "context": "    39:         \n    40:         // Database connectivity\n>>> 41:         console.log(`🏥 [${diagnosticId}] Testing database connectivity...`);\n    42:         try {\n    43:             const database = require('../utils/database');"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 57,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏥 [${diagnosticId}] Testing AWS Secrets Manager...`",
      "context": "    55:         \n    56:         // AWS Secrets Manager\n>>> 57:         console.log(`🏥 [${diagnosticId}] Testing AWS Secrets Manager...`);\n    58:         try {\n    59:             const secretArn = process.env.DB_SECRET_ARN;"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 99,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏥 [${diagnosticId}] Health check completed in ${health.duration}ms: ${health.status}`",
      "context": "    97:         health.duration = Date.now() - startTime;\n    98:         \n>>> 99:         console.log(`🏥 [${diagnosticId}] Health check completed in ${health.duration}ms: ${health.status}`);\n    100:         \n    101:         res.json(success(health));"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Health check failed after ${duration}ms:`",
      "context": "    103:     } catch (error) {\n    104:         const duration = Date.now() - startTime;\n>>> 105:         console.error(`❌ [${diagnosticId}] Health check failed after ${duration}ms:`, error.message);\n    106:         \n    107:         res.json(error(error.message, {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${diagnosticId}] Manual circuit breaker reset requested...`",
      "context": "    120:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    121:     \n>>> 122:     console.log(`🔄 [${diagnosticId}] Manual circuit breaker reset requested...`);\n    123:     \n    124:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${diagnosticId}] Circuit breaker reset completed: ${result.reset} breakers reset`",
      "context": "    125:         const result = circuitBreakerReset.resetAllCircuitBreakers();\n    126:         \n>>> 127:         console.log(`✅ [${diagnosticId}] Circuit breaker reset completed: ${result.reset} breakers reset`);\n    128:         \n    129:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Successfully reset ${result.reset} circuit breakers`",
      "context": "    130:             ...result,\n    131:             diagnosticId,\n>>> 132:             message: `Successfully reset ${result.reset} circuit breakers`\n    133:         }));\n    134:         "
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Circuit breaker reset failed:`",
      "context": "    134:         \n    135:     } catch (error) {\n>>> 136:         console.error(`❌ [${diagnosticId}] Circuit breaker reset failed:`, error.message);\n    137:         res.json(error(error.message, { diagnosticId, operation: 'reset-circuit-breakers' }));\n    138:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 148,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧪 [${diagnosticId}] Manual database connectivity test requested...`",
      "context": "    146:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    147:     \n>>> 148:     console.log(`🧪 [${diagnosticId}] Manual database connectivity test requested...`);\n    149:     \n    150:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Database test failed:`",
      "context": "    167:         \n    168:     } catch (error) {\n>>> 169:         console.error(`❌ [${diagnosticId}] Database test failed:`, error.message);\n    170:         res.json(error(error.message, { diagnosticId, operation: 'test-database' }));\n    171:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 181,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 [${diagnosticId}] Emergency database recovery requested...`",
      "context": "    179:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    180:     \n>>> 181:     console.log(`🚨 [${diagnosticId}] Emergency database recovery requested...`);\n    182:     \n    183:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 202,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Emergency recovery failed:`",
      "context": "    200:         \n    201:     } catch (error) {\n>>> 202:         console.error(`❌ [${diagnosticId}] Emergency recovery failed:`, error.message);\n    203:         res.json(error(error.message, { diagnosticId, operation: 'emergency-recovery' }));\n    204:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${diagnosticId}] Secrets Manager diagnostic requested...`",
      "context": "    212:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    213:     \n>>> 214:     console.log(`🔑 [${diagnosticId}] Secrets Manager diagnostic requested...`);\n    215:     \n    216:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 244,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Secrets Manager test passed using method: ${result.method}`",
      "context": "    242:             res.json(success({\n    243:                 ...sanitizedResult,\n>>> 244:                 message: `Secrets Manager test passed using method: ${result.method}`\n    245:             }));\n    246:         } else {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Secrets Manager test failed:`",
      "context": "    249:         \n    250:     } catch (error) {\n>>> 251:         console.error(`❌ [${diagnosticId}] Secrets Manager test failed:`, error.message);\n    252:         res.json(error(error.message, { diagnosticId, operation: 'secrets-manager-test' }));\n    253:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 288,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 [${diagnosticId}] Network connectivity test requested...`",
      "context": "    286:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    287:     \n>>> 288:     console.log(`🌐 [${diagnosticId}] Network connectivity test requested...`);\n    289:     \n    290:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 308,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Network test failed:`",
      "context": "    306:         \n    307:     } catch (error) {\n>>> 308:         console.error(`❌ [${diagnosticId}] Network test failed:`, error.message);\n    309:         res.json(error(error.message, { diagnosticId, operation: 'network-test' }));\n    310:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 320,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚖️ [${diagnosticId}] Connection comparison analysis requested...`",
      "context": "    318:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    319:     \n>>> 320:     console.log(`⚖️ [${diagnosticId}] Connection comparison analysis requested...`);\n    321:     \n    322:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 399,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database configuration error: ${dbConfig.error}`",
      "context": "    397:         \n    398:         if (dbConfig?.error) {\n>>> 399:             comparison.recommendations.push(`Database configuration error: ${dbConfig.error}`);\n    400:         }\n    401:         "
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 406,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚖️ [${diagnosticId}] Connection comparison completed`",
      "context": "    404:         }\n    405:         \n>>> 406:         console.log(`⚖️ [${diagnosticId}] Connection comparison completed`);\n    407:         \n    408:         res.json(success(comparison));"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 411,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Connection comparison failed:`",
      "context": "    409:         \n    410:     } catch (error) {\n>>> 411:         console.error(`❌ [${diagnosticId}] Connection comparison failed:`, error.message);\n    412:         res.json(error(error.message, { diagnosticId, operation: 'connection-comparison' }));\n    413:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 214,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n    \n    try {\n        const secretArn = process.env.DB_SECRET_ARN;\n        \n        if (!secretArn) {\n            return res.json(error('",
      "context": "    212:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    213:     \n>>> 214:     console.log(`🔑 [${diagnosticId}] Secrets Manager diagnostic requested...`);\n    215:     \n    216:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 257,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', (req, res) => {\n  const systemInfo = {\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    platform: process.platform,\n    nodeVersion: process.version,\n    environment: process.env.NODE_ENV || '",
      "context": "    255: \n    256: // System diagnostics endpoint\n>>> 257: router.get('/system', (req, res) => {\n    258:   const systemInfo = {\n    259:     uptime: process.uptime(),"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 263,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    lambda: {\n      functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    261:     platform: process.platform,\n    262:     nodeVersion: process.version,\n>>> 263:     environment: process.env.NODE_ENV || 'development',\n    264:     lambda: {\n    265:       functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 265,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || '",
      "context": "    263:     environment: process.env.NODE_ENV || 'development',\n    264:     lambda: {\n>>> 265:       functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    266:       functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n    267:       memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 266,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || '",
      "context": "    264:     lambda: {\n    265:       functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n>>> 266:       functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n    267:       memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',\n    268:       region: process.env.AWS_REGION || 'unknown'"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 267,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      region: process.env.AWS_REGION || '",
      "context": "    265:       functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    266:       functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n>>> 267:       memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',\n    268:       region: process.env.AWS_REGION || 'unknown'\n    269:     },"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 268,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    },\n    configuration: {\n      hasDbSecretArn: !!process.env.DB_SECRET_ARN,\n      hasApiKeySecret: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n      dbPoolMax: process.env.DB_POOL_MAX || '",
      "context": "    266:       functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n    267:       memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',\n>>> 268:       region: process.env.AWS_REGION || 'unknown'\n    269:     },\n    270:     configuration: {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 273,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      dbConnectTimeout: process.env.DB_CONNECT_TIMEOUT || '",
      "context": "    271:       hasDbSecretArn: !!process.env.DB_SECRET_ARN,\n    272:       hasApiKeySecret: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n>>> 273:       dbPoolMax: process.env.DB_POOL_MAX || 'default',\n    274:       dbConnectTimeout: process.env.DB_CONNECT_TIMEOUT || 'default'\n    275:     }"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 320,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n    \n    try {\n        // Get current environment information\n        const environment = {\n            isLambda: !!process.env.AWS_LAMBDA_FUNCTION_NAME,\n            region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || '",
      "context": "    318:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    319:     \n>>> 320:     console.log(`⚖️ [${diagnosticId}] Connection comparison analysis requested...`);\n    321:     \n    322:     try {"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 326,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    324:         const environment = {\n    325:             isLambda: !!process.env.AWS_LAMBDA_FUNCTION_NAME,\n>>> 326:             region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'unknown',\n    327:             functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    328:             platform: process.platform,"
    },
    {
      "file": "webapp/lambda/routes/diagnostics.js",
      "line": 327,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            platform: process.platform,\n            nodeVersion: process.version\n        };\n        \n        // Get database configuration for comparison\n        const secretArn = process.env.DB_SECRET_ARN;\n        let dbConfig = null;\n        \n        if (secretArn) {\n            try {\n                const diagnostic = new SecretsManagerDiagnostic();\n                const result = await diagnostic.diagnoseSecret(secretArn);\n                if (result.success) {\n                    dbConfig = {\n                        host: result.config.host,\n                        port: result.config.port,\n                        database: result.config.dbname,\n                        hasPassword: !!result.config.password,\n                        hasUsername: !!result.config.username\n                    };\n                }\n            } catch (err) {\n                dbConfig = { error: err.message };\n            }\n        }\n        \n        // Working configuration template (from successful ECS tasks)\n        const workingConfig = {\n            connectionString: {\n                sslmode: '",
      "context": "    325:             isLambda: !!process.env.AWS_LAMBDA_FUNCTION_NAME,\n    326:             region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'unknown',\n>>> 327:             functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    328:             platform: process.platform,\n    329:             nodeVersion: process.version"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 28,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND category = $${paramIndex}`",
      "context": "    26:     \n    27:     if (category) {\n>>> 28:       whereClause += ` AND category = $${paramIndex}`;\n    29:       params.push(category);\n    30:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 44,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date >= NOW() - INTERVAL '${intervalClause}'`",
      "context": "    42:     \n    43:     const intervalClause = periodMap[period] || '1 year';\n>>> 44:     whereClause += ` AND date >= NOW() - INTERVAL '${intervalClause}'`;\n    45:     \n    46:     const result = await query(`"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        indicator_id,\n        indicator_name,\n        category,\n        value,\n        date,\n        units,\n        frequency,\n        last_updated\n      FROM economic_indicators\n      ${whereClause}\n      ORDER BY date DESC, indicator_name\n      LIMIT $${paramIndex}\n    `",
      "context": "    44:     whereClause += ` AND date >= NOW() - INTERVAL '${intervalClause}'`;\n    45:     \n>>> 46:     const result = await query(`\n    47:       SELECT \n    48:         indicator_id,"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND event_date >= $${paramIndex}`",
      "context": "    108:     \n    109:     if (from_date) {\n>>> 110:       whereClause += ` AND event_date >= $${paramIndex}`;\n    111:       params.push(from_date);\n    112:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 116,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND event_date <= $${paramIndex}`",
      "context": "    114:     \n    115:     if (to_date) {\n>>> 116:       whereClause += ` AND event_date <= $${paramIndex}`;\n    117:       params.push(to_date);\n    118:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND importance = $${paramIndex}`",
      "context": "    120:     \n    121:     if (importance) {\n>>> 122:       whereClause += ` AND importance = $${paramIndex}`;\n    123:       params.push(importance);\n    124:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        event_id,\n        event_name,\n        event_date,\n        event_time,\n        country,\n        importance,\n        forecast_value,\n        previous_value,\n        actual_value,\n        currency,\n        category,\n        source,\n        description,\n        impact_score\n      FROM economic_calendar\n      ${whereClause}\n      ORDER BY event_date ASC, event_time ASC\n    `",
      "context": "    125:     }\n    126:     \n>>> 127:     const result = await query(`\n    128:       SELECT \n    129:         event_id,"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 23,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    if (category) {\n      whereClause +",
      "context": "    21:     const { category, period = '1Y', limit = 100 } = req.query;\n    22:     \n>>> 23:     let whereClause = 'WHERE 1=1';\n    24:     const params = [];\n    25:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 21,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    if (category) {\n      whereClause += `",
      "context": "    19: router.get('/indicators', async (req, res) => {\n    20:   try {\n>>> 21:     const { category, period = '1Y', limit = 100 } = req.query;\n    22:     \n    23:     let whereClause = 'WHERE 1=1';"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 21,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    let whereClause = '",
      "context": "    19: router.get('/indicators', async (req, res) => {\n    20:   try {\n>>> 21:     const { category, period = '1Y', limit = 100 } = req.query;\n    22:     \n    23:     let whereClause = 'WHERE 1=1';"
    },
    {
      "file": "webapp/lambda/routes/economic.js",
      "line": 174,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    if (economicEngine) {\n      const models = await economicEngine.getEconomicModels(model_type, horizon);\n      res.json({\n        success: true,\n        data: models\n      });\n    } else {\n      // Fallback mock data\n      const mockModels = [\n        {\n          id: 'arima_gdp',\n          name: 'ARIMA GDP Model',\n          type: 'arima',\n          target: 'GDP Growth',\n          accuracy: 0.85,\n          horizon: horizon,\n          last_updated: new Date().toISOString(),\n          parameters: { p: 2, d: 1, q: 2 }\n        },\n        {\n          id: 'var_inflation',\n          name: 'VAR Inflation Model',\n          type: 'var',\n          target: 'Core CPI',\n          accuracy: 0.78,\n          horizon: horizon,\n          last_updated: new Date().toISOString(),\n          parameters: { lags: 4, variables: ['cpi', 'unemployment', 'fed_rate'] }\n        }\n      ];\n\n      res.json({\n        success: true,\n        data: mockModels,\n        note: 'Mock economic models - modeling engine not available'\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching economic models:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch economic models',\n      message: error.message\n    });\n  }\n});\n\n// Run economic scenario analysis\nrouter.post('/scenario-analysis', async (req, res) => {\n  try {\n    const { \n      base_scenario,\n      shock_scenarios = [],\n      indicators = [],\n      time_horizon = 12,\n      confidence_level = 0.95 \n    } = req.body;\n    \n    if (!base_scenario || !indicators || indicators.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Base scenario and indicators are required'\n      });\n    }\n    \n    const analysis = await economicEngine.runScenarioAnalysis({\n      base_scenario,\n      shock_scenarios,\n      indicators,\n      time_horizon,\n      confidence_level\n    });\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error running scenario analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run scenario analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get economic correlations\nrouter.get('/correlations', async (req, res) => {\n  try {\n    const { indicators, period = '2Y', method = 'pearson' } = req.query;\n    \n    if (economicEngine && indicators) {\n      const indicatorList = indicators.split(',');\n      const correlations = await economicEngine.calculateCorrelations(indicatorList, period, method);\n      \n      res.json({\n        success: true,\n        data: {\n          correlations,\n          indicators: indicatorList,\n          period,\n          method\n        }\n      });\n    } else {\n      // Fallback mock correlations\n      const mockCorrelations = {\n        matrix: {\n          'GDP': { 'GDP': 1.0, 'CPI': 0.23, 'UNEMPLOYMENT': -0.67, 'FED_RATE': 0.45 },\n          'CPI': { 'GDP': 0.23, 'CPI': 1.0, 'UNEMPLOYMENT': -0.12, 'FED_RATE': 0.78 },\n          'UNEMPLOYMENT': { 'GDP': -0.67, 'CPI': -0.12, 'UNEMPLOYMENT': 1.0, 'FED_RATE': -0.34 },\n          'FED_RATE': { 'GDP': 0.45, 'CPI': 0.78, 'UNEMPLOYMENT': -0.34, 'FED_RATE': 1.0 }\n        },\n        period: period,\n        method: method,\n        last_updated: new Date().toISOString()\n      };\n\n      res.json({\n        success: true,\n        data: mockCorrelations,\n        note: 'Mock correlations - modeling engine not available'\n      });\n    }\n  } catch (error) {\n    console.error('Error calculating correlations:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate correlations',\n      message: error.message\n    });\n  }\n});\n\n// Get economic forecasts\nrouter.get('/forecasts', async (req, res) => {\n  try {\n    const { indicator_id, horizon = '12M', model_type = 'arima' } = req.query;\n    \n    if (!indicator_id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Indicator ID is required'\n      });\n    }\n    \n    const forecast = await economicEngine.generateForecast(indicator_id, horizon, model_type);\n    \n    res.json({\n      success: true,\n      data: forecast\n    });\n  } catch (error) {\n    console.error('Error generating forecast:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate forecast',\n      message: error.message\n    });\n  }\n});\n\n// Get economic impact analysis\nrouter.post('/impact-analysis', async (req, res) => {\n  try {\n    const { \n      economic_event,\n      affected_sectors = [],\n      time_horizon = 90,\n      analysis_type = 'comprehensive'\n    } = req.body;\n    \n    if (!economic_event) {\n      return res.status(400).json({\n        success: false,\n        error: 'Economic event is required'\n      });\n    }\n    \n    const analysis = await economicEngine.analyzeEconomicImpact({\n      economic_event,\n      affected_sectors,\n      time_horizon,\n      analysis_type\n    });\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error analyzing economic impact:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze economic impact',\n      message: error.message\n    });\n  }\n});\n\n// Get yield curve analysis\nrouter.get('/yield-curve', async (req, res) => {\n  try {\n    const { date, analysis_type = 'current' } = req.query;\n    \n    const yieldCurve = await economicEngine.getYieldCurveAnalysis(date, analysis_type);\n    \n    res.json({\n      success: true,\n      data: yieldCurve\n    });\n  } catch (error) {\n    console.error('Error fetching yield curve:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch yield curve analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get inflation analysis\nrouter.get('/inflation', async (req, res) => {\n  try {\n    const { period = '5Y', components = true } = req.query;\n    \n    const inflationAnalysis = await economicEngine.getInflationAnalysis(period, components);\n    \n    res.json({\n      success: true,\n      data: inflationAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching inflation analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch inflation analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get employment analysis\nrouter.get('/employment', async (req, res) => {\n  try {\n    const { period = '2Y', detailed = false } = req.query;\n    \n    const employmentAnalysis = await economicEngine.getEmploymentAnalysis(period, detailed);\n    \n    res.json({\n      success: true,\n      data: employmentAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching employment analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch employment analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get GDP analysis\nrouter.get('/gdp', async (req, res) => {\n  try {\n    const { period = '5Y', components = true } = req.query;\n    \n    const gdpAnalysis = await economicEngine.getGDPAnalysis(period, components);\n    \n    res.json({\n      success: true,\n      data: gdpAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching GDP analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch GDP analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get available economic indicators list\nrouter.get('/indicators/list', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT DISTINCT\n        indicator_id,\n        indicator_name,\n        category,\n        units,\n        frequency,\n        description,\n        source,\n        last_updated,\n        COUNT(*) as data_points\n      FROM economic_indicators\n      GROUP BY indicator_id, indicator_name, category, units, frequency, description, source, last_updated\n      ORDER BY category, indicator_name\n    `);\n    \n    const indicators = result.rows.map(row => ({\n      id: row.indicator_id,\n      name: row.indicator_name,\n      category: row.category,\n      units: row.units,\n      frequency: row.frequency,\n      description: row.description,\n      source: row.source,\n      last_updated: row.last_updated,\n      data_points: parseInt(row.data_points)\n    }));\n    \n    // Group by category\n    const categorized = {};\n    indicators.forEach(indicator => {\n      if (!categorized[indicator.category]) {\n        categorized[indicator.category] = [];\n      }\n      categorized[indicator.category].push(indicator);\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        indicators,\n        categorized,\n        total_count: indicators.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching indicators list:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch indicators list'",
      "context": "    172: router.get('/models', async (req, res) => {\n    173:   try {\n>>> 174:     const { model_type, horizon = '12M' } = req.query;\n    175:     \n    176:     if (economicEngine) {"
    },
    {
      "file": "webapp/lambda/routes/emergency.js",
      "line": 85,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + Math.ceil(status.timeToRecovery/1000) + '",
      "context": "    83:     recommendations.push({\n    84:       level: 'critical',\n>>> 85:       message: 'Circuit breaker is OPEN. Database access blocked for ' + Math.ceil(status.timeToRecovery/1000) + ' more seconds.',\n    86:       action: 'Wait for automatic recovery or use emergency reset endpoint: POST /api/health/emergency/reset-circuit-breaker'\n    87:     });"
    },
    {
      "file": "webapp/lambda/routes/emergency.js",
      "line": 101,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + status.failures + '",
      "context": "    99:     recommendations.push({\n    100:       level: 'warning',\n>>> 101:       message: 'High failure rate detected (' + status.failures + ' failures). Circuit breaker may open soon.',\n    102:       action: 'Investigate database connectivity and consider scaling down operations'\n    103:     });"
    },
    {
      "file": "webapp/lambda/routes/emergency.js",
      "line": 109,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + status.successRate + '",
      "context": "    107:     recommendations.push({\n    108:       level: 'warning',\n>>> 109:       message: 'Low success rate (' + status.successRate + '). Database performance issues detected.',\n    110:       action: 'Check database performance metrics and connection configuration'\n    111:     });"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 57,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name = '${table}'\n          );\n        `",
      "context": "    55:       try {\n    56:         // Check if table exists\n>>> 57:         const tableExistsQuery = `\n    58:           SELECT EXISTS (\n    59:             SELECT FROM information_schema.tables "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 69,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            SELECT column_name, data_type, is_nullable\n            FROM information_schema.columns \n            WHERE table_name = '${table}' \n            AND table_schema = 'public'\n            ORDER BY ordinal_position\n          `",
      "context": "    67:         if (tableExists.rows[0].exists) {\n    68:           // Get column information\n>>> 69:           const columnsQuery = `\n    70:             SELECT column_name, data_type, is_nullable\n    71:             FROM information_schema.columns "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 80,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as total FROM ${table}`",
      "context": "    78:           \n    79:           // Count total records\n>>> 80:           const countQuery = `SELECT COUNT(*) as total FROM ${table}`;\n    81:           const countResult = await query(countQuery);\n    82:           "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT * FROM ${table} LIMIT 2`",
      "context": "    82:           \n    83:           // Get sample records (first 2 rows)\n>>> 84:           const sampleQuery = `SELECT * FROM ${table} LIMIT 2`;\n    85:           const sampleResult = await query(sampleQuery);\n    86:           "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 96,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${table} table does not exist`",
      "context": "    94:           results[table] = {\n    95:             exists: false,\n>>> 96:             message: `${table} table does not exist`\n    97:           };\n    98:         }"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 130,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Balance sheet request for ${ticker}, period: ${period}`",
      "context": "    128:     const { period = 'annual' } = req.query;\n    129:     \n>>> 130:     console.log(`Balance sheet request for ${ticker}, period: ${period}`);\n    131:     \n    132:     // Determine table name based on period"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 221,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Income statement request for ${ticker}, period: ${period}`",
      "context": "    219:     const { period = 'annual' } = req.query;\n    220:     \n>>> 221:     console.log(`Income statement request for ${ticker}, period: ${period}`);\n    222:     \n    223:     // Determine table name based on period"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 308,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Cash flow request for ${ticker}, period: ${period}`",
      "context": "    306:     const { period = 'annual' } = req.query;\n    307:     \n>>> 308:     console.log(`Cash flow request for ${ticker}, period: ${period}`);\n    309:     \n    310:     // Determine table name based on period"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 429,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`quarterly_${type}`",
      "context": "    427:   let tableName = type;\n    428:   if (period === 'quarterly' && type !== 'balance_sheet') {\n>>> 429:     tableName = `quarterly_${type}`;\n    430:   } else if (period === 'ttm' && type !== 'balance_sheet') {\n    431:     tableName = `ttm_${type}`;"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 431,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ttm_${type}`",
      "context": "    429:     tableName = `quarterly_${type}`;\n    430:   } else if (period === 'ttm' && type !== 'balance_sheet') {\n>>> 431:     tableName = `ttm_${type}`;\n    432:   } else if (period === 'quarterly' && type === 'balance_sheet') {\n    433:     tableName = 'quarterly_balance_sheet';"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 480,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Key metrics request for ${ticker}`",
      "context": "    478:     const { ticker } = req.params;\n    479:     \n>>> 480:     console.log(`Key metrics request for ${ticker}`);\n    481:     \n    482:     // Query the key_metrics table from loadinfo"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 691,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${dataQuality}%`",
      "context": "    689:       metadata: {\n    690:         ticker: ticker.toUpperCase(),\n>>> 691:         dataQuality: `${dataQuality}%`,\n    692:         totalMetrics: totalFields,\n    693:         populatedMetrics: populatedFields,"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 714,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`💰 [FINANCIALS] Fetching financial data for ${symbol}`",
      "context": "    712: router.get('/data/:symbol', async (req, res) => {\n    713:   const { symbol } = req.params;\n>>> 714:   console.log(`💰 [FINANCIALS] Fetching financial data for ${symbol}`);\n    715:   \n    716:   try {"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 747,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No financial data found for symbol ${symbol}`",
      "context": "    745:       return res.status(404).json({\n    746:         success: false,\n>>> 747:         error: `No financial data found for symbol ${symbol}`\n    748:       });\n    749:     }"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 773,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [FINANCIALS] Error fetching financial data for ${symbol}:`",
      "context": "    771:     });\n    772:   } catch (error) {\n>>> 773:     console.error(`❌ [FINANCIALS] Error fetching financial data for ${symbol}:`, error);\n    774:     res.status(500).json({\n    775:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 785,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [FINANCIALS] Fetching earnings data for ${symbol}`",
      "context": "    783: router.get('/earnings/:symbol', async (req, res) => {\n    784:   const { symbol } = req.params;\n>>> 785:   console.log(`📊 [FINANCIALS] Fetching earnings data for ${symbol}`);\n    786:   \n    787:   try {"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 810,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No earnings data found for symbol ${symbol}`",
      "context": "    808:       return res.status(404).json({\n    809:         success: false,\n>>> 810:         error: `No earnings data found for symbol ${symbol}`\n    811:       });\n    812:     }"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 821,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [FINANCIALS] Error fetching earnings data for ${symbol}:`",
      "context": "    819:     });\n    820:   } catch (error) {\n>>> 821:     console.error(`❌ [FINANCIALS] Error fetching earnings data for ${symbol}:`, error);\n    822:     res.status(500).json({\n    823:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 833,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`💵 [FINANCIALS] Fetching cash flow for ${symbol}`",
      "context": "    831: router.get('/cash-flow/:symbol', async (req, res) => {\n    832:   const { symbol } = req.params;\n>>> 833:   console.log(`💵 [FINANCIALS] Fetching cash flow for ${symbol}`);\n    834:   \n    835:   try {"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 854,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No cash flow data found for symbol ${symbol}`",
      "context": "    852:       return res.status(404).json({\n    853:         success: false,\n>>> 854:         error: `No cash flow data found for symbol ${symbol}`\n    855:       });\n    856:     }"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 880,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [FINANCIALS] Error fetching cash flow for ${symbol}:`",
      "context": "    878:     });\n    879:   } catch (error) {\n>>> 880:     console.error(`❌ [FINANCIALS] Error fetching cash flow for ${symbol}:`, error);\n    881:     res.status(500).json({\n    882:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 80,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    78:           \n    79:           // Count total records\n>>> 80:           const countQuery = `SELECT COUNT(*) as total FROM ${table}`;\n    81:           const countResult = await query(countQuery);\n    82:           "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 80,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    78:           \n    79:           // Count total records\n>>> 80:           const countQuery = `SELECT COUNT(*) as total FROM ${table}`;\n    81:           const countResult = await query(countQuery);\n    82:           "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 145,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    143:         item_name,\n    144:         value\n>>> 145:       FROM ${tableName}\n    146:       WHERE UPPER(symbol) = UPPER($1)\n    147:       ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 145,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    143:         item_name,\n    144:         value\n>>> 145:       FROM ${tableName}\n    146:       WHERE UPPER(symbol) = UPPER($1)\n    147:       ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 145,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    143:         item_name,\n    144:         value\n>>> 145:       FROM ${tableName}\n    146:       WHERE UPPER(symbol) = UPPER($1)\n    147:       ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 145,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    143:         item_name,\n    144:         value\n>>> 145:       FROM ${tableName}\n    146:       WHERE UPPER(symbol) = UPPER($1)\n    147:       ORDER BY date DESC, item_name"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 127,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`",
      "context": "    125: router.get('/:ticker/balance-sheet', createValidationMiddleware(financialsValidationSchemas.timeSeriesBased), async (req, res) => {\n    126:   try {\n>>> 127:     const { ticker } = req.params;\n    128:     const { period = 'annual' } = req.query;\n    129:     "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 127,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`",
      "context": "    125: router.get('/:ticker/balance-sheet', createValidationMiddleware(financialsValidationSchemas.timeSeriesBased), async (req, res) => {\n    126:   try {\n>>> 127:     const { ticker } = req.params;\n    128:     const { period = 'annual' } = req.query;\n    129:     "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 127,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`",
      "context": "    125: router.get('/:ticker/balance-sheet', createValidationMiddleware(financialsValidationSchemas.timeSeriesBased), async (req, res) => {\n    126:   try {\n>>> 127:     const { ticker } = req.params;\n    128:     const { period = 'annual' } = req.query;\n    129:     "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 391,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { period = 'annual' } = req.query;\n    \n    // Get all three statements in parallel\n    const [balanceSheet, incomeStatement, cashFlow] = await Promise.all([\n      getFinancialStatement(ticker, 'balance_sheet', period),\n      getFinancialStatement(ticker, 'income_stmt', period),\n      getFinancialStatement(ticker, 'cash_flow', period)\n    ]);\n    \n    res.json({\n      success: true,\n      data: {\n        balance_sheet: balanceSheet,\n        income_statement: incomeStatement,\n        cash_flow: cashFlow\n      },\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        period,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Financial statements fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch financial statements',\n      message: error.message\n    });\n  }\n});\n\n// Helper function to get financial statement data\nasync function getFinancialStatement(ticker, type, period) {\n  let tableName = type;\n  if (period === 'quarterly' && type !== 'balance_sheet') {\n    tableName = `",
      "context": "    389: router.get('/:ticker/financials', async (req, res) => {\n    390:   try {\n>>> 391:     const { ticker } = req.params;\n    392:     const { period = 'annual' } = req.query;\n    393:     "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 478,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    console.log(`",
      "context": "    476: router.get('/:ticker/key-metrics', async (req, res) => {\n    477:   try {\n>>> 478:     const { ticker } = req.params;\n    479:     \n    480:     console.log(`Key metrics request for ${ticker}`);"
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 713,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  console.log(`",
      "context": "    711: // Get financial data for a specific symbol\n    712: router.get('/data/:symbol', async (req, res) => {\n>>> 713:   const { symbol } = req.params;\n    714:   console.log(`💰 [FINANCIALS] Fetching financial data for ${symbol}`);\n    715:   "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 713,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  console.log(`",
      "context": "    711: // Get financial data for a specific symbol\n    712: router.get('/data/:symbol', async (req, res) => {\n>>> 713:   const { symbol } = req.params;\n    714:   console.log(`💰 [FINANCIALS] Fetching financial data for ${symbol}`);\n    715:   "
    },
    {
      "file": "webapp/lambda/routes/financials.js",
      "line": 713,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  console.log(`",
      "context": "    711: // Get financial data for a specific symbol\n    712: router.get('/data/:symbol', async (req, res) => {\n>>> 713:   const { symbol } = req.params;\n    714:   console.log(`💰 [FINANCIALS] Fetching financial data for ${symbol}`);\n    715:   "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 249,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Found ${existingTables.length} tables in database`",
      "context": "    247:       ]);\n    248:       existingTables = tableExistenceCheck.rows.map(row => row.table_name);\n>>> 249:       console.log(`Found ${existingTables.length} tables in database`);\n    250:     } catch (listError) {\n    251:       console.error('Failed to get table list:', listError.message);"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 252,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to list tables: ${listError.message}`",
      "context": "    250:     } catch (listError) {\n    251:       console.error('Failed to get table list:', listError.message);\n>>> 252:       tables['_error'] = `Failed to list tables: ${listError.message}`;\n    253:     }\n    254:     "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM \"${tableName}\" LIMIT 1`",
      "context": "    272:       const batchPromises = batch.map(tableName => {\n    273:         return Promise.race([\n>>> 274:           query(`SELECT COUNT(*) as count FROM \"${tableName}\" LIMIT 1`)\n    275:             .then(result => ({\n    276:               table: tableName,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 300,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${result.status}: ${result.error}`",
      "context": "    298:           tables[result.table] = result.count;\n    299:         } else {\n>>> 300:           tables[result.table] = `${result.status}: ${result.error}`;\n    301:         }\n    302:       });"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 426,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT 1 FROM \"${table}\" LIMIT 1`",
      "context": "    424:             // Fast existence check only\n    425:             const result = await Promise.race([\n>>> 426:               query(`SELECT 1 FROM \"${table}\" LIMIT 1`),\n    427:               new Promise((_, reject) => setTimeout(() => reject(new Error('Table timeout')), 1000))\n    428:             ]);"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 636,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${diagnostics.tables.withData}/${diagnostics.tables.total}`",
      "context": "    634:         database: diagnostics.database.name,\n    635:         connection: diagnostics.connection.status,\n>>> 636:         tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n    637:         errors: diagnostics.errors.concat(diagnostics.tables.errors),\n    638:         recommendations: diagnostics.recommendations"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 677,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${table.table_name}`",
      "context": "    675:       for (const table of tables) {\n    676:         try {\n>>> 677:           const count = await query(`SELECT COUNT(*) as count FROM ${table.table_name}`);\n    678:           const recordCount = parseInt(count.rows[0].count);\n    679:           table.record_count = recordCount;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 683,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT column_name FROM information_schema.columns WHERE table_name = '${table.table_name}' AND column_name IN ('fetched_at','updated_at','created_at','date','period_end') LIMIT 1`",
      "context": "    681:           let lastUpdate = null;\n    682:           try {\n>>> 683:             const tsCol = await query(`SELECT column_name FROM information_schema.columns WHERE table_name = '${table.table_name}' AND column_name IN ('fetched_at','updated_at','created_at','date','period_end') LIMIT 1`);\n    684:             if (tsCol.rows.length > 0) {\n    685:               const col = tsCol.rows[0].column_name;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 686,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT MAX(${col}) as last_update FROM ${table.table_name}`",
      "context": "    684:             if (tsCol.rows.length > 0) {\n    685:               const col = tsCol.rows[0].column_name;\n>>> 686:               const tsRes = await query(`SELECT MAX(${col}) as last_update FROM ${table.table_name}`);\n    687:               lastUpdate = tsRes.rows[0].last_update;\n    688:             }"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 636,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${diagnostics.tables.withData}/${diagnostics.tables.total}`",
      "context": "    634:         database: diagnostics.database.name,\n    635:         connection: diagnostics.connection.status,\n>>> 636:         tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n    637:         errors: diagnostics.errors.concat(diagnostics.tables.errors),\n    638:         recommendations: diagnostics.recommendations"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 636,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${diagnostics.tables.withData}/${diagnostics.tables.total}`",
      "context": "    634:         database: diagnostics.database.name,\n    635:         connection: diagnostics.connection.status,\n>>> 636:         tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n    637:         errors: diagnostics.errors.concat(diagnostics.tables.errors),\n    638:         recommendations: diagnostics.recommendations"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 915,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Health_status table created and populated with ${monitoredTables.length} tables`",
      "context": "    913:         }\n    914: \n>>> 915:         console.log(`Health_status table created and populated with ${monitoredTables.length} tables`);\n    916:       } catch (createError) {\n    917:         console.error('Failed to create health_status table:', createError.message);"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 967,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM \"${tableName}\"`",
      "context": "    965:             try {\n    966:               // Get record count\n>>> 967:               const recordResult = await query(`SELECT COUNT(*) as count FROM \"${tableName}\"`);\n    968:               recordCount = parseInt(recordResult.rows[0].count);\n    969:               summary.total_records += recordCount;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 987,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT MAX(\"${col}\") as last_update FROM \"${tableName}\"`",
      "context": "    985: \n    986:                     if (colCheck.rowCount > 0) {\n>>> 987:                       const tsResult = await query(`SELECT MAX(\"${col}\") as last_update FROM \"${tableName}\"`);\n    988:                       if (tsResult.rows[0].last_update) {\n    989:                         lastUpdated = tsResult.rows[0].last_update;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 1054,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to update health status for table ${tableName}:`",
      "context": "    1052:           `, [tableName, tableStatus, recordCount, 0, lastUpdated, isStale, errorMsg]);\n    1053:         } catch (updateError) {\n>>> 1054:           console.error(`Failed to update health status for table ${tableName}:`, updateError.message);\n    1055:         }\n    1056: "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 1216,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${process.env.DB_SECRET_ARN.substring(0, 50)}...`",
      "context": "    1214:           hasSecretArn: !!process.env.DB_SECRET_ARN,\n    1215:           hasEndpoint: !!process.env.DB_ENDPOINT,\n>>> 1216:           secretArn: process.env.DB_SECRET_ARN ? `${process.env.DB_SECRET_ARN.substring(0, 50)}...` : null,\n    1217:           endpoint: process.env.DB_ENDPOINT || null\n    1218:         }"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 14,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || '",
      "context": "    12:         status: 'healthy',\n    13:         healthy: true,\n>>> 14:         service: 'Financial Dashboard API',\n    15:         timestamp: new Date().toISOString(),\n    16:         environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' },\n        config: {\n          hasDbSecret: !!process.env.DB_SECRET_ARN,\n          hasDbEndpoint: !!process.env.DB_ENDPOINT,\n          hasAwsRegion: !!process.env.AWS_REGION\n        }\n      });\n    }\n    // Full health check with database\n    console.log('",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 43,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          timestamp: new Date().toISOString(),\n          environment: process.env.ENVIRONMENT || '",
      "context": "    41:           status: 'unhealthy',\n    42:           healthy: false,\n>>> 43:           service: 'Financial Dashboard API',\n    44:           timestamp: new Date().toISOString(),\n    45:           environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 14,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || '",
      "context": "    12:         status: 'healthy',\n    13:         healthy: true,\n>>> 14:         service: 'Financial Dashboard API',\n    15:         timestamp: new Date().toISOString(),\n    16:         environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 83,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    81:     // Enhanced logging for network debugging\n    82:     console.log('🔍 HEALTH CHECK - Lambda Network Diagnostics:');\n>>> 83:     console.log('  Lambda Function:', process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown');\n    84:     console.log('  Lambda Region:', process.env.AWS_REGION || 'unknown');\n    85:     console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 84,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.AWS_REGION || '",
      "context": "    82:     console.log('🔍 HEALTH CHECK - Lambda Network Diagnostics:');\n    83:     console.log('  Lambda Function:', process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown');\n>>> 84:     console.log('  Lambda Region:', process.env.AWS_REGION || 'unknown');\n    85:     console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');\n    86:     console.log('  Security Groups:', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured');"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 85,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || '",
      "context": "    83:     console.log('  Lambda Function:', process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown');\n    84:     console.log('  Lambda Region:', process.env.AWS_REGION || 'unknown');\n>>> 85:     console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');\n    86:     console.log('  Security Groups:', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured');\n    87:     console.log('  DB Endpoint:', process.env.DB_ENDPOINT || 'not set');"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 86,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || '",
      "context": "    84:     console.log('  Lambda Region:', process.env.AWS_REGION || 'unknown');\n    85:     console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');\n>>> 86:     console.log('  Security Groups:', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured');\n    87:     console.log('  DB Endpoint:', process.env.DB_ENDPOINT || 'not set');\n    88:     console.log('  DB Secret ARN:', process.env.DB_SECRET_ARN ? '[CONFIGURED]' : 'not set');"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 87,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.DB_ENDPOINT || '",
      "context": "    85:     console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');\n    86:     console.log('  Security Groups:', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured');\n>>> 87:     console.log('  DB Endpoint:', process.env.DB_ENDPOINT || 'not set');\n    88:     console.log('  DB Secret ARN:', process.env.DB_SECRET_ARN ? '[CONFIGURED]' : 'not set');\n    89:     "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 92,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n      const secretsManager = new SecretsManagerClient({ region: process.env.AWS_REGION || '",
      "context": "    90:     try {\n    91:       // Get database credentials for connectivity logging\n>>> 92:       const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    93:       const secretsManager = new SecretsManagerClient({ region: process.env.AWS_REGION || 'us-east-1' });\n    94:       "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 93,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' });\n      \n      if (process.env.DB_SECRET_ARN) {\n        try {\n          const secretResult = await secretsManager.send(new GetSecretValueCommand({ \n            SecretId: process.env.DB_SECRET_ARN \n          }));\n          const dbConfig = JSON.parse(secretResult.SecretString);\n          console.log('",
      "context": "    91:       // Get database credentials for connectivity logging\n    92:       const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n>>> 93:       const secretsManager = new SecretsManagerClient({ region: process.env.AWS_REGION || 'us-east-1' });\n    94:       \n    95:       if (process.env.DB_SECRET_ARN) {"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 14,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || '",
      "context": "    12:         status: 'healthy',\n    13:         healthy: true,\n>>> 14:         service: 'Financial Dashboard API',\n    15:         timestamp: new Date().toISOString(),\n    16:         environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 192,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          error: dbError.message,\n          errorCode: dbError.code,\n          lastAttempt: new Date().toISOString(),\n          tables: {},\n          networkDiagnostics: {\n            lambdaVpcSubnets: process.env.AWS_LAMBDA_VPC_SUBNET_IDS || '",
      "context": "    190:         environment: process.env.ENVIRONMENT || 'dev',\n    191:         database: {\n>>> 192:           status: 'disconnected',\n    193:           error: dbError.message,\n    194:           errorCode: dbError.code,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 198,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            lambdaSecurityGroups: process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || '",
      "context": "    196:           tables: {},\n    197:           networkDiagnostics: {\n>>> 198:             lambdaVpcSubnets: process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured',\n    199:             lambdaSecurityGroups: process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured',\n    200:             dbEndpoint: process.env.DB_ENDPOINT || 'not set',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 199,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            dbEndpoint: process.env.DB_ENDPOINT || '",
      "context": "    197:           networkDiagnostics: {\n    198:             lambdaVpcSubnets: process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured',\n>>> 199:             lambdaSecurityGroups: process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured',\n    200:             dbEndpoint: process.env.DB_ENDPOINT || 'not set',\n    201:             hasDbSecret: !!process.env.DB_SECRET_ARN"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 200,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            hasDbSecret: !!process.env.DB_SECRET_ARN\n          }\n        },\n        api: { version: '",
      "context": "    198:             lambdaVpcSubnets: process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured',\n    199:             lambdaSecurityGroups: process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured',\n>>> 200:             dbEndpoint: process.env.DB_ENDPOINT || 'not set',\n    201:             hasDbSecret: !!process.env.DB_SECRET_ARN\n    202:           }"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 14,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || '",
      "context": "    12:         status: 'healthy',\n    13:         healthy: true,\n>>> 14:         service: 'Financial Dashboard API',\n    15:         timestamp: new Date().toISOString(),\n    16:         environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 333,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        environment: process.env.NODE_ENV || '",
      "context": "    331:       },\n    332:       api: {\n>>> 333:         version: '1.0.0',\n    334:         environment: process.env.NODE_ENV || 'development'\n    335:       },"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 21,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    19:         note: 'Quick health check - database not tested',\n    20:         database: { status: 'not_tested' },\n>>> 21:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    22:         config: {\n    23:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 577,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      DB_ENDPOINT: process.env.DB_ENDPOINT ? '",
      "context": "    575:     environment: {\n    576:       NODE_ENV: process.env.NODE_ENV,\n>>> 577:       DB_SECRET_ARN: process.env.DB_SECRET_ARN ? 'SET' : 'NOT_SET',\n    578:       DB_ENDPOINT: process.env.DB_ENDPOINT ? 'SET' : 'NOT_SET',\n    579:       WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 578,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,\n      AWS_REGION: process.env.AWS_REGION,\n      IS_LOCAL: process.env.NODE_ENV === '",
      "context": "    576:       NODE_ENV: process.env.NODE_ENV,\n    577:       DB_SECRET_ARN: process.env.DB_SECRET_ARN ? 'SET' : 'NOT_SET',\n>>> 578:       DB_ENDPOINT: process.env.DB_ENDPOINT ? 'SET' : 'NOT_SET',\n    579:       WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,\n    580:       AWS_REGION: process.env.AWS_REGION,"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 581,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || !process.env.DB_SECRET_ARN,\n      RUNTIME: '",
      "context": "    579:       WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,\n    580:       AWS_REGION: process.env.AWS_REGION,\n>>> 581:       IS_LOCAL: process.env.NODE_ENV === 'development' || !process.env.DB_SECRET_ARN,\n    582:       RUNTIME: 'AWS Lambda Node.js'\n    583:     },"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 1216,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "` : null,\n          endpoint: process.env.DB_ENDPOINT || null\n        }\n      }\n    };\n    \n    // Test network connectivity\n    console.log('",
      "context": "    1214:           hasSecretArn: !!process.env.DB_SECRET_ARN,\n    1215:           hasEndpoint: !!process.env.DB_ENDPOINT,\n>>> 1216:           secretArn: process.env.DB_SECRET_ARN ? `${process.env.DB_SECRET_ARN.substring(0, 50)}...` : null,\n    1217:           endpoint: process.env.DB_ENDPOINT || null\n    1218:         }"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 1237,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', message: error.message };\n    }\n    \n    // Add VPC/networking information if available\n    if (process.env.AWS_LAMBDA_RUNTIME_API) {\n      debugInfo.networking = {\n        lambdaRuntimeApi: !!process.env.AWS_LAMBDA_RUNTIME_API,\n        vpcConfig: !!process.env._LAMBDA_SERVER_PORT,\n        executionEnv: process.env.AWS_EXECUTION_ENV\n      };\n    }\n    \n    console.log('",
      "context": "    1235:       debugInfo.databaseHealth = dbHealth;\n    1236:     } catch (error) {\n>>> 1237:       debugInfo.databaseHealth = { status: 'error', message: error.message };\n    1238:     }\n    1239:     "
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 677,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.table_name}",
      "context": "    675:       for (const table of tables) {\n    676:         try {\n>>> 677:           const count = await query(`SELECT COUNT(*) as count FROM ${table.table_name}`);\n    678:           const recordCount = parseInt(count.rows[0].count);\n    679:           table.record_count = recordCount;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 677,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.table_name}",
      "context": "    675:       for (const table of tables) {\n    676:         try {\n>>> 677:           const count = await query(`SELECT COUNT(*) as count FROM ${table.table_name}`);\n    678:           const recordCount = parseInt(count.rows[0].count);\n    679:           table.record_count = recordCount;"
    },
    {
      "file": "webapp/lambda/routes/health-old.js",
      "line": 363,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.level || 'basic'; // basic, critical, full\n    \n    // Tier 1: Basic connectivity (always run, <2s)\n    let basicHealth;\n    try {\n      const startTime = Date.now();\n      await Promise.race([\n        query('SELECT current_timestamp as server_time, version() as version'),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Connection timeout')), 2000))\n      ]);\n      \n      // Check connection pool health\n      const pool = getPool();\n      basicHealth = {\n        status: 'connected',\n        response_time_ms: Date.now() - startTime,\n        connection_pool: {\n          total_connections: pool.totalCount,\n          active_connections: pool.totalCount - pool.idleCount,\n          idle_connections: pool.idleCount,\n          waiting_clients: pool.waitingCount\n        }\n      };\n    } catch (connError) {\n      console.error('Database connection failed:', connError.message);\n      return res.status(503).json({\n        status: 'unhealthy',\n        healthy: false,\n        timestamp: new Date().toISOString(),\n        database: {\n          status: 'disconnected',\n          error: connError.message,\n          level: 'basic',\n          response_time_ms: 2000\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n      });\n    }\n    \n    // Return immediately for basic health check\n    if (healthLevel === 'basic') {\n      return res.json({\n        status: 'ok',\n        healthy: true,\n        timestamp: new Date().toISOString(),\n        level: 'basic',\n        database: basicHealth,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n      });\n    }\n    \n    // Tier 2: Critical tables check (if requested, <5s total)\n    let criticalHealth = {};\n    if (healthLevel === 'critical' || healthLevel === 'full') {\n      const criticalTables = ['stock_symbols', 'price_daily', 'portfolio_holdings'];\n      const criticalResults = {};\n      \n      try {\n        for (const table of criticalTables) {\n          const startTime = Date.now();\n          try {\n            // Fast existence check only\n            const result = await Promise.race([\n              query(`SELECT 1 FROM \"",
      "context": "    361:   try {\n    362:     // Multi-tier health check approach\n>>> 363:     const healthLevel = req.query.level || 'basic'; // basic, critical, full\n    364:     \n    365:     // Tier 1: Basic connectivity (always run, <2s)"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${table} LIMIT 1`",
      "context": "    125:       if (existingTables.includes(table)) {\n    126:         try {\n>>> 127:           const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n    128:           results[table] = { \n    129:             exists: true, "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ External services health check completed in ${duration}ms`",
      "context": "    269:     const duration = Date.now() - startTime;\n    270:     \n>>> 271:     console.log(`✅ External services health check completed in ${duration}ms`);\n    272:     console.log(`📊 Services: ${healthyServices}/${totalServices} healthy`);\n    273:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 272,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Services: ${healthyServices}/${totalServices} healthy`",
      "context": "    270:     \n    271:     console.log(`✅ External services health check completed in ${duration}ms`);\n>>> 272:     console.log(`📊 Services: ${healthyServices}/${totalServices} healthy`);\n    273:     \n    274:     const responseData = {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 361,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as record_count FROM \"${tableName}\"`",
      "context": "    359:     let tableData = null;\n    360:     if (tableExists) {\n>>> 361:       const data = await query(`SELECT COUNT(*) as record_count FROM \"${tableName}\"`);\n    362:       tableData = { record_count: parseInt(data.rows[0].record_count) };\n    363:     }"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 485,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Schema validation completed in ${duration}ms`",
      "context": "    483:     const duration = Date.now() - startTime;\n    484:     \n>>> 485:     console.log(`✅ Schema validation completed in ${duration}ms`);\n    486:     console.log(`📊 Summary: ${report.summary.existingTables}/${report.summary.totalTables} tables exist, ${report.summary.validSchemas} valid schemas`);\n    487:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 486,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Summary: ${report.summary.existingTables}/${report.summary.totalTables} tables exist, ${report.summary.validSchemas} valid schemas`",
      "context": "    484:     \n    485:     console.log(`✅ Schema validation completed in ${duration}ms`);\n>>> 486:     console.log(`📊 Summary: ${report.summary.existingTables}/${report.summary.totalTables} tables exist, ${report.summary.validSchemas} valid schemas`);\n    487:     \n    488:     // Determine overall health status"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 527,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' exists`",
      "context": "    525:       expected: expectedTable || null,\n    526:       message: exists \n>>> 527:         ? `Table '${tableName}' exists`\n    528:         : `Table '${tableName}' does not exist`\n    529:     });"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 528,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' does not exist`",
      "context": "    526:       message: exists \n    527:         ? `Table '${tableName}' exists`\n>>> 528:         : `Table '${tableName}' does not exist`\n    529:     });\n    530:   } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 531,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Table existence check failed for '${req.params.tableName}':`",
      "context": "    529:     });\n    530:   } catch (error) {\n>>> 531:     console.error(`❌ Table existence check failed for '${req.params.tableName}':`, error);\n    532:     res.serverError('Table existence check failed', error.message);\n    533:   }"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 912,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 Found ${allTables.length} tables in database`",
      "context": "    910:     const tablesResult = await query(batchQuery, [], 15000);\n    911:     const allTables = tablesResult.rows;\n>>> 912:     console.log(`📋 Found ${allTables.length} tables in database`);\n    913:     \n    914:     // Build table health data efficiently"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 979,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Comprehensive database health check completed in ${duration}ms`",
      "context": "    977:     \n    978:     const duration = Date.now() - startTime;\n>>> 979:     console.log(`✅ Comprehensive database health check completed in ${duration}ms`);\n    980:     console.log(`📊 Summary: ${summary.total_tables} tables, ${summary.healthy_tables} healthy, ${summary.total_records} total records`);\n    981:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 980,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Summary: ${summary.total_tables} tables, ${summary.healthy_tables} healthy, ${summary.total_records} total records`",
      "context": "    978:     const duration = Date.now() - startTime;\n    979:     console.log(`✅ Comprehensive database health check completed in ${duration}ms`);\n>>> 980:     console.log(`📊 Summary: ${summary.total_tables} tables, ${summary.healthy_tables} healthy, ${summary.total_records} total records`);\n    981:     \n    982:     return {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 992,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Analyzed ${allTables.length} database tables in ${duration}ms`",
      "context": "    990:       },\n    991:       timestamp: new Date().toISOString(),\n>>> 992:       note: `Analyzed ${allTables.length} database tables in ${duration}ms`\n    993:     };\n    994:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${duration}ms`",
      "context": "    276:       healthy: allHealthy,\n    277:       service: 'External Services Health',\n>>> 278:       duration: `${duration}ms`,\n    279:       services,\n    280:       summary: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1417,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Encryption service is ${serviceHealth.overall}`",
      "context": "    1415:       jwt: serviceHealth.jwtService,\n    1416:       overall: serviceHealth.overall,\n>>> 1417:       message: `Encryption service is ${serviceHealth.overall}`,\n    1418:       features: {\n    1419:         hasEncryptionSecret: serviceHealth.encryptionService.hasSecret,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${table} LIMIT 1`",
      "context": "    125:       if (existingTables.includes(table)) {\n    126:         try {\n>>> 127:           const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n    128:           results[table] = { \n    129:             exists: true, "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1584,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Database schema validation endpoint called`",
      "context": "    1582:   \n    1583:   try {\n>>> 1584:     console.log(`🚀 [${requestId}] Database schema validation endpoint called`, {\n    1585:       userAgent: req.headers['user-agent'],\n    1586:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1591,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Starting comprehensive database schema validation`",
      "context": "    1589: \n    1590:     // Perform comprehensive database schema validation\n>>> 1591:     console.log(`🔍 [${requestId}] Starting comprehensive database schema validation`);\n    1592:     const schemaValidation = await validateDatabaseSchema(requestId);\n    1593:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1667,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database schema validation completed in ${totalDuration}ms`",
      "context": "    1665: \n    1666:     const totalDuration = Date.now() - requestStart;\n>>> 1667:     console.log(`✅ [${requestId}] Database schema validation completed in ${totalDuration}ms`, {\n    1668:       status: statusCode,\n    1669:       schemaHealth: `${schemaValidation.healthPercentage}%`,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1669,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${schemaValidation.healthPercentage}%`",
      "context": "    1667:     console.log(`✅ [${requestId}] Database schema validation completed in ${totalDuration}ms`, {\n    1668:       status: statusCode,\n>>> 1669:       schemaHealth: `${schemaValidation.healthPercentage}%`,\n    1670:       criticalMissing: schemaValidation.criticalMissing?.length || 0,\n    1671:       totalRequired: schemaValidation.totalRequired,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1679,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`",
      "context": "    1677:   } catch (error) {\n    1678:     const errorDuration = Date.now() - requestStart;\n>>> 1679:     console.error(`❌ [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`, {\n    1680:       error: error.message,\n    1681:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1720,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${schemaValidation.criticalMissing.length} critical tables missing`",
      "context": "    1718:       type: 'critical_tables_missing',\n    1719:       priority: 'critical',\n>>> 1720:       message: `${schemaValidation.criticalMissing.length} critical tables missing`,\n    1721:       action: 'Run database initialization scripts immediately',\n    1722:       details: schemaValidation.criticalMissing,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1736,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing ${categoryData.missing.length} ${category} tables`",
      "context": "    1734:           type: 'category_tables_missing',\n    1735:           priority: category === 'core' ? 'high' : 'medium',\n>>> 1736:           message: `Missing ${categoryData.missing.length} ${category} tables`,\n    1737:           action: `Create missing ${category} tables: ${categoryData.missing.join(', ')}`,\n    1738:           details: categoryData.missing,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1737,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Create missing ${category} tables: ${categoryData.missing.join(', ')}`",
      "context": "    1735:           priority: category === 'core' ? 'high' : 'medium',\n    1736:           message: `Missing ${categoryData.missing.length} ${category} tables`,\n>>> 1737:           action: `Create missing ${category} tables: ${categoryData.missing.join(', ')}`,\n    1738:           details: categoryData.missing,\n    1739:           impact: getCategoryImpact(category)"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1749,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Schema is ${schemaValidation.healthPercentage}% complete`",
      "context": "    1747:       type: 'partial_schema',\n    1748:       priority: 'low',\n>>> 1749:       message: `Schema is ${schemaValidation.healthPercentage}% complete`,\n    1750:       action: 'Consider creating missing optional tables for full functionality',\n    1751:       details: 'Some advanced features may be limited'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1996,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${Math.ceil(timeUntilHalfOpen / 1000)} seconds`",
      "context": "    1994:     return {\n    1995:       nextState: 'half-open',\n>>> 1996:       transitionTime: `${Math.ceil(timeUntilHalfOpen / 1000)} seconds`,\n    1997:       description: `Circuit breaker will transition to half-open in ${Math.ceil(timeUntilHalfOpen / 1000)} seconds`\n    1998:     };"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1997,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker will transition to half-open in ${Math.ceil(timeUntilHalfOpen / 1000)} seconds`",
      "context": "    1995:       nextState: 'half-open',\n    1996:       transitionTime: `${Math.ceil(timeUntilHalfOpen / 1000)} seconds`,\n>>> 1997:       description: `Circuit breaker will transition to half-open in ${Math.ceil(timeUntilHalfOpen / 1000)} seconds`\n    1998:     };\n    1999:   }"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 2089,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${criticalServices.length} service(s) have circuit breakers in open state`",
      "context": "    2087:       priority: 'critical',\n    2088:       title: 'Critical Service Failures',\n>>> 2089:       description: `${criticalServices.length} service(s) have circuit breakers in open state`,\n    2090:       services: criticalServices.map(([key, _]) => key),\n    2091:       action: 'Immediate investigation required'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 2101,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${warningServices.length} service(s) showing signs of instability`",
      "context": "    2099:       priority: 'warning',\n    2100:       title: 'Services Under Stress',\n>>> 2101:       description: `${warningServices.length} service(s) showing signs of instability`,\n    2102:       services: warningServices.map(([key, _]) => key),\n    2103:       action: 'Monitor closely and investigate patterns'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 2113,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${recentFailures.length} service(s) had failures in the last 5 minutes`",
      "context": "    2111:       priority: 'info',\n    2112:       title: 'Recent Failures Detected',\n>>> 2113:       description: `${recentFailures.length} service(s) had failures in the last 5 minutes`,\n    2114:       services: recentFailures.map(([key, _]) => key),\n    2115:       action: 'Review recent activity and error logs'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 2125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`System health score is ${overallHealth}%`",
      "context": "    2123:       priority: 'warning',\n    2124:       title: 'Overall System Health Below Threshold',\n>>> 2125:       description: `System health score is ${overallHealth}%`,\n    2126:       action: 'Review system architecture and service dependencies'\n    2127:     });"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 25,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        environment: process.env.ENVIRONMENT || '",
      "context": "    23:         status: 'healthy',\n    24:         healthy: true,\n>>> 25:         service: 'Financial Dashboard API',\n    26:         environment: process.env.ENVIRONMENT || 'dev',\n    27:         memory: process.memoryUsage(),"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' },\n        config: {\n          hasDbSecret: !!process.env.DB_SECRET_ARN,\n          hasDbEndpoint: !!process.env.DB_ENDPOINT,\n          hasAwsRegion: !!process.env.AWS_REGION\n        }\n      });\n    }\n\n    // Full health check with timeout protection\n    const dbHealthPromise = getComprehensiveDbHealth();\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 25,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        environment: process.env.ENVIRONMENT || '",
      "context": "    23:         status: 'healthy',\n    24:         healthy: true,\n>>> 25:         service: 'Financial Dashboard API',\n    26:         environment: process.env.ENVIRONMENT || 'dev',\n    27:         memory: process.memoryUsage(),"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 25,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        environment: process.env.ENVIRONMENT || '",
      "context": "    23:         status: 'healthy',\n    24:         healthy: true,\n>>> 25:         service: 'Financial Dashboard API',\n    26:         environment: process.env.ENVIRONMENT || 'dev',\n    27:         memory: process.memoryUsage(),"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 31,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.ENVIRONMENT || '",
      "context": "    29:         note: 'Quick infrastructure check - database not tested',\n    30:         database: { status: 'not_tested' },\n>>> 31:         api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n    32:         config: {\n    33:           hasDbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 164,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      timestamp: new Date().toISOString(),\n      environment: process.env.ENVIRONMENT || '",
      "context": "    162:       status: webappTablesReady ? 'ready' : 'not_ready',\n    163:       ready: webappTablesReady,\n>>> 164:       service: 'Financial Dashboard API',\n    165:       timestamp: new Date().toISOString(),\n    166:       environment: process.env.ENVIRONMENT || 'dev',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 600,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      environment: process.env.ENVIRONMENT || '",
      "context": "    598:       service: 'Financial Dashboard API',\n    599:       version: '1.0.0',\n>>> 600:       status: 'operational',\n    601:       environment: process.env.ENVIRONMENT || 'dev',\n    602:       region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'us-east-1',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 601,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || '",
      "context": "    599:       version: '1.0.0',\n    600:       status: 'operational',\n>>> 601:       environment: process.env.ENVIRONMENT || 'dev',\n    602:       region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'us-east-1',\n    603:       "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 616,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          secretArn: process.env.DB_SECRET_ARN ? '",
      "context": "    614:       configuration: {\n    615:         database: {\n>>> 616:           endpoint: process.env.DB_ENDPOINT ? 'configured' : 'not_configured',\n    617:           secretArn: process.env.DB_SECRET_ARN ? 'configured' : 'not_configured',\n    618:           connectTimeout: process.env.DB_CONNECT_TIMEOUT || 'default',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 617,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          connectTimeout: process.env.DB_CONNECT_TIMEOUT || '",
      "context": "    615:         database: {\n    616:           endpoint: process.env.DB_ENDPOINT ? 'configured' : 'not_configured',\n>>> 617:           secretArn: process.env.DB_SECRET_ARN ? 'configured' : 'not_configured',\n    618:           connectTimeout: process.env.DB_CONNECT_TIMEOUT || 'default',\n    619:           poolMax: process.env.DB_POOL_MAX || 'default'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 618,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          poolMax: process.env.DB_POOL_MAX || '",
      "context": "    616:           endpoint: process.env.DB_ENDPOINT ? 'configured' : 'not_configured',\n    617:           secretArn: process.env.DB_SECRET_ARN ? 'configured' : 'not_configured',\n>>> 618:           connectTimeout: process.env.DB_CONNECT_TIMEOUT || 'default',\n    619:           poolMax: process.env.DB_POOL_MAX || 'default'\n    620:         },"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 622,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          cognitoClient: process.env.COGNITO_CLIENT_ID ? '",
      "context": "    620:         },\n    621:         authentication: {\n>>> 622:           cognitoUserPool: process.env.COGNITO_USER_POOL_ID ? 'configured' : 'not_configured',\n    623:           cognitoClient: process.env.COGNITO_CLIENT_ID ? 'configured' : 'not_configured'\n    624:         },"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 626,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n        },\n        lambda: {\n          functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    624:         },\n    625:         apiKeys: {\n>>> 626:           encryptionSecret: process.env.API_KEY_ENCRYPTION_SECRET_ARN ? 'configured' : 'not_configured'\n    627:         },\n    628:         lambda: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 629,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || '",
      "context": "    627:         },\n    628:         lambda: {\n>>> 629:           functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n    630:           functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown',\n    631:           region: process.env.AWS_REGION || 'unknown'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 630,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          region: process.env.AWS_REGION || '",
      "context": "    628:         lambda: {\n    629:           functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n>>> 630:           functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown',\n    631:           region: process.env.AWS_REGION || 'unknown'\n    632:         }"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 655,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n    }\n    \n    try {\n      const secretArn = process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n      if (secretArn) {\n        diagnostics.healthChecks.secretsManager = '",
      "context": "    653:       diagnostics.healthChecks.apiKeyService = 'healthy';\n    654:     } catch (error) {\n>>> 655:       diagnostics.healthChecks.apiKeyService = 'failed';\n    656:     }\n    657:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 719,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        DB_CONNECT_TIMEOUT: process.env.DB_CONNECT_TIMEOUT,\n        DB_POOL_MAX: process.env.DB_POOL_MAX\n      },\n      lambda_info: {\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        platform: process.platform,\n        node_version: process.version\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      status: '",
      "context": "    717:       database_config: {\n    718:         DB_ENDPOINT: process.env.DB_ENDPOINT,\n>>> 719:         DB_SECRET_ARN: process.env.DB_SECRET_ARN ? 'SET' : 'NOT_SET',\n    720:         DB_CONNECT_TIMEOUT: process.env.DB_CONNECT_TIMEOUT,\n    721:         DB_POOL_MAX: process.env.DB_POOL_MAX"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1175,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    const startTime = Date.now();\n    \n    const secretsManager = new SecretsManagerClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1173: async function checkAwsSecretsManagerHealth() {\n    1174:   try {\n>>> 1175:     console.log('🔍 Checking AWS Secrets Manager health...');\n    1176:     const startTime = Date.now();\n    1177:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1179,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    });\n    \n    // Test basic Secrets Manager connectivity\n    const testSecretArn = process.env.DB_SECRET_ARN || process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n    \n    if (!testSecretArn) {\n      return {\n        status: '",
      "context": "    1177:     \n    1178:     const secretsManager = new SecretsManagerClient({\n>>> 1179:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    1180:     });\n    1181:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1188,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        configured: false,\n        region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1186:       return {\n    1187:         status: 'degraded',\n>>> 1188:         message: 'No Secrets Manager ARNs configured',\n    1189:         configured: false,\n    1190:         region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1207,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      configured: true,\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1205:       status: 'healthy',\n    1206:       message: 'AWS Secrets Manager is accessible',\n>>> 1207:       responseTime: `${duration}ms`,\n    1208:       configured: true,\n    1209:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1209,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      secrets: {\n        dbSecret: !!process.env.DB_SECRET_ARN,\n        apiKeySecret: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN\n      }\n    };\n  } catch (error) {\n    console.error('",
      "context": "    1207:       responseTime: `${duration}ms`,\n    1208:       configured: true,\n>>> 1209:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n    1210:       secrets: {\n    1211:         dbSecret: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1221,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'),\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1219:       message: 'AWS Secrets Manager health check failed',\n    1220:       error: error.message,\n>>> 1221:       timeout: error.message.includes('timeout'),\n    1222:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    1223:     };"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1232,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    if (!process.env.DB_ENDPOINT) {\n      return {\n        status: '",
      "context": "    1230: async function checkAwsRdsHealth() {\n    1231:   try {\n>>> 1232:     console.log('🔍 Checking AWS RDS health...');\n    1233:     \n    1234:     if (!process.env.DB_ENDPOINT) {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1271,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    const startTime = Date.now();\n    \n    const userPoolId = process.env.COGNITO_USER_POOL_ID;\n    const clientId = process.env.COGNITO_CLIENT_ID;\n    \n    if (!userPoolId || !clientId) {\n      return {\n        status: '",
      "context": "    1269: async function checkAwsCognitoHealth() {\n    1270:   try {\n>>> 1271:     console.log('🔍 Checking AWS Cognito health...');\n    1272:     const startTime = Date.now();\n    1273:     "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1188,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        configured: false,\n        region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1186:       return {\n    1187:         status: 'degraded',\n>>> 1188:         message: 'No Secrets Manager ARNs configured',\n    1189:         configured: false,\n    1190:         region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1282,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        userPool: !!userPoolId,\n        clientId: !!clientId\n      };\n    }\n    \n    const cognitoIdp = new CognitoIdentityProviderClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1280:         message: 'Cognito configuration not complete',\n    1281:         configured: false,\n>>> 1282:         region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n    1283:         userPool: !!userPoolId,\n    1284:         clientId: !!clientId"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1207,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      configured: true,\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1205:       status: 'healthy',\n    1206:       message: 'AWS Secrets Manager is accessible',\n>>> 1207:       responseTime: `${duration}ms`,\n    1208:       configured: true,\n    1209:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1221,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'),\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1219:       message: 'AWS Secrets Manager health check failed',\n    1220:       error: error.message,\n>>> 1221:       timeout: error.message.includes('timeout'),\n    1222:       region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    1223:     };"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1340,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      features: {\n        encryption: apiKeyService.isEnabled,\n        secretsManager: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n        encryptionTest: testResult.success\n      },\n      encryptionTest: testResult\n    };\n  } catch (error) {\n    return {\n      status: '",
      "context": "    1338:       status: apiKeyService.isEnabled && testResult.success ? 'healthy' : 'degraded',\n    1339:       enabled: apiKeyService.isEnabled,\n>>> 1340:       message: 'API key service is initialized and enabled',\n    1341:       features: {\n    1342:         encryption: apiKeyService.isEnabled,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1353,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      features: {\n        encryption: false,\n        secretsManager: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n        encryptionTest: false\n      }\n    };\n  }\n}\n\nasync function checkJwtSecretServiceHealth() {\n  try {\n    console.log('",
      "context": "    1351:       enabled: false,\n    1352:       error: error.message,\n>>> 1353:       message: 'API key service is not available',\n    1354:       features: {\n    1355:         encryption: false,"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1491,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    };\n  }\n}\n\nasync function checkSecretsManagerHealth() {\n  try {\n    const secretArn = process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n    \n    if (!secretArn) {\n      return {\n        status: '",
      "context": "    1489:       status: 'failed',\n    1490:       error: error.message,\n>>> 1491:       message: 'Failed to check database tables'\n    1492:     };\n    1493:   }"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 1688,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    1686:     res.status(500).json({\n    1687:       success: false,\n>>> 1688:       error: 'Database schema validation failed',\n    1689:       details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n    1690:       request_info: {"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 127,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    125:       if (existingTables.includes(table)) {\n    126:         try {\n>>> 127:           const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n    128:           results[table] = { \n    129:             exists: true, "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 127,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table}",
      "context": "    125:       if (existingTables.includes(table)) {\n    126:         try {\n>>> 127:           const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n    128:           results[table] = { \n    129:             exists: true, "
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 21,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.quick === 'true') {\n      return res.success({\n        status: 'healthy',\n        healthy: true,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        note: 'Quick infrastructure check - database not tested',\n        database: { status: 'not_tested' },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        config: {\n          hasDbSecret: !!process.env.DB_SECRET_ARN,\n          hasDbEndpoint: !!process.env.DB_ENDPOINT,\n          hasAwsRegion: !!process.env.AWS_REGION\n        }\n      });\n    }\n\n    // Full health check with timeout protection\n    const dbHealthPromise = getComprehensiveDbHealth();\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Health check timeout')), maxTimeout)\n    );\n    \n    const dbHealth = await Promise.race([dbHealthPromise, timeoutPromise]);\n    const isHealthy = dbHealth.status === 'connected';\n\n    if (isHealthy) {\n      return res.success({\n        status: 'healthy',\n        healthy: true,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: dbHealth.database,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    } else {\n      return res.serviceUnavailable('Database', {\n        status: 'unhealthy',\n        healthy: false,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: dbHealth.database,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    }\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error('Health check failed:', error);\n    \n    // Handle timeout specifically\n    if (error.message === 'Health check timeout') {\n      return res.status(408).json({\n        status: 'timeout',\n        healthy: false,\n        message: 'Health check timed out after 10 seconds',\n        database: { status: 'timeout', error: 'Database health check exceeded timeout' },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        duration: duration,\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    res.serverError('Health check failed', {\n      status: 'unhealthy',\n      healthy: false,\n      database: { status: 'error', error: error.message },\n      api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n      duration: duration,\n      memory: process.memoryUsage(),\n      uptime: process.uptime()\n    });\n  }\n});\n\n// Application readiness check - tests if database has tables\nrouter.get('/ready', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    \n    // First check what tables actually exist\n    const tablesResult = await query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_type = 'BASE TABLE'\n      ORDER BY table_name;\n    `);\n    \n    const existingTables = tablesResult.rows.map(r => r.table_name);\n    \n    // Check critical webapp tables (not stock_symbols - that comes from data loading)\n    const criticalWebappTables = ['last_updated', 'health_status'];\n    const results = {};\n    \n    for (const table of criticalWebappTables) {\n      if (existingTables.includes(table)) {\n        try {\n          const result = await query(`",
      "context": "    19:   try {\n    20:     // Quick health check without database\n>>> 21:     if (req.query.quick === 'true') {\n    22:       return res.success({\n    23:         status: 'healthy',"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 348,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.table || 'stock_symbols';\n    \n    // First check if table exists\n    const tableCheck = await query(`\n      SELECT COUNT(*) as exists \n      FROM information_schema.tables \n      WHERE table_schema = 'public'",
      "context": "    346:   try {\n    347:     const { query } = require('../utils/database');\n>>> 348:     const tableName = req.query.table || 'stock_symbols';\n    349:     \n    350:     // First check if table exists"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 377,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.table || 'stock_symbols',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Timeout and circuit breaker monitoring endpoint\nrouter.get('/timeout-status', async (req, res) => {\n  try {\n    const circuitBreakers = timeoutHelper.getCircuitBreakerStatus();\n    const timeoutConfig = {\n      database: timeoutHelper.defaultTimeouts.database,\n      alpaca: timeoutHelper.defaultTimeouts.alpaca,\n      news: timeoutHelper.defaultTimeouts.news,\n      sentiment: timeoutHelper.defaultTimeouts.sentiment,\n      external: timeoutHelper.defaultTimeouts.external,\n      upload: timeoutHelper.defaultTimeouts.upload,\n      websocket: timeoutHelper.defaultTimeouts.websocket\n    };\n\n    res.success({\n      timeouts: timeoutConfig,\n      circuitBreakers: circuitBreakers,\n      summary: {\n        totalCircuitBreakers: Object.keys(circuitBreakers).length,\n        openCircuitBreakers: Object.values(circuitBreakers).filter(cb => cb.state === 'open').length,\n        halfOpenCircuitBreakers: Object.values(circuitBreakers).filter(cb => cb.state === 'half-open').length,\n        healthyServices: Object.values(circuitBreakers).filter(cb => cb.state === 'closed').length\n      },\n      recommendations: generateTimeoutRecommendations(circuitBreakers)\n    });\n  } catch (error) {\n    console.error('❌ Timeout status check failed:', error);\n    res.serverError('Failed to get timeout status', error.message);\n  }\n});\n\n// Enhanced circuit breaker analytics endpoint\nrouter.get('/circuit-breaker-analytics', async (req, res) => {\n  try {\n    const circuitBreakers = timeoutHelper.getCircuitBreakerStatus();\n    const analytics = {};\n    \n    // Analyze each circuit breaker\n    for (const [serviceKey, breaker] of Object.entries(circuitBreakers)) {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailureTime;\n      const isRecentFailure = timeSinceLastFailure < 300000; // 5 minutes\n      \n      analytics[serviceKey] = {\n        ...breaker,\n        analysis: {\n          healthScore: calculateHealthScore(breaker),\n          riskLevel: calculateRiskLevel(breaker),\n          timeSinceLastFailure: timeSinceLastFailure,\n          isRecentFailure,\n          nextStateTransition: getNextStateTransition(breaker),\n          recommendedAction: getRecommendedAction(breaker),\n          alertLevel: getAlertLevel(breaker)\n        }\n      };\n    }\n    \n    // Generate system-wide analytics\n    const systemAnalytics = {\n      overallHealthScore: calculateOverallHealthScore(analytics),\n      criticalServices: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.alertLevel === 'critical').map(([key, _]) => key),\n      warningServices: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.alertLevel === 'warning').map(([key, _]) => key),\n      recentFailures: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.isRecentFailure).length,\n      totalFailures: Object.values(analytics).reduce((sum, breaker) => sum + breaker.failures, 0),\n      recommendations: generateSystemRecommendations(analytics)\n    };\n\n    res.success({\n      timestamp: new Date().toISOString(),\n      analytics,\n      systemAnalytics,\n      summary: {\n        totalServices: Object.keys(analytics).length,\n        healthyServices: Object.values(analytics).filter(a => a.analysis.alertLevel === 'healthy').length,\n        warningServices: systemAnalytics.warningServices.length,\n        criticalServices: systemAnalytics.criticalServices.length,\n        overallHealthScore: systemAnalytics.overallHealthScore\n      }\n    });\n  } catch (error) {\n    console.error('❌ Circuit breaker analytics failed:', error);\n    res.serverError('Failed to generate circuit breaker analytics', error.message);\n  }\n});\n\n// Schema validation endpoint - comprehensive database schema analysis\nrouter.get('/schema-validation', async (req, res) => {\n  try {\n    console.log('🔍 Starting comprehensive schema validation...');\n    const startTime = Date.now();\n    \n    const options = {\n      includeOptional: req.query.include_optional !== 'false',\n      strict: req.query.strict === 'true'\n    };\n    \n    const report = await schemaValidator.getSchemaValidationReport(options);\n    const duration = Date.now() - startTime;\n    \n    console.log(`",
      "context": "    375:     res.status(500).json({\n    376:       status: 'error',\n>>> 377:       table: req.query.table || 'stock_symbols',\n    378:       error: error.message,\n    379:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/health.js",
      "line": 531,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.tableName}':`, error);\n    res.serverError('Table existence check failed', error.message);\n  }\n});\n\n// Schema validation cache management\nrouter.post('/schema-validation/clear-cache', async (req, res) => {\n  try {\n    const cacheStatus = schemaValidator.getCacheStatus();\n    schemaValidator.clearCache();\n    \n    res.success({\n      message: 'Schema validation cache cleared',\n      previousCacheSize: cacheStatus.size,\n      clearedEntries: cacheStatus.entries.length\n    });\n  } catch (error) {\n    console.error('❌ Failed to clear schema cache:', error);\n    res.serverError('Failed to clear schema cache', error.message);\n  }\n});\n\n// Debug endpoint to check table structure\nrouter.get('/debug/table-structure', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    const tableName = req.query.table || 'users';\n    \n    // Get table column information\n    const result = await query(`\n      SELECT \n        column_name,\n        data_type,\n        is_nullable,\n        column_default,\n        character_maximum_length\n      FROM information_schema.columns \n      WHERE table_schema = 'public'",
      "context": "    529:     });\n    530:   } catch (error) {\n>>> 531:     console.error(`❌ Table existence check failed for '${req.params.tableName}':`, error);\n    532:     res.serverError('Table existence check failed', error.message);\n    533:   }"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🗑️ Removed ${sym} from centralized stream (no more subscribers)`",
      "context": "    184:           if (!otherUsersSubscribed) {\n    185:             serviceState.activeSymbols.delete(sym);\n>>> 186:             console.log(`🗑️ Removed ${sym} from centralized stream (no more subscribers)`);\n    187:           }\n    188:         });"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Removed all subscriptions for user ${userId}`",
      "context": "    189:         \n    190:         serviceState.userSubscriptions.delete(userId);\n>>> 191:         console.log(`✅ Removed all subscriptions for user ${userId}`);\n    192:       }\n    193:       "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 222,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🗑️ Removed ${upperSymbol} from centralized stream (no more subscribers)`",
      "context": "    220:       if (!otherUsersSubscribed) {\n    221:         serviceState.activeSymbols.delete(upperSymbol);\n>>> 222:         console.log(`🗑️ Removed ${upperSymbol} from centralized stream (no more subscribers)`);\n    223:       }\n    224:       "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ User ${userId} unsubscribed from ${upperSymbol}`",
      "context": "    223:       }\n    224:       \n>>> 225:       console.log(`✅ User ${userId} unsubscribed from ${upperSymbol}`);\n    226:     }\n    227: "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 356,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`feed-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    354:     }\n    355:     \n>>> 356:     const feedId = `feed-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    357:     \n    358:     const feedConfig = {"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 394,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Feed ${feedId} started successfully`",
      "context": "    392:       });\n    393:       \n>>> 394:       console.log(`✅ Feed ${feedId} started successfully`);\n    395:       res.json(success({ message: 'Feed started successfully', feed: feedConfig }));\n    396:       "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 398,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to start feed ${feedId}:`",
      "context": "    396:       \n    397:     } catch (error) {\n>>> 398:       console.error(`❌ Failed to start feed ${feedId}:`, error);\n    399:       feedConfig.status = 'failed';\n    400:       feedConfig.error = error.message;"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 416,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⏹️ Admin stopping feed: ${feedId}`",
      "context": "    414:     const { feedId } = req.params;\n    415:     \n>>> 416:     console.log(`⏹️ Admin stopping feed: ${feedId}`);\n    417:     \n    418:     const feed = activeFeeds.get(feedId);"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 431,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Feed ${feedId} stopped successfully`",
      "context": "    429:       feedMetrics.delete(feedId);\n    430:       \n>>> 431:       console.log(`✅ Feed ${feedId} stopped successfully`);\n    432:       res.json(success({ message: 'Feed stopped successfully' }));\n    433:       "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 435,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to stop feed ${feedId}:`",
      "context": "    433:       \n    434:     } catch (error) {\n>>> 435:       console.error(`❌ Failed to stop feed ${feedId}:`, error);\n    436:       res.status(500).json(error('Failed to stop feed'));\n    437:     }"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 452,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`➕ Admin adding symbol ${symbol} to feed ${feedId}`",
      "context": "    450:     const { symbol } = req.body;\n    451:     \n>>> 452:     console.log(`➕ Admin adding symbol ${symbol} to feed ${feedId}`);\n    453:     \n    454:     const feed = activeFeeds.get(feedId);"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 482,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Symbol ${upperSymbol} added to feed ${feedId}`",
      "context": "    480:     }\n    481:     \n>>> 482:     console.log(`✅ Symbol ${upperSymbol} added to feed ${feedId}`);\n    483:     res.json(success({ message: 'Symbol added successfully', feed: feed }));\n    484:     "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 498,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Admin searching symbols: \"${searchQuery}\"`",
      "context": "    496:     const { q: searchQuery, type = 'stocks' } = req.query;\n    497:     \n>>> 498:     console.log(`🔍 Admin searching symbols: \"${searchQuery}\"`);\n    499:     \n    500:     if (!searchQuery || searchQuery.length < 1) {"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 90,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' };\n      return next();\n    }\n\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    88:       // Fallback if JWT not available\n    89:       console.warn('JWT not available, using demo user');\n>>> 90:       req.user = { userId: 'demo-user', username: 'demo' };\n    91:       return next();\n    92:     }"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 96,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    req.user = { userId: payload.sub, username: payload.username };\n    next();\n  } catch (error) {\n    console.error('",
      "context": "    94:     const verifier = jwt.CognitoJwtVerifier.create({\n    95:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 96:       tokenUse: 'access',\n    97:       clientId: process.env.COGNITO_CLIENT_ID\n    98:     });"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 252,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', process.env.ADMIN_USER_ID];\n  if (req.user && (req.user.role === '",
      "context": "    250: const isAdmin = (req, res, next) => {\n    251:   // For now, check if user has admin role or is specific admin user\n>>> 252:   const adminUsers = ['admin', 'administrator', process.env.ADMIN_USER_ID];\n    253:   if (req.user && (req.user.role === 'admin' || adminUsers.includes(req.user.userId))) {\n    254:     return next();"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 225,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${upperSymbol}",
      "context": "    223:       }\n    224:       \n>>> 225:       console.log(`✅ User ${userId} unsubscribed from ${upperSymbol}`);\n    226:     }\n    227: "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 348,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    console.log('🚀 Admin starting new feed:', { assetType, dataTypes, symbols });\n    \n    if (!assetType || !dataTypes || !symbols || symbols.length === 0) {\n      return res.status(400).json(error('Missing required fields'));\n    }\n    \n    const feedId = `",
      "context": "    346: router.post('/admin/feeds', authenticateToken, isAdmin, async (req, res) => {\n    347:   try {\n>>> 348:     const { assetType, dataTypes, symbols } = req.body;\n    349:     \n    350:     console.log('🚀 Admin starting new feed:', { assetType, dataTypes, symbols });"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 414,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    console.log(`",
      "context": "    412: router.delete('/admin/feeds/:feedId', authenticateToken, isAdmin, async (req, res) => {\n    413:   try {\n>>> 414:     const { feedId } = req.params;\n    415:     \n    416:     console.log(`⏹️ Admin stopping feed: ${feedId}`);"
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 449,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { symbol } = req.body;\n    \n    console.log(`",
      "context": "    447: router.post('/admin/feeds/:feedId/symbols', authenticateToken, isAdmin, async (req, res) => {\n    448:   try {\n>>> 449:     const { feedId } = req.params;\n    450:     const { symbol } = req.body;\n    451:     "
    },
    {
      "file": "webapp/lambda/routes/liveData.js",
      "line": 496,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    console.log(`🔍 Admin searching symbols: \"",
      "context": "    494: router.get('/admin/symbols/search', authenticateToken, isAdmin, async (req, res) => {\n    495:   try {\n>>> 496:     const { q: searchQuery, type = 'stocks' } = req.query;\n    497:     \n    498:     console.log(`🔍 Admin searching symbols: \"${searchQuery}\"`);"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 153,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Market data health check initiated`",
      "context": "    151:       throw new Error('User authentication required');\n    152:     }\n>>> 153:     console.log(`🚀 [${requestId}] Market data health check initiated`, {\n    154:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    155:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 154,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    152:     }\n    153:     console.log(`🚀 [${requestId}] Market data health check initiated`, {\n>>> 154:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    155:       userAgent: req.headers['user-agent'],\n    156:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${requestId}] Testing API key availability for market data access`",
      "context": "    159: \n    160:     // Test API key availability and functionality\n>>> 161:     console.log(`🔑 [${requestId}] Testing API key availability for market data access`);\n    162:     const credentialsStart = Date.now();\n    163:     const credentials = await getUserApiKey(userId, 'alpaca');"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No API credentials found for market data access`",
      "context": "    178:     // API Key Health Check\n    179:     if (!credentials) {\n>>> 180:       console.error(`❌ [${requestId}] No API credentials found for market data access`, {\n    181:         userId: `${userId.substring(0, 8)}...`,\n    182:         impact: 'Market data functionality will not work',"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 154,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    152:     }\n    153:     console.log(`🚀 [${requestId}] Market data health check initiated`, {\n>>> 154:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    155:       userAgent: req.headers['user-agent'],\n    156:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 194,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API credentials found`",
      "context": "    192:       };\n    193:     } else {\n>>> 194:       console.log(`✅ [${requestId}] API credentials found`, {\n    195:         provider: 'alpaca',\n    196:         isSandbox: credentials.isSandbox,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 210,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] Testing Alpaca service connectivity`",
      "context": "    208: \n    209:       // Test external service connectivity\n>>> 210:       console.log(`📡 [${requestId}] Testing Alpaca service connectivity`);\n    211:       const alpacaTestStart = Date.now();\n    212:       "
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 221,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧪 [${requestId}] Testing account connectivity`",
      "context": "    219: \n    220:         // Test 1: Account connectivity\n>>> 221:         console.log(`🧪 [${requestId}] Testing account connectivity`);\n    222:         const accountTestStart = Date.now();\n    223:         const account = await Promise.race(["
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 232,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Account connectivity test PASSED in ${accountTestDuration}ms`",
      "context": "    230:         \n    231:         if (account) {\n>>> 232:           console.log(`✅ [${requestId}] Account connectivity test PASSED in ${accountTestDuration}ms`, {\n    233:             accountId: account.id,\n    234:             status: account.status,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 248,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧪 [${requestId}] Testing market data connectivity`",
      "context": "    246: \n    247:         // Test 2: Market data connectivity (basic quote)\n>>> 248:         console.log(`🧪 [${requestId}] Testing market data connectivity`);\n    249:         const quoteTestStart = Date.now();\n    250:         "
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 261,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Market data connectivity test PASSED in ${quoteTestDuration}ms`",
      "context": "    259:           \n    260:           if (testQuote) {\n>>> 261:             console.log(`✅ [${requestId}] Market data connectivity test PASSED in ${quoteTestDuration}ms`, {\n    262:               symbol: 'AAPL',\n    263:               bidPrice: testQuote.bidPrice,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 282,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Market data connectivity test FAILED after ${quoteTestDuration}ms:`",
      "context": "    280:         } catch (quoteError) {\n    281:           const quoteTestDuration = Date.now() - quoteTestStart;\n>>> 282:           console.warn(`⚠️ [${requestId}] Market data connectivity test FAILED after ${quoteTestDuration}ms:`, {\n    283:             error: quoteError.message,\n    284:             impact: 'Real-time quotes may not be available'"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 300,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧪 [${requestId}] Testing market calendar connectivity`",
      "context": "    298: \n    299:         // Test 3: Market status/calendar\n>>> 300:         console.log(`🧪 [${requestId}] Testing market calendar connectivity`);\n    301:         const calendarTestStart = Date.now();\n    302:         "
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 312,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Market calendar connectivity test PASSED in ${calendarTestDuration}ms`",
      "context": "    310:           const calendarTestDuration = Date.now() - calendarTestStart;\n    311:           \n>>> 312:           console.log(`✅ [${requestId}] Market calendar connectivity test PASSED in ${calendarTestDuration}ms`);\n    313:           \n    314:           healthResult.external_services.market_calendar = {"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 321,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Market calendar test FAILED after ${calendarTestDuration}ms:`",
      "context": "    319:         } catch (calendarError) {\n    320:           const calendarTestDuration = Date.now() - calendarTestStart;\n>>> 321:           console.warn(`⚠️ [${requestId}] Market calendar test FAILED after ${calendarTestDuration}ms:`, {\n    322:             error: calendarError.message\n    323:           });"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 337,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca service connectivity FAILED after ${alpacaTestDuration}ms:`",
      "context": "    335:       } catch (alpacaError) {\n    336:         const alpacaTestDuration = Date.now() - alpacaTestStart;\n>>> 337:         console.error(`❌ [${requestId}] Alpaca service connectivity FAILED after ${alpacaTestDuration}ms:`, {\n    338:           error: alpacaError.message,\n    339:           errorStack: alpacaError.stack,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 363,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Market data health check completed in ${totalDuration}ms`",
      "context": "    361:     healthResult.performance.total_duration_ms = totalDuration;\n    362: \n>>> 363:     console.log(`✅ [${requestId}] Market data health check completed in ${totalDuration}ms`, {\n    364:       overallStatus: healthResult.overall_status,\n    365:       apiKeyStatus: healthResult.api_key_status.status,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 386,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Market data health check FAILED after ${errorDuration}ms:`",
      "context": "    384:   } catch (error) {\n    385:     const errorDuration = Date.now() - requestStart;\n>>> 386:     console.error(`❌ [${requestId}] Market data health check FAILED after ${errorDuration}ms:`, {\n    387:       error: error.message,\n    388:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 417,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [MARKET-DATA] Quotes request for user ${userId}, symbols: ${symbols}`",
      "context": "    415:     const { symbols } = req.validated;\n    416:     \n>>> 417:     console.log(`📊 [MARKET-DATA] Quotes request for user ${userId}, symbols: ${symbols}`);\n    418: \n    419:     // Get user's API key"
    },
    {
      "file": "webapp/lambda/routes/market-data.js",
      "line": 394,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    392:     res.status(500).json({\n    393:       success: false,\n>>> 394:       error: 'Market data health check failed',\n    395:       details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n    396:       request_info: {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 22,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking table ${tableName}:`",
      "context": "    20:       results[tableName] = tableExistsResult.rows[0].exists;\n    21:     } catch (error) {\n>>> 22:       console.error(`Error checking table ${tableName}:`, error.message);\n    23:       results[tableName] = false;\n    24:     }"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${tableName}`",
      "context": "    69:       if (exists) {\n    70:         try {\n>>> 71:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    72:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    73:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database connection failed: ${dbError.message}`",
      "context": "    134:       healthCheck.checks.database_connection = {\n    135:         status: 'unhealthy',\n>>> 136:         message: `Database connection failed: ${dbError.message}`,\n    137:         duration_ms: Date.now() - dbStart\n    138:       };"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${tableName}`",
      "context": "    69:       if (exists) {\n    70:         try {\n>>> 71:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    72:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    73:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 202,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n                    SELECT ${col} FROM ${tableName} \n                    ORDER BY ${col} DESC LIMIT 1\n                  `",
      "context": "    200:               for (const col of timestampCols) {\n    201:                 try {\n>>> 202:                   const lastUpdate = await query(`\n    203:                     SELECT ${col} FROM ${tableName} \n    204:                     ORDER BY ${col} DESC LIMIT 1"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`endpoint_test_error: ${error.message}`",
      "context": "    269:       \n    270:     } catch (error) {\n>>> 271:       failingEndpoints.push(`endpoint_test_error: ${error.message}`);\n    272:     }\n    273:     "
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 492,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sentiment history endpoint called for ${days} days`",
      "context": "    490:   const { days = 30 } = req.query;\n    491:   \n>>> 492:   console.log(`Sentiment history endpoint called for ${days} days`);\n    493:   \n    494:   try {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 496,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        date,\n        value,\n        classification\n      FROM fear_greed_index\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC\n      LIMIT 100\n    `",
      "context": "    494:   try {\n    495:     // Get fear & greed data\n>>> 496:     const fearGreedQuery = `\n    497:       SELECT \n    498:         date,"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 512,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved ${fearGreedData.length} fear & greed records from database`",
      "context": "    510:       const fearGreedResult = await query(fearGreedQuery);\n    511:       fearGreedData = fearGreedResult.rows;\n>>> 512:       console.log(`✅ Retrieved ${fearGreedData.length} fear & greed records from database`);\n    513:     } catch (e) {\n    514:       console.error('❌ Fear & greed table not available:', e.message);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 515,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Fear & greed data unavailable: ${e.message}`",
      "context": "    513:     } catch (e) {\n    514:       console.error('❌ Fear & greed table not available:', e.message);\n>>> 515:       fearGreedError = `Fear & greed data unavailable: ${e.message}`;\n    516:       // NO FALLBACK DATA - return error information instead\n    517:     }"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 520,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        date,\n        exposure_index,\n        long_exposure,\n        short_exposure\n      FROM naaim\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC\n      LIMIT 100\n    `",
      "context": "    518: \n    519:     // Get NAAIM data\n>>> 520:     const naaimQuery = `\n    521:       SELECT \n    522:         date,"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 537,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved ${naaimData.length} NAAIM records from database`",
      "context": "    535:       const naaimResult = await query(naaimQuery);\n    536:       naaimData = naaimResult.rows;\n>>> 537:       console.log(`✅ Retrieved ${naaimData.length} NAAIM records from database`);\n    538:     } catch (e) {\n    539:       console.error('❌ NAAIM table not available:', e.message);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 540,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`NAAIM data unavailable: ${e.message}`",
      "context": "    538:     } catch (e) {\n    539:       console.error('❌ NAAIM table not available:', e.message);\n>>> 540:       naaimError = `NAAIM data unavailable: ${e.message}`;\n    541:       // NO FALLBACK DATA - return error information instead\n    542:     }"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 799,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Economic indicators endpoint called for ${days} days`",
      "context": "    797:   const { days = 90 } = req.query;\n    798:   \n>>> 799:   console.log(`Economic indicators endpoint called for ${days} days`);\n    800:   \n    801:   try {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 842,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        date,\n        indicator_name,\n        value,\n        unit,\n        frequency\n      FROM economic_data\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC, indicator_name\n      LIMIT 500\n    `",
      "context": "    840: \n    841:     // Get economic indicators\n>>> 842:     const economicQuery = `\n    843:       SELECT \n    844:         date,"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 856,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Found ${result.rows.length} economic data points`",
      "context": "    854: \n    855:     const result = await query(economicQuery);\n>>> 856:     console.log(`Found ${result.rows.length} economic data points`);\n    857: \n    858:     // Group by indicator"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 871,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Processed ${Object.keys(indicators).length} economic indicators`",
      "context": "    869:     });\n    870: \n>>> 871:     console.log(`Processed ${Object.keys(indicators).length} economic indicators`);\n    872: \n    873:     if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 940,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`NAAIM data endpoint called with limit: ${limit}`",
      "context": "    938:   const { limit = 30 } = req.query;\n    939:   \n>>> 940:   console.log(`NAAIM data endpoint called with limit: ${limit}`);\n    941:   \n    942:   try {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 992,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Fear & Greed data endpoint called with limit: ${limit}`",
      "context": "    990:   const { limit = 30 } = req.query;\n    991:   \n>>> 992:   console.log(`Fear & Greed data endpoint called with limit: ${limit}`);\n    993:   \n    994:   try {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 1257,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND importance = $${++paramCount}`",
      "context": "    1255: \n    1256:     if (importance) {\n>>> 1257:       whereClause += ` AND importance = $${++paramCount}`;\n    1258:       queryParams.push(importance);\n    1259:     }"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 1262,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND category = $${++paramCount}`",
      "context": "    1260: \n    1261:     if (category) {\n>>> 1262:       whereClause += ` AND category = $${++paramCount}`;\n    1263:       queryParams.push(category);\n    1264:     }"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 1319,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved ${calendarData.length} economic calendar events`",
      "context": "    1317:     }));\n    1318: \n>>> 1319:     console.log(`✅ Retrieved ${calendarData.length} economic calendar events`);\n    1320: \n    1321:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 1623,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Year ${currentCyclePosition} of 4`",
      "context": "    1621:     // 9. CURRENT SEASONAL POSITION\n    1622:     const currentPosition = {\n>>> 1623:       presidentialCycle: `Year ${currentCyclePosition} of 4`,\n    1624:       monthlyTrend: monthlySeasonality[currentMonth - 1].description,\n    1625:       quarterlyTrend: quarterlySeasonality[Math.ceil(currentMonth / 3) - 1].description,"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 2048,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[MARKET] FRED search endpoint called for: \"${searchText}\"`",
      "context": "    2046: router.get('/economic/fred/search', async (req, res) => {\n    2047:   const { q: searchText = '', limit = 20 } = req.query;\n>>> 2048:   console.log(`[MARKET] FRED search endpoint called for: \"${searchText}\"`);\n    2049:   \n    2050:   try {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 71,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    69:       if (exists) {\n    70:         try {\n>>> 71:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    72:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    73:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 71,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    69:       if (exists) {\n    70:         try {\n>>> 71:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    72:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    73:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 71,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    69:       if (exists) {\n    70:         try {\n>>> 71:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    72:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    73:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 490,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  console.log(`",
      "context": "    488: // Get sentiment history over time\n    489: router.get('/sentiment/history', async (req, res) => {\n>>> 490:   const { days = 30 } = req.query;\n    491:   \n    492:   console.log(`Sentiment history endpoint called for ${days} days`);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 490,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  console.log(`",
      "context": "    488: // Get sentiment history over time\n    489: router.get('/sentiment/history', async (req, res) => {\n>>> 490:   const { days = 30 } = req.query;\n    491:   \n    492:   console.log(`Sentiment history endpoint called for ${days} days`);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 490,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  console.log(`",
      "context": "    488: // Get sentiment history over time\n    489: router.get('/sentiment/history', async (req, res) => {\n>>> 490:   const { days = 30 } = req.query;\n    491:   \n    492:   console.log(`Sentiment history endpoint called for ${days} days`);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 490,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  console.log(`",
      "context": "    488: // Get sentiment history over time\n    489: router.get('/sentiment/history', async (req, res) => {\n>>> 490:   const { days = 30 } = req.query;\n    491:   \n    492:   console.log(`Sentiment history endpoint called for ${days} days`);"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 1248,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.days) || 30;\n    const importance = req.query.importance;\n    const category = req.query.category;\n    \n    let whereClause = 'WHERE event_date >= CURRENT_DATE';\n    let queryParams = [days];\n    let paramCount = 1;\n\n    if (importance) {\n      whereClause += `",
      "context": "    1246: \n    1247:     // Get upcoming events from database\n>>> 1248:     const days = parseInt(req.query.days) || 30;\n    1249:     const importance = req.query.importance;\n    1250:     const category = req.query.category;"
    },
    {
      "file": "webapp/lambda/routes/market.js",
      "line": 2047,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  console.log(`[MARKET] FRED search endpoint called for: \"",
      "context": "    2045: // Search FRED series\n    2046: router.get('/economic/fred/search', async (req, res) => {\n>>> 2047:   const { q: searchText = '', limit = 20 } = req.query;\n    2048:   console.log(`[MARKET] FRED search endpoint called for: \"${searchText}\"`);\n    2049:   "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 39,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Stock count: ${totalStocks}`",
      "context": "    37:       const stockResult = await query('SELECT COUNT(*) as total FROM stocks WHERE current_price IS NOT NULL', [], 5000);\n    38:       totalStocks = parseInt(stockResult.rows[0]?.total || 0);\n>>> 39:       console.log(`✅ Stock count: ${totalStocks}`);\n    40:     } catch (error) {\n    41:       console.error('❌ Stock count query failed:', error.message);"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Stock data unavailable: ${error.message}`",
      "context": "    40:     } catch (error) {\n    41:       console.error('❌ Stock count query failed:', error.message);\n>>> 42:       errors.stocks = `Stock data unavailable: ${error.message}`;\n    43:     }\n    44:     "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 60,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Portfolio value: $${portfolioValue}, change: $${dailyChange}, positions: ${activeSymbols}`",
      "context": "    58:         dailyChange = parseFloat(portfolioResult.rows[0].daily_change || 0);\n    59:         activeSymbols = parseInt(portfolioResult.rows[0].total_positions || 0);\n>>> 60:         console.log(`✅ Portfolio value: $${portfolioValue}, change: $${dailyChange}, positions: ${activeSymbols}`);\n    61:       }\n    62:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio data unavailable: ${error.message}`",
      "context": "    62:     } catch (error) {\n    63:       console.error('❌ Portfolio query failed:', error.message);\n>>> 64:       errors.portfolio = `Portfolio data unavailable: ${error.message}`;\n    65:     }\n    66:     "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 75,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Active alerts: ${totalAlerts}`",
      "context": "    73:       `, [req.user.sub], 5000);\n    74:       totalAlerts = parseInt(alertResult.rows[0]?.total || 0);\n>>> 75:       console.log(`✅ Active alerts: ${totalAlerts}`);\n    76:     } catch (error) {\n    77:       console.error('❌ Alerts query failed:', error.message);"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Alerts data unavailable: ${error.message}`",
      "context": "    76:     } catch (error) {\n    77:       console.error('❌ Alerts query failed:', error.message);\n>>> 78:       errors.alerts = `Alerts data unavailable: ${error.message}`;\n    79:     }\n    80:     "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 85,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Last price update: ${lastUpdate}`",
      "context": "    83:       const updateResult = await query('SELECT MAX(updated_at) as last_update FROM stocks', [], 5000);\n    84:       lastUpdate = updateResult.rows[0]?.last_update || new Date();\n>>> 85:       console.log(`✅ Last price update: ${lastUpdate}`);\n    86:     } catch (error) {\n    87:       console.error('❌ Last update query failed:', error.message);"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 88,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Update time unavailable: ${error.message}`",
      "context": "    86:     } catch (error) {\n    87:       console.error('❌ Last update query failed:', error.message);\n>>> 88:       errors.lastUpdate = `Update time unavailable: ${error.message}`;\n    89:       lastUpdate = null;\n    90:     }"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 195,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Metrics endpoint called with params:`",
      "context": "    193:   \n    194:   try {\n>>> 195:     console.log(`📊 [${requestId}] Metrics endpoint called with params:`, JSON.stringify(req.query, null, 2));\n    196:     console.log(`📊 [${requestId}] Memory at start:`, process.memoryUsage());\n    197:     "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Memory at start:`",
      "context": "    194:   try {\n    195:     console.log(`📊 [${requestId}] Metrics endpoint called with params:`, JSON.stringify(req.query, null, 2));\n>>> 196:     console.log(`📊 [${requestId}] Memory at start:`, process.memoryUsage());\n    197:     \n    198:     // Check database availability immediately to prevent timeouts"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 199,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Testing database connectivity for metrics...`",
      "context": "    197:     \n    198:     // Check database availability immediately to prevent timeouts\n>>> 199:     console.log(`🔍 [${requestId}] Testing database connectivity for metrics...`);\n    200:     let dbAvailable = false;\n    201:     try {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 205,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database available after ${Date.now() - dbStart}ms`",
      "context": "    203:       await query('SELECT 1', [], 3000); // 3 second timeout\n    204:       dbAvailable = true;\n>>> 205:       console.log(`✅ [${requestId}] Database available after ${Date.now() - dbStart}ms`);\n    206:     } catch (dbError) {\n    207:       console.error(`❌ [${requestId}] Database unavailable for metrics endpoint after ${Date.now() - startTime}ms:`, dbError.message);"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 207,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database unavailable for metrics endpoint after ${Date.now() - startTime}ms:`",
      "context": "    205:       console.log(`✅ [${requestId}] Database available after ${Date.now() - dbStart}ms`);\n    206:     } catch (dbError) {\n>>> 207:       console.error(`❌ [${requestId}] Database unavailable for metrics endpoint after ${Date.now() - startTime}ms:`, dbError.message);\n    208:       return res.status(503).json({\n    209:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`",
      "context": "    236:     if (search) {\n    237:       paramCount++;\n>>> 238:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n    239:       params.push(`%${search}%`);\n    240:     }"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    237:       paramCount++;\n    238:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n>>> 239:       params.push(`%${search}%`);\n    240:     }\n    241: "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 245,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND s.sector = $${paramCount}`",
      "context": "    243:     if (sector && sector.trim() !== '') {\n    244:       paramCount++;\n>>> 245:       whereClause += ` AND s.sector = $${paramCount}`;\n    246:       params.push(sector);\n    247:     }"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 252,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND COALESCE(qm.quality_metric, 0) >= $${paramCount}`",
      "context": "    250:     if (minMetric > 0) {\n    251:       paramCount++;\n>>> 252:       whereClause += ` AND COALESCE(qm.quality_metric, 0) >= $${paramCount}`;\n    253:       params.push(minMetric);\n    254:     }"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 258,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND COALESCE(qm.quality_metric, 0) <= $${paramCount}`",
      "context": "    256:     if (maxMetric < 1) {\n    257:       paramCount++;\n>>> 258:       whereClause += ` AND COALESCE(qm.quality_metric, 0) <= $${paramCount}`;\n    259:       params.push(maxMetric);\n    260:     }"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        COALESCE(s.sector, 'Unknown') as sector,\n        COALESCE(s.industry, 'Unknown') as industry,\n        COALESCE(s.market_cap, 0) as market_cap,\n        COALESCE(s.current_price, 0) as current_price,\n        COALESCE(s.trailing_pe, 0) as trailing_pe,\n        COALESCE(s.price_to_book, 0) as price_to_book,\n        \n        -- Try to get quality metrics if table exists, otherwise null\n        NULL as quality_metric,\n        NULL as earnings_quality_metric,\n        NULL as balance_sheet_metric,\n        NULL as profitability_metric,\n        NULL as management_metric,\n        NULL as piotroski_f_score,\n        NULL as altman_z_score,\n        NULL as quality_confidence,\n        \n        -- Try to get value metrics if table exists, otherwise null\n        NULL as value_metric,\n        NULL as multiples_metric,\n        NULL as intrinsic_value_metric,\n        NULL as relative_value_metric,\n        NULL as dcf_intrinsic_value,\n        NULL as dcf_margin_of_safety,\n        \n        -- Try to get growth metrics if table exists, otherwise null\n        NULL as growth_composite_score,\n        NULL as revenue_growth_score,\n        NULL as earnings_growth_score,\n        NULL as fundamental_growth_score,\n        NULL as market_expansion_score,\n        NULL as growth_percentile_rank,\n        \n        -- Calculate composite metric placeholder\n        0.5 as composite_metric,\n        \n        -- Metadata\n        NOW() as metric_date,\n        NOW() as last_updated\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      ${whereClause}\n      ORDER BY ss.symbol ${safeOrder}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    273:     \n    274:     // Main query to get stocks with metrics - fallback gracefully if tables don't exist\n>>> 275:     const stocksQuery = `\n    276:       SELECT \n    277:         ss.symbol,"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 334,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [METRICS] Query successful, got ${stocksResult.rows.length} rows`",
      "context": "    332:       console.log(`🔍 [METRICS] Attempting to execute main stocks query...`);\n    333:       stocksResult = await query(stocksQuery, params);\n>>> 334:       console.log(`✅ [METRICS] Query successful, got ${stocksResult.rows.length} rows`);\n    335:       \n    336:       // Get total count for pagination"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 337,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT COUNT(DISTINCT ss.symbol) as total\n        FROM stock_symbols ss\n        LEFT JOIN symbols s ON ss.symbol = s.symbol\n        ${whereClause}\n      `",
      "context": "    335:       \n    336:       // Get total count for pagination\n>>> 337:       const countQuery = `\n    338:         SELECT COUNT(DISTINCT ss.symbol) as total\n    339:         FROM stock_symbols ss"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 346,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [METRICS] Total stocks available: ${totalStocks}`",
      "context": "    344:       const countResult = await query(countQuery, params.slice(0, paramCount));\n    345:       totalStocks = parseInt(countResult.rows[0].total);\n>>> 346:       console.log(`📊 [METRICS] Total stocks available: ${totalStocks}`);\n    347:       \n    348:     } catch (dbError) {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 372,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [METRICS] Formatting ${stocksResult.rows.length} stocks for response`",
      "context": "    370: \n    371:     // Format the response with actual database results\n>>> 372:     console.log(`📊 [METRICS] Formatting ${stocksResult.rows.length} stocks for response`);\n    373:     \n    374:     const stocks = stocksResult.rows.map(row => {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 375,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [METRICS] Processing stock: ${row.symbol}`",
      "context": "    373:     \n    374:     const stocks = stocksResult.rows.map(row => {\n>>> 375:       console.log(`🔍 [METRICS] Processing stock: ${row.symbol}`);\n    376:       \n    377:       return {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 513,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Getting detailed metrics for ${symbol}`",
      "context": "    511:   try {\n    512:     const symbol = req.params.symbol.toUpperCase();\n>>> 513:     console.log(`Getting detailed metrics for ${symbol}`);\n    514: \n    515:     // Get latest metrics with historical data"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 777,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [TOP-${category.toUpperCase()}] Executing query for category: ${category}, limit: ${limit}`",
      "context": "    775: \n    776:     // Query actual database tables with comprehensive error logging\n>>> 777:     console.log(`🔍 [TOP-${category.toUpperCase()}] Executing query for category: ${category}, limit: ${limit}`);\n    778:     \n    779:     const topStocksQuery = `"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 799,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [TOP-${category.toUpperCase()}] Executing top stocks query...`",
      "context": "    797: \n    798:     try {\n>>> 799:       console.log(`🔍 [TOP-${category.toUpperCase()}] Executing top stocks query...`);\n    800:       const result = await query(topStocksQuery, [limit]);\n    801:       console.log(`✅ [TOP-${category.toUpperCase()}] Query successful, got ${result.rows.length} rows`);"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 801,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [TOP-${category.toUpperCase()}] Query successful, got ${result.rows.length} rows`",
      "context": "    799:       console.log(`🔍 [TOP-${category.toUpperCase()}] Executing top stocks query...`);\n    800:       const result = await query(topStocksQuery, [limit]);\n>>> 801:       console.log(`✅ [TOP-${category.toUpperCase()}] Query successful, got ${result.rows.length} rows`);\n    802: \n    803:       const topStocks = result.rows.map(row => {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 804,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [TOP-${category.toUpperCase()}] Processing stock: ${row.symbol}`",
      "context": "    802: \n    803:       const topStocks = result.rows.map(row => {\n>>> 804:         console.log(`🔍 [TOP-${category.toUpperCase()}] Processing stock: ${row.symbol}`);\n    805:         \n    806:         return {"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 840,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [TOP-${category.toUpperCase()}] Database query failed:`",
      "context": "    838:       \n    839:     } catch (dbError) {\n>>> 840:       console.error(`❌ [TOP-${category.toUpperCase()}] Database query failed:`, {\n    841:         error: dbError.message,\n    842:         code: dbError.code,"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 935,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${symbol} Inc.`",
      "context": "    933:     mockStocks.push({\n    934:       symbol: symbol,\n>>> 935:       security_name: `${symbol} Inc.`,\n    936:       sector: sectors[i % sectors.length],\n    937:       market_cap: Math.random() * 1000000000000,"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 231,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause +",
      "context": "    229:     const sortOrder = req.query.sortOrder || 'desc';\n    230:     \n>>> 231:     let whereClause = 'WHERE 1=1';\n    232:     const params = [];\n    233:     let paramCount = 0;"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 195,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query, null, 2));\n    console.log(`",
      "context": "    193:   \n    194:   try {\n>>> 195:     console.log(`📊 [${requestId}] Metrics endpoint called with params:`, JSON.stringify(req.query, null, 2));\n    196:     console.log(`📊 [${requestId}] Memory at start:`, process.memoryUsage());\n    197:     "
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 221,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const minMetric = parseFloat(req.query.minMetric) || 0;\n    const maxMetric = parseFloat(req.query.maxMetric) || 1;\n    const sortBy = req.query.sortBy || 'composite_metric';\n    const sortOrder = req.query.sortOrder || 'desc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += `",
      "context": "    219:     }\n    220:     \n>>> 221:     const page = parseInt(req.query.page) || 1;\n    222:     const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    223:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/metrics.js",
      "line": 512,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbol.toUpperCase();\n    console.log(`",
      "context": "    510: router.get('/:symbol', async (req, res) => {\n    511:   try {\n>>> 512:     const symbol = req.params.symbol.toUpperCase();\n    513:     console.log(`Getting detailed metrics for ${symbol}`);\n    514: "
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND published_at >= NOW() - INTERVAL '${intervalClause}'`",
      "context": "    62:     \n    63:     const intervalClause = timeframeMap[timeframe] || '24 hours';\n>>> 64:     whereClause += ` AND published_at >= NOW() - INTERVAL '${intervalClause}'`;\n    65:     \n    66:     if (symbol) {"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND (symbol = $${paramIndex} OR content ILIKE $${paramIndex + 1})`",
      "context": "    65:     \n    66:     if (symbol) {\n>>> 67:       whereClause += ` AND (symbol = $${paramIndex} OR content ILIKE $${paramIndex + 1})`;\n    68:       params.push(symbol, `%${symbol}%`);\n    69:       paramIndex += 2;"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${symbol}%`",
      "context": "    66:     if (symbol) {\n    67:       whereClause += ` AND (symbol = $${paramIndex} OR content ILIKE $${paramIndex + 1})`;\n>>> 68:       params.push(symbol, `%${symbol}%`);\n    69:       paramIndex += 2;\n    70:     }"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND category = $${paramIndex}`",
      "context": "    71:     \n    72:     if (category) {\n>>> 73:       whereClause += ` AND category = $${paramIndex}`;\n    74:       params.push(category);\n    75:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 79,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sentiment_label = $${paramIndex}`",
      "context": "    77:     \n    78:     if (sentiment) {\n>>> 79:       whereClause += ` AND sentiment_label = $${paramIndex}`;\n    80:       params.push(sentiment);\n    81:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        na.id,\n        na.title,\n        na.content,\n        na.source,\n        na.author,\n        na.published_at,\n        na.url,\n        na.category,\n        na.symbol,\n        na.sentiment_score,\n        na.sentiment_label,\n        na.sentiment_confidence,\n        na.keywords,\n        na.summary,\n        na.impact_score,\n        na.relevance_score,\n        na.created_at\n      FROM news_articles na\n      ${whereClause}\n      ORDER BY na.published_at DESC, na.relevance_score DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    82:     }\n    83:     \n>>> 84:     const result = await query(`\n    85:       SELECT \n    86:         na.id,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM news_articles na\n      ${whereClause}\n    `",
      "context": "    108:     \n    109:     // Get total count\n>>> 110:     const countResult = await query(`\n    111:       SELECT COUNT(*) as total\n    112:       FROM news_articles na"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        DATE_TRUNC('hour', published_at) as hour,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE symbol = $1\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY DATE_TRUNC('hour', published_at)\n      ORDER BY hour ASC\n    `",
      "context": "    194:     \n    195:     // Get sentiment trend over time\n>>> 196:     const trendResult = await query(`\n    197:       SELECT \n    198:         DATE_TRUNC('hour', published_at) as hour,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 282,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as total_articles,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n    `",
      "context": "    280:     \n    281:     // Get overall market sentiment\n>>> 282:     const marketResult = await query(`\n    283:       SELECT \n    284:         AVG(sentiment_score) as avg_sentiment,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 294,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        category,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY category\n      ORDER BY article_count DESC\n    `",
      "context": "    292:     \n    293:     // Get sentiment by category\n>>> 294:     const categoryResult = await query(`\n    295:       SELECT \n    296:         category,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 306,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE symbol IS NOT NULL\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY symbol\n      HAVING COUNT(*) >= 3\n      ORDER BY avg_impact DESC, article_count DESC\n      LIMIT 20\n    `",
      "context": "    304:     \n    305:     // Get top symbols by sentiment impact\n>>> 306:     const symbolResult = await query(`\n    307:       SELECT \n    308:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 322,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        DATE_TRUNC('hour', published_at) as hour,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY DATE_TRUNC('hour', published_at)\n      ORDER BY hour ASC\n    `",
      "context": "    320:     \n    321:     // Get sentiment trend\n>>> 322:     const trendResult = await query(`\n    323:       SELECT \n    324:         DATE_TRUNC('hour', published_at) as hour,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 533,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        COUNT(*) as mention_count,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE symbol IS NOT NULL\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY symbol\n      ORDER BY mention_count DESC, avg_impact DESC\n      LIMIT $1\n    `",
      "context": "    531:     \n    532:     // Get trending symbols\n>>> 533:     const symbolResult = await query(`\n    534:       SELECT \n    535:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 49,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    // Parse timeframe\n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    whereClause +",
      "context": "    47:     } = req.query;\n    48:     \n>>> 49:     let whereClause = 'WHERE 1=1';\n    50:     const params = [];\n    51:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 47,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    // Parse timeframe\n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    whereClause += ` AND published_at >= NOW() - INTERVAL '",
      "context": "    45:       offset = 0, \n    46:       timeframe = '24h' \n>>> 47:     } = req.query;\n    48:     \n    49:     let whereClause = 'WHERE 1=1';"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 166,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { timeframe = '24h' } = req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get sentiment analysis\n    const sentimentResult = await query(`\n      SELECT \n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as total_articles,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral'",
      "context": "    164: router.get('/sentiment/:symbol', async (req, res) => {\n    165:   try {\n>>> 166:     const { symbol } = req.params;\n    167:     const { timeframe = '24h' } = req.query;\n    168:     "
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 268,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get overall market sentiment\n    const marketResult = await query(`\n      SELECT \n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as total_articles,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '",
      "context": "    266: router.get('/market-sentiment', async (req, res) => {\n    267:   try {\n>>> 268:     const { timeframe = '24h' } = req.query;\n    269:     \n    270:     const timeframeMap = {"
    },
    {
      "file": "webapp/lambda/routes/news.js",
      "line": 383,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!text) {\n      return res.status(400).json({\n        success: false,\n        error: 'Text is required for sentiment analysis'\n      });\n    }\n    \n    const analysis = await sentimentEngine.analyzeSentiment(text, symbol);\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error analyzing sentiment:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze sentiment',\n      message: error.message\n    });\n  }\n});\n\n// Get news sources and their reliability scores\nrouter.get('/sources', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        source,\n        COUNT(*) as article_count,\n        AVG(relevance_score) as avg_relevance,\n        AVG(impact_score) as avg_impact,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '7 days'\n      GROUP BY source\n      ORDER BY article_count DESC\n    `);\n    \n    const sources = result.rows.map(row => ({\n      source: row.source,\n      article_count: parseInt(row.article_count),\n      avg_relevance: parseFloat(row.avg_relevance),\n      avg_impact: parseFloat(row.avg_impact),\n      sentiment_distribution: {\n        positive: parseInt(row.positive_count),\n        negative: parseInt(row.negative_count),\n        neutral: parseInt(row.neutral_count)\n      },\n      reliability_score: newsAnalyzer.calculateReliabilityScore(row.source)\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        sources,\n        total: sources.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching news sources:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch news sources',\n      message: error.message\n    });\n  }\n});\n\n// Get news categories\nrouter.get('/categories', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        category,\n        COUNT(*) as article_count,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '7 days'\n      GROUP BY category\n      ORDER BY article_count DESC\n    `);\n    \n    const categories = result.rows.map(row => ({\n      category: row.category,\n      article_count: parseInt(row.article_count),\n      avg_sentiment: parseFloat(row.avg_sentiment),\n      avg_impact: parseFloat(row.avg_impact),\n      sentiment_label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        categories,\n        total: categories.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching news categories:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch news categories',\n      message: error.message\n    });\n  }\n});\n\n// Get trending topics\nrouter.get('/trending', async (req, res) => {\n  try {\n    const { timeframe = '24h', limit = 10 } = req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get trending keywords\n    const keywordResult = await query(`\n      SELECT \n        keyword,\n        COUNT(*) as frequency,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM (\n        SELECT \n          UNNEST(keywords) as keyword,\n          sentiment_score,\n          impact_score\n        FROM news_articles\n        WHERE published_at >= NOW() - INTERVAL '",
      "context": "    381: router.post('/analyze-sentiment', async (req, res) => {\n    382:   try {\n>>> 383:     const { text, symbol } = req.body;\n    384:     \n    385:     if (!text) {"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 153,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Pattern scan request: symbol=${symbol}, timeframe=${timeframe}, confidence>=${min_confidence}`",
      "context": "    151:     } = req.validated;\n    152: \n>>> 153:     console.log(`🔍 Pattern scan request: symbol=${symbol}, timeframe=${timeframe}, confidence>=${min_confidence}`);\n    154: \n    155:     let whereClause = 'WHERE dp.status = $1';"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND dp.symbol = $${paramIndex}`",
      "context": "    159:     // Add validated symbol filter\n    160:     if (symbol) {\n>>> 161:       whereClause += ` AND dp.symbol = $${paramIndex}`;\n    162:       params.push(symbol);\n    163:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND dp.timeframe = $${paramIndex}`",
      "context": "    166:     // Add validated timeframe filter\n    167:     if (timeframe) {\n>>> 168:       whereClause += ` AND dp.timeframe = $${paramIndex}`;\n    169:       params.push(timeframe);\n    170:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 175,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND pt.category = $${paramIndex}`",
      "context": "    173:     // Add validated category filter\n    174:     if (category) {\n>>> 175:       whereClause += ` AND pt.category = $${paramIndex}`;\n    176:       params.push(category);\n    177:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 181,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND dp.confidence_score >= $${paramIndex}`",
      "context": "    179: \n    180:     // Add validated confidence filter\n>>> 181:     whereClause += ` AND dp.confidence_score >= $${paramIndex}`;\n    182:     params.push(min_confidence);\n    183:     paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ORDER BY dp.detected_at DESC LIMIT $${paramIndex}`",
      "context": "    184: \n    185:     // Add limit with validated value\n>>> 186:     whereClause += ` ORDER BY dp.detected_at DESC LIMIT $${paramIndex}`;\n    187:     params.push(limit);\n    188: "
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 189,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        dp.id,\n        dp.symbol,\n        dp.timeframe,\n        dp.detection_date,\n        dp.start_date,\n        dp.end_date,\n        dp.confidence_score,\n        dp.ml_confidence,\n        dp.traditional_confidence,\n        dp.signal_strength,\n        dp.direction,\n        dp.target_price,\n        dp.stop_loss,\n        dp.risk_reward_ratio,\n        dp.pattern_data,\n        dp.key_levels,\n        dp.volume_confirmation,\n        dp.momentum_confirmation,\n        dp.status,\n        pt.name as pattern_name,\n        pt.category,\n        pt.description,\n        pt.reliability_score\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY dp.detection_date DESC, dp.confidence_score DESC\n      LIMIT $${paramIndex}\n    `",
      "context": "    187:     params.push(limit);\n    188: \n>>> 189:     const result = await query(`\n    190:       SELECT \n    191:         dp.id,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 292,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${paramIndex++}`",
      "context": "    290: \n    291:     if (categories && categories.length > 0) {\n>>> 292:       const categoryPlaceholders = categories.map(() => `$${paramIndex++}`).join(',');\n    293:       whereClause += ` AND pt.category IN (${categoryPlaceholders})`;\n    294:       params.push(...categories);"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 293,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND pt.category IN (${categoryPlaceholders})`",
      "context": "    291:     if (categories && categories.length > 0) {\n    292:       const categoryPlaceholders = categories.map(() => `$${paramIndex++}`).join(',');\n>>> 293:       whereClause += ` AND pt.category IN (${categoryPlaceholders})`;\n    294:       params.push(...categories);\n    295:     }"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 297,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        dp.*,\n        pt.name as pattern_name,\n        pt.category,\n        pt.description,\n        pt.reliability_score\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY dp.detection_date DESC\n      LIMIT 20\n    `",
      "context": "    295:     }\n    296: \n>>> 297:     const result = await query(`\n    298:       SELECT \n    299:         dp.*,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 397,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND category = $${paramIndex}`",
      "context": "    395: \n    396:     if (category) {\n>>> 397:       whereClause += ` AND category = $${paramIndex}`;\n    398:       params.push(category);\n    399:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 402,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        id,\n        name,\n        category,\n        description,\n        min_bars,\n        max_bars,\n        reliability_score,\n        is_active,\n        created_at\n      FROM pattern_types\n      ${whereClause}\n      ORDER BY category, reliability_score DESC, name\n    `",
      "context": "    400:     }\n    401: \n>>> 402:     const result = await query(`\n    403:       SELECT \n    404:         id,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND dp.symbol = $${paramIndex}`",
      "context": "    159:     // Add validated symbol filter\n    160:     if (symbol) {\n>>> 161:       whereClause += ` AND dp.symbol = $${paramIndex}`;\n    162:       params.push(symbol);\n    163:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 481,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND pt.name = $${paramIndex}`",
      "context": "    479: \n    480:     if (pattern_type) {\n>>> 481:       whereClause += ` AND pt.name = $${paramIndex}`;\n    482:       params.push(pattern_type);\n    483:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND dp.timeframe = $${paramIndex}`",
      "context": "    166:     // Add validated timeframe filter\n    167:     if (timeframe) {\n>>> 168:       whereClause += ` AND dp.timeframe = $${paramIndex}`;\n    169:       params.push(timeframe);\n    170:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 492,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        pt.name as pattern_name,\n        pt.category,\n        COUNT(*) as total_patterns,\n        COUNT(CASE WHEN pp.target_hit = true THEN 1 END) as successful_patterns,\n        AVG(pp.percentage_change) as avg_return,\n        AVG(pp.accuracy_score) as avg_accuracy,\n        AVG(pp.time_to_target) as avg_time_to_target,\n        AVG(dp.confidence_score) as avg_confidence,\n        MAX(pp.percentage_change) as max_return,\n        MIN(pp.percentage_change) as min_return\n      FROM pattern_performance pp\n      JOIN detected_patterns dp ON pp.detected_pattern_id = dp.id\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      GROUP BY pt.name, pt.category\n      ORDER BY avg_accuracy DESC, avg_return DESC\n    `",
      "context": "    490:     }\n    491: \n>>> 492:     const result = await query(`\n    493:       SELECT \n    494:         pt.name as pattern_name,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 587,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND pa.is_sent = $${paramIndex}`",
      "context": "    585:     // Filter by sent status\n    586:     if (is_sent !== undefined) {\n>>> 587:       whereClause += ` AND pa.is_sent = $${paramIndex}`;\n    588:       params.push(is_sent === 'true');\n    589:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 594,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND pa.priority = $${paramIndex}`",
      "context": "    592:     // Filter by priority\n    593:     if (priority) {\n>>> 594:       whereClause += ` AND pa.priority = $${paramIndex}`;\n    595:       params.push(priority);\n    596:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 599,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        pa.id,\n        pa.alert_type,\n        pa.message,\n        pa.is_sent,\n        pa.sent_at,\n        pa.priority,\n        pa.created_at,\n        dp.symbol,\n        dp.timeframe,\n        dp.confidence_score,\n        dp.direction,\n        pt.name as pattern_name,\n        pt.category\n      FROM pattern_alerts pa\n      JOIN detected_patterns dp ON pa.detected_pattern_id = dp.id\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY pa.created_at DESC\n      LIMIT $${paramIndex}\n    `",
      "context": "    597:     }\n    598: \n>>> 599:     const result = await query(`\n    600:       SELECT \n    601:         pa.id,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 987,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Pattern alert: ${patternType} detected for ${symbol}`",
      "context": "    985:           notify_email: notify_email\n    986:         },\n>>> 987:         message: `Pattern alert: ${patternType} detected for ${symbol}`\n    988:       };\n    989:       "
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 997,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Created ${alerts.length} pattern alerts`",
      "context": "    995:       success: true,\n    996:       data: alerts,\n>>> 997:       message: `Created ${alerts.length} pattern alerts`\n    998:     });\n    999:   } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 1174,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`High confidence ${detection.pattern_type} pattern detected for ${detection.symbol} (${(detection.confidence * 100).toFixed(1)}% confidence)`",
      "context": "    1172:             timeframe: detection.timeframe\n    1173:           },\n>>> 1174:           message: `High confidence ${detection.pattern_type} pattern detected for ${detection.symbol} (${(detection.confidence * 100).toFixed(1)}% confidence)`\n    1175:         };\n    1176:         "
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 1199,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`AND pt.category = '${category}'`",
      "context": "    1197:     let categoryFilter = '';\n    1198:     if (category) {\n>>> 1199:       categoryFilter = `AND pt.category = '${category}'`;\n    1200:     }\n    1201:     "
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 1202,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        pd.pattern_type,\n        pt.category,\n        pt.name,\n        COUNT(*) as detection_count,\n        AVG(pd.confidence_score) as avg_confidence,\n        COUNT(DISTINCT pd.symbol) as unique_symbols,\n        MAX(pd.detected_at) as latest_detection\n      FROM pattern_detections pd\n      LEFT JOIN pattern_types pt ON pd.pattern_type = pt.id\n      WHERE ${periodClause} ${categoryFilter}\n      GROUP BY pd.pattern_type, pt.category, pt.name\n      ORDER BY detection_count DESC\n    `",
      "context": "    1200:     }\n    1201:     \n>>> 1202:     const result = await query(`\n    1203:       SELECT \n    1204:         pd.pattern_type,"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 581,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    let params = [];\n    let paramIndex = 1;\n\n    // Filter by sent status\n    if (is_sent !== undefined) {\n      whereClause +",
      "context": "    579:     const { is_sent = false, priority, limit = 50 } = req.query;\n    580: \n>>> 581:     let whereClause = 'WHERE 1=1';\n    582:     let params = [];\n    583:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 275,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    if (!symbol) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbol is required'\n      });\n    }\n\n    // This would trigger the pattern recognition service\n    // For now, we'll return existing patterns and simulate analysis\n    \n    let whereClause = '",
      "context": "    273: router.post('/analyze', async (req, res) => {\n    274:   try {\n>>> 275:     const { symbol, timeframe = '1d', categories } = req.body;\n    276: \n    277:     if (!symbol) {"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 390,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    let whereClause = '",
      "context": "    388: router.get('/types', async (req, res) => {\n    389:   try {\n>>> 390:     const { category, is_active = true } = req.query;\n    391: \n    392:     let whereClause = 'WHERE is_active = $1';"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 390,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    let whereClause = '",
      "context": "    388: router.get('/types', async (req, res) => {\n    389:   try {\n>>> 390:     const { category, is_active = true } = req.query;\n    391: \n    392:     let whereClause = 'WHERE is_active = $1';"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 579,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    let whereClause = 'WHERE 1=1';\n    let params = [];\n    let paramIndex = 1;\n\n    // Filter by sent status\n    if (is_sent !== undefined) {\n      whereClause += `",
      "context": "    577:   try {\n    578:     const userId = req.user.sub;\n>>> 579:     const { is_sent = false, priority, limit = 50 } = req.query;\n    580: \n    581:     let whereClause = 'WHERE 1=1';"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 664,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.id);\n\n    if (!alertId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid alert ID'\n      });\n    }\n\n    const result = await query(`",
      "context": "    662: router.post('/alerts/:id/mark-sent', async (req, res) => {\n    663:   try {\n>>> 664:     const alertId = parseInt(req.params.id);\n    665: \n    666:     if (!alertId) {"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 709,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    // Recent patterns\n    const recentPatterns = await query(`",
      "context": "    707: router.get('/dashboard', async (req, res) => {\n    708:   try {\n>>> 709:     const { timeframe = '1d', days = 7 } = req.query;\n    710: \n    711:     // Recent patterns"
    },
    {
      "file": "webapp/lambda/routes/patterns.js",
      "line": 874,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    const userId = req.user.sub;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols array is required'\n      });\n    }\n\n    // Detect patterns for specified symbols\n    const detections = [];\n    for (const symbol of symbols) {\n      for (const timeframe of timeframes) {\n        const results = await patternDetector.detectPatterns(symbol, timeframe, patterns);\n        detections.push(...results);\n      }\n    }\n\n    // Store pattern detections\n    await storePatternDetections(detections, userId);\n\n    // Create alerts for significant patterns\n    const alerts = await createPatternAlerts(detections, userId);\n\n    res.json({\n      success: true,\n      data: {\n        patterns_detected: detections.length,\n        alerts_created: alerts.length,\n        detections: detections.slice(0, 20), // Return top 20\n        alerts: alerts\n      }\n    });\n  } catch (error) {\n    console.error('Error in real-time pattern detection:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Pattern detection failed',\n      message: error.message\n    });\n  }\n});\n\n// Get pattern statistics\nrouter.get('/statistics', async (req, res) => {\n  try {\n    const { period = '30d', category } = req.query;\n    \n    // Get pattern statistics\n    const stats = await getPatternStatistics(period, category);\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error fetching pattern statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern statistics',\n      message: error.message\n    });\n  }\n});\n\n// Get pattern performance\nrouter.get('/performance', async (req, res) => {\n  try {\n    const { pattern_type, timeframe = '1d', days = 30 } = req.query;\n    \n    const performance = await getPatternPerformance(pattern_type, timeframe, days);\n    \n    res.json({\n      success: true,\n      data: performance\n    });\n  } catch (error) {\n    console.error('Error fetching pattern performance:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern performance',\n      message: error.message\n    });\n  }\n});\n\n// Create pattern alert\nrouter.post('/alerts', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { symbol, pattern_types, min_confidence = 0.7, notify_email = true } = req.body;\n    \n    if (!symbol || !pattern_types || pattern_types.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbol and pattern_types are required'\n      });\n    }\n    \n    // Create pattern-based alerts\n    const alerts = [];\n    for (const patternType of pattern_types) {\n      const alertConfig = {\n        symbol: symbol.toUpperCase(),\n        alertType: 'pattern_detected',\n        condition: 'equals',\n        targetValue: patternType,\n        metadata: {\n          pattern_type: patternType,\n          min_confidence: min_confidence,\n          notify_email: notify_email\n        },\n        message: `",
      "context": "    872: router.post('/detect-realtime', async (req, res) => {\n    873:   try {\n>>> 874:     const { symbols, timeframes = ['1d'], patterns } = req.body;\n    875:     const userId = req.user.sub;\n    876: "
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    65:       requestId,\n    66:       userId: `${userId.substring(0, 8)}...`,\n>>> 67:       period: `${startDate} to ${endDate}`,\n    68:       format\n    69:     });"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     logger.info('Portfolio performance analysis requested', {\n    65:       requestId,\n>>> 66:       userId: `${userId.substring(0, 8)}...`,\n    67:       period: `${startDate} to ${endDate}`,\n    68:       format"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 61,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Portfolio performance analysis requested', {\n      requestId,\n      userId: `",
      "context": "    59:   const requestId = req.requestId;\n    60:   const userId = req.user.userId;\n>>> 61:   const { startDate, endDate, format, includeBenchmarks } = req.query;\n    62:   \n    63:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 115,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Performance report requested', {\n      requestId,\n      userId: `",
      "context": "    113:   const requestId = req.requestId;\n    114:   const userId = req.user.userId;\n>>> 115:   const { startDate, endDate, reportType } = req.query;\n    116:   \n    117:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 164,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Attribution analysis requested', {\n      requestId,\n      userId: `",
      "context": "    162:   const requestId = req.requestId;\n    163:   const userId = req.user.userId;\n>>> 164:   const { startDate, endDate } = req.query;\n    165:   \n    166:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 211,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Risk metrics analysis requested', {\n      requestId,\n      userId: `",
      "context": "    209:   const requestId = req.requestId;\n    210:   const userId = req.user.userId;\n>>> 211:   const { startDate, endDate } = req.query;\n    212:   \n    213:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 273,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Sector analysis requested', {\n      requestId,\n      userId: `",
      "context": "    271:   const requestId = req.requestId;\n    272:   const userId = req.user.userId;\n>>> 273:   const { startDate, endDate } = req.query;\n    274:   \n    275:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 316,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Factor exposure analysis requested', {\n      requestId,\n      userId: `",
      "context": "    314:   const requestId = req.requestId;\n    315:   const userId = req.user.userId;\n>>> 316:   const { startDate, endDate } = req.query;\n    317:   \n    318:   try {"
    },
    {
      "file": "webapp/lambda/routes/performance-analytics.js",
      "line": 359,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n  try {\n    logger.info('Benchmark analysis requested', {\n      requestId,\n      userId: `",
      "context": "    357:   const requestId = req.requestId;\n    358:   const userId = req.user.userId;\n>>> 359:   const { startDate, endDate } = req.query;\n    360:   \n    361:   try {"
    },
    {
      "file": "webapp/lambda/routes/pool-management.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${metrics.utilizationPercent}% utilization with ${status.waitingCount} waiting`",
      "context": "    236:   \n    237:   return {\n>>> 238:     currentLoad: `${metrics.utilizationPercent}% utilization with ${status.waitingCount} waiting`,\n    239:     trend: metrics.acquiresPerSecond > metrics.releaseRate ? 'increasing' : 'stable',\n    240:     bottlenecks: ["
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Starting portfolio table dependency check`",
      "context": "    123: async function checkPortfolioTableDependencies(requestId = 'unknown') {\n    124:   const checkStart = Date.now();\n>>> 125:   if (shouldLog('DEBUG')) console.log(`🔍 [${requestId}] Starting portfolio table dependency check`);\n    126:   \n    127:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 130,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database initialized for table check`",
      "context": "    128:     // Initialize database if not already done\n    129:     await initializeDatabase();\n>>> 130:     console.log(`✅ [${requestId}] Database initialized for table check`);\n    131:     \n    132:     const allTables = [...PORTFOLIO_TABLES.required, ...PORTFOLIO_TABLES.optional];"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 133,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Checking ${allTables.length} tables: ${allTables.join(', ')}`",
      "context": "    131:     \n    132:     const allTables = [...PORTFOLIO_TABLES.required, ...PORTFOLIO_TABLES.optional];\n>>> 133:     console.log(`🔍 [${requestId}] Checking ${allTables.length} tables: ${allTables.join(', ')}`);\n    134:     \n    135:     const tableCheckStart = Date.now();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`",
      "context": "    137:     const tableCheckDuration = Date.now() - tableCheckStart;\n    138:     \n>>> 139:     console.log(`✅ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`);\n    140:     \n    141:     const missingRequired = PORTFOLIO_TABLES.required.filter(table => !tableStatus[table]);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 147,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio table status analysis:`",
      "context": "    145:     \n    146:     // Detailed logging of table status\n>>> 147:     console.log(`📊 [${requestId}] Portfolio table status analysis:`, {\n    148:       summary: {\n    149:         totalTables: allTables.length,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${tableCheckDuration}ms`",
      "context": "    161:         missing: missingOptional\n    162:       },\n>>> 163:       checkDuration: `${tableCheckDuration}ms`\n    164:     });\n    165:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] CRITICAL: Missing required portfolio tables:`",
      "context": "    166:     // Log critical issues\n    167:     if (missingRequired.length > 0) {\n>>> 168:       console.error(`❌ [${requestId}] CRITICAL: Missing required portfolio tables:`, {\n    169:         missingTables: missingRequired,\n    170:         impact: 'Portfolio database operations will fail',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 177,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] WARNING: Missing optional portfolio tables:`",
      "context": "    175:     \n    176:     if (missingOptional.length > 0) {\n>>> 177:       console.warn(`⚠️ [${requestId}] WARNING: Missing optional portfolio tables:`, {\n    178:         missingTables: missingOptional,\n    179:         impact: 'Some portfolio features may be limited',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 187,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio table dependency check completed in ${totalDuration}ms`",
      "context": "    185:     const totalDuration = Date.now() - checkStart;\n    186:     \n>>> 187:     console.log(`✅ [${requestId}] Portfolio table dependency check completed in ${totalDuration}ms`, {\n    188:       result: hasRequiredTables ? 'SUCCESS - All required tables available' : 'FAILURE - Missing required tables',\n    189:       databaseOperationsEnabled: hasRequiredTables"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 206,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio table dependency check FAILED after ${errorDuration}ms:`",
      "context": "    204:   } catch (error) {\n    205:     const errorDuration = Date.now() - checkStart;\n>>> 206:     console.error(`❌ [${requestId}] Portfolio table dependency check FAILED after ${errorDuration}ms:`, {\n    207:       error: error.message,\n    208:       errorCode: error.code,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 236,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Portfolio overview request initiated`",
      "context": "    234:   try {\n    235:     const userId = req.user?.sub;\n>>> 236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n    237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    235:     const userId = req.user?.sub;\n    236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n>>> 237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],\n    239:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 244,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication failure - no user ID found`",
      "context": "    242: \n    243:     if (!userId) {\n>>> 244:       console.error(`❌ [${requestId}] Authentication failure - no user ID found`);\n    245:       return res.unauthorized('User authentication required', { requestId });\n    246:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 249,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Checking portfolio table dependencies`",
      "context": "    247: \n    248:     // Check table dependencies before attempting queries with detailed logging\n>>> 249:     console.log(`🔍 [${requestId}] Checking portfolio table dependencies`);\n    250:     const tableDeps = await checkPortfolioTableDependencies(requestId);\n    251:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 266,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] All required tables available - proceeding with database queries`",
      "context": "    264: \n    265:     if (tableDeps.hasRequiredTables) {\n>>> 266:       console.log(`✅ [${requestId}] All required tables available - proceeding with database queries`);\n    267:       \n    268:       try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 270,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Executing portfolio holdings query`",
      "context": "    268:       try {\n    269:         // Get user's portfolio summary from database with detailed logging\n>>> 270:         console.log(`📊 [${requestId}] Executing portfolio holdings query`);\n    271:         const holdingsQueryStart = Date.now();\n    272:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 283,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Executing portfolio metadata query`",
      "context": "    281:         `;\n    282:         \n>>> 283:         console.log(`📊 [${requestId}] Executing portfolio metadata query`);\n    284:         const metadataQuery = `\n    285:           SELECT "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 302,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio database queries completed in ${queryDuration}ms`",
      "context": "    300:         const queryDuration = Date.now() - queryStart;\n    301:         \n>>> 302:         console.log(`✅ [${requestId}] Portfolio database queries completed in ${queryDuration}ms`, {\n    303:           holdingsRows: holdingsResult.rows.length,\n    304:           metadataRows: metadataResult.rows.length,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 311,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio holdings data retrieved:`",
      "context": "    309:         if (holdingsResult.rows.length > 0) {\n    310:           summary = holdingsResult.rows[0];\n>>> 311:           console.log(`✅ [${requestId}] Portfolio holdings data retrieved:`, {\n    312:             totalPositions: summary.total_positions,\n    313:             totalMarketValue: summary.total_market_value,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 318,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No portfolio holdings found for user - using default values`",
      "context": "    316:           });\n    317:         } else {\n>>> 318:           console.warn(`⚠️ [${requestId}] No portfolio holdings found for user - using default values`);\n    319:         }\n    320:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 323,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio metadata retrieved:`",
      "context": "    321:         if (metadataResult.rows.length > 0) {\n    322:           metadata = metadataResult.rows[0];\n>>> 323:           console.log(`✅ [${requestId}] Portfolio metadata retrieved:`, {\n    324:             accountType: metadata.account_type,\n    325:             lastSync: metadata.last_sync,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 329,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No portfolio metadata found for user - using default values`",
      "context": "    327:           });\n    328:         } else {\n>>> 329:           console.warn(`⚠️ [${requestId}] No portfolio metadata found for user - using default values`);\n    330:         }\n    331:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 334,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio database query FAILED after ${errorDuration}ms:`",
      "context": "    332:       } catch (dbError) {\n    333:         const errorDuration = Date.now() - queryStart;\n>>> 334:         console.error(`❌ [${requestId}] Portfolio database query FAILED after ${errorDuration}ms:`, {\n    335:           error: dbError.message,\n    336:           errorCode: dbError.code,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 345,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Required portfolio tables missing - cannot query database:`",
      "context": "    343:       }\n    344:     } else {\n>>> 345:       console.error(`❌ [${requestId}] Required portfolio tables missing - cannot query database:`, {\n    346:         missingTables: tableDeps.missingRequired,\n    347:         availableTables: tableDeps.availableRequired,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] No portfolio positions found in database - attempting API fallback`",
      "context": "    353:     // Try to get fresh data from broker API if no database data with comprehensive logging\n    354:     if (parseInt(summary.total_positions) === 0) {\n>>> 355:       console.log(`🔄 [${requestId}] No portfolio positions found in database - attempting API fallback`);\n    356:       \n    357:       try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 358,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${requestId}] Retrieving user API credentials for Alpaca`",
      "context": "    356:       \n    357:       try {\n>>> 358:         console.log(`🔑 [${requestId}] Retrieving user API credentials for Alpaca`);\n    359:         const credentialsStart = Date.now();\n    360:         const credentials = await getUserApiKey(userId, 'alpaca');"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 364,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`",
      "context": "    362:         \n    363:         if (credentials) {\n>>> 364:           console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n    365:             provider: 'alpaca',\n    366:             isSandbox: credentials.isSandbox,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] Initializing Alpaca API service`",
      "context": "    369:           });\n    370:           \n>>> 371:           console.log(`📡 [${requestId}] Initializing Alpaca API service`);\n    372:           const alpacaStart = Date.now();\n    373:           const alpaca = new AlpacaService("
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 379,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching account data from Alpaca API`",
      "context": "    377:           );\n    378:           \n>>> 379:           console.log(`📊 [${requestId}] Fetching account data from Alpaca API`);\n    380:           const account = await alpaca.getAccount();\n    381:           const alpacaDuration = Date.now() - alpacaStart;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 384,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Alpaca account data retrieved in ${alpacaDuration}ms:`",
      "context": "    382:           \n    383:           if (account) {\n>>> 384:             console.log(`✅ [${requestId}] Alpaca account data retrieved in ${alpacaDuration}ms:`, {\n    385:               portfolioValue: account.portfolioValue,\n    386:               equity: account.equity,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 397,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio data updated from Alpaca API:`",
      "context": "    395:             metadata.last_sync = new Date().toISOString();\n    396:             \n>>> 397:             console.log(`✅ [${requestId}] Portfolio data updated from Alpaca API:`, {\n    398:               totalMarketValue: summary.total_market_value,\n    399:               totalEquity: summary.total_equity,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 404,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Alpaca API returned empty account data`",
      "context": "    402:             });\n    403:           } else {\n>>> 404:             console.warn(`⚠️ [${requestId}] Alpaca API returned empty account data`);\n    405:           }\n    406:         } else {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 407,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No Alpaca API credentials found for user - cannot fetch live data`",
      "context": "    405:           }\n    406:         } else {\n>>> 407:           console.warn(`⚠️ [${requestId}] No Alpaca API credentials found for user - cannot fetch live data`, {\n    408:             impact: 'Portfolio will show default/empty values',\n    409:             recommendation: 'User needs to configure Alpaca API keys in settings',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 427,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca API fallback FAILED after ${apiErrorDuration}ms:`",
      "context": "    425:       } catch (apiError) {\n    426:         const apiErrorDuration = Date.now() - credentialsStart || 0;\n>>> 427:         console.error(`❌ [${requestId}] Alpaca API fallback FAILED after ${apiErrorDuration}ms:`, {\n    428:           error: apiError.message,\n    429:           errorStack: apiError.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 458,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio data available from database - skipping API fallback`",
      "context": "    456:       }\n    457:     } else {\n>>> 458:       console.log(`✅ [${requestId}] Portfolio data available from database - skipping API fallback`, {\n    459:         totalPositions: summary.total_positions,\n    460:         dataSource: 'database'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 501,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio overview completed successfully in ${totalDuration}ms`",
      "context": "    499:     };\n    500: \n>>> 501:     console.log(`✅ [${requestId}] Portfolio overview completed successfully in ${totalDuration}ms`, {\n    502:       summary: {\n    503:         totalPositions: responseData.portfolio_summary.total_positions,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 510,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    508:       },\n    509:       performance: {\n>>> 510:         totalDuration: `${totalDuration}ms`,\n    511:         tableCheckDuration: `${tableDeps.checkDuration}ms`\n    512:       },"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 511,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${tableDeps.checkDuration}ms`",
      "context": "    509:       performance: {\n    510:         totalDuration: `${totalDuration}ms`,\n>>> 511:         tableCheckDuration: `${tableDeps.checkDuration}ms`\n    512:       },\n    513:       status: 'SUCCESS'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 510,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    508:       },\n    509:       performance: {\n>>> 510:         totalDuration: `${totalDuration}ms`,\n    511:         tableCheckDuration: `${tableDeps.checkDuration}ms`\n    512:       },"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 523,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio overview FAILED after ${errorDuration}ms:`",
      "context": "    521:   } catch (error) {\n    522:     const errorDuration = Date.now() - requestStart;\n>>> 523:     console.error(`❌ [${requestId}] Portfolio overview FAILED after ${errorDuration}ms:`, {\n    524:       error: error.message,\n    525:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    235:     const userId = req.user?.sub;\n    236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n>>> 237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],\n    239:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 528,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${errorDuration}ms`",
      "context": "    526:       errorCode: error.code,\n    527:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n>>> 528:       requestDuration: `${errorDuration}ms`,\n    529:       impact: 'Portfolio overview request failed completely',\n    530:       recommendation: 'Check logs for specific failure point'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 528,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${errorDuration}ms`",
      "context": "    526:       errorCode: error.code,\n    527:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n>>> 528:       requestDuration: `${errorDuration}ms`,\n    529:       impact: 'Portfolio overview request failed completely',\n    530:       recommendation: 'Check logs for specific failure point'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 547,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 Fetching Alpaca portfolio (sandbox: ${isSandbox})`",
      "context": "    545: // Broker API integration functions\n    546: async function fetchAlpacaPortfolio(apiKey, isSandbox) {\n>>> 547:   console.log(`📡 Fetching Alpaca portfolio (sandbox: ${isSandbox})`);\n    548:   \n    549:   // This is where you'd integrate with the actual Alpaca API"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 564,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 Fetching TD Ameritrade portfolio (sandbox: ${isSandbox})`",
      "context": "    562: \n    563: async function fetchTDAmeritradePortfolio(apiKey, isSandbox) {\n>>> 564:   console.log(`📡 Fetching TD Ameritrade portfolio (sandbox: ${isSandbox})`);\n    565:   \n    566:   // This is where you'd integrate with the actual TD Ameritrade API"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 590,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Required database tables not available: ${tableDeps.missingRequired.join(', ')}`",
      "context": "    588:     if (!tableDeps.hasRequiredTables) {\n    589:       console.warn('⚠️ Cannot store portfolio data - required tables missing:', tableDeps.missingRequired);\n>>> 590:       throw new Error(`Required database tables not available: ${tableDeps.missingRequired.join(', ')}`);\n    591:     }\n    592:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 617,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW(), NOW())`",
      "context": "    615:           \n    616:           batch.forEach(position => {\n>>> 617:             values.push(`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW(), NOW())`);\n    618:             params.push(\n    619:               userId,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 634,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            INSERT INTO portfolio_holdings (\n              user_id, api_key_id, symbol, quantity, avg_cost, \n              current_price, market_value, unrealized_pl, unrealized_plpc, \n              side, account_type, broker, created_at, updated_at\n            ) VALUES ${values.join(', ')}\n          `",
      "context": "    632:           });\n    633:           \n>>> 634:           await client.query(`\n    635:             INSERT INTO portfolio_holdings (\n    636:               user_id, api_key_id, symbol, quantity, avg_cost, "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 642,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 Inserted batch ${Math.floor(i/batchSize) + 1}: ${batch.length} holdings`",
      "context": "    640:           `, params);\n    641:           \n>>> 642:           console.log(`📈 Inserted batch ${Math.floor(i/batchSize) + 1}: ${batch.length} holdings`);\n    643:         }\n    644:       }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 645,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 Inserted ${portfolioData.positions.length} portfolio holdings`",
      "context": "    643:         }\n    644:       }\n>>> 645:       console.log(`📈 Inserted ${portfolioData.positions.length} portfolio holdings`);\n    646:       \n    647:       // Update portfolio metadata"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 701,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Portfolio holdings request initiated`",
      "context": "    699:     }\n    700:     \n>>> 701:     console.log(`🚀 [${requestId}] Portfolio holdings request initiated`, {\n    702:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    703:       accountType,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    235:     const userId = req.user?.sub;\n    236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n>>> 237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],\n    239:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 709,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Account type requested: ${accountType}`",
      "context": "    707:     });\n    708: \n>>> 709:     console.log(`📊 [${requestId}] Account type requested: ${accountType}`);\n    710:     \n    711:     // Check table dependencies first"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 716,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [HOLDINGS] Looking for stored portfolio data, account type: ${accountType}`",
      "context": "    714:     // Try to get real data from database first, filtered by account type\n    715:     try {\n>>> 716:       console.log(`🔍 [HOLDINGS] Looking for stored portfolio data, account type: ${accountType}`);\n    717:       // Security: Don't log user IDs in portfolio operations\n    718:       "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 750,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [HOLDINGS] Found ${storedHoldings.rows.length} stored holdings for ${accountType} account`",
      "context": "    748:       \n    749:       if (storedHoldings.rows.length > 0) {\n>>> 750:         console.log(`✅ [HOLDINGS] Found ${storedHoldings.rows.length} stored holdings for ${accountType} account`);\n    751:         \n    752:         const holdings = storedHoldings.rows;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 792,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] No stored data found, attempting to fetch fresh data from broker API`",
      "context": "    790:       \n    791:       // If no stored data, try to get fresh data from broker API with comprehensive error handling\n>>> 792:       console.log(`📡 [${requestId}] No stored data found, attempting to fetch fresh data from broker API`);\n    793:       const credentialsStart = Date.now();\n    794:       "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 801,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`",
      "context": "    799:         \n    800:         if (!credentials) {\n>>> 801:           console.error(`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n    802:             requestedProvider: 'alpaca',\n    803:             accountType,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    235:     const userId = req.user?.sub;\n    236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n>>> 237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],\n    239:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 364,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`",
      "context": "    362:         \n    363:         if (credentials) {\n>>> 364:           console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n    365:             provider: 'alpaca',\n    366:             isSandbox: credentials.isSandbox,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 833,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`",
      "context": "    831:       } catch (credentialsError) {\n    832:         const credentialsDuration = Date.now() - credentialsStart;\n>>> 833:         console.error(`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n    834:           error: credentialsError.message,\n    835:           errorStack: credentialsError.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 858,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${requestId}] Using API key: alpaca (${credentials.isSandbox ? 'sandbox' : 'live'})`",
      "context": "    856:       \n    857:       if (credentials.isSandbox === isSandbox) {\n>>> 858:         console.log(`🔑 [${requestId}] Using API key: alpaca (${credentials.isSandbox ? 'sandbox' : 'live'})`);\n    859:         \n    860:         // Initialize Alpaca service with comprehensive error handling"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 861,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏭 [${requestId}] Initializing Alpaca service`",
      "context": "    859:         \n    860:         // Initialize Alpaca service with comprehensive error handling\n>>> 861:         console.log(`🏭 [${requestId}] Initializing Alpaca service`);\n    862:         const serviceInitStart = Date.now();\n    863:         let alpaca;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 873,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`",
      "context": "    871:           const serviceInitDuration = Date.now() - serviceInitStart;\n    872:           \n>>> 873:           console.log(`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`, {\n    874:             environment: credentials.isSandbox ? 'sandbox' : 'live',\n    875:             hasApiKey: !!credentials.apiKey,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 881,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`",
      "context": "    879:         } catch (serviceError) {\n    880:           const serviceInitDuration = Date.now() - serviceInitStart;\n>>> 881:           console.error(`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`, {\n    882:             error: serviceError.message,\n    883:             errorStack: serviceError.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 912,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching portfolio positions from Alpaca API`",
      "context": "    910:         \n    911:         // Fetch positions with comprehensive error handling\n>>> 912:         console.log(`📊 [${requestId}] Fetching portfolio positions from Alpaca API`);\n    913:         const positionsStart = Date.now();\n    914:         let positions;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 925,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio positions fetched in ${positionsDuration}ms`",
      "context": "    923:           \n    924:           const positionsDuration = Date.now() - positionsStart;\n>>> 925:           console.log(`✅ [${requestId}] Portfolio positions fetched in ${positionsDuration}ms`, {\n    926:             positionCount: positions?.length || 0,\n    927:             environment: credentials.isSandbox ? 'sandbox' : 'live',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 933,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to fetch positions after ${positionsDuration}ms:`",
      "context": "    931:         } catch (positionsError) {\n    932:           const positionsDuration = Date.now() - positionsStart;\n>>> 933:           console.error(`❌ [${requestId}] Failed to fetch positions after ${positionsDuration}ms:`, {\n    934:             error: positionsError.message,\n    935:             errorStack: positionsError.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1035,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [${requestId}] Processing ${positions.length} portfolio positions`",
      "context": "    1033:         // Process positions data with validation\n    1034:         if (positions && positions.length > 0) {\n>>> 1035:           console.log(`📈 [${requestId}] Processing ${positions.length} portfolio positions`);\n    1036:           const totalValue = positions.reduce((sum, p) => sum + p.marketValue, 0);\n    1037:           const totalGainLoss = positions.reduce((sum, p) => sum + p.unrealizedPL, 0);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1053,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio holdings successfully retrieved and processed in ${totalDuration}ms`",
      "context": "    1051: \n    1052:           const totalDuration = Date.now() - requestStart;\n>>> 1053:           console.log(`✅ [${requestId}] Portfolio holdings successfully retrieved and processed in ${totalDuration}ms`, {\n    1054:             positionCount: positions.length,\n    1055:             totalValue,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1084,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] No positions found in portfolio after ${totalDuration}ms`",
      "context": "    1082:         } else {\n    1083:           const totalDuration = Date.now() - requestStart;\n>>> 1084:           console.log(`📊 [${requestId}] No positions found in portfolio after ${totalDuration}ms`, {\n    1085:             environment: credentials.isSandbox ? 'sandbox' : 'live',\n    1086:             dataSource: 'alpaca_api',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1115,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Account type mismatch`",
      "context": "    1113:         }\n    1114:       } else {\n>>> 1115:         console.warn(`⚠️ [${requestId}] Account type mismatch`, {\n    1116:           requestedType: isSandbox ? 'sandbox' : 'live',\n    1117:           availableType: credentials.isSandbox ? 'sandbox' : 'live',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1130,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Configure API credentials for ${isSandbox ? 'Paper Trading' : 'Live Trading'}`",
      "context": "    1128:           actions: [\n    1129:             'Go to Settings > API Keys',\n>>> 1130:             `Configure API credentials for ${isSandbox ? 'Paper Trading' : 'Live Trading'}`,\n    1131:             `Or switch to ${credentials.isSandbox ? 'Paper Trading' : 'Live Trading'} mode`,\n    1132:             'Verify you have the correct API keys for the desired environment'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1142,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Unexpected error in Alpaca API integration after ${errorDuration}ms:`",
      "context": "    1140:     } catch (error) {\n    1141:       const errorDuration = Date.now() - requestStart;\n>>> 1142:       console.error(`❌ [${requestId}] Unexpected error in Alpaca API integration after ${errorDuration}ms:`, {\n    1143:         error: error.message,\n    1144:         errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Falling back to database query due to API error`",
      "context": "    1148:       \n    1149:       // Fall through to database or mock data\n>>> 1150:       console.log(`🔄 [${requestId}] Falling back to database query due to API error`);\n    1151:     }\n    1152: "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1309,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio account info endpoint called for account type: ${accountType}`",
      "context": "    1307:   try {\n    1308:     const { accountType = 'paper' } = req.query;\n>>> 1309:     console.log(`Portfolio account info endpoint called for account type: ${accountType}`);\n    1310:     \n    1311:     const userId = req.user?.sub;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1315,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`👤 User ID: ${userId}`",
      "context": "    1313:       throw new Error('User authentication required');\n    1314:     }\n>>> 1315:     console.log(`👤 User ID: ${userId}`);\n    1316: \n    1317:     // If authenticated, try to get real data"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1441,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏦 Available accounts endpoint called for user: ${userId}`",
      "context": "    1439:   try {\n    1440:     const userId = req.user.sub;\n>>> 1441:     console.log(`🏦 Available accounts endpoint called for user: ${userId}`);\n    1442:     \n    1443:     // Get user's API keys to determine available account types"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1512,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio analytics endpoint called for authenticated user: ${userId}, timeframe: ${timeframe}`",
      "context": "    1510:     const { timeframe = '1y' } = req.query;\n    1511:   \n>>> 1512:     console.log(`Portfolio analytics endpoint called for authenticated user: ${userId}, timeframe: ${timeframe}`);\n    1513:   \n    1514:     // Main analytics logic try block"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1824,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Data loading status request for user: ${userId}`",
      "context": "    1822:     }\n    1823: \n>>> 1824:     console.log(`🔄 Data loading status request for user: ${userId}`);\n    1825:     \n    1826:     // Get comprehensive data loading status"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1858,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 Manual data refresh trigger for user: ${userId}`",
      "context": "    1856: \n    1857:     const { provider, symbols } = req.body;\n>>> 1858:     console.log(`🚀 Manual data refresh trigger for user: ${userId}`);\n    1859:     \n    1860:     // Trigger portfolio data refresh"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1889,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`",
      "context": "    1887:   const startTime = Date.now();\n    1888:   \n>>> 1889:   console.log(`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`);\n    1890:   console.log(`📈 [${requestId}] Memory at start:`, process.memoryUsage());\n    1891:   console.log(`📈 [${requestId}] Environment check:`, {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1890,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [${requestId}] Memory at start:`",
      "context": "    1888:   \n    1889:   console.log(`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`);\n>>> 1890:   console.log(`📈 [${requestId}] Memory at start:`, process.memoryUsage());\n    1891:   console.log(`📈 [${requestId}] Environment check:`, {\n    1892:     DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1891,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [${requestId}] Environment check:`",
      "context": "    1889:   console.log(`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`);\n    1890:   console.log(`📈 [${requestId}] Memory at start:`, process.memoryUsage());\n>>> 1891:   console.log(`📈 [${requestId}] Environment check:`, {\n    1892:     DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n    1893:     AWS_REGION: process.env.AWS_REGION,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1899,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [${requestId}] Timeframe requested: ${timeframe}`",
      "context": "    1897:   try {\n    1898:     const { timeframe = '1Y' } = req.query;\n>>> 1899:     console.log(`📈 [${requestId}] Timeframe requested: ${timeframe}`);\n    1900:     \n    1901:     // Validate user authentication"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1906,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`👤 [${requestId}] User ID: ${userId}`",
      "context": "    1904:       throw new Error('User authentication required');\n    1905:     }\n>>> 1906:     console.log(`👤 [${requestId}] User ID: ${userId}`);\n    1907: \n    1908:     // Test database with minimal query first"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1909,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Testing database with SELECT 1...`",
      "context": "    1907: \n    1908:     // Test database with minimal query first\n>>> 1909:     console.log(`🔍 [${requestId}] Testing database with SELECT 1...`);\n    1910:     try {\n    1911:       const dbTestStart = Date.now();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1913,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database test passed in ${Date.now() - dbTestStart}ms`",
      "context": "    1911:       const dbTestStart = Date.now();\n    1912:       await query('SELECT 1 as test', [], 5000); // 5 second timeout\n>>> 1913:       console.log(`✅ [${requestId}] Database test passed in ${Date.now() - dbTestStart}ms`);\n    1914:     } catch (dbError) {\n    1915:       console.error(`❌ [${requestId}] Database test failed:`, dbError.message);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1915,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database test failed:`",
      "context": "    1913:       console.log(`✅ [${requestId}] Database test passed in ${Date.now() - dbTestStart}ms`);\n    1914:     } catch (dbError) {\n>>> 1915:       console.error(`❌ [${requestId}] Database test failed:`, dbError.message);\n    1916:       return res.status(503).json({\n    1917:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1927,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Getting portfolio performance for user: ${userId}`",
      "context": "    1925:     // If user authenticated, try live API data first, then fallback to database\n    1926:     if (userId) {\n>>> 1927:       console.log(`📊 [${requestId}] Getting portfolio performance for user: ${userId}`);\n    1928:       \n    1929:       try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1936,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] Fetching live performance data from Alpaca...`",
      "context": "    1934:           \n    1935:           if (credentials) {\n>>> 1936:             console.log(`📡 [${requestId}] Fetching live performance data from Alpaca...`);\n    1937:             const alpaca = new AlpacaService(\n    1938:               credentials.apiKey,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1962,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Retrieved ${livePerformanceData.length} days of live performance data`",
      "context": "    1960:               }));\n    1961:               \n>>> 1962:               console.log(`✅ [${requestId}] Retrieved ${livePerformanceData.length} days of live performance data`);\n    1963:             }\n    1964:           }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1966,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] API performance fetch failed:`",
      "context": "    1964:           }\n    1965:         } catch (apiError) {\n>>> 1966:           console.warn(`⚠️ [${requestId}] API performance fetch failed:`, apiError.message);\n    1967:         }\n    1968:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1972,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Falling back to database query...`",
      "context": "    1970:         let performanceData = livePerformanceData;\n    1971:         if (!performanceData) {\n>>> 1972:           console.log(`📊 [${requestId}] Falling back to database query...`);\n    1973:           try {\n    1974:             const portfolioQuery = `"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1987,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio query completed, found ${result.rows.length} records`",
      "context": "    1985:             \n    1986:             const result = await query(portfolioQuery, [userId], 8000);\n>>> 1987:             console.log(`✅ [${requestId}] Portfolio query completed, found ${result.rows.length} records`);\n    1988:             \n    1989:             if (result.rows.length > 0) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1998,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database query failed:`",
      "context": "    1996:             }\n    1997:           } catch (dbError) {\n>>> 1998:             console.error(`❌ [${requestId}] Database query failed:`, dbError.message);\n    1999:           }\n    2000:         }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2021,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Failed to get sector analysis:`",
      "context": "    2019:               }\n    2020:             } catch (error) {\n>>> 2021:               if (shouldLog('WARN')) console.warn(`⚠️ [${requestId}] Failed to get sector analysis:`, error.message);\n    2022:             }\n    2023:             "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2045,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Returning advanced analytics after ${Date.now() - startTime}ms`",
      "context": "    2043:             };\n    2044:             \n>>> 2045:             if (shouldLog('INFO')) console.log(`✅ [${requestId}] Returning advanced analytics after ${Date.now() - startTime}ms`);\n    2046:             return res.json({\n    2047:               success: true,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2058,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No portfolio data found for user`",
      "context": "    2056:             });\n    2057:           } else {\n>>> 2058:             console.log(`⚠️ [${requestId}] No portfolio data found for user`);\n    2059:             return res.status(404).json({\n    2060:               success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2068,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio query failed:`",
      "context": "    2066:           }\n    2067:       } catch (queryError) {\n>>> 2068:         console.error(`❌ [${requestId}] Portfolio query failed:`, queryError.message);\n    2069:         return res.status(500).json({\n    2070:           success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2078,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No authenticated user`",
      "context": "    2076:       }\n    2077:     } else {\n>>> 2078:       console.log(`⚠️ [${requestId}] No authenticated user`);\n    2079:       return res.status(401).json({\n    2080:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2089,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Unexpected error:`",
      "context": "    2087: \n    2088:   } catch (error) {\n>>> 2089:     console.error(`❌ [${requestId}] Unexpected error:`, error);\n    2090:     \n    2091:     return res.status(500).json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio benchmark endpoint called for timeframe: ${timeframe}`",
      "context": "    2103:   try {\n    2104:     const { timeframe = '1Y' } = req.query;\n>>> 2105:     console.log(`Portfolio benchmark endpoint called for timeframe: ${timeframe}`);\n    2106:     \n    2107:     // Generate mock benchmark data for now"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2231,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [IMPORT START] Portfolio import requested for broker: ${broker}, account: ${accountType}, keyId: ${keyId || 'auto-select'}`",
      "context": "    2229:     const userId = req.user?.sub;\n    2230:     \n>>> 2231:     console.log(`🔄 [IMPORT START] Portfolio import requested for broker: ${broker}, account: ${accountType}, keyId: ${keyId || 'auto-select'}`);\n    2232:     console.log(`🔄 [IMPORT] Request headers:`, Object.keys(req.headers));\n    2233:     console.log(`🔄 [IMPORT] Memory usage:`, process.memoryUsage());"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2255,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] Step 1: Fetching API keys for ${broker}...`",
      "context": "    2253:     \n    2254:     // Step 1: Get the user's API key for this broker with robust error handling\n>>> 2255:     console.log(`🔑 [IMPORT] Step 1: Fetching API keys for ${broker}...`);\n    2256:     console.log(`🔑 [IMPORT] User ID: ${userId}, Broker: ${broker}`);\n    2257:     let credentials;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2256,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] User ID: ${userId}, Broker: ${broker}`",
      "context": "    2254:     // Step 1: Get the user's API key for this broker with robust error handling\n    2255:     console.log(`🔑 [IMPORT] Step 1: Fetching API keys for ${broker}...`);\n>>> 2256:     console.log(`🔑 [IMPORT] User ID: ${userId}, Broker: ${broker}`);\n    2257:     let credentials;\n    2258:     try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2260,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] API key service enabled: ${apiKeyService.isEnabled}`",
      "context": "    2258:     try {\n    2259:       // Check if API key service is enabled\n>>> 2260:       console.log(`🔑 [IMPORT] API key service enabled: ${apiKeyService.isEnabled}`);\n    2261:       \n    2262:       if (!apiKeyService.isEnabled) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`",
      "context": "    2273:         });\n    2274:       }\n>>> 2275:         console.log(`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`);\n    2276:         console.log(`🔑 [IMPORT] API Key Service enabled: ${apiKeyService.isEnabled}`);\n    2277:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2276,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] API Key Service enabled: ${apiKeyService.isEnabled}`",
      "context": "    2274:       }\n    2275:         console.log(`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`);\n>>> 2276:         console.log(`🔑 [IMPORT] API Key Service enabled: ${apiKeyService.isEnabled}`);\n    2277:         \n    2278:         // Enhanced debug: Check if user has any API keys at all"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2281,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] User has ${debugResult.rows.length} API keys:`",
      "context": "    2279:         try {\n    2280:           const debugResult = await query(`SELECT id, provider, user_id, is_active, created_at FROM user_api_keys WHERE user_id = $1`, [userId]);\n>>> 2281:           console.log(`🔍 [IMPORT DEBUG] User has ${debugResult.rows.length} API keys:`, debugResult.rows.map(k => `ID:${k.id} ${k.provider}(${k.is_active ? 'active' : 'inactive'})`));\n    2282:           \n    2283:           // If specific keyId requested, check if it exists"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2286,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] KeyId ${keyId} check: found=${specificKeyCheck.rows.length > 0}`",
      "context": "    2284:           if (keyId) {\n    2285:             const specificKeyCheck = await query(`SELECT id, provider, user_id, is_active FROM user_api_keys WHERE id = $1`, [keyId]);\n>>> 2286:             console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} check: found=${specificKeyCheck.rows.length > 0}`);\n    2287:             if (specificKeyCheck.rows.length > 0) {\n    2288:               const key = specificKeyCheck.rows[0];"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2289,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] KeyId ${keyId} details: user_id=${key.user_id}, provider=${key.provider}, active=${key.is_active}`",
      "context": "    2287:             if (specificKeyCheck.rows.length > 0) {\n    2288:               const key = specificKeyCheck.rows[0];\n>>> 2289:               console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} details: user_id=${key.user_id}, provider=${key.provider}, active=${key.is_active}`);\n    2290:               console.log(`🔍 [IMPORT DEBUG] User ID match: ${key.user_id === userId} (${key.user_id} vs ${userId})`);\n    2291:               console.log(`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2290,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] User ID match: ${key.user_id === userId} (${key.user_id} vs ${userId})`",
      "context": "    2288:               const key = specificKeyCheck.rows[0];\n    2289:               console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} details: user_id=${key.user_id}, provider=${key.provider}, active=${key.is_active}`);\n>>> 2290:               console.log(`🔍 [IMPORT DEBUG] User ID match: ${key.user_id === userId} (${key.user_id} vs ${userId})`);\n    2291:               console.log(`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`);\n    2292:             } else {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2291,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`",
      "context": "    2289:               console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} details: user_id=${key.user_id}, provider=${key.provider}, active=${key.is_active}`);\n    2290:               console.log(`🔍 [IMPORT DEBUG] User ID match: ${key.user_id === userId} (${key.user_id} vs ${userId})`);\n>>> 2291:               console.log(`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`);\n    2292:             } else {\n    2293:               console.log(`❌ [IMPORT DEBUG] KeyId ${keyId} does not exist in database`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2293,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [IMPORT DEBUG] KeyId ${keyId} does not exist in database`",
      "context": "    2291:               console.log(`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`);\n    2292:             } else {\n>>> 2293:               console.log(`❌ [IMPORT DEBUG] KeyId ${keyId} does not exist in database`);\n    2294:             }\n    2295:           }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2307,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [IMPORT DEBUG] User has ${userAlpacaKeys.length} ${broker} keys:`",
      "context": "    2305:             // Check for alpaca keys specifically for this user\n    2306:             const userAlpacaKeys = debugResult.rows.filter(k => k.provider === broker);\n>>> 2307:             console.log(`🔍 [IMPORT DEBUG] User has ${userAlpacaKeys.length} ${broker} keys:`, userAlpacaKeys.map(k => `ID:${k.id}(${k.is_active ? 'active' : 'inactive'})`));\n    2308:           }\n    2309:         } catch (debugError) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`",
      "context": "    2273:         });\n    2274:       }\n>>> 2275:         console.log(`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`);\n    2276:         console.log(`🔑 [IMPORT] API Key Service enabled: ${apiKeyService.isEnabled}`);\n    2277:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2318,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] Fetching specific API key with ID: ${keyId}`",
      "context": "    2316:         // If specific key ID is provided, get that specific key\n    2317:         if (keyId) {\n>>> 2318:           console.log(`🔑 [IMPORT] Fetching specific API key with ID: ${keyId}`);\n    2319:           try {\n    2320:             const specificKeyResult = await query(`"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2363,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [IMPORT] Specific key ${keyId} not found for user ${userId}`",
      "context": "    2361:                   console.log(`✅ [IMPORT] Retrieved specific key ${keyId}: ${credentials.provider} (${credentials.isSandbox ? 'sandbox' : 'live'})`);\n    2362:                 } else {\n>>> 2363:                   console.error(`❌ [IMPORT] Specific key ${keyId} not found for user ${userId}`);\n    2364:                 }\n    2365:               } catch (keyError) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2366,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [IMPORT] Error fetching specific key ${keyId}:`",
      "context": "    2364:                 }\n    2365:               } catch (keyError) {\n>>> 2366:                 console.error(`❌ [IMPORT] Error fetching specific key ${keyId}:`, keyError.message);\n    2367:               }\n    2368:         } else {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2373,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [IMPORT] Credentials provider: ${credentials.provider}, sandbox: ${credentials.isSandbox}`",
      "context": "    2371:           console.log(`🔑 [IMPORT] API key service returned credentials:`, !!credentials);\n    2372:           if (credentials) {\n>>> 2373:             console.log(`🔑 [IMPORT] Credentials provider: ${credentials.provider}, sandbox: ${credentials.isSandbox}`);\n    2374:           }\n    2375:         }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2377,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [IMPORT] Error fetching API key for ${broker}:`",
      "context": "    2375:         }\n    2376:     } catch (error) {\n>>> 2377:       console.error(`❌ [IMPORT] Error fetching API key for ${broker}:`, error.message);\n    2378:       console.error(`❌ [IMPORT] Error stack:`, error.stack);\n    2379:       return res.status(500).json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2382,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unable to access API keys: ${error.message}. Please check your API key configuration in Settings.`",
      "context": "    2380:         success: false,\n    2381:         error: 'API key service error',\n>>> 2382:         message: `Unable to access API keys: ${error.message}. Please check your API key configuration in Settings.`,\n    2383:         duration: Date.now() - startTime\n    2384:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2388,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ No API key found for broker ${broker}`",
      "context": "    2386:     \n    2387:     if (!credentials) {\n>>> 2388:       console.log(`❌ No API key found for broker ${broker}`);\n    2389:       console.log(`❌ Debug info: userId=${userId}, broker=${broker}`);\n    2390:       console.log(`❌ Recommended action: Check that user has saved API keys in Settings and they are active`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2389,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Debug info: userId=${userId}, broker=${broker}`",
      "context": "    2387:     if (!credentials) {\n    2388:       console.log(`❌ No API key found for broker ${broker}`);\n>>> 2389:       console.log(`❌ Debug info: userId=${userId}, broker=${broker}`);\n    2390:       console.log(`❌ Recommended action: Check that user has saved API keys in Settings and they are active`);\n    2391:       return res.status(400).json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2394,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No API key configured for ${broker}. Please add your API key in Settings.`",
      "context": "    2392:         success: false,\n    2393:         error: 'API key not found',\n>>> 2394:         message: `No API key configured for ${broker}. Please add your API key in Settings.`,\n    2395:         debug: {\n    2396:           userId: userId,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2403,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found API key for ${broker} (sandbox: ${credentials.isSandbox})`",
      "context": "    2401:     }\n    2402:     \n>>> 2403:     console.log(`✅ Found API key for ${broker} (sandbox: ${credentials.isSandbox})`);\n    2404:     console.log(`📊 [IMPORT] API key setting is authoritative - using ${credentials.isSandbox ? 'PAPER' : 'LIVE'} account`);\n    2405:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2407,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [IMPORT] Step 2: Connecting to ${broker} API...`",
      "context": "    2405:     \n    2406:     // Step 2: Connect to the broker's API and fetch portfolio data\n>>> 2407:     console.log(`📡 [IMPORT] Step 2: Connecting to ${broker} API...`);\n    2408:     console.log(`📡 [IMPORT] API endpoint will be: ${credentials.isSandbox ? 'paper-api.alpaca.markets' : 'api.alpaca.markets'}`);\n    2409:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2424,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Alpaca service initialization failed: ${initError.message}`",
      "context": "    2422:         } catch (initError) {\n    2423:           console.error(`❌ [IMPORT] Failed to initialize AlpacaService:`, initError.message);\n>>> 2424:           throw new Error(`Alpaca service initialization failed: ${initError.message}`);\n    2425:         }\n    2426:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2438,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [IMPORT] ${positions.length} positions fetched`",
      "context": "    2436:           console.log(`📊 [IMPORT] Fetching positions...`);\n    2437:           positions = await alpaca.getPositions();\n>>> 2438:           console.log(`✅ [IMPORT] ${positions.length} positions fetched`);\n    2439:           \n    2440:           console.log(`📊 [IMPORT] Fetching activities...`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2443,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [IMPORT] ${activities.length} activities fetched`",
      "context": "    2441:           try {\n    2442:             activities = await alpaca.getActivities();\n>>> 2443:             console.log(`✅ [IMPORT] ${activities.length} activities fetched`);\n    2444:           } catch (actError) {\n    2445:             console.warn(`⚠️ [IMPORT] Failed to fetch activities:`, actError.message);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2450,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to fetch data from Alpaca: ${dataError.message}`",
      "context": "    2448:         } catch (dataError) {\n    2449:           console.error(`❌ [IMPORT] Failed to fetch portfolio data:`, dataError.message);\n>>> 2450:           throw new Error(`Failed to fetch data from Alpaca: ${dataError.message}`);\n    2451:         }\n    2452:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2503,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unsupported broker: ${broker}`",
      "context": "    2501:         throw new Error(`TD Ameritrade integration not yet implemented`);\n    2502:       } else {\n>>> 2503:         throw new Error(`Unsupported broker: ${broker}`);\n    2504:       }\n    2505:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2506,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to fetch portfolio from ${broker}:`",
      "context": "    2504:       }\n    2505:     } catch (error) {\n>>> 2506:       console.error(`❌ Failed to fetch portfolio from ${broker}:`, error);\n    2507:       return res.status(500).json({\n    2508:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2510,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to fetch portfolio from ${broker}. Please check your API key and try again. Error: ${error.message}`",
      "context": "    2508:         success: false,\n    2509:         error: 'Broker API error',\n>>> 2510:         message: `Failed to fetch portfolio from ${broker}. Please check your API key and try again. Error: ${error.message}`\n    2511:       });\n    2512:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2533,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW())`",
      "context": "    2531:           \n    2532:           batch.forEach(position => {\n>>> 2533:             values.push(`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW())`);\n    2534:             params.push(\n    2535:               userId, credentials.id, position.symbol, position.quantity,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2541,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            INSERT INTO portfolio_holdings (\n              user_id, api_key_id, symbol, quantity, avg_cost, current_price, \n              market_value, unrealized_pl, unrealized_plpc, side, updated_at\n            ) VALUES ${values.join(', ')}\n            ON CONFLICT (user_id, api_key_id, symbol) DO UPDATE SET\n              quantity = EXCLUDED.quantity,\n              avg_cost = EXCLUDED.avg_cost,\n              current_price = EXCLUDED.current_price,\n              market_value = EXCLUDED.market_value,\n              unrealized_pl = EXCLUDED.unrealized_pl,\n              unrealized_plpc = EXCLUDED.unrealized_plpc,\n              side = EXCLUDED.side,\n              updated_at = NOW()\n          `",
      "context": "    2539:           });\n    2540:           \n>>> 2541:           await query(`\n    2542:             INSERT INTO portfolio_holdings (\n    2543:               user_id, api_key_id, symbol, quantity, avg_cost, current_price, "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2557,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 Processed batch ${Math.floor(i/batchSize) + 1}: ${batch.length} positions`",
      "context": "    2555:           `, params);\n    2556:           \n>>> 2557:           console.log(`📈 Processed batch ${Math.floor(i/batchSize) + 1}: ${batch.length} positions`);\n    2558:         }\n    2559:       }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2562,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Completed batch UPSERT for ${portfolioData.positions.length} positions`",
      "context": "    2560:       \n    2561:       // Individual processing replaced with batch processing above\n>>> 2562:       console.log(`✅ Completed batch UPSERT for ${portfolioData.positions.length} positions`);\n    2563:       \n    2564:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2610,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [IMPORT] Fatal error after ${duration}ms:`",
      "context": "    2608:   } catch (error) {\n    2609:     const duration = Date.now() - startTime;\n>>> 2610:     console.error(`❌ [IMPORT] Fatal error after ${duration}ms:`, error.message);\n    2611:     console.error(`❌ [IMPORT] Error stack:`, error.stack);\n    2612:     console.error(`❌ [IMPORT] Memory usage:`, process.memoryUsage());"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2622,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.method} ${req.path}`",
      "context": "    2620:         errorType: error.constructor.name,\n    2621:         duration: duration,\n>>> 2622:         endpoint: `${req.method} ${req.path}`,\n    2623:         broker: req.params?.broker,\n    2624:         accountType: req.query?.accountType,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2639,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Testing connection for broker: ${broker}, user: ${userId}`",
      "context": "    2637:   \n    2638:   try {\n>>> 2639:     console.log(`Testing connection for broker: ${broker}, user: ${userId}`);\n    2640:     \n    2641:     // Return empty connection test result with comprehensive diagnostics"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2682,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection test failed for ${broker} API - configure your API keys`",
      "context": "    2680:         }\n    2681:       },\n>>> 2682:       message: `Connection test failed for ${broker} API - configure your API keys`,\n    2683:       provider: broker,\n    2684:       dataSource: 'empty'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2755,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Running portfolio optimization for user ${userId}`",
      "context": "    2753: \n    2754:   try {\n>>> 2755:     console.log(`Running portfolio optimization for user ${userId}`);\n    2756:     \n    2757:     // Check if optimization service is available"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2828,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Getting portfolio optimization data for user ${userId}`",
      "context": "    2826:   \n    2827:   try {\n>>> 2828:     console.log(`Getting portfolio optimization data for user ${userId}`);\n    2829:     \n    2830:     // Get current portfolio from live API"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2859,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`API fetch failed for optimization: ${apiError.message}`",
      "context": "    2857:       }\n    2858:     } catch (apiError) {\n>>> 2859:       console.warn(`API fetch failed for optimization: ${apiError.message}`);\n    2860:     }\n    2861:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2909,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Getting optimization recommendations for user ${userId}`",
      "context": "    2907:   \n    2908:   try {\n>>> 2909:     console.log(`Getting optimization recommendations for user ${userId}`);\n    2910:     \n    2911:     // Get current portfolio from live API to base recommendations on"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2949,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved portfolio: $${currentPortfolio.totalValue.toFixed(2)} with ${currentPortfolio.positions.length} positions`",
      "context": "    2947:         }\n    2948:         \n>>> 2949:         console.log(`✅ Retrieved portfolio: $${currentPortfolio.totalValue.toFixed(2)} with ${currentPortfolio.positions.length} positions`);\n    2950:       }\n    2951:     } catch (apiError) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3043,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Executing rebalancing trades for user ${userId}`",
      "context": "    3041: \n    3042:   try {\n>>> 3043:     console.log(`Executing rebalancing trades for user ${userId}`);\n    3044:     \n    3045:     // Validate trades"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Getting risk analysis for user ${userId}`",
      "context": "    3100: \n    3101:   try {\n>>> 3102:     console.log(`Getting risk analysis for user ${userId}`);\n    3103:     \n    3104:     // Get live portfolio data for risk analysis"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved portfolio data for risk analysis: $${portfolioData.totalValue.toFixed(2)}`",
      "context": "    3148:         \n    3149:         portfolioHistory = history;\n>>> 3150:         console.log(`✅ Retrieved portfolio data for risk analysis: $${portfolioData.totalValue.toFixed(2)}`);\n    3151:       }\n    3152:     } catch (apiError) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3197,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Calculated risk metrics from ${returns.length} days of data`",
      "context": "    3195:       };\n    3196:       \n>>> 3197:       console.log(`📊 Calculated risk metrics from ${returns.length} days of data`);\n    3198:     } else {\n    3199:       // Use reasonable defaults based on portfolio composition if available"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3255,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(sectorConcentration * 100).toFixed(1)}% concentration in single sector increases risk`",
      "context": "    3253:         type: 'warning',\n    3254:         title: 'High Sector Concentration',\n>>> 3255:         message: `${(sectorConcentration * 100).toFixed(1)}% concentration in single sector increases risk`,\n    3256:         impact: 'Consider diversifying across sectors'\n    3257:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3352,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Portfolio sync request initiated`",
      "context": "    3350:     const { force = false } = req.body;\n    3351:     \n>>> 3352:     console.log(`🔄 [${requestId}] Portfolio sync request initiated`, {\n    3353:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    3354:       force,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    235:     const userId = req.user?.sub;\n    236:     console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n>>> 237:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    238:       userAgent: req.headers['user-agent'],\n    239:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3389,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio sync completed successfully in ${totalDuration}ms`",
      "context": "    3387:     const totalDuration = Date.now() - requestStart;\n    3388:     \n>>> 3389:     console.log(`✅ [${requestId}] Portfolio sync completed successfully in ${totalDuration}ms`, {\n    3390:       syncId: syncResult.syncId,\n    3391:       recordsProcessed: syncResult.result.summary.totalRecordsProcessed,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3407,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${syncResult.duration}ms`",
      "context": "    3405:     }, {\n    3406:       requestId,\n>>> 3407:       syncDuration: `${syncResult.duration}ms`\n    3408:     });\n    3409:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3412,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio sync FAILED after ${errorDuration}ms:`",
      "context": "    3410:   } catch (error) {\n    3411:     const errorDuration = Date.now() - requestStart;\n>>> 3412:     console.error(`❌ [${requestId}] Portfolio sync FAILED after ${errorDuration}ms:`, {\n    3413:       error: error.message,\n    3414:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3415,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    3413:       error: error.message,\n    3414:       errorStack: error.stack,\n>>> 3415:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    3416:       impact: 'Portfolio synchronization failed'\n    3417:     });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 528,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${errorDuration}ms`",
      "context": "    526:       errorCode: error.code,\n    527:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n>>> 528:       requestDuration: `${errorDuration}ms`,\n    529:       impact: 'Portfolio overview request failed completely',\n    530:       recommendation: 'Check logs for specific failure point'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3456,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio sync status request failed:`",
      "context": "    3454:     \n    3455:   } catch (error) {\n>>> 3456:     console.error(`❌ [${requestId}] Portfolio sync status request failed:`, {\n    3457:       error: error.message,\n    3458:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3415,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${req.user.sub.substring(0, 8)}...`",
      "context": "    3413:       error: error.message,\n    3414:       errorStack: error.stack,\n>>> 3415:       userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n    3416:       impact: 'Portfolio synchronization failed'\n    3417:     });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3473,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Advanced portfolio analytics request`",
      "context": "    3471:   const startTime = Date.now();\n    3472:   \n>>> 3473:   if (shouldLog('INFO')) console.log(`📊 [${requestId}] Advanced portfolio analytics request`);\n    3474:   \n    3475:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3606,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio lacks diversification (score: ${sectorAnalysis.diversificationScore.toFixed(1)})`",
      "context": "    3604:         type: 'INCREASE_DIVERSIFICATION',\n    3605:         priority: 'HIGH',\n>>> 3606:         message: `Portfolio lacks diversification (score: ${sectorAnalysis.diversificationScore.toFixed(1)})`\n    3607:       });\n    3608:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3632,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Advanced analytics completed in ${Date.now() - startTime}ms`",
      "context": "    3630:     };\n    3631:     \n>>> 3632:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Advanced analytics completed in ${Date.now() - startTime}ms`);\n    3633:     return res.json(response);\n    3634:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3636,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Advanced analytics failed:`",
      "context": "    3634:     \n    3635:   } catch (error) {\n>>> 3636:     console.error(`❌ [${requestId}] Advanced analytics failed:`, error.message);\n    3637:     return res.status(500).json({\n    3638:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3660,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio rebalancing recommendations requested for user: ${userId.substring(0, 8)}...`",
      "context": "    3658:   \n    3659:   try {\n>>> 3660:     if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio rebalancing recommendations requested for user: ${userId.substring(0, 8)}...`);\n    3661:     \n    3662:     // Get current portfolio holdings"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3711,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Rebalancing recommendations generated in ${Date.now() - startTime}ms`",
      "context": "    3709:     const optimizationResults = await optimizer.optimizePortfolio(holdings, userId, preferences);\n    3710:     \n>>> 3711:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Rebalancing recommendations generated in ${Date.now() - startTime}ms`);\n    3712:     \n    3713:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3737,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio rebalancing recommendations failed:`",
      "context": "    3735:     \n    3736:   } catch (error) {\n>>> 3737:     console.error(`❌ [${requestId}] Portfolio rebalancing recommendations failed:`, error.message);\n    3738:     return res.status(500).json({\n    3739:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3758,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Portfolio rebalancing execution requested for user: ${userId.substring(0, 8)}...`",
      "context": "    3756:   \n    3757:   try {\n>>> 3758:     if (shouldLog('INFO')) console.log(`🔄 [${requestId}] Portfolio rebalancing execution requested for user: ${userId.substring(0, 8)}...`);\n    3759:     \n    3760:     const { trades, dryRun = true } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3823,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Trade execution failed for ${trade.symbol}:`",
      "context": "    3821:         \n    3822:       } catch (tradeError) {\n>>> 3823:         console.error(`❌ [${requestId}] Trade execution failed for ${trade.symbol}:`, tradeError.message);\n    3824:         executionResults.push({\n    3825:           symbol: trade.symbol,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3838,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio holdings will be updated on next sync`",
      "context": "    3836:       // This would typically update the portfolio_holdings table\n    3837:       // For now, we'll let the next sync update the holdings\n>>> 3838:       if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio holdings will be updated on next sync`);\n    3839:     }\n    3840:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3844,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Rebalancing execution completed in ${Date.now() - startTime}ms`",
      "context": "    3842:     const failedTrades = executionResults.filter(r => r.status === 'failed');\n    3843:     \n>>> 3844:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Rebalancing execution completed in ${Date.now() - startTime}ms`);\n    3845:     \n    3846:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3864,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio rebalancing execution failed:`",
      "context": "    3862:     \n    3863:   } catch (error) {\n>>> 3864:     console.error(`❌ [${requestId}] Portfolio rebalancing execution failed:`, error.message);\n    3865:     return res.status(500).json({\n    3866:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3885,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio allocation analysis requested for user: ${userId.substring(0, 8)}...`",
      "context": "    3883:   \n    3884:   try {\n>>> 3885:     if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio allocation analysis requested for user: ${userId.substring(0, 8)}...`);\n    3886:     \n    3887:     // Get current portfolio holdings with extended data"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3986,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Top 5 positions represent ${top5Concentration.toFixed(1)}% of portfolio. Consider reducing concentration risk.`",
      "context": "    3984:         type: 'concentration_risk',\n    3985:         severity: 'high',\n>>> 3986:         message: `Top 5 positions represent ${top5Concentration.toFixed(1)}% of portfolio. Consider reducing concentration risk.`,\n    3987:         recommendation: 'Diversify holdings across more positions or sectors'\n    3988:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3997,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`High sector concentration detected (${maxSectorAllocation.toFixed(1)}%).`",
      "context": "    3995:         type: 'sector_concentration',\n    3996:         severity: 'medium',\n>>> 3997:         message: `High sector concentration detected (${maxSectorAllocation.toFixed(1)}%).`,\n    3998:         recommendation: 'Consider diversifying across different sectors'\n    3999:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4007,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio beta is ${portfolioBeta.toFixed(2)}, indicating higher volatility than market.`",
      "context": "    4005:         type: 'high_beta',\n    4006:         severity: 'medium',\n>>> 4007:         message: `Portfolio beta is ${portfolioBeta.toFixed(2)}, indicating higher volatility than market.`,\n    4008:         recommendation: 'Consider adding some defensive stocks or bonds to reduce risk'\n    4009:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4021,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio allocation analysis completed in ${Date.now() - startTime}ms`",
      "context": "    4019:     }\n    4020:     \n>>> 4021:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio allocation analysis completed in ${Date.now() - startTime}ms`);\n    4022:     \n    4023:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4058,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio allocation analysis failed:`",
      "context": "    4056:     \n    4057:   } catch (error) {\n>>> 4058:     console.error(`❌ [${requestId}] Portfolio allocation analysis failed:`, error.message);\n    4059:     return res.status(500).json({\n    4060:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4079,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio CSV export requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4077:   \n    4078:   try {\n>>> 4079:     if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio CSV export requested for user: ${userId.substring(0, 8)}...`);\n    4080:     \n    4081:     // Get portfolio holdings with all relevant data"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\"${cell}\"`",
      "context": "    4159:     // Create CSV content\n    4160:     const csvContent = [csvHeaders, ...csvRows]\n>>> 4161:       .map(row => row.map(cell => `\"${cell}\"`).join(','))\n    4162:       .join('\\n');\n    4163:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`portfolio_export_${timestamp}.csv`",
      "context": "    4164:     // Generate filename with timestamp\n    4165:     const timestamp = new Date().toISOString().split('T')[0];\n>>> 4166:     const filename = `portfolio_export_${timestamp}.csv`;\n    4167:     \n    4168:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio CSV export completed in ${Date.now() - startTime}ms`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio CSV export completed in ${Date.now() - startTime}ms`",
      "context": "    4166:     const filename = `portfolio_export_${timestamp}.csv`;\n    4167:     \n>>> 4168:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio CSV export completed in ${Date.now() - startTime}ms`);\n    4169:     \n    4170:     res.setHeader('Content-Type', 'text/csv');"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4171,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`attachment; filename=${filename}`",
      "context": "    4169:     \n    4170:     res.setHeader('Content-Type', 'text/csv');\n>>> 4171:     res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n    4172:     res.send(csvContent);\n    4173:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4175,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio CSV export failed:`",
      "context": "    4173:     \n    4174:   } catch (error) {\n>>> 4175:     console.error(`❌ [${requestId}] Portfolio CSV export failed:`, error.message);\n    4176:     return res.status(500).json({\n    4177:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Portfolio JSON export requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4194:   \n    4195:   try {\n>>> 4196:     if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio JSON export requested for user: ${userId.substring(0, 8)}...`);\n    4197:     \n    4198:     // Get comprehensive portfolio data"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4299,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio JSON export completed in ${Date.now() - startTime}ms`",
      "context": "    4297:     };\n    4298:     \n>>> 4299:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio JSON export completed in ${Date.now() - startTime}ms`);\n    4300:     \n    4301:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4309,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio JSON export failed:`",
      "context": "    4307:     \n    4308:   } catch (error) {\n>>> 4309:     console.error(`❌ [${requestId}] Portfolio JSON export failed:`, error.message);\n    4310:     return res.status(500).json({\n    4311:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4330,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📥 [${requestId}] Portfolio CSV import requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4328:   \n    4329:   try {\n>>> 4330:     if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio CSV import requested for user: ${userId.substring(0, 8)}...`);\n    4331:     \n    4332:     const { csvData, importMode = 'append' } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4365,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Required columns: ${missingColumns.join(', ')}`",
      "context": "    4363:         success: false,\n    4364:         error: 'Missing required columns',\n>>> 4365:         message: `Required columns: ${missingColumns.join(', ')}`,\n    4366:         timestamp: new Date().toISOString()\n    4367:       });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4379,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Line ${i + 2}: Column count mismatch`",
      "context": "    4377:       \n    4378:       if (values.length !== headers.length) {\n>>> 4379:         errors.push(`Line ${i + 2}: Column count mismatch`);\n    4380:         continue;\n    4381:       }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4401,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Line ${i + 2}: Invalid symbol, shares, or avg_cost`",
      "context": "    4399:         \n    4400:         if (!parsedHolding.symbol || parsedHolding.shares <= 0 || parsedHolding.avg_cost <= 0) {\n>>> 4401:           errors.push(`Line ${i + 2}: Invalid symbol, shares, or avg_cost`);\n    4402:           continue;\n    4403:         }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4407,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Line ${i + 2}: ${parseError.message}`",
      "context": "    4405:         importedHoldings.push(parsedHolding);\n    4406:       } catch (parseError) {\n>>> 4407:         errors.push(`Line ${i + 2}: ${parseError.message}`);\n    4408:       }\n    4409:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4481,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${holding.symbol}: ${dbError.message}`",
      "context": "    4479:         }\n    4480:       } catch (dbError) {\n>>> 4481:         errors.push(`${holding.symbol}: ${dbError.message}`);\n    4482:       }\n    4483:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4485,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio CSV import completed in ${Date.now() - startTime}ms`",
      "context": "    4483:     }\n    4484:     \n>>> 4485:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio CSV import completed in ${Date.now() - startTime}ms`);\n    4486:     \n    4487:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4505,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio CSV import failed:`",
      "context": "    4503:     \n    4504:   } catch (error) {\n>>> 4505:     console.error(`❌ [${requestId}] Portfolio CSV import failed:`, error.message);\n    4506:     return res.status(500).json({\n    4507:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4526,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📥 [${requestId}] Portfolio Alpaca import requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4524:   \n    4525:   try {\n>>> 4526:     if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio Alpaca import requested for user: ${userId.substring(0, 8)}...`);\n    4527:     \n    4528:     const { forceRefresh = false } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4621,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Company info not found for ${symbol}`",
      "context": "    4619:         } catch (companyError) {\n    4620:           // Non-critical error, continue processing\n>>> 4621:           if (shouldLog('DEBUG')) console.log(`Company info not found for ${symbol}`);\n    4622:         }\n    4623:         "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4625,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${position.symbol}: ${positionError.message}`",
      "context": "    4623:         \n    4624:       } catch (positionError) {\n>>> 4625:         errors.push(`${position.symbol}: ${positionError.message}`);\n    4626:       }\n    4627:     }"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4629,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio Alpaca import completed in ${Date.now() - startTime}ms`",
      "context": "    4627:     }\n    4628:     \n>>> 4629:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio Alpaca import completed in ${Date.now() - startTime}ms`);\n    4630:     \n    4631:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4649,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio Alpaca import failed:`",
      "context": "    4647:     \n    4648:   } catch (error) {\n>>> 4649:     console.error(`❌ [${requestId}] Portfolio Alpaca import failed:`, error.message);\n    4650:     return res.status(500).json({\n    4651:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4673,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alerts requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4671:   \n    4672:   try {\n>>> 4673:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alerts requested for user: ${userId.substring(0, 8)}...`);\n    4674:     \n    4675:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4684,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alerts retrieved in ${Date.now() - startTime}ms`",
      "context": "    4682:     const alerts = await portfolioAlerts.getUserPortfolioAlerts(userId, filters);\n    4683:     \n>>> 4684:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alerts retrieved in ${Date.now() - startTime}ms`);\n    4685:     \n    4686:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4698,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alerts retrieval failed:`",
      "context": "    4696:     \n    4697:   } catch (error) {\n>>> 4698:     console.error(`❌ [${requestId}] Portfolio alerts retrieval failed:`, error.message);\n    4699:     return res.status(500).json({\n    4700:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4719,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert creation requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4717:   \n    4718:   try {\n>>> 4719:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert creation requested for user: ${userId.substring(0, 8)}...`);\n    4720:     \n    4721:     const {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4756,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert created in ${Date.now() - startTime}ms`",
      "context": "    4754:     const newAlert = await portfolioAlerts.createPortfolioAlert(userId, alertConfig);\n    4755:     \n>>> 4756:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert created in ${Date.now() - startTime}ms`);\n    4757:     \n    4758:     res.status(201).json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4767,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert creation failed:`",
      "context": "    4765:     \n    4766:   } catch (error) {\n>>> 4767:     console.error(`❌ [${requestId}] Portfolio alert creation failed:`, error.message);\n    4768:     return res.status(500).json({\n    4769:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4789,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert update requested for alert: ${alertId}`",
      "context": "    4787:   \n    4788:   try {\n>>> 4789:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert update requested for alert: ${alertId}`);\n    4790:     \n    4791:     const {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4812,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert updated in ${Date.now() - startTime}ms`",
      "context": "    4810:     const updatedAlert = await portfolioAlerts.updatePortfolioAlert(alertId, userId, updates);\n    4811:     \n>>> 4812:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert updated in ${Date.now() - startTime}ms`);\n    4813:     \n    4814:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4823,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert update failed:`",
      "context": "    4821:     \n    4822:   } catch (error) {\n>>> 4823:     console.error(`❌ [${requestId}] Portfolio alert update failed:`, error.message);\n    4824:     \n    4825:     const statusCode = error.message.includes('not found') ? 404 : 500;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4847,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert deletion requested for alert: ${alertId}`",
      "context": "    4845:   \n    4846:   try {\n>>> 4847:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert deletion requested for alert: ${alertId}`);\n    4848:     \n    4849:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4852,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert deleted in ${Date.now() - startTime}ms`",
      "context": "    4850:     const deletedAlert = await portfolioAlerts.deletePortfolioAlert(alertId, userId);\n    4851:     \n>>> 4852:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert deleted in ${Date.now() - startTime}ms`);\n    4853:     \n    4854:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4863,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert deletion failed:`",
      "context": "    4861:     \n    4862:   } catch (error) {\n>>> 4863:     console.error(`❌ [${requestId}] Portfolio alert deletion failed:`, error.message);\n    4864:     \n    4865:     const statusCode = error.message.includes('not found') ? 404 : 500;"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4886,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert notifications requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4884:   \n    4885:   try {\n>>> 4886:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert notifications requested for user: ${userId.substring(0, 8)}...`);\n    4887:     \n    4888:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4893,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert notifications retrieved in ${Date.now() - startTime}ms`",
      "context": "    4891:     const notifications = await portfolioAlerts.getPortfolioAlertNotifications(userId, limit);\n    4892:     \n>>> 4893:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert notifications retrieved in ${Date.now() - startTime}ms`);\n    4894:     \n    4895:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4907,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert notifications retrieval failed:`",
      "context": "    4905:     \n    4906:   } catch (error) {\n>>> 4907:     console.error(`❌ [${requestId}] Portfolio alert notifications retrieval failed:`, error.message);\n    4908:     return res.status(500).json({\n    4909:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4928,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert processing requested for user: ${userId.substring(0, 8)}...`",
      "context": "    4926:   \n    4927:   try {\n>>> 4928:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert processing requested for user: ${userId.substring(0, 8)}...`);\n    4929:     \n    4930:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4933,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert processing completed in ${Date.now() - startTime}ms`",
      "context": "    4931:     const result = await portfolioAlerts.processUserPortfolioAlerts(userId);\n    4932:     \n>>> 4933:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert processing completed in ${Date.now() - startTime}ms`);\n    4934:     \n    4935:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4940,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Processed ${result.processedCount} alerts, triggered ${result.triggeredCount} notifications`",
      "context": "    4938:         processedCount: result.processedCount,\n    4939:         triggeredCount: result.triggeredCount,\n>>> 4940:         message: `Processed ${result.processedCount} alerts, triggered ${result.triggeredCount} notifications`\n    4941:       },\n    4942:       timestamp: new Date().toISOString(),"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4947,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert processing failed:`",
      "context": "    4945:     \n    4946:   } catch (error) {\n>>> 4947:     console.error(`❌ [${requestId}] Portfolio alert processing failed:`, error.message);\n    4948:     return res.status(500).json({\n    4949:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4967,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔔 [${requestId}] Portfolio alert types requested`",
      "context": "    4965:   \n    4966:   try {\n>>> 4967:     if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert types requested`);\n    4968:     \n    4969:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 5031,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio alert types retrieved in ${Date.now() - startTime}ms`",
      "context": "    5029:     };\n    5030:     \n>>> 5031:     if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert types retrieved in ${Date.now() - startTime}ms`);\n    5032:     \n    5033:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 5044,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio alert types retrieval failed:`",
      "context": "    5042:     \n    5043:   } catch (error) {\n>>> 5044:     console.error(`❌ [${requestId}] Portfolio alert types retrieval failed:`, error.message);\n    5045:     return res.status(500).json({\n    5046:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 10,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Conditional logging configuration\nconst LOG_LEVEL = process.env.LOG_LEVEL || '",
      "context": "    8: const logger = require('../utils/logger');\n    9: const portfolioAnalytics = require('../utils/portfolioAnalytics');\n>>> 10: const crypto = require('crypto');\n    11: \n    12: // Conditional logging configuration"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 535,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      originalError: process.env.NODE_ENV === '",
      "context": "    533:     res.serverError('Failed to fetch portfolio overview', {\n    534:       requestId,\n>>> 535:       duration: `${errorDuration}ms`,\n    536:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    537:     });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 845,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n          details: process.env.NODE_ENV === '",
      "context": "    843:           error: 'Failed to retrieve API credentials',\n    844:           message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 845:           error_code: 'API_CREDENTIALS_ERROR',\n    846:           details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    847:           request_info: {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 893,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            details: process.env.NODE_ENV === '",
      "context": "    891:             error: 'Failed to initialize trading service',\n    892:             message: 'Unable to connect to your broker. Please verify your API credentials or try again later.',\n>>> 893:             error_code: 'TRADING_SERVICE_INIT_ERROR',\n    894:             details: process.env.NODE_ENV === 'development' ? serviceError.message : 'Service initialization failed',\n    895:             provider: 'alpaca',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 893,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            details: process.env.NODE_ENV === '",
      "context": "    891:             error: 'Failed to initialize trading service',\n    892:             message: 'Unable to connect to your broker. Please verify your API credentials or try again later.',\n>>> 893:             error_code: 'TRADING_SERVICE_INIT_ERROR',\n    894:             details: process.env.NODE_ENV === 'development' ? serviceError.message : 'Service initialization failed',\n    895:             provider: 'alpaca',"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1891,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`, {\n    DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n    AWS_REGION: process.env.AWS_REGION,\n    NODE_ENV: process.env.NODE_ENV\n  });\n\n  try {\n    const { timeframe = '",
      "context": "    1889:   console.log(`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`);\n    1890:   console.log(`📈 [${requestId}] Memory at start:`, process.memoryUsage());\n>>> 1891:   console.log(`📈 [${requestId}] Environment check:`, {\n    1892:     DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n    1893:     AWS_REGION: process.env.AWS_REGION,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 535,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`,\n      originalError: process.env.NODE_ENV === '",
      "context": "    533:     res.serverError('Failed to fetch portfolio overview', {\n    534:       requestId,\n>>> 535:       duration: `${errorDuration}ms`,\n    536:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    537:     });"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3461,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n      requestId,\n      originalError: process.env.NODE_ENV === '",
      "context": "    3459:     });\n    3460:     \n>>> 3461:     res.serverError('Failed to get sync status', {\n    3462:       requestId,\n    3463:       originalError: process.env.NODE_ENV === 'development' ? error.message : undefined"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1177,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "JOIN ${symbolsTable}",
      "context": "    1175:               COALESCE(s.industry, 'Technology') as industry\n    1176:             FROM portfolio_holdings ph\n>>> 1177:             LEFT JOIN ${symbolsTable} s ON ph.symbol = s.symbol  \n    1178:             WHERE ph.user_id = $1 AND ph.quantity > 0\n    1179:             ORDER BY ph.market_value DESC"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2506,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${broker}",
      "context": "    2504:       }\n    2505:     } catch (error) {\n>>> 2506:       console.error(`❌ Failed to fetch portfolio from ${broker}:`, error);\n    2507:       return res.status(500).json({\n    2508:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2506,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${broker}",
      "context": "    2504:       }\n    2505:     } catch (error) {\n>>> 2506:       console.error(`❌ Failed to fetch portfolio from ${broker}:`, error);\n    2507:       return res.status(500).json({\n    2508:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3197,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${returns.length}",
      "context": "    3195:       };\n    3196:       \n>>> 3197:       console.log(`📊 Calculated risk metrics from ${returns.length} days of data`);\n    3198:     } else {\n    3199:       // Use reasonable defaults based on portfolio composition if available"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 726,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit || 100;\n      const offset = req.query.offset || 0;\n      \n      // Get total count for pagination metadata\n      const totalCount = await safeQuery(`",
      "context": "    724:       // Get user's API keys filtered by account type (sandbox for paper, live for live)\n    725:       const isSandbox = accountType === 'paper';\n>>> 726:       const limit = req.query.limit || 100;\n    727:       const offset = req.query.offset || 0;\n    728:       "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1308,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    console.log(`",
      "context": "    1306: router.get('/account', async (req, res) => {\n    1307:   try {\n>>> 1308:     const { accountType = 'paper' } = req.query;\n    1309:     console.log(`Portfolio account info endpoint called for account type: ${accountType}`);\n    1310:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1510,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n  \n    console.log(`",
      "context": "    1508:     }\n    1509:     \n>>> 1510:     const { timeframe = '1y' } = req.query;\n    1511:   \n    1512:     console.log(`Portfolio analytics endpoint called for authenticated user: ${userId}, timeframe: ${timeframe}`);"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1857,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    console.log(`",
      "context": "    1855:     }\n    1856: \n>>> 1857:     const { provider, symbols } = req.body;\n    1858:     console.log(`🚀 Manual data refresh trigger for user: ${userId}`);\n    1859:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1308,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    console.log(`",
      "context": "    1306: router.get('/account', async (req, res) => {\n    1307:   try {\n>>> 1308:     const { accountType = 'paper' } = req.query;\n    1309:     console.log(`Portfolio account info endpoint called for account type: ${accountType}`);\n    1310:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 1308,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    console.log(`",
      "context": "    1306: router.get('/account', async (req, res) => {\n    1307:   try {\n>>> 1308:     const { accountType = 'paper' } = req.query;\n    1309:     console.log(`Portfolio account info endpoint called for account type: ${accountType}`);\n    1310:     "
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2752,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    console.log(`",
      "context": "    2750:     excludeAssets = [],\n    2751:     lookbackDays = 252\n>>> 2752:   } = req.body;\n    2753: \n    2754:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 2752,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    console.log(`",
      "context": "    2750:     excludeAssets = [],\n    2751:     lookbackDays = 252\n>>> 2752:   } = req.body;\n    2753: \n    2754:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3099,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n  try {\n    console.log(`",
      "context": "    3097: router.get('/risk-analysis', async (req, res) => {\n    3098:   const userId = req.user?.sub || 'demo-user';\n>>> 3099:   const { timeHorizon = 1, confidenceLevel = 0.95 } = req.query;\n    3100: \n    3101:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3350,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    console.log(`",
      "context": "    3348:       throw new Error('User authentication required');\n    3349:     }\n>>> 3350:     const { force = false } = req.body;\n    3351:     \n    3352:     console.log(`🔄 [${requestId}] Portfolio sync request initiated`, {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3701,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.riskTolerance || 'moderate',\n      objective: req.query.objective || 'balanced',\n      maxPositionSize: parseFloat(req.query.maxPosition) || 0.25,\n      minPositionSize: parseFloat(req.query.minPosition) || 0.05,\n      rebalanceThreshold: parseFloat(req.query.threshold) || 0.05\n    };\n    \n    // Generate rebalancing recommendations\n    const optimizationResults = await optimizer.optimizePortfolio(holdings, userId, preferences);\n    \n    if (shouldLog('INFO')) console.log(`",
      "context": "    3699:     // Get user preferences or use defaults\n    3700:     const preferences = {\n>>> 3701:       riskTolerance: req.query.riskTolerance || 'moderate',\n    3702:       objective: req.query.objective || 'balanced',\n    3703:       maxPositionSize: parseFloat(req.query.maxPosition) || 0.25,"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 3760,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!trades || !Array.isArray(trades) || trades.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid trades data',\n        message: 'Trades array is required and must contain at least one trade',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Get user's API credentials for trading\n    const apiKey = await getUserApiKey(userId, 'alpaca');\n    if (!apiKey) {\n      return res.status(400).json({\n        success: false,\n        error: 'Alpaca API key required',\n        message: 'Please configure your Alpaca API key in settings to execute trades',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const alpacaService = new AlpacaService(apiKey.apiKey, apiKey.apiSecret, apiKey.isSandbox);\n    \n    // Execute trades (or simulate if dry run)\n    const executionResults = [];\n    let totalEstimatedCost = 0;\n    \n    for (const trade of trades) {\n      try {\n        const result = {\n          symbol: trade.symbol,\n          action: trade.action,\n          quantity: trade.quantity,\n          type: trade.type || 'market',\n          status: 'pending'\n        };\n        \n        if (dryRun) {\n          // Simulate trade execution\n          result.status = 'simulated';\n          result.estimatedPrice = trade.estimatedPrice;\n          result.estimatedCost = trade.quantity * trade.estimatedPrice;\n          totalEstimatedCost += result.estimatedCost;\n        } else {\n          // Execute actual trade\n          const order = await alpacaService.createOrder({\n            symbol: trade.symbol,\n            qty: trade.quantity,\n            side: trade.action,\n            type: trade.type || 'market',\n            time_in_force: trade.timeInForce || 'day'\n          });\n          \n          result.status = 'executed';\n          result.orderId = order.id;\n          result.filledPrice = order.filled_avg_price;\n          result.filledQuantity = order.filled_qty;\n        }\n        \n        executionResults.push(result);\n        \n      } catch (tradeError) {\n        console.error(`",
      "context": "    3758:     if (shouldLog('INFO')) console.log(`🔄 [${requestId}] Portfolio rebalancing execution requested for user: ${userId.substring(0, 8)}...`);\n    3759:     \n>>> 3760:     const { trades, dryRun = true } = req.body;\n    3761:     \n    3762:     if (!trades || !Array.isArray(trades) || trades.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4332,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!csvData || typeof csvData !== 'string') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid CSV data',\n        message: 'CSV data is required as a string',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Parse CSV data\n    const lines = csvData.trim().split('\\n');\n    if (lines.length < 2) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid CSV format',\n        message: 'CSV must contain at least a header and one data row',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const headers = lines[0].split(',').map(h => h.replace(/\"/g, '').trim().toLowerCase());\n    const dataLines = lines.slice(1);\n    \n    // Validate required columns\n    const requiredColumns = ['symbol', 'shares', 'avg_cost'];\n    const missingColumns = requiredColumns.filter(col => !headers.includes(col));\n    \n    if (missingColumns.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required columns',\n        message: `",
      "context": "    4330:     if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio CSV import requested for user: ${userId.substring(0, 8)}...`);\n    4331:     \n>>> 4332:     const { csvData, importMode = 'append' } = req.body;\n    4333:     \n    4334:     if (!csvData || typeof csvData !== 'string') {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4528,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    // Get user's Alpaca API credentials\n    const apiKey = await getUserApiKey(userId, 'alpaca');\n    if (!apiKey) {\n      return res.status(400).json({\n        success: false,\n        error: 'Alpaca API key required',\n        message: 'Please configure your Alpaca API key in settings to import portfolio',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const alpacaService = new AlpacaService(apiKey.apiKey, apiKey.apiSecret, apiKey.isSandbox);\n    \n    // Get positions from Alpaca\n    const positions = await alpacaService.getPositions();\n    \n    if (!positions || positions.length === 0) {\n      return res.json({\n        success: true,\n        data: {\n          summary: {\n            totalPositions: 0,\n            insertedCount: 0,\n            updatedCount: 0,\n            message: 'No positions found in Alpaca account'\n          }\n        },\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - startTime\n      });\n    }\n    \n    // Process positions and update database\n    let insertedCount = 0;\n    let updatedCount = 0;\n    const errors = [];\n    \n    for (const position of positions) {\n      try {\n        const symbol = position.symbol;\n        const shares = parseFloat(position.qty);\n        const avgCost = parseFloat(position.avg_cost);\n        const currentPrice = parseFloat(position.market_value) / shares;\n        const marketValue = parseFloat(position.market_value);\n        const gainLoss = parseFloat(position.unrealized_pl);\n        const gainLossPercent = parseFloat(position.unrealized_plpc) * 100;\n        \n        // Check if position already exists\n        const existingResult = await query(\n          '",
      "context": "    4526:     if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio Alpaca import requested for user: ${userId.substring(0, 8)}...`);\n    4527:     \n>>> 4528:     const { forceRefresh = false } = req.body;\n    4529:     \n    4530:     // Get user's Alpaca API credentials"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4730,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    // Validate required fields\n    if (!alertType || !threshold || !condition) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'alertType, threshold, and condition are required',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const alertConfig = {\n      alertType,\n      symbol,\n      threshold,\n      condition,\n      isActive,\n      notificationPreferences,\n      expiryDate,\n      message\n    };\n    \n    const newAlert = await portfolioAlerts.createPortfolioAlert(userId, alertConfig);\n    \n    if (shouldLog('INFO')) console.log(`",
      "context": "    4728:       expiryDate,\n    4729:       message\n>>> 4730:     } = req.body;\n    4731:     \n    4732:     // Validate required fields"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4786,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.alertId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`",
      "context": "    4784:   const requestId = crypto.randomUUID().split('-')[0];\n    4785:   const userId = req.user.userId;\n>>> 4786:   const alertId = req.params.alertId;\n    4787:   \n    4788:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4798,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const updates = {\n      threshold,\n      condition,\n      isActive,\n      notificationPreferences,\n      expiryDate,\n      message\n    };\n    \n    const updatedAlert = await portfolioAlerts.updatePortfolioAlert(alertId, userId, updates);\n    \n    if (shouldLog('INFO')) console.log(`",
      "context": "    4796:       expiryDate,\n    4797:       message\n>>> 4798:     } = req.body;\n    4799:     \n    4800:     const portfolioAlerts = new PortfolioAlerts();"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4786,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.alertId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`",
      "context": "    4784:   const requestId = crypto.randomUUID().split('-')[0];\n    4785:   const userId = req.user.userId;\n>>> 4786:   const alertId = req.params.alertId;\n    4787:   \n    4788:   try {"
    },
    {
      "file": "webapp/lambda/routes/portfolio.js",
      "line": 4889,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50;\n    \n    const notifications = await portfolioAlerts.getPortfolioAlertNotifications(userId, limit);\n    \n    if (shouldLog('INFO')) console.log(`",
      "context": "    4887:     \n    4888:     const portfolioAlerts = new PortfolioAlerts();\n>>> 4889:     const limit = parseInt(req.query.limit) || 50;\n    4890:     \n    4891:     const notifications = await portfolioAlerts.getPortfolioAlertNotifications(userId, limit);"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 40,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    38:     }\n    39:     \n>>> 40:     whereClause += ` AND symbol = $${paramIndex}`;\n    41:     params.push(symbol.toUpperCase());\n    42:     paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date >= $${paramIndex}`",
      "context": "    44:     // Date filters\n    45:     if (start_date) {\n>>> 46:       whereClause += ` AND date >= $${paramIndex}`;\n    47:       params.push(start_date);\n    48:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 52,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date <= $${paramIndex}`",
      "context": "    50: \n    51:     if (end_date) {\n>>> 52:       whereClause += ` AND date <= $${paramIndex}`;\n    53:       params.push(end_date);\n    54:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 58,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`price_${timeframe}`",
      "context": "    56: \n    57:     // Determine table name based on timeframe\n>>> 58:     const tableName = `price_${timeframe}`;\n    59: \n    60:     // Check if table exists"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 70,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Price data table for ${timeframe} timeframe not found`",
      "context": "    68:     if (!tableExists.rows[0].exists) {\n    69:       return res.status(404).json({ \n>>> 70:         error: `Price data table for ${timeframe} timeframe not found`,\n    71:         availableTimeframes: validTimeframes\n    72:       });"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 76,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total \n      FROM ${tableName} \n      ${whereClause}\n    `",
      "context": "    74: \n    75:     // Get total count for pagination\n>>> 76:     const countQuery = `\n    77:       SELECT COUNT(*) as total \n    78:       FROM ${tableName} "
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 86,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        adj_close,\n        stock_splits,\n        dividends\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY date DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    84: \n    85:     // Main data query with pagination\n>>> 86:     const dataQuery = `\n    87:       SELECT \n    88:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 154,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Price history query successful: ${symbol} ${timeframe} - ${dataResult.rows.length} records`",
      "context": "    152:     };\n    153: \n>>> 154:     console.log(`📊 Price history query successful: ${symbol} ${timeframe} - ${dataResult.rows.length} records`);\n    155:     res.json(response);\n    156: "
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 58,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`price_${timeframe}`",
      "context": "    56: \n    57:     // Determine table name based on timeframe\n>>> 58:     const tableName = `price_${timeframe}`;\n    59: \n    60:     // Check if table exists"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 188,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`WHERE symbol ILIKE $${paramIndex}`",
      "context": "    186:     // Add search filter if provided\n    187:     if (search && search.trim()) {\n>>> 188:       whereClause = `WHERE symbol ILIKE $${paramIndex}`;\n    189:       params.push(`%${search.toUpperCase()}%`);\n    190:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 189,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search.toUpperCase()}%`",
      "context": "    187:     if (search && search.trim()) {\n    188:       whereClause = `WHERE symbol ILIKE $${paramIndex}`;\n>>> 189:       params.push(`%${search.toUpperCase()}%`);\n    190:       paramIndex++;\n    191:     }"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 193,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        COUNT(*) as record_count,\n        MIN(date) as earliest_date,\n        MAX(date) as latest_date,\n        MAX(close) as max_close,\n        MIN(close) as min_close\n      FROM ${tableName}\n      ${whereClause}\n      GROUP BY symbol\n      ORDER BY symbol\n      LIMIT $${paramIndex}\n    `",
      "context": "    191:     }\n    192: \n>>> 193:     const symbolQuery = `\n    194:       SELECT \n    195:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 58,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`price_${timeframe}`",
      "context": "    56: \n    57:     // Determine table name based on timeframe\n>>> 58:     const tableName = `price_${timeframe}`;\n    59: \n    60:     // Check if table exists"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No price data found for symbol ${symbol.toUpperCase()} in ${timeframe} timeframe`",
      "context": "    269:       return res.status(404).json({\n    270:         success: false,\n>>> 271:         error: `No price data found for symbol ${symbol.toUpperCase()} in ${timeframe} timeframe`\n    272:       });\n    273:     }"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 161,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    159:     res.status(500).json({\n    160:       success: false,\n>>> 161:       error: 'Failed to fetch price history data',\n    162:       details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    163:     });"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 161,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    159:     res.status(500).json({\n    160:       success: false,\n>>> 161:       error: 'Failed to fetch price history data',\n    162:       details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    163:     });"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 161,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    159:     res.status(500).json({\n    160:       success: false,\n>>> 161:       error: 'Failed to fetch price history data',\n    162:       details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    163:     });"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 78,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    76:     const countQuery = `\n    77:       SELECT COUNT(*) as total \n>>> 78:       FROM ${tableName} \n    79:       ${whereClause}\n    80:     `;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 78,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    76:     const countQuery = `\n    77:       SELECT COUNT(*) as total \n>>> 78:       FROM ${tableName} \n    79:       ${whereClause}\n    80:     `;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 78,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    76:     const countQuery = `\n    77:       SELECT COUNT(*) as total \n>>> 78:       FROM ${tableName} \n    79:       ${whereClause}\n    80:     `;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 78,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    76:     const countQuery = `\n    77:       SELECT COUNT(*) as total \n>>> 78:       FROM ${tableName} \n    79:       ${whereClause}\n    80:     `;"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 30,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter (required)\n    if (!symbol || !symbol.trim()) {\n      return res.status(400).json({ error: 'Symbol parameter is required' });\n    }\n    \n    whereClause +",
      "context": "    28:     const maxLimit = Math.min(parseInt(limit), 200);\n    29: \n>>> 30:     // Build WHERE clause\n    31:     let whereClause = 'WHERE 1=1';\n    32:     const params = [];"
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 17,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { page = 1, limit = 50, symbol, start_date, end_date } = req.query;\n\n  // Validate timeframe\n  const validTimeframes = ['daily', 'weekly', 'monthly'];\n  if (!validTimeframes.includes(timeframe)) {\n    return res.status(400).json({ error: 'Invalid timeframe. Use daily, weekly, or monthly.' });\n  }\n\n  try {\n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    const maxLimit = Math.min(parseInt(limit), 200);\n\n    // Build WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter (required)\n    if (!symbol || !symbol.trim()) {\n      return res.status(400).json({ error: 'Symbol parameter is required' });\n    }\n    \n    whereClause += `",
      "context": "    15: // Main price history endpoint - timeframe-based (daily, weekly, monthly)\n    16: router.get('/history/:timeframe', async (req, res) => {\n>>> 17:   const { timeframe } = req.params;\n    18:   const { page = 1, limit = 50, symbol, start_date, end_date } = req.query;\n    19: "
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 169,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { search, limit = 100 } = req.query;\n\n  // Validate timeframe\n  const validTimeframes = ['daily', 'weekly', 'monthly'];\n  if (!validTimeframes.includes(timeframe)) {\n    return res.status(400).json({ error: 'Invalid timeframe. Use daily, weekly, or monthly.' });\n  }\n\n  try {\n    const tableName = `",
      "context": "    167: // Get available symbols for a timeframe\n    168: router.get('/symbols/:timeframe', async (req, res) => {\n>>> 169:   const { timeframe } = req.params;\n    170:   const { search, limit = 100 } = req.query;\n    171: "
    },
    {
      "file": "webapp/lambda/routes/price.js",
      "line": 244,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { timeframe = 'daily' } = req.query;\n\n  try {\n    const tableName = `",
      "context": "    242: // Get latest price for a symbol\n    243: router.get('/latest/:symbol', async (req, res) => {\n>>> 244:   const { symbol } = req.params;\n    245:   const { timeframe = 'daily' } = req.query;\n    246: "
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 24,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Real-time data: ${data.type} for ${data.symbol}`",
      "context": "    22:       realTimeService.on('data', (data) => {\n    23:         // Could emit to WebSocket clients here\n>>> 24:         console.log(`📊 Real-time data: ${data.type} for ${data.symbol}`);\n    25:       });\n    26:       "
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 57,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connected to ${successCount}/${totalCount} providers`",
      "context": "    55:     res.json({\n    56:       success: successCount > 0,\n>>> 57:       message: `Connected to ${successCount}/${totalCount} providers`,\n    58:       results,\n    59:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 93,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Subscribed to ${successCount}/${symbols.length} symbols`",
      "context": "    91:     res.json({\n    92:       success: successCount > 0,\n>>> 93:       message: `Subscribed to ${successCount}/${symbols.length} symbols`,\n    94:       results,\n    95:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unsubscribed from ${symbols.length} symbols`",
      "context": "    125:     res.json({\n    126:       success: true,\n>>> 127:       message: `Unsubscribed from ${symbols.length} symbols`,\n    128:       timestamp: new Date().toISOString()\n    129:     });"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No real-time data found for ${symbol}`",
      "context": "    154:         success: false,\n    155:         error: 'No data available',\n>>> 156:         message: `No real-time data found for ${symbol}`,\n    157:         timestamp: new Date().toISOString()\n    158:       });"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 127,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${symbols.length}",
      "context": "    125:     res.json({\n    126:       success: true,\n>>> 127:       message: `Unsubscribed from ${symbols.length} symbols`,\n    128:       timestamp: new Date().toISOString()\n    129:     });"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 39,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!providers || typeof providers !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid providers configuration',\n        message: 'Providers object with API keys required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    const results = await service.connectAllProviders(providers);\n    \n    const successCount = Object.values(results).filter(r => r.success).length;\n    const totalCount = Object.keys(results).length;\n    \n    res.json({\n      success: successCount > 0,\n      message: `",
      "context": "    37: router.post('/connect', async (req, res) => {\n    38:   try {\n>>> 39:     const { providers } = req.body;\n    40:     \n    41:     if (!providers || typeof providers !== 'object') {"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 76,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid symbols',\n        message: 'Array of symbols required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    const results = service.subscribe(symbols, providers);\n    \n    const successCount = Object.values(results).filter(r => r.success).length;\n    \n    res.json({\n      success: successCount > 0,\n      message: `",
      "context": "    74: router.post('/subscribe', async (req, res) => {\n    75:   try {\n>>> 76:     const { symbols, providers } = req.body;\n    77:     \n    78:     if (!symbols || !Array.isArray(symbols)) {"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 112,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid symbols',\n        message: 'Array of symbols required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    service.unsubscribe(symbols, providers);\n    \n    res.json({\n      success: true,\n      message: `",
      "context": "    110: router.post('/unsubscribe', async (req, res) => {\n    111:   try {\n>>> 112:     const { symbols, providers } = req.body;\n    113:     \n    114:     if (!symbols || !Array.isArray(symbols)) {"
    },
    {
      "file": "webapp/lambda/routes/realTimeData.js",
      "line": 145,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { count = 50 } = req.query;\n    \n    const service = getRealTimeService();\n    const lastData = service.getLastData(symbol.toUpperCase());\n    const recentData = service.getRecentData(symbol.toUpperCase(), parseInt(count));\n    \n    if (!lastData && recentData.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No data available',\n        message: `",
      "context": "    143: router.get('/data/:symbol', async (req, res) => {\n    144:   try {\n>>> 145:     const { symbol } = req.params;\n    146:     const { count = 50 } = req.query;\n    147:     "
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 89,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${requestId}] Calculating position size`",
      "context": "    87:     const { symbol, direction, portfolioValue, riskPerTrade = 0.02, maxPositionSize = 0.1 } = req.validated;\n    88:     \n>>> 89:     logger.info(`🎯 [${requestId}] Calculating position size`, {\n    90:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    91:       symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 90,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    88:     \n    89:     logger.info(`🎯 [${requestId}] Calculating position size`, {\n>>> 90:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    91:       symbol: symbol,\n    92:       direction: direction,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Position size calculated`",
      "context": "    144:     const response = responseFormatter.success(responseData, 'Position size calculated successfully');\n    145:     \n>>> 146:     logger.info(`✅ [${requestId}] Position size calculated`, {\n    147:       symbol: symbol,\n    148:       recommendedSize: positionSizing.recommendedSize,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 157,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Position size calculation failed`",
      "context": "    155:     \n    156:   } catch (error) {\n>>> 157:     logger.error(`❌ [${requestId}] Position size calculation failed`, {\n    158:       error: error.message,\n    159:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 181,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🛡️ [${requestId}] Calculating stop loss levels`",
      "context": "    179:     const { symbol, entryPrice, direction } = req.validated;\n    180:     \n>>> 181:     logger.info(`🛡️ [${requestId}] Calculating stop loss levels`, {\n    182:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    183:       symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 90,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    88:     \n    89:     logger.info(`🎯 [${requestId}] Calculating position size`, {\n>>> 90:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    91:       symbol: symbol,\n    92:       direction: direction,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 230,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Stop loss levels calculated`",
      "context": "    228:     const response = responseFormatter.success(responseData, 'Stop loss levels calculated successfully');\n    229:     \n>>> 230:     logger.info(`✅ [${requestId}] Stop loss levels calculated`, {\n    231:       symbol: symbol,\n    232:       stopLoss: stopLossLevels.stopLoss,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 241,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Stop loss calculation failed`",
      "context": "    239:     \n    240:   } catch (error) {\n>>> 241:     logger.error(`❌ [${requestId}] Stop loss calculation failed`, {\n    242:       error: error.message,\n    243:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 264,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Generating portfolio risk analysis`",
      "context": "    262:     const userId = req.user.sub;\n    263:     \n>>> 264:     logger.info(`📊 [${requestId}] Generating portfolio risk analysis`, {\n    265:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    266:     });"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 90,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    88:     \n    89:     logger.info(`🎯 [${requestId}] Calculating position size`, {\n>>> 90:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    91:       symbol: symbol,\n    92:       direction: direction,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 328,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio risk analysis completed`",
      "context": "    326:     const response = responseFormatter.success(responseData, 'Portfolio risk analysis completed successfully');\n    327:     \n>>> 328:     logger.info(`✅ [${requestId}] Portfolio risk analysis completed`, {\n    329:       positionCount: positionCount,\n    330:       portfolioRisk: portfolioRisk,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 338,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Portfolio risk analysis failed`",
      "context": "    336:     \n    337:   } catch (error) {\n>>> 338:     logger.error(`❌ [${requestId}] Portfolio risk analysis failed`, {\n    339:       error: error.message,\n    340:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 360,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚙️ [${requestId}] Fetching risk management settings`",
      "context": "    358:     const userId = req.user.sub;\n    359:     \n>>> 360:     logger.info(`⚙️ [${requestId}] Fetching risk management settings`, {\n    361:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    362:     });"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 90,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    88:     \n    89:     logger.info(`🎯 [${requestId}] Calculating position size`, {\n>>> 90:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    91:       symbol: symbol,\n    92:       direction: direction,"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 415,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving risk settings`",
      "context": "    413:     \n    414:   } catch (error) {\n>>> 415:     logger.error(`❌ [${requestId}] Error retrieving risk settings`, {\n    416:       error: error.message,\n    417:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/risk-management.js",
      "line": 438,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Add ${10 - positionCount} more positions`",
      "context": "    436:       priority: 'high',\n    437:       message: 'Consider adding more positions to improve diversification',\n>>> 438:       target: `Add ${10 - positionCount} more positions`\n    439:     });\n    440:   }"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND ra.severity = $${paramIndex}`",
      "context": "    180:     \n    181:     if (severity !== 'all') {\n>>> 182:       whereClause += ` AND ra.severity = $${paramIndex}`;\n    183:       params.push(severity);\n    184:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 188,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND ra.status = $${paramIndex}`",
      "context": "    186:     \n    187:     if (status !== 'all') {\n>>> 188:       whereClause += ` AND ra.status = $${paramIndex}`;\n    189:       params.push(status);\n    190:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 193,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        ra.id,\n        ra.alert_type,\n        ra.severity,\n        ra.title,\n        ra.description,\n        ra.metric_name,\n        ra.current_value,\n        ra.threshold_value,\n        ra.portfolio_id,\n        ra.symbol,\n        ra.created_at,\n        ra.updated_at,\n        ra.status,\n        ra.acknowledged_at,\n        p.name as portfolio_name\n      FROM risk_alerts ra\n      LEFT JOIN portfolios p ON ra.portfolio_id = p.id\n      ${whereClause}\n      ORDER BY ra.created_at DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    191:     }\n    192:     \n>>> 193:     const result = await query(`\n    194:       SELECT \n    195:         ra.id,"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 218,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM risk_alerts ra\n      ${whereClause}\n    `",
      "context": "    216:     \n    217:     // Get total count\n>>> 218:     const countResult = await query(`\n    219:       SELECT COUNT(*) as total\n    220:       FROM risk_alerts ra"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 511,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE last_updated >= CURRENT_DATE\n      ORDER BY risk_level DESC\n    `);\n    \n    const alertCounts = alertsResult.rows.reduce((acc, row) => {\n      acc[row.severity] = parseInt(row.count);\n      return acc;\n    }, { high: 0, medium: 0, low: 0 });\n    \n    res.json({\n      success: true,\n      data: {\n        portfolios: portfolioRiskResult.rows,\n        alert_counts: alertCounts,\n        market_indicators: marketRiskResult.rows,\n        summary: {\n          total_portfolios: portfolioRiskResult.rows.length,\n          total_alerts: alertsResult.rows.reduce((sum, row) => sum +",
      "context": "    509:         last_updated\n    510:       FROM market_risk_indicators\n>>> 511:       WHERE last_updated >= CURRENT_DATE\n    512:       ORDER BY risk_level DESC\n    513:     `);"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 37,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { timeframe = '1Y', confidence_level = 0.95 } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    35: router.get('/portfolio/:portfolioId', async (req, res) => {\n    36:   try {\n>>> 37:     const { portfolioId } = req.params;\n    38:     const { timeframe = '1Y', confidence_level = 0.95 } = req.query;\n    39:     const userId = req.user.sub;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 77,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { \n      method = 'historical', \n      confidence_level = 0.95, \n      time_horizon = 1,\n      lookback_days = 252\n    } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    75: router.get('/var/:portfolioId', async (req, res) => {\n    76:   try {\n>>> 77:     const { portfolioId } = req.params;\n    78:     const { \n    79:       method = 'historical', "
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 124,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { \n      scenarios = [],\n      shock_magnitude = 0.1,\n      correlation_adjustment = false\n    } = req.body;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    122: router.post('/stress-test/:portfolioId', async (req, res) => {\n    123:   try {\n>>> 124:     const { portfolioId } = req.params;\n    125:     const { \n    126:       scenarios = [],"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 174,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    const userId = req.user.sub;\n    \n    let whereClause = '",
      "context": "    172:       limit = 50,\n    173:       offset = 0\n>>> 174:     } = req.query;\n    175:     const userId = req.user.sub;\n    176:     "
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 246,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    \n    // Verify alert ownership\n    const alertResult = await query(`",
      "context": "    244: router.put('/alerts/:alertId/acknowledge', async (req, res) => {\n    245:   try {\n>>> 246:     const { alertId } = req.params;\n    247:     const userId = req.user.sub;\n    248:     "
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 285,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { lookback_days = 252 } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    283: router.get('/correlation/:portfolioId', async (req, res) => {\n    284:   try {\n>>> 285:     const { portfolioId } = req.params;\n    286:     const { lookback_days = 252 } = req.query;\n    287:     const userId = req.user.sub;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 324,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { attribution_type = 'factor' } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    322: router.get('/attribution/:portfolioId', async (req, res) => {\n    323:   try {\n>>> 324:     const { portfolioId } = req.params;\n    325:     const { attribution_type = 'factor' } = req.query;\n    326:     const userId = req.user.sub;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 363,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    361: router.get('/limits/:portfolioId', async (req, res) => {\n    362:   try {\n>>> 363:     const { portfolioId } = req.params;\n    364:     const userId = req.user.sub;\n    365:     "
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 414,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { limits } = req.body;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`",
      "context": "    412: router.put('/limits/:portfolioId', async (req, res) => {\n    413:   try {\n>>> 414:     const { portfolioId } = req.params;\n    415:     const { limits } = req.body;\n    416:     const userId = req.user.sub;"
    },
    {
      "file": "webapp/lambda/routes/risk.js",
      "line": 546,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body; // 5 minutes default\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    if (portfolio_ids.length > 0) {\n      const portfolioResult = await query(`",
      "context": "    544: router.post('/monitoring/start', async (req, res) => {\n    545:   try {\n>>> 546:     const { portfolio_ids = [], check_interval = 300000 } = req.body; // 5 minutes default\n    547:     const userId = req.user.sub;\n    548:     "
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 41,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`",
      "context": "    39:     if (search) {\n    40:       paramCount++;\n>>> 41:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n    42:       params.push(`%${search}%`);\n    43:     }"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    40:       paramCount++;\n    41:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n>>> 42:       params.push(`%${search}%`);\n    43:     }\n    44: "
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 48,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND s.sector = $${paramCount}`",
      "context": "    46:     if (sector && sector.trim() !== '') {\n    47:       paramCount++;\n>>> 48:       whereClause += ` AND s.sector = $${paramCount}`;\n    49:       params.push(sector);\n    50:     }"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 55,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sc.composite_score >= $${paramCount}`",
      "context": "    53:     if (minScore > 0) {\n    54:       paramCount++;\n>>> 55:       whereClause += ` AND sc.composite_score >= $${paramCount}`;\n    56:       params.push(minScore);\n    57:     }"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sc.composite_score <= $${paramCount}`",
      "context": "    59:     if (maxScore < 100) {\n    60:       paramCount++;\n>>> 61:       whereClause += ` AND sc.composite_score <= $${paramCount}`;\n    62:       params.push(maxScore);\n    63:     }"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 76,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        s.sector,\n        s.industry,\n        s.market_cap,\n        s.current_price,\n        s.trailing_pe,\n        s.price_to_book,\n        \n        -- Main Scores\n        sc.composite_score,\n        sc.quality_score,\n        sc.value_score,\n        sc.growth_score,\n        sc.momentum_score,\n        sc.sentiment_score,\n        sc.positioning_score,\n        \n        -- Sub-scores for detailed analysis\n        sc.earnings_quality_subscore,\n        sc.balance_sheet_subscore,\n        sc.profitability_subscore,\n        sc.management_subscore,\n        sc.multiples_subscore,\n        sc.intrinsic_value_subscore,\n        sc.relative_value_subscore,\n        \n        -- Metadata\n        sc.confidence_score,\n        sc.data_completeness,\n        sc.sector_adjusted_score,\n        sc.percentile_rank,\n        sc.created_at as score_date,\n        sc.updated_at as last_updated\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN stock_scores sc ON ss.symbol = sc.symbol \n        AND sc.date = (\n          SELECT MAX(date) \n          FROM stock_scores sc2 \n          WHERE sc2.symbol = ss.symbol\n        )\n      ${whereClause}\n      AND sc.composite_score IS NOT NULL\n      ORDER BY ${safeSort} ${safeOrder}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    74:     \n    75:     // Main query to get stocks with scores\n>>> 76:     const stocksQuery = `\n    77:       SELECT \n    78:         ss.symbol,"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(DISTINCT ss.symbol) as total\n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN stock_scores sc ON ss.symbol = sc.symbol \n        AND sc.date = (\n          SELECT MAX(date) \n          FROM stock_scores sc2 \n          WHERE sc2.symbol = ss.symbol\n        )\n      ${whereClause}\n      AND sc.composite_score IS NOT NULL\n    `",
      "context": "    130: \n    131:     // Get total count for pagination\n>>> 132:     const countQuery = `\n    133:       SELECT COUNT(DISTINCT ss.symbol) as total\n    134:       FROM stock_symbols ss"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Getting detailed scores for ${symbol}`",
      "context": "    323:   try {\n    324:     const symbol = req.params.symbol.toUpperCase();\n>>> 325:     console.log(`Getting detailed scores for ${symbol}`);\n    326: \n    327:     // Get latest scores with historical data"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 619,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${category}_score`",
      "context": "    617:     }\n    618: \n>>> 619:     const scoreColumn = category === 'composite' ? 'composite_score' : `${category}_score`;\n    620: \n    621:     const topStocksQuery = `"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 34,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause +",
      "context": "    32:     const sortOrder = req.query.sortOrder || 'desc';\n    33:     \n>>> 34:     let whereClause = 'WHERE 1=1';\n    35:     const params = [];\n    36:     let paramCount = 0;"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 22,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const minScore = parseFloat(req.query.minScore) || 0;\n    const maxScore = parseFloat(req.query.maxScore) || 100;\n    const sortBy = req.query.sortBy || 'composite_score';\n    const sortOrder = req.query.sortOrder || 'desc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += `",
      "context": "    20: router.get('/', async (req, res) => {\n    21:   try {\n>>> 22:     console.log('Scores endpoint called with params:', req.query);\n    23:     \n    24:     const page = parseInt(req.query.page) || 1;"
    },
    {
      "file": "webapp/lambda/routes/scores.js",
      "line": 324,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbol.toUpperCase();\n    console.log(`",
      "context": "    322: router.get('/:symbol', async (req, res) => {\n    323:   try {\n>>> 324:     const symbol = req.params.symbol.toUpperCase();\n    325:     console.log(`Getting detailed scores for ${symbol}`);\n    326: "
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 172,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND se.sector = $${paramCount}`",
      "context": "    170:     if (sector) {\n    171:       paramCount++;\n>>> 172:       whereClause += ` AND se.sector = $${paramCount}`;\n    173:       params.push(sector);\n    174:     }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 178,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND se.market_cap_tier = $${paramCount}`",
      "context": "    176:     if (marketCapTier) {\n    177:       paramCount++;\n>>> 178:       whereClause += ` AND se.market_cap_tier = $${paramCount}`;\n    179:       params.push(marketCapTier);\n    180:     }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT cs.*, se.company_name, se.sector, se.market_cap, se.market_cap_tier\n      FROM comprehensive_scores cs\n      JOIN stock_symbols_enhanced se ON cs.symbol = se.symbol\n      ${whereClause}\n      AND cs.updated_at > NOW() - INTERVAL '24 hours'\n      ORDER BY cs.composite_score DESC\n      LIMIT ${limit}\n    `",
      "context": "    180:     }\n    181:     \n>>> 182:     const topStocks = await query(`\n    183:       SELECT cs.*, se.company_name, se.sector, se.market_cap, se.market_cap_tier\n    184:       FROM comprehensive_scores cs"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 279,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No basic info found for ${symbol}`",
      "context": "    277:     \n    278:     if (!basicInfo) {\n>>> 279:       console.log(`No basic info found for ${symbol}`);\n    280:       return null;\n    281:     }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 315,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error calculating scores for ${symbol}:`",
      "context": "    313:     \n    314:   } catch (error) {\n>>> 315:     console.error(`Error calculating scores for ${symbol}:`, error);\n    316:     return null;\n    317:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 943,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting basic info for ${symbol}:`",
      "context": "    941:     return result.length > 0 ? result[0] : null;\n    942:   } catch (error) {\n>>> 943:     console.error(`Error getting basic info for ${symbol}:`, error);\n    944:     return null;\n    945:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 967,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting financial metrics for ${symbol}:`",
      "context": "    965:     return Object.keys(combined).length > 0 ? combined : null;\n    966:   } catch (error) {\n>>> 967:     console.error(`Error getting financial metrics for ${symbol}:`, error);\n    968:     return null;\n    969:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 982,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting momentum metrics for ${symbol}:`",
      "context": "    980:     return result.length > 0 ? result[0] : null;\n    981:   } catch (error) {\n>>> 982:     console.error(`Error getting momentum metrics for ${symbol}:`, error);\n    983:     return null;\n    984:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 997,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting positioning metrics for ${symbol}:`",
      "context": "    995:     return result.length > 0 ? result[0] : null;\n    996:   } catch (error) {\n>>> 997:     console.error(`Error getting positioning metrics for ${symbol}:`, error);\n    998:     return null;\n    999:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 1012,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting realtime sentiment for ${symbol}:`",
      "context": "    1010:     return result.length > 0 ? result[0] : null;\n    1011:   } catch (error) {\n>>> 1012:     console.error(`Error getting realtime sentiment for ${symbol}:`, error);\n    1013:     return null;\n    1014:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 1027,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting technical indicators for ${symbol}:`",
      "context": "    1025:     return result.length > 0 ? result[0] : null;\n    1026:   } catch (error) {\n>>> 1027:     console.error(`Error getting technical indicators for ${symbol}:`, error);\n    1028:     return null;\n    1029:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 1045,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting sentiment data for ${symbol}:`",
      "context": "    1043:     return Object.keys(combined).length > 0 ? combined : null;\n    1044:   } catch (error) {\n>>> 1045:     console.error(`Error getting sentiment data for ${symbol}:`, error);\n    1046:     return null;\n    1047:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 1089,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error storing scores for ${symbol}:`",
      "context": "    1087:     ]);\n    1088:   } catch (error) {\n>>> 1089:     console.error(`Error storing scores for ${symbol}:`, error);\n    1090:     throw error;\n    1091:   }"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 18,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbol.toUpperCase();\n    const forceRecalculate = req.query.recalculate === 'true';\n    \n    // Check if we have recent scores unless forcing recalculation\n    if (!forceRecalculate) {\n      const existingScore = await query(`",
      "context": "    16: router.get('/calculate/:symbol', async (req, res) => {\n    17:   try {\n>>> 18:     const symbol = req.params.symbol.toUpperCase();\n    19:     const forceRecalculate = req.query.recalculate === 'true';\n    20:     "
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 72,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'symbols array is required'\n      });\n    }\n    \n    if (symbols.length > 50) {\n      return res.status(400).json({\n        success: false,\n        error: 'Maximum 50 symbols per batch'\n      });\n    }\n    \n    const results = [];\n    const errors = [];\n    \n    for (const symbol of symbols) {\n      try {\n        const symbolUpper = symbol.toUpperCase();\n        \n        // Check cache first unless forcing recalculation\n        let scores = null;\n        if (!forceRecalculate) {\n          const existingScore = await query(`",
      "context": "    70: router.post('/calculate/batch', async (req, res) => {\n    71:   try {\n>>> 72:     const { symbols, forceRecalculate = false } = req.body;\n    73:     \n    74:     if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/scoring.js",
      "line": 161,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 50, 200);\n    const sector = req.query.sector;\n    const marketCapTier = req.query.marketCapTier;\n    const minScore = parseFloat(req.query.minScore) || 0;\n    \n    let whereClause = '",
      "context": "    159: router.get('/top', async (req, res) => {\n    160:   try {\n>>> 161:     const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    162:     const sector = req.query.sector;\n    163:     const marketCapTier = req.query.marketCapTier;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 49,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`sd.close >= $${paramIndex}`",
      "context": "    47:     // Price filters\n    48:     if (filters.priceMin) {\n>>> 49:       whereConditions.push(`sd.close >= $${paramIndex}`);\n    50:       params.push(parseFloat(filters.priceMin));\n    51:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 54,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`sd.close <= $${paramIndex}`",
      "context": "    52:     }\n    53:     if (filters.priceMax) {\n>>> 54:       whereConditions.push(`sd.close <= $${paramIndex}`);\n    55:       params.push(parseFloat(filters.priceMax));\n    56:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.market_cap >= $${paramIndex}`",
      "context": "    59:     // Market cap filters\n    60:     if (filters.marketCapMin) {\n>>> 61:       whereConditions.push(`s.market_cap >= $${paramIndex}`);\n    62:       params.push(parseFloat(filters.marketCapMin));\n    63:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.market_cap <= $${paramIndex}`",
      "context": "    64:     }\n    65:     if (filters.marketCapMax) {\n>>> 66:       whereConditions.push(`s.market_cap <= $${paramIndex}`);\n    67:       params.push(parseFloat(filters.marketCapMax));\n    68:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.pe_ratio >= $${paramIndex}`",
      "context": "    71:     // Valuation filters\n    72:     if (filters.peRatioMin) {\n>>> 73:       whereConditions.push(`s.pe_ratio >= $${paramIndex}`);\n    74:       params.push(parseFloat(filters.peRatioMin));\n    75:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.pe_ratio <= $${paramIndex}`",
      "context": "    76:     }\n    77:     if (filters.peRatioMax) {\n>>> 78:       whereConditions.push(`s.pe_ratio <= $${paramIndex}`);\n    79:       params.push(parseFloat(filters.peRatioMax));\n    80:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.peg_ratio >= $${paramIndex}`",
      "context": "    82: \n    83:     if (filters.pegRatioMin) {\n>>> 84:       whereConditions.push(`s.peg_ratio >= $${paramIndex}`);\n    85:       params.push(parseFloat(filters.pegRatioMin));\n    86:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 89,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.peg_ratio <= $${paramIndex}`",
      "context": "    87:     }\n    88:     if (filters.pegRatioMax) {\n>>> 89:       whereConditions.push(`s.peg_ratio <= $${paramIndex}`);\n    90:       params.push(parseFloat(filters.pegRatioMax));\n    91:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 95,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.pb_ratio >= $${paramIndex}`",
      "context": "    93: \n    94:     if (filters.pbRatioMin) {\n>>> 95:       whereConditions.push(`s.pb_ratio >= $${paramIndex}`);\n    96:       params.push(parseFloat(filters.pbRatioMin));\n    97:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 100,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.pb_ratio <= $${paramIndex}`",
      "context": "    98:     }\n    99:     if (filters.pbRatioMax) {\n>>> 100:       whereConditions.push(`s.pb_ratio <= $${paramIndex}`);\n    101:       params.push(parseFloat(filters.pbRatioMax));\n    102:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 107,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.roe >= $${paramIndex}`",
      "context": "    105:     // Profitability filters\n    106:     if (filters.roeMin) {\n>>> 107:       whereConditions.push(`s.roe >= $${paramIndex}`);\n    108:       params.push(parseFloat(filters.roeMin) / 100);\n    109:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 112,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.roe <= $${paramIndex}`",
      "context": "    110:     }\n    111:     if (filters.roeMax) {\n>>> 112:       whereConditions.push(`s.roe <= $${paramIndex}`);\n    113:       params.push(parseFloat(filters.roeMax) / 100);\n    114:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 118,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.roa >= $${paramIndex}`",
      "context": "    116: \n    117:     if (filters.roaMin) {\n>>> 118:       whereConditions.push(`s.roa >= $${paramIndex}`);\n    119:       params.push(parseFloat(filters.roaMin) / 100);\n    120:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 123,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.roa <= $${paramIndex}`",
      "context": "    121:     }\n    122:     if (filters.roaMax) {\n>>> 123:       whereConditions.push(`s.roa <= $${paramIndex}`);\n    124:       params.push(parseFloat(filters.roaMax) / 100);\n    125:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 129,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.net_margin >= $${paramIndex}`",
      "context": "    127: \n    128:     if (filters.netMarginMin) {\n>>> 129:       whereConditions.push(`s.net_margin >= $${paramIndex}`);\n    130:       params.push(parseFloat(filters.netMarginMin) / 100);\n    131:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 134,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.net_margin <= $${paramIndex}`",
      "context": "    132:     }\n    133:     if (filters.netMarginMax) {\n>>> 134:       whereConditions.push(`s.net_margin <= $${paramIndex}`);\n    135:       params.push(parseFloat(filters.netMarginMax) / 100);\n    136:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 141,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.revenue_growth >= $${paramIndex}`",
      "context": "    139:     // Growth filters\n    140:     if (filters.revenueGrowthMin) {\n>>> 141:       whereConditions.push(`s.revenue_growth >= $${paramIndex}`);\n    142:       params.push(parseFloat(filters.revenueGrowthMin) / 100);\n    143:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.revenue_growth <= $${paramIndex}`",
      "context": "    144:     }\n    145:     if (filters.revenueGrowthMax) {\n>>> 146:       whereConditions.push(`s.revenue_growth <= $${paramIndex}`);\n    147:       params.push(parseFloat(filters.revenueGrowthMax) / 100);\n    148:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.earnings_growth >= $${paramIndex}`",
      "context": "    150: \n    151:     if (filters.earningsGrowthMin) {\n>>> 152:       whereConditions.push(`s.earnings_growth >= $${paramIndex}`);\n    153:       params.push(parseFloat(filters.earningsGrowthMin) / 100);\n    154:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 157,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.earnings_growth <= $${paramIndex}`",
      "context": "    155:     }\n    156:     if (filters.earningsGrowthMax) {\n>>> 157:       whereConditions.push(`s.earnings_growth <= $${paramIndex}`);\n    158:       params.push(parseFloat(filters.earningsGrowthMax) / 100);\n    159:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 164,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.dividend_yield >= $${paramIndex}`",
      "context": "    162:     // Dividend filters\n    163:     if (filters.dividendYieldMin) {\n>>> 164:       whereConditions.push(`s.dividend_yield >= $${paramIndex}`);\n    165:       params.push(parseFloat(filters.dividendYieldMin) / 100);\n    166:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.dividend_yield <= $${paramIndex}`",
      "context": "    167:     }\n    168:     if (filters.dividendYieldMax) {\n>>> 169:       whereConditions.push(`s.dividend_yield <= $${paramIndex}`);\n    170:       params.push(parseFloat(filters.dividendYieldMax) / 100);\n    171:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ss.sector = $${paramIndex}`",
      "context": "    174:     // Sector filter\n    175:     if (filters.sector) {\n>>> 176:       whereConditions.push(`ss.sector = $${paramIndex}`);\n    177:       params.push(filters.sector);\n    178:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 183,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ss.exchange = $${paramIndex}`",
      "context": "    181:     // Exchange filter\n    182:     if (filters.exchange) {\n>>> 183:       whereConditions.push(`ss.exchange = $${paramIndex}`);\n    184:       params.push(filters.exchange);\n    185:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`td.rsi >= $${paramIndex}`",
      "context": "    188:     // Technical filters\n    189:     if (filters.rsiMin) {\n>>> 190:       whereConditions.push(`td.rsi >= $${paramIndex}`);\n    191:       params.push(parseFloat(filters.rsiMin));\n    192:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 195,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`td.rsi <= $${paramIndex}`",
      "context": "    193:     }\n    194:     if (filters.rsiMax) {\n>>> 195:       whereConditions.push(`td.rsi <= $${paramIndex}`);\n    196:       params.push(parseFloat(filters.rsiMax));\n    197:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 201,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`sd.volume >= $${paramIndex}`",
      "context": "    199: \n    200:     if (filters.volumeMin) {\n>>> 201:       whereConditions.push(`sd.volume >= $${paramIndex}`);\n    202:       params.push(parseFloat(filters.volumeMin));\n    203:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 208,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.beta >= $${paramIndex}`",
      "context": "    206:     // Beta filter\n    207:     if (filters.betaMin) {\n>>> 208:       whereConditions.push(`s.beta >= $${paramIndex}`);\n    209:       params.push(parseFloat(filters.betaMin));\n    210:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 213,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.beta <= $${paramIndex}`",
      "context": "    211:     }\n    212:     if (filters.betaMax) {\n>>> 213:       whereConditions.push(`s.beta <= $${paramIndex}`);\n    214:       params.push(parseFloat(filters.betaMax));\n    215:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.factor_score >= $${paramIndex}`",
      "context": "    218:     // Factor score filter\n    219:     if (filters.factorScoreMin) {\n>>> 220:       whereConditions.push(`s.factor_score >= $${paramIndex}`);\n    221:       params.push(parseFloat(filters.factorScoreMin));\n    222:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 259,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ORDER BY ${dbField} ${sortOrder}`",
      "context": "    257: \n    258:       const dbField = fieldMap[sortField] || 's.market_cap';\n>>> 259:       orderBy = `ORDER BY ${dbField} ${sortOrder}`;\n    260:     }\n    261: "
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 263,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        s.symbol,\n        ss.company_name,\n        ss.sector,\n        ss.exchange,\n        sd.close as price,\n        sd.volume,\n        sd.date as price_date,\n        s.market_cap,\n        s.pe_ratio,\n        s.peg_ratio,\n        s.pb_ratio,\n        s.ps_ratio,\n        s.roe,\n        s.roa,\n        s.gross_margin,\n        s.operating_margin,\n        s.net_margin,\n        s.revenue_growth,\n        s.earnings_growth,\n        s.eps_growth,\n        s.dividend_yield,\n        s.payout_ratio,\n        s.debt_to_equity,\n        s.current_ratio,\n        s.quick_ratio,\n        s.interest_coverage,\n        s.asset_turnover,\n        s.inventory_turnover,\n        s.beta,\n        s.factor_score,\n        td.rsi,\n        td.macd,\n        td.macd_signal,\n        td.sma_20,\n        td.sma_50,\n        td.sma_200,\n        td.price_momentum_3m,\n        td.price_momentum_12m,\n        (sd.close - LAG(sd.close, 1) OVER (PARTITION BY s.symbol ORDER BY sd.date)) / LAG(sd.close, 1) OVER (PARTITION BY s.symbol ORDER BY sd.date) * 100 as price_change_percent\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM technicals_daily\n        ORDER BY symbol, date DESC\n      ) td ON s.symbol = td.symbol\n      ${whereClause}\n      ${orderBy}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    261: \n    262:     // Main query\n>>> 263:     const mainQuery = `\n    264:       SELECT \n    265:         s.symbol,"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 324,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM technicals_daily\n        ORDER BY symbol, date DESC\n      ) td ON s.symbol = td.symbol\n      ${whereClause}\n    `",
      "context": "    322: \n    323:     // Count query\n>>> 324:     const countQuery = `\n    325:       SELECT COUNT(*) as total\n    326:       FROM symbols s"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 361,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error calculating factor score for ${stock.symbol}:`",
      "context": "    359:             stock.recommendation = scoreData.recommendation;\n    360:           } catch (error) {\n>>> 361:             console.error(`Error calculating factor score for ${stock.symbol}:`, error);\n    362:             stock.factor_score = 50;\n    363:             stock.factor_grade = 'C';"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 894,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${screens.length} saved screens for user ${userId}`",
      "context": "    892:       }));\n    893: \n>>> 894:       console.log(`✅ Found ${screens.length} saved screens for user ${userId}`);\n    895: \n    896:       res.json({"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 935,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`'${s}'`",
      "context": "    933: \n    934:     // Get detailed data for symbols\n>>> 935:     const symbolsStr = symbols.map(s => `'${s}'`).join(',');\n    936:     const result = await query(`\n    937:       SELECT "
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 936,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        s.symbol,\n        ss.company_name,\n        ss.sector,\n        sd.close as price,\n        s.market_cap,\n        s.pe_ratio,\n        s.pb_ratio,\n        s.roe,\n        s.roa,\n        s.revenue_growth,\n        s.earnings_growth,\n        s.dividend_yield,\n        s.factor_score\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      WHERE s.symbol IN (${symbolsStr})\n      ORDER BY s.market_cap DESC\n    `",
      "context": "    934:     // Get detailed data for symbols\n    935:     const symbolsStr = symbols.map(s => `'${s}'`).join(',');\n>>> 936:     const result = await query(`\n    937:       SELECT \n    938:         s.symbol,"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 985,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`attachment; filename=stock_screen_${new Date().toISOString().split('T')[0]}.csv`",
      "context": "    983:       res.set({\n    984:         'Content-Type': 'text/csv',\n>>> 985:         'Content-Disposition': `attachment; filename=stock_screen_${new Date().toISOString().split('T')[0]}.csv`\n    986:       });\n    987:       res.send(csvContent);"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 1196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`mock-${Date.now()}`",
      "context": "    1194:       // Return mock success response\n    1195:       const mockWatchlist = {\n>>> 1196:         id: `mock-${Date.now()}`,\n    1197:         name,\n    1198:         description,"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 225,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause\n    let whereClause = '';\n    if (whereConditions.length > 0) {\n      whereClause = 'WHERE ' +",
      "context": "    223:     }\n    224: \n>>> 225:     // Build WHERE clause\n    226:     let whereClause = '';\n    227:     if (whereConditions.length > 0) {"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 35,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    const page = parseInt(filters.page) || 1;\n    const limit = Math.min(parseInt(filters.limit) || 50, 500);\n    const offset = (page - 1) * limit;\n\n    console.log('Stock screening with filters:', filters);\n\n    // Build WHERE clause dynamically\n    const whereConditions = [];\n    const params = [];\n    let paramIndex = 1;\n\n    // Price filters\n    if (filters.priceMin) {\n      whereConditions.push(`",
      "context": "    33: router.get('/screen', async (req, res) => {\n    34:   try {\n>>> 35:     const filters = req.query;\n    36:     const page = parseInt(filters.page) || 1;\n    37:     const limit = Math.min(parseInt(filters.limit) || 50, 500);"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 673,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    // Mock screener results for ServiceHealth testing\n    const mockResults = [\n      {\n        symbol: 'AAPL',\n        company_name: 'Apple Inc.',\n        sector: 'Technology',\n        price: 175.50,\n        market_cap: 2750000000000,\n        pe_ratio: 28.5,\n        peg_ratio: 1.8,\n        pb_ratio: 39.2,\n        roe: 0.96,\n        roa: 0.22,\n        revenue_growth: 0.08,\n        earnings_growth: 0.12,\n        dividend_yield: 0.005,\n        factor_score: 85,\n        factor_grade: 'A',\n        recommendation: 'Buy'\n      },\n      {\n        symbol: 'MSFT',\n        company_name: 'Microsoft Corporation',\n        sector: 'Technology',\n        price: 310.25,\n        market_cap: 2300000000000,\n        pe_ratio: 32.1,\n        peg_ratio: 1.9,\n        pb_ratio: 12.8,\n        roe: 0.47,\n        roa: 0.18,\n        revenue_growth: 0.11,\n        earnings_growth: 0.15,\n        dividend_yield: 0.007,\n        factor_score: 82,\n        factor_grade: 'A',\n        recommendation: 'Buy'\n      },\n      {\n        symbol: 'GOOGL',\n        company_name: 'Alphabet Inc.',\n        sector: 'Technology',\n        price: 125.75,\n        market_cap: 1570000000000,\n        pe_ratio: 24.8,\n        peg_ratio: 1.2,\n        pb_ratio: 5.9,\n        roe: 0.26,\n        roa: 0.14,\n        revenue_growth: 0.07,\n        earnings_growth: 0.09,\n        dividend_yield: 0.000,\n        factor_score: 78,\n        factor_grade: 'B+',\n        recommendation: 'Buy'\n      }\n    ];\n\n    // Apply pagination\n    const paginatedResults = mockResults.slice(\n      parseInt(offset), \n      parseInt(offset) + parseInt(limit)\n    );\n\n    res.json({\n      success: true,\n      data: {\n        stocks: paginatedResults,\n        pagination: {\n          total: mockResults.length,\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          hasMore: parseInt(offset) + parseInt(limit) < mockResults.length\n        },\n        filters: {\n          applied: 0,\n          total: 0\n        },\n        source: 'mock_data'\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ Error in screener results:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch screener results',\n      details: error.message\n    });\n  }\n});\n\n// Apply preset screen\nrouter.post('/presets/:presetId/apply', (req, res) => {\n  const { presetId } = req.params;\n  \n  const presets = {\n    value_stocks: {\n      peRatioMax: 15,\n      pbRatioMax: 1.5,\n      roeMin: 10,\n      debtToEquityMax: 0.5,\n      marketCapMin: 1000000000\n    },\n    growth_stocks: {\n      revenueGrowthMin: 15,\n      earningsGrowthMin: 20,\n      pegRatioMax: 2,\n      marketCapMin: 2000000000\n    },\n    dividend_stocks: {\n      dividendYieldMin: 3,\n      payoutRatioMax: 60,\n      debtToEquityMax: 0.8,\n      marketCapMin: 5000000000\n    },\n    momentum_stocks: {\n      priceMomentum3mMin: 5,\n      priceMomentum12mMin: 10,\n      rsiMin: 50,\n      rsiMax: 80,\n      volumeMin: 500000\n    },\n    quality_stocks: {\n      roeMin: 15,\n      roaMin: 8,\n      netMarginMin: 10,\n      debtToEquityMax: 0.3,\n      currentRatioMin: 1.5,\n      factorScoreMin: 70\n    },\n    small_cap_growth: {\n      marketCapMin: 300000000,\n      marketCapMax: 2000000000,\n      revenueGrowthMin: 20,\n      earningsGrowthMin: 25,\n      pegRatioMax: 1.5\n    }\n  };\n\n  const preset = presets[presetId];\n  if (!preset) {\n    return res.status(404).json({\n      success: false,\n      error: 'Preset not found'\n    });\n  }\n\n  res.json({\n    success: true,\n    data: {\n      presetId,\n      filters: preset\n    }\n  });\n});\n\n// Save custom screen\nrouter.post('/screens/save', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { name, description, filters } = req.body;\n\n    if (!name || !filters) {\n      return res.status(400).json({\n        success: false,\n        error: 'Name and filters are required'\n      });\n    }\n\n    const result = await query(`",
      "context": "    671:       offset = 0,\n    672:       filters = '{}' \n>>> 673:     } = req.query;\n    674: \n    675:     // Mock screener results for ServiceHealth testing"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 925,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No symbols provided for export'\n      });\n    }\n\n    // Get detailed data for symbols\n    const symbolsStr = symbols.map(s => `'",
      "context": "    923: router.post('/export', async (req, res) => {\n    924:   try {\n>>> 925:     const { symbols, format = 'csv' } = req.body;\n    926: \n    927:     if (!symbols || symbols.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/screener.js",
      "line": 1156,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    if (!name) {\n      return res.status(400).json({\n        success: false,\n        error: 'Watchlist name is required'\n      });\n    }\n\n    try {\n      // Try to save to database\n      const filters = { symbols }; // Store symbols as filters for compatibility\n      \n      const result = await query(`",
      "context": "    1154:   try {\n    1155:     const userId = req.user.sub;\n>>> 1156:     const { name, description, symbols = [] } = req.body;\n    1157: \n    1158:     if (!name) {"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 52,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            WITH latest_prices AS (\n                SELECT DISTINCT ON (symbol) \n                    symbol,\n                    date,\n                    close as current_price,\n                    volume,\n                    (close - LAG(close, 1) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 1) OVER (PARTITION BY symbol ORDER BY date) * 100 as daily_change_pct,\n                    (close - LAG(close, 5) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 5) OVER (PARTITION BY symbol ORDER BY date) * 100 as weekly_change_pct,\n                    (close - LAG(close, 22) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 22) OVER (PARTITION BY symbol ORDER BY date) * 100 as monthly_change_pct\n                FROM price_${timeframe}\n                WHERE date >= CURRENT_DATE - INTERVAL '6 months'\n                ORDER BY symbol, date DESC\n            ),\n            latest_technicals AS (\n                SELECT DISTINCT ON (symbol)\n                    symbol,\n                    date,\n                    rsi,\n                    momentum,\n                    macd,\n                    macd_signal,\n                    volume as tech_volume,\n                    sma_20,\n                    sma_50,\n                    CASE \n                        WHEN close > sma_20 AND sma_20 > sma_50 THEN 'bullish'\n                        WHEN close < sma_20 AND sma_20 < sma_50 THEN 'bearish'\n                        ELSE 'neutral'\n                    END as trend\n                FROM technical_data_${timeframe}\n                WHERE date >= CURRENT_DATE - INTERVAL '3 months'\n                ORDER BY symbol, date DESC\n            ),\n            momentum_data AS (\n                SELECT DISTINCT ON (symbol)\n                    symbol,\n                    jt_momentum_12_1,\n                    momentum_3m,\n                    momentum_6m,\n                    risk_adjusted_momentum,\n                    momentum_strength,\n                    volume_weighted_momentum\n                FROM momentum_metrics\n                WHERE date >= CURRENT_DATE - INTERVAL '1 month'\n                ORDER BY symbol, date DESC\n            ),\n            sector_summary AS (\n                SELECT \n                    s.sector,\n                    s.industry,\n                    COUNT(*) as stock_count,\n                    COUNT(lp.symbol) as priced_stocks,\n                    AVG(lp.current_price) as avg_price,\n                    AVG(lp.daily_change_pct) as avg_daily_change,\n                    AVG(lp.weekly_change_pct) as avg_weekly_change,\n                    AVG(lp.monthly_change_pct) as avg_monthly_change,\n                    AVG(lp.volume) as avg_volume,\n                    \n                    -- Technical indicators\n                    AVG(lt.rsi) as avg_rsi,\n                    AVG(lt.momentum) as avg_momentum,\n                    AVG(lt.macd) as avg_macd,\n                    \n                    -- Momentum metrics\n                    AVG(md.jt_momentum_12_1) as avg_jt_momentum,\n                    AVG(md.momentum_3m) as avg_momentum_3m,\n                    AVG(md.momentum_6m) as avg_momentum_6m,\n                    AVG(md.risk_adjusted_momentum) as avg_risk_adj_momentum,\n                    AVG(md.momentum_strength) as avg_momentum_strength,\n                    AVG(md.volume_weighted_momentum) as avg_volume_momentum,\n                    \n                    -- Trend analysis\n                    COUNT(CASE WHEN lt.trend = 'bullish' THEN 1 END) as bullish_stocks,\n                    COUNT(CASE WHEN lt.trend = 'bearish' THEN 1 END) as bearish_stocks,\n                    COUNT(CASE WHEN lt.trend = 'neutral' THEN 1 END) as neutral_stocks,\n                    \n                    -- Market cap estimates (based on volume as proxy)\n                    SUM(lp.current_price * lp.volume) as total_dollar_volume,\n                    \n                    -- Performance ranking\n                    RANK() OVER (ORDER BY AVG(lp.monthly_change_pct) DESC) as performance_rank\n                    \n                FROM symbols s\n                LEFT JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol  \n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL \n                    AND s.sector != ''\n                    AND s.industry IS NOT NULL\n                    AND s.industry != ''\n                GROUP BY s.sector, s.industry\n                HAVING COUNT(lp.symbol) >= 3  -- Only include sectors/industries with at least 3 priced stocks\n            ),\n            top_performers AS (\n                SELECT \n                    s.sector,\n                    s.ticker,\n                    s.short_name,\n                    lp.current_price,\n                    lp.monthly_change_pct,\n                    lt.momentum as current_momentum,\n                    md.jt_momentum_12_1,\n                    ROW_NUMBER() OVER (PARTITION BY s.sector ORDER BY lp.monthly_change_pct DESC) as sector_rank\n                FROM symbols s\n                INNER JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol\n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL AND lp.monthly_change_pct IS NOT NULL\n            ),\n            bottom_performers AS (\n                SELECT \n                    s.sector,\n                    s.ticker,\n                    s.short_name,\n                    lp.current_price,\n                    lp.monthly_change_pct,\n                    lt.momentum as current_momentum,\n                    md.jt_momentum_12_1,\n                    ROW_NUMBER() OVER (PARTITION BY s.sector ORDER BY lp.monthly_change_pct ASC) as sector_rank\n                FROM symbols s\n                INNER JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol\n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL AND lp.monthly_change_pct IS NOT NULL\n            )\n            \n            SELECT \n                ss.*,\n                \n                -- Top 3 performers in each sector\n                JSON_AGG(\n                    CASE WHEN tp.sector_rank <= 3 THEN \n                        JSON_BUILD_OBJECT(\n                            'symbol', tp.ticker,\n                            'name', tp.short_name,\n                            'price', tp.current_price,\n                            'monthly_return', tp.monthly_change_pct,\n                            'momentum', tp.current_momentum,\n                            'jt_momentum', tp.jt_momentum_12_1\n                        )\n                    END\n                ) FILTER (WHERE tp.sector_rank <= 3) as top_performers,\n                \n                -- Bottom 3 performers in each sector\n                JSON_AGG(\n                    CASE WHEN bp.sector_rank <= 3 THEN \n                        JSON_BUILD_OBJECT(\n                            'symbol', bp.ticker,\n                            'name', bp.short_name,\n                            'price', bp.current_price,\n                            'monthly_return', bp.monthly_change_pct,\n                            'momentum', bp.current_momentum,\n                            'jt_momentum', bp.jt_momentum_12_1\n                        )\n                    END\n                ) FILTER (WHERE bp.sector_rank <= 3) as bottom_performers\n                \n            FROM sector_summary ss\n            LEFT JOIN top_performers tp ON ss.sector = tp.sector\n            LEFT JOIN bottom_performers bp ON ss.sector = bp.sector\n            GROUP BY \n                ss.sector, ss.industry, ss.stock_count, ss.priced_stocks, \n                ss.avg_price, ss.avg_daily_change, ss.avg_weekly_change, ss.avg_monthly_change,\n                ss.avg_volume, ss.avg_rsi, ss.avg_momentum, ss.avg_macd,\n                ss.avg_jt_momentum, ss.avg_momentum_3m, ss.avg_momentum_6m, \n                ss.avg_risk_adj_momentum, ss.avg_momentum_strength, ss.avg_volume_momentum,\n                ss.bullish_stocks, ss.bearish_stocks, ss.neutral_stocks,\n                ss.total_dollar_volume, ss.performance_rank\n            ORDER BY ss.avg_monthly_change DESC\n        `",
      "context": "    50:         \n    51:         // Get sector analysis with current prices, momentum, and performance metrics\n>>> 52:         const sectorAnalysisQuery = `\n    53:             WITH latest_prices AS (\n    54:                 SELECT DISTINCT ON (symbol) "
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 226,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${sectorData.rows.length} sectors with live data`",
      "context": "    224:         const sectorData = await query(sectorAnalysisQuery);\n    225:         \n>>> 226:         console.log(`✅ Found ${sectorData.rows.length} sectors with live data`);\n    227:         \n    228:         // Calculate summary statistics"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${sectors.length} sectors with ${result.rows.length} industries`",
      "context": "    353:         const sectors = Object.values(sectorMap);\n    354:         \n>>> 355:         console.log(`✅ Found ${sectors.length} sectors with ${result.rows.length} industries`);\n    356:         \n    357:         res.json({"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 389,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Fetching detailed analysis for sector: ${sector}`",
      "context": "    387:         const { limit = 50 } = req.query;\n    388:         \n>>> 389:         console.log(`📊 Fetching detailed analysis for sector: ${sector}`);\n    390:         \n    391:         const sectorDetailQuery = `"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 466,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sector '${sector}' not found or has no current price data`",
      "context": "    464:             return res.status(404).json({\n    465:                 success: false,\n>>> 466:                 error: `Sector '${sector}' not found or has no current price data`\n    467:             });\n    468:         }"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 503,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${stocks.length} stocks in ${sector} sector`",
      "context": "    501:         });\n    502:         \n>>> 503:         console.log(`✅ Found ${stocks.length} stocks in ${sector} sector`);\n    504:         \n    505:         res.json({"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 550,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error fetching details for sector ${req.params.sector}:`",
      "context": "    548:         \n    549:     } catch (error) {\n>>> 550:         console.error(`❌ Error fetching details for sector ${req.params.sector}:`, error);\n    551:         res.status(500).json({\n    552:             success: false,"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 318,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE date >= CURRENT_DATE - INTERVAL '7 days'\n                ) THEN 1 END) as active_companies\n            FROM company_profile \n            WHERE sector IS NOT NULL \n                AND sector != ''\n                AND industry IS NOT NULL \n                AND industry != ''\n            GROUP BY sector, industry\n            ORDER BY sector, industry\n        `;\n        \n        const result = await query(sectorsQuery);\n        \n        // Group by sector\n        const sectorMap = {};\n        result.rows.forEach(row => {\n            if (!sectorMap[row.sector]) {\n                sectorMap[row.sector] = {\n                    sector: row.sector,\n                    industries: [],\n                    total_companies: 0,\n                    active_companies: 0\n                };\n            }\n            \n            sectorMap[row.sector].industries.push({\n                industry: row.industry,\n                company_count: parseInt(row.company_count),\n                active_companies: parseInt(row.active_companies)\n            });\n            \n            sectorMap[row.sector].total_companies += parseInt(row.company_count);\n            sectorMap[row.sector].active_companies +",
      "context": "    316:                 COUNT(CASE WHEN ticker IN (\n    317:                     SELECT DISTINCT symbol FROM price_daily \n>>> 318:                     WHERE date >= CURRENT_DATE - INTERVAL '7 days'\n    319:                 ) THEN 1 END) as active_companies\n    320:             FROM company_profile "
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 40,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n        \n        // Validate timeframe\n        const validTimeframes = ['daily', 'weekly', 'monthly'];\n        if (!validTimeframes.includes(timeframe)) {\n            return res.status(400).json({\n                success: false,\n                error: 'Invalid timeframe. Must be daily, weekly, or monthly.'\n            });\n        }\n        \n        // Get sector analysis with current prices, momentum, and performance metrics\n        const sectorAnalysisQuery = `",
      "context": "    38:         console.log('📊 Fetching comprehensive sector analysis from live tables...');\n    39:         \n>>> 40:         const { timeframe = 'daily' } = req.query;\n    41:         \n    42:         // Validate timeframe"
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 386,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n        const { limit = 50 } = req.query;\n        \n        console.log(`",
      "context": "    384: router.get('/:sector/details', async (req, res) => {\n    385:     try {\n>>> 386:         const { sector } = req.params;\n    387:         const { limit = 50 } = req.query;\n    388:         "
    },
    {
      "file": "webapp/lambda/routes/sectors.js",
      "line": 550,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.sector}:`, error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to fetch sector details'",
      "context": "    548:         \n    549:     } catch (error) {\n>>> 550:         console.error(`❌ Error fetching details for sector ${req.params.sector}:`, error);\n    551:         res.status(500).json({\n    552:             success: false,"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 18,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🛡️ [${diagnosticId}] Security dashboard requested...`",
      "context": "    16:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    17:     \n>>> 18:     console.log(`🛡️ [${diagnosticId}] Security dashboard requested...`);\n    19:     \n    20:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 33,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🛡️ [${diagnosticId}] Security dashboard generated: ${dashboard.threatLevel} threat level`",
      "context": "    31:         const dashboard = securityService.getSecurityDashboard();\n    32:         \n>>> 33:         console.log(`🛡️ [${diagnosticId}] Security dashboard generated: ${dashboard.threatLevel} threat level`);\n    34:         \n    35:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security dashboard failed:`",
      "context": "    40:         \n    41:     } catch (error) {\n>>> 42:         console.error(`❌ [${diagnosticId}] Security dashboard failed:`, error.message);\n    43:         res.json(error(error.message, { diagnosticId, operation: 'security-dashboard' }));\n    44:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 54,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${diagnosticId}] Security metrics requested...`",
      "context": "    52:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    53:     \n>>> 54:     console.log(`📊 [${diagnosticId}] Security metrics requested...`);\n    55:     \n    56:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${diagnosticId}] Security metrics retrieved: ${metrics.recentEventCount} recent events`",
      "context": "    66:         const metrics = securityService.getMetrics();\n    67:         \n>>> 68:         console.log(`📊 [${diagnosticId}] Security metrics retrieved: ${metrics.recentEventCount} recent events`);\n    69:         \n    70:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 77,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security metrics failed:`",
      "context": "    75:         \n    76:     } catch (error) {\n>>> 77:         console.error(`❌ [${diagnosticId}] Security metrics failed:`, error.message);\n    78:         res.json(error(error.message, { diagnosticId, operation: 'security-metrics' }));\n    79:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 89,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${diagnosticId}] Security events requested...`",
      "context": "    87:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    88:     \n>>> 89:     console.log(`📋 [${diagnosticId}] Security events requested...`);\n    90:     \n    91:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${diagnosticId}] Security events retrieved: ${paginatedEvents.length}/${allEvents.length} events`",
      "context": "    154:         };\n    155: \n>>> 156:         console.log(`📋 [${diagnosticId}] Security events retrieved: ${paginatedEvents.length}/${allEvents.length} events`);\n    157:         \n    158:         res.json(success(response));"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security events failed:`",
      "context": "    159:         \n    160:     } catch (error) {\n>>> 161:         console.error(`❌ [${diagnosticId}] Security events failed:`, error.message);\n    162:         res.json(error(error.message, { diagnosticId, operation: 'security-events' }));\n    163:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 173,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📝 [${diagnosticId}] Security event logging requested...`",
      "context": "    171:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    172:     \n>>> 173:     console.log(`📝 [${diagnosticId}] Security event logging requested...`);\n    174:     \n    175:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 205,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📝 [${diagnosticId}] Security event logged: ${eventId}`",
      "context": "    203:         const eventId = securityService.logSecurityEvent(eventType, severity, details, req);\n    204:         \n>>> 205:         console.log(`📝 [${diagnosticId}] Security event logged: ${eventId}`);\n    206:         \n    207:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security event logging failed:`",
      "context": "    212:         \n    213:     } catch (error) {\n>>> 214:         console.error(`❌ [${diagnosticId}] Security event logging failed:`, error.message);\n    215:         res.json(error(error.message, { diagnosticId, operation: 'log-security-event' }));\n    216:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 226,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📤 [${diagnosticId}] Security events export requested...`",
      "context": "    224:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    225:     \n>>> 226:     console.log(`📤 [${diagnosticId}] Security events export requested...`);\n    227:     \n    228:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 259,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`attachment; filename=\"security-events-${Date.now()}.csv\"`",
      "context": "    257:         if (format === 'csv') {\n    258:             res.setHeader('Content-Type', 'text/csv');\n>>> 259:             res.setHeader('Content-Disposition', `attachment; filename=\"security-events-${Date.now()}.csv\"`);\n    260:             res.send(exportData);\n    261:         } else {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 269,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📤 [${diagnosticId}] Security events exported: ${format} format`",
      "context": "    267:         }\n    268:         \n>>> 269:         console.log(`📤 [${diagnosticId}] Security events exported: ${format} format`);\n    270:         \n    271:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 272,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security events export failed:`",
      "context": "    270:         \n    271:     } catch (error) {\n>>> 272:         console.error(`❌ [${diagnosticId}] Security events export failed:`, error.message);\n    273:         res.json(error(error.message, { diagnosticId, operation: 'export-security-events' }));\n    274:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 284,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 [${diagnosticId}] Security events cleanup requested...`",
      "context": "    282:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    283:     \n>>> 284:     console.log(`🧹 [${diagnosticId}] Security events cleanup requested...`);\n    285:     \n    286:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 299,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 [${diagnosticId}] Security events cleanup completed: ${removedCount} events removed`",
      "context": "    297:         const removedCount = securityService.clearOldEvents(parseInt(olderThan));\n    298:         \n>>> 299:         console.log(`🧹 [${diagnosticId}] Security events cleanup completed: ${removedCount} events removed`);\n    300:         \n    301:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 305,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Cleaned up ${removedCount} old security events`",
      "context": "    303:             olderThan: parseInt(olderThan),\n    304:             diagnosticId,\n>>> 305:             message: `Cleaned up ${removedCount} old security events`\n    306:         }));\n    307:         "
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 309,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security events cleanup failed:`",
      "context": "    307:         \n    308:     } catch (error) {\n>>> 309:         console.error(`❌ [${diagnosticId}] Security events cleanup failed:`, error.message);\n    310:         res.json(error(error.message, { diagnosticId, operation: 'cleanup-security-events' }));\n    311:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 321,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${diagnosticId}] Threat level assessment requested...`",
      "context": "    319:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    320:     \n>>> 321:     console.log(`🎯 [${diagnosticId}] Threat level assessment requested...`);\n    322:     \n    323:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${diagnosticId}] Threat level assessment: ${threatAssessment.currentLevel}`",
      "context": "    353:         };\n    354: \n>>> 355:         console.log(`🎯 [${diagnosticId}] Threat level assessment: ${threatAssessment.currentLevel}`);\n    356:         \n    357:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 364,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Threat level assessment failed:`",
      "context": "    362:         \n    363:     } catch (error) {\n>>> 364:         console.error(`❌ [${diagnosticId}] Threat level assessment failed:`, error.message);\n    365:         res.json(error(error.message, { diagnosticId, operation: 'threat-level-assessment' }));\n    366:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 376,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosticId}] Security system status requested...`",
      "context": "    374:     const diagnosticId = Math.random().toString(36).substr(2, 9);\n    375:     \n>>> 376:     console.log(`🔍 [${diagnosticId}] Security system status requested...`);\n    377:     \n    378:     try {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 417,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosticId}] Security system status: ${status.overall}`",
      "context": "    415:         }\n    416: \n>>> 417:         console.log(`🔍 [${diagnosticId}] Security system status: ${status.overall}`);\n    418:         \n    419:         res.json(success({"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 425,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosticId}] Security system status failed:`",
      "context": "    423:         \n    424:     } catch (error) {\n>>> 425:         console.error(`❌ [${diagnosticId}] Security system status failed:`, error.message);\n    426:         res.json(error(error.message, { diagnosticId, operation: 'security-system-status' }));\n    427:     }"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 109,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n        // Get all events in time range\n        const allEvents = securityService.securityEvents.filter(event => {\n            if (event.timestamp < parseInt(startTime) || event.timestamp > parseInt(endTime)) {\n                return false;\n            }\n            if (eventType && event.eventType !== eventType) {\n                return false;\n            }\n            if (severity && event.severity !== severity) {\n                return false;\n            }\n            if (sourceIP && event.sourceIP !== sourceIP) {\n                return false;\n            }\n            return true;\n        });\n\n        // Sort by timestamp (newest first)\n        allEvents.sort((a, b) => b.timestamp - a.timestamp);\n\n        // Apply pagination\n        const paginatedEvents = allEvents.slice(parseInt(offset), parseInt(offset) + parseInt(limit));\n\n        const response = {\n            diagnosticId,\n            timeRange: { startTime: parseInt(startTime), endTime: parseInt(endTime) },\n            filters: { eventType, severity, sourceIP },\n            pagination: {\n                total: allEvents.length,\n                limit: parseInt(limit),\n                offset: parseInt(offset),\n                hasMore: parseInt(offset) + parseInt(limit) < allEvents.length\n            },\n            events: paginatedEvents.map(event => ({\n                id: event.id,\n                timestamp: event.timestamp,\n                eventType: event.eventType,\n                severity: event.severity,\n                sourceIP: event.sourceIP,\n                userAgent: event.userAgent,\n                userId: event.userId,\n                details: event.details\n            }))\n        };\n\n        console.log(`",
      "context": "    107:             limit = 100,\n    108:             offset = 0\n>>> 109:         } = req.query;\n    110: \n    111:         // Get all events in time range"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 184,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n        // Validate required fields\n        if (!eventType || !severity) {\n            return res.json(error('Missing required fields: eventType, severity', {\n                diagnosticId,\n                provided: { eventType: !!eventType, severity: !!severity }\n            }));\n        }\n\n        // Validate severity\n        if (!['info', 'warning', 'critical'].includes(severity)) {\n            return res.json(error('Invalid severity level', {\n                diagnosticId,\n                validSeverities: ['info', 'warning', 'critical'],\n                provided: severity\n            }));\n        }\n\n        const eventId = securityService.logSecurityEvent(eventType, severity, details, req);\n        \n        console.log(`",
      "context": "    182:         }\n    183: \n>>> 184:         const { eventType, severity, details } = req.body;\n    185: \n    186:         // Validate required fields"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 241,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n        if (!['json', 'csv'].includes(format)) {\n            return res.json(error('Invalid export format', {\n                diagnosticId,\n                validFormats: ['json', 'csv'],\n                provided: format\n            }));\n        }\n\n        const exportData = securityService.exportSecurityEvents(\n            parseInt(startTime),\n            parseInt(endTime),\n            format\n        );\n\n        if (format === 'csv') {\n            res.setHeader('Content-Type', 'text/csv');\n            res.setHeader('Content-Disposition', `attachment; filename=\"",
      "context": "    239:             endTime = Date.now(),\n    240:             format = 'json'\n>>> 241:         } = req.query;\n    242: \n    243:         if (!['json', 'csv'].includes(format)) {"
    },
    {
      "file": "webapp/lambda/routes/security.js",
      "line": 295,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body; // 7 days default\n\n        const removedCount = securityService.clearOldEvents(parseInt(olderThan));\n        \n        console.log(`",
      "context": "    293:         }\n    294: \n>>> 295:         const { olderThan = 7 * 24 * 60 * 60 * 1000 } = req.body; // 7 days default\n    296: \n    297:         const removedCount = securityService.clearOldEvents(parseInt(olderThan));"
    },
    {
      "file": "webapp/lambda/routes/sentiment.js",
      "line": 44,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { timeframe = '7d' } = req.query;\n    \n    // Return empty sentiment data with comprehensive diagnostics\n    console.error('❌ Social media sentiment data unavailable - comprehensive diagnosis needed', {\n      symbol,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['social_media_api_call', 'sentiment_analysis_query'],\n        potential_causes: [\n          'Social media API keys not configured',\n          'Sentiment analysis service unavailable',\n          'Rate limiting on social media APIs',\n          'Data processing pipeline failure',\n          'External API authentication issues'\n        ],\n        troubleshooting_steps: [\n          'Check social media API key configuration',\n          'Verify sentiment analysis service status',\n          'Review API rate limits and quotas',\n          'Check data processing pipeline health',\n          'Validate external API authentication'\n        ],\n        system_checks: [\n          'Reddit API connectivity',\n          'Twitter API availability',\n          'Google Trends API status',\n          'Sentiment analysis service health'\n        ]\n      }\n    });\n\n    const emptySocialData = {\n      reddit: {\n        mentions: [],\n        subredditBreakdown: [],\n        topPosts: []\n      },\n      googleTrends: {\n        searchVolume: [],\n        relatedQueries: [],\n        geographicDistribution: []\n      },\n      socialMetrics: {\n        overall: {\n          totalMentions: 0,\n          sentimentScore: 0,\n          engagementRate: 0,\n          viralityIndex: 0,\n          influencerMentions: 0\n        },\n        platforms: []\n      }\n    };\n\n    res.json({\n      symbol,\n      timeframe,\n      data: emptySocialData,\n      message: 'No social media sentiment data available - configure social media API keys',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching social sentiment data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch social sentiment data',\n      message: error.message\n    });\n  }\n});\n\n// Get trending stocks by social media mentions\nrouter.get('/trending', async (req, res) => {\n  try {\n    const { limit = 20, timeframe = '24h' } = req.query;\n    \n    // Return empty trending stocks with comprehensive diagnostics\n    console.error('❌ Trending stocks sentiment data unavailable - comprehensive diagnosis needed', {\n      limit,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['trending_stocks_query', 'social_media_mentions_aggregation'],\n        potential_causes: [\n          'Social media API unavailable',\n          'Trending analysis service down',\n          'Data aggregation pipeline failure',\n          'Database connection issues',\n          'External API rate limiting'\n        ],\n        troubleshooting_steps: [\n          'Check social media API connectivity',\n          'Verify trending analysis service status',\n          'Review data aggregation pipeline health',\n          'Check database connectivity',\n          'Monitor external API rate limits'\n        ],\n        system_checks: [\n          'Social media service availability',\n          'Trending analysis capacity',\n          'Data pipeline health',\n          'Database connection status'\n        ]\n      }\n    });\n\n    const emptyTrendingStocks = [];\n\n    res.json({\n      trending: emptyTrendingStocks,\n      timeframe,\n      limit: parseInt(limit),\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching trending stocks:', error);\n    res.status(500).json({\n      error: 'Failed to fetch trending stocks',\n      message: error.message\n    });\n  }\n});\n\n// Get sentiment analysis for multiple symbols\nrouter.post('/batch', async (req, res) => {\n  try {\n    const { symbols, timeframe = '7d' } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        error: 'Invalid request',\n        message: 'symbols array is required'\n      });\n    }\n\n    // Return empty batch sentiment data with comprehensive diagnostics\n    console.error('❌ Batch sentiment data unavailable - comprehensive diagnosis needed', {\n      symbols,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['batch_sentiment_analysis', 'multi_symbol_query'],\n        potential_causes: [\n          'Sentiment analysis service unavailable',\n          'Batch processing pipeline failure',\n          'External API rate limiting',\n          'Database connection issues',\n          'Data processing timeout'\n        ],\n        troubleshooting_steps: [\n          'Check sentiment analysis service status',\n          'Verify batch processing pipeline health',\n          'Review external API rate limits',\n          'Check database connectivity',\n          'Monitor data processing timeouts'\n        ],\n        system_checks: [\n          'Sentiment service availability',\n          'Batch processing capacity',\n          'External API health',\n          'Database connection pool status'\n        ]\n      }\n    });\n\n    const emptyBatchData = symbols.map(symbol => ({\n      symbol,\n      sentimentScore: 0,\n      mentions: 0,\n      engagement: 0,\n      trend: 'unknown'\n    }));\n\n    res.json({\n      data: emptyBatchData,\n      timeframe,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching batch sentiment data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch batch sentiment data',\n      message: error.message\n    });\n  }\n});\n\n// Get sentiment summary for market overview\nrouter.get('/market-summary', async (req, res) => {\n  try {\n    const marketSentiment = {\n      overall: {\n        sentiment: 0.68,\n        mentions: 15234,\n        activeDiscussions: 892,\n        sentiment24hChange: 0.05\n      },\n      sectors: [\n        { name: 'Technology', sentiment: 0.72, mentions: 4567, change: 0.08 },\n        { name: 'Healthcare', sentiment: 0.65, mentions: 2134, change: -0.02 },\n        { name: 'Financial', sentiment: 0.61, mentions: 1987, change: 0.03 },\n        { name: 'Energy', sentiment: 0.58, mentions: 1456, change: -0.12 },\n        { name: 'Consumer', sentiment: 0.71, mentions: 1789, change: 0.15 }\n      ],\n      platforms: [\n        { name: 'Reddit', activeUsers: 45678, sentiment: 0.69 },\n        { name: 'Twitter', activeUsers: 78901, sentiment: 0.65 },\n        { name: 'StockTwits', activeUsers: 12345, sentiment: 0.74 },\n        { name: 'Discord', activeUsers: 6789, sentiment: 0.71 }\n      ]\n    };\n\n    res.json({\n      marketSentiment,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching market sentiment summary:', error);\n    res.status(500).json({\n      error: 'Failed to fetch market sentiment summary'",
      "context": "    42: router.get('/social/:symbol', async (req, res) => {\n    43:   try {\n>>> 44:     const { symbol } = req.params;\n    45:     const { timeframe = '7d' } = req.query;\n    46:     "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider} API key should be 8-200 characters long`",
      "context": "    150:       // Generic validation for unknown providers\n    151:       if (!apiKey || apiKey.length < 8 || apiKey.length > 200) {\n>>> 152:         validation.error = `${provider} API key should be 8-200 characters long`;\n    153:         validation.details.expectedLength = '8-200 characters';\n    154:         validation.details.actualLength = apiKey ? apiKey.length : 0;"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 218,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ User ${userId} proceeding without 2FA due to missing users table`",
      "context": "    216:       console.warn(`⚠️ Users table not available, disabling 2FA checks:`, dbError.message);\n    217:       // If users table doesn't exist, skip 2FA verification\n>>> 218:       console.log(`⚠️ User ${userId} proceeding without 2FA due to missing users table`);\n    219:       return next();\n    220:     }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 223,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ User ${userId} not found in users table, proceeding without 2FA`",
      "context": "    221:     \n    222:     if (!user) {\n>>> 223:       console.warn(`⚠️ User ${userId} not found in users table, proceeding without 2FA`);\n    224:       return next();\n    225:     }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 229,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️  User ${userId} accessing sensitive operations without 2FA enabled`",
      "context": "    227:     // If 2FA is not enabled, allow the request but warn\n    228:     if (!user.two_factor_enabled) {\n>>> 229:       console.warn(`⚠️  User ${userId} accessing sensitive operations without 2FA enabled`);\n    230:       return next();\n    231:     }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 273,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 MFA verification successful for user ${userId}`",
      "context": "    271:     }\n    272:     \n>>> 273:     console.log(`🔐 MFA verification successful for user ${userId}`);\n    274:     next();\n    275:     "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 427,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${key.provider}-${userId}`",
      "context": "    425:     // Format for frontend compatibility\n    426:     const formattedApiKeys = apiKeys.map(key => ({\n>>> 427:       id: `${key.provider}-${userId}`, // Generate consistent ID\n    428:       provider: key.provider,\n    429:       description: `${key.provider} API Key`,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 429,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${key.provider} API Key`",
      "context": "    427:       id: `${key.provider}-${userId}`, // Generate consistent ID\n    428:       provider: key.provider,\n>>> 429:       description: `${key.provider} API Key`,\n    430:       isSandbox: true, // Default for now\n    431:       isActive: true,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 462,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] POST /api-keys - Starting API key creation`",
      "context": "    460:   const startTime = Date.now();\n    461:   \n>>> 462:   console.log(`🔐 [${requestId}] POST /api-keys - Starting API key creation`);\n    463:   console.log(`🔐 [${requestId}] Memory at start:`, process.memoryUsage());\n    464:   "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 463,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Memory at start:`",
      "context": "    461:   \n    462:   console.log(`🔐 [${requestId}] POST /api-keys - Starting API key creation`);\n>>> 463:   console.log(`🔐 [${requestId}] Memory at start:`, process.memoryUsage());\n    464:   \n    465:   // Simple service is always enabled (no complex encryption setup needed)"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 467,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] API Key service is disabled`",
      "context": "    465:   // Simple service is always enabled (no complex encryption setup needed)\n    466:   if (!apiKeyService.isEnabled) {\n>>> 467:     console.error(`❌ [${requestId}] API Key service is disabled`);\n    468:     return res.status(503).json({\n    469:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 478,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] User ID:`",
      "context": "    476:   const { provider, apiKey, apiSecret, isSandbox = true, description } = req.body;\n    477:   \n>>> 478:   console.log(`🔐 [${requestId}] User ID:`, userId);\n    479:   console.log(`🔐 [${requestId}] User object:`, JSON.stringify(req.user, null, 2));\n    480:   console.log(`🔐 [${requestId}] Request body:`, JSON.stringify({ "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 479,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] User object:`",
      "context": "    477:   \n    478:   console.log(`🔐 [${requestId}] User ID:`, userId);\n>>> 479:   console.log(`🔐 [${requestId}] User object:`, JSON.stringify(req.user, null, 2));\n    480:   console.log(`🔐 [${requestId}] Request body:`, JSON.stringify({ \n    481:     provider, "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 480,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Request body:`",
      "context": "    478:   console.log(`🔐 [${requestId}] User ID:`, userId);\n    479:   console.log(`🔐 [${requestId}] User object:`, JSON.stringify(req.user, null, 2));\n>>> 480:   console.log(`🔐 [${requestId}] Request body:`, JSON.stringify({ \n    481:     provider, \n    482:     isSandbox, "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 492,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No user ID found in request after ${Date.now() - startTime}ms`",
      "context": "    490:   // Check if user is properly authenticated\n    491:   if (!userId) {\n>>> 492:     console.error(`❌ [${requestId}] No user ID found in request after ${Date.now() - startTime}ms`);\n    493:     return res.status(401).json({\n    494:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 501,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Missing required fields: provider=${!!provider}, apiKey=${!!apiKey} after ${Date.now() - startTime}ms`",
      "context": "    499: \n    500:   if (!provider || !apiKey) {\n>>> 501:     console.error(`❌ [${requestId}] Missing required fields: provider=${!!provider}, apiKey=${!!apiKey} after ${Date.now() - startTime}ms`);\n    502:     return res.status(400).json({\n    503:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 511,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Invalid API key format for ${provider}: ${formatValidation.error}`",
      "context": "    509:   const formatValidation = validateApiKeyFormat(provider, apiKey, apiSecret);\n    510:   if (!formatValidation.valid) {\n>>> 511:     console.error(`❌ [${requestId}] Invalid API key format for ${provider}: ${formatValidation.error}`);\n    512:     return res.status(400).json({\n    513:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 520,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 [${requestId}] Storing API key using Parameter Store after ${Date.now() - startTime}ms...`",
      "context": "    518: \n    519:   try {\n>>> 520:     console.log(`🔐 [${requestId}] Storing API key using Parameter Store after ${Date.now() - startTime}ms...`);\n    521:     \n    522:     // Store API key using simple Parameter Store service"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 525,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API key stored successfully after ${Date.now() - storeStart}ms`",
      "context": "    523:     const storeStart = Date.now();\n    524:     await apiKeyService.storeApiKey(userId, provider, apiKey, apiSecret);\n>>> 525:     console.log(`✅ [${requestId}] API key stored successfully after ${Date.now() - storeStart}ms`);\n    526:     \n    527:     // Trigger portfolio data refresh for this user's portfolio symbols"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 528,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Triggering portfolio data refresh after ${Date.now() - startTime}ms...`",
      "context": "    526:     \n    527:     // Trigger portfolio data refresh for this user's portfolio symbols\n>>> 528:     console.log(`🔄 [${requestId}] Triggering portfolio data refresh after ${Date.now() - startTime}ms...`);\n    529:     try {\n    530:       const refreshResult = await portfolioDataRefreshService.triggerPortfolioDataRefresh(userId, provider);"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 531,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Portfolio data refresh result:`",
      "context": "    529:     try {\n    530:       const refreshResult = await portfolioDataRefreshService.triggerPortfolioDataRefresh(userId, provider);\n>>> 531:       console.log(`✅ [${requestId}] Portfolio data refresh result:`, refreshResult.status);\n    532:     } catch (refreshError) {\n    533:       console.warn(`⚠️ [${requestId}] Portfolio data refresh failed (non-critical):`, refreshError.message);"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 533,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Portfolio data refresh failed (non-critical):`",
      "context": "    531:       console.log(`✅ [${requestId}] Portfolio data refresh result:`, refreshResult.status);\n    532:     } catch (refreshError) {\n>>> 533:       console.warn(`⚠️ [${requestId}] Portfolio data refresh failed (non-critical):`, refreshError.message);\n    534:       // Don't fail the API key creation if refresh fails\n    535:     }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 537,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Total request time: ${Date.now() - startTime}ms`",
      "context": "    535:     }\n    536:     \n>>> 537:     console.log(`✅ [${requestId}] Total request time: ${Date.now() - startTime}ms`);\n    538: \n    539:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 544,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider} API key`",
      "context": "    542:       apiKey: {\n    543:         provider,\n>>> 544:         description: description || `${provider} API key`,\n    545:         isSandbox,\n    546:         createdAt: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 550,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error after ${Date.now() - startTime}ms:`",
      "context": "    548:     });\n    549:   } catch (error) {\n>>> 550:     console.error(`❌ [${requestId}] Error after ${Date.now() - startTime}ms:`, error.message);\n    551:     console.error('❌ Error adding API key:', error.message);\n    552:     console.error('🔍 Full error details:', {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 727,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] API key connection test initiated`",
      "context": "    725: \n    726:   try {\n>>> 727:     console.log(`🚀 [${requestId}] API key connection test initiated`, {\n    728:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    729:       provider,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 728,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    726:   try {\n    727:     console.log(`🚀 [${requestId}] API key connection test initiated`, {\n>>> 728:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    729:       provider,\n    730:       timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 743,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Retrieving API key from Parameter Store`",
      "context": "    741: \n    742:     // Get API key from Parameter Store\n>>> 743:     console.log(`🔍 [${requestId}] Retrieving API key from Parameter Store`);\n    744:     const credentials = await apiKeyService.getApiKey(userId, provider);\n    745:     "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 755,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API key found for provider: ${provider}`",
      "context": "    753:     }\n    754: \n>>> 755:     console.log(`✅ [${requestId}] API key found for provider: ${provider}`);\n    756:     \n    757:     // Test connection based on provider"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 758,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] Testing connection to ${provider} API`",
      "context": "    756:     \n    757:     // Test connection based on provider\n>>> 758:     console.log(`📡 [${requestId}] Testing connection to ${provider} API`);\n    759:     const connectionTestStart = Date.now();\n    760:     let connectionResult = { valid: false, error: 'Provider not supported' };"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 782,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Alpaca connection test SUCCESSFUL`",
      "context": "    780:           };\n    781:           \n>>> 782:           console.log(`✅ [${requestId}] Alpaca connection test SUCCESSFUL`);\n    783:         } else {\n    784:           connectionResult = {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 791,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca connection test FAILED:`",
      "context": "    789:         \n    790:       } catch (alpacaError) {\n>>> 791:         console.error(`❌ [${requestId}] Alpaca connection test FAILED:`, alpacaError.message);\n    792:         connectionResult = {\n    793:           valid: false,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 820,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] API key connection test FAILED:`",
      "context": "    818:   } catch (error) {\n    819:     const errorDuration = Date.now() - requestStart;\n>>> 820:     console.error(`❌ [${requestId}] API key connection test FAILED:`, error.message);\n    821:     \n    822:     res.status(500).json({"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 930,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to validate ${provider} API key:`",
      "context": "    928:         }\n    929:       } catch (error) {\n>>> 930:         console.warn(`Failed to validate ${provider} API key:`, error.message);\n    931:       }\n    932:     }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 965,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No active ${provider} API key found`",
      "context": "    963:       return res.status(404).json({\n    964:         success: false,\n>>> 965:         error: `No active ${provider} API key found`,\n    966:         provider: provider\n    967:       });"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 970,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔓 Credentials retrieved successfully for ${provider}`",
      "context": "    968:     }\n    969: \n>>> 970:     console.log(`🔓 Credentials retrieved successfully for ${provider}`);\n    971:     \n    972:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 544,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider} API key`",
      "context": "    542:       apiKey: {\n    543:         provider,\n>>> 544:         description: description || `${provider} API key`,\n    545:         isSandbox,\n    546:         createdAt: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Column referenced in query does not exist: ${queryError.message}`",
      "context": "    1174:           error: 'Database schema missing required columns',\n    1175:           message: 'The database schema needs to be updated to support profile fields',\n>>> 1176:           details: `Column referenced in query does not exist: ${queryError.message}`,\n    1177:           solution: 'Use the schema fix endpoint: PUT /api/settings/debug/fix-schema'\n    1178:         });"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1439,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Financial Platform (${req.user.email || req.user.username})`",
      "context": "    1437:     \n    1438:     const secret = speakeasy.generateSecret({\n>>> 1439:       name: `Financial Platform (${req.user.email || req.user.username})`,\n    1440:       account: req.user.email || req.user.username,\n    1441:       issuer: 'Financial Platform',"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1439,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Financial Platform (${req.user.email || req.user.username})`",
      "context": "    1437:     \n    1438:     const secret = speakeasy.generateSecret({\n>>> 1439:       name: `Financial Platform (${req.user.email || req.user.username})`,\n    1440:       account: req.user.email || req.user.username,\n    1441:       issuer: 'Financial Platform',"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1782,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n            ALTER TABLE users \n            ADD COLUMN IF NOT EXISTS ${col.name} ${col.type}\n          `",
      "context": "    1780:       for (const col of userColumns) {\n    1781:         try {\n>>> 1782:           await client.query(`\n    1783:             ALTER TABLE users \n    1784:             ADD COLUMN IF NOT EXISTS ${col.name} ${col.type}"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1786,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Added ${col.name} to users table`",
      "context": "    1784:             ADD COLUMN IF NOT EXISTS ${col.name} ${col.type}\n    1785:           `);\n>>> 1786:           fixes.push(`Added ${col.name} to users table`);\n    1787:         } catch (error) {\n    1788:           fixes.push(`Failed to add ${col.name}: ${error.message}`);"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1788,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to add ${col.name}: ${error.message}`",
      "context": "    1786:           fixes.push(`Added ${col.name} to users table`);\n    1787:         } catch (error) {\n>>> 1788:           fixes.push(`Failed to add ${col.name}: ${error.message}`);\n    1789:         }\n    1790:       }"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1809,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to create user_notification_preferences: ${error.message}`",
      "context": "    1807:         fixes.push('Created user_notification_preferences table');\n    1808:       } catch (error) {\n>>> 1809:         fixes.push(`Failed to create user_notification_preferences: ${error.message}`);\n    1810:       }\n    1811:       "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1826,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to create user_theme_preferences: ${error.message}`",
      "context": "    1824:         fixes.push('Created user_theme_preferences table');\n    1825:       } catch (error) {\n>>> 1826:         fixes.push(`Failed to create user_theme_preferences: ${error.message}`);\n    1827:       }\n    1828:       "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 451,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    449:       apiKeys: [],\n    450:       note: 'API key service temporarily unavailable',\n>>> 451:       errorCode: 'SERVICE_UNAVAILABLE',\n    452:       details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    453:     });"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 577,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        debugInfo: process.env.NODE_ENV === '",
      "context": "    575:         details: error.message,\n    576:         errorCode: error.code,\n>>> 577:         solution: 'Run init_database.py script to create required tables',\n    578:         debugInfo: process.env.NODE_ENV === 'development' ? {\n    579:           errorCode: error.code,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 603,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: error.message,\n        errorCode: error.code,\n        debugInfo: process.env.NODE_ENV === '",
      "context": "    601:         success: false,\n    602:         error: 'Database connectivity issue - API key not saved',\n>>> 603:         message: 'Failed to save API key to database. Please check database connectivity.',\n    604:         details: error.message,\n    605:         errorCode: error.code,"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 451,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    449:       apiKeys: [],\n    450:       note: 'API key service temporarily unavailable',\n>>> 451:       errorCode: 'SERVICE_UNAVAILABLE',\n    452:       details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    453:     });"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1062,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE table_schema = 'public' AND table_name = 'users'\n      `, [], 5000);\n      \n      existingColumns = columnCheck.rows.map(row => row.column_name);\n      console.log('📋 Available columns in users table:', existingColumns);\n    } catch (schemaError) {\n      console.error('❌ Schema check failed:', schemaError.message);\n      \n      // Check if the users table exists at all\n      try {\n        const tableExists = await query(`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' AND table_name = 'users'\n          )\n        `, [], 3000);\n        \n        if (!tableExists.rows[0].exists) {\n          return res.status(503).json({\n            success: false,\n            error: 'Database schema not initialized',\n            message: 'The users table does not exist. Database needs to be initialized.',\n            details: 'Contact administrator to run database initialization script'\n          });\n        }\n      } catch (tableCheckError) {\n        console.error('❌ Table existence check failed:', tableCheckError.message);\n        return res.status(503).json({\n          success: false,\n          error: 'Database schema check failed',\n          message: 'Unable to verify database structure',\n          details: tableCheckError.message\n        });\n      }\n      \n      // If table exists but column check failed, assume basic columns\n      existingColumns = ['id', 'email', 'username'];\n      console.log('⚠️ Using fallback column list:', existingColumns);\n    }\n    \n    // Use secure query builder to prevent SQL injection\n    const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n    const queryBuilder = new SecureQueryBuilder();\n    \n    // Build secure update data object\n    const updateData = {};\n    \n    // Only include fields that exist in database and are provided\n    if (existingColumns.includes('first_name') && firstName !== undefined) {\n      updateData.first_name = firstName;\n    }\n    \n    if (existingColumns.includes('last_name') && lastName !== undefined) {\n      updateData.last_name = lastName;\n    }\n    \n    if (existingColumns.includes('email') && email !== undefined) {\n      updateData.email = email;\n    }\n    \n    if (existingColumns.includes('phone') && phone !== undefined) {\n      updateData.phone = phone;\n    }\n    \n    if (existingColumns.includes('timezone') && timezone !== undefined) {\n      updateData.timezone = timezone;\n    }\n    \n    if (existingColumns.includes('currency') && currency !== undefined) {\n      updateData.currency = currency;\n    }\n    \n    // Note: updated_at will be handled by the secure query builder\n    \n    if (Object.keys(updateData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No valid fields to update',\n        availableColumns: existingColumns,\n        note: 'Database schema may need updating to support profile fields'\n      });\n    }\n    \n    // Build secure query using the query builder\n    const { query: updateQuery, params: queryParams } = queryBuilder.buildUpdate({\n      table: 'users',\n      set: updateData,\n      where: { id: userId }\n    });\n    \n    console.log('🔒 Executing secure query (parameters hidden for security)');\n    console.log('📊 Query parameter count:', queryParams.length);\n    \n    let result;\n    try {\n      result = await query(updateQuery, queryParams, 10000); // 10 second timeout\n      console.log('✅ Query executed successfully, rows affected:', result.rowCount);\n    } catch (queryError) {\n      console.error('❌ Query execution failed:', queryError.message);\n      console.error('🔍 Query error details:', {\n        message: queryError.message,\n        code: queryError.code,\n        detail: queryError.detail,\n        hint: queryError.hint,\n        position: queryError.position,\n        query: updateQuery.substring(0, 200) +",
      "context": "    1060:         SELECT column_name \n    1061:         FROM information_schema.columns \n>>> 1062:         WHERE table_schema = 'public' AND table_name = 'users'\n    1063:       `, [], 5000);\n    1064:       "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 476,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n  \n  console.log(`",
      "context": "    474:   \n    475:   const userId = req.user?.sub;\n>>> 476:   const { provider, apiKey, apiSecret, isSandbox = true, description } = req.body;\n    477:   \n    478:   console.log(`🔐 [${requestId}] User ID:`, userId);"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 620,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { description, isSandbox } = req.body;\n\n  try {\n    const result = await query(`",
      "context": "    618: router.put('/api-keys/:keyId', createValidationMiddleware(settingsValidationSchemas.apiKey), async (req, res) => {\n    619:   const userId = req.user.sub;\n>>> 620:   const { keyId } = req.params;\n    621:   const { description, isSandbox } = req.body;\n    622: "
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 658,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n  try {\n    // Delete from Parameter Store\n    await apiKeyService.deleteApiKey(userId, provider);\n\n    res.json({\n      success: true,\n      message: 'API key deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting API key:', error);\n    if (error.name === 'ParameterNotFound') {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found'\n      });\n    }\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete API key',\n      message: error.message\n    });\n  }\n});\n\n// Get API key (without exposing the secret)\nrouter.get('/api-keys/:provider', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    const apiKey = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!apiKey) {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      apiKey: {\n        provider: apiKey.provider,\n        keyId: apiKey.keyId.substring(0, 4) + '***' + apiKey.keyId.slice(-4),\n        hasSecret: !!apiKey.secretKey,\n        created: apiKey.created,\n        version: apiKey.version\n      }\n    });\n  } catch (error) {\n    console.error('Error retrieving API key:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve API key',\n      message: error.message\n    });\n  }\n});\n\n// Test API key connection\nrouter.post('/test-connection/:provider', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    console.log(`",
      "context": "    656: router.delete('/api-keys/:provider', async (req, res) => {\n    657:   const userId = req.user.sub;\n>>> 658:   const { provider } = req.params;\n    659: \n    660:   try {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 956,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n  try {\n    // Get API key from Parameter Store\n    const credentials = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!credentials) {\n      return res.status(404).json({\n        success: false,\n        error: `",
      "context": "    954: router.get('/api-keys/:provider/credentials', async (req, res) => {\n    955:   const userId = req.user.sub;\n>>> 956:   const { provider } = req.params;\n    957: \n    958:   try {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1034,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  console.log('🔄 Profile update request for user:', userId);\n  console.log('📝 Update data:', { firstName, lastName, email, phone, timezone, currency });\n\n  try {\n    // Test database connectivity first\n    console.log('🔍 Testing database connectivity...');\n    try {\n      await query('SELECT 1 as test', [], 3000);\n      console.log('✅ Database connection successful');\n    } catch (dbError) {\n      console.error('❌ Database connection failed:', dbError.message);\n      return res.status(503).json({\n        success: false,\n        error: 'Database temporarily unavailable',\n        message: 'Please try again in a few moments',\n        details: dbError.message\n      });\n    }\n\n    // Check what columns actually exist in the users table\n    console.log('🔍 Checking users table schema...');\n    let existingColumns = [];\n    try {\n      const columnCheck = await query(`\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_schema = 'public' AND table_name = 'users'\n      `, [], 5000);\n      \n      existingColumns = columnCheck.rows.map(row => row.column_name);\n      console.log('📋 Available columns in users table:', existingColumns);\n    } catch (schemaError) {\n      console.error('❌ Schema check failed:', schemaError.message);\n      \n      // Check if the users table exists at all\n      try {\n        const tableExists = await query(`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' AND table_name = 'users'\n          )\n        `, [], 3000);\n        \n        if (!tableExists.rows[0].exists) {\n          return res.status(503).json({\n            success: false,\n            error: 'Database schema not initialized',\n            message: 'The users table does not exist. Database needs to be initialized.',\n            details: 'Contact administrator to run database initialization script'\n          });\n        }\n      } catch (tableCheckError) {\n        console.error('❌ Table existence check failed:', tableCheckError.message);\n        return res.status(503).json({\n          success: false,\n          error: 'Database schema check failed',\n          message: 'Unable to verify database structure',\n          details: tableCheckError.message\n        });\n      }\n      \n      // If table exists but column check failed, assume basic columns\n      existingColumns = ['id', 'email', 'username'];\n      console.log('⚠️ Using fallback column list:', existingColumns);\n    }\n    \n    // Use secure query builder to prevent SQL injection\n    const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n    const queryBuilder = new SecureQueryBuilder();\n    \n    // Build secure update data object\n    const updateData = {};\n    \n    // Only include fields that exist in database and are provided\n    if (existingColumns.includes('first_name') && firstName !== undefined) {\n      updateData.first_name = firstName;\n    }\n    \n    if (existingColumns.includes('last_name') && lastName !== undefined) {\n      updateData.last_name = lastName;\n    }\n    \n    if (existingColumns.includes('email') && email !== undefined) {\n      updateData.email = email;\n    }\n    \n    if (existingColumns.includes('phone') && phone !== undefined) {\n      updateData.phone = phone;\n    }\n    \n    if (existingColumns.includes('timezone') && timezone !== undefined) {\n      updateData.timezone = timezone;\n    }\n    \n    if (existingColumns.includes('currency') && currency !== undefined) {\n      updateData.currency = currency;\n    }\n    \n    // Note: updated_at will be handled by the secure query builder\n    \n    if (Object.keys(updateData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No valid fields to update',\n        availableColumns: existingColumns,\n        note: 'Database schema may need updating to support profile fields'\n      });\n    }\n    \n    // Build secure query using the query builder\n    const { query: updateQuery, params: queryParams } = queryBuilder.buildUpdate({\n      table: 'users',\n      set: updateData,\n      where: { id: userId }\n    });\n    \n    console.log('🔒 Executing secure query (parameters hidden for security)');\n    console.log('📊 Query parameter count:', queryParams.length);\n    \n    let result;\n    try {\n      result = await query(updateQuery, queryParams, 10000); // 10 second timeout\n      console.log('✅ Query executed successfully, rows affected:', result.rowCount);\n    } catch (queryError) {\n      console.error('❌ Query execution failed:', queryError.message);\n      console.error('🔍 Query error details:', {\n        message: queryError.message,\n        code: queryError.code,\n        detail: queryError.detail,\n        hint: queryError.hint,\n        position: queryError.position,\n        query: updateQuery.substring(0, 200) + '...'\n      });\n      \n      // Handle specific database errors\n      if (queryError.code === '42703') { // Column doesn't exist\n        return res.status(503).json({\n          success: false,\n          error: 'Database schema missing required columns',\n          message: 'The database schema needs to be updated to support profile fields',\n          details: `",
      "context": "    1032: router.put('/profile', createValidationMiddleware(settingsValidationSchemas.profile), async (req, res) => {\n    1033:   const userId = req.user.sub;\n>>> 1034:   const { firstName, lastName, email, phone, timezone, currency } = req.body;\n    1035: \n    1036:   console.log('🔄 Profile update request for user:', userId);"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1300,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    // Use UPSERT to create or update preferences\n    const result = await query(`",
      "context": "    1298: router.put('/notifications', createValidationMiddleware(settingsValidationSchemas.notifications), async (req, res) => {\n    1299:   const userId = req.user.sub;\n>>> 1300:   const { email, push, priceAlerts, portfolioUpdates, marketNews, weeklyReports } = req.body;\n    1301: \n    1302:   try {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1300,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n  try {\n    // Use UPSERT to create or update preferences\n    const result = await query(`",
      "context": "    1298: router.put('/notifications', createValidationMiddleware(settingsValidationSchemas.notifications), async (req, res) => {\n    1299:   const userId = req.user.sub;\n>>> 1300:   const { email, push, priceAlerts, portfolioUpdates, marketNews, weeklyReports } = req.body;\n    1301: \n    1302:   try {"
    },
    {
      "file": "webapp/lambda/routes/settings.js",
      "line": 1511,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n  \n  try {\n    console.log('🔐 Verifying 2FA setup for user:', userId);\n    \n    if (!code) {\n      return res.status(400).json({\n        success: false,\n        error: 'Verification code is required'\n      });\n    }\n    \n    // Get user's 2FA secret\n    const userResult = await query(`",
      "context": "    1509: router.post('/two-factor/verify', async (req, res) => {\n    1510:   const userId = req.user.sub;\n>>> 1511:   const { code } = req.body;\n    1512:   \n    1513:   try {"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Analyzing signals for symbol`",
      "context": "    61:     const { symbol, timeframe = '1d', patterns = 'all', lookback = 100 } = req.validated;\n    62:     \n>>> 63:     logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n    64:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    65:       symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:     \n    63:     logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n>>> 64:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    65:       symbol: symbol,\n    66:       timeframe: timeframe,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Signal analysis completed`",
      "context": "    125:     const response = responseFormatter.success(responseData, 'Signal analysis completed successfully');\n    126:     \n>>> 127:     logger.info(`✅ [${requestId}] Signal analysis completed`, {\n    128:       symbol: symbol,\n    129:       primarySignal: signalAnalysis.analysis.primary?.type,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Signal analysis failed`",
      "context": "    137:     \n    138:   } catch (error) {\n>>> 139:     logger.error(`❌ [${requestId}] Signal analysis failed`, {\n    140:       error: error.message,\n    141:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 159,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${requestId}] Fetching available signal types`",
      "context": "    157:   \n    158:   try {\n>>> 159:     logger.info(`📋 [${requestId}] Fetching available signal types`);\n    160:     \n    161:     const signalTypes = {"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving signal types`",
      "context": "    189:     \n    190:   } catch (error) {\n>>> 191:     logger.error(`❌ [${requestId}] Error retrieving signal types`, {\n    192:       error: error.message,\n    193:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 261,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${timeframe} signals data is not currently available`",
      "context": "    259:         return res.status(404).json({\n    260:           error: 'Data not available',\n>>> 261:           message: `${timeframe} signals data is not currently available`,\n    262:           details: `Table ${tableName} not found`\n    263:         });"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 262,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} not found`",
      "context": "    260:           error: 'Data not available',\n    261:           message: `${timeframe} signals data is not currently available`,\n>>> 262:           details: `Table ${tableName} not found`\n    263:         });\n    264:       }"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 266,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Table availability for ${timeframe} signals:`",
      "context": "    264:       }\n    265:       \n>>> 266:       console.log(`📊 Table availability for ${timeframe} signals:`, tableStatus);\n    267:     } catch (tableCheckError) {\n    268:       console.error('Error checking table availability:', tableCheckError);"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 297,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM ${tableName} bs\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Buy', 'Strong Buy', 'BUY', 'STRONG_BUY', '1', '2')\n    `",
      "context": "    295:     `;\n    296: \n>>> 297:     const countQuery = `\n    298:       SELECT COUNT(*) as total\n    299:       FROM ${tableName} bs"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 380,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM ${tableName} bs\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Sell', 'Strong Sell', 'SELL', 'STRONG_SELL', '-1', '-2')\n    `",
      "context": "    378:     `;\n    379: \n>>> 380:     const countQuery = `\n    381:       SELECT COUNT(*) as total\n    382:       FROM ${tableName} bs"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 429,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Advanced signal analysis for symbol`",
      "context": "    427:     const { symbol, timeframe = '1d', lookback = 100 } = req.validated;\n    428:     \n>>> 429:     logger.info(`🚀 [${requestId}] Advanced signal analysis for symbol`, {\n    430:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    431:       symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:     \n    63:     logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n>>> 64:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    65:       symbol: symbol,\n    66:       timeframe: timeframe,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 479,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Advanced signal analysis completed`",
      "context": "    477:     const response = responseFormatter.success(responseData, 'Advanced signal analysis completed successfully');\n    478:     \n>>> 479:     logger.info(`✅ [${requestId}] Advanced signal analysis completed`, {\n    480:       symbol: symbol,\n    481:       direction: advancedAnalysis.signal.direction,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 491,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Advanced signal analysis failed`",
      "context": "    489:     \n    490:   } catch (error) {\n>>> 491:     logger.error(`❌ [${requestId}] Advanced signal analysis failed`, {\n    492:       error: error.message,\n    493:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 515,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🤖 [${requestId}] AI trading signals analysis started`",
      "context": "    513:     const { symbol, timeframe = '1d', lookback = 100 } = req.validated;\n    514:     \n>>> 515:     logger.info(`🤖 [${requestId}] AI trading signals analysis started`, {\n    516:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    517:       symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:     \n    63:     logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n>>> 64:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    65:       symbol: symbol,\n    66:       timeframe: timeframe,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 626,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] AI trading signals analysis completed`",
      "context": "    624:     const response = responseFormatter.success(responseData, 'AI trading signals analysis completed successfully');\n    625:     \n>>> 626:     logger.info(`✅ [${requestId}] AI trading signals analysis completed`, {\n    627:       symbol: symbol,\n    628:       aiSignal: aiAnalysis.signal.direction,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 640,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] AI trading signals analysis failed`",
      "context": "    638:     \n    639:   } catch (error) {\n>>> 640:     logger.error(`❌ [${requestId}] AI trading signals analysis failed`, {\n    641:       error: error.message,\n    642:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 660,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] AI signals performance metrics requested`",
      "context": "    658:   \n    659:   try {\n>>> 660:     logger.info(`📊 [${requestId}] AI signals performance metrics requested`);\n    661:     \n    662:     // Get AI signals performance data"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 712,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving AI performance metrics`",
      "context": "    710:     \n    711:   } catch (error) {\n>>> 712:     logger.error(`❌ [${requestId}] Error retrieving AI performance metrics`, {\n    713:       error: error.message,\n    714:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 743,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] AI bulk analysis started`",
      "context": "    741:     }\n    742:     \n>>> 743:     logger.info(`🔄 [${requestId}] AI bulk analysis started`, {\n    744:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    745:       symbolCount: symbols.length,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:     \n    63:     logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n>>> 64:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    65:       symbol: symbol,\n    66:       timeframe: timeframe,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 799,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] AI bulk analysis completed`",
      "context": "    797:     const response = responseFormatter.success(bulkAnalysis, 'AI bulk analysis completed successfully');\n    798:     \n>>> 799:     logger.info(`✅ [${requestId}] AI bulk analysis completed`, {\n    800:       totalSymbols: symbols.length,\n    801:       successful: bulkAnalysis.summary.successfulAnalysis,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 811,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] AI bulk analysis failed`",
      "context": "    809:     \n    810:   } catch (error) {\n>>> 811:     logger.error(`❌ [${requestId}] AI bulk analysis failed`, {\n    812:       error: error.message,\n    813:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 286,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    284:         km.trailing_pe,\n    285:         km.dividend_yield\n>>> 286:       FROM ${tableName} bs\n    287:       LEFT JOIN symbols s ON bs.symbol = s.symbol\n    288:       LEFT JOIN market_data md ON bs.symbol = md.ticker"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 286,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    284:         km.trailing_pe,\n    285:         km.dividend_yield\n>>> 286:       FROM ${tableName} bs\n    287:       LEFT JOIN symbols s ON bs.symbol = s.symbol\n    288:       LEFT JOIN market_data md ON bs.symbol = md.ticker"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 286,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    284:         km.trailing_pe,\n    285:         km.dividend_yield\n>>> 286:       FROM ${tableName} bs\n    287:       LEFT JOIN symbols s ON bs.symbol = s.symbol\n    288:       LEFT JOIN market_data md ON bs.symbol = md.ticker"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 286,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    284:         km.trailing_pe,\n    285:         km.dividend_yield\n>>> 286:       FROM ${tableName} bs\n    287:       LEFT JOIN symbols s ON bs.symbol = s.symbol\n    288:       LEFT JOIN market_data md ON bs.symbol = md.ticker"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 233,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.timeframe || 'daily';\n    const limit = parseInt(req.query.limit) || 25;\n    const page = parseInt(req.query.page) || 1;\n    const offset = (page - 1) * limit;\n\n    // Validate timeframe with safe table name mapping\n    const validTimeframes = {\n      'daily': 'buy_sell_daily',\n      'weekly': 'buy_sell_weekly', \n      'monthly': 'buy_sell_monthly'\n    };\n    \n    if (!validTimeframes[timeframe]) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = validTimeframes[timeframe];\n    \n    // Check if required tables exist before querying\n    const requiredTables = [tableName, 'symbols'];\n    const optionalTables = ['market_data', 'key_metrics'];\n    \n    try {\n      const tableStatus = await tablesExist([...requiredTables, ...optionalTables]);\n      \n      if (!tableStatus[tableName]) {\n        return res.status(404).json({\n          error: 'Data not available',\n          message: `",
      "context": "    231: router.get('/buy', async (req, res) => {\n    232:   try {\n>>> 233:     const timeframe = req.query.timeframe || 'daily';\n    234:     const limit = parseInt(req.query.limit) || 25;\n    235:     const page = parseInt(req.query.page) || 1;"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 340,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.timeframe || 'daily';\n    const limit = parseInt(req.query.limit) || 25;\n    const page = parseInt(req.query.page) || 1;\n    const offset = (page - 1) * limit;\n\n    // Validate timeframe with safe table name mapping\n    const validTimeframes = {\n      'daily': 'buy_sell_daily',\n      'weekly': 'buy_sell_weekly', \n      'monthly': 'buy_sell_monthly'\n    };\n    \n    if (!validTimeframes[timeframe]) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = validTimeframes[timeframe];\n    \n    const sellSignalsQuery = `",
      "context": "    338: router.get('/sell', async (req, res) => {\n    339:   try {\n>>> 340:     const timeframe = req.query.timeframe || 'daily';\n    341:     const limit = parseInt(req.query.limit) || 25;\n    342:     const page = parseInt(req.query.page) || 1;"
    },
    {
      "file": "webapp/lambda/routes/signals.js",
      "line": 733,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json(responseFormatter.error('Valid symbols array is required', 400));\n    }\n    \n    if (symbols.length > 20) {\n      return res.status(400).json(responseFormatter.error('Maximum 20 symbols allowed per request', 400));\n    }\n    \n    logger.info(`",
      "context": "    731:   try {\n    732:     const userId = req.user.sub;\n>>> 733:     const { symbols, timeframe = '1d', lookback = 100 } = req.body;\n    734:     \n    735:     if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 31,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Sectors query successful: ${result.rows.length} sectors found`",
      "context": "    29:     try {\n    30:       result = await query(sectorsQuery);\n>>> 31:       console.log(`✅ Sectors query successful: ${result.rows.length} sectors found`);\n    32:     } catch (dbError) {\n    33:       console.error('❌ Sectors query failed - comprehensive diagnosis needed', {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 140,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Public stocks sample query successful: ${result.rows.length} stocks found`",
      "context": "    138:     try {\n    139:       result = await query(stocksQuery, [limit]);\n>>> 140:       console.log(`✅ Public stocks sample query successful: ${result.rows.length} stocks found`);\n    141:     } catch (dbError) {\n    142:       console.error('❌ Public stocks sample query failed - comprehensive diagnosis needed', {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 264,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`",
      "context": "    262:     if (search) {\n    263:       paramCount++;\n>>> 264:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n    265:       params.push(`%${search}%`);\n    266:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 265,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    263:       paramCount++;\n    264:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n>>> 265:       params.push(`%${search}%`);\n    266:     }\n    267: "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND s.sector = $${paramCount}`",
      "context": "    269:     if (sector && sector.trim() !== '') {\n    270:       paramCount++;\n>>> 271:       whereClause += ` AND s.sector = $${paramCount}`;\n    272:       params.push(sector);\n    273:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND ss.exchange = $${paramCount}`",
      "context": "    276:     if (exchange && exchange.trim() !== '') {\n    277:       paramCount++;\n>>> 278:       whereClause += ` AND ss.exchange = $${paramCount}`;\n    279:       params.push(exchange);\n    280:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 297,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        -- Stock symbols data\n        ss.symbol,\n        ss.security_name,\n        ss.exchange,\n        ss.market_category,\n        ss.cqs_symbol,\n        ss.financial_status,\n        ss.round_lot_size,\n        ss.etf,\n        ss.secondary_symbol,\n        ss.test_issue,\n        \n        -- Symbols data from loadinfo\n        s.short_name,\n        s.long_name,\n        s.display_name,\n        s.quote_type,\n        s.sector,\n        s.sector_disp,\n        s.industry,\n        s.industry_disp,\n        s.business_summary,\n        s.employee_count,\n        s.website_url,\n        s.ir_website_url,\n        s.address1,\n        s.city,\n        s.state,\n        s.postal_code,\n        s.country,\n        s.phone_number,\n        s.currency,\n        s.market,\n        s.full_exchange_name,\n        \n        -- Market data from loadinfo\n        md.current_price,\n        md.previous_close,\n        md.open_price,\n        md.day_low,\n        md.day_high,\n        md.volume,\n        md.average_volume,\n        md.market_cap,\n        md.fifty_two_week_low,\n        md.fifty_two_week_high,\n        md.fifty_day_avg,\n        md.two_hundred_day_avg,\n        md.bid_price,\n        md.ask_price,\n        md.market_state,\n        \n        -- Key financial metrics from loadinfo\n        km.trailing_pe,\n        km.forward_pe,\n        km.price_to_sales_ttm,\n        km.price_to_book,\n        km.book_value,\n        km.peg_ratio,\n        km.enterprise_value,\n        km.ev_to_revenue,\n        km.ev_to_ebitda,\n        km.total_revenue,\n        km.net_income,\n        km.ebitda,\n        km.gross_profit,\n        km.eps_trailing,\n        km.eps_forward,\n        km.eps_current_year,\n        km.price_eps_current_year,\n        km.earnings_q_growth_pct,\n        km.total_cash,\n        km.cash_per_share,\n        km.operating_cashflow,\n        km.free_cashflow,\n        km.total_debt,\n        km.debt_to_equity,\n        km.quick_ratio,\n        km.current_ratio,\n        km.profit_margin_pct,\n        km.gross_margin_pct,\n        km.ebitda_margin_pct,\n        km.operating_margin_pct,\n        km.return_on_assets_pct,\n        km.return_on_equity_pct,\n        km.revenue_growth_pct,\n        km.earnings_growth_pct,\n        km.dividend_rate,\n        km.dividend_yield,\n        km.five_year_avg_dividend_yield,\n        km.payout_ratio,\n        \n        -- Analyst estimates from loadinfo\n        ae.target_high_price,\n        ae.target_low_price,\n        ae.target_mean_price,\n        ae.target_median_price,\n        ae.recommendation_key,\n        ae.recommendation_mean,\n        ae.analyst_opinion_count,\n        ae.average_analyst_rating,\n        \n        -- Governance scores from loadinfo\n        gs.audit_risk,\n        gs.board_risk,\n        gs.compensation_risk,\n        gs.shareholder_rights_risk,\n        gs.overall_risk,\n        \n        -- Leadership team count (subquery)\n        COALESCE(lt_count.executive_count, 0) as leadership_count\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN market_data md ON ss.symbol = md.ticker\n      LEFT JOIN key_metrics km ON ss.symbol = km.ticker\n      LEFT JOIN analyst_estimates ae ON ss.symbol = ae.ticker\n      LEFT JOIN governance_scores gs ON ss.symbol = gs.ticker\n      LEFT JOIN (\n        SELECT ticker, COUNT(*) as executive_count \n        FROM leadership_team \n        GROUP BY ticker\n      ) lt_count ON ss.symbol = lt_count.ticker\n      ${whereClause}\n      ORDER BY ${sortColumn} ${sortDirection}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    295: \n    296:     // COMPREHENSIVE QUERY: Include ALL data from loadinfo script\n>>> 297:     const stocksQuery = `\n    298:       SELECT \n    299:         -- Stock symbols data"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 430,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM stock_symbols ss\n      ${whereClause}\n    `",
      "context": "    428: \n    429:     // Count query - also fast\n>>> 430:     const countQuery = `\n    431:       SELECT COUNT(*) as total\n    432:       FROM stock_symbols ss"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 455,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`FAST query results: ${stocksResult.rows.length} stocks, ${total} total`",
      "context": "    453:     const totalPages = Math.ceil(total / limit);\n    454: \n>>> 455:     console.log(`FAST query results: ${stocksResult.rows.length} stocks, ${total} total`);\n    456: \n    457:     // Professional formatting with ALL comprehensive data from loadinfo"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 751,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n          SELECT \n            ss.symbol,\n            ss.security_name,\n            ss.exchange,\n            ss.market_category,\n            ss.cqs_symbol,\n            ss.financial_status,\n            ss.round_lot_size,\n            ss.etf,\n            ss.secondary_symbol,\n            ss.test_issue,\n            NULL as short_name,\n            NULL as long_name,\n            NULL as sector,\n            NULL as industry,\n            NULL as market_cap,\n            NULL as current_price\n          FROM stock_symbols ss\n          ${whereClause}\n          ORDER BY ${sortColumn} ${sortDirection}\n          LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n        `",
      "context": "    749:       console.log('Symbols table missing, using fallback query with stock_symbols only');\n    750:       try {\n>>> 751:         const fallbackQuery = `\n    752:           SELECT \n    753:             ss.symbol,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 775,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n          SELECT COUNT(*) as total\n          FROM stock_symbols ss\n          ${whereClause}\n        `",
      "context": "    773:         `;\n    774:         \n>>> 775:         const fallbackCountQuery = `\n    776:           SELECT COUNT(*) as total\n    777:           FROM stock_symbols ss"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 839,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`sector = $${paramIndex}`",
      "context": "    837:     // Sector filter\n    838:     if (sector && sector !== 'all') {\n>>> 839:       whereConditions.push(`sector = $${paramIndex}`);\n    840:       queryParams.push(sector);\n    841:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 848,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`market_cap >= $${paramIndex}`",
      "context": "    846:       const [min, max] = marketCap.split('-').map(v => parseFloat(v) * 1000000000); // Convert billions to actual value\n    847:       if (min) {\n>>> 848:         whereConditions.push(`market_cap >= $${paramIndex}`);\n    849:         queryParams.push(min);\n    850:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 853,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`market_cap <= $${paramIndex}`",
      "context": "    851:       }\n    852:       if (max && max > 0) {\n>>> 853:         whereConditions.push(`market_cap <= $${paramIndex}`);\n    854:         queryParams.push(max);\n    855:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 863,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`current_price >= $${paramIndex}`",
      "context": "    861:       const [minPrice, maxPrice] = priceRange.split('-').map(v => parseFloat(v));\n    862:       if (minPrice) {\n>>> 863:         whereConditions.push(`current_price >= $${paramIndex}`);\n    864:         queryParams.push(minPrice);\n    865:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 868,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`current_price <= $${paramIndex}`",
      "context": "    866:       }\n    867:       if (maxPrice && maxPrice > 0) {\n>>> 868:         whereConditions.push(`current_price <= $${paramIndex}`);\n    869:         queryParams.push(maxPrice);\n    870:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 877,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`volume >= $${paramIndex}`",
      "context": "    875:     if (volume) {\n    876:       const minVolume = parseInt(volume) * 1000000; // Convert millions to actual volume\n>>> 877:       whereConditions.push(`volume >= $${paramIndex}`);\n    878:       queryParams.push(minVolume);\n    879:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 887,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Screening with conditions: ${whereClause}`",
      "context": "    885:     const safeSortOrder = ['ASC', 'DESC'].includes(sortOrder.toUpperCase()) ? sortOrder.toUpperCase() : 'DESC';\n    886:     \n>>> 887:     console.log(`📊 Screening with conditions: ${whereClause}`);\n    888:     console.log(`📊 Query parameters:`, queryParams);\n    889:     "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 891,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total \n      FROM stocks \n      WHERE ${whereClause}\n    `",
      "context": "    889:     \n    890:     // Get total count for pagination\n>>> 891:     const countQuery = `\n    892:       SELECT COUNT(*) as total \n    893:       FROM stocks "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 901,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        company_name,\n        sector,\n        current_price,\n        change_percent,\n        volume,\n        market_cap,\n        pe_ratio,\n        dividend_yield,\n        beta\n      FROM stocks \n      WHERE ${whereClause}\n      ORDER BY ${safeSortBy} ${safeSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    899:     \n    900:     // Get the actual stocks\n>>> 901:     const stocksQuery = `\n    902:       SELECT \n    903:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 923,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved ${stocksResult.rows.length} stocks out of ${totalStocks} total matching criteria`",
      "context": "    921:     const stocksResult = await query(stocksQuery, queryParams, 10000); // 10 second timeout for complex screening\n    922:     \n>>> 923:     console.log(`✅ Retrieved ${stocksResult.rows.length} stocks out of ${totalStocks} total matching criteria`);\n    924:     \n    925:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 968,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SIMPLIFIED stock endpoint called for: ${tickerUpper}`",
      "context": "    966:     const tickerUpper = ticker.toUpperCase();\n    967:     \n>>> 968:     console.log(`SIMPLIFIED stock endpoint called for: ${tickerUpper}`);\n    969:     \n    970:     // SINGLE OPTIMIZED QUERY - Get everything we need in one go"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1003,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Symbol '${tickerUpper}' not found in database`",
      "context": "    1001:         error: 'Stock not found',\n    1002:         symbol: tickerUpper,\n>>> 1003:         message: `Symbol '${tickerUpper}' not found in database`,\n    1004:         timestamp: new Date().toISOString()\n    1005:       });"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1043,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ SIMPLIFIED: Successfully returned basic data for ${tickerUpper}`",
      "context": "    1041:     };\n    1042:     \n>>> 1043:     console.log(`✅ SIMPLIFIED: Successfully returned basic data for ${tickerUpper}`);\n    1044:     \n    1045:     res.json(response);"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1066,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${symbol}_${timeframe}_${limit}`",
      "context": "    1064: \n    1065: // Helper function to get cache key\n>>> 1066: const getCacheKey = (symbol, timeframe, limit) => `${symbol}_${timeframe}_${limit}`;\n    1067: \n    1068: // Helper function to clean expired cache entries"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1088,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 OPTIMIZED prices endpoint: ${symbol}, timeframe: ${timeframe}, limit: ${limit}`",
      "context": "    1086:   const cacheKey = getCacheKey(symbol, timeframe, limit);\n    1087:   \n>>> 1088:   console.log(`🚀 OPTIMIZED prices endpoint: ${symbol}, timeframe: ${timeframe}, limit: ${limit}`);\n    1089:   \n    1090:   try {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1094,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📦 Cache hit for ${symbol} (${Date.now() - cached.timestamp}ms old)`",
      "context": "    1092:     const cached = priceCache.get(cacheKey);\n    1093:     if (cached && (Date.now() - cached.timestamp < CACHE_TTL)) {\n>>> 1094:       console.log(`📦 Cache hit for ${symbol} (${Date.now() - cached.timestamp}ms old)`);\n    1095:       return res.json({\n    1096:         ...cached.data,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1167,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ No historical data found for ${symbol} - comprehensive diagnosis needed`",
      "context": "    1165:     if (!result.rows || result.rows.length === 0) {\n    1166:       // Return structured empty response with comprehensive diagnostics\n>>> 1167:       console.error(`❌ No historical data found for ${symbol} - comprehensive diagnosis needed`, {\n    1168:         symbol,\n    1169:         database_query_failed: true,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1254,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${low52Week.toFixed(2)} - ${high52Week.toFixed(2)}`",
      "context": "    1252:         high52Week: parseFloat(high52Week.toFixed(4)),\n    1253:         low52Week: parseFloat(low52Week.toFixed(4)),\n>>> 1254:         priceRange: `${low52Week.toFixed(2)} - ${high52Week.toFixed(2)}`\n    1255:       },\n    1256:       cached: false,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1267,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ ${symbol} prices fetched: ${prices.length} records in ${Date.now() - startTime}ms`",
      "context": "    1265:     });\n    1266: \n>>> 1267:     console.log(`✅ ${symbol} prices fetched: ${prices.length} records in ${Date.now() - startTime}ms`);\n    1268:     res.json(responseData);\n    1269:     "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error fetching ${symbol} prices:`",
      "context": "    1269:     \n    1270:   } catch (error) {\n>>> 1271:     console.error(`❌ Error fetching ${symbol} prices:`, error);\n    1272:     \n    1273:     // Graceful fallback - try to return cached data even if expired"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1276,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Returning stale cache for ${symbol} due to error`",
      "context": "    1274:     const cached = priceCache.get(cacheKey);\n    1275:     if (cached) {\n>>> 1276:       console.log(`🔄 Returning stale cache for ${symbol} due to error`);\n    1277:       return res.json({\n    1278:         ...cached.data,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1307,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [STOCKS] Recent prices endpoint called for ticker: ${ticker}, limit: ${limit}`",
      "context": "    1305:     const limit = Math.min(parseInt(req.query.limit) || 30, 90); // Max 90 days for performance\n    1306:     \n>>> 1307:     console.log(`📊 [STOCKS] Recent prices endpoint called for ticker: ${ticker}, limit: ${limit}`);\n    1308:     \n    1309:     const pricesQuery = `"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1320,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [STOCKS] No price data found for ${ticker}`",
      "context": "    1318:     \n    1319:     if (result.rows.length === 0) {\n>>> 1320:       console.log(`📊 [STOCKS] No price data found for ${ticker}`);\n    1321:       return res.status(404).json({\n    1322:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1360,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [STOCKS] Successfully returning ${pricesWithChange.length} price records for ${ticker}`",
      "context": "    1358:     });\n    1359: \n>>> 1360:     console.log(`📊 [STOCKS] Successfully returning ${pricesWithChange.length} price records for ${ticker}`);\n    1361: \n    1362:     res.json({"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 264,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`",
      "context": "    262:     if (search) {\n    263:       paramCount++;\n>>> 264:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n    265:       params.push(`%${search}%`);\n    266:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 265,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`%${search}%`",
      "context": "    263:       paramCount++;\n    264:       whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n>>> 265:       params.push(`%${search}%`);\n    266:     }\n    267: "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND s.sector = $${paramCount}`",
      "context": "    269:     if (sector && sector.trim() !== '') {\n    270:       paramCount++;\n>>> 271:       whereClause += ` AND s.sector = $${paramCount}`;\n    272:       params.push(sector);\n    273:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND ss.exchange = $${paramCount}`",
      "context": "    276:     if (exchange && exchange.trim() !== '') {\n    277:       paramCount++;\n>>> 278:       whereClause += ` AND ss.exchange = $${paramCount}`;\n    279:       params.push(exchange);\n    280:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 297,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        -- Stock symbols data\n        ss.symbol,\n        ss.security_name,\n        ss.exchange,\n        ss.market_category,\n        ss.cqs_symbol,\n        ss.financial_status,\n        ss.round_lot_size,\n        ss.etf,\n        ss.secondary_symbol,\n        ss.test_issue,\n        \n        -- Symbols data from loadinfo\n        s.short_name,\n        s.long_name,\n        s.display_name,\n        s.quote_type,\n        s.sector,\n        s.sector_disp,\n        s.industry,\n        s.industry_disp,\n        s.business_summary,\n        s.employee_count,\n        s.website_url,\n        s.ir_website_url,\n        s.address1,\n        s.city,\n        s.state,\n        s.postal_code,\n        s.country,\n        s.phone_number,\n        s.currency,\n        s.market,\n        s.full_exchange_name,\n        \n        -- Market data from loadinfo\n        md.current_price,\n        md.previous_close,\n        md.open_price,\n        md.day_low,\n        md.day_high,\n        md.volume,\n        md.average_volume,\n        md.market_cap,\n        md.fifty_two_week_low,\n        md.fifty_two_week_high,\n        md.fifty_day_avg,\n        md.two_hundred_day_avg,\n        md.bid_price,\n        md.ask_price,\n        md.market_state,\n        \n        -- Key financial metrics from loadinfo\n        km.trailing_pe,\n        km.forward_pe,\n        km.price_to_sales_ttm,\n        km.price_to_book,\n        km.book_value,\n        km.peg_ratio,\n        km.enterprise_value,\n        km.ev_to_revenue,\n        km.ev_to_ebitda,\n        km.total_revenue,\n        km.net_income,\n        km.ebitda,\n        km.gross_profit,\n        km.eps_trailing,\n        km.eps_forward,\n        km.eps_current_year,\n        km.price_eps_current_year,\n        km.earnings_q_growth_pct,\n        km.total_cash,\n        km.cash_per_share,\n        km.operating_cashflow,\n        km.free_cashflow,\n        km.total_debt,\n        km.debt_to_equity,\n        km.quick_ratio,\n        km.current_ratio,\n        km.profit_margin_pct,\n        km.gross_margin_pct,\n        km.ebitda_margin_pct,\n        km.operating_margin_pct,\n        km.return_on_assets_pct,\n        km.return_on_equity_pct,\n        km.revenue_growth_pct,\n        km.earnings_growth_pct,\n        km.dividend_rate,\n        km.dividend_yield,\n        km.five_year_avg_dividend_yield,\n        km.payout_ratio,\n        \n        -- Analyst estimates from loadinfo\n        ae.target_high_price,\n        ae.target_low_price,\n        ae.target_mean_price,\n        ae.target_median_price,\n        ae.recommendation_key,\n        ae.recommendation_mean,\n        ae.analyst_opinion_count,\n        ae.average_analyst_rating,\n        \n        -- Governance scores from loadinfo\n        gs.audit_risk,\n        gs.board_risk,\n        gs.compensation_risk,\n        gs.shareholder_rights_risk,\n        gs.overall_risk,\n        \n        -- Leadership team count (subquery)\n        COALESCE(lt_count.executive_count, 0) as leadership_count\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN market_data md ON ss.symbol = md.ticker\n      LEFT JOIN key_metrics km ON ss.symbol = km.ticker\n      LEFT JOIN analyst_estimates ae ON ss.symbol = ae.ticker\n      LEFT JOIN governance_scores gs ON ss.symbol = gs.ticker\n      LEFT JOIN (\n        SELECT ticker, COUNT(*) as executive_count \n        FROM leadership_team \n        GROUP BY ticker\n      ) lt_count ON ss.symbol = lt_count.ticker\n      ${whereClause}\n      ORDER BY ${sortColumn} ${sortDirection}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `",
      "context": "    295: \n    296:     // COMPREHENSIVE QUERY: Include ALL data from loadinfo script\n>>> 297:     const stocksQuery = `\n    298:       SELECT \n    299:         -- Stock symbols data"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1614,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      ${whereClause}\n    `",
      "context": "    1612: \n    1613:     // Count query\n>>> 1614:     const countQuery = `\n    1615:       SELECT COUNT(*) as total\n    1616:       FROM stock_symbols ss"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1631,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Screen query results: ${stocksResult.rows.length} stocks, ${total} total`",
      "context": "    1629:     const totalPages = Math.ceil(total / limit);\n    1630: \n>>> 1631:     console.log(`Screen query results: ${stocksResult.rows.length} stocks, ${total} total`);\n    1632: \n    1633:     // Use the same formatting as the main endpoint"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 2013,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to insert row for ${row[0]} ${row[1]}:`",
      "context": "    2011:         insertedCount++;\n    2012:       } catch (insertError) {\n>>> 2013:         console.warn(`Failed to insert row for ${row[0]} ${row[1]}:`, insertError.message);\n    2014:       }\n    2015:     }"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 2017,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sample data inserted: ${insertedCount} rows`",
      "context": "    2015:     }\n    2016:     \n>>> 2017:     console.log(`Sample data inserted: ${insertedCount} rows`);\n    2018:     \n    2019:     // Verify data exists"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 2076,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Screen stats query successful: ${result.rows.length} stats found`",
      "context": "    2074:     try {\n    2075:       result = await query(statsQuery);\n>>> 2076:       console.log(`✅ Screen stats query successful: ${result.rows.length} stats found`);\n    2077:     } catch (dbError) {\n    2078:       console.error('❌ Screen stats query failed - comprehensive diagnosis needed', {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1128,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    1126:           volume::BIGINT as volume,\n    1127:           LAG(close) OVER (ORDER BY date DESC) as prev_close\n>>> 1128:         FROM ${tableName}\n    1129:         WHERE symbol = $1 \n    1130:           AND date >= CURRENT_DATE - INTERVAL '2 years'"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 257,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause +",
      "context": "    255:     const sortOrder = req.validated.sortOrder || 'asc';\n    256:     \n>>> 257:     let whereClause = 'WHERE 1=1';\n    258:     const params = [];\n    259:     let paramCount = 0;"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1397,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE exchange IS NOT NULL\n      GROUP BY exchange\n      ORDER BY count DESC, exchange ASC\n    `;\n    \n    const result = await query(sectorsQuery);\n    \n    res.json({\n      data: result.rows.map(row => ({\n        name: row.exchange,\n        value: row.exchange,\n        count: parseInt(row.count)\n      })),\n      total: result.rows.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching stock exchanges:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch stock exchanges', \n      details: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Screen stocks with advanced filtering - DISABLED: Moved to line 520 to fix route collision\n// router.get('/screen', async (req, res) => {\n/*  try {\n    console.log('🔍 Screen endpoint HIT! Method:', req.method, 'URL:', req.url);\n    console.log('🔍 Screen endpoint called with params:', req.query);\n    console.log('🔍 Request headers:', req.headers);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 25, 100);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const exchange = req.query.exchange || '';\n    const sortBy = req.query.sortBy || 'symbol';\n    const sortOrder = req.query.sortOrder || 'asc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause +",
      "context": "    1395:       SELECT exchange, COUNT(*) as count\n    1396:       FROM stock_symbols\n>>> 1397:       WHERE exchange IS NOT NULL\n    1398:       GROUP BY exchange\n    1399:       ORDER BY count DESC, exchange ASC"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 126,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.limit) || 5;\n    \n    // Use robust query with proper error handling instead of fallback chains\n    const stocksQuery = `",
      "context": "    124:     console.log('Public stocks sample endpoint called for monitoring');\n    125:     \n>>> 126:     const limit = parseInt(req.query.limit) || 5;\n    127:     \n    128:     // Use robust query with proper error handling instead of fallback chains"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 244,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query);\n    console.log('Triggering workflow deploy');\n    \n    // Use validated and sanitized parameters from validation middleware\n    const page = req.validated.page || 1;\n    const limit = req.validated.limit || 50;\n    const offset = (page - 1) * limit;\n    const search = req.validated.search || '';\n    const sector = req.validated.sector || '';\n    const exchange = req.validated.exchange || '';\n    const sortBy = req.validated.sortBy || 'symbol';\n    const sortOrder = req.validated.sortOrder || 'asc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += `",
      "context": "    242: router.get('/', stocksListValidation, async (req, res) => {\n    243:   try {\n>>> 244:     console.log('OPTIMIZED Stocks main endpoint called with params:', req.query);\n    245:     console.log('Triggering workflow deploy');\n    246:     "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 817,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query);\n    \n    const {\n      sector,\n      marketCap,\n      priceRange,\n      volume,\n      sortBy = 'market_cap',\n      sortOrder = 'DESC',\n      page = 1,\n      limit = 25\n    } = req.query;\n    \n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    \n    // Build dynamic query based on screening criteria\n    let whereConditions = ['current_price IS NOT NULL', 'market_cap IS NOT NULL'];\n    let queryParams = [];\n    let paramIndex = 1;\n    \n    // Sector filter\n    if (sector && sector !== 'all') {\n      whereConditions.push(`",
      "context": "    815: router.get('/screen', async (req, res) => {\n    816:   try {\n>>> 817:     console.log('🔍 Stock screening endpoint called with params:', req.query);\n    818:     \n    819:     const {"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 965,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const tickerUpper = ticker.toUpperCase();\n    \n    console.log(`",
      "context": "    963: router.get('/:ticker', async (req, res) => {\n    964:   try {\n>>> 965:     const { ticker } = req.params;\n    966:     const tickerUpper = ticker.toUpperCase();\n    967:     "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1051,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.ticker,\n      message: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get stock price history \n// In-memory cache for frequently requested price data\nconst priceCache = new Map();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\nconst MAX_CACHE_SIZE = 1000; // Limit cache size\n\n// Helper function to get cache key\nconst getCacheKey = (symbol, timeframe, limit) => `",
      "context": "    1049:     res.status(500).json({ \n    1050:       error: 'Failed to fetch stock data', \n>>> 1051:       symbol: req.params.ticker,\n    1052:       message: error.message,\n    1053:       data: [], // Always return data as an array for frontend safety"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1081,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const timeframe = req.query.timeframe || 'daily';\n  const limit = Math.min(parseInt(req.query.limit) || 30, 365); // Increased max to 1 year\n  \n  const symbol = ticker.toUpperCase();\n  const cacheKey = getCacheKey(symbol, timeframe, limit);\n  \n  console.log(`",
      "context": "    1079: router.get('/:ticker/prices', async (req, res) => {\n    1080:   const startTime = Date.now();\n>>> 1081:   const { ticker } = req.params;\n    1082:   const timeframe = req.query.timeframe || 'daily';\n    1083:   const limit = Math.min(parseInt(req.query.limit) || 30, 365); // Increased max to 1 year"
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1304,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const limit = Math.min(parseInt(req.query.limit) || 30, 90); // Max 90 days for performance\n    \n    console.log(`",
      "context": "    1302: router.get('/:ticker/prices/recent', async (req, res) => {\n    1303:   try {\n>>> 1304:     const { ticker } = req.params;\n    1305:     const limit = Math.min(parseInt(req.query.limit) || 30, 90); // Max 90 days for performance\n    1306:     "
    },
    {
      "file": "webapp/lambda/routes/stocks.js",
      "line": 1383,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.ticker,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get available filters - exchanges instead of sectors\nrouter.get('/filters/sectors', async (req, res) => {\n  try {\n    console.log('Stock filters/sectors (exchanges) endpoint called');\n    \n    const sectorsQuery = `\n      SELECT exchange, COUNT(*) as count\n      FROM stock_symbols\n      WHERE exchange IS NOT NULL\n      GROUP BY exchange\n      ORDER BY count DESC, exchange ASC\n    `;\n    \n    const result = await query(sectorsQuery);\n    \n    res.json({\n      data: result.rows.map(row => ({\n        name: row.exchange,\n        value: row.exchange,\n        count: parseInt(row.count)\n      })),\n      total: result.rows.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching stock exchanges:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch stock exchanges', \n      details: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Screen stocks with advanced filtering - DISABLED: Moved to line 520 to fix route collision\n// router.get('/screen', async (req, res) => {\n/*  try {\n    console.log('🔍 Screen endpoint HIT! Method:', req.method, 'URL:', req.url);\n    console.log('🔍 Screen endpoint called with params:', req.query);\n    console.log('🔍 Request headers:', req.headers);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 25, 100);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const exchange = req.query.exchange || '';\n    const sortBy = req.query.sortBy || 'symbol';\n    const sortOrder = req.query.sortOrder || 'asc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += `",
      "context": "    1381:       details: error.message,\n    1382:       data: [], // Always return data as an array for frontend safety\n>>> 1383:       ticker: req.params.ticker,\n    1384:       timestamp: new Date().toISOString()\n    1385:     });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 117,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Technical data request: ${timeframe}, page ${page}, limit ${limit}`",
      "context": "    115:     \n    116:     const offset = (page - 1) * limit;\n>>> 117:     console.log(`📊 Technical data request: ${timeframe}, page ${page}, limit ${limit}`);\n    118: \n    119:     // Build WHERE clause"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 126,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    124:     // Symbol filter\n    125:     if (symbol && symbol.trim()) {\n>>> 126:       whereClause += ` AND symbol = $${paramIndex}`;\n    127:       params.push(symbol.toUpperCase());\n    128:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 133,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date >= $${paramIndex}`",
      "context": "    131:     // Date filters\n    132:     if (start_date) {\n>>> 133:       whereClause += ` AND date >= $${paramIndex}`;\n    134:       params.push(start_date);\n    135:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date <= $${paramIndex}`",
      "context": "    137: \n    138:     if (end_date) {\n>>> 139:       whereClause += ` AND date <= $${paramIndex}`;\n    140:       params.push(end_date);\n    141:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND rsi >= $${paramIndex}`",
      "context": "    144:     // Technical indicator filters (using validated and sanitized values)\n    145:     if (rsi_min !== undefined && rsi_min !== null) {\n>>> 146:       whereClause += ` AND rsi >= $${paramIndex}`;\n    147:       params.push(rsi_min);\n    148:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND rsi <= $${paramIndex}`",
      "context": "    150: \n    151:     if (rsi_max !== undefined && rsi_max !== null) {\n>>> 152:       whereClause += ` AND rsi <= $${paramIndex}`;\n    153:       params.push(rsi_max);\n    154:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 158,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND macd >= $${paramIndex}`",
      "context": "    156: \n    157:     if (macd_min !== undefined && macd_min !== null) {\n>>> 158:       whereClause += ` AND macd >= $${paramIndex}`;\n    159:       params.push(macd_min);\n    160:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 164,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND macd <= $${paramIndex}`",
      "context": "    162: \n    163:     if (macd_max !== undefined && macd_max !== null) {\n>>> 164:       whereClause += ` AND macd <= $${paramIndex}`;\n    165:       params.push(macd_max);\n    166:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 170,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sma_20 >= $${paramIndex}`",
      "context": "    168: \n    169:     if (sma_min !== undefined && sma_min !== null) {\n>>> 170:       whereClause += ` AND sma_20 >= $${paramIndex}`;\n    171:       params.push(sma_min);\n    172:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sma_20 <= $${paramIndex}`",
      "context": "    174: \n    175:     if (sma_max !== undefined && sma_max !== null) {\n>>> 176:       whereClause += ` AND sma_20 <= $${paramIndex}`;\n    177:       params.push(sma_max);\n    178:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`technical_data_${timeframe}`",
      "context": "    180: \n    181:     // Determine table name based on timeframe\n>>> 182:     const tableName = `technical_data_${timeframe}`;\n    183: \n    184:     // Check if table exists using enhanced table checking"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 188,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not found, returning empty data`",
      "context": "    186:     \n    187:     if (!tableStatusCheck[tableName]) {\n>>> 188:       console.log(`Technical data table for ${timeframe} timeframe not found, returning empty data`);\n    189:       return res.json({\n    190:         success: true,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 213,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No ${timeframe} technical data available`",
      "context": "    211:             sma_max: sma_max || null\n    212:           },\n>>> 213:           message: `No ${timeframe} technical data available`\n    214:         }\n    215:       });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 219,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM ${tableName}\n      ${whereClause}\n    `",
      "context": "    217: \n    218:     // Get total count\n>>> 219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n    221:       FROM ${tableName}"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 228,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        date,\n        rsi,\n        macd,\n        macd_signal,\n        macd_hist,\n        mom,\n        roc,\n        adx,\n        plus_di,\n        minus_di,\n        atr,\n        ad,\n        cmf,\n        mfi,\n        td_sequential,\n        td_combo,\n        marketwatch,\n        dm,\n        sma_10,\n        sma_20,\n        sma_50,\n        sma_150,\n        sma_200,\n        ema_4,\n        ema_9,\n        ema_21,\n        bbands_lower,\n        bbands_middle,\n        bbands_upper,\n        pivot_high,\n        pivot_low,\n        pivot_high_triggered,\n        pivot_low_triggered,\n        fetched_at\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY date DESC, symbol\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    226: \n    227:     // Get technical data - updated to match actual table structure\n>>> 228:     const dataQuery = `\n    229:       SELECT \n    230:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 356,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical summary endpoint called for timeframe: ${timeframe}`",
      "context": "    354:   const { timeframe } = req.params;\n    355:   \n>>> 356:   // console.log(`Technical summary endpoint called for timeframe: ${timeframe}`);\n    357: \n    358:   try {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`technical_data_${timeframe}`",
      "context": "    180: \n    181:     // Determine table name based on timeframe\n>>> 182:     const tableName = `technical_data_${timeframe}`;\n    183: \n    184:     // Check if table exists using enhanced table checking"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not found`",
      "context": "    369: \n    370:     if (!tableExists.rows[0].exists) {\n>>> 371:       console.log(`Technical data table for ${timeframe} timeframe not found`);\n    372:       return res.status(404).json({\n    373:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 374,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not available`",
      "context": "    372:       return res.status(404).json({\n    373:         success: false,\n>>> 374:         error: `Technical data table for ${timeframe} timeframe not available`,\n    375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 375,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist. Please ensure technical data has been loaded.`",
      "context": "    373:         success: false,\n    374:         error: `Technical data table for ${timeframe} timeframe not available`,\n>>> 375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });\n    377:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 380,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        COUNT(*) as total_records,\n        COUNT(DISTINCT symbol) as unique_symbols,\n        MIN(date) as earliest_date,\n        MAX(date) as latest_date,\n        AVG(rsi) as avg_rsi,\n        AVG(macd) as avg_macd,\n        AVG(sma_20) as avg_sma_20,\n        AVG(volume) as avg_volume\n      FROM ${tableName}\n      WHERE rsi IS NOT NULL OR macd IS NOT NULL\n    `",
      "context": "    378: \n    379:     // Get summary statistics\n>>> 380:     const summaryQuery = `\n    381:       SELECT \n    382:         COUNT(*) as total_records,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 398,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT symbol, COUNT(*) as record_count\n      FROM ${tableName}\n      GROUP BY symbol\n      ORDER BY record_count DESC\n      LIMIT 10\n    `",
      "context": "    396: \n    397:     // Get top symbols by record count\n>>> 398:     const topSymbolsQuery = `\n    399:       SELECT symbol, COUNT(*) as record_count\n    400:       FROM ${tableName}"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 449,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`",
      "context": "    447:       return res.status(400).json({\n    448:         error: 'Unsupported timeframe',\n>>> 449:         message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n    450:       });\n    451:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`technical_data_${timeframe}`",
      "context": "    180: \n    181:     // Determine table name based on timeframe\n>>> 182:     const tableName = `technical_data_${timeframe}`;\n    183: \n    184:     // Check if table exists using enhanced table checking"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not found`",
      "context": "    369: \n    370:     if (!tableExists.rows[0].exists) {\n>>> 371:       console.log(`Technical data table for ${timeframe} timeframe not found`);\n    372:       return res.status(404).json({\n    373:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 374,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not available`",
      "context": "    372:       return res.status(404).json({\n    373:         success: false,\n>>> 374:         error: `Technical data table for ${timeframe} timeframe not available`,\n    375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 375,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist. Please ensure technical data has been loaded.`",
      "context": "    373:         success: false,\n    374:         error: `Technical data table for ${timeframe} timeframe not available`,\n>>> 375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });\n    377:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 474,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT t1.* FROM ${tableName} t1\n      INNER JOIN (\n        SELECT symbol, MAX(date) AS max_date\n        FROM ${tableName}\n        GROUP BY symbol\n      ) t2 ON t1.symbol = t2.symbol AND t1.date = t2.max_date\n      LEFT JOIN stock_symbols ss ON t1.symbol = ss.symbol\n      ORDER BY t1.symbol ASC\n      LIMIT 500\n    `",
      "context": "    472:     \n    473:     // Subquery to get latest date per symbol\n>>> 474:     const latestQuery = `\n    475:       SELECT t1.* FROM ${tableName} t1\n    476:       INNER JOIN ("
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 509,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [TECHNICAL] Fetching technical data for ${symbol}`",
      "context": "    507: router.get('/data/:symbol', async (req, res) => {\n    508:   const { symbol } = req.params;\n>>> 509:   console.log(`📊 [TECHNICAL] Fetching technical data for ${symbol}`);\n    510:   \n    511:   try {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 522,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table not found for ${symbol}`",
      "context": "    520: \n    521:     if (!tableExists.rows[0].exists) {\n>>> 522:       console.log(`Technical data table not found for ${symbol}`);\n    523:       return res.status(404).json({\n    524:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 573,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No technical data found for symbol ${symbol}`",
      "context": "    571:       return res.status(404).json({\n    572:         success: false,\n>>> 573:         error: `No technical data found for symbol ${symbol}`\n    574:       });\n    575:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 583,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [TECHNICAL] Error fetching technical data for ${symbol}:`",
      "context": "    581:     });\n    582:   } catch (error) {\n>>> 583:     console.error(`❌ [TECHNICAL] Error fetching technical data for ${symbol}:`, error);\n    584:     res.status(500).json({\n    585:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 596,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 [TECHNICAL] Fetching technical indicators for ${symbol}`",
      "context": "    594: router.get('/indicators/:symbol', async (req, res) => {\n    595:   const { symbol } = req.params;\n>>> 596:   console.log(`📈 [TECHNICAL] Fetching technical indicators for ${symbol}`);\n    597:   \n    598:   try {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 522,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table not found for ${symbol}`",
      "context": "    520: \n    521:     if (!tableExists.rows[0].exists) {\n>>> 522:       console.log(`Technical data table not found for ${symbol}`);\n    523:       return res.status(404).json({\n    524:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 655,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No technical indicators found for symbol ${symbol}`",
      "context": "    653:       return res.status(404).json({\n    654:         success: false,\n>>> 655:         error: `No technical indicators found for symbol ${symbol}`\n    656:       });\n    657:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 666,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [TECHNICAL] Error fetching technical indicators for ${symbol}:`",
      "context": "    664:     });\n    665:   } catch (error) {\n>>> 666:     console.error(`❌ [TECHNICAL] Error fetching technical indicators for ${symbol}:`, error);\n    667:     res.status(500).json({\n    668:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 680,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [TECHNICAL] Fetching technical history for ${symbol} (${days} days)`",
      "context": "    678:   const { symbol } = req.params;\n    679:   const { days = 90 } = req.query;\n>>> 680:   console.log(`📊 [TECHNICAL] Fetching technical history for ${symbol} (${days} days)`);\n    681:   \n    682:   try {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 522,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table not found for ${symbol}`",
      "context": "    520: \n    521:     if (!tableExists.rows[0].exists) {\n>>> 522:       console.log(`Technical data table not found for ${symbol}`);\n    523:       return res.status(404).json({\n    524:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 744,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No technical history found for symbol ${symbol}`",
      "context": "    742:       return res.status(404).json({\n    743:         success: false,\n>>> 744:         error: `No technical history found for symbol ${symbol}`\n    745:       });\n    746:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 756,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [TECHNICAL] Error fetching technical history for ${symbol}:`",
      "context": "    754:     });\n    755:   } catch (error) {\n>>> 756:     console.error(`❌ [TECHNICAL] Error fetching technical history for ${symbol}:`, error);\n    757:     res.status(500).json({\n    758:       success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 449,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`",
      "context": "    447:       return res.status(400).json({\n    448:         error: 'Unsupported timeframe',\n>>> 449:         message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n    450:       });\n    451:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`technical_data_${timeframe}`",
      "context": "    180: \n    181:     // Determine table name based on timeframe\n>>> 182:     const tableName = `technical_data_${timeframe}`;\n    183: \n    184:     // Check if table exists using enhanced table checking"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 792,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not found for ${symbol}`",
      "context": "    790: \n    791:     if (!tableExists.rows[0].exists) {\n>>> 792:       console.log(`Technical data table for ${timeframe} timeframe not found for ${symbol}`);\n    793:       return res.status(404).json({\n    794:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 374,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not available`",
      "context": "    372:       return res.status(404).json({\n    373:         success: false,\n>>> 374:         error: `Technical data table for ${timeframe} timeframe not available`,\n    375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 375,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist. Please ensure technical data has been loaded.`",
      "context": "    373:         success: false,\n    374:         error: `Technical data table for ${timeframe} timeframe not available`,\n>>> 375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });\n    377:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 126,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    124:     // Symbol filter\n    125:     if (symbol && symbol.trim()) {\n>>> 126:       whereClause += ` AND symbol = $${paramIndex}`;\n    127:       params.push(symbol.toUpperCase());\n    128:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 133,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date >= $${paramIndex}`",
      "context": "    131:     // Date filters\n    132:     if (start_date) {\n>>> 133:       whereClause += ` AND date >= $${paramIndex}`;\n    134:       params.push(start_date);\n    135:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND date <= $${paramIndex}`",
      "context": "    137: \n    138:     if (end_date) {\n>>> 139:       whereClause += ` AND date <= $${paramIndex}`;\n    140:       params.push(end_date);\n    141:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 449,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`",
      "context": "    447:       return res.status(400).json({\n    448:         error: 'Unsupported timeframe',\n>>> 449:         message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n    450:       });\n    451:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`technical_data_${timeframe}`",
      "context": "    180: \n    181:     // Determine table name based on timeframe\n>>> 182:     const tableName = `technical_data_${timeframe}`;\n    183: \n    184:     // Check if table exists using enhanced table checking"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not found`",
      "context": "    369: \n    370:     if (!tableExists.rows[0].exists) {\n>>> 371:       console.log(`Technical data table for ${timeframe} timeframe not found`);\n    372:       return res.status(404).json({\n    373:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 374,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Technical data table for ${timeframe} timeframe not available`",
      "context": "    372:       return res.status(404).json({\n    373:         success: false,\n>>> 374:         error: `Technical data table for ${timeframe} timeframe not available`,\n    375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 375,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist. Please ensure technical data has been loaded.`",
      "context": "    373:         success: false,\n    374:         error: `Technical data table for ${timeframe} timeframe not available`,\n>>> 375:         message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n    376:       });\n    377:     }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 219,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT COUNT(*) as total\n      FROM ${tableName}\n      ${whereClause}\n    `",
      "context": "    217: \n    218:     // Get total count\n>>> 219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n    221:       FROM ${tableName}"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 963,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        rsi,\n        macd,\n        macd_signal,\n        macd_histogram,\n        sma_10,\n        sma_20,\n        sma_50,\n        sma_150,\n        sma_200,\n        ema_4,\n        ema_9,\n        ema_21,\n        ema_12,\n        ema_26,\n        bollinger_upper,\n        bollinger_lower,\n        bollinger_middle,\n        stochastic_k,\n        stochastic_d,\n        williams_r,\n        cci,\n        adx,\n        atr,\n        obv,\n        mfi,\n        roc,\n        momentum,\n        ad,\n        cmf,\n        td_sequential,\n        td_combo,\n        marketwatch,\n        dm,\n        pivot_high,\n        pivot_low,\n        pivot_high_triggered,\n        pivot_low_triggered\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY ${safeSortBy} ${safeSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    961: \n    962:     // Get technical data\n>>> 963:     const dataQuery = `\n    964:       SELECT \n    965:         symbol,"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 1020,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [TECHNICAL] Data query completed: ${dataResult.rows.length} results, total: ${total}`",
      "context": "    1018:     const totalPages = Math.ceil(total / maxLimit);\n    1019: \n>>> 1020:     console.log(`✅ [TECHNICAL] Data query completed: ${dataResult.rows.length} results, total: ${total}`);\n    1021: \n    1022:     if (!dataResult || !Array.isArray(dataResult.rows) || dataResult.rows.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 221,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    219:     const countQuery = `\n    220:       SELECT COUNT(*) as total\n>>> 221:       FROM ${tableName}\n    222:       ${whereClause}\n    223:     `;"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 119,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter\n    if (symbol && symbol.trim()) {\n      whereClause +",
      "context": "    117:     console.log(`📊 Technical data request: ${timeframe}, page ${page}, limit ${limit}`);\n    118: \n>>> 119:     // Build WHERE clause\n    120:     let whereClause = 'WHERE 1=1';\n    121:     const params = [];"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 119,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter\n    if (symbol && symbol.trim()) {\n      whereClause +",
      "context": "    117:     console.log(`📊 Technical data request: ${timeframe}, page ${page}, limit ${limit}`);\n    118: \n>>> 119:     // Build WHERE clause\n    120:     let whereClause = 'WHERE 1=1';\n    121:     const params = [];"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 354,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  \n  // console.log(`",
      "context": "    352: // Technical summary endpoint\n    353: router.get('/:timeframe/summary', async (req, res) => {\n>>> 354:   const { timeframe } = req.params;\n    355:   \n    356:   // console.log(`Technical summary endpoint called for timeframe: ${timeframe}`);"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 444,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.timeframe || 'daily';\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({\n        error: 'Unsupported timeframe',\n        message: `",
      "context": "    442:   try {\n    443:     // Only fetch the latest technicals for each symbol (overview)\n>>> 444:     const timeframe = req.query.timeframe || 'daily';\n    445:     const validTimeframes = ['daily', 'weekly', 'monthly'];\n    446:     if (!validTimeframes.includes(timeframe)) {"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 501,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.timeframe || 'daily'\n    });\n  }\n});\n\n// Get technical data for a specific symbol\nrouter.get('/data/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`",
      "context": "    499:       error: 'Failed to fetch technical overview',\n    500:       details: error.message,\n>>> 501:       timeframe: req.query.timeframe || 'daily'\n    502:     });\n    503:   }"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 508,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  console.log(`",
      "context": "    506: // Get technical data for a specific symbol\n    507: router.get('/data/:symbol', async (req, res) => {\n>>> 508:   const { symbol } = req.params;\n    509:   console.log(`📊 [TECHNICAL] Fetching technical data for ${symbol}`);\n    510:   "
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 678,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { days = 90 } = req.query;\n  console.log(`",
      "context": "    676: // Get technical history for a specific symbol\n    677: router.get('/history/:symbol', async (req, res) => {\n>>> 678:   const { symbol } = req.params;\n    679:   const { days = 90 } = req.query;\n    680:   console.log(`📊 [TECHNICAL] Fetching technical history for ${symbol} (${days} days)`);"
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 769,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { timeframe = 'daily' } = req.query;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({\n        error: 'Unsupported timeframe',\n        message: `",
      "context": "    767: router.get('/support-resistance/:symbol', async (req, res) => {\n    768:   try {\n>>> 769:     const { symbol } = req.params;\n    770:     const { timeframe = 'daily' } = req.query;\n    771:     "
    },
    {
      "file": "webapp/lambda/routes/technical.js",
      "line": 861,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbol.toUpperCase(),\n      timeframe: req.query.timeframe || 'daily'\n    });\n  }\n});\n\n// Get technical data with filtering and pagination\nrouter.get('/data', async (req, res) => {\n  const { \n    symbol,\n    timeframe = 'daily',\n    limit = 25,\n    page = 1,\n    startDate,\n    endDate,\n    sortBy = 'date',\n    sortOrder = 'desc'\n  } = req.query;\n\n  console.log(`📊 [TECHNICAL] Fetching technical data with params:`, {\n    symbol, timeframe, limit, page, startDate, endDate, sortBy, sortOrder\n  });\n\n  try {\n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    const maxLimit = Math.min(parseInt(limit), 200);\n\n    // Build WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter\n    if (symbol && symbol.trim()) {\n      whereClause += `",
      "context": "    859:       error: 'Failed to fetch support resistance levels',\n    860:       details: error.message,\n>>> 861:       symbol: req.params.symbol.toUpperCase(),\n    862:       timeframe: req.query.timeframe || 'daily'\n    863:     });"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 145,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [TRADES] Import requested for user: ${userId}`",
      "context": "    143:     const { startDate, endDate, forceRefresh = false } = req.body;\n    144:     \n>>> 145:     console.log(`🔄 [TRADES] Import requested for user: ${userId}`);\n    146:     \n    147:     // Get user's Alpaca API credentials using simple API key service"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 567,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Retrieved ${total} trades from Alpaca API`",
      "context": "    565:         const paginatedTrades = trades.slice(parseInt(offset), parseInt(offset) + parseInt(limit));\n    566:         \n>>> 567:         console.log(`✅ Retrieved ${total} trades from Alpaca API`);\n    568:         \n    569:         return res.json({"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 686,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Trade analytics requested for user ${userId}, timeframe: ${timeframe}`",
      "context": "    684:     const { timeframe = '3M' } = req.query;\n    685:     \n>>> 686:     console.log(`📊 Trade analytics requested for user ${userId}, timeframe: ${timeframe}`);\n    687:     \n    688:     // Calculate date range"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 712,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 Found ${apiKeysResult.rows.length} active API keys for analytics`",
      "context": "    710:       \n    711:       if (apiKeysResult.rows.length > 0) {\n>>> 712:         console.log(`🔑 Found ${apiKeysResult.rows.length} active API keys for analytics`);\n    713:         \n    714:         for (const keyData of apiKeysResult.rows) {"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 734,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 Retrieved ${activities.length} live trade activities from Alpaca`",
      "context": "    732:                 \n    733:                 liveTradeData = activities;\n>>> 734:                 console.log(`📈 Retrieved ${activities.length} live trade activities from Alpaca`);\n    735:                 break;\n    736:               }"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 738,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to fetch live data from ${keyData.provider}:`",
      "context": "    736:               }\n    737:             } catch (apiError) {\n>>> 738:               console.warn(`Failed to fetch live data from ${keyData.provider}:`, apiError.message);\n    739:             }\n    740:           }"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 776,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Found ${dbMetrics.total_trades} stored trades for analytics`",
      "context": "    774:       if (metricsResult.rows.length > 0) {\n    775:         dbMetrics = metricsResult.rows[0];\n>>> 776:         console.log(`📊 Found ${dbMetrics.total_trades} stored trades for analytics`);\n    777:       }\n    778:       "
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 838,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📈 Using portfolio holdings for analytics (${holdings.total_positions} positions)`",
      "context": "    836:               total_volume: holdings.total_volume\n    837:             };\n>>> 838:             console.log(`📈 Using portfolio holdings for analytics (${holdings.total_positions} positions)`);\n    839:           }\n    840:         } catch (holdingsError) {"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 849,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Processing ${liveTradeData.length} live trade activities`",
      "context": "    847:     let liveMetrics = null;\n    848:     if (liveTradeData && liveTradeData.length > 0) {\n>>> 849:       console.log(`🔄 Processing ${liveTradeData.length} live trade activities`);\n    850:       \n    851:       const buys = liveTradeData.filter(t => t.side === 'buy');"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 953,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Analytics complete - ${totalTrades} trades, ${winRate.toFixed(1)}% win rate, $${totalPnL.toFixed(2)} P&L`",
      "context": "    951:     };\n    952:     \n>>> 953:     console.log(`✅ Analytics complete - ${totalTrades} trades, ${winRate.toFixed(1)}% win rate, $${totalPnL.toFixed(2)} P&L`);\n    954:     res.json(responseData);\n    955:     "
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 1024,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND te.execution_time >= $${++paramCount}`",
      "context": "    1022:     \n    1023:     if (startDate) {\n>>> 1024:       whereClause += ` AND te.execution_time >= $${++paramCount}`;\n    1025:       params.push(startDate);\n    1026:     }"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 1029,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND te.execution_time <= $${++paramCount}`",
      "context": "    1027:     \n    1028:     if (endDate) {\n>>> 1029:       whereClause += ` AND te.execution_time <= $${++paramCount}`;\n    1030:       params.push(endDate);\n    1031:     }"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 1033,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        te.execution_time,\n        te.symbol,\n        te.side,\n        te.quantity,\n        te.price,\n        te.commission,\n        ph.gross_pnl,\n        ph.net_pnl,\n        ph.return_percentage,\n        ph.holding_period_days,\n        ta.trade_pattern_type,\n        ta.pattern_confidence,\n        ta.risk_reward_ratio,\n        s.sector,\n        s.industry\n      FROM trade_executions te\n      LEFT JOIN position_history ph ON te.symbol = ph.symbol \n        AND te.user_id = ph.user_id\n        AND te.execution_time BETWEEN ph.opened_at AND COALESCE(ph.closed_at, NOW())\n      LEFT JOIN trade_analytics ta ON ph.id = ta.position_id\n      LEFT JOIN symbols s ON te.symbol = s.symbol\n      ${whereClause}\n      ORDER BY te.execution_time DESC\n    `",
      "context": "    1031:     }\n    1032:     \n>>> 1033:     const result = await query(`\n    1034:       SELECT \n    1035:         te.execution_time,"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 1090,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`attachment; filename=trade_history_${new Date().toISOString().split('T')[0]}.csv`",
      "context": "    1088:       \n    1089:       res.setHeader('Content-Type', 'text/csv');\n>>> 1090:       res.setHeader('Content-Disposition', `attachment; filename=trade_history_${new Date().toISOString().split('T')[0]}.csv`);\n    1091:       res.send(csv);\n    1092:     } else {"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 970,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    968:         success: false,\n    969:         error: 'Internal server error',\n>>> 970:         message: 'Failed to fetch analytics overview',\n    971:         details: process.env.NODE_ENV === 'development' ? error.message : undefined,\n    972:         timestamp: new Date().toISOString(),"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 738,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${keyData.provider}",
      "context": "    736:               }\n    737:             } catch (apiError) {\n>>> 738:               console.warn(`Failed to fetch live data from ${keyData.provider}:`, apiError.message);\n    739:             }\n    740:           }"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 143,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    console.log(`",
      "context": "    141:       throw new Error('User authentication required');\n    142:     }\n>>> 143:     const { startDate, endDate, forceRefresh = false } = req.body;\n    144:     \n    145:     console.log(`🔄 [TRADES] Import requested for user: ${userId}`);"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 246,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    // Database queries will use the query function directly\n    \n    let statusFilter = '';\n    let params = [userId, parseInt(limit), parseInt(offset)];\n    \n    if (status !== 'all') {\n      statusFilter = '",
      "context": "    244:       throw new Error('User authentication required');\n    245:     }\n>>> 246:     const { status = 'all', limit = 50, offset = 0 } = req.query;\n    247:     // Database queries will use the query function directly\n    248:     "
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 315,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.positionId);\n    // Database queries will use the query function directly\n    \n    // Get position with full analytics\n    const result = await query(`",
      "context": "    313:       throw new Error('User authentication required');\n    314:     }\n>>> 315:     const positionId = parseInt(req.params.positionId);\n    316:     // Database queries will use the query function directly\n    317:     "
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 684,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    console.log(`",
      "context": "    682:       });\n    683:     } \n>>> 684:     const { timeframe = '3M' } = req.query;\n    685:     \n    686:     console.log(`📊 Trade analytics requested for user ${userId}, timeframe: ${timeframe}`);"
    },
    {
      "file": "webapp/lambda/routes/trades.js",
      "line": 1119,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (confirm !== 'DELETE_ALL_TRADE_DATA') {\n      return res.status(400).json({\n        success: false,\n        error: 'Confirmation required. Send { \"confirm\": \"DELETE_ALL_TRADE_DATA\" }'\n      });\n    }\n\n    // Database queries will use the query function directly\n    \n    // Delete all trade-related data for user using transaction\n    await transaction(async (client) => {\n      await client.query('",
      "context": "    1117:       throw new Error('User authentication required');\n    1118:     }\n>>> 1119:     const { confirm } = req.body;\n    1120:     \n    1121:     if (confirm !== 'DELETE_ALL_TRADE_DATA') {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 65,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching user trading strategies`",
      "context": "    63:     const userId = req.user.sub;\n    64:     \n>>> 65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n    66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 77,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] User strategies retrieved`",
      "context": "    75:     }, 'Trading strategies retrieved successfully');\n    76:     \n>>> 77:     logger.info(`✅ [${requestId}] User strategies retrieved`, {\n    78:       totalCount: strategies.length,\n    79:       activeCount: strategies.filter(s => s.is_active).length"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving strategies`",
      "context": "    82:     res.json(response);\n    83:   } catch (error) {\n>>> 84:     logger.error(`❌ [${requestId}] Error retrieving strategies`, {\n    85:       error: error.message,\n    86:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 106,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching strategy details`",
      "context": "    104:     const userId = req.user.sub;\n    105:     \n>>> 106:     logger.info(`📊 [${requestId}] Fetching strategy details`, {\n    107:       strategyId,\n    108:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 126,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Strategy details retrieved`",
      "context": "    124:     const response = responseFormatter.success(strategy, 'Strategy details retrieved successfully');\n    125:     \n>>> 126:     logger.info(`✅ [${requestId}] Strategy details retrieved`, {\n    127:       strategyId,\n    128:       strategyType: strategy.strategy_type"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 133,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving strategy details`",
      "context": "    131:     res.json(response);\n    132:   } catch (error) {\n>>> 133:     logger.error(`❌ [${requestId}] Error retrieving strategy details`, {\n    134:       error: error.message,\n    135:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 157,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Creating new trading strategy`",
      "context": "    155:     const { type, symbols, parameters, riskManagement, active, name, description } = req.body;\n    156:     \n>>> 157:     logger.info(`🚀 [${requestId}] Creating new trading strategy`, {\n    158:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    159:       strategyType: type,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${type} Strategy`",
      "context": "    174:       },\n    175:       active: active || false,\n>>> 176:       name: name || `${type} Strategy`,\n    177:       description: description || `Automated ${type} trading strategy`,\n    178:       provider: 'alpaca'"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 177,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Automated ${type} trading strategy`",
      "context": "    175:       active: active || false,\n    176:       name: name || `${type} Strategy`,\n>>> 177:       description: description || `Automated ${type} trading strategy`,\n    178:       provider: 'alpaca'\n    179:     };"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Strategy created successfully`",
      "context": "    189:     }, 'Trading strategy created successfully');\n    190:     \n>>> 191:     logger.info(`✅ [${requestId}] Strategy created successfully`, {\n    192:       strategyId: result.strategyId,\n    193:       strategyType: type,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 199,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error creating strategy`",
      "context": "    197:     res.status(201).json(response);\n    198:   } catch (error) {\n>>> 199:     logger.error(`❌ [${requestId}] Error creating strategy`, {\n    200:       error: error.message,\n    201:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 [${requestId}] Executing trading strategy`",
      "context": "    222:     const userId = req.user.sub;\n    223:     \n>>> 224:     logger.info(`🎯 [${requestId}] Executing trading strategy`, {\n    225:       strategyId,\n    226:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 234,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`exec-${Date.now()}`",
      "context": "    232:     \n    233:     const response = responseFormatter.success({\n>>> 234:       executionId: `exec-${Date.now()}`,\n    235:       strategyId,\n    236:       executionResult,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 240,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Strategy executed successfully`",
      "context": "    238:     }, 'Strategy executed successfully');\n    239:     \n>>> 240:     logger.info(`✅ [${requestId}] Strategy executed successfully`, {\n    241:       strategyId,\n    242:       ordersPlaced: executionResult.orders?.length || 0,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 249,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error executing strategy`",
      "context": "    247:     res.json(response);\n    248:   } catch (error) {\n>>> 249:     logger.error(`❌ [${requestId}] Error executing strategy`, {\n    250:       error: error.message,\n    251:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Updating trading strategy`",
      "context": "    272:     const { active, parameters, riskManagement, name, description } = req.body;\n    273:     \n>>> 274:     logger.info(`🔄 [${requestId}] Updating trading strategy`, {\n    275:       strategyId,\n    276:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 291,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Strategy deactivated`",
      "context": "    289:         }, 'Strategy deactivated successfully');\n    290:         \n>>> 291:         logger.info(`✅ [${requestId}] Strategy deactivated`, { strategyId });\n    292:         res.json(response);\n    293:       } else {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 302,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error updating strategy`",
      "context": "    300:     }\n    301:   } catch (error) {\n>>> 302:     logger.error(`❌ [${requestId}] Error updating strategy`, {\n    303:       error: error.message,\n    304:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🗑️ [${requestId}] Deleting trading strategy`",
      "context": "    323:     const userId = req.user.sub;\n    324:     \n>>> 325:     logger.info(`🗑️ [${requestId}] Deleting trading strategy`, {\n    326:       strategyId,\n    327:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 345,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Strategy deleted`",
      "context": "    343:     }, 'Strategy deleted successfully');\n    344:     \n>>> 345:     logger.info(`✅ [${requestId}] Strategy deleted`, { strategyId });\n    346:     res.json(response);\n    347:   } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 348,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error deleting strategy`",
      "context": "    346:     res.json(response);\n    347:   } catch (error) {\n>>> 348:     logger.error(`❌ [${requestId}] Error deleting strategy`, {\n    349:       error: error.message,\n    350:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 372,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching strategy execution history`",
      "context": "    370:     const userId = req.user.sub;\n    371:     \n>>> 372:     logger.info(`📊 [${requestId}] Fetching strategy execution history`, {\n    373:       strategyId,\n    374:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    64:     \n    65:     logger.info(`📊 [${requestId}] Fetching user trading strategies`, {\n>>> 66:       userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    67:     });\n    68:     "
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 401,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Execution history retrieved`",
      "context": "    399:     }, 'Strategy execution history retrieved successfully');\n    400:     \n>>> 401:     logger.info(`✅ [${requestId}] Execution history retrieved`, {\n    402:       strategyId,\n    403:       executionCount: result.rows.length"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 408,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving execution history`",
      "context": "    406:     res.json(response);\n    407:   } catch (error) {\n>>> 408:     logger.error(`❌ [${requestId}] Error retrieving execution history`, {\n    409:       error: error.message,\n    410:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 428,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${requestId}] Fetching available strategy types`",
      "context": "    426:   \n    427:   try {\n>>> 428:     logger.info(`📋 [${requestId}] Fetching available strategy types`);\n    429:     \n    430:     const strategyTypes = {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 484,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Error retrieving strategy config`",
      "context": "    482:     res.json(response);\n    483:   } catch (error) {\n>>> 484:     logger.error(`❌ [${requestId}] Error retrieving strategy config`, {\n    485:       error: error.message,\n    486:       errorStack: error.stack"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 101,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`",
      "context": "    99: router.get('/:strategyId', async (req, res) => {\n    100:   const requestId = res.locals.requestId || 'unknown';\n>>> 101:   const { strategyId } = req.params;\n    102:   \n    103:   try {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 155,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    logger.info(`",
      "context": "    153:   try {\n    154:     const userId = req.user.sub;\n>>> 155:     const { type, symbols, parameters, riskManagement, active, name, description } = req.body;\n    156:     \n    157:     logger.info(`🚀 [${requestId}] Creating new trading strategy`, {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 217,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { signal } = req.body;\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`",
      "context": "    215: router.post('/:strategyId/execute', createValidationMiddleware(strategyValidationSchemas.execute), async (req, res) => {\n    216:   const requestId = res.locals.requestId || 'unknown';\n>>> 217:   const { strategyId } = req.params;\n    218:   const { signal } = req.body;\n    219:   const startTime = Date.now();"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 268,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  \n  try {\n    const userId = req.user.sub;\n    const { active, parameters, riskManagement, name, description } = req.body;\n    \n    logger.info(`",
      "context": "    266: router.put('/:strategyId', async (req, res) => {\n    267:   const requestId = res.locals.requestId || 'unknown';\n>>> 268:   const { strategyId } = req.params;\n    269:   \n    270:   try {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 101,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`",
      "context": "    99: router.get('/:strategyId', async (req, res) => {\n    100:   const requestId = res.locals.requestId || 'unknown';\n>>> 101:   const { strategyId } = req.params;\n    102:   \n    103:   try {"
    },
    {
      "file": "webapp/lambda/routes/trading-strategies.js",
      "line": 366,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n  const { limit = 50, offset = 0 } = req.query;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`",
      "context": "    364: router.get('/:strategyId/executions', async (req, res) => {\n    365:   const requestId = res.locals.requestId || 'unknown';\n>>> 366:   const { strategyId } = req.params;\n    367:   const { limit = 50, offset = 0 } = req.query;\n    368:   "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 149,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking table ${tableName}:`",
      "context": "    147:       results[tableName] = tableExistsResult.rows[0].exists;\n    148:     } catch (error) {\n>>> 149:       console.error(`Error checking table ${tableName}:`, error.message);\n    150:       results[tableName] = false;\n    151:     }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${tableName}`",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`buy_sell_${timeframe}`",
      "context": "    222:     }\n    223: \n>>> 224:     const tableName = `buy_sell_${timeframe}`;\n    225:     \n    226:     // Defensive: Check if table exists before querying"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 236,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[TRADING] Table does not exist: ${tableName}`",
      "context": "    234:     );\n    235:     if (!tableExistsResult.rows[0].exists) {\n>>> 236:       console.error(`[TRADING] Table does not exist: ${tableName}`);\n    237:       return res.status(500).json({ \n    238:         error: `Table ${tableName} does not exist in the database.`,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist in the database.`",
      "context": "    236:       console.error(`[TRADING] Table does not exist: ${tableName}`);\n    237:       return res.status(500).json({ \n>>> 238:         error: `Table ${tableName} does not exist in the database.`,\n    239:         details: `Expected table ${tableName} for trading signals. Please check your database schema.`\n    240:       });"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Expected table ${tableName} for trading signals. Please check your database schema.`",
      "context": "    237:       return res.status(500).json({ \n    238:         error: `Table ${tableName} does not exist in the database.`,\n>>> 239:         details: `Expected table ${tableName} for trading signals. Please check your database schema.`\n    240:       });\n    241:     }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 252,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`symbol = $${paramCount}`",
      "context": "    250:     if (symbol) {\n    251:       paramCount++;\n>>> 252:       conditions.push(`symbol = $${paramCount}`);\n    253:       queryParams.push(symbol.toUpperCase());\n    254:     }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 269,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        WITH ranked_signals AS (\n          SELECT \n            bs.symbol,\n            bs.date,\n            bs.signal,\n            bs.buylevel as price,\n            bs.stoplevel,\n            bs.inposition,\n            bs.strength,\n            md.current_price,\n            s.short_name as company_name,\n            s.sector,\n            md.market_cap,\n            km.trailing_pe,\n            km.dividend_yield,\n            CASE \n              WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel \n              THEN ((md.regular_market_price - bs.buylevel) / bs.buylevel * 100)\n              WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel \n              THEN ((bs.buylevel - md.regular_market_price) / bs.buylevel * 100)\n              ELSE 0\n            END as performance_percent,\n            ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n          FROM ${tableName} bs\n          LEFT JOIN market_data md ON bs.symbol = md.ticker\n          LEFT JOIN symbols s ON bs.symbol = s.ticker\n          LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n          ${whereClause}\n        )\n        SELECT * FROM ranked_signals \n        WHERE rn = 1\n        ORDER BY date DESC, symbol ASC\n        LIMIT $${queryParams.length + 1} OFFSET $${queryParams.length + 2}\n      `",
      "context": "    267:     let sqlQuery;\n    268:     if (latest_only === 'true') {\n>>> 269:       sqlQuery = `\n    270:         WITH ranked_signals AS (\n    271:           SELECT "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 305,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          bs.symbol,\n          bs.date,\n          bs.signal,\n          bs.buylevel as price,\n          bs.stoplevel,\n          bs.inposition,\n          bs.strength,\n          md.current_price,\n          s.short_name as company_name,\n          s.sector,\n          md.market_cap,\n          km.trailing_pe,\n          km.dividend_yield,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel \n            THEN ((md.regular_market_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel \n            THEN ((bs.buylevel - md.regular_market_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n        ${whereClause}\n        ORDER BY bs.date DESC, bs.symbol ASC\n        LIMIT $${queryParams.length + 1} OFFSET $${queryParams.length + 2}\n      `",
      "context": "    303:       `;\n    304:     } else {\n>>> 305:       sqlQuery = `\n    306:         SELECT \n    307:           bs.symbol,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 340,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        WITH ranked_signals AS (\n          SELECT bs.symbol,\n            ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n          FROM ${tableName} bs\n          ${whereClause}\n        )\n        SELECT COUNT(*) as total\n        FROM ranked_signals \n        WHERE rn = 1\n      `",
      "context": "    338:     let countQuery;\n    339:     if (latest_only === 'true') {\n>>> 340:       countQuery = `\n    341:         WITH ranked_signals AS (\n    342:           SELECT bs.symbol,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 352,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT COUNT(*) as total\n        FROM ${tableName} bs\n        ${whereClause}\n      `",
      "context": "    350:       `;\n    351:     } else {\n>>> 352:       countQuery = `\n    353:         SELECT COUNT(*) as total\n    354:         FROM ${tableName} bs"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`buy_sell_${timeframe}`",
      "context": "    222:     }\n    223: \n>>> 224:     const tableName = `buy_sell_${timeframe}`;\n    225:     \n    226:     // Defensive: Check if table exists before querying"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 439,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        COUNT(*) as total_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as buy_signals,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as sell_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as strong_buy,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as strong_sell,\n        COUNT(CASE WHEN signal != 'None' AND signal IS NOT NULL THEN 1 END) as active_signals\n      FROM ${tableName}\n      WHERE date >= CURRENT_DATE - INTERVAL '30 days'\n    `",
      "context": "    437: \n    438:     const tableName = `buy_sell_${timeframe}`;\n>>> 439:       const sqlQuery = `\n    440:       SELECT \n    441:         COUNT(*) as total_signals,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 599,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        signal,\n        COUNT(*) as total_signals,\n        AVG(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price \n            THEN ((md.current_price - bs.price) / bs.price * 100)\n            WHEN signal = 'SELL' AND md.current_price < bs.price \n            THEN ((bs.price - md.current_price) / bs.price * 100)\n            ELSE 0\n          END\n        ) as avg_performance,\n        COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) as winning_trades,\n        (COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) * 100.0 / COUNT(*)) as win_rate\n      FROM buy_sell_daily bs\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      WHERE bs.date >= NOW() - INTERVAL '${days} days'\n      GROUP BY signal\n    `",
      "context": "    597:     const days = parseInt(req.query.days) || 30;\n    598: \n>>> 599:     const performanceQuery = `\n    600:       SELECT \n    601:         signal,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`buy_sell_${timeframe}`",
      "context": "    222:     }\n    223: \n>>> 224:     const tableName = `buy_sell_${timeframe}`;\n    225:     \n    226:     // Defensive: Check if table exists before querying"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table ${tableName} does not exist in the database.`",
      "context": "    236:       console.error(`[TRADING] Table does not exist: ${tableName}`);\n    237:       return res.status(500).json({ \n>>> 238:         error: `Table ${tableName} does not exist in the database.`,\n    239:         details: `Expected table ${tableName} for trading signals. Please check your database schema.`\n    240:       });"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 716,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`s.sector = $${paramCount}`",
      "context": "    714:     if (sector && sector !== 'all') {\n    715:       paramCount++;\n>>> 716:       conditions.push(`s.sector = $${paramCount}`);\n    717:       queryParams.push(sector);\n    718:     }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 725,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      WITH latest_signals AS (\n        SELECT \n          bs.symbol,\n          bs.date,\n          bs.signal,\n          bs.buylevel as entry_price,\n          bs.stoplevel as stop_loss,\n          bs.inposition,\n          md.current_price,\n          md.regular_market_price,\n          s.short_name as company_name,\n          s.sector,\n          s.industry,\n          md.market_cap,\n          km.trailing_pe,\n          km.dividend_yield,\n          km.beta,\n          -- Calculate signal strength based on price movement and position\n          CASE \n            WHEN bs.signal = 'Buy' THEN \n              LEAST(1.0, GREATEST(0.0, \n                (ABS(CAST(bs.signal AS NUMERIC)) / 100.0) * \n                CASE \n                  WHEN md.current_price > bs.buylevel THEN 1.2\n                  ELSE 0.8\n                END\n              ))\n            WHEN bs.signal = 'Sell' THEN \n              LEAST(1.0, GREATEST(0.0, \n                (ABS(CAST(bs.signal AS NUMERIC)) / 100.0) * \n                CASE \n                  WHEN md.current_price < bs.buylevel THEN 1.2\n                  ELSE 0.8\n                END\n              ))\n            ELSE 0.0\n          END as signal_strength,\n          -- Calculate performance since signal\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n            THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n            THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent,\n          -- Days since signal\n          EXTRACT(DAY FROM (CURRENT_DATE - bs.date)) as days_since_signal,\n          -- Signal status\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel THEN 'WINNING'\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel THEN 'WINNING'\n            WHEN bs.signal = 'Buy' AND bs.stoplevel > 0 AND md.current_price <= bs.stoplevel THEN 'STOPPED'\n            WHEN bs.signal = 'Sell' AND bs.stoplevel > 0 AND md.current_price >= bs.stoplevel THEN 'STOPPED'\n            ELSE 'ACTIVE'\n          END as signal_status,\n          ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n        ${whereClause}\n      )\n      SELECT *\n      FROM latest_signals \n      WHERE rn = 1 \n        AND signal_strength >= $${queryParams.length + 1}\n      ORDER BY \n        signal_strength DESC,\n        ABS(performance_percent) DESC,\n        date DESC\n      LIMIT $${queryParams.length + 2} OFFSET $${queryParams.length + 3}\n    `",
      "context": "    723: \n    724:     // Enhanced query with current period focus and signal strength calculation\n>>> 725:     const sqlQuery = `\n    726:       WITH latest_signals AS (\n    727:         SELECT "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 800,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      WITH latest_signals AS (\n        SELECT \n          bs.symbol,\n          CASE \n            WHEN bs.signal = 'Buy' THEN \n              LEAST(1.0, GREATEST(0.0, (ABS(CAST(bs.signal AS NUMERIC)) / 100.0)))\n            WHEN bs.signal = 'Sell' THEN \n              LEAST(1.0, GREATEST(0.0, (ABS(CAST(bs.signal AS NUMERIC)) / 100.0)))\n            ELSE 0.0\n          END as signal_strength,\n          ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n        FROM ${tableName} bs\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        ${whereClause}\n      )\n      SELECT COUNT(*) as total\n      FROM latest_signals \n      WHERE rn = 1 \n        AND signal_strength >= $${queryParams.length + 1}\n    `",
      "context": "    798: \n    799:     // Count query for pagination\n>>> 800:     const countQuery = `\n    801:       WITH latest_signals AS (\n    802:         SELECT "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`buy_sell_${timeframe}`",
      "context": "    222:     }\n    223: \n>>> 224:     const tableName = `buy_sell_${timeframe}`;\n    225:     \n    226:     // Defensive: Check if table exists before querying"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 882,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      WITH signal_analytics AS (\n        SELECT \n          bs.symbol,\n          bs.signal,\n          bs.date,\n          bs.buylevel,\n          md.current_price,\n          s.sector,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n            THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n            THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel THEN 1\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel THEN 1\n            ELSE 0\n          END as is_winning\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        WHERE bs.date >= CURRENT_DATE - INTERVAL '30 days'\n          AND bs.signal IS NOT NULL \n          AND bs.signal != 'None'\n          AND bs.signal != ''\n      )\n      SELECT \n        COUNT(*) as total_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as buy_signals,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as sell_signals,\n        COUNT(CASE WHEN is_winning = 1 THEN 1 END) as winning_signals,\n        AVG(CASE WHEN is_winning = 1 THEN performance_percent END) as avg_winning_performance,\n        AVG(CASE WHEN is_winning = 0 THEN performance_percent END) as avg_losing_performance,\n        MAX(performance_percent) as best_performance,\n        MIN(performance_percent) as worst_performance,\n        COUNT(DISTINCT sector) as sectors_covered,\n        COUNT(DISTINCT symbol) as unique_symbols\n      FROM signal_analytics\n    `",
      "context": "    880:     \n    881:     // Get comprehensive analytics\n>>> 882:     const analyticsQuery = `\n    883:       WITH signal_analytics AS (\n    884:         SELECT "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 926,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        s.sector,\n        COUNT(*) as signal_count,\n        AVG(CASE \n          WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n          THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n          WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n          THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n          ELSE 0\n        END) as avg_performance\n      FROM ${tableName} bs\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      LEFT JOIN symbols s ON bs.symbol = s.ticker\n      WHERE bs.date >= CURRENT_DATE - INTERVAL '30 days'\n        AND bs.signal IS NOT NULL \n        AND bs.signal != 'None'\n        AND bs.signal != ''\n        AND s.sector IS NOT NULL\n      GROUP BY s.sector\n      ORDER BY signal_count DESC\n    `",
      "context": "    924: \n    925:     // Get sector breakdown\n>>> 926:     const sectorQuery = `\n    927:       SELECT \n    928:         s.sector,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1113,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Consider ${aggregateSignal} - Moderate confidence`",
      "context": "    1111:       recommendation = \"Watch - Low confidence signal\";\n    1112:     } else if (confidence < 60) {\n>>> 1113:       recommendation = `Consider ${aggregateSignal} - Moderate confidence`;\n    1114:     } else if (confidence < 80) {\n    1115:       recommendation = `Strong ${aggregateSignal} signal - High confidence`;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1115,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strong ${aggregateSignal} signal - High confidence`",
      "context": "    1113:       recommendation = `Consider ${aggregateSignal} - Moderate confidence`;\n    1114:     } else if (confidence < 80) {\n>>> 1115:       recommendation = `Strong ${aggregateSignal} signal - High confidence`;\n    1116:     } else {\n    1117:       recommendation = `Very Strong ${aggregateSignal} signal - Execute trade`;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1117,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Very Strong ${aggregateSignal} signal - Execute trade`",
      "context": "    1115:       recommendation = `Strong ${aggregateSignal} signal - High confidence`;\n    1116:     } else {\n>>> 1117:       recommendation = `Very Strong ${aggregateSignal} signal - Execute trade`;\n    1118:     }\n    1119: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1491,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚫 Order rejected due to risk: ${riskMetrics.approval.reason}`",
      "context": "    1489:     // Security: Check risk approval before executing order\n    1490:     if (!riskMetrics.approval.approved) {\n>>> 1491:       console.warn(`🚫 Order rejected due to risk: ${riskMetrics.approval.reason}`);\n    1492:       return res.status(400).json({\n    1493:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1507,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Order risk approved: Score=${riskMetrics.orderRiskScore}, Amount=$${riskMetrics.orderValue}`",
      "context": "    1505:     }\n    1506: \n>>> 1507:     console.log(`✅ Order risk approved: Score=${riskMetrics.orderRiskScore}, Amount=$${riskMetrics.orderValue}`);\n    1508: \n    1509:     // Place order only after risk approval"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1578,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND order_status = $${paramIndex}`",
      "context": "    1576: \n    1577:     if (status) {\n>>> 1578:       whereClause += ` AND order_status = $${paramIndex}`;\n    1579:       params.push(status);\n    1580:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1584,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    1582: \n    1583:     if (symbol) {\n>>> 1584:       whereClause += ` AND symbol = $${paramIndex}`;\n    1585:       params.push(symbol.toUpperCase());\n    1586:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1590,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND created_at >= $${paramIndex}`",
      "context": "    1588: \n    1589:     if (from) {\n>>> 1590:       whereClause += ` AND created_at >= $${paramIndex}`;\n    1591:       params.push(from);\n    1592:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1596,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND created_at <= $${paramIndex}`",
      "context": "    1594: \n    1595:     if (to) {\n>>> 1596:       whereClause += ` AND created_at <= $${paramIndex}`;\n    1597:       params.push(to);\n    1598:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1601,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        to.*,\n        sse.company_name,\n        sse.sector\n      FROM trading_orders to\n      LEFT JOIN stock_symbols_enhanced sse ON to.symbol = sse.symbol\n      ${whereClause}\n      ORDER BY to.created_at DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `",
      "context": "    1599:     }\n    1600: \n>>> 1601:     const ordersQuery = `\n    1602:       SELECT \n    1603:         to.*,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1617,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT COUNT(*) as total\n        FROM trading_orders\n        ${whereClause}\n      `",
      "context": "    1615:     const [ordersResult, countResult] = await Promise.all([\n    1616:       query(ordersQuery, params),\n>>> 1617:       query(`\n    1618:         SELECT COUNT(*) as total\n    1619:         FROM trading_orders"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1658,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Could not update order ${order.alpaca_order_id}:`",
      "context": "    1656:           }\n    1657:         } catch (error) {\n>>> 1658:           console.warn(`Could not update order ${order.alpaca_order_id}:`, error.message);\n    1659:         }\n    1660:       }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1780,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Cannot cancel order with status: ${order.order_status}`",
      "context": "    1778:       return res.status(400).json({\n    1779:         success: false,\n>>> 1780:         error: `Cannot cancel order with status: ${order.order_status}`\n    1781:       });\n    1782:     }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1889,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error enriching position for ${position.symbol}:`",
      "context": "    1887:           };\n    1888:         } catch (error) {\n>>> 1889:           console.warn(`Error enriching position for ${position.symbol}:`, error.message);\n    1890:           return position;\n    1891:         }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error generating signals for ${symbol}:`",
      "context": "    2161:         });\n    2162:       } catch (error) {\n>>> 2163:         console.warn(`Error generating signals for ${symbol}:`, error.message);\n    2164:         signals.push({\n    2165:           symbol,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2286,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Trade history request initiated`",
      "context": "    2284:       throw new Error('User authentication required');\n    2285:     }\n>>> 2286:     console.log(`🚀 [${requestId}] Trade history request initiated`, {\n    2287:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    2288:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2287,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    2285:     }\n    2286:     console.log(`🚀 [${requestId}] Trade history request initiated`, {\n>>> 2287:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    2288:       userAgent: req.headers['user-agent'],\n    2289:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2294,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication failure - no user ID found`",
      "context": "    2292: \n    2293:     if (!userId) {\n>>> 2294:       console.error(`❌ [${requestId}] Authentication failure - no user ID found`);\n    2295:       return res.status(401).json({ \n    2296:         success: false,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2313,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Trade history parameters:`",
      "context": "    2311:     const side = req.query.side; // buy, sell\n    2312:     \n>>> 2313:     console.log(`🔍 [${requestId}] Trade history parameters:`, {\n    2314:       page,\n    2315:       limit,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${requestId}] Retrieving user API credentials for trade history`",
      "context": "    2323: \n    2324:     // Get user's API credentials for Alpaca with comprehensive error handling\n>>> 2325:     console.log(`🔑 [${requestId}] Retrieving user API credentials for trade history`);\n    2326:     const credentialsStart = Date.now();\n    2327:     "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2334,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`",
      "context": "    2332:       \n    2333:       if (!credentials) {\n>>> 2334:         console.error(`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n    2335:           requestedProvider: 'alpaca',\n    2336:           userId: `${userId.substring(0, 8)}...`,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2287,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    2285:     }\n    2286:     console.log(`🚀 [${requestId}] Trade history request initiated`, {\n>>> 2287:       userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    2288:       userAgent: req.headers['user-agent'],\n    2289:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2360,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`",
      "context": "    2358:       }\n    2359:       \n>>> 2360:       console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n    2361:         provider: 'alpaca',\n    2362:         environment: credentials.isSandbox ? 'sandbox' : 'live',"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2369,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`",
      "context": "    2367:     } catch (credentialsError) {\n    2368:       const credentialsDuration = Date.now() - credentialsStart;\n>>> 2369:       console.error(`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n    2370:         error: credentialsError.message,\n    2371:         errorStack: credentialsError.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2392,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏭 [${requestId}] Initializing Alpaca service for trade history`",
      "context": "    2390: \n    2391:     // Initialize Alpaca service with comprehensive error handling\n>>> 2392:     console.log(`🏭 [${requestId}] Initializing Alpaca service for trade history`);\n    2393:     const serviceInitStart = Date.now();\n    2394:     let alpaca;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2404,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`",
      "context": "    2402:       const serviceInitDuration = Date.now() - serviceInitStart;\n    2403:       \n>>> 2404:       console.log(`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`, {\n    2405:         environment: credentials.isSandbox ? 'sandbox' : 'live',\n    2406:         hasApiKey: !!credentials.apiKey,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2412,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`",
      "context": "    2410:     } catch (serviceError) {\n    2411:       const serviceInitDuration = Date.now() - serviceInitStart;\n>>> 2412:       console.error(`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`, {\n    2413:         error: serviceError.message,\n    2414:         errorStack: serviceError.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2457,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching orders from Alpaca API with parameters:`",
      "context": "    2455: \n    2456:     // Fetch orders from Alpaca with comprehensive error handling\n>>> 2457:     console.log(`📊 [${requestId}] Fetching orders from Alpaca API with parameters:`, alpacaParams);\n    2458:     const ordersStart = Date.now();\n    2459:     let ordersResponse;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2470,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Orders retrieved from Alpaca in ${ordersDuration}ms`",
      "context": "    2468:       \n    2469:       const ordersDuration = Date.now() - ordersStart;\n>>> 2470:       console.log(`✅ [${requestId}] Orders retrieved from Alpaca in ${ordersDuration}ms`, {\n    2471:         ordersCount: ordersResponse?.length || 0,\n    2472:         hasNextPage: ordersResponse?.next_page_token ? true : false,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2478,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to fetch orders after ${ordersDuration}ms:`",
      "context": "    2476:     } catch (ordersError) {\n    2477:       const ordersDuration = Date.now() - ordersStart;\n>>> 2478:       console.error(`❌ [${requestId}] Failed to fetch orders after ${ordersDuration}ms:`, {\n    2479:         error: ordersError.message,\n    2480:         errorStack: ordersError.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2579,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching trade executions from Alpaca`",
      "context": "    2577: \n    2578:     // Also fetch executions/fills for more detailed trade history with enhanced error handling\n>>> 2579:     console.log(`📊 [${requestId}] Fetching trade executions from Alpaca`);\n    2580:     const executionsStart = Date.now();\n    2581:     let executions = [];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2595,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Trade executions retrieved in ${executionsDuration}ms`",
      "context": "    2593:       \n    2594:       const executionsDuration = Date.now() - executionsStart;\n>>> 2595:       console.log(`✅ [${requestId}] Trade executions retrieved in ${executionsDuration}ms`, {\n    2596:         executionsCount: executions?.length || 0,\n    2597:         environment: credentials.isSandbox ? 'sandbox' : 'live'"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2602,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] Failed to fetch executions after ${executionsDuration}ms:`",
      "context": "    2600:     } catch (executionError) {\n    2601:       const executionsDuration = Date.now() - executionsStart;\n>>> 2602:       console.warn(`⚠️ [${requestId}] Failed to fetch executions after ${executionsDuration}ms:`, {\n    2603:         error: executionError.message,\n    2604:         errorCode: executionError.code,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2615,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🗄️ [${requestId}] Checking database for local trade records`",
      "context": "    2613: \n    2614:     // Check database for any locally stored trade records\n>>> 2615:     console.log(`🗄️ [${requestId}] Checking database for local trade records`);\n    2616:     const dbStart = Date.now();\n    2617:     let dbTrades = [];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2652,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramCount}`",
      "context": "    2650:         if (symbol) {\n    2651:           paramCount++;\n>>> 2652:           dbQuery += ` AND symbol = $${paramCount}`;\n    2653:           dbParams.push(symbol);\n    2654:         }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2658,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND order_status = $${paramCount}`",
      "context": "    2656:         if (status) {\n    2657:           paramCount++;\n>>> 2658:           dbQuery += ` AND order_status = $${paramCount}`;\n    2659:           dbParams.push(status);\n    2660:         }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2664,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND created_at >= $${paramCount}`",
      "context": "    2662:         if (startDate) {\n    2663:           paramCount++;\n>>> 2664:           dbQuery += ` AND created_at >= $${paramCount}`;\n    2665:           dbParams.push(startDate);\n    2666:         }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2670,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND created_at <= $${paramCount}`",
      "context": "    2668:         if (endDate) {\n    2669:           paramCount++;\n>>> 2670:           dbQuery += ` AND created_at <= $${paramCount}`;\n    2671:           dbParams.push(endDate);\n    2672:         }"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2674,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ORDER BY created_at DESC LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`",
      "context": "    2672:         }\n    2673: \n>>> 2674:         dbQuery += ` ORDER BY created_at DESC LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`;\n    2675:         dbParams.push(limit, (page - 1) * limit);\n    2676: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2681,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database trades retrieved in ${dbDuration}ms`",
      "context": "    2679:         \n    2680:         const dbDuration = Date.now() - dbStart;\n>>> 2681:         console.log(`✅ [${requestId}] Database trades retrieved in ${dbDuration}ms`, {\n    2682:           dbTradesCount: dbTrades.length,\n    2683:           hasTable: true"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2686,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] trading_orders table does not exist - skipping database lookup`",
      "context": "    2684:         });\n    2685:       } else {\n>>> 2686:         console.warn(`⚠️ [${requestId}] trading_orders table does not exist - skipping database lookup`);\n    2687:       }\n    2688:     } catch (dbError) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2690,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database query failed after ${dbDuration}ms:`",
      "context": "    2688:     } catch (dbError) {\n    2689:       const dbDuration = Date.now() - dbStart;\n>>> 2690:       console.error(`❌ [${requestId}] Database query failed after ${dbDuration}ms:`, {\n    2691:         error: dbError.message,\n    2692:         errorCode: dbError.code,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2698,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${requestId}] Processing and combining trade history data`",
      "context": "    2696: \n    2697:     // Combine and format trade history data\n>>> 2698:     console.log(`🔄 [${requestId}] Processing and combining trade history data`);\n    2699:     const processStart = Date.now();\n    2700:     "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2759,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Trade history request completed in ${totalDuration}ms`",
      "context": "    2757:     const totalDuration = Date.now() - requestStart;\n    2758: \n>>> 2759:     console.log(`✅ [${requestId}] Trade history request completed in ${totalDuration}ms`, {\n    2760:       summary: {\n    2761:         totalRecords: unifiedHistory.length,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2767,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    2765:       },\n    2766:       performance: {\n>>> 2767:         totalDuration: `${totalDuration}ms`,\n    2768:         credentialsDuration: `${credentialsDuration}ms`,\n    2769:         ordersDuration: `${ordersDuration}ms`,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2768,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${credentialsDuration}ms`",
      "context": "    2766:       performance: {\n    2767:         totalDuration: `${totalDuration}ms`,\n>>> 2768:         credentialsDuration: `${credentialsDuration}ms`,\n    2769:         ordersDuration: `${ordersDuration}ms`,\n    2770:         processingDuration: `${processDuration}ms`"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2769,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${ordersDuration}ms`",
      "context": "    2767:         totalDuration: `${totalDuration}ms`,\n    2768:         credentialsDuration: `${credentialsDuration}ms`,\n>>> 2769:         ordersDuration: `${ordersDuration}ms`,\n    2770:         processingDuration: `${processDuration}ms`\n    2771:       },"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2770,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${processDuration}ms`",
      "context": "    2768:         credentialsDuration: `${credentialsDuration}ms`,\n    2769:         ordersDuration: `${ordersDuration}ms`,\n>>> 2770:         processingDuration: `${processDuration}ms`\n    2771:       },\n    2772:       filters: {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2822,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Trade history request FAILED after ${errorDuration}ms:`",
      "context": "    2820:   } catch (error) {\n    2821:     const errorDuration = Date.now() - requestStart;\n>>> 2822:     console.error(`❌ [${requestId}] Trade history request FAILED after ${errorDuration}ms:`, {\n    2823:       error: error.message,\n    2824:       errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2381,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    2379:         error: 'Failed to retrieve API credentials',\n    2380:         message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 2381:         error_code: 'API_CREDENTIALS_ERROR',\n    2382:         details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    2383:         request_info: {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2381,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    2379:         error: 'Failed to retrieve API credentials',\n    2380:         message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 2381:         error_code: 'API_CREDENTIALS_ERROR',\n    2382:         details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    2383:         request_info: {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2381,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    2379:         error: 'Failed to retrieve API credentials',\n    2380:         message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 2381:         error_code: 'API_CREDENTIALS_ERROR',\n    2382:         details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    2383:         request_info: {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2832,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      details: process.env.NODE_ENV === '",
      "context": "    2830:     res.status(500).json({\n    2831:       success: false,\n>>> 2832:       error: 'Failed to fetch trade history',\n    2833:       details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n    2834:       request_info: {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 174,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    172:       if (exists) {\n    173:         try {\n>>> 174:           const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n    175:           recordCounts[tableName] = parseInt(countResult.rows[0].count);\n    176:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 243,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    const conditions = [];\n    \n    if (symbol) {\n      paramCount++",
      "context": "    241:     }\n    242: \n>>> 243:     // Build WHERE clause\n    244:     let whereClause = '';\n    245:     const queryParams = [];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 263,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE ' +",
      "context": "    261: \n    262:     if (conditions.length > 0) {\n>>> 263:       whereClause = 'WHERE ' + conditions.join(' AND ');\n    264:     }\n    265: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 683,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE clause for current period active signals\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    const conditions = [];\n    \n    // Only get recent signals (last 30 days for daily, 12 weeks for weekly, 6 months for monthly)\n    let dateFilter;\n    if (timeframe === 'daily') {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '30 days'\";\n    } else if (timeframe === 'weekly') {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '12 weeks'\";\n    } else {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '6 months'\";\n    }\n    conditions.push(dateFilter);\n    \n    // Only get actual signals (not None or null)\n    conditions.push(\"signal IS NOT NULL\");\n    conditions.push(\"signal != 'None'\");\n    conditions.push(\"signal != ''\");\n    \n    // Filter by signal type if specified\n    if (signal_type === 'buy') {\n      conditions.push(\"signal = 'Buy'\");\n    } else if (signal_type === 'sell') {\n      conditions.push(\"signal = 'Sell'\");\n    }\n    \n    // Filter by sector if specified\n    if (sector && sector !== 'all') {\n      paramCount++",
      "context": "    681:     }\n    682: \n>>> 683:     // Build WHERE clause for current period active signals\n    684:     let whereClause = '';\n    685:     const queryParams = [];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 263,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE ' +",
      "context": "    261: \n    262:     if (conditions.length > 0) {\n>>> 263:       whereClause = 'WHERE ' + conditions.join(' AND ');\n    264:     }\n    265: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 204,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params,\n    query: req.query,\n    path: req.path,\n    method: req.method,\n    time: new Date().toISOString()\n  });\n  try {\n    const { timeframe } = req.params;\n    const { limit = 100, page = 1, symbol, signal_type, latest_only } = req.query;\n    const pageNum = Math.max(1, parseInt(page));\n    const pageSize = Math.max(1, parseInt(limit));\n    const offset = (pageNum - 1) * pageSize;\n\n    // Validate timeframe\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      console.warn('[TRADING] Invalid timeframe:', timeframe);\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = `",
      "context": "    202: router.get('/signals/:timeframe', async (req, res) => {\n    203:   console.log('[TRADING] Received request for /signals/:timeframe', {\n>>> 204:     params: req.params,\n    205:     query: req.query,\n    206:     path: req.path,"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 431,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe' });\n    }\n\n    const tableName = `",
      "context": "    429: router.get('/summary/:timeframe', async (req, res) => {\n    430:   try {\n>>> 431:     const { timeframe } = req.params;\n    432:     \n    433:     const validTimeframes = ['daily', 'weekly', 'monthly'];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 475,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n\n    const swingQuery = `\n      SELECT \n        st.symbol,\n        s.short_name as company_name,\n        st.signal,\n        st.entry_price,\n        st.stop_loss,\n        st.target_price,\n        st.risk_reward_ratio,\n        st.date,\n        md.current_price,\n        CASE \n          WHEN st.signal = 'BUY' AND md.current_price >= st.target_price \n          THEN 'TARGET_HIT'\n          WHEN st.signal = 'BUY' AND md.current_price <= st.stop_loss \n          THEN 'STOP_LOSS_HIT'\n          WHEN st.signal = 'SELL' AND md.current_price <= st.target_price \n          THEN 'TARGET_HIT'\n          WHEN st.signal = 'SELL' AND md.current_price >= st.stop_loss \n          THEN 'STOP_LOSS_HIT'\n          ELSE 'ACTIVE'",
      "context": "    473: router.get('/swing-signals', async (req, res) => {\n    474:   try {\n>>> 475:     const page = parseInt(req.query.page) || 1;\n    476:     const limit = parseInt(req.query.limit) || 25;\n    477:     const offset = (page - 1) * limit;"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 546,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const timeframe = req.query.timeframe || 'daily'; // daily, weekly, monthly\n\n    let tableName = 'latest_technicals_daily';\n    if (timeframe === 'weekly') tableName = 'latest_technicals_weekly';\n    if (timeframe === 'monthly') tableName = 'latest_technicals_monthly';\n\n    const techQuery = `",
      "context": "    544: router.get('/:ticker/technicals', async (req, res) => {\n    545:   try {\n>>> 546:     const { ticker } = req.params;\n    547:     const timeframe = req.query.timeframe || 'daily'; // daily, weekly, monthly\n    548: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 597,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.days) || 30;\n\n    const performanceQuery = `\n      SELECT \n        signal,\n        COUNT(*) as total_signals,\n        AVG(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price \n            THEN ((md.current_price - bs.price) / bs.price * 100)\n            WHEN signal = 'SELL' AND md.current_price < bs.price \n            THEN ((bs.price - md.current_price) / bs.price * 100)\n            ELSE 0\n          END\n        ) as avg_performance,\n        COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) as winning_trades,\n        (COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) * 100.0 / COUNT(*)) as win_rate\n      FROM buy_sell_daily bs\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      WHERE bs.date >= NOW() - INTERVAL '",
      "context": "    595: router.get('/performance', async (req, res) => {\n    596:   try {\n>>> 597:     const days = parseInt(req.query.days) || 30;\n    598: \n    599:     const performanceQuery = `"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 653,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { limit = 50, page = 1, signal_type, sector, min_strength = 0.4 } = req.query;\n    const pageNum = Math.max(1, parseInt(page));\n    const pageSize = Math.max(1, parseInt(limit));\n    const offset = (pageNum - 1) * pageSize;\n\n    // Validate timeframe\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = `",
      "context": "    651:   \n    652:   try {\n>>> 653:     const { timeframe } = req.params;\n    654:     const { limit = 50, page = 1, signal_type, sector, min_strength = 0.4 } = req.query;\n    655:     const pageNum = Math.max(1, parseInt(page));"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 431,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe' });\n    }\n\n    const tableName = `",
      "context": "    429: router.get('/summary/:timeframe', async (req, res) => {\n    430:   try {\n>>> 431:     const { timeframe } = req.params;\n    432:     \n    433:     const validTimeframes = ['daily', 'weekly', 'monthly'];"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 998,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    \n    // Get latest signals from all timeframes for the symbol\n    const aggregateQuery = `\n      WITH daily_signals AS (\n        SELECT \n          symbol, signal, strength, date, 'daily'",
      "context": "    996: router.get('/aggregate/:symbol', async (req, res) => {\n    997:   try {\n>>> 998:     const { symbol } = req.params;\n    999:     \n    1000:     // Get latest signals from all timeframes for the symbol"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1153,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n    \n    // Get symbols with recent signals\n    const symbolsQuery = `\n      SELECT DISTINCT symbol \n      FROM (\n        SELECT symbol FROM buy_sell_daily WHERE date >= CURRENT_DATE - INTERVAL '30 days' AND signal != 'None'\n        UNION\n        SELECT symbol FROM buy_sell_weekly WHERE date >= CURRENT_DATE - INTERVAL '12 weeks' AND signal != 'None'\n        UNION\n        SELECT symbol FROM buy_sell_monthly WHERE date >= CURRENT_DATE - INTERVAL '6 months' AND signal != 'None'",
      "context": "    1151: router.get('/aggregate', async (req, res) => {\n    1152:   try {\n>>> 1153:     const { limit = 50, min_confidence = 60, signal_type } = req.query;\n    1154:     \n    1155:     // Get symbols with recent signals"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1570,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    // Get from database\n    let whereClause = '",
      "context": "    1568:       from,\n    1569:       to\n>>> 1570:     } = req.query;\n    1571: \n    1572:     // Get from database"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1693,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    // Get from database\n    const orderResult = await query(`",
      "context": "    1691:       throw new Error('User authentication required');\n    1692:     }\n>>> 1693:     const { orderId } = req.params;\n    1694: \n    1695:     // Get from database"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1759,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n\n    // Verify order belongs to user\n    const orderResult = await query(`",
      "context": "    1757:       throw new Error('User authentication required');\n    1758:     }\n>>> 1759:     const { orderId } = req.params;\n    1760: \n    1761:     // Verify order belongs to user"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1832,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get positions from Alpaca\n    const positions = await alpaca.getPositions();\n    \n    // Filter by symbol if provided\n    let filteredPositions = positions;\n    if (symbol) {\n      filteredPositions = positions.filter(pos => pos.symbol === symbol.toUpperCase());\n    }\n\n    // Enrich with additional data\n    const enrichedPositions = await Promise.all(\n      filteredPositions.map(async (position) => {\n        try {\n          // Get company info\n          const companyResult = await query(`",
      "context": "    1830:       throw new Error('User authentication required');\n    1831:     }\n>>> 1832:     const { symbol } = req.query;\n    1833: \n    1834:     // Get user's API credentials"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 1917,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const { percentage = 100 } = req.body;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Close position\n    const result = await alpaca.closePosition(symbol.toUpperCase(), percentage);\n\n    // Log the trade\n    await query(`",
      "context": "    1915:       throw new Error('User authentication required');\n    1916:     }\n>>> 1917:     const { symbol } = req.params;\n    1918:     const { percentage = 100 } = req.body;\n    1919: "
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2141,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols array is required'\n      });\n    }\n\n    const signalEngine = new SignalEngine();\n    const signals = [];\n\n    // Generate signals for each symbol\n    for (const symbol of symbols) {\n      try {\n        const symbolSignals = await signalEngine.generateSignalsForStock(symbol);\n        signals.push({\n          symbol,\n          signals: symbolSignals,\n          timestamp: new Date().toISOString()\n        });\n      } catch (error) {\n        console.warn(`",
      "context": "    2139:       throw new Error('User authentication required');\n    2140:     }\n>>> 2141:     const { symbols, signalTypes = ['technical', 'fundamental'] } = req.body;\n    2142: \n    2143:     if (!symbols || symbols.length === 0) {"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2304,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page) || 1);\n    const limit = Math.min(200, Math.max(1, parseInt(req.query.limit) || 50));\n    const symbol = req.query.symbol?.toUpperCase();\n    const status = req.query.status; // filled, canceled, pending, etc.\n    const startDate = req.query.start_date;\n    const endDate = req.query.end_date;\n    const orderType = req.query.order_type;\n    const side = req.query.side; // buy, sell\n    \n    console.log(`",
      "context": "    2302: \n    2303:     // Parse query parameters with validation\n>>> 2304:     const page = Math.max(1, parseInt(req.query.page) || 1);\n    2305:     const limit = Math.min(200, Math.max(1, parseInt(req.query.limit) || 50));\n    2306:     const symbol = req.query.symbol?.toUpperCase();"
    },
    {
      "file": "webapp/lambda/routes/trading.js",
      "line": 2445,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query.page_token // For pagination continuation\n    };\n\n    // Add optional filters\n    if (status) alpacaParams.status = status;\n    if (startDate) alpacaParams.after = startDate;\n    if (endDate) alpacaParams.until = endDate;\n    if (symbol) alpacaParams.symbols = symbol;\n    if (side) alpacaParams.side = side;\n    if (orderType) alpacaParams.order_type = orderType;\n\n    // Fetch orders from Alpaca with comprehensive error handling\n    console.log(`",
      "context": "    2443:     const alpacaParams = {\n    2444:       limit: Math.min(limit, 500), // Alpaca has its own limits\n>>> 2445:       page_token: req.query.page_token // For pagination continuation\n    2446:     };\n    2447: "
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 32,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    \n    // First verify the watchlist belongs to the user\n    const watchlistResult = await query(`",
      "context": "    30: router.get('/:id/items', authenticateToken, async (req, res) => {\n    31:   try {\n>>> 32:     const { id } = req.params;\n    33:     const userId = req.user.sub;\n    34:     "
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 79,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.body;\n    \n    if (!name || name.trim() === '') {\n      return res.status(400).json({ error: 'Watchlist name is required' });\n    }\n    \n    // Check if database/table is available\n    if (req.dbError) {\n      return res.status(503).json({ \n        error: 'Watchlist service temporarily unavailable',\n        details: 'Database connection issues - please try again later'\n      });\n    }\n    \n    const result = await query(`",
      "context": "    77:   try {\n    78:     const userId = req.user.sub;\n>>> 79:     const { name, description, color } = req.body;\n    80:     \n    81:     if (!name || name.trim() === '') {"
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 115,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    const { name, description, color } = req.body;\n    \n    if (!name || name.trim() === '') {\n      return res.status(400).json({ error: 'Watchlist name is required' });\n    }\n    \n    const result = await query(`",
      "context": "    113: router.put('/:id', authenticateToken, async (req, res) => {\n    114:   try {\n>>> 115:     const { id } = req.params;\n    116:     const userId = req.user.sub;\n    117:     const { name, description, color } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 147,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    \n    const result = await query(`",
      "context": "    145: router.delete('/:id', authenticateToken, async (req, res) => {\n    146:   try {\n>>> 147:     const { id } = req.params;\n    148:     const userId = req.user.sub;\n    149:     "
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 170,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    const { symbol, notes, alert_price, alert_type, alert_value } = req.body;\n    \n    if (!symbol || symbol.trim() === '') {\n      return res.status(400).json({ error: 'Symbol is required' });\n    }\n    \n    // First verify the watchlist belongs to the user\n    const watchlistResult = await query(`",
      "context": "    168: router.post('/:id/items', authenticateToken, async (req, res) => {\n    169:   try {\n>>> 170:     const { id } = req.params;\n    171:     const userId = req.user.sub;\n    172:     const { symbol, notes, alert_price, alert_type, alert_value } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 214,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    const { notes, alert_price, alert_type, alert_value, position_order } = req.body;\n    \n    // First verify the watchlist belongs to the user\n    const watchlistResult = await query(`",
      "context": "    212: router.put('/:id/items/:itemId', authenticateToken, async (req, res) => {\n    213:   try {\n>>> 214:     const { id, itemId } = req.params;\n    215:     const userId = req.user.sub;\n    216:     const { notes, alert_price, alert_type, alert_value, position_order } = req.body;"
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 32,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    \n    // First verify the watchlist belongs to the user\n    const watchlistResult = await query(`",
      "context": "    30: router.get('/:id/items', authenticateToken, async (req, res) => {\n    31:   try {\n>>> 32:     const { id } = req.params;\n    33:     const userId = req.user.sub;\n    34:     "
    },
    {
      "file": "webapp/lambda/routes/watchlist.js",
      "line": 280,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params;\n    const userId = req.user.sub;\n    const { itemIds } = req.body; // Array of item IDs in new order\n    \n    if (!Array.isArray(itemIds)) {\n      return res.status(400).json({ error: 'itemIds must be an array' });\n    }\n    \n    // First verify the watchlist belongs to the user\n    const watchlistResult = await query(`",
      "context": "    278: router.post('/:id/items/reorder', authenticateToken, async (req, res) => {\n    279:   try {\n>>> 280:     const { id } = req.params;\n    281:     const userId = req.user.sub;\n    282:     const { itemIds } = req.body; // Array of item IDs in new order"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 95,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 [${connectionId}] WebSocket connection established`",
      "context": "    93:   const connectionStart = Date.now();\n    94:   \n>>> 95:   console.log(`🔌 [${connectionId}] WebSocket connection established`);\n    96:   \n    97:   // Store connection"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 112,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Message handling error:`",
      "context": "    110:       await handleWebSocketMessage(connectionId, data);\n    111:     } catch (error) {\n>>> 112:       console.error(`❌ [${connectionId}] Message handling error:`, error);\n    113:       ws.send(JSON.stringify({\n    114:         type: 'error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 [${connectionId}] WebSocket connection closed`",
      "context": "    120:   // Handle connection close\n    121:   ws.on('close', () => {\n>>> 122:     console.log(`🔌 [${connectionId}] WebSocket connection closed`);\n    123:     activeConnections.delete(connectionId);\n    124:   });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 128,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] WebSocket error:`",
      "context": "    126:   // Handle errors\n    127:   ws.on('error', (error) => {\n>>> 128:     console.error(`❌ [${connectionId}] WebSocket error:`, error);\n    129:     activeConnections.delete(connectionId);\n    130:   });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 206,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${connectionId}] User authenticated: ${payload.sub.substring(0, 8)}...`",
      "context": "    204:     connection.lastSeen = Date.now();\n    205:     \n>>> 206:     console.log(`✅ [${connectionId}] User authenticated: ${payload.sub.substring(0, 8)}...`);\n    207:     \n    208:     ws.send(JSON.stringify({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 215,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Authentication failed:`",
      "context": "    213:     \n    214:   } catch (error) {\n>>> 215:     console.error(`❌ [${connectionId}] Authentication failed:`, error);\n    216:     ws.send(JSON.stringify({\n    217:       type: 'auth_error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 255,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${connectionId}] Subscribed to:`",
      "context": "    253:     });\n    254:     \n>>> 255:     console.log(`📊 [${connectionId}] Subscribed to:`, symbols);\n    256:     \n    257:     ws.send(JSON.stringify({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 267,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Subscription failed:`",
      "context": "    265:     \n    266:   } catch (error) {\n>>> 267:     console.error(`❌ [${connectionId}] Subscription failed:`, error);\n    268:     ws.send(JSON.stringify({\n    269:       type: 'subscription_error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 339,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Streaming error:`",
      "context": "    337:         \n    338:       } catch (error) {\n>>> 339:         console.error(`❌ [${connectionId}] Streaming error:`, error);\n    340:         ws.send(JSON.stringify({\n    341:           type: 'streaming_error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 357,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Failed to start streaming:`",
      "context": "    355:     \n    356:   } catch (error) {\n>>> 357:     console.error(`❌ [${connectionId}] Failed to start streaming:`, error);\n    358:     ws.send(JSON.stringify({\n    359:       type: 'error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 421,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${connectionId}] Unsubscribed from:`",
      "context": "    419:     }\n    420:     \n>>> 421:     console.log(`📊 [${connectionId}] Unsubscribed from:`, symbols.length > 0 ? symbols : 'all symbols');\n    422:     \n    423:   } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 424,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${connectionId}] Unsubscription failed:`",
      "context": "    422:     \n    423:   } catch (error) {\n>>> 424:     console.error(`❌ [${connectionId}] Unsubscription failed:`, error);\n    425:     ws.send(JSON.stringify({\n    426:       type: 'unsubscription_error',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 440,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 [${requestId}] Live data stream request initiated`",
      "context": "    438:   \n    439:   try {\n>>> 440:     console.log(`🚀 [${requestId}] Live data stream request initiated`, {\n    441:       symbols: req.params.symbols,\n    442:       userAgent: req.headers['user-agent'],"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 451,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication failure - no authorization header provided`",
      "context": "    449:     const authHeader = req.headers.authorization;\n    450:     if (!authHeader) {\n>>> 451:       console.error(`❌ [${requestId}] Authentication failure - no authorization header provided`);\n    452:       return res.status(401).json(error(\n    453:         'No authorization token provided',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 460,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Authentication failure - invalid authorization header format`",
      "context": "    458: \n    459:     if (!authHeader.startsWith('Bearer ')) {\n>>> 460:       console.error(`❌ [${requestId}] Authentication failure - invalid authorization header format`);\n    461:       return res.status(401).json(error(\n    462:         'Invalid authorization header format',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 469,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Verifying JWT token`",
      "context": "    467: \n    468:     const token = authHeader.replace('Bearer ', '');\n>>> 469:     console.log(`🔍 [${requestId}] Verifying JWT token`, {\n    470:       tokenLength: token.length,\n    471:       tokenPrefix: token.substring(0, 20) + '...'"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 488,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] JWT token verified successfully in ${verifyDuration}ms`",
      "context": "    486:       const verifyDuration = Date.now() - verifyStart;\n    487:       \n>>> 488:       console.log(`✅ [${requestId}] JWT token verified successfully in ${verifyDuration}ms`, {\n    489:         userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    490:         tokenType: payload.token_use,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 489,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    487:       \n    488:       console.log(`✅ [${requestId}] JWT token verified successfully in ${verifyDuration}ms`, {\n>>> 489:         userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    490:         tokenType: payload.token_use,\n    491:         clientId: payload.client_id,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 497,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] JWT verification FAILED after ${verifyDuration}ms:`",
      "context": "    495:     } catch (jwtError) {\n    496:       const verifyDuration = Date.now() - verifyStart;\n>>> 497:       console.error(`❌ [${requestId}] JWT verification FAILED after ${verifyDuration}ms:`, {\n    498:         error: jwtError.message,\n    499:         errorType: jwtError.name,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 517,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Parsing requested symbols: ${req.params.symbols}`",
      "context": "    515: \n    516:     // Parse and validate symbols\n>>> 517:     console.log(`🔍 [${requestId}] Parsing requested symbols: ${req.params.symbols}`);\n    518:     const symbols = req.params.symbols.split(',')\n    519:       .map(s => s.trim().toUpperCase())"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 523,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Invalid symbols provided:`",
      "context": "    521:     \n    522:     if (symbols.length === 0) {\n>>> 523:       console.error(`❌ [${requestId}] Invalid symbols provided:`, {\n    524:         originalSymbols: req.params.symbols,\n    525:         filteredSymbols: symbols,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 535,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Symbols validated:`",
      "context": "    533:     }\n    534:     \n>>> 535:     console.log(`✅ [${requestId}] Symbols validated:`, {\n    536:       validSymbols: symbols,\n    537:       symbolCount: symbols.length"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 541,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 [${requestId}] Retrieving user API credentials for live data access`",
      "context": "    539:     \n    540:     // Get user's Alpaca credentials with comprehensive error handling\n>>> 541:     console.log(`🔑 [${requestId}] Retrieving user API credentials for live data access`);\n    542:     const credentialsStart = Date.now();\n    543:     "
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 550,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`",
      "context": "    548:       \n    549:       if (!credentials) {\n>>> 550:         console.error(`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n    551:           requestedProvider: 'alpaca',\n    552:           userId: `${userId.substring(0, 8)}...`,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 489,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    487:       \n    488:       console.log(`✅ [${requestId}] JWT token verified successfully in ${verifyDuration}ms`, {\n>>> 489:         userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n    490:         tokenType: payload.token_use,\n    491:         clientId: payload.client_id,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 576,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`",
      "context": "    574:       }\n    575:       \n>>> 576:       console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n    577:         provider: 'alpaca',\n    578:         environment: credentials.isSandbox ? 'sandbox' : 'live',"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 585,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`",
      "context": "    583:     } catch (credentialsError) {\n    584:       const credentialsDuration = Date.now() - credentialsStart;\n>>> 585:       console.error(`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n    586:         error: credentialsError.message,\n    587:         errorStack: credentialsError.stack,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 609,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏭 [${requestId}] Initializing Alpaca service for live data`",
      "context": "    607: \n    608:     // Initialize Alpaca service for this user with comprehensive error handling\n>>> 609:     console.log(`🏭 [${requestId}] Initializing Alpaca service for live data`);\n    610:     const alpacaInitStart = Date.now();\n    611:     let userAlpacaService;"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 621,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Alpaca service initialized in ${alpacaInitDuration}ms`",
      "context": "    619:       const alpacaInitDuration = Date.now() - alpacaInitStart;\n    620:       \n>>> 621:       console.log(`✅ [${requestId}] Alpaca service initialized in ${alpacaInitDuration}ms`, {\n    622:         environment: credentials.isSandbox ? 'sandbox' : 'live',\n    623:         hasApiKey: !!credentials.apiKey,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 629,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Alpaca service initialization FAILED after ${alpacaInitDuration}ms:`",
      "context": "    627:     } catch (alpacaError) {\n    628:       const alpacaInitDuration = Date.now() - alpacaInitStart;\n>>> 629:       console.error(`❌ [${requestId}] Alpaca service initialization FAILED after ${alpacaInitDuration}ms:`, {\n    630:         error: alpacaError.message,\n    631:         errorStack: alpacaError.stack,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 660,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📝 [${requestId}] Updating user subscriptions`",
      "context": "    658: \n    659:     // Update user subscriptions with logging\n>>> 660:     console.log(`📝 [${requestId}] Updating user subscriptions`, {\n    661:       previousSubscriptions: Array.from(userSubscriptions.get(userId) || []),\n    662:       newSubscriptions: symbols"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 667,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Fetching market data for ${symbols.length} symbols`",
      "context": "    665: \n    666:     // Get latest quotes for requested symbols with comprehensive error handling\n>>> 667:     console.log(`📊 [${requestId}] Fetching market data for ${symbols.length} symbols`);\n    668:     const marketData = {};\n    669:     const now = Date.now();"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 679,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Processing symbol: ${symbol}`",
      "context": "    677:       const symbolFetchStart = Date.now();\n    678:       try {\n>>> 679:         console.log(`📊 [${requestId}] Processing symbol: ${symbol}`);\n    680:         \n    681:         // Check if we have fresh cached data"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 682,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`quote:${symbol}`",
      "context": "    680:         \n    681:         // Check if we have fresh cached data\n>>> 682:         const cacheKey = `quote:${symbol}`;\n    683:         const cachedData = realtimeDataCache.get(cacheKey);\n    684:         const lastUpdate = lastUpdateTime.get(symbol) || 0;"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 694,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${requestId}] Using cached data for ${symbol}`",
      "context": "    692:           };\n    693:           cachedSymbols++;\n>>> 694:           console.log(`📋 [${requestId}] Using cached data for ${symbol}`, {\n    695:             age: `${dataAge}ms`,\n    696:             ttl: `${CACHE_TTL}ms`"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 695,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${dataAge}ms`",
      "context": "    693:           cachedSymbols++;\n    694:           console.log(`📋 [${requestId}] Using cached data for ${symbol}`, {\n>>> 695:             age: `${dataAge}ms`,\n    696:             ttl: `${CACHE_TTL}ms`\n    697:           });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 696,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${CACHE_TTL}ms`",
      "context": "    694:           console.log(`📋 [${requestId}] Using cached data for ${symbol}`, {\n    695:             age: `${dataAge}ms`,\n>>> 696:             ttl: `${CACHE_TTL}ms`\n    697:           });\n    698:         } else {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 700,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 [${requestId}] Fetching fresh data for ${symbol} from Alpaca`",
      "context": "    698:         } else {\n    699:           // Fetch fresh data from Alpaca with timeout protection\n>>> 700:           console.log(`📡 [${requestId}] Fetching fresh data for ${symbol} from Alpaca`);\n    701:           const alpacaFetchStart = Date.now();\n    702:           "
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 706,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Quote fetch timeout for ${symbol} after 8 seconds`",
      "context": "    704:             userAlpacaService.getLatestQuote(symbol),\n    705:             new Promise((_, reject) => \n>>> 706:               setTimeout(() => reject(new Error(`Quote fetch timeout for ${symbol} after 8 seconds`)), 8000)\n    707:             )\n    708:           ]);"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 731,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Fresh data fetched for ${symbol} in ${alpacaFetchDuration}ms`",
      "context": "    729:             successfulFetches++;\n    730:             \n>>> 731:             console.log(`✅ [${requestId}] Fresh data fetched for ${symbol} in ${alpacaFetchDuration}ms`, {\n    732:               bidPrice: quote.bidPrice,\n    733:               askPrice: quote.askPrice,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 737,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${requestId}] No quote data returned for ${symbol}`",
      "context": "    735:             });\n    736:           } else {\n>>> 737:             console.warn(`⚠️ [${requestId}] No quote data returned for ${symbol}`);\n    738:             marketData[symbol] = {\n    739:               symbol: symbol,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 749,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Symbol ${symbol} processed in ${symbolDuration}ms`",
      "context": "    747:         \n    748:         const symbolDuration = Date.now() - symbolFetchStart;\n>>> 749:         console.log(`✅ [${requestId}] Symbol ${symbol} processed in ${symbolDuration}ms`);\n    750:         \n    751:       } catch (error) {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 753,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Failed to get quote for ${symbol} after ${symbolDuration}ms:`",
      "context": "    751:       } catch (error) {\n    752:         const symbolDuration = Date.now() - symbolFetchStart;\n>>> 753:         console.error(`❌ [${requestId}] Failed to get quote for ${symbol} after ${symbolDuration}ms:`, {\n    754:           error: error.message,\n    755:           errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 794,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Live data stream completed in ${totalDuration}ms`",
      "context": "    792:     const totalDuration = Date.now() - requestStart;\n    793: \n>>> 794:     console.log(`✅ [${requestId}] Live data stream completed in ${totalDuration}ms`, {\n    795:       summary: {\n    796:         totalSymbols: symbols.length,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 800,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${Math.round((successfulFetches + cachedSymbols) / symbols.length * 100)}%`",
      "context": "    798:         cachedSymbols,\n    799:         failedSymbols,\n>>> 800:         successRate: `${Math.round((successfulFetches + cachedSymbols) / symbols.length * 100)}%`\n    801:       },\n    802:       performance: {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 803,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalDuration}ms`",
      "context": "    801:       },\n    802:       performance: {\n>>> 803:         totalDuration: `${totalDuration}ms`,\n    804:         dataFetchDuration: `${dataFetchDuration}ms`,\n    805:         avgPerSymbol: `${Math.round(dataFetchDuration / symbols.length)}ms`"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 804,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${dataFetchDuration}ms`",
      "context": "    802:       performance: {\n    803:         totalDuration: `${totalDuration}ms`,\n>>> 804:         dataFetchDuration: `${dataFetchDuration}ms`,\n    805:         avgPerSymbol: `${Math.round(dataFetchDuration / symbols.length)}ms`\n    806:       },"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 805,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${Math.round(dataFetchDuration / symbols.length)}ms`",
      "context": "    803:         totalDuration: `${totalDuration}ms`,\n    804:         dataFetchDuration: `${dataFetchDuration}ms`,\n>>> 805:         avgPerSymbol: `${Math.round(dataFetchDuration / symbols.length)}ms`\n    806:       },\n    807:       cache: {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 809,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${Math.round(cachedSymbols / symbols.length * 100)}%`",
      "context": "    807:       cache: {\n    808:         totalCachedSymbols: realtimeDataCache.size,\n>>> 809:         hitRate: `${Math.round(cachedSymbols / symbols.length * 100)}%`\n    810:       },\n    811:       status: 'SUCCESS'"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 842,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Live data stream FAILED after ${errorDuration}ms:`",
      "context": "    840:   } catch (streamError) {\n    841:     const errorDuration = Date.now() - requestStart;\n>>> 842:     console.error(`❌ [${requestId}] Live data stream FAILED after ${errorDuration}ms:`, {\n    843:       error: streamError.message,\n    844:       errorStack: streamError.stack,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1022,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Subscribed to ${userSymbols.length} symbols`",
      "context": "    1020:       subscribed: userSymbols,\n    1021:       dataTypes: dataTypes || ['quotes'],\n>>> 1022:       message: `Subscribed to ${userSymbols.length} symbols`,\n    1023:       streamEndpoints: {\n    1024:         quotes: `/api/websocket/stream/${userSymbols.join(',')}`,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1024,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/stream/${userSymbols.join(',')}`",
      "context": "    1022:       message: `Subscribed to ${userSymbols.length} symbols`,\n    1023:       streamEndpoints: {\n>>> 1024:         quotes: `/api/websocket/stream/${userSymbols.join(',')}`,\n    1025:         trades: `/api/websocket/trades/${userSymbols.join(',')}`,\n    1026:         bars: `/api/websocket/bars/${userSymbols.join(',')}`"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1025,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/trades/${userSymbols.join(',')}`",
      "context": "    1023:       streamEndpoints: {\n    1024:         quotes: `/api/websocket/stream/${userSymbols.join(',')}`,\n>>> 1025:         trades: `/api/websocket/trades/${userSymbols.join(',')}`,\n    1026:         bars: `/api/websocket/bars/${userSymbols.join(',')}`\n    1027:       }"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1026,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/bars/${userSymbols.join(',')}`",
      "context": "    1024:         quotes: `/api/websocket/stream/${userSymbols.join(',')}`,\n    1025:         trades: `/api/websocket/trades/${userSymbols.join(',')}`,\n>>> 1026:         bars: `/api/websocket/bars/${userSymbols.join(',')}`\n    1027:       }\n    1028:     }));"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1064,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/stream/${subscriptions.join(',')}`",
      "context": "    1062:       count: subscriptions.length,\n    1063:       streamEndpoints: subscriptions.length > 0 ? {\n>>> 1064:         quotes: `/api/websocket/stream/${subscriptions.join(',')}`,\n    1065:         trades: `/api/websocket/trades/${subscriptions.join(',')}`,\n    1066:         bars: `/api/websocket/bars/${subscriptions.join(',')}`"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1065,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/trades/${subscriptions.join(',')}`",
      "context": "    1063:       streamEndpoints: subscriptions.length > 0 ? {\n    1064:         quotes: `/api/websocket/stream/${subscriptions.join(',')}`,\n>>> 1065:         trades: `/api/websocket/trades/${subscriptions.join(',')}`,\n    1066:         bars: `/api/websocket/bars/${subscriptions.join(',')}`\n    1067:       } : null"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1066,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/api/websocket/bars/${subscriptions.join(',')}`",
      "context": "    1064:         quotes: `/api/websocket/stream/${subscriptions.join(',')}`,\n    1065:         trades: `/api/websocket/trades/${subscriptions.join(',')}`,\n>>> 1066:         bars: `/api/websocket/bars/${subscriptions.join(',')}`\n    1067:       } : null\n    1068:     }));"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 Cleaned up inactive connection: ${connectionId}`",
      "context": "    1194:   inactiveConnections.forEach(connectionId => {\n    1195:     activeConnections.delete(connectionId);\n>>> 1196:     console.log(`🧹 Cleaned up inactive connection: ${connectionId}`);\n    1197:   });\n    1198:   "
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 189,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    }\n    \n    // Verify JWT token\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    187:   try {\n    188:     if (!data.token) {\n>>> 189:       throw new Error('Authentication token required');\n    190:     }\n    191:     "
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 195,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n    \n    const payload = await verifier.verify(data.token);\n    \n    // Update connection with authenticated user\n    connection.userId = payload.sub;\n    connection.authenticated = true;\n    connection.lastSeen = Date.now();\n    \n    console.log(`",
      "context": "    193:     const verifier = jwt.CognitoJwtVerifier.create({\n    194:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 195:       tokenUse: 'access',\n    196:       clientId: process.env.COGNITO_CLIENT_ID\n    197:     });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 471,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    });\n    \n    // Verify JWT token with comprehensive error handling\n    const verifyStart = Date.now();\n    let payload, userId;\n    try {\n      const verifier = jwt.CognitoJwtVerifier.create({\n        userPoolId: process.env.COGNITO_USER_POOL_ID,\n        tokenUse: '",
      "context": "    469:     console.log(`🔍 [${requestId}] Verifying JWT token`, {\n    470:       tokenLength: token.length,\n>>> 471:       tokenPrefix: token.substring(0, 20) + '...'\n    472:     });\n    473:     "
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 480,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        clientId: process.env.COGNITO_CLIENT_ID\n      });\n\n      payload = await verifier.verify(token);\n      userId = payload.sub;\n      const verifyDuration = Date.now() - verifyStart;\n      \n      console.log(`",
      "context": "    478:       const verifier = jwt.CognitoJwtVerifier.create({\n    479:         userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 480:         tokenUse: 'access',\n    481:         clientId: process.env.COGNITO_CLIENT_ID\n    482:       });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 597,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    595:         error: 'Failed to retrieve API credentials',\n    596:         message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 597:         error_code: 'API_CREDENTIALS_ERROR',\n    598:         details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    599:         request_info: {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 597,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        details: process.env.NODE_ENV === '",
      "context": "    595:         error: 'Failed to retrieve API credentials',\n    596:         message: 'There was an error accessing your API credentials. Please try again or contact support.',\n>>> 597:         error_code: 'API_CREDENTIALS_ERROR',\n    598:         details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n    599:         request_info: {"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 852,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      {\n        requestId,\n        error_duration_ms: errorDuration,\n        details: process.env.NODE_ENV === '",
      "context": "    850:     \n    851:     res.status(500).json(createErrorResponse(\n>>> 852:       'Failed to stream market data',\n    853:       {\n    854:         requestId,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    871:     }\n    872: \n>>> 873:     const token = authHeader.replace('Bearer ', '');\n    874:     \n    875:     const verifier = jwt.CognitoJwtVerifier.create({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 877,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    // Parse symbols\n    const symbols = req.params.symbols.split('",
      "context": "    875:     const verifier = jwt.CognitoJwtVerifier.create({\n    876:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 877:       tokenUse: 'access',\n    878:       clientId: process.env.COGNITO_CLIENT_ID\n    879:     });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    871:     }\n    872: \n>>> 873:     const token = authHeader.replace('Bearer ', '');\n    874:     \n    875:     const verifier = jwt.CognitoJwtVerifier.create({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 940,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    // Parse symbols and timeframe\n    const symbols = req.params.symbols.split('",
      "context": "    938:     const verifier = jwt.CognitoJwtVerifier.create({\n    939:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 940:       tokenUse: 'access',\n    941:       clientId: process.env.COGNITO_CLIENT_ID\n    942:     });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    871:     }\n    872: \n>>> 873:     const token = authHeader.replace('Bearer ', '');\n    874:     \n    875:     const verifier = jwt.CognitoJwtVerifier.create({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1002,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    const { symbols, dataTypes } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json(createErrorResponse('",
      "context": "    1000:     const verifier = jwt.CognitoJwtVerifier.create({\n    1001:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 1002:       tokenUse: 'access',\n    1003:       clientId: process.env.COGNITO_CLIENT_ID\n    1004:     });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    871:     }\n    872: \n>>> 873:     const token = authHeader.replace('Bearer ', '');\n    874:     \n    875:     const verifier = jwt.CognitoJwtVerifier.create({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 873,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: '",
      "context": "    871:     }\n    872: \n>>> 873:     const token = authHeader.replace('Bearer ', '');\n    874:     \n    875:     const verifier = jwt.CognitoJwtVerifier.create({"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 1091,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    const { symbols } = req.body;\n    \n    if (symbols && Array.isArray(symbols)) {\n      // Remove specific symbols\n      const userSymbols = userSubscriptions.get(userId) || new Set();\n      symbols.forEach(symbol => userSymbols.delete(symbol.toUpperCase()));\n      userSubscriptions.set(userId, userSymbols);\n    } else {\n      // Remove all subscriptions\n      userSubscriptions.delete(userId);\n    }\n\n    res.json(success({\n      message: '",
      "context": "    1089:     const verifier = jwt.CognitoJwtVerifier.create({\n    1090:       userPoolId: process.env.COGNITO_USER_POOL_ID,\n>>> 1091:       tokenUse: 'access',\n    1092:       clientId: process.env.COGNITO_CLIENT_ID\n    1093:     });"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 441,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbols,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      hasAuth: !!req.headers.authorization,\n      timestamp: new Date().toISOString()\n    });\n\n    // Verify authentication with detailed logging\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      console.error(`",
      "context": "    439:   try {\n    440:     console.log(`🚀 [${requestId}] Live data stream request initiated`, {\n>>> 441:       symbols: req.params.symbols,\n    442:       userAgent: req.headers['user-agent'],\n    443:       ip: req.ip,"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 517,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbols}`);\n    const symbols = req.params.symbols.split(','",
      "context": "    515: \n    516:     // Parse and validate symbols\n>>> 517:     console.log(`🔍 [${requestId}] Parsing requested symbols: ${req.params.symbols}`);\n    518:     const symbols = req.params.symbols.split(',')\n    519:       .map(s => s.trim().toUpperCase())"
    },
    {
      "file": "webapp/lambda/routes/websocket.js",
      "line": 524,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.params.symbols,\n        filteredSymbols: symbols,\n        impact: 'No valid symbols to stream'\n      });\n      return res.status(400).json(error(\n        'No valid symbols provided',\n        400,\n        { requestId, timestamp: new Date().toISOString() }\n      ).response);\n    }\n    \n    console.log(`",
      "context": "    522:     if (symbols.length === 0) {\n    523:       console.error(`❌ [${requestId}] Invalid symbols provided:`, {\n>>> 524:         originalSymbols: req.params.symbols,\n    525:         filteredSymbols: symbols,\n    526:         impact: 'No valid symbols to stream'"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 258,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Route ${req.originalUrl} not found`",
      "context": "    256:   res.status(404).json({\n    257:     error: 'Not Found',\n>>> 258:     message: `Route ${req.originalUrl} not found`,\n    259:     timestamp: new Date().toISOString()\n    260:   });"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 266,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 Financial Dashboard API server running on port ${PORT}`",
      "context": "    264: if (require.main === module) {\n    265:   app.listen(PORT, () => {\n>>> 266:     console.log(`🚀 Financial Dashboard API server running on port ${PORT}`);\n    267:     console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);\n    268:     console.log(`🌐 Health check: http://localhost:${PORT}/health`);"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 267,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Environment: ${process.env.NODE_ENV || 'development'}`",
      "context": "    265:   app.listen(PORT, () => {\n    266:     console.log(`🚀 Financial Dashboard API server running on port ${PORT}`);\n>>> 267:     console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);\n    268:     console.log(`🌐 Health check: http://localhost:${PORT}/health`);\n    269:     console.log(`📋 API info: http://localhost:${PORT}/api`);"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 268,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 Health check: http://localhost:${PORT}/health`",
      "context": "    266:     console.log(`🚀 Financial Dashboard API server running on port ${PORT}`);\n    267:     console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);\n>>> 268:     console.log(`🌐 Health check: http://localhost:${PORT}/health`);\n    269:     console.log(`📋 API info: http://localhost:${PORT}/api`);\n    270:   });"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 269,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 API info: http://localhost:${PORT}/api`",
      "context": "    267:     console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);\n    268:     console.log(`🌐 Health check: http://localhost:${PORT}/health`);\n>>> 269:     console.log(`📋 API info: http://localhost:${PORT}/api`);\n    270:   });\n    271: }"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 33,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Middleware\napp.use(helmet());\n// Dynamic CORS configuration - AWS-first approach\nconst allowedOrigins = [];\n\n// Add API Gateway URL if available (primary)\nif (process.env.API_GATEWAY_URL) {\n  allowedOrigins.push(process.env.API_GATEWAY_URL);\n}\n\n// Add custom CORS origins from environment\nif (process.env.CORS_ALLOWED_ORIGINS) {\n  const customOrigins = process.env.CORS_ALLOWED_ORIGINS.split('",
      "context": "    31: const backtestRoutes = require('./routes/backtest');\n    32: const settingsRoutes = require('./routes/settings');\n>>> 33: const tradesRoutes = require('./routes/trades');\n    34: \n    35: const app = express();"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 50,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "').map(o => o.trim());\n  allowedOrigins.push(...customOrigins);\n}\n\n// Development fallback only if no AWS URLs configured\nif (allowedOrigins.length === 0 && process.env.NODE_ENV !== '",
      "context": "    48: // Add custom CORS origins from environment\n    49: if (process.env.CORS_ALLOWED_ORIGINS) {\n>>> 50:   const customOrigins = process.env.CORS_ALLOWED_ORIGINS.split(',').map(o => o.trim());\n    51:   allowedOrigins.push(...customOrigins);\n    52: }"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 57,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n}\n\napp.use(cors({\n  origin: [\n    ...allowedOrigins,\n    /^https:\\/\\/.*\\.cloudfront\\.net$/,\n    /^https:\\/\\/.*\\.amazonaws\\.com$/\n  ],\n  credentials: true\n}));\n\n// Logging\nif (process.env.NODE_ENV !== '",
      "context": "    55: if (allowedOrigins.length === 0 && process.env.NODE_ENV !== 'production') {\n    56:   console.warn('⚠️ No AWS URLs configured - adding localhost fallback for development');\n>>> 57:   allowedOrigins.push('http://localhost:3000', 'http://127.0.0.1:3000');\n    58: }\n    59: "
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 111,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV || '",
      "context": "    109:     if (quick === 'true') {\n    110:       return res.json({ \n>>> 111:         status: 'healthy',\n    112:         timestamp: new Date().toISOString(),\n    113:         environment: process.env.NODE_ENV || 'development',"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 120,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    const dbHealth = await healthCheck();\n    \n    res.json({\n      status: dbHealth.status,\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || '",
      "context": "    118:     \n    119:     // Full health check with database\n>>> 120:     console.log('🔄 Health check requested');\n    121:     const dbHealth = await healthCheck();\n    122:     "
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 136,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || '",
      "context": "    134:     console.error('❌ Health check failed:', error);\n    135:     res.status(503).json({\n>>> 136:       status: 'unhealthy',\n    137:       timestamp: new Date().toISOString(),\n    138:       environment: process.env.NODE_ENV || 'development',"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 165,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Mock endpoints for development - only if no AWS resources configured\nif (process.env.NODE_ENV !== '",
      "context": "    163:       patterns: '/api/patterns',\n    164:       scores: '/api/scores',\n>>> 165:       backtest: '/api/backtest'\n    166:     },\n    167:     timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 172,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' && !process.env.API_GATEWAY_URL && !process.env.DATABASE_URL) {\n  app.get('",
      "context": "    170: \n    171: // Mock endpoints for development - only if no AWS resources configured\n>>> 172: if (process.env.NODE_ENV !== 'production' && !process.env.API_GATEWAY_URL && !process.env.DATABASE_URL) {\n    173:   app.get('/api/stocks', (req, res) => {\n    174:     res.json({"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 136,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || '",
      "context": "    134:     console.error('❌ Health check failed:', error);\n    135:     res.status(503).json({\n>>> 136:       status: 'unhealthy',\n    137:       timestamp: new Date().toISOString(),\n    138:       environment: process.env.NODE_ENV || 'development',"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 207,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', environment: process.env.NODE_ENV || '",
      "context": "    205:       uptime: process.uptime(),\n    206:       database: { status: 'mock_mode' },\n>>> 207:       api: { version: '1.0.0', environment: process.env.NODE_ENV || 'development' }\n    208:     });\n    209:   });"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 217,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || '",
      "context": "    215:     message: 'Financial Dashboard API',\n    216:     version: '1.0.0',\n>>> 217:     status: 'operational',\n    218:     timestamp: new Date().toISOString(),\n    219:     environment: process.env.NODE_ENV || 'development',"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 248,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    message: process.env.NODE_ENV === '",
      "context": "    246:   console.error('Error:', err);\n    247:   res.status(500).json({\n>>> 248:     error: 'Internal Server Error',\n    249:     message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',\n    250:     timestamp: new Date().toISOString()"
    },
    {
      "file": "webapp/lambda/server.js",
      "line": 267,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`📊 Environment: ${process.env.NODE_ENV || '",
      "context": "    265:   app.listen(PORT, () => {\n    266:     console.log(`🚀 Financial Dashboard API server running on port ${PORT}`);\n>>> 267:     console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);\n    268:     console.log(`🌐 Health check: http://localhost:${PORT}/health`);\n    269:     console.log(`📋 API info: http://localhost:${PORT}/api`);"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 39,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown strategy: ${strategy}`",
      "context": "    37: \n    38:     if (!this.strategies[strategy]) {\n>>> 39:       throw new Error(`Unknown strategy: ${strategy}`);\n    40:     }\n    41: "
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 178,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`RSI oversold at ${currentRSI.toFixed(2)}`",
      "context": "    176:       return {\n    177:         action: 'BUY',\n>>> 178:         reason: `RSI oversold at ${currentRSI.toFixed(2)}`,\n    179:         confidence: Math.min(((30 - currentRSI) / 10) * 100, 100),\n    180:         indicator: 'RSI',"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`RSI overbought at ${currentRSI.toFixed(2)}`",
      "context": "    184:       return {\n    185:         action: 'SELL',\n>>> 186:         reason: `RSI overbought at ${currentRSI.toFixed(2)}`,\n    187:         confidence: Math.min(((currentRSI - 70) / 10) * 100, 100),\n    188:         indicator: 'RSI',"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 293,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Price ${(deviation * 100).toFixed(1)}% below 50-period mean`",
      "context": "    291:         return {\n    292:           action: 'BUY',\n>>> 293:           reason: `Price ${(deviation * 100).toFixed(1)}% below 50-period mean`,\n    294:           confidence: Math.min(deviation * 1000, 100),\n    295:           indicator: 'MEAN_REVERSION',"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 301,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Price ${(deviation * 100).toFixed(1)}% above 50-period mean`",
      "context": "    299:         return {\n    300:           action: 'SELL',\n>>> 301:           reason: `Price ${(deviation * 100).toFixed(1)}% above 50-period mean`,\n    302:           confidence: Math.min(deviation * 1000, 100),\n    303:           indicator: 'MEAN_REVERSION',"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 383,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Entry: ${signal.action} ${shares} shares at $${adjustedPrice.toFixed(2)} (${signal.reason})`",
      "context": "    381:     }\n    382: \n>>> 383:     console.log(`Entry: ${signal.action} ${shares} shares at $${adjustedPrice.toFixed(2)} (${signal.reason})`);\n    384:   }\n    385: "
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 435,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Exit: ${state.position.type} ${shares} shares at $${adjustedPrice.toFixed(2)} (${reason}) - P&L: $${pnl.toFixed(2)}`",
      "context": "    433:     }\n    434: \n>>> 435:     console.log(`Exit: ${state.position.type} ${shares} shares at $${adjustedPrice.toFixed(2)} (${reason}) - P&L: $${pnl.toFixed(2)}`);\n    436: \n    437:     // Clear position"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 553,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${totalReturn.toFixed(2)}%`",
      "context": "    551:       recommendation: this.generateRecommendation(state.metrics),\n    552:       keyStats: {\n>>> 553:         totalReturn: `${totalReturn.toFixed(2)}%`,\n    554:         winRate: `${state.metrics.winRate.toFixed(1)}%`,\n    555:         maxDrawdown: `${state.metrics.maxDrawdown.toFixed(2)}%`,"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 554,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${state.metrics.winRate.toFixed(1)}%`",
      "context": "    552:       keyStats: {\n    553:         totalReturn: `${totalReturn.toFixed(2)}%`,\n>>> 554:         winRate: `${state.metrics.winRate.toFixed(1)}%`,\n    555:         maxDrawdown: `${state.metrics.maxDrawdown.toFixed(2)}%`,\n    556:         sharpeRatio: state.metrics.sharpeRatio.toFixed(2),"
    },
    {
      "file": "webapp/lambda/services/backtestingService.js",
      "line": 555,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${state.metrics.maxDrawdown.toFixed(2)}%`",
      "context": "    553:         totalReturn: `${totalReturn.toFixed(2)}%`,\n    554:         winRate: `${state.metrics.winRate.toFixed(1)}%`,\n>>> 555:         maxDrawdown: `${state.metrics.maxDrawdown.toFixed(2)}%`,\n    556:         sharpeRatio: state.metrics.sharpeRatio.toFixed(2),\n    557:         totalTrades: state.metrics.totalTrades,"
    },
    {
      "file": "webapp/lambda/services/complianceService.js",
      "line": 113,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[AUDIT] ${auditEntry.action} by ${auditEntry.userId}:`",
      "context": "    111:     }\n    112: \n>>> 113:     console.log(`[AUDIT] ${auditEntry.action} by ${auditEntry.userId}:`, auditEntry.details);\n    114:     return auditEntry;\n    115:   }"
    },
    {
      "file": "webapp/lambda/services/complianceService.js",
      "line": 488,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${pendingRequests.length} pending data subject requests`",
      "context": "    486:         type: 'PENDING_DATA_REQUESTS',\n    487:         severity: 'HIGH',\n>>> 488:         description: `${pendingRequests.length} pending data subject requests`,\n    489:         count: pendingRequests.length\n    490:       });"
    },
    {
      "file": "webapp/lambda/services/complianceService.js",
      "line": 502,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${expiredConsents.length} expired consent records`",
      "context": "    500:         type: 'EXPIRED_CONSENTS',\n    501:         severity: 'MEDIUM',\n>>> 502:         description: `${expiredConsents.length} expired consent records`,\n    503:         count: expiredConsents.length\n    504:       });"
    },
    {
      "file": "webapp/lambda/services/complianceService.js",
      "line": 587,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No retention policy found for data type: ${dataType}`",
      "context": "    585:     \n    586:     if (!policy) {\n>>> 587:       throw new Error(`No retention policy found for data type: ${dataType}`);\n    588:     }\n    589: "
    },
    {
      "file": "webapp/lambda/services/complianceService.js",
      "line": 694,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${framework} compliance report`",
      "context": "    692:     return {\n    693:       framework,\n>>> 694:       summary: `${framework} compliance report`,\n    695:       auditEvents: auditLogs.length,\n    696:       period: options"
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 51,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown provider: ${provider}`",
      "context": "    49:           break;\n    50:         default:\n>>> 51:           throw new Error(`Unknown provider: ${provider}`);\n    52:       }\n    53:       "
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 75,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to normalize data from ${provider}:`",
      "context": "    73:       providerStats.invalid++;\n    74:       \n>>> 75:       console.warn(`Failed to normalize data from ${provider}:`, error.message, rawData);\n    76:       return null;\n    77:     }"
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown Alpaca message type: ${data.T}`",
      "context": "    134:           };\n    135:         }\n>>> 136:         throw new Error(`Unknown Alpaca message type: ${data.T}`);\n    137:     }\n    138:   }"
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown Polygon message type: ${data.ev}`",
      "context": "    194:           };\n    195:         }\n>>> 196:         throw new Error(`Unknown Polygon message type: ${data.ev}`);\n    197:     }\n    198:   }"
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 222,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown Finnhub message type: ${data.type}`",
      "context": "    220:       };\n    221:     } else {\n>>> 222:       throw new Error(`Unknown Finnhub message type: ${data.type}`);\n    223:     }\n    224:   }"
    },
    {
      "file": "webapp/lambda/services/dataNormalizationService.js",
      "line": 75,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    73:       providerStats.invalid++;\n    74:       \n>>> 75:       console.warn(`Failed to normalize data from ${provider}:`, error.message, rawData);\n    76:       return null;\n    77:     }"
    },
    {
      "file": "webapp/lambda/services/enhancedAuthService.js",
      "line": 496,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`rate_limit:${ipAddress}`",
      "context": "    494:    */\n    495:   async isRateLimited(ipAddress) {\n>>> 496:     const rateLimitKey = `rate_limit:${ipAddress}`;\n    497:     const rateLimitData = this.rateLimitStore.get(rateLimitKey);\n    498:     "
    },
    {
      "file": "webapp/lambda/services/enhancedAuthService.js",
      "line": 662,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Cleaned up ${expiredSessions.length} expired sessions`",
      "context": "    660:     \n    661:     if (expiredSessions.length > 0) {\n>>> 662:       logger.info(`Cleaned up ${expiredSessions.length} expired sessions`);\n    663:     }\n    664:   }"
    },
    {
      "file": "webapp/lambda/services/enhancedAuthService.js",
      "line": 724,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SMS MFA code ${code} sent to ${phoneNumber}`",
      "context": "    722:   async sendSmsCode(phoneNumber, code) {\n    723:     // Implementation depends on your SMS service\n>>> 724:     console.log(`SMS MFA code ${code} sent to ${phoneNumber}`);\n    725:   }\n    726: "
    },
    {
      "file": "webapp/lambda/services/enhancedAuthService.js",
      "line": 729,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Email MFA code ${code} sent to ${email}`",
      "context": "    727:   async sendEmailCode(email, code) {\n    728:     // Implementation depends on your email service\n>>> 729:     console.log(`Email MFA code ${code} sent to ${email}`);\n    730:   }\n    731: "
    },
    {
      "file": "webapp/lambda/services/enhancedAuthService.js",
      "line": 568,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n  }\n\n  /**\n   * Get JWT secret from environment or generate\n   */\n  async getJwtSecret() {\n    return process.env.JWT_SECRET || this.generateJwtSecret();\n  }\n\n  /**\n   * Generate JWT secret\n   */\n  generateJwtSecret() {\n    return crypto.randomBytes(64).toString('",
      "context": "    566:    */\n    567:   generateSessionId() {\n>>> 568:     return crypto.randomBytes(32).toString('hex');\n    569:   }\n    570: "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 131,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Fetching FRED series ${seriesId} from ${startDate} to ${endDate}`",
      "context": "    129:       } = options;\n    130: \n>>> 131:       console.log(`Fetching FRED series ${seriesId} from ${startDate} to ${endDate}`);\n    132: \n    133:       const response = await this.client.get(`/series/observations`, {"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No data returned for series ${seriesId}`",
      "context": "    142: \n    143:       if (!response.data || !response.data.observations) {\n>>> 144:         throw new Error(`No data returned for series ${seriesId}`);\n    145:       }\n    146: "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 155,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Successfully fetched ${observations.length} observations for ${seriesId}`",
      "context": "    153:         }));\n    154: \n>>> 155:       console.log(`Successfully fetched ${observations.length} observations for ${seriesId}`);\n    156:       return observations;\n    157: "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 159,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error fetching FRED series ${seriesId}:`",
      "context": "    157: \n    158:     } catch (error) {\n>>> 159:       console.error(`Error fetching FRED series ${seriesId}:`, error.message);\n    160:       throw error;\n    161:     }"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 171,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No series info found for ${seriesId}`",
      "context": "    169: \n    170:       if (!response.data || !response.data.seriess || response.data.seriess.length === 0) {\n>>> 171:         throw new Error(`No series info found for ${seriesId}`);\n    172:       }\n    173: "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 185,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error fetching series info for ${seriesId}:`",
      "context": "    183: \n    184:     } catch (error) {\n>>> 185:       console.error(`Error fetching series info for ${seriesId}:`, error.message);\n    186:       throw error;\n    187:     }"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 199,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No new data to update for series ${seriesId}`",
      "context": "    197: \n    198:       if (observations.length === 0) {\n>>> 199:         console.log(`No new data to update for series ${seriesId}`);\n    200:         return { updated: 0, series: seriesId };\n    201:       }"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 231,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error inserting observation for ${seriesId} on ${obs.date}:`",
      "context": "    229:           }\n    230:         } catch (dbError) {\n>>> 231:           console.error(`Error inserting observation for ${seriesId} on ${obs.date}:`, dbError.message);\n    232:         }\n    233:       }"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 235,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Updated ${updatedCount} observations for series ${seriesId}`",
      "context": "    233:       }\n    234: \n>>> 235:       console.log(`Updated ${updatedCount} observations for series ${seriesId}`);\n    236:       return { updated: updatedCount, series: seriesId, latest_date: observations[0]?.date };\n    237: "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error updating database for series ${seriesId}:`",
      "context": "    237: \n    238:     } catch (error) {\n>>> 239:       console.error(`Error updating database for series ${seriesId}:`, error.message);\n    240:       throw error;\n    241:     }"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 248,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Starting update of ${coreSeries.length} core FRED series...`",
      "context": "    246:     const coreSeries = Object.keys(FREDService.CORE_SERIES);\n    247: \n>>> 248:     console.log(`Starting update of ${coreSeries.length} core FRED series...`);\n    249: \n    250:     for (const seriesId of coreSeries) {"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 261,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to update series ${seriesId}:`",
      "context": "    259:         \n    260:       } catch (error) {\n>>> 261:         console.error(`Failed to update series ${seriesId}:`, error.message);\n    262:         results.push({ \n    263:           series: seriesId, "
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 271,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Completed FRED update: ${totalUpdated} total observations updated`",
      "context": "    269: \n    270:     const totalUpdated = results.reduce((sum, r) => sum + (r.updated || 0), 0);\n>>> 271:     console.log(`Completed FRED update: ${totalUpdated} total observations updated`);\n    272: \n    273:     return {"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 6,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n    this.apiKey = process.env.FRED_API_KEY || '",
      "context": "    4: class FREDService {\n    5:   constructor() {\n>>> 6:     this.baseURL = 'https://api.stlouisfed.org/fred';\n    7:     this.apiKey = process.env.FRED_API_KEY || 'demo_key';\n    8:     this.client = axios.create({"
    },
    {
      "file": "webapp/lambda/services/fredService.js",
      "line": 131,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${startDate}",
      "context": "    129:       } = options;\n    130: \n>>> 131:       console.log(`Fetching FRED series ${seriesId} from ${startDate} to ${endDate}`);\n    132: \n    133:       const response = await this.client.get(`/series/observations`, {"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 31,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Starting optimization for user ${userId} with objective: ${objective}`",
      "context": "    29: \n    30:     try {\n>>> 31:       console.log(`Starting optimization for user ${userId} with objective: ${objective}`);\n    32: \n    33:       // Step 1: Get current portfolio"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 373,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio volatility of ${(riskMetrics.volatility * 100).toFixed(1)}% is above recommended levels. Consider adding defensive assets.`",
      "context": "    371:         category: 'Risk',\n    372:         title: 'High Portfolio Volatility',\n>>> 373:         message: `Portfolio volatility of ${(riskMetrics.volatility * 100).toFixed(1)}% is above recommended levels. Consider adding defensive assets.`,\n    374:         recommendation: 'Add low-volatility assets like bonds or dividend stocks'\n    375:       });"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 385,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio contains only ${numAssets} assets. Consider expanding for better diversification.`",
      "context": "    383:         category: 'Diversification',\n    384:         title: 'Limited Diversification',\n>>> 385:         message: `Portfolio contains only ${numAssets} assets. Consider expanding for better diversification.`,\n    386:         recommendation: 'Add assets from different sectors or asset classes'\n    387:       });"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 396,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sharpe ratio of ${optimization.sharpeRatio.toFixed(2)} indicates strong risk-adjusted performance.`",
      "context": "    394:         category: 'Performance',\n    395:         title: 'Excellent Risk-Adjusted Returns',\n>>> 396:         message: `Sharpe ratio of ${optimization.sharpeRatio.toFixed(2)} indicates strong risk-adjusted performance.`,\n    397:         recommendation: 'Current optimization looks strong, monitor regularly'\n    398:       });"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 404,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sharpe ratio of ${optimization.sharpeRatio.toFixed(2)} suggests room for improvement.`",
      "context": "    402:         category: 'Performance',\n    403:         title: 'Low Risk-Adjusted Returns',\n>>> 404:         message: `Sharpe ratio of ${optimization.sharpeRatio.toFixed(2)} suggests room for improvement.`,\n    405:         recommendation: 'Consider rebalancing or changing optimization objective'\n    406:       });"
    },
    {
      "file": "webapp/lambda/services/optimizationEngine.js",
      "line": 416,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Largest position represents ${(maxWeight * 100).toFixed(1)}% of portfolio.`",
      "context": "    414:         category: 'Concentration',\n    415:         title: 'High Concentration Risk',\n>>> 416:         message: `Largest position represents ${(maxWeight * 100).toFixed(1)}% of portfolio.`,\n    417:         recommendation: 'Consider reducing concentration in top holdings'\n    418:       });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${value}ms`",
      "context": "    103:         this.triggerAlert('CRITICAL', 'High Response Time', {\n    104:           metric: name,\n>>> 105:           value: `${value}ms`,\n    106:           threshold: `${this.thresholds.responseTime.critical}ms`,\n    107:           impact: 'User experience severely degraded'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 106,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.thresholds.responseTime.critical}ms`",
      "context": "    104:           metric: name,\n    105:           value: `${value}ms`,\n>>> 106:           threshold: `${this.thresholds.responseTime.critical}ms`,\n    107:           impact: 'User experience severely degraded'\n    108:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${value}ms`",
      "context": "    103:         this.triggerAlert('CRITICAL', 'High Response Time', {\n    104:           metric: name,\n>>> 105:           value: `${value}ms`,\n    106:           threshold: `${this.thresholds.responseTime.critical}ms`,\n    107:           impact: 'User experience severely degraded'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 113,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.thresholds.responseTime.warning}ms`",
      "context": "    111:           metric: name,\n    112:           value: `${value}ms`,\n>>> 113:           threshold: `${this.thresholds.responseTime.warning}ms`,\n    114:           impact: 'User experience may be affected'\n    115:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 124,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(value * 100).toFixed(2)}%`",
      "context": "    122:         this.triggerAlert('CRITICAL', 'High Error Rate', {\n    123:           metric: name,\n>>> 124:           value: `${(value * 100).toFixed(2)}%`,\n    125:           threshold: `${(this.thresholds.errorRate.critical * 100).toFixed(2)}%`,\n    126:           impact: 'Service reliability compromised'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(this.thresholds.errorRate.critical * 100).toFixed(2)}%`",
      "context": "    123:           metric: name,\n    124:           value: `${(value * 100).toFixed(2)}%`,\n>>> 125:           threshold: `${(this.thresholds.errorRate.critical * 100).toFixed(2)}%`,\n    126:           impact: 'Service reliability compromised'\n    127:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 124,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(value * 100).toFixed(2)}%`",
      "context": "    122:         this.triggerAlert('CRITICAL', 'High Error Rate', {\n    123:           metric: name,\n>>> 124:           value: `${(value * 100).toFixed(2)}%`,\n    125:           threshold: `${(this.thresholds.errorRate.critical * 100).toFixed(2)}%`,\n    126:           impact: 'Service reliability compromised'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(this.thresholds.errorRate.warning * 100).toFixed(2)}%`",
      "context": "    130:           metric: name,\n    131:           value: `${(value * 100).toFixed(2)}%`,\n>>> 132:           threshold: `${(this.thresholds.errorRate.warning * 100).toFixed(2)}%`,\n    133:           impact: 'Service stability may be affected'\n    134:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 143,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(value * 100).toFixed(1)}%`",
      "context": "    141:         this.triggerAlert('CRITICAL', 'Critical Memory Usage', {\n    142:           metric: name,\n>>> 143:           value: `${(value * 100).toFixed(1)}%`,\n    144:           threshold: `${(this.thresholds.memoryUsage.critical * 100).toFixed(1)}%`,\n    145:           impact: 'Risk of service crashes'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(this.thresholds.memoryUsage.critical * 100).toFixed(1)}%`",
      "context": "    142:           metric: name,\n    143:           value: `${(value * 100).toFixed(1)}%`,\n>>> 144:           threshold: `${(this.thresholds.memoryUsage.critical * 100).toFixed(1)}%`,\n    145:           impact: 'Risk of service crashes'\n    146:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 143,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(value * 100).toFixed(1)}%`",
      "context": "    141:         this.triggerAlert('CRITICAL', 'Critical Memory Usage', {\n    142:           metric: name,\n>>> 143:           value: `${(value * 100).toFixed(1)}%`,\n    144:           threshold: `${(this.thresholds.memoryUsage.critical * 100).toFixed(1)}%`,\n    145:           impact: 'Risk of service crashes'"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 151,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${(this.thresholds.memoryUsage.warning * 100).toFixed(1)}%`",
      "context": "    149:           metric: name,\n    150:           value: `${(value * 100).toFixed(1)}%`,\n>>> 151:           threshold: `${(this.thresholds.memoryUsage.warning * 100).toFixed(1)}%`,\n    152:           impact: 'Performance degradation possible'\n    153:         });"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[PERFORMANCE ALERT] ${severity}: ${title}`",
      "context": "    178:     \n    179:     // Log alert\n>>> 180:     console.log(`[PERFORMANCE ALERT] ${severity}: ${title}`, details);\n    181:     \n    182:     // Generate recommendation based on alert"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 226,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Optimization Recommendations for ${alert.title}`",
      "context": "    224:       id: crypto.randomUUID(),\n    225:       alertId: alert.id,\n>>> 226:       title: `Optimization Recommendations for ${alert.title}`,\n    227:       recommendations: relevantRecommendations,\n    228:       priority: alert.severity === 'CRITICAL' ? 'HIGH' : 'MEDIUM',"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 571,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Performance monitoring cleanup completed. Metrics: ${this.metrics.size}, Alerts: ${this.alerts.length}, Recommendations: ${this.recommendations.length}`",
      "context": "    569:     );\n    570:     \n>>> 571:     console.log(`Performance monitoring cleanup completed. Metrics: ${this.metrics.size}, Alerts: ${this.alerts.length}, Recommendations: ${this.recommendations.length}`);\n    572:   }\n    573: "
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 612,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${name},${new Date(metric.timestamp).toISOString()},${metric.value},${metric.category || 'general'}`",
      "context": "    610:     for (const [name, metricData] of Object.entries(data.metrics)) {\n    611:       metricData.data.forEach(metric => {\n>>> 612:         csvRows.push(`${name},${new Date(metric.timestamp).toISOString()},${metric.value},${metric.category || 'general'}`);\n    613:       });\n    614:     }"
    },
    {
      "file": "webapp/lambda/services/performanceMonitoringService.js",
      "line": 69,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        environment: process.env.NODE_ENV || '",
      "context": "    67:       metadata: {\n    68:         ...metadata,\n>>> 69:         source: 'performance_service',\n    70:         environment: process.env.NODE_ENV || 'production'\n    71:       }"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Rebalance: ${currentPercent.toFixed(1)}% → ${targetPercent.toFixed(1)}%`",
      "context": "    164:             currentPrice,\n    165:             estimatedCost: Math.abs(adjustmentNeeded),\n>>> 166:             reason: `Rebalance: ${currentPercent.toFixed(1)}% → ${targetPercent.toFixed(1)}%`,\n    167:             priority: deviation > rebalanceThreshold * 200 ? 'HIGH' : 'MEDIUM',\n    168:             deviation: deviation"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 243,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Risk parity: ${currentRiskPercent.toFixed(1)}% → ${targetRiskPercent.toFixed(1)}% risk`",
      "context": "    241:             currentPrice: marketData[rc.symbol]?.price || 0,\n    242:             estimatedCost: Math.abs(sharesAdjustment) * (marketData[rc.symbol]?.price || 0),\n>>> 243:             reason: `Risk parity: ${currentRiskPercent.toFixed(1)}% → ${targetRiskPercent.toFixed(1)}% risk`,\n    244:             priority: 'MEDIUM',\n    245:             riskAdjustment: true"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 282,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Tax-loss harvesting: Realize $${Math.abs(unrealizedLoss).toFixed(2)} loss`",
      "context": "    280:             currentPrice,\n    281:             estimatedCost: position.shares * currentPrice,\n>>> 282:             reason: `Tax-loss harvesting: Realize $${Math.abs(unrealizedLoss).toFixed(2)} loss`,\n    283:             priority: 'LOW',\n    284:             taxOptimization: true,"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 562,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio volatility (${(currentRisk.volatility * 100).toFixed(1)}%) exceeds target (${(targetRisk.maxVolatility * 100).toFixed(1)}%)`",
      "context": "    560:         type: 'HIGH_VOLATILITY',\n    561:         severity: 'HIGH',\n>>> 562:         message: `Portfolio volatility (${(currentRisk.volatility * 100).toFixed(1)}%) exceeds target (${(targetRisk.maxVolatility * 100).toFixed(1)}%)`,\n    563:         recommendation: 'Consider reducing exposure to volatile assets'\n    564:       });"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 571,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Highest position concentration (${currentRisk.concentration.toFixed(1)}%) exceeds target (${targetRisk.maxConcentration}%)`",
      "context": "    569:         type: 'HIGH_CONCENTRATION',\n    570:         severity: 'MEDIUM',\n>>> 571:         message: `Highest position concentration (${currentRisk.concentration.toFixed(1)}%) exceeds target (${targetRisk.maxConcentration}%)`,\n    572:         recommendation: 'Consider diversifying concentrated positions'\n    573:       });"
    },
    {
      "file": "webapp/lambda/services/portfolioOptimizationService.js",
      "line": 580,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio beta (${currentRisk.beta.toFixed(2)}) exceeds target (${targetRisk.maxBeta})`",
      "context": "    578:         type: 'HIGH_BETA',\n    579:         severity: 'MEDIUM',\n>>> 580:         message: `Portfolio beta (${currentRisk.beta.toFixed(2)}) exceeds target (${targetRisk.maxBeta})`,\n    581:         recommendation: 'Consider adding defensive positions to reduce market sensitivity'\n    582:       });"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 44,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Real-time service: ${provider} connected`",
      "context": "    42:   setupWebSocketHandlers() {\n    43:     this.wsManager.on('connected', ({ provider }) => {\n>>> 44:       console.log(`✅ Real-time service: ${provider} connected`);\n    45:       this.connectedProviders.add(provider);\n    46:       this.emit('providerConnected', { provider });"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 50,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 Real-time service: ${provider} disconnected`",
      "context": "    48:     \n    49:     this.wsManager.on('disconnected', ({ provider }) => {\n>>> 50:       console.log(`🔌 Real-time service: ${provider} disconnected`);\n    51:       this.connectedProviders.delete(provider);\n    52:       this.emit('providerDisconnected', { provider });"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Real-time service: ${provider} error:`",
      "context": "    61:     \n    62:     this.wsManager.on('error', ({ provider, error }) => {\n>>> 63:       console.error(`❌ Real-time service: ${provider} error:`, error.message);\n    64:       this.emit('providerError', { provider, error });\n    65:     });"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 79,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Provider ${provider} not enabled`",
      "context": "    77:     try {\n    78:       if (!this.options.enabledProviders.includes(provider)) {\n>>> 79:         throw new Error(`Provider ${provider} not enabled`);\n    80:       }\n    81:       "
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 85,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 Connected to ${provider} for real-time data`",
      "context": "    83:       await this.wsManager.connect(provider, apiKey);\n    84:       \n>>> 85:       console.log(`🔌 Connected to ${provider} for real-time data`);\n    86:       return true;\n    87:       "
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 89,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to connect to ${provider}:`",
      "context": "    87:       \n    88:     } catch (error) {\n>>> 89:       console.error(`Failed to connect to ${provider}:`, error.message);\n    90:       throw error;\n    91:     }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to subscribe ${symbol} on ${provider}:`",
      "context": "    134:             subscribedProviders.push(provider);\n    135:           } catch (error) {\n>>> 136:             console.error(`Failed to subscribe ${symbol} on ${provider}:`, error.message);\n    137:           }\n    138:         }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 149,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Subscribed to ${symbols.length} symbols across providers`",
      "context": "    147:     });\n    148:     \n>>> 149:     console.log(`📊 Subscribed to ${symbols.length} symbols across providers`);\n    150:     this.emit('subscribed', { symbols, results });\n    151:     "
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to unsubscribe ${symbol} from ${provider}:`",
      "context": "    167:             this.wsManager.unsubscribe(provider, [symbol]);\n    168:           } catch (error) {\n>>> 169:             console.error(`Failed to unsubscribe ${symbol} from ${provider}:`, error.message);\n    170:           }\n    171:         }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Unsubscribed from ${symbols.length} symbols`",
      "context": "    188:     });\n    189:     \n>>> 190:     console.log(`📊 Unsubscribed from ${symbols.length} symbols`);\n    191:     this.emit('unsubscribed', { symbols });\n    192:   }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 207,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error processing message from ${provider}:`",
      "context": "    205:       \n    206:     } catch (error) {\n>>> 207:       console.error(`Error processing message from ${provider}:`, error.message);\n    208:     }\n    209:   }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${data.type}:${data.symbol}`",
      "context": "    236:     \n    237:     if (data.symbol) {\n>>> 238:       this.emit(`${data.type}:${data.symbol}`, data);\n    239:     }\n    240:   }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 270,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`aggregated:${symbol}`",
      "context": "    268:     // Store aggregated data for API access\n    269:     Object.keys(aggregatedData).forEach(symbol => {\n>>> 270:       this.emit(`aggregated:${symbol}`, aggregatedData[symbol]);\n    271:     });\n    272:   }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 279,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Handling failover from primary provider: ${failedProvider}`",
      "context": "    277:     }\n    278:     \n>>> 279:     console.log(`🔄 Handling failover from primary provider: ${failedProvider}`);\n    280:     \n    281:     // Find symbols that were subscribed via the failed provider"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 300,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Failing over ${affectedSymbols.length} symbols to ${fallbackProvider}`",
      "context": "    298:     if (availableFallbacks.length > 0) {\n    299:       const fallbackProvider = availableFallbacks[0];\n>>> 300:       console.log(`🔄 Failing over ${affectedSymbols.length} symbols to ${fallbackProvider}`);\n    301:       \n    302:       try {"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 169,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    167:             this.wsManager.unsubscribe(provider, [symbol]);\n    168:           } catch (error) {\n>>> 169:             console.error(`Failed to unsubscribe ${symbol} from ${provider}:`, error.message);\n    170:           }\n    171:         }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 190,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${symbols.length}",
      "context": "    188:     });\n    189:     \n>>> 190:     console.log(`📊 Unsubscribed from ${symbols.length} symbols`);\n    191:     this.emit('unsubscribed', { symbols });\n    192:   }"
    },
    {
      "file": "webapp/lambda/services/realTimeMarketDataService.js",
      "line": 169,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    167:             this.wsManager.unsubscribe(provider, [symbol]);\n    168:           } catch (error) {\n>>> 169:             console.error(`Failed to unsubscribe ${symbol} from ${provider}:`, error.message);\n    170:           }\n    171:         }"
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 74,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔒 Security event logged: ${eventType} [${severity}] from ${event.sourceIP}`",
      "context": "    72:         }\n    73: \n>>> 74:         console.log(`🔒 Security event logged: ${eventType} [${severity}] from ${event.sourceIP}`);\n    75:         \n    76:         return event.id;"
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 187,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Security alert triggered: ${alertType}`",
      "context": "    185:         };\n    186: \n>>> 187:         console.warn(`🚨 Security alert triggered: ${alertType}`, details);\n    188: \n    189:         // Take automated response if enabled"
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 227,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🛡️ Automated response taken for ${alert.alertType}: ${actions.join(', ')}`",
      "context": "    225:         \n    226:         if (actions.length > 0) {\n>>> 227:             console.log(`🛡️ Automated response taken for ${alert.alertType}: ${actions.join(', ')}`);\n    228:         }\n    229:     }"
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 273,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Threat level changed: ${this.threatLevel} → ${newThreatLevel}`",
      "context": "    271: \n    272:         if (newThreatLevel !== this.threatLevel) {\n>>> 273:             console.warn(`🎯 Threat level changed: ${this.threatLevel} → ${newThreatLevel}`);\n    274:             this.threatLevel = newThreatLevel;\n    275:             this.emit('threatLevelChanged', { from: this.threatLevel, to: newThreatLevel });"
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 354,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${event.timestamp},${event.eventType},${event.severity},${event.sourceIP},\"${event.userAgent}\",${event.userId || ''},\"${JSON.stringify(event.details).replace(/\"/g, '\"\"')}\"`",
      "context": "    352:             const csvHeader = 'timestamp,eventType,severity,sourceIP,userAgent,userId,details\\n';\n    353:             const csvRows = filteredEvents.map(event => \n>>> 354:                 `${event.timestamp},${event.eventType},${event.severity},${event.sourceIP},\"${event.userAgent}\",${event.userId || ''},\"${JSON.stringify(event.details).replace(/\"/g, '\"\"')}\"`\n    355:             ).join('\\n');\n    356:             "
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 382,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧹 Removed ${removedCount} old security events`",
      "context": "    380:         \n    381:         if (removedCount > 0) {\n>>> 382:             console.log(`🧹 Removed ${removedCount} old security events`);\n    383:         }\n    384: "
    },
    {
      "file": "webapp/lambda/services/securityService.js",
      "line": 74,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${event.sourceIP}",
      "context": "    72:         }\n    73: \n>>> 74:         console.log(`🔒 Security event logged: ${eventType} [${severity}] from ${event.sourceIP}`);\n    75:         \n    76:         return event.id;"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 33,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to calculate ${indicator}:`",
      "context": "    31:           results[indicator] = this.indicators[indicator](data);\n    32:         } catch (error) {\n>>> 33:           console.error(`Failed to calculate ${indicator}:`, error.message);\n    34:           results[indicator] = { error: error.message };\n    35:         }"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 37,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown indicator: ${indicator}`",
      "context": "    35:         }\n    36:       } else {\n>>> 37:         results[indicator] = { error: `Unknown indicator: ${indicator}` };\n    38:       }\n    39:     });"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 47,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for RSI: need at least ${period + 1} points`",
      "context": "    45:   calculateRSI(data, period = 14) {\n    46:     if (data.length < period + 1) {\n>>> 47:       throw new Error(`Insufficient data for RSI: need at least ${period + 1} points`);\n    48:     }\n    49: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 117,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for MACD: need at least ${slowPeriod} points`",
      "context": "    115:   calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n    116:     if (data.length < slowPeriod) {\n>>> 117:       throw new Error(`Insufficient data for MACD: need at least ${slowPeriod} points`);\n    118:     }\n    119: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 177,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for Bollinger Bands: need at least ${period} points`",
      "context": "    175:   calculateBollingerBands(data, period = 20, stdDev = 2) {\n    176:     if (data.length < period) {\n>>> 177:       throw new Error(`Insufficient data for Bollinger Bands: need at least ${period} points`);\n    178:     }\n    179: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 227,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for SMA: need at least ${period} points`",
      "context": "    225:   calculateSMA(data, period = 20) {\n    226:     if (data.length < period) {\n>>> 227:       throw new Error(`Insufficient data for SMA: need at least ${period} points`);\n    228:     }\n    229: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 256,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for EMA: need at least ${period} points`",
      "context": "    254:   calculateEMA(data, period = 20) {\n    255:     if (data.length < period) {\n>>> 256:       throw new Error(`Insufficient data for EMA: need at least ${period} points`);\n    257:     }\n    258: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 283,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for Stochastic: need at least ${kPeriod} points`",
      "context": "    281:   calculateStochastic(data, kPeriod = 14, dPeriod = 3) {\n    282:     if (data.length < kPeriod) {\n>>> 283:       throw new Error(`Insufficient data for Stochastic: need at least ${kPeriod} points`);\n    284:     }\n    285: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 325,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Insufficient data for Williams %R: need at least ${period} points`",
      "context": "    323:   calculateWilliamsR(data, period = 14) {\n    324:     if (data.length < period) {\n>>> 325:       throw new Error(`Insufficient data for Williams %R: need at least ${period} points`);\n    326:     }\n    327: "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 562,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strong BUY signal with ${confidence}% confidence. `",
      "context": "    560:     \n    561:     if (signal === 'BUY' && confidence > 70) {\n>>> 562:       recommendation = `Strong BUY signal with ${confidence}% confidence. `;\n    563:     } else if (signal === 'SELL' && confidence > 70) {\n    564:       recommendation = `Strong SELL signal with ${confidence}% confidence. `;"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 564,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strong SELL signal with ${confidence}% confidence. `",
      "context": "    562:       recommendation = `Strong BUY signal with ${confidence}% confidence. `;\n    563:     } else if (signal === 'SELL' && confidence > 70) {\n>>> 564:       recommendation = `Strong SELL signal with ${confidence}% confidence. `;\n    565:     } else if (signal === 'BUY' && confidence > 50) {\n    566:       recommendation = `Moderate BUY signal with ${confidence}% confidence. `;"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 566,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Moderate BUY signal with ${confidence}% confidence. `",
      "context": "    564:       recommendation = `Strong SELL signal with ${confidence}% confidence. `;\n    565:     } else if (signal === 'BUY' && confidence > 50) {\n>>> 566:       recommendation = `Moderate BUY signal with ${confidence}% confidence. `;\n    567:     } else if (signal === 'SELL' && confidence > 50) {\n    568:       recommendation = `Moderate SELL signal with ${confidence}% confidence. `;"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 568,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Moderate SELL signal with ${confidence}% confidence. `",
      "context": "    566:       recommendation = `Moderate BUY signal with ${confidence}% confidence. `;\n    567:     } else if (signal === 'SELL' && confidence > 50) {\n>>> 568:       recommendation = `Moderate SELL signal with ${confidence}% confidence. `;\n    569:     } else {\n    570:       recommendation = `HOLD position. Signals are mixed with ${confidence}% confidence. `;"
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 570,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`HOLD position. Signals are mixed with ${confidence}% confidence. `",
      "context": "    568:       recommendation = `Moderate SELL signal with ${confidence}% confidence. `;\n    569:     } else {\n>>> 570:       recommendation = `HOLD position. Signals are mixed with ${confidence}% confidence. `;\n    571:     }\n    572:     "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 574,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${strongSignals} strong indicator(s) support this signal. `",
      "context": "    572:     \n    573:     if (strongSignals > 0) {\n>>> 574:       recommendation += `${strongSignals} strong indicator(s) support this signal. `;\n    575:     }\n    576:     "
    },
    {
      "file": "webapp/lambda/services/technicalAnalysisService.js",
      "line": 580,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${consensusSignals}/${signals.length} indicators agree. `",
      "context": "    578:       recommendation += 'All indicators agree. ';\n    579:     } else {\n>>> 580:       recommendation += `${consensusSignals}/${signals.length} indicators agree. `;\n    581:     }\n    582:     "
    },
    {
      "file": "webapp/lambda/services/tradeAnalyticsService.js",
      "line": 23,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid Alpaca credentials: ${validation.error}`",
      "context": "    21:       const validation = await alpaca.validateCredentials();\n    22:       if (!validation.valid) {\n>>> 23:         throw new Error(`Invalid Alpaca credentials: ${validation.error}`);\n    24:       }\n    25: "
    },
    {
      "file": "webapp/lambda/services/tradeAnalyticsService.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to import trades: ${error.message}`",
      "context": "    71:       await this.updateBrokerConfig(userId, 'alpaca', isPaper, false, error.message);\n    72:       \n>>> 73:       throw new Error(`Failed to import trades: ${error.message}`);\n    74:     }\n    75:   }"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker OPEN for ${provider}. Retry in ${Math.ceil((circuitBreaker.timeout - timeSinceFailure) / 1000)}s`",
      "context": "    71:         const timeSinceFailure = Date.now() - circuitBreaker.lastFailureTime;\n    72:         if (timeSinceFailure < circuitBreaker.timeout) {\n>>> 73:           throw new Error(`Circuit breaker OPEN for ${provider}. Retry in ${Math.ceil((circuitBreaker.timeout - timeSinceFailure) / 1000)}s`);\n    74:         } else {\n    75:           circuitBreaker.state = 'HALF_OPEN';"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 81,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown provider: ${provider}`",
      "context": "    79:       const providerConfig = this.providers[provider];\n    80:       if (!providerConfig) {\n>>> 81:         throw new Error(`Unknown provider: ${provider}`);\n    82:       }\n    83:       "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 Connecting to ${provider} WebSocket...`",
      "context": "    82:       }\n    83:       \n>>> 84:       console.log(`🔌 Connecting to ${provider} WebSocket...`);\n    85:       \n    86:       const ws = new WebSocket(providerConfig.wsUrl);"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 87,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${provider}-${Date.now()}`",
      "context": "    85:       \n    86:       const ws = new WebSocket(providerConfig.wsUrl);\n>>> 87:       const connectionId = `${provider}-${Date.now()}`;\n    88:       \n    89:       // Connection timeout"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 99,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Connected to ${provider} WebSocket`",
      "context": "    97:       ws.onopen = () => {\n    98:         clearTimeout(connectionTimeout);\n>>> 99:         console.log(`✅ Connected to ${provider} WebSocket`);\n    100:         \n    101:         // Reset circuit breaker on successful connection"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 ${provider} WebSocket closed:`",
      "context": "    134:       \n    135:       ws.onclose = (event) => {\n>>> 136:         console.log(`🔌 ${provider} WebSocket closed:`, event.code, event.reason);\n    137:         this.handleDisconnection(provider, event);\n    138:       };"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 141,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ ${provider} WebSocket error:`",
      "context": "    139:       \n    140:       ws.onerror = (error) => {\n>>> 141:         console.error(`❌ ${provider} WebSocket error:`, error);\n    142:         this.handleConnectionFailure(provider, error);\n    143:       };"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No active connection for ${provider}`",
      "context": "    154:     const connection = this.connections.get(provider);\n    155:     if (!connection || !connection.connected) {\n>>> 156:       throw new Error(`No active connection for ${provider}`);\n    157:     }\n    158:     "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authentication not implemented for ${provider}`",
      "context": "    184:         \n    185:       default:\n>>> 186:         throw new Error(`Authentication not implemented for ${provider}`);\n    187:     }\n    188:     "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 Sent authentication to ${provider}`",
      "context": "    188:     \n    189:     connection.ws.send(JSON.stringify(authMessage));\n>>> 190:     console.log(`🔐 Sent authentication to ${provider}`);\n    191:   }\n    192:   "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No active connection for ${provider}`",
      "context": "    154:     const connection = this.connections.get(provider);\n    155:     if (!connection || !connection.connected) {\n>>> 156:       throw new Error(`No active connection for ${provider}`);\n    157:     }\n    158:     "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`T.${symbols.join(',T.')}`",
      "context": "    212:         subscribeMessage = {\n    213:           action: 'subscribe',\n>>> 214:           params: `T.${symbols.join(',T.')}`\n    215:         };\n    216:         break;"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 230,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Subscription not implemented for ${provider}`",
      "context": "    228:         \n    229:       default:\n>>> 230:         throw new Error(`Subscription not implemented for ${provider}`);\n    231:     }\n    232:     "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 245,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Subscribed to ${symbols.length} symbols on ${provider}`",
      "context": "    243:     });\n    244:     \n>>> 245:     console.log(`📊 Subscribed to ${symbols.length} symbols on ${provider}`);\n    246:   }\n    247:   "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`T.${symbols.join(',T.')}`",
      "context": "    212:         subscribeMessage = {\n    213:           action: 'subscribe',\n>>> 214:           params: `T.${symbols.join(',T.')}`\n    215:         };\n    216:         break;"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 302,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Unsubscribed from ${symbols.length} symbols on ${provider}`",
      "context": "    300:     });\n    301:     \n>>> 302:     console.log(`📊 Unsubscribed from ${symbols.length} symbols on ${provider}`);\n    303:   }\n    304:   "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 316,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to parse message from ${provider}:`",
      "context": "    314:         message = JSON.parse(data);\n    315:       } catch (parseError) {\n>>> 316:         console.warn(`Failed to parse message from ${provider}:`, data);\n    317:         return;\n    318:       }"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 331,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error handling message from ${provider}:`",
      "context": "    329:       \n    330:     } catch (error) {\n>>> 331:       console.error(`Error handling message from ${provider}:`, error);\n    332:     }\n    333:   }"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 409,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Circuit breaker OPEN for ${provider} after ${circuitBreaker.failures} failures`",
      "context": "    407:     if (circuitBreaker.failures >= circuitBreaker.threshold) {\n    408:       circuitBreaker.state = 'OPEN';\n>>> 409:       console.log(`🚨 Circuit breaker OPEN for ${provider} after ${circuitBreaker.failures} failures`);\n    410:     }\n    411:     "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 419,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Max reconnection attempts reached for ${provider}`",
      "context": "    417:     \n    418:     if (attempts >= this.options.maxReconnectAttempts) {\n>>> 419:       console.log(`❌ Max reconnection attempts reached for ${provider}`);\n    420:       this.emit('maxReconnectAttemptsReached', { provider });\n    421:       return;"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 431,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Reconnecting to ${provider} in ${delay}ms (attempt ${attempts + 1}/${this.options.maxReconnectAttempts})`",
      "context": "    429:     this.reconnectAttempts.set(provider, attempts + 1);\n    430:     \n>>> 431:     console.log(`🔄 Reconnecting to ${provider} in ${delay}ms (attempt ${attempts + 1}/${this.options.maxReconnectAttempts})`);\n    432:     \n    433:     setTimeout(() => {"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 450,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❤️ No activity from ${provider} for ${timeSinceLastActivity}ms, closing connection`",
      "context": "    448:       const timeSinceLastActivity = Date.now() - connection.lastActivity;\n    449:       if (timeSinceLastActivity > this.options.heartbeatInterval * 2) {\n>>> 450:         console.warn(`❤️ No activity from ${provider} for ${timeSinceLastActivity}ms, closing connection`);\n    451:         connection.ws.close();\n    452:         return;"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 302,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${symbols.length}",
      "context": "    300:     });\n    301:     \n>>> 302:     console.log(`📊 Unsubscribed from ${symbols.length} symbols on ${provider}`);\n    303:   }\n    304:   "
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 316,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    314:         message = JSON.parse(data);\n    315:       } catch (parseError) {\n>>> 316:         console.warn(`Failed to parse message from ${provider}:`, data);\n    317:         return;\n    318:       }"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 316,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    314:         message = JSON.parse(data);\n    315:       } catch (parseError) {\n>>> 316:         console.warn(`Failed to parse message from ${provider}:`, data);\n    317:         return;\n    318:       }"
    },
    {
      "file": "webapp/lambda/services/webSocketManager.js",
      "line": 316,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${provider}",
      "context": "    314:         message = JSON.parse(data);\n    315:       } catch (parseError) {\n>>> 316:         console.warn(`Failed to parse message from ${provider}:`, data);\n    317:         return;\n    318:       }"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/integration/routes/performance-analytics.test.js",
      "line": 46,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${authToken}`",
      "context": "    44:       const response = await request(app)\n    45:         .get('/api/performance-analytics/portfolio')\n>>> 46:         .set('Authorization', `Bearer ${authToken}`)\n    47:         .query({\n    48:           startDate: 'invalid-date',"
    },
    {
      "file": "webapp/lambda/tests/setup.js",
      "line": 33,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n    };\n    \n    next();\n  }\n}));\n\n// Global test setup\nbeforeAll(() => {\n  // Set test environment variables\n  process.env.NODE_ENV = '",
      "context": "    31:     req.user = {\n    32:       userId: 'test-user-123',\n>>> 33:       email: 'test@example.com'\n    34:     };\n    35:     "
    },
    {
      "file": "webapp/lambda/tests/setup.js",
      "line": 43,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  process.env.DB_SECRET_ARN = '",
      "context": "    41: beforeAll(() => {\n    42:   // Set test environment variables\n>>> 43:   process.env.NODE_ENV = 'test';\n    44:   process.env.DB_SECRET_ARN = 'mock-secret-arn';\n    45:   process.env.WEBAPP_AWS_REGION = 'us-east-1';"
    },
    {
      "file": "webapp/lambda/tests/setup.js",
      "line": 44,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  process.env.WEBAPP_AWS_REGION = '",
      "context": "    42:   // Set test environment variables\n    43:   process.env.NODE_ENV = 'test';\n>>> 44:   process.env.DB_SECRET_ARN = 'mock-secret-arn';\n    45:   process.env.WEBAPP_AWS_REGION = 'us-east-1';\n    46: });"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    65:       \n    66:       this.logger.info('Portfolio performance metrics calculated', {\n>>> 67:         userId: `${userId.substring(0, 8)}...`,\n    68:         period: `${startDate} to ${endDate}`,\n    69:         calculationTime: Date.now() - startTime,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${startDate} to ${endDate}`",
      "context": "    66:       this.logger.info('Portfolio performance metrics calculated', {\n    67:         userId: `${userId.substring(0, 8)}...`,\n>>> 68:         period: `${startDate} to ${endDate}`,\n    69:         calculationTime: Date.now() - startTime,\n    70:         dataPoints: portfolioHistory.length"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    65:       \n    66:       this.logger.info('Portfolio performance metrics calculated', {\n>>> 67:         userId: `${userId.substring(0, 8)}...`,\n    68:         period: `${startDate} to ${endDate}`,\n    69:         calculationTime: Date.now() - startTime,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 814,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`perf_${userId}_${Date.now()}`",
      "context": "    812:       \n    813:       const report = {\n>>> 814:         reportId: `perf_${userId}_${Date.now()}`,\n    815:         userId,\n    816:         period: performanceMetrics.period,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    65:       \n    66:       this.logger.info('Portfolio performance metrics calculated', {\n>>> 67:         userId: `${userId.substring(0, 8)}...`,\n    68:         period: `${startDate} to ${endDate}`,\n    69:         calculationTime: Date.now() - startTime,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    65:       \n    66:       this.logger.info('Portfolio performance metrics calculated', {\n>>> 67:         userId: `${userId.substring(0, 8)}...`,\n    68:         period: `${startDate} to ${endDate}`,\n    69:         calculationTime: Date.now() - startTime,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 850,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Total Return: ${baseMetrics.totalReturnPercent.toFixed(2)}%`",
      "context": "    848:       overallPerformance: this.getPerformanceGrade(baseMetrics.totalReturnPercent),\n    849:       keyHighlights: [\n>>> 850:         `Total Return: ${baseMetrics.totalReturnPercent.toFixed(2)}%`,\n    851:         `Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`,\n    852:         `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 851,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`",
      "context": "    849:       keyHighlights: [\n    850:         `Total Return: ${baseMetrics.totalReturnPercent.toFixed(2)}%`,\n>>> 851:         `Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`,\n    852:         `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,\n    853:         `Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`,"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 852,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Volatility: ${riskMetrics.volatility.toFixed(2)}%`",
      "context": "    850:         `Total Return: ${baseMetrics.totalReturnPercent.toFixed(2)}%`,\n    851:         `Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`,\n>>> 852:         `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,\n    853:         `Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`,\n    854:         `Diversification: ${sectorAnalysis.diversificationScore.diversificationScore.toFixed(0)}/100`"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 853,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`",
      "context": "    851:         `Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`,\n    852:         `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,\n>>> 853:         `Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`,\n    854:         `Diversification: ${sectorAnalysis.diversificationScore.diversificationScore.toFixed(0)}/100`\n    855:       ],"
    },
    {
      "file": "webapp/lambda/utils/advancedPerformanceAnalytics.js",
      "line": 854,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Diversification: ${sectorAnalysis.diversificationScore.diversificationScore.toFixed(0)}/100`",
      "context": "    852:         `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,\n    853:         `Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`,\n>>> 854:         `Diversification: ${sectorAnalysis.diversificationScore.diversificationScore.toFixed(0)}/100`\n    855:       ],\n    856:       riskProfile: this.assessRiskProfile(riskMetrics),"
    },
    {
      "file": "webapp/lambda/utils/advancedSignalProcessor.js",
      "line": 11,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`signal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    9: \n    10:   generateCorrelationId() {\n>>> 11:     return `signal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    12:   }\n    13: "
    },
    {
      "file": "webapp/lambda/utils/aiTradingSignalsEngine.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ai-signals-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    62: \n    63:   generateCorrelationId() {\n>>> 64:     return `ai-signals-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    65:   }\n    66: "
    },
    {
      "file": "webapp/lambda/utils/aiTradingSignalsEngine.js",
      "line": 198,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    196:           volume,\n    197:           adj_close\n>>> 198:         FROM ${tableName}\n    199:         WHERE symbol = $1\n    200:         ORDER BY date DESC"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 103,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Alpaca API retry ${config.__retryCount}/${config.retry} for ${config.url}`",
      "context": "    101:           config.__retryCount += 1;\n    102:           \n>>> 103:           console.log(`🔄 Alpaca API retry ${config.__retryCount}/${config.retry} for ${config.url}`);\n    104:           \n    105:           // Wait before retrying with exponential backoff"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 148,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Adaptive rate limiting: Resetting failure count from ${this.adaptiveRateLimit.consecutiveFailures} to 0`",
      "context": "    146:     // Reset adaptive rate limiting failures on success\n    147:     if (this.adaptiveRateLimit.consecutiveFailures > 0) {\n>>> 148:       console.log(`🎯 Adaptive rate limiting: Resetting failure count from ${this.adaptiveRateLimit.consecutiveFailures} to 0`);\n    149:       this.adaptiveRateLimit.consecutiveFailures = 0;\n    150:     }"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 162,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Adaptive rate limiting: Failure count increased to ${this.adaptiveRateLimit.consecutiveFailures}`",
      "context": "    160:     // Track consecutive failures for adaptive rate limiting\n    161:     this.adaptiveRateLimit.consecutiveFailures++;\n>>> 162:     console.log(`⚠️ Adaptive rate limiting: Failure count increased to ${this.adaptiveRateLimit.consecutiveFailures}`);\n    163:     \n    164:     if (this.circuitBreaker.failures >= this.circuitBreaker.threshold) {"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔴 Alpaca circuit breaker OPENED after ${this.circuitBreaker.failures} failures`",
      "context": "    164:     if (this.circuitBreaker.failures >= this.circuitBreaker.threshold) {\n    165:       this.circuitBreaker.isOpen = true;\n>>> 166:       console.error(`🔴 Alpaca circuit breaker OPENED after ${this.circuitBreaker.failures} failures`);\n    167:     } else {\n    168:       console.warn(`⚠️ Alpaca failure ${this.circuitBreaker.failures}/${this.circuitBreaker.threshold}`);"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Alpaca failure ${this.circuitBreaker.failures}/${this.circuitBreaker.threshold}`",
      "context": "    166:       console.error(`🔴 Alpaca circuit breaker OPENED after ${this.circuitBreaker.failures} failures`);\n    167:     } else {\n>>> 168:       console.warn(`⚠️ Alpaca failure ${this.circuitBreaker.failures}/${this.circuitBreaker.threshold}`);\n    169:     }\n    170:   }"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 193,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Alpaca ${operationName} failed:`",
      "context": "    191:       \n    192:       // Enhanced error logging with timeout information\n>>> 193:       console.error(`❌ Alpaca ${operationName} failed:`, {\n    194:         message: error.message,\n    195:         status: error.response?.status,"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 230,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🕰️ Adaptive throttling: ${delay}ms delay (usage: ${(currentUsage * 100).toFixed(1)}%, failures: ${this.adaptiveRateLimit.consecutiveFailures})`",
      "context": "    228:       \n    229:       if (delay > 0) {\n>>> 230:         console.log(`🕰️ Adaptive throttling: ${delay}ms delay (usage: ${(currentUsage * 100).toFixed(1)}%, failures: ${this.adaptiveRateLimit.consecutiveFailures})`);\n    231:         return new Promise(resolve => setTimeout(resolve, delay));\n    232:       }"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 237,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Rate limit exceeded. Please try again in ${resetTime} seconds.`",
      "context": "    235:     if (this.requestTimes.length >= this.maxRequestsPerWindow) {\n    236:       const resetTime = Math.ceil((this.requestTimes[0] + this.rateLimitWindow - now) / 1000);\n>>> 237:       throw new Error(`Rate limit exceeded. Please try again in ${resetTime} seconds.`);\n    238:     }\n    239:     "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 346,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/v2/stocks/quotes/latest?symbols=${symbolsStr}`",
      "context": "    344:     return await this.safeApiCall(async () => {\n    345:       const symbolsStr = symbols.join(',');\n>>> 346:       const response = await this.dataApi.get(`/v2/stocks/quotes/latest?symbols=${symbolsStr}`);\n    347:       const quotes = response.data.quotes;\n    348:       "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 439,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/v2/calendar?${params}`",
      "context": "    437:       if (start) params.append('start', start);\n    438:       if (end) params.append('end', end);\n>>> 439:       const response = await this.api.get(`/v2/calendar?${params}`);\n    440:       const calendar = response.data;\n    441: "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 503,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/v2/assets/${symbol}`",
      "context": "    501:   async getAsset(symbol) {\n    502:     return await this.safeApiCall(async () => {\n>>> 503:       const response = await this.api.get(`/v2/assets/${symbol}`);\n    504:       const asset = response.data;\n    505:       "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 531,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing required order field: ${field}`",
      "context": "    529:       for (const field of requiredFields) {\n    530:         if (!orderData[field]) {\n>>> 531:           throw new Error(`Missing required order field: ${field}`);\n    532:         }\n    533:       }"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 541,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid order side: ${orderData.side}. Must be one of: ${validSides.join(', ')}`",
      "context": "    539: \n    540:       if (!validSides.includes(orderData.side.toLowerCase())) {\n>>> 541:         throw new Error(`Invalid order side: ${orderData.side}. Must be one of: ${validSides.join(', ')}`);\n    542:       }\n    543: "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 545,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid order type: ${orderData.type}. Must be one of: ${validTypes.join(', ')}`",
      "context": "    543: \n    544:       if (!validTypes.includes(orderData.type.toLowerCase())) {\n>>> 545:         throw new Error(`Invalid order type: ${orderData.type}. Must be one of: ${validTypes.join(', ')}`);\n    546:       }\n    547: "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 549,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid time_in_force: ${orderData.time_in_force}. Must be one of: ${validTimeInForce.join(', ')}`",
      "context": "    547: \n    548:       if (!validTimeInForce.includes(orderData.time_in_force.toLowerCase())) {\n>>> 549:         throw new Error(`Invalid time_in_force: ${orderData.time_in_force}. Must be one of: ${validTimeInForce.join(', ')}`);\n    550:       }\n    551: "
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 641,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`/v2/orders/${orderId}`",
      "context": "    639:   async cancelOrder(orderId) {\n    640:     return await this.safeApiCall(async () => {\n>>> 641:       const response = await this.api.delete(`/v2/orders/${orderId}`);\n    642:       return response.data;\n    643:     }, 'order cancellation');"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 692,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to generate portfolio summary: ${error.message}`",
      "context": "    690:     } catch (error) {\n    691:       console.error('Alpaca portfolio summary error:', error.message);\n>>> 692:       throw new Error(`Failed to generate portfolio summary: ${error.message}`);\n    693:     }\n    694:   }"
    },
    {
      "file": "webapp/lambda/utils/alpacaService.js",
      "line": 148,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${this.adaptiveRateLimit.consecutiveFailures}",
      "context": "    146:     // Reset adaptive rate limiting failures on success\n    147:     if (this.adaptiveRateLimit.consecutiveFailures > 0) {\n>>> 148:       console.log(`🎯 Adaptive rate limiting: Resetting failure count from ${this.adaptiveRateLimit.consecutiveFailures} to 0`);\n    149:       this.adaptiveRateLimit.consecutiveFailures = 0;\n    150:     }"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection testing not implemented for provider: ${provider}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Provider ${provider} testing not implemented`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection test failed: ${error.message}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Alpaca API returned status ${res.statusCode}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Network error: ${error.message}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`TD Ameritrade API returned status ${res.statusCode}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Network error: ${error.message}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Polygon API returned status ${res.statusCode}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Network error: ${error.message}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Finnhub API returned status ${res.statusCode}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/apiKeyTesting.js",
      "line": 1,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Network error: ${error.message}`",
      "context": ">>> 1: /**\\n * API Key Connection Testing Service\\n * Provides real-time testing of API keys against actual provider endpoints\\n * Part of the enhanced API key validation system\\n */\\n\\nconst https = require('https');\\nconst logger = require('./logger');\\n\\nclass ApiKeyTesting {\\n  constructor() {\\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\\n    this.connectionTimeout = 5000; // 5 seconds\\n  }\\n\\n  /**\\n   * Test API key connection with the actual provider\\n   * @param {string} provider - API provider name\\n   * @param {string} apiKey - API key to test\\n   * @param {string} apiSecret - API secret (if required)\\n   * @returns {Object} Test result with connection status and details\\n   */\\n  async testConnection(provider, apiKey, apiSecret = null) {\\n    const testStartTime = Date.now();\\n    \\n    try {\\n      logger.info('🧪 Starting API key connection test', {\\n        provider: provider,\\n        keyLength: apiKey ? apiKey.length : 0,\\n        hasSecret: !!apiSecret\\n      });\\n\\n      const providerLower = provider.toLowerCase().trim();\\n      \\n      if (!this.supportedProviders.includes(providerLower)) {\\n        return {\\n          success: false,\\n          error: `Connection testing not implemented for provider: ${provider}`,\\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\\n          testTime: Date.now() - testStartTime,\\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\\n        };\\n      }\\n      \\n      switch (providerLower) {\\n        case 'alpaca':\\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\\n          \\n        case 'tdameritrade':\\n        case 'td_ameritrade':\\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\\n          \\n        case 'polygon':\\n          return await this._testPolygonConnection(apiKey, testStartTime);\\n          \\n        case 'finnhub':\\n          return await this._testFinnhubConnection(apiKey, testStartTime);\\n          \\n        default:\\n          return {\\n            success: false,\\n            error: `Provider ${provider} testing not implemented`,\\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\\n            testTime: Date.now() - testStartTime,\\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\\n          };\\n      }\\n      \\n    } catch (error) {\\n      logger.error('❌ API key connection test failed', {\\n        provider: provider,\\n        error: error.message,\\n        testTime: Date.now() - testStartTime\\n      });\\n      \\n      return {\\n        success: false,\\n        error: `Connection test failed: ${error.message}`,\\n        errorCode: 'CONNECTION_TEST_ERROR',\\n        testTime: Date.now() - testStartTime,\\n        suggestions: ['Check your network connection and try again']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Test Alpaca API connection\\n   */\\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'paper-api.alpaca.markets',\\n        path: '/v2/account',\\n        method: 'GET',\\n        headers: {\\n          'APCA-API-KEY-ID': apiKey,\\n          'APCA-API-SECRET-KEY': apiSecret,\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const accountData = JSON.parse(data);\\n              logger.info('✅ Alpaca connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Alpaca API',\\n                accountInfo: {\\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\\n                  status: accountData.status || 'unknown',\\n                  tradingBlocked: accountData.trading_blocked || false\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Alpaca API (response parse warning)',\\n                warning: 'Could not parse account data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Alpaca API credentials',\\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API Key ID and Secret Key',\\n                'Ensure you\\\\'re using the correct paper trading credentials',\\n                'Verify your keys are active and not expired'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Alpaca API access forbidden - check account permissions',\\n              errorCode: 'ALPACA_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your account is approved for API access',\\n                'Check if your account is suspended or restricted',\\n                'Ensure you have the necessary permissions'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ Alpaca connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Alpaca API returned status ${res.statusCode}`,\\n              errorCode: 'ALPACA_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Alpaca API credentials',\\n                'Verify your account status',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ Alpaca connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify Alpaca API is accessible from your location',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify Alpaca API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test TD Ameritrade API connection\\n   */\\n  async _testTdAmeritradeConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.tdameritrade.com',\\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              logger.info('✅ TD Ameritrade connection test successful', {\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                hasQuoteData: !!quoteData.SPY\\n              });\\n              \\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to TD Ameritrade API',\\n                quoteInfo: {\\n                  symbol: 'SPY',\\n                  hasData: !!quoteData.SPY,\\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to TD Ameritrade API (response parse warning)',\\n                warning: 'Could not parse quote data',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid TD Ameritrade Consumer Key',\\n              errorCode: 'TD_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\\n                'Verify your app is approved and active'\\n              ]\\n            });\\n          } else if (res.statusCode === 403) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'TD Ameritrade API access forbidden',\\n              errorCode: 'TD_FORBIDDEN',\\n              testTime: testTime,\\n              suggestions: [\\n                'Verify your app has market data permissions',\\n                'Check if your developer account is approved',\\n                'Ensure you\\\\'re not exceeding rate limits'\\n              ]\\n            });\\n          } else {\\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\\n              statusCode: res.statusCode,\\n              testTime: testTime\\n            });\\n            \\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\\n              errorCode: 'TD_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your TD Ameritrade Consumer Key',\\n                'Verify your app status and permissions',\\n                'Try again in a few moments'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        const testTime = Date.now() - startTime;\\n        logger.error('❌ TD Ameritrade connection test network error', {\\n          error: error.message,\\n          testTime: testTime\\n        });\\n        \\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection',\\n            'Verify TD Ameritrade API is accessible',\\n            'Try again in a few moments'\\n          ]\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        const testTime = Date.now() - startTime;\\n        req.destroy();\\n        \\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: testTime,\\n          suggestions: [\\n            'Check your internet connection speed',\\n            'Try again later',\\n            'Verify TD Ameritrade API is not experiencing outages'\\n          ]\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Polygon API connection\\n   */\\n  async _testPolygonConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'api.polygon.io',\\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const statusData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Polygon API',\\n                marketStatus: {\\n                  market: statusData.market || 'unknown',\\n                  serverTime: statusData.serverTime || 'unknown'\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Polygon API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Polygon API key',\\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key from https://polygon.io/dashboard',\\n                'Ensure your subscription is active',\\n                'Verify the key is not expired'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Polygon API returned status ${res.statusCode}`,\\n              errorCode: 'POLYGON_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Polygon API key',\\n                'Ensure your subscription is active',\\n                'Verify you have sufficient API credits'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Test Finnhub API connection\\n   */\\n  async _testFinnhubConnection(apiKey, startTime) {\\n    return new Promise((resolve) => {\\n      const options = {\\n        hostname: 'finnhub.io',\\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\\n        method: 'GET',\\n        headers: {\\n          'User-Agent': 'Financial-Platform/1.0'\\n        },\\n        timeout: this.connectionTimeout\\n      };\\n\\n      const req = https.request(options, (res) => {\\n        let data = '';\\n        \\n        res.on('data', chunk => {\\n          data += chunk;\\n        });\\n        \\n        res.on('end', () => {\\n          const testTime = Date.now() - startTime;\\n          \\n          if (res.statusCode === 200) {\\n            try {\\n              const quoteData = JSON.parse(data);\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Successfully connected to Finnhub API',\\n                quoteInfo: {\\n                  symbol: 'AAPL',\\n                  currentPrice: quoteData.c || 'N/A',\\n                  hasData: !!(quoteData.c || quoteData.o)\\n                },\\n                suggestions: []\\n              });\\n            } catch (parseError) {\\n              resolve({\\n                success: true,\\n                statusCode: res.statusCode,\\n                testTime: testTime,\\n                message: 'Connected to Finnhub API (response parse warning)',\\n                suggestions: []\\n              });\\n            }\\n          } else if (res.statusCode === 401) {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: 'Invalid Finnhub API key',\\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\\n                'Ensure your account is active',\\n                'Verify the key format is correct (20 lowercase characters)'\\n              ]\\n            });\\n          } else {\\n            resolve({\\n              success: false,\\n              statusCode: res.statusCode,\\n              error: `Finnhub API returned status ${res.statusCode}`,\\n              errorCode: 'FINNHUB_API_ERROR',\\n              testTime: testTime,\\n              suggestions: [\\n                'Check your Finnhub API key',\\n                'Ensure your account is active',\\n                'Verify you have API quota remaining'\\n              ]\\n            });\\n          }\\n        });\\n      });\\n\\n      req.on('error', (error) => {\\n        resolve({\\n          success: false,\\n          error: `Network error: ${error.message}`,\\n          errorCode: 'NETWORK_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your internet connection', 'Try again later']\\n        });\\n      });\\n\\n      req.on('timeout', () => {\\n        req.destroy();\\n        resolve({\\n          success: false,\\n          error: 'Connection timeout (5 seconds)',\\n          errorCode: 'TIMEOUT_ERROR',\\n          testTime: Date.now() - startTime,\\n          suggestions: ['Check your connection speed', 'Try again later']\\n        });\\n      });\\n\\n      req.end();\\n    });\\n  }\\n\\n  /**\\n   * Get supported providers for connection testing\\n   */\\n  getSupportedProviders() {\\n    return this.supportedProviders;\\n  }\\n\\n  /**\\n   * Check if a provider supports connection testing\\n   */\\n  isProviderSupported(provider) {\\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\\n  }\\n}\\n\\nmodule.exports = new ApiKeyTesting();"
    },
    {
      "file": "webapp/lambda/utils/automatedTradingEngine.js",
      "line": 34,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`auto-trade-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    32: \n    33:   generateCorrelationId() {\n>>> 34:     return `auto-trade-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    35:   }\n    36: "
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 45,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Processing ${sortedDates.length} trading days`",
      "context": "    43:       const sortedDates = Object.keys(dataByDate).sort();\n    44:       \n>>> 45:       console.log(`Processing ${sortedDates.length} trading days`);\n    46:       \n    47:       // Initialize equity tracking"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Processed ${this.dayCount} days, Current value: $${totalValue.toFixed(2)}`",
      "context": "    70:         // Log progress\n    71:         if (this.dayCount % 100 === 0) {\n>>> 72:           console.log(`Processed ${this.dayCount} days, Current value: $${totalValue.toFixed(2)}`);\n    73:         }\n    74:       }"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`[${this.currentDate}] ${message}`",
      "context": "    108:       getTechnicalIndicator: this.getTechnicalIndicator.bind(this),\n    109:       getPrice: this.getPrice.bind(this),\n>>> 110:       log: (message) => console.log(`[${this.currentDate}] ${message}`),\n    111:       Math: Math,\n    112:       Date: Date,"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 121,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        with(context) {\n          ${strategyCode}\n        }\n      `",
      "context": "    119:     try {\n    120:       // Execute strategy in isolated context\n>>> 121:       const func = new Function('context', `\n    122:         with(context) {\n    123:           ${strategyCode}"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 129,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strategy execution error on ${this.currentDate}: ${error.message}`",
      "context": "    127:       await func(context);\n    128:     } catch (error) {\n>>> 129:       throw new Error(`Strategy execution error on ${this.currentDate}: ${error.message}`);\n    130:     }\n    131:   }"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 140,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No price data for ${symbol} on ${this.currentDate}`",
      "context": "    138:     \n    139:     if (!price) {\n>>> 140:       console.warn(`No price data for ${symbol} on ${this.currentDate}`);\n    141:       return false;\n    142:     }"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 140,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No price data for ${symbol} on ${this.currentDate}`",
      "context": "    138:     \n    139:     if (!price) {\n>>> 140:       console.warn(`No price data for ${symbol} on ${this.currentDate}`);\n    141:       return false;\n    142:     }"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 298,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Closed position ${symbol} due to ${reason} at $${price}`",
      "context": "    296:       if (position) {\n    297:         this.sell(symbol, position.quantity, price);\n>>> 298:         console.log(`Closed position ${symbol} due to ${reason} at $${price}`);\n    299:       }\n    300:     }"
    },
    {
      "file": "webapp/lambda/utils/backtestEngine.js",
      "line": 318,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`'${s}'`",
      "context": "    316:   async getHistoricalData() {\n    317:     try {\n>>> 318:       const symbolsStr = this.config.symbols.map(s => `'${s}'`).join(',');\n    319:       \n    320:       const result = await query(`"
    },
    {
      "file": "webapp/lambda/utils/backtestingEngine.js",
      "line": 15,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`backtest-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    13: \n    14:   generateCorrelationId() {\n>>> 15:     return `backtest-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    16:   }\n    17: "
    },
    {
      "file": "webapp/lambda/utils/backtestingEngine.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${index + 3}`",
      "context": "    134:    */\n    135:   async getHistoricalData(symbols, startDate, endDate) {\n>>> 136:     const placeholders = symbols.map((_, index) => `$${index + 3}`).join(',');\n    137:     \n    138:     const historicalQuery = `"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 28,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Resetting circuit breaker for ${serviceKey} (was ${breaker.state})`",
      "context": "    26:     const breaker = timeoutHelper.circuitBreakers.get(serviceKey);\n    27:     if (breaker && breaker.state !== 'closed') {\n>>> 28:       console.log(`🔄 Resetting circuit breaker for ${serviceKey} (was ${breaker.state})`);\n    29:       \n    30:       breaker.failures = 0;"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 38,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Circuit breaker for ${serviceKey} reset to closed`",
      "context": "    36:       resetServices.push(serviceKey);\n    37:       \n>>> 38:       console.log(`✅ Circuit breaker for ${serviceKey} reset to closed`);\n    39:     }\n    40:   });"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Reset ${resetCount} circuit breakers: ${resetServices.join(', ')}`",
      "context": "    40:   });\n    41:   \n>>> 42:   console.log(`✅ Reset ${resetCount} circuit breakers: ${resetServices.join(', ')}`);\n    43:   \n    44:   return {"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 57,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Resetting circuit breaker for ${serviceKey}...`",
      "context": "    55:  */\n    56: function resetCircuitBreaker(serviceKey) {\n>>> 57:   console.log(`🔄 Resetting circuit breaker for ${serviceKey}...`);\n    58:   \n    59:   const breaker = timeoutHelper.circuitBreakers.get(serviceKey);"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ℹ️ No circuit breaker found for ${serviceKey}`",
      "context": "    60:   \n    61:   if (!breaker) {\n>>> 62:     console.log(`ℹ️ No circuit breaker found for ${serviceKey}`);\n    63:     return { found: false, serviceKey };\n    64:   }"
    },
    {
      "file": "webapp/lambda/utils/circuitBreakerReset.js",
      "line": 74,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Circuit breaker for ${serviceKey} reset: ${oldState} (${oldFailures} failures) → closed (0 failures)`",
      "context": "    72:   breaker.halfOpenCalls = 0;\n    73:   \n>>> 74:   console.log(`✅ Circuit breaker for ${serviceKey} reset: ${oldState} (${oldFailures} failures) → closed (0 failures)`);\n    75:   \n    76:   return {"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${retryId}] Starting ${context} with retry logic (max ${this.maxRetries} attempts)`",
      "context": "    62:         let lastError;\n    63:         \n>>> 64:         console.log(`🔄 [${retryId}] Starting ${context} with retry logic (max ${this.maxRetries} attempts)`);\n    65:         \n    66:         for (let attempt = 0; attempt <= this.maxRetries; attempt++) {"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${retryId}] ${context} succeeded on attempt ${attempt + 1} after ${duration}ms`",
      "context": "    71:                 \n    72:                 if (attempt > 0) {\n>>> 73:                     console.log(`✅ [${retryId}] ${context} succeeded on attempt ${attempt + 1} after ${duration}ms`);\n    74:                 } else {\n    75:                     console.log(`✅ [${retryId}] ${context} succeeded on first attempt in ${duration}ms`);"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 75,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${retryId}] ${context} succeeded on first attempt in ${duration}ms`",
      "context": "    73:                     console.log(`✅ [${retryId}] ${context} succeeded on attempt ${attempt + 1} after ${duration}ms`);\n    74:                 } else {\n>>> 75:                     console.log(`✅ [${retryId}] ${context} succeeded on first attempt in ${duration}ms`);\n    76:                 }\n    77:                 "
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 91,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${retryId}] ${context} failed on attempt ${attempt + 1}:`",
      "context": "    89:                 const isLastAttempt = attempt === this.maxRetries;\n    90:                 \n>>> 91:                 console.error(`❌ [${retryId}] ${context} failed on attempt ${attempt + 1}:`, {\n    92:                     error: error.message,\n    93:                     code: error.code,"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⏳ [${retryId}] Retrying ${context} in ${delay}ms (attempt ${attempt + 2}/${this.maxRetries + 1})`",
      "context": "    103:                 // Calculate delay for next attempt\n    104:                 const delay = this.calculateDelay(attempt);\n>>> 105:                 console.log(`⏳ [${retryId}] Retrying ${context} in ${delay}ms (attempt ${attempt + 2}/${this.maxRetries + 1})`);\n    106:                 \n    107:                 await this.delay(delay);"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 111,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${retryId}] ${context} failed after ${this.maxRetries + 1} attempts`",
      "context": "    109:         }\n    110:         \n>>> 111:         console.error(`❌ [${retryId}] ${context} failed after ${this.maxRetries + 1} attempts`);\n    112:         \n    113:         return {"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 136,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 Database connection attempt ${attempt + 1}`",
      "context": "    134:         return async () => {\n    135:             return this.execute(async (attempt) => {\n>>> 136:                 console.log(`🔌 Database connection attempt ${attempt + 1}`);\n    137:                 return await connectionFn();\n    138:             }, 'database connection');"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 148,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Database query attempt ${attempt + 1}: ${text.substring(0, 50)}...`",
      "context": "    146:         return async (text, params = []) => {\n    147:             return this.execute(async (attempt) => {\n>>> 148:                 console.log(`🔍 Database query attempt ${attempt + 1}: ${text.substring(0, 50)}...`);\n    149:                 return await queryFn(text, params);\n    150:             }, 'database query');"
    },
    {
      "file": "webapp/lambda/utils/connectionRetry.js",
      "line": 164,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker open for ${circuitBreakerKey}`",
      "context": "    162:             // Check if circuit breaker is open\n    163:             if (timeoutHelper.isCircuitOpen && timeoutHelper.isCircuitOpen(circuitBreakerKey)) {\n>>> 164:                 const error = new Error(`Circuit breaker open for ${circuitBreakerKey}`);\n    165:                 error.code = 'CIRCUIT_BREAKER_OPEN';\n    166:                 throw error;"
    },
    {
      "file": "webapp/lambda/utils/dashboardService.js",
      "line": 23,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    21: \n    22:   generateCorrelationId() {\n>>> 23:     return `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    24:   }\n    25: "
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 18,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + new Date().toISOString() + '",
      "context": "    16: \n    17: // console.log('*** DATABASE.JS PATCHED VERSION RUNNING - v2.1.0 ***');\n>>> 18: // console.log('*** CONFIG SCOPE FIX APPLIED - ' + new Date().toISOString() + ' ***');\n    19: \n    20: /**"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 32,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SET (${secretArn.substring(0, 20)}...)`",
      "context": "    30:         \n    31:         console.log('🔍 Environment check:', {\n>>> 32:             DB_SECRET_ARN: secretArn ? `SET (${secretArn.substring(0, 20)}...)` : 'MISSING',\n    33:             DB_ENDPOINT: process.env.DB_ENDPOINT ? `SET (${process.env.DB_ENDPOINT})` : 'MISSING',\n    34:             AWS_REGION: process.env.AWS_REGION || 'MISSING',"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 33,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SET (${process.env.DB_ENDPOINT})`",
      "context": "    31:         console.log('🔍 Environment check:', {\n    32:             DB_SECRET_ARN: secretArn ? `SET (${secretArn.substring(0, 20)}...)` : 'MISSING',\n>>> 33:             DB_ENDPOINT: process.env.DB_ENDPOINT ? `SET (${process.env.DB_ENDPOINT})` : 'MISSING',\n    34:             AWS_REGION: process.env.AWS_REGION || 'MISSING',\n    35:             NODE_ENV: process.env.NODE_ENV || 'MISSING',"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏠 Host: ${dbConfig.host}`",
      "context": "    64:                 \n    65:                 console.log(`✅ Database config loaded from Secrets Manager:`);\n>>> 66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🔌 Port: ${dbConfig.port}`",
      "context": "    65:                 console.log(`✅ Database config loaded from Secrets Manager:`);\n    66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n>>> 67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n    69:                 console.log(`   👤 User: ${dbConfig.user}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🗄️  Database: ${dbConfig.database}`",
      "context": "    66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n>>> 68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n    69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 69,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 User: ${dbConfig.user}`",
      "context": "    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n>>> 69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n    71:                 console.log(`   🏊 Pool Max: ${dbConfig.max}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏊 Pool Max: ${dbConfig.max}`",
      "context": "    69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n>>> 71:                 console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    72:                 return dbConfig;\n    73:             } catch (secretError) {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 66,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏠 Host: ${dbConfig.host}`",
      "context": "    64:                 \n    65:                 console.log(`✅ Database config loaded from Secrets Manager:`);\n>>> 66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🔌 Port: ${dbConfig.port}`",
      "context": "    65:                 console.log(`✅ Database config loaded from Secrets Manager:`);\n    66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n>>> 67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n    69:                 console.log(`   👤 User: ${dbConfig.user}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🗄️  Database: ${dbConfig.database}`",
      "context": "    66:                 console.log(`   🏠 Host: ${dbConfig.host}`);\n    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n>>> 68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n    69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 69,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 User: ${dbConfig.user}`",
      "context": "    67:                 console.log(`   🔌 Port: ${dbConfig.port}`);\n    68:                 console.log(`   🗄️  Database: ${dbConfig.database}`);\n>>> 69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n    71:                 console.log(`   🏊 Pool Max: ${dbConfig.max}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏊 Pool Max: ${dbConfig.max}`",
      "context": "    69:                 console.log(`   👤 User: ${dbConfig.user}`);\n    70:                 console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n>>> 71:                 console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    72:                 return dbConfig;\n    73:             } catch (secretError) {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 174,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔌 Attempting to connect to ${config.host}:${config.port}...`",
      "context": "    172:             // Add detailed connection logging\n    173:             const connectionStart = Date.now();\n>>> 174:             console.log(`🔌 Attempting to connect to ${config.host}:${config.port}...`);\n    175:             \n    176:             // Skip network test to reduce initialization time - Lambda should have network access"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 186,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚡ Connection established in ${connectionTime}ms`",
      "context": "    184:             ]);\n    185:             const connectionTime = Date.now() - connectionStart;\n>>> 186:             console.log(`⚡ Connection established in ${connectionTime}ms`);\n    187:             \n    188:             const queryStart = Date.now();"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 193,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ⏰ Database time: ${result.rows[0].current_time}`",
      "context": "    191:             \n    192:             console.log('✅ Database connection test successful');\n>>> 193:             console.log(`   ⏰ Database time: ${result.rows[0].current_time}`);\n    194:             console.log(`   🗄️  Database name: ${result.rows[0].db_name}`);\n    195:             console.log(`   👤 Connected as: ${result.rows[0].db_user}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 194,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🗄️  Database name: ${result.rows[0].db_name}`",
      "context": "    192:             console.log('✅ Database connection test successful');\n    193:             console.log(`   ⏰ Database time: ${result.rows[0].current_time}`);\n>>> 194:             console.log(`   🗄️  Database name: ${result.rows[0].db_name}`);\n    195:             console.log(`   👤 Connected as: ${result.rows[0].db_user}`);\n    196:             console.log(`   📊 Version: ${result.rows[0].db_version.split(' ')[0]}`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 195,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 Connected as: ${result.rows[0].db_user}`",
      "context": "    193:             console.log(`   ⏰ Database time: ${result.rows[0].current_time}`);\n    194:             console.log(`   🗄️  Database name: ${result.rows[0].db_name}`);\n>>> 195:             console.log(`   👤 Connected as: ${result.rows[0].db_user}`);\n    196:             console.log(`   📊 Version: ${result.rows[0].db_version.split(' ')[0]}`);\n    197:             console.log(`   ⚡ Query time: ${queryTime}ms`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📊 Version: ${result.rows[0].db_version.split(' ')[0]}`",
      "context": "    194:             console.log(`   🗄️  Database name: ${result.rows[0].db_name}`);\n    195:             console.log(`   👤 Connected as: ${result.rows[0].db_user}`);\n>>> 196:             console.log(`   📊 Version: ${result.rows[0].db_version.split(' ')[0]}`);\n    197:             console.log(`   ⚡ Query time: ${queryTime}ms`);\n    198:             "
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 197,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ⚡ Query time: ${queryTime}ms`",
      "context": "    195:             console.log(`   👤 Connected as: ${result.rows[0].db_user}`);\n    196:             console.log(`   📊 Version: ${result.rows[0].db_version.split(' ')[0]}`);\n>>> 197:             console.log(`   ⚡ Query time: ${queryTime}ms`);\n    198:             \n    199:             client.release();"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 320,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️  Slow query executed in ${duration}ms`",
      "context": "    318:         // Only log slow queries (> 1000ms) or errors\n    319:         if (duration > 1000) {\n>>> 320:             console.log(`⚠️  Slow query executed in ${duration}ms`, {\n    321:                 query: text.substring(0, 200) + (text.length > 200 ? '...' : ''),\n    322:                 params: params ? params.slice(0, 5) : []"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 341,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database '${dbConfig?.database || 'unknown'}' does not exist`",
      "context": "    339:             throw new Error('Database authentication failed - check username/password in Secrets Manager');\n    340:         } else if (error.code === '3D000') {\n>>> 341:             throw new Error(`Database '${dbConfig?.database || 'unknown'}' does not exist`);\n    342:         } else if (error.code === 'ETIMEDOUT') {\n    343:             throw new Error(`Connection timeout to ${dbConfig?.host || 'unknown'} - check VPC routing and security groups`);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 345,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`DNS lookup failed for ${dbConfig?.host || 'unknown'} - check hostname and VPC DNS settings`",
      "context": "    343:             throw new Error(`Connection timeout to ${dbConfig?.host || 'unknown'} - check VPC routing and security groups`);\n    344:         } else if (error.code === 'ENOTFOUND') {\n>>> 345:             throw new Error(`DNS lookup failed for ${dbConfig?.host || 'unknown'} - check hostname and VPC DNS settings`);\n    346:         } else if (error.message.includes('timeout')) {\n    347:             throw new Error('Database query timeout - query took too long to execute');"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 368,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Database health check #${healthCheckCount} passed (${duration}ms) - Pool: ${pool.totalCount} total, ${pool.idleCount} idle`",
      "context": "    366:             // Only log every 10th health check to reduce noise\n    367:             if (healthCheckCount % 10 === 0) {\n>>> 368:                 console.log(`✅ Database health check #${healthCheckCount} passed (${duration}ms) - Pool: ${pool.totalCount} total, ${pool.idleCount} idle`);\n    369:             }\n    370:         } catch (error) {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Database connection health check #${healthCheckCount} failed:`",
      "context": "    369:             }\n    370:         } catch (error) {\n>>> 371:             console.error(`❌ Database connection health check #${healthCheckCount} failed:`, {\n    372:                 error: error.message,\n    373:                 code: error.code,"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 428,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 Testing network connectivity to ${config.host}:${config.port}...`",
      "context": "    426:         }\n    427:         \n>>> 428:         console.log(`🌐 Testing network connectivity to ${config.host}:${config.port}...`);\n    429:         \n    430:         // Use a simple TCP connection test with timeout"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 441,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection timeout after ${timeout}ms`",
      "context": "    439:                 resolve({\n    440:                     status: 'timeout',\n>>> 441:                     message: `Connection timeout after ${timeout}ms`,\n    442:                     host: config.host,\n    443:                     port: config.port"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 489,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🌐 Network test result: ${networkTest.status} - ${networkTest.message}`",
      "context": "    487:         console.log('🌐 Step 1: Testing network connectivity...');\n    488:         const networkTest = await testNetworkConnectivity();\n>>> 489:         console.log(`🌐 Network test result: ${networkTest.status} - ${networkTest.message}`);\n    490:         \n    491:         if (!dbInitialized || !pool) {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 524,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Health check completed - found ${tableHealthData.rows.length} tables`",
      "context": "    522:         `);\n    523:         \n>>> 524:         console.log(`✅ Health check completed - found ${tableHealthData.rows.length} tables`);\n    525:         \n    526:         return {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 575,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT COUNT(*) as count FROM ${table.name}`",
      "context": "    573:                 \n    574:                 if (tableExists.rows[0].exists) {\n>>> 575:                     const countResult = await query(`SELECT COUNT(*) as count FROM ${table.name}`);\n    576:                     const recordCount = parseInt(countResult.rows[0].count);\n    577:                     "
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 581,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n                            SELECT MAX(updated_at) as last_updated \n                            FROM ${table.name} \n                            WHERE updated_at IS NOT NULL\n                        `",
      "context": "    579:                     let lastUpdated = null;\n    580:                     try {\n>>> 581:                         const updateResult = await query(`\n    582:                             SELECT MAX(updated_at) as last_updated \n    583:                             FROM ${table.name} "
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 628,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ ${table.name}: ${status} (${recordCount} records)`",
      "context": "    626:                     ]);\n    627:                     \n>>> 628:                     console.log(`✅ ${table.name}: ${status} (${recordCount} records)`);\n    629:                 } else {\n    630:                     // Table doesn't exist"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 651,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ ${table.name}: missing`",
      "context": "    649:                     ]);\n    650:                     \n>>> 651:                     console.log(`❌ ${table.name}: missing`);\n    652:                 }\n    653:             } catch (error) {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 654,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error checking table ${table.name}:`",
      "context": "    652:                 }\n    653:             } catch (error) {\n>>> 654:                 console.error(`❌ Error checking table ${table.name}:`, error);\n    655:                 \n    656:                 // Record the error in health_status"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 2,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Configure AWS SDK v3 - Updated to trigger deployment for database connection fix v2\nconst secretsManager = new SecretsManagerClient({\n    region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    1: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n>>> 2: const { Pool } = require('pg');\n    3: \n    4: // Configure AWS SDK v3 - Updated to trigger deployment for database connection fix v2"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 18,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n/**\n * Get database configuration from AWS Secrets Manager or environment variables\n */\nasync function getDbConfig() {\n    if (dbConfig) {\n        return dbConfig;\n    }\n\n    try {\n        const secretArn = process.env.DB_SECRET_ARN;\n        \n        console.log('",
      "context": "    16: \n    17: // console.log('*** DATABASE.JS PATCHED VERSION RUNNING - v2.1.0 ***');\n>>> 18: // console.log('*** CONFIG SCOPE FIX APPLIED - ' + new Date().toISOString() + ' ***');\n    19: \n    20: /**"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 33,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            AWS_REGION: process.env.AWS_REGION || '",
      "context": "    31:         console.log('🔍 Environment check:', {\n    32:             DB_SECRET_ARN: secretArn ? `SET (${secretArn.substring(0, 20)}...)` : 'MISSING',\n>>> 33:             DB_ENDPOINT: process.env.DB_ENDPOINT ? `SET (${process.env.DB_ENDPOINT})` : 'MISSING',\n    34:             AWS_REGION: process.env.AWS_REGION || 'MISSING',\n    35:             NODE_ENV: process.env.NODE_ENV || 'MISSING',"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 34,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            NODE_ENV: process.env.NODE_ENV || '",
      "context": "    32:             DB_SECRET_ARN: secretArn ? `SET (${secretArn.substring(0, 20)}...)` : 'MISSING',\n    33:             DB_ENDPOINT: process.env.DB_ENDPOINT ? `SET (${process.env.DB_ENDPOINT})` : 'MISSING',\n>>> 34:             AWS_REGION: process.env.AWS_REGION || 'MISSING',\n    35:             NODE_ENV: process.env.NODE_ENV || 'MISSING',\n    36:             VPC_INFO: {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 37,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n                ENI_INFO: process.env._LAMBDA_SERVER_PORT ? '",
      "context": "    35:             NODE_ENV: process.env.NODE_ENV || 'MISSING',\n    36:             VPC_INFO: {\n>>> 37:                 LAMBDA_RUNTIME_API: process.env.AWS_LAMBDA_RUNTIME_API ? 'IN_LAMBDA' : 'LOCAL',\n    38:                 ENI_INFO: process.env._LAMBDA_SERVER_PORT ? 'VPC_ENABLED' : 'NO_VPC'\n    39:             }"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 45,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n                const command = new GetSecretValueCommand({ SecretId: secretArn });\n                const result = await secretsManager.send(command);\n                const secret = JSON.parse(result.SecretString);\n                \n                dbConfig = {\n                    host: secret.host || process.env.DB_ENDPOINT,\n                    port: parseInt(secret.port) || 5432,\n                    user: secret.username,\n                    password: secret.password,\n                    database: secret.dbname,\n                    max: parseInt(process.env.DB_POOL_MAX) || 5,\n                    idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n                    connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000,\n                    ssl: {\n                        require: true,\n                        rejectUnauthorized: false\n                    }\n                };\n                \n                console.log(`",
      "context": "    43:         if (secretArn) {\n    44:             try {\n>>> 45:                 console.log('Getting DB credentials from Secrets Manager...');\n    46:                 const command = new GetSecretValueCommand({ SecretId: secretArn });\n    47:                 const result = await secretsManager.send(command);"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 74,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', secretError.message);\n            }\n        }\n        \n        // Fallback to environment variables if available\n        if (process.env.DB_HOST || process.env.DB_ENDPOINT) {\n            console.log('",
      "context": "    72:                 return dbConfig;\n    73:             } catch (secretError) {\n>>> 74:                 console.warn('Failed to get secrets from Secrets Manager, falling back to environment variables:', secretError.message);\n    75:             }\n    76:         }"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 80,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n            dbConfig = {\n                host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n                port: parseInt(process.env.DB_PORT) || 5432,\n                user: process.env.DB_USER || process.env.DB_USERNAME,\n                password: process.env.DB_PASSWORD,\n                database: process.env.DB_NAME || process.env.DB_DATABASE,\n                max: parseInt(process.env.DB_POOL_MAX) || 5,\n                idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n                connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000,\n                ssl: {\n                    require: true,\n                    rejectUnauthorized: false\n                }\n            };\n            \n            console.log(`",
      "context": "    78:         // Fallback to environment variables if available\n    79:         if (process.env.DB_HOST || process.env.DB_ENDPOINT) {\n>>> 80:             console.log('Using database config from environment variables');\n    81:             dbConfig = {\n    82:                 host: process.env.DB_HOST || process.env.DB_ENDPOINT,"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 250,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "') config = null;\n            error.config = config;\n            error.env = {\n                DB_SECRET_ARN: process.env.DB_SECRET_ARN,\n                DB_ENDPOINT: process.env.DB_ENDPOINT,\n                DB_HOST: process.env.DB_HOST,\n                DB_PORT: process.env.DB_PORT,\n                DB_NAME: process.env.DB_NAME,\n                DB_USER: process.env.DB_USER\n            };\n            console.warn('",
      "context": "    248:             }\n    249:             // Attach config and env info to the error for debugging\n>>> 250:             if (typeof config === 'undefined') config = null;\n    251:             error.config = config;\n    252:             error.env = {"
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 575,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.name}",
      "context": "    573:                 \n    574:                 if (tableExists.rows[0].exists) {\n>>> 575:                     const countResult = await query(`SELECT COUNT(*) as count FROM ${table.name}`);\n    576:                     const recordCount = parseInt(countResult.rows[0].count);\n    577:                     "
    },
    {
      "file": "webapp/lambda/utils/database-old.js",
      "line": 575,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${table.name}",
      "context": "    573:                 \n    574:                 if (tableExists.rows[0].exists) {\n>>> 575:                     const countResult = await query(`SELECT COUNT(*) as count FROM ${table.name}`);\n    576:                     const recordCount = parseInt(countResult.rows[0].count);\n    577:                     "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 60,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏊 Pool Max: ${dbConfig.max}`",
      "context": "    58:             console.log('✅ Database config loaded from complete environment variables');\n    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n>>> 60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`",
      "context": "    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n>>> 61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📚 Database: ${dbConfig.database}`",
      "context": "    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n>>> 62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 User: ${dbConfig.user}`",
      "context": "    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n>>> 63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: \n    65:             return dbConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 Getting password from Secrets Manager: ${secretArn}`",
      "context": "    71:             \n    72:             const secretArn = process.env.DB_SECRET_ARN;\n>>> 73:             console.log(`🔑 Getting password from Secrets Manager: ${secretArn}`);\n    74:             \n    75:             // Use diagnostic tool to get password from secret"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 81,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to get password from Secrets Manager: ${diagnosis.error}`",
      "context": "    79:             const diagnosis = await diagnostic.diagnoseSecret(secretArn);\n    80:             if (!diagnosis.success) {\n>>> 81:                 throw new Error(`Failed to get password from Secrets Manager: ${diagnosis.error}`);\n    82:             }\n    83:             "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 60,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏊 Pool Max: ${dbConfig.max}`",
      "context": "    58:             console.log('✅ Database config loaded from complete environment variables');\n    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n>>> 60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`",
      "context": "    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n>>> 61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📚 Database: ${dbConfig.database}`",
      "context": "    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n>>> 62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 User: ${dbConfig.user}`",
      "context": "    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n>>> 63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: \n    65:             return dbConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 111,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database configuration incomplete. Available: DB_HOST=${!!process.env.DB_HOST}, DB_USER=${!!process.env.DB_USER}, DB_PASSWORD=${!!process.env.DB_PASSWORD}, DB_SECRET_ARN=${!!process.env.DB_SECRET_ARN}. Need either complete env vars or DB_SECRET_ARN.`",
      "context": "    109:         const secretArn = process.env.DB_SECRET_ARN;\n    110:         if (!secretArn) {\n>>> 111:             throw new Error(`Database configuration incomplete. Available: DB_HOST=${!!process.env.DB_HOST}, DB_USER=${!!process.env.DB_USER}, DB_PASSWORD=${!!process.env.DB_PASSWORD}, DB_SECRET_ARN=${!!process.env.DB_SECRET_ARN}. Need either complete env vars or DB_SECRET_ARN.`);\n    112:         }\n    113: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 114,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔑 Getting DB credentials from Secrets Manager: ${secretArn}`",
      "context": "    112:         }\n    113: \n>>> 114:         console.log(`🔑 Getting DB credentials from Secrets Manager: ${secretArn}`);\n    115:         const secretStart = Date.now();\n    116:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Secrets Manager responded in ${Date.now() - secretStart}ms using method: ${diagnosis.method}`",
      "context": "    120:         \n    121:         const diagnosis = await diagnostic.diagnoseSecret(secretArn);\n>>> 122:         console.log(`✅ Secrets Manager responded in ${Date.now() - secretStart}ms using method: ${diagnosis.method}`);\n    123:         \n    124:         if (!diagnosis.success) {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Secrets Manager diagnosis failed: ${diagnosis.error}`",
      "context": "    123:         \n    124:         if (!diagnosis.success) {\n>>> 125:             throw new Error(`Secrets Manager diagnosis failed: ${diagnosis.error}`);\n    126:         }\n    127:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 137,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing required database configuration fields: ${missingFields.join(', ')}`",
      "context": "    135:             console.error('❌ Missing required database fields:', missingFields);\n    136:             console.error('❌ Available fields:', Object.keys(secret));\n>>> 137:             throw new Error(`Missing required database configuration fields: ${missingFields.join(', ')}`);\n    138:         }\n    139: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 60,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏊 Pool Max: ${dbConfig.max}`",
      "context": "    58:             console.log('✅ Database config loaded from complete environment variables');\n    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n>>> 60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`",
      "context": "    59:             console.log(`   🔒 SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n>>> 61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   📚 Database: ${dbConfig.database}`",
      "context": "    60:             console.log(`   🏊 Pool Max: ${dbConfig.max}`);\n    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n>>> 62:             console.log(`   📚 Database: ${dbConfig.database}`);\n    63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   👤 User: ${dbConfig.user}`",
      "context": "    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n>>> 63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: \n    65:             return dbConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 211,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🏊 Lambda pool config: ${poolConfig.min}-${poolConfig.max} connections for ${lambdaConcurrency} concurrent executions`",
      "context": "    209:         };\n    210:         \n>>> 211:         console.log(`🏊 Lambda pool config: ${poolConfig.min}-${poolConfig.max} connections for ${lambdaConcurrency} concurrent executions`);\n    212:         \n    213:     } else {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 246,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Final pool configuration: min=${poolConfig.min}, max=${poolConfig.max}`",
      "context": "    244:     poolConfig.max = Math.min(poolConfig.max, 100); // Hard limit for safety\n    245:     \n>>> 246:     console.log(`🎯 Final pool configuration: min=${poolConfig.min}, max=${poolConfig.max}`);\n    247:     \n    248:     return poolConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 266,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Database config retrieved in ${Date.now() - configStart}ms`",
      "context": "    264:         const configStart = Date.now();\n    265:         const config = await getDbConfig();\n>>> 266:         console.log(`✅ Database config retrieved in ${Date.now() - configStart}ms`);\n    267:         \n    268:         // Dynamic connection pool sizing based on Lambda concurrency"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 307,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Pool created in ${Date.now() - poolStart}ms`",
      "context": "    305:         const poolStart = Date.now();\n    306:         pool = new Pool(poolConfig);\n>>> 307:         console.log(`✅ Pool created in ${Date.now() - poolStart}ms`);\n    308: \n    309:         // Add pool event listeners for monitoring"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 350,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Client connected in ${Date.now() - testStart}ms (attempt ${attempt + 1})`",
      "context": "    348:             ]);\n    349:             \n>>> 350:             console.log(`✅ Client connected in ${Date.now() - testStart}ms (attempt ${attempt + 1})`);\n    351:             \n    352:             // Use the simplest possible query"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Test query completed in ${Date.now() - queryStart}ms`",
      "context": "    353:             const queryStart = Date.now();\n    354:             await client.query('SELECT 1 as test');\n>>> 355:             console.log(`✅ Test query completed in ${Date.now() - queryStart}ms`);\n    356:             \n    357:             client.release();"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 362,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database connection test failed: ${connectionTest.error}`",
      "context": "    360:         \n    361:         if (!connectionTest.success) {\n>>> 362:             throw new Error(`Database connection test failed: ${connectionTest.error}`);\n    363:         }\n    364:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 365,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Database connection test completed successfully in ${connectionTest.attempts} attempts`",
      "context": "    363:         }\n    364:         \n>>> 365:         console.log(`🎯 Database connection test completed successfully in ${connectionTest.attempts} attempts`);\n    366:         \n    367:         const totalDuration = Date.now() - initStart;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 368,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Database fully initialized in ${totalDuration}ms`",
      "context": "    366:         \n    367:         const totalDuration = Date.now() - initStart;\n>>> 368:         console.log(`✅ Database fully initialized in ${totalDuration}ms`);\n    369: \n    370:         dbInitialized = true;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 378,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Database initialization failed after ${errorDuration}ms:`",
      "context": "    376:     } catch (error) {\n    377:         const errorDuration = Date.now() - initStart;\n>>> 378:         console.error(`❌ Database initialization failed after ${errorDuration}ms:`, {\n    379:             message: error.message,\n    380:             code: error.code,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 412,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Pool Status: ${status.totalCount}/${status.max} connections (${metrics.utilizationPercent}% util), ${status.waitingCount} waiting`",
      "context": "    410:             // Log status if utilization is high or recommendations available\n    411:             if (metrics.utilizationPercent > 70 || recommendations.currentStats) {\n>>> 412:                 console.log(`📊 Pool Status: ${status.totalCount}/${status.max} connections (${metrics.utilizationPercent}% util), ${status.waitingCount} waiting`);\n    413:                 \n    414:                 if (recommendations.reason !== 'Current configuration optimal') {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 415,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`💡 ${recommendations.reason}`",
      "context": "    413:                 \n    414:                 if (recommendations.reason !== 'Current configuration optimal') {\n>>> 415:                     console.log(`💡 ${recommendations.reason}`);\n    416:                 }\n    417:             }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 421,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Pool utilization very high (${metrics.utilizationPercent}%) - consider scaling up`",
      "context": "    419:             // Warn on high utilization\n    420:             if (metrics.utilizationPercent > 90) {\n>>> 421:                 console.warn(`⚠️ Pool utilization very high (${metrics.utilizationPercent}%) - consider scaling up`);\n    422:             }\n    423:             "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 426,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ ${status.waitingCount} connections waiting - pool may be undersized`",
      "context": "    424:             // Warn on connection queue buildup\n    425:             if (status.waitingCount > 5) {\n>>> 426:                 console.warn(`⚠️ ${status.waitingCount} connections waiting - pool may be undersized`);\n    427:             }\n    428:             "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 431,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ High connection error rate: ${Math.round(metrics.errorRate * 100)}%`",
      "context": "    429:             // Warn on high error rate\n    430:             if (metrics.errorRate > 0.1) {\n>>> 431:                 console.warn(`⚠️ High connection error rate: ${Math.round(metrics.errorRate * 100)}%`);\n    432:             }\n    433:             "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 574,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Pool scaling recommendation: ${pool.options.min}-${pool.options.max} → ${recommendations.suggestedMin}-${recommendations.suggestedMax} (${recommendations.reason})`",
      "context": "    572:     // Log recommendations if significant change suggested\n    573:     if (Math.abs(recommendations.suggestedMax - pool.options.max) > 2) {\n>>> 574:         console.log(`🎯 Pool scaling recommendation: ${pool.options.min}-${pool.options.max} → ${recommendations.suggestedMin}-${recommendations.suggestedMax} (${recommendations.reason})`);\n    575:     }\n    576: }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 623,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${queryId}] QUERY START (Circuit Breaker): ${text.substring(0, 100)}...`",
      "context": "    621:     const startTime = Date.now();\n    622:     \n>>> 623:     console.log(`🔍 [${queryId}] QUERY START (Circuit Breaker): ${text.substring(0, 100)}...`);\n    624:     console.log(`🔍 [${queryId}] Params:`, params);\n    625:     "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 624,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${queryId}] Params:`",
      "context": "    622:     \n    623:     console.log(`🔍 [${queryId}] QUERY START (Circuit Breaker): ${text.substring(0, 100)}...`);\n>>> 624:     console.log(`🔍 [${queryId}] Params:`, params);\n    625:     \n    626:     try {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 631,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${queryId}] Query completed in ${duration}ms`",
      "context": "    629:         \n    630:         const duration = Date.now() - startTime;\n>>> 631:         console.log(`✅ [${queryId}] Query completed in ${duration}ms`);\n    632:         console.log(`✅ [${queryId}] Rows returned: ${result.rows?.length || 0}`);\n    633:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 643,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${queryId}] Performance monitoring failed:`",
      "context": "    641:         } catch (perfError) {\n    642:             // Performance monitoring is optional - don't fail the query\n>>> 643:             console.warn(`⚠️ [${queryId}] Performance monitoring failed:`, perfError.message);\n    644:         }\n    645:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 651,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${queryId}] Query completed in ${queryDuration}ms (total: ${totalDuration}ms)`",
      "context": "    649:         const totalDuration = Date.now() - startTime;\n    650:         \n>>> 651:         console.log(`✅ [${queryId}] Query completed in ${queryDuration}ms (total: ${totalDuration}ms)`);\n    652:         console.log(`✅ [${queryId}] Rows returned: ${result.rows?.length || 0}`);\n    653:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 669,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${queryId}] Query failed after ${errorDuration}ms:`",
      "context": "    667:     } catch (error) {\n    668:         const errorDuration = Date.now() - startTime;\n>>> 669:         console.error(`❌ [${queryId}] Query failed after ${errorDuration}ms:`, error.message);\n    670:         console.error(`❌ [${queryId}] Error details:`, {\n    671:             code: error.code,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 670,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${queryId}] Error details:`",
      "context": "    668:         const errorDuration = Date.now() - startTime;\n    669:         console.error(`❌ [${queryId}] Query failed after ${errorDuration}ms:`, error.message);\n>>> 670:         console.error(`❌ [${queryId}] Error details:`, {\n    671:             code: error.code,\n    672:             severity: error.severity,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 777,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking if table ${tableName} exists:`",
      "context": "    775:         return result.rows[0].exists;\n    776:     } catch (error) {\n>>> 777:         console.error(`Error checking if table ${tableName} exists:`, error);\n    778:         return false;\n    779:     }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 869,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Starting comprehensive database schema validation`",
      "context": "    867: async function validateDatabaseSchema(requestId = 'schema-check') {\n    868:     const validationStart = Date.now();\n>>> 869:     console.log(`🔍 [${requestId}] Starting comprehensive database schema validation`);\n    870:     \n    871:     try {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 874,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Database initialized for schema validation`",
      "context": "    872:         // Initialize database if needed\n    873:         await initializeDatabase();\n>>> 874:         console.log(`✅ [${requestId}] Database initialized for schema validation`);\n    875:         \n    876:         const allTables = ["
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 884,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${requestId}] Checking ${allTables.length} tables across schema categories`",
      "context": "    882:         ];\n    883:         \n>>> 884:         console.log(`🔍 [${requestId}] Checking ${allTables.length} tables across schema categories`);\n    885:         \n    886:         // Check table existence"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 891,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`",
      "context": "    889:         const tableCheckDuration = Date.now() - tableCheckStart;\n    890:         \n>>> 891:         console.log(`✅ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`);\n    892:         \n    893:         // Categorize results"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 934,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`core.${t}`",
      "context": "    932:         // Determine criticality\n    933:         const criticalMissing = [];\n>>> 934:         if (validation.core.missing.length > 0) criticalMissing.push(...validation.core.missing.map(t => `core.${t}`));\n    935:         if (validation.portfolio.missing.length > 0) criticalMissing.push(...validation.portfolio.missing.map(t => `portfolio.${t}`));\n    936:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 935,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`portfolio.${t}`",
      "context": "    933:         const criticalMissing = [];\n    934:         if (validation.core.missing.length > 0) criticalMissing.push(...validation.core.missing.map(t => `core.${t}`));\n>>> 935:         if (validation.portfolio.missing.length > 0) criticalMissing.push(...validation.portfolio.missing.map(t => `portfolio.${t}`));\n    936:         \n    937:         const validationDuration = Date.now() - validationStart;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 940,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 [${requestId}] Database schema validation completed in ${validationDuration}ms`",
      "context": "    938:         \n    939:         // Comprehensive logging\n>>> 940:         console.log(`📊 [${requestId}] Database schema validation completed in ${validationDuration}ms`, {\n    941:             overall: {\n    942:                 healthPercentage: schemaHealthPercentage,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 950,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validation.core.existing.length}/${validation.core.required.length}`",
      "context": "    948:             },\n    949:             categories: {\n>>> 950:                 core: `${validation.core.existing.length}/${validation.core.required.length}`,\n    951:                 portfolio: `${validation.portfolio.existing.length}/${validation.portfolio.required.length}`,\n    952:                 market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 951,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validation.portfolio.existing.length}/${validation.portfolio.required.length}`",
      "context": "    949:             categories: {\n    950:                 core: `${validation.core.existing.length}/${validation.core.required.length}`,\n>>> 951:                 portfolio: `${validation.portfolio.existing.length}/${validation.portfolio.required.length}`,\n    952:                 market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,\n    953:                 analytics: `${validation.analytics.existing.length}/${validation.analytics.required.length}`,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 952,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validation.market_data.existing.length}/${validation.market_data.required.length}`",
      "context": "    950:                 core: `${validation.core.existing.length}/${validation.core.required.length}`,\n    951:                 portfolio: `${validation.portfolio.existing.length}/${validation.portfolio.required.length}`,\n>>> 952:                 market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,\n    953:                 analytics: `${validation.analytics.existing.length}/${validation.analytics.required.length}`,\n    954:                 optional: `${validation.optional.existing.length}/${validation.optional.required.length}`"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 953,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validation.analytics.existing.length}/${validation.analytics.required.length}`",
      "context": "    951:                 portfolio: `${validation.portfolio.existing.length}/${validation.portfolio.required.length}`,\n    952:                 market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,\n>>> 953:                 analytics: `${validation.analytics.existing.length}/${validation.analytics.required.length}`,\n    954:                 optional: `${validation.optional.existing.length}/${validation.optional.required.length}`\n    955:             }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 954,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validation.optional.existing.length}/${validation.optional.required.length}`",
      "context": "    952:                 market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,\n    953:                 analytics: `${validation.analytics.existing.length}/${validation.analytics.required.length}`,\n>>> 954:                 optional: `${validation.optional.existing.length}/${validation.optional.required.length}`\n    955:             }\n    956:         });"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 960,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] CRITICAL: Missing essential database tables:`",
      "context": "    958:         // Log critical issues\n    959:         if (criticalMissing.length > 0) {\n>>> 960:             console.error(`❌ [${requestId}] CRITICAL: Missing essential database tables:`, {\n    961:                 criticalMissing,\n    962:                 impact: 'Core application functionality will fail',"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 971,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Missing ${category} tables:`",
      "context": "    969:         Object.entries(validation).forEach(([category, info]) => {\n    970:             if (info.missing.length > 0 && category !== 'optional') {\n>>> 971:                 console.error(`❌ [${requestId}] Missing ${category} tables:`, {\n    972:                     category,\n    973:                     missingTables: info.missing,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 976,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Create missing ${category} tables`",
      "context": "    974:                     existingTables: info.existing,\n    975:                     impact: getCategoryImpact(category),\n>>> 976:                     recommendation: `Create missing ${category} tables`\n    977:                 });\n    978:             }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 995,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`",
      "context": "    993:     } catch (error) {\n    994:         const errorDuration = Date.now() - validationStart;\n>>> 995:         console.error(`❌ [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`, {\n    996:             error: error.message,\n    997:             errorStack: error.stack,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1057,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Required tables not found: ${missingTables.join(', ')}`",
      "context": "    1055:         \n    1056:         if (missingTables.length > 0) {\n>>> 1057:             throw new Error(`Required tables not found: ${missingTables.join(', ')}`);\n    1058:         }\n    1059:     }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1072,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${transactionId}] Starting database transaction`",
      "context": "    1070:     const startTime = Date.now();\n    1071:     \n>>> 1072:     console.log(`🔄 [${transactionId}] Starting database transaction`);\n    1073:     \n    1074:     if (!dbInitialized || !pool) {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1075,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${transactionId}] Database not initialized, initializing...`",
      "context": "    1073:     \n    1074:     if (!dbInitialized || !pool) {\n>>> 1075:         console.log(`🔄 [${transactionId}] Database not initialized, initializing...`);\n    1076:         await initializeDatabase();\n    1077:     }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1082,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 [${transactionId}] BEGIN transaction`",
      "context": "    1080:     \n    1081:     try {\n>>> 1082:         console.log(`📋 [${transactionId}] BEGIN transaction`);\n    1083:         await client.query('BEGIN');\n    1084:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1088,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${transactionId}] COMMIT transaction`",
      "context": "    1086:         const result = await callback(client);\n    1087:         \n>>> 1088:         console.log(`✅ [${transactionId}] COMMIT transaction`);\n    1089:         await client.query('COMMIT');\n    1090:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1092,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${transactionId}] Transaction completed successfully in ${duration}ms`",
      "context": "    1090:         \n    1091:         const duration = Date.now() - startTime;\n>>> 1092:         console.log(`✅ [${transactionId}] Transaction completed successfully in ${duration}ms`);\n    1093:         \n    1094:         return result;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1098,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${transactionId}] ROLLBACK transaction after ${duration}ms:`",
      "context": "    1096:     } catch (error) {\n    1097:         const duration = Date.now() - startTime;\n>>> 1098:         console.error(`❌ [${transactionId}] ROLLBACK transaction after ${duration}ms:`, error.message);\n    1099:         \n    1100:         try {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 [${transactionId}] Transaction rolled back successfully`",
      "context": "    1100:         try {\n    1101:             await client.query('ROLLBACK');\n>>> 1102:             console.log(`🔄 [${transactionId}] Transaction rolled back successfully`);\n    1103:         } catch (rollbackError) {\n    1104:             console.error(`❌ [${transactionId}] Failed to rollback transaction:`, rollbackError.message);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1104,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${transactionId}] Failed to rollback transaction:`",
      "context": "    1102:             console.log(`🔄 [${transactionId}] Transaction rolled back successfully`);\n    1103:         } catch (rollbackError) {\n>>> 1104:             console.error(`❌ [${transactionId}] Failed to rollback transaction:`, rollbackError.message);\n    1105:         }\n    1106:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔓 [${transactionId}] Database client released`",
      "context": "    1108:     } finally {\n    1109:         client.release();\n>>> 1110:         console.log(`🔓 [${transactionId}] Database client released`);\n    1111:     }\n    1112: }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔥 Connection ${i + 1} warmed successfully`",
      "context": "    1148:                         await client.query('SELECT 1'); // Simple test query\n    1149:                         client.release();\n>>> 1150:                         console.log(`🔥 Connection ${i + 1} warmed successfully`);\n    1151:                     } catch (error) {\n    1152:                         console.warn(`⚠️ Failed to warm connection ${i + 1}:`, error.message);"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Failed to warm connection ${i + 1}:`",
      "context": "    1150:                         console.log(`🔥 Connection ${i + 1} warmed successfully`);\n    1151:                     } catch (error) {\n>>> 1152:                         console.warn(`⚠️ Failed to warm connection ${i + 1}:`, error.message);\n    1153:                     }\n    1154:                 })()"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1159,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Database connections warmed in ${Date.now() - warmStart}ms`",
      "context": "    1157: \n    1158:         await Promise.all(warmPromises);\n>>> 1159:         console.log(`✅ Database connections warmed in ${Date.now() - warmStart}ms`);\n    1160:         \n    1161:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 1180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 Lambda database initialization complete in ${Date.now() - lambdaInitStart}ms`",
      "context": "    1178:         await warmConnections();\n    1179:         \n>>> 1180:         console.log(`🚀 Lambda database initialization complete in ${Date.now() - lambdaInitStart}ms`);\n    1181:         return true;\n    1182:         "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 11,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n// Legacy global state (for backward compatibility)\nlet pool = null;\nlet dbInitialized = false;\nlet dbConfig = null;\n\n// Initialize connection retry utility (legacy)\nconst connectionRetry = new ConnectionRetry({\n    maxRetries: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    backoffMultiplier: 2\n});\n\n// Configure AWS SDK for Secrets Manager\nconst secretsManager = new SecretsManagerClient({\n    region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    9: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    10: const { getTimeout, withDatabaseTimeout } = require('./timeoutManager');\n>>> 11: const ConnectionRetry = require('./connectionRetry');\n    12: \n    13: // Legacy global state (for backward compatibility)"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 36,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n        return dbConfig;\n    }\n\n    const configStart = Date.now();\n    try {\n        // First try direct environment variables (full set)\n        if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n            console.log('",
      "context": "    34: async function getDbConfig() {\n    35:     if (dbConfig) {\n>>> 36:         console.log('✅ Using cached database config');\n    37:         return dbConfig;\n    38:     }"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 44,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n            \n            dbConfig = {\n                host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n                port: parseInt(process.env.DB_PORT) || 5432,\n                database: process.env.DB_NAME || process.env.DB_DATABASE || '",
      "context": "    42:         // First try direct environment variables (full set)\n    43:         if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n>>> 44:             console.log('🔧 Using complete direct database environment variables');\n    45:             \n    46:             dbConfig = {"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 49,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n                user: process.env.DB_USER || process.env.DB_USERNAME,\n                password: process.env.DB_PASSWORD,\n                ssl: process.env.DB_SSL === '",
      "context": "    47:                 host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n    48:                 port: parseInt(process.env.DB_PORT) || 5432,\n>>> 49:                 database: process.env.DB_NAME || process.env.DB_DATABASE || 'stocks',\n    50:                 user: process.env.DB_USER || process.env.DB_USERNAME,\n    51:                 password: process.env.DB_PASSWORD,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 63,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n\n            return dbConfig;\n        }\n\n        // Hybrid approach: use environment variables but get password from secret\n        if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_SECRET_ARN) {\n            console.log('",
      "context": "    61:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    62:             console.log(`   📚 Database: ${dbConfig.database}`);\n>>> 63:             console.log(`   👤 User: ${dbConfig.user}`);\n    64: \n    65:             return dbConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 70,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n            \n            const secretArn = process.env.DB_SECRET_ARN;\n            console.log(`",
      "context": "    68:         // Hybrid approach: use environment variables but get password from secret\n    69:         if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_SECRET_ARN) {\n>>> 70:             console.log('🔧 Using hybrid approach: env vars + secret for password');\n    71:             \n    72:             const secretArn = process.env.DB_SECRET_ARN;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 81,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n            }\n            \n            const secret = diagnosis.config;\n            \n            dbConfig = {\n                host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n                port: parseInt(process.env.DB_PORT) || 5432,\n                database: process.env.DB_NAME || process.env.DB_DATABASE || '",
      "context": "    79:             const diagnosis = await diagnostic.diagnoseSecret(secretArn);\n    80:             if (!diagnosis.success) {\n>>> 81:                 throw new Error(`Failed to get password from Secrets Manager: ${diagnosis.error}`);\n    82:             }\n    83:             "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 89,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n                user: process.env.DB_USER || process.env.DB_USERNAME,\n                password: secret.password,  // Password from secret\n                ssl: process.env.DB_SSL === '",
      "context": "    87:                 host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n    88:                 port: parseInt(process.env.DB_PORT) || 5432,\n>>> 89:                 database: process.env.DB_NAME || process.env.DB_DATABASE || 'stocks',\n    90:                 user: process.env.DB_USER || process.env.DB_USERNAME,\n    91:                 password: secret.password,  // Password from secret"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 103,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n\n            return dbConfig;\n        }\n\n        // Fallback to Secrets Manager if environment variables not available\n        const secretArn = process.env.DB_SECRET_ARN;\n        if (!secretArn) {\n            throw new Error(`",
      "context": "    101:             console.log(`   🏗️ Host: ${dbConfig.host}:${dbConfig.port}`);\n    102:             console.log(`   📚 Database: ${dbConfig.database}`);\n>>> 103:             console.log(`   👤 User: ${dbConfig.user}`);\n    104: \n    105:             return dbConfig;"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 137,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n        }\n\n        dbConfig = {\n            host: secret.host || process.env.DB_ENDPOINT,\n            port: parseInt(secret.port) || 5432,\n            database: secret.dbname || '",
      "context": "    135:             console.error('❌ Missing required database fields:', missingFields);\n    136:             console.error('❌ Available fields:', Object.keys(secret));\n>>> 137:             throw new Error(`Missing required database configuration fields: ${missingFields.join(', ')}`);\n    138:         }\n    139: "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 143,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            user: secret.username,\n            password: secret.password,\n            ssl: false, // Match working ECS task configuration - no SSL for RDS in public subnets\n            max: parseInt(process.env.DB_POOL_MAX) || 3,\n            idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n            connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000\n        };\n\n        console.log('",
      "context": "    141:             host: secret.host || process.env.DB_ENDPOINT,\n    142:             port: parseInt(secret.port) || 5432,\n>>> 143:             database: secret.dbname || 'stocks',\n    144:             user: secret.username,\n    145:             password: secret.password,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 170,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n            DB_HOST: !!process.env.DB_HOST,\n            DB_USER: !!process.env.DB_USER,\n            DB_PASSWORD: !!process.env.DB_PASSWORD,\n            DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n            DB_ENDPOINT: !!process.env.DB_ENDPOINT\n        });\n        \n        throw error;\n    }\n}\n\n/**\n * Calculate optimal pool configuration based on environment and expected load\n */\nfunction calculateOptimalPoolConfig() {\n    // Environment detection\n    const isLambda = !!process.env.AWS_LAMBDA_FUNCTION_NAME;\n    const nodeEnv = process.env.NODE_ENV || '",
      "context": "    168:         console.error('❌ Database configuration troubleshooting:');\n    169:         console.error('   Set DB_HOST, DB_USER, DB_PASSWORD environment variables');\n>>> 170:         console.error('   Current environment variables:', {\n    171:             DB_HOST: !!process.env.DB_HOST,\n    172:             DB_USER: !!process.env.DB_USER,"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 189,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n    \n    // Lambda concurrent execution limits and expected load\n    const lambdaConcurrency = parseInt(process.env.LAMBDA_CONCURRENT_EXECUTIONS) || 10;\n    const expectedUsers = parseInt(process.env.EXPECTED_CONCURRENT_USERS) || 25;\n    \n    let poolConfig;\n    \n    if (isLambda) {\n        // Lambda-specific pool configuration\n        // Each Lambda execution needs 1-2 connections depending on the request\n        const baseConnections = Math.min(lambdaConcurrency, 5); // Base connections\n        const maxConnections = Math.min(lambdaConcurrency * 2, 20); // Max for bursts\n        \n        poolConfig = {\n            min: Math.max(1, Math.floor(baseConnections / 2)), // Keep some connections alive\n            max: maxConnections,\n            // Aggressive acquisition for Lambda\n            acquireTimeoutMillis: 8000,\n            createTimeoutMillis: 15000,\n        };\n        \n        console.log(`",
      "context": "    187:     const isLambda = !!process.env.AWS_LAMBDA_FUNCTION_NAME;\n    188:     const nodeEnv = process.env.NODE_ENV || 'development';\n>>> 189:     const isProduction = nodeEnv === 'production';\n    190:     \n    191:     // Lambda concurrent execution limits and expected load"
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 230,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n    }\n    \n    // Override from environment variables if provided\n    if (process.env.DB_POOL_MIN) {\n        poolConfig.min = parseInt(process.env.DB_POOL_MIN);\n    }\n    if (process.env.DB_POOL_MAX) {\n        poolConfig.max = parseInt(process.env.DB_POOL_MAX);\n    }\n    \n    // Validate configuration\n    poolConfig.min = Math.max(1, poolConfig.min);\n    poolConfig.max = Math.max(poolConfig.min, poolConfig.max);\n    poolConfig.max = Math.min(poolConfig.max, 100); // Hard limit for safety\n    \n    console.log(`",
      "context": "    228:         };\n    229:         \n>>> 230:         console.log(`🏊 ${isProduction ? 'Production' : 'Development'} pool config: ${poolConfig.min}-${poolConfig.max} connections for ${expectedUsers} expected users`);\n    231:     }\n    232:     "
    },
    {
      "file": "webapp/lambda/utils/database.js",
      "line": 400,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    // Pool monitoring only in development environment to avoid Lambda memory leaks\n    if (process.env.NODE_ENV === '",
      "context": "    398:     if (!pool) return;\n    399:     \n>>> 400:     console.log('📊 Starting pool monitoring for concurrent user scaling...');\n    401:     \n    402:     // Pool monitoring only in development environment to avoid Lambda memory leaks"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 33,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + remainingTime + '",
      "context": "    31:       if (timeSinceLastFailure < this.recoveryTimeout) {\n    32:         const remainingTime = Math.ceil((this.recoveryTimeout - timeSinceLastFailure) / 1000);\n>>> 33:         throw new Error('Circuit breaker is OPEN. Database unavailable for ' + remainingTime + ' more seconds. Reason: Too many connection failures (' + this.failures + ' failures). Last failure: ' + new Date(this.lastFailureTime).toISOString());\n    34:       } else {\n    35:         // Transition to half-open for testing"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 33,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.failures + '",
      "context": "    31:       if (timeSinceLastFailure < this.recoveryTimeout) {\n    32:         const remainingTime = Math.ceil((this.recoveryTimeout - timeSinceLastFailure) / 1000);\n>>> 33:         throw new Error('Circuit breaker is OPEN. Database unavailable for ' + remainingTime + ' more seconds. Reason: Too many connection failures (' + this.failures + ' failures). Last failure: ' + new Date(this.lastFailureTime).toISOString());\n    34:       } else {\n    35:         // Transition to half-open for testing"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 66,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.successCount + '",
      "context": "    64:     if (this.state === 'half-open') {\n    65:       this.successCount++;\n>>> 66:       console.log('✅ Circuit breaker half-open success ' + this.successCount + '/' + this.halfOpenSuccessThreshold + ' for ' + operationName);\n    67:       \n    68:       if (this.successCount >= this.halfOpenSuccessThreshold) {"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 66,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.halfOpenSuccessThreshold + '",
      "context": "    64:     if (this.state === 'half-open') {\n    65:       this.successCount++;\n>>> 66:       console.log('✅ Circuit breaker half-open success ' + this.successCount + '/' + this.halfOpenSuccessThreshold + ' for ' + operationName);\n    67:       \n    68:       if (this.successCount >= this.halfOpenSuccessThreshold) {"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 87,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + operationName + '",
      "context": "    85:     this.addToHistory('failure', operationName, 0, error.message);\n    86:     \n>>> 87:     console.warn('⚠️ Database operation failed: ' + operationName + ' - ' + error.message + ' (failure ' + this.failures + '/' + this.failureThreshold + ')');\n    88:     \n    89:     if (this.failures >= this.failureThreshold) {"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 87,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + error.message + '",
      "context": "    85:     this.addToHistory('failure', operationName, 0, error.message);\n    86:     \n>>> 87:     console.warn('⚠️ Database operation failed: ' + operationName + ' - ' + error.message + ' (failure ' + this.failures + '/' + this.failureThreshold + ')');\n    88:     \n    89:     if (this.failures >= this.failureThreshold) {"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 33,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.failures + '",
      "context": "    31:       if (timeSinceLastFailure < this.recoveryTimeout) {\n    32:         const remainingTime = Math.ceil((this.recoveryTimeout - timeSinceLastFailure) / 1000);\n>>> 33:         throw new Error('Circuit breaker is OPEN. Database unavailable for ' + remainingTime + ' more seconds. Reason: Too many connection failures (' + this.failures + ' failures). Last failure: ' + new Date(this.lastFailureTime).toISOString());\n    34:       } else {\n    35:         // Transition to half-open for testing"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 87,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.failureThreshold + '",
      "context": "    85:     this.addToHistory('failure', operationName, 0, error.message);\n    86:     \n>>> 87:     console.warn('⚠️ Database operation failed: ' + operationName + ' - ' + error.message + ' (failure ' + this.failures + '/' + this.failureThreshold + ')');\n    88:     \n    89:     if (this.failures >= this.failureThreshold) {"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 33,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + this.failures + '",
      "context": "    31:       if (timeSinceLastFailure < this.recoveryTimeout) {\n    32:         const remainingTime = Math.ceil((this.recoveryTimeout - timeSinceLastFailure) / 1000);\n>>> 33:         throw new Error('Circuit breaker is OPEN. Database unavailable for ' + remainingTime + ' more seconds. Reason: Too many connection failures (' + this.failures + ' failures). Last failure: ' + new Date(this.lastFailureTime).toISOString());\n    34:       } else {\n    35:         // Transition to half-open for testing"
    },
    {
      "file": "webapp/lambda/utils/databaseCircuitBreaker.js",
      "line": 91,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + (this.recoveryTimeout/1000) + '",
      "context": "    89:     if (this.failures >= this.failureThreshold) {\n    90:       this.state = 'open';\n>>> 91:       console.error('🚨 Circuit breaker OPENED due to ' + this.failures + ' consecutive failures. Database access blocked for ' + (this.recoveryTimeout/1000) + ' seconds.');\n    92:     }\n    93:   }"
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 52,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', error);\n      this.pool = null;\n      this.isInitialized = false;\n      throw error;\n    }\n  }\n  \n  async getDbConfig() {\n    // Try environment variables first\n    if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n      console.log('",
      "context": "    50:       return this.pool;\n    51:     } catch (error) {\n>>> 52:       console.error('❌ Database initialization failed:', error);\n    53:       this.pool = null;\n    54:       this.isInitialized = false;"
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 62,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n      return {\n        host: process.env.DB_HOST,\n        port: parseInt(process.env.DB_PORT) || 5432,\n        database: process.env.DB_NAME || '",
      "context": "    60:     // Try environment variables first\n    61:     if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n>>> 62:       console.log('🔧 Using direct environment variables');\n    63:       return {\n    64:         host: process.env.DB_HOST,"
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 66,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        user: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        ssl: process.env.DB_SSL === '",
      "context": "    64:         host: process.env.DB_HOST,\n    65:         port: parseInt(process.env.DB_PORT) || 5432,\n>>> 66:         database: process.env.DB_NAME || 'stocks',\n    67:         user: process.env.DB_USER,\n    68:         password: process.env.DB_PASSWORD,"
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 76,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n      \n      const client = new SecretsManagerClient({\n        region: process.env.AWS_REGION || '",
      "context": "    74:     if (process.env.DB_SECRET_ARN) {\n    75:       console.log('🔧 Using AWS Secrets Manager fallback');\n>>> 76:       const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    77:       \n    78:       const client = new SecretsManagerClient({"
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 79,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n      });\n      \n      try {\n        const response = await client.send(new GetSecretValueCommand({\n          SecretId: process.env.DB_SECRET_ARN\n        }));\n        \n        // Enhanced JSON parsing with error handling\n        let secret;\n        try {\n          secret = JSON.parse(response.SecretString);\n        } catch (parseError) {\n          console.error('",
      "context": "    77:       \n    78:       const client = new SecretsManagerClient({\n>>> 79:         region: process.env.AWS_REGION || 'us-east-1'\n    80:       });\n    81:       "
    },
    {
      "file": "webapp/lambda/utils/databaseConnectionManager.js",
      "line": 95,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' + parseError.message);\n        }\n        \n        return {\n          host: secret.host || process.env.DB_HOST,\n          port: secret.port || parseInt(process.env.DB_PORT) || 5432,\n          database: secret.dbname || secret.database || '",
      "context": "    93:           console.error('Secret string length:', response.SecretString?.length);\n    94:           console.error('Secret string preview:', response.SecretString?.substring(0, 100));\n>>> 95:           throw new Error('Failed to parse database secret JSON: ' + parseError.message);\n    96:         }\n    97:         "
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 40,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`analysis_${Date.now()}`",
      "context": "    38:   async analyzePerformance() {\n    39:     const analysisStart = Date.now();\n>>> 40:     const analysisId = `analysis_${Date.now()}`;\n    41: \n    42:     try {"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 74,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${analysisDuration}ms`",
      "context": "    72:       this.logger.info('✅ Database performance analysis completed', {\n    73:         analysisId,\n>>> 74:         duration: `${analysisDuration}ms`,\n    75:         slowQueriesFound: analysis.slowQueries.length,\n    76:         missingIndexesFound: analysis.missingIndexes.length,"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 456,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`idx_${indexCandidate.table}_${indexCandidate.columns.join('_')}`",
      "context": "    454:    */\n    455:   generateCreateIndexStatement(indexCandidate) {\n>>> 456:     const indexName = `idx_${indexCandidate.table}_${indexCandidate.columns.join('_')}`;\n    457:     const columnList = indexCandidate.columns.join(', ');\n    458:     "
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 459,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`CREATE INDEX CONCURRENTLY ${indexName} ON ${indexCandidate.table} USING ${indexCandidate.type} (${columnList});`",
      "context": "    457:     const columnList = indexCandidate.columns.join(', ');\n    458:     \n>>> 459:     return `CREATE INDEX CONCURRENTLY ${indexName} ON ${indexCandidate.table} USING ${indexCandidate.type} (${columnList});`;\n    460:   }\n    461: "
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 474,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Create index on ${index.table}(${index.columns.join(', ')})`",
      "context": "    472:           type: 'create_index',\n    473:           priority: index.priority,\n>>> 474:           description: `Create index on ${index.table}(${index.columns.join(', ')})`,\n    475:           reason: index.reason,\n    476:           impact: index.estimatedImpact,"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 489,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Optimize slow query: ${slowQuery.query.substring(0, 100)}...`",
      "context": "    487:           type: 'optimize_query',\n    488:           priority: 'high',\n>>> 489:           description: `Optimize slow query: ${slowQuery.query.substring(0, 100)}...`,\n    490:           meanTime: slowQuery.meanTime,\n    491:           calls: slowQuery.calls,"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 505,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Consider partitioning or archiving large table: ${table.tablename}`",
      "context": "    503:             type: 'table_maintenance',\n    504:             priority: 'medium',\n>>> 505:             description: `Consider partitioning or archiving large table: ${table.tablename}`,\n    506:             tableSize: table.total_size,\n    507:             category: 'maintenance'"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 574,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${applyDuration}ms`",
      "context": "    572:       \n    573:       this.logger.info('✅ Database optimization application completed', {\n>>> 574:         duration: `${applyDuration}ms`,\n    575:         applied: results.applied.length,\n    576:         failed: results.failed.length,"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 615,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${createDuration}ms`",
      "context": "    613:       this.logger.info('✅ Index created successfully', {\n    614:         sql: recommendation.sql,\n>>> 615:         duration: `${createDuration}ms`\n    616:       });\n    617: "
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 738,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Consider removing unused index: ${index.indexname}`",
      "context": "    736:         recommendations.push({\n    737:           type: 'remove_unused_index',\n>>> 738:           description: `Consider removing unused index: ${index.indexname}`,\n    739:           table: index.tablename,\n    740:           index: index.indexname"
    },
    {
      "file": "webapp/lambda/utils/databaseOptimizer.js",
      "line": 655,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE datname = current_database()\n        GROUP BY state\n      `);\n\n      const cacheStats = await safeQuery(`\n        SELECT \n          sum(heap_blks_read) as heap_read,\n          sum(heap_blks_hit) as heap_hit,\n          sum(idx_blks_read) as idx_read,\n          sum(idx_blks_hit) as idx_hit\n        FROM pg_statio_user_tables\n      `);\n\n      const dbSize = await safeQuery(`\n        SELECT pg_size_pretty(pg_database_size(current_database())) as size\n      `);\n\n      const stats = cacheStats.rows[0];\n      const totalReads = parseInt(stats.heap_read) + parseInt(stats.idx_read);\n      const totalHits = parseInt(stats.heap_hit) + parseInt(stats.idx_hit);\n      const hitRatio = totalHits / (totalHits +",
      "context": "    653:           count(*) as count\n    654:         FROM pg_stat_activity \n>>> 655:         WHERE datname = current_database()\n    656:         GROUP BY state\n    657:       `);"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 59,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`conn_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`",
      "context": "    57:    */\n    58:   async createConnection(userId, symbols, options = {}) {\n>>> 59:     const connectionId = `conn_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    60:     \n    61:     try {"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 261,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${alpacaWS.userId.substring(0, 8)}...`",
      "context": "    259:     // For now, we'll just log that handlers are set up\n    260:     this.logger.debug('Alpaca WebSocket data handlers configured', {\n>>> 261:       userId: `${alpacaWS.userId.substring(0, 8)}...`\n    262:     });\n    263:   }"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 370,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${connection.userId.substring(0, 8)}...`",
      "context": "    368:         connectionId,\n    369:         reason,\n>>> 370:         userId: `${connection.userId.substring(0, 8)}...`\n    371:       });\n    372: "
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 64,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    62:       this.logger.info('📡 Creating new connection', {\n    63:         connectionId,\n>>> 64:         userId: `${userId.substring(0, 8)}...`,\n    65:         symbols,\n    66:         options"
    },
    {
      "file": "webapp/lambda/utils/enhancedWebSocketService.js",
      "line": 524,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${hours}h ${minutes}m ${secs}s`",
      "context": "    522:     const secs = Math.floor(seconds % 60);\n    523:     \n>>> 524:     return `${hours}h ${minutes}m ${secs}s`;\n    525:   }\n    526: "
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 101,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Required environment variable ${envVar.name} is not set`",
      "context": "    99:     if (envVar.required && !value) {\n    100:       result.isValid = false;\n>>> 101:       result.error = `Required environment variable ${envVar.name} is not set`;\n    102:       return result;\n    103:     }"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 107,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Using default value for ${envVar.name}: ${envVar.default}`",
      "context": "    105:     // Check if optional variable is missing but has default\n    106:     if (!envVar.required && !value && envVar.default) {\n>>> 107:       result.warning = `Using default value for ${envVar.name}: ${envVar.default}`;\n    108:       return result;\n    109:     }"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 119,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${envVar.name} must be at least ${envVar.minLength} characters long`",
      "context": "    117:     if (envVar.minLength && value.length < envVar.minLength) {\n    118:       result.isValid = false;\n>>> 119:       result.error = `${envVar.name} must be at least ${envVar.minLength} characters long`;\n    120:       return result;\n    121:     }"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${envVar.name} format may be invalid`",
      "context": "    125:       case 'COGNITO_USER_POOL_ID':\n    126:         if (!value.match(/^[a-zA-Z0-9-_]+$/)) {\n>>> 127:           result.warning = `${envVar.name} format may be invalid`;\n    128:         }\n    129:         break;"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 133,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${envVar.name} does not appear to be a valid Secrets Manager ARN`",
      "context": "    131:       case 'DB_SECRET_ARN':\n    132:         if (!value.includes('arn:aws:secretsmanager:')) {\n>>> 133:           result.warning = `${envVar.name} does not appear to be a valid Secrets Manager ARN`;\n    134:         }\n    135:         break;"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${envVar.name} format may be invalid`",
      "context": "    125:       case 'COGNITO_USER_POOL_ID':\n    126:         if (!value.match(/^[a-zA-Z0-9-_]+$/)) {\n>>> 127:           result.warning = `${envVar.name} format may be invalid`;\n    128:         }\n    129:         break;"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${status} ${result.name} ${valueStatus}`",
      "context": "    158:         (result.required ? '[MISSING]' : '[OPTIONAL]');\n    159:       \n>>> 160:       console.log(`${status} ${result.name} ${valueStatus}`);\n    161:       \n    162:       if (result.error) {"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ❌ Error: ${result.error}`",
      "context": "    161:       \n    162:       if (result.error) {\n>>> 163:         console.log(`   ❌ Error: ${result.error}`);\n    164:         errorCount++;\n    165:       } else if (result.warning) {"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   ⚠️  Warning: ${result.warning}`",
      "context": "    164:         errorCount++;\n    165:       } else if (result.warning) {\n>>> 166:         console.log(`   ⚠️  Warning: ${result.warning}`);\n    167:         warningCount++;\n    168:       } else {"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 174,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Summary: ${validCount} valid, ${warningCount} warnings, ${errorCount} errors`",
      "context": "    172: \n    173:     console.log('=' .repeat(50));\n>>> 174:     console.log(`📊 Summary: ${validCount} valid, ${warningCount} warnings, ${errorCount} errors`);\n    175:     \n    176:     if (this.isValid) {"
    },
    {
      "file": "webapp/lambda/utils/environmentValidator.js",
      "line": 7,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n    required: process.env.NODE_ENV === '",
      "context": "    5:   {\n    6:     name: 'API_KEY_ENCRYPTION_SECRET_ARN',\n>>> 7:     description: 'ARN of the Secrets Manager secret containing API key encryption secret',\n    8:     required: process.env.NODE_ENV === 'production',\n    9:     sensitive: true"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND factor_score >= $${paramIndex}`",
      "context": "    194:       // Add filters\n    195:       if (filters.minScore) {\n>>> 196:         whereClause += ` AND factor_score >= $${paramIndex}`;\n    197:         params.push(filters.minScore);\n    198:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 202,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND factor_score <= $${paramIndex}`",
      "context": "    200: \n    201:       if (filters.maxScore) {\n>>> 202:         whereClause += ` AND factor_score <= $${paramIndex}`;\n    203:         params.push(filters.maxScore);\n    204:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 208,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND sector = $${paramIndex}`",
      "context": "    206: \n    207:       if (filters.sector) {\n>>> 208:         whereClause += ` AND sector = $${paramIndex}`;\n    209:         params.push(filters.sector);\n    210:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 214,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND market_cap >= $${paramIndex}`",
      "context": "    212: \n    213:       if (filters.minMarketCap) {\n>>> 214:         whereClause += ` AND market_cap >= $${paramIndex}`;\n    215:         params.push(filters.minMarketCap);\n    216:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND market_cap <= $${paramIndex}`",
      "context": "    218: \n    219:       if (filters.maxMarketCap) {\n>>> 220:         whereClause += ` AND market_cap <= $${paramIndex}`;\n    221:         params.push(filters.maxMarketCap);\n    222:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          symbol,\n          company_name,\n          sector,\n          market_cap,\n          price,\n          \n          -- Financial Health\n          debt_to_equity,\n          current_ratio,\n          quick_ratio,\n          interest_coverage,\n          \n          -- Profitability\n          roe,\n          roa,\n          gross_margin,\n          operating_margin,\n          net_margin,\n          \n          -- Growth\n          revenue_growth,\n          earnings_growth,\n          eps_growth,\n          \n          -- Valuation\n          pe_ratio,\n          pb_ratio,\n          ps_ratio,\n          peg_ratio,\n          \n          -- Efficiency\n          asset_turnover,\n          inventory_turnover,\n          \n          -- Market\n          beta,\n          \n          -- Technical\n          price_momentum_3m,\n          price_momentum_12m,\n          rsi,\n          \n          -- Dividend\n          dividend_yield,\n          dividend_growth,\n          payout_ratio,\n          \n          -- Cached score if available\n          factor_score,\n          last_updated\n          \n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        ${whereClause}\n        ORDER BY \n          CASE \n            WHEN factor_score IS NOT NULL THEN factor_score \n            ELSE 50 \n          END DESC,\n          market_cap DESC\n        LIMIT ${filters.limit || 100}\n      `",
      "context": "    223:       }\n    224: \n>>> 225:       const stocksQuery = `\n    226:         SELECT \n    227:           symbol,"
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 352,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown factor: ${factorName}`",
      "context": "    350:       const factor = this.factors[factorName];\n    351:       if (!factor) {\n>>> 352:         throw new Error(`Unknown factor: ${factorName}`);\n    353:       }\n    354: "
    },
    {
      "file": "webapp/lambda/utils/factorScoring.js",
      "line": 190,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE 1=1';\n      const params = [];\n      let paramIndex = 1;\n\n      // Add filters\n      if (filters.minScore) {\n        whereClause +",
      "context": "    188:   async getStocksWithFactorScores(filters = {}) {\n    189:     try {\n>>> 190:       let whereClause = 'WHERE 1=1';\n    191:       const params = [];\n    192:       let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`",
      "context": "    59: \n    60:             // If no ARN provided, try default secret name\n>>> 61:             const defaultSecretName = `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n    62:             console.log(`🔍 Attempting to load JWT secret with default name: ${defaultSecretName}`);\n    63:             "
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Attempting to load JWT secret with default name: ${defaultSecretName}`",
      "context": "    60:             // If no ARN provided, try default secret name\n    61:             const defaultSecretName = `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n>>> 62:             console.log(`🔍 Attempting to load JWT secret with default name: ${defaultSecretName}`);\n    63:             \n    64:             const existingSecret = await this._loadSecretFromSecretsManager(defaultSecretName);"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 94,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`JWT secret initialization failed: ${error.message}`",
      "context": "    92:             }\n    93:             \n>>> 94:             throw new Error(`JWT secret initialization failed: ${error.message}`);\n    95:         }\n    96:     }"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 121,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📝 Secret not found: ${secretId}`",
      "context": "    119:         } catch (error) {\n    120:             if (error.name === 'ResourceNotFoundException') {\n>>> 121:                 console.log(`📝 Secret not found: ${secretId}`);\n    122:                 return null;\n    123:             }"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 146,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`JWT secret for stocks app API key service (${process.env.NODE_ENV || 'dev'})`",
      "context": "    144:             const createCommand = new CreateSecretCommand({\n    145:                 Name: secretName,\n>>> 146:                 Description: `JWT secret for stocks app API key service (${process.env.NODE_ENV || 'dev'})`,\n    147:                 SecretString: JSON.stringify(secretData),\n    148:                 Tags: ["
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 157,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Created new JWT secret: ${response.ARN}`",
      "context": "    155: \n    156:             const response = await this.secretsManager.send(createCommand);\n>>> 157:             console.log(`✅ Created new JWT secret: ${response.ARN}`);\n    158:             \n    159:             // Set environment variable for future use"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 161,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`💡 Consider setting JWT_SECRET_ARN=${response.ARN} in your environment`",
      "context": "    159:             // Set environment variable for future use\n    160:             if (!process.env.JWT_SECRET_ARN) {\n>>> 161:                 console.log(`💡 Consider setting JWT_SECRET_ARN=${response.ARN} in your environment`);\n    162:             }\n    163: "
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`",
      "context": "    59: \n    60:             // If no ARN provided, try default secret name\n>>> 61:             const defaultSecretName = `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n    62:             console.log(`🔍 Attempting to load JWT secret with default name: ${defaultSecretName}`);\n    63:             "
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 7,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass JwtSecretManager {\n    constructor() {\n        this.secretsManager = new SecretsManagerClient({\n            region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    5: \n    6: const crypto = require('crypto');\n>>> 7: const { SecretsManagerClient, GetSecretValueCommand, CreateSecretCommand, UpdateSecretCommand } = require('@aws-sdk/client-secrets-manager');\n    8: \n    9: class JwtSecretManager {"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 37,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\n            // First try to load from environment (for local development)\n            if (process.env.JWT_SECRET) {\n                console.log('",
      "context": "    35:     async _loadOrCreateJwtSecret() {\n    36:         try {\n>>> 37:             console.log('🔐 Initializing JWT secret management...');\n    38: \n    39:             // First try to load from environment (for local development)"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 41,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n                this.jwtSecret = process.env.JWT_SECRET;\n                this.jwtSecretCache = this.jwtSecret;\n                return this.jwtSecret;\n            }\n\n            // Try to load from AWS Secrets Manager\n            const secretArn = process.env.JWT_SECRET_ARN;\n            if (secretArn) {\n                console.log('",
      "context": "    39:             // First try to load from environment (for local development)\n    40:             if (process.env.JWT_SECRET) {\n>>> 41:                 console.log('🔧 Using JWT secret from environment variable');\n    42:                 this.jwtSecret = process.env.JWT_SECRET;\n    43:                 this.jwtSecretCache = this.jwtSecret;"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 61,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`stocks-app-jwt-secret-${process.env.NODE_ENV || '",
      "context": "    59: \n    60:             // If no ARN provided, try default secret name\n>>> 61:             const defaultSecretName = `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n    62:             console.log(`🔍 Attempting to load JWT secret with default name: ${defaultSecretName}`);\n    63:             "
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 83,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', error.message);\n            \n            // Fallback for development: generate temporary secret\n            if (process.env.NODE_ENV !== '",
      "context": "    81: \n    82:         } catch (error) {\n>>> 83:             console.error('❌ Failed to initialize JWT secret:', error.message);\n    84:             \n    85:             // Fallback for development: generate temporary secret"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 146,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`JWT secret for stocks app API key service (${process.env.NODE_ENV || '",
      "context": "    144:             const createCommand = new CreateSecretCommand({\n    145:                 Name: secretName,\n>>> 146:                 Description: `JWT secret for stocks app API key service (${process.env.NODE_ENV || 'dev'})`,\n    147:                 SecretString: JSON.stringify(secretData),\n    148:                 Tags: ["
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 151,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', Value: process.env.NODE_ENV || '",
      "context": "    149:                     { Key: 'Application', Value: 'stocks-app' },\n    150:                     { Key: 'Component', Value: 'api-key-service' },\n>>> 151:                     { Key: 'Environment', Value: process.env.NODE_ENV || 'dev' },\n    152:                     { Key: 'Purpose', Value: 'jwt-signing' }\n    153:                 ]"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 157,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n            \n            // Set environment variable for future use\n            if (!process.env.JWT_SECRET_ARN) {\n                console.log(`",
      "context": "    155: \n    156:             const response = await this.secretsManager.send(createCommand);\n>>> 157:             console.log(`✅ Created new JWT secret: ${response.ARN}`);\n    158:             \n    159:             // Set environment variable for future use"
    },
    {
      "file": "webapp/lambda/utils/jwtSecretManager.js",
      "line": 194,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n            const secretName = process.env.JWT_SECRET_ARN || `",
      "context": "    192:             console.log('🔄 Starting JWT secret rotation...');\n    193:             \n>>> 194:             const newSecret = crypto.randomBytes(64).toString('hex');\n    195:             const secretName = process.env.JWT_SECRET_ARN || `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n    196:             "
    },
    {
      "file": "webapp/lambda/utils/keyGenerator.js",
      "line": 81,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`# Cryptographic Keys - Generated ${keys.timestamp}\n# Store these securely and never commit to version control\n\n# Primary API key encryption secret (256-bit)\nAPI_KEY_ENCRYPTION_SECRET=\"${keys.API_KEY_ENCRYPTION_SECRET}\"\n\n# JWT signing secret (512-bit) - if using custom JWT implementation\nJWT_SECRET=\"${keys.JWT_SECRET}\"\n\n# Session encryption secret (256-bit)\nSESSION_SECRET=\"${keys.SESSION_SECRET}\"\n\n# Backup API key encryption secret for key rotation\nBACKUP_API_KEY_ENCRYPTION_SECRET=\"${keys.BACKUP_API_KEY_ENCRYPTION_SECRET}\"\n\n# Key rotation date for tracking\nKEY_GENERATION_DATE=\"${keys.timestamp}\"\n`",
      "context": "    79:  */\n    80: function generateEnvFormat(keys) {\n>>> 81:     return `# Cryptographic Keys - Generated ${keys.timestamp}\n    82: # Store these securely and never commit to version control\n    83: "
    },
    {
      "file": "webapp/lambda/utils/keyGenerator.js",
      "line": 108,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   • API Encryption Key: ${keys.entropy_info.api_encryption_bits} bits`",
      "context": "    106:     \n    107:     console.log('✅ Generated keys with the following entropy:');\n>>> 108:     console.log(`   • API Encryption Key: ${keys.entropy_info.api_encryption_bits} bits`);\n    109:     console.log(`   • JWT Secret: ${keys.entropy_info.jwt_secret_bits} bits`);\n    110:     console.log(`   • Session Secret: ${keys.entropy_info.session_secret_bits} bits\\n`);"
    },
    {
      "file": "webapp/lambda/utils/keyGenerator.js",
      "line": 109,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   • JWT Secret: ${keys.entropy_info.jwt_secret_bits} bits`",
      "context": "    107:     console.log('✅ Generated keys with the following entropy:');\n    108:     console.log(`   • API Encryption Key: ${keys.entropy_info.api_encryption_bits} bits`);\n>>> 109:     console.log(`   • JWT Secret: ${keys.entropy_info.jwt_secret_bits} bits`);\n    110:     console.log(`   • Session Secret: ${keys.entropy_info.session_secret_bits} bits\\n`);\n    111:     "
    },
    {
      "file": "webapp/lambda/utils/keyGenerator.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`   • Session Secret: ${keys.entropy_info.session_secret_bits} bits\\n`",
      "context": "    108:     console.log(`   • API Encryption Key: ${keys.entropy_info.api_encryption_bits} bits`);\n    109:     console.log(`   • JWT Secret: ${keys.entropy_info.jwt_secret_bits} bits`);\n>>> 110:     console.log(`   • Session Secret: ${keys.entropy_info.session_secret_bits} bits\\n`);\n    111:     \n    112:     console.log('📋 Environment Variables Format:');"
    },
    {
      "file": "webapp/lambda/utils/keyGenerator.js",
      "line": 137,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\\n${allValid ? '🎉 All keys generated successfully!' : '❌ Some keys failed validation!'}`",
      "context": "    135:     \n    136:     const allValid = validations.every(v => v.valid);\n>>> 137:     console.log(`\\n${allValid ? '🎉 All keys generated successfully!' : '❌ Some keys failed validation!'}`);\n    138:     \n    139:     process.exit(allValid ? 0 : 1);"
    },
    {
      "file": "webapp/lambda/utils/liveDataManager.js",
      "line": 38,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`live-data-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    36: \n    37:   generateCorrelationId() {\n>>> 38:     return `live-data-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    39:   }\n    40: "
    },
    {
      "file": "webapp/lambda/utils/liveDataManager.js",
      "line": 538,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Provider ${providerId} not found`",
      "context": "    536:     \n    537:     if (!provider) {\n>>> 538:       throw new Error(`Provider ${providerId} not found`);\n    539:     }\n    540: "
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 76,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${level.icon} [${logEntry.correlation_id}] ${logEntry.message}`",
      "context": "    74:   }\n    75: \n>>> 76:   const output = `${level.icon} [${logEntry.correlation_id}] ${logEntry.message}`;\n    77:   const contextOutput = Object.keys(logEntry.context).length > 0 ? \n    78:     JSON.stringify(logEntry.context, null, 2) : '';"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 183,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`API request started: ${method} ${path}`",
      "context": "    181:     });\n    182:     this.mark('request_start');\n>>> 183:     return this.info(`API request started: ${method} ${path}`, {\n    184:       user_agent: additionalContext.userAgent,\n    185:       ip: additionalContext.ip,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 200,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`API request completed: ${statusCode}`",
      "context": "    198:                  statusCode >= 400 ? LOG_LEVELS.WARN : LOG_LEVELS.INFO;\n    199:     \n>>> 200:     return log(level, `API request completed: ${statusCode}`, {\n    201:       ...this.context,\n    202:       ...additionalContext,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 212,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`db_${operation}_${table}`",
      "context": "    210:    */\n    211:   dbOperation(operation, table, duration = null, additionalContext = {}) {\n>>> 212:     this.mark(`db_${operation}_${table}`);\n    213:     return this.info(`Database ${operation}: ${table}`, {\n    214:       db_operation: operation,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 213,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database ${operation}: ${table}`",
      "context": "    211:   dbOperation(operation, table, duration = null, additionalContext = {}) {\n    212:     this.mark(`db_${operation}_${table}`);\n>>> 213:     return this.info(`Database ${operation}: ${table}`, {\n    214:       db_operation: operation,\n    215:       db_table: table,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`api_${service}`",
      "context": "    223:    */\n    224:   externalApiCall(service, endpoint, duration = null, additionalContext = {}) {\n>>> 225:     this.mark(`api_${service}`);\n    226:     const level = additionalContext.error ? LOG_LEVELS.ERROR : LOG_LEVELS.INFO;\n    227:     "
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 228,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call: ${service} ${endpoint}`",
      "context": "    226:     const level = additionalContext.error ? LOG_LEVELS.ERROR : LOG_LEVELS.INFO;\n    227:     \n>>> 228:     return log(level, `External API call: ${service} ${endpoint}`, {\n    229:       ...this.context,\n    230:       external_service: service,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 241,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`auth_${event}`",
      "context": "    239:    */\n    240:   authEvent(event, userId = null, additionalContext = {}) {\n>>> 241:     this.mark(`auth_${event}`);\n    242:     return this.info(`Authentication ${event}`, {\n    243:       auth_event: event,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 242,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authentication ${event}`",
      "context": "    240:   authEvent(event, userId = null, additionalContext = {}) {\n    241:     this.mark(`auth_${event}`);\n>>> 242:     return this.info(`Authentication ${event}`, {\n    243:       auth_event: event,\n    244:       user_id: userId ? `${userId.substring(0, 8)}...` : 'unknown',"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 244,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    242:     return this.info(`Authentication ${event}`, {\n    243:       auth_event: event,\n>>> 244:       user_id: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    245:       ...additionalContext\n    246:     });"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 314,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${operation}_${requestId || generateCorrelationId()}`",
      "context": "    312:  */\n    313: function startPerformanceTracking(operation, requestId = null) {\n>>> 314:   const trackingId = `${operation}_${requestId || generateCorrelationId()}`;\n    315:   performanceTrackers.set(trackingId, {\n    316:     operation,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 332,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Performance: ${tracker.operation} completed`",
      "context": "    330:   performanceTrackers.delete(trackingId);\n    331: \n>>> 332:   log(LOG_LEVELS.INFO, `Performance: ${tracker.operation} completed`, {\n    333:     operation: tracker.operation,\n    334:     duration_ms: duration,"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 28,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "')[0];\n}\n\n/**\n * Create structured log entry\n */\nfunction createLogEntry(level, message, context = {}, requestId = null) {\n  const timestamp = new Date().toISOString();\n  const correlationId = requestId || context.requestId || generateCorrelationId();\n  \n  const logEntry = {\n    timestamp,\n    level: level.name,\n    message,\n    correlation_id: correlationId,\n    context: {\n      ...context,\n      environment: process.env.NODE_ENV || '",
      "context": "    26:  */\n    27: function generateCorrelationId() {\n>>> 28:   return crypto.randomUUID().split('-')[0];\n    29: }\n    30: "
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 45,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    43:     context: {\n    44:       ...context,\n>>> 45:       environment: process.env.NODE_ENV || 'development',\n    46:       lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    47:       lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 46,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || '",
      "context": "    44:       ...context,\n    45:       environment: process.env.NODE_ENV || 'development',\n>>> 46:       lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    47:       lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n    48:       lambda_memory_size: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 47,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      lambda_memory_size: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || '",
      "context": "    45:       environment: process.env.NODE_ENV || 'development',\n    46:       lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n>>> 47:       lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n    48:       lambda_memory_size: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',\n    49:       region: process.env.AWS_REGION || 'unknown'"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 48,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      region: process.env.AWS_REGION || '",
      "context": "    46:       lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'local',\n    47:       lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'local',\n>>> 48:       lambda_memory_size: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE || 'unknown',\n    49:       region: process.env.AWS_REGION || 'unknown'\n    50:     }"
    },
    {
      "file": "webapp/lambda/utils/logger.js",
      "line": 283,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query,\n    params: req.params\n  });\n\n  // Override res.json to log response\n  const originalJson = res.json;\n  res.json = function(body) {\n    req.logger.apiRequestComplete(res.statusCode, {\n      response_size: JSON.stringify(body).length,\n      success: res.statusCode < 400\n    });\n    return originalJson.call(this, body);\n  };\n\n  next();\n}\n\n/**\n * Global error logger\n */\nfunction logError(error, context = {}, requestId = null) {\n  return log(LOG_LEVELS.ERROR, error.message || 'Unknown error occurred', {\n    error,\n    ...context\n  }, requestId);\n}\n\n/**\n * Performance tracking utilities\n */\nfunction startPerformanceTracking(operation, requestId = null) {\n  const trackingId = `",
      "context": "    281:     ip: req.ip,\n    282:     authPresent: !!req.headers.authorization,\n>>> 283:     query: req.query,\n    284:     params: req.params\n    285:   });"
    },
    {
      "file": "webapp/lambda/utils/marketAnalyticsEngine.js",
      "line": 22,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`market-analytics-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    20: \n    21:   generateCorrelationId() {\n>>> 22:     return `market-analytics-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    23:   }\n    24: "
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 97,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.summary),\n          symbol: this.extractSymbol(item.title + '",
      "context": "    95:           published_at: item.time_published,\n    96:           url: item.url,\n>>> 97:           category: this.categorizeNews(item.title + ' ' + item.summary),\n    98:           symbol: this.extractSymbol(item.title + ' ' + item.summary),\n    99:           keywords: this.extractKeywords(item.title + ' ' + item.summary),"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 98,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.summary),\n          keywords: this.extractKeywords(item.title + '",
      "context": "    96:           url: item.url,\n    97:           category: this.categorizeNews(item.title + ' ' + item.summary),\n>>> 98:           symbol: this.extractSymbol(item.title + ' ' + item.summary),\n    99:           keywords: this.extractKeywords(item.title + ' ' + item.summary),\n    100:           summary: item.summary,"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 136,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          symbol: this.extractSymbol(item.title + '",
      "context": "    134:           published_at: item.published_utc,\n    135:           url: item.article_url,\n>>> 136:           category: this.categorizeNews(item.title + ' ' + item.description),\n    137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 137,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          keywords: this.extractKeywords(item.title + '",
      "context": "    135:           url: item.article_url,\n    136:           category: this.categorizeNews(item.title + ' ' + item.description),\n>>> 137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),\n    139:           summary: item.description,"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 136,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          symbol: this.extractSymbol(item.title + '",
      "context": "    134:           published_at: item.published_utc,\n    135:           url: item.article_url,\n>>> 136:           category: this.categorizeNews(item.title + ' ' + item.description),\n    137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 137,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          keywords: this.extractKeywords(item.title + '",
      "context": "    135:           url: item.article_url,\n    136:           category: this.categorizeNews(item.title + ' ' + item.description),\n>>> 137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),\n    139:           summary: item.description,"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 136,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          symbol: this.extractSymbol(item.title + '",
      "context": "    134:           published_at: item.published_utc,\n    135:           url: item.article_url,\n>>> 136:           category: this.categorizeNews(item.title + ' ' + item.description),\n    137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 137,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "' + item.description),\n          keywords: this.extractKeywords(item.title + '",
      "context": "    135:           url: item.article_url,\n    136:           category: this.categorizeNews(item.title + ' ' + item.description),\n>>> 137:           symbol: this.extractSymbol(item.title + ' ' + item.description),\n    138:           keywords: this.extractKeywords(item.title + ' ' + item.description),\n    139:           summary: item.description,"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 55,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`News source ${index + 1} failed:`",
      "context": "    53:           newsItems.push(...result.value);\n    54:         } else {\n>>> 55:           console.warn(`News source ${index + 1} failed:`, result.reason);\n    56:         }\n    57:       });"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 184,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to fetch Yahoo feed ${feed}:`",
      "context": "    182:           });\n    183:         } catch (feedError) {\n>>> 184:           console.warn(`Failed to fetch Yahoo feed ${feed}:`, feedError.message);\n    185:         }\n    186:       }"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 78,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n            apikey: process.env.ALPHAVANTAGE_API_KEY || '",
      "context": "    76:         return axios.get('https://www.alphavantage.co/query', {\n    77:           params: {\n>>> 78:             function: 'NEWS_SENTIMENT',\n    79:             apikey: process.env.ALPHAVANTAGE_API_KEY || 'demo',\n    80:             limit: 50"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 116,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n          params: {\n            apikey: process.env.POLYGON_API_KEY || '",
      "context": "    114:       // Polygon has a free tier with improved timeout handling\n    115:       const response = await timeoutHelper.newsApiCall(async () => {\n>>> 116:         return axios.get('https://api.polygon.io/v2/reference/news', {\n    117:           params: {\n    118:             apikey: process.env.POLYGON_API_KEY || 'demo',"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 199,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n          params: {\n            api_token: process.env.MARKETAUX_API_KEY || '",
      "context": "    197:       // Marketaux has a free tier with improved timeout handling\n    198:       const response = await timeoutHelper.newsApiCall(async () => {\n>>> 199:         return axios.get('https://api.marketaux.com/v1/news/all', {\n    200:           params: {\n    201:             api_token: process.env.MARKETAUX_API_KEY || 'demo',"
    },
    {
      "file": "webapp/lambda/utils/newsAnalyzer.js",
      "line": 239,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', {\n          params: {\n            apiKey: process.env.NEWS_API_KEY || '",
      "context": "    237:       // NewsAPI has a free tier with improved timeout handling\n    238:       const response = await timeoutHelper.newsApiCall(async () => {\n>>> 239:         return axios.get('https://newsapi.org/v2/everything', {\n    240:           params: {\n    241:             apiKey: process.env.NEWS_API_KEY || 'demo',"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 34,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Starting real-time pattern monitoring with ${intervalMinutes} minute intervals`",
      "context": "    32: \n    33:     this.isMonitoring = true;\n>>> 34:     console.log(`Starting real-time pattern monitoring with ${intervalMinutes} minute intervals`);\n    35: \n    36:     // Initial scan"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 69,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Scanning ${symbols.length} symbols for patterns`",
      "context": "    67: \n    68:       const symbols = symbolsResult.rows.map(row => row.symbol);\n>>> 69:       console.log(`Scanning ${symbols.length} symbols for patterns`);\n    70: \n    71:       // Scan each symbol"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 76,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error scanning ${symbol}:`",
      "context": "    74:           await this.detectPatterns(symbol, '1d');\n    75:         } catch (error) {\n>>> 76:           console.warn(`Error scanning ${symbol}:`, error.message);\n    77:         }\n    78:       }"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 115,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error detecting ${patternType} for ${symbol}:`",
      "context": "    113:             }\n    114:           } catch (error) {\n>>> 115:             console.warn(`Error detecting ${patternType} for ${symbol}:`, error.message);\n    116:           }\n    117:         }"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 122,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error detecting patterns for ${symbol}:`",
      "context": "    120:       return detections;\n    121:     } catch (error) {\n>>> 122:       console.error(`Error detecting patterns for ${symbol}:`, error);\n    123:       return [];\n    124:     }"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 140,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error fetching price data for ${symbol}:`",
      "context": "    138:       return result.rows.reverse(); // Chronological order\n    139:     } catch (error) {\n>>> 140:       console.error(`Error fetching price data for ${symbol}:`, error);\n    141:       return [];\n    142:     }"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 158,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error fetching technical data for ${symbol}:`",
      "context": "    156:       return result.rows.reverse(); // Chronological order\n    157:     } catch (error) {\n>>> 158:       console.error(`Error fetching technical data for ${symbol}:`, error);\n    159:       return [];\n    160:     }"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 132,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    130:       const result = await query(`\n    131:         SELECT date, open, high, low, close, volume\n>>> 132:         FROM ${tableName}\n    133:         WHERE symbol = $1\n    134:         ORDER BY date DESC"
    },
    {
      "file": "webapp/lambda/utils/patternDetector.js",
      "line": 132,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${tableName}",
      "context": "    130:       const result = await query(`\n    131:         SELECT date, open, high, low, close, volume\n>>> 132:         FROM ${tableName}\n    133:         WHERE symbol = $1\n    134:         ORDER BY date DESC"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 119,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${method}:${path}`",
      "context": "    117:    */\n    118:   trackApiRequestStart(method, path, requestId) {\n>>> 119:     const key = `${method}:${path}`;\n    120:     \n    121:     if (!this.metrics.apiRequests.has(key)) {"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${requestData.method}:${requestData.path}`",
      "context": "    150:     const endTime = Date.now();\n    151:     const responseTime = endTime - requestData.startTime;\n>>> 152:     const key = `${requestData.method}:${requestData.path}`;\n    153:     \n    154:     const metric = this.metrics.apiRequests.get(key);"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 208,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${operation}:${table}`",
      "context": "    206:    */\n    207:   trackDbOperation(operation, table, duration, success = true, requestId = null) {\n>>> 208:     const key = `${operation}:${table}`;\n    209:     \n    210:     if (!this.metrics.dbQueryTimes.has(key)) {"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 261,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service}:${endpoint}`",
      "context": "    259:    */\n    260:   trackExternalApiCall(service, endpoint, duration, success = true, requestId = null) {\n>>> 261:     const key = `${service}:${endpoint}`;\n    262:     \n    263:     if (!this.metrics.externalApiCalls.has(key)) {"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 298,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call: ${service}`",
      "context": "    296:     }\n    297:     \n>>> 298:     this.logger.info(`External API call: ${service}`, {\n    299:       service,\n    300:       endpoint,"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 427,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error rate ${(metrics.system.errorRate * 100).toFixed(2)}% exceeds threshold ${(this.metrics.thresholds.errorRate * 100).toFixed(2)}%`",
      "context": "    425:         type: 'error_rate',\n    426:         severity: 'critical',\n>>> 427:         message: `Error rate ${(metrics.system.errorRate * 100).toFixed(2)}% exceeds threshold ${(this.metrics.thresholds.errorRate * 100).toFixed(2)}%`,\n    428:         value: metrics.system.errorRate,\n    429:         threshold: this.metrics.thresholds.errorRate"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 438,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Average response time ${metrics.system.avgResponseTime}ms exceeds threshold ${this.metrics.thresholds.apiResponseTime}ms`",
      "context": "    436:         type: 'response_time',\n    437:         severity: 'warning',\n>>> 438:         message: `Average response time ${metrics.system.avgResponseTime}ms exceeds threshold ${this.metrics.thresholds.apiResponseTime}ms`,\n    439:         value: metrics.system.avgResponseTime,\n    440:         threshold: this.metrics.thresholds.apiResponseTime"
    },
    {
      "file": "webapp/lambda/utils/performanceMonitor.js",
      "line": 450,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Memory utilization ${memUtilization.toFixed(2)}% is critically high`",
      "context": "    448:         type: 'memory_usage',\n    449:         severity: 'critical',\n>>> 450:         message: `Memory utilization ${memUtilization.toFixed(2)}% is critically high`,\n    451:         value: memUtilization,\n    452:         threshold: 90"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 30,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`portfolio-alerts-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    28: \n    29:   generateCorrelationId() {\n>>> 30:     return `portfolio-alerts-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    31:   }\n    32: "
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND alert_type = $${paramIndex}`",
      "context": "    100: \n    101:       if (filters.alertType) {\n>>> 102:         whereClause += ` AND alert_type = $${paramIndex}`;\n    103:         params.push(filters.alertType);\n    104:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 108,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    106: \n    107:       if (filters.symbol) {\n>>> 108:         whereClause += ` AND symbol = $${paramIndex}`;\n    109:         params.push(filters.symbol);\n    110:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 114,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND is_active = $${paramIndex}`",
      "context": "    112: \n    113:       if (filters.isActive !== undefined) {\n>>> 114:         whereClause += ` AND is_active = $${paramIndex}`;\n    115:         params.push(filters.isActive);\n    116:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 119,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          pa.*,\n          (\n            SELECT COUNT(*) FROM portfolio_alert_notifications pan \n            WHERE pan.alert_id = pa.id\n          ) as notification_count,\n          (\n            SELECT MAX(created_at) FROM portfolio_alert_notifications pan \n            WHERE pan.alert_id = pa.id\n          ) as last_triggered\n        FROM portfolio_alerts pa\n        ${whereClause}\n        ORDER BY pa.created_at DESC\n      `",
      "context": "    117:       }\n    118: \n>>> 119:       const result = await query(`\n    120:         SELECT \n    121:           pa.*,"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 625,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio allocation has drifted beyond ${threshold}% threshold. Consider rebalancing.`",
      "context": "    623:     switch (alert_type) {\n    624:       case this.alertTypes.ALLOCATION_DRIFT:\n>>> 625:         return `Portfolio allocation has drifted beyond ${threshold}% threshold. Consider rebalancing.`;\n    626:       \n    627:       case this.alertTypes.POSITION_GAIN_LOSS:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 628,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Position ${symbol} has ${condition} ${threshold}% gain/loss threshold.`",
      "context": "    626:       \n    627:       case this.alertTypes.POSITION_GAIN_LOSS:\n>>> 628:         return `Position ${symbol} has ${condition} ${threshold}% gain/loss threshold.`;\n    629:       \n    630:       case this.alertTypes.PORTFOLIO_VALUE_CHANGE:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 631,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio value has changed by more than ${threshold}%. Current value: $${parseFloat(summary.total_value || 0).toFixed(2)}`",
      "context": "    629:       \n    630:       case this.alertTypes.PORTFOLIO_VALUE_CHANGE:\n>>> 631:         return `Portfolio value has changed by more than ${threshold}%. Current value: $${parseFloat(summary.total_value || 0).toFixed(2)}`;\n    632:       \n    633:       case this.alertTypes.SECTOR_CONCENTRATION:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 634,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Sector concentration exceeds ${threshold}% threshold. Consider diversification.`",
      "context": "    632:       \n    633:       case this.alertTypes.SECTOR_CONCENTRATION:\n>>> 634:         return `Sector concentration exceeds ${threshold}% threshold. Consider diversification.`;\n    635:       \n    636:       case this.alertTypes.POSITION_SIZE_CHANGE:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 637,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Position ${symbol} size has changed beyond ${threshold}% threshold.`",
      "context": "    635:       \n    636:       case this.alertTypes.POSITION_SIZE_CHANGE:\n>>> 637:         return `Position ${symbol} size has changed beyond ${threshold}% threshold.`;\n    638:       \n    639:       case this.alertTypes.BETA_CHANGE:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 640,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio beta has ${condition} ${threshold} threshold. Current risk level may need adjustment.`",
      "context": "    638:       \n    639:       case this.alertTypes.BETA_CHANGE:\n>>> 640:         return `Portfolio beta has ${condition} ${threshold} threshold. Current risk level may need adjustment.`;\n    641:       \n    642:       case this.alertTypes.REBALANCE_NEEDED:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 643,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio rebalancing recommended. Top position exceeds ${threshold}% concentration.`",
      "context": "    641:       \n    642:       case this.alertTypes.REBALANCE_NEEDED:\n>>> 643:         return `Portfolio rebalancing recommended. Top position exceeds ${threshold}% concentration.`;\n    644:       \n    645:       default:"
    },
    {
      "file": "webapp/lambda/utils/portfolioAlerts.js",
      "line": 646,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Portfolio alert triggered for ${alert_type}.`",
      "context": "    644:       \n    645:       default:\n>>> 646:         return `Portfolio alert triggered for ${alert_type}.`;\n    647:     }\n    648:   }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 24,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId}-${provider}`",
      "context": "    22:    */\n    23:   async triggerPortfolioDataRefresh(userId, provider, symbols = []) {\n>>> 24:     const refreshId = `${userId}-${provider}`;\n    25:     \n    26:     if (this.refreshInProgress.has(refreshId)) {"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 27,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⏳ Portfolio data refresh already in progress for ${userId}/${provider}`",
      "context": "    25:     \n    26:     if (this.refreshInProgress.has(refreshId)) {\n>>> 27:       console.log(`⏳ Portfolio data refresh already in progress for ${userId}/${provider}`);\n    28:       return { status: 'in_progress', message: 'Refresh already running' };\n    29:     }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 33,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Starting portfolio data refresh for user ${userId} (${provider})`",
      "context": "    31:     try {\n    32:       this.refreshInProgress.add(refreshId);\n>>> 33:       console.log(`🔄 Starting portfolio data refresh for user ${userId} (${provider})`);\n    34: \n    35:       // 1. Get user's portfolio symbols if not provided"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 41,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`ℹ️ No portfolio symbols found for ${userId}/${provider}`",
      "context": "    39: \n    40:       if (symbols.length === 0) {\n>>> 41:         console.log(`ℹ️ No portfolio symbols found for ${userId}/${provider}`);\n    42:         return { status: 'no_symbols', message: 'No portfolio symbols to refresh' };\n    43:       }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 53,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Portfolio data refresh completed for ${userId}/${provider}`",
      "context": "    51:       await this.updatePortfolioRefreshTimestamp(userId, provider);\n    52: \n>>> 53:       console.log(`✅ Portfolio data refresh completed for ${userId}/${provider}`);\n    54:       return {\n    55:         status: 'completed',"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 62,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Portfolio data refresh failed for ${userId}/${provider}:`",
      "context": "    60: \n    61:     } catch (error) {\n>>> 62:       console.error(`❌ Portfolio data refresh failed for ${userId}/${provider}:`, error);\n    63:       return {\n    64:         status: 'error',"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 114,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 ${symbolsNeedingRefresh.length} symbols need data refresh`",
      "context": "    112:       }\n    113: \n>>> 114:       console.log(`🔄 ${symbolsNeedingRefresh.length} symbols need data refresh`);\n    115: \n    116:       // Trigger priority data loading for these symbols"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 141,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${i + 1}`",
      "context": "    139:     try {\n    140:       // Check when symbols were last updated\n>>> 141:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n    142:       const result = await query(`\n    143:         SELECT symbol "
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 142,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT symbol \n        FROM price_daily \n        WHERE symbol IN (${placeholders})\n        AND date >= CURRENT_DATE - INTERVAL '1 day'\n        GROUP BY symbol\n      `",
      "context": "    140:       // Check when symbols were last updated\n    141:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n>>> 142:       const result = await query(`\n    143:         SELECT symbol \n    144:         FROM price_daily "
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 175,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`💾 Stored refresh request for ${symbols.length} symbols`",
      "context": "    173:       `, [userId, JSON.stringify(symbols)]);\n    174: \n>>> 175:       console.log(`💾 Stored refresh request for ${symbols.length} symbols`);\n    176:     } catch (error) {\n    177:       // Table might not exist yet - that's okay"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 224,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId}-*`",
      "context": "    222:         requested: request.created_at,\n    223:         completed: request.completed_at,\n>>> 224:         inProgress: this.refreshInProgress.has(`${userId}-*`)\n    225:       };\n    226: "
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 238,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚀 Triggering technical data loaders for ${symbols.length} symbols`",
      "context": "    236:   async triggerTechnicalDataLoaders(symbols, userId) {\n    237:     try {\n>>> 238:       console.log(`🚀 Triggering technical data loaders for ${symbols.length} symbols`);\n    239:       \n    240:       // Method 1: Try ECS task if cluster exists"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Failed to trigger technical data loaders: ${error.message}`",
      "context": "    249:       \n    250:     } catch (error) {\n>>> 251:       console.warn(`⚠️ Failed to trigger technical data loaders: ${error.message}`);\n    252:       // Don't fail the whole process if data loading fails\n    253:     }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 298,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ ECS task triggering failed: ${error.message}`",
      "context": "    296:       \n    297:     } catch (error) {\n>>> 298:       console.log(`⚠️ ECS task triggering failed: ${error.message}`);\n    299:       return false; // Fall back to Lambda approach\n    300:     }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 323,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Lambda triggered for technical data loading: ${result.StatusCode}`",
      "context": "    321:       const command = new InvokeCommand(params);\n    322:       const result = await this.lambda.send(command);\n>>> 323:       console.log(`🎯 Lambda triggered for technical data loading: ${result.StatusCode}`);\n    324:       \n    325:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 326,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Lambda triggering failed: ${error.message}`",
      "context": "    324:       \n    325:     } catch (error) {\n>>> 326:       console.warn(`⚠️ Lambda triggering failed: ${error.message}`);\n    327:       // This is a fallback, so just log the warning\n    328:     }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 392,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Could not fetch ECS task status: ${error.message}`",
      "context": "    390:       \n    391:     } catch (error) {\n>>> 392:       console.warn(`⚠️ Could not fetch ECS task status: ${error.message}`);\n    393:       return [];\n    394:     }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 6,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass PortfolioDataRefreshService {\n  constructor() {\n    this.refreshInProgress = new Set();\n    // Initialize AWS services for triggering data loaders\n    const region = process.env.AWS_REGION || '",
      "context": "    4: const { query } = require('./database');\n    5: const { ECSClient, RunTaskCommand, ListTasksCommand, DescribeTasksCommand } = require('@aws-sdk/client-ecs');\n>>> 6: const { LambdaClient, InvokeCommand } = require('@aws-sdk/client-lambda');\n    7: \n    8: class PortfolioDataRefreshService {"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 252,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'t fail the whole process if data loading fails\n    }\n  }\n\n  /**\n   * Trigger ECS tasks for technical data loading\n   */\n  async triggerECSDataLoaders(symbols) {\n    try {\n      // Check if ECS cluster exists (optional - for production deployments)\n      const clusterName = process.env.ECS_CLUSTER_NAME || '",
      "context": "    250:     } catch (error) {\n    251:       console.warn(`⚠️ Failed to trigger technical data loaders: ${error.message}`);\n>>> 252:       // Don't fail the whole process if data loading fails\n    253:     }\n    254:   }"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 270,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        networkConfiguration: {\n          awsvpcConfiguration: {\n            subnets: [\n              process.env.SUBNET_ID_1 || '",
      "context": "    268:         cluster: clusterName,\n    269:         taskDefinition: 'loadtechnicalsdaily-task', // Task definition name\n>>> 270:         launchType: 'FARGATE',\n    271:         networkConfiguration: {\n    272:           awsvpcConfiguration: {"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 274,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', // Would be from CloudFormation\n              process.env.SUBNET_ID_2 || '",
      "context": "    272:           awsvpcConfiguration: {\n    273:             subnets: [\n>>> 274:               process.env.SUBNET_ID_1 || 'subnet-12345', // Would be from CloudFormation\n    275:               process.env.SUBNET_ID_2 || 'subnet-67890'\n    276:             ],"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 275,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n            ],\n            securityGroups: [process.env.SECURITY_GROUP_ID || '",
      "context": "    273:             subnets: [\n    274:               process.env.SUBNET_ID_1 || 'subnet-12345', // Would be from CloudFormation\n>>> 275:               process.env.SUBNET_ID_2 || 'subnet-67890'\n    276:             ],\n    277:             securityGroups: [process.env.SECURITY_GROUP_ID || 'sg-12345'],"
    },
    {
      "file": "webapp/lambda/utils/portfolioDataRefresh.js",
      "line": 350,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', error: error.message };\n    }\n  }\n\n  /**\n   * Get recent ECS tasks related to technical data loading\n   */\n  async getRecentECSTasks() {\n    try {\n      const clusterName = process.env.ECS_CLUSTER_NAME || '",
      "context": "    348:     } catch (error) {\n    349:       console.error('Error getting data loading status:', error);\n>>> 350:       return { status: 'error', error: error.message };\n    351:     }\n    352:   }"
    },
    {
      "file": "webapp/lambda/utils/portfolioOptimizationEngine.js",
      "line": 11,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`portfolio-opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    9: \n    10:   generateCorrelationId() {\n>>> 11:     return `portfolio-opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    12:   }\n    13: "
    },
    {
      "file": "webapp/lambda/utils/portfolioOptimizationEngine.js",
      "line": 107,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${index + 1}`",
      "context": "    105:   async getMarketDataForOptimization(holdings) {\n    106:     const symbols = holdings.map(h => h.symbol);\n>>> 107:     const placeholders = symbols.map((_, index) => `$${index + 1}`).join(',');\n    108:     \n    109:     const marketDataQuery = `"
    },
    {
      "file": "webapp/lambda/utils/portfolioOptimizationEngine.js",
      "line": 109,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n      SELECT \n        symbol,\n        date,\n        close,\n        volume,\n        adj_close\n      FROM price_daily\n      WHERE symbol IN (${placeholders})\n        AND date >= CURRENT_DATE - INTERVAL '252 days'\n      ORDER BY symbol, date\n    `",
      "context": "    107:     const placeholders = symbols.map((_, index) => `$${index + 1}`).join(',');\n    108:     \n>>> 109:     const marketDataQuery = `\n    110:       SELECT \n    111:         symbol,"
    },
    {
      "file": "webapp/lambda/utils/portfolioOptimizationEngine.js",
      "line": 336,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Rebalance to optimal weight of ${(optimalWeight * 100).toFixed(1)}%`",
      "context": "    334:           suggestedShares: Math.abs(sharesToTrade),\n    335:           priority: Math.abs(weightDifference) > 0.15 ? 'high' : 'medium',\n>>> 336:           rationale: `Rebalance to optimal weight of ${(optimalWeight * 100).toFixed(1)}%`\n    337:         });\n    338:       }"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`sync_${userId}_${Date.now()}`",
      "context": "    40:    */\n    41:   async syncUserPortfolio(userId, apiKeyService, options = {}) {\n>>> 42:     const syncId = `sync_${userId}_${Date.now()}`;\n    43:     const syncStart = Date.now();\n    44: "
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 48,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    46:       this.logger.info('🔄 Starting portfolio sync', {\n    47:         syncId,\n>>> 48:         userId: `${userId.substring(0, 8)}...`,\n    49:         options\n    50:       });"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 92,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${syncDuration}ms`",
      "context": "    90:       this.logger.info('✅ Portfolio sync completed successfully', {\n    91:         syncId,\n>>> 92:         duration: `${syncDuration}ms`,\n    93:         result: syncResult.summary\n    94:       });"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 92,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${syncDuration}ms`",
      "context": "    90:       this.logger.info('✅ Portfolio sync completed successfully', {\n    91:         syncId,\n>>> 92:         duration: `${syncDuration}ms`,\n    93:         result: syncResult.summary\n    94:       });"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 48,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    46:       this.logger.info('🔄 Starting portfolio sync', {\n    47:         syncId,\n>>> 48:         userId: `${userId.substring(0, 8)}...`,\n    49:         options\n    50:       });"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 167,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Executing sync stage: ${stage}`",
      "context": "    165:         this.updateSyncStage(userId, stage);\n    166:         \n>>> 167:         this.logger.info(`📊 Executing sync stage: ${stage}`, { syncId });\n    168:         \n    169:         const stageResult = await this.executeSyncStage("
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 184,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Stage ${stage} completed`",
      "context": "    182:         totalConflictsResolved += stageResult.conflictsResolved || 0;\n    183: \n>>> 184:         this.logger.info(`✅ Stage ${stage} completed`, {\n    185:           syncId,\n    186:           recordsProcessed: stageResult.recordsProcessed,"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 196,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Stage ${stage} failed`",
      "context": "    194:         };\n    195: \n>>> 196:         this.logger.error(`❌ Stage ${stage} failed`, {\n    197:           syncId,\n    198:           error: error.message"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 240,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown sync stage: ${stage}`",
      "context": "    238:       \n    239:       default:\n>>> 240:         throw new Error(`Unknown sync stage: ${stage}`);\n    241:     }\n    242:   }"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 551,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${dbField} = $${paramIndex}`",
      "context": "    549:     conflicts.forEach(conflict => {\n    550:       const dbField = this.mapApiFieldToDb(conflict.field);\n>>> 551:       updateFields.push(`${dbField} = $${paramIndex}`);\n    552:       updateValues.push(resolvedData[dbField]);\n    553:       paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 558,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`last_sync_conflicts = $${paramIndex}`",
      "context": "    556:     // Always update the timestamp and conflict resolution info\n    557:     updateFields.push('updated_at = NOW()');\n>>> 558:     updateFields.push(`last_sync_conflicts = $${paramIndex}`);\n    559:     updateValues.push(JSON.stringify(conflicts.map(c => c.field)));\n    560: "
    },
    {
      "file": "webapp/lambda/utils/portfolioSyncService.js",
      "line": 806,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.syncMetrics.avgSyncDuration}ms`",
      "context": "    804:       ...this.syncMetrics,\n    805:       successRate: successRate.toFixed(2),\n>>> 806:       avgSyncDurationFormatted: `${this.syncMetrics.avgSyncDuration}ms`,\n    807:       activeSyncs: Array.from(this.syncStatus.values()).filter(\n    808:         status => status.status === 'in_progress'"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 72,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`➕ Added connection ${connectionId} for user ${userId}`",
      "context": "    70:     });\n    71:     \n>>> 72:     console.log(`➕ Added connection ${connectionId} for user ${userId}`);\n    73:     \n    74:     // Send initial data"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 87,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`➖ Removed connection ${connectionId}`",
      "context": "    85:       \n    86:       this.connections.delete(connectionId);\n>>> 87:       console.log(`➖ Removed connection ${connectionId}`);\n    88:     }\n    89:   }"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 108,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 Subscribed connection ${connectionId} to ${dataType}`",
      "context": "    106:     });\n    107:     \n>>> 108:     console.log(`📡 Subscribed connection ${connectionId} to ${dataType}`);\n    109:     \n    110:     // Send initial data for this subscription"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 126,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📡 Unsubscribed connection ${connectionId} from ${dataType}`",
      "context": "    124:     }\n    125:     \n>>> 126:     console.log(`📡 Unsubscribed connection ${connectionId} from ${dataType}`);\n    127:   }\n    128: "
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error updating ${dataType}:`",
      "context": "    154:       }\n    155:     } catch (error) {\n>>> 156:       console.error(`Error updating ${dataType}:`, error);\n    157:     }\n    158:   }"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 466,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error sending data to connection ${connectionId}:`",
      "context": "    464:       }\n    465:     } catch (error) {\n>>> 466:       console.error(`Error sending data to connection ${connectionId}:`, error);\n    467:       this.removeConnection(connectionId);\n    468:     }"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 521,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error sending initial data to connection ${connectionId}:`",
      "context": "    519:       }\n    520:     } catch (error) {\n>>> 521:       console.error(`Error sending initial data to connection ${connectionId}:`, error);\n    522:     }\n    523:   }"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 537,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error broadcasting to connection ${connectionId}:`",
      "context": "    535:           connection.ws.send(JSON.stringify(message));\n    536:         } catch (error) {\n>>> 537:           console.error(`Error broadcasting to connection ${connectionId}:`, error);\n    538:           this.removeConnection(connectionId);\n    539:         }"
    },
    {
      "file": "webapp/lambda/utils/realTimeDataFeed.js",
      "line": 126,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "from ${dataType}",
      "context": "    124:     }\n    125:     \n>>> 126:     console.log(`📡 Unsubscribed connection ${connectionId} from ${dataType}`);\n    127:   }\n    128: "
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 242,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId}_${Date.now()}`",
      "context": "    240:    */\n    241:   addSubscription(userId, symbols, dataTypes = ['quotes'], options = {}) {\n>>> 242:     const subscriptionId = `${userId}_${Date.now()}`;\n    243:     \n    244:     const subscription = {"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 268,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    266:     this.logger.info('📡 Subscription added', {\n    267:       subscriptionId,\n>>> 268:       userId: `${userId.substring(0, 8)}...`,\n    269:       symbols: Array.from(symbols),\n    270:       dataTypes: Array.from(dataTypes)"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 285,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${subscription.userId.substring(0, 8)}...`",
      "context": "    283:       this.logger.info('📡 Subscription removed', {\n    284:         subscriptionId,\n>>> 285:         userId: `${subscription.userId.substring(0, 8)}...`\n    286:       });\n    287:     }"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 640,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${flushDuration}ms`",
      "context": "    638:       const flushDuration = Date.now() - flushStart;\n    639:       this.logger.debug('Buffers flushed', {\n>>> 640:         duration: `${flushDuration}ms`,\n    641:         dataPacketSize: this.calculateDataPacketSize(dataPacket),\n    642:         subscriberCount: this.subscriptions.size"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 988,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.metrics.averageLatency.toFixed(2)}ms`",
      "context": "    986:       },\n    987:       latency: {\n>>> 988:         average: `${this.metrics.averageLatency.toFixed(2)}ms`,\n    989:         p95: `${this.metrics.latencyP95.toFixed(2)}ms`,\n    990:         p99: `${this.metrics.latencyP99.toFixed(2)}ms`"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 989,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.metrics.latencyP95.toFixed(2)}ms`",
      "context": "    987:       latency: {\n    988:         average: `${this.metrics.averageLatency.toFixed(2)}ms`,\n>>> 989:         p95: `${this.metrics.latencyP95.toFixed(2)}ms`,\n    990:         p99: `${this.metrics.latencyP99.toFixed(2)}ms`\n    991:       },"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 990,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.metrics.latencyP99.toFixed(2)}ms`",
      "context": "    988:         average: `${this.metrics.averageLatency.toFixed(2)}ms`,\n    989:         p95: `${this.metrics.latencyP95.toFixed(2)}ms`,\n>>> 990:         p99: `${this.metrics.latencyP99.toFixed(2)}ms`\n    991:       },\n    992:       buffers: {"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 993,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.metrics.bufferUtilization.toFixed(1)}%`",
      "context": "    991:       },\n    992:       buffers: {\n>>> 993:         utilization: `${this.metrics.bufferUtilization.toFixed(1)}%`,\n    994:         adaptiveResizes: this.metrics.adaptiveBufferResizes,\n    995:         concurrentFlushes: this.metrics.concurrentFlushes,"
    },
    {
      "file": "webapp/lambda/utils/realtimeDataPipeline.js",
      "line": 1000,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.metrics.memoryUtilization.toFixed(1)}%`",
      "context": "    998:       priorityQueues: this.metrics.priorityQueueSizes,\n    999:       system: {\n>>> 1000:         memoryUtilization: `${this.metrics.memoryUtilization.toFixed(1)}%`,\n    1001:         circuitBreakerTrips: this.metrics.circuitBreakerTrips,\n    1002:         activeSubscriptions: this.subscriptions.size"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${resource} not found`",
      "context": "    76: \n    77: const notFound = (resource = 'Resource', details = null) => {\n>>> 78:   return error(`${resource} not found`, 404, details, 'NOT_FOUND');\n    79: };\n    80: "
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 95,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service} temporarily unavailable`",
      "context": "    93: \n    94: const serviceUnavailable = (service = 'Service', details = null) => {\n>>> 95:   return error(`${service} temporarily unavailable`, 503, details, 'SERVICE_UNAVAILABLE');\n    96: };\n    97: "
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 99,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Retry after ${retryAfter} seconds`",
      "context": "    97: \n    98: const rateLimitExceeded = (retryAfter = null) => {\n>>> 99:   const details = retryAfter ? `Retry after ${retryAfter} seconds` : null;\n    100:   return error('Rate limit exceeded', 429, details, 'RATE_LIMIT_EXCEEDED');\n    101: };"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 107,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database error ${context}:`",
      "context": "    105:  */\n    106: const databaseError = (dbError, context = '') => {\n>>> 107:   console.error(`Database error ${context}:`, dbError);\n    108:   \n    109:   // Don't expose internal database errors in production"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service} API error ${context}:`",
      "context": "    123:  */\n    124: const externalApiError = (apiError, service = 'External service', context = '') => {\n>>> 125:   console.error(`${service} API error ${context}:`, apiError);\n    126:   \n    127:   const statusCode = apiError.response?.status || 500;"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 128,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service} error`",
      "context": "    126:   \n    127:   const statusCode = apiError.response?.status || 500;\n>>> 128:   const message = apiError.response?.data?.message || apiError.message || `${service} error`;\n    129:   \n    130:   return error(message, statusCode, {"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 109,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'t expose internal database errors in production\n  if (process.env.NODE_ENV === '",
      "context": "    107:   console.error(`Database error ${context}:`, dbError);\n    108:   \n>>> 109:   // Don't expose internal database errors in production\n    110:   if (process.env.NODE_ENV === 'production') {\n    111:     return serverError('Database operation failed');"
    },
    {
      "file": "webapp/lambda/utils/responseFormatter.js",
      "line": 128,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`;\n  \n  return error(message, statusCode, {\n    service,\n    context,\n    originalError: process.env.NODE_ENV === '",
      "context": "    126:   \n    127:   const statusCode = apiError.response?.status || 500;\n>>> 128:   const message = apiError.response?.data?.message || apiError.message || `${service} error`;\n    129:   \n    130:   return error(message, statusCode, {"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 458,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Consider reducing position size for holdings above 20% (currently ${(portfolioMetrics.maxPositionWeight * 100).toFixed(1)}%)`",
      "context": "    456:         category: 'concentration',\n    457:         title: 'High Position Concentration',\n>>> 458:         message: `Consider reducing position size for holdings above 20% (currently ${(portfolioMetrics.maxPositionWeight * 100).toFixed(1)}%)`,\n    459:         priority: 'high'\n    460:       });"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 469,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Consider adding more positions to improve diversification (currently ${portfolioMetrics.numPositions} positions)`",
      "context": "    467:         category: 'diversification',\n    468:         title: 'Increase Diversification',\n>>> 469:         message: `Consider adding more positions to improve diversification (currently ${portfolioMetrics.numPositions} positions)`,\n    470:         priority: 'medium'\n    471:       });"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 481,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Review positions with high risk scores: ${highRiskPositions.map(p => p.symbol).join(', ')}`",
      "context": "    479:         category: 'position_risk',\n    480:         title: 'High Risk Positions',\n>>> 481:         message: `Review positions with high risk scores: ${highRiskPositions.map(p => p.symbol).join(', ')}`,\n    482:         priority: 'high'\n    483:       });"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 503,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${i + 1}`",
      "context": "    501:       if (symbols.length === 0) return {};\n    502:       \n>>> 503:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n    504:       const result = await query(`\n    505:         SELECT "
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 504,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          sf.symbol,\n          sf.beta,\n          sf.debt_to_equity,\n          sf.current_ratio,\n          sf.interest_coverage,\n          sf.roe,\n          sf.operating_margin,\n          sf.net_margin,\n          sf.revenue_growth,\n          sf.earnings_growth,\n          sf.market_cap,\n          sse.sector\n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        WHERE sf.symbol IN (${placeholders})\n      `",
      "context": "    502:       \n    503:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n>>> 504:       const result = await query(`\n    505:         SELECT \n    506:           sf.symbol,"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 503,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${i + 1}`",
      "context": "    501:       if (symbols.length === 0) return {};\n    502:       \n>>> 503:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n    504:       const result = await query(`\n    505:         SELECT "
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 541,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          symbol,\n          rsi,\n          atr,\n          price_momentum_3m,\n          price_momentum_12m,\n          close as current_price\n        FROM technical_data_daily\n        WHERE symbol IN (${placeholders})\n        AND date = (\n          SELECT MAX(date) \n          FROM technical_data_daily \n          WHERE symbol = technical_data_daily.symbol\n        )\n      `",
      "context": "    539:       \n    540:       const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n>>> 541:       const result = await query(`\n    542:         SELECT \n    543:           symbol,"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 633,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🎯 Calculating order risk for ${side} ${quantity} ${symbol} at $${price}`",
      "context": "    631:       }\n    632: \n>>> 633:       console.log(`🎯 Calculating order risk for ${side} ${quantity} ${symbol} at $${price}`);\n    634: \n    635:       // Get current market data and portfolio context"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 681,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Order risk calculated: Score=${overallRisk}, Approved=${approval.approved}`",
      "context": "    679:       };\n    680: \n>>> 681:       console.log(`✅ Order risk calculated: Score=${overallRisk}, Approved=${approval.approved}`);\n    682:       return result;\n    683: "
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 900,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to get market data for ${symbol}:`",
      "context": "    898:       };\n    899:     } catch (error) {\n>>> 900:       console.error(`Failed to get market data for ${symbol}:`, error.message);\n    901:       return null;\n    902:     }"
    },
    {
      "file": "webapp/lambda/utils/riskCalculator.js",
      "line": 918,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to get portfolio context for user ${userId}:`",
      "context": "    916:       };\n    917:     } catch (error) {\n>>> 918:       console.error(`Failed to get portfolio context for user ${userId}:`, error.message);\n    919:       return {\n    920:         totalValue: 0,"
    },
    {
      "file": "webapp/lambda/utils/riskEngine.js",
      "line": 91,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${lookbackDays}D`",
      "context": "    89:       const holdings = await this.getPortfolioHoldings(portfolioId);\n    90:       const symbols = holdings.map(h => h.symbol);\n>>> 91:       const priceData = await this.getHistoricalPrices(symbols, `${lookbackDays}D`);\n    92:       \n    93:       const portfolioReturns = this.calculatePortfolioReturns(holdings, priceData);"
    },
    {
      "file": "webapp/lambda/utils/riskEngine.js",
      "line": 285,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking portfolios for user ${userId}:`",
      "context": "    283:         await this.checkUserPortfolios(userId, config);\n    284:       } catch (error) {\n>>> 285:         console.error(`Error checking portfolios for user ${userId}:`, error);\n    286:       }\n    287:     }"
    },
    {
      "file": "webapp/lambda/utils/riskEngine.js",
      "line": 306,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking portfolio ${portfolioId}:`",
      "context": "    304:         }\n    305:       } catch (error) {\n>>> 306:         console.error(`Error checking portfolio ${portfolioId}:`, error);\n    307:       }\n    308:     }"
    },
    {
      "file": "webapp/lambda/utils/riskManager.js",
      "line": 38,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    36: \n    37:       logger.info('🎯 Calculating position size', {\n>>> 38:         userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    39:         symbol: symbol,\n    40:         portfolioValue: portfolioValue,"
    },
    {
      "file": "webapp/lambda/utils/riskManager.js",
      "line": 150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Position sizing failed: ${error.message}`",
      "context": "    148:       });\n    149:       \n>>> 150:       throw new Error(`Position sizing failed: ${error.message}`);\n    151:     }\n    152:   }"
    },
    {
      "file": "webapp/lambda/utils/riskManager.js",
      "line": 38,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    36: \n    37:       logger.info('🎯 Calculating position size', {\n>>> 38:         userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    39:         symbol: symbol,\n    40:         portfolioValue: portfolioValue,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 118,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`exists_${tableName}`",
      "context": "    116:     } = options;\n    117: \n>>> 118:     const cacheKey = `exists_${tableName}`;\n    119:     \n    120:     // Check cache first"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Required table '${tableName}' does not exist`",
      "context": "    142: \n    143:       if (required && !exists && throwOnMissing) {\n>>> 144:         throw new Error(`Required table '${tableName}' does not exist`);\n    145:       }\n    146: "
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 149,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error checking table existence for '${tableName}':`",
      "context": "    147:       return exists;\n    148:     } catch (error) {\n>>> 149:       console.error(`Error checking table existence for '${tableName}':`, error.message);\n    150:       \n    151:       if (throwOnMissing) {"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 177,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`schema_${tableName}`",
      "context": "    175:   async getTableSchema(tableName, options = {}) {\n    176:     const { useCache = true } = options;\n>>> 177:     const cacheKey = `schema_${tableName}`;\n    178:     \n    179:     // Check cache first"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error getting schema for table '${tableName}':`",
      "context": "    218:       return schema;\n    219:     } catch (error) {\n>>> 220:       console.error(`Error getting schema for table '${tableName}':`, error.message);\n    221:       return {\n    222:         exists: false,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 240,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No expected schema defined for table '${tableName}'`",
      "context": "    238:       return {\n    239:         valid: true,\n>>> 240:         message: `No expected schema defined for table '${tableName}'`,\n    241:         missing: [],\n    242:         extra: []"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' does not exist`",
      "context": "    249:       return {\n    250:         valid: false,\n>>> 251:         message: `Table '${tableName}' does not exist`,\n    252:         expected: expectedSchema,\n    253:         missing: expectedSchema.expectedColumns,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 275,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' schema is valid`",
      "context": "    273:       valid,\n    274:       message: valid \n>>> 275:         ? `Table '${tableName}' schema is valid`\n    276:         : `Table '${tableName}' schema validation failed`,\n    277:       expected: expectedSchema,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 276,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' schema validation failed`",
      "context": "    274:       message: valid \n    275:         ? `Table '${tableName}' schema is valid`\n>>> 276:         : `Table '${tableName}' schema validation failed`,\n    277:       expected: expectedSchema,\n    278:       actual: actualSchema,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 306,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' (${expectedTable.description}) does not exist`",
      "context": "    304:           const expectedTable = this.expectedTables[tableName];\n    305:           const fallbackMessage = expectedTable \n>>> 306:             ? `Table '${tableName}' (${expectedTable.description}) does not exist`\n    307:             : `Table '${tableName}' does not exist`;\n    308:             "
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' does not exist`",
      "context": "    249:       return {\n    250:         valid: false,\n>>> 251:         message: `Table '${tableName}' does not exist`,\n    252:         expected: expectedSchema,\n    253:         missing: expectedSchema.expectedColumns,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 312,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ ${fallbackMessage} - query may fail`",
      "context": "    310:             throw new Error(fallbackMessage);\n    311:           } else {\n>>> 312:             console.warn(`⚠️ ${fallbackMessage} - query may fail`);\n    313:           }\n    314:         }"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 251,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' does not exist`",
      "context": "    249:       return {\n    250:         valid: false,\n>>> 251:         message: `Table '${tableName}' does not exist`,\n    252:         expected: expectedSchema,\n    253:         missing: expectedSchema.expectedColumns,"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 407,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Create table '${tableName}' with columns: ${tableInfo.expectedColumns.join(', ')}`",
      "context": "    405:             severity: tableInfo.required ? 'high' : 'medium',\n    406:             message: `Table '${tableName}' does not exist`,\n>>> 407:             recommendation: `Create table '${tableName}' with columns: ${tableInfo.expectedColumns.join(', ')}`\n    408:           });\n    409:         } else if (validation.missing.length > 0) {"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 414,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Table '${tableName}' is missing columns: ${validation.missing.join(', ')}`",
      "context": "    412:             type: 'missing_columns',\n    413:             severity: 'medium',\n>>> 414:             message: `Table '${tableName}' is missing columns: ${validation.missing.join(', ')}`,\n    415:             recommendation: `Add missing columns to table '${tableName}'`\n    416:           });"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 415,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Add missing columns to table '${tableName}'`",
      "context": "    413:             severity: 'medium',\n    414:             message: `Table '${tableName}' is missing columns: ${validation.missing.join(', ')}`,\n>>> 415:             recommendation: `Add missing columns to table '${tableName}'`\n    416:           });\n    417:         }"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 426,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${report.summary.missingRequired} required tables are missing. Run database initialization scripts.`",
      "context": "    424:         priority: 'high',\n    425:         action: 'create_required_tables',\n>>> 426:         message: `${report.summary.missingRequired} required tables are missing. Run database initialization scripts.`\n    427:       });\n    428:     }"
    },
    {
      "file": "webapp/lambda/utils/schemaValidator.js",
      "line": 434,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${report.summary.invalidSchemas} tables have schema issues. Review and update table structures.`",
      "context": "    432:         priority: 'medium',\n    433:         action: 'fix_schemas',\n>>> 434:         message: `${report.summary.invalidSchemas} tables have schema issues. Review and update table structures.`\n    435:       });\n    436:     }"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 36,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ All secrets loaded successfully in ${Date.now() - startTime}ms`",
      "context": "    34:       \n    35:       this.initialized = true;\n>>> 36:       console.log(`✅ All secrets loaded successfully in ${Date.now() - startTime}ms`);\n    37:       \n    38:     } catch (error) {"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Secret not found: ${secretName}`",
      "context": "    100:           }\n    101:         } catch (err) {\n>>> 102:           console.log(`🔍 Secret not found: ${secretName}`);\n    103:           continue;\n    104:         }"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 201,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Secret not found: ${secretId}`",
      "context": "    199:     } catch (error) {\n    200:       if (error.name === 'ResourceNotFoundException') {\n>>> 201:         console.log(`🔍 Secret not found: ${secretId}`);\n    202:       } else {\n    203:         console.error(`❌ Error getting secret ${secretId}:`, error.message);"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 203,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error getting secret ${secretId}:`",
      "context": "    201:         console.log(`🔍 Secret not found: ${secretId}`);\n    202:       } else {\n>>> 203:         console.error(`❌ Error getting secret ${secretId}:`, error.message);\n    204:       }\n    205:       return null;"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 239,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing required secrets: ${missing.join(', ')}`",
      "context": "    237:     if (missing.length > 0) {\n    238:       console.error('❌ CRITICAL: Missing required secrets:', missing);\n>>> 239:       throw new Error(`Missing required secrets: ${missing.join(', ')}`);\n    240:     }\n    241:     "
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 5,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass SecretsLoader {\n  constructor() {\n    this.client = new SecretsManagerClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    3: // This ensures all Lambda functions have access to required environment variables\n    4: \n>>> 5: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    6: \n    7: class SecretsLoader {"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 40,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n      \n      // Security: Require proper secrets for production deployment\n      this.setRequiredEnvironmentVariables();\n    }\n  }\n\n  async loadCoreSecrets() {\n    try {\n      // Try to get the main application secrets\n      const secretArn = process.env.DB_SECRET_ARN;\n      if (secretArn) {\n        console.log('",
      "context": "    38:     } catch (error) {\n    39:       console.error('❌ Failed to load secrets:', error.message);\n>>> 40:       console.warn('⚠️  Application will run with limited functionality');\n    41:       \n    42:       // Security: Require proper secrets for production deployment"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 102,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`);\n          continue;\n        }\n      }\n\n      if (encryptionSecret) {\n        process.env.API_KEY_ENCRYPTION_SECRET = encryptionSecret;\n        console.log('",
      "context": "    100:           }\n    101:         } catch (err) {\n>>> 102:           console.log(`🔍 Secret not found: ${secretName}`);\n    103:           continue;\n    104:         }"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 154,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'t log secret location details\n            }\n          }\n        } catch (err) {\n          continue;\n        }\n      }\n\n      if (jwtSecret) {\n        process.env.JWT_SECRET = jwtSecret;\n        console.log('",
      "context": "    152:             if (jwtSecret) {\n    153:               console.log(`✅ Found JWT secret from AWS Secrets Manager`);\n>>> 154:               break; // Security: Don't log secret location details\n    155:             }\n    156:           }"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 214,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n    \n    if (!process.env.API_KEY_ENCRYPTION_SECRET) {\n      throw new Error('",
      "context": "    212:   \n    213:   async validateRequiredSecrets() {\n>>> 214:     console.log('🔐 Validating required production secrets...');\n    215:     \n    216:     if (!process.env.API_KEY_ENCRYPTION_SECRET) {"
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 242,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n  }\n\n  // Helper method to check if secrets are loaded\n  isInitialized() {\n    return this.initialized;\n  }\n\n  // Helper method to check if using temporary secrets\n  isUsingTempSecrets() {\n    return process.env.TEMP_ENCRYPTION_KEY === '",
      "context": "    240:     }\n    241:     \n>>> 242:     console.log('✅ All required environment variables are present');\n    243:   }\n    244: "
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 252,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "' || process.env.TEMP_JWT_SECRET === '",
      "context": "    250:   // Helper method to check if using temporary secrets\n    251:   isUsingTempSecrets() {\n>>> 252:     return process.env.TEMP_ENCRYPTION_KEY === 'true' || process.env.TEMP_JWT_SECRET === 'true';\n    253:   }\n    254: "
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 252,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\n  }\n\n  // Get initialization status for debugging\n  getStatus() {\n    return {\n      initialized: this.initialized,\n      hasApiKeyEncryption: !!process.env.API_KEY_ENCRYPTION_SECRET,\n      hasJwtSecret: !!process.env.JWT_SECRET,\n      usingTempEncryption: process.env.TEMP_ENCRYPTION_KEY === '",
      "context": "    250:   // Helper method to check if using temporary secrets\n    251:   isUsingTempSecrets() {\n>>> 252:     return process.env.TEMP_ENCRYPTION_KEY === 'true' || process.env.TEMP_JWT_SECRET === 'true';\n    253:   }\n    254: "
    },
    {
      "file": "webapp/lambda/utils/secretsLoader.js",
      "line": 261,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n      usingTempJwt: process.env.TEMP_JWT_SECRET === '",
      "context": "    259:       hasApiKeyEncryption: !!process.env.API_KEY_ENCRYPTION_SECRET,\n    260:       hasJwtSecret: !!process.env.JWT_SECRET,\n>>> 261:       usingTempEncryption: process.env.TEMP_ENCRYPTION_KEY === 'true',\n    262:       usingTempJwt: process.env.TEMP_JWT_SECRET === 'true',\n    263:       cachedSecrets: this.secretsCache.size"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 20,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Starting AWS Secrets Manager diagnostic`",
      "context": "    18:     async diagnoseSecret(secretArn) {\n    19:         const diagnosisId = Math.random().toString(36).substr(2, 9);\n>>> 20:         console.log(`🔍 [${diagnosisId}] Starting AWS Secrets Manager diagnostic`);\n    21:         console.log(`🔍 [${diagnosisId}] Secret ARN: ${secretArn}`);\n    22:         console.log(`🔍 [${diagnosisId}] Region: ${this.client.config.region}`);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 21,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Secret ARN: ${secretArn}`",
      "context": "    19:         const diagnosisId = Math.random().toString(36).substr(2, 9);\n    20:         console.log(`🔍 [${diagnosisId}] Starting AWS Secrets Manager diagnostic`);\n>>> 21:         console.log(`🔍 [${diagnosisId}] Secret ARN: ${secretArn}`);\n    22:         console.log(`🔍 [${diagnosisId}] Region: ${this.client.config.region}`);\n    23: "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 22,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Region: ${this.client.config.region}`",
      "context": "    20:         console.log(`🔍 [${diagnosisId}] Starting AWS Secrets Manager diagnostic`);\n    21:         console.log(`🔍 [${diagnosisId}] Secret ARN: ${secretArn}`);\n>>> 22:         console.log(`🔍 [${diagnosisId}] Region: ${this.client.config.region}`);\n    23: \n    24:         try {"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 26,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Calling AWS Secrets Manager...`",
      "context": "    24:         try {\n    25:             // Step 1: Get the raw secret response\n>>> 26:             console.log(`🔍 [${diagnosisId}] Calling AWS Secrets Manager...`);\n    27:             const command = new GetSecretValueCommand({ SecretId: secretArn });\n    28:             const response = await this.client.send(command);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 30,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${diagnosisId}] Raw response received`",
      "context": "    28:             const response = await this.client.send(command);\n    29:             \n>>> 30:             console.log(`✅ [${diagnosisId}] Raw response received`);\n    31:             console.log(`🔍 [${diagnosisId}] Response keys:`, Object.keys(response || {}));\n    32:             "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 31,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Response keys:`",
      "context": "    29:             \n    30:             console.log(`✅ [${diagnosisId}] Raw response received`);\n>>> 31:             console.log(`🔍 [${diagnosisId}] Response keys:`, Object.keys(response || {}));\n    32:             \n    33:             // Step 2: Analyze the SecretString property"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 35,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] SecretString type:`",
      "context": "    33:             // Step 2: Analyze the SecretString property\n    34:             const secretString = response.SecretString;\n>>> 35:             console.log(`🔍 [${diagnosisId}] SecretString type:`, typeof secretString);\n    36:             console.log(`🔍 [${diagnosisId}] SecretString length:`, secretString?.length || 0);\n    37:             console.log(`🔍 [${diagnosisId}] SecretString first 200 chars: [REDACTED]`);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 36,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] SecretString length:`",
      "context": "    34:             const secretString = response.SecretString;\n    35:             console.log(`🔍 [${diagnosisId}] SecretString type:`, typeof secretString);\n>>> 36:             console.log(`🔍 [${diagnosisId}] SecretString length:`, secretString?.length || 0);\n    37:             console.log(`🔍 [${diagnosisId}] SecretString first 200 chars: [REDACTED]`);\n    38:             "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 37,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] SecretString first 200 chars: [REDACTED]`",
      "context": "    35:             console.log(`🔍 [${diagnosisId}] SecretString type:`, typeof secretString);\n    36:             console.log(`🔍 [${diagnosisId}] SecretString length:`, secretString?.length || 0);\n>>> 37:             console.log(`🔍 [${diagnosisId}] SecretString first 200 chars: [REDACTED]`);\n    38:             \n    39:             // Step 3: Check if it's actually an object that needs stringifying"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 41,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ [${diagnosisId}] SecretString is an object, not a string!`",
      "context": "    39:             // Step 3: Check if it's actually an object that needs stringifying\n    40:             if (typeof secretString === 'object') {\n>>> 41:                 console.log(`⚠️ [${diagnosisId}] SecretString is an object, not a string!`);\n    42:                 console.log(`🔍 [${diagnosisId}] Object keys:`, Object.keys(secretString));\n    43:                 console.log(`🔍 [${diagnosisId}] Object values: [REDACTED]`);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Object keys:`",
      "context": "    40:             if (typeof secretString === 'object') {\n    41:                 console.log(`⚠️ [${diagnosisId}] SecretString is an object, not a string!`);\n>>> 42:                 console.log(`🔍 [${diagnosisId}] Object keys:`, Object.keys(secretString));\n    43:                 console.log(`🔍 [${diagnosisId}] Object values: [REDACTED]`);\n    44:                 "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 43,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Object values: [REDACTED]`",
      "context": "    41:                 console.log(`⚠️ [${diagnosisId}] SecretString is an object, not a string!`);\n    42:                 console.log(`🔍 [${diagnosisId}] Object keys:`, Object.keys(secretString));\n>>> 43:                 console.log(`🔍 [${diagnosisId}] Object values: [REDACTED]`);\n    44:                 \n    45:                 // Try to use the object directly"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 56,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Attempting JSON.parse on string...`",
      "context": "    54:             // Step 4: Try to parse as JSON\n    55:             if (typeof secretString === 'string') {\n>>> 56:                 console.log(`🔍 [${diagnosisId}] Attempting JSON.parse on string...`);\n    57:                 \n    58:                 try {"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 60,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${diagnosisId}] JSON parsing successful`",
      "context": "    58:                 try {\n    59:                     const parsed = JSON.parse(secretString);\n>>> 60:                     console.log(`✅ [${diagnosisId}] JSON parsing successful`);\n    61:                     console.log(`🔍 [${diagnosisId}] Parsed keys:`, Object.keys(parsed));\n    62:                     "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 61,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Parsed keys:`",
      "context": "    59:                     const parsed = JSON.parse(secretString);\n    60:                     console.log(`✅ [${diagnosisId}] JSON parsing successful`);\n>>> 61:                     console.log(`🔍 [${diagnosisId}] Parsed keys:`, Object.keys(parsed));\n    62:                     \n    63:                     return {"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 70,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosisId}] JSON parsing failed:`",
      "context": "    68:                     };\n    69:                 } catch (parseError) {\n>>> 70:                     console.error(`❌ [${diagnosisId}] JSON parsing failed:`, parseError.message);\n    71:                     \n    72:                     // Step 5: Try to fix common JSON issues"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 73,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔧 [${diagnosisId}] Attempting to fix JSON issues...`",
      "context": "    71:                     \n    72:                     // Step 5: Try to fix common JSON issues\n>>> 73:                     console.log(`🔧 [${diagnosisId}] Attempting to fix JSON issues...`);\n    74:                     \n    75:                     // Remove potential BOM and invisible characters"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 77,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Cleaned string length:`",
      "context": "    75:                     // Remove potential BOM and invisible characters\n    76:                     const cleanString = secretString.replace(/^\\uFEFF/, '').trim();\n>>> 77:                     console.log(`🔍 [${diagnosisId}] Cleaned string length:`, cleanString.length);\n    78:                     console.log(`🔍 [${diagnosisId}] Cleaned string first 200 chars: [REDACTED]`);\n    79:                     "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Cleaned string first 200 chars: [REDACTED]`",
      "context": "    76:                     const cleanString = secretString.replace(/^\\uFEFF/, '').trim();\n    77:                     console.log(`🔍 [${diagnosisId}] Cleaned string length:`, cleanString.length);\n>>> 78:                     console.log(`🔍 [${diagnosisId}] Cleaned string first 200 chars: [REDACTED]`);\n    79:                     \n    80:                     try {"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 82,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ [${diagnosisId}] JSON parsing successful after cleaning`",
      "context": "    80:                     try {\n    81:                         const parsed = JSON.parse(cleanString);\n>>> 82:                         console.log(`✅ [${diagnosisId}] JSON parsing successful after cleaning`);\n    83:                         return {\n    84:                             success: true,"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 90,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosisId}] JSON parsing still failed after cleaning:`",
      "context": "    88:                         };\n    89:                     } catch (cleanParseError) {\n>>> 90:                         console.error(`❌ [${diagnosisId}] JSON parsing still failed after cleaning:`, cleanParseError.message);\n    91:                         \n    92:                         // Step 6: Character-by-character analysis"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 93,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Character analysis: [REDACTED - Logging characters would expose sensitive data]`",
      "context": "    91:                         \n    92:                         // Step 6: Character-by-character analysis\n>>> 93:                         console.log(`🔍 [${diagnosisId}] Character analysis: [REDACTED - Logging characters would expose sensitive data]`);\n    94:                         // Character-by-character analysis removed for security\n    95:                         "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 96,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unable to parse secret after all attempts: ${cleanParseError.message}`",
      "context": "    94:                         // Character-by-character analysis removed for security\n    95:                         \n>>> 96:                         throw new Error(`Unable to parse secret after all attempts: ${cleanParseError.message}`);\n    97:                     }\n    98:                 }"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 103,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Secret is binary, attempting to decode...`",
      "context": "    101:             // Step 7: Handle binary secrets\n    102:             if (response.SecretBinary) {\n>>> 103:                 console.log(`🔍 [${diagnosisId}] Secret is binary, attempting to decode...`);\n    104:                 const binaryString = Buffer.from(response.SecretBinary).toString('utf8');\n    105:                 console.log(`🔍 [${diagnosisId}] Binary decoded length:`, binaryString.length);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 105,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Binary decoded length:`",
      "context": "    103:                 console.log(`🔍 [${diagnosisId}] Secret is binary, attempting to decode...`);\n    104:                 const binaryString = Buffer.from(response.SecretBinary).toString('utf8');\n>>> 105:                 console.log(`🔍 [${diagnosisId}] Binary decoded length:`, binaryString.length);\n    106:                 console.log(`🔍 [${diagnosisId}] Binary decoded first 200 chars:`, binaryString.substring(0, 200));\n    107:                 "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 106,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 [${diagnosisId}] Binary decoded first 200 chars:`",
      "context": "    104:                 const binaryString = Buffer.from(response.SecretBinary).toString('utf8');\n    105:                 console.log(`🔍 [${diagnosisId}] Binary decoded length:`, binaryString.length);\n>>> 106:                 console.log(`🔍 [${diagnosisId}] Binary decoded first 200 chars:`, binaryString.substring(0, 200));\n    107:                 \n    108:                 try {"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 117,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosisId}] Binary JSON parsing failed:`",
      "context": "    115:                     };\n    116:                 } catch (binaryParseError) {\n>>> 117:                     console.error(`❌ [${diagnosisId}] Binary JSON parsing failed:`, binaryParseError.message);\n    118:                     throw binaryParseError;\n    119:                 }"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ [${diagnosisId}] Secrets Manager diagnostic failed:`",
      "context": "    123:             \n    124:         } catch (error) {\n>>> 125:             console.error(`❌ [${diagnosisId}] Secrets Manager diagnostic failed:`, {\n    126:                 message: error.message,\n    127:                 code: error.code,"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🧪 Testing database configuration from secret: ${secretArn}`",
      "context": "    142:      */\n    143:     async testDatabaseConfig(secretArn) {\n>>> 144:         console.log(`🧪 Testing database configuration from secret: ${secretArn}`);\n    145:         \n    146:         const diagnosis = await this.diagnoseSecret(secretArn);"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 149,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Secret diagnosis failed: ${diagnosis.error}`",
      "context": "    147:         \n    148:         if (!diagnosis.success) {\n>>> 149:             throw new Error(`Secret diagnosis failed: ${diagnosis.error}`);\n    150:         }\n    151:         "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 153,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Secret retrieved using method: ${diagnosis.method}`",
      "context": "    151:         \n    152:         const config = diagnosis.config;\n>>> 153:         console.log(`✅ Secret retrieved using method: ${diagnosis.method}`);\n    154:         \n    155:         // Validate required database fields"
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing required database fields: ${missingFields.join(', ')}`",
      "context": "    158:         \n    159:         if (missingFields.length > 0) {\n>>> 160:             throw new Error(`Missing required database fields: ${missingFields.join(', ')}`);\n    161:         }\n    162:         "
    },
    {
      "file": "webapp/lambda/utils/secretsManagerDiagnostic.js",
      "line": 6,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass SecretsManagerDiagnostic {\n    constructor() {\n        this.client = new SecretsManagerClient({\n            region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    4:  */\n    5: \n>>> 6: const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n    7: \n    8: class SecretsManagerDiagnostic {"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 68,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unauthorized table access: ${tableName}`",
      "context": "    66:     const cleanTable = tableName.toLowerCase().trim();\n    67:     if (!this.allowedTables.has(cleanTable)) {\n>>> 68:       throw new Error(`Unauthorized table access: ${tableName}`);\n    69:     }\n    70: "
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 87,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unauthorized column access: ${tableName}.${columnName}`",
      "context": "    85:     const allowedCols = this.allowedColumns[cleanTable];\n    86:     if (!allowedCols || !allowedCols.has(cleanColumn)) {\n>>> 87:       throw new Error(`Unauthorized column access: ${tableName}.${columnName}`);\n    88:     }\n    89: "
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 103,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unauthorized operator: ${operator}`",
      "context": "    101:     const cleanOp = operator.toUpperCase().trim();\n    102:     if (!this.allowedOperators.has(cleanOp)) {\n>>> 103:       throw new Error(`Unauthorized operator: ${operator}`);\n    104:     }\n    105: "
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`SELECT ${validColumns.join(', ')} FROM ${validTable}`",
      "context": "    130: \n    131:     // Build query parts\n>>> 132:     let query = `SELECT ${validColumns.join(', ')} FROM ${validTable}`;\n    133:     const params = [];\n    134:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 150,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validOperator} requires an array value`",
      "context": "    148:           if (validOperator === 'IN' || validOperator === 'NOT IN') {\n    149:             if (!Array.isArray(value)) {\n>>> 150:               throw new Error(`${validOperator} requires an array value`);\n    151:             }\n    152:             const placeholders = value.map(() => `$${paramIndex++}`).join(', ');"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${paramIndex++}`",
      "context": "    150:               throw new Error(`${validOperator} requires an array value`);\n    151:             }\n>>> 152:             const placeholders = value.map(() => `$${paramIndex++}`).join(', ');\n    153:             whereConditions.push(`${validColumn} ${validOperator} (${placeholders})`);\n    154:             params.push(...value);"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 153,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} ${validOperator} (${placeholders})`",
      "context": "    151:             }\n    152:             const placeholders = value.map(() => `$${paramIndex++}`).join(', ');\n>>> 153:             whereConditions.push(`${validColumn} ${validOperator} (${placeholders})`);\n    154:             params.push(...value);\n    155:           } else if (validOperator === 'IS NULL' || validOperator === 'IS NOT NULL') {"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 156,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} ${validOperator}`",
      "context": "    154:             params.push(...value);\n    155:           } else if (validOperator === 'IS NULL' || validOperator === 'IS NOT NULL') {\n>>> 156:             whereConditions.push(`${validColumn} ${validOperator}`);\n    157:           } else {\n    158:             whereConditions.push(`${validColumn} ${validOperator} $${paramIndex++}`);"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 158,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} ${validOperator} $${paramIndex++}`",
      "context": "    156:             whereConditions.push(`${validColumn} ${validOperator}`);\n    157:           } else {\n>>> 158:             whereConditions.push(`${validColumn} ${validOperator} $${paramIndex++}`);\n    159:             params.push(value);\n    160:           }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} = $${paramIndex++}`",
      "context": "    161:         } else {\n    162:           // Simple equality\n>>> 163:           whereConditions.push(`${validColumn} = $${paramIndex++}`);\n    164:           params.push(condition);\n    165:         }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 168,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` WHERE ${whereConditions.join(' AND ')}`",
      "context": "    166:       }\n    167:       \n>>> 168:       query += ` WHERE ${whereConditions.join(' AND ')}`;\n    169:     }\n    170: "
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 180,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} ${validDirection}`",
      "context": "    178:             ? direction.toUpperCase() \n    179:             : 'ASC';\n>>> 180:           return `${validColumn} ${validDirection}`;\n    181:         });\n    182:         query += ` ORDER BY ${orderParts.join(', ')}`;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 182,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ORDER BY ${orderParts.join(', ')}`",
      "context": "    180:           return `${validColumn} ${validDirection}`;\n    181:         });\n>>> 182:         query += ` ORDER BY ${orderParts.join(', ')}`;\n    183:       } else {\n    184:         const { column, direction = 'ASC' } = orderBy;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 189,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ORDER BY ${validColumn} ${validDirection}`",
      "context": "    187:           ? direction.toUpperCase() \n    188:           : 'ASC';\n>>> 189:         query += ` ORDER BY ${validColumn} ${validDirection}`;\n    190:       }\n    191:     }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 198,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` LIMIT $${paramIndex++}`",
      "context": "    196:         throw new Error('Limit must be an integer between 1 and 1000');\n    197:       }\n>>> 198:       query += ` LIMIT $${paramIndex++}`;\n    199:       params.push(limit);\n    200:     }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 207,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` OFFSET $${paramIndex++}`",
      "context": "    205:         throw new Error('Offset must be a non-negative integer');\n    206:       }\n>>> 207:       query += ` OFFSET $${paramIndex++}`;\n    208:       params.push(offset);\n    209:     }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} = $${paramIndex++}`",
      "context": "    161:         } else {\n    162:           // Simple equality\n>>> 163:           whereConditions.push(`${validColumn} = $${paramIndex++}`);\n    164:           params.push(condition);\n    165:         }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} = $${paramIndex++}`",
      "context": "    161:         } else {\n    162:           // Simple equality\n>>> 163:           whereConditions.push(`${validColumn} = $${paramIndex++}`);\n    164:           params.push(condition);\n    165:         }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 250,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`UPDATE ${validTable} SET ${setClause.join(', ')} WHERE ${whereClause.join(' AND ')} RETURNING *`",
      "context": "    248:     }\n    249: \n>>> 250:     const query = `UPDATE ${validTable} SET ${setClause.join(', ')} WHERE ${whereClause.join(' AND ')} RETURNING *`;\n    251: \n    252:     return { query, params };"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$${paramIndex++}`",
      "context": "    150:               throw new Error(`${validOperator} requires an array value`);\n    151:             }\n>>> 152:             const placeholders = value.map(() => `$${paramIndex++}`).join(', ');\n    153:             whereConditions.push(`${validColumn} ${validOperator} (${placeholders})`);\n    154:             params.push(...value);"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 281,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`INSERT INTO ${validTable} (${columns.join(', ')}) VALUES (${values.join(', ')})`",
      "context": "    279:     }\n    280: \n>>> 281:     let query = `INSERT INTO ${validTable} (${columns.join(', ')}) VALUES (${values.join(', ')})`;\n    282: \n    283:     // Handle ON CONFLICT clause"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 287,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ON CONFLICT (${conflictColumns.join(', ')}) DO NOTHING`",
      "context": "    285:       if (onConflict.action === 'DO_NOTHING') {\n    286:         const conflictColumns = onConflict.columns.map(col => this.validateColumn(validTable, col));\n>>> 287:         query += ` ON CONFLICT (${conflictColumns.join(', ')}) DO NOTHING`;\n    288:       } else if (onConflict.action === 'DO_UPDATE') {\n    289:         const conflictColumns = onConflict.columns.map(col => this.validateColumn(validTable, col));"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 292,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validCol} = EXCLUDED.${validCol}`",
      "context": "    290:         const updateColumns = onConflict.update.map(col => {\n    291:           const validCol = this.validateColumn(validTable, col);\n>>> 292:           return `${validCol} = EXCLUDED.${validCol}`;\n    293:         });\n    294:         query += ` ON CONFLICT (${conflictColumns.join(', ')}) DO UPDATE SET ${updateColumns.join(', ')}`;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 294,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` ON CONFLICT (${conflictColumns.join(', ')}) DO UPDATE SET ${updateColumns.join(', ')}`",
      "context": "    292:           return `${validCol} = EXCLUDED.${validCol}`;\n    293:         });\n>>> 294:         query += ` ON CONFLICT (${conflictColumns.join(', ')}) DO UPDATE SET ${updateColumns.join(', ')}`;\n    295:       }\n    296:     }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 163,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${validColumn} = $${paramIndex++}`",
      "context": "    161:         } else {\n    162:           // Simple equality\n>>> 163:           whereConditions.push(`${validColumn} = $${paramIndex++}`);\n    164:           params.push(condition);\n    165:         }"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 327,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`DELETE FROM ${validTable} WHERE ${whereClause.join(' AND ')} RETURNING *`",
      "context": "    325:     }\n    326: \n>>> 327:     const query = `DELETE FROM ${validTable} WHERE ${whereClause.join(' AND ')} RETURNING *`;\n    328: \n    329:     return { query, params };"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 355,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Query executed successfully in ${duration}ms`",
      "context": "    353:       // Log successful execution\n    354:       const duration = Date.now() - startTime;\n>>> 355:       console.log(`✅ Query executed successfully in ${duration}ms`);\n    356:       \n    357:       return result;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 361,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Query failed after ${duration}ms:`",
      "context": "    359:       // Log failed execution\n    360:       const duration = Date.now() - startTime;\n>>> 361:       console.error(`❌ Query failed after ${duration}ms:`, error.message);\n    362:       \n    363:       // Don't expose internal database errors to client"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 132,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${validTable}",
      "context": "    130: \n    131:     // Build query parts\n>>> 132:     let query = `SELECT ${validColumns.join(', ')} FROM ${validTable}`;\n    133:     const params = [];\n    134:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 250,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "UPDATE ${validTable}",
      "context": "    248:     }\n    249: \n>>> 250:     const query = `UPDATE ${validTable} SET ${setClause.join(', ')} WHERE ${whereClause.join(' AND ')} RETURNING *`;\n    251: \n    252:     return { query, params };"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 281,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "INTO ${validTable}",
      "context": "    279:     }\n    280: \n>>> 281:     let query = `INSERT INTO ${validTable} (${columns.join(', ')}) VALUES (${values.join(', ')})`;\n    282: \n    283:     // Handle ON CONFLICT clause"
    },
    {
      "file": "webapp/lambda/utils/secureQueryBuilder.js",
      "line": 132,
      "pattern": "Dynamic table/column names",
      "risk": "CRITICAL",
      "description": "Dynamic table or column names in SQL",
      "code": "FROM ${validTable}",
      "context": "    130: \n    131:     // Build query parts\n>>> 132:     let query = `SELECT ${validColumns.join(', ')} FROM ${validTable}`;\n    133:     const params = [];\n    134:     let paramIndex = 1;"
    },
    {
      "file": "webapp/lambda/utils/sentimentEngine.js",
      "line": 185,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Bearer ${process.env.HUGGINGFACE_API_KEY}`",
      "context": "    183:           {\n    184:             headers: {\n>>> 185:               'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n    186:               'Content-Type': 'application/json'\n    187:             },"
    },
    {
      "file": "webapp/lambda/utils/sentimentEngine.js",
      "line": 283,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error analyzing sentiment for text ${index}:`",
      "context": "    281:     \n    282:     errors.forEach(({ error, index }) => {\n>>> 283:       console.error(`Error analyzing sentiment for text ${index}:`, error);\n    284:       sentimentResults[index] = {\n    285:         score: 0,"
    },
    {
      "file": "webapp/lambda/utils/sentimentEngine.js",
      "line": 168,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', error);\n      return null;\n    }\n  }\n\n  async analyzeWithHuggingFace(text) {\n    try {\n      if (!process.env.HUGGINGFACE_API_KEY) {\n        return null;\n      }\n      \n      const response = await timeoutHelper.withTimeout(\n        axios.post(\n          '",
      "context": "    166:       return this.analyzeWithLexicon(text);\n    167:     } catch (error) {\n>>> 168:       console.error('TextBlob sentiment analysis failed:', error);\n    169:       return null;\n    170:     }"
    },
    {
      "file": "webapp/lambda/utils/sentimentEngine.js",
      "line": 185,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "`Bearer ${process.env.HUGGINGFACE_API_KEY}`",
      "context": "    183:           {\n    184:             headers: {\n>>> 185:               'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n    186:               'Content-Type': 'application/json'\n    187:             },"
    },
    {
      "file": "webapp/lambda/utils/signalEngine.js",
      "line": 98,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No data found for symbol: ${symbol}`",
      "context": "    96:       \n    97:       if (!stockData) {\n>>> 98:         throw new Error(`No data found for symbol: ${symbol}`);\n    99:       }\n    100: "
    },
    {
      "file": "webapp/lambda/utils/signalEngine.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error generating signals for ${symbol}:`",
      "context": "    125:       };\n    126:     } catch (error) {\n>>> 127:       console.error(`Error generating signals for ${symbol}:`, error);\n    128:       throw error;\n    129:     }"
    },
    {
      "file": "webapp/lambda/utils/signalEngine.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error generating signals for ${symbol}:`",
      "context": "    125:       };\n    126:     } catch (error) {\n>>> 127:       console.error(`Error generating signals for ${symbol}:`, error);\n    128:       throw error;\n    129:     }"
    },
    {
      "file": "webapp/lambda/utils/signalEngine.js",
      "line": 416,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE market_cap > 1000000000\n        ORDER BY market_cap DESC\n        LIMIT 50\n      `);\n\n      const symbols = result.rows.map(row => row.symbol);\n      const portfolioSignals = await this.generateSignalsForPortfolio(symbols);\n      \n      // Calculate market sentiment\n      const marketSentiment = this.calculateMarketSentiment(portfolioSignals);\n      \n      return {\n        marketSentiment,\n        topSignals: portfolioSignals\n          .filter(s => Math.abs(s.aggregateSignal) > 0.3)\n          .sort((a, b) => Math.abs(b.aggregateSignal) - Math.abs(a.aggregateSignal))\n          .slice(0, 20),\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error getting market signals:', error);\n      throw error;\n    }\n  }\n\n  // Calculate overall market sentiment\n  calculateMarketSentiment(portfolioSignals) {\n    const validSignals = portfolioSignals.filter(s => !s.error);\n    \n    if (validSignals.length === 0) {\n      return {\n        overall: 'Neutral',\n        score: 0,\n        bullishCount: 0,\n        bearishCount: 0,\n        neutralCount: 0\n      };\n    }\n\n    const totalScore = validSignals.reduce((sum, s) => sum +",
      "context": "    414:         FROM stock_fundamentals sf\n    415:         JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n>>> 416:         WHERE market_cap > 1000000000\n    417:         ORDER BY market_cap DESC\n    418:         LIMIT 50"
    },
    {
      "file": "webapp/lambda/utils/signalProcessor.js",
      "line": 84,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Signal processing failed: ${error.message}`",
      "context": "    82:       });\n    83:       \n>>> 84:       throw new Error(`Signal processing failed: ${error.message}`);\n    85:     }\n    86:   }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 35,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔐 Storing API key for user: ${userId}, provider: ${provider}`",
      "context": "    33:   async storeApiKey(userId, provider, keyId, secretKey) {\n    34:     try {\n>>> 35:       console.log(`🔐 Storing API key for user: ${userId}, provider: ${provider}`);\n    36:       \n    37:       // Validate inputs"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 45,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid provider: ${provider}. Must be one of: ${validProviders.join(', ')}`",
      "context": "    43:       const validProviders = ['alpaca', 'polygon', 'finnhub', 'iex'];\n    44:       if (!validProviders.includes(provider.toLowerCase())) {\n>>> 45:         throw new Error(`Invalid provider: ${provider}. Must be one of: ${validProviders.join(', ')}`);\n    46:       }\n    47: "
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 49,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`",
      "context": "    47: \n    48:       // Create parameter name\n>>> 49:       const parameterName = `${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`;\n    50:       \n    51:       // Store as SecureString with KMS encryption"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 63,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`API keys for ${provider} - user ${userId}`",
      "context": "    61:         Type: 'SecureString',\n    62:         Overwrite: true,\n>>> 63:         Description: `API keys for ${provider} - user ${userId}`,\n    64:         Tags: [\n    65:           { Key: 'Environment', Value: process.env.NODE_ENV || 'dev' },"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 74,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ API key stored successfully for ${provider}`",
      "context": "    72: \n    73:       await this.ssm.send(command);\n>>> 74:       console.log(`✅ API key stored successfully for ${provider}`);\n    75:       return true;\n    76: "
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 78,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to store API key for ${provider}:`",
      "context": "    76: \n    77:     } catch (error) {\n>>> 78:       console.error(`❌ Failed to store API key for ${provider}:`, error.message);\n    79:       throw new Error(`Failed to store API key: ${error.message}`);\n    80:     }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 79,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to store API key: ${error.message}`",
      "context": "    77:     } catch (error) {\n    78:       console.error(`❌ Failed to store API key for ${provider}:`, error.message);\n>>> 79:       throw new Error(`Failed to store API key: ${error.message}`);\n    80:     }\n    81:   }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 91,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Retrieving API key for user: ${userId}, provider: ${provider}`",
      "context": "    89:   async getApiKey(userId, provider) {\n    90:     try {\n>>> 91:       console.log(`🔍 Retrieving API key for user: ${userId}, provider: ${provider}`);\n    92:       \n    93:       // Validate inputs"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 49,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`",
      "context": "    47: \n    48:       // Create parameter name\n>>> 49:       const parameterName = `${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`;\n    50:       \n    51:       // Store as SecureString with KMS encryption"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📭 No API key found for ${provider}`",
      "context": "    108:       \n    109:       if (!response.Parameter || !response.Parameter.Value) {\n>>> 110:         console.log(`📭 No API key found for ${provider}`);\n    111:         return null;\n    112:       }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 115,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ API key retrieved successfully for ${provider}`",
      "context": "    113: \n    114:       const apiKeyData = JSON.parse(response.Parameter.Value);\n>>> 115:       console.log(`✅ API key retrieved successfully for ${provider}`);\n    116:       \n    117:       return {"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 110,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📭 No API key found for ${provider}`",
      "context": "    108:       \n    109:       if (!response.Parameter || !response.Parameter.Value) {\n>>> 110:         console.log(`📭 No API key found for ${provider}`);\n    111:         return null;\n    112:       }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 131,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to retrieve API key for ${provider}:`",
      "context": "    129:       }\n    130:       \n>>> 131:       console.error(`❌ Failed to retrieve API key for ${provider}:`, error.message);\n    132:       throw new Error(`Failed to retrieve API key: ${error.message}`);\n    133:     }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 132,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to retrieve API key: ${error.message}`",
      "context": "    130:       \n    131:       console.error(`❌ Failed to retrieve API key for ${provider}:`, error.message);\n>>> 132:       throw new Error(`Failed to retrieve API key: ${error.message}`);\n    133:     }\n    134:   }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 144,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🗑️ Deleting API key for user: ${userId}, provider: ${provider}`",
      "context": "    142:   async deleteApiKey(userId, provider) {\n    143:     try {\n>>> 144:       console.log(`🗑️ Deleting API key for user: ${userId}, provider: ${provider}`);\n    145:       \n    146:       // Validate inputs"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 49,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`",
      "context": "    47: \n    48:       // Create parameter name\n>>> 49:       const parameterName = `${this.parameterPrefix}/${userId}/${provider.toLowerCase()}`;\n    50:       \n    51:       // Store as SecureString with KMS encryption"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ API key deleted successfully for ${provider}`",
      "context": "    158: \n    159:       await this.ssm.send(command);\n>>> 160:       console.log(`✅ API key deleted successfully for ${provider}`);\n    161:       return true;\n    162: "
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 165,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📭 API key not found for deletion: ${provider}`",
      "context": "    163:     } catch (error) {\n    164:       if (error.name === 'ParameterNotFound') {\n>>> 165:         console.log(`📭 API key not found for deletion: ${provider}`);\n    166:         return true; // Consider it success if already deleted\n    167:       }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 169,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Failed to delete API key for ${provider}:`",
      "context": "    167:       }\n    168:       \n>>> 169:       console.error(`❌ Failed to delete API key for ${provider}:`, error.message);\n    170:       throw new Error(`Failed to delete API key: ${error.message}`);\n    171:     }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 170,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to delete API key: ${error.message}`",
      "context": "    168:       \n    169:       console.error(`❌ Failed to delete API key for ${provider}:`, error.message);\n>>> 170:       throw new Error(`Failed to delete API key: ${error.message}`);\n    171:     }\n    172:   }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 181,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📋 Listing API keys for user: ${userId}`",
      "context": "    179:   async listApiKeys(userId) {\n    180:     try {\n>>> 181:       console.log(`📋 Listing API keys for user: ${userId}`);\n    182:       \n    183:       if (!userId) {"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 204,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`✅ Found ${availableProviders.length} API keys for user`",
      "context": "    202:       }\n    203: \n>>> 204:       console.log(`✅ Found ${availableProviders.length} API keys for user`);\n    205:       return availableProviders;\n    206: "
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 209,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Failed to list API keys: ${error.message}`",
      "context": "    207:     } catch (error) {\n    208:       console.error(`❌ Failed to list API keys:`, error.message);\n>>> 209:       throw new Error(`Failed to list API keys: ${error.message}`);\n    210:     }\n    211:   }"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 220,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${this.parameterPrefix}/health-check`",
      "context": "    218:     try {\n    219:       // Test basic SSM connectivity\n>>> 220:       const testParam = `${this.parameterPrefix}/health-check`;\n    221:       const testValue = `health-check-${Date.now()}`;\n    222:       "
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 221,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`health-check-${Date.now()}`",
      "context": "    219:       // Test basic SSM connectivity\n    220:       const testParam = `${this.parameterPrefix}/health-check`;\n>>> 221:       const testValue = `health-check-${Date.now()}`;\n    222:       \n    223:       // Try to write and read a test parameter"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 14,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\n\nclass SimpleApiKeyService {\n  constructor() {\n    this.ssm = new SSMClient({ \n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || '",
      "context": "    12:  */\n    13: \n>>> 14: const { SSMClient, GetParameterCommand, PutParameterCommand, DeleteParameterCommand } = require('@aws-sdk/client-ssm');\n    15: \n    16: class SimpleApiKeyService {"
    },
    {
      "file": "webapp/lambda/utils/simpleApiKeyService.js",
      "line": 65,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "', Value: process.env.NODE_ENV || '",
      "context": "    63:         Description: `API keys for ${provider} - user ${userId}`,\n    64:         Tags: [\n>>> 65:           { Key: 'Environment', Value: process.env.NODE_ENV || 'dev' },\n    66:           { Key: 'Service', Value: 'financial-platform' },\n    67:           { Key: 'DataType', Value: 'api-credentials' },"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 102,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database operation failed: ${operation}`",
      "context": "    100: \n    101:     if (error) {\n>>> 102:       this.error(`Database operation failed: ${operation}`, error, context);\n    103:     } else {\n    104:       this.info(`Database operation completed: ${operation}`, context);"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 104,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database operation completed: ${operation}`",
      "context": "    102:       this.error(`Database operation failed: ${operation}`, error, context);\n    103:     } else {\n>>> 104:       this.info(`Database operation completed: ${operation}`, context);\n    105:     }\n    106:   }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 125,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call failed: ${service}/${endpoint}`",
      "context": "    123: \n    124:     if (error || statusCode >= 400) {\n>>> 125:       this.error(`External API call failed: ${service}/${endpoint}`, error, context);\n    126:     } else {\n    127:       this.info(`External API call completed: ${service}/${endpoint}`, context);"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 127,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call completed: ${service}/${endpoint}`",
      "context": "    125:       this.error(`External API call failed: ${service}/${endpoint}`, error, context);\n    126:     } else {\n>>> 127:       this.info(`External API call completed: ${service}/${endpoint}`, context);\n    128:     }\n    129:   }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 143,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authentication event: ${event}`",
      "context": "    141: \n    142:     if (outcome === 'success') {\n>>> 143:       this.info(`Authentication event: ${event}`, context);\n    144:     } else {\n    145:       this.warn(`Authentication event failed: ${event}`, context);"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 145,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Authentication event failed: ${event}`",
      "context": "    143:       this.info(`Authentication event: ${event}`, context);\n    144:     } else {\n>>> 145:       this.warn(`Authentication event failed: ${event}`, context);\n    146:     }\n    147:   }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Slow operation detected: ${operation}`",
      "context": "    158: \n    159:     if (duration > 5000) {\n>>> 160:       this.warn(`Slow operation detected: ${operation}`, context);\n    161:     } else {\n    162:       this.info(`Performance tracking: ${operation}`, context);"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 162,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Performance tracking: ${operation}`",
      "context": "    160:       this.warn(`Slow operation detected: ${operation}`, context);\n    161:     } else {\n>>> 162:       this.info(`Performance tracking: ${operation}`, context);\n    163:     }\n    164:   }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 176,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`User action: ${action}`",
      "context": "    174:     };\n    175: \n>>> 176:     this.info(`User action: ${action}`, context);\n    177:   }\n    178: "
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`System event: ${event}`",
      "context": "    189:     switch (severity) {\n    190:       case 'critical':\n>>> 191:         this.fatal(`System event: ${event}`, null, context);\n    192:         break;\n    193:       case 'error':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`System event: ${event}`",
      "context": "    189:     switch (severity) {\n    190:       case 'critical':\n>>> 191:         this.fatal(`System event: ${event}`, null, context);\n    192:         break;\n    193:       case 'error':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`System event: ${event}`",
      "context": "    189:     switch (severity) {\n    190:       case 'critical':\n>>> 191:         this.fatal(`System event: ${event}`, null, context);\n    192:         break;\n    193:       case 'error':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 191,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`System event: ${event}`",
      "context": "    189:     switch (severity) {\n    190:       case 'critical':\n>>> 191:         this.fatal(`System event: ${event}`, null, context);\n    192:         break;\n    193:       case 'error':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 250,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker opened for ${service}`",
      "context": "    248:     switch (state) {\n    249:       case 'open':\n>>> 250:         this.error(`Circuit breaker opened for ${service}`, null, context);\n    251:         break;\n    252:       case 'half-open':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 253,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker half-open for ${service}`",
      "context": "    251:         break;\n    252:       case 'half-open':\n>>> 253:         this.warn(`Circuit breaker half-open for ${service}`, context);\n    254:         break;\n    255:       case 'closed':"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 256,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker closed for ${service}`",
      "context": "    254:         break;\n    255:       case 'closed':\n>>> 256:         this.info(`Circuit breaker closed for ${service}`, context);\n    257:         break;\n    258:       default:"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 259,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker state change: ${service}`",
      "context": "    257:         break;\n    258:       default:\n>>> 259:         this.info(`Circuit breaker state change: ${service}`, context);\n    260:     }\n    261:   }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 17,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "')[0];\n  }\n\n  createLogEntry(level, message, context = {}) {\n    const timestamp = new Date().toISOString();\n    const duration = Date.now() - this.startTime;\n    \n    return {\n      timestamp,\n      level: level.toUpperCase(),\n      message,\n      service: this.service,\n      component: this.component,\n      correlationId: this.correlationId,\n      duration_ms: duration,\n      context: {\n        ...context,\n        environment: process.env.NODE_ENV || '",
      "context": "    15: \n    16:   generateCorrelationId() {\n>>> 17:     return crypto.randomUUID().split('-')[0];\n    18:   }\n    19: "
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 34,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        aws_region: process.env.AWS_REGION || '",
      "context": "    32:       context: {\n    33:         ...context,\n>>> 34:         environment: process.env.NODE_ENV || 'unknown',\n    35:         aws_region: process.env.AWS_REGION || 'unknown',\n    36:         lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 35,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || '",
      "context": "    33:         ...context,\n    34:         environment: process.env.NODE_ENV || 'unknown',\n>>> 35:         aws_region: process.env.AWS_REGION || 'unknown',\n    36:         lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n    37:         lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown'"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 36,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "',\n        lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || '",
      "context": "    34:         environment: process.env.NODE_ENV || 'unknown',\n    35:         aws_region: process.env.AWS_REGION || 'unknown',\n>>> 36:         lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n    37:         lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown'\n    38:       }"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 37,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "'\n      }\n    };\n  }\n\n  debug(message, context = {}) {\n    if (process.env.NODE_ENV === '",
      "context": "    35:         aws_region: process.env.AWS_REGION || 'unknown',\n    36:         lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n>>> 37:         lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown'\n    38:       }\n    39:     };"
    },
    {
      "file": "webapp/lambda/utils/structuredLogger.js",
      "line": 319,
      "pattern": "User input directly in SQL",
      "risk": "HIGH",
      "description": "User input directly embedded in SQL strings",
      "code": "req.query,\n      user_agent: req.get('User-Agent'),\n      origin: req.get('Origin'),\n      content_type: req.get('Content-Type'),\n      content_length: req.get('Content-Length'),\n      source_ip: req.ip\n    }\n  });\n\n  // Attach logger to request object\n  req.logger = logger;\n\n  // Log response\n  const originalSend = res.send;\n  res.send = function(data) {\n    const duration = Date.now() - startTime;\n    \n    logger.info('HTTP request completed'",
      "context": "    317:       url: req.url,\n    318:       path: req.path,\n>>> 319:       query: req.query,\n    320:       user_agent: req.get('User-Agent'),\n    321:       origin: req.get('Origin'),"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 36,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service}-${operation}`",
      "context": "    34:     } = options;\n    35: \n>>> 36:     const serviceKey = `${service}-${operation}`;\n    37:     \n    38:     // Check circuit breaker"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 40,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Circuit breaker open for ${serviceKey}`",
      "context": "    38:     // Check circuit breaker\n    39:     if (useCircuitBreaker && this.isCircuitOpen(serviceKey)) {\n>>> 40:       throw new Error(`Circuit breaker open for ${serviceKey}`);\n    41:     }\n    42: "
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 50,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Timeout: ${service} ${operation} exceeded ${timeout}ms`",
      "context": "    48:           promise,\n    49:           new Promise((_, reject) => \n>>> 50:             setTimeout(() => reject(new Error(`Timeout: ${service} ${operation} exceeded ${timeout}ms`)), timeout)\n    51:           )\n    52:         ]);"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 70,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ ${service} ${operation} failed (attempt ${attempt + 1}/${retries + 1}), retrying in ${retryDelay}ms...`",
      "context": "    68:         // If this isn't the last attempt, wait before retrying\n    69:         if (attempt < retries) {\n>>> 70:           console.log(`⚠️ ${service} ${operation} failed (attempt ${attempt + 1}/${retries + 1}), retrying in ${retryDelay}ms...`);\n    71:           await this.delay(retryDelay * (attempt + 1)); // Exponential backoff\n    72:         }"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 91,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Timeout: ${service} ${operation} batch exceeded ${timeout}ms`",
      "context": "    89: \n    90:     const timeoutPromise = new Promise((_, reject) => \n>>> 91:       setTimeout(() => reject(new Error(`Timeout: ${service} ${operation} batch exceeded ${timeout}ms`)), timeout)\n    92:     );\n    93: "
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 158,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`HTTP ${response.status}: ${response.statusText}`",
      "context": "    156: \n    157:       if (validateResponse && !response.ok) {\n>>> 158:         throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    159:       }\n    160: "
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`HTTP request timeout: ${url} exceeded ${timeout}ms`",
      "context": "    164:       \n    165:       if (error.name === 'AbortError') {\n>>> 166:         throw new Error(`HTTP request timeout: ${url} exceeded ${timeout}ms`);\n    167:       }\n    168:       "
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🚨 Circuit breaker opened for ${serviceKey} (${breaker.failures} failures)`",
      "context": "    272:     if (breaker.failures >= breaker.threshold) {\n    273:       breaker.state = 'open';\n>>> 274:       console.warn(`🚨 Circuit breaker opened for ${serviceKey} (${breaker.failures} failures)`);\n    275:     }\n    276:   }"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 311,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔄 Circuit breaker half-open for ${serviceKey}`",
      "context": "    309:         breaker.state = 'half-open';\n    310:         breaker.halfOpenCalls = 0;\n>>> 311:         console.log(`🔄 Circuit breaker half-open for ${serviceKey}`);\n    312:         return false;\n    313:       }"
    },
    {
      "file": "webapp/lambda/utils/timeoutHelper.js",
      "line": 448,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${Math.ceil(timeUntilHalfOpen / 1000)} seconds`",
      "context": "    446:         return 'Ready for recovery attempt';\n    447:       }\n>>> 448:       return `${Math.ceil(timeUntilHalfOpen / 1000)} seconds`;\n    449:     }\n    450:     "
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 67,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${operation} timeout after ${timeoutMs}ms`",
      "context": "    65:   return new Promise((_, reject) => {\n    66:     setTimeout(() => {\n>>> 67:       const error = new Error(`${operation} timeout after ${timeoutMs}ms`);\n    68:       error.code = 'TIMEOUT';\n    69:       error.timeout = timeoutMs;"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 131,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${service}.${operation}`",
      "context": "    129:   } = config;\n    130: \n>>> 131:   const operationName = `${service}.${operation}`;\n    132:   let lastError;\n    133: "
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 139,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call started: ${operationName}`",
      "context": "    137:     try {\n    138:       if (logger) {\n>>> 139:         logger.info(`External API call started: ${operationName}`, {\n    140:           attempt: attempt + 1,\n    141:           maxAttempts: retries + 1,"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call succeeded: ${operationName}`",
      "context": "    150: \n    151:       if (logger) {\n>>> 152:         logger.info(`External API call succeeded: ${operationName}`, {\n    153:           duration,\n    154:           attempt: attempt + 1,"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 174,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call failed: ${operationName}`",
      "context": "    172: \n    173:       if (logger) {\n>>> 174:         logger.warn(`External API call failed: ${operationName}`, {\n    175:           error: error.message,\n    176:           duration,"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 201,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`External API call failed after all attempts: ${operationName}`",
      "context": "    199:   \n    200:   if (logger) {\n>>> 201:     logger.error(`External API call failed after all attempts: ${operationName}`, {\n    202:       error: lastError.message,\n    203:       totalAttempts: retries + 1,"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 225,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown service '${service}', using default timeout`",
      "context": "    223:   const serviceConfig = TIMEOUT_CONFIGS[service];\n    224:   if (!serviceConfig) {\n>>> 225:     console.warn(`Unknown service '${service}', using default timeout`);\n    226:     return TIMEOUT_CONFIGS.api.standard;\n    227:   }"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 231,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unknown operation '${operation}' for service '${service}', using standard timeout`",
      "context": "    229:   const timeout = serviceConfig[operation];\n    230:   if (!timeout) {\n>>> 231:     console.warn(`Unknown operation '${operation}' for service '${service}', using standard timeout`);\n    232:     return serviceConfig.standard || TIMEOUT_CONFIGS.api.standard;\n    233:   }"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 243,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`database.${operationType}`",
      "context": "    241: async function withDatabaseTimeout(operation, operationType = 'query', logger = null) {\n    242:   const timeout = getTimeout('database', operationType);\n>>> 243:   const operationName = `database.${operationType}`;\n    244:   \n    245:   if (logger) {"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 246,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database operation started: ${operationName}`",
      "context": "    244:   \n    245:   if (logger) {\n>>> 246:     logger.debug(`Database operation started: ${operationName}`, { timeout });\n    247:   }\n    248: "
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 256,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database operation completed: ${operationName}`",
      "context": "    254:     \n    255:     if (logger) {\n>>> 256:       logger.debug(`Database operation completed: ${operationName}`, { duration });\n    257:     }\n    258:     "
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 264,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Database operation failed: ${operationName}`",
      "context": "    262:     \n    263:     if (logger) {\n>>> 264:       logger.error(`Database operation failed: ${operationName}`, {\n    265:         error: error.message,\n    266:         duration,"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 280,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`trading.${operationType}`",
      "context": "    278: async function withTradingTimeout(operation, operationType = 'standard', logger = null) {\n    279:   const timeout = getTimeout('trading', operationType);\n>>> 280:   const operationName = `trading.${operationType}`;\n    281:   \n    282:   return callExternalApi({"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 298,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`market_data.${operationType}`",
      "context": "    296: async function withMarketDataTimeout(operation, operationType = 'realtime', logger = null) {\n    297:   const timeout = getTimeout('market_data', operationType);\n>>> 298:   const operationName = `market_data.${operationType}`;\n    299:   \n    300:   return callExternalApi({"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 316,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`aws.${operationType}`",
      "context": "    314: async function withAwsTimeout(operation, operationType = 'standard', logger = null) {\n    315:   const timeout = getTimeout('aws', operationType);\n>>> 316:   const operationName = `aws.${operationType}`;\n    317:   \n    318:   return callExternalApi({"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 334,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`auth.${operationType}`",
      "context": "    332: async function withAuthTimeout(operation, operationType = 'login', logger = null) {\n    333:   const timeout = getTimeout('auth', operationType);\n>>> 334:   const operationName = `auth.${operationType}`;\n    335:   \n    336:   return callExternalApi({"
    },
    {
      "file": "webapp/lambda/utils/timeoutManager.js",
      "line": 369,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Fetch timeout after ${timeout}ms`",
      "context": "    367:       \n    368:       if (error.name === 'AbortError') {\n>>> 369:         const timeoutError = new Error(`Fetch timeout after ${timeout}ms`);\n    370:         timeoutError.code = 'TIMEOUT';\n    371:         timeoutError.timeout = timeout;"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 20,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`strategy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    18:   // Register a trading strategy\n    19:   async registerStrategy(userId, strategyConfig) {\n>>> 20:     const strategyId = `strategy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    21:     \n    22:     try {"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 25,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    23:       logger.info(`📊 Registering trading strategy`, {\n    24:         strategyId,\n>>> 25:         userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    26:         strategyType: strategyConfig.type,\n    27:         symbols: strategyConfig.symbols,"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 34,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Invalid strategy configuration: ${validationResult.error}`",
      "context": "    32:       const validationResult = this.validateStrategyConfig(strategyConfig);\n    33:       if (!validationResult.isValid) {\n>>> 34:         throw new Error(`Invalid strategy configuration: ${validationResult.error}`);\n    35:       }\n    36: "
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 25,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    23:       logger.info(`📊 Registering trading strategy`, {\n    24:         strategyId,\n>>> 25:         userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    26:         strategyType: strategyConfig.type,\n    27:         symbols: strategyConfig.symbols,"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 112,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Strategy ${strategyId} not found or not active`",
      "context": "    110:     const strategy = this.activeStrategies.get(strategyId);\n    111:     if (!strategy) {\n>>> 112:       throw new Error(`Strategy ${strategyId} not found or not active`);\n    113:     }\n    114: "
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 115,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`exec-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`",
      "context": "    113:     }\n    114: \n>>> 115:     const executionId = `exec-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    116:     \n    117:     try {"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 147,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unsupported strategy type: ${strategy.config.type}`",
      "context": "    145:           break;\n    146:         default:\n>>> 147:           throw new Error(`Unsupported strategy type: ${strategy.config.type}`);\n    148:       }\n    149: "
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 280,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error processing momentum strategy for ${symbol}`",
      "context": "    278:         }\n    279:       } catch (error) {\n>>> 280:         logger.error(`❌ Error processing momentum strategy for ${symbol}`, {\n    281:           error: error.message,\n    282:           symbol"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 368,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error processing mean reversion strategy for ${symbol}`",
      "context": "    366:         }\n    367:       } catch (error) {\n>>> 368:         logger.error(`❌ Error processing mean reversion strategy for ${symbol}`, {\n    369:           error: error.message,\n    370:           symbol"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 461,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error processing breakout strategy for ${symbol}`",
      "context": "    459:         }\n    460:       } catch (error) {\n>>> 461:         logger.error(`❌ Error processing breakout strategy for ${symbol}`, {\n    462:           error: error.message,\n    463:           symbol"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 485,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`🔍 Executing pattern strategy for ${symbol}`",
      "context": "    483:     for (const symbol of symbols) {\n    484:       try {\n>>> 485:         logger.info(`🔍 Executing pattern strategy for ${symbol}`, {\n    486:           strategyId: strategy.id,\n    487:           symbol: symbol,"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 502,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`⚠️ Signal processing failed for ${symbol}`",
      "context": "    500: \n    501:         if (!signalAnalysis.success) {\n>>> 502:           logger.warn(`⚠️ Signal processing failed for ${symbol}`, {\n    503:             strategyId: strategy.id,\n    504:             symbol: symbol"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 511,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Pattern analysis completed for ${symbol}`",
      "context": "    509:         const { patterns, analysis, recommendations } = signalAnalysis;\n    510:         \n>>> 511:         logger.info(`📊 Pattern analysis completed for ${symbol}`, {\n    512:           strategyId: strategy.id,\n    513:           symbol: symbol,"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 574,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error processing pattern strategy for ${symbol}`",
      "context": "    572:         }\n    573:       } catch (error) {\n>>> 574:         logger.error(`❌ Error processing pattern strategy for ${symbol}`, {\n    575:           error: error.message,\n    576:           symbol"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 733,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`❌ Error calculating position size for ${symbol}`",
      "context": "    731:       };\n    732:     } catch (error) {\n>>> 733:       logger.error(`❌ Error calculating position size for ${symbol}`, {\n    734:         error: error.message,\n    735:         symbol,"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 778,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Missing required field: ${field}`",
      "context": "    776:     for (const field of required) {\n    777:       if (!config[field]) {\n>>> 778:         return { isValid: false, error: `Missing required field: ${field}` };\n    779:       }\n    780:     }"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 783,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Unsupported strategy type: ${config.type}`",
      "context": "    781:     \n    782:     if (!supportedTypes.includes(config.type)) {\n>>> 783:       return { isValid: false, error: `Unsupported strategy type: ${config.type}` };\n    784:     }\n    785:     "
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 797,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`📊 Updating performance metrics for strategy ${strategyId}`",
      "context": "    795:     // This would calculate and update performance metrics\n    796:     // Integration with performance tracking service\n>>> 797:     logger.info(`📊 Updating performance metrics for strategy ${strategyId}`, {\n    798:       ordersPlaced: executionResult.orders?.length || 0,\n    799:       totalValue: executionResult.totalValue || 0"
    },
    {
      "file": "webapp/lambda/utils/tradingStrategyEngine.js",
      "line": 25,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${userId.substring(0, 8)}...`",
      "context": "    23:       logger.info(`📊 Registering trading strategy`, {\n    24:         strategyId,\n>>> 25:         userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n    26:         strategyType: strategyConfig.type,\n    27:         symbols: strategyConfig.symbols,"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 71,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND symbol = $${paramIndex}`",
      "context": "    69: \n    70:       if (filters.symbol) {\n>>> 71:         whereClause += ` AND symbol = $${paramIndex}`;\n    72:         params.push(filters.symbol);\n    73:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 77,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND is_active = $${paramIndex}`",
      "context": "    75: \n    76:       if (filters.isActive !== undefined) {\n>>> 77:         whereClause += ` AND is_active = $${paramIndex}`;\n    78:         params.push(filters.isActive);\n    79:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 83,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "` AND alert_type = $${paramIndex}`",
      "context": "    81: \n    82:       if (filters.alertType) {\n>>> 83:         whereClause += ` AND alert_type = $${paramIndex}`;\n    84:         params.push(filters.alertType);\n    85:         paramIndex++;"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 88,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\n        SELECT \n          wa.*,\n          sse.company_name,\n          sse.sector,\n          (\n            SELECT COUNT(*) FROM alert_notifications an \n            WHERE an.alert_id = wa.id\n          ) as notification_count,\n          (\n            SELECT MAX(created_at) FROM alert_notifications an \n            WHERE an.alert_id = wa.id\n          ) as last_triggered\n        FROM watchlist_alerts wa\n        LEFT JOIN stock_symbols_enhanced sse ON wa.symbol = sse.symbol\n        ${whereClause}\n        ORDER BY wa.created_at DESC\n      `",
      "context": "    86:       }\n    87: \n>>> 88:       const result = await query(`\n    89:         SELECT \n    90:           wa.*,"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 187,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Processing ${alerts.length} active alerts`",
      "context": "    185:       }\n    186: \n>>> 187:       console.log(`Processing ${alerts.length} active alerts`);\n    188:       \n    189:       // Group alerts by symbol to minimize API calls"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 197,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error processing alerts for ${symbol}:`",
      "context": "    195:           await this.processSymbolAlerts(symbol, symbolAlerts);\n    196:         } catch (error) {\n>>> 197:           console.error(`Error processing alerts for ${symbol}:`, error);\n    198:         }\n    199:       }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 258,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No market data available for ${symbol}`",
      "context": "    256:       \n    257:       if (!marketData) {\n>>> 258:         console.log(`No market data available for ${symbol}`);\n    259:         return;\n    260:       }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 274,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error processing alert ${alert.id}:`",
      "context": "    272:           }\n    273:         } catch (error) {\n>>> 274:           console.error(`Error processing alert ${alert.id}:`, error);\n    275:         }\n    276:       }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 278,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error processing symbol alerts for ${symbol}:`",
      "context": "    276:       }\n    277:     } catch (error) {\n>>> 278:       console.error(`Error processing symbol alerts for ${symbol}:`, error);\n    279:     }\n    280:   }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 337,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Alert ${alert.id} was triggered recently, skipping`",
      "context": "    335:       const recentTrigger = await this.checkRecentTrigger(alert.id);\n    336:       if (recentTrigger) {\n>>> 337:         console.log(`Alert ${alert.id} was triggered recently, skipping`);\n    338:         return;\n    339:       }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 356,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Alert ${alert.id} triggered for ${alert.symbol}`",
      "context": "    354:       await this.updateAlertTriggerCount(alert.id);\n    355:       \n>>> 356:       console.log(`Alert ${alert.id} triggered for ${alert.symbol}`);\n    357:     } catch (error) {\n    358:       console.error(`Error triggering alert ${alert.id}:`, error);"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 358,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error triggering alert ${alert.id}:`",
      "context": "    356:       console.log(`Alert ${alert.id} triggered for ${alert.symbol}`);\n    357:     } catch (error) {\n>>> 358:       console.error(`Error triggering alert ${alert.id}:`, error);\n    359:     }\n    360:   }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 411,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Price Alert: ${alert.symbol} - ${alert.alert_type}`",
      "context": "    409:       console.log('Email notification would be sent:', {\n    410:         to: alert.email,\n>>> 411:         subject: `Price Alert: ${alert.symbol} - ${alert.alert_type}`,\n    412:         body: this.formatAlertMessage(alert, marketData)\n    413:       });"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 426,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${alert.symbol} Alert`",
      "context": "    424:       console.log('Push notification would be sent:', {\n    425:         userId: alert.user_id,\n>>> 426:         title: `${alert.symbol} Alert`,\n    427:         body: this.formatAlertMessage(alert, marketData),\n    428:         data: {"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 448,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) is now above $${alert.target_value}. Current price: $${price.toFixed(2)}`",
      "context": "    446:     switch (alert.alert_type) {\n    447:       case this.alertTypes.PRICE_ABOVE:\n>>> 448:         return `${companyName} (${symbol}) is now above $${alert.target_value}. Current price: $${price.toFixed(2)}`;\n    449:       \n    450:       case this.alertTypes.PRICE_BELOW:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 451,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) is now below $${alert.target_value}. Current price: $${price.toFixed(2)}`",
      "context": "    449:       \n    450:       case this.alertTypes.PRICE_BELOW:\n>>> 451:         return `${companyName} (${symbol}) is now below $${alert.target_value}. Current price: $${price.toFixed(2)}`;\n    452:       \n    453:       case this.alertTypes.PRICE_CHANGE_PERCENT:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 455,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) has moved ${changePercent.toFixed(2)}% today. Current price: $${price.toFixed(2)}`",
      "context": "    453:       case this.alertTypes.PRICE_CHANGE_PERCENT:\n    454:         const changePercent = ((price - marketData.previous_close) / marketData.previous_close) * 100;\n>>> 455:         return `${companyName} (${symbol}) has moved ${changePercent.toFixed(2)}% today. Current price: $${price.toFixed(2)}`;\n    456:       \n    457:       case this.alertTypes.VOLUME_SPIKE:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 458,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) has unusual volume activity. Current price: $${price.toFixed(2)}`",
      "context": "    456:       \n    457:       case this.alertTypes.VOLUME_SPIKE:\n>>> 458:         return `${companyName} (${symbol}) has unusual volume activity. Current price: $${price.toFixed(2)}`;\n    459:       \n    460:       case this.alertTypes.RSI_OVERBOUGHT:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 461,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) RSI is overbought. Current price: $${price.toFixed(2)}`",
      "context": "    459:       \n    460:       case this.alertTypes.RSI_OVERBOUGHT:\n>>> 461:         return `${companyName} (${symbol}) RSI is overbought. Current price: $${price.toFixed(2)}`;\n    462:       \n    463:       case this.alertTypes.RSI_OVERSOLD:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 464,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) RSI is oversold. Current price: $${price.toFixed(2)}`",
      "context": "    462:       \n    463:       case this.alertTypes.RSI_OVERSOLD:\n>>> 464:         return `${companyName} (${symbol}) RSI is oversold. Current price: $${price.toFixed(2)}`;\n    465:       \n    466:       default:"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 467,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${companyName} (${symbol}) alert triggered. Current price: $${price.toFixed(2)}`",
      "context": "    465:       \n    466:       default:\n>>> 467:         return `${companyName} (${symbol}) alert triggered. Current price: $${price.toFixed(2)}`;\n    468:     }\n    469:   }"
    },
    {
      "file": "webapp/lambda/utils/watchlistAlerts.js",
      "line": 574,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Starting alert processing with ${intervalMinutes} minute interval`",
      "context": "    572:   // Start alert processing interval\n    573:   startAlertProcessing(intervalMinutes = 5) {\n>>> 574:     console.log(`Starting alert processing with ${intervalMinutes} minute interval`);\n    575:     \n    576:     // Initial processing"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 70,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`No subscriptions found for symbol ${marketData.symbol}`",
      "context": "    68:   \n    69:   if (subscriptions.length === 0) {\n>>> 70:     console.log(`No subscriptions found for symbol ${marketData.symbol}`);\n    71:     return;\n    72:   }"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 85,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Broadcasted ${marketData.symbol} data to ${successful} connections, ${failed} failed`",
      "context": "    83:   const failed = results.filter(r => r.status === 'rejected').length;\n    84:   \n>>> 85:   console.log(`Broadcasted ${marketData.symbol} data to ${successful} connections, ${failed} failed`);\n    86: }\n    87: "
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 97,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${timestamp}-${marketData.type || 'trade'}`",
      "context": "    95:         symbol: marketData.symbol,\n    96:         timestamp,\n>>> 97:         sortKey: `${timestamp}-${marketData.type || 'trade'}`,\n    98:         price: marketData.price,\n    99:         volume: marketData.volume,"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 149,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Successfully sent data to connection ${connectionId}`",
      "context": "    147:     }).promise();\n    148:     \n>>> 149:     console.log(`Successfully sent data to connection ${connectionId}`);\n    150:   } catch (error) {\n    151:     if (error.statusCode === 410) {"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection ${connectionId} is stale, removing...`",
      "context": "    150:   } catch (error) {\n    151:     if (error.statusCode === 410) {\n>>> 152:       console.log(`Connection ${connectionId} is stale, removing...`);\n    153:       await cleanupStaleConnection(connectionId);\n    154:     } else {"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 155,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Error sending to connection ${connectionId}:`",
      "context": "    153:       await cleanupStaleConnection(connectionId);\n    154:     } else {\n>>> 155:       console.error(`Error sending to connection ${connectionId}:`, error);\n    156:       throw error;\n    157:     }"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 190,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Cleaned up stale connection ${connectionId}`",
      "context": "    188:     }\n    189:     \n>>> 190:     console.log(`Cleaned up stale connection ${connectionId}`);\n    191:   } catch (error) {\n    192:     console.error('Error cleaning up stale connection:', error);"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 3,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\nconst apiGateway = new AWS.ApiGatewayManagementApi({\n  endpoint: process.env.WEBSOCKET_API_ENDPOINT\n});\n\nconst CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || '",
      "context": "    1: // WebSocket Broadcast Handler\n    2: // Receives market data from streams and broadcasts to subscribed connections\n>>> 3: const AWS = require('aws-sdk');\n    4: const dynamoDB = new AWS.DynamoDB.DocumentClient();\n    5: const apiGateway = new AWS.ApiGatewayManagementApi({"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 9,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\nconst SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || '",
      "context": "    7: });\n    8: \n>>> 9: const CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || 'WebSocketConnections';\n    10: const SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || 'WebSocketSubscriptions';\n    11: const MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || 'MarketData';"
    },
    {
      "file": "webapp/lambda/websocket/broadcast.js",
      "line": 10,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\nconst MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || '",
      "context": "    8: \n    9: const CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || 'WebSocketConnections';\n>>> 10: const SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || 'WebSocketSubscriptions';\n    11: const MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || 'MarketData';\n    12: "
    },
    {
      "file": "webapp/lambda/websocket/connect.js",
      "line": 27,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection ${connectionId} stored successfully`",
      "context": "    25:     }).promise();\n    26:     \n>>> 27:     console.log(`Connection ${connectionId} stored successfully`);\n    28:     \n    29:     return {"
    },
    {
      "file": "webapp/lambda/websocket/connect.js",
      "line": 2,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\n\nconst CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || '",
      "context": "    1: // WebSocket Connect Handler\n>>> 2: const AWS = require('aws-sdk');\n    3: const dynamoDB = new AWS.DynamoDB.DocumentClient();\n    4: "
    },
    {
      "file": "webapp/lambda/websocket/disconnect.js",
      "line": 42,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Removed ${subscriptions.Items.length} subscriptions for connection ${connectionId}`",
      "context": "    40:       \n    41:       await Promise.all(deletePromises);\n>>> 42:       console.log(`Removed ${subscriptions.Items.length} subscriptions for connection ${connectionId}`);\n    43:     }\n    44:     "
    },
    {
      "file": "webapp/lambda/websocket/disconnect.js",
      "line": 45,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection ${connectionId} removed successfully`",
      "context": "    43:     }\n    44:     \n>>> 45:     console.log(`Connection ${connectionId} removed successfully`);\n    46:     \n    47:     return {"
    },
    {
      "file": "webapp/lambda/websocket/disconnect.js",
      "line": 2,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\n\nconst CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || '",
      "context": "    1: // WebSocket Disconnect Handler\n>>> 2: const AWS = require('aws-sdk');\n    3: const dynamoDB = new AWS.DynamoDB.DocumentClient();\n    4: "
    },
    {
      "file": "webapp/lambda/websocket/disconnect.js",
      "line": 5,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\nconst SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || '",
      "context": "    3: const dynamoDB = new AWS.DynamoDB.DocumentClient();\n    4: \n>>> 5: const CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || 'WebSocketConnections';\n    6: const SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || 'WebSocketSubscriptions';\n    7: "
    },
    {
      "file": "webapp/lambda/websocket/message.js",
      "line": 74,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${connectionId}-${Date.now()}`",
      "context": "    72:   }\n    73:   \n>>> 74:   const subscriptionId = `${connectionId}-${Date.now()}`;\n    75:   const timestamp = new Date().toISOString();\n    76:   "
    },
    {
      "file": "webapp/lambda/websocket/message.js",
      "line": 221,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Connection ${connectionId} is stale, removing...`",
      "context": "    219:   } catch (error) {\n    220:     if (error.statusCode === 410) {\n>>> 221:       console.log(`Connection ${connectionId} is stale, removing...`);\n    222:       await dynamoDB.delete({\n    223:         TableName: CONNECTIONS_TABLE,"
    },
    {
      "file": "webapp/lambda/websocket/message.js",
      "line": 2,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "');\nconst dynamoDB = new AWS.DynamoDB.DocumentClient();\nconst apiGateway = new AWS.ApiGatewayManagementApi({\n  endpoint: process.env.WEBSOCKET_API_ENDPOINT\n});\n\nconst CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || '",
      "context": "    1: // WebSocket Message Handler\n>>> 2: const AWS = require('aws-sdk');\n    3: const dynamoDB = new AWS.DynamoDB.DocumentClient();\n    4: const apiGateway = new AWS.ApiGatewayManagementApi({"
    },
    {
      "file": "webapp/lambda/websocket/message.js",
      "line": 8,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\nconst SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || '",
      "context": "    6: });\n    7: \n>>> 8: const CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || 'WebSocketConnections';\n    9: const SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || 'WebSocketSubscriptions';\n    10: const MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || 'MarketData';"
    },
    {
      "file": "webapp/lambda/websocket/message.js",
      "line": 9,
      "pattern": "Direct process.env in SQL",
      "risk": "MEDIUM",
      "description": "Direct process.env usage in SQL strings",
      "code": "';\nconst MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || '",
      "context": "    7: \n    8: const CONNECTIONS_TABLE = process.env.CONNECTIONS_TABLE || 'WebSocketConnections';\n>>> 9: const SUBSCRIPTIONS_TABLE = process.env.SUBSCRIPTIONS_TABLE || 'WebSocketSubscriptions';\n    10: const MARKET_DATA_TABLE = process.env.MARKET_DATA_TABLE || 'MarketData';\n    11: "
    },
    {
      "file": "advanced_chart_patterns.py",
      "line": 315,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where lines would intersect\n        high_slope = self._calculate_slope(data, high_indices, 'high')\n        low_slope = self._calculate_slope(data, low_indices, 'low')\n        \n        # Lines converge if slopes are different\n        return abs(high_slope - low_slope) > 0.001\n    \n    def _create_wedge_pattern(self, data: pd.DataFrame, pattern_type: str,\n                             high_indices: List[int], low_indices: List[int]) -> PatternMatch:\n        \"\"\"Create wedge pattern match\"\"\"\n        # Combine all points\n        all_points = []\n        \n        for idx in high_indices:\n            all_points.append(PatternPoint(\n                timestamp=data.index[idx],\n                price=data['high'].iloc[idx],\n                index=idx\n            ))\n        \n        for idx in low_indices:\n            all_points.append(PatternPoint(\n                timestamp=data.index[idx],\n                price=data['low'].iloc[idx],\n                index=idx\n            ))\n        \n        # Sort by time\n        all_points.sort(key=lambda p: p.index)\n        \n        # Calculate pattern metrics\n        pattern_height = max(p.price for p in all_points) - min(p.price for p in all_points)\n        \n        # Calculate target based on pattern type\n        if pattern_type == 'rising_wedge':\n            # Bearish pattern\n            target_price = min(p.price for p in all_points) - pattern_height * 0.618\n        else:\n            # Bullish pattern\n            target_price = max(p.price for p in all_points) + pattern_height * 0.618\n        \n        # Calculate confidence\n        confidence = self._calculate_wedge_confidence(data, all_points, pattern_type)\n        \n        return PatternMatch(\n            pattern_type=pattern_type,\n            confidence=confidence,\n            start_point=all_points[0],\n            end_point=all_points[-1],\n            key_points=all_points,\n            target_price=target_price,\n            pattern_height=pattern_height,\n            probability=0.65\n        )\n    \n    def _calculate_wedge_confidence(self, data: pd.DataFrame, \n                                   points: List[PatternPoint], pattern_type: str) -> float:\n        \"\"\"Calculate confidence for wedge pattern\"\"\"\n        base_confidence = 0.6\n        \n        # Volume should decrease during wedge formation\n        if 'volume' in data.columns:\n            start_idx = points[0].index\n            end_idx = points[-1].index\n            \n            volume_data = data['volume'].iloc[start_idx:end_idx+1]\n            if len(volume_data) > 10:\n                early_volume = volume_data.iloc[:len(volume_data)//2].mean()\n                late_volume = volume_data.iloc[len(volume_data)//2:].mean()\n                \n                if late_volume < early_volume:\n                    base_confidence += 0.2\n        \n        # More touches = higher confidence\n        if len(points) >= 6:\n            base_confidence += 0.1\n        \n        return min(base_confidence, 1.0)\n\nclass CupAndHandleDetector(PatternDetector):\n    \"\"\"Detect cup and handle patterns\"\"\"\n    \n    def detect_cup_and_handle(self, data: pd.DataFrame) -> List[PatternMatch]:\n        \"\"\"Detect cup and handle patterns\"\"\"\n        patterns = []\n        \n        if len(data) < 30:  # Need sufficient data for cup and handle\n            return patterns\n        \n        # Find potential cup formations\n        for i in range(20, len(data) - 10):\n            cup_pattern = self._find_cup_at_position(data, i)\n            if cup_pattern:\n                # Look for handle after cup\n                handle_pattern = self._find_handle_after_cup(data, cup_pattern, i)\n                if handle_pattern:\n                    patterns.append(handle_pattern)\n        \n        return patterns\n    \n    def _find_cup_at_position(self, data: pd.DataFrame, position: int) -> Optional[Dict]:\n        \"\"\"Find cup formation at given position\"\"\"\n        lookback = min(20, position)\n        \n        # Get data for potential cup\n        cup_data = data.iloc[position - lookback:position + 1]\n        \n        # Find the lowest point (bottom of cup)\n        bottom_idx = cup_data['low'].idxmin()\n        bottom_price = cup_data['low'].min()\n        \n        # Find rim levels (left and right highs)\n        left_data = cup_data.iloc[:len(cup_data)//2]\n        right_data = cup_data.iloc[len(cup_data)//2:]\n        \n        left_high = left_data['high'].max()\n        right_high = right_data['high'].max()\n        \n        # Check cup criteria\n        rim_avg = (left_high + right_high) / 2\n        cup_depth = (rim_avg - bottom_price) / rim_avg\n        \n        # Cup should be 15-50% deep\n        if 0.15 <= cup_depth <= 0.50:\n            # Rims should be roughly equal\n            rim_difference = abs(left_high - right_high) / rim_avg\n            if rim_difference < 0.05:\n                return {\n                    'bottom_idx': bottom_idx,\n                    'bottom_price': bottom_price,\n                    'left_rim': left_high,\n                    'right_rim': right_high,\n                    'cup_depth': cup_depth,\n                    'start_idx': cup_data.index[0],\n                    'end_idx': cup_data.index[-1]\n                }\n        \n        return None\n    \n    def _find_handle_after_cup(self, data: pd.DataFrame, cup: Dict, cup_end: int) -> Optional[PatternMatch]:\n        \"\"\"Find handle formation after cup\"\"\"\n        handle_start = cup_end + 1\n        handle_end = min(handle_start + 10, len(data) - 1)\n        \n        if handle_end <= handle_start:\n            return None\n        \n        handle_data = data.iloc[handle_start:handle_end + 1]\n        \n        # Handle should be a small pullback\n        handle_high = handle_data['high'].max()\n        handle_low = handle_data['low'].min()\n        \n        # Handle pullback should be 10-15% from right rim\n        pullback = (cup['right_rim'] - handle_low) / cup['right_rim']\n        \n        if 0.10 <= pullback <= 0.15:\n            # Create pattern\n            key_points = [\n                PatternPoint(cup['start_idx'], cup['left_rim'], index=data.index.get_loc(cup['start_idx'])),\n                PatternPoint(cup['bottom_idx'], cup['bottom_price'], index=data.index.get_loc(cup['bottom_idx'])),\n                PatternPoint(cup['end_idx'], cup['right_rim'], index=data.index.get_loc(cup['end_idx'])),\n                PatternPoint(handle_data.index[-1], handle_low, index=data.index.get_loc(handle_data.index[-1]))\n            ]\n            \n            # Calculate target price (cup depth projection)\n            target_price = cup['right_rim'] + (cup['right_rim'] - cup['bottom_price'])\n            \n            # Calculate confidence\n            confidence = self._calculate_cup_handle_confidence(cup, pullback)\n            \n            return PatternMatch(\n                pattern_type='cup_and_handle',\n                confidence=confidence,\n                start_point=key_points[0],\n                end_point=key_points[-1],\n                key_points=key_points,\n                target_price=target_price,\n                breakout_level=cup['right_rim'],\n                pattern_height=cup['right_rim'] - cup['bottom_price'],\n                probability=0.70\n            )\n        \n        return None\n    \n    def _calculate_cup_handle_confidence(self, cup: Dict, pullback: float) -> float:\n        \"\"\"Calculate confidence for cup and handle pattern\"\"\"\n        base_confidence = 0.6\n        \n        # Better cup depth\n        ideal_depth = 0.25\n        depth_score = 1 - abs(cup['cup_depth'] - ideal_depth) / ideal_depth\n        base_confidence += depth_score * 0.2\n        \n        # Better handle pullback\n        ideal_pullback = 0.125\n        pullback_score = 1 - abs(pullback - ideal_pullback) / ideal_pullback\n        base_confidence += pullback_score * 0.2\n        \n        return min(base_confidence, 1.0)\n\nclass AdvancedPatternDetector(PatternDetector):\n    \"\"\"Master detector that combines all advanced patterns\"\"\"\n    \n    def __init__(self, min_bars: int = 15, tolerance: float = 0.02):\n        super().__init__(min_bars, tolerance)\n        self.harmonic_detector = HarmonicPatternDetector(min_bars, tolerance)\n        self.wedge_detector = WedgePatternDetector(min_bars, tolerance)\n        self.cup_handle_detector = CupAndHandleDetector(min_bars, tolerance)\n    \n    def detect_all_advanced_patterns(self, data: pd.DataFrame) -> List[PatternMatch]:\n        \"\"\"Detect all advanced patterns\"\"\"\n        patterns = []\n        \n        # Harmonic patterns\n        patterns.extend(self.harmonic_detector.detect_harmonic_patterns(data))\n        \n        # Wedge patterns\n        patterns.extend(self.wedge_detector.detect_wedge_patterns(data))\n        \n        # Cup and handle patterns\n        patterns.extend(self.cup_handle_detector.detect_cup_and_handle(data))\n        \n        # Remove duplicates and sort by confidence\n        patterns = self._remove_overlapping_patterns(patterns)\n        patterns.sort(key=lambda p: p.confidence, reverse=True)\n        \n        return patterns\n    \n    def _remove_overlapping_patterns(self, patterns: List[PatternMatch]) -> List[PatternMatch]:\n        \"\"\"Remove overlapping patterns, keeping highest confidence\"\"\"\n        if not patterns:\n            return patterns\n        \n        # Sort by confidence\n        sorted_patterns = sorted(patterns, key=lambda p: p.confidence, reverse=True)\n        \n        filtered_patterns = []\n        for pattern in sorted_patterns:\n            # Check if it overlaps with any already selected pattern\n            overlaps = False\n            for selected in filtered_patterns:\n                if self._patterns_overlap(pattern, selected):\n                    overlaps = True\n                    break\n            \n            if not overlaps:\n                filtered_patterns.append(pattern)\n        \n        return filtered_patterns\n    \n    def _patterns_overlap(self, pattern1: PatternMatch, pattern2: PatternMatch) -> bool:\n        \"\"\"Check if two patterns overlap significantly\"\"\"\n        # Check time overlap\n        start1, end1 = pattern1.start_point.index, pattern1.end_point.index\n        start2, end2 = pattern2.start_point.index, pattern2.end_point.index\n        \n        # Calculate overlap percentage\n        overlap_start = max(start1, start2)\n        overlap_end = min(end1, end2)\n        \n        if overlap_end <= overlap_start:\n            return False\n        \n        overlap_length = overlap_end - overlap_start\n        pattern1_length = end1 - start1\n        pattern2_length = end2 - start2\n        \n        # Consider overlapping if more than 50% of either pattern overlaps\n        overlap_ratio1 = overlap_length / pattern1_length if pattern1_length > 0 else 0\n        overlap_ratio2 = overlap_length / pattern2_length if pattern2_length > 0 else 0\n        \n        return overlap_ratio1 > 0.5 or overlap_ratio2 > 0.5\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create sample data\n    dates = pd.date_range('2023-01-01', periods=100, freq='D')\n    np.random.seed(42)\n    \n    # Generate sample price data with some pattern-like behavior\n    price_base = 100\n    price_data = []\n    \n    for i in range(100):\n        # Add some trend and volatility\n        trend = 0.02 * i\n        volatility = np.random.normal(0, 2)\n        \n        # Add harmonic-like pattern\n        if 20 <= i <= 60:\n            harmonic = 5 * np.sin(0.3 * (i - 20))\n        else:\n            harmonic = 0\n        \n        price = price_base + trend + volatility + harmonic\n        price_data.append(price)\n    \n    # Create DataFrame\n    sample_data = pd.DataFrame({\n        'date': dates,\n        'open': price_data,\n        'high': [p +",
      "context": "    313:                        low_indices: List[int]) -> bool:\n    314:         \"\"\"Check if trendlines converge\"\"\"\n>>> 315:         # Calculate where lines would intersect\n    316:         high_slope = self._calculate_slope(data, high_indices, 'high')\n    317:         low_slope = self._calculate_slope(data, low_indices, 'low')"
    },
    {
      "file": "calculate_growth_metrics.py",
      "line": 119,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol IS NOT NULL \n                ORDER BY symbol\n                LIMIT 100\n            \"\"\")\n            return [row['symbol'] for row in self.cursor.fetchall()]\n        except Exception as e:\n            logger.error(f\"Error getting stock list: {e}\")\n            return []\n    \n    def calculate_revenue_growth_score(self, symbol):\n        \"\"\"Calculate Revenue Growth Analysis score (30% weight).\"\"\"\n        try:\n            # Get quarterly revenue data\n            self.cursor.execute(\"\"\"\n                SELECT period_end, revenue, net_income, total_stockholder_equity\n                FROM quarterly_income_statement \n                WHERE symbol = %s \n                ORDER BY period_end DESC \n                LIMIT 20\n            \"\"\", (symbol,))\n            data = self.cursor.fetchall()\n            \n            if len(data) < 8:\n                return 0.5, {}  # Default score with empty details\n            \n            df = pd.DataFrame(data)\n            df['period_end'] = pd.to_datetime(df['period_end'])\n            df = df.sort_values('period_end')\n            \n            # Calculate metrics\n            metrics = {}\n            \n            # 1. Sustainable Growth Rate: ROE × (1 - Payout Ratio)\n            latest_roe = self._calculate_roe(df)\n            payout_ratio = 0.3  # Default assumption\n            metrics['sustainable_growth_rate'] = latest_roe * (1 - payout_ratio) if latest_roe else 0.1\n            \n            # 2. Revenue Quality Score (growth consistency)\n            metrics['revenue_quality_score'] = self._calculate_revenue_quality(df)\n            \n            # 3. Revenue Growth Rate (YoY)\n            revenue_growth = self._calculate_revenue_growth(df)\n            \n            # Weighted composite (simplified)\n            weights = [0.4, 0.3, 0.3]\n            values = [metrics['sustainable_growth_rate'], metrics['revenue_quality_score'], revenue_growth]\n            composite = sum(w * v for w, v in zip(weights, values)) / sum(weights)\n            \n            return min(1.0, max(0.0, composite)), metrics\n            \n        except Exception as e:\n            logger.error(f\"Error calculating revenue growth for {symbol}: {e}\")\n            return 0.5, {}\n    \n    def calculate_earnings_growth_score(self, symbol):\n        \"\"\"Calculate Earnings Growth Quality score (30% weight).\"\"\"\n        try:\n            # Get earnings data\n            self.cursor.execute(\"\"\"\n                SELECT period_end, net_income, eps_diluted, revenue\n                FROM quarterly_income_statement \n                WHERE symbol = %s \n                ORDER BY period_end DESC \n                LIMIT 20\n            \"\"\", (symbol,))\n            data = self.cursor.fetchall()\n            \n            if len(data) < 8:\n                return 0.5, {}\n            \n            df = pd.DataFrame(data)\n            df['period_end'] = pd.to_datetime(df['period_end'])\n            df = df.sort_values('period_end')\n            \n            metrics = {}\n            \n            # 1. EPS Growth Rate\n            metrics['eps_growth_rate'] = self._calculate_eps_growth(df)\n            \n            # 2. Earnings Predictability\n            metrics['earnings_predictability'] = self._calculate_earnings_predictability(df)\n            \n            # 3. Earnings Quality\n            earnings_quality = self._calculate_earnings_quality(df)\n            \n            # Composite score\n            weights = [0.4, 0.3, 0.3]\n            values = [metrics['eps_growth_rate'], metrics['earnings_predictability'], earnings_quality]\n            composite = sum(w * v for w, v in zip(weights, values)) / sum(weights)\n            \n            return min(1.0, max(0.0, composite)), metrics\n            \n        except Exception as e:\n            logger.error(f\"Error calculating earnings growth for {symbol}: {e}\")\n            return 0.5, {}\n    \n    def calculate_fundamental_growth_score(self, symbol):\n        \"\"\"Calculate Fundamental Growth Drivers score (25% weight).\"\"\"\n        try:\n            # Get balance sheet data\n            self.cursor.execute(\"\"\"\n                SELECT qbs.period_end, qbs.total_assets, qis.net_income\n                FROM quarterly_balance_sheet qbs\n                JOIN quarterly_income_statement qis ON qbs.symbol = qis.symbol AND qbs.period_end = qis.period_end\n                WHERE qbs.symbol = %s \n                ORDER BY qbs.period_end DESC \n                LIMIT 20\n            \"\"\", (symbol,))\n            data = self.cursor.fetchall()\n            \n            if len(data) < 8:\n                return 0.5, {}\n            \n            df = pd.DataFrame(data)\n            df['period_end'] = pd.to_datetime(df['period_end'])\n            df = df.sort_values('period_end')\n            \n            metrics = {}\n            \n            # 1. ROA Trend\n            metrics['roa_trend'] = self._calculate_roa_trend(df)\n            \n            # 2. Reinvestment Rate (simplified)\n            metrics['reinvestment_rate'] = 0.6  # Default moderate reinvestment\n            \n            # 3. Asset efficiency\n            asset_efficiency = self._calculate_asset_efficiency(df)\n            \n            # Composite score\n            weights = [0.4, 0.3, 0.3]\n            values = [metrics['roa_trend'], metrics['reinvestment_rate'], asset_efficiency]\n            composite = sum(w * v for w, v in zip(weights, values)) / sum(weights)\n            \n            return min(1.0, max(0.0, composite)), metrics\n            \n        except Exception as e:\n            logger.error(f\"Error calculating fundamental growth for {symbol}: {e}\")\n            return 0.5, {}\n    \n    def calculate_market_expansion_score(self, symbol):\n        \"\"\"Calculate Market Expansion Potential score (15% weight).\"\"\"\n        try:\n            # Get company profile\n            self.cursor.execute(\"\"\"\n                SELECT sector, industry, market_cap, description\n                FROM company_profile \n                WHERE symbol = %s\n            \"\"\", (symbol,))\n            profile = self.cursor.fetchone()\n            \n            if not profile:\n                return 0.5, {}\n            \n            metrics = {}\n            \n            # 1. TAM Growth Projection (industry-based)\n            metrics['tam_growth_potential'] = self._get_industry_growth_rate(profile['sector'])\n            \n            # 2. Geographic Expansion (simplified)\n            metrics['geographic_expansion'] = 0.6  # Default moderate expansion potential\n            \n            # 3. Market penetration based on market cap\n            market_penetration = self._calculate_market_penetration(profile['market_cap'])\n            \n            # Composite score\n            weights = [0.4, 0.3, 0.3]\n            values = [metrics['tam_growth_potential'], metrics['geographic_expansion'], market_penetration]\n            composite = sum(w * v for w, v in zip(weights, values)) / sum(weights)\n            \n            return min(1.0, max(0.0, composite)), metrics\n            \n        except Exception as e:\n            logger.error(f\"Error calculating market expansion for {symbol}: {e}\")\n            return 0.5, {}\n    \n    def calculate_composite_growth_score(self, symbol):\n        \"\"\"Calculate final composite growth score.\"\"\"\n        try:\n            # Get component scores\n            revenue_score, revenue_metrics = self.calculate_revenue_growth_score(symbol)\n            earnings_score, earnings_metrics = self.calculate_earnings_growth_score(symbol)\n            fundamental_score, fundamental_metrics = self.calculate_fundamental_growth_score(symbol)\n            market_score, market_metrics = self.calculate_market_expansion_score(symbol)\n            \n            # Blueprint weights\n            weights = {\n                'revenue': 0.30,\n                'earnings': 0.30,\n                'fundamental': 0.25,\n                'market': 0.15\n            }\n            \n            composite_score = (\n                revenue_score * weights['revenue'] +\n                earnings_score * weights['earnings'] +\n                fundamental_score * weights['fundamental'] +\n                market_score * weights['market']\n            )\n            \n            # Calculate confidence based on data availability\n            confidence = self._calculate_confidence(revenue_metrics, earnings_metrics, fundamental_metrics, market_metrics)\n            \n            return {\n                'symbol': symbol,\n                'revenue_growth_score': revenue_score,\n                'earnings_growth_score': earnings_score,\n                'fundamental_growth_score': fundamental_score,\n                'market_expansion_score': market_score,\n                'growth_composite_score': composite_score,\n                'confidence_score': confidence,\n                'revenue_metrics': revenue_metrics,\n                'earnings_metrics': earnings_metrics,\n                'fundamental_metrics': fundamental_metrics,\n                'market_metrics': market_metrics\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error calculating composite growth score for {symbol}: {e}\")\n            return self._default_growth_metrics(symbol)\n    \n    def save_growth_metrics(self, symbol):\n        \"\"\"Calculate and save growth metrics for a symbol.\"\"\"\n        try:\n            metrics = self.calculate_composite_growth_score(symbol)\n            \n            # Save to database\n            self.cursor.execute(\"\"\"\n                INSERT INTO growth_metrics \n                (symbol, revenue_growth_score, earnings_growth_score, fundamental_growth_score,\n                 market_expansion_score, growth_composite_score, confidence_score,\n                 sustainable_growth_rate, revenue_quality_score, eps_growth_rate, \n                 earnings_predictability, roa_trend, reinvestment_rate, \n                 tam_growth_potential, geographic_expansion)\n                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                ON CONFLICT (symbol) DO UPDATE SET\n                    revenue_growth_score = EXCLUDED.revenue_growth_score,\n                    earnings_growth_score = EXCLUDED.earnings_growth_score,\n                    fundamental_growth_score = EXCLUDED.fundamental_growth_score,\n                    market_expansion_score = EXCLUDED.market_expansion_score,\n                    growth_composite_score = EXCLUDED.growth_composite_score,\n                    confidence_score = EXCLUDED.confidence_score,\n                    sustainable_growth_rate = EXCLUDED.sustainable_growth_rate,\n                    revenue_quality_score = EXCLUDED.revenue_quality_score,\n                    eps_growth_rate = EXCLUDED.eps_growth_rate,\n                    earnings_predictability = EXCLUDED.earnings_predictability,\n                    roa_trend = EXCLUDED.roa_trend,\n                    reinvestment_rate = EXCLUDED.reinvestment_rate,\n                    tam_growth_potential = EXCLUDED.tam_growth_potential,\n                    geographic_expansion = EXCLUDED.geographic_expansion,\n                    updated_at = CURRENT_TIMESTAMP\n            \"\"\", (\n                symbol,\n                metrics['revenue_growth_score'],\n                metrics['earnings_growth_score'],\n                metrics['fundamental_growth_score'],\n                metrics['market_expansion_score'],\n                metrics['growth_composite_score'],\n                metrics['confidence_score'],\n                metrics['revenue_metrics'].get('sustainable_growth_rate', 0.1),\n                metrics['revenue_metrics'].get('revenue_quality_score', 0.5),\n                metrics['earnings_metrics'].get('eps_growth_rate', 0.05),\n                metrics['earnings_metrics'].get('earnings_predictability', 0.5),\n                metrics['fundamental_metrics'].get('roa_trend', 0.5),\n                metrics['fundamental_metrics'].get('reinvestment_rate', 0.6),\n                metrics['market_metrics'].get('tam_growth_potential', 0.5),\n                metrics['market_metrics'].get('geographic_expansion', 0.6)\n            ))\n            \n            self.conn.commit()\n            logger.info(f\"Growth metrics saved for {symbol}\")\n            \n        except Exception as e:\n            self.conn.rollback()\n            logger.error(f\"Error saving growth metrics for {symbol}: {e}\")\n    \n    # Helper calculation methods\n    def _calculate_roe(self, df):\n        \"\"\"Calculate Return on Equity.\"\"\"\n        if len(df) < 4:\n            return 0.1\n        \n        latest_data = df.iloc[-4:]\n        annual_net_income = latest_data['net_income'].sum()\n        avg_equity = latest_data['total_stockholder_equity'].mean()\n        \n        return annual_net_income / avg_equity if avg_equity > 0 else 0.1\n    \n    def _calculate_revenue_quality(self, df):\n        \"\"\"Calculate revenue quality score based on growth consistency.\"\"\"\n        if len(df) < 8:\n            return 0.5\n        \n        df['revenue_growth'] = df['revenue'].pct_change(periods=4)  # YoY growth\n        growth_std = df['revenue_growth'].std()\n        growth_mean = df['revenue_growth'].mean()\n        \n        if growth_mean == 0:\n            return 0.5\n        \n        consistency_score = max(0, 1 - (growth_std / abs(growth_mean)))\n        return min(1.0, max(0.0, consistency_score))\n    \n    def _calculate_revenue_growth(self, df):\n        \"\"\"Calculate revenue growth rate.\"\"\"\n        if len(df) < 8:\n            return 0.05\n        \n        latest_revenue = df['revenue'].iloc[-4:].sum()\n        previous_revenue = df['revenue'].iloc[-8:-4].sum()\n        \n        if previous_revenue > 0:\n            growth_rate = (latest_revenue - previous_revenue) / previous_revenue\n            return min(1.0, max(0.0, growth_rate * 5))  # Scale to 0-1\n        \n        return 0.05\n    \n    def _calculate_eps_growth(self, df):\n        \"\"\"Calculate EPS growth rate.\"\"\"\n        if len(df) < 8:\n            return 0.05\n        \n        latest_eps = df['eps_diluted'].iloc[-4:].mean()\n        previous_eps = df['eps_diluted'].iloc[-8:-4].mean()\n        \n        if previous_eps > 0:\n            growth_rate = (latest_eps - previous_eps) / previous_eps\n            return min(1.0, max(0.0, growth_rate * 5))  # Scale to 0-1\n        \n        return 0.05\n    \n    def _calculate_earnings_predictability(self, df):\n        \"\"\"Calculate earnings predictability score.\"\"\"\n        if len(df) < 8:\n            return 0.5\n        \n        earnings_cv = df['net_income'].std() / df['net_income'].mean() if df['net_income'].mean() > 0 else 1\n        return min(1.0, max(0.0, 1 / (1 + earnings_cv)))\n    \n    def _calculate_earnings_quality(self, df):\n        \"\"\"Calculate earnings quality.\"\"\"\n        return 0.6  # Simplified\n    \n    def _calculate_roa_trend(self, df):\n        \"\"\"Calculate ROA trend score.\"\"\"\n        if len(df) < 8:\n            return 0.5\n        \n        df['roa'] = df['net_income'] / df['total_assets']\n        roa_trend = df['roa'].pct_change().mean()\n        return min(1.0, max(0.0, 0.5 + roa_trend * 10))\n    \n    def _calculate_asset_efficiency(self, df):\n        \"\"\"Calculate asset efficiency trend.\"\"\"\n        return 0.6  # Simplified\n    \n    def _get_industry_growth_rate(self, sector):\n        \"\"\"Get industry growth rate based on sector.\"\"\"\n        growth_rates = {\n            'Technology': 0.8,\n            'Healthcare': 0.7,\n            'Consumer Discretionary': 0.6,\n            'Consumer Cyclical': 0.6,\n            'Industrials': 0.5,\n            'Financial Services': 0.4,\n            'Communication Services': 0.6,\n            'Energy': 0.3,\n            'Utilities': 0.3,\n            'Real Estate': 0.4,\n            'Basic Materials': 0.4\n        }\n        return growth_rates.get(sector, 0.5)\n    \n    def _calculate_market_penetration(self, market_cap):\n        \"\"\"Calculate market penetration score based on market cap.\"\"\"\n        if not market_cap:\n            return 0.5\n        \n        if market_cap > 100e9:  # Large cap\n            return 0.4  # Limited growth potential\n        elif market_cap > 10e9:  # Mid cap\n            return 0.6  # Moderate growth potential\n        else:  # Small cap\n            return 0.8  # High growth potential\n    \n    def _calculate_confidence(self, *metric_groups):\n        \"\"\"Calculate confidence score based on data availability.\"\"\"\n        total_metrics = sum(len(group) for group in metric_groups)\n        if total_metrics == 0:\n            return 0.3\n        \n        available_metrics = sum(1 for group in metric_groups for value in group.values() if value != 0.5)\n        return min(1.0, available_metrics / total_metrics)\n    \n    def _default_growth_metrics(self, symbol):\n        \"\"\"Return default growth metrics.\"\"\"\n        return {\n            'symbol': symbol,\n            'revenue_growth_score': 0.5,\n            'earnings_growth_score': 0.5,\n            'fundamental_growth_score': 0.5,\n            'market_expansion_score': 0.5,\n            'growth_composite_score': 0.5,\n            'confidence_score': 0.3,\n            'revenue_metrics': {},\n            'earnings_metrics': {},\n            'fundamental_metrics': {},\n            'market_metrics': {}\n        }\n\ndef main():\n    \"\"\"Main execution function.\"\"\"\n    logger.info(\"Starting growth metrics calculation...\")\n    \n    conn = get_db_connection()\n    if not conn:\n        logger.error(\"Failed to connect to database\")\n        sys.exit(1)\n    \n    try:\n        calculator = GrowthMetricsCalculator(conn)\n        \n        # Create tables\n        logger.info(\"Creating growth metrics tables...\")\n        calculator.create_growth_tables()\n        \n        # Get stock list\n        logger.info(\"Getting stock list...\")\n        stocks = calculator.get_stock_list()\n        logger.info(f\"Found {len(stocks)} stocks to analyze\")\n        \n        # Calculate growth metrics for each stock\n        processed = 0\n        errors = 0\n        \n        for symbol in stocks:\n            try:\n                calculator.save_growth_metrics(symbol)\n                processed += 1\n                \n                if processed % 10 == 0:\n                    logger.info(f\"Processed {processed}/{len(stocks)} stocks\")\n                    \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {e}\")\n                errors +",
      "context": "    117:                 SELECT DISTINCT symbol \n    118:                 FROM stock_symbols \n>>> 119:                 WHERE symbol IS NOT NULL \n    120:                 ORDER BY symbol\n    121:                 LIMIT 100"
    },
    {
      "file": "calculate_quality_metrics.py",
      "line": 618,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s \n            ORDER BY updated_at DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(db_query, (symbol,))\n        \n        if result.rows:\n            # Convert database row to dictionary\n            columns = [desc[0] for desc in result.description]\n            return dict(zip(columns, result.rows[0]))\n        else:\n            logger.warning(f\"No financial data found in database for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting financial data for {symbol}: {str(e)}\")\n        return {}\n\ndef main():\n    \"\"\"Main function to calculate quality metrics for all stocks\"\"\"\n    try:\n        logger.info(\"Starting quality metrics calculation\")\n        \n        # Initialize database connection\n        initializeDatabase()\n        \n        # Initialize calculator\n        calculator = QualityMetricsCalculator()\n        \n        # Get list of active stocks\n        stocks_query = \"SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true\"\n        stocks_result = query(stocks_query)\n        \n        if not stocks_result.rows:\n            logger.warning(\"No active stocks found in database\")\n            return\n        \n        symbols = [row[0] for row in stocks_result.rows]\n        logger.info(f\"Processing {len(symbols)} symbols\")\n        \n        successful_calculations = 0\n        failed_calculations = 0\n        \n        for symbol in symbols:\n            try:\n                # Get financial data\n                financial_data = get_financial_data_for_symbol(symbol)\n                \n                if not financial_data:\n                    logger.warning(f\"No financial data available for {symbol}\")\n                    failed_calculations += 1\n                    continue\n                \n                # Calculate quality metrics\n                quality_results = calculator.calculate_quality_metrics(symbol, financial_data)\n                \n                # Save to database\n                if calculator.save_to_database(quality_results):\n                    successful_calculations += 1\n                    logger.info(f\"Processed {symbol}: Quality Metric = {quality_results.get('quality_metric', 0):.4f}\")\n                else:\n                    failed_calculations += 1\n                    logger.error(f\"Failed to save results for {symbol}\")\n                \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {str(e)}\")\n                failed_calculations +",
      "context": "    616:         db_query = \"\"\"\n    617:             SELECT * FROM company_profile \n>>> 618:             WHERE symbol = %s \n    619:             ORDER BY updated_at DESC \n    620:             LIMIT 1"
    },
    {
      "file": "calculate_quality_scores.py",
      "line": 612,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s \n            ORDER BY updated_at DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(db_query, (symbol,))\n        \n        if result.rows:\n            # Convert database row to dictionary\n            return dict(result.rows[0])\n        else:\n            logger.warning(f\"No financial data found in database for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting financial data for {symbol}: {str(e)}\")\n        return {}\n\ndef main():\n    \"\"\"Main function to calculate quality scores for all stocks\"\"\"\n    try:\n        logger.info(\"Starting quality score calculation\")\n        \n        # Initialize database connection\n        initializeDatabase()\n        \n        # Initialize calculator\n        calculator = QualityScoreCalculator()\n        \n        # Get list of active stocks\n        stocks_query = \"SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true\"\n        stocks_result = query(stocks_query)\n        \n        if not stocks_result.rows:\n            logger.warning(\"No active stocks found in database\")\n            return\n        \n        symbols = [row[0] for row in stocks_result.rows]\n        logger.info(f\"Processing {len(symbols)} symbols\")\n        \n        successful_calculations = 0\n        failed_calculations = 0\n        \n        for symbol in symbols:\n            try:\n                # Get financial data\n                financial_data = get_financial_data_for_symbol(symbol)\n                \n                if not financial_data:\n                    logger.warning(f\"No financial data available for {symbol}\")\n                    failed_calculations += 1\n                    continue\n                \n                # Calculate quality score\n                quality_results = calculator.calculate_quality_score(symbol, financial_data)\n                \n                # Save to database\n                if calculator.save_to_database(quality_results):\n                    successful_calculations += 1\n                    logger.info(f\"Processed {symbol}: Quality Score = {quality_results.get('quality_score', 0):.2f}\")\n                else:\n                    failed_calculations += 1\n                    logger.error(f\"Failed to save results for {symbol}\")\n                \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {str(e)}\")\n                failed_calculations +",
      "context": "    610:         db_query = \"\"\"\n    611:             SELECT * FROM company_profile \n>>> 612:             WHERE symbol = %s \n    613:             ORDER BY updated_at DESC \n    614:             LIMIT 1"
    },
    {
      "file": "calculate_value_metrics.py",
      "line": 547,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE sector = %s \n                    AND trailing_pe > 0 \n                    AND trailing_pe < 100\n                    AND price_to_book > 0\n                \"\"\"\n                \n                result = query(benchmark_query, (sector,))\n                \n                if result.rows and result.rows[0][0]:\n                    return {\n                        'pe_median': float(result.rows[0][0]),\n                        'pb_median': float(result.rows[0][1]),\n                        'company_count': int(result.rows[0][2])\n                    }\n            \n            # Default benchmarks if sector data not available\n            return {\n                'pe_median': 18.0,  # Market average\n                'pb_median': 2.5,   # Market average\n                'company_count': 0\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error getting sector benchmarks for {sector}: {str(e)}\")\n            return {'pe_median': 18.0, 'pb_median': 2.5, 'company_count': 0}\n    \n    def _calculate_historical_valuation_metric(self, financial_data: Dict, symbol: str) -> float:\n        \"\"\"Calculate metric based on historical valuation ranges\"\"\"\n        try:\n            pe_ratio = financial_data.get('trailingPE', 0)\n            pb_ratio = financial_data.get('priceToBook', 0)\n            \n            # Reasonable historical ranges\n            pe_historical_metric = 0.5\n            if pe_ratio:\n                if 15 <= pe_ratio <= 20:\n                    pe_historical_metric = 0.7 + (20 - abs(pe_ratio - 17.5)) * 0.04\n                elif 10 <= pe_ratio < 15:\n                    pe_historical_metric = 0.8 + (pe_ratio - 10) * 0.02\n                elif 20 < pe_ratio <= 25:\n                    pe_historical_metric = 0.5 + (25 - pe_ratio) * 0.04\n                elif pe_ratio < 10:\n                    pe_historical_metric = 0.85 + min(0.15, (10 - pe_ratio) * 0.03)\n                else:\n                    pe_historical_metric = max(0.0, 0.5 - (pe_ratio - 25) * 0.02)\n            \n            pb_historical_metric = 0.5\n            if pb_ratio:\n                if 2.0 <= pb_ratio <= 3.0:\n                    pb_historical_metric = 0.7 + (3.0 - abs(pb_ratio - 2.5)) * 0.2\n                elif 1.0 <= pb_ratio < 2.0:\n                    pb_historical_metric = 0.8 + (pb_ratio - 1.0) * 0.1\n                elif pb_ratio < 1.0:\n                    pb_historical_metric = 0.9 + min(0.1, (1.0 - pb_ratio) * 0.2)\n                else:\n                    pb_historical_metric = max(0.0, 0.7 - (pb_ratio - 3.0) * 0.15)\n            \n            # Weight P/E more heavily\n            historical_metric = pe_historical_metric * 0.7 + pb_historical_metric * 0.3\n            \n            return historical_metric\n            \n        except Exception as e:\n            logger.error(f\"Error calculating historical valuation metric: {str(e)}\")\n            return 0.5\n    \n    def calculate_value_metrics(self, symbol: str, financial_data: Dict, market_data: Dict) -> Dict:\n        \"\"\"Calculate comprehensive value metrics for a stock\"\"\"\n        try:\n            logger.info(f\"Calculating value metrics for {symbol}\")\n            \n            # Calculate sub-components\n            multiples_metric, multiples_components = self.calculate_traditional_multiples_metric(financial_data, market_data)\n            intrinsic_metric, intrinsic_components = self.calculate_intrinsic_value_metric(financial_data, market_data)\n            relative_metric, relative_components = self.calculate_relative_value_metric(financial_data, symbol)\n            \n            # Calculate weighted composite value metric\n            value_metric = (\n                multiples_metric * self.weights['traditional_multiples'] +\n                intrinsic_metric * self.weights['intrinsic_value'] +\n                relative_metric * self.weights['relative_value']\n            )\n            \n            # Ensure metric is between 0 and 1\n            value_metric = max(0, min(1, value_metric))\n            \n            result = {\n                'symbol': symbol,\n                'date': datetime.now().strftime('%Y-%m-%d'),\n                'value_metric': round(value_metric, 4),\n                'sub_metrics': {\n                    'traditional_multiples': round(multiples_metric, 4),\n                    'intrinsic_value': round(intrinsic_metric, 4),\n                    'relative_value': round(relative_metric, 4)\n                },\n                'components': {\n                    'multiples': multiples_components,\n                    'intrinsic': intrinsic_components,\n                    'relative': relative_components\n                },\n                'weights_used': self.weights,\n                'confidence_score': self._calculate_confidence(financial_data, market_data),\n                'calculation_timestamp': datetime.now().isoformat()\n            }\n            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error calculating value metrics for {symbol}: {str(e)}\")\n            return {\n                'symbol': symbol,\n                'value_metric': 0,\n                'error': str(e),\n                'calculation_timestamp': datetime.now().isoformat()\n            }\n    \n    def _calculate_confidence(self, financial_data: Dict, market_data: Dict) -> float:\n        \"\"\"Calculate confidence metric based on data completeness and quality\"\"\"\n        critical_fields = [\n            'totalRevenue', 'netIncome', 'totalAssets', 'freeCashflow',\n            'trailingPE', 'priceToBook', 'marketCap', 'sharesOutstanding'\n        ]\n        \n        available_fields = sum(1 for field in critical_fields if financial_data.get(field) is not None)\n        completeness = available_fields / len(critical_fields)\n        \n        # Adjust for market data availability\n        if market_data.get('currentPrice'):\n            completeness += 0.1\n        \n        return round(min(0.95, completeness), 2)\n    \n    def save_to_database(self, value_results: Dict) -> bool:\n        \"\"\"Save value metrics to database\"\"\"\n        try:\n            symbol = value_results['symbol']\n            date = value_results['date']\n            \n            # Extract detailed component values\n            components = value_results.get('components', {})\n            multiples = components.get('multiples', {})\n            intrinsic = components.get('intrinsic', {})\n            relative = components.get('relative', {})\n            \n            insert_query = \"\"\"\n                INSERT INTO value_metrics (\n                    symbol, date, value_metric,\n                    multiples_metric, intrinsic_value_metric, relative_value_metric,\n                    pe_metric, pb_metric, ev_ebitda_metric, ev_sales_metric,\n                    dcf_intrinsic_value, dcf_margin_of_safety, ddm_value, rim_value,\n                    sector_pe_percentile, historical_pe_percentile,\n                    current_pe, current_pb, current_ev_ebitda,\n                    confidence_score, data_completeness,\n                    sector, market_cap_tier\n                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                ON CONFLICT (symbol, date) DO UPDATE SET\n                    value_metric = EXCLUDED.value_metric,\n                    multiples_metric = EXCLUDED.multiples_metric,\n                    intrinsic_value_metric = EXCLUDED.intrinsic_value_metric,\n                    relative_value_metric = EXCLUDED.relative_value_metric,\n                    pe_metric = EXCLUDED.pe_metric,\n                    pb_metric = EXCLUDED.pb_metric,\n                    ev_ebitda_metric = EXCLUDED.ev_ebitda_metric,\n                    ev_sales_metric = EXCLUDED.ev_sales_metric,\n                    dcf_intrinsic_value = EXCLUDED.dcf_intrinsic_value,\n                    dcf_margin_of_safety = EXCLUDED.dcf_margin_of_safety,\n                    ddm_value = EXCLUDED.ddm_value,\n                    rim_value = EXCLUDED.rim_value,\n                    sector_pe_percentile = EXCLUDED.sector_pe_percentile,\n                    historical_pe_percentile = EXCLUDED.historical_pe_percentile,\n                    current_pe = EXCLUDED.current_pe,\n                    current_pb = EXCLUDED.current_pb,\n                    current_ev_ebitda = EXCLUDED.current_ev_ebitda,\n                    confidence_score = EXCLUDED.confidence_score,\n                    data_completeness = EXCLUDED.data_completeness,\n                    updated_at = CURRENT_TIMESTAMP\n            \"\"\"\n            \n            values = (\n                symbol, date, value_results.get('value_metric', 0),\n                value_results.get('sub_metrics', {}).get('traditional_multiples', 0),\n                value_results.get('sub_metrics', {}).get('intrinsic_value', 0),\n                value_results.get('sub_metrics', {}).get('relative_value', 0),\n                multiples.get('pe_metric', 0),\n                multiples.get('pb_metric', 0),\n                multiples.get('ev_ebitda_metric', 0),\n                multiples.get('ev_sales_metric', 0),\n                intrinsic.get('dcf_intrinsic_value'),\n                intrinsic.get('dcf_margin_of_safety'),\n                intrinsic.get('ddm_value'),\n                intrinsic.get('rim_value'),\n                relative.get('sector_pe_percentile'),\n                relative.get('historical_pe_percentile'),\n                multiples.get('pe_ratio'),\n                multiples.get('pb_ratio'),\n                multiples.get('ev_ebitda'),\n                value_results.get('confidence_score', 0),\n                value_results.get('confidence_score', 0),  # Using confidence as proxy for completeness\n                None,  # sector - to be populated from company_profile\n                None   # market_cap_tier - to be populated from company_profile\n            )\n            \n            query(insert_query, values)\n            logger.info(f\"Saved value metrics for {symbol}: {value_results.get('value_metric', 0):.4f}\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Error saving value metrics to database: {str(e)}\")\n            return False\n\ndef get_market_data_for_symbol(symbol: str) -> Dict:\n    \"\"\"Get current market data for a symbol\"\"\"\n    try:\n        price_query = \"\"\"\n            SELECT close as currentPrice, volume\n            FROM price_daily \n            WHERE symbol = %s \n            ORDER BY date DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(price_query, (symbol,))\n        \n        if result.rows:\n            return {\n                'currentPrice': float(result.rows[0][0]),\n                'volume': int(result.rows[0][1]) if result.rows[0][1] else 0\n            }\n        else:\n            logger.warning(f\"No market data found for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting market data for {symbol}: {str(e)}\")\n        return {}\n\ndef get_financial_data_for_symbol(symbol: str) -> Dict:\n    \"\"\"Get financial data for a symbol from database\"\"\"\n    try:\n        financial_query = \"\"\"\n            SELECT * FROM company_profile \n            WHERE symbol = %s \n            ORDER BY updated_at DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(financial_query, (symbol,))\n        \n        if result.rows:\n            columns = [desc[0] for desc in result.description]\n            return dict(zip(columns, result.rows[0]))\n        else:\n            logger.warning(f\"No financial data found for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting financial data for {symbol}: {str(e)}\")\n        return {}\n\ndef main():\n    \"\"\"Main function to calculate value metrics for all stocks\"\"\"\n    try:\n        logger.info(\"Starting value metrics calculation\")\n        \n        # Initialize database connection\n        initializeDatabase()\n        \n        # Initialize calculator\n        calculator = ValueMetricsCalculator()\n        \n        # Get list of active stocks\n        stocks_query = \"SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true\"\n        stocks_result = query(stocks_query)\n        \n        if not stocks_result.rows:\n            logger.warning(\"No active stocks found in database\")\n            return\n        \n        symbols = [row[0] for row in stocks_result.rows]\n        logger.info(f\"Processing {len(symbols)} symbols\")\n        \n        successful_calculations = 0\n        failed_calculations = 0\n        \n        for symbol in symbols:\n            try:\n                # Get financial and market data\n                financial_data = get_financial_data_for_symbol(symbol)\n                market_data = get_market_data_for_symbol(symbol)\n                \n                if not financial_data:\n                    logger.warning(f\"No financial data available for {symbol}\")\n                    failed_calculations += 1\n                    continue\n                \n                # Calculate value metrics\n                value_results = calculator.calculate_value_metrics(symbol, financial_data, market_data)\n                \n                # Save to database\n                if calculator.save_to_database(value_results):\n                    successful_calculations += 1\n                    logger.info(f\"Processed {symbol}: Value Metric = {value_results.get('value_metric', 0):.4f}\")\n                else:\n                    failed_calculations += 1\n                    logger.error(f\"Failed to save results for {symbol}\")\n                \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {str(e)}\")\n                failed_calculations +",
      "context": "    545:                         COUNT(*) as company_count\n    546:                     FROM company_profile \n>>> 547:                     WHERE sector = %s \n    548:                     AND trailing_pe > 0 \n    549:                     AND trailing_pe < 100"
    },
    {
      "file": "calculate_value_scores.py",
      "line": 543,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE sector = %s \n                    AND trailing_pe > 0 \n                    AND trailing_pe < 100\n                    AND price_to_book > 0\n                \"\"\"\n                \n                result = query(benchmark_query, (sector,))\n                \n                if result.rows and result.rows[0][0]:\n                    return {\n                        'pe_median': float(result.rows[0][0]),\n                        'pb_median': float(result.rows[0][1]),\n                        'company_count': int(result.rows[0][2])\n                    }\n            \n            # Default benchmarks if sector data not available\n            return {\n                'pe_median': 18.0,  # Market average\n                'pb_median': 2.5,   # Market average\n                'company_count': 0\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error getting sector benchmarks for {sector}: {str(e)}\")\n            return {'pe_median': 18.0, 'pb_median': 2.5, 'company_count': 0}\n    \n    def _calculate_historical_valuation_score(self, financial_data: Dict, symbol: str) -> float:\n        \"\"\"\n        Calculate score based on historical valuation ranges\n        \n        Args:\n            financial_data: Financial data\n            symbol: Stock symbol\n            \n        Returns:\n            Historical valuation score\n        \"\"\"\n        try:\n            # This would require historical data - for now use current metrics vs reasonable ranges\n            pe_ratio = financial_data.get('trailingPE', 0)\n            pb_ratio = financial_data.get('priceToBook', 0)\n            \n            # Assume reasonable historical ranges\n            # P/E: 10-25 typical range, 15-20 = fair value\n            # P/B: 1-4 typical range, 2-3 = fair value\n            \n            pe_historical_score = 50\n            if pe_ratio:\n                if 15 <= pe_ratio <= 20:\n                    pe_historical_score = 70 + (20 - abs(pe_ratio - 17.5)) * 4\n                elif 10 <= pe_ratio < 15:\n                    pe_historical_score = 80 + (pe_ratio - 10) * 2\n                elif 20 < pe_ratio <= 25:\n                    pe_historical_score = 50 + (25 - pe_ratio) * 4\n                elif pe_ratio < 10:\n                    pe_historical_score = 85 + min(15, (10 - pe_ratio) * 3)\n                else:\n                    pe_historical_score = max(0, 50 - (pe_ratio - 25) * 2)\n            \n            pb_historical_score = 50\n            if pb_ratio:\n                if 2.0 <= pb_ratio <= 3.0:\n                    pb_historical_score = 70 + (3.0 - abs(pb_ratio - 2.5)) * 20\n                elif 1.0 <= pb_ratio < 2.0:\n                    pb_historical_score = 80 + (pb_ratio - 1.0) * 10\n                elif pb_ratio < 1.0:\n                    pb_historical_score = 90 + min(10, (1.0 - pb_ratio) * 20)\n                else:\n                    pb_historical_score = max(0, 70 - (pb_ratio - 3.0) * 15)\n            \n            # Weight P/E more heavily\n            historical_score = pe_historical_score * 0.7 + pb_historical_score * 0.3\n            \n            return historical_score\n            \n        except Exception as e:\n            logger.error(f\"Error calculating historical valuation score: {str(e)}\")\n            return 50.0\n    \n    def calculate_value_score(self, symbol: str, financial_data: Dict, market_data: Dict) -> Dict:\n        \"\"\"\n        Calculate comprehensive value score for a stock\n        \n        Args:\n            symbol: Stock symbol\n            financial_data: Financial statement data\n            market_data: Market data\n            \n        Returns:\n            Dictionary with value score and all components\n        \"\"\"\n        try:\n            logger.info(f\"Calculating value score for {symbol}\")\n            \n            # Calculate sub-components\n            multiples_score, multiples_components = self.calculate_traditional_multiples_score(financial_data, market_data)\n            intrinsic_score, intrinsic_components = self.calculate_intrinsic_value_score(financial_data, market_data)\n            relative_score, relative_components = self.calculate_relative_value_score(financial_data, symbol)\n            \n            # Calculate weighted composite value score\n            value_score = (\n                multiples_score * self.weights['traditional_multiples'] +\n                intrinsic_score * self.weights['intrinsic_value'] +\n                relative_score * self.weights['relative_value']\n            )\n            \n            # Ensure score is between 0 and 100\n            value_score = max(0, min(100, value_score))\n            \n            result = {\n                'symbol': symbol,\n                'date': datetime.now().strftime('%Y-%m-%d'),\n                'value_score': round(value_score, 2),\n                'sub_scores': {\n                    'traditional_multiples': round(multiples_score, 2),\n                    'intrinsic_value': round(intrinsic_score, 2),\n                    'relative_value': round(relative_score, 2)\n                },\n                'components': {\n                    'multiples': multiples_components,\n                    'intrinsic': intrinsic_components,\n                    'relative': relative_components\n                },\n                'weights_used': self.weights,\n                'confidence_score': self._calculate_confidence(financial_data, market_data),\n                'calculation_timestamp': datetime.now().isoformat()\n            }\n            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error calculating value score for {symbol}: {str(e)}\")\n            return {\n                'symbol': symbol,\n                'value_score': 0,\n                'error': str(e),\n                'calculation_timestamp': datetime.now().isoformat()\n            }\n    \n    def _calculate_confidence(self, financial_data: Dict, market_data: Dict) -> float:\n        \"\"\"\n        Calculate confidence score based on data completeness and quality\n        \n        Args:\n            financial_data: Financial data dictionary\n            market_data: Market data dictionary\n            \n        Returns:\n            Confidence score (0-1)\n        \"\"\"\n        critical_fields = [\n            'totalRevenue', 'netIncome', 'totalAssets', 'freeCashflow',\n            'trailingPE', 'priceToBook', 'marketCap', 'sharesOutstanding'\n        ]\n        \n        available_fields = sum(1 for field in critical_fields if financial_data.get(field) is not None)\n        completeness = available_fields / len(critical_fields)\n        \n        # Adjust for market data availability\n        if market_data.get('currentPrice'):\n            completeness += 0.1\n        \n        # Base confidence on data completeness\n        return round(min(0.95, completeness), 2)  # Max 95% confidence\n    \n    def save_to_database(self, value_results: Dict) -> bool:\n        \"\"\"\n        Save value score results to database\n        \n        Args:\n            value_results: Value score calculation results\n            \n        Returns:\n            Success status\n        \"\"\"\n        try:\n            symbol = value_results['symbol']\n            date = value_results['date']\n            \n            # Update stock_scores table with value scores\n            update_query = \"\"\"\n                INSERT INTO stock_scores (\n                    symbol, date, value_score,\n                    multiples_subscore, intrinsic_value_subscore, relative_value_subscore,\n                    confidence_score, data_completeness\n                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n                ON CONFLICT (symbol, date) DO UPDATE SET\n                    value_score = EXCLUDED.value_score,\n                    multiples_subscore = EXCLUDED.multiples_subscore,\n                    intrinsic_value_subscore = EXCLUDED.intrinsic_value_subscore,\n                    relative_value_subscore = EXCLUDED.relative_value_subscore,\n                    confidence_score = GREATEST(stock_scores.confidence_score, EXCLUDED.confidence_score),\n                    data_completeness = GREATEST(stock_scores.data_completeness, EXCLUDED.data_completeness),\n                    updated_at = CURRENT_TIMESTAMP\n            \"\"\"\n            \n            values = (\n                symbol, date, value_results.get('value_score', 0),\n                value_results.get('sub_scores', {}).get('traditional_multiples', 0),\n                value_results.get('sub_scores', {}).get('intrinsic_value', 0),\n                value_results.get('sub_scores', {}).get('relative_value', 0),\n                value_results.get('confidence_score', 0),\n                value_results.get('confidence_score', 0)  # Using confidence as proxy for completeness\n            )\n            \n            query(update_query, values)\n            logger.info(f\"Saved value score for {symbol}: {value_results.get('value_score', 0):.2f}\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Error saving value score to database: {str(e)}\")\n            return False\n\ndef get_market_data_for_symbol(symbol: str) -> Dict:\n    \"\"\"\n    Get current market data for a symbol\n    \n    Args:\n        symbol: Stock symbol\n        \n    Returns:\n        Dictionary with market data\n    \"\"\"\n    try:\n        # Try to get from latest price data\n        price_query = \"\"\"\n            SELECT close as currentPrice, volume\n            FROM price_daily \n            WHERE symbol = %s \n            ORDER BY date DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(price_query, (symbol,))\n        \n        if result.rows:\n            return {\n                'currentPrice': float(result.rows[0][0]),\n                'volume': int(result.rows[0][1]) if result.rows[0][1] else 0\n            }\n        else:\n            logger.warning(f\"No market data found for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting market data for {symbol}: {str(e)}\")\n        return {}\n\ndef get_financial_data_for_symbol(symbol: str) -> Dict:\n    \"\"\"\n    Get financial data for a symbol from database\n    \n    Args:\n        symbol: Stock symbol\n        \n    Returns:\n        Dictionary with financial data\n    \"\"\"\n    try:\n        # Get from company_profile table\n        financial_query = \"\"\"\n            SELECT * FROM company_profile \n            WHERE symbol = %s \n            ORDER BY updated_at DESC \n            LIMIT 1\n        \"\"\"\n        \n        result = query(financial_query, (symbol,))\n        \n        if result.rows:\n            # Convert database row to dictionary\n            return dict(result.rows[0])\n        else:\n            logger.warning(f\"No financial data found for {symbol}\")\n            return {}\n            \n    except Exception as e:\n        logger.error(f\"Error getting financial data for {symbol}: {str(e)}\")\n        return {}\n\ndef main():\n    \"\"\"Main function to calculate value scores for all stocks\"\"\"\n    try:\n        logger.info(\"Starting value score calculation\")\n        \n        # Initialize database connection\n        initializeDatabase()\n        \n        # Initialize calculator\n        calculator = ValueScoreCalculator()\n        \n        # Get list of active stocks\n        stocks_query = \"SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true\"\n        stocks_result = query(stocks_query)\n        \n        if not stocks_result.rows:\n            logger.warning(\"No active stocks found in database\")\n            return\n        \n        symbols = [row[0] for row in stocks_result.rows]\n        logger.info(f\"Processing {len(symbols)} symbols\")\n        \n        successful_calculations = 0\n        failed_calculations = 0\n        \n        for symbol in symbols:\n            try:\n                # Get financial and market data\n                financial_data = get_financial_data_for_symbol(symbol)\n                market_data = get_market_data_for_symbol(symbol)\n                \n                if not financial_data:\n                    logger.warning(f\"No financial data available for {symbol}\")\n                    failed_calculations += 1\n                    continue\n                \n                # Calculate value score\n                value_results = calculator.calculate_value_score(symbol, financial_data, market_data)\n                \n                # Save to database\n                if calculator.save_to_database(value_results):\n                    successful_calculations += 1\n                    logger.info(f\"Processed {symbol}: Value Score = {value_results.get('value_score', 0):.2f}\")\n                else:\n                    failed_calculations += 1\n                    logger.error(f\"Failed to save results for {symbol}\")\n                \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {str(e)}\")\n                failed_calculations +",
      "context": "    541:                         COUNT(*) as company_count\n    542:                     FROM company_profile \n>>> 543:                     WHERE sector = %s \n    544:                     AND trailing_pe > 0 \n    545:                     AND trailing_pe < 100"
    },
    {
      "file": "data_quality_validation.py",
      "line": 154,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where High < Open/Close/Low\",\n                {'invalid_high_dates': invalid_high.index.tolist()},\n                passed=False\n            ))\n        \n        # Low should be <= Open, Close, High\n        invalid_low = data[(data['Low'] > data['Open']) | \n                          (data['Low'] > data['Close']) | \n                          (data['Low'] > data['High'])]\n        \n        if not invalid_low.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.ERROR,\n                f\"Found {len(invalid_low)} rows where Low > Open/Close/High\",\n                {'invalid_low_dates': invalid_low.index.tolist()},\n                passed=False\n            ))\n        \n        return results\n    \n    def _check_price_continuity(self, data: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Check for unusual price gaps and changes\"\"\"\n        results = []\n        \n        if len(data) < 2:\n            return results\n        \n        # Calculate daily returns\n        data_sorted = data.sort_index()\n        daily_returns = data_sorted['Close'].pct_change().dropna()\n        \n        # Check for extreme daily changes\n        extreme_changes = daily_returns[abs(daily_returns) > self.max_daily_change]\n        \n        if not extreme_changes.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.WARNING,\n                f\"Found {len(extreme_changes)} days with extreme price changes (>{self.max_daily_change:.0%})\",\n                {\n                    'extreme_change_dates': extreme_changes.index.tolist(),\n                    'extreme_changes': extreme_changes.to_dict()\n                }\n            ))\n        \n        # Check for consecutive identical prices (potential stale data)\n        consecutive_same = []\n        prev_price = None\n        same_count = 0\n        \n        for date, price in data_sorted['Close'].items():\n            if prev_price is not None and price == prev_price:\n                same_count += 1\n            else:\n                if same_count >= 5:  # 5+ consecutive same prices\n                    consecutive_same.append({\n                        'end_date': date,\n                        'count': same_count,\n                        'price': prev_price\n                    })\n                same_count = 0\n            prev_price = price\n        \n        if consecutive_same:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.WARNING,\n                f\"Found {len(consecutive_same)} periods of consecutive identical prices\",\n                {'consecutive_same_periods': consecutive_same}\n            ))\n        \n        return results\n    \n    def _check_volume_data(self, data: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Validate volume data\"\"\"\n        results = []\n        \n        # Check for negative volume\n        negative_volume = data[data['Volume'] < 0]\n        if not negative_volume.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.ERROR,\n                f\"Found {len(negative_volume)} rows with negative volume\",\n                {'negative_volume_dates': negative_volume.index.tolist()},\n                passed=False\n            ))\n        \n        # Check for zero volume (suspicious for liquid stocks)\n        zero_volume = data[data['Volume'] == 0]\n        if not zero_volume.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.WARNING,\n                f\"Found {len(zero_volume)} rows with zero volume\",\n                {'zero_volume_dates': zero_volume.index.tolist()}\n            ))\n        \n        # Check for volume spikes\n        if len(data) > 20:\n            volume_mean = data['Volume'].rolling(20).mean()\n            volume_spikes = data[data['Volume'] > volume_mean * self.volume_spike_threshold]\n            \n            if not volume_spikes.empty:\n                results.append(self._create_result(\n                    symbol, ValidationSeverity.INFO,\n                    f\"Found {len(volume_spikes)} days with unusual volume spikes\",\n                    {'volume_spike_dates': volume_spikes.index.tolist()}\n                ))\n        \n        return results\n    \n    def _check_splits_and_dividends(self, data: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Check for potential stock splits and dividend events\"\"\"\n        results = []\n        \n        if len(data) < 2:\n            return results\n        \n        # Check for potential stock splits (large overnight gaps with volume)\n        data_sorted = data.sort_index()\n        overnight_changes = data_sorted['Open'] / data_sorted['Close'].shift(1) - 1\n        \n        # Look for changes that might indicate splits (>10% gap down with high volume)\n        potential_splits = data_sorted[\n            (overnight_changes < -0.10) & \n            (data_sorted['Volume'] > data_sorted['Volume'].rolling(10).mean() * 2)\n        ]\n        \n        if not potential_splits.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.INFO,\n                f\"Found {len(potential_splits)} potential stock split/dividend events\",\n                {'potential_split_dates': potential_splits.index.tolist()}\n            ))\n        \n        return results\n    \n    def _check_outliers(self, data: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Detect statistical outliers in price data\"\"\"\n        results = []\n        \n        if len(data) < 30:\n            return results\n        \n        # Calculate z-scores for returns\n        returns = data['Close'].pct_change().dropna()\n        z_scores = np.abs(stats.zscore(returns))\n        \n        # Find extreme outliers (z-score > 4)\n        outliers = returns[z_scores > 4]\n        \n        if not outliers.empty:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.WARNING,\n                f\"Found {len(outliers)} statistical outliers in returns\",\n                {\n                    'outlier_dates': outliers.index.tolist(),\n                    'outlier_returns': outliers.to_dict()\n                }\n            ))\n        \n        return results\n\nclass FinancialStatementValidator(BaseValidator):\n    \"\"\"\n    Validates financial statement data for consistency and accuracy\n    \"\"\"\n    \n    def __init__(self):\n        super().__init__(\"FinancialStatementValidator\")\n    \n    def validate(self, financial_data: Dict, symbol: str = None) -> List[ValidationResult]:\n        \"\"\"Validate financial statement data\"\"\"\n        results = []\n        \n        if not financial_data:\n            results.append(self._create_result(\n                symbol, ValidationSeverity.ERROR,\n                \"No financial data available\", passed=False\n            ))\n            return results\n        \n        # Validate balance sheet\n        if 'balance_sheet' in financial_data:\n            results.extend(self._validate_balance_sheet(financial_data['balance_sheet'], symbol))\n        \n        # Validate income statement\n        if 'income_statement' in financial_data:\n            results.extend(self._validate_income_statement(financial_data['income_statement'], symbol))\n        \n        # Validate cash flow statement\n        if 'cash_flow' in financial_data:\n            results.extend(self._validate_cash_flow(financial_data['cash_flow'], symbol))\n        \n        # Cross-statement validations\n        results.extend(self._validate_cross_statements(financial_data, symbol))\n        \n        return results\n    \n    def _validate_balance_sheet(self, balance_sheet: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Validate balance sheet equation and relationships\"\"\"\n        results = []\n        \n        if balance_sheet.empty:\n            return results\n        \n        # Check balance sheet equation: Assets = Liabilities + Equity\n        for date in balance_sheet.columns:\n            try:\n                total_assets = balance_sheet.loc['Total Assets', date] if 'Total Assets' in balance_sheet.index else 0\n                total_liab = balance_sheet.loc['Total Liab', date] if 'Total Liab' in balance_sheet.index else 0\n                total_equity = balance_sheet.loc['Total Stockholder Equity', date] if 'Total Stockholder Equity' in balance_sheet.index else 0\n                \n                if total_assets != 0:\n                    balance_diff = abs(total_assets - (total_liab + total_equity)) / total_assets\n                    \n                    if balance_diff > 0.01:  # 1% tolerance\n                        results.append(self._create_result(\n                            symbol, ValidationSeverity.WARNING,\n                            f\"Balance sheet equation imbalance on {date}: {balance_diff:.2%}\",\n                            {\n                                'date': str(date),\n                                'assets': total_assets,\n                                'liabilities': total_liab,\n                                'equity': total_equity,\n                                'imbalance_pct': balance_diff\n                            }\n                        ))\n            except (KeyError, TypeError):\n                continue\n        \n        # Check for negative equity (potential distress signal)\n        try:\n            equity_row = balance_sheet.loc['Total Stockholder Equity']\n            negative_dates = equity_row[equity_row < 0].index.tolist()\n            \n            if negative_dates:\n                results.append(self._create_result(\n                    symbol, ValidationSeverity.WARNING,\n                    f\"Negative stockholder equity found on {len(negative_dates)} dates\",\n                    {'negative_equity_dates': [str(d) for d in negative_dates]}\n                ))\n        except KeyError:\n            pass\n        \n        return results\n    \n    def _validate_income_statement(self, income_statement: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Validate income statement relationships\"\"\"\n        results = []\n        \n        if income_statement.empty:\n            return results\n        \n        # Check gross profit calculation: Revenue - Cost of Revenue = Gross Profit\n        for date in income_statement.columns:\n            try:\n                revenue = income_statement.loc['Total Revenue', date] if 'Total Revenue' in income_statement.index else 0\n                cost_of_revenue = income_statement.loc['Cost Of Revenue', date] if 'Cost Of Revenue' in income_statement.index else 0\n                gross_profit = income_statement.loc['Gross Profit', date] if 'Gross Profit' in income_statement.index else 0\n                \n                if revenue != 0 and cost_of_revenue != 0:\n                    expected_gross = revenue - cost_of_revenue\n                    if abs(gross_profit - expected_gross) / revenue > 0.01:\n                        results.append(self._create_result(\n                            symbol, ValidationSeverity.WARNING,\n                            f\"Gross profit calculation inconsistency on {date}\",\n                            {\n                                'date': str(date),\n                                'revenue': revenue,\n                                'cost_of_revenue': cost_of_revenue,\n                                'reported_gross': gross_profit,\n                                'calculated_gross': expected_gross\n                            }\n                        ))\n            except (KeyError, TypeError):\n                continue\n        \n        # Check for unusual margins\n        try:\n            revenue_row = income_statement.loc['Total Revenue']\n            net_income_row = income_statement.loc['Net Income'] if 'Net Income' in income_statement.index else None\n            \n            if net_income_row is not None:\n                margins = net_income_row / revenue_row\n                extreme_margins = margins[(margins < -1.0) | (margins > 1.0)]\n                \n                if not extreme_margins.empty:\n                    results.append(self._create_result(\n                        symbol, ValidationSeverity.INFO,\n                        f\"Extreme profit margins found on {len(extreme_margins)} dates\",\n                        {'extreme_margin_dates': [str(d) for d in extreme_margins.index]}\n                    ))\n        except (KeyError, TypeError, ZeroDivisionError):\n            pass\n        \n        return results\n    \n    def _validate_cash_flow(self, cash_flow: pd.DataFrame, symbol: str) -> List[ValidationResult]:\n        \"\"\"Validate cash flow statement\"\"\"\n        results = []\n        \n        if cash_flow.empty:\n            return results\n        \n        # Check cash flow equation: Operating + Investing + Financing = Change in Cash\n        for date in cash_flow.columns:\n            try:\n                operating_cf = cash_flow.loc['Total Cash From Operating Activities', date] if 'Total Cash From Operating Activities' in cash_flow.index else 0\n                investing_cf = cash_flow.loc['Total Cashflows From Investing Activities', date] if 'Total Cashflows From Investing Activities' in cash_flow.index else 0\n                financing_cf = cash_flow.loc['Total Cash From Financing Activities', date] if 'Total Cash From Financing Activities' in cash_flow.index else 0\n                change_in_cash = cash_flow.loc['Change In Cash', date] if 'Change In Cash' in cash_flow.index else 0\n                \n                calculated_change = operating_cf + investing_cf + financing_cf\n                \n                if abs(calculated_change) > 0:\n                    diff_pct = abs(change_in_cash - calculated_change) / abs(calculated_change)\n                    \n                    if diff_pct > 0.05:  # 5% tolerance\n                        results.append(self._create_result(\n                            symbol, ValidationSeverity.WARNING,\n                            f\"Cash flow equation imbalance on {date}: {diff_pct:.2%}\",\n                            {\n                                'date': str(date),\n                                'operating_cf': operating_cf,\n                                'investing_cf': investing_cf,\n                                'financing_cf': financing_cf,\n                                'reported_change': change_in_cash,\n                                'calculated_change': calculated_change\n                            }\n                        ))\n            except (KeyError, TypeError):\n                continue\n        \n        return results\n    \n    def _validate_cross_statements(self, financial_data: Dict, symbol: str) -> List[ValidationResult]:\n        \"\"\"Validate relationships across financial statements\"\"\"\n        results = []\n        \n        # Check if net income from income statement matches cash flow statement\n        if 'income_statement' in financial_data and 'cash_flow' in financial_data:\n            income_stmt = financial_data['income_statement']\n            cash_flow = financial_data['cash_flow']\n            \n            common_dates = set(income_stmt.columns) & set(cash_flow.columns)\n            \n            for date in common_dates:\n                try:\n                    net_income_is = income_stmt.loc['Net Income', date] if 'Net Income' in income_stmt.index else 0\n                    net_income_cf = cash_flow.loc['Net Income', date] if 'Net Income' in cash_flow.index else 0\n                    \n                    if abs(net_income_is) > 0:\n                        diff_pct = abs(net_income_is - net_income_cf) / abs(net_income_is)\n                        \n                        if diff_pct > 0.01:  # 1% tolerance\n                            results.append(self._create_result(\n                                symbol, ValidationSeverity.WARNING,\n                                f\"Net income mismatch between statements on {date}: {diff_pct:.2%}\",\n                                {\n                                    'date': str(date),\n                                    'income_statement_ni': net_income_is,\n                                    'cash_flow_ni': net_income_cf\n                                }\n                            ))\n                except (KeyError, TypeError):\n                    continue\n        \n        return results\n\nclass DataQualityFramework:\n    \"\"\"\n    Main data quality validation framework\n    Orchestrates all validators and provides summary reporting\n    \"\"\"\n    \n    def __init__(self):\n        self.validators = {\n            'price_data': PriceDataValidator(),\n            'financial_statements': FinancialStatementValidator()\n        }\n        \n        self.validation_history: List[ValidationResult] = []\n    \n    def validate_symbol_data(self, symbol: str, include_financials: bool = True) -> Dict:\n        \"\"\"Validate all data for a given symbol\"\"\"\n        all_results = []\n        \n        try:\n            # Get price data\n            ticker = yf.Ticker(symbol)\n            price_data = ticker.history(period=\"1y\")\n            \n            # Validate price data\n            if not price_data.empty:\n                price_results = self.validators['price_data'].validate(price_data, symbol)\n                all_results.extend(price_results)\n            \n            # Validate financial data if requested\n            if include_financials:\n                try:\n                    financial_data = {\n                        'balance_sheet': ticker.balance_sheet,\n                        'income_statement': ticker.financials,\n                        'cash_flow': ticker.cashflow\n                    }\n                    \n                    financial_results = self.validators['financial_statements'].validate(financial_data, symbol)\n                    all_results.extend(financial_results)\n                except Exception as e:\n                    all_results.append(ValidationResult(\n                        validator_name=\"DataQualityFramework\",\n                        symbol=symbol,\n                        severity=ValidationSeverity.WARNING,\n                        message=f\"Could not retrieve financial data: {str(e)}\",\n                        details={'error': str(e)},\n                        timestamp=datetime.now(),\n                        passed=True\n                    ))\n            \n            # Store results in history\n            self.validation_history.extend(all_results)\n            \n            # Generate summary\n            summary = self._generate_summary(all_results, symbol)\n            \n            return {\n                'symbol': symbol,\n                'validation_timestamp': datetime.now(),\n                'total_checks': len(all_results),\n                'summary': summary,\n                'results': [self._result_to_dict(r) for r in all_results]\n            }\n            \n        except Exception as e:\n            return {\n                'symbol': symbol,\n                'validation_timestamp': datetime.now(),\n                'error': str(e),\n                'total_checks': 0,\n                'summary': {'overall_score': 0, 'critical_issues': 1},\n                'results': []\n            }\n    \n    def validate_multiple_symbols(self, symbols: List[str]) -> Dict:\n        \"\"\"Validate data quality for multiple symbols\"\"\"\n        results = {}\n        \n        for symbol in symbols:\n            print(f\"Validating data quality for {symbol}...\")\n            results[symbol] = self.validate_symbol_data(symbol)\n        \n        # Generate aggregate summary\n        all_scores = [r['summary']['overall_score'] for r in results.values() if 'summary' in r]\n        total_issues = sum(r['summary'].get('critical_issues', 0) + r['summary'].get('errors', 0) \n                          for r in results.values() if 'summary' in r)\n        \n        return {\n            'individual_results': results,\n            'aggregate_summary': {\n                'symbols_validated': len(symbols),\n                'average_quality_score': np.mean(all_scores) if all_scores else 0,\n                'total_critical_issues': total_issues,\n                'validation_timestamp': datetime.now().isoformat()\n            }\n        }\n    \n    def _generate_summary(self, results: List[ValidationResult], symbol: str) -> Dict:\n        \"\"\"Generate summary statistics for validation results\"\"\"\n        total_checks = len(results)\n        passed_checks = sum(1 for r in results if r.passed)\n        \n        severity_counts = {\n            'critical': sum(1 for r in results if r.severity == ValidationSeverity.CRITICAL),\n            'errors': sum(1 for r in results if r.severity == ValidationSeverity.ERROR),\n            'warnings': sum(1 for r in results if r.severity == ValidationSeverity.WARNING),\n            'info': sum(1 for r in results if r.severity == ValidationSeverity.INFO)\n        }\n        \n        # Calculate overall quality score (0-100)\n        if total_checks == 0:\n            overall_score = 100\n        else:\n            # Weight different severities\n            weighted_issues = (severity_counts['critical'] * 4 + \n                             severity_counts['errors'] * 2 + \n                             severity_counts['warnings'] * 1 + \n                             severity_counts['info'] * 0.1)\n            \n            overall_score = max(0, 100 - (weighted_issues / total_checks * 100))\n        \n        return {\n            'overall_score': overall_score,\n            'total_checks': total_checks,\n            'passed_checks': passed_checks,\n            'critical_issues': severity_counts['critical'],\n            'errors': severity_counts['errors'],\n            'warnings': severity_counts['warnings'],\n            'info_items': severity_counts['info'],\n            'data_quality_grade': self._get_quality_grade(overall_score)\n        }\n    \n    def _get_quality_grade(self, score: float) -> str:\n        \"\"\"Convert numerical score to letter grade\"\"\"\n        if score >= 95:\n            return 'A+'\n        elif score >= 90:\n            return 'A'\n        elif score >= 85:\n            return 'B+'\n        elif score >= 80:\n            return 'B'\n        elif score >= 75:\n            return 'C+'\n        elif score >= 70:\n            return 'C'\n        elif score >= 60:\n            return 'D'\n        else:\n            return 'F'\n    \n    def _result_to_dict(self, result: ValidationResult) -> Dict:\n        \"\"\"Convert ValidationResult to dictionary\"\"\"\n        return {\n            'validator': result.validator_name,\n            'severity': result.severity.value,\n            'message': result.message,\n            'passed': result.passed,\n            'details': result.details,\n            'timestamp': result.timestamp.isoformat()\n        }\n    \n    def get_quality_report(self, days_back: int = 7) -> Dict:\n        \"\"\"Generate quality report for recent validations\"\"\"\n        cutoff_date = datetime.now() - timedelta(days=days_back)\n        recent_results = [r for r in self.validation_history if r.timestamp >= cutoff_date]\n        \n        if not recent_results:\n            return {'message': 'No recent validation results available'}\n        \n        # Group by symbol\n        by_symbol = {}\n        for result in recent_results:\n            if result.symbol not in by_symbol:\n                by_symbol[result.symbol] = []\n            by_symbol[result.symbol].append(result)\n        \n        # Generate report\n        symbol_summaries = {}\n        for symbol, results in by_symbol.items():\n            symbol_summaries[symbol] = self._generate_summary(results, symbol)\n        \n        return {\n            'report_period_days': days_back,\n            'symbols_analyzed': len(by_symbol),\n            'total_validations': len(recent_results),\n            'symbol_summaries': symbol_summaries,\n            'report_timestamp': datetime.now().isoformat()\n        }\n\ndef main():\n    \"\"\"Example usage of data quality validation framework\"\"\"\n    print(\"Comprehensive Data Quality Validation Framework\")\n    print(\"=\" * 50)\n    \n    # Initialize framework\n    dq_framework = DataQualityFramework()\n    \n    # Test symbols\n    test_symbols = ['AAPL', 'MSFT', 'INVALID']\n    \n    # Validate individual symbol\n    print(f\"Validating AAPL data quality:\")\n    print(\"-\" * 30)\n    \n    aapl_result = dq_framework.validate_symbol_data('AAPL')\n    \n    print(f\"Overall Score: {aapl_result['summary']['overall_score']:.1f}\")\n    print(f\"Grade: {aapl_result['summary']['data_quality_grade']}\")\n    print(f\"Total Checks: {aapl_result['total_checks']}\")\n    print(f\"Critical Issues: {aapl_result['summary']['critical_issues']}\")\n    print(f\"Errors: {aapl_result['summary']['errors']}\")\n    print(f\"Warnings: {aapl_result['summary']['warnings']}\")\n    \n    if aapl_result['results']:\n        print(\"\\nTop Issues:\")\n        for result in aapl_result['results'][:3]:  # Show first 3 issues\n            print(f\"  {result['severity']}: {result['message']}\")\n    \n    print(f\"\\n\" +",
      "context": "    152:             results.append(self._create_result(\n    153:                 symbol, ValidationSeverity.ERROR,\n>>> 154:                 f\"Found {len(invalid_high)} rows where High < Open/Close/Low\",\n    155:                 {'invalid_high_dates': invalid_high.index.tolist()},\n    156:                 passed=False"
    },
    {
      "file": "enhanced_pattern_recognition.py",
      "line": 883,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s\n                ORDER BY date_time DESC\n                LIMIT %s\n            \"\"\", (symbol, limit))\n            \n            rows = cursor.fetchall()\n            \n            if not rows:\n                logger.warning(f\"No data found for {symbol} in {table}\")\n                return None\n            \n            # Convert to DataFrame\n            df = pd.DataFrame([dict(row) for row in rows])\n            df['date_time'] = pd.to_datetime(df['date_time'])\n            df.set_index('date_time', inplace=True)\n            df.sort_index(inplace=True)\n            \n            # Ensure numeric columns\n            numeric_columns = ['open', 'high', 'low', 'close', 'volume']\n            for col in numeric_columns:\n                df[col] = pd.to_numeric(df[col], errors='coerce')\n            \n            return df\n            \n        except Exception as e:\n            logger.error(f\"Error fetching price data for {symbol}: {e}\")\n            return None\n        finally:\n            if conn:\n                self.connection_pool.putconn(conn)\n    \n    def _filter_and_rank_patterns(self, patterns: List[PatternResult]) -> List[PatternResult]:\n        \"\"\"Filter and rank patterns by confidence and other criteria\"\"\"\n        \n        # Filter by minimum confidence\n        filtered = [p for p in patterns if p.confidence >= 0.60]\n        \n        # Remove duplicates (same pattern type detected multiple times)\n        seen_patterns = {}\n        unique_patterns = []\n        \n        for pattern in filtered:\n            key = f\"{pattern.pattern_name}_{pattern.direction}_{pattern.start_date}\"\n            if key not in seen_patterns or pattern.confidence > seen_patterns[key].confidence:\n                seen_patterns[key] = pattern\n        \n        unique_patterns = list(seen_patterns.values())\n        \n        # Sort by confidence descending\n        unique_patterns.sort(key=lambda x: x.confidence, reverse=True)\n        \n        return unique_patterns[:10]  # Return top 10 patterns\n    \n    async def _store_patterns(self, symbol: str, timeframe: str, patterns: List[PatternResult]):\n        \"\"\"Store detected patterns in database\"\"\"\n        if not self.connection_pool:\n            return\n        \n        conn = None\n        try:\n            conn = self.connection_pool.getconn()\n            cursor = conn.cursor()\n            \n            for pattern in patterns:\n                # Get pattern type ID\n                cursor.execute(\"SELECT id FROM pattern_types WHERE name = %s\", (pattern.pattern_name,))\n                result = cursor.fetchone()\n                \n                if not result:\n                    logger.warning(f\"Pattern type '{pattern.pattern_name}' not found in database\")\n                    continue\n                \n                pattern_type_id = result[0]\n                \n                # Insert detected pattern\n                cursor.execute(\"\"\"\n                    INSERT INTO detected_patterns (\n                        symbol, pattern_type_id, timeframe, detection_date, start_date, end_date,\n                        confidence_score, ml_confidence, traditional_confidence, signal_strength,\n                        direction, target_price, stop_loss, risk_reward_ratio, pattern_data,\n                        key_levels, volume_confirmation, momentum_confirmation\n                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n                    ON CONFLICT DO NOTHING\n                \"\"\", (\n                    symbol, pattern_type_id, timeframe, datetime.now(), pattern.start_date,\n                    pattern.end_date, pattern.confidence, pattern.ml_confidence,\n                    pattern.traditional_confidence, pattern.signal_strength, pattern.direction,\n                    pattern.target_price, pattern.stop_loss, pattern.risk_reward_ratio,\n                    json.dumps(pattern.pattern_data), json.dumps(pattern.key_levels),\n                    pattern.volume_confirmation, pattern.momentum_confirmation\n                ))\n            \n            conn.commit()\n            logger.info(f\"Stored {len(patterns)} patterns for {symbol}\")\n            \n        except Exception as e:\n            logger.error(f\"Error storing patterns: {e}\")\n            if conn:\n                conn.rollback()\n        finally:\n            if conn:\n                self.connection_pool.putconn(conn)\n    \n    async def get_patterns_for_symbol(self, symbol: str, timeframe: str = '1d', \n                                    limit: int = 50) -> List[Dict[str, Any]]:\n        \"\"\"Get stored patterns for a symbol\"\"\"\n        if not self.connection_pool:\n            return []\n        \n        conn = None\n        try:\n            conn = self.connection_pool.getconn()\n            cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)\n            \n            cursor.execute(\"\"\"\n                SELECT dp.*, pt.name as pattern_name, pt.category, pt.description\n                FROM detected_patterns dp\n                JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n                WHERE dp.symbol = %s AND dp.timeframe = %s\n                ORDER BY dp.detection_date DESC, dp.confidence_score DESC\n                LIMIT %s\n            \"\"\", (symbol, timeframe, limit))\n            \n            return [dict(row) for row in cursor.fetchall()]\n            \n        except Exception as e:\n            logger.error(f\"Error fetching patterns for {symbol}: {e}\")\n            return []\n        finally:\n            if conn:\n                self.connection_pool.putconn(conn)\n    \n    async def bulk_scan(self, symbols: List[str], timeframe: str = '1d') -> Dict[str, List[PatternResult]]:\n        \"\"\"Scan multiple symbols concurrently\"\"\"\n        results = {}\n        \n        async def scan_single(symbol):\n            try:\n                patterns = await self.scan_symbol(symbol, timeframe)\n                return symbol, patterns\n            except Exception as e:\n                logger.error(f\"Error scanning {symbol}: {e}\")\n                return symbol, []\n        \n        # Create tasks for all symbols\n        tasks = [scan_single(symbol) for symbol in symbols]\n        \n        # Execute with limited concurrency\n        for i in range(0, len(tasks), 10):  # Process 10 at a time\n            batch = tasks[i:i+",
      "context": "    881:                        low_price as low, close_price as close, volume\n    882:                 FROM {table}\n>>> 883:                 WHERE symbol = %s\n    884:                 ORDER BY date_time DESC\n    885:                 LIMIT %s"
    },
    {
      "file": "get-pip.py",
      "line": 1169,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "`+2F4|%K(Z*S+`",
      "context": "    1167: muW3&K{OPeJm*`V_jWEx56mui?`!DTmhEBfHFgRWA#L~R?RPe`r`IUeobgY^~8-`KCtp}(bEAbCq+1z\n    1168: 14?qN1cKEJl4@)J9w#f%zr^R@)kLCbCFECebN?hK7EZidDw4Dy=*)NJlW423US~SxVwZw1;W~jo?HB5\n>>> 1169: ;CVkS`+2F4|%K(Z*S+`-S{c-B4tH%pz3{A6ifK4rb;(&wN%pgp8t?0rrB%}QyO_2YF$aXId(2|0Cg3i\n    1170: LyA?INnZu^0Q#XP<Yz2sEeZ6_`!Mz&u<0$ZF3_jta5z(LDVWa}|GZtEo2s1IbIvw1)n19&3_?;u*_uR\n    1171: rX7ZjGnKQs>Yp>5AN84egz?UH3AkB+=<vcB~X<yT5jc%|S8Fb+8DD>@e@KYW?W&ztGnbJ+X&D~a)|Hn"
    },
    {
      "file": "get-pip.py",
      "line": 13370,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "`+&|Cfb~EcxsFZ$OoIb#Ry5;Cho*n8>sarfuzdlR(46Svg04w7{W1?6+`",
      "context": "    13368: f!xrC7J+uiBy#IvHO2md@K$i3_@acm+iH7U!H~L|@_ku+pcePI1K?<dX1sB-CY7UGgN>{cif~sQ;Fi_\n    13369: AI0fyX9421O!(f_u+?`;i7;EjVo*|QEGHXngluSP_YIQy*xQNJbuY}9MB2#_oPnEXK3$(_?cXlb;CZ^\n>>> 13370: U6`+&|Cfb~EcxsFZ$OoIb#Ry5;Cho*n8>sarfuzdlR(46Svg04w7{W1?6+`$Md%C7v-8+_ZqQ+xOr|N\n    13371: {T0jcCj-kr*!4H*NksOaymK=>yyhx23L3uxbF%x?afsyl)Bdjjk#>{kQhIU`Tknx4a<fK0orD%u3BXl\n    13372: {w2Sy@!Yy}BFbxC1q_y<H6C(|^d=OR{laC}rcei+z+d`BCgTsEBvt!`Lg11X#|OMsWtD1!iSj|6B`$S"
    },
    {
      "file": "get-pip.py",
      "line": 17008,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "`+l_M;X58#zWa{*Z+qbOyYIj2Z\n+`",
      "context": "    17006: <ycH;5dcI8cV1VjEj#68yw3ejIs_aGs6oWxh8!2UKrAVzLr4&htixw_H3Mg%)kV%T0NJ?Mm5%h3(Wfq\n    17007: V>VJw28o$GcEgI_WTf`aV4=kGncX7^q@_u92TUGw)pz5C%cciw&P9c$cwZ~fUL58QX_BX{3+>%I5>V$\n>>> 17008: EH5+<(VIw?1;m?Q4GWi#3lt@W8zf|MlIs-+$|0-hS&NxBlQy*ZlnM`+l_M;X58#zWa{*Z+qbOyYIj2Z\n    17009: +`a3oqyR|^P?a9;Le90xNprPzj)9!uDScZ2OoIokv0G4-48$V7i<3hXAj<c$6u`ZulL{m!2Lh?!4H4<\n    17010: !@sNluVT%Ax%I*2OaK1XpSX8fzWKlY{r{bI|H@tPgCG3h$3Oo09S=S1?)dSK*Zj?zA4b_<MSs;<0&c("
    },
    {
      "file": "get-pip.py",
      "line": 23408,
      "pattern": "String concatenation in SQL",
      "risk": "HIGH",
      "description": "String concatenation in SQL queries",
      "code": "`+i(7&y-%lt$=8\n7Hr+`",
      "context": "    23406: MglpL%f$r*8b#+yBJ&Ma!Rkuk|HmiKr?iBR1YV^0}#(Zrr>O7kl<+*<Fk7aSTv#6`fBs-fW{BZA^=VS\n    23407: G|Y3pp(UgqsZHK#K3tj%W2tZDK_mo<;Z$)d=YwqV{Cm$@i~zv=B_UC!F7S{fi%b+&5g-Fe=w6g2&Yf6\n>>> 23408: }{)_HwCT<jpKwF+3i*epNKsA%559wbNG7EQ=Xeyv*7Q{d|@eOL{6hep!`OTb0F(U)`+i(7&y-%lt$=8\n    23409: 7Hr+`FhFUPt>gCXW8sM{4~|noa=hSokV?J9**(v$zR^=r_aCNfBqjY55A*Ed*uy%d7dqo+1WCuUoVPT\n    23410: OW$6qLD}c8iiV%R&Q{P6{Wws)o1d&#y4c~WEvhnGa<ln$Yr0?y;SliK52Y$iUuPLKFxsKPtcukn{g9X"
    },
    {
      "file": "get-pip.py",
      "line": 521,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`K8zj(+39Go4_^;T+#9aHHCFc4sdJQbd\nh1<${;{<X(o(V_Q1SNFom~#ND31zI9j1N+$}iM<Ki^I;)42;U3+!&ZFO_`",
      "context": "    519: bY*O_!a;z52*T^vYw6dlWvD@!Um$I_d{o@{L=P-+(SV3aK^`B?N5{pQFpgbz~H#aj^W^4YkKV+8V`=X\n    520: k3#pblQB;$5|T5L=`gZx$BFiV92^41Bz7&4T<kY=C%OVK>`4p}UkOk#Rf~hxOH|7drf=Q_&i$BNhXdV\n>>> 521: +zQnDFRltg)Lq2DmuJEW0tOn!8->rG6HA@N4=<j2UjK_C~K`K8zj(+39Go4_^;T+#9aHHCFc4sdJQbd\n    522: h1<${;{<X(o(V_Q1SNFom~#ND31zI9j1N+$}iM<Ki^I;)42;U3+!&ZFO_`RHzo&)hAeA9N3No;H7X4*\n    523: xulQ7&stCe**>K&IRg%Oxf9eZ{^+Pk+;2v(#MfAcTB(DGvyr7E*k+4$zm!@^ou@UMae_!FyOwy6N=1q"
    },
    {
      "file": "get-pip.py",
      "line": 650,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`jAS+(-ZcIN0fp|=Mp7IsDn${_cRK`\nAi=_ai_6we}n2Lj&^T`",
      "context": "    648: |0)9^_<T<@cVX=sT4_fhw(=@@bxiARZd3HEW^gaN^8xTq0Uk+)cu0o=WblD>vZu%5t|sDrM^8{}cZ46\n    649: OS9;ufHD5(-_$}eH{ovJ98b!@$(G`<Uq#(&B#y1IDKC&=CL!}?Db8x9o^+Nu``mD{}a5;H|KB*#ZvGp\n>>> 650: nZ@?PO@ncFVV)sgM`Jg>nYR}+=Q-c3aOyR;IBfbSn$5fRvR#;`jAS+(-ZcIN0fp|=Mp7IsDn${_cRK`\n    651: Ai=_ai_6we}n2Lj&^T`S_lAZ?r6gGD-rXlxel7Q*TzbgQvFwHwqj+uN54>R1SJgg@^1L-6g5fkeptL?\n    652: nHvTqKniSfoMU*`emPCw?_-s30o)<1rX9v0qiuOoxiCY{|KN~G8jW5W9DFrgN$=4~IwEyLWTtd@vkg>"
    },
    {
      "file": "get-pip.py",
      "line": 844,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`X9vy^+j6lW|x{BaeWr^b6G2${a`V{eXBG5D9+*11QP5&#bTET_R&5<Gb+|\nZA7;5#Ak_08ro&pLd+P;wQL$kSGk`RBdhA3&6aUj1(aL}WfTb!HK5Cw-`",
      "context": "    842: q^)RnkYpWcZ72T)4`1QY-O00;m^cA{D$M@=m&0RR970{{Rd0001RX>c!JX>N37a&BR4FJo+JFJo_QZD\n    843: DR?Ut@1>bY*ySE^v8;Qo&AyFc7`>E1Eq)f_%UxYfOw94|<V!*=(8$!){|~$uO+&_qK}^LE_G#p)+qD@\n>>> 844: 4d7{Tk+f)f{wKM;Hs)E5`X9vy^+j6lW|x{BaeWr^b6G2${a`V{eXBG5D9+*11QP5&#bTET_R&5<Gb+|\n    845: ZA7;5#Ak_08ro&pLd+P;wQL$kSGk`RBdhA3&6aUj1(aL}WfTb!HK5Cw-`w(7YhalBYT6nwiqn9Lr;*!\n    846: 8U0YPr9Y405sz<3CSfCb=5Qn3?Anz8bjPic(O%g*OdoMQO(|MSbJL}-WG?vztva3dXi~&U0Pu#w~6rE"
    },
    {
      "file": "get-pip.py",
      "line": 984,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Za<t}TbxR#)lH<UyKKR-};E}Cx7\nQ~UU%xZ{nWRVaJM8n|R%Ae8+o>W}AQk9PG${(Em^`V{WC#9%S5P_%}>^yHcC;irbS3aYvI0`",
      "context": "    982: dGZeeUMV{B<JaB^>Fa%FRKUt(c$b1ras#aG{N+cpq>*Iz+sFLJ61U4iT&fcCI#?Fww&kQjS$4S|tPF&\n    983: CLsNh+Be<bU6h6eUVlmMlOw197Y)c|X7Vcw+ljNKNXFms*HMMa&7*K}EF`d!i35<JY7YpVOwHR}G}(J\n>>> 984: #dgz3z?D+8h=@#{bgmpwVDY|o0P1()-0_LE&M@c<g~V|&5B##m5`Za<t}TbxR#)lH<UyKKR-};E}Cx7\n    985: Q~UU%xZ{nWRVaJM8n|R%Ae8+o>W}AQk9PG${(Em^`V{WC#9%S5P_%}>^yHcC;irbS3aYvI0``<~OxI*\n    986: VQm$%{mo1DZR$(3($FyOtva(^BavltcxS$$-VS9#KmX1jHZ2nN7G}gwS`rsZf;B&_$?1Ag0!<}Z0${K"
    },
    {
      "file": "get-pip.py",
      "line": 1264,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`(E$e)q2+JQR}wTiYIn0YMcENH<_WF%(PJmmpwi>DXdJ\ni7H7sRe${sDM})3IjubdzKG{Sp6^^~UNuq~BIJJ0>-~cFk5VsoN>)TRreR70@#`",
      "context": "    1262: 3I^NflAy!yx8)y?e<-F%{dz58-`eFb1}fA;rj)cYjS8Mw{epVvQxnh~6VIq~aAZhsa@Gr;suKWDwXa>\n    1263: rZ()5-NC6VE69*?v4aM|-}tgkLNE2T)4`1QY-O00;m^cA{F;lr7ok1pok<6aWAs0001RX>c!JX>N37a\n>>> 1264: &BR4FJo_QZDDR?b1!6XcW!KNVPr0Fd8JreZ`(E$e)q2+JQR}wTiYIn0YMcENH<_WF%(PJmmpwi>DXdJ\n    1265: i7H7sRe${sDM})3IjubdzKG{Sp6^^~UNuq~BIJJ0>-~cFk5VsoN>)TRreR70@#`O$Xu;D=*Pz5edCRp\n    1266: ~^n`{tDdn{RRWp(1f)6}-RiHvHYkh_>oj3-Wiah}}OzpwYrZc6i&&ewIOmkUPtS$!Of8cY=6;x20yPm"
    },
    {
      "file": "get-pip.py",
      "line": 1962,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`$L+)I?~*MhUF\n-;%%5Mt2j4tkdWkIa9wXYzn6$ZwegT<wDuy@VcUuNr-I!Ojs{*FsLP>AP+kV(6$$^{13xuQG>zuVt*+\n$r)|6ASBTc{1{-G<?Ha^ckZ|L_oJnEtrlV@_<Es!g38R-k4><*)Th)S}E4o^imh79iF5#O!K9))MG;#\n6V{MvW_>$ZuY${z(f94lU>yD2i#1ON3BzvWDs#hbdrX(Zgak%DymAk5Nnq7Xu}ZY#4<`",
      "context": "    1960: Ok7Dmb%mk5g2pLyulVuHr6E**rPv8NN8StiAQ`Es#*q@g<ZOjL%PzC(sn}8BxHrW+T4x?9GPi23y9(x\n    1961: %{meRLO*&_Mx!f%>%-7bgGm0<%1c^DaRg^wq9t#~%-c0)sHsV%jJd1x>LZ&**B&#~_%~af)k$;O98S`\n>>> 1962: culr8q}Hypya!J%Y$_|A76o=Lv6A`Mi?&q`OU54ni%!*!Fct@LT@T(R;Lm=yHyxF=v`$L+)I?~*MhUF\n    1963: -;%%5Mt2j4tkdWkIa9wXYzn6$ZwegT<wDuy@VcUuNr-I!Ojs{*FsLP>AP+kV(6$$^{13xuQG>zuVt*+\n    1964: $r)|6ASBTc{1{-G<?Ha^ckZ|L_oJnEtrlV@_<Es!g38R-k4><*)Th)S}E4o^imh79iF5#O!K9))MG;#"
    },
    {
      "file": "get-pip.py",
      "line": 2058,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`c7_h@Ct0U~fXHqWqj!Au{W?IbCu;Ix4!pi3&Jx*ZssN\nXVzGBUE#+Oi9XS%D&L${ltpFOQ=!a@7un~-s1-cj}88eHhl*JVC$i#K>~#3lh~O68h|OIu={|QmAZuB\nTY_V!ja+IX`",
      "context": "    2056: ;=$IkU&#1!7Y+5F=u4NFVUFC}51(|b*8TLCgMp{LXE)5U2hwfU!g=lFmNKHXT1vjpmL}nPQGHnyCKIY\n    2057: NDrXhjrwdP!(hL!cDE)~Hv1kvzfKYP+<vf}viX$rLj((hwCVt&0{rCvgkf8VK7Lt~tB88wK-yH_W_?j\n>>> 2058: v-gAV#5HWY-dE<i22VE(M1yVN+8_qqG1$G5`c7_h@Ct0U~fXHqWqj!Au{W?IbCu;Ix4!pi3&Jx*ZssN\n    2059: XVzGBUE#+Oi9XS%D&L${ltpFOQ=!a@7un~-s1-cj}88eHhl*JVC$i#K>~#3lh~O68h|OIu={|QmAZuB\n    2060: TY_V!ja+IX`#_nOP*)HgL?Z@i0D}^BSYQCC*~2cq4bq}jQQK0Y;1sZRX)h}n5>Wk0DP9QSNMn5HHt?$"
    },
    {
      "file": "get-pip.py",
      "line": 2318,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`P@pURBq^~mGZccm\n${z}%>d~xLt8%fPCmC1CYa@-f_wvu2|&9wS<iv}zB+?UoW4ArCe@W$V=l0F`",
      "context": "    2316: ~3;1zTJ-#g{!_8jH!w0#&`4?jzebU0lcL*#S_=9(HaV`G81J7fcoL(tgRIoBfW>Ie&(45ryj0S{@EkS\n    2317: kHHW}aO+c~SN`P>g1LmEccIXX2FJ;PX75H-U%_SkVpaxrJfRj7K#PVq9?7#EV+ptklzpIfIxii^F2xE\n>>> 2318: C7}ugoB_r{%(B&|5~8Irp7lKm?D5_ILfnnF$v%l~AhJp%-93G|z)!v(Lz!`MB9m`P@pURBq^~mGZccm\n    2319: ${z}%>d~xLt8%fPCmC1CYa@-f_wvu2|&9wS<iv}zB+?UoW4ArCe@W$V=l0F`|H~ZT)!X`$4>f)y%wr>\n    2320: 0H0_Hi>Zv=<cecww@IJFuFM4qlx3!*W~06ct>#det}q{QZ5o7@Q}${KnUv!uCB!FgEtU;DDsOX+h&uo"
    },
    {
      "file": "get-pip.py",
      "line": 2502,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`q)TAck!&;EUK_TyQ${{G$FWOi&e`S~#ljx?y`l!24;k2%xuB{OYEi!O+wf|Vq@W@\n@4*i<!oJB^7`Q&RC~}eQbdtD>CpDn`",
      "context": "    2500: RlKQbm6GMYW#+FYd|ShO6lEE$sw^XOvWf`&;^$njT)h=loQ@_gX~jVm*mf>NBfRw&b=la@g~&I2$NZ_\n    2501: wT=t*qC|ZK3UWrM(jFTvO{^H{Nmu2?$;$`;ge7ShOST3^Hi&y7B7#CW21~5$#z&JX8eVJV@F0u<;7Hp\n>>> 2502: a~+m=^sBI3W^J$`q)TAck!&;EUK_TyQ${{G$FWOi&e`S~#ljx?y`l!24;k2%xuB{OYEi!O+wf|Vq@W@\n    2503: @4*i<!oJB^7`Q&RC~}eQbdtD>CpDn`vuTOPIf5`x()6z=C#_nmPBtI@t5Nsaceev!DEVBO5~LH>SvrR\n    2504: vjZIP(Uiuh&`coL3T{=a_?kgl&~oVAnxWR3MX}=2(Lk9J&8ZTR3~bykDfLn=A>A`mbKlkw@O}1MeCeR"
    },
    {
      "file": "get-pip.py",
      "line": 3005,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`S?KrV3c4q3z=VBldk}#%7E<sw>r1Ialy8(~@N#${MyPr-|Ba3)68jXIVnIH(RWpN{\nvl6l5>mM~QpMP61iTd_D##1y`>ipvZec$%_87Kf@3v0Tb{l!<Damk+EI|EPtkaO_g9>XKI$+(NARqs+\n^26a>L&BsU10i4B)&SXVMtwrN>sah2z7gUp*>1y7O^aI_77s64a3(|ol8-0b5<ZbY>!L^C#TeibRNmU\n+3c&uWbbG*9)SDD&7^MeUlOb(yAe5f;2u!nSRBi9}JOWtndntcesded7^>&+UI-UqokryEyxG{`",
      "context": "    3003: cdhyUVF2?lZ?n*Qm#|Zt$7#zw?Mj3p0QW{<#%)pC@LJ>89xosyLF1kT~YE{{v7<0|XQR000O8Ms}iF_\n    3004: Y(D7z!v}jQ%L{-AOHXWaA|NaUukZ1WpZv|Y%gwQba!uZYcF$Ub8~5LZZ2?n?L2F9+c=Wn^((M+T}7Ia\n>>> 3005: X(uzO*>RPw&SN`S?KrV3c4q3z=VBldk}#%7E<sw>r1Ialy8(~@N#${MyPr-|Ba3)68jXIVnIH(RWpN{\n    3006: vl6l5>mM~QpMP61iTd_D##1y`>ipvZec$%_87Kf@3v0Tb{l!<Damk+EI|EPtkaO_g9>XKI$+(NARqs+\n    3007: ^26a>L&BsU10i4B)&SXVMtwrN>sah2z7gUp*>1y7O^aI_77s64a3(|ol8-0b5<ZbY>!L^C#TeibRNmU"
    },
    {
      "file": "get-pip.py",
      "line": 3106,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`38VEFsg<)p}JP0k3l&c\nt4Vr@u8gc+gFDpU${wE{~h8PpG`frLYq#&VWxjL2;mz@1u_*94SI5=fPmA(EJ|PBxYal4QDP$zJJ}3=\n)4sO28rRWD^t*SWAgSrC8kBIXwU_GxC;lX$h4Ir62Qz)Di;GdJ`",
      "context": "    3104: ?FX-S4uBlsWioqZ?3gwb1&e2ju5LPQ7d*URLdo%)__POxVgXo3+5;y)CN|l5tNoQNfwedh$zAcf;FkQ\n    3105: Qgjr-oz3Ief=pp1t<yw*#^dn#WPCI}7bgcnaC&-hIvyRK<I&mZ?DQ}W#)s!obQX>dhn*Ls=>tM;5H3U\n>>> 3106: Ze{h|KDk85YAR}^0+BJDYUIZ8leyxNCB8)|z(1TT^L^$apnoOfH<ftz2GDC`38VEFsg<)p}JP0k3l&c\n    3107: t4Vr@u8gc+gFDpU${wE{~h8PpG`frLYq#&VWxjL2;mz@1u_*94SI5=fPmA(EJ|PBxYal4QDP$zJJ}3=\n    3108: )4sO28rRWD^t*SWAgSrC8kBIXwU_GxC;lX$h4Ir62Qz)Di;GdJ`kE;XHZLi#}(aQ4w3#Couaev!Ysdx"
    },
    {
      "file": "get-pip.py",
      "line": 3980,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`FDt\n-iQ)>9LM=@g(W4M(XS0E<qLJXCK;D*82j!)<xj${dG~wKBfmUTz@5{k~pyj&VNERvh6KpaFwUXd`o0a\ns%TF-^3??!gobAdqx>vf%Z_IL%lnQse}f_o!!m^k3`",
      "context": "    3978: mm6qsXA9sCB2sDLy|%O{eMRLEpk}q&)o{paM#~Yyp{J`drkqxB=a6Ae4Y-G+S*T90H7pT&N-ZRPJ1k%\n    3979: H1$F*JLq7@LU7RBar}2JpwM7igR%-4=*6Va)bw<?dvjE*A=c+G>3G=$qZDX>sj__aeCOHF6`3ec{1}k\n>>> 3980: iM9_%oWnx#@#c5f(QF2&Bkns72JXO4rELtGwgYFbil9w!_Tp=YGn<U;pcdMRx!?!!>p&oKKqcpZ`FDt\n    3981: -iQ)>9LM=@g(W4M(XS0E<qLJXCK;D*82j!)<xj${dG~wKBfmUTz@5{k~pyj&VNERvh6KpaFwUXd`o0a\n    3982: s%TF-^3??!gobAdqx>vf%Z_IL%lnQse}f_o!!m^k3`bT>N_JC-Zt27!Oj1l;Pau>=}0OkRkOHga_h%f"
    },
    {
      "file": "get-pip.py",
      "line": 4386,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`K1c2D1loplqGX1D-qsBa^W!Kzk${`|6?8cVxEu5pG^c%lAGoKSVPYH`K\nF=3_d6ARAd1=F{swaZX;U9ULH)7-$asox0dJ3Y8d<J2uFDxbW|{BSss{FdbJgL#`B>fEgZ=ShB+U*7_\np1YNjCo`GSN=dz*9Us`e~54wI0cW3^~>E>XU2kaTn|$<@wB{&sb)U4yL-Oom}-_^zT`",
      "context": "    4384: i2(S{ffFJB>qu2%&a-*&K&cC81ASk5kwAh3!vul9XWZZc+IMjS*K1MJkWuIM(_p30bB8)@bH!ekjv$!\n    4385: 0#%yhA=d17fS&q}$Ul&Jf9QH%69U-i+tGRcQJTYM0^?y>w;w!Wj@_<4QCVI?Yn)%HXCA~cKy6B-$0Cd\n>>> 4386: 4E$jR{w4PfhVCIO7TW7<q^`K1c2D1loplqGX1D-qsBa^W!Kzk${`|6?8cVxEu5pG^c%lAGoKSVPYH`K\n    4387: F=3_d6ARAd1=F{swaZX;U9ULH)7-$asox0dJ3Y8d<J2uFDxbW|{BSss{FdbJgL#`B>fEgZ=ShB+U*7_\n    4388: p1YNjCo`GSN=dz*9Us`e~54wI0cW3^~>E>XU2kaTn|$<@wB{&sb)U4yL-Oom}-_^zT`@F|$@u%=AWI%"
    },
    {
      "file": "get-pip.py",
      "line": 5166,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`pxCxg5}IpYNLK?WJyZA{\n!Yf25BcupEmT9w9mc+E(rR*?c_ZwC;K)${K9!NXR4VrUK_dNM@zraM{%0%3*aoBrduxchdOfeP40}fJ\nYk(IT3>fd9#-<0S2`",
      "context": "    5164: ah?jKD@DN=|q62=yAVGtt(`Px{!>WI@^=#kOrtqq`^~RF#{HI+h~Z~o-C{=`IbVNd--G4AQk#d=lAAK\n    5165: Y1yT2#JCb#*hW`lx?p;mp_~g^9tEflaOooSB&2>OVvkuK$LdMGBLNJGz0&Gh<^WvIOr~luo{wt34-5O\n>>> 5166: aEST{MoX#2pgjNC2GYi0R5%0m%%cmVoScHsV(BlLW_L>~0hgOKy3F0xzla`pxCxg5}IpYNLK?WJyZA{\n    5167: !Yf25BcupEmT9w9mc+E(rR*?c_ZwC;K)${K9!NXR4VrUK_dNM@zraM{%0%3*aoBrduxchdOfeP40}fJ\n    5168: Yk(IT3>fd9#-<0S2`eMpWQ#z%OP5?u>YHr*mty+%#60&T!Q2^z-nA${a%g6Q-C<3&2x8#<mxv2&IV4w"
    },
    {
      "file": "get-pip.py",
      "line": 5371,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`y${<27ERYe=d`Kak24k#tO15|qqQj&$>5z7|r_}M>{ZNto3jzSZG&;z-Iq+!\n4<O39ako)?kG^O`",
      "context": "    5369: z*vBHXlCoJa13HKuKyF)lyb*BgsO_rE1q?U|%aR0nDksU#f}OcCToT&|KaCs6bX>bOhZ(Mu7esBdUnF\n    5370: g!Up)pb16P+VgvddxR_;%iVgOC2<G{djT#yMre)kU#vI9PRkpIRZ$r&oLAH>QZ%a^P#?fV?OhCIVEDp\n>>> 5371: kkYX|(MKN+=L~9)X!N`y${<27ERYe=d`Kak24k#tO15|qqQj&$>5z7|r_}M>{ZNto3jzSZG&;z-Iq+!\n    5372: 4<O39ako)?kG^O`ppgFtO>9GfKwTgHFj|7rbqRcm0&ro?Ow<UMSU6ybV;aP}ckYKRMxGxvDpeIq->Pq\n    5373: >X{Mg#jS6h%GLEAT-d<BhA896umzlo;g&5}EHh@LNt+z;QWg;}~sC(BdW$X{#xl-W{~<4)yo}i)uJsv"
    },
    {
      "file": "get-pip.py",
      "line": 5990,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`($O$JU~8}v_V+FUB7#XQ${-RD2175NS7o}d|kyvE>k(^?lrSNwO9!O2x#kU{bJNqw#?bg?0\n23mvPDMsvWm0S8AQ%-o&V+7<wp<(!92U80#p%)n_(X27OQ8`",
      "context": "    5988: QcIkFeQZ@BiJy2~0RzX@Zq7<20<oiB`UPuP9_6-xyD?^2JQu`jTP|4P7Zddzu$2ANpvoCQH*gIj1;%C\n    5989: d<RwIV<nzPWsohI>EQ+d@0{wt(74tkn?rZr;~h7;=&!m4r<Ry^OBrDEz5IU8Tfnp3w8a}YxwMpd@~)R\n>>> 5990: G%RfjU;`($O$JU~8}v_V+FUB7#XQ${-RD2175NS7o}d|kyvE>k(^?lrSNwO9!O2x#kU{bJNqw#?bg?0\n    5991: 23mvPDMsvWm0S8AQ%-o&V+7<wp<(!92U80#p%)n_(X27OQ8`#|{8(pTr=#)Qa=VKfp&m@dWXAsg8c~Y\n    5992: O94Ud$18{QMggCKrI!vp(_rx9N~MB7O+OW51P%W;uD{&1w?P~%{+7$%uUqwRIAEk@4w&kf!w5`YV}?="
    },
    {
      "file": "get-pip.py",
      "line": 6760,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`K&<kzNu#PRi2r7rQl${^BXT\n`q!(-TlBJ3-XQ$}JKa7$u3p26AS1w5UIvTz*VZl<tvX=y(c<C0u4CX-kf<73&B-MgBBWi(Q68THeY+s\n=HsdWur7&7O^@n$RMvD>Pyzulg`",
      "context": "    6758: gs9uUKLnXTPN_!89L$T&CWWO`uf+hpLNo7t+N%Lw>?{t!_;2c@3~)TwjISk+IzvDRV*9_I`I=WjAS0?\n    6759: nnBcNpJats&`lIe;qvkm5KfUoIg+Uv*Vb-0cbJ=Lo-X^WEi7xhCpZxWk?J_Cr;oPPJRWN6tf6LARU(?\n>>> 6760: 6tDagELe=l0QMqy5seA@sw@#LNQ5R|Yh8eY^sD-Eut?P8BR3^{p=V4k`K&<kzNu#PRi2r7rQl${^BXT\n    6761: `q!(-TlBJ3-XQ$}JKa7$u3p26AS1w5UIvTz*VZl<tvX=y(c<C0u4CX-kf<73&B-MgBBWi(Q68THeY+s\n    6762: =HsdWur7&7O^@n$RMvD>Pyzulg`3d|9>{C^5G*>U@cKJky}^XWhR2pxjnYb?J-bbh3&{+MX<Lz^axe<"
    },
    {
      "file": "get-pip.py",
      "line": 7167,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`1_\nrKx5=X-TtRa${jzI_8Qeu{pfWgTD6s}TmV^sagrs36gME0(#PBH3+L%A(`",
      "context": "    7165: *@Zu%@W<8cz!)sATn+EM8moftA|T*96%dz&?X)MsDPI%e6kho@%)h6{GWDN(3&5A=g7T%gQ0~oz?T2U\n    7166: <a`-A(mUd7OGAjD$!Ex@5MkyzE>|EgD#T>^BE@8a`h-$7xzb0k7&>D@HP&Lko-YhTonA2n{4a(%;BHq\n>>> 7167: MvchpV7cAaL5e2LnK8dFpp13<?tq!^DkIwHFB@#awx;$}*Bk=3|AVf<q#?71RL=U`;u{RCP*TKFv`1_\n    7168: rKx5=X-TtRa${jzI_8Qeu{pfWgTD6s}TmV^sagrs36gME0(#PBH3+L%A(`j!kx13<OT)88BML_HGBLd\n    7169: K~-8w5*pf9zsU6*cDAh<>_-z@0lKY-Oo#pog0FG2^|#JLE)_xP1+G)U$Z*A73IAR`(bDwBJC3$<PC0r"
    },
    {
      "file": "get-pip.py",
      "line": 7334,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`CO${7\n6I5>#XX0YbGw$A_b~eJ)K*p2Xq+<Ij73Wgmm^8j-8WC&=ATFKel7dLxnfi(fPjka%346?Z$DDCK67RR\nj?|X{(2@Vlv?{yvttQTSS1mXKKCl~MuOevpG#Xu2iI~Ayvpmo1dIy!2N__B1Nj}xubA0r)50xeQ8Y8o\n`",
      "context": "    7332: pgMh)`mQiqQ^`k{h@{6bQHijHnaN@2bHijGWLc24|@MU*OBlC8N!(@WX>pQ>5RfVOcDm63i;b}Gk6Pv\n    7333: G!Y2=8%f!+kd&q^f*v)}c`65185`NjX2@2JjVcWO4bc<V&>d=m$OIU5@nZmr*9^x7$h@`Bf$h_^Olj@\n>>> 7334: SUaeY;6h~d-W_X{hGfy7!jQxuIgV9?9RY|`UmspKOH|;uP1y>XDQIP;O^ULhwy-H2BxbclN3@`CO${7\n    7335: 6I5>#XX0YbGw$A_b~eJ)K*p2Xq+<Ij73Wgmm^8j-8WC&=ATFKel7dLxnfi(fPjka%346?Z$DDCK67RR\n    7336: j?|X{(2@Vlv?{yvttQTSS1mXKKCl~MuOevpG#Xu2iI~Ayvpmo1dIy!2N__B1Nj}xubA0r)50xeQ8Y8o"
    },
    {
      "file": "get-pip.py",
      "line": 7534,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Eyn9b@)!+g&~gS$D5${v2<Z~XOk`7_VK8C2xlft6\n=O^hAoMr+uW$v*p8BKU?A&a!FwMGvPPeL~W^h>ctuxVmG+hekb8i-{J`dn0U&awfzouTYBs>eR$Za6|\n35=E!A+qVcfBam{#mKuOm7Lg*1u<m9FBY4kJijrNsoT9879z)tg9gW*lpo(;Xh0Pam-ML+3Qa*=)ku4\nGfXwF4oZug`m5K`P=(=P)<+uUA%E42PKth0*rxA(b*ZCbx+=`eNA+jsczf4bHuO#G#FzU}zJ@C_c41V\n&OYgi|C%;xtT=@OGRaaFW`",
      "context": "    7532: CO!8<>nw|p$-vFINB<o3oR0NAmx&ZljI`pr-Dxqe8mvrNX}RF=Xtzd(o`N|G>0HW2*)o9tr@cT97yWY\n    7533: 6X{!=(UGCy7O--0v*f(u#fK`IK9F6so-1@AWXk=k9?75Ch`|P3oGmyts%^Zp`)NxJ`UZf$Dan$Af(uQ\n>>> 7534: |4+0GA(qc<EqZVJo*G_$YW^DeH}^kqkzc_3lCC`Eyn9b@)!+g&~gS$D5${v2<Z~XOk`7_VK8C2xlft6\n    7535: =O^hAoMr+uW$v*p8BKU?A&a!FwMGvPPeL~W^h>ctuxVmG+hekb8i-{J`dn0U&awfzouTYBs>eR$Za6|\n    7536: 35=E!A+qVcfBam{#mKuOm7Lg*1u<m9FBY4kJijrNsoT9879z)tg9gW*lpo(;Xh0Pam-ML+3Qa*=)ku4"
    },
    {
      "file": "get-pip.py",
      "line": 8069,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`78qghA(c${vgOfuKw=A5j%>b6DB=LZnWHk9(+Ydv{RIK27JGVRk=f3e6O`vRZQH?(?{y9d5*\nPep}OaCf?-sh{~2V=1H6wOPy;FV9hQr$cpsNXG2=7}H}Sbcd(y`",
      "context": "    8067: i23O|q-rm%ptg=qFK>o>m@Wd%gGlKm(9%s{L$-N{Pv?gBsMDi5*8pXd!fIT!eLvT*uPaHS1?cw47$3a\n    8068: <MI>JJL8mANaprc3t%baWGOO`qpKtj;sKDX(+rL;DPq<S+Wdj$hhNC?TrZ#^At0kC{hVwH@%G1$#!-;\n>>> 8069: foaP7n`78qghA(c${vgOfuKw=A5j%>b6DB=LZnWHk9(+Ydv{RIK27JGVRk=f3e6O`vRZQH?(?{y9d5*\n    8070: Pep}OaCf?-sh{~2V=1H6wOPy;FV9hQr$cpsNXG2=7}H}Sbcd(y`u6eIMNGn!@Fi-_sxj9k?>ONa-JWF\n    8071: d-uQS-hS}pbDbvxFYzdJ4S;pX7ej25umx*hYAxGJ0-o+ClZwAT`_N|D=g3H|eK`*CHQ{|au?ng5>3$>"
    },
    {
      "file": "get-pip.py",
      "line": 8467,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`>Bx{G;IsPYplvsR!O3SIs=&r)f@ae${(u87M3R!}\n^hGLA;XNHogsB{ivbl6kO`",
      "context": "    8465: mnt;Dqe-t2_5gI6nwT8TMB#O&5IIz?iybqT-5}?g+oCkj>i%t^1<^_SK*lY;d&WoIdv#Bll(pj>xZz|\n    8466: rwhWviVM#Ep=-Ju<Lk94I)0ezGVL^4k?u$Pf*F}Do92HcWO8MGVoU2PWz#&kPl|dQ2hRg-Uttcv!#h6\n>>> 8467: d4Nsnmg#{L<ULGlG23i61Lr(P54TOl`5f73!MS`>Bx{G;IsPYplvsR!O3SIs=&r)f@ae${(u87M3R!}\n    8468: ^hGLA;XNHogsB{ivbl6kO`ZYokMa*xgjWiuuJ9Df0G!mBTqDlS?c@K{wnNDp&`FVS9D9gX01RW-Ul#p\n    8469: {Bzmg_Lx(fs;(mS9i1*<5cy6dJ3N@VUUijREHC#j#RxoS}t}4a@KGu&gn#^7=N9TQnZF-8U+B?3+BNU"
    },
    {
      "file": "get-pip.py",
      "line": 9152,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`HG8$v+#1${wydk~%$hoP7F~hF62+3gl1J-xxz\nJjD&|agrkQ|&rTO<9PG`t?nrj{%HX}u;F<o&(g?Nx59US>(J?Sv$gAtkw??Z^o4Qe!GUu!C9^Mgzy!@\nzmtNckcLUvG8=U_LX7-c$SXsuu3?V<Z4}1;04en%PX<%D&c{i&}JEnnUq4J3$E7Q1D3`",
      "context": "    9150: qjypq$Y!$}hf%W4hVVl#<UnZGiGdDWbZW7%&l)<=x}{1n<sM14*dc>jv@NUk_KIHDj>|8!?|JunVK()\n    9151: =uQoTVYlN(NTEC^QVXczvkC97uVBMe`-LKQL#bVL09ock39%#$|WSfp2*b4uh6E(<!oPCe)=L-Ta$-s\n>>> 9152: ;b-YPX-ujKOTY*VejT$W^c2LF(#s9JH$<f=#+zm{U`HG8$v+#1${wydk~%$hoP7F~hF62+3gl1J-xxz\n    9153: JjD&|agrkQ|&rTO<9PG`t?nrj{%HX}u;F<o&(g?Nx59US>(J?Sv$gAtkw??Z^o4Qe!GUu!C9^Mgzy!@\n    9154: zmtNckcLUvG8=U_LX7-c$SXsuu3?V<Z4}1;04en%PX<%D&c{i&}JEnnUq4J3$E7Q1D3`})LNknW_l*}"
    },
    {
      "file": "get-pip.py",
      "line": 9609,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Mz@oXGZ2GUA!e2USv#00q=yfv=p$G6(;jP@ojJC+4j\ncuuxcMVM~eEwqkj${y45Ct0y2Ae%)dzZ9kuiz&$}sltc_+L%kxnZ;#m8)iyYwaR7;(101Y977i~f;MS\new2hli8ah3K<!I;~u`",
      "context": "    9607: k>NHXIM*2Q|?^Z6zRRlS$2+cdrXybNM_m(^(sQt!Qq2uo2W*=?8H$KoBxrBRkUQqZtYEARk1qM#^HI=\n    9608: nicQeV0u6$EF%=Bx(=hIR{1!RC=#S=zgbMQ=(i0stck5X`;+=xWS!|56bMZtZ#i$ws&HC`?oTJroA>6\n>>> 9609: 5K2yFz*9dw>Yn>3nF@tUEF`6uT+ZrPDcAe<p`Mz@oXGZ2GUA!e2USv#00q=yfv=p$G6(;jP@ojJC+4j\n    9610: cuuxcMVM~eEwqkj${y45Ct0y2Ae%)dzZ9kuiz&$}sltc_+L%kxnZ;#m8)iyYwaR7;(101Y977i~f;MS\n    9611: ew2hli8ah3K<!I;~u`372y+&(e?LkNwk@j@y;rUS)gcM>NnhlmSfp#%PUesw=$ySt$1#F}ukGEJ%@yn"
    },
    {
      "file": "get-pip.py",
      "line": 9827,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`7e)YQY-DlF${tA#!Tz!nfx-I(CgjT@+0`C\nAG=4!9WqKj=~Q?&SpDbE`mKT3Y<{J7U8=SOKa{&6*f>n>Z+q?e9}!`",
      "context": "    9825: Zo_6fL%~SW=WBEqQ<fx8?_Rf&VOUh33zWSxR+7mH9Z+aMdBKw|S@3d-9rx3G6+LO9JBm}`e0-)O?oN?\n    9826: gl|T^0D`TV5%8l5dyY&`&kYlB4Grwm0Ov7h)?E6FAi)wZz8c`iN^adkCPJY{n51d0J9+=$~FLK6y5oH\n>>> 9827: 6sy2}<fiL=@s1tudnnX{={(B{k@C>JSat06VoqZ-Xt7V`7e)YQY-DlF${tA#!Tz!nfx-I(CgjT@+0`C\n    9828: AG=4!9WqKj=~Q?&SpDbE`mKT3Y<{J7U8=SOKa{&6*f>n>Z+q?e9}!`Tt1z+aoCjsl6YPT7nm!f#s|Uz\n    9829: dcrpy!Jk+Q7C35Tk!n{7!aXz6OmuWB<YY#nAsasvXcQ38L+9OQ(OAXLmMeq?{te@tQH#;T$3{=mF%Ya"
    },
    {
      "file": "get-pip.py",
      "line": 10234,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`08qW!7hI}x;ST-K-70n4#s~P_f+DdNJg3Y|Ni&A@GjpT\noz$Uu1n%k6H^)6iTe(eW-{=zn+gw0W0nlf67Pyi=Im46dn=r!DAUwjuJ)*tL16x8Ss*VEIDq{<=Kq9G\n{${n6X*%B@!1Su2}#~hEILptKKK+QotGJRN5N|0ilb;QAZM8Akp2AmAn(M|0*@6pZs4~Fa=DtY>2dDw\n=Qd6`",
      "context": "    10232: R+{Dz&qyRs&=GB^fE2&1(W0Sg7MFk<B_)+<sRLp2{%lW+!GV`~VoXB;hEvcb3uv%EqcV%%yM%js-n@8\n    10233: H=F0XvFdqs3~?5C;r+OY~9WRy>9UB8bxvvjOA;JkAB4hV(6X5Io)Ca6D%TqiqO0VaHWPzYp4s&`n-}h\n>>> 10234: ==U|{^!4#U#1|T1@7eNYI4e6ADvIGj!xLg`08qW!7hI}x;ST-K-70n4#s~P_f+DdNJg3Y|Ni&A@GjpT\n    10235: oz$Uu1n%k6H^)6iTe(eW-{=zn+gw0W0nlf67Pyi=Im46dn=r!DAUwjuJ)*tL16x8Ss*VEIDq{<=Kq9G\n    10236: {${n6X*%B@!1Su2}#~hEILptKKK+QotGJRN5N|0ilb;QAZM8Akp2AmAn(M|0*@6pZs4~Fa=DtY>2dDw"
    },
    {
      "file": "get-pip.py",
      "line": 10933,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`9Y${=^G{|B0_lL\nCalt-Nj#c;RQj@)zG2Rg1FM5SNP7-QM{69c#CKd?U`tROj6tP6C{%!wT|Nt6q@+GM8i6wVGYqxMtro&\nBJRZ!GAY_?jPZ)Qb@>ncRsJ^`jRSxK@GCDb_t4Oijw{h}@nR$Yy6R#6?%Ei>!!eq_rL^alz1s6;g@#8\nI8vaatv~E!}cjm}6;1OdC>Yoz{9{XPOzwfilpYEu0>VG#(nKC6IKR^FH;EMK$Hn4K#N<o7+fBjmWz(k\nvBImc@4`",
      "context": "    10931: I_>;UB{7?9-1Kz+3CU64YXb-?!trN(2@9{DEU(g8tuP(oZze6;<PBgr_f@q+&fc6X;o>XXfNTFdpXvi\n    10932: JU@6IL~vSRtlOtYW?4`k99uQA4mcU$Lw$PDyh7)JoMY}vw}fBt!naghq%b#kS4a`ECte(<juyvi|(zr\n>>> 10933: BiRptkS|(eQVrJwqmKwBN!Xv);lVEF8!0%Qx|R@}jwmXt;}LSWPsnAR6$r9AnHq+`9Y${=^G{|B0_lL\n    10934: Calt-Nj#c;RQj@)zG2Rg1FM5SNP7-QM{69c#CKd?U`tROj6tP6C{%!wT|Nt6q@+GM8i6wVGYqxMtro&\n    10935: BJRZ!GAY_?jPZ)Qb@>ncRsJ^`jRSxK@GCDb_t4Oijw{h}@nR$Yy6R#6?%Ei>!!eq_rL^alz1s6;g@#8"
    },
    {
      "file": "get-pip.py",
      "line": 11185,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`A%VzPhMU_W7ieU}(t-J!=6XKS9D;P)A\n0AMf!yxUZ(DVjRYq${HJpuTS}BN|Nu0_xSWMga7vY)vP_2`",
      "context": "    11183: f|{$eNL9Cp=Strww@8LBCXdt8CgZ+K`t@ZGW{JIP1^U-?a$5`cJ@te5OAGI{gIqiTqiTw;IbtSvz2mw\n    11184: IcA$fpW7^X4n0jMsrZ^3;8*_s?fG>H?iVM$Q<><yC8EJf2GXnaSWA1eO@GYhftPBle=H#$K-B*ew^H0\n>>> 11185: dOqr6npfDZ<$2BkCztS$WA%sMy#6to<8TR?T>zPFK>ZuQ=Q`A%VzPhMU_W7ieU}(t-J!=6XKS9D;P)A\n    11186: 0AMf!yxUZ(DVjRYq${HJpuTS}BN|Nu0_xSWMga7vY)vP_2`o%9KN62QsMq_3dZly8L9xt^GTG~2%dm7\n    11187: *LbidcqdBqqItv}%Njxt*q_0yhSMm7cMXrARJz#+e+l*bFAy{SW6wA(FU1TWsw7Rpw499`!g9lF0^v?"
    },
    {
      "file": "get-pip.py",
      "line": 11473,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`-+qT\n%mVmXwC}SDt1^zJ!3gBkHX2pP#g2oQU8>dD>ma>9d${u;wTw>ob<0Bi3w}BNSoYn4BOFhWkoExGAh5^\nCL`",
      "context": "    11471: r;!?Kx*A7dWcSAa4sQt9j?fZfM?i5?=PRP{s``gO9OtjsJweium9C&Sym}|K<cCOS9?iV-BiySZI9@-\n    11472: K3F#j&h1u}2&;pM{nFz86<Wg^%$1MOdl=Lz@*zO*x21b3_x-tAV+yKM((Jof4qoW+dQNB@D(4|A@67_\n>>> 11473: )As&QivsH2ukFtGrzKlTk+(3RwzhXAsM$tXtk)VSTbyyxhQK-9II@IoGsjj*i1S66@7~L0+7KK`-+qT\n    11474: %mVmXwC}SDt1^zJ!3gBkHX2pP#g2oQU8>dD>ma>9d${u;wTw>ob<0Bi3w}BNSoYn4BOFhWkoExGAh5^\n    11475: CL`tx=R3imMT}p{*p4Ip%yi0JOVWNCWA<iCTUdD?66psJX<tk_(LwvxsQyOU<i2M95cBt>1ewQ&u@Ub"
    },
    {
      "file": "get-pip.py",
      "line": 11576,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`u9BQ<6Q6~WU5M*1S<(86QVsr\nbg;OPR1${xX%ta2gC9GS}ve$hIbU!00^<VP1`",
      "context": "    11574: 53@e^4*W*yL9*Oxi^zCTC1muE_+f|E5Fr%4s2k*;157&g5(|SdFVSq?lBn)GS-^B{v36UPlxpj%dK6(\n    11575: X-dcNt*5~YKIc4W+N)CUx^t4aNyc*mZrYv^i>3U(OT`(ixpZGU`09CT?`8O^05_M&ko&=o@}>PM1_kq\n>>> 11576: }(#{O~x9T|OKC*u^e9Qy%2=6{4+U}%&6>X!Bxdn#oYL{^*G7f|q6T4`u9BQ<6Q6~WU5M*1S<(86QVsr\n    11577: bg;OPR1${xX%ta2gC9GS}ve$hIbU!00^<VP1`f3OVWlf*1%*bl|}Mtl6e=QOFSe`i?wpakQU9<ttCgW\n    11578: mM!c6AmgJKJOHEMC**X9)1)JrD05qTw^kh_(22^u6y=y{ka89he84l5=j1>*D=+s4>1PG)DwOJG7GNF"
    },
    {
      "file": "get-pip.py",
      "line": 12243,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`iwu${geGiebZsg-n?;<$cmhd!!A_pFdym;HqEOk_jPgs_q=CzVz9yg4!5^_WTd0J=aNBjekf#W\ngiq2L^;Up>}(Z#F_u}nbg7&*YgR1}SL5SqGGU@mT0j3f>=`",
      "context": "    12241: %33%879+W+U2l^z#p6&2StEc<QSFC>WU*KUmcz7N>{2h9<Fgj2XN}uHK5@WpaP5u6#^c(u$r%#`Dq=E\n    12242: D$CMMSMP?wLZ@$&1hHS)-gSLHj)0_66^K5~oGo?myd=X56ztDHRi6MD3KqQ6`kr}Mz1VhoJWLy*^;RO\n>>> 12243: 9al;`iwu${geGiebZsg-n?;<$cmhd!!A_pFdym;HqEOk_jPgs_q=CzVz9yg4!5^_WTd0J=aNBjekf#W\n    12244: giq2L^;Up>}(Z#F_u}nbg7&*YgR1}SL5SqGGU@mT0j3f>=``N<7cjv?qNSAB_-{E@09J^x0ewS5i%nq\n    12245: Lvmb>kB^r#X3UVwmMv3u{pFWmD!;>6s6JjuH^&D0D#k*LM>!v0qCM}+oGEL5#(X1fR;@i7F~&-#Jtx5"
    },
    {
      "file": "get-pip.py",
      "line": 12461,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\np${Zcg<qOE|LyS3^wh+>~{H#1O#Kmd%ow_l5UFl}2Q$b!@AeZ!mrY$_C}o=oAiE3qpQ`",
      "context": "    12459: A4wx8LYjYnn23?po7!~{kC=~Lsf3p7T-u4f^}-8i}}_#1nMhH!fXrSj02j{fgsO7i-D4&*$?A3E*dYW\n    12460: MHvYp<-$GEN5+QAeKyBnZFnyn=&Jy9dK|!!uOz7tW(azlcH2=?;=aL%OWfNbN#EB;;@;6$hc4=Zee)q\n>>> 12461: X8v)_}zRVon>ny^0Tyxa`N|9etg{PmP6mM5(RD1qHi!xMu3yQDj-mNX#D_GZCr(6N;Jde+;(Qr3ZbB`\n    12462: p${Zcg<qOE|LyS3^wh+>~{H#1O#Kmd%ow_l5UFl}2Q$b!@AeZ!mrY$_C}o=oAiE3qpQ`a%Xyk!c7+xl\n    12463: --!0g8M@3YSdV`^6<was&V|_hIj-0Q9nS0Xn|1Z%}^-M#tU-NvKVLCIRxn8F5oE*QtJPQEr01Z-kMo#"
    },
    {
      "file": "get-pip.py",
      "line": 12974,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`O0ynR891;pfQ\nEzAUoS?tK9b^jEVfw?x8@mrWwv6cf${53B%Bm{Eib|@uhQ7(Em&6$$}qJ%euKoISj4x2kKZJ2*vc`",
      "context": "    12972: V%P(_Qr7|X*;df)d-cWN%~4p<<+)6qT?4`TJ<yFI4tYzNJ&YdrOl$tlRd1iuB4LsTru8c!R+GKidj63\n    12973: DlSorI}cJ1^g6vy-vD*2HAUA}Uqj+kW4<5EJSd5z#kf)#4*dG?<hm&oVP}2hG!$wEgJ9fb{F!hCtmm_\n>>> 12974: ^FLUYN5NuATP3(CB^2T#Z{2Sk^w<KPTPyTtYti1wVkB~vagudkkv(^ZFy=Qgi}OY1K`O0ynR891;pfQ\n    12975: EzAUoS?tK9b^jEVfw?x8@mrWwv6cf${53B%Bm{Eib|@uhQ7(Em&6$$}qJ%euKoISj4x2kKZJ2*vc``r\n    12976: Kk%tSe3rHq2$)26Va(a%BXI~Fv0&@T+xgh_9#IX|QF<3zU^ZVcXGv3M0`E^vcJGBu?e)WfIBwdf7ySM"
    },
    {
      "file": "get-pip.py",
      "line": 13064,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`<><;fF$Fa2+__WY5B)fP\n{J50C*|TTmci;${U>lal+}vE*VH=PKj*uH{2Qc4$`",
      "context": "    13062: >-EXKWN&6+KzPoLhmMT-{Tonv5Npc}@0Qv9!9zfPRXq|~cduQl^9`O>9Jl#`QV<MV+72k3_%evo*wd?\n    13063: fDpeCEs<`tipf<#*7eI_Es{$U1l9>eZ`vSnuxgnE8MF@dsVIcJ2E2-+#aPr=Na0&2#;Z>zK|@*xp(*4\n>>> 13064: #|LhQv5le!d$iv{8a}HszWBK1Aj$_`mDM=Evhrlw$3uQb^Y(?PlNwgUwt)`<><;fF$Fa2+__WY5B)fP\n    13065: {J50C*|TTmci;${U>lal+}vE*VH=PKj*uH{2Qc4$`>n(uGGzNF$l<{Qb=R7;@%Ov@`#qdz8*cF=_}{v\n    13066: 9i#QBP{rB?nY6v|>2mbr_@24$Wwh+slIA@kN4E{qNd-v{@9k}n=vq#!WUS6L33>x4Apl`4f$OyP?_>C"
    },
    {
      "file": "get-pip.py",
      "line": 13547,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`)uoNdHERBl>U_*5yhi)b&2!iZ1=}Hgr%${nmo>|M$$M<6E\n+r?nP9JHiH39#NgJV_Ynr)fanw^yFWsF~ftyw6^Yi)#4u!@(KluhUPSZ79GDaq@{->Q#px%3^-}}86#\nRXV+?oDy6?YKirmuK5MR`",
      "context": "    13545: $dZ5}D_2FLRT`-Ajj&2q`|b>Eab#<3hu@fjE17AgEFn*KUy}x=+1kzLo65~+qUTMO@1j)Wb>oF#iBaP\n    13546: R3+5^JKD4b)gR1vStTi|wC}`xy2BDuT5ZaA!r_yqanX^;efc4y20ac!U%u-&vS6MrOQk?sJ$ruk$f>4\n>>> 13547: F4;-e!4(kfluOt7gXx2#O);^TAfwU^?T`)uoNdHERBl>U_*5yhi)b&2!iZ1=}Hgr%${nmo>|M$$M<6E\n    13548: +r?nP9JHiH39#NgJV_Ynr)fanw^yFWsF~ftyw6^Yi)#4u!@(KluhUPSZ79GDaq@{->Q#px%3^-}}86#\n    13549: RXV+?oDy6?YKirmuK5MR`1Q0M+HhuDFPJpD6hw=!vS@&TGi$lcAN=;nRUTd&3K%f>$>g3Kt&pr=+xbn"
    },
    {
      "file": "get-pip.py",
      "line": 14247,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`\ng*uhYQrbSP>)Q=@++${-5@)Ju0gzi(iyh+DpbXb(9eiU1=KUaUbWN*9AmFL#0q-O=%#0APOJKhl-9Bn\nT?NdK!=hhGE6E|GAeUvT9RXBWi#ZMuUM(s!(M9SB&Ox;@A}A`",
      "context": "    14245: IYnNM8a0Y}ih3G(`OWqh<@))<c>U*!nRm;5@4bxh8};y8w{B%!O<#|LdK)?y@&om$5f|9emK)_C{`LI\n    14246: V*CZh>w3A35?GgG3h#U1Xwf(uq@TjMOH{t;=FjoYc&}L&i31QLCM%%q}=gt~o@yvC9J;;kdxM(1*1G*\n>>> 14247: n~4NP!%67Irm_Ttl?Z~~hXPU7V^oWJHQaK0{14#4SaE&`|V;tgl7xe8xjwRXbEYi^oPGoQQGK=WzlQ`\n    14248: g*uhYQrbSP>)Q=@++${-5@)Ju0gzi(iyh+DpbXb(9eiU1=KUaUbWN*9AmFL#0q-O=%#0APOJKhl-9Bn\n    14249: T?NdK!=hhGE6E|GAeUvT9RXBWi#ZMuUM(s!(M9SB&Ox;@A}A`TC4eM{_(Ib=ezfwyU*Ugv(Mh=yDZKx"
    },
    {
      "file": "get-pip.py",
      "line": 14884,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`*Tc(lgcWk&#g%tMR~I&4{QZd-kW-P1IZ+dy_DY!UqK!pjp#aZiDlc}C)Gl?G&31xZNObG\nJ*%NHSq$6$4YJ2fG<P|Or${Et@b~3H*GX15v_UR}e7k%^YeCu)V2!-zU(+Ft=EDZ#zBuMNNHVsZ$SQd\n`",
      "context": "    14882: {2!~DLsB$X9BL2@we{@~L+kJd8m=8qs>YF9z2lxXGm)lyomdtXjLE$nfKE~p#!A7;tgJbcMi+-Z822U\n    14883: y`(s4Uc}?NT}rE9_trtHZr+L6X}pH>mxG55sR8wzM<{VmT)DGgYa?pJ{Evud!NI3(=pneM1F3h`rODJ\n>>> 14884: yJUjn5nEz`*Tc(lgcWk&#g%tMR~I&4{QZd-kW-P1IZ+dy_DY!UqK!pjp#aZiDlc}C)Gl?G&31xZNObG\n    14885: J*%NHSq$6$4YJ2fG<P|Or${Et@b~3H*GX15v_UR}e7k%^YeCu)V2!-zU(+Ft=EDZ#zBuMNNHVsZ$SQd\n    14886: `{QQD>_8t|!SB+C3Tc!bT!Zs`9{qx3q$~Q1u^%?hNzu<OCvPYbm2%I0B#qA#z=R0W$IFq7vpB3*Jy&^"
    },
    {
      "file": "get-pip.py",
      "line": 14899,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`qMD@oiJiF91jCn|3qi(iD8sqHK~AMvk^c&qCN(APBQi@^Ukv0Rij\nL}eg$r_(f=f5))a0xW9yw|BtL!+1}1IO9cn_ygcswjQ@MGga)_+~zrs<yOXWyqCJh*A_qUB*_Bxi}RX\nspD*s@NzR;sxjB6Vaa|GP^W-J!8emAQO=Mg5&dRLKqP=^R#=~Z%J(%S8y-pFcb~}y7YDxp&en+10&#_\nG<*${j6U*#N)%EWv>BIbK|{8O5jf@Ug@cd>vO@q$H6(u>Bl7T7YNf1qh8(PN)HntwtPu^c((nuXdC&+\n!Gv^KCva>;OWay-UwxBc2uT^K2FX*1Z2^=226*zYFj#`oME|dv)G=xZl9P(Bq&1_cF3S3rUZEnPa*Kh\nJj;aR(<d@D5bKnrv34%&!w<DTI0S(_%GR59elMK4+iJ;s)Mi%6~F(BX!bSwe+T^T$L9o(E1nO`B1g42\nTlo&9aVsLv%7bF=-pu30NM(i|NpszE&F%~HlE^p+$CViGvr`#Ab4ELiweayDg)eR-&OPZV$@j|4xBa}\n<c_;jfR;S-nOuP@Vb@tMn`",
      "context": "    14897: 1uhpZmC_H|l=?l<Z5UiRGQpC|uM;=<oHAmSLV7?>Cr-jKf{<HB#`G5IbW7yi+gqsNE6A*7xw2QC;Fp2\n    14898: vsnemNK)_HsRaen=T_yz=?+VJ|c<kME}Ws7PF%JFa6?zmvvt;oF_8*JmFH>WI(i_5B+DGeYiq`YNJ@U\n>>> 14899: 6=n{4?ZxOK{Po{^4{>QjBS-4b``qMD@oiJiF91jCn|3qi(iD8sqHK~AMvk^c&qCN(APBQi@^Ukv0Rij\n    14900: L}eg$r_(f=f5))a0xW9yw|BtL!+1}1IO9cn_ygcswjQ@MGga)_+~zrs<yOXWyqCJh*A_qUB*_Bxi}RX\n    14901: spD*s@NzR;sxjB6Vaa|GP^W-J!8emAQO=Mg5&dRLKqP=^R#=~Z%J(%S8y-pFcb~}y7YDxp&en+10&#_"
    },
    {
      "file": "get-pip.py",
      "line": 15229,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`0Lh3C%${a@35Qy<L2kboQi9R+kGMCudbd$U!DHp+2h;2XZ)D_!~>W2ec4-=c8omS`K9md=c|4h\nIP?)V=2YJ`H}$XIjxHL%xa88%PRr7wuZ|dUrTo`",
      "context": "    15227: (%=*R!sp4VyM8#Axp^Xw1(I)@C3_PN9DrLp5~2EKc}FgG#c#qzE7<E<b6GI?onvTbeq-gkbp>+P3^?C\n    15228: uo1?aA%;d>=k?!?UlSIV0UX`fE*rD!+uzK}gSUioLS))MtZtjt{+i`lr_F^z853ls-SR=@++yTh7Lnj\n>>> 15229: JeDA`0Lh3C%${a@35Qy<L2kboQi9R+kGMCudbd$U!DHp+2h;2XZ)D_!~>W2ec4-=c8omS`K9md=c|4h\n    15230: IP?)V=2YJ`H}$XIjxHL%xa88%PRr7wuZ|dUrTo`5?b>%Vu8+2sw(p;$>nM%$E?iXAJNT8me?D|_)t+J\n    15231: Rg@;97`#Q^Gb!EBaac=34&&D0pA4uL-d-Czq-;XHQXEd(=U}IIsg<tJ|GMF_O-;NEVmwfu-z%Ez4Cq("
    },
    {
      "file": "get-pip.py",
      "line": 16116,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`|uh3zq${9n8I_rd%a?g#h${Z*d~}^FD7w53oW\n>?n3`",
      "context": "    16114: xR4)lUF?U#eO6h;tyWHxD_?Yho}{`B+42|WiuY?8M6yexa^czHdmBG8<vA&STGr84<o~JL!mtSkzwxf\n    16115: XlhhK5E)^&C`RPwDn=ycC`Kr5Q7{)iz6*r7CWnyG_Df`R?k{9?;?HEX;z#19!2C7%^L7mSoSI?oW$zl\n>>> 16116: ?OWZ-ok`ZpZpTX|P_t5rx*d>ipknP`-UZ4N$!)Ne6`|uh3zq${9n8I_rd%a?g#h${Z*d~}^FD7w53oW\n    16117: >?n3`?RUrg44$#eC2ZpkvXB2DrYvuzfOsbHB6cQb4wDY!Ohk(aVz?uQ`_bTP~$JdCG(7iSmPXP4L(78\n    16118: EZpv@mM=GBS{8OG^uu7jp_}CGMz5u3|PNz}IAf`d654%t%T}uEn)?|0*xAHJ9W%3N5n>3N1He7op#$z"
    },
    {
      "file": "get-pip.py",
      "line": 16621,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`hH<HMbs>vAJ&K^gu%XLzD(6A=9(&R2QE3szE<31${Vc-ICKF{\n!mT!QDpG8-2bbQRs-Ia44fN#U)N22Tu)sGCCCtBDAUGn!$s1>L$nk$eLUbOj@F;4X3Mdzb1Mfqjj5YT\nVnx9R)u)6f2l~Q4D(KOI_A}Y30yCwu-_!q8YW<7E}5m(H(ITf4N&j_HR<k<fd&BP~g%|`",
      "context": "    16619: 3olG_bXeb1a(YY)p({6E!`fa-1dST_iz*G(dcJ$(L_bOk2zocRXtu2bR%M##lR!Ooszu=1I=8GN73sy\n    16620: y_cCrlrDQXJZ#eV<8;)2<DNAlDrFpqt7Vqfy%6S{{q6wE4RC9maPOW{tLy4gINU@B9iiQY6=k*P=nUs\n>>> 16621: 1>?u#of!OzF7wzb>hk;~-hbgV0n9T`hH<HMbs>vAJ&K^gu%XLzD(6A=9(&R2QE3szE<31${Vc-ICKF{\n    16622: !mT!QDpG8-2bbQRs-Ia44fN#U)N22Tu)sGCCCtBDAUGn!$s1>L$nk$eLUbOj@F;4X3Mdzb1Mfqjj5YT\n    16623: Vnx9R)u)6f2l~Q4D(KOI_A}Y30yCwu-_!q8YW<7E}5m(H(ITf4N&j_HR<k<fd&BP~g%|`|CMV!w|=^("
    },
    {
      "file": "get-pip.py",
      "line": 16706,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`d$u9gCx#r2mq${VMf;!2G+AM22|4^qMVa6^1L&p5uLGUnr3VfKEl\nw<dyM;iuQOF-PUlI^rx}A!85;nIG>ll+8-FT>!$bC|ID(%~#bPmJ`",
      "context": "    16704: e(wAFKJ|MVJ~BEa%C=XdDR+ekJ~o(yMG0%ez6eS@LcX@kSUPNu}ya}DUwN0tYa9oOxw!Hl2(-F*r5M?\n    16705: -y<oBq$nTRq}vscctnx!K1qh_G|6%@3poq&PAK0pR{mAQVUWz(oaVH%$dWb5pVBa167~6QnukeDqaOJ\n>>> 16706: X!yg?vXHb3)=P|994#GIkXuM>+`d$u9gCx#r2mq${VMf;!2G+AM22|4^qMVa6^1L&p5uLGUnr3VfKEl\n    16707: w<dyM;iuQOF-PUlI^rx}A!85;nIG>ll+8-FT>!$bC|ID(%~#bPmJ`2Xl&;`yCUM<RHAar5#r%aW}7K>\n    16708: `ym{%ME6<9XgI${Asg0TV2fMUoL3MPgZ>#jpUylCg;9Y);ZFnMG{PVO>W6NCAa`>Qy)oCAtc6jq9>P^"
    },
    {
      "file": "get-pip.py",
      "line": 17111,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`q+8)hpwxTm9bHbu!pOXIGetIfE^9LXxSOGuT2Wm0YWu^F2yuB_&1=ZK0\nDaOl_UP7CuX_m6Ivenz$<${jOP`w<SsYsH;1*+e#&n>o>{u(8={Fl(|euh;o^!7Uh{*j77OtUb*!1T(\ndr_DVI|(&!rN`bNwcI5a*Iobj|W8i(Dq;M7d<%T(g`YxjazVHOs4eT9&<zlx0t!RNGrlya@}Xx@P$~y\n^boY8ueuUrEAvj9qX%eIbwS^ICM*fkD{JF)263YOkek4Kaz&1uiv{LD{>_2%N$SFtgqH{r=QC4-PcD=\n_PbJOeVM)KniU}s^>u&u3;o`",
      "context": "    17109: qT)hW*o`5M|6WDYhvl?N3nGEqgbx*qgWP^bIr<Tx@K9&JkIo+Wcp3yDnE+lGCzvtx#O-`|F(?UM6s+2\n    17110: 7R55Y62&sW5?w0=DX!LiQc79I(w%Y5`c34nF4wHzM7lIlELQ+gtZULIa$V}0r`}}R8C;D+MUqH<V-o4\n>>> 17111: NmMoKNmh&vhl{$(NeIiaG4`q+8)hpwxTm9bHbu!pOXIGetIfE^9LXxSOGuT2Wm0YWu^F2yuB_&1=ZK0\n    17112: DaOl_UP7CuX_m6Ivenz$<${jOP`w<SsYsH;1*+e#&n>o>{u(8={Fl(|euh;o^!7Uh{*j77OtUb*!1T(\n    17113: dr_DVI|(&!rN`bNwcI5a*Iobj|W8i(Dq;M7d<%T(g`YxjazVHOs4eT9&<zlx0t!RNGrlya@}Xx@P$~y"
    },
    {
      "file": "get-pip.py",
      "line": 17760,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`kkwe)#NzO=RgahEvtQ#PYBr($)cPD89CrEvB~HUYia4\nw1a}XnRMpdv<TRONV)zuGrHJoWlL0^mYQrm7MFlv001h7aB%fke->20Ldv|%Vy~mPFyptq${LZPQN32\nOag4w<Rx^MD(T})0M_O#HD>Ans*NafkK;a!_011Ooz^SENHeF0QvpjV_vz!W=vdv^4L9pLN$JW|HmZ{\njR3*Ql`",
      "context": "    17758: >iENqnabCX7>VFAs|ACB`G*Q`7VQA}-=PHUrZV&C^?BLOy|4+xSXOQaAB?M0nK$)YEp>xq=B7f*fJK@\n    17759: pB5k`XZU6vlJ&kWor?>1TV2jVaoU?+Hx=y!Yiy`7Muc3GNpi0OfJhZ9?z4WMI-orgo^C5rt=-n4iFMu\n>>> 17760: DIPe13bb?8V{Mq7W0=PG*%e3y6z9pHzw^wq`kkwe)#NzO=RgahEvtQ#PYBr($)cPD89CrEvB~HUYia4\n    17761: w1a}XnRMpdv<TRONV)zuGrHJoWlL0^mYQrm7MFlv001h7aB%fke->20Ldv|%Vy~mPFyptq${LZPQN32\n    17762: Oag4w<Rx^MD(T})0M_O#HD>Ans*NafkK;a!_011Ooz^SENHeF0QvpjV_vz!W=vdv^4L9pLN$JW|HmZ{"
    },
    {
      "file": "get-pip.py",
      "line": 18480,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`k^ubx>$N#ZKaf{f(Q0s${a`Pk--f~\nTksepv(agfzkEt%eCG*Zx$`USlgu*E`ywZLRz_3+NqpS|Ss}q)qabJz|TjkjKm*8v4+7zZ%>PoDxaA&\nWy{_Yj{I|zxbP(K1*&%x_@8a$^!Z1R`",
      "context": "    18478: >YTzrfuM;6jn|IIud~g$4#A!{U2V^+dJT?G2YXhsT^vgUQsK8eT-SH4g#(Cf_*VIF=C9Di<PGZA&PM4\n    18479: c+in<LT1@h;ozT!L1bt6u-c;17nT!h*c@B*jT-*(>R|OM`$d1VhBU=dPO=kuV1NT_*SMFv|HQj?rAGM\n>>> 18480: u%jG85H`F<A@}fwQaDD@;9mpII2$|cwLZ1aaCZRtg8BpvS5Vn`k^ubx>$N#ZKaf{f(Q0s${a`Pk--f~\n    18481: Tksepv(agfzkEt%eCG*Zx$`USlgu*E`ywZLRz_3+NqpS|Ss}q)qabJz|TjkjKm*8v4+7zZ%>PoDxaA&\n    18482: Wy{_Yj{I|zxbP(K1*&%x_@8a$^!Z1R`jIUXV_5lPftGFxMDS6M_FAowS-Ag5SOOiRNxB`8W*MRPg@^9"
    },
    {
      "file": "get-pip.py",
      "line": 18572,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`${8I*=G)r7waiP\n`QH(l+$JytKTeM7MH=#r}+$L9u%NT*jNq+GT1ro5c@81>2j`",
      "context": "    18570: is+sc>(1?Fop}WPrNFCgSntK1NU|mBt5K=h>9C61dNu(5VzFv-eW;dH4J+B%bm6t_e0yI?BxgFamaNt\n    18571: Z%?$q)a{i@|`MOw9<W3!@+Ehje4N_Y{9n0T4z(o#wrhEJ{YzH2_Xa^r{3K1<4x=S`=)l$0JJyk<eOtV\n>>> 18572: 4lX<no(MH*m@wxu3M!9nm61gkq%f8?_RpS>JxR$l`RaE9=&1I;LsynHiy@#rKClT`${8I*=G)r7waiP\n    18573: `QH(l+$JytKTeM7MH=#r}+$L9u%NT*jNq+GT1ro5c@81>2j`GTvcOV4-fz`qf~=rd77Lvf)x<Uf8fC#\n    18574: ;F3XxP)vsJRfO<(g3@B*Jq<H^C8Z(i8Fl)M}|!#8M;_c>KxI#^bO{8Vne5rt9Ca>C(lwc(Aiqc1U)iX"
    },
    {
      "file": "get-pip.py",
      "line": 19086,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`umOJ%v!Ffc9@2yz7=_@rg%*ea58(yJQs{!PGuE+&0T(gHS0lz)E6OuDMwI=EUZ5BCDMs\n$VJJA@Z{~T^eq)(G<seP<RaR_5z;RRe&jRT71Rr#%*i80${;lHQjw`Zdy0_vdED=4YWe<YapBvN<6<|\nU;cW|>UxF-s(0k<f0Ak!Irc%Vz7qALRH=JA)!_o4|0rV}p3fz=KHeglQg1DvxLf+1w0RTMo{Dm90i(9\nE)tK+p`",
      "context": "    19084: I%hZES&aWHieo-XLIicuI|eX{+q9+lsoCpnR3?8eu^IRSlJB^w+%l<$);0pIk1sY3)bCnoN%l%9cU^%\n    19085: S^Q8=-c3KWh&Erfp}n00%{|<)ClDs{0^0^)7?Tc*2VcJNoDOX?wrRJB(qhlJ!pmO}7&n+QZOaC)f(@N\n>>> 19086: z4KU1W418x`umOJ%v!Ffc9@2yz7=_@rg%*ea58(yJQs{!PGuE+&0T(gHS0lz)E6OuDMwI=EUZ5BCDMs\n    19087: $VJJA@Z{~T^eq)(G<seP<RaR_5z;RRe&jRT71Rr#%*i80${;lHQjw`Zdy0_vdED=4YWe<YapBvN<6<|\n    19088: U;cW|>UxF-s(0k<f0Ak!Irc%Vz7qALRH=JA)!_o4|0rV}p3fz=KHeglQg1DvxLf+1w0RTMo{Dm90i(9"
    },
    {
      "file": "get-pip.py",
      "line": 19359,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`(E${qA2uq+jg8Rg$gf!)S{oX}1O|x?l}Z6h$C25*@RVM2)2C8rYBDy?jWNpYkI}VNp8dJv_X;Jdt~H\na&k!(BNsQ<(aFh4uQ!n*CviNfbR}6F6P}ksYC?-bXsWp=RIlgm31!jrKJl=N%c~)@m6kNoInz^-T1-j\nxG~@RkcLPoPK+j8FJox*!UvJ*WS0CPA{dN86PY5(=-x>7?{Fr`",
      "context": "    19357: QZqfl+ejcONgB{kAs<d4dXylcBTF;3pUJ05M%jNFn{#4wHDDkX9qV1(zvP0aH^`(ujnFlzy|KDYh>P)\n    19358: h>@6aWAK2mnTQqFPV96$fPp002EC0018V003}la4%nWWo~3|axZXfVRUA1a&2U3a&s?XaA_`Zd97M&Z\n>>> 19359: `(E${qA2uq+jg8Rg$gf!)S{oX}1O|x?l}Z6h$C25*@RVM2)2C8rYBDy?jWNpYkI}VNp8dJv_X;Jdt~H\n    19360: a&k!(BNsQ<(aFh4uQ!n*CviNfbR}6F6P}ksYC?-bXsWp=RIlgm31!jrKJl=N%c~)@m6kNoInz^-T1-j\n    19361: xG~@RkcLPoPK+j8FJox*!UvJ*WS0CPA{dN86PY5(=-x>7?{Fr`;$TF4~LQz2AS~E$tkPWaM;3G#s*6a"
    },
    {
      "file": "get-pip.py",
      "line": 19605,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Ps$wpCk{{EZbBqGgRD7?T;u35e^sQl!)vP+)hpK|W*Ch<1r+nx8fBMEX%16A09yuIlQMSW(!r0!Bz\nu<iDcaO${vCBjNT4=dLbwu1oZM5H_sXHBo`#G8kj41$eS!hO`DJsM6Vbq8>gJ6U_6<jE92{;o=!@pqx\nLTsw$UhjVi=ia6qdMdWW7qyu55UhGD@xqs>z_OSaTVJ+IRe{uRRx)DYN=*SUj-h5+tdbY3kSqN6eT99\nF=#u+=o`GGi!K#!5_Awzq+urC>o>6VWqfo>(f9+K`sGhh~ArQx#3Qq5uwh2|MtTbNBxCgq8;zPza<%L\nYx^ir=W(Sk@+6u2cvPjE0JP4IFvUtq6e4*h6c0*F<U>f9Z3hnI`T%Uz+!0(^LmESW`j#Z#${8%W*$$l\n0mxaDwZ@OcxETrpBdVRn8Gi(um_`D~S327oIThC&lw7={zA0>u`LvfOiC$(NmR#X$SzLJShwUP13$&C\n5Kvpu0dwL^r_IHOC(4P(V5P&h;hXI%t{RoKREZrr}==GNO(D|e@vY56lJ~H1UAF=g$%Z|<v9F0-o2aQ\n7zCU#4z#k@f!B@tXwzFw%*n~-z`",
      "context": "    19603: %in_lviX9&gPLuF}irFQ1V)Td}Dpg!Wk<kxW<<c(iA))L20w_@BhmnHbDBAgNN6MWPIt2XMN1VaEi}p\n    19604: qD?U#tt#|62LyOpx^!c!ft#^9<i5WT*gNr7}GpudG@a2HS!}G1`^oN4So@G(>J<C20#(N*}|YsLMLg3\n>>> 19605: @`Ps$wpCk{{EZbBqGgRD7?T;u35e^sQl!)vP+)hpK|W*Ch<1r+nx8fBMEX%16A09yuIlQMSW(!r0!Bz\n    19606: u<iDcaO${vCBjNT4=dLbwu1oZM5H_sXHBo`#G8kj41$eS!hO`DJsM6Vbq8>gJ6U_6<jE92{;o=!@pqx\n    19607: LTsw$UhjVi=ia6qdMdWW7qyu55UhGD@xqs>z_OSaTVJ+IRe{uRRx)DYN=*SUj-h5+tdbY3kSqN6eT99"
    },
    {
      "file": "get-pip.py",
      "line": 20600,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`=D?\nAG1kqVU-}=>%iewBzF>~FTHhz5*WR!kG8m=~wu${n4jK$R(^H*%a3MWKA9gbrzR$ZlFK5yghWXfg4!=\nCN^hr_MpjKa}Pf7}_KB=>$%Vv7^Ka{z#3VKuS`",
      "context": "    20598: ^&SWL35KsQkfiL(!w-EhM(pz$Da!H%NBL%mLaZ27`xxY>z%!<lST5P38$+N3~V0fZp$VVe9#2{6R%-!\n    20599: r#I^g&!6l5XlC+Jdw{DSB?Z1-_;$zx8^Pd=!s^A?GzcxA~|UD=hjGAoeVK?n?1F5B^uIf8n^M&uXhu7\n>>> 20600: 3=}{RYs)6sZP<NMlHdVYwos$*ql@ehVXP!-10-o8gI=pAk&#ZsXWcyp23hGJ<McJYF{eLT4c$KA`=D?\n    20601: AG1kqVU-}=>%iewBzF>~FTHhz5*WR!kG8m=~wu${n4jK$R(^H*%a3MWKA9gbrzR$ZlFK5yghWXfg4!=\n    20602: CN^hr_MpjKa}Pf7}_KB=>$%Vv7^Ka{z#3VKuS`;pIxA1&Th6IncIcmmN0ZDqW#6d3)gT=DKTVt#qz*b"
    },
    {
      "file": "get-pip.py",
      "line": 21070,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`i9${&hZ5Z){K_^~fUoxfITvW4nSqN@m!ZKc?TJQKB}9$_)R_IN~3X^C)!\ne9%A6Wi5Gzmf>jNKxKl1p#|!g*VIFt%uj$T)U!&+|%}JUySDnu{94MB+P;t_2V?D=9dP16W`",
      "context": "    21068: }|Ea#62z7X6)RQP4jwZm894#TQWoRnE`PNo*Ra3@Lv?AS*iSY1xXKWU@A<(Tn5b`}_N>apz=GttQi6B\n    21069: GZPMR_BE*xh2j|PQu!9(rM=Or$)(@Vw(*#ql(q5779(Q`YJ1A4O5JjyHPEVqAbe@#(a2xeKY9Xux%w-\n>>> 21070: 2^C9GnB)uJ&dw%xtZMmek`i9${&hZ5Z){K_^~fUoxfITvW4nSqN@m!ZKc?TJQKB}9$_)R_IN~3X^C)!\n    21071: e9%A6Wi5Gzmf>jNKxKl1p#|!g*VIFt%uj$T)U!&+|%}JUySDnu{94MB+P;t_2V?D=9dP16W`nk7`HR9\n    21072: )tUbj_6r7YSF0A)tVI<n{+dLHcV1r%o`4gs^yggnopXi>;!tHf$;7L*iI_;U6=Ew}VfUf0lpuDCG2XV"
    },
    {
      "file": "get-pip.py",
      "line": 21129,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`=j&iXu$ihDq+2_D!Hx!DZhTQBhQ%a\nyoab5Qi~(N8N4$JW2hgaOyI3&fdftAehI$=YP$hGAL${hrn@n|Indkx0ylmQ_No9DzENT&ua!X4wO*C\nmJVm2cl-sI<s5AgDcuUYy>+BaLHmU;o02p3CrvmT~fMk^lYk0SJ!J!0%u56lW=)D|^fis(D8iRu|V2>\nBLlJ(4o6;fk7N&;gH2VSdz#w)FK1}mNERklDmcI}~k@ED4+Axb0M;g3DD(~Qid3^a_JgE$x*pS(qR_F\nwN#-=4e}u&7#UcECYM96G5T_kH#H)d}}gdC>E`",
      "context": "    21127: GhW~zr4@m<6@?51WOX4JXq_~wE5Znu$jjhipGIZ6IwJ$ITpj4W<est|8>&8jSPCooV{1#@pu;Mc`N5M\n    21128: SF2df#Lq^w91>EU`V5>_?BrGSZ&Kkv6$3t_XsDI1z&u6%3eT7+vss4w^^&uK?iy{~~zZV3B940HCTuA\n>>> 21129: cpX^n_Rtzwqxw@p{t*#+;DKG*Wmp~Jbo?)Lk$eY4a3q8j*8s}`=j&iXu$ihDq+2_D!Hx!DZhTQBhQ%a\n    21130: yoab5Qi~(N8N4$JW2hgaOyI3&fdftAehI$=YP$hGAL${hrn@n|Indkx0ylmQ_No9DzENT&ua!X4wO*C\n    21131: mJVm2cl-sI<s5AgDcuUYy>+BaLHmU;o02p3CrvmT~fMk^lYk0SJ!J!0%u56lW=)D|^fis(D8iRu|V2>"
    },
    {
      "file": "get-pip.py",
      "line": 21617,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`AMRt+pS-q7pfzx%%2ScSEsG|Hiov0t4K6*^^eR=Z3(TCUPv(uB8uTD>n&u6b+y?\nJ%cYjMxc&X3Mt@w4}p1}f^MP-^UxtzE0B)4DN${AEjF`oq1innm4I?c3wj=vRf&g~^apTc%F}R=#Tq@\n86xCpYenodUXmiWccBwu9<y_iGUs3$GW)5s<N1g<hCygU02NX{0wEjtTpt`",
      "context": "    21615: 7xhel&0wWJ*-mR+U26Mgyf>0@_2-4&1bF75kFT2IS}#wEMY)7EoK#gQfR0PRYEi$`oj0$Fn>5dsXNxP\n    21616: nPWjP!S-we&?Wta770}Zg_zGs?#$4)E+T`_&9*)&AGl0g$75%-p_du=63g(}0v0+x|rMd!E7^_O_&zs\n>>> 21617: W7-`GlBq>Jm@v|1`AMRt+pS-q7pfzx%%2ScSEsG|Hiov0t4K6*^^eR=Z3(TCUPv(uB8uTD>n&u6b+y?\n    21618: J%cYjMxc&X3Mt@w4}p1}f^MP-^UxtzE0B)4DN${AEjF`oq1innm4I?c3wj=vRf&g~^apTc%F}R=#Tq@\n    21619: 86xCpYenodUXmiWccBwu9<y_iGUs3$GW)5s<N1g<hCygU02NX{0wEjtTpt`>;qHgAX!1rO5bM1a&}QJ"
    },
    {
      "file": "get-pip.py",
      "line": 21789,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`+iRhUpBApO1=R6t~}n5{${xL\n=hH#g@(|`D$IoZAp8eJbHUB#Df1Ce4`}q}f0skV;2i;(6`",
      "context": "    21787: &YCFOqPYbV;8p`SbHw*Jx?8y|KhOZ_;x)MI=?^bZA21zz|}Uz{wC)9jrdWQk8>FEq);MDfxrNIP5+sX\n    21788: xu&@Rl8Z{_xB)4zwd2l|34(KDE!<jdw6sk*06`ayhsL)c&|IeCLLi#2r}p#axYH936&2u!nZfBhOz#(\n>>> 21789: )7-`K74_nk-(``f2b*g?RnwSo=vATh8P#)x6env1H2=KO&>b^ik7V~`+iRhUpBApO1=R6t~}n5{${xL\n    21790: =hH#g@(|`D$IoZAp8eJbHUB#Df1Ce4`}q}f0skV;2i;(6`g7^FMt7SnU1f$gz13l7S>_U*a{RHwi6y6\n    21791: Z)RK$0T;}96Y&>6tDH?tst?8chxKyuG_C|~3e^5&U1QY-O00;m^cA{DpkPD!cDF6Upg8%>>0001RX>c"
    },
    {
      "file": "get-pip.py",
      "line": 21798,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`Pr+(7tc=K9396${O#mmxT^5@<\ncP~UMf|!wpW((p2E_xlW1-qVC5r`B!iV#u(xwqT-_^R}pBK6YLcYzq&#}(0v$DwNI<L75=YFBfxV~Fp\n_5SX8^)Bmr5zn#;2)$A<zr#ma<uwDx-tXe`",
      "context": "    21796: hXZeLK|1IO<X<5u+46~V*X-oN=GS#I{Ut|ECD=o4`6kqE+Ey`$F&S1a~3BjhtJh{^GrB0w-HB^hFtaJ\n    21797: ?Zq;+JfO>_z9<99K@D=X+Wj!m)iYGY$l)kT~qb#|>|m??~3!O|^rT9Hc_-%y<|YiTO4Xc5kn$ra2vtz\n>>> 21798: c^N1pqjw)ivE_Ij>Pn1Y)`lmD*H!@oO?tFCXphZ7BGQe>`~h;@~L$`Pr+(7tc=K9396${O#mmxT^5@<\n    21799: cP~UMf|!wpW((p2E_xlW1-qVC5r`B!iV#u(xwqT-_^R}pBK6YLcYzq&#}(0v$DwNI<L75=YFBfxV~Fp\n    21800: _5SX8^)Bmr5zn#;2)$A<zr#ma<uwDx-tXe`yG2sTklZ)jLH)WcYRx}kiu_}lJ8yxIsDJyk%;mY6Kyd{"
    },
    {
      "file": "get-pip.py",
      "line": 22229,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`tLW8x+@GG0T01aSz)pa7s4_Y#1ZLR0H-m;v{>G>n;*%@uG{VmGri135C$W(a27jm?KHDN11DvVka|\nM&_DU3ca~Jb%0W7a3ovAhojQFFj0@>86>V-ut*RrBg&${Mp>n>mK|>uV30ypVQgyat5S%jT?rzGAVd>\nv;!N_qQj2UUOhVhK;7x%*8AeS>9FkjxF@Z>c2zPq89}HkX2(5|{B}>#iY1A>HRIKg53u(mTz}Jhi*Xq\nnP_r+qnzF4oLxn1+JF<S-dAYT-etdJBzTlG^`",
      "context": "    22227: j|3`Ah*<xh$OqLlBjp866a=tPDiwGuHj0qdpTauOnvz|aRRK*UZ@{tqjrRxt!@mwA|f=j8(r<HRG5v}\n    22228: _DvKs_cDY%yCP<PhrckjFOUHDN9nCi!{7<ChbL^$v)W7@*D}F%3Dq8ww`?A_wfi_Jo6IN&r<bT>}$ZA\n>>> 22229: O`tLW8x+@GG0T01aSz)pa7s4_Y#1ZLR0H-m;v{>G>n;*%@uG{VmGri135C$W(a27jm?KHDN11DvVka|\n    22230: M&_DU3ca~Jb%0W7a3ovAhojQFFj0@>86>V-ut*RrBg&${Mp>n>mK|>uV30ypVQgyat5S%jT?rzGAVd>\n    22231: v;!N_qQj2UUOhVhK;7x%*8AeS>9FkjxF@Z>c2zPq89}HkX2(5|{B}>#iY1A>HRIKg53u(mTz}Jhi*Xq"
    },
    {
      "file": "get-pip.py",
      "line": 22708,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`A${n#`fq4U5KQn`w-iE*7~;ji>S6\n^Jt4!MC&J|BJWMb3u1l>Ca1gkP4Ej6|PSk$vTIv&I!$L3`dL4X^bS`n}TQtd(DL4v)_r+#ccT7QOHKh\na7}5&;J94TScJt|H%kI-CdjgsODbZs0S>bh3eK^^ylXi3gz|E%(%VGKQGKlwXk(%0OavW-V-v=BT_Gk\nbr<e^QaRS3h%E%8gyx-{FREDSS6Q-g-sXxL~h#2cxaS5RakX$ZI%fy&U^<ZQ=Cr%o{jGvH>N;=1S1|!\n1O%>~(f=|)MsXY^1`",
      "context": "    22706: XaW0~EA|4eZy!urB(TDxoCsMMB&<s5hK9kCm<Y{W4)TaVhz^I2&>Z+0ac7!7gpGm3X^Se`0TT;KA9IA\n    22707: R|5pb#NGv8VD0*`9~*uxW20I9I{THGh(uyIS@F$6$#i%q&i7KU0|PDneK24d0R4xYZFRv^~ZK%D9OTo\n>>> 22708: *7_UDY{O#-$<7fg^-iUun~jFQ7AqDC*N&AfZFU6VkS(BD5P<)m`A${n#`fq4U5KQn`w-iE*7~;ji>S6\n    22709: ^Jt4!MC&J|BJWMb3u1l>Ca1gkP4Ej6|PSk$vTIv&I!$L3`dL4X^bS`n}TQtd(DL4v)_r+#ccT7QOHKh\n    22710: a7}5&;J94TScJt|H%kI-CdjgsODbZs0S>bh3eK^^ylXi3gz|E%(%VGKQGKlwXk(%0OavW-V-v=BT_Gk"
    },
    {
      "file": "get-pip.py",
      "line": 23638,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`(xq)q<<sRk50+9~3>W>Iq(3(f*^WUFfDG9_q~*a%b?yj\nhTZx9ok4?uZ9O3JPlb@+J{s6a}Q1yXH4&>sreR@r0mw1${%4-7tN>c&#<_`+o|~$7GfNn1~F{SAoQ|N\n&9^SOD?GDV3m}Y(V12rb!pO?pM8S#kAd3MmzD^OMASpysX9M_aLabnU@WawhZ{h3j>W`",
      "context": "    23636: h5x;gfNk1C-V$qG&y9D1MTfZ>M{q|;+Z;a3;u{PFgO7pDn3-80In7y6b2;N2bNCOnk6^NfHROgu2eil\n    23637: y=FQJ>A5{*{}O#VT3fU@4p5-qB4DCXftz}iZ8sCSm9Tbl7>y1V1hMjRNG0|S9sB`nAp=QNLaDNs}fh;\n>>> 23638: t}xGNGQT1G_+1+?awyZ|oR$zy<8QnBjx^1`(xq)q<<sRk50+9~3>W>Iq(3(f*^WUFfDG9_q~*a%b?yj\n    23639: hTZx9ok4?uZ9O3JPlb@+J{s6a}Q1yXH4&>sreR@r0mw1${%4-7tN>c&#<_`+o|~$7GfNn1~F{SAoQ|N\n    23640: &9^SOD?GDV3m}Y(V12rb!pO?pM8S#kAd3MmzD^OMASpysX9M_aLabnU@WawhZ{h3j>W`!3-@}MNqb-m"
    },
    {
      "file": "get-pip.py",
      "line": 24160,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`89^unQp8Qu-;;L^P@4SlDFVc\n>f&OkfH$Z0PV%A*kb@%2gk|NEI!?o${<Ud1X-Au(2j+u%lv^STS;rR(jPfmIXtw66RU-T04_-bh&ZDU\nXa9b*R;wLd(5#ZssMH`7Iup#TSL!ci{|6Qk6mr-z4@Cv>BXq3R_P5UE$%A#&hZc^6mJudATO3M(yCP*\n7>Dz5y*~4@Ttq-}tLJ8N+f>7LFqA{oG+<{(IygfiB|2I=2U$w@O4|hu%J;#LkHYV+B%p;MHYemz!c!R\nWcC8DHUSG`",
      "context": "    24158: `XT_x9Gx?4y62|NCE;SFf&bZzGl4i)2xC%=8g!p+R4ZzquhXS!e}=H|O(UY+gTJUOVq^&re@D{XaY1u\n    24159: g>3{&(H0a%a8Mm%MaIf)BNi6%%S;sIzM|W8*cdTw-;~TzJq`B^Q-0AyVGlX4(P`VE1dHgbdOG)OG?*d\n>>> 24160: xrDsCSuR79EYW;zg!9~LMmjk(aCB2-GeBkl#;q4JE5<=+!G`pE^Qbe`89^unQp8Qu-;;L^P@4SlDFVc\n    24161: >f&OkfH$Z0PV%A*kb@%2gk|NEI!?o${<Ud1X-Au(2j+u%lv^STS;rR(jPfmIXtw66RU-T04_-bh&ZDU\n    24162: Xa9b*R;wLd(5#ZssMH`7Iup#TSL!ci{|6Qk6mr-z4@Cv>BXq3R_P5UE$%A#&hZc^6mJudATO3M(yCP*"
    },
    {
      "file": "get-pip.py",
      "line": 24597,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`^JY%kjw01;iF5A4fQ>t${I~VhSScrtWKb5F^Y)nl>1xfQX&MS%N!x#MFiNjBcwJe=I|*gI\n!(x;`sD(Y-3~`+k_MG-EV*dl_e+pw}Eb46#c|^6H3U{PSEX%PX3toLLwL5`",
      "context": "    24595: 4;R}KFHnvWoU1Er?$wnukGDBp3>uqDJq+$V?l%^;tfFK6B8rPLI{UF-cXXI7hDQqY47R2;TaZ3P_gjC\n    24596: 9jJ3uye%+1p)=pthI$$G`&CN1&EJl-a#PJZnN2;N1a^g)fQFw#0(WyBZpF}k?sf*npG+IEz<S~lWJtd\n>>> 24597: cAl~U@6Y`^JY%kjw01;iF5A4fQ>t${I~VhSScrtWKb5F^Y)nl>1xfQX&MS%N!x#MFiNjBcwJe=I|*gI\n    24598: !(x;`sD(Y-3~`+k_MG-EV*dl_e+pw}Eb46#c|^6H3U{PSEX%PX3toLLwL5`K2T<aSjLskUwgxxE^>$S\n    24599: oYvP5xtGlFA|`8@Y6jy{|H3&3}QeqP%XqzO+JyYY7)AmSR1z~h%9(xlg6&Lo|b^9N3YSBw>@fW8xthO"
    },
    {
      "file": "get-pip.py",
      "line": 25263,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`F2WEw^!d+%ONK0h\ncumQKB(yrpr%v9F@W<Rnr55ZJ)<ruKGzAGHc!jj=_Uo_;x*}>X+#G(=)VgRLo><&fv%c5bKz%A0Hn)-\n)@n)WDz$lV;sW&EvSUi?wpro-M(KHE?E8ol8)Wpntoj-gExmIHZrY^nHXYY$ZL0r)-a9H!^2a%nG2*O\nD(fv_QVYq${rHTh~{=G^uSLNR1NW1E9d*}zunc^D{IH&^Di4%TDTn33$Aq#4KiKVYq10QVQ_#-8Qs@z\nNG^o322ccX;ni}7n-ct#RFyq%B-(UL5py47Yy7Ex`",
      "context": "    25261: sCHS{GS~%6Nb~fK8v%vj$?Ln}|_lpjD@njp>Jg^gRO!U~TaSzagY1J0=$n<Ah;mD-rpK5RBK#s526d2\n    25262: FLwLsCF*wHvNW|x5}Y|h4lO>B3*r=kfuAHqAU>*Ob4nk}f!ZtQe|>;K~8>>tkDa-BBuFp4@ravzHK-#\n>>> 25263: mBQM*$OZ#qhmK!=2jFC886Xq<^`oC@2FJEg1C|G<-n`VTuY`^h9}&*9aiU`?A@4`F2WEw^!d+%ONK0h\n    25264: cumQKB(yrpr%v9F@W<Rnr55ZJ)<ruKGzAGHc!jj=_Uo_;x*}>X+#G(=)VgRLo><&fv%c5bKz%A0Hn)-\n    25265: )@n)WDz$lV;sW&EvSUi?wpro-M(KHE?E8ol8)Wpntoj-gExmIHZrY^nHXYY$ZL0r)-a9H!^2a%nG2*O"
    },
    {
      "file": "get-pip.py",
      "line": 25507,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`<${ib@j_I+EQuqT+zDkOC8z?s|Rjs1hb{z3yC&P$3@?%XeO|\n=?w%xd~FP}FKf{Or|%NQk2e`",
      "context": "    25505: &m7DT%Bb4hhBI}@2@AIIQmpr@Vtl!RGs>Av+>~3|68-ygH6fDx_#d;+7PRB|=UG4Sc-OfA$)UkLjt)o\n    25506: axl(`2?n=hAyxf=TqPLo}H0rN&kS^RD#hd^4fBrwEMoYx4jh4U`>vEG_Hbt@3h5pk~wynV(ja@cl`3B\n>>> 25507: 3N5K*%UKCY#zDJYD&PiLW<Vo%>cLVh`<${ib@j_I+EQuqT+zDkOC8z?s|Rjs1hb{z3yC&P$3@?%XeO|\n    25508: =?w%xd~FP}FKf{Or|%NQk2e`z>8luX?C@koIx}VN2}SQi{<eq}+-tb?NLKll?jNhK%X2A4Zyg<Z<Sg;\n    25509: n(uTuPkDBi=I*y>$Mq;Q!#=)gNyqZt;m_L^<KiEXUFK3rtYwv%8c%eolh~LKX&q(_@}iH{w!g&(j$(_"
    },
    {
      "file": "get-pip.py",
      "line": 25838,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`A4UxQRw{Ayic&DJ*a5M3La0ly|${hf-&ftwe_n74NKHiH$z(+Q!=%Vdkz(`t\nS*elFnBRAv<rsaidf^8P0horPcWVHSbIM{I3+#38jh}J_W&J`",
      "context": "    25836: i+ABD$WL9gJBvxm=;29otg>s;j`erI-=b#w+P#+e=e_9N`2F%|2W4TjJ;s~7rBj#OF&^46?5-918gfL\n    25837: wp5%9}du?2$709T6wwK>BIZ7PWl<SLbhktpx<3EY;e^DT(-kTUfmC}@T|+;e>WAbw~(dI_2!r3c6GDu\n>>> 25838: S9GdO8BvU<?Z?h`w?Z`A4UxQRw{Ayic&DJ*a5M3La0ly|${hf-&ftwe_n74NKHiH$z(+Q!=%Vdkz(`t\n    25839: S*elFnBRAv<rsaidf^8P0horPcWVHSbIM{I3+#38jh}J_W&J`?n&F%boyc6Z<*N=y~}Xh>$+#{+2-?q\n    25840: Pi+T1_rJ6Z8`+b*S+%|=;xK7ny*Nse=(kVYd75f8@Fg4D9@5Ft9W+m+f%l{zb{x80BhTw5rjzKd`Ve`"
    },
    {
      "file": "get-pip.py",
      "line": 26158,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`?3p\nu|o+@@iUcu^rM|${SM=i$*GWi(m^8&dnXKuY75;Oj5Y=d@KpYPo+b*psxgGQWdvV##N8OUfAD(Y6h^7\nT-vCzrtC_FW5#lgUHGQgg+X*p3I!;!9ngkkp~t!8MJlv!HMfs%Ub63>efKnG{Rylbgr#ubKp|xqcI+r\nz5E-x^$trkicnx>e*056l+K@VzmtL)g=FJ{T@AQ$stMO}Nj7d9l<<w!~OUv`",
      "context": "    26156: j46^4W0I9ib1R#w9@G(V1WE%ZM!5*`>Sj}~UDN!{LQk3d-4aS$Ypvs9zM9i**Lq{m9@vP(G$&w;|>#x\n    26157: !97zLu*v#OMYqI8u*5iy<t#6Wx(SYHVp>068XMn0s<lH<fhJtP?!?BEfPjo@G9abQOqL9(!7j1SYpVL\n>>> 26158: _PT&%}gNw_6`7>u^+vxefy;3n{KOxu?tvo%U;5NJ(cSMV_sU>J^uD69bkbYtdP@BCu_nD~Yf(#H`?3p\n    26159: u|o+@@iUcu^rM|${SM=i$*GWi(m^8&dnXKuY75;Oj5Y=d@KpYPo+b*psxgGQWdvV##N8OUfAD(Y6h^7\n    26160: T-vCzrtC_FW5#lgUHGQgg+X*p3I!;!9ngkkp~t!8MJlv!HMfs%Ub63>efKnG{Rylbgr#ubKp|xqcI+r"
    },
    {
      "file": "get-pip.py",
      "line": 26721,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`z|ZjDKY_O3QQhe;k?UZJV&9WQKTOjM\n%LH~~73c!-z4r?+vjC=chxx)$36IQuD$aXP&N<2z!}8rcI*#jLJ~z>V2DozB2upH5-v1U${*uq<ftye\nkVh(}xSW#wXi5$>(D_#Vv$hz`",
      "context": "    26719: C^3(?u3u?0(-z0kQ(#5M(4wWu$6cYcuJAMN?5Ls0TT;Zw#55_k&DFe5yh{5FkDAvRV16?Xha8NjdLIn\n    26720: Q3(T9!@+nk`qT^-Bo$}d^++F&KAG)*vcSeEEN}`S9RP-03|*ie%_-))=$4j_&b~+Ja#jyN6-=OYSgT%\n>>> 26721: sYjF;VQnx+b4ZooP8=!z0w0hb~S<|V_VToB8ShJ!H$z{6=mU`z|ZjDKY_O3QQhe;k?UZJV&9WQKTOjM\n    26722: %LH~~73c!-z4r?+vjC=chxx)$36IQuD$aXP&N<2z!}8rcI*#jLJ~z>V2DozB2upH5-v1U${*uq<ftye\n    26723: kVh(}xSW#wXi5$>(D_#Vv$hz`!=LsCI}s6!K_TL;}Qu0>_KSmuZ;`f4&In{jR#pfm$mV02T#j6GTI?J"
    },
    {
      "file": "get-pip.py",
      "line": 27049,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`L93#_PLuJaStu@=<oVZZ*=qs\nj;GJV@${)Uo<0S~)5mcnj(R$d)chch))GIx(W5x}&&ASzI-XBM^vRe$gD+KwCu6#wHCtMN7t&eCrD#2\n(VGJ=Oi2r^{lY6;4-UJ0W)cVkt95u%PKSq}e#0_xSu@XL>1&L&f71nSd=)gwR*ok;Np+_B7(Ge9J*n#\n(B_<J<`",
      "context": "    27047: S5&qxzjUL+{fhj*u_gTa_gP+yY;7YH;#(k1FsJQ(1Bn!u9>)TGs6!6m=~moNi|2MtFVV~A^uQFaym4h\n    27048: kJ0^(t6sOL*@vAgm8-Q0eNkm6NyL58rfrFpi5fOk*G1nst<b^Yax{<o_mOkRmr7;WN>*33Lw+Zxn<R$\n>>> 27049: G^2-zEgp}7Qgy;LjBK92aLZ}kOxJP^}y}`ugs=<_vnmW#Foka0v$ZN`L93#_PLuJaStu@=<oVZZ*=qs\n    27050: j;GJV@${)Uo<0S~)5mcnj(R$d)chch))GIx(W5x}&&ASzI-XBM^vRe$gD+KwCu6#wHCtMN7t&eCrD#2\n    27051: (VGJ=Oi2r^{lY6;4-UJ0W)cVkt95u%PKSq}e#0_xSu@XL>1&L&f71nSd=)gwR*ok;Np+_B7(Ge9J*n#"
    },
    {
      "file": "get-pip.py",
      "line": 27815,
      "pattern": "Template literal SQL with variables",
      "risk": "HIGH",
      "description": "Template literals with variables in SQL",
      "code": "`~7qW;%)CQ$sLt<${L1KDWlCKMns3p5FYt9DO=7xwaH&R%mAr-Y~VE{H8!YVi\n~9}v3V_Z$JG;2yn+{DrK`",
      "context": "    27813: P^`*T|(%K37g4IJ0%7T-xkryW<u>;}Hy7NtT4IP6&4WsgKVB%2;C9IGlb8*m|F0tGk}%W~E)4?6qQH<\n    27814: Z$e#?NAJM@6frmVBF5(kAHsgY)azRsDcWqQ6wyx5|L<bk)<@>08kk!#?l~12MG=-1n$dTAJqU|HsWT9\n>>> 27815: YJ&tgCA&gSZCIW}O3o`~7qW;%)CQ$sLt<${L1KDWlCKMns3p5FYt9DO=7xwaH&R%mAr-Y~VE{H8!YVi\n    27816: ~9}v3V_Z$JG;2yn+{DrK`hf6-8nbA{9=qdEo4TwJOrHnhq*jfVQs^*#qQz#eEzCJL6<d}btgrlV)Sb}\n    27817: OH8<g{tlRlriwNBd~qznFB%@wK~9cJxGZWMW?;7+>!<?{WTS9Edtj)cRZ+I!R|FA1tqC~%5BU2vx;6("
    },
    {
      "file": "loadbuyselldaily_backup.py",
      "line": 67,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n        \"\"\"\n        if limit:\n            q += \" LIMIT %s\"\n            cur.execute(q, (limit,))\n        else:\n            cur.execute(q)\n        return [r[0] for r in cur.fetchall()]\n    finally:\n        cur.close()\n        conn.close()\n\ndef create_buy_sell_table(cur):\n    cur.execute(\"DROP TABLE IF EXISTS buy_sell_daily;\")\n    cur.execute(\"\"\"\n      CREATE TABLE buy_sell_daily (\n        id           SERIAL PRIMARY KEY,\n        symbol       VARCHAR(20)    NOT NULL,\n        timeframe    VARCHAR(10)    NOT NULL,\n        date         DATE           NOT NULL,\n        open         REAL,\n        high         REAL,\n        low          REAL,\n        close        REAL,\n        volume       BIGINT,\n        signal       VARCHAR(10),\n        buylevel     REAL,\n        stoplevel    REAL,\n        inposition   BOOLEAN,\n        strength     REAL,\n        UNIQUE(symbol, timeframe, date)\n      );\n    \"\"\")\n\ndef insert_symbol_results(cur, symbol, timeframe, df):\n    insert_q = \"\"\"\n      INSERT INTO buy_sell_daily (\n        symbol, timeframe, date,\n        open, high, low, close, volume,\n        signal, buylevel, stoplevel, inposition, strength\n      ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n      ON CONFLICT (symbol, timeframe, date) DO NOTHING;\n    \"\"\"\n    inserted = 0\n    for idx, row in df.iterrows():\n        try:\n            # Check for NaNs or missing values\n            vals = [row.get('open'), row.get('high'), row.get('low'), row.get('close'), row.get('volume'),\n                    row.get('Signal'), row.get('buyLevel'), row.get('stopLevel'), row.get('inPosition'), row.get('strength')]\n            if any(pd.isnull(v) for v in vals):\n                logging.warning(f\"Skipping row {idx} for {symbol} {timeframe} due to NaN: {vals}\")\n                continue\n            cur.execute(insert_q, (\n                symbol,\n                timeframe,\n                row['date'].date(),\n                float(row['open']), float(row['high']), float(row['low']),\n                float(row['close']), int(row['volume']),\n                row['Signal'], float(row['buyLevel']),\n                float(row['stopLevel']), bool(row['inPosition']), float(row['strength'])\n            ))\n            inserted += 1\n        except Exception as e:\n            logging.error(f\"Insert failed for {symbol} {timeframe} row {idx}: {e} | row={row}\")\n    logging.info(f\"Inserted {inserted} rows for {symbol} {timeframe}\")\n\n###############################################################################\n# 2) RISK-FREE RATE (FRED)\n###############################################################################\ndef get_risk_free_rate_fred(api_key):\n    url = (\n      \"https://api.stlouisfed.org/fred/series/observations\"\n      f\"?series_id=DGS3MO&api_key={api_key}&file_type=json\"\n    )\n    r = requests.get(url, timeout=10)\n    r.raise_for_status()\n    obs = [o for o in r.json().get(\"observations\", []) if o[\"value\"] != \".\"]\n    return float(obs[-1][\"value\"]) / 100.0 if obs else 0.0\n\n###############################################################################\n# 3) FETCH FROM DB (prices + technicals)\n###############################################################################\ndef fetch_symbol_from_db(symbol, timeframe):\n    tf = timeframe.lower()\n    # Table name mapping for consistency with loader scripts\n    price_table_map = {\n        \"daily\": \"price_daily\",\n        \"weekly\": \"price_weekly\",\n        \"monthly\": \"price_monthly\"\n    }\n    tech_table_map = {\n        \"daily\": \"technical_data_daily\",\n        \"weekly\": \"technical_data_weekly\",\n        \"monthly\": \"technical_data_monthly\"\n    }\n    if tf not in price_table_map or tf not in tech_table_map:\n        raise ValueError(f\"Invalid timeframe: {timeframe}\")\n    price_table = price_table_map[tf]\n    tech_table  = tech_table_map[tf]\n    conn = get_db_connection()\n    cur  = conn.cursor(cursor_factory=RealDictCursor)\n    try:\n        sql = f\"\"\"\n          SELECT\n            p.date, p.open, p.high, p.low, p.close, p.volume,\n            t.rsi, t.atr, t.adx, t.plus_di, t.minus_di,\n            t.sma_50,\n            t.pivot_high,\n            t.pivot_low\n          FROM {price_table} p\n          JOIN {tech_table}  t\n            ON p.symbol = t.symbol AND p.date = t.date\n          WHERE p.symbol = %s\n          ORDER BY p.date ASC;\n        \"\"\"\n        logging.info(f\"[fetch_symbol_from_db] Executing SQL for {symbol} {timeframe}\")\n        cur.execute(sql, (symbol,))\n        rows = cur.fetchall()\n        logging.info(f\"[fetch_symbol_from_db] Got {len(rows)} rows for {symbol} {timeframe}\")\n    except Exception as e:\n        logging.error(f\"[fetch_symbol_from_db] SQL error for {symbol} {timeframe}: {e}\")\n        rows = []\n    finally:\n        cur.close()\n        conn.close()\n\n    if not rows:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(rows)\n    df['date'] = pd.to_datetime(df['date'])\n    num_cols = ['open','high','low','close','volume',\n                'rsi','atr','adx','plus_di','minus_di',\n                'sma_50','pivot_high','pivot_low']\n    for c in num_cols:\n        df[c] = pd.to_numeric(df[c], errors='coerce')\n    return df.reset_index(drop=True)\n\n###############################################################################\n# 4) SIGNAL STRENGTH CALCULATION\n###############################################################################\ndef calculate_signal_strength(df, index):\n    \"\"\"Calculate signal strength score (0-100) for a given row\"\"\"\n    try:\n        row = df.iloc[index]\n        signal_type = row.get('Signal', 'None')\n        \n        if signal_type == 'None':\n            return 50.0\n        \n        # Get required values\n        rsi = row.get('rsi', 50)\n        adx = row.get('adx', 25)\n        close = row.get('close', 0)\n        high = row.get('high', close)\n        low = row.get('low', close)\n        volume = row.get('volume', 0)\n        sma_50 = row.get('sma_50', close)\n        atr = row.get('atr', 0)\n        pivot_high = row.get('pivot_high', 0)\n        pivot_low = row.get('pivot_low', 0)\n        \n        # Calculate average volume (20-period rolling average)\n        start_idx = max(0, index - 19)\n        avg_volume = df.iloc[start_idx:index+1]['volume'].mean()\n        \n        strength = 0.0\n        \n        # 1. Technical Momentum (30%)\n        if signal_type == 'Buy':\n            if rsi > 70:\n                strength += 12  # Very bullish\n            elif rsi > 60:\n                strength += 9   # Bullish\n            elif rsi > 50:\n                strength += 6   # Neutral bullish\n            else:\n                strength += 3   # Weak\n        elif signal_type == 'Sell':\n            if rsi < 30:\n                strength += 12  # Very bearish\n            elif rsi < 40:\n                strength += 9   # Bearish\n            elif rsi < 50:\n                strength += 6   # Neutral bearish\n            else:\n                strength += 3   # Weak\n        \n        # ADX trend strength\n        if adx > 40:\n            strength += 9   # Very strong trend\n        elif adx > 30:\n            strength += 6   # Strong trend\n        elif adx > 20:\n            strength += 3   # Moderate trend\n        else:\n            strength += 1   # Weak trend\n        \n        # Price vs SMA-50\n        if signal_type == 'Buy' and close > sma_50:\n            price_above_sma = ((close - sma_50) / sma_50) * 100\n            strength += min(9, max(0, price_above_sma * 3))\n        elif signal_type == 'Sell' and close < sma_50:\n            price_below_sma = ((sma_50 - close) / sma_50) * 100\n            strength += min(9, max(0, price_below_sma * 3))\n        \n        # 2. Volume Confirmation (25%)\n        if avg_volume > 0:\n            volume_ratio = volume / avg_volume\n            if volume_ratio > 2.0:\n                strength += 25  # Exceptional volume\n            elif volume_ratio > 1.5:\n                strength += 20  # High volume\n            elif volume_ratio > 1.2:\n                strength += 15  # Above average volume\n            elif volume_ratio > 0.8:\n                strength += 10  # Normal volume\n            else:\n                strength += 5   # Low volume\n        else:\n            strength += 12.5  # Default if no volume data\n        \n        # 3. Price Action (25%)\n        if high != low:\n            close_position = (close - low) / (high - low)\n            if signal_type == 'Buy':\n                if close_position > 0.8:\n                    strength += 25  # Strong bullish close\n                elif close_position > 0.6:\n                    strength += 19  # Good bullish close\n                elif close_position > 0.4:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bullish close\n            elif signal_type == 'Sell':\n                if close_position < 0.2:\n                    strength += 25  # Strong bearish close\n                elif close_position < 0.4:\n                    strength += 19  # Good bearish close\n                elif close_position < 0.6:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bearish close\n        else:\n            strength += 12.5  # Default if no price action\n        \n        # 4. Volatility Context (10%)\n        if close > 0 and atr > 0:\n            atr_percentage = (atr / close) * 100\n            if 1.5 <= atr_percentage <= 3.0:\n                strength += 10  # Ideal volatility\n            elif 1.0 <= atr_percentage <= 4.0:\n                strength += 8   # Good volatility\n            elif 0.5 <= atr_percentage <= 5.0:\n                strength += 6   # Acceptable volatility\n            elif atr_percentage > 5.0:\n                strength += 3   # High volatility (risky)\n            else:\n                strength += 4   # Low volatility (less opportunity)\n        else:\n            strength += 5  # Default if no volatility data\n        \n        # 5. Breakout Magnitude (10%)\n        if signal_type == 'Buy' and pivot_high > 0:\n            breakout_percent = ((close - pivot_high) / pivot_high) * 100\n            if breakout_percent > 3.0:\n                strength += 10  # Strong breakout\n            elif breakout_percent > 1.5:\n                strength += 7   # Good breakout\n            elif breakout_percent > 0.5:\n                strength += 5   # Moderate breakout\n            else:\n                strength += 2   # Weak breakout\n        elif signal_type == 'Sell' and pivot_low > 0:\n            breakdown_percent = ((pivot_low - close) / pivot_low) * 100\n            if breakdown_percent > 3.0:\n                strength += 10  # Strong breakdown\n            elif breakdown_percent > 1.5:\n                strength += 7   # Good breakdown\n            elif breakdown_percent > 0.5:\n                strength += 5   # Moderate breakdown\n            else:\n                strength += 2   # Weak breakdown\n        else:\n            strength += 5  # Default if no breakout data\n        \n        return min(100.0, max(0.0, strength))\n        \n    except Exception as e:\n        logging.warning(f\"Error calculating signal strength at index {index}: {e}\")\n        return 50.0\n\n###############################################################################\n# 5) SIGNAL GENERATION & IN-POSITION LOGIC\n###############################################################################\ndef generate_signals(df, atrMult=1.0, useADX=True, adxS=30, adxW=20):\n    df['TrendOK']     = df['close'] > df['sma_50']\n    df['RSI_prev']    = df['rsi'].shift(1)\n    df['rsiBuy']      = (df['rsi']>50)&(df['RSI_prev']<=50)\n    df['rsiSell']     = (df['rsi']<50)&(df['RSI_prev']>=50)\n    df['LastPH']      = df['pivot_high'].shift(1).ffill()\n    df['LastPL']      = df['pivot_low'].shift(1).ffill()\n    df['stopBuffer']  = df['atr'] * atrMult\n    df['stopLevel']   = df['LastPL'] - df['stopBuffer']\n    df['buyLevel']    = df['LastPH']\n    df['breakoutBuy'] = df['high'] > df['buyLevel']\n    df['breakoutSell']= df['low']  < df['stopLevel']\n\n    if useADX:\n        flt    = ((df['adx']>adxS) |\n                  ((df['adx']>adxW) & (df['adx']>df['adx'].shift(1))))\n        adxOK  = (df['plus_di']>df['minus_di']) & flt\n        exitD  = ((df['plus_di'].shift(1)>df['minus_di'].shift(1)) &\n                  (df['plus_di']<df['minus_di']))\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK'] & adxOK) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'] | exitD)\n    else:\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK']) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'])\n\n    in_pos, sigs, pos = False, [], []\n    for i in range(len(df)):\n        if in_pos and df.loc[i,'finalSell']:\n            sigs.append('Sell'); in_pos=False\n        elif not in_pos and df.loc[i,'finalBuy']:\n            sigs.append('Buy'); in_pos=True\n        else:\n            sigs.append('None')\n        pos.append(in_pos)\n\n    df['Signal']    = sigs\n    df['inPosition']= pos\n    \n    # Calculate signal strength for each row\n    strengths = []\n    for i in range(len(df)):\n        strength = calculate_signal_strength(df, i)\n        strengths.append(strength)\n    \n    df['strength'] = strengths\n    return df\n\n###############################################################################\n# 5) BACKTEST & METRICS\n###############################################################################\ndef backtest_fixed_capital(df):\n    trades = []\n    buys   = df.index[df['Signal']=='Buy'].tolist()\n    if not buys:\n        return trades, [], [], None, None\n\n    df2 = df.iloc[buys[0]:].reset_index(drop=True)\n    pos_open = False\n    for i in range(len(df2)-1):\n        sig, o, d = df2.loc[i,'Signal'], df2.loc[i+1,'open'], df2.loc[i+1,'date']\n        if sig=='Buy' and not pos_open:\n            pos_open=True; trades.append({'date':d,'action':'Buy','price':o})\n        elif sig=='Sell' and pos_open:\n            pos_open=False; trades.append({'date':d,'action':'Sell','price':o})\n\n    if pos_open:\n        last = df2.iloc[-1]\n        trades.append({'date':last['date'],'action':'Sell','price':last['close']})\n\n    rets, durs = [], []\n    i = 0\n    while i < len(trades)-1:\n        if trades[i]['action']=='Buy' and trades[i+1]['action']=='Sell':\n            e, x = trades[i]['price'], trades[i+1]['price']\n            if e >= 1.0:\n                rets.append((x-e)/e)\n                durs.append((trades[i+1]['date']-trades[i]['date']).days)\n            i += 2\n        else:\n            i +",
      "context": "    65:           SELECT symbol\n    66:             FROM stock_symbols\n>>> 67:            WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n    68:         \"\"\"\n    69:         if limit:"
    },
    {
      "file": "loadbuysellmonthly_backup.py",
      "line": 69,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n        \"\"\"\n        if limit:\n            q += \" LIMIT %s\"\n            cur.execute(q, (limit,))\n        else:\n            cur.execute(q)\n        return [r[0] for r in cur.fetchall()]\n    finally:\n        cur.close()\n        conn.close()\n\ndef create_buy_sell_table(cur):\n    cur.execute(\"DROP TABLE IF EXISTS buy_sell_monthly;\")\n    cur.execute(\"\"\"\n      CREATE TABLE buy_sell_monthly (\n        id           SERIAL PRIMARY KEY,\n        symbol       VARCHAR(20)    NOT NULL,\n        timeframe    VARCHAR(10)    NOT NULL,\n        date         DATE           NOT NULL,\n        open         REAL,\n        high         REAL,\n        low          REAL,\n        close        REAL,\n        volume       BIGINT,\n        signal       VARCHAR(10),\n        buylevel     REAL,\n        stoplevel    REAL,\n        inposition   BOOLEAN,\n        strength     REAL,\n        UNIQUE(symbol, timeframe, date)\n      );\n    \"\"\")\n\ndef insert_symbol_results(cur, symbol, timeframe, df):\n    insert_q = \"\"\"\n      INSERT INTO buy_sell_monthly (\n        symbol, timeframe, date,\n        open, high, low, close, volume,\n        signal, buylevel, stoplevel, inposition, strength\n      ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n      ON CONFLICT (symbol, timeframe, date) DO NOTHING;\n    \"\"\"\n    inserted = 0\n    for idx, row in df.iterrows():\n        try:\n            # Check for NaNs or missing values\n            vals = [row.get('open'), row.get('high'), row.get('low'), row.get('close'), row.get('volume'),\n                    row.get('Signal'), row.get('buyLevel'), row.get('stopLevel'), row.get('inPosition'), row.get('strength')]\n            if any(pd.isnull(v) for v in vals):\n                logging.warning(f\"Skipping row {idx} for {symbol} {timeframe} due to NaN: {vals}\")\n                continue\n            cur.execute(insert_q, (\n                symbol,\n                timeframe,\n                row['date'].date(),\n                float(row['open']), float(row['high']), float(row['low']),\n                float(row['close']), int(row['volume']),\n                row['Signal'], float(row['buyLevel']),\n                float(row['stopLevel']), bool(row['inPosition']), float(row['strength'])\n            ))\n            inserted += 1\n        except Exception as e:\n            logging.error(f\"Insert failed for {symbol} {timeframe} row {idx}: {e} | row={row}\")\n    logging.info(f\"Inserted {inserted} rows for {symbol} {timeframe}\")\n\n###############################################################################\n# 2) RISK-FREE RATE (FRED)\n###############################################################################\ndef get_risk_free_rate_fred(api_key):\n    url = (\n      \"https://api.stlouisfed.org/fred/series/observations\"\n      f\"?series_id=DGS3MO&api_key={api_key}&file_type=json\"\n    )\n    r = requests.get(url, timeout=10)\n    r.raise_for_status()\n    obs = [o for o in r.json().get(\"observations\", []) if o[\"value\"] != \".\"]\n    return float(obs[-1][\"value\"]) / 100.0 if obs else 0.0\n\n###############################################################################\n# 3) FETCH FROM DB (prices + technicals)\n###############################################################################\ndef fetch_symbol_from_db(symbol, timeframe):\n    tf = timeframe.lower()\n    # Table name mapping for consistency with loader scripts\n    price_table_map = {\n        \"daily\": \"price_daily\",\n        \"weekly\": \"price_weekly\",\n        \"monthly\": \"price_monthly\"\n    }\n    tech_table_map = {\n        \"daily\": \"technical_data_daily\",\n        \"weekly\": \"technical_data_weekly\",\n        \"monthly\": \"technical_data_monthly\"\n    }\n    if tf not in price_table_map or tf not in tech_table_map:\n        raise ValueError(f\"Invalid timeframe: {timeframe}\")\n    price_table = price_table_map[tf]\n    tech_table  = tech_table_map[tf]\n    conn = get_db_connection()\n    cur  = conn.cursor(cursor_factory=RealDictCursor)\n    try:\n        sql = f\"\"\"\n          SELECT\n            p.date, p.open, p.high, p.low, p.close, p.volume,\n            t.rsi, t.atr, t.adx, t.plus_di, t.minus_di,\n            t.sma_50,\n            t.pivot_high,\n            t.pivot_low\n          FROM {price_table} p\n          JOIN {tech_table}  t\n            ON p.symbol = t.symbol AND p.date = t.date\n          WHERE p.symbol = %s\n          ORDER BY p.date ASC;\n        \"\"\"\n        logging.info(f\"[fetch_symbol_from_db] Executing SQL for {symbol} {timeframe}\")\n        cur.execute(sql, (symbol,))\n        rows = cur.fetchall()\n        logging.info(f\"[fetch_symbol_from_db] Got {len(rows)} rows for {symbol} {timeframe}\")\n    except Exception as e:\n        logging.error(f\"[fetch_symbol_from_db] SQL error for {symbol} {timeframe}: {e}\")\n        rows = []\n    finally:\n        cur.close()\n        conn.close()\n\n    if not rows:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(rows)\n    df['date'] = pd.to_datetime(df['date'])\n    num_cols = ['open','high','low','close','volume',\n                'rsi','atr','adx','plus_di','minus_di',\n                'sma_50','pivot_high','pivot_low']\n    for c in num_cols:\n        df[c] = pd.to_numeric(df[c], errors='coerce')\n    return df.reset_index(drop=True)\n\n###############################################################################\n# 4) SIGNAL STRENGTH CALCULATION\n###############################################################################\ndef calculate_signal_strength(df, index):\n    \"\"\"Calculate signal strength score (0-100) for a given row\"\"\"\n    try:\n        row = df.iloc[index]\n        signal_type = row.get('Signal', 'None')\n        \n        if signal_type == 'None':\n            return 50.0\n        \n        # Get required values\n        rsi = row.get('rsi', 50)\n        adx = row.get('adx', 25)\n        close = row.get('close', 0)\n        high = row.get('high', close)\n        low = row.get('low', close)\n        volume = row.get('volume', 0)\n        sma_50 = row.get('sma_50', close)\n        atr = row.get('atr', 0)\n        pivot_high = row.get('pivot_high', 0)\n        pivot_low = row.get('pivot_low', 0)\n        \n        # Calculate average volume (20-period rolling average)\n        start_idx = max(0, index - 19)\n        avg_volume = df.iloc[start_idx:index+1]['volume'].mean()\n        \n        strength = 0.0\n        \n        # 1. Technical Momentum (30%)\n        if signal_type == 'Buy':\n            if rsi > 70:\n                strength += 12  # Very bullish\n            elif rsi > 60:\n                strength += 9   # Bullish\n            elif rsi > 50:\n                strength += 6   # Neutral bullish\n            else:\n                strength += 3   # Weak\n        elif signal_type == 'Sell':\n            if rsi < 30:\n                strength += 12  # Very bearish\n            elif rsi < 40:\n                strength += 9   # Bearish\n            elif rsi < 50:\n                strength += 6   # Neutral bearish\n            else:\n                strength += 3   # Weak\n        \n        # ADX trend strength\n        if adx > 40:\n            strength += 9   # Very strong trend\n        elif adx > 30:\n            strength += 6   # Strong trend\n        elif adx > 20:\n            strength += 3   # Moderate trend\n        else:\n            strength += 1   # Weak trend\n        \n        # Price vs SMA-50\n        if signal_type == 'Buy' and close > sma_50:\n            price_above_sma = ((close - sma_50) / sma_50) * 100\n            strength += min(9, max(0, price_above_sma * 3))\n        elif signal_type == 'Sell' and close < sma_50:\n            price_below_sma = ((sma_50 - close) / sma_50) * 100\n            strength += min(9, max(0, price_below_sma * 3))\n        \n        # 2. Volume Confirmation (25%)\n        if avg_volume > 0:\n            volume_ratio = volume / avg_volume\n            if volume_ratio > 2.0:\n                strength += 25  # Exceptional volume\n            elif volume_ratio > 1.5:\n                strength += 20  # High volume\n            elif volume_ratio > 1.2:\n                strength += 15  # Above average volume\n            elif volume_ratio > 0.8:\n                strength += 10  # Normal volume\n            else:\n                strength += 5   # Low volume\n        else:\n            strength += 12.5  # Default if no volume data\n        \n        # 3. Price Action (25%)\n        if high != low:\n            close_position = (close - low) / (high - low)\n            if signal_type == 'Buy':\n                if close_position > 0.8:\n                    strength += 25  # Strong bullish close\n                elif close_position > 0.6:\n                    strength += 19  # Good bullish close\n                elif close_position > 0.4:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bullish close\n            elif signal_type == 'Sell':\n                if close_position < 0.2:\n                    strength += 25  # Strong bearish close\n                elif close_position < 0.4:\n                    strength += 19  # Good bearish close\n                elif close_position < 0.6:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bearish close\n        else:\n            strength += 12.5  # Default if no price action\n        \n        # 4. Volatility Context (10%)\n        if close > 0 and atr > 0:\n            atr_percentage = (atr / close) * 100\n            if 1.5 <= atr_percentage <= 3.0:\n                strength += 10  # Ideal volatility\n            elif 1.0 <= atr_percentage <= 4.0:\n                strength += 8   # Good volatility\n            elif 0.5 <= atr_percentage <= 5.0:\n                strength += 6   # Acceptable volatility\n            elif atr_percentage > 5.0:\n                strength += 3   # High volatility (risky)\n            else:\n                strength += 4   # Low volatility (less opportunity)\n        else:\n            strength += 5  # Default if no volatility data\n        \n        # 5. Breakout Magnitude (10%)\n        if signal_type == 'Buy' and pivot_high > 0:\n            breakout_percent = ((close - pivot_high) / pivot_high) * 100\n            if breakout_percent > 3.0:\n                strength += 10  # Strong breakout\n            elif breakout_percent > 1.5:\n                strength += 7   # Good breakout\n            elif breakout_percent > 0.5:\n                strength += 5   # Moderate breakout\n            else:\n                strength += 2   # Weak breakout\n        elif signal_type == 'Sell' and pivot_low > 0:\n            breakdown_percent = ((pivot_low - close) / pivot_low) * 100\n            if breakdown_percent > 3.0:\n                strength += 10  # Strong breakdown\n            elif breakdown_percent > 1.5:\n                strength += 7   # Good breakdown\n            elif breakdown_percent > 0.5:\n                strength += 5   # Moderate breakdown\n            else:\n                strength += 2   # Weak breakdown\n        else:\n            strength += 5  # Default if no breakout data\n        \n        return min(100.0, max(0.0, strength))\n        \n    except Exception as e:\n        logging.warning(f\"Error calculating signal strength at index {index}: {e}\")\n        return 50.0\n\n###############################################################################\n# 5) SIGNAL GENERATION & IN-POSITION LOGIC\n###############################################################################\ndef generate_signals(df, atrMult=1.0, useADX=True, adxS=30, adxW=20):\n    df['TrendOK']     = df['close'] > df['sma_50']\n    df['RSI_prev']    = df['rsi'].shift(1)\n    df['rsiBuy']      = (df['rsi']>50)&(df['RSI_prev']<=50)\n    df['rsiSell']     = (df['rsi']<50)&(df['RSI_prev']>=50)\n    df['LastPH']      = df['pivot_high'].shift(1).ffill()\n    df['LastPL']      = df['pivot_low'].shift(1).ffill()\n    df['stopBuffer']  = df['atr'] * atrMult\n    df['stopLevel']   = df['LastPL'] - df['stopBuffer']\n    df['buyLevel']    = df['LastPH']\n    df['breakoutBuy'] = df['high'] > df['buyLevel']\n    df['breakoutSell']= df['low']  < df['stopLevel']\n\n    if useADX:\n        flt    = ((df['adx']>adxS) |\n                  ((df['adx']>adxW) & (df['adx']>df['adx'].shift(1))))\n        adxOK  = (df['plus_di']>df['minus_di']) & flt\n        exitD  = ((df['plus_di'].shift(1)>df['minus_di'].shift(1)) &\n                  (df['plus_di']<df['minus_di']))\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK'] & adxOK) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'] | exitD)\n    else:\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK']) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'])\n\n    in_pos, sigs, pos = False, [], []\n    for i in range(len(df)):\n        if in_pos and df.loc[i,'finalSell']:\n            sigs.append('Sell'); in_pos=False\n        elif not in_pos and df.loc[i,'finalBuy']:\n            sigs.append('Buy'); in_pos=True\n        else:\n            sigs.append('None')\n        pos.append(in_pos)\n\n    df['Signal']    = sigs\n    df['inPosition']= pos\n    \n    # Calculate signal strength for each row\n    strengths = []\n    for i in range(len(df)):\n        strength = calculate_signal_strength(df, i)\n        strengths.append(strength)\n    \n    df['strength'] = strengths\n    return df\n\n###############################################################################\n# 6) BACKTEST & METRICS\n###############################################################################\ndef backtest_fixed_capital(df):\n    trades = []\n    buys   = df.index[df['Signal']=='Buy'].tolist()\n    if not buys:\n        return trades, [], [], None, None\n\n    df2 = df.iloc[buys[0]:].reset_index(drop=True)\n    pos_open = False\n    for i in range(len(df2)-1):\n        sig, o, d = df2.loc[i,'Signal'], df2.loc[i+1,'open'], df2.loc[i+1,'date']\n        if sig=='Buy' and not pos_open:\n            pos_open=True; trades.append({'date':d,'action':'Buy','price':o})\n        elif sig=='Sell' and pos_open:\n            pos_open=False; trades.append({'date':d,'action':'Sell','price':o})\n\n    if pos_open:\n        last = df2.iloc[-1]\n        trades.append({'date':last['date'],'action':'Sell','price':last['close']})\n\n    rets, durs = [], []\n    i = 0\n    while i < len(trades)-1:\n        if trades[i]['action']=='Buy' and trades[i+1]['action']=='Sell':\n            e, x = trades[i]['price'], trades[i+1]['price']\n            if e >= 1.0:\n                rets.append((x-e)/e)\n                durs.append((trades[i+1]['date']-trades[i]['date']).days)\n            i += 2\n        else:\n            i +",
      "context": "    67:           SELECT symbol\n    68:             FROM stock_symbols\n>>> 69:            WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n    70:         \"\"\"\n    71:         if limit:"
    },
    {
      "file": "loadbuysellweekly_backup.py",
      "line": 66,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n        \"\"\"\n        if limit:\n            q += \" LIMIT %s\"\n            cur.execute(q, (limit,))\n        else:\n            cur.execute(q)\n        return [r[0] for r in cur.fetchall()]\n    finally:\n        cur.close()\n        conn.close()\n\ndef create_buy_sell_table(cur):\n    cur.execute(\"DROP TABLE IF EXISTS buy_sell_weekly;\")\n    cur.execute(\"\"\"\n      CREATE TABLE buy_sell_weekly (\n        id           SERIAL PRIMARY KEY,\n        symbol       VARCHAR(20)    NOT NULL,\n        timeframe    VARCHAR(10)    NOT NULL,\n        date         DATE           NOT NULL,\n        open         REAL,\n        high         REAL,\n        low          REAL,\n        close        REAL,\n        volume       BIGINT,\n        signal       VARCHAR(10),\n        buylevel     REAL,\n        stoplevel    REAL,\n        inposition   BOOLEAN,\n        strength     REAL,\n        UNIQUE(symbol, timeframe, date)\n      );\n    \"\"\")\n\ndef insert_symbol_results(cur, symbol, timeframe, df):\n    insert_q = \"\"\"\n      INSERT INTO buy_sell_weekly (\n        symbol, timeframe, date,\n        open, high, low, close, volume,\n        signal, buylevel, stoplevel, inposition, strength\n      ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\n      ON CONFLICT (symbol, timeframe, date) DO NOTHING;\n    \"\"\"\n    inserted = 0\n    for idx, row in df.iterrows():\n        try:\n            # Check for NaNs or missing values\n            vals = [row.get('open'), row.get('high'), row.get('low'), row.get('close'), row.get('volume'),\n                    row.get('Signal'), row.get('buyLevel'), row.get('stopLevel'), row.get('inPosition'), row.get('strength')]\n            if any(pd.isnull(v) for v in vals):\n                logging.warning(f\"Skipping row {idx} for {symbol} {timeframe} due to NaN: {vals}\")\n                continue\n            cur.execute(insert_q, (\n                symbol,\n                timeframe,\n                row['date'].date(),\n                float(row['open']), float(row['high']), float(row['low']),\n                float(row['close']), int(row['volume']),\n                row['Signal'], float(row['buyLevel']),\n                float(row['stopLevel']), bool(row['inPosition']), float(row['strength'])\n            ))\n            inserted += 1\n        except Exception as e:\n            logging.error(f\"Insert failed for {symbol} {timeframe} row {idx}: {e} | row={row}\")\n    logging.info(f\"Inserted {inserted} rows for {symbol} {timeframe}\")\n\n###############################################################################\n# 2) RISK-FREE RATE (FRED)\n###############################################################################\ndef get_risk_free_rate_fred(api_key):\n    url = (\n      \"https://api.stlouisfed.org/fred/series/observations\"\n      f\"?series_id=DGS3MO&api_key={api_key}&file_type=json\"\n    )\n    r = requests.get(url, timeout=10)\n    r.raise_for_status()\n    obs = [o for o in r.json().get(\"observations\", []) if o[\"value\"] != \".\"]\n    return float(obs[-1][\"value\"]) / 100.0 if obs else 0.0\n\n###############################################################################\n# 3) FETCH FROM DB (prices + technicals)\n###############################################################################\ndef fetch_symbol_from_db(symbol, timeframe):\n    tf = timeframe.lower()\n    # Table name mapping for consistency with loader scripts\n    price_table_map = {\n        \"daily\": \"price_daily\",\n        \"weekly\": \"price_weekly\",\n        \"monthly\": \"price_monthly\"\n    }\n    tech_table_map = {\n        \"daily\": \"technical_data_daily\",\n        \"weekly\": \"technical_data_weekly\",\n        \"monthly\": \"technical_data_monthly\"\n    }\n    if tf not in price_table_map or tf not in tech_table_map:\n        raise ValueError(f\"Invalid timeframe: {timeframe}\")\n    price_table = price_table_map[tf]\n    tech_table  = tech_table_map[tf]\n    conn = get_db_connection()\n    cur  = conn.cursor(cursor_factory=RealDictCursor)\n    try:\n        sql = f\"\"\"\n          SELECT\n            p.date, p.open, p.high, p.low, p.close, p.volume,\n            t.rsi, t.atr, t.adx, t.plus_di, t.minus_di,\n            t.sma_50,\n            t.pivot_high,\n            t.pivot_low\n          FROM {price_table} p\n          JOIN {tech_table}  t\n            ON p.symbol = t.symbol AND p.date = t.date\n          WHERE p.symbol = %s\n          ORDER BY p.date ASC;\n        \"\"\"\n        logging.info(f\"[fetch_symbol_from_db] Executing SQL for {symbol} {timeframe}\")\n        cur.execute(sql, (symbol,))\n        rows = cur.fetchall()\n        logging.info(f\"[fetch_symbol_from_db] Got {len(rows)} rows for {symbol} {timeframe}\")\n    except Exception as e:\n        logging.error(f\"[fetch_symbol_from_db] SQL error for {symbol} {timeframe}: {e}\")\n        rows = []\n    finally:\n        cur.close()\n        conn.close()\n\n    if not rows:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(rows)\n    df['date'] = pd.to_datetime(df['date'])\n    num_cols = ['open','high','low','close','volume',\n                'rsi','atr','adx','plus_di','minus_di',\n                'sma_50','pivot_high','pivot_low']\n    for c in num_cols:\n        df[c] = pd.to_numeric(df[c], errors='coerce')\n    return df.reset_index(drop=True)\n\n###############################################################################\n# 4) SIGNAL STRENGTH CALCULATION\n###############################################################################\ndef calculate_signal_strength(df, index):\n    \"\"\"Calculate signal strength score (0-100) for a given row\"\"\"\n    try:\n        row = df.iloc[index]\n        signal_type = row.get('Signal', 'None')\n        \n        if signal_type == 'None':\n            return 50.0\n        \n        # Get required values\n        rsi = row.get('rsi', 50)\n        adx = row.get('adx', 25)\n        close = row.get('close', 0)\n        high = row.get('high', close)\n        low = row.get('low', close)\n        volume = row.get('volume', 0)\n        sma_50 = row.get('sma_50', close)\n        atr = row.get('atr', 0)\n        pivot_high = row.get('pivot_high', 0)\n        pivot_low = row.get('pivot_low', 0)\n        \n        # Calculate average volume (20-period rolling average)\n        start_idx = max(0, index - 19)\n        avg_volume = df.iloc[start_idx:index+1]['volume'].mean()\n        \n        strength = 0.0\n        \n        # 1. Technical Momentum (30%)\n        if signal_type == 'Buy':\n            if rsi > 70:\n                strength += 12  # Very bullish\n            elif rsi > 60:\n                strength += 9   # Bullish\n            elif rsi > 50:\n                strength += 6   # Neutral bullish\n            else:\n                strength += 3   # Weak\n        elif signal_type == 'Sell':\n            if rsi < 30:\n                strength += 12  # Very bearish\n            elif rsi < 40:\n                strength += 9   # Bearish\n            elif rsi < 50:\n                strength += 6   # Neutral bearish\n            else:\n                strength += 3   # Weak\n        \n        # ADX trend strength\n        if adx > 40:\n            strength += 9   # Very strong trend\n        elif adx > 30:\n            strength += 6   # Strong trend\n        elif adx > 20:\n            strength += 3   # Moderate trend\n        else:\n            strength += 1   # Weak trend\n        \n        # Price vs SMA-50\n        if signal_type == 'Buy' and close > sma_50:\n            price_above_sma = ((close - sma_50) / sma_50) * 100\n            strength += min(9, max(0, price_above_sma * 3))\n        elif signal_type == 'Sell' and close < sma_50:\n            price_below_sma = ((sma_50 - close) / sma_50) * 100\n            strength += min(9, max(0, price_below_sma * 3))\n        \n        # 2. Volume Confirmation (25%)\n        if avg_volume > 0:\n            volume_ratio = volume / avg_volume\n            if volume_ratio > 2.0:\n                strength += 25  # Exceptional volume\n            elif volume_ratio > 1.5:\n                strength += 20  # High volume\n            elif volume_ratio > 1.2:\n                strength += 15  # Above average volume\n            elif volume_ratio > 0.8:\n                strength += 10  # Normal volume\n            else:\n                strength += 5   # Low volume\n        else:\n            strength += 12.5  # Default if no volume data\n        \n        # 3. Price Action (25%)\n        if high != low:\n            close_position = (close - low) / (high - low)\n            if signal_type == 'Buy':\n                if close_position > 0.8:\n                    strength += 25  # Strong bullish close\n                elif close_position > 0.6:\n                    strength += 19  # Good bullish close\n                elif close_position > 0.4:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bullish close\n            elif signal_type == 'Sell':\n                if close_position < 0.2:\n                    strength += 25  # Strong bearish close\n                elif close_position < 0.4:\n                    strength += 19  # Good bearish close\n                elif close_position < 0.6:\n                    strength += 12  # Neutral\n                else:\n                    strength += 6   # Weak bearish close\n        else:\n            strength += 12.5  # Default if no price action\n        \n        # 4. Volatility Context (10%)\n        if close > 0 and atr > 0:\n            atr_percentage = (atr / close) * 100\n            if 1.5 <= atr_percentage <= 3.0:\n                strength += 10  # Ideal volatility\n            elif 1.0 <= atr_percentage <= 4.0:\n                strength += 8   # Good volatility\n            elif 0.5 <= atr_percentage <= 5.0:\n                strength += 6   # Acceptable volatility\n            elif atr_percentage > 5.0:\n                strength += 3   # High volatility (risky)\n            else:\n                strength += 4   # Low volatility (less opportunity)\n        else:\n            strength += 5  # Default if no volatility data\n        \n        # 5. Breakout Magnitude (10%)\n        if signal_type == 'Buy' and pivot_high > 0:\n            breakout_percent = ((close - pivot_high) / pivot_high) * 100\n            if breakout_percent > 3.0:\n                strength += 10  # Strong breakout\n            elif breakout_percent > 1.5:\n                strength += 7   # Good breakout\n            elif breakout_percent > 0.5:\n                strength += 5   # Moderate breakout\n            else:\n                strength += 2   # Weak breakout\n        elif signal_type == 'Sell' and pivot_low > 0:\n            breakdown_percent = ((pivot_low - close) / pivot_low) * 100\n            if breakdown_percent > 3.0:\n                strength += 10  # Strong breakdown\n            elif breakdown_percent > 1.5:\n                strength += 7   # Good breakdown\n            elif breakdown_percent > 0.5:\n                strength += 5   # Moderate breakdown\n            else:\n                strength += 2   # Weak breakdown\n        else:\n            strength += 5  # Default if no breakout data\n        \n        return min(100.0, max(0.0, strength))\n        \n    except Exception as e:\n        logging.warning(f\"Error calculating signal strength at index {index}: {e}\")\n        return 50.0\n\n###############################################################################\n# 5) SIGNAL GENERATION & IN-POSITION LOGIC\n###############################################################################\ndef generate_signals(df, atrMult=1.0, useADX=True, adxS=30, adxW=20):\n    df['TrendOK']     = df['close'] > df['sma_50']\n    df['RSI_prev']    = df['rsi'].shift(1)\n    df['rsiBuy']      = (df['rsi']>50)&(df['RSI_prev']<=50)\n    df['rsiSell']     = (df['rsi']<50)&(df['RSI_prev']>=50)\n    df['LastPH']      = df['pivot_high'].shift(1).ffill()\n    df['LastPL']      = df['pivot_low'].shift(1).ffill()\n    df['stopBuffer']  = df['atr'] * atrMult\n    df['stopLevel']   = df['LastPL'] - df['stopBuffer']\n    df['buyLevel']    = df['LastPH']\n    df['breakoutBuy'] = df['high'] > df['buyLevel']\n    df['breakoutSell']= df['low']  < df['stopLevel']\n\n    if useADX:\n        flt    = ((df['adx']>adxS) |\n                  ((df['adx']>adxW) & (df['adx']>df['adx'].shift(1))))\n        adxOK  = (df['plus_di']>df['minus_di']) & flt\n        exitD  = ((df['plus_di'].shift(1)>df['minus_di'].shift(1)) &\n                  (df['plus_di']<df['minus_di']))\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK'] & adxOK) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'] | exitD)\n    else:\n        df['finalBuy']  = ((df['rsiBuy'] & df['TrendOK']) | df['breakoutBuy'])\n        df['finalSell'] = (df['rsiSell'] | df['breakoutSell'])\n\n    in_pos, sigs, pos = False, [], []\n    for i in range(len(df)):\n        if in_pos and df.loc[i,'finalSell']:\n            sigs.append('Sell'); in_pos=False\n        elif not in_pos and df.loc[i,'finalBuy']:\n            sigs.append('Buy'); in_pos=True\n        else:\n            sigs.append('None')\n        pos.append(in_pos)\n\n    df['Signal']    = sigs\n    df['inPosition']= pos\n    \n    # Calculate signal strength for each row\n    strengths = []\n    for i in range(len(df)):\n        strength = calculate_signal_strength(df, i)\n        strengths.append(strength)\n    \n    df['strength'] = strengths\n    return df\n\n###############################################################################\n# 5) BACKTEST & METRICS\n###############################################################################\ndef backtest_fixed_capital(df):\n    trades = []\n    buys   = df.index[df['Signal']=='Buy'].tolist()\n    if not buys:\n        return trades, [], [], None, None\n\n    df2 = df.iloc[buys[0]:].reset_index(drop=True)\n    pos_open = False\n    for i in range(len(df2)-1):\n        sig, o, d = df2.loc[i,'Signal'], df2.loc[i+1,'open'], df2.loc[i+1,'date']\n        if sig=='Buy' and not pos_open:\n            pos_open=True; trades.append({'date':d,'action':'Buy','price':o})\n        elif sig=='Sell' and pos_open:\n            pos_open=False; trades.append({'date':d,'action':'Sell','price':o})\n\n    if pos_open:\n        last = df2.iloc[-1]\n        trades.append({'date':last['date'],'action':'Sell','price':last['close']})\n\n    rets, durs = [], []\n    i = 0\n    while i < len(trades)-1:\n        if trades[i]['action']=='Buy' and trades[i+1]['action']=='Sell':\n            e, x = trades[i]['price'], trades[i+1]['price']\n            if e >= 1.0:\n                rets.append((x-e)/e)\n                durs.append((trades[i+1]['date']-trades[i]['date']).days)\n            i += 2\n        else:\n            i +",
      "context": "    64:           SELECT symbol\n    65:             FROM stock_symbols\n>>> 66:            WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n    67:         \"\"\"\n    68:         if limit:"
    },
    {
      "file": "loadcalendar.py",
      "line": 257,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE is_active = true\n                ORDER BY symbol;\n            \"\"\")\n            symbols = [r[\"symbol\"] for r in cur.fetchall()]\n        log_mem(\"After fetching symbols\")\n\n        total_symbols = len(symbols)\n        processed = 0\n        failed = 0\n\n        for sym in symbols:\n            try:\n                log_mem(f\"Processing {sym} ({processed + 1}/{total_symbols})\")\n                process_symbol(sym, conn)\n                processed += 1\n                # Adaptive sleep based on memory usage\n                if get_rss_mb() > 1000:  # If using more than 1GB\n                    time.sleep(0.5)\n                else:\n                    time.sleep(0.1)\n            except Exception:\n                logger.exception(f\"Failed to process {sym}\")\n                failed +",
      "context": "    255:                 SELECT DISTINCT symbol \n    256:                 FROM stock_symbols \n>>> 257:                 WHERE is_active = true\n    258:                 ORDER BY symbol;\n    259:             \"\"\")"
    },
    {
      "file": "loadlatestbuysellweekly.py",
      "line": 99,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s AND timeframe = %s\n    \"\"\", (symbol, timeframe))\n    \n    result = cur.fetchone()\n    return result['last_date'] if result and result['last_date'] else None\n\ndef get_available_data_range(cur, symbol):\n    \"\"\"Get the date range of available weekly price and technical data\"\"\"\n    cur.execute(\"\"\"\n        SELECT \n            MIN(p.date) as min_price_date,\n            MAX(p.date) as max_price_date,\n            MIN(t.date) as min_tech_date,\n            MAX(t.date) as max_tech_date\n        FROM price_weekly p\n        LEFT JOIN technical_data_weekly t ON p.symbol = t.symbol AND p.date = t.date\n        WHERE p.symbol = %s\n    \"\"\", (symbol,))\n    \n    return cur.fetchone()\n\ndef calculate_buy_sell_signals_weekly(price_tech_data):\n    \"\"\"Calculate weekly buy/sell signals\"\"\"\n    signals = []\n    \n    if len(price_tech_data) < 26:  # Need enough data for 26-week indicators\n        return signals\n    \n    df = pd.DataFrame(price_tech_data)\n    df = df.sort_values('date')\n    \n    # Calculate weekly moving averages\n    if 'ma10w' not in df.columns:\n        df['ma10w'] = df['close'].rolling(10).mean()\n    if 'ma26w' not in df.columns:\n        df['ma26w'] = df['close'].rolling(26).mean()\n    if 'volume_avg_4w' not in df.columns:\n        df['volume_avg_4w'] = df['volume'].rolling(4).mean()\n    \n    # Calculate weekly Bollinger Bands\n    if 'bb_upper' not in df.columns:\n        bb_period = 10  # 10 weeks for weekly data\n        bb_std = 2\n        rolling_mean = df['close'].rolling(bb_period).mean()\n        rolling_std = df['close'].rolling(bb_period).std()\n        df['bb_upper'] = rolling_mean + (rolling_std * bb_std)\n        df['bb_lower'] = rolling_mean - (rolling_std * bb_std)\n    \n    # Calculate weekly support/resistance levels\n    window = 8  # 8 weeks\n    df['support'] = df['low'].rolling(window).min()\n    df['resistance'] = df['high'].rolling(window).max()\n    \n    for idx, row in df.iterrows():\n        if pd.isna(row['rsi']) or pd.isna(row['macd']) or pd.isna(row['ma10w']):\n            continue\n            \n        date = row['date']\n        symbol = row['symbol']\n        close = row['close']\n        volume = row['volume']\n        rsi = row['rsi']\n        macd = row['macd']\n        ma10w = row['ma10w']\n        ma26w = row['ma26w']\n        volume_avg = row['volume_avg_4w']\n        bb_upper = row['bb_upper']\n        bb_lower = row['bb_lower']\n        support = row['support']\n        resistance = row['resistance']\n        \n        # Calculate derived metrics for weekly timeframe\n        price_vs_ma10w = ((close - ma10w) / ma10w) * 100 if ma10w > 0 else 0\n        price_vs_ma26w = ((close - ma26w) / ma26w) * 100 if ma26w > 0 else 0\n        bollinger_pos = ((close - bb_lower) / (bb_upper - bb_lower)) * 100 if (bb_upper - bb_lower) > 0 else 50\n        volume_ratio = volume / volume_avg if volume_avg > 0 else 1\n        \n        # Weekly signal calculation (more conservative thresholds)\n        buy_score = 0\n        sell_score = 0\n        \n        # RSI signals (more conservative for weekly)\n        if rsi < 35:\n            buy_score += 30\n        elif rsi > 65:\n            sell_score += 30\n        \n        # MACD signals\n        if macd > 0:\n            buy_score += 20\n        else:\n            sell_score += 20\n        \n        # Moving average signals (weekly trend confirmation)\n        if close > ma10w > ma26w:\n            buy_score += 25\n        elif close < ma10w < ma26w:\n            sell_score += 25\n        \n        # Bollinger Band signals\n        if bollinger_pos < 15:\n            buy_score += 15\n        elif bollinger_pos > 85:\n            sell_score += 15\n        \n        # Volume confirmation (weekly)\n        if volume_ratio > 1.3:\n            if buy_score > sell_score:\n                buy_score += 10\n            else:\n                sell_score += 10\n        \n        # Support/resistance signals\n        if abs(close - support) / close < 0.03:\n            buy_score += 10\n        elif abs(close - resistance) / close < 0.03:\n            sell_score += 10\n        \n        # Pattern and momentum scores\n        pattern_score = min(buy_score, sell_score) / max(buy_score, sell_score, 1) * 50\n        momentum_score = abs(macd) * 10 if abs(macd) < 10 else 100\n        risk_score = min(rsi, 100 - rsi) + (volume_ratio * 5)\n        \n        # Generate signals (higher threshold for weekly)\n        if buy_score >= 50:\n            signals.append({\n                'symbol': symbol,\n                'date': date,\n                'timeframe': 'weekly',\n                'signal_type': 'BUY',\n                'confidence': min(buy_score, 95),\n                'price': close,\n                'rsi': rsi,\n                'macd': macd,\n                'volume': volume,\n                'volume_avg_4w': int(volume_avg) if not pd.isna(volume_avg) else None,\n                'price_vs_ma10w': price_vs_ma10w,\n                'price_vs_ma26w': price_vs_ma26w,\n                'bollinger_position': bollinger_pos,\n                'support_level': support,\n                'resistance_level': resistance,\n                'pattern_score': pattern_score,\n                'momentum_score': momentum_score,\n                'risk_score': risk_score\n            })\n        \n        if sell_score >= 50:\n            signals.append({\n                'symbol': symbol,\n                'date': date,\n                'timeframe': 'weekly',\n                'signal_type': 'SELL',\n                'confidence': min(sell_score, 95),\n                'price': close,\n                'rsi': rsi,\n                'macd': macd,\n                'volume': volume,\n                'volume_avg_4w': int(volume_avg) if not pd.isna(volume_avg) else None,\n                'price_vs_ma10w': price_vs_ma10w,\n                'price_vs_ma26w': price_vs_ma26w,\n                'bollinger_position': bollinger_pos,\n                'support_level': support,\n                'resistance_level': resistance,\n                'pattern_score': pattern_score,\n                'momentum_score': momentum_score,\n                'risk_score': risk_score\n            })\n    \n    return signals\n\ndef process_symbol_incremental(cur, symbol, timeframe='weekly'):\n    \"\"\"Process weekly buy/sell signals for a symbol using incremental approach\"\"\"\n    \n    last_signal_date = get_last_signal_date(cur, symbol, timeframe)\n    data_range = get_available_data_range(cur, symbol)\n    \n    if not data_range or not data_range['max_price_date']:\n        logging.warning(f\"No weekly price data available for {symbol}\")\n        return 0\n    \n    # Determine date range to process\n    if last_signal_date:\n        # Incremental update with 2-week buffer\n        start_date = last_signal_date - timedelta(weeks=2)\n        logging.info(f\"{symbol}: Weekly incremental update from {start_date}\")\n        \n        # Delete existing signals in the date range\n        cur.execute(\"\"\"\n            DELETE FROM buy_sell_weekly \n            WHERE symbol = %s AND timeframe = %s AND date >= %s\n        \"\"\", (symbol, timeframe, start_date))\n        \n    else:\n        # Full history processing\n        start_date = data_range['min_price_date']\n        logging.info(f\"{symbol}: Weekly full history processing from {start_date}\")\n    \n    # Fetch weekly price and technical data\n    cur.execute(\"\"\"\n        SELECT \n            p.symbol, p.date, p.open, p.high, p.low, p.close, p.adj_close, p.volume,\n            t.rsi, t.macd, t.signal_line, t.macd_histogram, t.bb_upper, t.bb_lower,\n            t.stoch_k, t.stoch_d, t.williams_r, t.cci, t.adx\n        FROM price_weekly p\n        LEFT JOIN technical_data_weekly t ON p.symbol = t.symbol AND p.date = t.date\n        WHERE p.symbol = %s AND p.date >= %s\n        ORDER BY p.date\n    \"\"\", (symbol, start_date))\n    \n    price_tech_data = cur.fetchall()\n    \n    if not price_tech_data:\n        logging.warning(f\"No weekly data found for {symbol} from {start_date}\")\n        return 0\n    \n    # Calculate weekly signals\n    signals = calculate_buy_sell_signals_weekly(price_tech_data)\n    \n    if not signals:\n        logging.info(f\"{symbol}: No weekly signals generated\")\n        return 0\n    \n    # Insert new signals\n    insert_sql = \"\"\"\n        INSERT INTO buy_sell_weekly (\n            symbol, date, timeframe, signal_type, confidence, price, rsi, macd,\n            volume, volume_avg_4w, price_vs_ma10w, price_vs_ma26w, bollinger_position,\n            support_level, resistance_level, pattern_score, momentum_score, risk_score\n        ) VALUES %s\n        ON CONFLICT (symbol, date, timeframe, signal_type) \n        DO UPDATE SET\n            confidence = EXCLUDED.confidence,\n            price = EXCLUDED.price,\n            rsi = EXCLUDED.rsi,\n            macd = EXCLUDED.macd,\n            volume = EXCLUDED.volume,\n            volume_avg_4w = EXCLUDED.volume_avg_4w,\n            price_vs_ma10w = EXCLUDED.price_vs_ma10w,\n            price_vs_ma26w = EXCLUDED.price_vs_ma26w,\n            bollinger_position = EXCLUDED.bollinger_position,\n            support_level = EXCLUDED.support_level,\n            resistance_level = EXCLUDED.resistance_level,\n            pattern_score = EXCLUDED.pattern_score,\n            momentum_score = EXCLUDED.momentum_score,\n            risk_score = EXCLUDED.risk_score,\n            created_at = CURRENT_TIMESTAMP\n    \"\"\"\n    \n    signal_rows = []\n    for signal in signals:\n        signal_rows.append((\n            signal['symbol'], signal['date'], signal['timeframe'], signal['signal_type'],\n            signal['confidence'], signal['price'], signal['rsi'], signal['macd'],\n            signal['volume'], signal['volume_avg_4w'], signal['price_vs_ma10w'],\n            signal['price_vs_ma26w'], signal['bollinger_position'], signal['support_level'],\n            signal['resistance_level'], signal['pattern_score'], signal['momentum_score'],\n            signal['risk_score']\n        ))\n    \n    execute_values(cur, insert_sql, signal_rows)\n    \n    logging.info(f\"{symbol}: Processed {len(signals)} weekly signals\")\n    return len(signals)\n\ndef main():\n    log_mem(\"Weekly script start\")\n    \n    conn = get_db_connection()\n    cur = conn.cursor(cursor_factory=RealDictCursor)\n    \n    try:\n        create_buy_sell_table_if_not_exists(cur)\n        conn.commit()\n        \n        cur.execute(\"\"\"\n            SELECT DISTINCT symbol \n            FROM stock_symbols \n            WHERE status = 'active'\n            ORDER BY symbol\n        \"\"\")\n        symbols = [row['symbol'] for row in cur.fetchall()]\n        \n        if not symbols:\n            logging.warning(\"No active symbols found\")\n            return\n        \n        logging.info(f\"Processing {len(symbols)} symbols for latest weekly buy/sell signals\")\n        \n        total_signals = 0\n        processed_count = 0\n        failed_count = 0\n        \n        for symbol in symbols:\n            try:\n                signals_count = process_symbol_incremental(cur, symbol)\n                total_signals += signals_count\n                processed_count += 1\n                \n                if processed_count % 10 == 0:\n                    conn.commit()\n                    logging.info(f\"Weekly progress: {processed_count}/{len(symbols)} symbols processed\")\n                \n                time.sleep(0.1)\n                \n            except Exception as e:\n                logging.error(f\"Failed to process weekly signals for {symbol}: {e}\")\n                failed_count +",
      "context": "    97:         SELECT MAX(date) as last_date \n    98:         FROM buy_sell_weekly \n>>> 99:         WHERE symbol = %s AND timeframe = %s\n    100:     \"\"\", (symbol, timeframe))\n    101:     "
    },
    {
      "file": "loadlatestpriceweekly.py",
      "line": 105,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s;\",\n            (orig_sym,)\n        )\n        res       = cur.fetchone()\n        last_date = (res[\"last_date\"] if isinstance(res, dict) else res[0])\n        today     = datetime.now().date()\n\n        if last_date:\n            # Get current and previous week boundaries\n            current_week_start, _ = get_week_boundaries(today)\n            last_week_start = current_week_start - timedelta(days=7)\n            \n            # Start from previous week start\n            start_date = last_week_start\n            \n            download_kwargs = {\n                \"tickers\":     yq_sym,\n                \"start\":       start_date.isoformat(),\n                \"end\":         (today + timedelta(days=1)).isoformat(),\n                \"interval\":    \"1wk\",\n                \"auto_adjust\": True,\n                \"actions\":     True,\n                \"threads\":     True,\n                \"progress\":    False\n            }\n            logging.info(f\"{table_name} – {orig_sym}: downloading from {start_date} to {today}\")\n        else:\n            download_kwargs = {\n                \"tickers\":     yq_sym,\n                \"period\":      \"max\",\n                \"interval\":    \"1wk\",\n                \"auto_adjust\": True,\n                \"actions\":     True,\n                \"threads\":     True,\n                \"progress\":    False\n            }\n            logging.info(f\"{table_name} – {orig_sym}: no existing data; downloading full history\")\n\n        # ─── Download with retries ───────────────────────────────\n        df = None\n        for attempt in range(1, MAX_BATCH_RETRIES + 1):\n            try:\n                logging.info(f\"{table_name} – {orig_sym}: download attempt {attempt}\")\n                log_mem(f\"{table_name} {orig_sym} download start\")\n                df = yf.download(**download_kwargs)\n                break\n            except Exception as e:\n                logging.warning(f\"{table_name} – {orig_sym}: download failed: {e}; retrying…\")\n                time.sleep(RETRY_DELAY)\n\n        if df is None or df.empty:\n            logging.warning(f\"{table_name} – {orig_sym}: no data returned; skipping\")\n            failed.append(orig_sym)\n            continue\n\n        # ─── Clean and prepare rows ─────────────────────────────\n        df = df.sort_index()\n        if \"Open\" not in df.columns:\n            logging.warning(f\"{table_name} – {orig_sym}: unexpected data format; skipping\")\n            failed.append(orig_sym)\n            continue\n\n        df = df[df[\"Open\"].notna()]\n        rows = []\n        for idx, row in df.iterrows():\n            o  = extract_scalar(row[\"Open\"])\n            h  = extract_scalar(row[\"High\"])\n            l  = extract_scalar(row[\"Low\"])\n            c  = extract_scalar(row[\"Close\"])\n            ac = extract_scalar(row.get(\"Adj Close\", c))\n            v  = extract_scalar(row[\"Volume\"])\n            d  = extract_scalar(row.get(\"Dividends\", 0.0))\n            s  = extract_scalar(row.get(\"Stock Splits\", 0.0))\n\n            rows.append([\n                orig_sym,\n                idx.date(),\n                None if pd.isna(o)  else float(o),\n                None if pd.isna(h)  else float(h),\n                None if pd.isna(l)  else float(l),\n                None if pd.isna(c)  else float(c),\n                None if pd.isna(ac) else float(ac),\n                None if pd.isna(v)  else int(v),\n                0.0  if pd.isna(d)  else float(d),\n                0.0  if pd.isna(s)  else float(s)\n            ])\n\n        if not rows:\n            logging.warning(f\"{table_name} – {orig_sym}: no valid rows after cleaning; skipping\")\n            failed.append(orig_sym)\n            continue\n\n        # ─── Insert into DB ─────────────────────────────────────\n        sql = f\"INSERT INTO {table_name} ({COL_LIST}) VALUES %s\"\n        execute_values(cur, sql, rows)\n        conn.commit()\n        inserted +",
      "context": "    103:         # ─── Determine starting point ───────────────────────────\n    104:         cur.execute(\n>>> 105:             f\"SELECT MAX(date) AS last_date FROM {table_name} WHERE symbol = %s;\",\n    106:             (orig_sym,)\n    107:         )"
    },
    {
      "file": "loadpatternrecognition.py",
      "line": 465,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE date_time >= NOW() - INTERVAL '7 days'\n                  AND volume > 0\n                ORDER BY symbol\n                LIMIT %s\n            \"\"\", (self.symbol_limit,))\n            \n            symbols = [row[0] for row in cursor.fetchall()]\n            logger.info(f\"Found {len(symbols)} active symbols\")\n            \n            # Log first few symbols for debugging\n            if symbols:\n                logger.info(f\"Sample symbols: {symbols[:5]}\")\n            \n            return symbols\n            \n        except Exception as e:\n            logger.error(f\"Error fetching active symbols: {e}\")\n            return []\n        finally:\n            if conn:\n                self.service.connection_pool.putconn(conn)\n    \n    async def run_pattern_scan(self):\n        \"\"\"Main pattern scanning logic\"\"\"\n        logger.info(\"Starting pattern recognition scan\")\n        \n        try:\n            # Get active symbols\n            symbols = await self.get_active_symbols()\n            if not symbols:\n                logger.warning(\"No active symbols found\")\n                return\n            \n            # Process each timeframe\n            for timeframe in self.timeframes:\n                if not self.is_running:\n                    logger.info(\"Shutdown requested, stopping scan\")\n                    break\n                \n                logger.info(f\"Processing timeframe: {timeframe}\")\n                \n                # Process symbols in batches\n                for i in range(0, len(symbols), self.batch_size):\n                    if not self.is_running or not self._check_resources():\n                        logger.info(\"Stopping due to shutdown or resource limits\")\n                        break\n                    \n                    batch = symbols[i:i + self.batch_size]\n                    batch_num = i // self.batch_size + 1\n                    total_batches = (len(symbols) + self.batch_size - 1) // self.batch_size\n                    \n                    logger.info(f\"Processing batch {batch_num}/{total_batches}: {batch}\")\n                    \n                    try:\n                        # Run pattern recognition for batch\n                        batch_results = await self.service.bulk_scan(batch, timeframe)\n                        \n                        # Process results\n                        batch_patterns = 0\n                        for symbol, patterns in batch_results.items():\n                            if patterns:\n                                batch_patterns += len(patterns)\n                                self.total_patterns += len(patterns)\n                                \n                                # Log high-confidence patterns\n                                high_conf = [p for p in patterns if p.confidence >= 0.80]\n                                if high_conf:\n                                    logger.info(f\"High confidence patterns for {symbol}:\")\n                                    for pattern in high_conf[:3]:  # Log first 3\n                                        logger.info(f\"  - {pattern.pattern_name}: \"\n                                                   f\"{pattern.confidence:.3f} ({pattern.direction})\")\n                            \n                            self.processed_symbols += 1\n                        \n                        logger.info(f\"Batch {batch_num} completed: {batch_patterns} patterns found\")\n                        \n                    except Exception as e:\n                        logger.error(f\"Error processing batch {batch}: {e}\")\n                        self.failed_symbols.extend(batch)\n                    \n                    # Small delay between batches to avoid overwhelming the system\n                    await asyncio.sleep(2)\n                \n                # Cleanup between timeframes\n                if self.is_running:\n                    gc.collect()\n                    await asyncio.sleep(1)\n        \n        except Exception as e:\n            logger.error(f\"Error in pattern scan: {e}\")\n            logger.error(traceback.format_exc())\n    \n    async def cleanup_old_data(self):\n        \"\"\"Clean up old patterns and performance data\"\"\"\n        if not self.service or not self.service.connection_pool:\n            return\n        \n        logger.info(\"Starting cleanup of old data\")\n        \n        conn = None\n        try:\n            conn = self.service.connection_pool.getconn()\n            cursor = conn.cursor()\n            \n            # Mark old patterns as expired (30 days)\n            cursor.execute(\"\"\"\n                UPDATE detected_patterns \n                SET status = 'expired', updated_at = NOW()\n                WHERE status = 'active' \n                  AND detection_date < NOW() - INTERVAL '30 days'\n            \"\"\")\n            expired_count = cursor.rowcount\n            \n            # Delete old pattern alerts (90 days)\n            cursor.execute(\"\"\"\n                DELETE FROM pattern_alerts\n                WHERE created_at < NOW() - INTERVAL '90 days'\n            \"\"\")\n            deleted_alerts = cursor.rowcount\n            \n            # Clean up old feature cache (7 days)\n            cursor.execute(\"\"\"\n                DELETE FROM pattern_features\n                WHERE calculation_date < NOW() - INTERVAL '7 days'\n            \"\"\")\n            deleted_features = cursor.rowcount\n            \n            conn.commit()\n            \n            logger.info(f\"Cleanup completed: {expired_count} patterns expired, \"\n                       f\"{deleted_alerts} alerts deleted, {deleted_features} features cleaned\")\n        \n        except Exception as e:\n            logger.error(f\"Error during cleanup: {e}\")\n            if conn:\n                conn.rollback()\n        finally:\n            if conn:\n                self.service.connection_pool.putconn(conn)\n    \n    async def store_execution_summary(self):\n        \"\"\"Store execution summary in database\"\"\"\n        if not self.service or not self.service.connection_pool:\n            return\n        \n        end_time = datetime.now()\n        duration = (end_time - self.start_time).total_seconds()\n        \n        summary = {\n            'start_time': self.start_time.isoformat(),\n            'end_time': end_time.isoformat(),\n            'duration_seconds': duration,\n            'processed_symbols': self.processed_symbols,\n            'total_patterns_found': self.total_patterns,\n            'failed_symbols_count': len(self.failed_symbols),\n            'patterns_per_symbol': self.total_patterns / max(self.processed_symbols, 1),\n            'processing_rate_symbols_per_minute': self.processed_symbols / max(duration / 60, 1),\n            'timeframes_processed': self.timeframes,\n            'batch_size': self.batch_size,\n            'symbol_limit': self.symbol_limit,\n            'confidence_threshold': self.confidence_threshold,\n            'memory_usage_mb': resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024,\n            'failed_symbols_sample': self.failed_symbols[:10]\n        }\n        \n        conn = None\n        try:\n            conn = self.service.connection_pool.getconn()\n            cursor = conn.cursor()\n            \n            cursor.execute(\"\"\"\n                INSERT INTO last_updated (script_name, last_run, details)\n                VALUES (%s, %s, %s)\n                ON CONFLICT (script_name) \n                DO UPDATE SET \n                    last_run = EXCLUDED.last_run, \n                    details = EXCLUDED.details\n            \"\"\", (\n                'pattern_recognition_loader',\n                end_time,\n                json.dumps(summary)\n            ))\n            \n            conn.commit()\n            logger.info(\"Execution summary stored in database\")\n            \n        except Exception as e:\n            logger.error(f\"Error storing execution summary: {e}\")\n        finally:\n            if conn:\n                self.service.connection_pool.putconn(conn)\n        \n        return summary\n    \n    def log_final_summary(self, summary):\n        \"\"\"Log final execution summary\"\"\"\n        logger.info(\"=\" * 60)\n        logger.info(\"PATTERN RECOGNITION EXECUTION SUMMARY\")\n        logger.info(\"=\" * 60)\n        logger.info(f\"Duration: {summary['duration_seconds']:.1f} seconds\")\n        logger.info(f\"Processed symbols: {summary['processed_symbols']}\")\n        logger.info(f\"Total patterns found: {summary['total_patterns_found']}\")\n        logger.info(f\"Failed symbols: {summary['failed_symbols_count']}\")\n        logger.info(f\"Average patterns per symbol: {summary['patterns_per_symbol']:.2f}\")\n        logger.info(f\"Processing rate: {summary['processing_rate_symbols_per_minute']:.1f} symbols/min\")\n        logger.info(f\"Memory usage: {summary['memory_usage_mb']:.1f} MB\")\n        logger.info(f\"Timeframes: {', '.join(summary['timeframes_processed'])}\")\n        \n        if summary['failed_symbols_count'] > 0:\n            logger.warning(f\"Failed symbols sample: {summary['failed_symbols_sample']}\")\n        \n        logger.info(\"=\" * 60)\n    \n    async def run(self):\n        \"\"\"Main execution method\"\"\"\n        try:\n            logger.info(\"Pattern Recognition Loader starting\")\n            \n            # Initialize database\n            if not await self.initialize_database():\n                logger.error(\"Database initialization failed, exiting\")\n                return 1\n            \n            # Initialize pattern recognition service\n            if not await self.initialize_service():\n                logger.error(\"Service initialization failed, exiting\")\n                return 1\n            \n            # Run cleanup first\n            await self.cleanup_old_data()\n            \n            # Run pattern recognition scan\n            await self.run_pattern_scan()\n            \n            # Store execution summary\n            summary = await self.store_execution_summary()\n            \n            # Log final summary\n            self.log_final_summary(summary)\n            \n            logger.info(\"Pattern Recognition Loader completed successfully\")\n            return 0\n            \n        except Exception as e:\n            logger.error(f\"Fatal error in pattern recognition loader: {e}\")\n            logger.error(traceback.format_exc())\n            return 1\n        \n        finally:\n            # Cleanup\n            if self.service:\n                self.service.close()\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    # Handle command line arguments\n    import argparse\n    parser = argparse.ArgumentParser(description='Pattern Recognition Loader for ECS')\n    parser.add_argument('--symbols', nargs='+",
      "context": "    463:                 SELECT DISTINCT symbol \n    464:                 FROM technical_data_daily \n>>> 465:                 WHERE date_time >= NOW() - INTERVAL '7 days'\n    466:                   AND volume > 0\n    467:                 ORDER BY symbol"
    },
    {
      "file": "loadpricedaily_optimized.py",
      "line": 257,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE is_etf = FALSE ORDER BY symbol\")\n                    symbols = [row[0] for row in cursor.fetchall()]\n            \n            logger.info(f\"📊 Retrieved {len(symbols)} symbols from database\")\n            return symbols\n            \n        except Exception as e:\n            logger.error(f\"❌ Failed to get symbols from database: {e}\")\n            raise\n    \n    def price_data_source(self) -> Generator[Dict[str, Any], None, None]:\n        \"\"\"\n        Main data source generator for price data.\n        \n        Yields:\n            Dictionary containing price record\n        \"\"\"\n        symbols = self._get_symbols_from_database()\n        total_symbols = len(symbols)\n        \n        if not symbols:\n            logger.warning(\"⚠️ No symbols found in database\")\n            return\n        \n        logger.info(f\"🔄 Processing {total_symbols} symbols in batches of {self.download_batch_size}\")\n        \n        # Process symbols in batches\n        for batch_start in range(0, total_symbols, self.download_batch_size):\n            batch_end = min(batch_start + self.download_batch_size, total_symbols)\n            symbol_batch = symbols[batch_start:batch_end]\n            batch_num = (batch_start // self.download_batch_size) + 1\n            total_batches = (total_symbols + self.download_batch_size - 1) // self.download_batch_size\n            \n            logger.info(f\"📦 Processing batch {batch_num}/{total_batches}: {len(symbol_batch)} symbols\")\n            self._log_memory_usage(f\"Batch {batch_num} start\")\n            \n            # Prepare symbols for yfinance\n            yf_symbols, symbol_mapping = self._prepare_yfinance_symbols(symbol_batch)\n            \n            # Download price data\n            df = self._download_price_data(yf_symbols)\n            \n            if df is None:\n                logger.error(f\"❌ Skipping batch {batch_num} due to download failure\")\n                continue\n            \n            self._log_memory_usage(f\"Batch {batch_num} after download\")\n            \n            # Process each symbol in the batch\n            processed_count = 0\n            for yf_symbol, original_symbol in symbol_mapping.items():\n                try:\n                    # Extract symbol data from DataFrame\n                    if len(yf_symbols) > 1:\n                        symbol_df = df[yf_symbol] if yf_symbol in df.columns.get_level_values(0) else None\n                    else:\n                        symbol_df = df\n                    \n                    if symbol_df is None or symbol_df.empty:\n                        logger.warning(f\"⚠️ No data for {original_symbol}\")\n                        continue\n                    \n                    # Process symbol data\n                    record_count = 0\n                    for record in self._process_symbol_data(original_symbol, symbol_df):\n                        yield record\n                        record_count += 1\n                    \n                    if record_count > 0:\n                        processed_count += 1\n                        logger.info(f\"✅ Processed {record_count} records for {original_symbol}\")\n                    \n                except Exception as e:\n                    logger.error(f\"❌ Error processing {original_symbol}: {e}\")\n                    continue\n            \n            # Cleanup and memory management\n            del df\n            self.batch_counter += 1\n            \n            if self.batch_counter % self.gc_frequency == 0:\n                self._force_garbage_collection()\n            \n            self._log_memory_usage(f\"Batch {batch_num} end\")\n            \n            logger.info(f\"📊 Batch {batch_num} completed: {processed_count}/{len(symbol_batch)} symbols processed\")\n            \n            # Inter-batch delay to prevent API throttling\n            if batch_start + self.download_batch_size < total_symbols:\n                time.sleep(self.inter_batch_delay)\n        \n        logger.info(f\"🎉 All {total_symbols} symbols processed\")\n    \n    def validate_table_schema(self) -> bool:\n        \"\"\"Validate that the price_daily table has the required schema.\"\"\"\n        required_columns = [\n            {'name': 'symbol', 'type': 'varchar'},\n            {'name': 'date', 'type': 'date'},\n            {'name': 'open', 'type': 'double precision'},\n            {'name': 'high', 'type': 'double precision'},\n            {'name': 'low', 'type': 'double precision'},\n            {'name': 'close', 'type': 'double precision'},\n            {'name': 'adj_close', 'type': 'double precision'},\n            {'name': 'volume', 'type': 'bigint'},\n            {'name': 'dividends', 'type': 'double precision'},\n            {'name': 'stock_splits', 'type': 'double precision'}\n        ]\n        \n        return self.loader.validate_table_schema(required_columns)\n    \n    def run_optimized_load(self) -> Dict[str, Any]:\n        \"\"\"\n        Execute the optimized price daily loading process.\n        \n        Returns:\n            Processing results and metrics\n        \"\"\"\n        log_data_loader_start(\n            \"OptimizedPriceDailyLoader\",\n            \"Load daily price data (OHLCV) for all stock symbols with enhanced optimization\"\n        )\n        \n        self._log_memory_usage(\"Load start\")\n        \n        try:\n            # Validate table schema first\n            if not self.validate_table_schema():\n                raise Exception(\"Table schema validation failed\")\n            \n            # Process data with optimization\n            result = self.loader.process_data_with_validation(\n                data_source_func=self.price_data_source,\n                data_validator_func=self.data_validator,\n                conflict_columns=['symbol', 'date'],  # Unique constraint on symbol +",
      "context": "    255:             with self.loader.get_connection() as conn:\n    256:                 with conn.cursor() as cursor:\n>>> 257:                     cursor.execute(\"SELECT symbol FROM stock_symbols WHERE is_etf = FALSE ORDER BY symbol\")\n    258:                     symbols = [row[0] for row in cursor.fetchall()]\n    259:             "
    },
    {
      "file": "loadscores.py",
      "line": 76,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n             AND market_cap > %s\n        \"\"\"\n        if limit:\n            q += \" LIMIT %s\"\n            cur.execute(q, (min_market_cap, limit))\n        else:\n            cur.execute(q, (min_market_cap,))\n        return [r[0] for r in cur.fetchall()]\n    finally:\n        cur.close()\n        conn.close()\n\ndef create_unified_scores_tables(cur):\n    \"\"\"Create unified scoring tables with period_type column\"\"\"\n    \n    # Drop old period-specific tables\n    logging.info(\"🧹 Dropping old period-specific tables...\")\n    old_tables = [\n        'quality_scores_daily', 'quality_scores_weekly', 'quality_scores_monthly',\n        'growth_scores_daily', 'growth_scores_weekly', 'growth_scores_monthly',\n        'value_scores_daily', 'value_scores_weekly', 'value_scores_monthly',\n        'momentum_scores_daily', 'momentum_scores_weekly', 'momentum_scores_monthly',\n        'sentiment_scores_daily', 'sentiment_scores_weekly', 'sentiment_scores_monthly',\n        'positioning_scores_daily', 'positioning_scores_weekly', 'positioning_scores_monthly',\n        'master_scores_daily', 'master_scores_weekly', 'master_scores_monthly'\n    ]\n    for table in old_tables:\n        cur.execute(f\"DROP TABLE IF EXISTS {table} CASCADE;\")\n    \n    # Quality scores table\n    cur.execute(\"DROP TABLE IF EXISTS quality_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE quality_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        earnings_quality    REAL,\n        balance_strength    REAL,\n        profitability       REAL,\n        management          REAL,\n        composite           REAL,\n        trend               VARCHAR(20),\n        confidence          REAL,\n        created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Growth scores table\n    cur.execute(\"DROP TABLE IF EXISTS growth_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE growth_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        revenue_growth      REAL,\n        earnings_growth     REAL,\n        fundamental_growth  REAL,\n        market_expansion    REAL,\n        composite           REAL,\n        trend               VARCHAR(20),\n        confidence          REAL,\n        created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Value scores table\n    cur.execute(\"DROP TABLE IF EXISTS value_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE value_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        pe_score            REAL,\n        dcf_score           REAL,\n        relative_value      REAL,\n        composite           REAL,\n        trend               VARCHAR(20),\n        confidence          REAL,\n        created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Momentum scores table\n    cur.execute(\"DROP TABLE IF EXISTS momentum_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE momentum_scores (\n        id                      SERIAL PRIMARY KEY,\n        symbol                  VARCHAR(20) NOT NULL,\n        date                    DATE NOT NULL,\n        period_type             VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending           DATE NOT NULL,\n        price_momentum          REAL,\n        fundamental_momentum    REAL,\n        technical               REAL,\n        volume_analysis         REAL,\n        composite               REAL,\n        trend                   VARCHAR(20),\n        confidence              REAL,\n        created_at              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Sentiment scores table\n    cur.execute(\"DROP TABLE IF EXISTS sentiment_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE sentiment_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        analyst_sentiment   REAL,\n        social_sentiment    REAL,\n        market_sentiment    REAL,\n        news_sentiment      REAL,\n        composite           REAL,\n        trend               VARCHAR(20),\n        confidence          REAL,\n        created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Positioning scores table\n    cur.execute(\"DROP TABLE IF EXISTS positioning_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE positioning_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        institutional       REAL,\n        insider             REAL,\n        short_interest      REAL,\n        options_flow        REAL,\n        composite           REAL,\n        trend               VARCHAR(20),\n        confidence          REAL,\n        created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Master scores table (composite)\n    cur.execute(\"DROP TABLE IF EXISTS master_scores CASCADE;\")\n    cur.execute(\"\"\"\n      CREATE TABLE master_scores (\n        id                  SERIAL PRIMARY KEY,\n        symbol              VARCHAR(20) NOT NULL,\n        date                DATE NOT NULL,\n        period_type         VARCHAR(10) NOT NULL CHECK (period_type IN ('daily', 'weekly', 'monthly')),\n        period_ending       DATE NOT NULL,\n        quality             REAL,\n        growth              REAL,\n        value               REAL,\n        momentum            REAL,\n        sentiment           REAL,\n        positioning         REAL,\n        composite           REAL,\n        market_regime       VARCHAR(20),\n        confidence_level    REAL,\n        recommendation      VARCHAR(20),\n        last_updated        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date, period_type)\n      );\n    \"\"\")\n    \n    # Create indexes for performance\n    cur.execute(\"CREATE INDEX idx_quality_scores_symbol_period ON quality_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_growth_scores_symbol_period ON growth_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_value_scores_symbol_period ON value_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_momentum_scores_symbol_period ON momentum_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_sentiment_scores_symbol_period ON sentiment_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_positioning_scores_symbol_period ON positioning_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_master_scores_symbol_period ON master_scores(symbol, period_type);\")\n    cur.execute(\"CREATE INDEX idx_master_scores_date ON master_scores(date);\")\n\ndef get_period_ending_date(period_type):\n    \"\"\"Get the appropriate period ending date based on type\"\"\"\n    today = datetime.now().date()\n    \n    if period_type == 'daily':\n        return today\n    elif period_type == 'weekly':\n        # Get Friday of current week\n        days_ahead = 4 - today.weekday()  # Friday is weekday 4\n        if days_ahead <= 0:  # Target day already happened this week\n            days_ahead += 7\n        return today + timedelta(days_ahead)\n    elif period_type == 'monthly':\n        # Get last day of current month\n        last_day = calendar.monthrange(today.year, today.month)[1]\n        return datetime(today.year, today.month, last_day).date()\n\ndef insert_scores(cur, symbol, date, period_type, period_ending, scores_data):\n    \"\"\"Insert scores into all relevant tables with period information\"\"\"\n    try:\n        # Insert quality scores\n        quality = scores_data.get('quality', {})\n        cur.execute(\"\"\"\n            INSERT INTO quality_scores (symbol, date, period_type, period_ending, earnings_quality, \n                                      balance_strength, profitability, management, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                earnings_quality = EXCLUDED.earnings_quality,\n                balance_strength = EXCLUDED.balance_strength,\n                profitability = EXCLUDED.profitability,\n                management = EXCLUDED.management,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            quality.get('earnings_quality'),\n            quality.get('balance_strength'),\n            quality.get('profitability'),\n            quality.get('management'),\n            quality.get('composite'),\n            quality.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert growth scores\n        growth = scores_data.get('growth', {})\n        cur.execute(\"\"\"\n            INSERT INTO growth_scores (symbol, date, period_type, period_ending, revenue_growth, \n                                     earnings_growth, fundamental_growth, market_expansion, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                revenue_growth = EXCLUDED.revenue_growth,\n                earnings_growth = EXCLUDED.earnings_growth,\n                fundamental_growth = EXCLUDED.fundamental_growth,\n                market_expansion = EXCLUDED.market_expansion,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            growth.get('revenue_growth'),\n            growth.get('earnings_growth'),\n            growth.get('fundamental_growth'),\n            growth.get('market_expansion'),\n            growth.get('composite'),\n            growth.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert value scores\n        value = scores_data.get('value', {})\n        cur.execute(\"\"\"\n            INSERT INTO value_scores (symbol, date, period_type, period_ending, pe_score, \n                                    dcf_score, relative_value, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                pe_score = EXCLUDED.pe_score,\n                dcf_score = EXCLUDED.dcf_score,\n                relative_value = EXCLUDED.relative_value,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            value.get('pe_score'),\n            value.get('dcf_score'),\n            value.get('relative_value'),\n            value.get('composite'),\n            value.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert momentum scores\n        momentum = scores_data.get('momentum', {})\n        cur.execute(\"\"\"\n            INSERT INTO momentum_scores (symbol, date, period_type, period_ending, price_momentum, \n                                       fundamental_momentum, technical, volume_analysis, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                price_momentum = EXCLUDED.price_momentum,\n                fundamental_momentum = EXCLUDED.fundamental_momentum,\n                technical = EXCLUDED.technical,\n                volume_analysis = EXCLUDED.volume_analysis,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            momentum.get('price_momentum'),\n            momentum.get('fundamental_momentum'),\n            momentum.get('technical'),\n            momentum.get('volume_analysis'),\n            momentum.get('composite'),\n            momentum.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert sentiment scores\n        sentiment = scores_data.get('sentiment', {})\n        cur.execute(\"\"\"\n            INSERT INTO sentiment_scores (symbol, date, period_type, period_ending, analyst_sentiment, \n                                        social_sentiment, market_sentiment, news_sentiment, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                analyst_sentiment = EXCLUDED.analyst_sentiment,\n                social_sentiment = EXCLUDED.social_sentiment,\n                market_sentiment = EXCLUDED.market_sentiment,\n                news_sentiment = EXCLUDED.news_sentiment,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            sentiment.get('analyst_sentiment'),\n            sentiment.get('social_sentiment'),\n            sentiment.get('market_sentiment'),\n            sentiment.get('news_sentiment'),\n            sentiment.get('composite'),\n            sentiment.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert positioning scores\n        positioning = scores_data.get('positioning', {})\n        cur.execute(\"\"\"\n            INSERT INTO positioning_scores (symbol, date, period_type, period_ending, institutional, \n                                          insider, short_interest, options_flow, composite, trend, confidence)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                institutional = EXCLUDED.institutional,\n                insider = EXCLUDED.insider,\n                short_interest = EXCLUDED.short_interest,\n                options_flow = EXCLUDED.options_flow,\n                composite = EXCLUDED.composite,\n                trend = EXCLUDED.trend,\n                confidence = EXCLUDED.confidence\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            positioning.get('institutional'),\n            positioning.get('insider'),\n            positioning.get('short_interest'),\n            positioning.get('options_flow'),\n            positioning.get('composite'),\n            positioning.get('trend'),\n            90.0  # Default confidence\n        ))\n        \n        # Insert master scores\n        composite_score = scores_data.get('composite', 50)\n        confidence_level = scores_data.get('confidence_level', 90)\n        market_regime = scores_data.get('market_regime', 'neutral')\n        \n        # Determine recommendation\n        if composite_score >= 70:\n            recommendation = 'BUY'\n        elif composite_score >= 50:\n            recommendation = 'HOLD'\n        else:\n            recommendation = 'SELL'\n        \n        cur.execute(\"\"\"\n            INSERT INTO master_scores (symbol, date, period_type, period_ending, quality, growth, \n                                     value, momentum, sentiment, positioning, composite, market_regime, \n                                     confidence_level, recommendation)\n            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\n            ON CONFLICT (symbol, date, period_type) DO UPDATE SET\n                period_ending = EXCLUDED.period_ending,\n                quality = EXCLUDED.quality,\n                growth = EXCLUDED.growth,\n                value = EXCLUDED.value,\n                momentum = EXCLUDED.momentum,\n                sentiment = EXCLUDED.sentiment,\n                positioning = EXCLUDED.positioning,\n                composite = EXCLUDED.composite,\n                market_regime = EXCLUDED.market_regime,\n                confidence_level = EXCLUDED.confidence_level,\n                recommendation = EXCLUDED.recommendation,\n                last_updated = CURRENT_TIMESTAMP\n        \"\"\", (\n            symbol, date, period_type, period_ending,\n            quality.get('composite'),\n            growth.get('composite'),\n            value.get('composite'),\n            momentum.get('composite'),\n            sentiment.get('composite'),\n            positioning.get('composite'),\n            composite_score,\n            market_regime,\n            confidence_level,\n            recommendation\n        ))\n        \n        logging.info(f\"✅ Inserted {period_type} scores for {symbol} on {date}: composite={composite_score:.1f}\")\n        \n    except Exception as e:\n        logging.error(f\"❌ Error inserting {period_type} scores for {symbol}: {e}\")\n        raise\n\ndef calculate_and_store_scores(symbols, scoring_engine, period_type, batch_size=10):\n    \"\"\"Calculate scores for symbols and store in database with period type\"\"\"\n    conn = get_db_connection()\n    cur = conn.cursor()\n    \n    try:\n        # Create tables (will only create if not exist)\n        logging.info(\"🔧 Creating/updating scoring tables...\")\n        create_unified_scores_tables(cur)\n        conn.commit()\n        \n        today = datetime.now().date()\n        period_ending = get_period_ending_date(period_type)\n        total_symbols = len(symbols)\n        successful = 0\n        failed = 0\n        \n        logging.info(f\"📊 Starting {period_type} score calculation for {total_symbols} symbols...\")\n        logging.info(f\"📅 Period ending: {period_ending}\")\n        \n        for i, symbol in enumerate(symbols):\n            try:\n                logging.info(f\"🔍 Processing {symbol} ({i+1}/{total_symbols})...\")\n                \n                # Calculate scores using our engine\n                # TODO: In future, enhance scoring engine to accept period_type \n                # and calculate period-specific metrics\n                scores_data = scoring_engine.calculate_composite_score(symbol)\n                \n                if scores_data:\n                    # Insert into database\n                    insert_scores(cur, symbol, today, period_type, period_ending, scores_data)\n                    successful += 1\n                    \n                    # Commit every batch_size symbols\n                    if (i + 1) % batch_size == 0:\n                        conn.commit()\n                        logging.info(f\"✅ Committed batch at symbol {i+1}\")\n                else:\n                    logging.warning(f\"⚠️ No scores data returned for {symbol}\")\n                    failed += 1\n                    \n            except Exception as e:\n                logging.error(f\"❌ Error processing {symbol}: {e}\")\n                failed +",
      "context": "    74:           SELECT symbol\n    75:             FROM stock_symbols\n>>> 76:            WHERE exchange IN ('NASDAQ','New York Stock Exchange')\n    77:              AND market_cap > %s\n    78:         \"\"\""
    },
    {
      "file": "loadtechnicalsdaily_optimized.py",
      "line": 257,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE symbol = %s\n                        ORDER BY date ASC\n                    \"\"\", (symbol,))\n                    \n                    rows = cursor.fetchall()\n                    \n                    if not rows:\n                        return None\n                    \n                    # Convert to DataFrame\n                    df = pd.DataFrame(rows, columns=['date', 'open', 'high', 'low', 'close', 'volume'])\n                    df['date'] = pd.to_datetime(df['date'])\n                    df.set_index('date', inplace=True)\n                    \n                    return df\n                    \n        except Exception as e:\n            logger.error(f\"❌ Error getting price data for {symbol}: {e}\")\n            return None\n    \n    def _calculate_all_indicators(self, symbol: str, price_data: pd.DataFrame) -> Generator[Dict[str, Any], None, None]:\n        \"\"\"\n        Calculate all technical indicators for a symbol.\n        \n        Args:\n            symbol: Stock symbol\n            price_data: DataFrame with OHLCV data\n            \n        Yields:\n            Dictionary containing technical indicators for each date\n        \"\"\"\n        if len(price_data) < self.min_data_points:\n            logger.warning(f\"⚠️ Insufficient data for {symbol}: {len(price_data)} < {self.min_data_points}\")\n            return\n        \n        # Extract price arrays\n        dates = price_data.index\n        open_prices = price_data['open'].values\n        high_prices = price_data['high'].values\n        low_prices = price_data['low'].values\n        close_prices = price_data['close'].values\n        volume = price_data['volume'].values\n        \n        # Calculate all indicators\n        indicators = {}\n        \n        # Simple Moving Averages\n        for period in self.sma_periods:\n            indicators[f'sma_{period}'] = TechnicalIndicators.calculate_sma(close_prices, period)\n        \n        # Exponential Moving Averages\n        for period in self.ema_periods:\n            indicators[f'ema_{period}'] = TechnicalIndicators.calculate_ema(close_prices, period)\n        \n        # RSI\n        indicators['rsi_14'] = TechnicalIndicators.calculate_rsi(close_prices, self.rsi_period)\n        \n        # MACD\n        macd_data = TechnicalIndicators.calculate_macd(close_prices, self.macd_fast, self.macd_slow, self.macd_signal)\n        indicators['macd'] = macd_data['macd']\n        indicators['macd_signal'] = macd_data['signal']\n        indicators['macd_histogram'] = macd_data['histogram']\n        \n        # Bollinger Bands\n        bollinger_data = TechnicalIndicators.calculate_bollinger_bands(close_prices, self.bollinger_period)\n        indicators['bb_upper'] = bollinger_data['upper_band']\n        indicators['bb_middle'] = bollinger_data['middle_band']\n        indicators['bb_lower'] = bollinger_data['lower_band']\n        \n        # Stochastic Oscillator\n        stochastic_data = TechnicalIndicators.calculate_stochastic(high_prices, low_prices, close_prices, self.stochastic_k, self.stochastic_d)\n        indicators['stoch_k'] = stochastic_data['stoch_k']\n        indicators['stoch_d'] = stochastic_data['stoch_d']\n        \n        # Average True Range\n        indicators['atr'] = TechnicalIndicators.calculate_atr(high_prices, low_prices, close_prices, self.atr_period)\n        \n        # Generate records for each date\n        for i, date in enumerate(dates):\n            record = {\n                'symbol': symbol,\n                'date': date.date(),\n                'open': float(open_prices[i]),\n                'high': float(high_prices[i]),\n                'low': float(low_prices[i]),\n                'close': float(close_prices[i]),\n                'volume': int(volume[i]) if not pd.isna(volume[i]) else None\n            }\n            \n            # Add all indicators\n            for indicator_name, indicator_values in indicators.items():\n                value = indicator_values[i]\n                record[indicator_name] = None if pd.isna(value) else float(value)\n            \n            yield record\n    \n    def _get_symbols_from_database(self) -> List[str]:\n        \"\"\"\n        Get list of symbols that have price data.\n        \n        Returns:\n            List of stock symbols\n        \"\"\"\n        try:\n            with self.loader.get_connection() as conn:\n                with conn.cursor() as cursor:\n                    cursor.execute(\"\"\"\n                        SELECT DISTINCT symbol\n                        FROM price_daily\n                        WHERE symbol IN (SELECT symbol FROM stock_symbols WHERE is_etf = FALSE)\n                        ORDER BY symbol\n                    \"\"\")\n                    symbols = [row[0] for row in cursor.fetchall()]\n            \n            logger.info(f\"📊 Found {len(symbols)} symbols with price data\")\n            return symbols\n            \n        except Exception as e:\n            logger.error(f\"❌ Failed to get symbols from database: {e}\")\n            raise\n    \n    def technicals_data_source(self) -> Generator[Dict[str, Any], None, None]:\n        \"\"\"\n        Main data source generator for technical indicators.\n        \n        Yields:\n            Dictionary containing technical indicators record\n        \"\"\"\n        symbols = self._get_symbols_from_database()\n        \n        if not symbols:\n            logger.warning(\"⚠️ No symbols found with price data\")\n            return\n        \n        total_symbols = len(symbols)\n        logger.info(f\"🔄 Processing technical indicators for {total_symbols} symbols\")\n        \n        # Process symbols in batches to manage memory\n        for batch_start in range(0, total_symbols, self.batch_size):\n            batch_end = min(batch_start + self.batch_size, total_symbols)\n            symbol_batch = symbols[batch_start:batch_end]\n            batch_num = (batch_start // self.batch_size) + 1\n            total_batches = (total_symbols + self.batch_size - 1) // self.batch_size\n            \n            logger.info(f\"📦 Processing batch {batch_num}/{total_batches}: {len(symbol_batch)} symbols\")\n            \n            for symbol in symbol_batch:\n                try:\n                    # Get price data\n                    price_data = self._get_price_data(symbol)\n                    \n                    if price_data is None or price_data.empty:\n                        logger.warning(f\"⚠️ No price data found for {symbol}\")\n                        continue\n                    \n                    # Calculate and yield indicators\n                    record_count = 0\n                    for record in self._calculate_all_indicators(symbol, price_data):\n                        yield record\n                        record_count += 1\n                    \n                    if record_count > 0:\n                        logger.info(f\"✅ Generated {record_count} technical indicator records for {symbol}\")\n                    \n                except Exception as e:\n                    logger.error(f\"❌ Error processing {symbol}: {e}\")\n                    continue\n            \n            logger.info(f\"📊 Batch {batch_num} completed\")\n        \n        logger.info(f\"🎉 Technical indicators calculated for all {total_symbols} symbols\")\n    \n    def validate_table_schema(self) -> bool:\n        \"\"\"Validate that the technicals_daily table has the required schema.\"\"\"\n        required_columns = [\n            {'name': 'symbol', 'type': 'varchar'},\n            {'name': 'date', 'type': 'date'},\n            {'name': 'open', 'type': 'double precision'},\n            {'name': 'high', 'type': 'double precision'},\n            {'name': 'low', 'type': 'double precision'},\n            {'name': 'close', 'type': 'double precision'},\n            {'name': 'volume', 'type': 'bigint'},\n            {'name': 'sma_20', 'type': 'double precision'},\n            {'name': 'rsi_14', 'type': 'double precision'}\n        ]\n        \n        return self.loader.validate_table_schema(required_columns)\n    \n    def run_optimized_load(self) -> Dict[str, Any]:\n        \"\"\"\n        Execute the optimized technicals daily loading process.\n        \n        Returns:\n            Processing results and metrics\n        \"\"\"\n        log_data_loader_start(\n            \"OptimizedTechnicalsDailyLoader\",\n            \"Calculate and load technical indicators for all symbols with enhanced optimization\"\n        )\n        \n        try:\n            # Validate table schema first\n            if not self.validate_table_schema():\n                raise Exception(\"Table schema validation failed\")\n            \n            # Process data with optimization\n            result = self.loader.process_data_with_validation(\n                data_source_func=self.technicals_data_source,\n                data_validator_func=self.data_validator,\n                conflict_columns=['symbol', 'date'],  # Unique constraint on symbol +",
      "context": "    255:                         SELECT date, open, high, low, close, volume\n    256:                         FROM price_daily\n>>> 257:                         WHERE symbol = %s\n    258:                         ORDER BY date ASC\n    259:                     \"\"\", (symbol,))"
    },
    {
      "file": "loadttmcashflow.py",
      "line": 136,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where all quarters were NaN\n        ttm_data = ttm_data[ttm_data.notna()]\n        \n        if ttm_data.empty:\n            logging.warning(f\"No valid TTM data after calculation for {symbol}\")\n            return None\n        \n        # Create a DataFrame with TTM data using most recent quarter date as reference\n        ttm_date = cash_flow.columns[0]  # Most recent quarter date\n        ttm_df = pd.DataFrame({ttm_date: ttm_data})\n        \n        logging.info(f\"Calculated TTM cash flow for {symbol}: {len(ttm_df)} line items from {valid_quarters} quarters\")\n        return ttm_df\n        \n    except Exception as e:\n        logging.error(f\"Error calculating TTM cash flow for {symbol}: {e}\")\n        return None\n\ndef process_ttm_cash_flow_data(symbol: str, ttm_cash_flow: pd.DataFrame) -> List[Tuple]:\n    \"\"\"Process TTM cash flow DataFrame into database-ready tuples\"\"\"\n    processed_data = []\n    valid_dates = 0\n    total_values = 0\n    valid_values = 0\n    \n    for date_col in ttm_cash_flow.columns:\n        safe_date = safe_convert_date(date_col)\n        if safe_date is None:\n            logging.debug(f\"Skipping invalid date column for {symbol}: {date_col}\")\n            continue\n        valid_dates += 1\n            \n        for item_name in ttm_cash_flow.index:\n            value = ttm_cash_flow.loc[item_name, date_col]\n            total_values += 1\n            safe_value = safe_convert_to_float(value)\n            \n            if safe_value is not None:\n                valid_values += 1\n                processed_data.append((\n                    symbol,\n                    safe_date,\n                    str(item_name),\n                    safe_value\n                ))\n    \n    logging.info(f\"Processed TTM {symbol}: {valid_dates} valid dates, {valid_values}/{total_values} valid values, {len(processed_data)} records\")\n    return processed_data\n\ndef load_ttm_cash_flow(symbols: List[str], cur, conn) -> Tuple[int, int, List[str]]:\n    \"\"\"Load TTM cash flow data for given symbols\"\"\"\n    total = len(symbols)\n    logging.info(f\"Loading TTM cash flow for {total} symbols\")\n    processed, failed = 0, []\n    CHUNK_SIZE, PAUSE = 10, 0.5\n    batches = (total + CHUNK_SIZE - 1) // CHUNK_SIZE\n\n    for batch_idx in range(batches):\n        batch = symbols[batch_idx*CHUNK_SIZE:(batch_idx+1)*CHUNK_SIZE]\n        logging.info(f\"Processing batch {batch_idx+1}/{batches}\")\n        log_mem(f\"Batch {batch_idx+1} start\")\n\n        for symbol in batch:\n            success = False\n            \n            for attempt in range(1, MAX_BATCH_RETRIES +",
      "context": "    134:         ttm_data = ttm_quarters.sum(axis=1, skipna=True)\n    135:         \n>>> 136:         # Filter out rows where all quarters were NaN\n    137:         ttm_data = ttm_data[ttm_data.notna()]\n    138:         "
    },
    {
      "file": "loadttmincomestatement.py",
      "line": 136,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where all quarters were NaN\n        ttm_data = ttm_data[ttm_data.notna()]\n        \n        if ttm_data.empty:\n            logging.warning(f\"No valid TTM data after calculation for {symbol}\")\n            return None\n        \n        # Create a DataFrame with TTM data using most recent quarter date as reference\n        ttm_date = income_statement.columns[0]  # Most recent quarter date\n        ttm_df = pd.DataFrame({ttm_date: ttm_data})\n        \n        logging.info(f\"Calculated TTM income statement for {symbol}: {len(ttm_df)} line items from {valid_quarters} quarters\")\n        return ttm_df\n        \n    except Exception as e:\n        logging.error(f\"Error calculating TTM income statement for {symbol}: {e}\")\n        return None\n\ndef process_ttm_income_statement_data(symbol: str, ttm_income_statement: pd.DataFrame) -> List[Tuple]:\n    \"\"\"Process TTM income statement DataFrame into database-ready tuples\"\"\"\n    processed_data = []\n    valid_dates = 0\n    total_values = 0\n    valid_values = 0\n    \n    for date_col in ttm_income_statement.columns:\n        safe_date = safe_convert_date(date_col)\n        if safe_date is None:\n            logging.debug(f\"Skipping invalid date column for {symbol}: {date_col}\")\n            continue\n        valid_dates += 1\n            \n        for item_name in ttm_income_statement.index:\n            value = ttm_income_statement.loc[item_name, date_col]\n            total_values += 1\n            safe_value = safe_convert_to_float(value)\n            \n            if safe_value is not None:\n                valid_values += 1\n                processed_data.append((\n                    symbol,\n                    safe_date,\n                    str(item_name),\n                    safe_value\n                ))\n    \n    logging.info(f\"Processed TTM {symbol}: {valid_dates} valid dates, {valid_values}/{total_values} valid values, {len(processed_data)} records\")\n    return processed_data\n\ndef load_ttm_income_statement(symbols: List[str], cur, conn) -> Tuple[int, int, List[str]]:\n    \"\"\"Load TTM income statement data for given symbols\"\"\"\n    total = len(symbols)\n    logging.info(f\"Loading TTM income statement for {total} symbols\")\n    processed, failed = 0, []\n    CHUNK_SIZE, PAUSE = 10, 0.5\n    batches = (total + CHUNK_SIZE - 1) // CHUNK_SIZE\n\n    for batch_idx in range(batches):\n        batch = symbols[batch_idx*CHUNK_SIZE:(batch_idx+1)*CHUNK_SIZE]\n        logging.info(f\"Processing batch {batch_idx+1}/{batches}\")\n        log_mem(f\"Batch {batch_idx+1} start\")\n\n        for symbol in batch:\n            success = False\n            \n            for attempt in range(1, MAX_BATCH_RETRIES +",
      "context": "    134:         ttm_data = ttm_quarters.sum(axis=1, skipna=True)\n    135:         \n>>> 136:         # Filter out rows where all quarters were NaN\n    137:         ttm_data = ttm_data[ttm_data.notna()]\n    138:         "
    },
    {
      "file": "pattern_recognition.py",
      "line": 475,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where trend lines converge\"\"\"\n        # Solve for intersection point\n        # high_trend: y = m1*x + b1\n        # low_trend: y = m2*x + b2\n        # Intersection: m1*x + b1 = m2*x + b2\n        \n        slope_diff = high_trend['slope'] - low_trend['slope']\n        if abs(slope_diff) < 1e-6:  # Parallel lines\n            return data_length * 2  # Far future\n        \n        x_intersect = (low_trend['intercept'] - high_trend['intercept']) / slope_diff\n        return int(x_intersect)\n    \n    def _calculate_triangle_confidence(self, data: pd.DataFrame, high_trend: Dict, low_trend: Dict) -> float:\n        \"\"\"Calculate confidence in triangle pattern\"\"\"\n        confidence = 0.5\n        \n        # R-value bonus (how well lines fit)\n        r_bonus = (abs(high_trend['r_value']) + abs(low_trend['r_value'])) * 0.25\n        confidence += r_bonus\n        \n        # Volume pattern (should decrease towards apex)\n        if 'Volume' in data.columns:\n            vol_trend = self._check_volume_trend(data)\n            confidence += vol_trend * 0.2\n        \n        # Touch points (more touches = higher confidence)\n        touch_bonus = self._count_touch_points(data, high_trend, low_trend) * 0.05\n        confidence += min(0.2, touch_bonus)\n        \n        return min(1.0, confidence)\n    \n    def _check_volume_trend(self, data: pd.DataFrame) -> float:\n        \"\"\"Check if volume decreases towards triangle apex\"\"\"\n        volumes = data['Volume'].values\n        \n        # Fit trend line to volume\n        x = np.arange(len(volumes))\n        try:\n            slope, _, r_value, _, _ = linregress(x, volumes)\n            \n            # Volume should decrease (negative slope)\n            if slope < 0 and abs(r_value) > 0.3:\n                return 1.0\n            elif slope < 0:\n                return 0.5\n        except:\n            pass\n        \n        return 0.0\n    \n    def _count_touch_points(self, data: pd.DataFrame, high_trend: Dict, low_trend: Dict) -> int:\n        \"\"\"Count how many times price touches trend lines\"\"\"\n        highs = data['High'].values\n        lows = data['Low'].values\n        \n        touch_count = 0\n        tolerance = 0.01  # 1% tolerance\n        \n        for i, (high, low) in enumerate(zip(highs, lows)):\n            # Calculate expected trend line values\n            expected_high = high_trend['slope'] * i + high_trend['intercept']\n            expected_low = low_trend['slope'] * i + low_trend['intercept']\n            \n            # Check for touches\n            if abs(high - expected_high) / expected_high < tolerance:\n                touch_count += 1\n            if abs(low - expected_low) / expected_low < tolerance:\n                touch_count += 1\n        \n        return touch_count\n    \n    def _calculate_triangle_targets(self, data: pd.DataFrame, triangle_type: str, \n                                  high_trend: Dict, low_trend: Dict) -> Tuple[float, float]:\n        \"\"\"Calculate price targets for triangle breakout\"\"\"\n        current_price = data['Close'].iloc[-1]\n        \n        # Calculate triangle height at start\n        start_high = high_trend['intercept']\n        start_low = low_trend['intercept']\n        triangle_height = start_high - start_low\n        \n        # Target based on triangle type\n        if triangle_type == 'ascending':\n            # Bullish bias - target above resistance\n            resistance = high_trend['intercept']  # Flat line\n            target_price = resistance + triangle_height\n            stop_loss = start_low * 0.98\n            \n        elif triangle_type == 'descending':\n            # Bearish bias - target below support\n            support = low_trend['intercept']  # Flat line\n            target_price = support - triangle_height\n            stop_loss = start_high * 1.02\n            \n        else:  # symmetrical\n            # Neutral - target in breakout direction\n            mid_point = (start_high + start_low) / 2\n            target_price = mid_point + triangle_height * 0.5  # Conservative target\n            stop_loss = mid_point - triangle_height * 0.3\n        \n        return target_price, stop_loss\n\nclass TechnicalPatternRecognizer:\n    \"\"\"\n    Main Technical Pattern Recognition System\n    Coordinates multiple pattern detectors\n    \"\"\"\n    \n    def __init__(self, confidence_threshold: float = 0.6):\n        self.confidence_threshold = confidence_threshold\n        self.patterns = [\n            HeadAndShouldersPattern(confidence_threshold),\n            DoubleTopPattern(confidence_threshold),\n            TrianglePattern(confidence_threshold)\n        ]\n    \n    def detect_patterns(self, symbol: str, period: str = \"1y\") -> Dict:\n        \"\"\"Detect patterns for a given symbol\"\"\"\n        try:\n            # Fetch price data\n            ticker = yf.Ticker(symbol)\n            data = ticker.history(period=period)\n            \n            if data.empty:\n                return {\n                    'symbol': symbol,\n                    'patterns_found': [],\n                    'error': 'No data available',\n                    'analysis_date': datetime.now()\n                }\n            \n            # Run all pattern detectors\n            all_patterns = []\n            for pattern_detector in self.patterns:\n                patterns = pattern_detector.detect(data)\n                all_patterns.extend(patterns)\n            \n            # Filter by confidence and sort\n            significant_patterns = [\n                p for p in all_patterns \n                if p.confidence >= self.confidence_threshold\n            ]\n            \n            significant_patterns.sort(key=lambda x: x.confidence, reverse=True)\n            \n            # Calculate overall pattern score\n            pattern_score = self._calculate_overall_score(significant_patterns)\n            \n            return {\n                'symbol': symbol,\n                'patterns_found': len(significant_patterns),\n                'pattern_score': pattern_score,\n                'patterns': [self._pattern_to_dict(p) for p in significant_patterns],\n                'analysis_date': datetime.now(),\n                'data_period': period,\n                'current_price': data['Close'].iloc[-1]\n            }\n            \n        except Exception as e:\n            return {\n                'symbol': symbol,\n                'patterns_found': 0,\n                'pattern_score': 0.0,\n                'patterns': [],\n                'error': str(e),\n                'analysis_date': datetime.now()\n            }\n    \n    def _calculate_overall_score(self, patterns: List[PatternResult]) -> float:\n        \"\"\"Calculate overall technical pattern score\"\"\"\n        if not patterns:\n            return 0.0\n        \n        # Weight patterns by confidence and recency\n        total_score = 0.0\n        total_weight = 0.0\n        \n        for pattern in patterns:\n            # Recent patterns get higher weight\n            days_ago = (datetime.now() - pattern.end_date).days\n            recency_weight = max(0.1, 1.0 - days_ago / 365.0)\n            \n            weight = pattern.confidence * recency_weight\n            total_score += pattern.probability * weight\n            total_weight +",
      "context": "    473:     \n    474:     def _calculate_convergence(self, high_trend: Dict, low_trend: Dict, data_length: int) -> int:\n>>> 475:         \"\"\"Calculate where trend lines converge\"\"\"\n    476:         # Solve for intersection point\n    477:         # high_trend: y = m1*x + b1"
    },
    {
      "file": "pattern_recognition_main.py",
      "line": 317,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE analysis_date >= %s\n                \"\"\"\n                params = [datetime.now() - timedelta(days=days)]\n                \n                if symbol:\n                    base_query += \" AND symbol = %s\"\n                    params.append(symbol)\n                \n                base_query += \" ORDER BY analysis_date DESC, confidence DESC\"\n                \n                cursor.execute(base_query, params)\n                results = cursor.fetchall()\n                \n                return [dict(row) for row in results]\n                \n        except Exception as e:\n            logger.error(f\"Error retrieving recent patterns: {e}\")\n            return []\n    \n    def get_pattern_statistics(self) -> Dict[str, Any]:\n        \"\"\"Get pattern performance statistics\"\"\"\n        if not self.connection:\n            raise RuntimeError(\"Database not initialized\")\n        \n        try:\n            with self.connection.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cursor:\n                cursor.execute(\"SELECT * FROM pattern_statistics ORDER BY success_rate DESC\")\n                results = cursor.fetchall()\n                \n                return {row['pattern_type']: dict(row) for row in results}\n                \n        except Exception as e:\n            logger.error(f\"Error retrieving pattern statistics: {e}\")\n            return {}\n    \n    async def run_batch_analysis(self, symbols: List[str]) -> Dict[str, Any]:\n        \"\"\"Run pattern analysis for multiple symbols\"\"\"\n        logger.info(f\"Starting batch analysis for {len(symbols)} symbols\")\n        \n        results = {}\n        successful = 0\n        failed = 0\n        \n        for symbol in symbols:\n            try:\n                # Get data for symbol\n                data = await self._get_symbol_data(symbol)\n                if data is None or data.empty:\n                    logger.warning(f\"No data available for {symbol}\")\n                    results[symbol] = {'error': 'No data available'}\n                    failed += 1\n                    continue\n                \n                # Analyze patterns\n                analysis = self.analyze_symbol(symbol, data)\n                results[symbol] = analysis\n                \n                # Save to database\n                await self.save_analysis_results(analysis)\n                \n                successful += 1\n                \n            except Exception as e:\n                logger.error(f\"Error processing {symbol}: {e}\")\n                results[symbol] = {'error': str(e)}\n                failed += 1\n        \n        logger.info(f\"Batch analysis completed: {successful} successful, {failed} failed\")\n        \n        return {\n            'summary': {\n                'total_symbols': len(symbols),\n                'successful': successful,\n                'failed': failed,\n                'success_rate': successful / len(symbols) if symbols else 0\n            },\n            'results': results,\n            'timestamp': datetime.now().isoformat()\n        }\n    \n    async def _get_symbol_data(self, symbol: str, days: int = 100) -> Optional[pd.DataFrame]:\n        \"\"\"Get historical data for symbol from database\"\"\"\n        if not self.connection:\n            await self.initialize_database()\n        \n        try:\n            with self.connection.cursor() as cursor:\n                cursor.execute(\"\"\"\n                    SELECT date, open, high, low, close, volume\n                    FROM price_daily \n                    WHERE symbol = %s \n                    AND date >= %s\n                    ORDER BY date ASC\n                \"\"\", (symbol, datetime.now() - timedelta(days=days)))\n                \n                rows = cursor.fetchall()\n                if not rows:\n                    return None\n                \n                df = pd.DataFrame(rows, columns=['date', 'open', 'high', 'low', 'close', 'volume'])\n                df.set_index('date', inplace=True)\n                \n                return df\n                \n        except Exception as e:\n            logger.error(f\"Error getting data for {symbol}: {e}\")\n            return None\n    \n    def generate_trading_signals(self, min_confidence: float = 0.7) -> List[Dict[str, Any]]:\n        \"\"\"Generate current trading signals based on recent patterns\"\"\"\n        try:\n            recent_patterns = self.get_recent_patterns(days=7)\n            signals = []\n            \n            for pattern in recent_patterns:\n                if (pattern['confidence'] >= min_confidence and \n                    pattern['signal_type'] in ['buy', 'sell']):\n                    \n                    signals.append({\n                        'symbol': pattern['symbol'],\n                        'pattern_type': pattern['pattern_type'],\n                        'signal_type': pattern['signal_type'],\n                        'confidence': pattern['confidence'],\n                        'target_price': pattern['target_price'],\n                        'stop_loss': pattern['stop_loss'],\n                        'risk_reward_ratio': pattern['risk_reward_ratio'],\n                        'analysis_date': pattern['analysis_date']\n                    })\n            \n            # Sort by confidence\n            signals.sort(key=lambda x: x['confidence'], reverse=True)\n            \n            return signals\n            \n        except Exception as e:\n            logger.error(f\"Error generating trading signals: {e}\")\n            return []\n    \n    async def run_backtesting(self, symbols: List[str], start_date: datetime, \n                            end_date: datetime) -> Dict[str, Any]:\n        \"\"\"Run comprehensive backtesting\"\"\"\n        logger.info(f\"Running backtesting for {len(symbols)} symbols\")\n        \n        all_results = []\n        \n        for symbol in symbols:\n            try:\n                # Get historical data\n                data = await self._get_symbol_data(symbol, days=(end_date - start_date).days + 50)\n                if data is None or data.empty:\n                    continue\n                \n                # Run backtest\n                results = self.backtester.backtest_symbol(symbol, data, start_date, end_date)\n                all_results.extend(results)\n                \n            except Exception as e:\n                logger.error(f\"Backtesting error for {symbol}: {e}\")\n        \n        if not all_results:\n            return {'error': 'No backtest results generated'}\n        \n        # Calculate statistics\n        statistics = self.backtester.calculate_statistics(all_results)\n        \n        # Generate report\n        report = self.backtester.generate_report(all_results, statistics)\n        \n        # Update database with statistics\n        await self._update_pattern_statistics(statistics)\n        \n        return report\n    \n    async def _update_pattern_statistics(self, statistics: Dict[str, PatternStatistics]):\n        \"\"\"Update pattern statistics in database\"\"\"\n        if not self.connection:\n            await self.initialize_database()\n        \n        try:\n            with self.connection.cursor() as cursor:\n                for pattern_type, stats in statistics.items():\n                    cursor.execute(\"\"\"\n                        INSERT INTO pattern_statistics (\n                            pattern_type, total_occurrences, successful_patterns,\n                            success_rate, avg_return, avg_days_held, sharpe_ratio,\n                            max_drawdown, confidence_correlation\n                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)\n                        ON CONFLICT (pattern_type) DO UPDATE SET\n                            total_occurrences = EXCLUDED.total_occurrences,\n                            successful_patterns = EXCLUDED.successful_patterns,\n                            success_rate = EXCLUDED.success_rate,\n                            avg_return = EXCLUDED.avg_return,\n                            avg_days_held = EXCLUDED.avg_days_held,\n                            sharpe_ratio = EXCLUDED.sharpe_ratio,\n                            max_drawdown = EXCLUDED.max_drawdown,\n                            confidence_correlation = EXCLUDED.confidence_correlation,\n                            last_updated = CURRENT_TIMESTAMP\n                    \"\"\", (\n                        pattern_type,\n                        stats.total_occurrences,\n                        stats.successful_patterns,\n                        stats.success_rate,\n                        stats.avg_return,\n                        stats.avg_days_held,\n                        stats.sharpe_ratio,\n                        stats.max_drawdown,\n                        stats.confidence_correlation\n                    ))\n                \n                self.connection.commit()\n                logger.info(f\"Updated statistics for {len(statistics)} pattern types\")\n                \n        except Exception as e:\n            logger.error(f\"Error updating pattern statistics: {e}\")\n            self.connection.rollback()\n\n# CLI interface\nasync def main():\n    \"\"\"Main CLI function\"\"\"\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Pattern Recognition System')\n    parser.add_argument('command', choices=['analyze', 'batch', 'signals', 'backtest', 'stats'])\n    parser.add_argument('--symbol', help='Stock symbol to analyze')\n    parser.add_argument('--symbols', nargs='+",
      "context": "    315:                 base_query = \"\"\"\n    316:                     SELECT * FROM pattern_recognition_results \n>>> 317:                     WHERE analysis_date >= %s\n    318:                 \"\"\"\n    319:                 params = [datetime.now() - timedelta(days=days)]"
    },
    {
      "file": "run_pattern_recognition.py",
      "line": 47,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE date_time >= NOW() - INTERVAL '7 days'\n            ORDER BY symbol\n            LIMIT 100\n        \"\"\")\n        \n        symbols = [row[0] for row in cursor.fetchall()]\n        logger.info(f\"Found {len(symbols)} active symbols\")\n        return symbols\n        \n    except Exception as e:\n        logger.error(f\"Error fetching active symbols: {e}\")\n        return []\n    finally:\n        if conn:\n            service.connection_pool.putconn(conn)\n\nasync def run_pattern_recognition():\n    \"\"\"Main pattern recognition runner\"\"\"\n    start_time = datetime.now()\n    logger.info(\"Starting pattern recognition scan\")\n    \n    try:\n        # Get database configuration\n        db_config = await get_database_config()\n        if not db_config:\n            logger.error(\"Failed to get database configuration\")\n            return\n        \n        # Initialize pattern recognition service\n        service = EnhancedPatternRecognitionService(db_config)\n        \n        # Get active symbols\n        symbols = await get_active_symbols(service)\n        if not symbols:\n            logger.warning(\"No active symbols found\")\n            return\n        \n        # Configuration\n        timeframes = ['1d']  # Can add '1h', '4h', '1w' later\n        batch_size = 10  # Process 10 symbols at a time\n        \n        total_patterns = 0\n        processed_symbols = 0\n        failed_symbols = []\n        \n        # Process symbols in batches\n        for timeframe in timeframes:\n            logger.info(f\"Processing timeframe: {timeframe}\")\n            \n            for i in range(0, len(symbols), batch_size):\n                batch = symbols[i:i + batch_size]\n                logger.info(f\"Processing batch {i//batch_size + 1}: {batch}\")\n                \n                try:\n                    # Run pattern recognition for batch\n                    batch_results = await service.bulk_scan(batch, timeframe)\n                    \n                    for symbol, patterns in batch_results.items():\n                        if patterns:\n                            total_patterns += len(patterns)\n                            logger.info(f\"Found {len(patterns)} patterns for {symbol}\")\n                            \n                            # Log high-confidence patterns\n                            high_conf_patterns = [p for p in patterns if p.confidence >= 0.80]\n                            if high_conf_patterns:\n                                logger.info(f\"High confidence patterns for {symbol}:\")\n                                for pattern in high_conf_patterns:\n                                    logger.info(f\"  - {pattern.pattern_name}: {pattern.confidence:.3f} ({pattern.direction})\")\n                        \n                        processed_symbols += 1\n                \n                except Exception as e:\n                    logger.error(f\"Error processing batch {batch}: {e}\")\n                    failed_symbols.extend(batch)\n                \n                # Small delay between batches to avoid overwhelming the system\n                await asyncio.sleep(1)\n        \n        # Summary\n        end_time = datetime.now()\n        duration = (end_time - start_time).total_seconds()\n        \n        summary = {\n            'start_time': start_time.isoformat(),\n            'end_time': end_time.isoformat(),\n            'duration_seconds': duration,\n            'total_symbols': len(symbols),\n            'processed_symbols': processed_symbols,\n            'failed_symbols': len(failed_symbols),\n            'total_patterns_found': total_patterns,\n            'patterns_per_symbol': total_patterns / max(processed_symbols, 1),\n            'processing_rate': processed_symbols / max(duration, 1),\n            'failed_symbol_list': failed_symbols[:10]  # Log first 10 failures\n        }\n        \n        logger.info(f\"Pattern recognition scan completed: {json.dumps(summary, indent=2)}\")\n        \n        # Store scan results\n        await store_scan_summary(service, summary)\n        \n    except Exception as e:\n        logger.error(f\"Fatal error in pattern recognition: {e}\")\n        logger.error(traceback.format_exc())\n    finally:\n        if 'service' in locals():\n            service.close()\n\nasync def store_scan_summary(service, summary):\n    \"\"\"Store scan summary in database\"\"\"\n    if not service.connection_pool:\n        return\n    \n    conn = None\n    try:\n        conn = service.connection_pool.getconn()\n        cursor = conn.cursor()\n        \n        cursor.execute(\"\"\"\n            INSERT INTO last_updated (script_name, last_run, details)\n            VALUES (%s, %s, %s)\n            ON CONFLICT (script_name) \n            DO UPDATE SET last_run = EXCLUDED.last_run, details = EXCLUDED.details\n        \"\"\", (\n            'pattern_recognition_scan',\n            summary['end_time'],\n            json.dumps(summary)\n        ))\n        \n        conn.commit()\n        logger.info(\"Scan summary stored in database\")\n        \n    except Exception as e:\n        logger.error(f\"Error storing scan summary: {e}\")\n    finally:\n        if conn:\n            service.connection_pool.putconn(conn)\n\nasync def cleanup_old_patterns():\n    \"\"\"Clean up old patterns and performance data\"\"\"\n    try:\n        # Get database configuration\n        db_config = await get_database_config()\n        if not db_config:\n            logger.error(\"Failed to get database configuration\")\n            return\n        \n        service = EnhancedPatternRecognitionService(db_config)\n        \n        if not service.connection_pool:\n            return\n        \n        conn = None\n        try:\n            conn = service.connection_pool.getconn()\n            cursor = conn.cursor()\n            \n            # Mark old patterns as expired\n            cursor.execute(\"\"\"\n                UPDATE detected_patterns \n                SET status = 'expired'\n                WHERE status = 'active' \n                  AND detection_date < NOW() - INTERVAL '30 days'\n            \"\"\")\n            expired_count = cursor.rowcount\n            \n            # Delete very old pattern alerts\n            cursor.execute(\"\"\"\n                DELETE FROM pattern_alerts\n                WHERE created_at < NOW() - INTERVAL '90 days'\n            \"\"\")\n            deleted_alerts = cursor.rowcount\n            \n            # Clean up old feature cache\n            cursor.execute(\"\"\"\n                DELETE FROM pattern_features\n                WHERE calculation_date < NOW() - INTERVAL '7 days'\n            \"\"\")\n            deleted_features = cursor.rowcount\n            \n            conn.commit()\n            \n            logger.info(f\"Cleanup completed: {expired_count} patterns expired, \"\n                       f\"{deleted_alerts} alerts deleted, {deleted_features} features cleaned\")\n        \n        except Exception as e:\n            logger.error(f\"Error during cleanup: {e}\")\n            if conn:\n                conn.rollback()\n        finally:\n            if conn:\n                service.connection_pool.putconn(conn)\n            service.close()\n    \n    except Exception as e:\n        logger.error(f\"Error in cleanup process: {e}\")\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Pattern Recognition Runner')\n    parser.add_argument('--cleanup', action='store_true', \n                       help='Run cleanup of old patterns only')\n    parser.add_argument('--symbols', nargs='+",
      "context": "    45:             SELECT DISTINCT symbol \n    46:             FROM technical_data_daily \n>>> 47:             WHERE date_time >= NOW() - INTERVAL '7 days'\n    48:             ORDER BY symbol\n    49:             LIMIT 100"
    },
    {
      "file": "test/simple_test.py",
      "line": 136,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE table_name = 'stocks' \n            ORDER BY ordinal_position;\n        \"\"\")\n        \n        stocks_columns = cursor.fetchall()\n        expected_columns = ['id', 'symbol', 'name', 'market', 'created_at', 'updated_at']\n        actual_columns = [col[0] for col in stocks_columns]\n        \n        missing_columns = [col for col in expected_columns if col not in actual_columns]\n        \n        if missing_columns:\n            logger.error(f\"❌ Missing columns in stocks table: {missing_columns}\")\n            return False\n        else:\n            logger.info(f\"✅ Stocks table structure correct: {len(actual_columns)} columns\")\n        \n        # Test that we can insert and retrieve data\n        cursor.execute(\"\"\"\n            INSERT INTO stocks (symbol, name, market) \n            VALUES ('TEST', 'Test Company', 'TEST') \n            ON CONFLICT (symbol) DO NOTHING\n            RETURNING id;\n        \"\"\")\n        \n        result = cursor.fetchone()\n        if result:\n            logger.info(\"✅ Successfully inserted test data\")\n        else:\n            logger.info(\"✅ Test data already exists (conflict handled)\")\n        \n        conn.commit()\n        cursor.close()\n        conn.close()\n        \n        return True\n        \n    except Exception as e:\n        logger.error(f\"❌ Table structure test failed: {str(e)}\")\n        return False\n\ndef main():\n    \"\"\"Run all tests\"\"\"\n    logger.info(\"=== Starting Simple Test Suite ===\")\n    \n    tests = [\n        (\"Environment Variables\", test_environment_variables),\n        (\"Mock boto3\", test_mock_boto3),\n        (\"Database Connection\", test_database_connection),\n        (\"Table Structure\", test_table_structure),\n    ]\n    \n    results = {}\n    \n    for test_name, test_func in tests:\n        logger.info(f\"\\n--- Running: {test_name} ---\")\n        try:\n            result = test_func()\n            results[test_name] = result\n        except Exception as e:\n            logger.error(f\"Test {test_name} threw exception: {str(e)}\")\n            results[test_name] = False\n    \n    # Summary\n    logger.info(f\"\\n{'='*50}\")\n    logger.info(\"TEST SUMMARY\")\n    logger.info(f\"{'='*50}\")\n    \n    passed = 0\n    for test_name, success in results.items():\n        status = \"PASS\" if success else \"FAIL\"\n        status_icon = \"✅\" if success else \"❌\"\n        logger.info(f\"{status_icon} {status}: {test_name}\")\n        if success:\n            passed +",
      "context": "    134:             SELECT column_name, data_type \n    135:             FROM information_schema.columns \n>>> 136:             WHERE table_name = 'stocks' \n    137:             ORDER BY ordinal_position;\n    138:         \"\"\")"
    },
    {
      "file": "test/test_runner_new.py",
      "line": 59,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "where the script is located\n        script_dir = os.path.dirname(script_path)\n        \n        # Create a log file for this specific script\n        log_file_path = f\"/app/logs/{script_name.replace('.py', '')}.log\"\n        \n        with open(log_file_path, 'w') as log_file:\n            # Run the script\n            process = subprocess.Popen(\n                [sys.executable, script_path],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.STDOUT,\n                cwd=script_dir,\n                text=True,\n                env=dict(os.environ, PYTHONPATH=\"/app:\" +",
      "context": "    57:     \n    58:     try:\n>>> 59:         # Change to the source directory where the script is located\n    60:         script_dir = os.path.dirname(script_path)\n    61:         "
    },
    {
      "file": "validate_data_loaders.py",
      "line": 192,
      "pattern": "Unparameterized WHERE clauses",
      "risk": "HIGH",
      "description": "WHERE clauses using string concatenation",
      "code": "WHERE table_name = %s AND table_schema = 'public'\n            \"\"\"\n            \n            result = query(check_query, (table_name,))\n            exists = result.rows[0][0] > 0\n            \n            if not exists:\n                logger.warning(f\"Table does not exist: {table_name}\")\n            \n            return exists\n            \n        except Exception as e:\n            logger.error(f\"Error checking table existence for {table_name}: {str(e)}\")\n            return False\n    \n    def get_table_stats(self, table_name: str) -> Dict:\n        \"\"\"\n        Get statistics for a table\n        \n        Args:\n            table_name: Name of the table\n            \n        Returns:\n            Dictionary with table statistics\n        \"\"\"\n        try:\n            stats = {}\n            \n            # Record count\n            count_query = f\"SELECT COUNT(*) FROM {table_name}\"\n            count_result = query(count_query)\n            stats['record_count'] = int(count_result.rows[0][0])\n            \n            # Last update (try common timestamp columns)\n            timestamp_columns = ['updated_at', 'created_at', 'fetched_at', 'date', 'last_updated']\n            stats['last_updated'] = None\n            \n            for col in timestamp_columns:\n                try:\n                    ts_query = f\"\"\"\n                        SELECT column_name FROM information_schema.columns \n                        WHERE table_name = %s AND column_name = %s\n                    \"\"\"\n                    col_result = query(ts_query, (table_name, col))\n                    \n                    if col_result.rows:\n                        max_query = f\"SELECT MAX({col}) FROM {table_name}\"\n                        max_result = query(max_query)\n                        if max_result.rows[0][0]:\n                            stats['last_updated'] = max_result.rows[0][0]\n                            stats['timestamp_column'] = col\n                            break\n                except:\n                    continue\n            \n            # Data freshness (days since last update)\n            if stats['last_updated']:\n                last_update = stats['last_updated']\n                if isinstance(last_update, str):\n                    last_update = datetime.fromisoformat(last_update.replace('Z', '+00:00'))\n                \n                days_old = (datetime.now() - last_update.replace(tzinfo=None)).days\n                stats['days_since_update'] = days_old\n                stats['is_stale'] = days_old > 7  # Consider stale if more than 7 days old\n            else:\n                stats['days_since_update'] = None\n                stats['is_stale'] = True\n            \n            return stats\n            \n        except Exception as e:\n            logger.error(f\"Error getting table stats for {table_name}: {str(e)}\")\n            return {\n                'record_count': 0,\n                'last_updated': None,\n                'days_since_update': None,\n                'is_stale': True,\n                'error': str(e)\n            }\n    \n    def validate_loader_dependencies(self, loader_name: str) -> Dict:\n        \"\"\"\n        Validate loader dependencies (database connection, external APIs, etc.)\n        \n        Args:\n            loader_name: Name of the loader\n            \n        Returns:\n            Dictionary with dependency validation results\n        \"\"\"\n        dependencies = {\n            'database_connection': False,\n            'external_apis': [],\n            'environment_variables': [],\n            'python_packages': []\n        }\n        \n        try:\n            # Test database connection\n            test_query = \"SELECT 1\"\n            query(test_query)\n            dependencies['database_connection'] = True\n            \n            # Check for common environment variables\n            env_vars = ['FRED_API_KEY', 'DB_SECRET_ARN', 'WEBAPP_AWS_REGION']\n            for env_var in env_vars:\n                if os.getenv(env_var):\n                    dependencies['environment_variables'].append(env_var)\n            \n            # Check for common Python packages\n            required_packages = ['yfinance', 'pandas', 'numpy', 'psycopg2', 'boto3']\n            for package in required_packages:\n                try:\n                    importlib.import_module(package)\n                    dependencies['python_packages'].append(package)\n                except ImportError:\n                    pass\n            \n            return dependencies\n            \n        except Exception as e:\n            logger.error(f\"Error validating dependencies for {loader_name}: {str(e)}\")\n            dependencies['error'] = str(e)\n            return dependencies\n    \n    def run_sample_validation(self, loader_name: str, table_name: str) -> Dict:\n        \"\"\"\n        Run validation on sample data from the table\n        \n        Args:\n            loader_name: Name of the loader\n            table_name: Name of the table\n            \n        Returns:\n            Validation results\n        \"\"\"\n        try:\n            # Get sample data\n            sample_query = f\"SELECT * FROM {table_name} LIMIT 100\"\n            sample_result = query(sample_query)\n            \n            if not sample_result.rows:\n                return {\n                    'validation_status': 'no_data',\n                    'message': 'No data found in table for validation'\n                }\n            \n            # Convert to DataFrame for validation\n            columns = [desc[0] for desc in sample_result.description]\n            sample_df = pd.DataFrame(sample_result.rows, columns=columns)\n            \n            # Run appropriate validation based on table type\n            if 'price' in table_name:\n                return self._validate_price_data(sample_df, loader_name)\n            elif 'technical' in table_name:\n                return self._validate_technical_data(sample_df, loader_name)\n            elif 'company' in table_name or 'profile' in table_name:\n                return self._validate_company_data(sample_df, loader_name)\n            elif table_name == 'stock_symbols':\n                return self._validate_symbols_data(sample_df, loader_name)\n            else:\n                return self._validate_generic_data(sample_df, loader_name)\n            \n        except Exception as e:\n            logger.error(f\"Error in sample validation for {loader_name}: {str(e)}\")\n            return {\n                'validation_status': 'error',\n                'error': str(e)\n            }\n    \n    def _validate_price_data(self, data: pd.DataFrame, loader_name: str) -> Dict:\n        \"\"\"Validate price data\"\"\"\n        issues = []\n        \n        # Check required columns\n        price_columns = ['open', 'high', 'low', 'close', 'volume']\n        missing_cols = [col for col in price_columns if col not in data.columns.str.lower()]\n        if missing_cols:\n            issues.append(f\"Missing price columns: {missing_cols}\")\n        \n        # Check for negative prices\n        numeric_cols = data.select_dtypes(include=[np.number]).columns\n        negative_prices = (data[numeric_cols] < 0).any()\n        if negative_prices.any():\n            issues.append(\"Found negative prices\")\n        \n        # Check OHLC relationships\n        if all(col in data.columns.str.lower() for col in ['open', 'high', 'low', 'close']):\n            ohlc_cols = ['open', 'high', 'low', 'close']\n            # Map to actual column names\n            actual_cols = []\n            for col in ohlc_cols:\n                matches = [c for c in data.columns if c.lower() == col]\n                if matches:\n                    actual_cols.append(matches[0])\n            \n            if len(actual_cols) == 4:\n                o, h, l, c = actual_cols\n                invalid_ohlc = ~((data[h] >= data[l]) & \n                               (data[h] >= data[o]) & \n                               (data[h] >= data[c]) & \n                               (data[l] <= data[o]) & \n                               (data[l] <= data[c]))\n                \n                if invalid_ohlc.any():\n                    issues.append(f\"Invalid OHLC relationships in {invalid_ohlc.sum()} rows\")\n        \n        return {\n            'validation_status': 'pass' if not issues else 'warning',\n            'issues': issues,\n            'row_count': len(data),\n            'columns': list(data.columns)\n        }\n    \n    def _validate_technical_data(self, data: pd.DataFrame, loader_name: str) -> Dict:\n        \"\"\"Validate technical indicators data\"\"\"\n        issues = []\n        \n        # Check for reasonable ranges in technical indicators\n        for col in data.columns:\n            if 'rsi' in col.lower():\n                out_of_range = (data[col] < 0) | (data[col] > 100)\n                if out_of_range.any():\n                    issues.append(f\"RSI values out of range (0-100) in column {col}\")\n            \n            elif 'sma' in col.lower() or 'ema' in col.lower():\n                negative_ma = data[col] < 0\n                if negative_ma.any():\n                    issues.append(f\"Negative moving average values in column {col}\")\n        \n        return {\n            'validation_status': 'pass' if not issues else 'warning',\n            'issues': issues,\n            'row_count': len(data),\n            'columns': list(data.columns)\n        }\n    \n    def _validate_company_data(self, data: pd.DataFrame, loader_name: str) -> Dict:\n        \"\"\"Validate company/financial data\"\"\"\n        issues = []\n        \n        # Check for required fields\n        required_fields = ['symbol']\n        missing_fields = [field for field in required_fields if field not in data.columns.str.lower()]\n        if missing_fields:\n            issues.append(f\"Missing required fields: {missing_fields}\")\n        \n        # Check for reasonable financial ratios\n        for col in data.columns:\n            if 'pe' in col.lower() and 'ratio' in col.lower():\n                extreme_pe = (data[col] < 0) | (data[col] > 1000)\n                if extreme_pe.any():\n                    issues.append(f\"Extreme P/E ratios in column {col}\")\n        \n        return {\n            'validation_status': 'pass' if not issues else 'warning',\n            'issues': issues,\n            'row_count': len(data),\n            'columns': list(data.columns)\n        }\n    \n    def _validate_symbols_data(self, data: pd.DataFrame, loader_name: str) -> Dict:\n        \"\"\"Validate stock symbols data\"\"\"\n        issues = []\n        \n        # Check required columns\n        required_cols = ['symbol']\n        missing_cols = [col for col in required_cols if col not in data.columns.str.lower()]\n        if missing_cols:\n            issues.append(f\"Missing required columns: {missing_cols}\")\n        \n        # Check for duplicate symbols\n        symbol_col = None\n        for col in data.columns:\n            if col.lower() == 'symbol':\n                symbol_col = col\n                break\n        \n        if symbol_col and data[symbol_col].duplicated().any():\n            issues.append(\"Duplicate symbols found\")\n        \n        return {\n            'validation_status': 'pass' if not issues else 'warning',\n            'issues': issues,\n            'row_count': len(data),\n            'columns': list(data.columns)\n        }\n    \n    def _validate_generic_data(self, data: pd.DataFrame, loader_name: str) -> Dict:\n        \"\"\"Generic data validation\"\"\"\n        issues = []\n        \n        # Check for completely empty rows\n        empty_rows = data.isnull().all(axis=1).sum()\n        if empty_rows > 0:\n            issues.append(f\"Found {empty_rows} completely empty rows\")\n        \n        # Check for high percentage of null values\n        null_percentages = data.isnull().mean()\n        high_null_cols = null_percentages[null_percentages > 0.5].index.tolist()\n        if high_null_cols:\n            issues.append(f\"High null percentage in columns: {high_null_cols}\")\n        \n        return {\n            'validation_status': 'pass' if not issues else 'warning',\n            'issues': issues,\n            'row_count': len(data),\n            'columns': list(data.columns)\n        }\n    \n    def validate_single_loader(self, loader_name: str) -> Dict:\n        \"\"\"\n        Validate a single data loader\n        \n        Args:\n            loader_name: Name of the loader to validate\n            \n        Returns:\n            Comprehensive validation results\n        \"\"\"\n        if loader_name not in self.data_loaders:\n            return {\n                'status': 'error',\n                'message': f\"Unknown loader: {loader_name}\"\n            }\n        \n        loader_config = self.data_loaders[loader_name]\n        results = {\n            'loader_name': loader_name,\n            'description': loader_config['description'],\n            'critical': loader_config['critical'],\n            'table_name': loader_config['table'],\n            'validation_timestamp': datetime.now().isoformat()\n        }\n        \n        logger.info(f\"Validating loader: {loader_name}\")\n        \n        # 1. Check if file exists\n        results['file_exists'] = self.check_file_exists(loader_name, loader_config)\n        \n        # 2. Check if target table exists\n        results['table_exists'] = self.check_table_exists(loader_config['table'])\n        \n        # 3. Get table statistics\n        if results['table_exists']:\n            results['table_stats'] = self.get_table_stats(loader_config['table'])\n        else:\n            results['table_stats'] = {'record_count': 0, 'error': 'Table does not exist'}\n        \n        # 4. Validate dependencies\n        results['dependencies'] = self.validate_loader_dependencies(loader_name)\n        \n        # 5. Sample data validation\n        if results['table_exists'] and results['table_stats']['record_count'] > 0:\n            results['sample_validation'] = self.run_sample_validation(loader_name, loader_config['table'])\n        else:\n            results['sample_validation'] = {\n                'validation_status': 'no_data',\n                'message': 'No data available for validation'\n            }\n        \n        # 6. Overall assessment\n        results['overall_status'] = self._assess_overall_status(results)\n        \n        return results\n    \n    def _assess_overall_status(self, results: Dict) -> str:\n        \"\"\"\n        Assess the overall status of a loader\n        \n        Args:\n            results: Validation results\n            \n        Returns:\n            Overall status (healthy, warning, error)\n        \"\"\"\n        # Critical issues\n        if not results['file_exists']:\n            return 'error'\n        \n        if not results['table_exists']:\n            return 'error'\n        \n        if not results['dependencies']['database_connection']:\n            return 'error'\n        \n        # Warning conditions\n        table_stats = results['table_stats']\n        if table_stats['record_count'] == 0:\n            return 'warning'\n        \n        if table_stats.get('is_stale', False):\n            return 'warning'\n        \n        sample_validation = results['sample_validation']\n        if sample_validation['validation_status'] == 'warning':\n            return 'warning'\n        \n        # If critical loader has issues, it's more serious\n        if results['critical'] and (table_stats.get('days_since_update', 0) > 3):\n            return 'warning'\n        \n        return 'healthy'\n    \n    def validate_all_loaders(self) -> Dict:\n        \"\"\"\n        Validate all data loaders\n        \n        Returns:\n            Complete validation report\n        \"\"\"\n        logger.info(\"Starting validation of all data loaders\")\n        \n        report = {\n            'validation_timestamp': datetime.now().isoformat(),\n            'total_loaders': len(self.data_loaders),\n            'results': {},\n            'summary': {\n                'healthy': 0,\n                'warning': 0,\n                'error': 0,\n                'critical_issues': []\n            }\n        }\n        \n        for loader_name in self.data_loaders.keys():\n            try:\n                loader_results = self.validate_single_loader(loader_name)\n                report['results'][loader_name] = loader_results\n                \n                # Update summary\n                status = loader_results['overall_status']\n                report['summary'][status] += 1\n                \n                # Track critical issues\n                if loader_results['critical'] and status in ['warning', 'error']:\n                    report['summary']['critical_issues'].append({\n                        'loader': loader_name,\n                        'status': status,\n                        'issue': self._get_primary_issue(loader_results)\n                    })\n                \n            except Exception as e:\n                logger.error(f\"Error validating loader {loader_name}: {str(e)}\")\n                report['results'][loader_name] = {\n                    'overall_status': 'error',\n                    'error': str(e),\n                    'validation_timestamp': datetime.now().isoformat()\n                }\n                report['summary']['error'] += 1\n        \n        # Generate recommendations\n        report['recommendations'] = self._generate_recommendations(report)\n        \n        return report\n    \n    def _get_primary_issue(self, results: Dict) -> str:\n        \"\"\"Get the primary issue for a loader\"\"\"\n        if not results['file_exists']:\n            return 'File missing'\n        if not results['table_exists']:\n            return 'Table missing'\n        if results['table_stats']['record_count'] == 0:\n            return 'No data'\n        if results['table_stats'].get('is_stale', False):\n            return f\"Stale data ({results['table_stats'].get('days_since_update', 0)} days old)\"\n        return 'Data quality issues'\n    \n    def _generate_recommendations(self, report: Dict) -> List[str]:\n        \"\"\"Generate actionable recommendations based on validation results\"\"\"\n        recommendations = []\n        \n        summary = report['summary']\n        \n        if summary['critical_issues']:\n            recommendations.append(f\"🔥 CRITICAL: {len(summary['critical_issues'])} critical data loaders have issues\")\n        \n        if summary['error'] > 0:\n            recommendations.append(f\"❌ {summary['error']} loaders have errors - immediate attention required\")\n        \n        if summary['warning'] > 0:\n            recommendations.append(f\"⚠️ {summary['warning']} loaders have warnings - should be addressed soon\")\n        \n        # Specific recommendations\n        stale_loaders = []\n        empty_loaders = []\n        \n        for loader_name, results in report['results'].items():\n            if results['overall_status'] != 'error':\n                table_stats = results.get('table_stats', {})\n                \n                if table_stats.get('record_count', 0) == 0:\n                    empty_loaders.append(loader_name)\n                elif table_stats.get('is_stale', False):\n                    stale_loaders.append(loader_name)\n        \n        if empty_loaders:\n            recommendations.append(f\"📊 Empty tables need data loading: {', '.join(empty_loaders)}\")\n        \n        if stale_loaders:\n            recommendations.append(f\"⏰ Stale data needs refresh: {', '.join(stale_loaders)}\")\n        \n        if summary['healthy'] == len(report['results']):\n            recommendations.append(\"✅ All data loaders are healthy!\")\n        \n        return recommendations\n    \n    def save_validation_report(self, report: Dict, filename: str = None) -> str:\n        \"\"\"\n        Save validation report to file\n        \n        Args:\n            report: Validation report\n            filename: Output filename (optional)\n            \n        Returns:\n            Path to saved file\n        \"\"\"\n        if not filename:\n            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n            filename = f\"data_loader_validation_report_{timestamp}.json\"\n        \n        filepath = os.path.join(os.path.dirname(__file__), filename)\n        \n        try:\n            with open(filepath, 'w') as f:\n                json.dump(report, f, indent=2, default=str)\n            \n            logger.info(f\"Validation report saved to: {filepath}\")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f\"Error saving validation report: {str(e)}\")\n            return None\n\ndef print_validation_summary(report: Dict):\n    \"\"\"Print a formatted summary of the validation results\"\"\"\n    \n    print(\"\\n\" +",
      "context": "    190:                 SELECT COUNT(*) \n    191:                 FROM information_schema.tables \n>>> 192:                 WHERE table_name = %s AND table_schema = 'public'\n    193:             \"\"\"\n    194:             "
    }
  ]
}