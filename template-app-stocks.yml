AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Application stack – Public Postgres RDS (IAM‐auth only), two Lambdas
  (symbols-loader & econ-data) running outside any VPC, and ECS cluster.

Parameters:
  CodeKey:
    Type: String
    Description: S3 key of the symbols-loader Lambda ZIP
  EconomicCodeKey:
    Type: String
    Description: S3 key of the economic-data loader Lambda ZIP
  FREDApiKey:
    Type: String
    NoEcho: true
    Description: FRED API key for economic-data loader
  RDSUsername:
    Type: String
    Description: Master username for IAM DB Authentication
  RDSPassword:
    Type: String
    NoEcho: true
    Description: Initial DB password (only used at launch, then never again)

Resources:

  ### 1) RDS in Public Subnets, IAM Auth Only ###
  StocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnets for RDS
      SubnetIds:
        - !ImportValue StocksCore-PublicSubnet1Id
        - !ImportValue StocksCore-PublicSubnet2Id

  StocksDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres from internet
      VpcId: !ImportValue StocksCore-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  StocksDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: stocks
      DBName: stocks
      Engine: postgres
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      PubliclyAccessible: true
      EnableIAMDatabaseAuthentication: true
      VPCSecurityGroups: [!Ref StocksDBSecurityGroup]
      DBSubnetGroupName: !Ref StocksDBSubnetGroup
      DeletionProtection: false

  ### 2) symbols-loader Lambda (outside VPC) ###
  LoadStockSymbolsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: loadstocksymbols
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref CodeKey
      Timeout: 300
      Environment:
        Variables:
          DB_HOST: !GetAtt StocksDBInstance.Endpoint.Address
          DB_PORT: !GetAtt StocksDBInstance.Endpoint.Port
          DB_NAME: stocks
          DB_USER: !Ref RDSUsername
          FRED_API_KEY: !Ref FREDApiKey

  ### 3) economic-data loader Lambda (outside VPC) ###
  LoadEconomicDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: loadecondata
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref EconomicCodeKey
      Timeout: 900
      Environment:
        Variables:
          DB_HOST: !GetAtt StocksDBInstance.Endpoint.Address
          DB_PORT: !GetAtt StocksDBInstance.Endpoint.Port
          DB_NAME: stocks
          DB_USER: !Ref RDSUsername
          FRED_API_KEY: !Ref FREDApiKey

  ### 4) ECS Cluster ###
  StocksEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: stocks-cluster

  ### 5) ECS Task Execution Role ###
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowRDSConnectViaIAM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: rds-db:connect
                Resource: "*"

Outputs:
  DBEndpoint:
    Description: RDS endpoint address
    Value: !GetAtt StocksDBInstance.Endpoint.Address
    Export: { Name: StocksApp-DBEndpoint }
  DBPort:
    Description: RDS endpoint port
    Value: !GetAtt StocksDBInstance.Endpoint.Port
    Export: { Name: StocksApp-DBPort }
  DBUsername:
    Description: DB username (for IAM auth)
    Value: !Ref RDSUsername
    Export: { Name: StocksApp-DBUsername }
  DBName:
    Description: Database name
    Value: stocks
    Export: { Name: StocksApp-DBName }
  ClusterArn:
    Description: ECS cluster ARN
    Value: !GetAtt StocksEcsCluster.Arn
    Export: { Name: StocksApp-ClusterArn }
  EcsTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export: { Name: StocksApp-EcsTaskExecutionRoleArn }
