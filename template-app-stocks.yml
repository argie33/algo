AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Application stack – RDS, Secrets (DB creds + FRED key), two Lambdas (symbols‑loader & economic-data loader), and ECS cluster.

Parameters:
  CodeKey:
    Type: String
    Description: S3 key of the symbols‑loader Lambda ZIP
  EconomicCodeKey:
    Type: String
    Description: S3 key of the economic‑data loader Lambda ZIP
  RDSUsername:
    Type: String
    Description: RDS master username
  RDSPassword:
    Type: String
    NoEcho: true
    Description: RDS master password
  FREDApiKey:
    Type: String
    NoEcho: true
    Description: FRED API key for economic‑data loader
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: VPC CIDR for RDS security group ingress

Resources:

  ### RDS Subnet Group ###
  StocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS (private only)
      SubnetIds:
        - !ImportValue StocksCore-PrivateSubnet1Id
        - !ImportValue StocksCore-PrivateSubnet2Id

  ### RDS Security Group ###
  StocksDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres access within VPC
      VpcId: !ImportValue StocksCore-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCidr

  ### RDS Instance ###
  StocksDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - StocksDBSubnetGroup
      - StocksDBSecurityGroup
    Properties:
      DBInstanceIdentifier: stocks
      DBName: stocks
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      VPCSecurityGroups:
        - !Ref StocksDBSecurityGroup
      DBSubnetGroupName: !Ref StocksDBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false

  ### Secrets Manager: combined DB creds + FRED key ###
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    DependsOn: StocksDBInstance
    Properties:
      Name: stocks-app-secrets
      Description: JSON with DB credentials and FRED API key
      SecretString:
        Fn::Join:
          - ""
          - - '{"username":"'
            - !Ref RDSUsername
            - '","password":"'
            - !Ref RDSPassword
            - '","host":"'
            - !GetAtt StocksDBInstance.Endpoint.Address
            - '","port":"'
            - !GetAtt StocksDBInstance.Endpoint.Port
            - '","dbname":"stocks'
            - '","fred_api_key":"'
            - !Ref FREDApiKey
            - '"}'

  ### symbols‑loader Lambda ###
  LoadStockSymbolsFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - StocksDBInstance
      - AppSecrets
    Properties:
      FunctionName: loadstocksymbols
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref CodeKey
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref AppSecrets

  ### economic‑data loader Lambda ###
  LoadEconomicDataFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - StocksDBInstance
      - AppSecrets
    Properties:
      FunctionName: loadecondata
      Runtime: python3.9
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref EconomicCodeKey
      Timeout: 300
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref AppSecrets
          FRED_API_KEY:  !Ref FREDApiKey

  ### ECS Cluster ###
  StocksEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: stocks-cluster

  ### ECS Task Execution Role ###
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowSecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref AppSecrets

Outputs:
  DBEndpoint:
    Description: RDS endpoint address
    Value: !GetAtt StocksDBInstance.Endpoint.Address

  DBPort:
    Description: RDS endpoint port
    Value: !GetAtt StocksDBInstance.Endpoint.Port

  SecretArn:
    Description: ARN of the combined secrets
    Value: !Ref AppSecrets
    Export:
      Name: StocksDBLambdaStack-SecretArn

  ClusterArn:
    Description: ARN of the ECS cluster
    Value: !GetAtt StocksEcsCluster.Arn
    Export:
      Name: StocksDBLambdaStack-ClusterArn

  EcsTaskExecutionRoleArn:
    Description: ARN of the ECS Task Execution Role
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: StocksDBLambdaStack-EcsTaskExecutionRoleArn
