AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Application stack – RDS (public), Secrets (DB creds),
  ECS cluster, and ECS task execution role.

Parameters:
  RDSUsername:
    Type: String
    Description: RDS master username
  RDSPassword:
    Type: String
    NoEcho: true
    Description: RDS master password
  FREDApiKey:
    Type: String
    NoEcho: true
    Description: FRED API key for econ-data loader

Resources:

  ### 1) RDS Subnet Group (public) ###
  StocksDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !ImportValue StocksCore-PublicSubnet1Id
        - !ImportValue StocksCore-PublicSubnet2Id

  ### 2) RDS Security Group ###
  StocksDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres access
      VpcId: !ImportValue StocksCore-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "0.0.0.0/0"

  ### 3) RDS Instance ###
  StocksDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    DependsOn:
      - StocksDBSubnetGroup
      - StocksDBSecurityGroup
    Properties:
      DBInstanceIdentifier: stocks
      DBName: stocks
      Engine: postgres
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      VPCSecurityGroups:
        - !Ref StocksDBSecurityGroup
      DBSubnetGroupName: !Ref StocksDBSubnetGroup
      PubliclyAccessible: true
      MultiAZ: false
      DeletionProtection: false

  ### 4) Secrets Manager: DB creds ###
  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    DependsOn: StocksDBInstance
    Properties:
      Name: stocks-db-secrets
      Description: JSON with username, password, host, port, dbname
      SecretString:
        Fn::Join:
          - ""
          - - '{"username":"'
            - !Ref RDSUsername
            - '","password":"'
            - !Ref RDSPassword
            - '","host":"'
            - !GetAtt StocksDBInstance.Endpoint.Address
            - '","port":"'
            - !GetAtt StocksDBInstance.Endpoint.Port
            - '","dbname":"stocks"}'

  ### 5) ECS Cluster ###
  StocksEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: stocks-cluster

  ### 6) ECS Task Execution Role ###
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowGetSecretValue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref DBCredentialsSecret

  ########################################
  # 🔐 IBKR Gateway Host (Headless EC2) #
  ########################################

  # 1) Security Group for IB Gateway API
  IBGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow IB Gateway API (4002) from ECS tasks"
      VpcId: !ImportValue StocksCore-VpcId
      SecurityGroupIngress:        # only allow from your ECS cluster SG
        - IpProtocol: tcp
          FromPort: 4002
          ToPort: 4002
          SourceSecurityGroupId: !ImportValue StocksApp-ClusterSecurityGroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # 2) EC2 Instance Role to read IBKR secrets & talk to SSM
  IBGatewayInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AllowReadIBKRSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Ref IBKRUsernameSecret
                  - !Ref IBKRPasswordSecret

  IBGatewayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IBGatewayInstanceRole

  # 3) Headless EC2 with Xvfb + IB Gateway
  IBGatewayEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: ami-0c2b8ca1dad447f8a    # Amazon Linux 2 – replace if needed
      SubnetId: !ImportValue StocksCore-PrivateSubnet1Id
      SecurityGroupIds:
        - !Ref IBGatewaySecurityGroup
      IamInstanceProfile: !Ref IBGatewayInstanceProfile
      AssociatePublicIpAddress: false
      Tags:
        - Key: Name
          Value: IBGateway-Headless
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y Xvfb java-17-amazon-corretto unzip curl jq

          # pull IBKR creds from SM
          IB_USER=$(aws secretsmanager get-secret-value \
                      --secret-id ${IBKRUsernameSecret} \
                      --query SecretString --output text)
          IB_PASS=$(aws secretsmanager get-secret-value \
                      --secret-id ${IBKRPasswordSecret} \
                      --query SecretString --output text)

          mkdir -p /home/ec2-user/IBGateway
          chown ec2-user:ec2-user /home/ec2-user/IBGateway
          cd /home/ec2-user/IBGateway

          # download and unzip Gateway
          curl -O https://download2.interactivebrokers.com/installer/ibgateway-setup.zip
          unzip ibgateway-setup.zip

          # headless config
          cat > jts/ibgateway_config.xml <<EOF
          <configuration>
            <parameter name="ENABLE_API"   value="true"/>
            <parameter name="API_PORT"     value="4002"/>
            <parameter name="TRUSTED_IPS"  value="0.0.0.0/0"/>
            <parameter name="USER_NAME"    value="${IB_USER}"/>
            <parameter name="PASSWORD"     value="${IB_PASS}"/>
          </configuration>
          EOF

          # start Xvfb & Gateway
          sudo -u ec2-user bash -lc "
            nohup Xvfb :1 -screen 0 1024x768x24 &> /var/log/xvfb.log &
            export DISPLAY=:1
            nohup java -jar jts/ibgateway.jar \
              -c jts/ibgateway_config.xml &> /var/log/ibgateway.log &
          "
          
Outputs:
  DBEndpoint:
    Description: RDS endpoint address
    Value: !GetAtt StocksDBInstance.Endpoint.Address
    Export:
      Name: StocksApp-DBEndpoint

  DBPort:
    Description: RDS endpoint port
    Value: !GetAtt StocksDBInstance.Endpoint.Port
    Export:
      Name: StocksApp-DBPort

  DBName:
    Description: Database name
    Value: stocks
    Export:
      Name: StocksApp-DBName

  DBUsername:
    Description: Master username
    Value: !Ref RDSUsername
    Export:
      Name: StocksApp-DBUsername

  SecretArn:
    Description: ARN of DB credentials secret
    Value: !Ref DBCredentialsSecret
    Export:
      Name: StocksApp-SecretArn

  ClusterArn:
    Description: ARN of ECS cluster
    Value: !GetAtt StocksEcsCluster.Arn
    Export:
      Name: StocksApp-ClusterArn

  EcsTaskExecutionRoleArn:
    Description: ARN of ECS Task Execution Role
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: StocksApp-EcsTaskExecutionRoleArn 
