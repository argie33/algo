{"version":3,"names":["cov_1zqi2vk5ov","actualCoverage","TimeoutHelper","constructor","f","s","defaultTimeouts","database","alpaca","news","sentiment","external","upload","websocket","circuitBreakers","Map","withTimeout","promise","options","b","timeout","service","operation","useCircuitBreaker","retries","retryDelay","serviceKey","isCircuitOpen","Error","lastError","attempt","result","Promise","race","_","reject","setTimeout","recordSuccess","error","recordFailure","console","log","delay","withTimeoutAll","promises","failFast","timeoutPromise","all","allSettled","httpRequest","url","method","headers","body","validateResponse","controller","AbortController","timeoutId","abort","requestOptions","signal","JSON","stringify","response","fetch","clearTimeout","ok","status","statusText","name","databaseQuery","queryFn","alpacaApiCall","apiCall","newsApiCall","breaker","get","failures","lastFailureTime","state","totalSuccesses","lastSuccess","Date","now","recordEvent","threshold","halfOpenMaxCalls","totalFailures","history","set","warn","type","push","timestamp","length","slice","timeSinceLastFailure","halfOpenCalls","getCircuitBreakerStatus","entries","uptime","getCircuitBreakerMetrics","metrics","totalRequests","successRate","failureRate","Math","round","timeSinceLastSuccess","recentActivity","getRecentActivity","isHealthy","isRecovering","isFailed","predictedRecovery","getPredictedRecovery","riskLevel","getRiskLevel","requests","successes","period","fiveMinutesAgo","recentEvents","filter","event","e","timeUntilHalfOpen","ceil","ms","resolve","batchProcess","items","processor","concurrency","continueOnError","results","errors","i","batch","batchPromises","map","item","index","success","errorResult","batchResults","forEach","module","exports"],"sources":["timeoutHelper.js"],"sourcesContent":["/**\n * Comprehensive timeout and circuit breaker utility for external API calls\n * Provides consistent timeout handling across all external services\n */\n\nclass TimeoutHelper {\n  constructor() {\n    // Default timeout configurations by service type\n    this.defaultTimeouts = {\n      database: 5000,        // Database queries\n      alpaca: 15000,        // Alpaca API calls\n      news: 10000,          // News API calls\n      sentiment: 8000,      // Sentiment analysis APIs\n      external: 12000,      // General external APIs\n      upload: 30000,        // File uploads\n      websocket: 5000       // WebSocket connections\n    };\n    \n    // Circuit breaker state\n    this.circuitBreakers = new Map();\n  }\n\n  /**\n   * Execute a promise with timeout and optional circuit breaker\n   */\n  async withTimeout(promise, options = {}) {\n    const {\n      timeout = this.defaultTimeouts.external,\n      service = 'unknown',\n      operation = 'request',\n      useCircuitBreaker = false,\n      retries = 0,\n      retryDelay = 1000\n    } = options;\n\n    const serviceKey = `${service}-${operation}`;\n    \n    // Check circuit breaker\n    if (useCircuitBreaker && this.isCircuitOpen(serviceKey)) {\n      throw new Error(`Circuit breaker open for ${serviceKey}`);\n    }\n\n    let lastError;\n    \n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const result = await Promise.race([\n          promise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(`Timeout: ${service} ${operation} exceeded ${timeout}ms`)), timeout)\n          )\n        ]);\n        \n        // Success - reset circuit breaker\n        if (useCircuitBreaker) {\n          this.recordSuccess(serviceKey);\n        }\n        \n        return result;\n      } catch (error) {\n        lastError = error;\n        \n        // Record failure for circuit breaker\n        if (useCircuitBreaker) {\n          this.recordFailure(serviceKey);\n        }\n        \n        // If this isn't the last attempt, wait before retrying\n        if (attempt < retries) {\n          console.log(`⚠️ ${service} ${operation} failed (attempt ${attempt + 1}/${retries + 1}), retrying in ${retryDelay}ms...`);\n          await this.delay(retryDelay * (attempt + 1)); // Exponential backoff\n        }\n      }\n    }\n    \n    throw lastError;\n  }\n\n  /**\n   * Execute multiple promises with timeout and fail-fast behavior\n   */\n  async withTimeoutAll(promises, options = {}) {\n    const {\n      timeout = this.defaultTimeouts.external,\n      service = 'unknown',\n      operation = 'batch',\n      failFast = false\n    } = options;\n\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error(`Timeout: ${service} ${operation} batch exceeded ${timeout}ms`)), timeout)\n    );\n\n    if (failFast) {\n      // All must succeed or all fail\n      return Promise.race([\n        Promise.all(promises),\n        timeoutPromise\n      ]);\n    } else {\n      // Allow partial success\n      return Promise.race([\n        Promise.allSettled(promises),\n        timeoutPromise\n      ]);\n    }\n  }\n\n  /**\n   * HTTP request with comprehensive timeout and retry logic\n   */\n  async httpRequest(url, options = {}) {\n    const {\n      method = 'GET',\n      headers = {},\n      body = null,\n      timeout = this.defaultTimeouts.external,\n      retries = 2,\n      validateResponse = true,\n      service = 'http'\n    } = options;\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const requestOptions = {\n        method,\n        headers: {\n          'User-Agent': 'Financial-Dashboard-API/1.0',\n          'Accept': 'application/json',\n          ...headers\n        },\n        signal: controller.signal\n      };\n\n      if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n        requestOptions.body = typeof body === 'string' ? body : JSON.stringify(body);\n        if (!headers['Content-Type']) {\n          requestOptions.headers['Content-Type'] = 'application/json';\n        }\n      }\n\n      const response = await this.withTimeout(\n        fetch(url, requestOptions),\n        {\n          timeout,\n          service,\n          operation: 'http-request',\n          retries,\n          useCircuitBreaker: true\n        }\n      );\n\n      clearTimeout(timeoutId);\n\n      if (validateResponse && !response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error.name === 'AbortError') {\n        throw new Error(`HTTP request timeout: ${url} exceeded ${timeout}ms`);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Database query with timeout\n   */\n  async databaseQuery(queryFn, options = {}) {\n    const {\n      timeout = this.defaultTimeouts.database,\n      operation = 'query',\n      retries = 1\n    } = options;\n\n    return this.withTimeout(queryFn(), {\n      timeout,\n      service: 'database',\n      operation,\n      retries,\n      useCircuitBreaker: true\n    });\n  }\n\n  /**\n   * Alpaca API call with timeout and circuit breaker\n   */\n  async alpacaApiCall(apiCall, options = {}) {\n    const {\n      timeout = this.defaultTimeouts.alpaca,\n      operation = 'api-call',\n      retries = 2\n    } = options;\n\n    return this.withTimeout(apiCall(), {\n      timeout,\n      service: 'alpaca',\n      operation,\n      retries,\n      retryDelay: 2000,\n      useCircuitBreaker: true\n    });\n  }\n\n  /**\n   * News API call with timeout\n   */\n  async newsApiCall(apiCall, options = {}) {\n    const {\n      timeout = this.defaultTimeouts.news,\n      operation = 'news-fetch',\n      retries = 1\n    } = options;\n\n    return this.withTimeout(apiCall(), {\n      timeout,\n      service: 'news',\n      operation,\n      retries,\n      useCircuitBreaker: false // News APIs are less critical\n    });\n  }\n\n  /**\n   * Circuit breaker implementation\n   */\n  recordSuccess(serviceKey) {\n    const breaker = this.circuitBreakers.get(serviceKey);\n    if (breaker) {\n      breaker.failures = 0;\n      breaker.lastFailureTime = 0;\n      breaker.state = 'closed';\n      breaker.totalSuccesses = (breaker.totalSuccesses || 0) + 1;\n      breaker.lastSuccess = Date.now();\n      \n      // Record success in history\n      this.recordEvent(serviceKey, 'success');\n    }\n  }\n\n  recordFailure(serviceKey) {\n    let breaker = this.circuitBreakers.get(serviceKey);\n    if (!breaker) {\n      breaker = {\n        failures: 0,\n        lastFailureTime: 0,\n        state: 'closed',\n        threshold: 15,        // PRODUCTION FIX: Increased from 5 to 15 failures\n        timeout: 15000,       // PRODUCTION FIX: Reduced from 60s to 15s recovery\n        halfOpenMaxCalls: 8,  // PRODUCTION FIX: Increased from 3 to 8 recovery attempts\n        totalSuccesses: 0,\n        totalFailures: 0,\n        history: []\n      };\n      this.circuitBreakers.set(serviceKey, breaker);\n    }\n\n    breaker.failures++;\n    breaker.lastFailureTime = Date.now();\n    breaker.totalFailures = (breaker.totalFailures || 0) + 1;\n\n    // Record failure in history\n    this.recordEvent(serviceKey, 'failure');\n\n    if (breaker.failures >= breaker.threshold) {\n      breaker.state = 'open';\n      console.warn(`🚨 Circuit breaker opened for ${serviceKey} (${breaker.failures} failures)`);\n    }\n  }\n  \n  /**\n   * Record an event in the circuit breaker history\n   */\n  recordEvent(serviceKey, type) {\n    const breaker = this.circuitBreakers.get(serviceKey);\n    if (breaker) {\n      if (!breaker.history) {\n        breaker.history = [];\n      }\n      \n      breaker.history.push({\n        timestamp: Date.now(),\n        type: type // 'success' or 'failure'\n      });\n      \n      // Keep only last 100 events to prevent memory issues\n      if (breaker.history.length > 100) {\n        breaker.history = breaker.history.slice(-100);\n      }\n    }\n  }\n\n  isCircuitOpen(serviceKey) {\n    const breaker = this.circuitBreakers.get(serviceKey);\n    if (!breaker || breaker.state === 'closed') {\n      return false;\n    }\n\n    if (breaker.state === 'open') {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailureTime;\n      if (timeSinceLastFailure > breaker.timeout) {\n        breaker.state = 'half-open';\n        breaker.halfOpenCalls = 0;\n        console.log(`🔄 Circuit breaker half-open for ${serviceKey}`);\n        return false;\n      }\n      return true;\n    }\n\n    if (breaker.state === 'half-open') {\n      if (breaker.halfOpenCalls >= breaker.halfOpenMaxCalls) {\n        breaker.state = 'open';\n        return true;\n      }\n      breaker.halfOpenCalls++;\n      return false;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get circuit breaker status for monitoring\n   */\n  getCircuitBreakerStatus() {\n    const status = {};\n    for (const [serviceKey, breaker] of this.circuitBreakers.entries()) {\n      status[serviceKey] = {\n        state: breaker.state,\n        failures: breaker.failures,\n        lastFailureTime: breaker.lastFailureTime,\n        timeSinceLastFailure: Date.now() - breaker.lastFailureTime,\n        threshold: breaker.threshold,\n        timeout: breaker.timeout,\n        halfOpenMaxCalls: breaker.halfOpenMaxCalls,\n        halfOpenCalls: breaker.halfOpenCalls || 0,\n        totalSuccesses: breaker.totalSuccesses || 0,\n        totalFailures: breaker.totalFailures || 0,\n        uptime: breaker.uptime || 0,\n        lastSuccess: breaker.lastSuccess || 0\n      };\n    }\n    return status;\n  }\n  \n  /**\n   * Get detailed circuit breaker metrics with history\n   */\n  getCircuitBreakerMetrics() {\n    const metrics = {};\n    const now = Date.now();\n    \n    for (const [serviceKey, breaker] of this.circuitBreakers.entries()) {\n      const totalRequests = (breaker.totalSuccesses || 0) + (breaker.totalFailures || 0);\n      const successRate = totalRequests > 0 ? (breaker.totalSuccesses || 0) / totalRequests : 0;\n      const failureRate = totalRequests > 0 ? (breaker.totalFailures || 0) / totalRequests : 0;\n      \n      metrics[serviceKey] = {\n        // Current state\n        state: breaker.state,\n        failures: breaker.failures,\n        lastFailureTime: breaker.lastFailureTime,\n        timeSinceLastFailure: now - breaker.lastFailureTime,\n        \n        // Configuration\n        threshold: breaker.threshold,\n        timeout: breaker.timeout,\n        halfOpenMaxCalls: breaker.halfOpenMaxCalls,\n        \n        // Performance metrics\n        totalRequests,\n        totalSuccesses: breaker.totalSuccesses || 0,\n        totalFailures: breaker.totalFailures || 0,\n        successRate: Math.round(successRate * 100),\n        failureRate: Math.round(failureRate * 100),\n        \n        // Availability metrics\n        uptime: breaker.uptime || 0,\n        lastSuccess: breaker.lastSuccess || 0,\n        timeSinceLastSuccess: breaker.lastSuccess ? now - breaker.lastSuccess : 0,\n        \n        // Recent activity (last 5 minutes)\n        recentActivity: this.getRecentActivity(serviceKey),\n        \n        // Health indicators\n        isHealthy: breaker.state === 'closed' && breaker.failures === 0,\n        isRecovering: breaker.state === 'half-open',\n        isFailed: breaker.state === 'open',\n        \n        // Predictions\n        predictedRecovery: this.getPredictedRecovery(breaker),\n        riskLevel: this.getRiskLevel(breaker)\n      };\n    }\n    \n    return metrics;\n  }\n  \n  /**\n   * Get recent activity for a service\n   */\n  getRecentActivity(serviceKey) {\n    const breaker = this.circuitBreakers.get(serviceKey);\n    if (!breaker || !breaker.history) {\n      return {\n        requests: 0,\n        failures: 0,\n        successes: 0,\n        period: '5min'\n      };\n    }\n    \n    const fiveMinutesAgo = Date.now() - 300000; // 5 minutes\n    const recentEvents = breaker.history.filter(event => event.timestamp > fiveMinutesAgo);\n    \n    return {\n      requests: recentEvents.length,\n      failures: recentEvents.filter(e => e.type === 'failure').length,\n      successes: recentEvents.filter(e => e.type === 'success').length,\n      period: '5min'\n    };\n  }\n  \n  /**\n   * Get predicted recovery time\n   */\n  getPredictedRecovery(breaker) {\n    if (breaker.state === 'closed') {\n      return 'N/A - Service is healthy';\n    }\n    \n    if (breaker.state === 'half-open') {\n      return 'In progress - Testing recovery';\n    }\n    \n    if (breaker.state === 'open') {\n      const timeUntilHalfOpen = breaker.timeout - (Date.now() - breaker.lastFailureTime);\n      if (timeUntilHalfOpen <= 0) {\n        return 'Ready for recovery attempt';\n      }\n      return `${Math.ceil(timeUntilHalfOpen / 1000)} seconds`;\n    }\n    \n    return 'Unknown';\n  }\n  \n  /**\n   * Get risk level for a service\n   */\n  getRiskLevel(breaker) {\n    if (breaker.state === 'open') {\n      return 'HIGH';\n    }\n    \n    if (breaker.state === 'half-open') {\n      return 'MEDIUM';\n    }\n    \n    if (breaker.failures >= breaker.threshold * 0.8) {\n      return 'MEDIUM';\n    }\n    \n    if (breaker.failures >= breaker.threshold * 0.5) {\n      return 'LOW';\n    }\n    \n    return 'MINIMAL';\n  }\n\n  /**\n   * Utility delay function\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Batch process with concurrency limit and timeout\n   */\n  async batchProcess(items, processor, options = {}) {\n    const {\n      concurrency = 5,\n      timeout = this.defaultTimeouts.external,\n      service = 'batch',\n      continueOnError = true\n    } = options;\n\n    const results = [];\n    const errors = [];\n    \n    for (let i = 0; i < items.length; i += concurrency) {\n      const batch = items.slice(i, i + concurrency);\n      const batchPromises = batch.map(async (item, index) => {\n        try {\n          const result = await this.withTimeout(processor(item, i + index), {\n            timeout,\n            service,\n            operation: 'batch-item'\n          });\n          return { success: true, result, index: i + index };\n        } catch (error) {\n          const errorResult = { success: false, error, index: i + index };\n          if (!continueOnError) {\n            throw error;\n          }\n          return errorResult;\n        }\n      });\n\n      const batchResults = await Promise.all(batchPromises);\n      \n      batchResults.forEach(result => {\n        if (result.success) {\n          results.push(result);\n        } else {\n          errors.push(result);\n        }\n      });\n    }\n\n    return { results, errors };\n  }\n}\n\n// Export singleton instance\nmodule.exports = new TimeoutHelper();"],"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","ignoreList":[]}