{"version":3,"names":["cov_19uky2hu9p","actualCoverage","s","createResponse","success","data","b","error","metadata","f","response","timestamp","Date","toISOString","message","details","code","successWithPagination","pagination","successEmpty","statusCode","errorObj","badRequest","unauthorized","forbidden","notFound","resource","conflict","validationError","errors","Array","isArray","serverError","serviceUnavailable","service","rateLimitExceeded","retryAfter","databaseError","dbError","context","console","process","env","NODE_ENV","externalApiError","apiError","status","originalError","undefined","handleValidationError","validationErrors","authenticationError","authError","name","financialSuccess","dataSource","provider","portfolioSuccess","accountType","lastSync","tradingSuccess","environment","broker","responseFormatterMiddleware","req","res","next","json","result","module","exports"],"sources":["responseFormatter.js"],"sourcesContent":["/**\n * Standardized API Response Formatter\n * Ensures consistent response structure across all API endpoints\n */\n\n/**\n * Standard API response structure\n */\nconst createResponse = (success, data = null, error = null, metadata = {}) => {\n  const response = {\n    success,\n    timestamp: new Date().toISOString(),\n    ...metadata\n  };\n\n  if (success && data !== null) {\n    response.data = data;\n  }\n\n  if (!success && error) {\n    if (typeof error === 'string') {\n      response.error = error;\n    } else {\n      response.error = error.message || 'An error occurred';\n      if (error.details) response.details = error.details;\n      if (error.code) response.code = error.code;\n    }\n  }\n\n  return response;\n};\n\n/**\n * Success response formatters\n */\nconst success = (data, metadata = {}) => {\n  return createResponse(true, data, null, metadata);\n};\n\nconst successWithPagination = (data, pagination, metadata = {}) => {\n  return createResponse(true, data, null, {\n    pagination,\n    ...metadata\n  });\n};\n\nconst successEmpty = (message = 'Operation completed successfully', metadata = {}) => {\n  return createResponse(true, { message }, null, metadata);\n};\n\n/**\n * Error response formatters\n */\nconst error = (message, statusCode = 500, details = null, code = null) => {\n  const errorObj = { message };\n  if (details) errorObj.details = details;\n  if (code) errorObj.code = code;\n  \n  return {\n    response: createResponse(false, null, errorObj),\n    statusCode\n  };\n};\n\nconst badRequest = (message, details = null) => {\n  return error(message, 400, details, 'BAD_REQUEST');\n};\n\nconst unauthorized = (message = 'Authentication required', details = null) => {\n  return error(message, 401, details, 'UNAUTHORIZED');\n};\n\nconst forbidden = (message = 'Access denied', details = null) => {\n  return error(message, 403, details, 'FORBIDDEN');\n};\n\nconst notFound = (resource = 'Resource', details = null) => {\n  return error(`${resource} not found`, 404, details, 'NOT_FOUND');\n};\n\nconst conflict = (message, details = null) => {\n  return error(message, 409, details, 'CONFLICT');\n};\n\nconst validationError = (errors) => {\n  const details = Array.isArray(errors) ? errors : [errors];\n  return error('Validation failed', 400, details, 'VALIDATION_ERROR');\n};\n\nconst serverError = (message = 'Internal server error', details = null) => {\n  return error(message, 500, details, 'SERVER_ERROR');\n};\n\nconst serviceUnavailable = (service = 'Service', details = null) => {\n  return error(`${service} temporarily unavailable`, 503, details, 'SERVICE_UNAVAILABLE');\n};\n\nconst rateLimitExceeded = (retryAfter = null) => {\n  const details = retryAfter ? `Retry after ${retryAfter} seconds` : null;\n  return error('Rate limit exceeded', 429, details, 'RATE_LIMIT_EXCEEDED');\n};\n\n/**\n * Database error handler\n */\nconst databaseError = (dbError, context = '') => {\n  console.error(`Database error ${context}:`, dbError);\n  \n  // Don't expose internal database errors in production\n  if (process.env.NODE_ENV === 'production') {\n    return serverError('Database operation failed');\n  }\n  \n  return serverError('Database error', {\n    context,\n    error: dbError.message,\n    code: dbError.code\n  });\n};\n\n/**\n * External API error handler\n */\nconst externalApiError = (apiError, service = 'External service', context = '') => {\n  console.error(`${service} API error ${context}:`, apiError);\n  \n  const statusCode = apiError.response?.status || 500;\n  const message = apiError.response?.data?.message || apiError.message || `${service} error`;\n  \n  return error(message, statusCode, {\n    service,\n    context,\n    originalError: process.env.NODE_ENV === 'development' ? apiError.message : undefined\n  }, 'EXTERNAL_API_ERROR');\n};\n\n/**\n * Validation middleware error handler\n */\nconst handleValidationError = (validationErrors) => {\n  return validationError(validationErrors);\n};\n\n/**\n * Authentication error handler\n */\nconst authenticationError = (authError) => {\n  if (authError.name === 'TokenExpiredError') {\n    return unauthorized('Token expired', 'Please log in again');\n  }\n  \n  if (authError.name === 'JsonWebTokenError') {\n    return unauthorized('Invalid token', 'Authentication failed');\n  }\n  \n  if (authError.name === 'NotBeforeError') {\n    return unauthorized('Token not active', 'Token is not yet valid');\n  }\n  \n  return unauthorized(authError.message || 'Authentication failed');\n};\n\n/**\n * Financial data specific formatters\n */\nconst financialSuccess = (data, dataSource = 'database', provider = null, metadata = {}) => {\n  return success(data, {\n    dataSource,\n    provider,\n    ...metadata\n  });\n};\n\nconst portfolioSuccess = (data, accountType = null, lastSync = null, metadata = {}) => {\n  return success(data, {\n    accountType,\n    lastSync,\n    ...metadata\n  });\n};\n\nconst tradingSuccess = (data, environment = 'paper', broker = null, metadata = {}) => {\n  return success(data, {\n    environment,\n    broker,\n    ...metadata\n  });\n};\n\n/**\n * Express middleware to add response formatters to res object\n */\nconst responseFormatterMiddleware = (req, res, next) => {\n  // Add success formatters\n  res.success = (data, metadata) => {\n    return res.json(success(data, metadata));\n  };\n  \n  res.successWithPagination = (data, pagination, metadata) => {\n    return res.json(successWithPagination(data, pagination, metadata));\n  };\n  \n  res.successEmpty = (message, metadata) => {\n    return res.json(successEmpty(message, metadata));\n  };\n  \n  // Add error formatters that automatically set status and send response\n  res.error = (message, statusCode, details, code) => {\n    const result = error(message, statusCode, details, code);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.badRequest = (message, details) => {\n    const result = badRequest(message, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.unauthorized = (message, details) => {\n    const result = unauthorized(message, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.forbidden = (message, details) => {\n    const result = forbidden(message, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.notFound = (resource, details) => {\n    const result = notFound(resource, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.validationError = (errors) => {\n    const result = validationError(errors);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.serverError = (message, details) => {\n    const result = serverError(message, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.serviceUnavailable = (service, details) => {\n    const result = serviceUnavailable(service, details);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.databaseError = (dbError, context) => {\n    const result = databaseError(dbError, context);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  res.externalApiError = (apiError, service, context) => {\n    const result = externalApiError(apiError, service, context);\n    return res.status(result.statusCode).json(result.response);\n  };\n  \n  // Financial-specific formatters\n  res.financialSuccess = (data, dataSource, provider, metadata) => {\n    return res.json(financialSuccess(data, dataSource, provider, metadata));\n  };\n  \n  res.portfolioSuccess = (data, accountType, lastSync, metadata) => {\n    return res.json(portfolioSuccess(data, accountType, lastSync, metadata));\n  };\n  \n  res.tradingSuccess = (data, environment, broker, metadata) => {\n    return res.json(tradingSuccess(data, environment, broker, metadata));\n  };\n  \n  next();\n};\n\nmodule.exports = {\n  // Core formatters\n  success,\n  successWithPagination,\n  successEmpty,\n  error,\n  \n  // HTTP status formatters\n  badRequest,\n  unauthorized,\n  forbidden,\n  notFound,\n  conflict,\n  validationError,\n  serverError,\n  serviceUnavailable,\n  rateLimitExceeded,\n  \n  // Specialized error handlers\n  databaseError,\n  externalApiError,\n  authenticationError,\n  handleValidationError,\n  \n  // Financial-specific formatters\n  financialSuccess,\n  portfolioSuccess,\n  tradingSuccess,\n  \n  // Express middleware\n  responseFormatterMiddleware\n};"],"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","ignoreList":[]}