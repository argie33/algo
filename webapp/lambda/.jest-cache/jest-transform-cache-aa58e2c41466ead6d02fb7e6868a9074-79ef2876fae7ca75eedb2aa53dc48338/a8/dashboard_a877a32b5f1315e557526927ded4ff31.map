{"version":3,"names":["cov_25g1vxrezn","actualCoverage","express","s","require","success","error","router","Router","get","req","res","f","json","status","service","timestamp","Date","toISOString","message","dashboardData","summary","totalValue","dayChange","dayChangePercent","totalGainLoss","totalGainLossPercent","quickStats","positions","watchlistItems","alerts","lastUpdate","widgets","id","type","enabled","console","log","query","tableExistsResult","rows","exists","b","warn","upgrades","symbol","analyst","action","from","to","price_target","downgrades","earnings_beats","eps_actual","eps_estimate","beat_amount","upgradesResult","downgradesResult","earningsBeats","earningsTableExists","earningsResult","insights","length","module","exports"],"sources":["dashboard.js"],"sourcesContent":["const express = require('express');\nconst { success, error } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n// Basic health endpoint for dashboard service\nrouter.get('/health', (req, res) => {\n  res.json(success({\n    status: 'operational',\n    service: 'dashboard',\n    timestamp: new Date().toISOString(),\n    message: 'Dashboard service is running'\n  }));\n});\n\n// Dashboard overview endpoint\nrouter.get('/overview', (req, res) => {\n  const dashboardData = {\n    summary: {\n      totalValue: 125000,\n      dayChange: 2.34,\n      dayChangePercent: 1.87,\n      totalGainLoss: 15000,\n      totalGainLossPercent: 13.6\n    },\n    quickStats: {\n      positions: 12,\n      watchlistItems: 25,\n      alerts: 3,\n      lastUpdate: new Date().toISOString()\n    },\n    status: 'operational'\n  };\n\n  res.json(success(dashboardData));\n});\n\n// Dashboard widgets endpoint\nrouter.get('/widgets', (req, res) => {\n  const widgets = [\n    { id: 'portfolio', type: 'portfolio-summary', enabled: true },\n    { id: 'watchlist', type: 'watchlist-preview', enabled: true },\n    { id: 'news', type: 'market-news', enabled: true },\n    { id: 'performance', type: 'performance-chart', enabled: true }\n  ];\n\n  res.json(success(widgets));\n});\n\n// Dashboard analyst insights endpoint\nrouter.get('/analyst-insights', async (req, res) => {\n  console.log('üß† [DASHBOARD] Fetching analyst insights...');\n  try {\n    const { query } = require('../utils/database');\n    \n    // Check if analyst_ratings table exists\n    const tableExistsResult = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'analyst_ratings'\n      );`\n    );\n    \n    if (!tableExistsResult.rows[0].exists) {\n      console.warn('[DASHBOARD] analyst_ratings table does not exist, creating sample data');\n      return res.json(success({\n        upgrades: [\n          { symbol: 'AAPL', analyst: 'Goldman Sachs', action: 'Upgrade', from: 'Neutral', to: 'Buy', price_target: 175 },\n          { symbol: 'MSFT', analyst: 'Morgan Stanley', action: 'Upgrade', from: 'Equal Weight', to: 'Overweight', price_target: 350 }\n        ],\n        downgrades: [\n          { symbol: 'TSLA', analyst: 'JP Morgan', action: 'Downgrade', from: 'Overweight', to: 'Neutral', price_target: 800 }\n        ],\n        earnings_beats: [\n          { symbol: 'NVDA', eps_actual: 4.25, eps_estimate: 4.10, beat_amount: 0.15 }\n        ]\n      }));\n    }\n\n    // Fetch recent analyst upgrades and downgrades\n    const upgradesResult = await query(`\n      SELECT \n        symbol,\n        analyst_firm as analyst,\n        action,\n        previous_rating as \"from\",\n        new_rating as \"to\",\n        price_target,\n        rating_date\n      FROM analyst_ratings \n      WHERE action = 'Upgrade' \n      AND rating_date >= CURRENT_DATE - INTERVAL '7 days'\n      ORDER BY rating_date DESC\n      LIMIT 10\n    `);\n\n    const downgradesResult = await query(`\n      SELECT \n        symbol,\n        analyst_firm as analyst,\n        action,\n        previous_rating as \"from\",\n        new_rating as \"to\", \n        price_target,\n        rating_date\n      FROM analyst_ratings \n      WHERE action = 'Downgrade'\n      AND rating_date >= CURRENT_DATE - INTERVAL '7 days'\n      ORDER BY rating_date DESC\n      LIMIT 10\n    `);\n\n    // Check for earnings beats in earnings table if it exists\n    let earningsBeats = [];\n    const earningsTableExists = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'earnings_calendar'\n      );`\n    );\n\n    if (earningsTableExists.rows[0].exists) {\n      const earningsResult = await query(`\n        SELECT \n          symbol,\n          eps_actual,\n          eps_estimate,\n          (eps_actual - eps_estimate) as beat_amount\n        FROM earnings_calendar \n        WHERE earnings_date >= CURRENT_DATE - INTERVAL '7 days'\n        AND eps_actual > eps_estimate\n        ORDER BY earnings_date DESC\n        LIMIT 5\n      `);\n      earningsBeats = earningsResult.rows;\n    }\n\n    const insights = {\n      upgrades: upgradesResult.rows,\n      downgrades: downgradesResult.rows,\n      earnings_beats: earningsBeats\n    };\n\n    console.log(`üß† [DASHBOARD] Returning analyst insights: ${insights.upgrades.length} upgrades, ${insights.downgrades.length} downgrades, ${insights.earnings_beats.length} earnings beats`);\n    res.json(success(insights));\n\n  } catch (error) {\n    console.error('‚ùå [DASHBOARD] Analyst insights error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch analyst insights',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}