{"version":3,"names":["cov_bcdrglobr","actualCoverage","express","s","require","getPoolStatus","responseFormatter","router","Router","get","req","res","f","status","initialized","b","json","createErrorResponse","enhancedStatus","health","getPoolHealth","recommendations","getPoolRecommendations","summary","metrics","utilizationPercent","message","getPoolStatusMessage","createSuccessResponse","error","console","utilization","current","totalCount","max","percentage","waiting","waitingCount","performance","acquiresPerSecond","errorRate","uptimeSeconds","scaling","peakConnections","suggestions","timestamp","Date","toISOString","min","suggested","rationale","getScalingRationale","priority","getRecommendationPriority","checks","hasConnections","lowUtilization","lowErrorRate","noWaiting","healthyChecks","Object","values","filter","Boolean","length","totalChecks","keys","statusCode","overall","throughput","push","type","action","reason","currentLoad","trend","releaseRate","bottlenecks","benefits","module","exports"],"sources":["pool-management.js"],"sourcesContent":["const express = require('express');\nconst { getPoolStatus } = require('../utils/database');\nconst responseFormatter = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n/**\n * Database Connection Pool Management API\n * \n * Provides endpoints for monitoring and managing database connection pool\n * to handle concurrent users efficiently.\n */\n\n/**\n * Get detailed pool status and metrics\n */\nrouter.get('/status', async (req, res) => {\n  try {\n    const status = getPoolStatus();\n    \n    if (!status.initialized) {\n      return res.status(503).json(responseFormatter.createErrorResponse('Database not initialized'));\n    }\n\n    // Add human-readable status\n    const enhancedStatus = {\n      ...status,\n      health: getPoolHealth(status),\n      recommendations: getPoolRecommendations(status),\n      summary: {\n        status: status.metrics.utilizationPercent > 90 ? 'critical' : \n                status.metrics.utilizationPercent > 70 ? 'warning' : 'healthy',\n        message: getPoolStatusMessage(status)\n      }\n    };\n\n    res.json(responseFormatter.createSuccessResponse(enhancedStatus));\n\n  } catch (error) {\n    console.error('Pool status error:', error);\n    res.status(500).json(responseFormatter.createErrorResponse('Failed to get pool status'));\n  }\n});\n\n/**\n * Get pool metrics for monitoring dashboard\n */\nrouter.get('/metrics', async (req, res) => {\n  try {\n    const status = getPoolStatus();\n    \n    if (!status.initialized) {\n      return res.status(503).json(responseFormatter.createErrorResponse('Database not initialized'));\n    }\n\n    // Return simplified metrics for monitoring\n    const metrics = {\n      utilization: {\n        current: status.totalCount,\n        max: status.max,\n        percentage: status.metrics.utilizationPercent,\n        waiting: status.waitingCount\n      },\n      performance: {\n        acquiresPerSecond: status.metrics.acquiresPerSecond,\n        errorRate: status.metrics.errorRate,\n        uptimeSeconds: status.metrics.uptimeSeconds\n      },\n      scaling: {\n        peakConnections: status.metrics.peakConnections,\n        suggestions: status.recommendations\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    res.json(responseFormatter.createSuccessResponse(metrics));\n\n  } catch (error) {\n    console.error('Pool metrics error:', error);\n    res.status(500).json(responseFormatter.createErrorResponse('Failed to get pool metrics'));\n  }\n});\n\n/**\n * Get scaling recommendations\n */\nrouter.get('/recommendations', async (req, res) => {\n  try {\n    const status = getPoolStatus();\n    \n    if (!status.initialized) {\n      return res.status(503).json(responseFormatter.createErrorResponse('Database not initialized'));\n    }\n\n    const recommendations = {\n      current: {\n        min: status.min,\n        max: status.max,\n        utilization: status.metrics.utilizationPercent\n      },\n      suggested: status.recommendations,\n      rationale: getScalingRationale(status),\n      priority: getRecommendationPriority(status)\n    };\n\n    res.json(responseFormatter.createSuccessResponse(recommendations));\n\n  } catch (error) {\n    console.error('Pool recommendations error:', error);\n    res.status(500).json(responseFormatter.createErrorResponse('Failed to get recommendations'));\n  }\n});\n\n/**\n * Health check specifically for pool management\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const status = getPoolStatus();\n    \n    const health = {\n      status: status.initialized ? 'healthy' : 'unhealthy',\n      checks: {\n        initialized: status.initialized,\n        hasConnections: status.totalCount > 0,\n        lowUtilization: status.metrics.utilizationPercent < 90,\n        lowErrorRate: status.metrics.errorRate < 0.1,\n        noWaiting: status.waitingCount < 5\n      }\n    };\n\n    // Determine overall health\n    const healthyChecks = Object.values(health.checks).filter(Boolean).length;\n    const totalChecks = Object.keys(health.checks).length;\n    \n    if (healthyChecks === totalChecks) {\n      health.status = 'healthy';\n    } else if (healthyChecks >= totalChecks * 0.7) {\n      health.status = 'degraded';\n    } else {\n      health.status = 'unhealthy';\n    }\n\n    const statusCode = health.status === 'healthy' ? 200 : \n                      health.status === 'degraded' ? 206 : 503;\n\n    res.status(statusCode).json(responseFormatter.createSuccessResponse(health));\n\n  } catch (error) {\n    console.error('Pool health error:', error);\n    res.status(503).json(responseFormatter.createErrorResponse('Pool health check failed'));\n  }\n});\n\n// Helper functions\n\nfunction getPoolHealth(status) {\n  const { metrics } = status;\n  \n  return {\n    overall: metrics.utilizationPercent < 80 && metrics.errorRate < 0.05 ? 'good' : \n             metrics.utilizationPercent < 95 && metrics.errorRate < 0.1 ? 'fair' : 'poor',\n    utilization: metrics.utilizationPercent < 70 ? 'optimal' : \n                 metrics.utilizationPercent < 90 ? 'high' : 'critical',\n    errorRate: metrics.errorRate < 0.01 ? 'excellent' : \n               metrics.errorRate < 0.05 ? 'good' : \n               metrics.errorRate < 0.1 ? 'fair' : 'poor',\n    throughput: metrics.acquiresPerSecond > 1 ? 'high' : \n                metrics.acquiresPerSecond > 0.1 ? 'moderate' : 'low'\n  };\n}\n\nfunction getPoolRecommendations(status) {\n  const recommendations = [];\n  const { metrics } = status;\n\n  if (metrics.utilizationPercent > 90) {\n    recommendations.push({\n      type: 'scale_up',\n      priority: 'high',\n      action: 'Increase max pool size',\n      reason: 'Pool utilization critically high'\n    });\n  }\n\n  if (status.waitingCount > 5) {\n    recommendations.push({\n      type: 'scale_up',\n      priority: 'medium',\n      action: 'Increase pool size or optimize queries',\n      reason: 'Too many connections waiting'\n    });\n  }\n\n  if (metrics.errorRate > 0.1) {\n    recommendations.push({\n      type: 'investigate',\n      priority: 'high',\n      action: 'Investigate connection errors',\n      reason: 'High error rate detected'\n    });\n  }\n\n  if (metrics.utilizationPercent < 30 && status.max > 5) {\n    recommendations.push({\n      type: 'scale_down',\n      priority: 'low',\n      action: 'Consider reducing pool size',\n      reason: 'Low utilization detected'\n    });\n  }\n\n  return recommendations;\n}\n\nfunction getPoolStatusMessage(status) {\n  const { metrics } = status;\n  \n  if (metrics.utilizationPercent > 95) {\n    return 'Pool at maximum capacity - immediate scaling required';\n  } else if (metrics.utilizationPercent > 80) {\n    return 'Pool utilization high - consider scaling up';\n  } else if (status.waitingCount > 10) {\n    return 'Many connections waiting - pool may be undersized';\n  } else if (metrics.errorRate > 0.1) {\n    return 'High error rate - investigate connection issues';\n  } else if (metrics.utilizationPercent < 20) {\n    return 'Pool utilization low - running efficiently';\n  } else {\n    return 'Pool operating normally';\n  }\n}\n\nfunction getScalingRationale(status) {\n  const { metrics, recommendations } = status;\n  \n  return {\n    currentLoad: `${metrics.utilizationPercent}% utilization with ${status.waitingCount} waiting`,\n    trend: metrics.acquiresPerSecond > metrics.releaseRate ? 'increasing' : 'stable',\n    bottlenecks: [\n      ...(metrics.utilizationPercent > 80 ? ['High utilization'] : []),\n      ...(status.waitingCount > 5 ? ['Connection queue'] : []),\n      ...(metrics.errorRate > 0.05 ? ['Connection errors'] : [])\n    ],\n    benefits: recommendations.reason || 'Maintain current configuration'\n  };\n}\n\nfunction getRecommendationPriority(status) {\n  const { metrics } = status;\n  \n  if (metrics.utilizationPercent > 95 || status.waitingCount > 20) {\n    return 'urgent';\n  } else if (metrics.utilizationPercent > 80 || status.waitingCount > 10) {\n    return 'high';\n  } else if (metrics.utilizationPercent > 70 || metrics.errorRate > 0.05) {\n    return 'medium';\n  } else {\n    return 'low';\n  }\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}