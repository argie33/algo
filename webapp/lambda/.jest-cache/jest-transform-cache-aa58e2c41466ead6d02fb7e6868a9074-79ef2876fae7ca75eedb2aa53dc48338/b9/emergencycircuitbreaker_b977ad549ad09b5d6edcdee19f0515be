0285e3c2ca3d3232527fc6c3528562ad
/* istanbul ignore next */
function cov_1f7ipndabk() {
  var path = "/home/stocks/algo/webapp/lambda/routes/emergency-circuit-breaker.js";
  var hash = "489f9b2c88215277168e105d1da6f4e03add9325";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/emergency-circuit-breaker.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 88
        },
        end: {
          line: 7,
          column: 127
        }
      },
      "2": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "5": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "6": {
        start: {
          line: 15,
          column: 19
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 72
        }
      },
      "8": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 29,
          column: 7
        }
      },
      "9": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 70
        }
      },
      "10": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 37,
          column: 7
        }
      },
      "11": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 67,
          column: 3
        }
      },
      "12": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 43,
          column: 69
        }
      },
      "13": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 66,
          column: 3
        }
      },
      "14": {
        start: {
          line: 46,
          column: 19
        },
        end: {
          line: 46,
          column: 52
        }
      },
      "15": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 49
        }
      },
      "16": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 57,
          column: 7
        }
      },
      "17": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 66
        }
      },
      "18": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 65,
          column: 7
        }
      },
      "19": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 89,
          column: 3
        }
      },
      "20": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 88,
          column: 3
        }
      },
      "21": {
        start: {
          line: 72,
          column: 19
        },
        end: {
          line: 72,
          column: 44
        }
      },
      "22": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "23": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 68
        }
      },
      "24": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 87,
          column: 7
        }
      },
      "25": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 118,
          column: 3
        }
      },
      "26": {
        start: {
          line: 93,
          column: 2
        },
        end: {
          line: 93,
          column: 78
        }
      },
      "27": {
        start: {
          line: 95,
          column: 2
        },
        end: {
          line: 117,
          column: 3
        }
      },
      "28": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 96,
          column: 71
        }
      },
      "29": {
        start: {
          line: 97,
          column: 19
        },
        end: {
          line: 97,
          column: 71
        }
      },
      "30": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 99,
          column: 49
        }
      },
      "31": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 108,
          column: 7
        }
      },
      "32": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 65
        }
      },
      "33": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 116,
          column: 7
        }
      },
      "34": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 150,
          column: 3
        }
      },
      "35": {
        start: {
          line: 122,
          column: 2
        },
        end: {
          line: 149,
          column: 3
        }
      },
      "36": {
        start: {
          line: 123,
          column: 19
        },
        end: {
          line: 123,
          column: 44
        }
      },
      "37": {
        start: {
          line: 125,
          column: 22
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "38": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 140,
          column: 7
        }
      },
      "39": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 142,
          column: 67
        }
      },
      "40": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 148,
          column: 7
        }
      },
      "41": {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 152,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 11,
            column: 27
          }
        },
        loc: {
          start: {
            line: 11,
            column: 46
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 34
          },
          end: {
            line: 42,
            column: 35
          }
        },
        loc: {
          start: {
            line: 42,
            column: 54
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 22
          },
          end: {
            line: 70,
            column: 23
          }
        },
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 30
          },
          end: {
            line: 92,
            column: 31
          }
        },
        loc: {
          start: {
            line: 92,
            column: 50
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 121,
            column: 22
          },
          end: {
            line: 121,
            column: 23
          }
        },
        loc: {
          start: {
            line: 121,
            column: 36
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 121
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 40
          },
          end: {
            line: 48,
            column: 43
          }
        }, {
          start: {
            line: 48,
            column: 46
          },
          end: {
            line: 48,
            column: 49
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 15
          },
          end: {
            line: 54,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 60
          }
        }, {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 54,
            column: 59
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 40
          },
          end: {
            line: 99,
            column: 43
          }
        }, {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 99,
            column: 49
          }
        }],
        line: 99
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 15
          },
          end: {
            line: 105,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 43
          }
        }, {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 105,
            column: 43
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 125,
            column: 22
          },
          end: {
            line: 125,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 22
          },
          end: {
            line: 125,
            column: 39
          }
        }, {
          start: {
            line: 125,
            column: 43
          },
          end: {
            line: 125,
            column: 63
          }
        }],
        line: 125
      },
      "5": {
        loc: {
          start: {
            line: 127,
            column: 15
          },
          end: {
            line: 127,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 127,
            column: 30
          }
        }, {
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 127,
            column: 36
          }
        }],
        line: 127
      },
      "6": {
        loc: {
          start: {
            line: 129,
            column: 15
          },
          end: {
            line: 129,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 27
          },
          end: {
            line: 129,
            column: 57
          }
        }, {
          start: {
            line: 129,
            column: 60
          },
          end: {
            line: 129,
            column: 93
          }
        }],
        line: 129
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 131,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 29
          },
          end: {
            line: 131,
            column: 38
          }
        }, {
          start: {
            line: 131,
            column: 41
          },
          end: {
            line: 131,
            column: 51
          }
        }],
        line: 131
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "489f9b2c88215277168e105d1da6f4e03add9325"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1f7ipndabk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1f7ipndabk();
/**
 * Emergency Circuit Breaker Reset Route
 * CRITICAL: Provides immediate production fix for circuit breaker crisis
 */

const express =
/* istanbul ignore next */
(cov_1f7ipndabk().s[0]++, require('express'));
const {
  resetAllCircuitBreakers,
  emergencyDatabaseRecovery,
  getCircuitBreakerStatus
} =
/* istanbul ignore next */
(cov_1f7ipndabk().s[1]++, require('../utils/circuitBreakerReset'));
const router =
/* istanbul ignore next */
(cov_1f7ipndabk().s[2]++, express.Router());

// Emergency reset all circuit breakers
/* istanbul ignore next */
cov_1f7ipndabk().s[3]++;
router.post('/reset-all', async (req, res) => {
  /* istanbul ignore next */
  cov_1f7ipndabk().f[0]++;
  cov_1f7ipndabk().s[4]++;
  console.log('🚨 EMERGENCY: Reset all circuit breakers requested');
  /* istanbul ignore next */
  cov_1f7ipndabk().s[5]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[6]++, resetAllCircuitBreakers());
    /* istanbul ignore next */
    cov_1f7ipndabk().s[7]++;
    console.log('✅ Emergency circuit breaker reset completed:', result);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[8]++;
    res.json({
      success: true,
      message: 'Emergency circuit breaker reset completed',
      result,
      timestamp: new Date().toISOString(),
      nextSteps: ['Test database connectivity', 'Monitor circuit breaker health', 'Check application functionality']
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f7ipndabk().s[9]++;
    console.error('❌ Emergency circuit breaker reset failed:', error);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[10]++;
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Emergency circuit breaker reset failed',
      timestamp: new Date().toISOString()
    });
  }
});

// Emergency database recovery
/* istanbul ignore next */
cov_1f7ipndabk().s[11]++;
router.post('/database-recovery', async (req, res) => {
  /* istanbul ignore next */
  cov_1f7ipndabk().f[1]++;
  cov_1f7ipndabk().s[12]++;
  console.log('🚨 EMERGENCY: Database recovery procedure requested');
  /* istanbul ignore next */
  cov_1f7ipndabk().s[13]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[14]++, await emergencyDatabaseRecovery());
    const statusCode =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[15]++, result.success ?
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[0][0]++, 200) :
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[0][1]++, 500));
    /* istanbul ignore next */
    cov_1f7ipndabk().s[16]++;
    res.status(statusCode).json({
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[1][0]++, 'Emergency database recovery completed successfully') :
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[1][1]++, 'Emergency database recovery completed with errors'),
      result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f7ipndabk().s[17]++;
    console.error('❌ Emergency database recovery failed:', error);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[18]++;
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Emergency database recovery failed',
      timestamp: new Date().toISOString()
    });
  }
});

// Get circuit breaker status
/* istanbul ignore next */
cov_1f7ipndabk().s[19]++;
router.get('/status', (req, res) => {
  /* istanbul ignore next */
  cov_1f7ipndabk().f[2]++;
  cov_1f7ipndabk().s[20]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[21]++, getCircuitBreakerStatus());
    /* istanbul ignore next */
    cov_1f7ipndabk().s[22]++;
    res.json({
      success: true,
      message: 'Circuit breaker status retrieved',
      status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f7ipndabk().s[23]++;
    console.error('❌ Failed to get circuit breaker status:', error);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[24]++;
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Failed to get circuit breaker status',
      timestamp: new Date().toISOString()
    });
  }
});

// Test database connectivity
/* istanbul ignore next */
cov_1f7ipndabk().s[25]++;
router.post('/test-database', async (req, res) => {
  /* istanbul ignore next */
  cov_1f7ipndabk().f[3]++;
  cov_1f7ipndabk().s[26]++;
  console.log('🧪 Testing database connectivity after circuit breaker reset');
  /* istanbul ignore next */
  cov_1f7ipndabk().s[27]++;
  try {
    const circuitBreakerReset =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[28]++, require('../utils/circuitBreakerReset'));
    const result =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[29]++, await circuitBreakerReset.testDatabaseConnectivity());
    const statusCode =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[30]++, result.success ?
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[2][0]++, 200) :
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[2][1]++, 500));
    /* istanbul ignore next */
    cov_1f7ipndabk().s[31]++;
    res.status(statusCode).json({
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[3][0]++, 'Database connectivity test passed') :
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[3][1]++, 'Database connectivity test failed'),
      result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f7ipndabk().s[32]++;
    console.error('❌ Database connectivity test failed:', error);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[33]++;
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Database connectivity test failed',
      timestamp: new Date().toISOString()
    });
  }
});

// Health check with circuit breaker info
/* istanbul ignore next */
cov_1f7ipndabk().s[34]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_1f7ipndabk().f[4]++;
  cov_1f7ipndabk().s[35]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[36]++, getCircuitBreakerStatus());
    const isHealthy =
    /* istanbul ignore next */
    (cov_1f7ipndabk().s[37]++,
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[4][0]++, status.open === 0) &&
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[4][1]++, status.halfOpen <= 1));
    /* istanbul ignore next */
    cov_1f7ipndabk().s[38]++;
    res.status(isHealthy ?
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[5][0]++, 200) :
    /* istanbul ignore next */
    (cov_1f7ipndabk().b[5][1]++, 503)).json({
      success: isHealthy,
      message: isHealthy ?
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[6][0]++, 'All circuit breakers healthy') :
      /* istanbul ignore next */
      (cov_1f7ipndabk().b[6][1]++, 'Circuit breakers need attention'),
      health: {
        overall: isHealthy ?
        /* istanbul ignore next */
        (cov_1f7ipndabk().b[7][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1f7ipndabk().b[7][1]++, 'degraded'),
        totalBreakers: status.totalBreakers,
        healthy: status.healthy,
        open: status.open,
        halfOpen: status.halfOpen,
        needsAttention: status.needsAttention,
        recommendations: status.recommendations
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f7ipndabk().s[39]++;
    console.error('❌ Circuit breaker health check failed:', error);
    /* istanbul ignore next */
    cov_1f7ipndabk().s[40]++;
    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Circuit breaker health check failed',
      timestamp: new Date().toISOString()
    });
  }
});
/* istanbul ignore next */
cov_1f7ipndabk().s[41]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,