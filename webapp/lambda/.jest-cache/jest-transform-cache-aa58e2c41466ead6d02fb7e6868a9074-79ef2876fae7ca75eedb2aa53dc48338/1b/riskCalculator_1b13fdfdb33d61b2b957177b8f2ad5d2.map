{"version":3,"names":["cov_10ar81zhy4","actualCoverage","query","s","require","RiskCalculator","constructor","f","riskFactors","MARKET_RISK","weight","category","SECTOR_CONCENTRATION","GEOGRAPHIC_CONCENTRATION","FINANCIAL_LEVERAGE","LIQUIDITY_RISK","PROFITABILITY_RISK","VOLATILITY_RISK","MOMENTUM_RISK","SIZE_RISK","CORRELATION_RISK","calculatePortfolioRisk","positions","b","length","getEmptyRiskProfile","symbols","map","p","symbol","marketData","getMarketDataForSymbols","technicalData","getTechnicalDataForSymbols","positionRisks","Promise","all","position","calculatePositionRisk","portfolioMetrics","calculatePortfolioMetrics","varCalculations","calculateVaR","stressTests","calculateStressTests","recommendations","generateRiskRecommendations","riskScore","overallRiskScore","riskGrade","getRiskGrade","lastUpdated","Date","toISOString","error","console","stockData","techData","risks","marketRisk","calculateMarketRisk","financialRisk","calculateFinancialRisk","technicalRisk","calculateTechnicalRisk","concentrationRisk","calculateConcentrationRisk","liquidityRisk","calculateLiquidityRisk","specificRisk","calculateSpecificRisk","overallRisk","calculateOverallPositionRisk","marketValue","riskContribution","getPositionRecommendations","beta","correlation","correlation_with_market","marketRiskScore","Math","min","debtToEquity","debt_to_equity","currentRatio","current_ratio","interestCoverage","interest_coverage","roe","atr","price","close","current_price","volatility","momentum3m","price_momentum_3m","momentum12m","price_momentum_12m","rsi","marketCap","market_cap","avgVolume","average_volume","operatingMargin","operating_margin","netMargin","net_margin","revenueGrowth","revenue_growth","earningsGrowth","earnings_growth","weights","weightedRisk","riskType","risk","Object","entries","totalValue","reduce","sum","getEmptyPortfolioMetrics","numPositions","maxWeight","max","herfindahlIndex","pow","sectorWeights","forEach","sector","maxSectorWeight","values","diversificationScore","calculateDiversificationScore","maxPositionWeight","riskContributions","r","contribution","sort","a","score","var95","var99","expectedShortfall","portfolioVolatility","calculatePortfolioVolatility","confidence95","confidence99","weightedVolatility","scenarios","marketCrash","calculateMarketCrashScenario","sectorRotation","calculateSectorRotationScenario","interestRateShock","calculateInterestRateShockScenario","liquidityCrisis","calculateLiquidityCrisisScenario","marketDecline","portfolioImpact","i","positionImpact","name","percentageImpact","worstPositions","getWorstPositions","impact","affectedSectors","slice","push","type","title","message","toFixed","priority","highRiskPositions","filter","join","placeholders","_","result","dataMap","rows","row","calculateOrderRisk","orderData","quantity","side","stopLossPrice","Error","log","portfolioContext","getSymbolMarketData","getUserPortfolioContext","userId","orderValue","abs","riskAmount","calculateOrderMarketRisk","positionSizeRisk","calculatePositionSizeRisk","calculateOrderLiquidityRisk","calculateOrderConcentrationRisk","riskRewardRatio","calculateOverallOrderRisk","approval","determineOrderApproval","orderRiskScore","getOrderRecommendations","calculatedAt","approved","calculationError","reason","requiresManualReview","spread","portfolioValue","positionPercent","existingPosition","find","currentWeight","warnings","module","exports"],"sources":["riskCalculator.js"],"sourcesContent":["const { query } = require('./database');\n\nclass RiskCalculator {\n  constructor() {\n    this.riskFactors = {\n      // Market risk factors\n      MARKET_RISK: { weight: 0.3, category: 'market' },\n      SECTOR_CONCENTRATION: { weight: 0.2, category: 'concentration' },\n      GEOGRAPHIC_CONCENTRATION: { weight: 0.1, category: 'concentration' },\n      \n      // Company-specific risk factors\n      FINANCIAL_LEVERAGE: { weight: 0.15, category: 'financial' },\n      LIQUIDITY_RISK: { weight: 0.1, category: 'financial' },\n      PROFITABILITY_RISK: { weight: 0.15, category: 'financial' },\n      \n      // Technical risk factors\n      VOLATILITY_RISK: { weight: 0.2, category: 'technical' },\n      MOMENTUM_RISK: { weight: 0.1, category: 'technical' },\n      \n      // Other risk factors\n      SIZE_RISK: { weight: 0.05, category: 'other' },\n      CORRELATION_RISK: { weight: 0.1, category: 'other' }\n    };\n  }\n\n  // Calculate portfolio-level risk metrics\n  async calculatePortfolioRisk(positions) {\n    try {\n      if (!positions || positions.length === 0) {\n        return this.getEmptyRiskProfile();\n      }\n\n      // Get market data for all positions\n      const symbols = positions.map(p => p.symbol);\n      const marketData = await this.getMarketDataForSymbols(symbols);\n      const technicalData = await this.getTechnicalDataForSymbols(symbols);\n      \n      // Calculate individual position risks\n      const positionRisks = await Promise.all(\n        positions.map(position => this.calculatePositionRisk(position, marketData, technicalData))\n      );\n\n      // Calculate portfolio-level metrics\n      const portfolioMetrics = this.calculatePortfolioMetrics(positions, positionRisks);\n      \n      // Calculate Value at Risk (VaR)\n      const varCalculations = this.calculateVaR(positions, positionRisks);\n      \n      // Calculate stress test scenarios\n      const stressTests = this.calculateStressTests(positions, positionRisks);\n      \n      // Generate risk recommendations\n      const recommendations = this.generateRiskRecommendations(portfolioMetrics, positionRisks);\n\n      return {\n        portfolioMetrics,\n        positionRisks,\n        varCalculations,\n        stressTests,\n        recommendations,\n        riskScore: portfolioMetrics.overallRiskScore,\n        riskGrade: this.getRiskGrade(portfolioMetrics.overallRiskScore),\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error calculating portfolio risk:', error);\n      throw error;\n    }\n  }\n\n  // Calculate risk for individual position\n  async calculatePositionRisk(position, marketData, technicalData) {\n    const symbol = position.symbol;\n    const stockData = marketData[symbol] || {};\n    const techData = technicalData[symbol] || {};\n    \n    const risks = {\n      marketRisk: this.calculateMarketRisk(stockData, techData),\n      financialRisk: this.calculateFinancialRisk(stockData),\n      technicalRisk: this.calculateTechnicalRisk(techData),\n      concentrationRisk: this.calculateConcentrationRisk(position),\n      liquidityRisk: this.calculateLiquidityRisk(stockData),\n      specificRisk: this.calculateSpecificRisk(stockData, techData)\n    };\n\n    const overallRisk = this.calculateOverallPositionRisk(risks);\n    \n    return {\n      symbol,\n      marketValue: position.marketValue || 0,\n      weight: position.weight || 0,\n      risks,\n      overallRisk,\n      riskContribution: overallRisk * (position.weight || 0),\n      recommendations: this.getPositionRecommendations(risks, overallRisk)\n    };\n  }\n\n  // Calculate market risk (Beta-based)\n  calculateMarketRisk(stockData, techData) {\n    const beta = stockData.beta || 1.0;\n    const correlation = stockData.correlation_with_market || 0.7;\n    \n    // Market risk score based on beta and correlation\n    let marketRiskScore = 0;\n    \n    if (beta > 1.5) marketRiskScore += 30;\n    else if (beta > 1.2) marketRiskScore += 20;\n    else if (beta > 0.8) marketRiskScore += 10;\n    else if (beta < 0.5) marketRiskScore += 15; // Very low beta can be risky too\n    \n    if (correlation > 0.8) marketRiskScore += 15;\n    else if (correlation < 0.3) marketRiskScore += 10;\n    \n    return Math.min(100, marketRiskScore);\n  }\n\n  // Calculate financial risk\n  calculateFinancialRisk(stockData) {\n    let financialRisk = 0;\n    \n    // Debt-to-equity risk\n    const debtToEquity = stockData.debt_to_equity || 0;\n    if (debtToEquity > 1.5) financialRisk += 30;\n    else if (debtToEquity > 1.0) financialRisk += 20;\n    else if (debtToEquity > 0.5) financialRisk += 10;\n    \n    // Current ratio risk\n    const currentRatio = stockData.current_ratio || 1.5;\n    if (currentRatio < 1.0) financialRisk += 25;\n    else if (currentRatio < 1.5) financialRisk += 15;\n    \n    // Interest coverage risk\n    const interestCoverage = stockData.interest_coverage || 5;\n    if (interestCoverage < 2.0) financialRisk += 25;\n    else if (interestCoverage < 3.0) financialRisk += 15;\n    \n    // ROE consistency risk\n    const roe = stockData.roe || 0;\n    if (roe < 0.05) financialRisk += 20;\n    else if (roe < 0.10) financialRisk += 10;\n    \n    return Math.min(100, financialRisk);\n  }\n\n  // Calculate technical risk\n  calculateTechnicalRisk(techData) {\n    let technicalRisk = 0;\n    \n    // Volatility risk (using ATR as proxy)\n    const atr = techData.atr || 0;\n    const price = techData.close || techData.current_price || 100;\n    const volatility = atr / price;\n    \n    if (volatility > 0.05) technicalRisk += 25;\n    else if (volatility > 0.03) technicalRisk += 15;\n    else if (volatility > 0.02) technicalRisk += 10;\n    \n    // Momentum risk\n    const momentum3m = techData.price_momentum_3m || 0;\n    const momentum12m = techData.price_momentum_12m || 0;\n    \n    if (momentum3m < -0.2) technicalRisk += 20;\n    else if (momentum3m < -0.1) technicalRisk += 10;\n    \n    if (momentum12m < -0.3) technicalRisk += 15;\n    \n    // RSI extremes\n    const rsi = techData.rsi || 50;\n    if (rsi > 80 || rsi < 20) technicalRisk += 15;\n    \n    return Math.min(100, technicalRisk);\n  }\n\n  // Calculate concentration risk\n  calculateConcentrationRisk(position) {\n    const weight = position.weight || 0;\n    \n    if (weight > 0.3) return 40; // >30% concentration\n    if (weight > 0.2) return 25; // >20% concentration\n    if (weight > 0.1) return 15; // >10% concentration\n    if (weight > 0.05) return 10; // >5% concentration\n    \n    return 5; // Minimal concentration risk\n  }\n\n  // Calculate liquidity risk\n  calculateLiquidityRisk(stockData) {\n    const marketCap = stockData.market_cap || 0;\n    const avgVolume = stockData.average_volume || 0;\n    \n    let liquidityRisk = 0;\n    \n    // Market cap based liquidity\n    if (marketCap < 300000000) liquidityRisk += 30; // <$300M\n    else if (marketCap < 1000000000) liquidityRisk += 20; // <$1B\n    else if (marketCap < 5000000000) liquidityRisk += 10; // <$5B\n    \n    // Volume based liquidity\n    if (avgVolume < 100000) liquidityRisk += 25; // <100k shares\n    else if (avgVolume < 500000) liquidityRisk += 15; // <500k shares\n    else if (avgVolume < 1000000) liquidityRisk += 10; // <1M shares\n    \n    return Math.min(100, liquidityRisk);\n  }\n\n  // Calculate company-specific risk\n  calculateSpecificRisk(stockData, techData) {\n    let specificRisk = 0;\n    \n    // Earnings quality risk\n    const operatingMargin = stockData.operating_margin || 0;\n    const netMargin = stockData.net_margin || 0;\n    \n    if (operatingMargin < 0.05) specificRisk += 20;\n    else if (operatingMargin < 0.10) specificRisk += 10;\n    \n    if (netMargin < 0.03) specificRisk += 15;\n    else if (netMargin < 0.05) specificRisk += 10;\n    \n    // Growth sustainability risk\n    const revenueGrowth = stockData.revenue_growth || 0;\n    const earningsGrowth = stockData.earnings_growth || 0;\n    \n    if (revenueGrowth < -0.1) specificRisk += 20;\n    if (earningsGrowth < -0.2) specificRisk += 25;\n    \n    return Math.min(100, specificRisk);\n  }\n\n  // Calculate overall position risk\n  calculateOverallPositionRisk(risks) {\n    const weights = {\n      marketRisk: 0.25,\n      financialRisk: 0.25,\n      technicalRisk: 0.20,\n      concentrationRisk: 0.15,\n      liquidityRisk: 0.10,\n      specificRisk: 0.05\n    };\n    \n    let weightedRisk = 0;\n    for (const [riskType, risk] of Object.entries(risks)) {\n      weightedRisk += (risk * (weights[riskType] || 0));\n    }\n    \n    return Math.min(100, weightedRisk);\n  }\n\n  // Calculate portfolio-level metrics\n  calculatePortfolioMetrics(positions, positionRisks) {\n    const totalValue = positions.reduce((sum, p) => sum + (p.marketValue || 0), 0);\n    \n    if (totalValue === 0) return this.getEmptyPortfolioMetrics();\n    \n    // Weighted average risk\n    const weightedRisk = positionRisks.reduce((sum, risk) => {\n      return sum + (risk.overallRisk * (risk.marketValue / totalValue));\n    }, 0);\n    \n    // Diversification metrics\n    const numPositions = positions.length;\n    const maxWeight = Math.max(...positions.map(p => p.weight || 0));\n    const herfindahlIndex = positions.reduce((sum, p) => sum + Math.pow(p.weight || 0, 2), 0);\n    \n    // Sector concentration\n    const sectorWeights = {};\n    positions.forEach(p => {\n      const sector = p.sector || 'Unknown';\n      sectorWeights[sector] = (sectorWeights[sector] || 0) + (p.weight || 0);\n    });\n    const maxSectorWeight = Math.max(...Object.values(sectorWeights));\n    \n    // Calculate diversification score\n    const diversificationScore = this.calculateDiversificationScore(numPositions, maxWeight, herfindahlIndex);\n    \n    return {\n      overallRiskScore: weightedRisk,\n      diversificationScore,\n      numPositions,\n      maxPositionWeight: maxWeight,\n      maxSectorWeight,\n      herfindahlIndex,\n      riskContributions: positionRisks.map(r => ({\n        symbol: r.symbol,\n        contribution: r.riskContribution\n      })).sort((a, b) => b.contribution - a.contribution)\n    };\n  }\n\n  // Calculate diversification score\n  calculateDiversificationScore(numPositions, maxWeight, herfindahlIndex) {\n    let score = 100;\n    \n    // Penalty for too few positions\n    if (numPositions < 10) score -= (10 - numPositions) * 5;\n    \n    // Penalty for high concentration\n    if (maxWeight > 0.2) score -= (maxWeight - 0.2) * 200;\n    \n    // Penalty for high Herfindahl index\n    if (herfindahlIndex > 0.1) score -= (herfindahlIndex - 0.1) * 300;\n    \n    return Math.max(0, score);\n  }\n\n  // Calculate Value at Risk (VaR)\n  calculateVaR(positions, positionRisks) {\n    const totalValue = positions.reduce((sum, p) => sum + (p.marketValue || 0), 0);\n    \n    if (totalValue === 0) return { var95: 0, var99: 0, expectedShortfall: 0 };\n    \n    // Simplified VaR calculation using portfolio volatility\n    const portfolioVolatility = this.calculatePortfolioVolatility(positions, positionRisks);\n    \n    // Assuming normal distribution (simplified)\n    const var95 = totalValue * portfolioVolatility * 1.65; // 95% confidence\n    const var99 = totalValue * portfolioVolatility * 2.33; // 99% confidence\n    const expectedShortfall = totalValue * portfolioVolatility * 2.5; // Expected shortfall\n    \n    return {\n      var95,\n      var99,\n      expectedShortfall,\n      portfolioVolatility,\n      confidence95: var95 / totalValue,\n      confidence99: var99 / totalValue\n    };\n  }\n\n  // Calculate portfolio volatility\n  calculatePortfolioVolatility(positions, positionRisks) {\n    // Simplified calculation using weighted average of individual volatilities\n    const totalValue = positions.reduce((sum, p) => sum + (p.marketValue || 0), 0);\n    \n    if (totalValue === 0) return 0;\n    \n    const weightedVolatility = positionRisks.reduce((sum, risk) => {\n      const weight = risk.marketValue / totalValue;\n      const volatility = risk.risks.technicalRisk / 100; // Convert to decimal\n      return sum + (weight * volatility);\n    }, 0);\n    \n    return weightedVolatility;\n  }\n\n  // Calculate stress test scenarios\n  calculateStressTests(positions, positionRisks) {\n    const totalValue = positions.reduce((sum, p) => sum + (p.marketValue || 0), 0);\n    \n    const scenarios = {\n      marketCrash: this.calculateMarketCrashScenario(positions, positionRisks, totalValue),\n      sectorRotation: this.calculateSectorRotationScenario(positions, positionRisks, totalValue),\n      interestRateShock: this.calculateInterestRateShockScenario(positions, positionRisks, totalValue),\n      liquidityCrisis: this.calculateLiquidityCrisisScenario(positions, positionRisks, totalValue)\n    };\n    \n    return scenarios;\n  }\n\n  // Market crash scenario (-30% market decline)\n  calculateMarketCrashScenario(positions, positionRisks, totalValue) {\n    const marketDecline = -0.30;\n    \n    let portfolioImpact = 0;\n    positions.forEach((position, i) => {\n      const beta = positionRisks[i].risks.marketRisk / 50 || 1.0; // Rough beta approximation\n      const positionImpact = position.marketValue * marketDecline * beta;\n      portfolioImpact += positionImpact;\n    });\n    \n    return {\n      name: 'Market Crash (-30%)',\n      portfolioImpact,\n      percentageImpact: portfolioImpact / totalValue,\n      worstPositions: this.getWorstPositions(positions, positionRisks, 'marketRisk')\n    };\n  }\n\n  // Sector rotation scenario\n  calculateSectorRotationScenario(positions, positionRisks, totalValue) {\n    // Simplified: assume tech sector down 20%, other sectors up 5%\n    let portfolioImpact = 0;\n    \n    positions.forEach(position => {\n      const sector = position.sector || 'Unknown';\n      const impact = sector === 'Technology' ? -0.20 : 0.05;\n      portfolioImpact += position.marketValue * impact;\n    });\n    \n    return {\n      name: 'Sector Rotation (Tech -20%, Others +5%)',\n      portfolioImpact,\n      percentageImpact: portfolioImpact / totalValue,\n      affectedSectors: ['Technology']\n    };\n  }\n\n  // Interest rate shock scenario\n  calculateInterestRateShockScenario(positions, positionRisks, totalValue) {\n    // Simplified: high debt companies more affected\n    let portfolioImpact = 0;\n    \n    positions.forEach((position, i) => {\n      const financialRisk = positionRisks[i].risks.financialRisk;\n      const impact = -(financialRisk / 100) * 0.15; // Up to -15% for high debt companies\n      portfolioImpact += position.marketValue * impact;\n    });\n    \n    return {\n      name: 'Interest Rate Shock (+200bps)',\n      portfolioImpact,\n      percentageImpact: portfolioImpact / totalValue,\n      worstPositions: this.getWorstPositions(positions, positionRisks, 'financialRisk')\n    };\n  }\n\n  // Liquidity crisis scenario\n  calculateLiquidityCrisisScenario(positions, positionRisks, totalValue) {\n    let portfolioImpact = 0;\n    \n    positions.forEach((position, i) => {\n      const liquidityRisk = positionRisks[i].risks.liquidityRisk;\n      const impact = -(liquidityRisk / 100) * 0.25; // Up to -25% for illiquid positions\n      portfolioImpact += position.marketValue * impact;\n    });\n    \n    return {\n      name: 'Liquidity Crisis',\n      portfolioImpact,\n      percentageImpact: portfolioImpact / totalValue,\n      worstPositions: this.getWorstPositions(positions, positionRisks, 'liquidityRisk')\n    };\n  }\n\n  // Get worst positions by risk type\n  getWorstPositions(positions, positionRisks, riskType) {\n    return positions\n      .map((position, i) => ({\n        symbol: position.symbol,\n        weight: position.weight,\n        riskScore: positionRisks[i].risks[riskType]\n      }))\n      .sort((a, b) => b.riskScore - a.riskScore)\n      .slice(0, 5);\n  }\n\n  // Generate risk recommendations\n  generateRiskRecommendations(portfolioMetrics, positionRisks) {\n    const recommendations = [];\n    \n    // Concentration recommendations\n    if (portfolioMetrics.maxPositionWeight > 0.2) {\n      recommendations.push({\n        type: 'warning',\n        category: 'concentration',\n        title: 'High Position Concentration',\n        message: `Consider reducing position size for holdings above 20% (currently ${(portfolioMetrics.maxPositionWeight * 100).toFixed(1)}%)`,\n        priority: 'high'\n      });\n    }\n    \n    // Diversification recommendations\n    if (portfolioMetrics.numPositions < 10) {\n      recommendations.push({\n        type: 'info',\n        category: 'diversification',\n        title: 'Increase Diversification',\n        message: `Consider adding more positions to improve diversification (currently ${portfolioMetrics.numPositions} positions)`,\n        priority: 'medium'\n      });\n    }\n    \n    // Risk recommendations for high-risk positions\n    const highRiskPositions = positionRisks.filter(r => r.overallRisk > 70);\n    if (highRiskPositions.length > 0) {\n      recommendations.push({\n        type: 'warning',\n        category: 'position_risk',\n        title: 'High Risk Positions',\n        message: `Review positions with high risk scores: ${highRiskPositions.map(p => p.symbol).join(', ')}`,\n        priority: 'high'\n      });\n    }\n    \n    return recommendations;\n  }\n\n  // Get risk grade\n  getRiskGrade(riskScore) {\n    if (riskScore <= 20) return 'A';\n    if (riskScore <= 35) return 'B';\n    if (riskScore <= 50) return 'C';\n    if (riskScore <= 70) return 'D';\n    return 'F';\n  }\n\n  // Get market data for symbols\n  async getMarketDataForSymbols(symbols) {\n    try {\n      if (symbols.length === 0) return {};\n      \n      const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n      const result = await query(`\n        SELECT \n          sf.symbol,\n          sf.beta,\n          sf.debt_to_equity,\n          sf.current_ratio,\n          sf.interest_coverage,\n          sf.roe,\n          sf.operating_margin,\n          sf.net_margin,\n          sf.revenue_growth,\n          sf.earnings_growth,\n          sf.market_cap,\n          sse.sector\n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        WHERE sf.symbol IN (${placeholders})\n      `, symbols);\n      \n      const dataMap = {};\n      result.rows.forEach(row => {\n        dataMap[row.symbol] = row;\n      });\n      \n      return dataMap;\n    } catch (error) {\n      console.error('Error fetching market data:', error);\n      return {};\n    }\n  }\n\n  // Get technical data for symbols\n  async getTechnicalDataForSymbols(symbols) {\n    try {\n      if (symbols.length === 0) return {};\n      \n      const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n      const result = await query(`\n        SELECT \n          symbol,\n          rsi,\n          atr,\n          price_momentum_3m,\n          price_momentum_12m,\n          close as current_price\n        FROM technical_data_daily\n        WHERE symbol IN (${placeholders})\n        AND date = (\n          SELECT MAX(date) \n          FROM technical_data_daily \n          WHERE symbol = technical_data_daily.symbol\n        )\n      `, symbols);\n      \n      const dataMap = {};\n      result.rows.forEach(row => {\n        dataMap[row.symbol] = row;\n      });\n      \n      return dataMap;\n    } catch (error) {\n      console.error('Error fetching technical data:', error);\n      return {};\n    }\n  }\n\n  // Get position recommendations\n  getPositionRecommendations(risks, overallRisk) {\n    const recommendations = [];\n    \n    if (risks.financialRisk > 60) {\n      recommendations.push('Monitor debt levels and liquidity');\n    }\n    \n    if (risks.technicalRisk > 70) {\n      recommendations.push('High volatility - consider reducing position size');\n    }\n    \n    if (risks.concentrationRisk > 30) {\n      recommendations.push('Position size too large - consider trimming');\n    }\n    \n    if (overallRisk > 80) {\n      recommendations.push('High overall risk - review position thoroughly');\n    }\n    \n    return recommendations;\n  }\n\n  // Get empty risk profile\n  getEmptyRiskProfile() {\n    return {\n      portfolioMetrics: this.getEmptyPortfolioMetrics(),\n      positionRisks: [],\n      varCalculations: { var95: 0, var99: 0, expectedShortfall: 0 },\n      stressTests: {},\n      recommendations: [],\n      riskScore: 0,\n      riskGrade: 'N/A',\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Get empty portfolio metrics\n  getEmptyPortfolioMetrics() {\n    return {\n      overallRiskScore: 0,\n      diversificationScore: 0,\n      numPositions: 0,\n      maxPositionWeight: 0,\n      maxSectorWeight: 0,\n      herfindahlIndex: 0,\n      riskContributions: []\n    };\n  }\n\n  /**\n   * Calculate order-specific risk for trading verification\n   * CRITICAL: This method is required for order execution safety\n   */\n  async calculateOrderRisk(orderData) {\n    try {\n      const { symbol, quantity, side, price, stopLossPrice } = orderData;\n      \n      // Validate input parameters\n      if (!symbol || !quantity || !side || !price) {\n        throw new Error('Missing required order parameters for risk calculation');\n      }\n\n      console.log(`🎯 Calculating order risk for ${side} ${quantity} ${symbol} at $${price}`);\n\n      // Get current market data and portfolio context\n      const [marketData, portfolioContext] = await Promise.all([\n        this.getSymbolMarketData(symbol),\n        this.getUserPortfolioContext(orderData.userId || 'unknown')\n      ]);\n\n      // Calculate order value and risk exposure\n      const orderValue = Math.abs(quantity * price);\n      const riskAmount = stopLossPrice ? \n        Math.abs((price - stopLossPrice) * quantity) : \n        orderValue * 0.1; // 10% default risk if no stop loss\n\n      // Calculate order-specific risk factors\n      const risks = {\n        // Market Risk: Based on symbol volatility and market conditions\n        marketRisk: this.calculateOrderMarketRisk(marketData),\n        \n        // Position Size Risk: Order size relative to portfolio\n        positionSizeRisk: this.calculatePositionSizeRisk(orderValue, portfolioContext.totalValue),\n        \n        // Liquidity Risk: Based on volume and spread\n        liquidityRisk: this.calculateOrderLiquidityRisk(marketData),\n        \n        // Concentration Risk: Symbol exposure relative to portfolio\n        concentrationRisk: this.calculateOrderConcentrationRisk(symbol, portfolioContext),\n        \n        // Risk/Reward Ratio\n        riskRewardRatio: stopLossPrice ? Math.abs(price - stopLossPrice) / (price * 0.05) : 5\n      };\n\n      // Calculate overall order risk score (0-100)\n      const overallRisk = this.calculateOverallOrderRisk(risks);\n\n      // Determine risk approval status\n      const approval = this.determineOrderApproval(overallRisk, risks, orderData);\n\n      const result = {\n        orderRiskScore: overallRisk,\n        riskAmount: riskAmount,\n        orderValue: orderValue,\n        risks: risks,\n        approval: approval,\n        recommendations: this.getOrderRecommendations(risks, approval),\n        calculatedAt: new Date().toISOString()\n      };\n\n      console.log(`✅ Order risk calculated: Score=${overallRisk}, Approved=${approval.approved}`);\n      return result;\n\n    } catch (error) {\n      console.error('❌ Order risk calculation failed:', error.message);\n      \n      // Return high-risk result to prevent dangerous orders\n      return {\n        orderRiskScore: 95,\n        riskAmount: orderData.quantity * orderData.price,\n        orderValue: orderData.quantity * orderData.price,\n        risks: { calculationError: true },\n        approval: { \n          approved: false, \n          reason: 'Risk calculation failed - order rejected for safety',\n          requiresManualReview: true \n        },\n        recommendations: ['Risk calculation failed - manual review required'],\n        calculatedAt: new Date().toISOString(),\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Calculate market risk for specific order\n   */\n  calculateOrderMarketRisk(marketData) {\n    if (!marketData) return 75; // High risk if no data\n    \n    let risk = 0;\n    \n    // Volatility-based risk\n    const volatility = marketData.volatility || 0.3;\n    if (volatility > 0.5) risk += 30;\n    else if (volatility > 0.3) risk += 20;\n    else if (volatility > 0.2) risk += 10;\n    \n    // Spread-based risk\n    const spread = marketData.spread || 0.05;\n    if (spread > 0.05) risk += 20;\n    else if (spread > 0.02) risk += 10;\n    \n    return Math.min(100, risk);\n  }\n\n  /**\n   * Calculate position size risk relative to portfolio\n   */\n  calculatePositionSizeRisk(orderValue, portfolioValue) {\n    if (!portfolioValue || portfolioValue === 0) return 50; // Medium risk if unknown\n    \n    const positionPercent = (orderValue / portfolioValue) * 100;\n    \n    if (positionPercent > 20) return 90;      // Very high risk\n    else if (positionPercent > 10) return 60; // High risk\n    else if (positionPercent > 5) return 30;  // Medium risk\n    else return 10;                           // Low risk\n  }\n\n  /**\n   * Calculate order liquidity risk\n   */\n  calculateOrderLiquidityRisk(marketData) {\n    if (!marketData) return 60;\n    \n    const avgVolume = marketData.avgVolume || 0;\n    const spread = marketData.spread || 0.05;\n    \n    let risk = 0;\n    \n    // Volume-based liquidity risk\n    if (avgVolume < 50000) risk += 40;\n    else if (avgVolume < 200000) risk += 25;\n    else if (avgVolume < 500000) risk += 15;\n    \n    // Spread-based liquidity risk\n    if (spread > 0.1) risk += 30;\n    else if (spread > 0.05) risk += 20;\n    else if (spread > 0.02) risk += 10;\n    \n    return Math.min(100, risk);\n  }\n\n  /**\n   * Calculate concentration risk for order\n   */\n  calculateOrderConcentrationRisk(symbol, portfolioContext) {\n    if (!portfolioContext.positions) return 20;\n    \n    const existingPosition = portfolioContext.positions.find(p => p.symbol === symbol);\n    if (!existingPosition) return 10; // New position - lower concentration risk\n    \n    const currentWeight = (existingPosition.marketValue / portfolioContext.totalValue) * 100;\n    \n    if (currentWeight > 15) return 80;\n    else if (currentWeight > 10) return 50;\n    else if (currentWeight > 5) return 25;\n    else return 10;\n  }\n\n  /**\n   * Calculate overall order risk score\n   */\n  calculateOverallOrderRisk(risks) {\n    const weights = {\n      marketRisk: 0.25,\n      positionSizeRisk: 0.30,\n      liquidityRisk: 0.20,\n      concentrationRisk: 0.25\n    };\n\n    let weightedRisk = 0;\n    for (const [riskType, risk] of Object.entries(risks)) {\n      if (weights[riskType]) {\n        weightedRisk += risk * weights[riskType];\n      }\n    }\n\n    return Math.min(100, Math.max(0, weightedRisk));\n  }\n\n  /**\n   * Determine if order should be approved based on risk\n   */\n  determineOrderApproval(overallRisk, risks, orderData) {\n    // Automatic rejection criteria\n    if (overallRisk > 85) {\n      return {\n        approved: false,\n        reason: 'Overall risk too high',\n        requiresManualReview: true\n      };\n    }\n\n    if (risks.positionSizeRisk > 80) {\n      return {\n        approved: false,\n        reason: 'Position size too large relative to portfolio',\n        requiresManualReview: true\n      };\n    }\n\n    if (risks.liquidityRisk > 70) {\n      return {\n        approved: false,\n        reason: 'Insufficient liquidity for safe execution',\n        requiresManualReview: false\n      };\n    }\n\n    // Conditional approval\n    if (overallRisk > 60) {\n      return {\n        approved: true,\n        reason: 'Approved with warnings - monitor closely',\n        warnings: ['High risk order - consider reducing size', 'Monitor execution carefully']\n      };\n    }\n\n    // Standard approval\n    return {\n      approved: true,\n      reason: 'Risk within acceptable parameters',\n      warnings: []\n    };\n  }\n\n  /**\n   * Get order recommendations based on risk analysis\n   */\n  getOrderRecommendations(risks, approval) {\n    const recommendations = [];\n\n    if (!approval.approved) {\n      recommendations.push('Order rejected due to excessive risk');\n      recommendations.push('Consider reducing position size or waiting for better market conditions');\n      return recommendations;\n    }\n\n    if (risks.positionSizeRisk > 50) {\n      recommendations.push('Consider reducing position size to manage risk');\n    }\n\n    if (risks.liquidityRisk > 40) {\n      recommendations.push('Monitor order execution closely due to liquidity concerns');\n    }\n\n    if (risks.marketRisk > 50) {\n      recommendations.push('High market volatility - consider using limit orders');\n    }\n\n    if (risks.concentrationRisk > 30) {\n      recommendations.push('Adding to existing position - monitor concentration risk');\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('Order risk within normal parameters');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get symbol market data (placeholder - integrate with real data source)\n   */\n  async getSymbolMarketData(symbol) {\n    try {\n      // In production, this would fetch real market data\n      // For now, return reasonable defaults\n      return {\n        symbol: symbol,\n        volatility: 0.25,\n        avgVolume: 1000000,\n        spread: 0.01,\n        price: 100,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error(`Failed to get market data for ${symbol}:`, error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Get user portfolio context (placeholder - integrate with portfolio service)\n   */\n  async getUserPortfolioContext(userId) {\n    try {\n      // In production, this would fetch user's current portfolio\n      // For now, return safe defaults\n      return {\n        totalValue: 100000,\n        positions: [],\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error(`Failed to get portfolio context for user ${userId}:`, error.message);\n      return {\n        totalValue: 0,\n        positions: []\n      };\n    }\n  }\n}\n\nmodule.exports = RiskCalculator;"],"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","ignoreList":[]}