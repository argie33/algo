{"version":3,"names":["cov_1xpb078we8","actualCoverage","query","s","require","createLogger","MarketAnalyticsEngine","constructor","f","logger","correlationId","generateCorrelationId","config","sectorRotationLookback","momentumLookback","volatilityLookback","correlationLookback","marketRegimeLookback","anomalyDetectionThreshold","liquidityThreshold","Date","now","Math","random","toString","substr","generateMarketAnalytics","analysisType","b","startTime","info","analytics","marketOverview","generateMarketOverview","sectorAnalysis","generateSectorAnalysis","marketSentiment","generateMarketSentiment","volatilityAnalysis","generateVolatilityAnalysis","momentumAnalysis","generateMomentumAnalysis","correlationAnalysis","generateCorrelationAnalysis","marketRegime","detectMarketRegime","anomalyDetection","detectMarketAnomalies","liquidityAnalysis","generateLiquidityAnalysis","riskAssessment","generateRiskAssessment","processingTime","sectionsGenerated","Object","keys","length","success","metadata","timestamp","toISOString","error","message","createEmptyAnalyticsResponse","marketIndices","getMarketIndicesData","marketBreadth","calculateMarketBreadth","volumeAnalysis","calculateVolumeAnalysis","fearGreedIndex","calculateFearGreedIndex","indices","breadth","volume","marketStatus","determineMarketStatus","summary","generateMarketSummary","sectorPerformance","getSectorPerformanceData","sectorRotation","calculateSectorRotation","sectorLeadersLaggards","identifySectorLeadersLaggards","sectorMomentum","calculateSectorMomentum","performance","rotation","leadersLaggards","momentum","recommendations","generateSectorRecommendations","sentimentIndicators","getSentimentIndicators","putCallRatio","calculatePutCallRatio","vixAnalysis","getVIXAnalysis","insiderSentiment","calculateInsiderSentiment","overallSentiment","calculateOverallSentiment","indicators","vix","interpretation","interpretSentiment","realizedVolatility","calculateRealizedVolatility","impliedVolatility","getImpliedVolatility","volatilityTermStructure","calculateVolatilityTermStructure","volatilityRegime","identifyVolatilityRegime","realized","implied","termStructure","regime","analysis","analyzeVolatilityEnvironment","priceMomentum","calculatePriceMomentum","earningsMomentum","calculateEarningsMomentum","relativeStrength","calculateRelativeStrength","momentumStocks","identifyMomentumStocks","price","earnings","topStocks","strategy","generateMomentumStrategy","assetCorrelations","calculateAssetCorrelations","sectorCorrelations","calculateSectorCorrelations","rollingCorrelations","calculateRollingCorrelations","correlationClusters","identifyCorrelationClusters","assets","sectors","rolling","clusters","diversificationOpportunities","identifyDiversificationOpportunities","marketData","getMarketDataForRegimeDetection","regimeIndicators","calculateRegimeIndicators","currentRegime","detectCurrentRegime","regimeProbabilities","calculateRegimeProbabilities","current","probabilities","history","getRegimeHistory","implications","getRegimeImplications","getMarketDataForAnomalyDetection","priceAnomalies","detectPriceAnomalies","volumeAnomalies","detectVolumeAnomalies","volatilityAnomalies","detectVolatilityAnomalies","correlationAnomalies","detectCorrelationAnomalies","volatility","correlation","summarizeAnomalies","liquidityMetrics","calculateLiquidityMetrics","liquidityFlow","analyzeLiquidityFlow","bidAskSpreads","calculateBidAskSpreads","marketDepth","analyzeMarketDepth","metrics","flow","spreads","depth","assessment","assessLiquidityEnvironment","systematicRisk","calculateSystematicRisk","tailRisk","calculateTailRisk","creditRisk","calculateCreditRisk","liquidityRisk","calculateLiquidityRisk","overallRiskScore","calculateOverallRiskScore","systematic","tail","credit","liquidity","overall","generateRiskRecommendations","spx","value","change","nasdaq","dow","russell2000","advanceDeclineRatio","newHighsNewLows","upVolumeDownVolume","bullishPercent","totalVolume","avgVolume","volumeRatio","distributionDays","accumulationDays","status","components","stockPriceStrength","stockPriceBreadth","safeHavenDemand","junkBondDemand","marketMomentum","trend","strength","participation","outlook","technology","return","beta","healthcare","financials","energy","utilities","emerging","declining","rotation_strength","entries","map","name","data","leaders","sort","a","slice","laggards","sector","recommendation","rationale","bullishSentiment","bearishSentiment","neutralSentiment","ratio","average","percentile","buyRatio","sellRatio","netSentiment","putCall","insider","score","level","confidence","sentiment","daily","monthly","annual","skew","term","short","medium","long","environment","shortTerm","mediumTerm","longTerm","revisions","surprises","guidance","vs_market","vs_sector","symbol","stocks","range","tech_health","tech_finance","correlations","cluster","pair","volatility_regime","trend_regime","bull","bear","neutral","date","risk","prices","volumes","volatilities","anomaly","significance","total","severity","turnover","impact","resilience","net_flow","direction","median","imbalance","quality","exposure","var_95","var_99","expected_shortfall","spread","rating","default_probability","bid_ask","market_impact","time_to_liquidate","riskScore","module","exports"],"sources":["marketAnalyticsEngine.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\n\nclass MarketAnalyticsEngine {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'market-analytics');\n    this.correlationId = this.generateCorrelationId();\n    \n    // Market analytics configuration\n    this.config = {\n      sectorRotationLookback: 30, // days\n      momentumLookback: 20, // days\n      volatilityLookback: 252, // days (1 year)\n      correlationLookback: 90, // days\n      marketRegimeLookback: 60, // days\n      anomalyDetectionThreshold: 2.5, // standard deviations\n      liquidityThreshold: 1000000 // minimum daily volume\n    };\n  }\n\n  generateCorrelationId() {\n    return `market-analytics-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate comprehensive market analytics\n   */\n  async generateMarketAnalytics(analysisType = 'comprehensive') {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info('Starting market analytics generation', {\n        analysisType,\n        correlationId: this.correlationId\n      });\n\n      const analytics = {};\n      \n      // Market Overview\n      if (analysisType === 'comprehensive' || analysisType === 'overview') {\n        analytics.marketOverview = await this.generateMarketOverview();\n      }\n      \n      // Sector Analysis\n      if (analysisType === 'comprehensive' || analysisType === 'sector') {\n        analytics.sectorAnalysis = await this.generateSectorAnalysis();\n      }\n      \n      // Market Sentiment\n      if (analysisType === 'comprehensive' || analysisType === 'sentiment') {\n        analytics.marketSentiment = await this.generateMarketSentiment();\n      }\n      \n      // Volatility Analysis\n      if (analysisType === 'comprehensive' || analysisType === 'volatility') {\n        analytics.volatilityAnalysis = await this.generateVolatilityAnalysis();\n      }\n      \n      // Momentum Analysis\n      if (analysisType === 'comprehensive' || analysisType === 'momentum') {\n        analytics.momentumAnalysis = await this.generateMomentumAnalysis();\n      }\n      \n      // Correlation Analysis\n      if (analysisType === 'comprehensive' || analysisType === 'correlation') {\n        analytics.correlationAnalysis = await this.generateCorrelationAnalysis();\n      }\n      \n      // Market Regime Detection\n      if (analysisType === 'comprehensive' || analysisType === 'regime') {\n        analytics.marketRegime = await this.detectMarketRegime();\n      }\n      \n      // Anomaly Detection\n      if (analysisType === 'comprehensive' || analysisType === 'anomaly') {\n        analytics.anomalyDetection = await this.detectMarketAnomalies();\n      }\n      \n      // Liquidity Analysis\n      if (analysisType === 'comprehensive' || analysisType === 'liquidity') {\n        analytics.liquidityAnalysis = await this.generateLiquidityAnalysis();\n      }\n      \n      // Risk Assessment\n      if (analysisType === 'comprehensive' || analysisType === 'risk') {\n        analytics.riskAssessment = await this.generateRiskAssessment();\n      }\n      \n      const processingTime = Date.now() - startTime;\n      \n      this.logger.info('Market analytics generation completed', {\n        analysisType,\n        sectionsGenerated: Object.keys(analytics).length,\n        processingTime,\n        correlationId: this.correlationId\n      });\n\n      return {\n        success: true,\n        analytics,\n        metadata: {\n          analysisType,\n          processingTime,\n          correlationId: this.correlationId,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Market analytics generation failed', {\n        analysisType,\n        error: error.message,\n        correlationId: this.correlationId,\n        processingTime: Date.now() - startTime\n      });\n      \n      return this.createEmptyAnalyticsResponse(error.message);\n    }\n  }\n\n  /**\n   * Generate market overview\n   */\n  async generateMarketOverview() {\n    try {\n      // Get market indices data\n      const marketIndices = await this.getMarketIndicesData();\n      \n      // Calculate market breadth\n      const marketBreadth = await this.calculateMarketBreadth();\n      \n      // Get volume analysis\n      const volumeAnalysis = await this.calculateVolumeAnalysis();\n      \n      // Calculate fear & greed index\n      const fearGreedIndex = await this.calculateFearGreedIndex();\n      \n      return {\n        indices: marketIndices,\n        breadth: marketBreadth,\n        volume: volumeAnalysis,\n        fearGreedIndex,\n        marketStatus: this.determineMarketStatus(marketIndices, marketBreadth),\n        summary: this.generateMarketSummary(marketIndices, marketBreadth, volumeAnalysis)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate market overview', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate sector analysis\n   */\n  async generateSectorAnalysis() {\n    try {\n      // Get sector performance data\n      const sectorPerformance = await this.getSectorPerformanceData();\n      \n      // Calculate sector rotation\n      const sectorRotation = await this.calculateSectorRotation();\n      \n      // Identify sector leaders and laggards\n      const sectorLeadersLaggards = this.identifySectorLeadersLaggards(sectorPerformance);\n      \n      // Generate sector momentum\n      const sectorMomentum = await this.calculateSectorMomentum();\n      \n      return {\n        performance: sectorPerformance,\n        rotation: sectorRotation,\n        leadersLaggards: sectorLeadersLaggards,\n        momentum: sectorMomentum,\n        recommendations: this.generateSectorRecommendations(sectorPerformance, sectorRotation)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate sector analysis', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate market sentiment analysis\n   */\n  async generateMarketSentiment() {\n    try {\n      // Get sentiment indicators\n      const sentimentIndicators = await this.getSentimentIndicators();\n      \n      // Calculate put/call ratio\n      const putCallRatio = await this.calculatePutCallRatio();\n      \n      // Get VIX analysis\n      const vixAnalysis = await this.getVIXAnalysis();\n      \n      // Calculate insider trading sentiment\n      const insiderSentiment = await this.calculateInsiderSentiment();\n      \n      // Aggregate sentiment score\n      const overallSentiment = this.calculateOverallSentiment(\n        sentimentIndicators,\n        putCallRatio,\n        vixAnalysis,\n        insiderSentiment\n      );\n      \n      return {\n        indicators: sentimentIndicators,\n        putCallRatio,\n        vix: vixAnalysis,\n        insiderSentiment,\n        overallSentiment,\n        interpretation: this.interpretSentiment(overallSentiment)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate market sentiment', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate volatility analysis\n   */\n  async generateVolatilityAnalysis() {\n    try {\n      // Calculate realized volatility\n      const realizedVolatility = await this.calculateRealizedVolatility();\n      \n      // Get implied volatility\n      const impliedVolatility = await this.getImpliedVolatility();\n      \n      // Calculate volatility term structure\n      const volatilityTermStructure = await this.calculateVolatilityTermStructure();\n      \n      // Identify volatility regime\n      const volatilityRegime = this.identifyVolatilityRegime(realizedVolatility, impliedVolatility);\n      \n      return {\n        realized: realizedVolatility,\n        implied: impliedVolatility,\n        termStructure: volatilityTermStructure,\n        regime: volatilityRegime,\n        analysis: this.analyzeVolatilityEnvironment(realizedVolatility, impliedVolatility)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate volatility analysis', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate momentum analysis\n   */\n  async generateMomentumAnalysis() {\n    try {\n      // Calculate price momentum\n      const priceMomentum = await this.calculatePriceMomentum();\n      \n      // Calculate earnings momentum\n      const earningsMomentum = await this.calculateEarningsMomentum();\n      \n      // Calculate relative strength\n      const relativeStrength = await this.calculateRelativeStrength();\n      \n      // Identify momentum stocks\n      const momentumStocks = await this.identifyMomentumStocks();\n      \n      return {\n        price: priceMomentum,\n        earnings: earningsMomentum,\n        relativeStrength,\n        topStocks: momentumStocks,\n        strategy: this.generateMomentumStrategy(priceMomentum, momentumStocks)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate momentum analysis', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate correlation analysis\n   */\n  async generateCorrelationAnalysis() {\n    try {\n      // Calculate asset correlations\n      const assetCorrelations = await this.calculateAssetCorrelations();\n      \n      // Calculate sector correlations\n      const sectorCorrelations = await this.calculateSectorCorrelations();\n      \n      // Calculate rolling correlations\n      const rollingCorrelations = await this.calculateRollingCorrelations();\n      \n      // Identify correlation clusters\n      const correlationClusters = this.identifyCorrelationClusters(assetCorrelations);\n      \n      return {\n        assets: assetCorrelations,\n        sectors: sectorCorrelations,\n        rolling: rollingCorrelations,\n        clusters: correlationClusters,\n        diversificationOpportunities: this.identifyDiversificationOpportunities(assetCorrelations)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate correlation analysis', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Detect market regime\n   */\n  async detectMarketRegime() {\n    try {\n      // Get market data for regime detection\n      const marketData = await this.getMarketDataForRegimeDetection();\n      \n      // Calculate regime indicators\n      const regimeIndicators = this.calculateRegimeIndicators(marketData);\n      \n      // Detect current regime\n      const currentRegime = this.detectCurrentRegime(regimeIndicators);\n      \n      // Calculate regime probabilities\n      const regimeProbabilities = this.calculateRegimeProbabilities(regimeIndicators);\n      \n      return {\n        current: currentRegime,\n        probabilities: regimeProbabilities,\n        indicators: regimeIndicators,\n        history: this.getRegimeHistory(marketData),\n        implications: this.getRegimeImplications(currentRegime)\n      };\n    } catch (error) {\n      this.logger.error('Failed to detect market regime', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Detect market anomalies\n   */\n  async detectMarketAnomalies() {\n    try {\n      // Get data for anomaly detection\n      const marketData = await this.getMarketDataForAnomalyDetection();\n      \n      // Detect price anomalies\n      const priceAnomalies = this.detectPriceAnomalies(marketData);\n      \n      // Detect volume anomalies\n      const volumeAnomalies = this.detectVolumeAnomalies(marketData);\n      \n      // Detect volatility anomalies\n      const volatilityAnomalies = this.detectVolatilityAnomalies(marketData);\n      \n      // Detect correlation anomalies\n      const correlationAnomalies = this.detectCorrelationAnomalies(marketData);\n      \n      return {\n        price: priceAnomalies,\n        volume: volumeAnomalies,\n        volatility: volatilityAnomalies,\n        correlation: correlationAnomalies,\n        summary: this.summarizeAnomalies(priceAnomalies, volumeAnomalies, volatilityAnomalies, correlationAnomalies)\n      };\n    } catch (error) {\n      this.logger.error('Failed to detect market anomalies', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate liquidity analysis\n   */\n  async generateLiquidityAnalysis() {\n    try {\n      // Calculate market liquidity metrics\n      const liquidityMetrics = await this.calculateLiquidityMetrics();\n      \n      // Identify liquidity providers and takers\n      const liquidityFlow = await this.analyzeLiquidityFlow();\n      \n      // Calculate bid-ask spreads\n      const bidAskSpreads = await this.calculateBidAskSpreads();\n      \n      // Analyze market depth\n      const marketDepth = await this.analyzeMarketDepth();\n      \n      return {\n        metrics: liquidityMetrics,\n        flow: liquidityFlow,\n        spreads: bidAskSpreads,\n        depth: marketDepth,\n        assessment: this.assessLiquidityEnvironment(liquidityMetrics, bidAskSpreads)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate liquidity analysis', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate risk assessment\n   */\n  async generateRiskAssessment() {\n    try {\n      // Calculate systematic risk\n      const systematicRisk = await this.calculateSystematicRisk();\n      \n      // Calculate tail risk\n      const tailRisk = await this.calculateTailRisk();\n      \n      // Calculate credit risk\n      const creditRisk = await this.calculateCreditRisk();\n      \n      // Calculate liquidity risk\n      const liquidityRisk = await this.calculateLiquidityRisk();\n      \n      // Calculate overall risk score\n      const overallRiskScore = this.calculateOverallRiskScore(\n        systematicRisk,\n        tailRisk,\n        creditRisk,\n        liquidityRisk\n      );\n      \n      return {\n        systematic: systematicRisk,\n        tail: tailRisk,\n        credit: creditRisk,\n        liquidity: liquidityRisk,\n        overall: overallRiskScore,\n        recommendations: this.generateRiskRecommendations(overallRiskScore)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate risk assessment', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  // Helper methods (simplified implementations)\n  async getMarketIndicesData() {\n    // Simplified market indices data\n    return {\n      spx: { value: 4500, change: 0.015, volume: 3500000000 },\n      nasdaq: { value: 14000, change: 0.020, volume: 2800000000 },\n      dow: { value: 35000, change: 0.012, volume: 400000000 },\n      russell2000: { value: 2100, change: 0.008, volume: 1200000000 }\n    };\n  }\n\n  async calculateMarketBreadth() {\n    return {\n      advanceDeclineRatio: 1.2,\n      newHighsNewLows: 0.8,\n      upVolumeDownVolume: 1.5,\n      bullishPercent: 65\n    };\n  }\n\n  async calculateVolumeAnalysis() {\n    return {\n      totalVolume: 12000000000,\n      avgVolume: 10000000000,\n      volumeRatio: 1.2,\n      distributionDays: 3,\n      accumulationDays: 7\n    };\n  }\n\n  async calculateFearGreedIndex() {\n    return {\n      value: 45,\n      status: 'fear',\n      components: {\n        stockPriceStrength: 40,\n        stockPriceBreadth: 35,\n        putCallRatio: 55,\n        volatility: 60,\n        safeHavenDemand: 50,\n        junkBondDemand: 40,\n        marketMomentum: 45\n      }\n    };\n  }\n\n  determineMarketStatus(indices, breadth) {\n    if (breadth.advanceDeclineRatio > 1.5 && indices.spx.change > 0.01) {\n      return 'bullish';\n    } else if (breadth.advanceDeclineRatio < 0.7 && indices.spx.change < -0.01) {\n      return 'bearish';\n    } else {\n      return 'neutral';\n    }\n  }\n\n  generateMarketSummary(indices, breadth, volume) {\n    return {\n      trend: 'upward',\n      strength: 'moderate',\n      participation: 'broad',\n      outlook: 'cautiously optimistic'\n    };\n  }\n\n  async getSectorPerformanceData() {\n    // Simplified sector performance data\n    return {\n      technology: { return: 0.15, volatility: 0.25, beta: 1.2 },\n      healthcare: { return: 0.08, volatility: 0.18, beta: 0.9 },\n      financials: { return: 0.12, volatility: 0.30, beta: 1.4 },\n      energy: { return: 0.25, volatility: 0.40, beta: 1.8 },\n      utilities: { return: 0.04, volatility: 0.12, beta: 0.6 }\n    };\n  }\n\n  async calculateSectorRotation() {\n    return {\n      current: 'technology',\n      emerging: 'healthcare',\n      declining: 'energy',\n      rotation_strength: 0.7\n    };\n  }\n\n  identifySectorLeadersLaggards(sectorPerformance) {\n    const sectors = Object.entries(sectorPerformance).map(([name, data]) => ({\n      name,\n      ...data\n    }));\n    \n    return {\n      leaders: sectors.sort((a, b) => b.return - a.return).slice(0, 3),\n      laggards: sectors.sort((a, b) => a.return - b.return).slice(0, 3)\n    };\n  }\n\n  async calculateSectorMomentum() {\n    return {\n      technology: 0.8,\n      healthcare: 0.6,\n      financials: 0.4,\n      energy: -0.2,\n      utilities: 0.1\n    };\n  }\n\n  generateSectorRecommendations(performance, rotation) {\n    return [\n      {\n        sector: 'technology',\n        recommendation: 'overweight',\n        rationale: 'Strong momentum and rotation support'\n      },\n      {\n        sector: 'healthcare',\n        recommendation: 'neutral',\n        rationale: 'Stable performance with defensive characteristics'\n      },\n      {\n        sector: 'energy',\n        recommendation: 'underweight',\n        rationale: 'Cyclical decline and rotation away'\n      }\n    ];\n  }\n\n  // More simplified helper methods...\n  async getSentimentIndicators() {\n    return {\n      bullishSentiment: 0.55,\n      bearishSentiment: 0.30,\n      neutralSentiment: 0.15\n    };\n  }\n\n  async calculatePutCallRatio() {\n    return {\n      ratio: 0.85,\n      interpretation: 'neutral',\n      trend: 'increasing'\n    };\n  }\n\n  async getVIXAnalysis() {\n    return {\n      current: 18.5,\n      average: 20.0,\n      percentile: 45,\n      trend: 'declining'\n    };\n  }\n\n  async calculateInsiderSentiment() {\n    return {\n      buyRatio: 0.60,\n      sellRatio: 0.40,\n      netSentiment: 0.20\n    };\n  }\n\n  calculateOverallSentiment(indicators, putCall, vix, insider) {\n    return {\n      score: 0.55,\n      level: 'neutral',\n      confidence: 0.75\n    };\n  }\n\n  interpretSentiment(sentiment) {\n    return {\n      interpretation: 'Market sentiment is neutral with slight bullish bias',\n      implications: 'Expect continued volatility with upward bias',\n      recommendations: ['Monitor key support levels', 'Be prepared for breakout']\n    };\n  }\n\n  createEmptyAnalyticsResponse(message) {\n    return {\n      success: false,\n      message,\n      analytics: null,\n      metadata: {\n        correlationId: this.correlationId,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n\n  // Additional simplified helper methods for completeness\n  async calculateRealizedVolatility() { return { daily: 0.015, monthly: 0.055, annual: 0.18 }; }\n  async getImpliedVolatility() { return { level: 0.20, skew: 0.05, term: 0.18 }; }\n  async calculateVolatilityTermStructure() { return { short: 0.18, medium: 0.20, long: 0.22 }; }\n  identifyVolatilityRegime(realized, implied) { return { regime: 'normal', confidence: 0.8 }; }\n  analyzeVolatilityEnvironment(realized, implied) { return { environment: 'stable', outlook: 'neutral' }; }\n  \n  async calculatePriceMomentum() { return { shortTerm: 0.05, mediumTerm: 0.12, longTerm: 0.18 }; }\n  async calculateEarningsMomentum() { return { revisions: 0.08, surprises: 0.65, guidance: 0.70 }; }\n  async calculateRelativeStrength() { return { vs_market: 1.15, vs_sector: 1.08, percentile: 75 }; }\n  async identifyMomentumStocks() { return [{ symbol: 'AAPL', momentum: 0.85 }, { symbol: 'MSFT', momentum: 0.82 }]; }\n  generateMomentumStrategy(momentum, stocks) { return { strategy: 'buy_momentum', confidence: 0.75 }; }\n  \n  async calculateAssetCorrelations() { return { average: 0.65, range: [0.20, 0.90] }; }\n  async calculateSectorCorrelations() { return { tech_health: 0.45, tech_finance: 0.70 }; }\n  async calculateRollingCorrelations() { return { trend: 'increasing', volatility: 0.15 }; }\n  identifyCorrelationClusters(correlations) { return [{ cluster: 'tech', correlation: 0.85 }]; }\n  identifyDiversificationOpportunities(correlations) { return [{ pair: 'tech_utilities', correlation: 0.25 }]; }\n  \n  async getMarketDataForRegimeDetection() { return { volatility: 0.18, trend: 0.12, momentum: 0.08 }; }\n  calculateRegimeIndicators(data) { return { volatility_regime: 'normal', trend_regime: 'upward' }; }\n  detectCurrentRegime(indicators) { return { regime: 'bull_market', confidence: 0.80 }; }\n  calculateRegimeProbabilities(indicators) { return { bull: 0.70, bear: 0.20, neutral: 0.10 }; }\n  getRegimeHistory(data) { return [{ date: '2024-01-01', regime: 'bull' }]; }\n  getRegimeImplications(regime) { return { strategy: 'aggressive_growth', risk: 'moderate' }; }\n  \n  async getMarketDataForAnomalyDetection() { return { prices: [], volumes: [], volatilities: [] }; }\n  detectPriceAnomalies(data) { return [{ symbol: 'AAPL', anomaly: 'gap_up', significance: 2.5 }]; }\n  detectVolumeAnomalies(data) { return [{ symbol: 'MSFT', anomaly: 'volume_spike', significance: 3.0 }]; }\n  detectVolatilityAnomalies(data) { return [{ symbol: 'TSLA', anomaly: 'vol_spike', significance: 2.8 }]; }\n  detectCorrelationAnomalies(data) { return [{ pair: 'AAPL_MSFT', anomaly: 'correlation_break', significance: 2.2 }]; }\n  summarizeAnomalies(price, volume, volatility, correlation) { return { total: 4, severity: 'moderate' }; }\n  \n  async calculateLiquidityMetrics() { return { turnover: 0.8, impact: 0.02, resilience: 0.9 }; }\n  async analyzeLiquidityFlow() { return { net_flow: 1000000, direction: 'inflow' }; }\n  async calculateBidAskSpreads() { return { average: 0.01, median: 0.008, volatility: 0.003 }; }\n  async analyzeMarketDepth() { return { depth: 1000000, imbalance: 0.1 }; }\n  assessLiquidityEnvironment(metrics, spreads) { return { environment: 'normal', quality: 'good' }; }\n  \n  async calculateSystematicRisk() { return { beta: 1.2, correlation: 0.85, exposure: 0.75 }; }\n  async calculateTailRisk() { return { var_95: 0.025, var_99: 0.045, expected_shortfall: 0.055 }; }\n  async calculateCreditRisk() { return { spread: 0.015, rating: 'BBB', default_probability: 0.005 }; }\n  async calculateLiquidityRisk() { return { bid_ask: 0.01, market_impact: 0.02, time_to_liquidate: 2 }; }\n  calculateOverallRiskScore(systematic, tail, credit, liquidity) { return { score: 0.65, level: 'moderate' }; }\n  generateRiskRecommendations(riskScore) { return ['Maintain diversification', 'Monitor volatility']; }\n}\n\nmodule.exports = MarketAnalyticsEngine;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}