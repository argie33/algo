{"version":3,"names":["cov_2n9estnvby","actualCoverage","express","s","require","authenticateToken","createValidationMiddleware","sanitizers","RiskManager","AlpacaService","apiKeyService","logger","responseFormatter","router","Router","use","riskManager","riskValidationSchemas","positionSize","symbol","required","type","sanitizer","value","f","string","maxLength","trim","validator","test","errorMessage","direction","includes","toLowerCase","portfolioValue","number","min","max","b","riskPerTrade","defaultValue","maxPositionSize","stopLoss","entryPrice","post","req","res","requestId","locals","startTime","Date","now","userId","user","sub","validated","info","substring","actualPortfolioValue","credentials","getDecryptedApiKey","alpacaService","apiKey","apiSecret","isSandbox","account","getAccount","parseFloat","portfolio_value","response","error","status","json","positionSizing","calculatePositionSize","volatilityAdjustment","correlationAdjustment","responseData","recommendedSize","positionValue","riskAmount","maxLoss","riskMetrics","adjustments","limits","recommendation","metadata","processingTime","timestamp","toISOString","success","riskScore","overallRiskScore","totalTime","message","errorStack","stack","details","stopLossLevels","calculateStopLossTakeProfit","takeProfit","levels","stopLossDistance","takeProfitDistance","riskRewardRatio","maxRiskAmount","prices","entry","percentages","stopLossPercent","toFixed","takeProfitPercent","get","portfolioComposition","getPortfolioComposition","portfolioRisk","calculatePortfolioRisk","positionCount","Object","keys","length","diversificationScore","Math","totalValue","values","reduce","sum","concentrations","entries","map","concentration","sort","a","riskLevel","slice","diversificationRisk","concentrationRisk","recommendations","generatePortfolioRecommendations","maxConcentration","riskSettings","defaultRiskPerTrade","maxRiskPerTrade","defaultMaxPositionSize","concentrationLimits","maxSinglePosition","maxSectorExposure","stopLossSettings","defaultStopLoss","maxStopLoss","defaultTakeProfit","defaultRiskRewardRatio","minRiskRewardRatio","maxRiskRewardRatio","riskLevels","low","threshold","description","moderate","high","extreme","diversificationTargets","minPositions","optimalPositions","maxPositions","minSectors","optimalSectors","push","priority","target","module","exports"],"sources":["risk-management.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst RiskManager = require('../utils/riskManager');\nconst AlpacaService = require('../utils/alpacaService');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst logger = require('../utils/logger');\nconst { responseFormatter } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n// Apply authentication middleware to all routes\nrouter.use(authenticateToken);\n\n// Initialize risk manager\nconst riskManager = new RiskManager();\n\n// Validation schemas for risk management endpoints\nconst riskValidationSchemas = {\n  positionSize: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    direction: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => ['buy', 'sell', 'long', 'short'].includes(value.toLowerCase()),\n      errorMessage: 'Direction must be buy, sell, long, or short'\n    },\n    portfolioValue: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 1000, max: 100000000 }),\n      validator: (value) => !value || (value >= 1000 && value <= 100000000),\n      errorMessage: 'Portfolio value must be between 1,000 and 100,000,000'\n    },\n    riskPerTrade: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0.001, max: 0.1, defaultValue: 0.02 }),\n      validator: (value) => !value || (value >= 0.001 && value <= 0.1),\n      errorMessage: 'Risk per trade must be between 0.1% and 10%'\n    },\n    maxPositionSize: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0.01, max: 0.5, defaultValue: 0.1 }),\n      validator: (value) => !value || (value >= 0.01 && value <= 0.5),\n      errorMessage: 'Max position size must be between 1% and 50%'\n    }\n  },\n  \n  stopLoss: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    entryPrice: {\n      required: true,\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0.01, max: 100000 }),\n      validator: (value) => value >= 0.01 && value <= 100000,\n      errorMessage: 'Entry price must be between 0.01 and 100,000'\n    },\n    direction: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => ['long', 'short'].includes(value.toLowerCase()),\n      errorMessage: 'Direction must be long or short'\n    }\n  }\n};\n\n// Calculate position size based on risk management\nrouter.post('/position-size', createValidationMiddleware(riskValidationSchemas.positionSize), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbol, direction, portfolioValue, riskPerTrade = 0.02, maxPositionSize = 0.1 } = req.validated;\n    \n    logger.info(`üéØ [${requestId}] Calculating position size`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbol: symbol,\n      direction: direction,\n      portfolioValue: portfolioValue,\n      riskPerTrade: riskPerTrade,\n      maxPositionSize: maxPositionSize\n    });\n\n    // Get user's portfolio value if not provided\n    let actualPortfolioValue = portfolioValue;\n    if (!actualPortfolioValue) {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      if (credentials) {\n        const alpacaService = new AlpacaService(credentials.apiKey, credentials.apiSecret, credentials.isSandbox);\n        const account = await alpacaService.getAccount();\n        actualPortfolioValue = parseFloat(account.portfolio_value);\n      } else {\n        const response = responseFormatter.error('Portfolio value required when no API credentials available', 400);\n        return res.status(400).json(response);\n      }\n    }\n\n    // Calculate position size using risk manager\n    const positionSizing = await riskManager.calculatePositionSize({\n      userId: userId,\n      symbol: symbol,\n      portfolioValue: actualPortfolioValue,\n      riskPerTrade: riskPerTrade,\n      maxPositionSize: maxPositionSize,\n      volatilityAdjustment: true,\n      correlationAdjustment: true\n    });\n\n    // Prepare response data\n    const responseData = {\n      symbol: symbol,\n      direction: direction,\n      portfolioValue: actualPortfolioValue,\n      positionSizing: {\n        recommendedSize: positionSizing.recommendedSize,\n        positionValue: positionSizing.positionValue,\n        riskAmount: positionSizing.riskAmount,\n        maxLoss: positionSizing.maxLoss\n      },\n      riskMetrics: positionSizing.riskMetrics,\n      adjustments: positionSizing.adjustments,\n      limits: positionSizing.limits,\n      recommendation: positionSizing.recommendation,\n      metadata: {\n        processingTime: positionSizing.processingTime,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'Position size calculated successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Position size calculated`, {\n      symbol: symbol,\n      recommendedSize: positionSizing.recommendedSize,\n      riskScore: positionSizing.riskMetrics.overallRiskScore,\n      recommendation: positionSizing.recommendation.recommendation,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Position size calculation failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to calculate position size',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Calculate stop loss and take profit levels\nrouter.post('/stop-loss', createValidationMiddleware(riskValidationSchemas.stopLoss), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbol, entryPrice, direction } = req.validated;\n    \n    logger.info(`üõ°Ô∏è [${requestId}] Calculating stop loss levels`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbol: symbol,\n      entryPrice: entryPrice,\n      direction: direction\n    });\n\n    // Calculate stop loss and take profit levels\n    const stopLossLevels = await riskManager.calculateStopLossTakeProfit({\n      symbol: symbol,\n      entryPrice: entryPrice,\n      direction: direction,\n      riskPerTrade: 0.02\n    });\n\n    // Prepare response data\n    const responseData = {\n      symbol: symbol,\n      entryPrice: entryPrice,\n      direction: direction,\n      stopLoss: stopLossLevels.stopLoss,\n      takeProfit: stopLossLevels.takeProfit,\n      levels: {\n        stopLossDistance: stopLossLevels.stopLossDistance,\n        takeProfitDistance: stopLossLevels.takeProfitDistance,\n        riskRewardRatio: stopLossLevels.riskRewardRatio,\n        maxRiskAmount: stopLossLevels.maxRiskAmount\n      },\n      prices: {\n        entry: entryPrice,\n        stopLoss: stopLossLevels.stopLoss,\n        takeProfit: stopLossLevels.takeProfit\n      },\n      percentages: {\n        stopLossPercent: direction === 'long' ? \n          ((entryPrice - stopLossLevels.stopLoss) / entryPrice * 100).toFixed(2) :\n          ((stopLossLevels.stopLoss - entryPrice) / entryPrice * 100).toFixed(2),\n        takeProfitPercent: direction === 'long' ? \n          ((stopLossLevels.takeProfit - entryPrice) / entryPrice * 100).toFixed(2) :\n          ((entryPrice - stopLossLevels.takeProfit) / entryPrice * 100).toFixed(2)\n      },\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processingTime: Date.now() - startTime\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'Stop loss levels calculated successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Stop loss levels calculated`, {\n      symbol: symbol,\n      stopLoss: stopLossLevels.stopLoss,\n      takeProfit: stopLossLevels.takeProfit,\n      riskRewardRatio: stopLossLevels.riskRewardRatio,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Stop loss calculation failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to calculate stop loss levels',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get portfolio risk analysis\nrouter.get('/portfolio-analysis', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üìä [${requestId}] Generating portfolio risk analysis`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    });\n\n    // Get user's API credentials\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    if (!credentials) {\n      const response = responseFormatter.error('API credentials required for portfolio analysis', 400);\n      return res.status(400).json(response);\n    }\n\n    // Get portfolio composition\n    const portfolioComposition = await riskManager.getPortfolioComposition(userId);\n    \n    // Calculate portfolio risk metrics\n    const portfolioRisk = await riskManager.calculatePortfolioRisk(portfolioComposition);\n    \n    // Get account information\n    const alpacaService = new AlpacaService(credentials.apiKey, credentials.apiSecret, credentials.isSandbox);\n    const account = await alpacaService.getAccount();\n    const portfolioValue = parseFloat(account.portfolio_value);\n\n    // Calculate position count and diversification\n    const positionCount = Object.keys(portfolioComposition).length;\n    const diversificationScore = Math.min(1.0, positionCount / 20);\n    \n    // Calculate largest position concentration\n    const totalValue = Object.values(portfolioComposition).reduce((sum, value) => sum + value, 0);\n    const concentrations = Object.entries(portfolioComposition)\n      .map(([symbol, value]) => ({\n        symbol: symbol,\n        value: value,\n        concentration: totalValue > 0 ? value / totalValue : 0\n      }))\n      .sort((a, b) => b.concentration - a.concentration);\n\n    // Prepare response data\n    const responseData = {\n      portfolioValue: portfolioValue,\n      positionCount: positionCount,\n      diversificationScore: diversificationScore,\n      portfolioRisk: portfolioRisk,\n      riskLevel: portfolioRisk < 0.3 ? 'low' : portfolioRisk < 0.6 ? 'moderate' : 'high',\n      concentrations: concentrations.slice(0, 10),\n      riskMetrics: {\n        diversificationRisk: 1.0 - diversificationScore,\n        concentrationRisk: concentrations[0]?.concentration || 0,\n        portfolioRisk: portfolioRisk,\n        overallRiskScore: Math.max(portfolioRisk, concentrations[0]?.concentration || 0)\n      },\n      recommendations: this.generatePortfolioRecommendations({\n        positionCount,\n        diversificationScore,\n        portfolioRisk,\n        maxConcentration: concentrations[0]?.concentration || 0\n      }),\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processingTime: Date.now() - startTime\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'Portfolio risk analysis completed successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Portfolio risk analysis completed`, {\n      positionCount: positionCount,\n      portfolioRisk: portfolioRisk,\n      diversificationScore: diversificationScore,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Portfolio risk analysis failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to analyze portfolio risk',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get risk management settings and limits\nrouter.get('/settings', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`‚öôÔ∏è [${requestId}] Fetching risk management settings`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    });\n\n    const riskSettings = {\n      positionSizing: {\n        defaultRiskPerTrade: 0.02,\n        maxRiskPerTrade: 0.1,\n        defaultMaxPositionSize: 0.1,\n        maxPositionSize: 0.5\n      },\n      concentrationLimits: {\n        maxSinglePosition: 0.15,\n        maxSectorExposure: {\n          'Technology': 0.30,\n          'Healthcare': 0.25,\n          'Financial Services': 0.20,\n          'Consumer Discretionary': 0.20,\n          'Industrials': 0.15,\n          'Energy': 0.10,\n          'Materials': 0.10,\n          'Real Estate': 0.10,\n          'Utilities': 0.10,\n          'Consumer Staples': 0.15,\n          'Communication Services': 0.15,\n          'Other': 0.05\n        }\n      },\n      stopLossSettings: {\n        defaultStopLoss: 0.05,\n        maxStopLoss: 0.20,\n        defaultTakeProfit: 0.10,\n        defaultRiskRewardRatio: 2.0,\n        minRiskRewardRatio: 1.0,\n        maxRiskRewardRatio: 5.0\n      },\n      riskLevels: {\n        low: { threshold: 0.3, description: 'Conservative risk profile' },\n        moderate: { threshold: 0.6, description: 'Balanced risk profile' },\n        high: { threshold: 0.8, description: 'Aggressive risk profile' },\n        extreme: { threshold: 1.0, description: 'Very high risk profile' }\n      },\n      diversificationTargets: {\n        minPositions: 10,\n        optimalPositions: 20,\n        maxPositions: 50,\n        minSectors: 5,\n        optimalSectors: 8\n      }\n    };\n\n    const response = responseFormatter.success(riskSettings, 'Risk management settings retrieved successfully');\n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error retrieving risk settings`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve risk management settings',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Helper method for portfolio recommendations\nfunction generatePortfolioRecommendations({ positionCount, diversificationScore, portfolioRisk, maxConcentration }) {\n  const recommendations = [];\n  \n  if (positionCount < 10) {\n    recommendations.push({\n      type: 'diversification',\n      priority: 'high',\n      message: 'Consider adding more positions to improve diversification',\n      target: `Add ${10 - positionCount} more positions`\n    });\n  }\n  \n  if (maxConcentration > 0.15) {\n    recommendations.push({\n      type: 'concentration',\n      priority: 'high',\n      message: 'Reduce concentration in largest position',\n      target: `Reduce largest position to under 15%`\n    });\n  }\n  \n  if (portfolioRisk > 0.7) {\n    recommendations.push({\n      type: 'risk_reduction',\n      priority: 'medium',\n      message: 'Consider reducing overall portfolio risk',\n      target: 'Improve diversification and reduce position sizes'\n    });\n  }\n  \n  if (diversificationScore < 0.5) {\n    recommendations.push({\n      type: 'diversification',\n      priority: 'medium',\n      message: 'Portfolio needs better diversification',\n      target: 'Add positions in different sectors'\n    });\n  }\n  \n  return recommendations;\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}