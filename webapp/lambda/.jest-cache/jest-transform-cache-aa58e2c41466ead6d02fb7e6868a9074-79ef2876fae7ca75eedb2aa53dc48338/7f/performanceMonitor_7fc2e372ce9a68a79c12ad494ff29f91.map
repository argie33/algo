{"version":3,"names":["cov_1qmf8lsb30","actualCoverage","createRequestLogger","s","require","query","PerformanceMonitor","constructor","f","metrics","apiRequests","Map","apiErrors","responseTimeHistogram","dbConnections","dbQueryTimes","dbErrors","memoryUsage","cpuUsage","externalApiCalls","activeRequests","totalRequests","totalErrors","thresholds","apiResponseTime","dbQueryTime","errorRate","logger","startTime","Date","now","alertCallbacks","startBackgroundMonitoring","setInterval","collectSystemMetrics","cleanupOldMetrics","checkPerformanceAlerts","memUsage","process","timestamp","push","rss","heapUsed","heapTotal","external","user","system","length","b","slice","warn","threshold","trackApiRequestStart","method","path","requestId","key","has","set","count","errors","totalResponseTime","avgResponseTime","minResponseTime","Infinity","maxResponseTime","recentRequests","requestData","trackApiRequestComplete","statusCode","responseSize","endTime","responseTime","metric","get","Math","min","max","bucket","getResponseTimeBucket","trackDbOperation","operation","table","duration","success","totalTime","avgTime","minTime","maxTime","recentQueries","trackExternalApiCall","service","endpoint","recentCalls","info","getMetrics","uptime","recentResponseTimes","map","r","reduce","a","memory","api","requests","Object","fromEntries","database","queries","apis","getPerformanceSummary","status","getOverallStatus","used","total","utilization","alerts","getActiveAlerts","memUtilization","type","severity","message","toFixed","value","alertCount","forEach","callback","error","addAlertCallback","fiveMinutesAgo","filter","req","call","storeMetrics","JSON","stringify","performanceMonitor","module","exports"],"sources":["performanceMonitor.js"],"sourcesContent":["/**\n * Real-Time Performance Monitoring System\n * Tracks system performance metrics, API response times, database operations,\n * and provides real-time alerts for performance degradation\n */\n\nconst { createRequestLogger } = require('./logger');\nconst { query } = require('./database');\n\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      // API Performance\n      apiRequests: new Map(),\n      apiErrors: new Map(),\n      responseTimeHistogram: new Map(),\n      \n      // Database Performance\n      dbConnections: new Map(),\n      dbQueryTimes: new Map(),\n      dbErrors: new Map(),\n      \n      // Memory & CPU\n      memoryUsage: [],\n      cpuUsage: [],\n      \n      // External Services\n      externalApiCalls: new Map(),\n      \n      // Real-time counters\n      activeRequests: 0,\n      totalRequests: 0,\n      totalErrors: 0,\n      \n      // Performance thresholds\n      thresholds: {\n        apiResponseTime: 2000, // 2 seconds\n        dbQueryTime: 1000, // 1 second\n        memoryUsage: 512 * 1024 * 1024, // 512MB\n        errorRate: 0.05 // 5%\n      }\n    };\n    \n    this.logger = createRequestLogger('performance-monitor');\n    this.startTime = Date.now();\n    this.alertCallbacks = [];\n    \n    // Start background monitoring\n    this.startBackgroundMonitoring();\n  }\n\n  /**\n   * Start background system monitoring\n   */\n  startBackgroundMonitoring() {\n    // Memory and CPU monitoring every 30 seconds\n    setInterval(() => {\n      this.collectSystemMetrics();\n    }, 30000);\n\n    // Clean up old metrics every 5 minutes\n    setInterval(() => {\n      this.cleanupOldMetrics();\n    }, 300000);\n\n    // Performance alerts check every minute\n    setInterval(() => {\n      this.checkPerformanceAlerts();\n    }, 60000);\n  }\n\n  /**\n   * Collect system metrics\n   */\n  collectSystemMetrics() {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    const timestamp = Date.now();\n    \n    // Memory metrics\n    this.metrics.memoryUsage.push({\n      timestamp,\n      rss: memUsage.rss,\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external\n    });\n    \n    // CPU metrics\n    this.metrics.cpuUsage.push({\n      timestamp,\n      user: cpuUsage.user,\n      system: cpuUsage.system\n    });\n    \n    // Keep only last 100 measurements\n    if (this.metrics.memoryUsage.length > 100) {\n      this.metrics.memoryUsage = this.metrics.memoryUsage.slice(-100);\n    }\n    if (this.metrics.cpuUsage.length > 100) {\n      this.metrics.cpuUsage = this.metrics.cpuUsage.slice(-100);\n    }\n    \n    // Log high memory usage\n    if (memUsage.heapUsed > this.metrics.thresholds.memoryUsage) {\n      this.logger.warn('High memory usage detected', {\n        heapUsed: memUsage.heapUsed,\n        heapTotal: memUsage.heapTotal,\n        threshold: this.metrics.thresholds.memoryUsage\n      });\n    }\n  }\n\n  /**\n   * Track API request start\n   */\n  trackApiRequestStart(method, path, requestId) {\n    const key = `${method}:${path}`;\n    \n    if (!this.metrics.apiRequests.has(key)) {\n      this.metrics.apiRequests.set(key, {\n        count: 0,\n        errors: 0,\n        totalResponseTime: 0,\n        avgResponseTime: 0,\n        minResponseTime: Infinity,\n        maxResponseTime: 0,\n        recentRequests: []\n      });\n    }\n    \n    const requestData = {\n      requestId,\n      startTime: Date.now(),\n      method,\n      path\n    };\n    \n    this.metrics.activeRequests++;\n    this.metrics.totalRequests++;\n    \n    return requestData;\n  }\n\n  /**\n   * Track API request completion\n   */\n  trackApiRequestComplete(requestData, statusCode, responseSize = 0) {\n    const endTime = Date.now();\n    const responseTime = endTime - requestData.startTime;\n    const key = `${requestData.method}:${requestData.path}`;\n    \n    const metric = this.metrics.apiRequests.get(key);\n    if (metric) {\n      metric.count++;\n      metric.totalResponseTime += responseTime;\n      metric.avgResponseTime = metric.totalResponseTime / metric.count;\n      metric.minResponseTime = Math.min(metric.minResponseTime, responseTime);\n      metric.maxResponseTime = Math.max(metric.maxResponseTime, responseTime);\n      \n      // Track recent requests for trend analysis\n      metric.recentRequests.push({\n        timestamp: endTime,\n        responseTime,\n        statusCode,\n        responseSize\n      });\n      \n      // Keep only last 50 requests\n      if (metric.recentRequests.length > 50) {\n        metric.recentRequests = metric.recentRequests.slice(-50);\n      }\n      \n      // Track errors\n      if (statusCode >= 400) {\n        metric.errors++;\n        this.metrics.totalErrors++;\n      }\n    }\n    \n    this.metrics.activeRequests--;\n    \n    // Response time histogram\n    const bucket = this.getResponseTimeBucket(responseTime);\n    if (!this.metrics.responseTimeHistogram.has(bucket)) {\n      this.metrics.responseTimeHistogram.set(bucket, 0);\n    }\n    this.metrics.responseTimeHistogram.set(bucket, \n      this.metrics.responseTimeHistogram.get(bucket) + 1);\n    \n    // Alert on slow responses\n    if (responseTime > this.metrics.thresholds.apiResponseTime) {\n      this.logger.warn('Slow API response detected', {\n        method: requestData.method,\n        path: requestData.path,\n        responseTime,\n        threshold: this.metrics.thresholds.apiResponseTime,\n        requestId: requestData.requestId\n      });\n    }\n  }\n\n  /**\n   * Track database operation\n   */\n  trackDbOperation(operation, table, duration, success = true, requestId = null) {\n    const key = `${operation}:${table}`;\n    \n    if (!this.metrics.dbQueryTimes.has(key)) {\n      this.metrics.dbQueryTimes.set(key, {\n        count: 0,\n        errors: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: Infinity,\n        maxTime: 0,\n        recentQueries: []\n      });\n    }\n    \n    const metric = this.metrics.dbQueryTimes.get(key);\n    metric.count++;\n    metric.totalTime += duration;\n    metric.avgTime = metric.totalTime / metric.count;\n    metric.minTime = Math.min(metric.minTime, duration);\n    metric.maxTime = Math.max(metric.maxTime, duration);\n    \n    metric.recentQueries.push({\n      timestamp: Date.now(),\n      duration,\n      success,\n      requestId\n    });\n    \n    // Keep only last 50 queries\n    if (metric.recentQueries.length > 50) {\n      metric.recentQueries = metric.recentQueries.slice(-50);\n    }\n    \n    if (!success) {\n      metric.errors++;\n    }\n    \n    // Alert on slow queries\n    if (duration > this.metrics.thresholds.dbQueryTime) {\n      this.logger.warn('Slow database query detected', {\n        operation,\n        table,\n        duration,\n        threshold: this.metrics.thresholds.dbQueryTime,\n        requestId\n      });\n    }\n  }\n\n  /**\n   * Track external API call\n   */\n  trackExternalApiCall(service, endpoint, duration, success = true, requestId = null) {\n    const key = `${service}:${endpoint}`;\n    \n    if (!this.metrics.externalApiCalls.has(key)) {\n      this.metrics.externalApiCalls.set(key, {\n        count: 0,\n        errors: 0,\n        totalTime: 0,\n        avgTime: 0,\n        minTime: Infinity,\n        maxTime: 0,\n        recentCalls: []\n      });\n    }\n    \n    const metric = this.metrics.externalApiCalls.get(key);\n    metric.count++;\n    metric.totalTime += duration;\n    metric.avgTime = metric.totalTime / metric.count;\n    metric.minTime = Math.min(metric.minTime, duration);\n    metric.maxTime = Math.max(metric.maxTime, duration);\n    \n    metric.recentCalls.push({\n      timestamp: Date.now(),\n      duration,\n      success,\n      requestId\n    });\n    \n    // Keep only last 50 calls\n    if (metric.recentCalls.length > 50) {\n      metric.recentCalls = metric.recentCalls.slice(-50);\n    }\n    \n    if (!success) {\n      metric.errors++;\n    }\n    \n    this.logger.info(`External API call: ${service}`, {\n      service,\n      endpoint,\n      duration,\n      success,\n      requestId\n    });\n  }\n\n  /**\n   * Get response time bucket for histogram\n   */\n  getResponseTimeBucket(responseTime) {\n    if (responseTime < 100) return '<100ms';\n    if (responseTime < 500) return '100-500ms';\n    if (responseTime < 1000) return '500ms-1s';\n    if (responseTime < 2000) return '1-2s';\n    if (responseTime < 5000) return '2-5s';\n    return '>5s';\n  }\n\n  /**\n   * Get comprehensive performance metrics\n   */\n  getMetrics() {\n    const now = Date.now();\n    const uptime = now - this.startTime;\n    \n    // Calculate error rate\n    const errorRate = this.metrics.totalRequests > 0 ? \n      this.metrics.totalErrors / this.metrics.totalRequests : 0;\n    \n    // Current memory usage\n    const memUsage = process.memoryUsage();\n    \n    // Recent response times\n    const recentResponseTimes = [];\n    for (const [key, metric] of this.metrics.apiRequests) {\n      recentResponseTimes.push(...metric.recentRequests.map(r => r.responseTime));\n    }\n    \n    const avgResponseTime = recentResponseTimes.length > 0 ? \n      recentResponseTimes.reduce((a, b) => a + b, 0) / recentResponseTimes.length : 0;\n    \n    return {\n      timestamp: now,\n      uptime,\n      system: {\n        memory: {\n          rss: memUsage.rss,\n          heapUsed: memUsage.heapUsed,\n          heapTotal: memUsage.heapTotal,\n          external: memUsage.external\n        },\n        activeRequests: this.metrics.activeRequests,\n        totalRequests: this.metrics.totalRequests,\n        totalErrors: this.metrics.totalErrors,\n        errorRate,\n        avgResponseTime\n      },\n      api: {\n        requests: Object.fromEntries(this.metrics.apiRequests),\n        responseTimeHistogram: Object.fromEntries(this.metrics.responseTimeHistogram)\n      },\n      database: {\n        queries: Object.fromEntries(this.metrics.dbQueryTimes)\n      },\n      external: {\n        apis: Object.fromEntries(this.metrics.externalApiCalls)\n      },\n      thresholds: this.metrics.thresholds\n    };\n  }\n\n  /**\n   * Get performance summary\n   */\n  getPerformanceSummary() {\n    const metrics = this.getMetrics();\n    const memUsage = process.memoryUsage();\n    \n    return {\n      status: this.getOverallStatus(metrics),\n      uptime: metrics.uptime,\n      activeRequests: metrics.system.activeRequests,\n      totalRequests: metrics.system.totalRequests,\n      errorRate: metrics.system.errorRate,\n      avgResponseTime: metrics.system.avgResponseTime,\n      memoryUsage: {\n        used: memUsage.heapUsed,\n        total: memUsage.heapTotal,\n        utilization: (memUsage.heapUsed / memUsage.heapTotal) * 100\n      },\n      alerts: this.getActiveAlerts(metrics)\n    };\n  }\n\n  /**\n   * Get overall system status\n   */\n  getOverallStatus(metrics) {\n    const memUtilization = (metrics.system.memory.heapUsed / metrics.system.memory.heapTotal) * 100;\n    \n    if (metrics.system.errorRate > this.metrics.thresholds.errorRate ||\n        metrics.system.avgResponseTime > this.metrics.thresholds.apiResponseTime ||\n        memUtilization > 90) {\n      return 'critical';\n    }\n    \n    if (metrics.system.errorRate > this.metrics.thresholds.errorRate * 0.5 ||\n        metrics.system.avgResponseTime > this.metrics.thresholds.apiResponseTime * 0.7 ||\n        memUtilization > 75) {\n      return 'warning';\n    }\n    \n    return 'healthy';\n  }\n\n  /**\n   * Get active alerts\n   */\n  getActiveAlerts(metrics) {\n    const alerts = [];\n    \n    // High error rate\n    if (metrics.system.errorRate > this.metrics.thresholds.errorRate) {\n      alerts.push({\n        type: 'error_rate',\n        severity: 'critical',\n        message: `Error rate ${(metrics.system.errorRate * 100).toFixed(2)}% exceeds threshold ${(this.metrics.thresholds.errorRate * 100).toFixed(2)}%`,\n        value: metrics.system.errorRate,\n        threshold: this.metrics.thresholds.errorRate\n      });\n    }\n    \n    // Slow response times\n    if (metrics.system.avgResponseTime > this.metrics.thresholds.apiResponseTime) {\n      alerts.push({\n        type: 'response_time',\n        severity: 'warning',\n        message: `Average response time ${metrics.system.avgResponseTime}ms exceeds threshold ${this.metrics.thresholds.apiResponseTime}ms`,\n        value: metrics.system.avgResponseTime,\n        threshold: this.metrics.thresholds.apiResponseTime\n      });\n    }\n    \n    // High memory usage\n    const memUtilization = (metrics.system.memory.heapUsed / metrics.system.memory.heapTotal) * 100;\n    if (memUtilization > 90) {\n      alerts.push({\n        type: 'memory_usage',\n        severity: 'critical',\n        message: `Memory utilization ${memUtilization.toFixed(2)}% is critically high`,\n        value: memUtilization,\n        threshold: 90\n      });\n    }\n    \n    return alerts;\n  }\n\n  /**\n   * Check for performance alerts\n   */\n  checkPerformanceAlerts() {\n    const metrics = this.getMetrics();\n    const alerts = this.getActiveAlerts(metrics);\n    \n    if (alerts.length > 0) {\n      this.logger.warn('Performance alerts detected', {\n        alertCount: alerts.length,\n        alerts: alerts\n      });\n      \n      // Trigger alert callbacks\n      this.alertCallbacks.forEach(callback => {\n        try {\n          callback(alerts, metrics);\n        } catch (error) {\n          this.logger.error('Error in alert callback', { error });\n        }\n      });\n    }\n  }\n\n  /**\n   * Add alert callback\n   */\n  addAlertCallback(callback) {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Clean up old metrics\n   */\n  cleanupOldMetrics() {\n    const fiveMinutesAgo = Date.now() - 300000;\n    \n    // Clean up API request recent data\n    for (const [key, metric] of this.metrics.apiRequests) {\n      metric.recentRequests = metric.recentRequests.filter(\n        req => req.timestamp > fiveMinutesAgo\n      );\n    }\n    \n    // Clean up database query recent data\n    for (const [key, metric] of this.metrics.dbQueryTimes) {\n      metric.recentQueries = metric.recentQueries.filter(\n        query => query.timestamp > fiveMinutesAgo\n      );\n    }\n    \n    // Clean up external API call recent data\n    for (const [key, metric] of this.metrics.externalApiCalls) {\n      metric.recentCalls = metric.recentCalls.filter(\n        call => call.timestamp > fiveMinutesAgo\n      );\n    }\n  }\n\n  /**\n   * Store metrics to database (for historical analysis)\n   */\n  async storeMetrics() {\n    try {\n      const metrics = this.getMetrics();\n      await query(`\n        INSERT INTO performance_metrics (\n          timestamp, uptime, active_requests, total_requests, \n          total_errors, error_rate, avg_response_time, \n          memory_used, memory_total, metrics_data\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n      `, [\n        new Date(metrics.timestamp),\n        metrics.uptime,\n        metrics.system.activeRequests,\n        metrics.system.totalRequests,\n        metrics.system.totalErrors,\n        metrics.system.errorRate,\n        metrics.system.avgResponseTime,\n        metrics.system.memory.heapUsed,\n        metrics.system.memory.heapTotal,\n        JSON.stringify(metrics)\n      ]);\n    } catch (error) {\n      this.logger.error('Failed to store performance metrics', { error });\n    }\n  }\n}\n\n// Global performance monitor instance\nconst performanceMonitor = new PerformanceMonitor();\n\nmodule.exports = {\n  performanceMonitor,\n  PerformanceMonitor\n};"],"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","ignoreList":[]}