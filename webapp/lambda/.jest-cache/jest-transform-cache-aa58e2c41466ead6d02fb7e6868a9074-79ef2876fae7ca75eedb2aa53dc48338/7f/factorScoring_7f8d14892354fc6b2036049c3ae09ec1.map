{"version":3,"names":["cov_bdnn9b9nd","actualCoverage","query","s","require","FactorScoringEngine","constructor","f","factors","debt_to_equity","weight","type","optimal","current_ratio","quick_ratio","interest_coverage","roe","roa","gross_margin","operating_margin","net_margin","revenue_growth","earnings_growth","eps_growth","pe_ratio","range","pb_ratio","ps_ratio","peg_ratio","asset_turnover","inventory_turnover","market_cap","beta","price_momentum_3m","price_momentum_12m","rsi","dividend_yield","dividend_growth","payout_ratio","calculateFactorScore","value","factor","b","undefined","isNaN","calculateHigherBetterScore","calculateLowerBetterScore","calculateOptimalRangeScore","Math","min","max","distanceFromOptimal","abs","maxDistance","calculateCompositeScore","stockData","totalScore","totalWeight","factorScores","factorName","factorConfig","Object","entries","score","compositeScore","round","grade","getGrade","riskLevel","getRiskLevel","recommendation","getRecommendation","debtToEquity","currentRatio","riskScore","getStocksWithFactorScores","filters","whereClause","params","paramIndex","minScore","push","maxScore","sector","minMarketCap","maxMarketCap","stocksQuery","limit","result","stocksWithScores","Promise","all","rows","map","stock","factor_score","isStaleScore","last_updated","scoreData","cacheFactorScore","symbol","risk_level","factor_breakdown","error","console","lastUpdated","oneDayAgo","Date","now","getTopPerformersByFactor","Error","orderBy","factor_name","factor_score_individual","factor_value","getSectorAnalysis","avg_factor_score","relative_strength","calculateRelativeStrength","module","exports"],"sources":["factorScoring.js"],"sourcesContent":["const { query } = require('./database');\n\nclass FactorScoringEngine {\n  constructor() {\n    this.factors = {\n      // Financial Health Factors\n      debt_to_equity: { weight: 0.15, type: 'lower_better', optimal: 0.3 },\n      current_ratio: { weight: 0.12, type: 'higher_better', optimal: 2.0 },\n      quick_ratio: { weight: 0.10, type: 'higher_better', optimal: 1.5 },\n      interest_coverage: { weight: 0.08, type: 'higher_better', optimal: 5.0 },\n      \n      // Profitability Factors\n      roe: { weight: 0.18, type: 'higher_better', optimal: 0.15 },\n      roa: { weight: 0.15, type: 'higher_better', optimal: 0.08 },\n      gross_margin: { weight: 0.12, type: 'higher_better', optimal: 0.4 },\n      operating_margin: { weight: 0.15, type: 'higher_better', optimal: 0.15 },\n      net_margin: { weight: 0.12, type: 'higher_better', optimal: 0.10 },\n      \n      // Growth Factors\n      revenue_growth: { weight: 0.20, type: 'higher_better', optimal: 0.15 },\n      earnings_growth: { weight: 0.18, type: 'higher_better', optimal: 0.12 },\n      eps_growth: { weight: 0.15, type: 'higher_better', optimal: 0.10 },\n      \n      // Valuation Factors\n      pe_ratio: { weight: 0.15, type: 'optimal_range', optimal: 20, range: [10, 30] },\n      pb_ratio: { weight: 0.12, type: 'lower_better', optimal: 1.5 },\n      ps_ratio: { weight: 0.10, type: 'lower_better', optimal: 2.0 },\n      peg_ratio: { weight: 0.18, type: 'optimal_range', optimal: 1.0, range: [0.5, 2.0] },\n      \n      // Efficiency Factors\n      asset_turnover: { weight: 0.12, type: 'higher_better', optimal: 1.0 },\n      inventory_turnover: { weight: 0.08, type: 'higher_better', optimal: 6.0 },\n      \n      // Market Factors\n      market_cap: { weight: 0.05, type: 'neutral', optimal: null },\n      beta: { weight: 0.08, type: 'optimal_range', optimal: 1.0, range: [0.5, 1.5] },\n      \n      // Technical Factors\n      price_momentum_3m: { weight: 0.10, type: 'higher_better', optimal: 0.1 },\n      price_momentum_12m: { weight: 0.12, type: 'higher_better', optimal: 0.2 },\n      rsi: { weight: 0.08, type: 'optimal_range', optimal: 50, range: [30, 70] },\n      \n      // Dividend Factors\n      dividend_yield: { weight: 0.10, type: 'higher_better', optimal: 0.03 },\n      dividend_growth: { weight: 0.08, type: 'higher_better', optimal: 0.05 },\n      payout_ratio: { weight: 0.06, type: 'optimal_range', optimal: 0.4, range: [0.2, 0.6] }\n    };\n  }\n\n  // Calculate individual factor score (0-100)\n  calculateFactorScore(value, factor) {\n    if (value === null || value === undefined || isNaN(value)) {\n      return 50; // Neutral score for missing data\n    }\n\n    const { type, optimal, range } = factor;\n\n    switch (type) {\n      case 'higher_better':\n        return this.calculateHigherBetterScore(value, optimal);\n      \n      case 'lower_better':\n        return this.calculateLowerBetterScore(value, optimal);\n      \n      case 'optimal_range':\n        return this.calculateOptimalRangeScore(value, optimal, range);\n      \n      case 'neutral':\n        return 50;\n      \n      default:\n        return 50;\n    }\n  }\n\n  calculateHigherBetterScore(value, optimal) {\n    if (value >= optimal) {\n      return Math.min(100, 50 + (value / optimal) * 25);\n    } else {\n      return Math.max(0, (value / optimal) * 50);\n    }\n  }\n\n  calculateLowerBetterScore(value, optimal) {\n    if (value <= optimal) {\n      return Math.max(50, 100 - (value / optimal) * 25);\n    } else {\n      return Math.max(0, 100 - (value / optimal) * 50);\n    }\n  }\n\n  calculateOptimalRangeScore(value, optimal, range) {\n    const [min, max] = range;\n    \n    if (value >= min && value <= max) {\n      const distanceFromOptimal = Math.abs(value - optimal);\n      const maxDistance = Math.max(optimal - min, max - optimal);\n      return Math.max(50, 100 - (distanceFromOptimal / maxDistance) * 50);\n    } else if (value < min) {\n      return Math.max(0, 50 - ((min - value) / min) * 50);\n    } else {\n      return Math.max(0, 50 - ((value - max) / max) * 50);\n    }\n  }\n\n  // Calculate composite score for a stock\n  async calculateCompositeScore(stockData) {\n    let totalScore = 0;\n    let totalWeight = 0;\n    const factorScores = {};\n\n    for (const [factorName, factorConfig] of Object.entries(this.factors)) {\n      const value = stockData[factorName];\n      const score = this.calculateFactorScore(value, factorConfig);\n      \n      factorScores[factorName] = {\n        value: value,\n        score: score,\n        weight: factorConfig.weight\n      };\n      \n      totalScore += score * factorConfig.weight;\n      totalWeight += factorConfig.weight;\n    }\n\n    const compositeScore = totalWeight > 0 ? totalScore / totalWeight : 50;\n\n    return {\n      compositeScore: Math.round(compositeScore),\n      factorScores: factorScores,\n      grade: this.getGrade(compositeScore),\n      riskLevel: this.getRiskLevel(stockData),\n      recommendation: this.getRecommendation(compositeScore)\n    };\n  }\n\n  getGrade(score) {\n    if (score >= 90) return 'A+';\n    if (score >= 85) return 'A';\n    if (score >= 80) return 'A-';\n    if (score >= 75) return 'B+';\n    if (score >= 70) return 'B';\n    if (score >= 65) return 'B-';\n    if (score >= 60) return 'C+';\n    if (score >= 55) return 'C';\n    if (score >= 50) return 'C-';\n    if (score >= 45) return 'D+';\n    if (score >= 40) return 'D';\n    return 'F';\n  }\n\n  getRiskLevel(stockData) {\n    const beta = stockData.beta || 1.0;\n    const debtToEquity = stockData.debt_to_equity || 0.5;\n    const currentRatio = stockData.current_ratio || 1.5;\n    \n    let riskScore = 0;\n    \n    // Beta risk\n    if (beta > 1.5) riskScore += 3;\n    else if (beta > 1.2) riskScore += 2;\n    else if (beta < 0.5) riskScore += 1;\n    \n    // Debt risk\n    if (debtToEquity > 1.0) riskScore += 3;\n    else if (debtToEquity > 0.6) riskScore += 2;\n    else if (debtToEquity > 0.3) riskScore += 1;\n    \n    // Liquidity risk\n    if (currentRatio < 1.0) riskScore += 3;\n    else if (currentRatio < 1.5) riskScore += 2;\n    \n    if (riskScore >= 6) return 'High';\n    if (riskScore >= 3) return 'Medium';\n    return 'Low';\n  }\n\n  getRecommendation(score) {\n    if (score >= 80) return 'Strong Buy';\n    if (score >= 70) return 'Buy';\n    if (score >= 60) return 'Hold';\n    if (score >= 50) return 'Weak Hold';\n    if (score >= 40) return 'Sell';\n    return 'Strong Sell';\n  }\n\n  // Get stocks with factor scores from database\n  async getStocksWithFactorScores(filters = {}) {\n    try {\n      let whereClause = 'WHERE 1=1';\n      const params = [];\n      let paramIndex = 1;\n\n      // Add filters\n      if (filters.minScore) {\n        whereClause += ` AND factor_score >= $${paramIndex}`;\n        params.push(filters.minScore);\n        paramIndex++;\n      }\n\n      if (filters.maxScore) {\n        whereClause += ` AND factor_score <= $${paramIndex}`;\n        params.push(filters.maxScore);\n        paramIndex++;\n      }\n\n      if (filters.sector) {\n        whereClause += ` AND sector = $${paramIndex}`;\n        params.push(filters.sector);\n        paramIndex++;\n      }\n\n      if (filters.minMarketCap) {\n        whereClause += ` AND market_cap >= $${paramIndex}`;\n        params.push(filters.minMarketCap);\n        paramIndex++;\n      }\n\n      if (filters.maxMarketCap) {\n        whereClause += ` AND market_cap <= $${paramIndex}`;\n        params.push(filters.maxMarketCap);\n        paramIndex++;\n      }\n\n      const stocksQuery = `\n        SELECT \n          symbol,\n          company_name,\n          sector,\n          market_cap,\n          price,\n          \n          -- Financial Health\n          debt_to_equity,\n          current_ratio,\n          quick_ratio,\n          interest_coverage,\n          \n          -- Profitability\n          roe,\n          roa,\n          gross_margin,\n          operating_margin,\n          net_margin,\n          \n          -- Growth\n          revenue_growth,\n          earnings_growth,\n          eps_growth,\n          \n          -- Valuation\n          pe_ratio,\n          pb_ratio,\n          ps_ratio,\n          peg_ratio,\n          \n          -- Efficiency\n          asset_turnover,\n          inventory_turnover,\n          \n          -- Market\n          beta,\n          \n          -- Technical\n          price_momentum_3m,\n          price_momentum_12m,\n          rsi,\n          \n          -- Dividend\n          dividend_yield,\n          dividend_growth,\n          payout_ratio,\n          \n          -- Cached score if available\n          factor_score,\n          last_updated\n          \n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        ${whereClause}\n        ORDER BY \n          CASE \n            WHEN factor_score IS NOT NULL THEN factor_score \n            ELSE 50 \n          END DESC,\n          market_cap DESC\n        LIMIT ${filters.limit || 100}\n      `;\n\n      const result = await query(stocksQuery, params);\n      \n      // Calculate scores for stocks that don't have cached scores\n      const stocksWithScores = await Promise.all(\n        result.rows.map(async (stock) => {\n          if (!stock.factor_score || this.isStaleScore(stock.last_updated)) {\n            const scoreData = await this.calculateCompositeScore(stock);\n            \n            // Cache the score in database\n            await this.cacheFactorScore(stock.symbol, scoreData.compositeScore);\n            \n            return {\n              ...stock,\n              factor_score: scoreData.compositeScore,\n              grade: scoreData.grade,\n              risk_level: scoreData.riskLevel,\n              recommendation: scoreData.recommendation,\n              factor_breakdown: scoreData.factorScores\n            };\n          }\n          \n          return {\n            ...stock,\n            grade: this.getGrade(stock.factor_score),\n            risk_level: this.getRiskLevel(stock),\n            recommendation: this.getRecommendation(stock.factor_score)\n          };\n        })\n      );\n\n      return stocksWithScores;\n    } catch (error) {\n      console.error('Error getting stocks with factor scores:', error);\n      throw error;\n    }\n  }\n\n  // Cache factor score in database\n  async cacheFactorScore(symbol, score) {\n    try {\n      await query(`\n        UPDATE stock_fundamentals \n        SET factor_score = $1, last_updated = NOW()\n        WHERE symbol = $2\n      `, [score, symbol]);\n    } catch (error) {\n      console.error('Error caching factor score:', error);\n    }\n  }\n\n  // Check if cached score is stale (older than 1 day)\n  isStaleScore(lastUpdated) {\n    if (!lastUpdated) return true;\n    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    return new Date(lastUpdated) < oneDayAgo;\n  }\n\n  // Get top performers by factor\n  async getTopPerformersByFactor(factorName, limit = 20) {\n    try {\n      const factor = this.factors[factorName];\n      if (!factor) {\n        throw new Error(`Unknown factor: ${factorName}`);\n      }\n\n      const orderBy = factor.type === 'lower_better' ? 'ASC' : 'DESC';\n      \n      const result = await query(`\n        SELECT \n          symbol,\n          company_name,\n          sector,\n          ${factorName} as factor_value,\n          factor_score,\n          market_cap,\n          price\n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        WHERE ${factorName} IS NOT NULL\n        ORDER BY ${factorName} ${orderBy}\n        LIMIT $1\n      `, [limit]);\n\n      return result.rows.map(stock => ({\n        ...stock,\n        factor_name: factorName,\n        factor_score_individual: this.calculateFactorScore(stock.factor_value, factor)\n      }));\n    } catch (error) {\n      console.error('Error getting top performers by factor:', error);\n      throw error;\n    }\n  }\n\n  // Get sector analysis with factor scores\n  async getSectorAnalysis() {\n    try {\n      const result = await query(`\n        SELECT \n          sector,\n          COUNT(*) as stock_count,\n          AVG(factor_score) as avg_factor_score,\n          AVG(pe_ratio) as avg_pe,\n          AVG(roe) as avg_roe,\n          AVG(debt_to_equity) as avg_debt_to_equity,\n          AVG(revenue_growth) as avg_revenue_growth,\n          SUM(market_cap) as total_market_cap\n        FROM stock_fundamentals sf\n        JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n        WHERE sector IS NOT NULL\n        GROUP BY sector\n        ORDER BY avg_factor_score DESC\n      `);\n\n      return result.rows.map(sector => ({\n        ...sector,\n        grade: this.getGrade(sector.avg_factor_score || 50),\n        relative_strength: this.calculateRelativeStrength(sector.avg_factor_score || 50)\n      }));\n    } catch (error) {\n      console.error('Error getting sector analysis:', error);\n      throw error;\n    }\n  }\n\n  calculateRelativeStrength(score) {\n    if (score >= 70) return 'Strong';\n    if (score >= 60) return 'Above Average';\n    if (score >= 50) return 'Average';\n    if (score >= 40) return 'Below Average';\n    return 'Weak';\n  }\n}\n\nmodule.exports = FactorScoringEngine;"],"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","ignoreList":[]}