{"version":3,"names":["cov_2iacmokcio","actualCoverage","axios","s","require","timeoutHelper","SentimentEngine","constructor","f","positiveWords","negativeWords","neutralWords","intensifiers","negators","analyzeSentiment","text","symbol","b","results","Promise","allSettled","analyzeWithLexicon","analyzeWithVaderSentiment","analyzeWithTextBlob","validResults","filter","result","status","value","map","length","avgScore","reduce","sum","score","avgConfidence","confidence","label","scoreToLabel","method","text_length","analyzed_at","Date","toISOString","error","console","words","toLowerCase","replace","split","totalWords","sentimentWords","i","word","wordScore","isNegated","j","Math","max","includes","normalizedScore","finalScore","min","density","sentiment_words","total_words","analyzeWithHuggingFace","process","env","HUGGINGFACE_API_KEY","response","withTimeout","post","inputs","headers","timeout","service","operation","retries","data","maxScore","maxLabel","forEach","labelToScore","analyzeBatchSentiment","textArray","symbols","processor","index","errors","batchProcess","concurrency","continueOnError","sentimentResults","Boolean","calculateSentimentTrend","sentiments","trend","strength","direction","shortPeriod","longPeriod","shortMA","slice","longMA","diff","abs","short_ma","long_ma","difference","aggregateSentimentScores","overall_score","overall_label","positive_count","negative_count","neutral_count","total_count","scores","confidences","totalWeight","c","weightedScore","labelCounts","counts","positive","negative","neutral","score_distribution","avg","std","calculateStandardDeviation","values","mean","val","squaredDiffs","pow","avgSquaredDiff","sqrt","getEmotionFromSentiment","detectSentimentAnomalies","threshold","anomalies","sentiment","zScore","push","z_score","deviation","type","module","exports"],"sources":["sentimentEngine.js"],"sourcesContent":["const axios = require('axios');\nconst timeoutHelper = require('./timeoutHelper');\n\nclass SentimentEngine {\n  constructor() {\n    this.positiveWords = [\n      'good', 'great', 'excellent', 'amazing', 'outstanding', 'fantastic', 'wonderful',\n      'positive', 'bullish', 'optimistic', 'strong', 'robust', 'solid', 'healthy',\n      'growth', 'increase', 'rise', 'surge', 'boost', 'gain', 'profit', 'success',\n      'beat', 'exceed', 'outperform', 'upgrade', 'buy', 'recommend', 'target',\n      'recovery', 'momentum', 'breakthrough', 'innovation', 'expansion', 'improvement'\n    ];\n    \n    this.negativeWords = [\n      'bad', 'terrible', 'awful', 'horrible', 'worst', 'disappointing', 'concerning',\n      'negative', 'bearish', 'pessimistic', 'weak', 'poor', 'decline', 'fall',\n      'drop', 'plunge', 'crash', 'collapse', 'loss', 'deficit', 'miss', 'fail',\n      'underperform', 'downgrade', 'sell', 'avoid', 'warning', 'risk', 'concern',\n      'trouble', 'problem', 'issue', 'challenge', 'difficulty', 'struggle'\n    ];\n    \n    this.neutralWords = [\n      'stable', 'steady', 'unchanged', 'flat', 'neutral', 'mixed', 'sideways',\n      'hold', 'maintain', 'continue', 'expect', 'forecast', 'estimate', 'project'\n    ];\n    \n    this.intensifiers = {\n      'very': 1.5,\n      'extremely': 2.0,\n      'highly': 1.8,\n      'significantly': 1.7,\n      'substantially': 1.6,\n      'considerably': 1.5,\n      'moderately': 1.2,\n      'slightly': 0.8,\n      'somewhat': 0.9,\n      'quite': 1.3,\n      'rather': 1.1,\n      'fairly': 1.1\n    };\n    \n    this.negators = ['not', 'no', 'never', 'none', 'nothing', 'neither', 'nor', 'without'];\n  }\n\n  async analyzeSentiment(text, symbol = null) {\n    try {\n      // Try multiple sentiment analysis approaches\n      const results = await Promise.allSettled([\n        this.analyzeWithLexicon(text),\n        this.analyzeWithVaderSentiment(text),\n        this.analyzeWithTextBlob(text)\n      ]);\n      \n      // Combine results\n      const validResults = results\n        .filter(result => result.status === 'fulfilled' && result.value)\n        .map(result => result.value);\n      \n      if (validResults.length === 0) {\n        // Fallback to lexicon-based analysis\n        return this.analyzeWithLexicon(text);\n      }\n      \n      // Average the scores\n      const avgScore = validResults.reduce((sum, result) => sum + result.score, 0) / validResults.length;\n      const avgConfidence = validResults.reduce((sum, result) => sum + result.confidence, 0) / validResults.length;\n      \n      return {\n        score: avgScore,\n        label: this.scoreToLabel(avgScore),\n        confidence: avgConfidence,\n        method: 'combined',\n        symbol: symbol,\n        text_length: text.length,\n        analyzed_at: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error in sentiment analysis:', error);\n      return this.analyzeWithLexicon(text);\n    }\n  }\n\n  analyzeWithLexicon(text) {\n    const words = text.toLowerCase().replace(/[^\\w\\s]/g, '').split(/\\s+/);\n    let score = 0;\n    let totalWords = 0;\n    let sentimentWords = 0;\n    \n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      let wordScore = 0;\n      let isNegated = false;\n      \n      // Check for negation in the previous 3 words\n      for (let j = Math.max(0, i - 3); j < i; j++) {\n        if (this.negators.includes(words[j])) {\n          isNegated = true;\n          break;\n        }\n      }\n      \n      // Get base sentiment score\n      if (this.positiveWords.includes(word)) {\n        wordScore = 1;\n      } else if (this.negativeWords.includes(word)) {\n        wordScore = -1;\n      } else if (this.neutralWords.includes(word)) {\n        wordScore = 0;\n      }\n      \n      if (wordScore !== 0) {\n        sentimentWords++;\n        \n        // Apply intensifiers\n        if (i > 0 && this.intensifiers[words[i - 1]]) {\n          wordScore *= this.intensifiers[words[i - 1]];\n        }\n        \n        // Apply negation\n        if (isNegated) {\n          wordScore *= -1;\n        }\n        \n        score += wordScore;\n      }\n      \n      totalWords++;\n    }\n    \n    // Normalize score\n    const normalizedScore = sentimentWords > 0 ? score / sentimentWords : 0;\n    \n    // Scale to -1 to 1 range\n    const finalScore = Math.max(-1, Math.min(1, normalizedScore));\n    \n    // Calculate confidence based on sentiment word density\n    const density = sentimentWords / totalWords;\n    const confidence = Math.min(0.5 + density * 0.5, 1.0);\n    \n    return {\n      score: finalScore,\n      label: this.scoreToLabel(finalScore),\n      confidence: confidence,\n      method: 'lexicon',\n      sentiment_words: sentimentWords,\n      total_words: totalWords,\n      analyzed_at: new Date().toISOString()\n    };\n  }\n\n  async analyzeWithVaderSentiment(text) {\n    try {\n      // Mock VADER sentiment analysis (would require Python integration)\n      // For now, return a simplified version\n      return this.analyzeWithLexicon(text);\n    } catch (error) {\n      console.error('VADER sentiment analysis failed:', error);\n      return null;\n    }\n  }\n\n  async analyzeWithTextBlob(text) {\n    try {\n      // Mock TextBlob sentiment analysis (would require Python integration)\n      // For now, return a simplified version\n      return this.analyzeWithLexicon(text);\n    } catch (error) {\n      console.error('TextBlob sentiment analysis failed:', error);\n      return null;\n    }\n  }\n\n  async analyzeWithHuggingFace(text) {\n    try {\n      if (!process.env.HUGGINGFACE_API_KEY) {\n        return null;\n      }\n      \n      const response = await timeoutHelper.withTimeout(\n        axios.post(\n          'https://api-inference.huggingface.co/models/cardiffnlp/twitter-roberta-base-sentiment-latest',\n          { inputs: text },\n          {\n            headers: {\n              'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,\n              'Content-Type': 'application/json'\n            },\n            timeout: 8000\n          }\n        ),\n        {\n          timeout: 10000,\n          service: 'huggingface',\n          operation: 'sentiment-analysis',\n          retries: 1\n        }\n      );\n      \n      if (response.data && response.data[0]) {\n        const results = response.data[0];\n        \n        // Find the highest confidence label\n        let maxScore = -1;\n        let maxLabel = 'neutral';\n        \n        results.forEach(result => {\n          if (result.score > maxScore) {\n            maxScore = result.score;\n            maxLabel = result.label;\n          }\n        });\n        \n        // Convert to our scoring system\n        let score = 0;\n        if (maxLabel === 'LABEL_2' || maxLabel === 'positive') {\n          score = maxScore;\n        } else if (maxLabel === 'LABEL_0' || maxLabel === 'negative') {\n          score = -maxScore;\n        } else {\n          score = 0;\n        }\n        \n        return {\n          score: score,\n          label: this.scoreToLabel(score),\n          confidence: maxScore,\n          method: 'huggingface',\n          analyzed_at: new Date().toISOString()\n        };\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Hugging Face sentiment analysis failed:', error);\n      return null;\n    }\n  }\n\n  scoreToLabel(score) {\n    if (score > 0.1) {\n      return 'positive';\n    } else if (score < -0.1) {\n      return 'negative';\n    } else {\n      return 'neutral';\n    }\n  }\n\n  labelToScore(label) {\n    switch (label.toLowerCase()) {\n      case 'positive':\n        return 0.5;\n      case 'negative':\n        return -0.5;\n      case 'neutral':\n      default:\n        return 0;\n    }\n  }\n\n  async analyzeBatchSentiment(textArray, symbols = []) {\n    // Use timeout helper's batch processing for better concurrency and timeout handling\n    const processor = async (text, index) => {\n      const symbol = symbols[index] || null;\n      return await this.analyzeSentiment(text, symbol);\n    };\n\n    const { results, errors } = await timeoutHelper.batchProcess(textArray, processor, {\n      concurrency: 3,\n      timeout: 8000,\n      service: 'sentiment-batch',\n      continueOnError: true\n    });\n\n    // Convert results to the expected format\n    const sentimentResults = [];\n    \n    results.forEach(({ result, index }) => {\n      sentimentResults[index] = result;\n    });\n    \n    errors.forEach(({ error, index }) => {\n      console.error(`Error analyzing sentiment for text ${index}:`, error);\n      sentimentResults[index] = {\n        score: 0,\n        label: 'neutral',\n        confidence: 0.5,\n        method: 'error',\n        symbol: symbols[index] || null,\n        analyzed_at: new Date().toISOString()\n      };\n    });\n    \n    return sentimentResults.filter(Boolean);\n  }\n\n  calculateSentimentTrend(sentiments) {\n    if (sentiments.length < 2) {\n      return {\n        trend: 'insufficient_data',\n        strength: 0,\n        direction: 'neutral'\n      };\n    }\n    \n    // Calculate moving averages\n    const shortPeriod = Math.min(5, sentiments.length);\n    const longPeriod = Math.min(10, sentiments.length);\n    \n    const shortMA = sentiments.slice(-shortPeriod).reduce((sum, s) => sum + s.score, 0) / shortPeriod;\n    const longMA = sentiments.slice(-longPeriod).reduce((sum, s) => sum + s.score, 0) / longPeriod;\n    \n    const diff = shortMA - longMA;\n    \n    let trend = 'neutral';\n    let strength = Math.abs(diff);\n    \n    if (diff > 0.1) {\n      trend = 'improving';\n    } else if (diff < -0.1) {\n      trend = 'deteriorating';\n    }\n    \n    return {\n      trend: trend,\n      strength: strength,\n      direction: diff > 0 ? 'positive' : diff < 0 ? 'negative' : 'neutral',\n      short_ma: shortMA,\n      long_ma: longMA,\n      difference: diff\n    };\n  }\n\n  aggregateSentimentScores(sentiments) {\n    if (sentiments.length === 0) {\n      return {\n        overall_score: 0,\n        overall_label: 'neutral',\n        confidence: 0,\n        positive_count: 0,\n        negative_count: 0,\n        neutral_count: 0,\n        total_count: 0\n      };\n    }\n    \n    const scores = sentiments.map(s => s.score);\n    const confidences = sentiments.map(s => s.confidence);\n    \n    // Weighted average by confidence\n    const totalWeight = confidences.reduce((sum, c) => sum + c, 0);\n    const weightedScore = scores.reduce((sum, score, i) => sum + score * confidences[i], 0) / totalWeight;\n    \n    // Count by label\n    const labelCounts = sentiments.reduce((counts, s) => {\n      counts[s.label] = (counts[s.label] || 0) + 1;\n      return counts;\n    }, {});\n    \n    return {\n      overall_score: weightedScore,\n      overall_label: this.scoreToLabel(weightedScore),\n      confidence: totalWeight / sentiments.length,\n      positive_count: labelCounts.positive || 0,\n      negative_count: labelCounts.negative || 0,\n      neutral_count: labelCounts.neutral || 0,\n      total_count: sentiments.length,\n      score_distribution: {\n        min: Math.min(...scores),\n        max: Math.max(...scores),\n        avg: scores.reduce((sum, s) => sum + s, 0) / scores.length,\n        std: this.calculateStandardDeviation(scores)\n      }\n    };\n  }\n\n  calculateStandardDeviation(values) {\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n    const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / squaredDiffs.length;\n    return Math.sqrt(avgSquaredDiff);\n  }\n\n  getEmotionFromSentiment(score, confidence) {\n    if (confidence < 0.3) {\n      return 'uncertain';\n    }\n    \n    if (score > 0.7) {\n      return 'very_positive';\n    } else if (score > 0.3) {\n      return 'positive';\n    } else if (score > 0.1) {\n      return 'slightly_positive';\n    } else if (score < -0.7) {\n      return 'very_negative';\n    } else if (score < -0.3) {\n      return 'negative';\n    } else if (score < -0.1) {\n      return 'slightly_negative';\n    } else {\n      return 'neutral';\n    }\n  }\n\n  detectSentimentAnomalies(sentiments, threshold = 2.0) {\n    if (sentiments.length < 10) {\n      return [];\n    }\n    \n    const scores = sentiments.map(s => s.score);\n    const mean = scores.reduce((sum, s) => sum + s, 0) / scores.length;\n    const std = this.calculateStandardDeviation(scores);\n    \n    const anomalies = [];\n    \n    sentiments.forEach((sentiment, index) => {\n      const zScore = Math.abs((sentiment.score - mean) / std);\n      \n      if (zScore > threshold) {\n        anomalies.push({\n          index: index,\n          sentiment: sentiment,\n          z_score: zScore,\n          deviation: sentiment.score - mean,\n          type: sentiment.score > mean ? 'positive_spike' : 'negative_spike'\n        });\n      }\n    });\n    \n    return anomalies;\n  }\n}\n\nmodule.exports = SentimentEngine;"],"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","ignoreList":[]}