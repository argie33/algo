{"version":3,"names":["cov_6183ibz08","actualCoverage","winston","s","require","ComprehensiveErrorHandler","constructor","f","initializeLogger","errorCounts","Map","criticalErrors","startTime","Date","now","logger","createLogger","level","format","combine","timestamp","errors","stack","json","transports","Console","colorize","simple","handleError","error","context","b","errorInfo","analyzeError","logErrorDetails","trackErrorFrequency","response","determineErrorResponse","info","action","errorId","id","canRecover","generateErrorId","toISOString","errorDetails","name","message","code","errno","syscall","category","categorizeError","severity","determineSeverity","diagnostics","getDiagnostics","toLowerCase","includes","possibleCauses","suggestedFixes","healthChecks","relatedSystems","key","count","get","set","warn","errorType","timeWindow","push","totalCritical","length","baseResponse","success","getUserFriendlyMessage","retryAfter","maxRetries","redirectUrl","validationErrors","extractValidationErrors","messages","random","Math","toString","substr","getErrorStats","uptime","totalErrors","Array","from","values","reduce","a","errorTypes","Object","fromEntries","errorRate","expressMiddleware","req","res","next","method","url","userAgent","headers","ip","body","params","query","errorResponse","statusCode","status","canRetry","module","exports"],"sources":["comprehensiveErrorHandler.js"],"sourcesContent":["/**\n * Comprehensive Error Handler for Financial Dashboard\n * Catches all errors, provides detailed diagnostics, and implements recovery strategies\n */\n\nconst winston = require('winston');\n\nclass ComprehensiveErrorHandler {\n    constructor() {\n        this.initializeLogger();\n        this.errorCounts = new Map();\n        this.criticalErrors = [];\n        this.startTime = Date.now();\n    }\n\n    initializeLogger() {\n        this.logger = winston.createLogger({\n            level: 'debug',\n            format: winston.format.combine(\n                winston.format.timestamp(),\n                winston.format.errors({ stack: true }),\n                winston.format.json()\n            ),\n            transports: [\n                new winston.transports.Console({\n                    format: winston.format.combine(\n                        winston.format.colorize(),\n                        winston.format.simple()\n                    )\n                })\n            ]\n        });\n    }\n\n    /**\n     * Main error handling method - catches and categorizes all errors\n     */\n    handleError(error, context = {}) {\n        const errorInfo = this.analyzeError(error, context);\n        \n        // Log comprehensive error details\n        this.logErrorDetails(errorInfo);\n        \n        // Track error frequency\n        this.trackErrorFrequency(errorInfo);\n        \n        // Determine response strategy\n        const response = this.determineErrorResponse(errorInfo);\n        \n        // Log recovery action\n        this.logger.info(`🔧 Recovery Action: ${response.action}`, {\n            errorId: errorInfo.id,\n            action: response.action,\n            canRecover: response.canRecover\n        });\n\n        return response;\n    }\n\n    /**\n     * Analyze error and extract comprehensive information\n     */\n    analyzeError(error, context) {\n        const errorId = this.generateErrorId();\n        const timestamp = new Date().toISOString();\n        \n        // Extract error details\n        const errorDetails = {\n            id: errorId,\n            timestamp,\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n            code: error.code,\n            errno: error.errno,\n            syscall: error.syscall,\n            context: context\n        };\n\n        // Categorize error type\n        const category = this.categorizeError(error);\n        \n        // Determine severity\n        const severity = this.determineSeverity(error, category);\n        \n        // Get diagnostic information\n        const diagnostics = this.getDiagnostics(error, category, context);\n        \n        return {\n            ...errorDetails,\n            category,\n            severity,\n            diagnostics\n        };\n    }\n\n    /**\n     * Categorize error by type for targeted handling\n     */\n    categorizeError(error) {\n        const message = error.message?.toLowerCase() || '';\n        const name = error.name?.toLowerCase() || '';\n        const code = error.code;\n\n        // Database errors\n        if (name.includes('sequelize') || message.includes('database') || \n            message.includes('connection') || code === 'ECONNREFUSED') {\n            return 'DATABASE_ERROR';\n        }\n\n        // Authentication errors\n        if (message.includes('unauthorized') || message.includes('forbidden') ||\n            message.includes('token') || message.includes('auth')) {\n            return 'AUTH_ERROR';\n        }\n\n        // Network errors\n        if (code === 'ENOTFOUND' || code === 'ETIMEDOUT' || code === 'ECONNRESET' ||\n            message.includes('network') || message.includes('fetch')) {\n            return 'NETWORK_ERROR';\n        }\n\n        // API errors\n        if (message.includes('api') || message.includes('endpoint') ||\n            message.includes('400') || message.includes('500')) {\n            return 'API_ERROR';\n        }\n\n        // Validation errors\n        if (message.includes('validation') || message.includes('invalid') ||\n            message.includes('required') || name.includes('validation')) {\n            return 'VALIDATION_ERROR';\n        }\n\n        // File system errors\n        if (code === 'ENOENT' || code === 'EACCES' || message.includes('file')) {\n            return 'FILESYSTEM_ERROR';\n        }\n\n        // Memory/Performance errors\n        if (message.includes('memory') || message.includes('heap') ||\n            message.includes('timeout') && !message.includes('network')) {\n            return 'PERFORMANCE_ERROR';\n        }\n\n        // Configuration errors\n        if (message.includes('config') || message.includes('environment') ||\n            message.includes('variable')) {\n            return 'CONFIG_ERROR';\n        }\n\n        return 'UNKNOWN_ERROR';\n    }\n\n    /**\n     * Determine error severity for escalation\n     */\n    determineSeverity(error, category) {\n        // Critical - system cannot function\n        if (category === 'DATABASE_ERROR' || category === 'CONFIG_ERROR' ||\n            error.message?.includes('critical') || error.name === 'Error' && \n            error.message?.includes('Cannot read property')) {\n            return 'CRITICAL';\n        }\n\n        // High - major feature broken\n        if (category === 'AUTH_ERROR' || category === 'API_ERROR' ||\n            category === 'NETWORK_ERROR') {\n            return 'HIGH';\n        }\n\n        // Medium - feature degraded\n        if (category === 'VALIDATION_ERROR' || category === 'PERFORMANCE_ERROR') {\n            return 'MEDIUM';\n        }\n\n        // Low - minor issue\n        return 'LOW';\n    }\n\n    /**\n     * Get detailed diagnostics for troubleshooting\n     */\n    getDiagnostics(error, category, context) {\n        const diagnostics = {\n            possibleCauses: [],\n            suggestedFixes: [],\n            healthChecks: [],\n            relatedSystems: []\n        };\n\n        switch (category) {\n            case 'DATABASE_ERROR':\n                diagnostics.possibleCauses = [\n                    'Database connection pool exhausted',\n                    'Database server unavailable',\n                    'Network connectivity issues',\n                    'Authentication failure',\n                    'Database query timeout',\n                    'SSL configuration issues'\n                ];\n                diagnostics.suggestedFixes = [\n                    'Check database server status',\n                    'Verify connection string',\n                    'Review SSL certificate configuration',\n                    'Check network security groups',\n                    'Restart connection pool'\n                ];\n                diagnostics.healthChecks = [\n                    'Database ping test',\n                    'Connection pool status',\n                    'SSL handshake test'\n                ];\n                diagnostics.relatedSystems = ['RDS', 'VPC', 'Security Groups'];\n                break;\n\n            case 'AUTH_ERROR':\n                diagnostics.possibleCauses = [\n                    'Invalid JWT token',\n                    'Token expired',\n                    'User session invalid',\n                    'Permission denied',\n                    'API key invalid'\n                ];\n                diagnostics.suggestedFixes = [\n                    'Refresh user token',\n                    'Check user permissions',\n                    'Verify API key configuration',\n                    'Review authentication flow'\n                ];\n                diagnostics.relatedSystems = ['Cognito', 'JWT', 'API Gateway'];\n                break;\n\n            case 'NETWORK_ERROR':\n                diagnostics.possibleCauses = [\n                    'Internet connectivity lost',\n                    'DNS resolution failure',\n                    'Firewall blocking request',\n                    'Service unavailable',\n                    'Request timeout'\n                ];\n                diagnostics.suggestedFixes = [\n                    'Check internet connection',\n                    'Verify DNS settings',\n                    'Review firewall rules',\n                    'Implement retry logic'\n                ];\n                diagnostics.relatedSystems = ['API Gateway', 'External APIs', 'CDN'];\n                break;\n\n            case 'API_ERROR':\n                diagnostics.possibleCauses = [\n                    'API endpoint unavailable',\n                    'Invalid request format',\n                    'Rate limiting',\n                    'Server overload',\n                    'API version mismatch'\n                ];\n                diagnostics.suggestedFixes = [\n                    'Check API status',\n                    'Validate request format',\n                    'Implement rate limiting',\n                    'Add circuit breaker'\n                ];\n                diagnostics.relatedSystems = ['Lambda', 'API Gateway', 'External APIs'];\n                break;\n\n            default:\n                diagnostics.possibleCauses = ['Unknown error occurred'];\n                diagnostics.suggestedFixes = ['Review error details and context'];\n        }\n\n        return diagnostics;\n    }\n\n    /**\n     * Log comprehensive error details\n     */\n    logErrorDetails(errorInfo) {\n        this.logger.error('🚨 COMPREHENSIVE ERROR REPORT', {\n            errorId: errorInfo.id,\n            category: errorInfo.category,\n            severity: errorInfo.severity,\n            name: errorInfo.name,\n            message: errorInfo.message,\n            context: errorInfo.context,\n            diagnostics: errorInfo.diagnostics,\n            stack: errorInfo.stack\n        });\n\n        // Log user-friendly error summary\n        this.logger.error(`❌ [${errorInfo.category}] ${errorInfo.message}`, {\n            errorId: errorInfo.id,\n            severity: errorInfo.severity,\n            timestamp: errorInfo.timestamp\n        });\n\n        // Log diagnostic information\n        this.logger.info('🔍 DIAGNOSTIC INFORMATION', {\n            errorId: errorInfo.id,\n            possibleCauses: errorInfo.diagnostics.possibleCauses,\n            suggestedFixes: errorInfo.diagnostics.suggestedFixes,\n            relatedSystems: errorInfo.diagnostics.relatedSystems\n        });\n    }\n\n    /**\n     * Track error frequency for pattern detection\n     */\n    trackErrorFrequency(errorInfo) {\n        const key = `${errorInfo.category}:${errorInfo.name}`;\n        const count = this.errorCounts.get(key) || 0;\n        this.errorCounts.set(key, count + 1);\n\n        // Alert on high frequency errors\n        if (count + 1 >= 5) {\n            this.logger.warn(`⚠️ HIGH FREQUENCY ERROR DETECTED`, {\n                errorType: key,\n                count: count + 1,\n                timeWindow: '1 hour'\n            });\n        }\n\n        // Track critical errors\n        if (errorInfo.severity === 'CRITICAL') {\n            this.criticalErrors.push(errorInfo);\n            this.logger.error(`🔥 CRITICAL ERROR LOGGED`, {\n                errorId: errorInfo.id,\n                totalCritical: this.criticalErrors.length\n            });\n        }\n    }\n\n    /**\n     * Determine appropriate error response\n     */\n    determineErrorResponse(errorInfo) {\n        const baseResponse = {\n            success: false,\n            errorId: errorInfo.id,\n            category: errorInfo.category,\n            severity: errorInfo.severity,\n            message: this.getUserFriendlyMessage(errorInfo),\n            canRecover: false,\n            action: 'LOG_AND_FAIL'\n        };\n\n        switch (errorInfo.category) {\n            case 'DATABASE_ERROR':\n                return {\n                    ...baseResponse,\n                    canRecover: true,\n                    action: 'RETRY_WITH_BACKOFF',\n                    retryAfter: 5000,\n                    maxRetries: 3\n                };\n\n            case 'NETWORK_ERROR':\n                return {\n                    ...baseResponse,\n                    canRecover: true,\n                    action: 'RETRY_WITH_EXPONENTIAL_BACKOFF',\n                    retryAfter: 2000,\n                    maxRetries: 5\n                };\n\n            case 'AUTH_ERROR':\n                return {\n                    ...baseResponse,\n                    action: 'REDIRECT_TO_LOGIN',\n                    redirectUrl: '/login'\n                };\n\n            case 'VALIDATION_ERROR':\n                return {\n                    ...baseResponse,\n                    canRecover: true,\n                    action: 'RETURN_VALIDATION_ERROR',\n                    validationErrors: this.extractValidationErrors(errorInfo)\n                };\n\n            default:\n                return {\n                    ...baseResponse,\n                    action: 'RETURN_GENERIC_ERROR'\n                };\n        }\n    }\n\n    /**\n     * Generate user-friendly error message\n     */\n    getUserFriendlyMessage(errorInfo) {\n        const messages = {\n            'DATABASE_ERROR': 'Unable to connect to database. Please try again in a moment.',\n            'AUTH_ERROR': 'Authentication failed. Please log in again.',\n            'NETWORK_ERROR': 'Network connection issue. Please check your internet connection.',\n            'API_ERROR': 'Service temporarily unavailable. Please try again later.',\n            'VALIDATION_ERROR': 'Please check your input and try again.',\n            'PERFORMANCE_ERROR': 'The system is running slowly. Please wait a moment.',\n            'CONFIG_ERROR': 'System configuration error. Please contact support.',\n            'UNKNOWN_ERROR': 'An unexpected error occurred. Please try again.'\n        };\n\n        return messages[errorInfo.category] || messages['UNKNOWN_ERROR'];\n    }\n\n    /**\n     * Extract validation errors for user feedback\n     */\n    extractValidationErrors(errorInfo) {\n        const errors = [];\n        const message = errorInfo.message;\n        \n        // Common validation patterns\n        if (message.includes('required')) {\n            errors.push('Required field is missing');\n        }\n        if (message.includes('invalid')) {\n            errors.push('Invalid input format');\n        }\n        if (message.includes('length')) {\n            errors.push('Input length is invalid');\n        }\n\n        return errors.length > 0 ? errors : ['Validation failed'];\n    }\n\n    /**\n     * Generate unique error ID for tracking\n     */\n    generateErrorId() {\n        const timestamp = Date.now();\n        const random = Math.random().toString(36).substr(2, 9);\n        return `ERR_${timestamp}_${random}`;\n    }\n\n    /**\n     * Get error statistics for monitoring\n     */\n    getErrorStats() {\n        const uptime = Date.now() - this.startTime;\n        const totalErrors = Array.from(this.errorCounts.values()).reduce((a, b) => a + b, 0);\n        \n        return {\n            uptime: uptime,\n            totalErrors: totalErrors,\n            criticalErrors: this.criticalErrors.length,\n            errorTypes: Object.fromEntries(this.errorCounts),\n            errorRate: totalErrors / (uptime / 1000 / 60) // errors per minute\n        };\n    }\n\n    /**\n     * Express middleware wrapper\n     */\n    expressMiddleware() {\n        return (error, req, res, next) => {\n            const context = {\n                method: req.method,\n                url: req.url,\n                userAgent: req.headers['user-agent'],\n                ip: req.ip,\n                body: req.body,\n                params: req.params,\n                query: req.query\n            };\n\n            const errorResponse = this.handleError(error, context);\n            \n            // Determine HTTP status code\n            let statusCode = 500;\n            if (errorResponse.category === 'AUTH_ERROR') statusCode = 401;\n            if (errorResponse.category === 'VALIDATION_ERROR') statusCode = 400;\n            if (errorResponse.category === 'NETWORK_ERROR') statusCode = 503;\n\n            res.status(statusCode).json({\n                success: false,\n                error: {\n                    id: errorResponse.errorId,\n                    message: errorResponse.message,\n                    category: errorResponse.category,\n                    severity: errorResponse.severity,\n                    canRetry: errorResponse.canRecover,\n                    timestamp: new Date().toISOString()\n                }\n            });\n        };\n    }\n}\n\nmodule.exports = new ComprehensiveErrorHandler();"],"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","ignoreList":[]}