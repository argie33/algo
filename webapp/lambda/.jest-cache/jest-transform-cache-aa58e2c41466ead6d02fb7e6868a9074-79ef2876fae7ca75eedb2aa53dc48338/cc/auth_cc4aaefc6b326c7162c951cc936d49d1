2182888f0f2f0201062e7c07bcba3379
/* istanbul ignore next */
function cov_1mmdmqmsf8() {
  var path = "/home/stocks/algo/webapp/lambda/routes/auth.js";
  var hash = "6b266f31ee4423367deca4ab791b2ad0f6494243";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/auth.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 27
        },
        end: {
          line: 2,
          column: 64
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 31
        }
      },
      "3": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "4": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "5": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "6": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "7": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "8": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 28
        }
      },
      "9": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "10": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "11": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "12": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 7,
            column: 23
          }
        },
        loc: {
          start: {
            line: 7,
            column: 36
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 22
          },
          end: {
            line: 17,
            column: 23
          }
        },
        loc: {
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 26
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 27
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b266f31ee4423367deca4ab791b2ad0f6494243"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mmdmqmsf8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mmdmqmsf8();
const express =
/* istanbul ignore next */
(cov_1mmdmqmsf8().s[0]++, require('express'));
const {
  success,
  error
} =
/* istanbul ignore next */
(cov_1mmdmqmsf8().s[1]++, require('../utils/responseFormatter'));
const router =
/* istanbul ignore next */
(cov_1mmdmqmsf8().s[2]++, express.Router());

// Basic health endpoint for auth service
/* istanbul ignore next */
cov_1mmdmqmsf8().s[3]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_1mmdmqmsf8().f[0]++;
  cov_1mmdmqmsf8().s[4]++;
  res.json(success({
    status: 'operational',
    service: 'authentication',
    timestamp: new Date().toISOString(),
    message: 'Authentication service is running'
  }));
});

// Auth status endpoint
/* istanbul ignore next */
cov_1mmdmqmsf8().s[5]++;
router.get('/status', (req, res) => {
  /* istanbul ignore next */
  cov_1mmdmqmsf8().f[1]++;
  cov_1mmdmqmsf8().s[6]++;
  res.json(success({
    authMethod: 'AWS Cognito',
    jwtEnabled: true,
    sessionTimeout: '1 hour',
    lastCheck: new Date().toISOString()
  }));
});

// Token validation endpoint
/* istanbul ignore next */
cov_1mmdmqmsf8().s[7]++;
router.post('/validate', (req, res) => {
  /* istanbul ignore next */
  cov_1mmdmqmsf8().f[2]++;
  const {
    token
  } =
  /* istanbul ignore next */
  (cov_1mmdmqmsf8().s[8]++, req.body);
  /* istanbul ignore next */
  cov_1mmdmqmsf8().s[9]++;
  if (!token) {
    /* istanbul ignore next */
    cov_1mmdmqmsf8().b[0][0]++;
    cov_1mmdmqmsf8().s[10]++;
    return res.status(400).json(error('Token is required'));
  } else
  /* istanbul ignore next */
  {
    cov_1mmdmqmsf8().b[0][1]++;
  }

  // This would validate the JWT token
  cov_1mmdmqmsf8().s[11]++;
  res.json(success({
    valid: true,
    message: 'Token validation endpoint operational'
  }));
});
/* istanbul ignore next */
cov_1mmdmqmsf8().s[12]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW1tZG1xbXNmOCIsImFjdHVhbENvdmVyYWdlIiwiZXhwcmVzcyIsInMiLCJyZXF1aXJlIiwic3VjY2VzcyIsImVycm9yIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwiZiIsImpzb24iLCJzdGF0dXMiLCJzZXJ2aWNlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibWVzc2FnZSIsImF1dGhNZXRob2QiLCJqd3RFbmFibGVkIiwic2Vzc2lvblRpbWVvdXQiLCJsYXN0Q2hlY2siLCJwb3N0IiwidG9rZW4iLCJib2R5IiwiYiIsInZhbGlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHsgc3VjY2VzcywgZXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL3Jlc3BvbnNlRm9ybWF0dGVyJyk7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbi8vIEJhc2ljIGhlYWx0aCBlbmRwb2ludCBmb3IgYXV0aCBzZXJ2aWNlXG5yb3V0ZXIuZ2V0KCcvaGVhbHRoJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5qc29uKHN1Y2Nlc3Moe1xuICAgIHN0YXR1czogJ29wZXJhdGlvbmFsJyxcbiAgICBzZXJ2aWNlOiAnYXV0aGVudGljYXRpb24nLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiBzZXJ2aWNlIGlzIHJ1bm5pbmcnXG4gIH0pKTtcbn0pO1xuXG4vLyBBdXRoIHN0YXR1cyBlbmRwb2ludFxucm91dGVyLmdldCgnL3N0YXR1cycsIChyZXEsIHJlcykgPT4ge1xuICByZXMuanNvbihzdWNjZXNzKHtcbiAgICBhdXRoTWV0aG9kOiAnQVdTIENvZ25pdG8nLFxuICAgIGp3dEVuYWJsZWQ6IHRydWUsXG4gICAgc2Vzc2lvblRpbWVvdXQ6ICcxIGhvdXInLFxuICAgIGxhc3RDaGVjazogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0pKTtcbn0pO1xuXG4vLyBUb2tlbiB2YWxpZGF0aW9uIGVuZHBvaW50XG5yb3V0ZXIucG9zdCgnL3ZhbGlkYXRlJywgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IHsgdG9rZW4gfSA9IHJlcS5ib2R5O1xuICBcbiAgaWYgKCF0b2tlbikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbihlcnJvcignVG9rZW4gaXMgcmVxdWlyZWQnKSk7XG4gIH1cblxuICAvLyBUaGlzIHdvdWxkIHZhbGlkYXRlIHRoZSBKV1QgdG9rZW5cbiAgcmVzLmpzb24oc3VjY2Vzcyh7XG4gICAgdmFsaWQ6IHRydWUsXG4gICAgbWVzc2FnZTogJ1Rva2VuIHZhbGlkYXRpb24gZW5kcG9pbnQgb3BlcmF0aW9uYWwnXG4gIH0pKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQWZaLE1BQU1FLE9BQU87QUFBQTtBQUFBLENBQUFGLGNBQUEsR0FBQUcsQ0FBQSxPQUFHQyxP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