{"version":3,"names":["cov_1mmdmqmsf8","actualCoverage","express","s","require","success","error","router","Router","get","req","res","f","json","status","service","timestamp","Date","toISOString","message","authMethod","jwtEnabled","sessionTimeout","lastCheck","post","token","body","b","valid","module","exports"],"sources":["auth.js"],"sourcesContent":["const express = require('express');\nconst { success, error } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n// Basic health endpoint for auth service\nrouter.get('/health', (req, res) => {\n  res.json(success({\n    status: 'operational',\n    service: 'authentication',\n    timestamp: new Date().toISOString(),\n    message: 'Authentication service is running'\n  }));\n});\n\n// Auth status endpoint\nrouter.get('/status', (req, res) => {\n  res.json(success({\n    authMethod: 'AWS Cognito',\n    jwtEnabled: true,\n    sessionTimeout: '1 hour',\n    lastCheck: new Date().toISOString()\n  }));\n});\n\n// Token validation endpoint\nrouter.post('/validate', (req, res) => {\n  const { token } = req.body;\n  \n  if (!token) {\n    return res.status(400).json(error('Token is required'));\n  }\n\n  // This would validate the JWT token\n  res.json(success({\n    valid: true,\n    message: 'Token validation endpoint operational'\n  }));\n});\n\nmodule.exports = router;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC,OAAO;EAAEC;AAAM,CAAC;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,4BAA4B,CAAC;AAEhE,MAAMG,MAAM;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACM,MAAM,CAAC,CAAC;;AAE/B;AAAA;AAAAR,cAAA,GAAAG,CAAA;AACAI,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAG,CAAA;EAClCQ,GAAG,CAACE,IAAI,CAACR,OAAO,CAAC;IACfS,MAAM,EAAE,aAAa;IACrBC,OAAO,EAAE,gBAAgB;IACzBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;;AAEF;AAAA;AAAAnB,cAAA,GAAAG,CAAA;AACAI,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAG,CAAA;EAClCQ,GAAG,CAACE,IAAI,CAACR,OAAO,CAAC;IACfe,UAAU,EAAE,aAAa;IACzBC,UAAU,EAAE,IAAI;IAChBC,cAAc,EAAE,QAAQ;IACxBC,SAAS,EAAE,IAAIN,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAI,MAAM,CAACiB,IAAI,CAAC,WAAW,EAAE,CAACd,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,cAAA,GAAAY,CAAA;EACrC,MAAM;IAAEa;EAAM,CAAC;EAAA;EAAA,CAAAzB,cAAA,GAAAG,CAAA,OAAGO,GAAG,CAACgB,IAAI;EAAC;EAAA1B,cAAA,GAAAG,CAAA;EAE3B,IAAI,CAACsB,KAAK,EAAE;IAAA;IAAAzB,cAAA,GAAA2B,CAAA;IAAA3B,cAAA,GAAAG,CAAA;IACV,OAAOQ,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAACP,KAAK,CAAC,mBAAmB,CAAC,CAAC;EACzD,CAAC;EAAA;EAAA;IAAAN,cAAA,GAAA2B,CAAA;EAAA;;EAED;EAAA3B,cAAA,GAAAG,CAAA;EACAQ,GAAG,CAACE,IAAI,CAACR,OAAO,CAAC;IACfuB,KAAK,EAAE,IAAI;IACXT,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAAC;AAAAnB,cAAA,GAAAG,CAAA;AAEH0B,MAAM,CAACC,OAAO,GAAGvB,MAAM","ignoreList":[]}