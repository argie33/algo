{"version":3,"names":["cov_26tco8rom2","actualCoverage","Redis","s","require","crypto","AdvancedRateLimiter","constructor","options","b","f","redisHost","process","env","REDIS_HOST","redisPort","REDIS_PORT","redisPassword","REDIS_PASSWORD","keyPrefix","enableRedis","NODE_ENV","redis","host","port","password","retryDelayOnFailover","enableReadyCheck","maxRetriesPerRequest","connectTimeout","commandTimeout","on","error","console","message","log","warn","memoryStore","Map","blockedIPs","Set","whitelistedIPs","suspiciousIPs","userTierLimits","free","requests","burst","window","blockDuration","categories","auth","api","trading","heavy","premium","professional","institutional","systemLoadFactor","lastLoadCheck","Date","now","startCleanupInterval","getUserTier","req","user","subscription","toLowerCase","apiKey","tier","headers","Object","keys","includes","getRateLimitConfig","userTier","category","tierConfig","categoryConfig","Math","floor","generateKey","identifier","isWhitelisted","ip","has","privateNetworks","some","network","test","isBlocked","blockKey","exists","blockIP","duration","reason","add","setex","JSON","stringify","timestamp","setTimeout","delete","logSecurityEvent","maskIP","toISOString","checkRateLimit","connection","remoteAddress","userAgent","get","allowed","remaining","Infinity","resetTime","substring","retryAfter","blocked","config","sub","key","result","checkRedisRateLimit","checkMemoryRateLimit","trackActivity","maskIdentifier","limit","windowStart","pipeline","zremrangebyscore","zcard","zadd","random","expire","ceil","results","exec","currentRequests","zpopmax","oldestRequest","zrange","length","parseInt","set","totalRequests","blockedRequests","limiter","filter","min","push","rateLimitResult","activityKey","activity","lpush","ltrim","detectAnomalies","suspiciousKey","activities","violations","lastViolation","suspicious","oneHourAgo","a","patterns","analyzeActivityPatterns","score","checks","rapidRequests","multipleUserAgents","highErrorRate","distributedTiming","fiveMinutesAgo","recentRequests","uniqueUserAgents","map","size","errorRate","intervals","i","avgInterval","reduce","regularPattern","interval","abs","riskLevel","updateSystemLoad","memUsage","memoryUsage","memoryPressure","heapUsed","heapTotal","middleware","res","next","status","json","success","setInterval","entries","data","type","details","parts","split","slice","join","getStats","stats","redisConnected","redisInfo","info","redisMemory","redisError","shutdown","quit","module","exports"],"sources":["advancedRateLimit.js"],"sourcesContent":["/**\n * Advanced Rate Limiting Middleware with Redis Backend\n * \n * Features:\n * - User-tier based rate limiting (free, premium, professional)\n * - Dynamic threshold adjustment based on system load\n * - Redis-backed distributed rate limiting for Lambda scaling\n * - Intelligent IP blocking and whitelist management\n * - Behavioral analysis and anomaly detection\n * - Sliding window rate limiting for more accurate control\n * - Rate limit bypasses for verified trading algorithms\n */\n\nconst Redis = require('ioredis');\nconst crypto = require('crypto');\n\nclass AdvancedRateLimiter {\n    constructor(options = {}) {\n        this.options = {\n            redisHost: options.redisHost || process.env.REDIS_HOST || 'localhost',\n            redisPort: options.redisPort || process.env.REDIS_PORT || 6379,\n            redisPassword: options.redisPassword || process.env.REDIS_PASSWORD,\n            keyPrefix: options.keyPrefix || 'rate_limit:',\n            enableRedis: options.enableRedis !== false && (process.env.REDIS_HOST || process.env.NODE_ENV === 'production'),\n            ...options\n        };\n\n        // Initialize Redis connection for production\n        this.redis = null;\n        if (this.options.enableRedis) {\n            try {\n                this.redis = new Redis({\n                    host: this.options.redisHost,\n                    port: this.options.redisPort,\n                    password: this.options.redisPassword,\n                    retryDelayOnFailover: 100,\n                    enableReadyCheck: true,\n                    maxRetriesPerRequest: 3,\n                    connectTimeout: 10000,\n                    commandTimeout: 5000\n                });\n\n                this.redis.on('error', (error) => {\n                    console.error('Redis connection error:', error.message);\n                    // Fallback to in-memory store\n                    this.redis = null;\n                });\n\n                this.redis.on('connect', () => {\n                    console.log('âœ… Redis connected for advanced rate limiting');\n                });\n\n            } catch (error) {\n                console.warn('Failed to initialize Redis, using in-memory rate limiting:', error.message);\n                this.redis = null;\n            }\n        }\n\n        // In-memory fallback for Lambda environments without Redis\n        this.memoryStore = new Map();\n        this.blockedIPs = new Set();\n        this.whitelistedIPs = new Set();\n        this.suspiciousIPs = new Map();\n\n        // User tier configurations\n        this.userTierLimits = {\n            free: {\n                requests: 60,           // requests per minute\n                burst: 10,              // burst allowance\n                window: 60 * 1000,      // 1 minute\n                blockDuration: 15 * 60 * 1000, // 15 minutes\n                categories: {\n                    auth: { requests: 5, window: 15 * 60 * 1000 },\n                    api: { requests: 60, window: 60 * 1000 },\n                    trading: { requests: 30, window: 60 * 1000 },\n                    heavy: { requests: 5, window: 5 * 60 * 1000 }\n                }\n            },\n            premium: {\n                requests: 300,\n                burst: 50,\n                window: 60 * 1000,\n                blockDuration: 10 * 60 * 1000,\n                categories: {\n                    auth: { requests: 10, window: 15 * 60 * 1000 },\n                    api: { requests: 300, window: 60 * 1000 },\n                    trading: { requests: 150, window: 60 * 1000 },\n                    heavy: { requests: 20, window: 5 * 60 * 1000 }\n                }\n            },\n            professional: {\n                requests: 1000,\n                burst: 200,\n                window: 60 * 1000,\n                blockDuration: 5 * 60 * 1000,\n                categories: {\n                    auth: { requests: 20, window: 15 * 60 * 1000 },\n                    api: { requests: 1000, window: 60 * 1000 },\n                    trading: { requests: 500, window: 60 * 1000 },\n                    heavy: { requests: 50, window: 5 * 60 * 1000 }\n                }\n            },\n            institutional: {\n                requests: 5000,\n                burst: 1000,\n                window: 60 * 1000,\n                blockDuration: 60 * 1000,\n                categories: {\n                    auth: { requests: 50, window: 15 * 60 * 1000 },\n                    api: { requests: 5000, window: 60 * 1000 },\n                    trading: { requests: 2000, window: 60 * 1000 },\n                    heavy: { requests: 200, window: 5 * 60 * 1000 }\n                }\n            }\n        };\n\n        // Dynamic threshold adjustments based on system metrics\n        this.systemLoadFactor = 1.0;\n        this.lastLoadCheck = Date.now();\n        \n        // Cleanup interval for memory store\n        this.startCleanupInterval();\n    }\n\n    /**\n     * Get user tier from request context\n     */\n    async getUserTier(req) {\n        // Extract from JWT token custom claims\n        if (req.user && req.user.subscription) {\n            return req.user.subscription.toLowerCase();\n        }\n\n        // Extract from API key tier (if using API key authentication)\n        if (req.apiKey && req.apiKey.tier) {\n            return req.apiKey.tier.toLowerCase();\n        }\n\n        // Check premium headers for institutional clients\n        if (req.headers['x-client-tier']) {\n            const tier = req.headers['x-client-tier'].toLowerCase();\n            if (Object.keys(this.userTierLimits).includes(tier)) {\n                return tier;\n            }\n        }\n\n        // Default to free tier\n        return 'free';\n    }\n\n    /**\n     * Get rate limit configuration for user and category\n     */\n    getRateLimitConfig(userTier, category = 'api') {\n        const tierConfig = this.userTierLimits[userTier] || this.userTierLimits.free;\n        const categoryConfig = tierConfig.categories[category];\n        \n        if (categoryConfig) {\n            return {\n                requests: Math.floor(categoryConfig.requests * this.systemLoadFactor),\n                window: categoryConfig.window,\n                burst: tierConfig.burst,\n                blockDuration: tierConfig.blockDuration\n            };\n        }\n\n        return {\n            requests: Math.floor(tierConfig.requests * this.systemLoadFactor),\n            window: tierConfig.window,\n            burst: tierConfig.burst,\n            blockDuration: tierConfig.blockDuration\n        };\n    }\n\n    /**\n     * Generate rate limiting key\n     */\n    generateKey(identifier, category, userTier) {\n        return `${this.options.keyPrefix}${identifier}:${category}:${userTier}`;\n    }\n\n    /**\n     * Check if IP is whitelisted\n     */\n    isWhitelisted(ip) {\n        // Check static whitelist\n        if (this.whitelistedIPs.has(ip)) {\n            return true;\n        }\n\n        // Check for internal/private networks\n        const privateNetworks = [\n            /^127\\./,           // localhost\n            /^10\\./,            // private class A\n            /^172\\.(1[6-9]|2\\d|3[01])\\./,  // private class B\n            /^192\\.168\\./,      // private class C\n            /^169\\.254\\./,      // link-local\n            /^::1$/,            // IPv6 localhost\n            /^fc00:/,           // IPv6 private\n        ];\n\n        return privateNetworks.some(network => network.test(ip));\n    }\n\n    /**\n     * Check if IP is blocked\n     */\n    async isBlocked(ip) {\n        if (this.blockedIPs.has(ip)) {\n            return true;\n        }\n\n        if (this.redis) {\n            try {\n                const blockKey = `${this.options.keyPrefix}blocked:${ip}`;\n                const isBlocked = await this.redis.exists(blockKey);\n                return isBlocked === 1;\n            } catch (error) {\n                console.error('Redis block check failed:', error.message);\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Block IP address\n     */\n    async blockIP(ip, duration, reason = 'Rate limit exceeded') {\n        this.blockedIPs.add(ip);\n        \n        if (this.redis) {\n            try {\n                const blockKey = `${this.options.keyPrefix}blocked:${ip}`;\n                await this.redis.setex(blockKey, Math.floor(duration / 1000), JSON.stringify({\n                    reason,\n                    timestamp: Date.now(),\n                    duration\n                }));\n            } catch (error) {\n                console.error('Redis block operation failed:', error.message);\n            }\n        } else {\n            // Remove from memory after duration\n            setTimeout(() => {\n                this.blockedIPs.delete(ip);\n            }, duration);\n        }\n\n        this.logSecurityEvent('IP_BLOCKED', {\n            ip: this.maskIP(ip),\n            reason,\n            duration: duration / 1000,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    /**\n     * Check rate limit using sliding window algorithm\n     */\n    async checkRateLimit(req, category = 'api') {\n        const ip = req.ip || req.connection.remoteAddress;\n        const userAgent = req.get('User-Agent') || 'unknown';\n        const userTier = await this.getUserTier(req);\n        const now = Date.now();\n\n        // Check if IP is whitelisted\n        if (this.isWhitelisted(ip)) {\n            return {\n                allowed: true,\n                reason: 'Whitelisted IP',\n                remaining: Infinity,\n                resetTime: null\n            };\n        }\n\n        // Check if IP is blocked\n        if (await this.isBlocked(ip)) {\n            this.logSecurityEvent('BLOCKED_IP_ACCESS_ATTEMPT', {\n                ip: this.maskIP(ip),\n                userAgent: userAgent.substring(0, 100),\n                category,\n                userTier,\n                timestamp: new Date().toISOString()\n            });\n\n            return {\n                allowed: false,\n                reason: 'IP temporarily blocked',\n                retryAfter: 300, // 5 minutes\n                blocked: true\n            };\n        }\n\n        const config = this.getRateLimitConfig(userTier, category);\n        const identifier = req.user?.sub || ip; // Use user ID if authenticated, otherwise IP\n        const key = this.generateKey(identifier, category, userTier);\n\n        try {\n            let result;\n            \n            if (this.redis) {\n                result = await this.checkRedisRateLimit(key, config, now);\n            } else {\n                result = await this.checkMemoryRateLimit(key, config, now);\n            }\n\n            // Track suspicious activity\n            await this.trackActivity(identifier, ip, userAgent, category, result, config);\n\n            // Log rate limit events\n            if (!result.allowed) {\n                this.logSecurityEvent('RATE_LIMIT_EXCEEDED', {\n                    identifier: this.maskIdentifier(identifier),\n                    ip: this.maskIP(ip),\n                    category,\n                    userTier,\n                    requests: result.requests,\n                    limit: config.requests,\n                    window: config.window / 1000,\n                    timestamp: new Date().toISOString()\n                });\n            }\n\n            return result;\n\n        } catch (error) {\n            console.error('Rate limit check failed:', error.message);\n            // Fail open for availability\n            return {\n                allowed: true,\n                reason: 'Rate limiter error',\n                error: true\n            };\n        }\n    }\n\n    /**\n     * Redis-based rate limiting with sliding window\n     */\n    async checkRedisRateLimit(key, config, now) {\n        const windowStart = now - config.window;\n        \n        // Use Redis pipeline for atomic operations\n        const pipeline = this.redis.pipeline();\n        \n        // Remove expired entries\n        pipeline.zremrangebyscore(key, 0, windowStart);\n        \n        // Count current requests in window\n        pipeline.zcard(key);\n        \n        // Add current request\n        pipeline.zadd(key, now, `${now}-${Math.random()}`);\n        \n        // Set expiry\n        pipeline.expire(key, Math.ceil(config.window / 1000));\n        \n        const results = await pipeline.exec();\n        const currentRequests = results[1][1]; // Count result\n        \n        if (currentRequests >= config.requests) {\n            // Remove the request we just added since it's not allowed\n            await this.redis.zpopmax(key);\n            \n            const oldestRequest = await this.redis.zrange(key, 0, 0, 'WITHSCORES');\n            const resetTime = oldestRequest.length > 0 ? \n                parseInt(oldestRequest[1]) + config.window : \n                now + config.window;\n            \n            return {\n                allowed: false,\n                requests: currentRequests,\n                limit: config.requests,\n                remaining: 0,\n                resetTime: new Date(resetTime).toISOString(),\n                retryAfter: Math.ceil((resetTime - now) / 1000)\n            };\n        }\n\n        return {\n            allowed: true,\n            requests: currentRequests + 1,\n            limit: config.requests,\n            remaining: config.requests - currentRequests - 1,\n            resetTime: new Date(now + config.window).toISOString()\n        };\n    }\n\n    /**\n     * Memory-based rate limiting fallback\n     */\n    async checkMemoryRateLimit(key, config, now) {\n        if (!this.memoryStore.has(key)) {\n            this.memoryStore.set(key, {\n                requests: [],\n                totalRequests: 0,\n                blockedRequests: 0\n            });\n        }\n\n        const limiter = this.memoryStore.get(key);\n        const windowStart = now - config.window;\n\n        // Remove expired requests\n        limiter.requests = limiter.requests.filter(timestamp => timestamp > windowStart);\n\n        if (limiter.requests.length >= config.requests) {\n            limiter.blockedRequests++;\n            \n            const oldestRequest = Math.min(...limiter.requests);\n            const resetTime = oldestRequest + config.window;\n\n            return {\n                allowed: false,\n                requests: limiter.requests.length,\n                limit: config.requests,\n                remaining: 0,\n                resetTime: new Date(resetTime).toISOString(),\n                retryAfter: Math.ceil((resetTime - now) / 1000)\n            };\n        }\n\n        // Add current request\n        limiter.requests.push(now);\n        limiter.totalRequests++;\n\n        return {\n            allowed: true,\n            requests: limiter.requests.length,\n            limit: config.requests,\n            remaining: config.requests - limiter.requests.length,\n            resetTime: new Date(now + config.window).toISOString()\n        };\n    }\n\n    /**\n     * Track user activity for anomaly detection\n     */\n    async trackActivity(identifier, ip, userAgent, category, rateLimitResult, config) {\n        const activityKey = `activity:${identifier}`;\n        const now = Date.now();\n        \n        const activity = {\n            timestamp: now,\n            ip,\n            userAgent: userAgent.substring(0, 100),\n            category,\n            allowed: rateLimitResult.allowed,\n            requests: rateLimitResult.requests\n        };\n\n        if (this.redis) {\n            try {\n                // Store activity with 1 hour expiry\n                await this.redis.lpush(activityKey, JSON.stringify(activity));\n                await this.redis.ltrim(activityKey, 0, 99); // Keep last 100 activities\n                await this.redis.expire(activityKey, 3600);\n            } catch (error) {\n                console.error('Redis activity tracking failed:', error.message);\n            }\n        }\n\n        // Check for suspicious patterns\n        await this.detectAnomalies(identifier, ip, activity, config);\n    }\n\n    /**\n     * Detect anomalous behavior patterns\n     */\n    async detectAnomalies(identifier, ip, activity, config) {\n        const suspiciousKey = `suspicious:${ip}`;\n        \n        if (!this.suspiciousIPs.has(suspiciousKey)) {\n            this.suspiciousIPs.set(suspiciousKey, {\n                activities: [],\n                violations: 0,\n                lastViolation: null\n            });\n        }\n\n        const suspicious = this.suspiciousIPs.get(suspiciousKey);\n        suspicious.activities.push(activity);\n\n        // Keep only last hour of activities\n        const oneHourAgo = Date.now() - (60 * 60 * 1000);\n        suspicious.activities = suspicious.activities.filter(a => a.timestamp > oneHourAgo);\n\n        // Analyze patterns\n        const patterns = this.analyzeActivityPatterns(suspicious.activities);\n\n        if (patterns.suspicious) {\n            suspicious.violations++;\n            suspicious.lastViolation = Date.now();\n\n            this.logSecurityEvent('SUSPICIOUS_ACTIVITY_DETECTED', {\n                ip: this.maskIP(ip),\n                identifier: this.maskIdentifier(identifier),\n                patterns,\n                violations: suspicious.violations,\n                timestamp: new Date().toISOString()\n            });\n\n            // Auto-block after multiple violations\n            if (suspicious.violations >= 3) {\n                await this.blockIP(ip, config.blockDuration * 2, 'Suspicious activity pattern detected');\n            }\n        }\n    }\n\n    /**\n     * Analyze activity patterns for anomalies\n     */\n    analyzeActivityPatterns(activities) {\n        if (activities.length < 10) {\n            return { suspicious: false, score: 0 };\n        }\n\n        let score = 0;\n        const checks = {\n            rapidRequests: false,\n            multipleUserAgents: false,\n            highErrorRate: false,\n            distributedTiming: false\n        };\n\n        // Check for rapid requests (>50 requests in 5 minutes)\n        const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);\n        const recentRequests = activities.filter(a => a.timestamp > fiveMinutesAgo);\n        if (recentRequests.length > 50) {\n            checks.rapidRequests = true;\n            score += 40;\n        }\n\n        // Check for multiple user agents\n        const uniqueUserAgents = new Set(activities.map(a => a.userAgent));\n        if (uniqueUserAgents.size > 3) {\n            checks.multipleUserAgents = true;\n            score += 30;\n        }\n\n        // Check for high error rate (blocked requests)\n        const blockedRequests = activities.filter(a => !a.allowed);\n        const errorRate = blockedRequests.length / activities.length;\n        if (errorRate > 0.3) { // >30% error rate\n            checks.highErrorRate = true;\n            score += 25;\n        }\n\n        // Check for distributed timing attacks\n        const intervals = [];\n        for (let i = 1; i < activities.length; i++) {\n            intervals.push(activities[i].timestamp - activities[i-1].timestamp);\n        }\n        const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\n        const regularPattern = intervals.filter(interval => \n            Math.abs(interval - avgInterval) < avgInterval * 0.1\n        ).length;\n        \n        if (regularPattern / intervals.length > 0.8) { // >80% regular intervals\n            checks.distributedTiming = true;\n            score += 20;\n        }\n\n        return {\n            suspicious: score > 50,\n            score,\n            checks,\n            riskLevel: score > 80 ? 'HIGH' : score > 50 ? 'MEDIUM' : 'LOW'\n        };\n    }\n\n    /**\n     * Update system load factor for dynamic adjustment\n     */\n    updateSystemLoad() {\n        const now = Date.now();\n        \n        // Check every 30 seconds\n        if (now - this.lastLoadCheck < 30000) {\n            return;\n        }\n\n        this.lastLoadCheck = now;\n\n        // Simple load calculation based on memory usage\n        const memUsage = process.memoryUsage();\n        const memoryPressure = memUsage.heapUsed / memUsage.heapTotal;\n\n        if (memoryPressure > 0.8) {\n            this.systemLoadFactor = 0.5; // Reduce limits by 50%\n        } else if (memoryPressure > 0.6) {\n            this.systemLoadFactor = 0.7; // Reduce limits by 30%\n        } else {\n            this.systemLoadFactor = 1.0; // Normal limits\n        }\n    }\n\n    /**\n     * Create Express middleware\n     */\n    middleware(category = 'api') {\n        return async (req, res, next) => {\n            try {\n                this.updateSystemLoad();\n                \n                const result = await this.checkRateLimit(req, category);\n                \n                if (!result.allowed) {\n                    // Set rate limit headers\n                    if (result.limit) {\n                        res.set({\n                            'X-RateLimit-Limit': result.limit,\n                            'X-RateLimit-Remaining': result.remaining || 0,\n                            'X-RateLimit-Reset': result.resetTime || new Date(Date.now() + 60000).toISOString(),\n                            'Retry-After': result.retryAfter || 60\n                        });\n                    }\n\n                    return res.status(429).json({\n                        success: false,\n                        error: 'Rate limit exceeded',\n                        message: result.reason || 'Too many requests',\n                        retryAfter: result.retryAfter || 60,\n                        blocked: result.blocked || false,\n                        category\n                    });\n                }\n\n                // Set success headers\n                if (result.limit) {\n                    res.set({\n                        'X-RateLimit-Limit': result.limit,\n                        'X-RateLimit-Remaining': result.remaining,\n                        'X-RateLimit-Reset': result.resetTime\n                    });\n                }\n\n                next();\n\n            } catch (error) {\n                console.error('Rate limiting middleware error:', error.message);\n                // Fail open for availability\n                next();\n            }\n        };\n    }\n\n    /**\n     * Cleanup memory store periodically\n     */\n    startCleanupInterval() {\n        setInterval(() => {\n            const now = Date.now();\n            const oneHourAgo = now - (60 * 60 * 1000);\n\n            // Clean memory store\n            for (const [key, limiter] of this.memoryStore.entries()) {\n                limiter.requests = limiter.requests.filter(timestamp => timestamp > oneHourAgo);\n                if (limiter.requests.length === 0) {\n                    this.memoryStore.delete(key);\n                }\n            }\n\n            // Clean suspicious IPs\n            for (const [key, data] of this.suspiciousIPs.entries()) {\n                if (data.lastViolation && now - data.lastViolation > oneHourAgo) {\n                    this.suspiciousIPs.delete(key);\n                }\n            }\n\n            console.log(`Rate limiter cleanup: ${this.memoryStore.size} active limiters, ${this.suspiciousIPs.size} suspicious IPs`);\n        }, 10 * 60 * 1000); // Every 10 minutes\n    }\n\n    /**\n     * Log security events\n     */\n    logSecurityEvent(type, details) {\n        console.warn(`[RATE LIMITER SECURITY] ${type}:`, details);\n        // In production, integrate with security monitoring\n    }\n\n    /**\n     * Mask IP for privacy in logs\n     */\n    maskIP(ip) {\n        if (ip.includes(':')) {\n            // IPv6\n            const parts = ip.split(':');\n            return parts.slice(0, 4).join(':') + '::***';\n        } else {\n            // IPv4\n            const parts = ip.split('.');\n            return parts.slice(0, 2).join('.') + '.***';\n        }\n    }\n\n    /**\n     * Mask identifier for privacy\n     */\n    maskIdentifier(identifier) {\n        if (identifier.length > 8) {\n            return identifier.substring(0, 4) + '***' + identifier.slice(-4);\n        }\n        return '***';\n    }\n\n    /**\n     * Get rate limiting statistics\n     */\n    async getStats() {\n        const stats = {\n            memoryStore: this.memoryStore.size,\n            blockedIPs: this.blockedIPs.size,\n            suspiciousIPs: this.suspiciousIPs.size,\n            systemLoadFactor: this.systemLoadFactor,\n            redisConnected: this.redis && this.redis.status === 'ready'\n        };\n\n        if (this.redis) {\n            try {\n                const redisInfo = await this.redis.info('memory');\n                stats.redisMemory = redisInfo;\n            } catch (error) {\n                stats.redisError = error.message;\n            }\n        }\n\n        return stats;\n    }\n\n    /**\n     * Graceful shutdown\n     */\n    async shutdown() {\n        if (this.redis) {\n            await this.redis.quit();\n        }\n    }\n}\n\nmodule.exports = AdvancedRateLimiter;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,KAAK;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,MAAM;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAME,mBAAmB,CAAC;EACtBC,WAAWA,CAACC,OAAO;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACtB,IAAI,CAACK,OAAO,GAAG;MACXG,SAAS;MAAE;MAAA,CAAAX,cAAA,GAAAS,CAAA,UAAAD,OAAO,CAACG,SAAS;MAAA;MAAA,CAAAX,cAAA,GAAAS,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACC,UAAU;MAAA;MAAA,CAAAd,cAAA,GAAAS,CAAA,UAAI,WAAW;MACrEM,SAAS;MAAE;MAAA,CAAAf,cAAA,GAAAS,CAAA,UAAAD,OAAO,CAACO,SAAS;MAAA;MAAA,CAAAf,cAAA,GAAAS,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACG,UAAU;MAAA;MAAA,CAAAhB,cAAA,GAAAS,CAAA,UAAI,IAAI;MAC9DQ,aAAa;MAAE;MAAA,CAAAjB,cAAA,GAAAS,CAAA,UAAAD,OAAO,CAACS,aAAa;MAAA;MAAA,CAAAjB,cAAA,GAAAS,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACK,cAAc;MAClEC,SAAS;MAAE;MAAA,CAAAnB,cAAA,GAAAS,CAAA,UAAAD,OAAO,CAACW,SAAS;MAAA;MAAA,CAAAnB,cAAA,GAAAS,CAAA,UAAI,aAAa;MAC7CW,WAAW;MAAE;MAAA,CAAApB,cAAA,GAAAS,CAAA,UAAAD,OAAO,CAACY,WAAW,KAAK,KAAK;MAAK;MAAA,CAAApB,cAAA,GAAAS,CAAA,UAAAG,OAAO,CAACC,GAAG,CAACC,UAAU;MAAA;MAAA,CAAAd,cAAA,GAAAS,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY,EAAC;MAC/G,GAAGb;IACP,CAAC;;IAED;IAAA;IAAAR,cAAA,GAAAG,CAAA;IACA,IAAI,CAACmB,KAAK,GAAG,IAAI;IAAC;IAAAtB,cAAA,GAAAG,CAAA;IAClB,IAAI,IAAI,CAACK,OAAO,CAACY,WAAW,EAAE;MAAA;MAAApB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC1B,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACA,IAAI,CAACmB,KAAK,GAAG,IAAIpB,KAAK,CAAC;UACnBqB,IAAI,EAAE,IAAI,CAACf,OAAO,CAACG,SAAS;UAC5Ba,IAAI,EAAE,IAAI,CAAChB,OAAO,CAACO,SAAS;UAC5BU,QAAQ,EAAE,IAAI,CAACjB,OAAO,CAACS,aAAa;UACpCS,oBAAoB,EAAE,GAAG;UACzBC,gBAAgB,EAAE,IAAI;UACtBC,oBAAoB,EAAE,CAAC;UACvBC,cAAc,EAAE,KAAK;UACrBC,cAAc,EAAE;QACpB,CAAC,CAAC;QAAC;QAAA9B,cAAA,GAAAG,CAAA;QAEH,IAAI,CAACmB,KAAK,CAACS,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;UAAA;UAAAhC,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAC9B8B,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACE,OAAO,CAAC;UACvD;UAAA;UAAAlC,cAAA,GAAAG,CAAA;UACA,IAAI,CAACmB,KAAK,GAAG,IAAI;QACrB,CAAC,CAAC;QAAC;QAAAtB,cAAA,GAAAG,CAAA;QAEH,IAAI,CAACmB,KAAK,CAACS,EAAE,CAAC,SAAS,EAAE,MAAM;UAAA;UAAA/B,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAC3B8B,OAAO,CAACE,GAAG,CAAC,8CAA8C,CAAC;QAC/D,CAAC,CAAC;MAEN,CAAC,CAAC,OAAOH,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ8B,OAAO,CAACG,IAAI,CAAC,4DAA4D,EAAEJ,KAAK,CAACE,OAAO,CAAC;QAAC;QAAAlC,cAAA,GAAAG,CAAA;QAC1F,IAAI,CAACmB,KAAK,GAAG,IAAI;MACrB;IACJ,CAAC;IAAA;IAAA;MAAAtB,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA,IAAI,CAACkC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAtC,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAACoC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAC5B,IAAI,CAACsC,cAAc,GAAG,IAAID,GAAG,CAAC,CAAC;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAChC,IAAI,CAACuC,aAAa,GAAG,IAAIJ,GAAG,CAAC,CAAC;;IAE9B;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI,CAACwC,cAAc,GAAG;MAClBC,IAAI,EAAE;QACFC,QAAQ,EAAE,EAAE;QAAY;QACxBC,KAAK,EAAE,EAAE;QAAe;QACxBC,MAAM,EAAE,EAAE,GAAG,IAAI;QAAO;QACxBC,aAAa,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;QAAE;QAC/BC,UAAU,EAAE;UACRC,IAAI,EAAE;YAAEL,QAAQ,EAAE,CAAC;YAAEE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG;UAAK,CAAC;UAC7CI,GAAG,EAAE;YAAEN,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UACxCK,OAAO,EAAE;YAAEP,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC5CM,KAAK,EAAE;YAAER,QAAQ,EAAE,CAAC;YAAEE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;UAAK;QAChD;MACJ,CAAC;MACDO,OAAO,EAAE;QACLT,QAAQ,EAAE,GAAG;QACbC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE,GAAG,IAAI;QACjBC,aAAa,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;QAC7BC,UAAU,EAAE;UACRC,IAAI,EAAE;YAAEL,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG;UAAK,CAAC;UAC9CI,GAAG,EAAE;YAAEN,QAAQ,EAAE,GAAG;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UACzCK,OAAO,EAAE;YAAEP,QAAQ,EAAE,GAAG;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC7CM,KAAK,EAAE;YAAER,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;UAAK;QACjD;MACJ,CAAC;MACDQ,YAAY,EAAE;QACVV,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,EAAE,GAAG,IAAI;QACjBC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;QAC5BC,UAAU,EAAE;UACRC,IAAI,EAAE;YAAEL,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG;UAAK,CAAC;UAC9CI,GAAG,EAAE;YAAEN,QAAQ,EAAE,IAAI;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC1CK,OAAO,EAAE;YAAEP,QAAQ,EAAE,GAAG;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC7CM,KAAK,EAAE;YAAER,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;UAAK;QACjD;MACJ,CAAC;MACDS,aAAa,EAAE;QACXX,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,EAAE,GAAG,IAAI;QACjBC,aAAa,EAAE,EAAE,GAAG,IAAI;QACxBC,UAAU,EAAE;UACRC,IAAI,EAAE;YAAEL,QAAQ,EAAE,EAAE;YAAEE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG;UAAK,CAAC;UAC9CI,GAAG,EAAE;YAAEN,QAAQ,EAAE,IAAI;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC1CK,OAAO,EAAE;YAAEP,QAAQ,EAAE,IAAI;YAAEE,MAAM,EAAE,EAAE,GAAG;UAAK,CAAC;UAC9CM,KAAK,EAAE;YAAER,QAAQ,EAAE,GAAG;YAAEE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG;UAAK;QAClD;MACJ;IACJ,CAAC;;IAED;IAAA;IAAA/C,cAAA,GAAAG,CAAA;IACA,IAAI,CAACsD,gBAAgB,GAAG,GAAG;IAAC;IAAAzD,cAAA,GAAAG,CAAA;IAC5B,IAAI,CAACuD,aAAa,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE/B;IAAA;IAAA5D,cAAA,GAAAG,CAAA;IACA,IAAI,CAAC0D,oBAAoB,CAAC,CAAC;EAC/B;;EAEA;AACJ;AACA;EACI,MAAMC,WAAWA,CAACC,GAAG,EAAE;IAAA;IAAA/D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACnB;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAS,CAAA,UAAAsD,GAAG,CAACC,IAAI;IAAA;IAAA,CAAAhE,cAAA,GAAAS,CAAA,UAAIsD,GAAG,CAACC,IAAI,CAACC,YAAY,GAAE;MAAA;MAAAjE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACnC,OAAO4D,GAAG,CAACC,IAAI,CAACC,YAAY,CAACC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAAA;IAAA;MAAAlE,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAS,CAAA,WAAAsD,GAAG,CAACI,MAAM;IAAA;IAAA,CAAAnE,cAAA,GAAAS,CAAA,WAAIsD,GAAG,CAACI,MAAM,CAACC,IAAI,GAAE;MAAA;MAAApE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC/B,OAAO4D,GAAG,CAACI,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC,CAAC;IACxC,CAAC;IAAA;IAAA;MAAAlE,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA,IAAI4D,GAAG,CAACM,OAAO,CAAC,eAAe,CAAC,EAAE;MAAA;MAAArE,cAAA,GAAAS,CAAA;MAC9B,MAAM2D,IAAI;MAAA;MAAA,CAAApE,cAAA,GAAAG,CAAA,QAAG4D,GAAG,CAACM,OAAO,CAAC,eAAe,CAAC,CAACH,WAAW,CAAC,CAAC;MAAC;MAAAlE,cAAA,GAAAG,CAAA;MACxD,IAAImE,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC5B,cAAc,CAAC,CAAC6B,QAAQ,CAACJ,IAAI,CAAC,EAAE;QAAA;QAAApE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACjD,OAAOiE,IAAI;MACf,CAAC;MAAA;MAAA;QAAApE,cAAA,GAAAS,CAAA;MAAA;IACL,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA,OAAO,MAAM;EACjB;;EAEA;AACJ;AACA;EACIsE,kBAAkBA,CAACC,QAAQ,EAAEC,QAAQ;EAAA;EAAA,CAAA3E,cAAA,GAAAS,CAAA,WAAG,KAAK,GAAE;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAC3C,MAAMkE,UAAU;IAAA;IAAA,CAAA5E,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAS,CAAA,eAAI,CAACkC,cAAc,CAAC+B,QAAQ,CAAC;IAAA;IAAA,CAAA1E,cAAA,GAAAS,CAAA,WAAI,IAAI,CAACkC,cAAc,CAACC,IAAI;IAC5E,MAAMiC,cAAc;IAAA;IAAA,CAAA7E,cAAA,GAAAG,CAAA,QAAGyE,UAAU,CAAC3B,UAAU,CAAC0B,QAAQ,CAAC;IAAC;IAAA3E,cAAA,GAAAG,CAAA;IAEvD,IAAI0E,cAAc,EAAE;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAChB,OAAO;QACH0C,QAAQ,EAAEiC,IAAI,CAACC,KAAK,CAACF,cAAc,CAAChC,QAAQ,GAAG,IAAI,CAACY,gBAAgB,CAAC;QACrEV,MAAM,EAAE8B,cAAc,CAAC9B,MAAM;QAC7BD,KAAK,EAAE8B,UAAU,CAAC9B,KAAK;QACvBE,aAAa,EAAE4B,UAAU,CAAC5B;MAC9B,CAAC;IACL,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAO;MACH0C,QAAQ,EAAEiC,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC/B,QAAQ,GAAG,IAAI,CAACY,gBAAgB,CAAC;MACjEV,MAAM,EAAE6B,UAAU,CAAC7B,MAAM;MACzBD,KAAK,EAAE8B,UAAU,CAAC9B,KAAK;MACvBE,aAAa,EAAE4B,UAAU,CAAC5B;IAC9B,CAAC;EACL;;EAEA;AACJ;AACA;EACIgC,WAAWA,CAACC,UAAU,EAAEN,QAAQ,EAAED,QAAQ,EAAE;IAAA;IAAA1E,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACxC,OAAO,GAAG,IAAI,CAACK,OAAO,CAACW,SAAS,GAAG8D,UAAU,IAAIN,QAAQ,IAAID,QAAQ,EAAE;EAC3E;;EAEA;AACJ;AACA;EACIQ,aAAaA,CAACC,EAAE,EAAE;IAAA;IAAAnF,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACd;IACA,IAAI,IAAI,CAACsC,cAAc,CAAC2C,GAAG,CAACD,EAAE,CAAC,EAAE;MAAA;MAAAnF,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC7B,OAAO,IAAI;IACf,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAS,CAAA;IAAA;;IAED;IACA,MAAM4E,eAAe;IAAA;IAAA,CAAArF,cAAA,GAAAG,CAAA,QAAG,CACpB,QAAQ;IAAY;IACpB,OAAO;IAAa;IACpB,4BAA4B;IAAG;IAC/B,aAAa;IAAO;IACpB,aAAa;IAAO;IACpB,OAAO;IAAa;IACpB,QAAQ,CAAY;IAAA,CACvB;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,OAAOkF,eAAe,CAACC,IAAI,CAACC,OAAO,IAAI;MAAA;MAAAvF,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAoF,OAAO,CAACC,IAAI,CAACL,EAAE,CAAC;IAAD,CAAC,CAAC;EAC5D;;EAEA;AACJ;AACA;EACI,MAAMM,SAASA,CAACN,EAAE,EAAE;IAAA;IAAAnF,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAChB,IAAI,IAAI,CAACoC,UAAU,CAAC6C,GAAG,CAACD,EAAE,CAAC,EAAE;MAAA;MAAAnF,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACzB,OAAO,IAAI;IACf,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,IAAI,IAAI,CAACmB,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACZ,IAAI;QACA,MAAMuF,QAAQ;QAAA;QAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAG,GAAG,IAAI,CAACK,OAAO,CAACW,SAAS,WAAWgE,EAAE,EAAE;QACzD,MAAMM,SAAS;QAAA;QAAA,CAAAzF,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACmB,KAAK,CAACqE,MAAM,CAACD,QAAQ,CAAC;QAAC;QAAA1F,cAAA,GAAAG,CAAA;QACpD,OAAOsF,SAAS,KAAK,CAAC;MAC1B,CAAC,CAAC,OAAOzD,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ8B,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC;QAAC;QAAAlC,cAAA,GAAAG,CAAA;QAC1D,OAAO,KAAK;MAChB;IACJ,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAO,KAAK;EAChB;;EAEA;AACJ;AACA;EACI,MAAMyF,OAAOA,CAACT,EAAE,EAAEU,QAAQ,EAAEC,MAAM;EAAA;EAAA,CAAA9F,cAAA,GAAAS,CAAA,WAAG,qBAAqB,GAAE;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACxD,IAAI,CAACoC,UAAU,CAACwD,GAAG,CAACZ,EAAE,CAAC;IAAC;IAAAnF,cAAA,GAAAG,CAAA;IAExB,IAAI,IAAI,CAACmB,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACZ,IAAI;QACA,MAAMuF,QAAQ;QAAA;QAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAG,GAAG,IAAI,CAACK,OAAO,CAACW,SAAS,WAAWgE,EAAE,EAAE;QAAC;QAAAnF,cAAA,GAAAG,CAAA;QAC1D,MAAM,IAAI,CAACmB,KAAK,CAAC0E,KAAK,CAACN,QAAQ,EAAEZ,IAAI,CAACC,KAAK,CAACc,QAAQ,GAAG,IAAI,CAAC,EAAEI,IAAI,CAACC,SAAS,CAAC;UACzEJ,MAAM;UACNK,SAAS,EAAExC,IAAI,CAACC,GAAG,CAAC,CAAC;UACrBiC;QACJ,CAAC,CAAC,CAAC;MACP,CAAC,CAAC,OAAO7D,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ8B,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACE,OAAO,CAAC;MACjE;IACJ,CAAC,MAAM;MAAA;MAAAlC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACH;MACAiG,UAAU,CAAC,MAAM;QAAA;QAAApG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QACb,IAAI,CAACoC,UAAU,CAAC8D,MAAM,CAAClB,EAAE,CAAC;MAC9B,CAAC,EAAEU,QAAQ,CAAC;IAChB;IAAC;IAAA7F,cAAA,GAAAG,CAAA;IAED,IAAI,CAACmG,gBAAgB,CAAC,YAAY,EAAE;MAChCnB,EAAE,EAAE,IAAI,CAACoB,MAAM,CAACpB,EAAE,CAAC;MACnBW,MAAM;MACND,QAAQ,EAAEA,QAAQ,GAAG,IAAI;MACzBM,SAAS,EAAE,IAAIxC,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACtC,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACI,MAAMC,cAAcA,CAAC1C,GAAG,EAAEY,QAAQ;EAAA;EAAA,CAAA3E,cAAA,GAAAS,CAAA,WAAG,KAAK,GAAE;IAAA;IAAAT,cAAA,GAAAU,CAAA;IACxC,MAAMyE,EAAE;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAS,CAAA,WAAAsD,GAAG,CAACoB,EAAE;IAAA;IAAA,CAAAnF,cAAA,GAAAS,CAAA,WAAIsD,GAAG,CAAC2C,UAAU,CAACC,aAAa;IACjD,MAAMC,SAAS;IAAA;IAAA,CAAA5G,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAS,CAAA,WAAAsD,GAAG,CAAC8C,GAAG,CAAC,YAAY,CAAC;IAAA;IAAA,CAAA7G,cAAA,GAAAS,CAAA,WAAI,SAAS;IACpD,MAAMiE,QAAQ;IAAA;IAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC2D,WAAW,CAACC,GAAG,CAAC;IAC5C,MAAMH,GAAG;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,QAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC;;IAEtB;IAAA;IAAA5D,cAAA,GAAAG,CAAA;IACA,IAAI,IAAI,CAAC+E,aAAa,CAACC,EAAE,CAAC,EAAE;MAAA;MAAAnF,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACxB,OAAO;QACH2G,OAAO,EAAE,IAAI;QACbhB,MAAM,EAAE,gBAAgB;QACxBiB,SAAS,EAAEC,QAAQ;QACnBC,SAAS,EAAE;MACf,CAAC;IACL,CAAC;IAAA;IAAA;MAAAjH,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA,IAAI,MAAM,IAAI,CAACsF,SAAS,CAACN,EAAE,CAAC,EAAE;MAAA;MAAAnF,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC1B,IAAI,CAACmG,gBAAgB,CAAC,2BAA2B,EAAE;QAC/CnB,EAAE,EAAE,IAAI,CAACoB,MAAM,CAACpB,EAAE,CAAC;QACnByB,SAAS,EAAEA,SAAS,CAACM,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;QACtCvC,QAAQ;QACRD,QAAQ;QACRyB,SAAS,EAAE,IAAIxC,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACtC,CAAC,CAAC;MAAC;MAAAxG,cAAA,GAAAG,CAAA;MAEH,OAAO;QACH2G,OAAO,EAAE,KAAK;QACdhB,MAAM,EAAE,wBAAwB;QAChCqB,UAAU,EAAE,GAAG;QAAE;QACjBC,OAAO,EAAE;MACb,CAAC;IACL,CAAC;IAAA;IAAA;MAAApH,cAAA,GAAAS,CAAA;IAAA;IAED,MAAM4G,MAAM;IAAA;IAAA,CAAArH,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACsE,kBAAkB,CAACC,QAAQ,EAAEC,QAAQ,CAAC;IAC1D,MAAMM,UAAU;IAAA;IAAA,CAAAjF,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAS,CAAA,WAAAsD,GAAG,CAACC,IAAI,EAAEsD,GAAG;IAAA;IAAA,CAAAtH,cAAA,GAAAS,CAAA,WAAI0E,EAAE,GAAC,CAAC;IACxC,MAAMoC,GAAG;IAAA;IAAA,CAAAvH,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC6E,WAAW,CAACC,UAAU,EAAEN,QAAQ,EAAED,QAAQ,CAAC;IAAC;IAAA1E,cAAA,GAAAG,CAAA;IAE7D,IAAI;MACA,IAAIqH,MAAM;MAAC;MAAAxH,cAAA,GAAAG,CAAA;MAEX,IAAI,IAAI,CAACmB,KAAK,EAAE;QAAA;QAAAtB,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACZqH,MAAM,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACF,GAAG,EAAEF,MAAM,EAAEzD,GAAG,CAAC;MAC7D,CAAC,MAAM;QAAA;QAAA5D,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACHqH,MAAM,GAAG,MAAM,IAAI,CAACE,oBAAoB,CAACH,GAAG,EAAEF,MAAM,EAAEzD,GAAG,CAAC;MAC9D;;MAEA;MAAA;MAAA5D,cAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAACwH,aAAa,CAAC1C,UAAU,EAAEE,EAAE,EAAEyB,SAAS,EAAEjC,QAAQ,EAAE6C,MAAM,EAAEH,MAAM,CAAC;;MAE7E;MAAA;MAAArH,cAAA,GAAAG,CAAA;MACA,IAAI,CAACqH,MAAM,CAACV,OAAO,EAAE;QAAA;QAAA9G,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACjB,IAAI,CAACmG,gBAAgB,CAAC,qBAAqB,EAAE;UACzCrB,UAAU,EAAE,IAAI,CAAC2C,cAAc,CAAC3C,UAAU,CAAC;UAC3CE,EAAE,EAAE,IAAI,CAACoB,MAAM,CAACpB,EAAE,CAAC;UACnBR,QAAQ;UACRD,QAAQ;UACR7B,QAAQ,EAAE2E,MAAM,CAAC3E,QAAQ;UACzBgF,KAAK,EAAER,MAAM,CAACxE,QAAQ;UACtBE,MAAM,EAAEsE,MAAM,CAACtE,MAAM,GAAG,IAAI;UAC5BoD,SAAS,EAAE,IAAIxC,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;QACtC,CAAC,CAAC;MACN,CAAC;MAAA;MAAA;QAAAxG,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAG,CAAA;MAED,OAAOqH,MAAM;IAEjB,CAAC,CAAC,OAAOxF,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAG,CAAA;MACZ8B,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACE,OAAO,CAAC;MACxD;MAAA;MAAAlC,cAAA,GAAAG,CAAA;MACA,OAAO;QACH2G,OAAO,EAAE,IAAI;QACbhB,MAAM,EAAE,oBAAoB;QAC5B9D,KAAK,EAAE;MACX,CAAC;IACL;EACJ;;EAEA;AACJ;AACA;EACI,MAAMyF,mBAAmBA,CAACF,GAAG,EAAEF,MAAM,EAAEzD,GAAG,EAAE;IAAA;IAAA5D,cAAA,GAAAU,CAAA;IACxC,MAAMoH,WAAW;IAAA;IAAA,CAAA9H,cAAA,GAAAG,CAAA,QAAGyD,GAAG,GAAGyD,MAAM,CAACtE,MAAM;;IAEvC;IACA,MAAMgF,QAAQ;IAAA;IAAA,CAAA/H,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACmB,KAAK,CAACyG,QAAQ,CAAC,CAAC;;IAEtC;IAAA;IAAA/H,cAAA,GAAAG,CAAA;IACA4H,QAAQ,CAACC,gBAAgB,CAACT,GAAG,EAAE,CAAC,EAAEO,WAAW,CAAC;;IAE9C;IAAA;IAAA9H,cAAA,GAAAG,CAAA;IACA4H,QAAQ,CAACE,KAAK,CAACV,GAAG,CAAC;;IAEnB;IAAA;IAAAvH,cAAA,GAAAG,CAAA;IACA4H,QAAQ,CAACG,IAAI,CAACX,GAAG,EAAE3D,GAAG,EAAE,GAAGA,GAAG,IAAIkB,IAAI,CAACqD,MAAM,CAAC,CAAC,EAAE,CAAC;;IAElD;IAAA;IAAAnI,cAAA,GAAAG,CAAA;IACA4H,QAAQ,CAACK,MAAM,CAACb,GAAG,EAAEzC,IAAI,CAACuD,IAAI,CAAChB,MAAM,CAACtE,MAAM,GAAG,IAAI,CAAC,CAAC;IAErD,MAAMuF,OAAO;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,QAAG,MAAM4H,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACrC,MAAMC,eAAe;IAAA;IAAA,CAAAxI,cAAA,GAAAG,CAAA,QAAGmI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;IAAA;IAAAtI,cAAA,GAAAG,CAAA;IAEvC,IAAIqI,eAAe,IAAInB,MAAM,CAACxE,QAAQ,EAAE;MAAA;MAAA7C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACpC;MACA,MAAM,IAAI,CAACmB,KAAK,CAACmH,OAAO,CAAClB,GAAG,CAAC;MAE7B,MAAMmB,aAAa;MAAA;MAAA,CAAA1I,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACmB,KAAK,CAACqH,MAAM,CAACpB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC;MACtE,MAAMN,SAAS;MAAA;MAAA,CAAAjH,cAAA,GAAAG,CAAA,QAAGuI,aAAa,CAACE,MAAM,GAAG,CAAC;MAAA;MAAA,CAAA5I,cAAA,GAAAS,CAAA,WACtCoI,QAAQ,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC,GAAGrB,MAAM,CAACtE,MAAM;MAAA;MAAA,CAAA/C,cAAA,GAAAS,CAAA,WAC1CmD,GAAG,GAAGyD,MAAM,CAACtE,MAAM;MAAC;MAAA/C,cAAA,GAAAG,CAAA;MAExB,OAAO;QACH2G,OAAO,EAAE,KAAK;QACdjE,QAAQ,EAAE2F,eAAe;QACzBX,KAAK,EAAER,MAAM,CAACxE,QAAQ;QACtBkE,SAAS,EAAE,CAAC;QACZE,SAAS,EAAE,IAAItD,IAAI,CAACsD,SAAS,CAAC,CAACT,WAAW,CAAC,CAAC;QAC5CW,UAAU,EAAErC,IAAI,CAACuD,IAAI,CAAC,CAACpB,SAAS,GAAGrD,GAAG,IAAI,IAAI;MAClD,CAAC;IACL,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAO;MACH2G,OAAO,EAAE,IAAI;MACbjE,QAAQ,EAAE2F,eAAe,GAAG,CAAC;MAC7BX,KAAK,EAAER,MAAM,CAACxE,QAAQ;MACtBkE,SAAS,EAAEM,MAAM,CAACxE,QAAQ,GAAG2F,eAAe,GAAG,CAAC;MAChDvB,SAAS,EAAE,IAAItD,IAAI,CAACC,GAAG,GAAGyD,MAAM,CAACtE,MAAM,CAAC,CAACyD,WAAW,CAAC;IACzD,CAAC;EACL;;EAEA;AACJ;AACA;EACI,MAAMkB,oBAAoBA,CAACH,GAAG,EAAEF,MAAM,EAAEzD,GAAG,EAAE;IAAA;IAAA5D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACzC,IAAI,CAAC,IAAI,CAACkC,WAAW,CAAC+C,GAAG,CAACmC,GAAG,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC5B,IAAI,CAACkC,WAAW,CAACyG,GAAG,CAACvB,GAAG,EAAE;QACtB1E,QAAQ,EAAE,EAAE;QACZkG,aAAa,EAAE,CAAC;QAChBC,eAAe,EAAE;MACrB,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAhJ,cAAA,GAAAS,CAAA;IAAA;IAED,MAAMwI,OAAO;IAAA;IAAA,CAAAjJ,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACkC,WAAW,CAACwE,GAAG,CAACU,GAAG,CAAC;IACzC,MAAMO,WAAW;IAAA;IAAA,CAAA9H,cAAA,GAAAG,CAAA,SAAGyD,GAAG,GAAGyD,MAAM,CAACtE,MAAM;;IAEvC;IAAA;IAAA/C,cAAA,GAAAG,CAAA;IACA8I,OAAO,CAACpG,QAAQ,GAAGoG,OAAO,CAACpG,QAAQ,CAACqG,MAAM,CAAC/C,SAAS,IAAI;MAAA;MAAAnG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAgG,SAAS,GAAG2B,WAAW;IAAD,CAAC,CAAC;IAAC;IAAA9H,cAAA,GAAAG,CAAA;IAEjF,IAAI8I,OAAO,CAACpG,QAAQ,CAAC+F,MAAM,IAAIvB,MAAM,CAACxE,QAAQ,EAAE;MAAA;MAAA7C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC5C8I,OAAO,CAACD,eAAe,EAAE;MAEzB,MAAMN,aAAa;MAAA;MAAA,CAAA1I,cAAA,GAAAG,CAAA,SAAG2E,IAAI,CAACqE,GAAG,CAAC,GAAGF,OAAO,CAACpG,QAAQ,CAAC;MACnD,MAAMoE,SAAS;MAAA;MAAA,CAAAjH,cAAA,GAAAG,CAAA,SAAGuI,aAAa,GAAGrB,MAAM,CAACtE,MAAM;MAAC;MAAA/C,cAAA,GAAAG,CAAA;MAEhD,OAAO;QACH2G,OAAO,EAAE,KAAK;QACdjE,QAAQ,EAAEoG,OAAO,CAACpG,QAAQ,CAAC+F,MAAM;QACjCf,KAAK,EAAER,MAAM,CAACxE,QAAQ;QACtBkE,SAAS,EAAE,CAAC;QACZE,SAAS,EAAE,IAAItD,IAAI,CAACsD,SAAS,CAAC,CAACT,WAAW,CAAC,CAAC;QAC5CW,UAAU,EAAErC,IAAI,CAACuD,IAAI,CAAC,CAACpB,SAAS,GAAGrD,GAAG,IAAI,IAAI;MAClD,CAAC;IACL,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA8I,OAAO,CAACpG,QAAQ,CAACuG,IAAI,CAACxF,GAAG,CAAC;IAAC;IAAA5D,cAAA,GAAAG,CAAA;IAC3B8I,OAAO,CAACF,aAAa,EAAE;IAAC;IAAA/I,cAAA,GAAAG,CAAA;IAExB,OAAO;MACH2G,OAAO,EAAE,IAAI;MACbjE,QAAQ,EAAEoG,OAAO,CAACpG,QAAQ,CAAC+F,MAAM;MACjCf,KAAK,EAAER,MAAM,CAACxE,QAAQ;MACtBkE,SAAS,EAAEM,MAAM,CAACxE,QAAQ,GAAGoG,OAAO,CAACpG,QAAQ,CAAC+F,MAAM;MACpD3B,SAAS,EAAE,IAAItD,IAAI,CAACC,GAAG,GAAGyD,MAAM,CAACtE,MAAM,CAAC,CAACyD,WAAW,CAAC;IACzD,CAAC;EACL;;EAEA;AACJ;AACA;EACI,MAAMmB,aAAaA,CAAC1C,UAAU,EAAEE,EAAE,EAAEyB,SAAS,EAAEjC,QAAQ,EAAE0E,eAAe,EAAEhC,MAAM,EAAE;IAAA;IAAArH,cAAA,GAAAU,CAAA;IAC9E,MAAM4I,WAAW;IAAA;IAAA,CAAAtJ,cAAA,GAAAG,CAAA,SAAG,YAAY8E,UAAU,EAAE;IAC5C,MAAMrB,GAAG;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC;IAEtB,MAAM2F,QAAQ;IAAA;IAAA,CAAAvJ,cAAA,GAAAG,CAAA,SAAG;MACbgG,SAAS,EAAEvC,GAAG;MACduB,EAAE;MACFyB,SAAS,EAAEA,SAAS,CAACM,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;MACtCvC,QAAQ;MACRmC,OAAO,EAAEuC,eAAe,CAACvC,OAAO;MAChCjE,QAAQ,EAAEwG,eAAe,CAACxG;IAC9B,CAAC;IAAC;IAAA7C,cAAA,GAAAG,CAAA;IAEF,IAAI,IAAI,CAACmB,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACZ,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACA;QACA,MAAM,IAAI,CAACmB,KAAK,CAACkI,KAAK,CAACF,WAAW,EAAErD,IAAI,CAACC,SAAS,CAACqD,QAAQ,CAAC,CAAC;QAAC;QAAAvJ,cAAA,GAAAG,CAAA;QAC9D,MAAM,IAAI,CAACmB,KAAK,CAACmI,KAAK,CAACH,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAAA;QAAAtJ,cAAA,GAAAG,CAAA;QAC5C,MAAM,IAAI,CAACmB,KAAK,CAAC8G,MAAM,CAACkB,WAAW,EAAE,IAAI,CAAC;MAC9C,CAAC,CAAC,OAAOtH,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ8B,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACE,OAAO,CAAC;MACnE;IACJ,CAAC;IAAA;IAAA;MAAAlC,cAAA,GAAAS,CAAA;IAAA;;IAED;IAAAT,cAAA,GAAAG,CAAA;IACA,MAAM,IAAI,CAACuJ,eAAe,CAACzE,UAAU,EAAEE,EAAE,EAAEoE,QAAQ,EAAElC,MAAM,CAAC;EAChE;;EAEA;AACJ;AACA;EACI,MAAMqC,eAAeA,CAACzE,UAAU,EAAEE,EAAE,EAAEoE,QAAQ,EAAElC,MAAM,EAAE;IAAA;IAAArH,cAAA,GAAAU,CAAA;IACpD,MAAMiJ,aAAa;IAAA;IAAA,CAAA3J,cAAA,GAAAG,CAAA,SAAG,cAAcgF,EAAE,EAAE;IAAC;IAAAnF,cAAA,GAAAG,CAAA;IAEzC,IAAI,CAAC,IAAI,CAACuC,aAAa,CAAC0C,GAAG,CAACuE,aAAa,CAAC,EAAE;MAAA;MAAA3J,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACxC,IAAI,CAACuC,aAAa,CAACoG,GAAG,CAACa,aAAa,EAAE;QAClCC,UAAU,EAAE,EAAE;QACdC,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE;MACnB,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA9J,cAAA,GAAAS,CAAA;IAAA;IAED,MAAMsJ,UAAU;IAAA;IAAA,CAAA/J,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACuC,aAAa,CAACmE,GAAG,CAAC8C,aAAa,CAAC;IAAC;IAAA3J,cAAA,GAAAG,CAAA;IACzD4J,UAAU,CAACH,UAAU,CAACR,IAAI,CAACG,QAAQ,CAAC;;IAEpC;IACA,MAAMS,UAAU;IAAA;IAAA,CAAAhK,cAAA,GAAAG,CAAA,SAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,EAAE,GAAG,EAAE,GAAG,IAAK;IAAC;IAAA5D,cAAA,GAAAG,CAAA;IACjD4J,UAAU,CAACH,UAAU,GAAGG,UAAU,CAACH,UAAU,CAACV,MAAM,CAACe,CAAC,IAAI;MAAA;MAAAjK,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAA8J,CAAC,CAAC9D,SAAS,GAAG6D,UAAU;IAAD,CAAC,CAAC;;IAEnF;IACA,MAAME,QAAQ;IAAA;IAAA,CAAAlK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACgK,uBAAuB,CAACJ,UAAU,CAACH,UAAU,CAAC;IAAC;IAAA5J,cAAA,GAAAG,CAAA;IAErE,IAAI+J,QAAQ,CAACH,UAAU,EAAE;MAAA;MAAA/J,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACrB4J,UAAU,CAACF,UAAU,EAAE;MAAC;MAAA7J,cAAA,GAAAG,CAAA;MACxB4J,UAAU,CAACD,aAAa,GAAGnG,IAAI,CAACC,GAAG,CAAC,CAAC;MAAC;MAAA5D,cAAA,GAAAG,CAAA;MAEtC,IAAI,CAACmG,gBAAgB,CAAC,8BAA8B,EAAE;QAClDnB,EAAE,EAAE,IAAI,CAACoB,MAAM,CAACpB,EAAE,CAAC;QACnBF,UAAU,EAAE,IAAI,CAAC2C,cAAc,CAAC3C,UAAU,CAAC;QAC3CiF,QAAQ;QACRL,UAAU,EAAEE,UAAU,CAACF,UAAU;QACjC1D,SAAS,EAAE,IAAIxC,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACtC,CAAC,CAAC;;MAEF;MAAA;MAAAxG,cAAA,GAAAG,CAAA;MACA,IAAI4J,UAAU,CAACF,UAAU,IAAI,CAAC,EAAE;QAAA;QAAA7J,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAC5B,MAAM,IAAI,CAACyF,OAAO,CAACT,EAAE,EAAEkC,MAAM,CAACrE,aAAa,GAAG,CAAC,EAAE,sCAAsC,CAAC;MAC5F,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAAS,CAAA;MAAA;IACL,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAAS,CAAA;IAAA;EACL;;EAEA;AACJ;AACA;EACI0J,uBAAuBA,CAACP,UAAU,EAAE;IAAA;IAAA5J,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAChC,IAAIyJ,UAAU,CAAChB,MAAM,GAAG,EAAE,EAAE;MAAA;MAAA5I,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACxB,OAAO;QAAE4J,UAAU,EAAE,KAAK;QAAEK,KAAK,EAAE;MAAE,CAAC;IAC1C,CAAC;IAAA;IAAA;MAAApK,cAAA,GAAAS,CAAA;IAAA;IAED,IAAI2J,KAAK;IAAA;IAAA,CAAApK,cAAA,GAAAG,CAAA,SAAG,CAAC;IACb,MAAMkK,MAAM;IAAA;IAAA,CAAArK,cAAA,GAAAG,CAAA,SAAG;MACXmK,aAAa,EAAE,KAAK;MACpBC,kBAAkB,EAAE,KAAK;MACzBC,aAAa,EAAE,KAAK;MACpBC,iBAAiB,EAAE;IACvB,CAAC;;IAED;IACA,MAAMC,cAAc;IAAA;IAAA,CAAA1K,cAAA,GAAAG,CAAA,SAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,IAAK;IACnD,MAAM+G,cAAc;IAAA;IAAA,CAAA3K,cAAA,GAAAG,CAAA,SAAGyJ,UAAU,CAACV,MAAM,CAACe,CAAC,IAAI;MAAA;MAAAjK,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAA8J,CAAC,CAAC9D,SAAS,GAAGuE,cAAc;IAAD,CAAC,CAAC;IAAC;IAAA1K,cAAA,GAAAG,CAAA;IAC5E,IAAIwK,cAAc,CAAC/B,MAAM,GAAG,EAAE,EAAE;MAAA;MAAA5I,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC5BkK,MAAM,CAACC,aAAa,GAAG,IAAI;MAAC;MAAAtK,cAAA,GAAAG,CAAA;MAC5BiK,KAAK,IAAI,EAAE;IACf,CAAC;IAAA;IAAA;MAAApK,cAAA,GAAAS,CAAA;IAAA;;IAED;IACA,MAAMmK,gBAAgB;IAAA;IAAA,CAAA5K,cAAA,GAAAG,CAAA,SAAG,IAAIqC,GAAG,CAACoH,UAAU,CAACiB,GAAG,CAACZ,CAAC,IAAI;MAAA;MAAAjK,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAA8J,CAAC,CAACrD,SAAS;IAAD,CAAC,CAAC,CAAC;IAAC;IAAA5G,cAAA,GAAAG,CAAA;IACnE,IAAIyK,gBAAgB,CAACE,IAAI,GAAG,CAAC,EAAE;MAAA;MAAA9K,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC3BkK,MAAM,CAACE,kBAAkB,GAAG,IAAI;MAAC;MAAAvK,cAAA,GAAAG,CAAA;MACjCiK,KAAK,IAAI,EAAE;IACf,CAAC;IAAA;IAAA;MAAApK,cAAA,GAAAS,CAAA;IAAA;;IAED;IACA,MAAMuI,eAAe;IAAA;IAAA,CAAAhJ,cAAA,GAAAG,CAAA,SAAGyJ,UAAU,CAACV,MAAM,CAACe,CAAC,IAAI;MAAA;MAAAjK,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,QAAC8J,CAAC,CAACnD,OAAO;IAAD,CAAC,CAAC;IAC1D,MAAMiE,SAAS;IAAA;IAAA,CAAA/K,cAAA,GAAAG,CAAA,SAAG6I,eAAe,CAACJ,MAAM,GAAGgB,UAAU,CAAChB,MAAM;IAAC;IAAA5I,cAAA,GAAAG,CAAA;IAC7D,IAAI4K,SAAS,GAAG,GAAG,EAAE;MAAA;MAAA/K,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAE;MACnBkK,MAAM,CAACG,aAAa,GAAG,IAAI;MAAC;MAAAxK,cAAA,GAAAG,CAAA;MAC5BiK,KAAK,IAAI,EAAE;IACf,CAAC;IAAA;IAAA;MAAApK,cAAA,GAAAS,CAAA;IAAA;;IAED;IACA,MAAMuK,SAAS;IAAA;IAAA,CAAAhL,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACrB,KAAK,IAAI8K,CAAC;IAAA;IAAA,CAAAjL,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAE8K,CAAC,GAAGrB,UAAU,CAAChB,MAAM,EAAEqC,CAAC,EAAE,EAAE;MAAA;MAAAjL,cAAA,GAAAG,CAAA;MACxC6K,SAAS,CAAC5B,IAAI,CAACQ,UAAU,CAACqB,CAAC,CAAC,CAAC9E,SAAS,GAAGyD,UAAU,CAACqB,CAAC,GAAC,CAAC,CAAC,CAAC9E,SAAS,CAAC;IACvE;IACA,MAAM+E,WAAW;IAAA;IAAA,CAAAlL,cAAA,GAAAG,CAAA,SAAG6K,SAAS,CAACG,MAAM,CAAC,CAAClB,CAAC,EAAExJ,CAAC,KAAK;MAAA;MAAAT,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAA8J,CAAC,GAAGxJ,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGuK,SAAS,CAACpC,MAAM;IAC3E,MAAMwC,cAAc;IAAA;IAAA,CAAApL,cAAA,GAAAG,CAAA,SAAG6K,SAAS,CAAC9B,MAAM,CAACmC,QAAQ,IAC5C;MAAA;MAAArL,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAA2E,IAAI,CAACwG,GAAG,CAACD,QAAQ,GAAGH,WAAW,CAAC,GAAGA,WAAW,GAAG,GAAG;IAAD,CACvD,CAAC,CAACtC,MAAM;IAAC;IAAA5I,cAAA,GAAAG,CAAA;IAET,IAAIiL,cAAc,GAAGJ,SAAS,CAACpC,MAAM,GAAG,GAAG,EAAE;MAAA;MAAA5I,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAE;MAC3CkK,MAAM,CAACI,iBAAiB,GAAG,IAAI;MAAC;MAAAzK,cAAA,GAAAG,CAAA;MAChCiK,KAAK,IAAI,EAAE;IACf,CAAC;IAAA;IAAA;MAAApK,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAO;MACH4J,UAAU,EAAEK,KAAK,GAAG,EAAE;MACtBA,KAAK;MACLC,MAAM;MACNkB,SAAS,EAAEnB,KAAK,GAAG,EAAE;MAAA;MAAA,CAAApK,cAAA,GAAAS,CAAA,WAAG,MAAM;MAAA;MAAA,CAAAT,cAAA,GAAAS,CAAA,WAAG2J,KAAK,GAAG,EAAE;MAAA;MAAA,CAAApK,cAAA,GAAAS,CAAA,WAAG,QAAQ;MAAA;MAAA,CAAAT,cAAA,GAAAS,CAAA,WAAG,KAAK;IAClE,CAAC;EACL;;EAEA;AACJ;AACA;EACI+K,gBAAgBA,CAAA,EAAG;IAAA;IAAAxL,cAAA,GAAAU,CAAA;IACf,MAAMkD,GAAG;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC;;IAEtB;IAAA;IAAA5D,cAAA,GAAAG,CAAA;IACA,IAAIyD,GAAG,GAAG,IAAI,CAACF,aAAa,GAAG,KAAK,EAAE;MAAA;MAAA1D,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAClC;IACJ,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,IAAI,CAACuD,aAAa,GAAGE,GAAG;;IAExB;IACA,MAAM6H,QAAQ;IAAA;IAAA,CAAAzL,cAAA,GAAAG,CAAA,SAAGS,OAAO,CAAC8K,WAAW,CAAC,CAAC;IACtC,MAAMC,cAAc;IAAA;IAAA,CAAA3L,cAAA,GAAAG,CAAA,SAAGsL,QAAQ,CAACG,QAAQ,GAAGH,QAAQ,CAACI,SAAS;IAAC;IAAA7L,cAAA,GAAAG,CAAA;IAE9D,IAAIwL,cAAc,GAAG,GAAG,EAAE;MAAA;MAAA3L,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACtB,IAAI,CAACsD,gBAAgB,GAAG,GAAG,CAAC,CAAC;IACjC,CAAC,MAAM;MAAA;MAAAzD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,IAAIwL,cAAc,GAAG,GAAG,EAAE;QAAA;QAAA3L,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAC7B,IAAI,CAACsD,gBAAgB,GAAG,GAAG,CAAC,CAAC;MACjC,CAAC,MAAM;QAAA;QAAAzD,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QACH,IAAI,CAACsD,gBAAgB,GAAG,GAAG,CAAC,CAAC;MACjC;IAAA;EACJ;;EAEA;AACJ;AACA;EACIqI,UAAUA,CAACnH,QAAQ;EAAA;EAAA,CAAA3E,cAAA,GAAAS,CAAA,WAAG,KAAK,GAAE;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACzB,OAAO,OAAO4D,GAAG,EAAEgI,GAAG,EAAEC,IAAI,KAAK;MAAA;MAAAhM,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAC7B,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACA,IAAI,CAACqL,gBAAgB,CAAC,CAAC;QAEvB,MAAMhE,MAAM;QAAA;QAAA,CAAAxH,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACsG,cAAc,CAAC1C,GAAG,EAAEY,QAAQ,CAAC;QAAC;QAAA3E,cAAA,GAAAG,CAAA;QAExD,IAAI,CAACqH,MAAM,CAACV,OAAO,EAAE;UAAA;UAAA9G,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAG,CAAA;UACjB;UACA,IAAIqH,MAAM,CAACK,KAAK,EAAE;YAAA;YAAA7H,cAAA,GAAAS,CAAA;YAAAT,cAAA,GAAAG,CAAA;YACd4L,GAAG,CAACjD,GAAG,CAAC;cACJ,mBAAmB,EAAEtB,MAAM,CAACK,KAAK;cACjC,uBAAuB;cAAE;cAAA,CAAA7H,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAACT,SAAS;cAAA;cAAA,CAAA/G,cAAA,GAAAS,CAAA,WAAI,CAAC;cAC9C,mBAAmB;cAAE;cAAA,CAAAT,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAACP,SAAS;cAAA;cAAA,CAAAjH,cAAA,GAAAS,CAAA,WAAI,IAAIkD,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC4C,WAAW,CAAC,CAAC;cACnF,aAAa;cAAE;cAAA,CAAAxG,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAACL,UAAU;cAAA;cAAA,CAAAnH,cAAA,GAAAS,CAAA,WAAI,EAAE;YAC1C,CAAC,CAAC;UACN,CAAC;UAAA;UAAA;YAAAT,cAAA,GAAAS,CAAA;UAAA;UAAAT,cAAA,GAAAG,CAAA;UAED,OAAO4L,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YACxBC,OAAO,EAAE,KAAK;YACdnK,KAAK,EAAE,qBAAqB;YAC5BE,OAAO;YAAE;YAAA,CAAAlC,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAAC1B,MAAM;YAAA;YAAA,CAAA9F,cAAA,GAAAS,CAAA,WAAI,mBAAmB;YAC7C0G,UAAU;YAAE;YAAA,CAAAnH,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAACL,UAAU;YAAA;YAAA,CAAAnH,cAAA,GAAAS,CAAA,WAAI,EAAE;YACnC2G,OAAO;YAAE;YAAA,CAAApH,cAAA,GAAAS,CAAA,WAAA+G,MAAM,CAACJ,OAAO;YAAA;YAAA,CAAApH,cAAA,GAAAS,CAAA,WAAI,KAAK;YAChCkE;UACJ,CAAC,CAAC;QACN,CAAC;QAAA;QAAA;UAAA3E,cAAA,GAAAS,CAAA;QAAA;;QAED;QAAAT,cAAA,GAAAG,CAAA;QACA,IAAIqH,MAAM,CAACK,KAAK,EAAE;UAAA;UAAA7H,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAG,CAAA;UACd4L,GAAG,CAACjD,GAAG,CAAC;YACJ,mBAAmB,EAAEtB,MAAM,CAACK,KAAK;YACjC,uBAAuB,EAAEL,MAAM,CAACT,SAAS;YACzC,mBAAmB,EAAES,MAAM,CAACP;UAChC,CAAC,CAAC;QACN,CAAC;QAAA;QAAA;UAAAjH,cAAA,GAAAS,CAAA;QAAA;QAAAT,cAAA,GAAAG,CAAA;QAED6L,IAAI,CAAC,CAAC;MAEV,CAAC,CAAC,OAAOhK,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ8B,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACE,OAAO,CAAC;QAC/D;QAAA;QAAAlC,cAAA,GAAAG,CAAA;QACA6L,IAAI,CAAC,CAAC;MACV;IACJ,CAAC;EACL;;EAEA;AACJ;AACA;EACInI,oBAAoBA,CAAA,EAAG;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACnBiM,WAAW,CAAC,MAAM;MAAA;MAAApM,cAAA,GAAAU,CAAA;MACd,MAAMkD,GAAG;MAAA;MAAA,CAAA5D,cAAA,GAAAG,CAAA,SAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,MAAMoG,UAAU;MAAA;MAAA,CAAAhK,cAAA,GAAAG,CAAA,SAAGyD,GAAG,GAAI,EAAE,GAAG,EAAE,GAAG,IAAK;;MAEzC;MAAA;MAAA5D,cAAA,GAAAG,CAAA;MACA,KAAK,MAAM,CAACoH,GAAG,EAAE0B,OAAO,CAAC,IAAI,IAAI,CAAC5G,WAAW,CAACgK,OAAO,CAAC,CAAC,EAAE;QAAA;QAAArM,cAAA,GAAAG,CAAA;QACrD8I,OAAO,CAACpG,QAAQ,GAAGoG,OAAO,CAACpG,QAAQ,CAACqG,MAAM,CAAC/C,SAAS,IAAI;UAAA;UAAAnG,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAAA,OAAAgG,SAAS,GAAG6D,UAAU;QAAD,CAAC,CAAC;QAAC;QAAAhK,cAAA,GAAAG,CAAA;QAChF,IAAI8I,OAAO,CAACpG,QAAQ,CAAC+F,MAAM,KAAK,CAAC,EAAE;UAAA;UAAA5I,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAG,CAAA;UAC/B,IAAI,CAACkC,WAAW,CAACgE,MAAM,CAACkB,GAAG,CAAC;QAChC,CAAC;QAAA;QAAA;UAAAvH,cAAA,GAAAS,CAAA;QAAA;MACL;;MAEA;MAAA;MAAAT,cAAA,GAAAG,CAAA;MACA,KAAK,MAAM,CAACoH,GAAG,EAAE+E,IAAI,CAAC,IAAI,IAAI,CAAC5J,aAAa,CAAC2J,OAAO,CAAC,CAAC,EAAE;QAAA;QAAArM,cAAA,GAAAG,CAAA;QACpD;QAAI;QAAA,CAAAH,cAAA,GAAAS,CAAA,WAAA6L,IAAI,CAACxC,aAAa;QAAA;QAAA,CAAA9J,cAAA,GAAAS,CAAA,WAAImD,GAAG,GAAG0I,IAAI,CAACxC,aAAa,GAAGE,UAAU,GAAE;UAAA;UAAAhK,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAG,CAAA;UAC7D,IAAI,CAACuC,aAAa,CAAC2D,MAAM,CAACkB,GAAG,CAAC;QAClC,CAAC;QAAA;QAAA;UAAAvH,cAAA,GAAAS,CAAA;QAAA;MACL;MAAC;MAAAT,cAAA,GAAAG,CAAA;MAED8B,OAAO,CAACE,GAAG,CAAC,yBAAyB,IAAI,CAACE,WAAW,CAACyI,IAAI,qBAAqB,IAAI,CAACpI,aAAa,CAACoI,IAAI,iBAAiB,CAAC;IAC5H,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACxB;;EAEA;AACJ;AACA;EACIxE,gBAAgBA,CAACiG,IAAI,EAAEC,OAAO,EAAE;IAAA;IAAAxM,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC5B8B,OAAO,CAACG,IAAI,CAAC,2BAA2BmK,IAAI,GAAG,EAAEC,OAAO,CAAC;IACzD;EACJ;;EAEA;AACJ;AACA;EACIjG,MAAMA,CAACpB,EAAE,EAAE;IAAA;IAAAnF,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACP,IAAIgF,EAAE,CAACX,QAAQ,CAAC,GAAG,CAAC,EAAE;MAAA;MAAAxE,cAAA,GAAAS,CAAA;MAClB;MACA,MAAMgM,KAAK;MAAA;MAAA,CAAAzM,cAAA,GAAAG,CAAA,SAAGgF,EAAE,CAACuH,KAAK,CAAC,GAAG,CAAC;MAAC;MAAA1M,cAAA,GAAAG,CAAA;MAC5B,OAAOsM,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO;IAChD,CAAC,MAAM;MAAA;MAAA5M,cAAA,GAAAS,CAAA;MACH;MACA,MAAMgM,KAAK;MAAA;MAAA,CAAAzM,cAAA,GAAAG,CAAA,SAAGgF,EAAE,CAACuH,KAAK,CAAC,GAAG,CAAC;MAAC;MAAA1M,cAAA,GAAAG,CAAA;MAC5B,OAAOsM,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM;IAC/C;EACJ;;EAEA;AACJ;AACA;EACIhF,cAAcA,CAAC3C,UAAU,EAAE;IAAA;IAAAjF,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACvB,IAAI8E,UAAU,CAAC2D,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA5I,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACvB,OAAO8E,UAAU,CAACiC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAGjC,UAAU,CAAC0H,KAAK,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IAAA;IAAA;MAAA3M,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IACD,OAAO,KAAK;EAChB;;EAEA;AACJ;AACA;EACI,MAAM0M,QAAQA,CAAA,EAAG;IAAA;IAAA7M,cAAA,GAAAU,CAAA;IACb,MAAMoM,KAAK;IAAA;IAAA,CAAA9M,cAAA,GAAAG,CAAA,SAAG;MACVkC,WAAW,EAAE,IAAI,CAACA,WAAW,CAACyI,IAAI;MAClCvI,UAAU,EAAE,IAAI,CAACA,UAAU,CAACuI,IAAI;MAChCpI,aAAa,EAAE,IAAI,CAACA,aAAa,CAACoI,IAAI;MACtCrH,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCsJ,cAAc;MAAE;MAAA,CAAA/M,cAAA,GAAAS,CAAA,eAAI,CAACa,KAAK;MAAA;MAAA,CAAAtB,cAAA,GAAAS,CAAA,WAAI,IAAI,CAACa,KAAK,CAAC2K,MAAM,KAAK,OAAO;IAC/D,CAAC;IAAC;IAAAjM,cAAA,GAAAG,CAAA;IAEF,IAAI,IAAI,CAACmB,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACZ,IAAI;QACA,MAAM6M,SAAS;QAAA;QAAA,CAAAhN,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACmB,KAAK,CAAC2L,IAAI,CAAC,QAAQ,CAAC;QAAC;QAAAjN,cAAA,GAAAG,CAAA;QAClD2M,KAAK,CAACI,WAAW,GAAGF,SAAS;MACjC,CAAC,CAAC,OAAOhL,KAAK,EAAE;QAAA;QAAAhC,cAAA,GAAAG,CAAA;QACZ2M,KAAK,CAACK,UAAU,GAAGnL,KAAK,CAACE,OAAO;MACpC;IACJ,CAAC;IAAA;IAAA;MAAAlC,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAG,CAAA;IAED,OAAO2M,KAAK;EAChB;;EAEA;AACJ;AACA;EACI,MAAMM,QAAQA,CAAA,EAAG;IAAA;IAAApN,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACb,IAAI,IAAI,CAACmB,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MACZ,MAAM,IAAI,CAACmB,KAAK,CAAC+L,IAAI,CAAC,CAAC;IAC3B,CAAC;IAAA;IAAA;MAAArN,cAAA,GAAAS,CAAA;IAAA;EACL;AACJ;AAAC;AAAAT,cAAA,GAAAG,CAAA;AAEDmN,MAAM,CAACC,OAAO,GAAGjN,mBAAmB","ignoreList":[]}