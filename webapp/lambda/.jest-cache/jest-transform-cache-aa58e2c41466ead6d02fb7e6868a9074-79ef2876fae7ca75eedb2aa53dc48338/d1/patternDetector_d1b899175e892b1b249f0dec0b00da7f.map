{"version":3,"names":["cov_2rgwiykrj7","actualCoverage","query","s","require","PatternDetector","constructor","f","isMonitoring","monitoringInterval","patternAlgorithms","initializePatternAlgorithms","head_and_shoulders","detectHeadAndShoulders","bind","inverse_head_and_shoulders","detectInverseHeadAndShoulders","double_top","detectDoubleTop","double_bottom","detectDoubleBottom","triangle_ascending","detectAscendingTriangle","triangle_descending","detectDescendingTriangle","triangle_symmetrical","detectSymmetricalTriangle","flag_bull","detectBullFlag","flag_bear","detectBearFlag","cup_and_handle","detectCupAndHandle","wedge_rising","detectRisingWedge","wedge_falling","detectFallingWedge","startRealTimeMonitoring","intervalMinutes","b","console","log","scanAllSymbols","setInterval","error","stopRealTimeMonitoring","clearInterval","symbolsResult","symbols","rows","map","row","symbol","length","detectPatterns","warn","message","timeframe","specificPatterns","priceData","getPriceData","technicalData","getTechnicalData","detections","patternsToCheck","Object","keys","patternType","detection","push","pattern_type","confidence","data","start_date","end_date","detected_at","Date","toISOString","tableName","result","reverse","prices","p","high","lows","low","n","peaks","findPeaks","lastPeaks","slice","leftShoulder","head","rightShoulder","leftShoulderPrice","headPrice","rightShoulderPrice","shoulderDiff","Math","abs","leftTrough","findTroughBetween","rightTrough","necklinePrice","currentPrice","necklineBreak","calculateHeadAndShouldersConfidence","left_shoulder","index","price","right_shoulder","neckline","current_price","neckline_break","target_price","date","highs","troughs","findTroughs","lastTroughs","leftPeak","findPeakBetween","rightPeak","calculateInverseHeadAndShouldersConfidence","firstPeak","secondPeak","firstPeakPrice","secondPeakPrice","peakDiff","troughIndex","troughPrice","declinePercent","supportBreak","calculateDoubleTopConfidence","first_peak","second_peak","trough","support_break","firstTrough","secondTrough","firstTroughPrice","secondTroughPrice","troughDiff","peakIndex","peakPrice","rallyPercent","resistanceBreak","calculateDoubleBottomConfidence","first_trough","second_trough","peak","resistance_break","close","recentData","recentHighs","recentLows","resistanceLevel","max","resistanceTouches","filter","h","supportTrend","calculateTrendline","slope","convergence","calculateTriangleConvergence","breakoutDirection","calculateAscendingTriangleConfidence","resistance_level","support_trend","breakout_direction","start_price","windowSize","i","isPeak","j","isTrough","start","end","minIndex","minPrice","maxIndex","maxPrice","direction","x","Array","from","_","y","sumX","reduce","a","sumY","sumXY","sum","xi","sumXX","intercept","convergencePoint","shoulderSymmetry","headProminence","min","peakSimilarity","declineSignificance","troughSimilarity","rallySignificance","trendStrength","module","exports"],"sources":["patternDetector.js"],"sourcesContent":["const { query } = require('./database');\n\nclass PatternDetector {\n  constructor() {\n    this.isMonitoring = false;\n    this.monitoringInterval = null;\n    this.patternAlgorithms = this.initializePatternAlgorithms();\n  }\n\n  initializePatternAlgorithms() {\n    return {\n      head_and_shoulders: this.detectHeadAndShoulders.bind(this),\n      inverse_head_and_shoulders: this.detectInverseHeadAndShoulders.bind(this),\n      double_top: this.detectDoubleTop.bind(this),\n      double_bottom: this.detectDoubleBottom.bind(this),\n      triangle_ascending: this.detectAscendingTriangle.bind(this),\n      triangle_descending: this.detectDescendingTriangle.bind(this),\n      triangle_symmetrical: this.detectSymmetricalTriangle.bind(this),\n      flag_bull: this.detectBullFlag.bind(this),\n      flag_bear: this.detectBearFlag.bind(this),\n      cup_and_handle: this.detectCupAndHandle.bind(this),\n      wedge_rising: this.detectRisingWedge.bind(this),\n      wedge_falling: this.detectFallingWedge.bind(this)\n    };\n  }\n\n  async startRealTimeMonitoring(intervalMinutes = 15) {\n    if (this.isMonitoring) {\n      console.log('Pattern monitoring already running');\n      return;\n    }\n\n    this.isMonitoring = true;\n    console.log(`Starting real-time pattern monitoring with ${intervalMinutes} minute intervals`);\n\n    // Initial scan\n    await this.scanAllSymbols();\n\n    // Set up interval\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.scanAllSymbols();\n      } catch (error) {\n        console.error('Error in pattern monitoring:', error);\n      }\n    }, intervalMinutes * 60 * 1000);\n  }\n\n  stopRealTimeMonitoring() {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    this.isMonitoring = false;\n    console.log('Pattern monitoring stopped');\n  }\n\n  async scanAllSymbols() {\n    try {\n      // Get list of active symbols\n      const symbolsResult = await query(`\n        SELECT DISTINCT symbol \n        FROM stock_data \n        WHERE date >= CURRENT_DATE - INTERVAL '30 days'\n        LIMIT 500\n      `);\n\n      const symbols = symbolsResult.rows.map(row => row.symbol);\n      console.log(`Scanning ${symbols.length} symbols for patterns`);\n\n      // Scan each symbol\n      for (const symbol of symbols) {\n        try {\n          await this.detectPatterns(symbol, '1d');\n        } catch (error) {\n          console.warn(`Error scanning ${symbol}:`, error.message);\n        }\n      }\n    } catch (error) {\n      console.error('Error in scanAllSymbols:', error);\n    }\n  }\n\n  async detectPatterns(symbol, timeframe = '1d', specificPatterns = null) {\n    try {\n      // Get price data\n      const priceData = await this.getPriceData(symbol, timeframe);\n      if (!priceData || priceData.length < 50) {\n        return [];\n      }\n\n      // Get technical indicators\n      const technicalData = await this.getTechnicalData(symbol, timeframe);\n\n      const detections = [];\n      const patternsToCheck = specificPatterns || Object.keys(this.patternAlgorithms);\n\n      for (const patternType of patternsToCheck) {\n        if (this.patternAlgorithms[patternType]) {\n          try {\n            const detection = await this.patternAlgorithms[patternType](priceData, technicalData);\n            if (detection) {\n              detections.push({\n                symbol,\n                pattern_type: patternType,\n                timeframe,\n                confidence: detection.confidence,\n                data: detection.data,\n                start_date: detection.start_date,\n                end_date: detection.end_date,\n                detected_at: new Date().toISOString()\n              });\n            }\n          } catch (error) {\n            console.warn(`Error detecting ${patternType} for ${symbol}:`, error.message);\n          }\n        }\n      }\n\n      return detections;\n    } catch (error) {\n      console.error(`Error detecting patterns for ${symbol}:`, error);\n      return [];\n    }\n  }\n\n  async getPriceData(symbol, timeframe) {\n    try {\n      const tableName = `stock_data${timeframe === '1w' ? '_weekly' : timeframe === '1M' ? '_monthly' : ''}`;\n      const result = await query(`\n        SELECT date, open, high, low, close, volume\n        FROM ${tableName}\n        WHERE symbol = $1\n        ORDER BY date DESC\n        LIMIT 100\n      `, [symbol]);\n\n      return result.rows.reverse(); // Chronological order\n    } catch (error) {\n      console.error(`Error fetching price data for ${symbol}:`, error);\n      return [];\n    }\n  }\n\n  async getTechnicalData(symbol, timeframe) {\n    try {\n      const tableName = `technical_data${timeframe === '1w' ? '_weekly' : timeframe === '1M' ? '_monthly' : '_daily'}`;\n      const result = await query(`\n        SELECT *\n        FROM ${tableName}\n        WHERE symbol = $1\n        ORDER BY date DESC\n        LIMIT 100\n      `, [symbol]);\n\n      return result.rows.reverse(); // Chronological order\n    } catch (error) {\n      console.error(`Error fetching technical data for ${symbol}:`, error);\n      return [];\n    }\n  }\n\n  // Pattern detection algorithms\n  detectHeadAndShoulders(priceData, technicalData) {\n    if (priceData.length < 30) return null;\n\n    const prices = priceData.map(p => p.high);\n    const lows = priceData.map(p => p.low);\n    const n = prices.length;\n\n    // Look for three peaks pattern\n    const peaks = this.findPeaks(prices);\n    if (peaks.length < 3) return null;\n\n    // Get the last 3 significant peaks\n    const lastPeaks = peaks.slice(-3);\n    const [leftShoulder, head, rightShoulder] = lastPeaks;\n\n    // Validate head and shoulders pattern\n    const leftShoulderPrice = prices[leftShoulder];\n    const headPrice = prices[head];\n    const rightShoulderPrice = prices[rightShoulder];\n\n    // Head should be higher than shoulders\n    if (headPrice <= leftShoulderPrice || headPrice <= rightShoulderPrice) return null;\n\n    // Shoulders should be roughly equal (within 5%)\n    const shoulderDiff = Math.abs(leftShoulderPrice - rightShoulderPrice) / leftShoulderPrice;\n    if (shoulderDiff > 0.05) return null;\n\n    // Calculate neckline\n    const leftTrough = this.findTroughBetween(lows, leftShoulder, head);\n    const rightTrough = this.findTroughBetween(lows, head, rightShoulder);\n    const necklinePrice = (lows[leftTrough] + lows[rightTrough]) / 2;\n\n    // Current price should be near or below neckline for confirmation\n    const currentPrice = prices[n - 1];\n    const necklineBreak = currentPrice < necklinePrice;\n\n    const confidence = this.calculateHeadAndShouldersConfidence(\n      leftShoulderPrice, headPrice, rightShoulderPrice, necklinePrice, currentPrice, necklineBreak\n    );\n\n    if (confidence < 0.5) return null;\n\n    return {\n      confidence,\n      data: {\n        left_shoulder: { index: leftShoulder, price: leftShoulderPrice },\n        head: { index: head, price: headPrice },\n        right_shoulder: { index: rightShoulder, price: rightShoulderPrice },\n        neckline: necklinePrice,\n        current_price: currentPrice,\n        neckline_break: necklineBreak,\n        target_price: necklinePrice - (headPrice - necklinePrice) // Price target\n      },\n      start_date: priceData[leftShoulder].date,\n      end_date: priceData[n - 1].date\n    };\n  }\n\n  detectInverseHeadAndShoulders(priceData, technicalData) {\n    if (priceData.length < 30) return null;\n\n    const prices = priceData.map(p => p.low);\n    const highs = priceData.map(p => p.high);\n    const n = prices.length;\n\n    // Look for three troughs pattern\n    const troughs = this.findTroughs(prices);\n    if (troughs.length < 3) return null;\n\n    // Get the last 3 significant troughs\n    const lastTroughs = troughs.slice(-3);\n    const [leftShoulder, head, rightShoulder] = lastTroughs;\n\n    // Validate inverse head and shoulders pattern\n    const leftShoulderPrice = prices[leftShoulder];\n    const headPrice = prices[head];\n    const rightShoulderPrice = prices[rightShoulder];\n\n    // Head should be lower than shoulders\n    if (headPrice >= leftShoulderPrice || headPrice >= rightShoulderPrice) return null;\n\n    // Shoulders should be roughly equal (within 5%)\n    const shoulderDiff = Math.abs(leftShoulderPrice - rightShoulderPrice) / leftShoulderPrice;\n    if (shoulderDiff > 0.05) return null;\n\n    // Calculate neckline\n    const leftPeak = this.findPeakBetween(highs, leftShoulder, head);\n    const rightPeak = this.findPeakBetween(highs, head, rightShoulder);\n    const necklinePrice = (highs[leftPeak] + highs[rightPeak]) / 2;\n\n    // Current price should be near or above neckline for confirmation\n    const currentPrice = prices[n - 1];\n    const necklineBreak = currentPrice > necklinePrice;\n\n    const confidence = this.calculateInverseHeadAndShouldersConfidence(\n      leftShoulderPrice, headPrice, rightShoulderPrice, necklinePrice, currentPrice, necklineBreak\n    );\n\n    if (confidence < 0.5) return null;\n\n    return {\n      confidence,\n      data: {\n        left_shoulder: { index: leftShoulder, price: leftShoulderPrice },\n        head: { index: head, price: headPrice },\n        right_shoulder: { index: rightShoulder, price: rightShoulderPrice },\n        neckline: necklinePrice,\n        current_price: currentPrice,\n        neckline_break: necklineBreak,\n        target_price: necklinePrice + (necklinePrice - headPrice) // Price target\n      },\n      start_date: priceData[leftShoulder].date,\n      end_date: priceData[n - 1].date\n    };\n  }\n\n  detectDoubleTop(priceData, technicalData) {\n    if (priceData.length < 20) return null;\n\n    const prices = priceData.map(p => p.high);\n    const lows = priceData.map(p => p.low);\n    const n = prices.length;\n\n    const peaks = this.findPeaks(prices);\n    if (peaks.length < 2) return null;\n\n    // Get the last 2 significant peaks\n    const lastPeaks = peaks.slice(-2);\n    const [firstPeak, secondPeak] = lastPeaks;\n\n    const firstPeakPrice = prices[firstPeak];\n    const secondPeakPrice = prices[secondPeak];\n\n    // Peaks should be roughly equal (within 3%)\n    const peakDiff = Math.abs(firstPeakPrice - secondPeakPrice) / firstPeakPrice;\n    if (peakDiff > 0.03) return null;\n\n    // Find the trough between peaks\n    const troughIndex = this.findTroughBetween(lows, firstPeak, secondPeak);\n    const troughPrice = lows[troughIndex];\n\n    // Validate significant decline between peaks\n    const declinePercent = (firstPeakPrice - troughPrice) / firstPeakPrice;\n    if (declinePercent < 0.1) return null; // At least 10% decline\n\n    const currentPrice = prices[n - 1];\n    const supportBreak = currentPrice < troughPrice;\n\n    const confidence = this.calculateDoubleTopConfidence(\n      firstPeakPrice, secondPeakPrice, troughPrice, currentPrice, supportBreak\n    );\n\n    if (confidence < 0.5) return null;\n\n    return {\n      confidence,\n      data: {\n        first_peak: { index: firstPeak, price: firstPeakPrice },\n        second_peak: { index: secondPeak, price: secondPeakPrice },\n        trough: { index: troughIndex, price: troughPrice },\n        current_price: currentPrice,\n        support_break: supportBreak,\n        target_price: troughPrice - (firstPeakPrice - troughPrice)\n      },\n      start_date: priceData[firstPeak].date,\n      end_date: priceData[n - 1].date\n    };\n  }\n\n  detectDoubleBottom(priceData, technicalData) {\n    if (priceData.length < 20) return null;\n\n    const prices = priceData.map(p => p.low);\n    const highs = priceData.map(p => p.high);\n    const n = prices.length;\n\n    const troughs = this.findTroughs(prices);\n    if (troughs.length < 2) return null;\n\n    // Get the last 2 significant troughs\n    const lastTroughs = troughs.slice(-2);\n    const [firstTrough, secondTrough] = lastTroughs;\n\n    const firstTroughPrice = prices[firstTrough];\n    const secondTroughPrice = prices[secondTrough];\n\n    // Troughs should be roughly equal (within 3%)\n    const troughDiff = Math.abs(firstTroughPrice - secondTroughPrice) / firstTroughPrice;\n    if (troughDiff > 0.03) return null;\n\n    // Find the peak between troughs\n    const peakIndex = this.findPeakBetween(highs, firstTrough, secondTrough);\n    const peakPrice = highs[peakIndex];\n\n    // Validate significant rally between troughs\n    const rallyPercent = (peakPrice - firstTroughPrice) / firstTroughPrice;\n    if (rallyPercent < 0.1) return null; // At least 10% rally\n\n    const currentPrice = prices[n - 1];\n    const resistanceBreak = currentPrice > peakPrice;\n\n    const confidence = this.calculateDoubleBottomConfidence(\n      firstTroughPrice, secondTroughPrice, peakPrice, currentPrice, resistanceBreak\n    );\n\n    if (confidence < 0.5) return null;\n\n    return {\n      confidence,\n      data: {\n        first_trough: { index: firstTrough, price: firstTroughPrice },\n        second_trough: { index: secondTrough, price: secondTroughPrice },\n        peak: { index: peakIndex, price: peakPrice },\n        current_price: currentPrice,\n        resistance_break: resistanceBreak,\n        target_price: peakPrice + (peakPrice - firstTroughPrice)\n      },\n      start_date: priceData[firstTrough].date,\n      end_date: priceData[n - 1].date\n    };\n  }\n\n  detectAscendingTriangle(priceData, technicalData) {\n    if (priceData.length < 20) return null;\n\n    const prices = priceData.map(p => p.close);\n    const highs = priceData.map(p => p.high);\n    const lows = priceData.map(p => p.low);\n    const n = prices.length;\n\n    // Look for horizontal resistance and ascending support\n    const recentData = priceData.slice(-20);\n    const recentHighs = recentData.map(p => p.high);\n    const recentLows = recentData.map(p => p.low);\n\n    // Find resistance level (should be relatively flat)\n    const resistanceLevel = Math.max(...recentHighs);\n    const resistanceTouches = recentHighs.filter(h => Math.abs(h - resistanceLevel) / resistanceLevel < 0.02).length;\n\n    if (resistanceTouches < 2) return null;\n\n    // Check for ascending support line\n    const supportTrend = this.calculateTrendline(recentLows, 'ascending');\n    if (!supportTrend || supportTrend.slope <= 0) return null;\n\n    // Calculate convergence\n    const convergence = this.calculateTriangleConvergence(supportTrend, resistanceLevel);\n    if (!convergence) return null;\n\n    const currentPrice = prices[n - 1];\n    const breakoutDirection = currentPrice > resistanceLevel ? 'bullish' : 'bearish';\n\n    const confidence = this.calculateAscendingTriangleConfidence(\n      resistanceLevel, supportTrend, currentPrice, breakoutDirection\n    );\n\n    if (confidence < 0.5) return null;\n\n    return {\n      confidence,\n      data: {\n        resistance_level: resistanceLevel,\n        support_trend: supportTrend,\n        current_price: currentPrice,\n        breakout_direction: breakoutDirection,\n        target_price: breakoutDirection === 'bullish' ? \n          resistanceLevel + (resistanceLevel - supportTrend.start_price) :\n          supportTrend.current_price - (resistanceLevel - supportTrend.start_price)\n      },\n      start_date: priceData[n - 20].date,\n      end_date: priceData[n - 1].date\n    };\n  }\n\n  // Additional pattern detection methods would go here...\n  detectDescendingTriangle(priceData, technicalData) {\n    // Implementation for descending triangle\n    return null;\n  }\n\n  detectSymmetricalTriangle(priceData, technicalData) {\n    // Implementation for symmetrical triangle\n    return null;\n  }\n\n  detectBullFlag(priceData, technicalData) {\n    // Implementation for bull flag\n    return null;\n  }\n\n  detectBearFlag(priceData, technicalData) {\n    // Implementation for bear flag\n    return null;\n  }\n\n  detectCupAndHandle(priceData, technicalData) {\n    // Implementation for cup and handle\n    return null;\n  }\n\n  detectRisingWedge(priceData, technicalData) {\n    // Implementation for rising wedge\n    return null;\n  }\n\n  detectFallingWedge(priceData, technicalData) {\n    // Implementation for falling wedge\n    return null;\n  }\n\n  // Helper methods\n  findPeaks(prices) {\n    const peaks = [];\n    const windowSize = 3;\n    \n    for (let i = windowSize; i < prices.length - windowSize; i++) {\n      let isPeak = true;\n      \n      for (let j = i - windowSize; j <= i + windowSize; j++) {\n        if (j !== i && prices[j] >= prices[i]) {\n          isPeak = false;\n          break;\n        }\n      }\n      \n      if (isPeak) {\n        peaks.push(i);\n      }\n    }\n    \n    return peaks;\n  }\n\n  findTroughs(prices) {\n    const troughs = [];\n    const windowSize = 3;\n    \n    for (let i = windowSize; i < prices.length - windowSize; i++) {\n      let isTrough = true;\n      \n      for (let j = i - windowSize; j <= i + windowSize; j++) {\n        if (j !== i && prices[j] <= prices[i]) {\n          isTrough = false;\n          break;\n        }\n      }\n      \n      if (isTrough) {\n        troughs.push(i);\n      }\n    }\n    \n    return troughs;\n  }\n\n  findTroughBetween(prices, start, end) {\n    let minIndex = start;\n    let minPrice = prices[start];\n    \n    for (let i = start + 1; i < end; i++) {\n      if (prices[i] < minPrice) {\n        minPrice = prices[i];\n        minIndex = i;\n      }\n    }\n    \n    return minIndex;\n  }\n\n  findPeakBetween(prices, start, end) {\n    let maxIndex = start;\n    let maxPrice = prices[start];\n    \n    for (let i = start + 1; i < end; i++) {\n      if (prices[i] > maxPrice) {\n        maxPrice = prices[i];\n        maxIndex = i;\n      }\n    }\n    \n    return maxIndex;\n  }\n\n  calculateTrendline(prices, direction) {\n    if (prices.length < 5) return null;\n    \n    // Simple linear regression\n    const n = prices.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    const y = prices;\n    \n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n    \n    if (direction === 'ascending' && slope <= 0) return null;\n    if (direction === 'descending' && slope >= 0) return null;\n    \n    return {\n      slope,\n      intercept,\n      start_price: intercept,\n      current_price: intercept + slope * (n - 1)\n    };\n  }\n\n  calculateTriangleConvergence(supportTrend, resistanceLevel) {\n    // Calculate where support line would meet resistance\n    const convergencePoint = (resistanceLevel - supportTrend.intercept) / supportTrend.slope;\n    return convergencePoint > 0 ? convergencePoint : null;\n  }\n\n  // Confidence calculation methods\n  calculateHeadAndShouldersConfidence(leftShoulder, head, rightShoulder, neckline, currentPrice, necklineBreak) {\n    let confidence = 0.6; // Base confidence\n    \n    // Symmetry of shoulders\n    const shoulderSymmetry = 1 - Math.abs(leftShoulder - rightShoulder) / leftShoulder;\n    confidence += shoulderSymmetry * 0.2;\n    \n    // Head prominence\n    const headProminence = Math.min((head - leftShoulder) / leftShoulder, (head - rightShoulder) / rightShoulder);\n    confidence += Math.min(headProminence, 0.1);\n    \n    // Neckline break\n    if (necklineBreak) {\n      confidence += 0.1;\n    }\n    \n    return Math.min(confidence, 1.0);\n  }\n\n  calculateInverseHeadAndShouldersConfidence(leftShoulder, head, rightShoulder, neckline, currentPrice, necklineBreak) {\n    let confidence = 0.6; // Base confidence\n    \n    // Symmetry of shoulders\n    const shoulderSymmetry = 1 - Math.abs(leftShoulder - rightShoulder) / leftShoulder;\n    confidence += shoulderSymmetry * 0.2;\n    \n    // Head prominence\n    const headProminence = Math.min((leftShoulder - head) / leftShoulder, (rightShoulder - head) / rightShoulder);\n    confidence += Math.min(headProminence, 0.1);\n    \n    // Neckline break\n    if (necklineBreak) {\n      confidence += 0.1;\n    }\n    \n    return Math.min(confidence, 1.0);\n  }\n\n  calculateDoubleTopConfidence(firstPeak, secondPeak, trough, currentPrice, supportBreak) {\n    let confidence = 0.6; // Base confidence\n    \n    // Peak similarity\n    const peakSimilarity = 1 - Math.abs(firstPeak - secondPeak) / firstPeak;\n    confidence += peakSimilarity * 0.2;\n    \n    // Decline significance\n    const declineSignificance = (firstPeak - trough) / firstPeak;\n    confidence += Math.min(declineSignificance, 0.1);\n    \n    // Support break\n    if (supportBreak) {\n      confidence += 0.1;\n    }\n    \n    return Math.min(confidence, 1.0);\n  }\n\n  calculateDoubleBottomConfidence(firstTrough, secondTrough, peak, currentPrice, resistanceBreak) {\n    let confidence = 0.6; // Base confidence\n    \n    // Trough similarity\n    const troughSimilarity = 1 - Math.abs(firstTrough - secondTrough) / firstTrough;\n    confidence += troughSimilarity * 0.2;\n    \n    // Rally significance\n    const rallySignificance = (peak - firstTrough) / firstTrough;\n    confidence += Math.min(rallySignificance, 0.1);\n    \n    // Resistance break\n    if (resistanceBreak) {\n      confidence += 0.1;\n    }\n    \n    return Math.min(confidence, 1.0);\n  }\n\n  calculateAscendingTriangleConfidence(resistanceLevel, supportTrend, currentPrice, breakoutDirection) {\n    let confidence = 0.6; // Base confidence\n    \n    // Support trend strength\n    const trendStrength = Math.min(supportTrend.slope / resistanceLevel, 0.1);\n    confidence += trendStrength;\n    \n    // Breakout confirmation\n    if (breakoutDirection === 'bullish') {\n      confidence += 0.1;\n    }\n    \n    return Math.min(confidence, 1.0);\n  }\n}\n\nmodule.exports = PatternDetector;"],"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","ignoreList":[]}