eb9d9a5d6eb6e99ecb10d84639de8556
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", {
  value,
  configurable: true
});
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  getLoggerPlugin: () => getLoggerPlugin,
  loggerMiddleware: () => loggerMiddleware,
  loggerMiddlewareOptions: () => loggerMiddlewareOptions
});
module.exports = __toCommonJS(index_exports);

// src/loggerMiddleware.ts
var loggerMiddleware = /* @__PURE__ */__name(() => (next, context) => async args => {
  try {
    const response = await next(args);
    const {
      clientName,
      commandName,
      logger,
      dynamoDbDocumentClientOptions = {}
    } = context;
    const {
      overrideInputFilterSensitiveLog,
      overrideOutputFilterSensitiveLog
    } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
    const {
      $metadata,
      ...outputWithoutMetadata
    } = response.output;
    logger?.info?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      output: outputFilterSensitiveLog(outputWithoutMetadata),
      metadata: $metadata
    });
    return response;
  } catch (error) {
    const {
      clientName,
      commandName,
      logger,
      dynamoDbDocumentClientOptions = {}
    } = context;
    const {
      overrideInputFilterSensitiveLog
    } = dynamoDbDocumentClientOptions;
    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
    logger?.error?.({
      clientName,
      commandName,
      input: inputFilterSensitiveLog(args.input),
      error,
      metadata: error.$metadata
    });
    throw error;
  }
}, "loggerMiddleware");
var loggerMiddlewareOptions = {
  name: "loggerMiddleware",
  tags: ["LOGGER"],
  step: "initialize",
  override: true
};
var getLoggerPlugin = /* @__PURE__ */__name(options => ({
  applyToStack: /* @__PURE__ */__name(clientStack => {
    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
  }, "applyToStack")
}), "getLoggerPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  loggerMiddleware,
  loggerMiddlewareOptions,
  getLoggerPlugin
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,