{"version":3,"names":["cov_1gh0g9mi7b","actualCoverage","query","s","require","apiKeyService","AlpacaService","WatchlistAlerts","constructor","f","alertTypes","PRICE_ABOVE","PRICE_BELOW","PRICE_CHANGE_PERCENT","VOLUME_SPIKE","RSI_OVERBOUGHT","RSI_OVERSOLD","MACD_SIGNAL","MOVING_AVERAGE_CROSS","BREAKOUT","EARNINGS_DATE","alertsQueue","processedAlerts","Set","isProcessing","createAlert","userId","alertConfig","symbol","alertType","condition","targetValue","isActive","b","expiryDate","message","undefined","Error","Object","values","includes","result","rows","error","console","getUserAlerts","filters","whereClause","params","paramIndex","push","updateAlert","alertId","updates","length","deleteAlert","processAlerts","log","alerts","getActiveAlerts","alertsBySymbol","groupAlertsBySymbol","symbolAlerts","entries","processSymbolAlerts","grouped","alert","marketData","getMarketData","technicalData","getTechnicalData","shouldTrigger","checkAlertCondition","triggerAlert","id","alert_type","target_value","currentPrice","close","price","changePercent","previous_close","volumeRatio","volume","average_volume","rsi","macd","macd_signal","sma_20","sma_50","range","highBreakout","high_52w","lowBreakout","low_52w","recentTrigger","checkRecentTrigger","notification","createNotification","email_notifications","email","sendEmailNotification","push_notifications","sendPushNotification","updateAlertTriggerCount","windowMinutes","parseInt","count","user_id","JSON","stringify","to","subject","body","formatAlertMessage","title","data","companyName","company_name","toFixed","getAlertNotifications","limit","markNotificationAsRead","notificationId","startAlertProcessing","intervalMinutes","setInterval","module","exports"],"sources":["watchlistAlerts.js"],"sourcesContent":["const { query } = require('./database');\nconst apiKeyService = require('./apiKeyService');\nconst AlpacaService = require('./alpacaService');\n\nclass WatchlistAlerts {\n  constructor() {\n    this.alertTypes = {\n      PRICE_ABOVE: 'price_above',\n      PRICE_BELOW: 'price_below',\n      PRICE_CHANGE_PERCENT: 'price_change_percent',\n      VOLUME_SPIKE: 'volume_spike',\n      RSI_OVERBOUGHT: 'rsi_overbought',\n      RSI_OVERSOLD: 'rsi_oversold',\n      MACD_SIGNAL: 'macd_signal',\n      MOVING_AVERAGE_CROSS: 'moving_average_cross',\n      BREAKOUT: 'breakout',\n      EARNINGS_DATE: 'earnings_date'\n    };\n    \n    this.alertsQueue = [];\n    this.processedAlerts = new Set();\n    this.isProcessing = false;\n  }\n\n  // Create a new alert\n  async createAlert(userId, alertConfig) {\n    try {\n      const {\n        symbol,\n        alertType,\n        condition,\n        targetValue,\n        isActive = true,\n        expiryDate = null,\n        message = null\n      } = alertConfig;\n\n      // Validate alert configuration\n      if (!symbol || !alertType || !condition || targetValue === undefined) {\n        throw new Error('Missing required alert parameters');\n      }\n\n      if (!Object.values(this.alertTypes).includes(alertType)) {\n        throw new Error('Invalid alert type');\n      }\n\n      // Insert alert into database\n      const result = await query(`\n        INSERT INTO watchlist_alerts (\n          user_id, symbol, alert_type, condition, target_value, \n          is_active, expiry_date, message, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())\n        RETURNING *\n      `, [userId, symbol, alertType, condition, targetValue, isActive, expiryDate, message]);\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error creating alert:', error);\n      throw error;\n    }\n  }\n\n  // Get user's alerts\n  async getUserAlerts(userId, filters = {}) {\n    try {\n      let whereClause = 'WHERE user_id = $1';\n      const params = [userId];\n      let paramIndex = 2;\n\n      if (filters.symbol) {\n        whereClause += ` AND symbol = $${paramIndex}`;\n        params.push(filters.symbol);\n        paramIndex++;\n      }\n\n      if (filters.isActive !== undefined) {\n        whereClause += ` AND is_active = $${paramIndex}`;\n        params.push(filters.isActive);\n        paramIndex++;\n      }\n\n      if (filters.alertType) {\n        whereClause += ` AND alert_type = $${paramIndex}`;\n        params.push(filters.alertType);\n        paramIndex++;\n      }\n\n      const result = await query(`\n        SELECT \n          wa.*,\n          sse.company_name,\n          sse.sector,\n          (\n            SELECT COUNT(*) FROM alert_notifications an \n            WHERE an.alert_id = wa.id\n          ) as notification_count,\n          (\n            SELECT MAX(created_at) FROM alert_notifications an \n            WHERE an.alert_id = wa.id\n          ) as last_triggered\n        FROM watchlist_alerts wa\n        LEFT JOIN stock_symbols_enhanced sse ON wa.symbol = sse.symbol\n        ${whereClause}\n        ORDER BY wa.created_at DESC\n      `, params);\n\n      return result.rows;\n    } catch (error) {\n      console.error('Error fetching user alerts:', error);\n      throw error;\n    }\n  }\n\n  // Update alert\n  async updateAlert(alertId, userId, updates) {\n    try {\n      const {\n        isActive,\n        targetValue,\n        expiryDate,\n        message\n      } = updates;\n\n      const result = await query(`\n        UPDATE watchlist_alerts \n        SET \n          is_active = COALESCE($3, is_active),\n          target_value = COALESCE($4, target_value),\n          expiry_date = COALESCE($5, expiry_date),\n          message = COALESCE($6, message),\n          updated_at = NOW()\n        WHERE id = $1 AND user_id = $2\n        RETURNING *\n      `, [alertId, userId, isActive, targetValue, expiryDate, message]);\n\n      if (result.rows.length === 0) {\n        throw new Error('Alert not found or access denied');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error updating alert:', error);\n      throw error;\n    }\n  }\n\n  // Delete alert\n  async deleteAlert(alertId, userId) {\n    try {\n      const result = await query(`\n        DELETE FROM watchlist_alerts \n        WHERE id = $1 AND user_id = $2\n        RETURNING *\n      `, [alertId, userId]);\n\n      if (result.rows.length === 0) {\n        throw new Error('Alert not found or access denied');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error deleting alert:', error);\n      throw error;\n    }\n  }\n\n  // Process all active alerts\n  async processAlerts() {\n    if (this.isProcessing) {\n      console.log('Alert processing already in progress');\n      return;\n    }\n\n    this.isProcessing = true;\n    \n    try {\n      console.log('Starting alert processing...');\n      \n      // Get all active alerts\n      const alerts = await this.getActiveAlerts();\n      \n      if (alerts.length === 0) {\n        console.log('No active alerts to process');\n        return;\n      }\n\n      console.log(`Processing ${alerts.length} active alerts`);\n      \n      // Group alerts by symbol to minimize API calls\n      const alertsBySymbol = this.groupAlertsBySymbol(alerts);\n      \n      // Process each symbol's alerts\n      for (const [symbol, symbolAlerts] of Object.entries(alertsBySymbol)) {\n        try {\n          await this.processSymbolAlerts(symbol, symbolAlerts);\n        } catch (error) {\n          console.error(`Error processing alerts for ${symbol}:`, error);\n        }\n      }\n\n      console.log('Alert processing completed');\n    } catch (error) {\n      console.error('Error in alert processing:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  // Get all active alerts\n  async getActiveAlerts() {\n    try {\n      const result = await query(`\n        SELECT \n          wa.*,\n          sse.company_name,\n          u.email,\n          u.phone,\n          unp.email_notifications,\n          unp.push_notifications,\n          unp.price_alerts\n        FROM watchlist_alerts wa\n        JOIN users u ON wa.user_id = u.id\n        JOIN stock_symbols_enhanced sse ON wa.symbol = sse.symbol\n        LEFT JOIN user_notification_preferences unp ON wa.user_id = unp.user_id\n        WHERE wa.is_active = true\n        AND (wa.expiry_date IS NULL OR wa.expiry_date > NOW())\n        ORDER BY wa.symbol, wa.created_at\n      `);\n\n      return result.rows;\n    } catch (error) {\n      console.error('Error fetching active alerts:', error);\n      return [];\n    }\n  }\n\n  // Group alerts by symbol\n  groupAlertsBySymbol(alerts) {\n    const grouped = {};\n    \n    for (const alert of alerts) {\n      if (!grouped[alert.symbol]) {\n        grouped[alert.symbol] = [];\n      }\n      grouped[alert.symbol].push(alert);\n    }\n    \n    return grouped;\n  }\n\n  // Process alerts for a specific symbol\n  async processSymbolAlerts(symbol, alerts) {\n    try {\n      // Get current market data\n      const marketData = await this.getMarketData(symbol);\n      \n      if (!marketData) {\n        console.log(`No market data available for ${symbol}`);\n        return;\n      }\n\n      // Get technical data\n      const technicalData = await this.getTechnicalData(symbol);\n      \n      // Process each alert\n      for (const alert of alerts) {\n        try {\n          const shouldTrigger = await this.checkAlertCondition(alert, marketData, technicalData);\n          \n          if (shouldTrigger) {\n            await this.triggerAlert(alert, marketData);\n          }\n        } catch (error) {\n          console.error(`Error processing alert ${alert.id}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing symbol alerts for ${symbol}:`, error);\n    }\n  }\n\n  // Check if alert condition is met\n  async checkAlertCondition(alert, marketData, technicalData) {\n    const { alert_type, condition, target_value } = alert;\n    const currentPrice = marketData.close || marketData.price;\n    \n    switch (alert_type) {\n      case this.alertTypes.PRICE_ABOVE:\n        return currentPrice > target_value;\n      \n      case this.alertTypes.PRICE_BELOW:\n        return currentPrice < target_value;\n      \n      case this.alertTypes.PRICE_CHANGE_PERCENT:\n        const changePercent = ((currentPrice - marketData.previous_close) / marketData.previous_close) * 100;\n        return condition === 'greater' ? changePercent > target_value : changePercent < target_value;\n      \n      case this.alertTypes.VOLUME_SPIKE:\n        const volumeRatio = marketData.volume / marketData.average_volume;\n        return volumeRatio > target_value;\n      \n      case this.alertTypes.RSI_OVERBOUGHT:\n        return technicalData?.rsi > target_value;\n      \n      case this.alertTypes.RSI_OVERSOLD:\n        return technicalData?.rsi < target_value;\n      \n      case this.alertTypes.MACD_SIGNAL:\n        if (!technicalData?.macd || !technicalData?.macd_signal) return false;\n        return condition === 'bullish' ? \n          technicalData.macd > technicalData.macd_signal : \n          technicalData.macd < technicalData.macd_signal;\n      \n      case this.alertTypes.MOVING_AVERAGE_CROSS:\n        if (!technicalData?.sma_20 || !technicalData?.sma_50) return false;\n        return condition === 'golden' ? \n          technicalData.sma_20 > technicalData.sma_50 : \n          technicalData.sma_20 < technicalData.sma_50;\n      \n      case this.alertTypes.BREAKOUT:\n        const range = target_value; // breakout range percentage\n        const highBreakout = currentPrice > marketData.high_52w * (1 - range/100);\n        const lowBreakout = currentPrice < marketData.low_52w * (1 + range/100);\n        return condition === 'upward' ? highBreakout : lowBreakout;\n      \n      default:\n        return false;\n    }\n  }\n\n  // Trigger an alert\n  async triggerAlert(alert, marketData) {\n    try {\n      // Check if alert was already triggered recently (prevent spam)\n      const recentTrigger = await this.checkRecentTrigger(alert.id);\n      if (recentTrigger) {\n        console.log(`Alert ${alert.id} was triggered recently, skipping`);\n        return;\n      }\n\n      // Create notification record\n      const notification = await this.createNotification(alert, marketData);\n      \n      // Send notifications based on user preferences\n      if (alert.email_notifications && alert.email) {\n        await this.sendEmailNotification(alert, marketData, notification);\n      }\n      \n      if (alert.push_notifications) {\n        await this.sendPushNotification(alert, marketData, notification);\n      }\n\n      // Update alert trigger count\n      await this.updateAlertTriggerCount(alert.id);\n      \n      console.log(`Alert ${alert.id} triggered for ${alert.symbol}`);\n    } catch (error) {\n      console.error(`Error triggering alert ${alert.id}:`, error);\n    }\n  }\n\n  // Check if alert was triggered recently\n  async checkRecentTrigger(alertId, windowMinutes = 60) {\n    try {\n      const result = await query(`\n        SELECT COUNT(*) as count\n        FROM alert_notifications\n        WHERE alert_id = $1\n        AND created_at > NOW() - INTERVAL '${windowMinutes} minutes'\n      `, [alertId]);\n\n      return parseInt(result.rows[0].count) > 0;\n    } catch (error) {\n      console.error('Error checking recent trigger:', error);\n      return false;\n    }\n  }\n\n  // Create notification record\n  async createNotification(alert, marketData) {\n    try {\n      const result = await query(`\n        INSERT INTO alert_notifications (\n          alert_id, user_id, symbol, alert_type, \n          trigger_value, market_data, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, NOW())\n        RETURNING *\n      `, [\n        alert.id,\n        alert.user_id,\n        alert.symbol,\n        alert.alert_type,\n        marketData.close || marketData.price,\n        JSON.stringify(marketData)\n      ]);\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  // Send email notification\n  async sendEmailNotification(alert, marketData, notification) {\n    try {\n      // This would integrate with an email service like SendGrid, SES, etc.\n      // For now, just log the notification\n      console.log('Email notification would be sent:', {\n        to: alert.email,\n        subject: `Price Alert: ${alert.symbol} - ${alert.alert_type}`,\n        body: this.formatAlertMessage(alert, marketData)\n      });\n    } catch (error) {\n      console.error('Error sending email notification:', error);\n    }\n  }\n\n  // Send push notification\n  async sendPushNotification(alert, marketData, notification) {\n    try {\n      // This would integrate with a push notification service\n      // For now, just log the notification\n      console.log('Push notification would be sent:', {\n        userId: alert.user_id,\n        title: `${alert.symbol} Alert`,\n        body: this.formatAlertMessage(alert, marketData),\n        data: {\n          alertId: alert.id,\n          symbol: alert.symbol,\n          alertType: alert.alert_type,\n          price: marketData.close || marketData.price\n        }\n      });\n    } catch (error) {\n      console.error('Error sending push notification:', error);\n    }\n  }\n\n  // Format alert message\n  formatAlertMessage(alert, marketData) {\n    const price = marketData.close || marketData.price;\n    const symbol = alert.symbol;\n    const companyName = alert.company_name || symbol;\n    \n    switch (alert.alert_type) {\n      case this.alertTypes.PRICE_ABOVE:\n        return `${companyName} (${symbol}) is now above $${alert.target_value}. Current price: $${price.toFixed(2)}`;\n      \n      case this.alertTypes.PRICE_BELOW:\n        return `${companyName} (${symbol}) is now below $${alert.target_value}. Current price: $${price.toFixed(2)}`;\n      \n      case this.alertTypes.PRICE_CHANGE_PERCENT:\n        const changePercent = ((price - marketData.previous_close) / marketData.previous_close) * 100;\n        return `${companyName} (${symbol}) has moved ${changePercent.toFixed(2)}% today. Current price: $${price.toFixed(2)}`;\n      \n      case this.alertTypes.VOLUME_SPIKE:\n        return `${companyName} (${symbol}) has unusual volume activity. Current price: $${price.toFixed(2)}`;\n      \n      case this.alertTypes.RSI_OVERBOUGHT:\n        return `${companyName} (${symbol}) RSI is overbought. Current price: $${price.toFixed(2)}`;\n      \n      case this.alertTypes.RSI_OVERSOLD:\n        return `${companyName} (${symbol}) RSI is oversold. Current price: $${price.toFixed(2)}`;\n      \n      default:\n        return `${companyName} (${symbol}) alert triggered. Current price: $${price.toFixed(2)}`;\n    }\n  }\n\n  // Update alert trigger count\n  async updateAlertTriggerCount(alertId) {\n    try {\n      await query(`\n        UPDATE watchlist_alerts \n        SET trigger_count = trigger_count + 1,\n            last_triggered = NOW()\n        WHERE id = $1\n      `, [alertId]);\n    } catch (error) {\n      console.error('Error updating alert trigger count:', error);\n    }\n  }\n\n  // Get market data for symbol\n  async getMarketData(symbol) {\n    try {\n      // Try to get from database first\n      const result = await query(`\n        SELECT \n          symbol, date, open, high, low, close, volume,\n          LAG(close) OVER (ORDER BY date) as previous_close\n        FROM stock_data\n        WHERE symbol = $1\n        ORDER BY date DESC\n        LIMIT 1\n      `, [symbol]);\n\n      if (result.rows.length > 0) {\n        return result.rows[0];\n      }\n\n      // If no database data, try to get from API\n      // This would require user API keys - for now return null\n      return null;\n    } catch (error) {\n      console.error('Error fetching market data:', error);\n      return null;\n    }\n  }\n\n  // Get technical data for symbol\n  async getTechnicalData(symbol) {\n    try {\n      const result = await query(`\n        SELECT *\n        FROM technical_data_daily\n        WHERE symbol = $1\n        ORDER BY date DESC\n        LIMIT 1\n      `, [symbol]);\n\n      return result.rows[0] || null;\n    } catch (error) {\n      console.error('Error fetching technical data:', error);\n      return null;\n    }\n  }\n\n  // Get alert notifications for user\n  async getAlertNotifications(userId, limit = 50) {\n    try {\n      const result = await query(`\n        SELECT \n          an.*,\n          wa.symbol,\n          wa.alert_type,\n          wa.message,\n          sse.company_name\n        FROM alert_notifications an\n        JOIN watchlist_alerts wa ON an.alert_id = wa.id\n        JOIN stock_symbols_enhanced sse ON wa.symbol = sse.symbol\n        WHERE an.user_id = $1\n        ORDER BY an.created_at DESC\n        LIMIT $2\n      `, [userId, limit]);\n\n      return result.rows;\n    } catch (error) {\n      console.error('Error fetching alert notifications:', error);\n      throw error;\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationAsRead(notificationId, userId) {\n    try {\n      const result = await query(`\n        UPDATE alert_notifications \n        SET is_read = true, read_at = NOW()\n        WHERE id = $1 AND user_id = $2\n        RETURNING *\n      `, [notificationId, userId]);\n\n      return result.rows[0];\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  }\n\n  // Start alert processing interval\n  startAlertProcessing(intervalMinutes = 5) {\n    console.log(`Starting alert processing with ${intervalMinutes} minute interval`);\n    \n    // Initial processing\n    this.processAlerts();\n    \n    // Set up interval\n    setInterval(() => {\n      this.processAlerts();\n    }, intervalMinutes * 60 * 1000);\n  }\n}\n\nmodule.exports = WatchlistAlerts;"],"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","ignoreList":[]}