db1d80a06602f7c39921edbe7db65f36
/* istanbul ignore next */
function cov_pkmto5eaf() {
  var path = "/home/stocks/algo/webapp/lambda/routes/performance-analytics.js";
  var hash = "1fa8a18643d1425481143ca595b1b719006ec650";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/performance-analytics.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "2": {
        start: {
          line: 8,
          column: 30
        },
        end: {
          line: 8,
          column: 59
        }
      },
      "3": {
        start: {
          line: 9,
          column: 39
        },
        end: {
          line: 9,
          column: 74
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "5": {
        start: {
          line: 11,
          column: 41
        },
        end: {
          line: 11,
          column: 89
        }
      },
      "6": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 12,
          column: 58
        }
      },
      "7": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 64
        }
      },
      "8": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 66
        }
      },
      "9": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "10": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 52,
          column: 1
        }
      },
      "11": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "12": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "13": {
        start: {
          line: 60,
          column: 17
        },
        end: {
          line: 60,
          column: 32
        }
      },
      "14": {
        start: {
          line: 61,
          column: 60
        },
        end: {
          line: 61,
          column: 69
        }
      },
      "15": {
        start: {
          line: 63,
          column: 2
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "16": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "17": {
        start: {
          line: 71,
          column: 15
        },
        end: {
          line: 71,
          column: 34
        }
      },
      "18": {
        start: {
          line: 72,
          column: 22
        },
        end: {
          line: 72,
          column: 58
        }
      },
      "19": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "20": {
        start: {
          line: 83,
          column: 21
        },
        end: {
          line: 85,
          column: 24
        }
      },
      "21": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 92,
          column: 7
        }
      },
      "22": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 96
        }
      },
      "23": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "24": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 105
        }
      },
      "25": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "26": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 33
        }
      },
      "27": {
        start: {
          line: 114,
          column: 17
        },
        end: {
          line: 114,
          column: 32
        }
      },
      "28": {
        start: {
          line: 115,
          column: 45
        },
        end: {
          line: 115,
          column: 54
        }
      },
      "29": {
        start: {
          line: 117,
          column: 2
        },
        end: {
          line: 154,
          column: 3
        }
      },
      "30": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "31": {
        start: {
          line: 125,
          column: 15
        },
        end: {
          line: 125,
          column: 34
        }
      },
      "32": {
        start: {
          line: 126,
          column: 22
        },
        end: {
          line: 126,
          column: 58
        }
      },
      "33": {
        start: {
          line: 129,
          column: 19
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "34": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 141,
          column: 7
        }
      },
      "35": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 143,
          column: 82
        }
      },
      "36": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "37": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 153,
          column: 101
        }
      },
      "38": {
        start: {
          line: 161,
          column: 0
        },
        end: {
          line: 202,
          column: 3
        }
      },
      "39": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 33
        }
      },
      "40": {
        start: {
          line: 163,
          column: 17
        },
        end: {
          line: 163,
          column: 32
        }
      },
      "41": {
        start: {
          line: 164,
          column: 33
        },
        end: {
          line: 164,
          column: 42
        }
      },
      "42": {
        start: {
          line: 166,
          column: 2
        },
        end: {
          line: 201,
          column: 3
        }
      },
      "43": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 171,
          column: 7
        }
      },
      "44": {
        start: {
          line: 173,
          column: 15
        },
        end: {
          line: 173,
          column: 34
        }
      },
      "45": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "46": {
        start: {
          line: 177,
          column: 32
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "47": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 188,
          column: 7
        }
      },
      "48": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 97
        }
      },
      "49": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 198,
          column: 7
        }
      },
      "50": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 104
        }
      },
      "51": {
        start: {
          line: 208,
          column: 0
        },
        end: {
          line: 264,
          column: 3
        }
      },
      "52": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 33
        }
      },
      "53": {
        start: {
          line: 210,
          column: 17
        },
        end: {
          line: 210,
          column: 32
        }
      },
      "54": {
        start: {
          line: 211,
          column: 33
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "55": {
        start: {
          line: 213,
          column: 2
        },
        end: {
          line: 263,
          column: 3
        }
      },
      "56": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 218,
          column: 7
        }
      },
      "57": {
        start: {
          line: 220,
          column: 15
        },
        end: {
          line: 220,
          column: 34
        }
      },
      "58": {
        start: {
          line: 221,
          column: 22
        },
        end: {
          line: 221,
          column: 58
        }
      },
      "59": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 224,
          column: 92
        }
      },
      "60": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 227,
          column: 78
        }
      },
      "61": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 94
        }
      },
      "62": {
        start: {
          line: 232,
          column: 21
        },
        end: {
          line: 243,
          column: 5
        }
      },
      "63": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 250,
          column: 7
        }
      },
      "64": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 252,
          column: 87
        }
      },
      "65": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 260,
          column: 7
        }
      },
      "66": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 96
        }
      },
      "67": {
        start: {
          line: 270,
          column: 0
        },
        end: {
          line: 307,
          column: 3
        }
      },
      "68": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 33
        }
      },
      "69": {
        start: {
          line: 272,
          column: 17
        },
        end: {
          line: 272,
          column: 32
        }
      },
      "70": {
        start: {
          line: 273,
          column: 33
        },
        end: {
          line: 273,
          column: 42
        }
      },
      "71": {
        start: {
          line: 275,
          column: 2
        },
        end: {
          line: 306,
          column: 3
        }
      },
      "72": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "73": {
        start: {
          line: 282,
          column: 15
        },
        end: {
          line: 282,
          column: 34
        }
      },
      "74": {
        start: {
          line: 283,
          column: 22
        },
        end: {
          line: 283,
          column: 58
        }
      },
      "75": {
        start: {
          line: 286,
          column: 27
        },
        end: {
          line: 286,
          column: 94
        }
      },
      "76": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 293,
          column: 7
        }
      },
      "77": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 295,
          column: 87
        }
      },
      "78": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 303,
          column: 7
        }
      },
      "79": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 99
        }
      },
      "80": {
        start: {
          line: 313,
          column: 0
        },
        end: {
          line: 350,
          column: 3
        }
      },
      "81": {
        start: {
          line: 314,
          column: 20
        },
        end: {
          line: 314,
          column: 33
        }
      },
      "82": {
        start: {
          line: 315,
          column: 17
        },
        end: {
          line: 315,
          column: 32
        }
      },
      "83": {
        start: {
          line: 316,
          column: 33
        },
        end: {
          line: 316,
          column: 42
        }
      },
      "84": {
        start: {
          line: 318,
          column: 2
        },
        end: {
          line: 349,
          column: 3
        }
      },
      "85": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 323,
          column: 7
        }
      },
      "86": {
        start: {
          line: 325,
          column: 15
        },
        end: {
          line: 325,
          column: 34
        }
      },
      "87": {
        start: {
          line: 326,
          column: 22
        },
        end: {
          line: 326,
          column: 58
        }
      },
      "88": {
        start: {
          line: 329,
          column: 27
        },
        end: {
          line: 329,
          column: 94
        }
      },
      "89": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 336,
          column: 7
        }
      },
      "90": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 338,
          column: 96
        }
      },
      "91": {
        start: {
          line: 341,
          column: 4
        },
        end: {
          line: 346,
          column: 7
        }
      },
      "92": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 348,
          column: 99
        }
      },
      "93": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 396,
          column: 3
        }
      },
      "94": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 33
        }
      },
      "95": {
        start: {
          line: 358,
          column: 17
        },
        end: {
          line: 358,
          column: 32
        }
      },
      "96": {
        start: {
          line: 359,
          column: 33
        },
        end: {
          line: 359,
          column: 42
        }
      },
      "97": {
        start: {
          line: 361,
          column: 2
        },
        end: {
          line: 395,
          column: 3
        }
      },
      "98": {
        start: {
          line: 362,
          column: 4
        },
        end: {
          line: 366,
          column: 7
        }
      },
      "99": {
        start: {
          line: 368,
          column: 15
        },
        end: {
          line: 368,
          column: 34
        }
      },
      "100": {
        start: {
          line: 369,
          column: 22
        },
        end: {
          line: 369,
          column: 58
        }
      },
      "101": {
        start: {
          line: 372,
          column: 29
        },
        end: {
          line: 372,
          column: 92
        }
      },
      "102": {
        start: {
          line: 375,
          column: 29
        },
        end: {
          line: 375,
          column: 108
        }
      },
      "103": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 382,
          column: 7
        }
      },
      "104": {
        start: {
          line: 384,
          column: 4
        },
        end: {
          line: 384,
          column: 92
        }
      },
      "105": {
        start: {
          line: 387,
          column: 4
        },
        end: {
          line: 392,
          column: 7
        }
      },
      "106": {
        start: {
          line: 394,
          column: 4
        },
        end: {
          line: 394,
          column: 102
        }
      },
      "107": {
        start: {
          line: 402,
          column: 0
        },
        end: {
          line: 436,
          column: 3
        }
      },
      "108": {
        start: {
          line: 403,
          column: 2
        },
        end: {
          line: 435,
          column: 3
        }
      },
      "109": {
        start: {
          line: 404,
          column: 15
        },
        end: {
          line: 404,
          column: 34
        }
      },
      "110": {
        start: {
          line: 407,
          column: 22
        },
        end: {
          line: 407,
          column: 40
        }
      },
      "111": {
        start: {
          line: 408,
          column: 4
        },
        end: {
          line: 408,
          column: 30
        }
      },
      "112": {
        start: {
          line: 410,
          column: 19
        },
        end: {
          line: 424,
          column: 5
        }
      },
      "113": {
        start: {
          line: 426,
          column: 4
        },
        end: {
          line: 426,
          column: 81
        }
      },
      "114": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 432,
          column: 7
        }
      },
      "115": {
        start: {
          line: 434,
          column: 4
        },
        end: {
          line: 434,
          column: 115
        }
      },
      "116": {
        start: {
          line: 438,
          column: 0
        },
        end: {
          line: 438,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 58,
            column: 99
          },
          end: {
            line: 58,
            column: 100
          }
        },
        loc: {
          start: {
            line: 58,
            column: 119
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 58
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 112,
            column: 94
          },
          end: {
            line: 112,
            column: 95
          }
        },
        loc: {
          start: {
            line: 112,
            column: 114
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 112
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 161,
            column: 101
          },
          end: {
            line: 161,
            column: 102
          }
        },
        loc: {
          start: {
            line: 161,
            column: 121
          },
          end: {
            line: 202,
            column: 1
          }
        },
        line: 161
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 208,
            column: 102
          },
          end: {
            line: 208,
            column: 103
          }
        },
        loc: {
          start: {
            line: 208,
            column: 122
          },
          end: {
            line: 264,
            column: 1
          }
        },
        line: 208
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 270,
            column: 105
          },
          end: {
            line: 270,
            column: 106
          }
        },
        loc: {
          start: {
            line: 270,
            column: 125
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 270
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 313,
            column: 105
          },
          end: {
            line: 313,
            column: 106
          }
        },
        loc: {
          start: {
            line: 313,
            column: 125
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 313
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 356,
            column: 100
          },
          end: {
            line: 356,
            column: 101
          }
        },
        loc: {
          start: {
            line: 356,
            column: 120
          },
          end: {
            line: 396,
            column: 1
          }
        },
        line: 356
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 402,
            column: 22
          },
          end: {
            line: 402,
            column: 23
          }
        },
        loc: {
          start: {
            line: 402,
            column: 42
          },
          end: {
            line: 436,
            column: 1
          }
        },
        line: 402
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 83,
            column: 21
          },
          end: {
            line: 85,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 84,
            column: 51
          }
        }, {
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 85,
            column: 24
          }
        }],
        line: 83
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1fa8a18643d1425481143ca595b1b719006ec650"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pkmto5eaf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pkmto5eaf();
/**
 * Performance Analytics API Routes
 * Advanced performance metrics and analytics endpoints
 */

const express =
/* istanbul ignore next */
(cov_pkmto5eaf().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_pkmto5eaf().s[1]++, express.Router());
const {
  authenticateToken
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[2]++, require('../middleware/auth'));
const {
  createValidationMiddleware
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[3]++, require('../middleware/validation'));
const {
  getDatabase
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[4]++, require('../utils/database'));
const {
  AdvancedPerformanceAnalytics
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[5]++, require('../utils/advancedPerformanceAnalytics'));
const {
  createRequestLogger
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[6]++, require('../utils/logger'));
const {
  formatResponse
} =
/* istanbul ignore next */
(cov_pkmto5eaf().s[7]++, require('../utils/responseFormatter'));
const logger =
/* istanbul ignore next */
(cov_pkmto5eaf().s[8]++, createRequestLogger('performance-analytics-routes'));

// Input validation schemas
const performanceAnalysisSchema =
/* istanbul ignore next */
(cov_pkmto5eaf().s[9]++, {
  startDate: {
    type: 'string',
    required: true,
    pattern: /^\d{4}-\d{2}-\d{2}$/,
    message: 'Start date must be in YYYY-MM-DD format'
  },
  endDate: {
    type: 'string',
    required: true,
    pattern: /^\d{4}-\d{2}-\d{2}$/,
    message: 'End date must be in YYYY-MM-DD format'
  },
  format: {
    type: 'string',
    required: false,
    enum: ['basic', 'detailed'],
    default: 'detailed'
  },
  includeBenchmarks: {
    type: 'boolean',
    required: false,
    default: true
  }
});
const performanceReportSchema =
/* istanbul ignore next */
(cov_pkmto5eaf().s[10]++, {
  ...performanceAnalysisSchema,
  reportType: {
    type: 'string',
    required: false,
    enum: ['summary', 'detailed', 'executive'],
    default: 'detailed'
  }
});

/**
 * GET /performance-analytics/portfolio
 * Get comprehensive portfolio performance analysis
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[11]++;
router.get('/portfolio', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[0]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[12]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[13]++, req.user.userId);
  const {
    startDate,
    endDate,
    format,
    includeBenchmarks
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[14]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[15]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[16]++;
    logger.info('Portfolio performance analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`,
      format
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[17]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[18]++, new AdvancedPerformanceAnalytics(db));

    // Calculate comprehensive performance metrics
    const performanceMetrics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[19]++, await analytics.calculatePortfolioPerformance(userId, startDate, endDate, {
      includeBenchmarks
    }));

    // Format response based on requested format
    const response =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[20]++, format === 'basic' ?
    /* istanbul ignore next */
    (cov_pkmto5eaf().b[0][0]++, analytics.getBasicMetrics(performanceMetrics)) :
    /* istanbul ignore next */
    (cov_pkmto5eaf().b[0][1]++, performanceMetrics));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[21]++;
    logger.info('Portfolio performance analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      calculationTime: performanceMetrics.metadata.calculationTime,
      dataPoints: performanceMetrics.metadata.dataPoints
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[22]++;
    res.json(formatResponse(response, 'Portfolio performance analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[23]++;
    logger.error('Error in portfolio performance analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[24]++;
    res.status(500).json(formatResponse(null, 'Error calculating portfolio performance', error.message));
  }
});

/**
 * GET /performance-analytics/report
 * Generate comprehensive performance report
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[25]++;
router.get('/report', authenticateToken, createValidationMiddleware(performanceReportSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[1]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[26]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[27]++, req.user.userId);
  const {
    startDate,
    endDate,
    reportType
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[28]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[29]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[30]++;
    logger.info('Performance report requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`,
      reportType
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[31]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[32]++, new AdvancedPerformanceAnalytics(db));

    // Generate performance report
    const report =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[33]++, await analytics.generatePerformanceReport(userId, startDate, endDate, reportType));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[34]++;
    logger.info('Performance report generated', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      reportId: report.reportId,
      generationTime: report.generationTime
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[35]++;
    res.json(formatResponse(report, 'Performance report generated successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[36]++;
    logger.error('Error generating performance report', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[37]++;
    res.status(500).json(formatResponse(null, 'Error generating performance report', error.message));
  }
});

/**
 * GET /performance-analytics/attribution
 * Get performance attribution analysis
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[38]++;
router.get('/attribution', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[2]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[39]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[40]++, req.user.userId);
  const {
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[41]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[42]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[43]++;
    logger.info('Attribution analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[44]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[45]++, new AdvancedPerformanceAnalytics(db));

    // Calculate attribution analysis
    const attributionAnalysis =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[46]++, await analytics.calculateAttributionAnalysis(userId, startDate, endDate));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[47]++;
    logger.info('Attribution analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      holdings: attributionAnalysis.numberOfHoldings,
      totalValue: attributionAnalysis.totalPortfolioValue
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[48]++;
    res.json(formatResponse(attributionAnalysis, 'Attribution analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[49]++;
    logger.error('Error in attribution analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[50]++;
    res.status(500).json(formatResponse(null, 'Error calculating attribution analysis', error.message));
  }
});

/**
 * GET /performance-analytics/risk-metrics
 * Get comprehensive risk metrics
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[51]++;
router.get('/risk-metrics', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[3]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[52]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[53]++, req.user.userId);
  const {
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[54]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[55]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[56]++;
    logger.info('Risk metrics analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[57]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[58]++, new AdvancedPerformanceAnalytics(db));

    // Get portfolio history for risk calculations
    const portfolioHistory =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[59]++, await analytics.getPortfolioHistory(userId, startDate, endDate));

    // Calculate risk metrics
    const riskMetrics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[60]++, await analytics.calculateRiskMetrics(portfolioHistory));

    // Calculate factor exposure for additional risk insights
    const factorExposure =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[61]++, await analytics.calculateFactorExposure(userId, startDate, endDate));
    const response =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[62]++, {
      riskMetrics,
      factorExposure,
      riskAssessment: {
        overallRisk: analytics.assessRiskProfile(riskMetrics),
        riskRecommendations: analytics.generateRecommendations({
          riskMetrics,
          factorExposure
        })
      },
      metadata: {
        dataPoints: portfolioHistory.length,
        calculationDate: new Date().toISOString()
      }
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[63]++;
    logger.info('Risk metrics analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      volatility: riskMetrics.volatility,
      maxDrawdown: riskMetrics.maxDrawdown
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[64]++;
    res.json(formatResponse(response, 'Risk metrics analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[65]++;
    logger.error('Error in risk metrics analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[66]++;
    res.status(500).json(formatResponse(null, 'Error calculating risk metrics', error.message));
  }
});

/**
 * GET /performance-analytics/sector-analysis
 * Get sector allocation and performance analysis
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[67]++;
router.get('/sector-analysis', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[4]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[68]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[69]++, req.user.userId);
  const {
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[70]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[71]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[72]++;
    logger.info('Sector analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[73]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[74]++, new AdvancedPerformanceAnalytics(db));

    // Calculate sector analysis
    const sectorAnalysis =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[75]++, await analytics.calculateSectorAnalysis(userId, startDate, endDate));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[76]++;
    logger.info('Sector analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      sectorCount: sectorAnalysis.sectorCount,
      diversificationScore: sectorAnalysis.diversificationScore.diversificationScore
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[77]++;
    res.json(formatResponse(sectorAnalysis, 'Sector analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[78]++;
    logger.error('Error in sector analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[79]++;
    res.status(500).json(formatResponse(null, 'Error calculating sector analysis', error.message));
  }
});

/**
 * GET /performance-analytics/factor-exposure
 * Get factor exposure analysis
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[80]++;
router.get('/factor-exposure', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[5]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[81]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[82]++, req.user.userId);
  const {
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[83]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[84]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[85]++;
    logger.info('Factor exposure analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[86]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[87]++, new AdvancedPerformanceAnalytics(db));

    // Calculate factor exposure
    const factorExposure =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[88]++, await analytics.calculateFactorExposure(userId, startDate, endDate));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[89]++;
    logger.info('Factor exposure analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      totalHoldings: factorExposure.totalHoldings,
      totalValue: factorExposure.totalValue
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[90]++;
    res.json(formatResponse(factorExposure, 'Factor exposure analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[91]++;
    logger.error('Error in factor exposure analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[92]++;
    res.status(500).json(formatResponse(null, 'Error calculating factor exposure', error.message));
  }
});

/**
 * GET /performance-analytics/benchmarks
 * Get benchmark comparison analysis
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[93]++;
router.get('/benchmarks', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[6]++;
  const requestId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[94]++, req.requestId);
  const userId =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[95]++, req.user.userId);
  const {
    startDate,
    endDate
  } =
  /* istanbul ignore next */
  (cov_pkmto5eaf().s[96]++, req.query);
  /* istanbul ignore next */
  cov_pkmto5eaf().s[97]++;
  try {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[98]++;
    logger.info('Benchmark analysis requested', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      period: `${startDate} to ${endDate}`
    });
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[99]++, await getDatabase());
    const analytics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[100]++, new AdvancedPerformanceAnalytics(db));

    // Get portfolio history for benchmark comparison
    const portfolioHistory =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[101]++, await analytics.getPortfolioHistory(userId, startDate, endDate));

    // Calculate benchmark metrics
    const benchmarkMetrics =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[102]++, await analytics.calculateBenchmarkMetrics(portfolioHistory, startDate, endDate));
    /* istanbul ignore next */
    cov_pkmto5eaf().s[103]++;
    logger.info('Benchmark analysis completed', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      alpha: benchmarkMetrics.alpha,
      beta: benchmarkMetrics.beta
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[104]++;
    res.json(formatResponse(benchmarkMetrics, 'Benchmark analysis completed successfully'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[105]++;
    logger.error('Error in benchmark analysis', {
      requestId,
      userId: `${userId.substring(0, 8)}...`,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[106]++;
    res.status(500).json(formatResponse(null, 'Error calculating benchmark analysis', error.message));
  }
});

/**
 * GET /performance-analytics/health
 * Performance analytics service health check
 */
/* istanbul ignore next */
cov_pkmto5eaf().s[107]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_pkmto5eaf().f[7]++;
  cov_pkmto5eaf().s[108]++;
  try {
    const db =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[109]++, await getDatabase());

    // Test database connectivity
    const testQuery =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[110]++, 'SELECT 1 as test');
    /* istanbul ignore next */
    cov_pkmto5eaf().s[111]++;
    await db.query(testQuery);
    const health =
    /* istanbul ignore next */
    (cov_pkmto5eaf().s[112]++, {
      status: 'healthy',
      service: 'performance-analytics',
      timestamp: new Date().toISOString(),
      version: '1.0.0',
      capabilities: ['portfolio-analysis', 'risk-metrics', 'attribution-analysis', 'sector-analysis', 'factor-exposure', 'benchmark-comparison', 'performance-reporting']
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[113]++;
    res.json(formatResponse(health, 'Performance analytics service is healthy'));
  } catch (error) {
    /* istanbul ignore next */
    cov_pkmto5eaf().s[114]++;
    logger.error('Performance analytics health check failed', {
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_pkmto5eaf().s[115]++;
    res.status(500).json(formatResponse(null, 'Performance analytics service health check failed', error.message));
  }
});
/* istanbul ignore next */
cov_pkmto5eaf().s[116]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,