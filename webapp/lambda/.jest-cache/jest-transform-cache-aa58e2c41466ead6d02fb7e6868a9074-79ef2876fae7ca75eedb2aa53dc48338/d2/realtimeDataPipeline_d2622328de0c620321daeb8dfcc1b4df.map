{"version":3,"names":["cov_1kztzzpm2c","actualCoverage","getTimeout","withTradingTimeout","s","require","createRequestLogger","EventEmitter","RealtimeDataPipeline","constructor","options","b","f","bufferSize","flushInterval","maxRetries","batchSize","compressionEnabled","performanceMonitoring","maxConcurrentFlushes","adaptiveBuffering","priorityQueuing","memoryOptimization","circuitBreakerEnabled","preallocationEnabled","dataBuffers","quotes","Map","trades","bars","news","orderbook","priorityQueues","critical","high","normal","low","metrics","messagesReceived","messagesProcessed","messagesDropped","batchesFlushed","averageLatency","lastFlushTime","Date","now","bufferUtilization","throughputPerSecond","peakThroughput","latencyP95","latencyP99","circuitBreakerTrips","memoryUtilization","concurrentFlushes","adaptiveBufferResizes","priorityQueueSizes","subscriptions","connectionPool","flushTimer","adaptiveTimer","currentFlushes","flushQueue","circuitBreaker","isOpen","failures","lastFailureTime","threshold","resetTimeout","memoryPool","buffers","maxPoolSize","currentSize","performanceTimer","latencyHistory","throughputHistory","startPerformanceMonitoring","logger","info","setInterval","calculatePerformanceMetrics","logPerformanceMetrics","adaptiveBufferManagement","adaptiveFlushBuffers","optimizeBufferSizes","currentLoad","Math","max","restartFlushTimer","min","clearInterval","checkCircuitBreaker","tripCircuitBreaker","error","message","emit","getBuffer","length","pop","returnBuffer","buffer","key","push","addSubscription","userId","symbols","dataTypes","subscriptionId","subscription","id","Set","compression","throttle","conflation","messagesDelivered","lastDeliveryTime","avgDeliveryLatency","createdAt","lastActivityAt","set","substring","Array","from","removeSubscription","get","delete","processIncomingData","dataType","data","processStart","priority","getDataPriority","bufferQuoteDataWithPriority","bufferTradeDataWithPriority","bufferBarData","bufferNewsData","bufferOrderBookData","warn","shouldFlushBuffers","triggerImmediateFlush","latency","updateLatencyMetrics","stack","isArray","forEach","quote","bufferSingleQuoteWithPriority","symbol","S","quoteData","bufferedAt","price","ap","bp","bid","ask","bidSize","bs","askSize","as","timestamp","t","map","trade","slice","hasCriticalData","flushBuffers","setImmediate","bufferQuoteData","bufferSingleQuote","bufferTradeData","bar","bufferSingleBar","timeSinceLastFlush","quoteBufferSize","size","tradeBufferSize","newsBufferSize","maxUtilization","flushStart","dataPacket","prepareDataPacket","isDataPacketEmpty","distributeToSubscribers","clearProcessedBuffers","flushDuration","debug","duration","dataPacketSize","calculateDataPacketSize","subscriberCount","sequenceNumber","distributionPromises","filteredData","filterDataForSubscription","processedData","processDataForSubscription","deliverToSubscription","Promise","allSettled","has","filter","Object","fromEntries","compressData","deliveryStart","timeSinceLastDelivery","queueForDelivery","deliveryLatency","dataSize","JSON","stringify","compressionType","compressed","originalSize","clear","elapsedSeconds","lastCalculationTime","currentThroughput","shift","totalBufferCapacity","currentBufferUsage","sortedLatencies","sort","a","p95Index","floor","p99Index","memoryUsage","process","heapUsed","heapTotal","avgThroughput","reduce","sum","val","throughputVariance","pow","throughput","current","toFixed","peak","average","p95","p99","utilization","adaptiveResizes","system","activeSubscriptions","getStatus","status","total","active","values","sub","shutdown","keys","finalMetrics","totalMessages","module","exports"],"sources":["realtimeDataPipeline.js"],"sourcesContent":["/**\n * High-Performance Real-time Market Data Pipeline\n * Institutional-grade streaming with ultra-low latency optimization and adaptive throughput management\n */\n\nconst { getTimeout, withTradingTimeout } = require('./timeoutManager');\nconst { createRequestLogger } = require('./logger');\nconst EventEmitter = require('events');\n\nclass RealtimeDataPipeline extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.options = {\n      bufferSize: options.bufferSize || 2000,\n      flushInterval: options.flushInterval || 100, // Reduced to 100ms for ultra-low latency\n      maxRetries: options.maxRetries || 3,\n      batchSize: options.batchSize || 50, // Smaller batches for faster processing\n      compressionEnabled: options.compressionEnabled || true,\n      performanceMonitoring: options.performanceMonitoring || true,\n      // New high-performance options\n      maxConcurrentFlushes: options.maxConcurrentFlushes || 5,\n      adaptiveBuffering: options.adaptiveBuffering || true,\n      priorityQueuing: options.priorityQueuing || true,\n      memoryOptimization: options.memoryOptimization || true,\n      circuitBreakerEnabled: options.circuitBreakerEnabled || true,\n      preallocationEnabled: options.preallocationEnabled || true,\n      ...options\n    };\n\n    // High-performance data buffers with priority queuing\n    this.dataBuffers = {\n      quotes: new Map(), // symbol -> latest quote\n      trades: [],\n      bars: new Map(), // symbol -> latest bar\n      news: [],\n      orderbook: new Map() // symbol -> latest orderbook\n    };\n\n    // Priority queues for different data types\n    this.priorityQueues = {\n      critical: [], // Time-sensitive data (quotes, trades)\n      high: [],     // Important data (bars, orderbook)\n      normal: [],   // Regular data (news, alerts)\n      low: []       // Background data (sentiment, research)\n    };\n\n    // Enhanced performance metrics\n    this.metrics = {\n      messagesReceived: 0,\n      messagesProcessed: 0,\n      messagesDropped: 0,\n      batchesFlushed: 0,\n      averageLatency: 0,\n      lastFlushTime: Date.now(),\n      bufferUtilization: 0,\n      throughputPerSecond: 0,\n      // New performance metrics\n      peakThroughput: 0,\n      latencyP95: 0,\n      latencyP99: 0,\n      circuitBreakerTrips: 0,\n      memoryUtilization: 0,\n      concurrentFlushes: 0,\n      adaptiveBufferResizes: 0,\n      priorityQueueSizes: { critical: 0, high: 0, normal: 0, low: 0 }\n    };\n\n    // Subscriptions and connections\n    this.subscriptions = new Map(); // userId -> subscription details\n    this.connectionPool = new Map(); // connectionId -> connection details\n    \n    // Advanced buffer management\n    this.flushTimer = null;\n    this.adaptiveTimer = null;\n    this.compressionEnabled = this.options.compressionEnabled;\n    this.currentFlushes = 0;\n    this.flushQueue = [];\n    \n    // Circuit breaker for overload protection\n    this.circuitBreaker = {\n      isOpen: false,\n      failures: 0,\n      lastFailureTime: 0,\n      threshold: 5,\n      resetTimeout: 30000 // 30 seconds\n    };\n\n    // Memory optimization\n    this.memoryPool = {\n      buffers: [],\n      maxPoolSize: 100,\n      currentSize: 0\n    };\n\n    // Performance monitoring with adaptive intervals\n    this.performanceTimer = null;\n    this.latencyHistory = [];\n    this.throughputHistory = [];\n    this.startPerformanceMonitoring();\n\n    this.logger = createRequestLogger('realtime-pipeline');\n    this.logger.info('ðŸš€ Real-time Data Pipeline initialized', this.options);\n  }\n\n  /**\n   * Start performance monitoring with adaptive intervals\n   */\n  startPerformanceMonitoring() {\n    if (!this.options.performanceMonitoring) return;\n\n    // Adaptive performance monitoring based on load\n    this.performanceTimer = setInterval(() => {\n      this.calculatePerformanceMetrics();\n      this.logPerformanceMetrics();\n      this.adaptiveBufferManagement();\n    }, 1000); // Every second for responsive monitoring\n\n    // Start high-frequency buffer flush with adaptive intervals\n    this.flushTimer = setInterval(() => {\n      this.adaptiveFlushBuffers();\n    }, this.options.flushInterval);\n\n    // Start adaptive buffer management\n    if (this.options.adaptiveBuffering) {\n      this.adaptiveTimer = setInterval(() => {\n        this.optimizeBufferSizes();\n      }, 5000); // Every 5 seconds\n    }\n  }\n\n  /**\n   * Adaptive buffer management based on current load\n   */\n  adaptiveBufferManagement() {\n    if (!this.options.adaptiveBuffering) return;\n\n    const currentLoad = this.metrics.throughputPerSecond;\n    const bufferUtilization = this.metrics.bufferUtilization;\n\n    // Adjust flush interval based on load\n    if (currentLoad > 1000 && this.options.flushInterval > 50) {\n      // High load - increase flush frequency\n      this.options.flushInterval = Math.max(50, this.options.flushInterval - 10);\n      this.restartFlushTimer();\n    } else if (currentLoad < 100 && this.options.flushInterval < 500) {\n      // Low load - decrease flush frequency to save resources\n      this.options.flushInterval = Math.min(500, this.options.flushInterval + 10);\n      this.restartFlushTimer();\n    }\n\n    // Adjust buffer size based on utilization\n    if (bufferUtilization > 80) {\n      // High utilization - increase buffer size\n      this.options.bufferSize = Math.min(5000, this.options.bufferSize * 1.2);\n      this.metrics.adaptiveBufferResizes++;\n    } else if (bufferUtilization < 20 && this.options.bufferSize > 1000) {\n      // Low utilization - decrease buffer size to save memory\n      this.options.bufferSize = Math.max(1000, this.options.bufferSize * 0.9);\n      this.metrics.adaptiveBufferResizes++;\n    }\n  }\n\n  /**\n   * Restart flush timer with new interval\n   */\n  restartFlushTimer() {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flushTimer = setInterval(() => {\n      this.adaptiveFlushBuffers();\n    }, this.options.flushInterval);\n  }\n\n  /**\n   * Circuit breaker check for overload protection\n   */\n  checkCircuitBreaker() {\n    if (!this.options.circuitBreakerEnabled) return false;\n\n    const now = Date.now();\n    \n    // Reset circuit breaker if enough time has passed\n    if (this.circuitBreaker.isOpen && \n        now - this.circuitBreaker.lastFailureTime > this.circuitBreaker.resetTimeout) {\n      this.circuitBreaker.isOpen = false;\n      this.circuitBreaker.failures = 0;\n      this.logger.info('ðŸ”„ Circuit breaker reset');\n    }\n\n    return this.circuitBreaker.isOpen;\n  }\n\n  /**\n   * Trip circuit breaker on failure\n   */\n  tripCircuitBreaker(error) {\n    if (!this.options.circuitBreakerEnabled) return;\n\n    this.circuitBreaker.failures++;\n    this.circuitBreaker.lastFailureTime = Date.now();\n    this.metrics.circuitBreakerTrips++;\n\n    if (this.circuitBreaker.failures >= this.circuitBreaker.threshold) {\n      this.circuitBreaker.isOpen = true;\n      this.logger.error('ðŸ”¥ Circuit breaker tripped', { \n        failures: this.circuitBreaker.failures,\n        error: error.message \n      });\n      this.emit('circuitBreakerTripped', { failures: this.circuitBreaker.failures, error });\n    }\n  }\n\n  /**\n   * Get buffer from memory pool or create new one\n   */\n  getBuffer() {\n    if (this.options.memoryOptimization && this.memoryPool.buffers.length > 0) {\n      return this.memoryPool.buffers.pop();\n    }\n    return {};\n  }\n\n  /**\n   * Return buffer to memory pool\n   */\n  returnBuffer(buffer) {\n    if (this.options.memoryOptimization && this.memoryPool.currentSize < this.memoryPool.maxPoolSize) {\n      // Clear buffer contents\n      for (const key in buffer) {\n        delete buffer[key];\n      }\n      this.memoryPool.buffers.push(buffer);\n      this.memoryPool.currentSize++;\n    }\n  }\n\n  /**\n   * Add a user subscription for real-time data\n   */\n  addSubscription(userId, symbols, dataTypes = ['quotes'], options = {}) {\n    const subscriptionId = `${userId}_${Date.now()}`;\n    \n    const subscription = {\n      id: subscriptionId,\n      userId,\n      symbols: new Set(symbols),\n      dataTypes: new Set(dataTypes),\n      options: {\n        compression: options.compression || 'gzip',\n        throttle: options.throttle || 100, // ms between updates\n        conflation: options.conflation || true, // combine rapid updates\n        ...options\n      },\n      metrics: {\n        messagesDelivered: 0,\n        lastDeliveryTime: Date.now(),\n        avgDeliveryLatency: 0\n      },\n      createdAt: Date.now(),\n      lastActivityAt: Date.now()\n    };\n\n    this.subscriptions.set(subscriptionId, subscription);\n    \n    this.logger.info('ðŸ“¡ Subscription added', {\n      subscriptionId,\n      userId: `${userId.substring(0, 8)}...`,\n      symbols: Array.from(symbols),\n      dataTypes: Array.from(dataTypes)\n    });\n\n    return subscriptionId;\n  }\n\n  /**\n   * Remove a user subscription\n   */\n  removeSubscription(subscriptionId) {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (subscription) {\n      this.subscriptions.delete(subscriptionId);\n      this.logger.info('ðŸ“¡ Subscription removed', {\n        subscriptionId,\n        userId: `${subscription.userId.substring(0, 8)}...`\n      });\n    }\n  }\n\n  /**\n   * Process incoming market data with priority-based intelligent buffering\n   */\n  processIncomingData(dataType, data) {\n    const processStart = Date.now();\n    \n    try {\n      // Circuit breaker check\n      if (this.checkCircuitBreaker()) {\n        this.metrics.messagesDropped++;\n        return;\n      }\n\n      this.metrics.messagesReceived++;\n\n      // Determine priority based on data type\n      const priority = this.getDataPriority(dataType);\n      \n      // Route data to appropriate buffer with priority\n      switch (dataType) {\n        case 'quote':\n        case 'quotes':\n          this.bufferQuoteDataWithPriority(data, priority);\n          break;\n        case 'trade':\n        case 'trades':\n          this.bufferTradeDataWithPriority(data, priority);\n          break;\n        case 'bar':\n        case 'bars':\n          this.bufferBarData(data);\n          break;\n        case 'news':\n          this.bufferNewsData(data);\n          break;\n        case 'orderbook':\n          this.bufferOrderBookData(data);\n          break;\n        default:\n          this.logger.warn('Unknown data type received', { dataType, data });\n          this.metrics.messagesDropped++;\n          return;\n      }\n\n      this.metrics.messagesProcessed++;\n      \n      // Check if we need immediate flush for critical data\n      if (priority === 'critical' && this.shouldFlushBuffers()) {\n        this.triggerImmediateFlush();\n      }\n\n      // Update latency metrics\n      const latency = Date.now() - processStart;\n      this.updateLatencyMetrics(latency);\n\n    } catch (error) {\n      this.metrics.messagesDropped++;\n      this.tripCircuitBreaker(error);\n      this.logger.error('Error processing incoming data', { \n        dataType, \n        error: error.message,\n        stack: error.stack \n      });\n    }\n  }\n\n  /**\n   * Determine data priority for processing\n   */\n  getDataPriority(dataType) {\n    switch (dataType) {\n      case 'quote':\n      case 'quotes':\n      case 'trade':\n      case 'trades':\n        return 'critical';\n      case 'bar':\n      case 'bars':\n      case 'orderbook':\n        return 'high';\n      case 'news':\n      case 'alerts':\n        return 'normal';\n      default:\n        return 'low';\n    }\n  }\n\n  /**\n   * Buffer quote data with priority handling\n   */\n  bufferQuoteDataWithPriority(data, priority) {\n    if (Array.isArray(data)) {\n      data.forEach(quote => this.bufferSingleQuoteWithPriority(quote, priority));\n    } else {\n      this.bufferSingleQuoteWithPriority(data, priority);\n    }\n  }\n\n  /**\n   * Buffer single quote with priority\n   */\n  bufferSingleQuoteWithPriority(quote, priority) {\n    const symbol = quote.symbol || quote.S;\n    if (!symbol) return;\n\n    // Store latest quote with timestamp and priority\n    const quoteData = {\n      ...quote,\n      bufferedAt: Date.now(),\n      priority: priority,\n      price: quote.price || quote.ap || quote.bp || 0,\n      bid: quote.bid || quote.bp || 0,\n      ask: quote.ask || quote.ap || 0,\n      bidSize: quote.bidSize || quote.bs || 0,\n      askSize: quote.askSize || quote.as || 0,\n      timestamp: quote.timestamp || quote.t || Date.now()\n    };\n\n    this.dataBuffers.quotes.set(symbol, quoteData);\n\n    // Add to priority queue if enabled\n    if (this.options.priorityQueuing) {\n      this.priorityQueues[priority].push(quoteData);\n      this.metrics.priorityQueueSizes[priority]++;\n    }\n  }\n\n  /**\n   * Buffer trade data with priority\n   */\n  bufferTradeDataWithPriority(data, priority) {\n    if (Array.isArray(data)) {\n      this.dataBuffers.trades.push(...data.map(trade => ({\n        ...trade,\n        bufferedAt: Date.now(),\n        priority: priority\n      })));\n    } else {\n      this.dataBuffers.trades.push({\n        ...data,\n        bufferedAt: Date.now(),\n        priority: priority\n      });\n    }\n\n    // Limit trade buffer size\n    if (this.dataBuffers.trades.length > this.options.bufferSize) {\n      this.dataBuffers.trades = this.dataBuffers.trades.slice(-this.options.bufferSize);\n    }\n  }\n\n  /**\n   * Adaptive flush buffers with concurrent processing\n   */\n  async adaptiveFlushBuffers() {\n    // Don't flush if we're at max concurrent flushes\n    if (this.currentFlushes >= this.options.maxConcurrentFlushes) {\n      return;\n    }\n\n    // Check if we should flush based on priority queues\n    if (this.shouldFlushBuffers() || this.hasCriticalData()) {\n      this.currentFlushes++;\n      this.metrics.concurrentFlushes = this.currentFlushes;\n\n      try {\n        await this.flushBuffers();\n      } finally {\n        this.currentFlushes--;\n        this.metrics.concurrentFlushes = this.currentFlushes;\n      }\n    }\n  }\n\n  /**\n   * Check if we have critical data that needs immediate processing\n   */\n  hasCriticalData() {\n    return this.priorityQueues.critical.length > 0 || \n           this.priorityQueues.high.length > this.options.batchSize / 2;\n  }\n\n  /**\n   * Trigger immediate flush for critical data\n   */\n  triggerImmediateFlush() {\n    if (this.currentFlushes < this.options.maxConcurrentFlushes) {\n      setImmediate(() => this.adaptiveFlushBuffers());\n    }\n  }\n\n  /**\n   * Buffer quote data with conflation\n   */\n  bufferQuoteData(data) {\n    if (Array.isArray(data)) {\n      data.forEach(quote => this.bufferSingleQuote(quote));\n    } else {\n      this.bufferSingleQuote(data);\n    }\n  }\n\n  bufferSingleQuote(quote) {\n    const symbol = quote.symbol || quote.S;\n    if (!symbol) return;\n\n    // Store latest quote with timestamp\n    this.dataBuffers.quotes.set(symbol, {\n      ...quote,\n      bufferedAt: Date.now(),\n      price: quote.price || quote.ap || quote.bp || 0,\n      bid: quote.bid || quote.bp || 0,\n      ask: quote.ask || quote.ap || 0,\n      bidSize: quote.bidSize || quote.bs || 0,\n      askSize: quote.askSize || quote.as || 0,\n      timestamp: quote.timestamp || quote.t || Date.now()\n    });\n  }\n\n  /**\n   * Buffer trade data\n   */\n  bufferTradeData(data) {\n    if (Array.isArray(data)) {\n      this.dataBuffers.trades.push(...data.map(trade => ({\n        ...trade,\n        bufferedAt: Date.now()\n      })));\n    } else {\n      this.dataBuffers.trades.push({\n        ...data,\n        bufferedAt: Date.now()\n      });\n    }\n\n    // Limit trade buffer size\n    if (this.dataBuffers.trades.length > this.options.bufferSize) {\n      this.dataBuffers.trades = this.dataBuffers.trades.slice(-this.options.bufferSize);\n    }\n  }\n\n  /**\n   * Buffer bar/candlestick data\n   */\n  bufferBarData(data) {\n    if (Array.isArray(data)) {\n      data.forEach(bar => this.bufferSingleBar(bar));\n    } else {\n      this.bufferSingleBar(data);\n    }\n  }\n\n  bufferSingleBar(bar) {\n    const symbol = bar.symbol || bar.S;\n    if (!symbol) return;\n\n    this.dataBuffers.bars.set(symbol, {\n      ...bar,\n      bufferedAt: Date.now()\n    });\n  }\n\n  /**\n   * Buffer news data\n   */\n  bufferNewsData(data) {\n    if (Array.isArray(data)) {\n      this.dataBuffers.news.push(...data.map(news => ({\n        ...news,\n        bufferedAt: Date.now()\n      })));\n    } else {\n      this.dataBuffers.news.push({\n        ...data,\n        bufferedAt: Date.now()\n      });\n    }\n\n    // Limit news buffer size\n    if (this.dataBuffers.news.length > this.options.bufferSize) {\n      this.dataBuffers.news = this.dataBuffers.news.slice(-this.options.bufferSize);\n    }\n  }\n\n  /**\n   * Buffer order book data\n   */\n  bufferOrderBookData(data) {\n    const symbol = data.symbol || data.S;\n    if (!symbol) return;\n\n    this.dataBuffers.orderbook.set(symbol, {\n      ...data,\n      bufferedAt: Date.now()\n    });\n  }\n\n  /**\n   * Check if buffers should be flushed\n   */\n  shouldFlushBuffers() {\n    const now = Date.now();\n    const timeSinceLastFlush = now - this.metrics.lastFlushTime;\n    \n    // Flush if interval exceeded\n    if (timeSinceLastFlush >= this.options.flushInterval) {\n      return true;\n    }\n\n    // Flush if any buffer is approaching capacity\n    const quoteBufferSize = this.dataBuffers.quotes.size;\n    const tradeBufferSize = this.dataBuffers.trades.length;\n    const newsBufferSize = this.dataBuffers.news.length;\n    \n    const maxUtilization = Math.max(\n      quoteBufferSize / this.options.bufferSize,\n      tradeBufferSize / this.options.bufferSize,\n      newsBufferSize / this.options.bufferSize\n    );\n\n    return maxUtilization > 0.8; // Flush at 80% capacity\n  }\n\n  /**\n   * Flush all buffers and distribute to subscribers\n   */\n  async flushBuffers() {\n    const flushStart = Date.now();\n    \n    try {\n      // Prepare data for distribution\n      const dataPacket = this.prepareDataPacket();\n      \n      if (this.isDataPacketEmpty(dataPacket)) {\n        return; // Nothing to flush\n      }\n\n      // Distribute to subscribers\n      await this.distributeToSubscribers(dataPacket);\n\n      // Clear processed buffers\n      this.clearProcessedBuffers();\n\n      // Update metrics\n      this.metrics.batchesFlushed++;\n      this.metrics.lastFlushTime = Date.now();\n      \n      const flushDuration = Date.now() - flushStart;\n      this.logger.debug('Buffers flushed', {\n        duration: `${flushDuration}ms`,\n        dataPacketSize: this.calculateDataPacketSize(dataPacket),\n        subscriberCount: this.subscriptions.size\n      });\n\n    } catch (error) {\n      this.logger.error('Error flushing buffers', {\n        error: error.message,\n        stack: error.stack\n      });\n    }\n  }\n\n  /**\n   * Prepare data packet for distribution\n   */\n  prepareDataPacket() {\n    return {\n      quotes: new Map(this.dataBuffers.quotes),\n      trades: [...this.dataBuffers.trades],\n      bars: new Map(this.dataBuffers.bars),\n      news: [...this.dataBuffers.news],\n      orderbook: new Map(this.dataBuffers.orderbook),\n      timestamp: Date.now(),\n      sequenceNumber: this.metrics.batchesFlushed + 1\n    };\n  }\n\n  /**\n   * Check if data packet is empty\n   */\n  isDataPacketEmpty(dataPacket) {\n    return dataPacket.quotes.size === 0 &&\n           dataPacket.trades.length === 0 &&\n           dataPacket.bars.size === 0 &&\n           dataPacket.news.length === 0 &&\n           dataPacket.orderbook.size === 0;\n  }\n\n  /**\n   * Distribute data to all active subscribers\n   */\n  async distributeToSubscribers(dataPacket) {\n    const distributionPromises = [];\n\n    for (const [subscriptionId, subscription] of this.subscriptions) {\n      try {\n        // Filter data for this subscription\n        const filteredData = this.filterDataForSubscription(dataPacket, subscription);\n        \n        if (this.isDataPacketEmpty(filteredData)) {\n          continue; // No relevant data for this subscription\n        }\n\n        // Apply subscription options (compression, throttling, etc.)\n        const processedData = await this.processDataForSubscription(filteredData, subscription);\n\n        // Queue for delivery\n        distributionPromises.push(\n          this.deliverToSubscription(subscriptionId, processedData)\n        );\n\n      } catch (error) {\n        this.logger.error('Error preparing data for subscription', {\n          subscriptionId,\n          error: error.message\n        });\n      }\n    }\n\n    // Execute all distributions in parallel\n    if (distributionPromises.length > 0) {\n      try {\n        await Promise.allSettled(distributionPromises);\n      } catch (error) {\n        this.logger.error('Error in parallel distribution', {\n          error: error.message\n        });\n      }\n    }\n  }\n\n  /**\n   * Filter data packet for specific subscription\n   */\n  filterDataForSubscription(dataPacket, subscription) {\n    const filteredData = {\n      quotes: new Map(),\n      trades: [],\n      bars: new Map(),\n      news: [],\n      orderbook: new Map(),\n      timestamp: dataPacket.timestamp,\n      sequenceNumber: dataPacket.sequenceNumber\n    };\n\n    // Filter by symbols and data types\n    if (subscription.dataTypes.has('quotes')) {\n      for (const [symbol, quote] of dataPacket.quotes) {\n        if (subscription.symbols.has(symbol)) {\n          filteredData.quotes.set(symbol, quote);\n        }\n      }\n    }\n\n    if (subscription.dataTypes.has('trades')) {\n      filteredData.trades = dataPacket.trades.filter(trade => \n        subscription.symbols.has(trade.symbol || trade.S)\n      );\n    }\n\n    if (subscription.dataTypes.has('bars')) {\n      for (const [symbol, bar] of dataPacket.bars) {\n        if (subscription.symbols.has(symbol)) {\n          filteredData.bars.set(symbol, bar);\n        }\n      }\n    }\n\n    if (subscription.dataTypes.has('news')) {\n      filteredData.news = dataPacket.news; // News is not symbol-specific\n    }\n\n    if (subscription.dataTypes.has('orderbook')) {\n      for (const [symbol, orderbook] of dataPacket.orderbook) {\n        if (subscription.symbols.has(symbol)) {\n          filteredData.orderbook.set(symbol, orderbook);\n        }\n      }\n    }\n\n    return filteredData;\n  }\n\n  /**\n   * Process data for specific subscription (compression, throttling, etc.)\n   */\n  async processDataForSubscription(dataPacket, subscription) {\n    let processedData = { ...dataPacket };\n\n    // Convert Maps to Objects for JSON serialization\n    processedData.quotes = Object.fromEntries(dataPacket.quotes);\n    processedData.bars = Object.fromEntries(dataPacket.bars);\n    processedData.orderbook = Object.fromEntries(dataPacket.orderbook);\n\n    // Apply compression if enabled\n    if (subscription.options.compression && this.compressionEnabled) {\n      processedData = await this.compressData(processedData, subscription.options.compression);\n    }\n\n    return processedData;\n  }\n\n  /**\n   * Deliver data to specific subscription\n   */\n  async deliverToSubscription(subscriptionId, data) {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (!subscription) return;\n\n    const deliveryStart = Date.now();\n\n    try {\n      // Check throttling\n      const timeSinceLastDelivery = Date.now() - subscription.metrics.lastDeliveryTime;\n      if (timeSinceLastDelivery < subscription.options.throttle) {\n        return; // Skip delivery due to throttling\n      }\n\n      // This would typically send data via WebSocket or HTTP SSE\n      // For now, we'll store it in a delivery queue\n      await this.queueForDelivery(subscriptionId, data);\n\n      // Update subscription metrics\n      const deliveryLatency = Date.now() - deliveryStart;\n      subscription.metrics.messagesDelivered++;\n      subscription.metrics.lastDeliveryTime = Date.now();\n      subscription.metrics.avgDeliveryLatency = \n        (subscription.metrics.avgDeliveryLatency + deliveryLatency) / 2;\n      subscription.lastActivityAt = Date.now();\n\n    } catch (error) {\n      this.logger.error('Error delivering to subscription', {\n        subscriptionId,\n        error: error.message\n      });\n    }\n  }\n\n  /**\n   * Queue data for delivery (placeholder for actual delivery mechanism)\n   */\n  async queueForDelivery(subscriptionId, data) {\n    // This would integrate with your WebSocket or SSE delivery mechanism\n    // For now, we'll just log the delivery\n    this.logger.debug('Data queued for delivery', {\n      subscriptionId,\n      dataSize: JSON.stringify(data).length,\n      timestamp: data.timestamp\n    });\n  }\n\n  /**\n   * Compress data for delivery\n   */\n  async compressData(data, compressionType = 'gzip') {\n    // Placeholder for compression logic\n    // In a real implementation, you'd use compression libraries\n    return {\n      ...data,\n      compressed: true,\n      compressionType,\n      originalSize: JSON.stringify(data).length\n    };\n  }\n\n  /**\n   * Clear processed buffers\n   */\n  clearProcessedBuffers() {\n    this.dataBuffers.quotes.clear();\n    this.dataBuffers.trades.length = 0;\n    this.dataBuffers.bars.clear();\n    this.dataBuffers.news.length = 0;\n    this.dataBuffers.orderbook.clear();\n  }\n\n  /**\n   * Calculate data packet size\n   */\n  calculateDataPacketSize(dataPacket) {\n    return {\n      quotes: dataPacket.quotes.size,\n      trades: dataPacket.trades.length,\n      bars: dataPacket.bars.size,\n      news: dataPacket.news.length,\n      orderbook: dataPacket.orderbook.size\n    };\n  }\n\n  /**\n   * Calculate enhanced performance metrics with percentiles\n   */\n  calculatePerformanceMetrics() {\n    const now = Date.now();\n    const elapsedSeconds = (now - (this.metrics.lastCalculationTime || now)) / 1000;\n    \n    if (elapsedSeconds > 0) {\n      const currentThroughput = this.metrics.messagesProcessed / elapsedSeconds;\n      this.metrics.throughputPerSecond = currentThroughput;\n      \n      // Track peak throughput\n      if (currentThroughput > this.metrics.peakThroughput) {\n        this.metrics.peakThroughput = currentThroughput;\n      }\n      \n      // Add to throughput history for trend analysis\n      this.throughputHistory.push(currentThroughput);\n      if (this.throughputHistory.length > 100) {\n        this.throughputHistory.shift();\n      }\n    }\n\n    // Calculate buffer utilization\n    const totalBufferCapacity = this.options.bufferSize * 5; // 5 different buffer types\n    const currentBufferUsage = \n      this.dataBuffers.quotes.size +\n      this.dataBuffers.trades.length +\n      this.dataBuffers.bars.size +\n      this.dataBuffers.news.length +\n      this.dataBuffers.orderbook.size;\n    \n    this.metrics.bufferUtilization = (currentBufferUsage / totalBufferCapacity) * 100;\n    \n    // Calculate priority queue sizes\n    this.metrics.priorityQueueSizes = {\n      critical: this.priorityQueues.critical.length,\n      high: this.priorityQueues.high.length,\n      normal: this.priorityQueues.normal.length,\n      low: this.priorityQueues.low.length\n    };\n    \n    // Calculate latency percentiles\n    if (this.latencyHistory.length > 0) {\n      const sortedLatencies = [...this.latencyHistory].sort((a, b) => a - b);\n      const p95Index = Math.floor(sortedLatencies.length * 0.95);\n      const p99Index = Math.floor(sortedLatencies.length * 0.99);\n      \n      this.metrics.latencyP95 = sortedLatencies[p95Index] || 0;\n      this.metrics.latencyP99 = sortedLatencies[p99Index] || 0;\n    }\n    \n    // Calculate memory utilization (approximate)\n    const memoryUsage = process.memoryUsage();\n    this.metrics.memoryUtilization = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\n    \n    this.metrics.lastCalculationTime = now;\n  }\n\n  /**\n   * Optimize buffer sizes based on historical performance\n   */\n  optimizeBufferSizes() {\n    if (this.throughputHistory.length < 10) return;\n    \n    const avgThroughput = this.throughputHistory.reduce((sum, val) => sum + val, 0) / this.throughputHistory.length;\n    const throughputVariance = this.throughputHistory.reduce((sum, val) => sum + Math.pow(val - avgThroughput, 2), 0) / this.throughputHistory.length;\n    \n    // Adjust buffer size based on throughput variance\n    if (throughputVariance > 1000) {\n      // High variance - increase buffer size for stability\n      this.options.bufferSize = Math.min(5000, this.options.bufferSize * 1.1);\n    } else if (throughputVariance < 100) {\n      // Low variance - can reduce buffer size\n      this.options.bufferSize = Math.max(1000, this.options.bufferSize * 0.95);\n    }\n  }\n\n  /**\n   * Update latency metrics with history tracking\n   */\n  updateLatencyMetrics(latency) {\n    if (this.metrics.averageLatency === 0) {\n      this.metrics.averageLatency = latency;\n    } else {\n      this.metrics.averageLatency = (this.metrics.averageLatency + latency) / 2;\n    }\n    \n    // Add to latency history for percentile calculations\n    this.latencyHistory.push(latency);\n    if (this.latencyHistory.length > 1000) {\n      this.latencyHistory.shift();\n    }\n  }\n\n  /**\n   * Log enhanced performance metrics\n   */\n  logPerformanceMetrics() {\n    this.logger.info('ðŸ“Š High-Performance Real-time Pipeline Metrics', {\n      throughput: {\n        current: this.metrics.throughputPerSecond.toFixed(2),\n        peak: this.metrics.peakThroughput.toFixed(2),\n        messagesReceived: this.metrics.messagesReceived,\n        messagesProcessed: this.metrics.messagesProcessed,\n        messagesDropped: this.metrics.messagesDropped\n      },\n      latency: {\n        average: `${this.metrics.averageLatency.toFixed(2)}ms`,\n        p95: `${this.metrics.latencyP95.toFixed(2)}ms`,\n        p99: `${this.metrics.latencyP99.toFixed(2)}ms`\n      },\n      buffers: {\n        utilization: `${this.metrics.bufferUtilization.toFixed(1)}%`,\n        adaptiveResizes: this.metrics.adaptiveBufferResizes,\n        concurrentFlushes: this.metrics.concurrentFlushes,\n        batchesFlushed: this.metrics.batchesFlushed\n      },\n      priorityQueues: this.metrics.priorityQueueSizes,\n      system: {\n        memoryUtilization: `${this.metrics.memoryUtilization.toFixed(1)}%`,\n        circuitBreakerTrips: this.metrics.circuitBreakerTrips,\n        activeSubscriptions: this.subscriptions.size\n      }\n    });\n\n    // Emit performance event for monitoring\n    this.emit('performanceMetrics', this.metrics);\n  }\n\n  /**\n   * Get current pipeline status\n   */\n  getStatus() {\n    return {\n      status: 'active',\n      metrics: this.metrics,\n      subscriptions: {\n        total: this.subscriptions.size,\n        active: Array.from(this.subscriptions.values()).filter(\n          sub => Date.now() - sub.lastActivityAt < 60000\n        ).length\n      },\n      buffers: {\n        quotes: this.dataBuffers.quotes.size,\n        trades: this.dataBuffers.trades.length,\n        bars: this.dataBuffers.bars.size,\n        news: this.dataBuffers.news.length,\n        orderbook: this.dataBuffers.orderbook.size\n      },\n      options: this.options\n    };\n  }\n\n  /**\n   * Cleanup and shutdown with enhanced resource management\n   */\n  shutdown() {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    if (this.performanceTimer) {\n      clearInterval(this.performanceTimer);\n    }\n\n    if (this.adaptiveTimer) {\n      clearInterval(this.adaptiveTimer);\n    }\n\n    // Clear priority queues\n    Object.keys(this.priorityQueues).forEach(priority => {\n      this.priorityQueues[priority].length = 0;\n    });\n\n    // Clear memory pool\n    this.memoryPool.buffers.length = 0;\n    this.memoryPool.currentSize = 0;\n\n    // Final flush\n    this.flushBuffers();\n    \n    this.logger.info('ðŸ›‘ High-Performance Real-time Data Pipeline shutdown completed', {\n      finalMetrics: {\n        peakThroughput: this.metrics.peakThroughput,\n        totalMessages: this.metrics.messagesProcessed,\n        circuitBreakerTrips: this.metrics.circuitBreakerTrips,\n        adaptiveResizes: this.metrics.adaptiveBufferResizes\n      }\n    });\n  }\n}\n\nmodule.exports = { RealtimeDataPipeline };"],"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","ignoreList":[]}