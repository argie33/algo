{"version":3,"names":["cov_knieutqso","actualCoverage","express","s","require","query","router","Router","get","req","res","f","json","status","endpoint","timestamp","Date","toISOString","symbol","params","toUpperCase","forceRecalculate","recalculate","b","existingScore","length","success","scores","cached","calculateComprehensiveScores","error","storeComprehensiveScores","console","details","message","post","symbols","body","Array","isArray","results","errors","symbolUpper","push","processed","failed","limit","Math","min","parseInt","sector","marketCapTier","minScore","parseFloat","whereClause","paramCount","topStocks","stocks","count","filters","stats","sectorStats","overallStats","basicInfo","financialData","technicalData","sentimentData","momentumData","positioningData","realtimeSentimentData","Promise","all","getBasicInfo","getFinancialMetrics","getTechnicalIndicators","getSentimentData","getMomentumMetrics","getPositioningMetrics","getRealtimeSentimentData","log","qualityScore","calculateQualityScore","growthScore","calculateGrowthScore","valueScore","calculateValueScore","momentumScore","calculateEnhancedMomentumScore","sentimentScore","calculateEnhancedSentimentScore","positioningScore","calculateEnhancedPositioningScore","compositeScore","calculateCompositeScore","quality","growth","value","momentum","sentiment","positioning","quality_score","growth_score","value_score","momentum_score","sentiment_score","positioning_score","composite_score","calculation_date","split","data_quality","assessDataQuality","score","components","roe","undefined","max","roa","debt_to_equity","dte","debtScore","net_profit_margin","margin","current_ratio","cr","crScore","piotroski_score","piotroski","revenue_growth_1y","earnings_growth_1y","revenue_growth_3y","roic","roicScore","trailing_pe","pe","peScore","price_to_book","pb","pbScore","ev_ebitda","evEbitda","evScore","price_to_sales","ps","psScore","fcf_yield","fcfYield","fcfScore","dividend_yield","divYield","divScore","jt_momentum_12_1","jtMomentum","jtScore","risk_adjusted_momentum","riskAdjMomentum","riskAdjScore","momentum_persistence","persistence","volume_weighted_momentum","volMomentum","volMomentumScore","earnings_acceleration","earnAccel","earnAccelScore","momentum_strength","strength","calculateMomentumScore","rsi_14","rsi","rsiScore","macd_histogram","macdHist","macdScore","price_vs_sma_20","priceVsSma","smaScore","volume_ratio","volRatio","volScore","adx_14","adx","adxScore","bb_position","bbPos","bbScore","composite_sentiment","compositeSentiment","news_sentiment_score","newsSentiment","newsScore","social_sentiment_score","socialSentiment","socialScore","analyst_momentum","analystMomentum","analystScore","viral_score","viralScore","viralNormalized","calculateSentimentScore","total_analysts","buyRatio","strong_buy_count","buy_count","price_target_vs_current","targetUpside","targetScore","reddit_sentiment_score","search_trend_30d","searchTrend","searchScore","calculatePositioningScore","held_percent_institutions","instOwnership","instScore","short_percent_outstanding","shortPercent","shortScore","high_52w","price","distanceFromHigh","highScore","price_vs_sma_200","priceVsSma200","sma200Score","historical_volatility_20d","volatility","institutional_ownership_change","instChange","instChangeScore","smart_money_score","smartMoney","insider_sentiment_score","insiderSentiment","insiderScore","unusual_options_activity","optionsActivity","optionsScore","short_squeeze_potential","squeezePotential","positioning_momentum","posMomentum","posMomentumScore","weights","totalWeight","Object","keys","forEach","key","isNaN","result","profitability","balanceSheet","valuation","combined","assign","analyst","social","maxScore","module","exports"],"sources":["scoring.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\n\nconst router = express.Router();\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'scoring',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Calculate comprehensive scoring for stocks\nrouter.get('/calculate/:symbol', async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    const forceRecalculate = req.query.recalculate === 'true';\n    \n    // Check if we have recent scores unless forcing recalculation\n    if (!forceRecalculate) {\n      const existingScore = await query(`\n        SELECT * FROM comprehensive_scores \n        WHERE symbol = $1 \n        AND updated_at > NOW() - INTERVAL '1 hour'\n        ORDER BY updated_at DESC \n        LIMIT 1\n      `, [symbol]);\n      \n      if (existingScore.length > 0) {\n        return res.json({\n          success: true,\n          scores: existingScore[0],\n          cached: true\n        });\n      }\n    }\n    \n    // Calculate comprehensive scores\n    const scores = await calculateComprehensiveScores(symbol);\n    \n    if (!scores) {\n      return res.status(404).json({\n        success: false,\n        error: 'Unable to calculate scores - insufficient data'\n      });\n    }\n    \n    // Store scores in database\n    await storeComprehensiveScores(symbol, scores);\n    \n    res.json({\n      success: true,\n      scores: scores,\n      cached: false\n    });\n    \n  } catch (error) {\n    console.error('Scoring calculation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate comprehensive scores',\n      details: error.message\n    });\n  }\n});\n\n// Batch calculate scores for multiple symbols\nrouter.post('/calculate/batch', async (req, res) => {\n  try {\n    const { symbols, forceRecalculate = false } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'symbols array is required'\n      });\n    }\n    \n    if (symbols.length > 50) {\n      return res.status(400).json({\n        success: false,\n        error: 'Maximum 50 symbols per batch'\n      });\n    }\n    \n    const results = [];\n    const errors = [];\n    \n    for (const symbol of symbols) {\n      try {\n        const symbolUpper = symbol.toUpperCase();\n        \n        // Check cache first unless forcing recalculation\n        let scores = null;\n        if (!forceRecalculate) {\n          const existingScore = await query(`\n            SELECT * FROM comprehensive_scores \n            WHERE symbol = $1 \n            AND updated_at > NOW() - INTERVAL '1 hour'\n            ORDER BY updated_at DESC \n            LIMIT 1\n          `, [symbolUpper]);\n          \n          if (existingScore.length > 0) {\n            scores = existingScore[0];\n          }\n        }\n        \n        // Calculate if not cached\n        if (!scores) {\n          scores = await calculateComprehensiveScores(symbolUpper);\n          if (scores) {\n            await storeComprehensiveScores(symbolUpper, scores);\n          }\n        }\n        \n        if (scores) {\n          results.push({\n            symbol: symbolUpper,\n            scores: scores,\n            success: true\n          });\n        } else {\n          errors.push({\n            symbol: symbolUpper,\n            error: 'Insufficient data for scoring'\n          });\n        }\n        \n      } catch (error) {\n        errors.push({\n          symbol: symbol,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({\n      success: true,\n      results: results,\n      errors: errors,\n      processed: results.length,\n      failed: errors.length\n    });\n    \n  } catch (error) {\n    console.error('Batch scoring error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate batch scores',\n      details: error.message\n    });\n  }\n});\n\n// Get top stocks by composite score\nrouter.get('/top', async (req, res) => {\n  try {\n    const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    const sector = req.query.sector;\n    const marketCapTier = req.query.marketCapTier;\n    const minScore = parseFloat(req.query.minScore) || 0;\n    \n    let whereClause = 'WHERE cs.composite_score >= $1';\n    const params = [minScore];\n    let paramCount = 1;\n    \n    if (sector) {\n      paramCount++;\n      whereClause += ` AND se.sector = $${paramCount}`;\n      params.push(sector);\n    }\n    \n    if (marketCapTier) {\n      paramCount++;\n      whereClause += ` AND se.market_cap_tier = $${paramCount}`;\n      params.push(marketCapTier);\n    }\n    \n    const topStocks = await query(`\n      SELECT cs.*, se.company_name, se.sector, se.market_cap, se.market_cap_tier\n      FROM comprehensive_scores cs\n      JOIN stock_symbols_enhanced se ON cs.symbol = se.symbol\n      ${whereClause}\n      AND cs.updated_at > NOW() - INTERVAL '24 hours'\n      ORDER BY cs.composite_score DESC\n      LIMIT ${limit}\n    `, params);\n    \n    res.json({\n      success: true,\n      stocks: topStocks,\n      count: topStocks.length,\n      filters: {\n        sector: sector || 'all',\n        marketCapTier: marketCapTier || 'all',\n        minScore: minScore\n      }\n    });\n    \n  } catch (error) {\n    console.error('Top stocks query error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get top stocks',\n      details: error.message\n    });\n  }\n});\n\n// Get scoring distribution and statistics\nrouter.get('/stats', async (req, res) => {\n  try {\n    const stats = await query(`\n      SELECT \n        COUNT(*) as total_stocks,\n        AVG(quality_score) as avg_quality,\n        AVG(growth_score) as avg_growth,\n        AVG(value_score) as avg_value,\n        AVG(momentum_score) as avg_momentum,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(positioning_score) as avg_positioning,\n        AVG(composite_score) as avg_composite,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY composite_score) as q1_composite,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY composite_score) as median_composite,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY composite_score) as q3_composite,\n        MAX(composite_score) as max_composite,\n        MIN(composite_score) as min_composite\n      FROM comprehensive_scores\n      WHERE updated_at > NOW() - INTERVAL '24 hours'\n    `);\n    \n    const sectorStats = await query(`\n      SELECT \n        se.sector,\n        COUNT(*) as count,\n        AVG(cs.composite_score) as avg_score,\n        MAX(cs.composite_score) as max_score\n      FROM comprehensive_scores cs\n      JOIN stock_symbols_enhanced se ON cs.symbol = se.symbol\n      WHERE cs.updated_at > NOW() - INTERVAL '24 hours'\n      GROUP BY se.sector\n      ORDER BY avg_score DESC\n    `);\n    \n    res.json({\n      success: true,\n      overallStats: stats[0],\n      sectorStats: sectorStats\n    });\n    \n  } catch (error) {\n    console.error('Scoring stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get scoring statistics',\n      details: error.message\n    });\n  }\n});\n\n// Core scoring calculation function\nasync function calculateComprehensiveScores(symbol) {\n  try {\n    // Get all necessary data for scoring (enhanced with new data sources)\n    const [basicInfo, financialData, technicalData, sentimentData, momentumData, positioningData, realtimeSentimentData] = await Promise.all([\n      getBasicInfo(symbol),\n      getFinancialMetrics(symbol),\n      getTechnicalIndicators(symbol),\n      getSentimentData(symbol),\n      getMomentumMetrics(symbol),\n      getPositioningMetrics(symbol),\n      getRealtimeSentimentData(symbol)\n    ]);\n    \n    if (!basicInfo) {\n      console.log(`No basic info found for ${symbol}`);\n      return null;\n    }\n    \n    // Calculate each component score using enhanced data\n    const qualityScore = calculateQualityScore(basicInfo, financialData);\n    const growthScore = calculateGrowthScore(basicInfo, financialData);\n    const valueScore = calculateValueScore(basicInfo, financialData);\n    const momentumScore = calculateEnhancedMomentumScore(basicInfo, technicalData, momentumData);\n    const sentimentScore = calculateEnhancedSentimentScore(sentimentData, realtimeSentimentData);\n    const positioningScore = calculateEnhancedPositioningScore(basicInfo, technicalData, positioningData);\n    \n    // Calculate weighted composite score\n    const compositeScore = calculateCompositeScore({\n      quality: qualityScore,\n      growth: growthScore,\n      value: valueScore,\n      momentum: momentumScore,\n      sentiment: sentimentScore,\n      positioning: positioningScore\n    });\n    \n    return {\n      symbol: symbol,\n      quality_score: qualityScore,\n      growth_score: growthScore,\n      value_score: valueScore,\n      momentum_score: momentumScore,\n      sentiment_score: sentimentScore,\n      positioning_score: positioningScore,\n      composite_score: compositeScore,\n      calculation_date: new Date().toISOString().split('T')[0],\n      data_quality: assessDataQuality(basicInfo, financialData, technicalData, sentimentData, momentumData, positioningData, realtimeSentimentData)\n    };\n    \n  } catch (error) {\n    console.error(`Error calculating scores for ${symbol}:`, error);\n    return null;\n  }\n}\n\n// Individual scoring components\nfunction calculateQualityScore(basicInfo, financialData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (financialData) {\n    // ROE component (25% weight)\n    if (financialData.roe !== null && financialData.roe !== undefined) {\n      const roe = parseFloat(financialData.roe);\n      score += (Math.min(Math.max(roe, 0), 0.5) / 0.5) * 0.25;\n      components++;\n    }\n    \n    // ROA component (20% weight)\n    if (financialData.roa !== null && financialData.roa !== undefined) {\n      const roa = parseFloat(financialData.roa);\n      score += (Math.min(Math.max(roa, 0), 0.3) / 0.3) * 0.20;\n      components++;\n    }\n    \n    // Debt-to-Equity component (20% weight)\n    if (financialData.debt_to_equity !== null && financialData.debt_to_equity !== undefined) {\n      const dte = parseFloat(financialData.debt_to_equity);\n      // Lower debt is better - invert and normalize\n      const debtScore = Math.max(0, 1 - (dte / 2)); // Score decreases as D/E increases\n      score += debtScore * 0.20;\n      components++;\n    }\n    \n    // Profit margin component (15% weight)\n    if (financialData.net_profit_margin !== null && financialData.net_profit_margin !== undefined) {\n      const margin = parseFloat(financialData.net_profit_margin);\n      score += (Math.min(Math.max(margin, 0), 0.3) / 0.3) * 0.15;\n      components++;\n    }\n    \n    // Current ratio component (10% weight)\n    if (financialData.current_ratio !== null && financialData.current_ratio !== undefined) {\n      const cr = parseFloat(financialData.current_ratio);\n      // Optimal range 1.5-3.0\n      const crScore = cr >= 1.5 && cr <= 3.0 ? 1.0 : \n                     cr > 3.0 ? Math.max(0, 1 - (cr - 3) / 3) :\n                     Math.max(0, cr / 1.5);\n      score += crScore * 0.10;\n      components++;\n    }\n    \n    // Piotroski F-Score component (10% weight)\n    if (financialData.piotroski_score !== null && financialData.piotroski_score !== undefined) {\n      const piotroski = parseFloat(financialData.piotroski_score);\n      score += (piotroski / 9) * 0.10; // Normalize to 0-1\n      components++;\n    }\n  }\n  \n  // Normalize score if we have fewer components\n  if (components > 0 && components < 6) {\n    score = 0.5 + (score - 0.5) * (6 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateGrowthScore(basicInfo, financialData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (financialData) {\n    // Revenue growth (30% weight)\n    if (financialData.revenue_growth_1y !== null && financialData.revenue_growth_1y !== undefined) {\n      const growth = parseFloat(financialData.revenue_growth_1y);\n      // Normalize growth: 0% = 0.5, 20%+ = 1.0, negative = lower\n      const growthScore = 0.5 + (growth / 0.4); // 40% growth = max score\n      score += Math.min(Math.max(growthScore, 0), 1) * 0.30;\n      components++;\n    }\n    \n    // Earnings growth (30% weight)\n    if (financialData.earnings_growth_1y !== null && financialData.earnings_growth_1y !== undefined) {\n      const growth = parseFloat(financialData.earnings_growth_1y);\n      const growthScore = 0.5 + (growth / 0.4);\n      score += Math.min(Math.max(growthScore, 0), 1) * 0.30;\n      components++;\n    }\n    \n    // Revenue growth 3Y (20% weight)\n    if (financialData.revenue_growth_3y !== null && financialData.revenue_growth_3y !== undefined) {\n      const growth = parseFloat(financialData.revenue_growth_3y);\n      const growthScore = 0.5 + (growth / 0.3); // 30% = max for 3Y\n      score += Math.min(Math.max(growthScore, 0), 1) * 0.20;\n      components++;\n    }\n    \n    // ROIC trend (20% weight)\n    if (financialData.roic !== null && financialData.roic !== undefined) {\n      const roic = parseFloat(financialData.roic);\n      // ROIC > 15% is excellent\n      const roicScore = Math.min(roic / 0.15, 1);\n      score += Math.max(roicScore, 0) * 0.20;\n      components++;\n    }\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 4) {\n    score = 0.5 + (score - 0.5) * (4 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateValueScore(basicInfo, financialData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (basicInfo) {\n    // P/E ratio (25% weight)\n    if (basicInfo.trailing_pe !== null && basicInfo.trailing_pe !== undefined) {\n      const pe = parseFloat(basicInfo.trailing_pe);\n      if (pe > 0 && pe < 100) { // Reasonable P/E range\n        // Lower P/E is better: P/E of 15 = score 1.0, P/E of 30+ = score 0\n        const peScore = Math.max(0, 1 - ((pe - 10) / 20));\n        score += peScore * 0.25;\n        components++;\n      }\n    }\n    \n    // P/B ratio (20% weight)\n    if (basicInfo.price_to_book !== null && basicInfo.price_to_book !== undefined) {\n      const pb = parseFloat(basicInfo.price_to_book);\n      if (pb > 0 && pb < 20) {\n        // P/B of 1.0 = perfect, higher is worse\n        const pbScore = Math.max(0, 1 - ((pb - 0.5) / 3));\n        score += pbScore * 0.20;\n        components++;\n      }\n    }\n  }\n  \n  if (financialData) {\n    // EV/EBITDA (20% weight)\n    if (financialData.ev_ebitda !== null && financialData.ev_ebitda !== undefined) {\n      const evEbitda = parseFloat(financialData.ev_ebitda);\n      if (evEbitda > 0 && evEbitda < 50) {\n        const evScore = Math.max(0, 1 - ((evEbitda - 8) / 15));\n        score += evScore * 0.20;\n        components++;\n      }\n    }\n    \n    // Price/Sales (15% weight)\n    if (financialData.price_to_sales !== null && financialData.price_to_sales !== undefined) {\n      const ps = parseFloat(financialData.price_to_sales);\n      if (ps > 0 && ps < 20) {\n        const psScore = Math.max(0, 1 - ((ps - 1) / 5));\n        score += psScore * 0.15;\n        components++;\n      }\n    }\n    \n    // Free Cash Flow Yield (10% weight)\n    if (financialData.fcf_yield !== null && financialData.fcf_yield !== undefined) {\n      const fcfYield = parseFloat(financialData.fcf_yield);\n      // Higher FCF yield is better\n      const fcfScore = Math.min(fcfYield / 0.08, 1); // 8% FCF yield = max score\n      score += Math.max(fcfScore, 0) * 0.10;\n      components++;\n    }\n    \n    // Dividend yield (10% weight)\n    if (basicInfo.dividend_yield !== null && basicInfo.dividend_yield !== undefined) {\n      const divYield = parseFloat(basicInfo.dividend_yield);\n      // Sweet spot 2-6%\n      const divScore = divYield >= 0.02 && divYield <= 0.06 ? 1.0 :\n                      divYield > 0.06 ? Math.max(0, 1 - (divYield - 0.06) / 0.04) :\n                      divYield / 0.02;\n      score += divScore * 0.10;\n      components++;\n    }\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 6) {\n    score = 0.5 + (score - 0.5) * (6 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateEnhancedMomentumScore(basicInfo, technicalData, momentumData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  // Use advanced momentum data if available\n  if (momentumData) {\n    // Jegadeesh-Titman 12-1 momentum (30% weight - academic standard)\n    if (momentumData.jt_momentum_12_1 !== null && momentumData.jt_momentum_12_1 !== undefined) {\n      const jtMomentum = parseFloat(momentumData.jt_momentum_12_1);\n      // Convert to 0-1 score, with 0.2 (20%) return = max score\n      const jtScore = Math.min(Math.max((jtMomentum + 0.2) / 0.4, 0), 1);\n      score += jtScore * 0.30;\n      components++;\n    }\n    \n    // Risk-adjusted momentum (20% weight)\n    if (momentumData.risk_adjusted_momentum !== null && momentumData.risk_adjusted_momentum !== undefined) {\n      const riskAdjMomentum = parseFloat(momentumData.risk_adjusted_momentum);\n      // Sharpe ratio style - normalize around 1.0\n      const riskAdjScore = Math.min(Math.max((riskAdjMomentum + 1) / 2, 0), 1);\n      score += riskAdjScore * 0.20;\n      components++;\n    }\n    \n    // Momentum persistence (15% weight)\n    if (momentumData.momentum_persistence !== null && momentumData.momentum_persistence !== undefined) {\n      const persistence = parseFloat(momentumData.momentum_persistence);\n      // Higher persistence is better (already 0-1 scale)\n      score += persistence * 0.15;\n      components++;\n    }\n    \n    // Volume-weighted momentum (15% weight)\n    if (momentumData.volume_weighted_momentum !== null && momentumData.volume_weighted_momentum !== undefined) {\n      const volMomentum = parseFloat(momentumData.volume_weighted_momentum);\n      const volMomentumScore = Math.min(Math.max((volMomentum + 0.1) / 0.2, 0), 1);\n      score += volMomentumScore * 0.15;\n      components++;\n    }\n    \n    // Earnings acceleration (10% weight)\n    if (momentumData.earnings_acceleration !== null && momentumData.earnings_acceleration !== undefined) {\n      const earnAccel = parseFloat(momentumData.earnings_acceleration);\n      const earnAccelScore = Math.min(Math.max((earnAccel + 0.1) / 0.2, 0), 1);\n      score += earnAccelScore * 0.10;\n      components++;\n    }\n    \n    // Momentum quality (10% weight)\n    if (momentumData.momentum_strength !== null && momentumData.momentum_strength !== undefined) {\n      const strength = parseFloat(momentumData.momentum_strength);\n      score += strength * 0.10;\n      components++;\n    }\n  }\n  \n  // Fallback to technical indicators if no momentum data\n  if (components === 0 && technicalData) {\n    return calculateMomentumScore(basicInfo, technicalData);\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 6) {\n    score = 0.5 + (score - 0.5) * (6 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\n// Keep original momentum function for fallback\nfunction calculateMomentumScore(basicInfo, technicalData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (technicalData) {\n    // RSI component (20% weight)\n    if (technicalData.rsi_14 !== null && technicalData.rsi_14 !== undefined) {\n      const rsi = parseFloat(technicalData.rsi_14);\n      // RSI 40-60 is neutral, 60-80 is positive momentum\n      const rsiScore = rsi >= 50 && rsi <= 70 ? 1.0 :\n                      rsi > 70 ? Math.max(0, 1 - (rsi - 70) / 20) :\n                      Math.max(0, rsi / 50);\n      score += rsiScore * 0.20;\n      components++;\n    }\n    \n    // MACD histogram (20% weight)\n    if (technicalData.macd_histogram !== null && technicalData.macd_histogram !== undefined) {\n      const macdHist = parseFloat(technicalData.macd_histogram);\n      // Positive MACD histogram indicates upward momentum\n      const macdScore = macdHist > 0 ? Math.min(1, macdHist * 100) : 0;\n      score += macdScore * 0.20;\n      components++;\n    }\n    \n    // Price vs SMA 20 (15% weight)\n    if (technicalData.price_vs_sma_20 !== null && technicalData.price_vs_sma_20 !== undefined) {\n      const priceVsSma = parseFloat(technicalData.price_vs_sma_20);\n      // Being above SMA is positive, but not too far above\n      const smaScore = priceVsSma > 0 ? Math.min(1, priceVsSma * 5) : 0;\n      score += smaScore * 0.15;\n      components++;\n    }\n    \n    // Volume ratio (15% weight)\n    if (technicalData.volume_ratio !== null && technicalData.volume_ratio !== undefined) {\n      const volRatio = parseFloat(technicalData.volume_ratio);\n      // Higher volume supports momentum\n      const volScore = volRatio > 1 ? Math.min(1, (volRatio - 1) * 2) : volRatio;\n      score += volScore * 0.15;\n      components++;\n    }\n    \n    // ADX (trend strength) (15% weight)\n    if (technicalData.adx_14 !== null && technicalData.adx_14 !== undefined) {\n      const adx = parseFloat(technicalData.adx_14);\n      // ADX > 25 indicates strong trend\n      const adxScore = adx > 25 ? Math.min(1, (adx - 25) / 50) : 0;\n      score += adxScore * 0.15;\n      components++;\n    }\n    \n    // Bollinger Band position (15% weight)\n    if (technicalData.bb_position !== null && technicalData.bb_position !== undefined) {\n      const bbPos = parseFloat(technicalData.bb_position);\n      // Position 0.5-0.8 is ideal momentum range\n      const bbScore = bbPos >= 0.5 && bbPos <= 0.8 ? 1.0 :\n                     bbPos > 0.8 ? Math.max(0, 1 - (bbPos - 0.8) * 5) :\n                     bbPos * 2;\n      score += bbScore * 0.15;\n      components++;\n    }\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 6) {\n    score = 0.5 + (score - 0.5) * (6 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateEnhancedSentimentScore(sentimentData, realtimeSentimentData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  // Use real-time sentiment data if available (higher priority)\n  if (realtimeSentimentData) {\n    // Composite sentiment from real-time data (35% weight)\n    if (realtimeSentimentData.composite_sentiment !== null && realtimeSentimentData.composite_sentiment !== undefined) {\n      const compositeSentiment = parseFloat(realtimeSentimentData.composite_sentiment);\n      const compositeScore = (compositeSentiment + 1) / 2; // Convert from -1,1 to 0,1\n      score += compositeScore * 0.35;\n      components++;\n    }\n    \n    // News sentiment with FinBERT (25% weight)\n    if (realtimeSentimentData.news_sentiment_score !== null && realtimeSentimentData.news_sentiment_score !== undefined) {\n      const newsSentiment = parseFloat(realtimeSentimentData.news_sentiment_score);\n      const newsScore = (newsSentiment + 1) / 2;\n      score += newsScore * 0.25;\n      components++;\n    }\n    \n    // Social media sentiment (20% weight)\n    if (realtimeSentimentData.social_sentiment_score !== null && realtimeSentimentData.social_sentiment_score !== undefined) {\n      const socialSentiment = parseFloat(realtimeSentimentData.social_sentiment_score);\n      const socialScore = (socialSentiment + 1) / 2;\n      score += socialScore * 0.20;\n      components++;\n    }\n    \n    // Analyst momentum (15% weight)\n    if (realtimeSentimentData.analyst_momentum !== null && realtimeSentimentData.analyst_momentum !== undefined) {\n      const analystMomentum = parseFloat(realtimeSentimentData.analyst_momentum);\n      const analystScore = (analystMomentum + 1) / 2;\n      score += analystScore * 0.15;\n      components++;\n    }\n    \n    // Viral score and volume (5% weight)\n    if (realtimeSentimentData.viral_score !== null && realtimeSentimentData.viral_score !== undefined) {\n      const viralScore = parseFloat(realtimeSentimentData.viral_score);\n      const viralNormalized = Math.min(viralScore / 10, 1); // Normalize viral score\n      score += viralNormalized * 0.05;\n      components++;\n    }\n  }\n  \n  // Fallback to legacy sentiment data if real-time not available\n  if (components === 0 && sentimentData) {\n    return calculateSentimentScore(sentimentData);\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 5) {\n    score = 0.5 + (score - 0.5) * (5 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\n// Keep original sentiment function for fallback\nfunction calculateSentimentScore(sentimentData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (sentimentData) {\n    // Analyst recommendations (30% weight)\n    if (sentimentData.total_analysts > 0) {\n      const buyRatio = (sentimentData.strong_buy_count + sentimentData.buy_count) / sentimentData.total_analysts;\n      score += buyRatio * 0.30;\n      components++;\n    }\n    \n    // Price target vs current (25% weight)\n    if (sentimentData.price_target_vs_current !== null && sentimentData.price_target_vs_current !== undefined) {\n      const targetUpside = parseFloat(sentimentData.price_target_vs_current);\n      // Positive upside is good, but cap at 50% upside for scoring\n      const targetScore = Math.min(Math.max(targetUpside, -0.2), 0.5) / 0.7 + 2/7; // Normalize to 0-1\n      score += targetScore * 0.25;\n      components++;\n    }\n    \n    // News sentiment (20% weight)\n    if (sentimentData.news_sentiment_score !== null && sentimentData.news_sentiment_score !== undefined) {\n      const newsSentiment = parseFloat(sentimentData.news_sentiment_score);\n      // Convert from -1,1 to 0,1 scale\n      const newsScore = (newsSentiment + 1) / 2;\n      score += newsScore * 0.20;\n      components++;\n    }\n    \n    // Reddit/Social sentiment (15% weight)\n    if (sentimentData.reddit_sentiment_score !== null && sentimentData.reddit_sentiment_score !== undefined) {\n      const socialSentiment = parseFloat(sentimentData.reddit_sentiment_score);\n      const socialScore = (socialSentiment + 1) / 2;\n      score += socialScore * 0.15;\n      components++;\n    }\n    \n    // Search interest trend (10% weight)\n    if (sentimentData.search_trend_30d !== null && sentimentData.search_trend_30d !== undefined) {\n      const searchTrend = parseFloat(sentimentData.search_trend_30d);\n      // Positive search trend indicates growing interest\n      const searchScore = Math.min(Math.max(searchTrend + 0.5, 0), 1);\n      score += searchScore * 0.10;\n      components++;\n    }\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 5) {\n    score = 0.5 + (score - 0.5) * (5 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculatePositioningScore(basicInfo, technicalData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  if (basicInfo) {\n    // Institutional ownership (25% weight)\n    if (basicInfo.held_percent_institutions !== null && basicInfo.held_percent_institutions !== undefined) {\n      const instOwnership = parseFloat(basicInfo.held_percent_institutions);\n      // Sweet spot 40-80%\n      const instScore = instOwnership >= 0.4 && instOwnership <= 0.8 ? 1.0 :\n                       instOwnership > 0.8 ? Math.max(0, 1 - (instOwnership - 0.8) * 5) :\n                       instOwnership / 0.4;\n      score += instScore * 0.25;\n      components++;\n    }\n    \n    // Short interest (20% weight)\n    if (basicInfo.short_percent_outstanding !== null && basicInfo.short_percent_outstanding !== undefined) {\n      const shortPercent = parseFloat(basicInfo.short_percent_outstanding);\n      // Lower short interest is generally better\n      const shortScore = Math.max(0, 1 - (shortPercent / 0.2)); // 20% short = score 0\n      score += shortScore * 0.20;\n      components++;\n    }\n  }\n  \n  if (technicalData) {\n    // Distance from 52-week high (20% weight)\n    if (technicalData.high_52w && technicalData.price) {\n      const distanceFromHigh = (parseFloat(technicalData.price) - parseFloat(technicalData.high_52w)) / parseFloat(technicalData.high_52w);\n      // Being near highs is positive positioning\n      const highScore = Math.max(0, 1 + distanceFromHigh * 2); // Within 50% of high = good score\n      score += Math.min(highScore, 1) * 0.20;\n      components++;\n    }\n    \n    // Price vs SMA 200 (20% weight)\n    if (technicalData.price_vs_sma_200 !== null && technicalData.price_vs_sma_200 !== undefined) {\n      const priceVsSma200 = parseFloat(technicalData.price_vs_sma_200);\n      // Being above long-term trend is good positioning\n      const sma200Score = priceVsSma200 > 0 ? Math.min(1, priceVsSma200 * 3) : 0;\n      score += sma200Score * 0.20;\n      components++;\n    }\n    \n    // Volatility positioning (15% weight)\n    if (technicalData.historical_volatility_20d !== null && technicalData.historical_volatility_20d !== undefined) {\n      const volatility = parseFloat(technicalData.historical_volatility_20d);\n      // Moderate volatility (15-25%) is ideal for positioning\n      const volScore = volatility >= 0.15 && volatility <= 0.25 ? 1.0 :\n                      volatility > 0.25 ? Math.max(0, 1 - (volatility - 0.25) * 4) :\n                      volatility / 0.15;\n      score += volScore * 0.15;\n      components++;\n    }\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 5) {\n    score = 0.5 + (score - 0.5) * (5 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateEnhancedPositioningScore(basicInfo, technicalData, positioningData) {\n  let score = 0.5; // Base score\n  let components = 0;\n  \n  // Use advanced positioning data if available\n  if (positioningData) {\n    // Institutional holdings analysis (25% weight)\n    if (positioningData.institutional_ownership_change !== null && positioningData.institutional_ownership_change !== undefined) {\n      const instChange = parseFloat(positioningData.institutional_ownership_change);\n      // Positive institutional change is good, normalize around 10% change\n      const instChangeScore = Math.min(Math.max((instChange + 0.1) / 0.2, 0), 1);\n      score += instChangeScore * 0.25;\n      components++;\n    }\n    \n    // Smart money positioning (20% weight)\n    if (positioningData.smart_money_score !== null && positioningData.smart_money_score !== undefined) {\n      const smartMoney = parseFloat(positioningData.smart_money_score);\n      // Smart money score should already be normalized 0-1\n      score += smartMoney * 0.20;\n      components++;\n    }\n    \n    // Insider trading sentiment (20% weight)\n    if (positioningData.insider_sentiment_score !== null && positioningData.insider_sentiment_score !== undefined) {\n      const insiderSentiment = parseFloat(positioningData.insider_sentiment_score);\n      // Convert from -1,1 to 0,1 scale\n      const insiderScore = (insiderSentiment + 1) / 2;\n      score += insiderScore * 0.20;\n      components++;\n    }\n    \n    // Options flow analysis (15% weight)\n    if (positioningData.unusual_options_activity !== null && positioningData.unusual_options_activity !== undefined) {\n      const optionsActivity = parseFloat(positioningData.unusual_options_activity);\n      // Higher unusual activity can indicate informed positioning\n      const optionsScore = Math.min(optionsActivity / 5.0, 1); // Normalize assuming max 5x normal\n      score += optionsScore * 0.15;\n      components++;\n    }\n    \n    // Short squeeze potential (10% weight)\n    if (positioningData.short_squeeze_potential !== null && positioningData.short_squeeze_potential !== undefined) {\n      const squeezePotential = parseFloat(positioningData.short_squeeze_potential);\n      // Already normalized 0-1 score\n      score += squeezePotential * 0.10;\n      components++;\n    }\n    \n    // Positioning momentum (10% weight)\n    if (positioningData.positioning_momentum !== null && positioningData.positioning_momentum !== undefined) {\n      const posMomentum = parseFloat(positioningData.positioning_momentum);\n      // Convert from -1,1 to 0,1 scale\n      const posMomentumScore = (posMomentum + 1) / 2;\n      score += posMomentumScore * 0.10;\n      components++;\n    }\n  }\n  \n  // Fallback to basic positioning data if no advanced data available\n  if (components === 0) {\n    return calculatePositioningScore(basicInfo, technicalData);\n  }\n  \n  // Normalize if fewer components\n  if (components > 0 && components < 6) {\n    score = 0.5 + (score - 0.5) * (6 / components);\n  }\n  \n  return Math.min(Math.max(score, 0), 1);\n}\n\nfunction calculateCompositeScore(scores) {\n  // Weighted composite score\n  const weights = {\n    quality: 0.25,    // Fundamental strength\n    growth: 0.20,     // Growth potential\n    value: 0.20,      // Valuation attractiveness\n    momentum: 0.15,   // Technical momentum\n    sentiment: 0.10,  // Market sentiment\n    positioning: 0.10 // Smart money positioning\n  };\n  \n  let compositeScore = 0;\n  let totalWeight = 0;\n  \n  Object.keys(weights).forEach(key => {\n    if (scores[key] !== null && scores[key] !== undefined && !isNaN(scores[key])) {\n      compositeScore += scores[key] * weights[key];\n      totalWeight += weights[key];\n    }\n  });\n  \n  // Normalize if we're missing some components\n  if (totalWeight > 0 && totalWeight < 1) {\n    compositeScore = compositeScore / totalWeight;\n  }\n  \n  return Math.min(Math.max(compositeScore, 0), 1);\n}\n\n// Data retrieval functions\nasync function getBasicInfo(symbol) {\n  try {\n    const result = await query(`\n      SELECT * FROM stock_symbols_enhanced \n      WHERE symbol = $1\n    `, [symbol]);\n    return result.length > 0 ? result[0] : null;\n  } catch (error) {\n    console.error(`Error getting basic info for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getFinancialMetrics(symbol) {\n  try {\n    // Get latest financial metrics from all tables\n    const [profitability, balanceSheet, valuation, growth] = await Promise.all([\n      query(`SELECT * FROM profitability_metrics WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol]),\n      query(`SELECT * FROM balance_sheet_metrics WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol]),\n      query(`SELECT * FROM valuation_metrics WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol]),\n      query(`SELECT * FROM growth_metrics WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol])\n    ]);\n    \n    // Combine all financial data\n    const combined = {};\n    if (profitability.length > 0) Object.assign(combined, profitability[0]);\n    if (balanceSheet.length > 0) Object.assign(combined, balanceSheet[0]);\n    if (valuation.length > 0) Object.assign(combined, valuation[0]);\n    if (growth.length > 0) Object.assign(combined, growth[0]);\n    \n    return Object.keys(combined).length > 0 ? combined : null;\n  } catch (error) {\n    console.error(`Error getting financial metrics for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getMomentumMetrics(symbol) {\n  try {\n    const result = await query(`\n      SELECT * FROM momentum_metrics \n      WHERE symbol = $1 \n      ORDER BY date DESC \n      LIMIT 1\n    `, [symbol]);\n    return result.length > 0 ? result[0] : null;\n  } catch (error) {\n    console.error(`Error getting momentum metrics for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getPositioningMetrics(symbol) {\n  try {\n    const result = await query(`\n      SELECT * FROM positioning_metrics \n      WHERE symbol = $1 \n      ORDER BY date DESC \n      LIMIT 1\n    `, [symbol]);\n    return result.length > 0 ? result[0] : null;\n  } catch (error) {\n    console.error(`Error getting positioning metrics for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getRealtimeSentimentData(symbol) {\n  try {\n    const result = await query(`\n      SELECT * FROM realtime_sentiment_analysis \n      WHERE symbol = $1 \n      ORDER BY date DESC \n      LIMIT 1\n    `, [symbol]);\n    return result.length > 0 ? result[0] : null;\n  } catch (error) {\n    console.error(`Error getting realtime sentiment for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getTechnicalIndicators(symbol) {\n  try {\n    const result = await query(`\n      SELECT * FROM technical_indicators \n      WHERE symbol = $1 \n      ORDER BY date DESC \n      LIMIT 1\n    `, [symbol]);\n    return result.length > 0 ? result[0] : null;\n  } catch (error) {\n    console.error(`Error getting technical indicators for ${symbol}:`, error);\n    return null;\n  }\n}\n\nasync function getSentimentData(symbol) {\n  try {\n    const [analyst, social] = await Promise.all([\n      query(`SELECT * FROM analyst_sentiment_analysis WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol]),\n      query(`SELECT * FROM social_sentiment_analysis WHERE symbol = $1 ORDER BY date DESC LIMIT 1`, [symbol])\n    ]);\n    \n    const combined = {};\n    if (analyst.length > 0) Object.assign(combined, analyst[0]);\n    if (social.length > 0) Object.assign(combined, social[0]);\n    \n    return Object.keys(combined).length > 0 ? combined : null;\n  } catch (error) {\n    console.error(`Error getting sentiment data for ${symbol}:`, error);\n    return null;\n  }\n}\n\nfunction assessDataQuality(basicInfo, financialData, technicalData, sentimentData, momentumData, positioningData, realtimeSentimentData) {\n  let qualityScore = 0;\n  let maxScore = 7;\n  \n  if (basicInfo) qualityScore += 1;\n  if (financialData && Object.keys(financialData).length > 5) qualityScore += 1;\n  if (technicalData && Object.keys(technicalData).length > 10) qualityScore += 1;\n  if (sentimentData && Object.keys(sentimentData).length > 3) qualityScore += 1;\n  if (momentumData && Object.keys(momentumData).length > 5) qualityScore += 1;\n  if (positioningData && Object.keys(positioningData).length > 5) qualityScore += 1;\n  if (realtimeSentimentData && Object.keys(realtimeSentimentData).length > 5) qualityScore += 1;\n  \n  return (qualityScore / maxScore) * 100;\n}\n\nasync function storeComprehensiveScores(symbol, scores) {\n  try {\n    await query(`\n      INSERT INTO comprehensive_scores (\n        symbol, quality_score, growth_score, value_score, momentum_score,\n        sentiment_score, positioning_score, composite_score, \n        calculation_date, data_quality, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW())\n      ON CONFLICT (symbol, calculation_date) DO UPDATE SET\n        quality_score = EXCLUDED.quality_score,\n        growth_score = EXCLUDED.growth_score,\n        value_score = EXCLUDED.value_score,\n        momentum_score = EXCLUDED.momentum_score,\n        sentiment_score = EXCLUDED.sentiment_score,\n        positioning_score = EXCLUDED.positioning_score,\n        composite_score = EXCLUDED.composite_score,\n        data_quality = EXCLUDED.data_quality,\n        updated_at = NOW()\n    `, [\n      symbol, scores.quality_score, scores.growth_score, scores.value_score,\n      scores.momentum_score, scores.sentiment_score, scores.positioning_score,\n      scores.composite_score, scores.calculation_date, scores.data_quality\n    ]);\n  } catch (error) {\n    console.error(`Error storing scores for ${symbol}:`, error);\n    throw error;\n  }\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}