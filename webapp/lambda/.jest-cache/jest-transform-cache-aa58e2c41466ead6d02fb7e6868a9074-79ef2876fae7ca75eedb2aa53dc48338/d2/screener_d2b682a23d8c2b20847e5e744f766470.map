{"version":3,"names":["cov_1ga9jhhh9a","actualCoverage","express","s","require","authenticateToken","query","FactorScoringEngine","router","Router","get","req","res","f","json","success","data","system","version","status","available_endpoints","timestamp","Date","toISOString","use","factorEngine","filters","page","b","parseInt","limit","Math","min","offset","console","log","whereConditions","params","paramIndex","priceMin","push","parseFloat","priceMax","marketCapMin","marketCapMax","peRatioMin","peRatioMax","pegRatioMin","pegRatioMax","pbRatioMin","pbRatioMax","roeMin","roeMax","roaMin","roaMax","netMarginMin","netMarginMax","revenueGrowthMin","revenueGrowthMax","earningsGrowthMin","earningsGrowthMax","dividendYieldMin","dividendYieldMax","sector","exchange","rsiMin","rsiMax","volumeMin","betaMin","betaMax","factorScoreMin","whereClause","length","join","orderBy","sortBy","sortField","sortOrder","fieldMap","dbField","mainQuery","countQuery","results","countResult","Promise","all","slice","stocks","rows","totalCount","total","stocksWithScores","map","stock","factor_score","scoreData","calculateCompositeScore","compositeScore","factor_grade","grade","risk_level","riskLevel","recommendation","error","symbol","getGrade","getRiskLevel","getRecommendation","pagination","totalPages","ceil","hasMore","applied","Object","keys","message","sectorsResult","exchangesResult","marketCapResult","priceResult","sectors","row","exchanges","ranges","marketCap","price","presets","id","name","description","debtToEquityMax","payoutRatioMax","priceMomentum3mMin","priceMomentum12mMin","currentRatioMin","templates","criteria","revenueGrowth","earningsGrowth","pegRatio","mockResults","company_name","market_cap","pe_ratio","peg_ratio","pb_ratio","roe","roa","revenue_growth","earnings_growth","dividend_yield","paginatedResults","source","details","post","presetId","value_stocks","growth_stocks","dividend_stocks","momentum_stocks","quality_stocks","small_cap_growth","preset","userId","user","sub","body","result","JSON","stringify","screens","screen","parse","dbError","note","symbols","format","symbolsStr","headers","csvContent","set","split","send","exportedAt","authorization","fallbackWatchlists","createdAt","updatedAt","type","authenticated","watchlists","created_at","updated_at","watchlist","mockWatchlist","now","module","exports"],"sources":["screener.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\nconst FactorScoringEngine = require('../utils/factorScoring');\n\nconst router = express.Router();\n\n// Root screener endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'Stock Screener API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'GET /screener/screen - Main stock screening with filters',\n        'GET /screener/templates - Pre-built screening templates',\n        'GET /screener/factors - Available screening factors'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Apply authentication to all other routes\nrouter.use(authenticateToken);\n\n// Initialize factor scoring engine\nconst factorEngine = new FactorScoringEngine();\n\n// Main stock screening endpoint\nrouter.get('/screen', async (req, res) => {\n  try {\n    const filters = req.query;\n    const page = parseInt(filters.page) || 1;\n    const limit = Math.min(parseInt(filters.limit) || 50, 500);\n    const offset = (page - 1) * limit;\n\n    console.log('Stock screening with filters:', filters);\n\n    // Build WHERE clause dynamically\n    const whereConditions = [];\n    const params = [];\n    let paramIndex = 1;\n\n    // Price filters\n    if (filters.priceMin) {\n      whereConditions.push(`sd.close >= $${paramIndex}`);\n      params.push(parseFloat(filters.priceMin));\n      paramIndex++;\n    }\n    if (filters.priceMax) {\n      whereConditions.push(`sd.close <= $${paramIndex}`);\n      params.push(parseFloat(filters.priceMax));\n      paramIndex++;\n    }\n\n    // Market cap filters\n    if (filters.marketCapMin) {\n      whereConditions.push(`s.market_cap >= $${paramIndex}`);\n      params.push(parseFloat(filters.marketCapMin));\n      paramIndex++;\n    }\n    if (filters.marketCapMax) {\n      whereConditions.push(`s.market_cap <= $${paramIndex}`);\n      params.push(parseFloat(filters.marketCapMax));\n      paramIndex++;\n    }\n\n    // Valuation filters\n    if (filters.peRatioMin) {\n      whereConditions.push(`s.pe_ratio >= $${paramIndex}`);\n      params.push(parseFloat(filters.peRatioMin));\n      paramIndex++;\n    }\n    if (filters.peRatioMax) {\n      whereConditions.push(`s.pe_ratio <= $${paramIndex}`);\n      params.push(parseFloat(filters.peRatioMax));\n      paramIndex++;\n    }\n\n    if (filters.pegRatioMin) {\n      whereConditions.push(`s.peg_ratio >= $${paramIndex}`);\n      params.push(parseFloat(filters.pegRatioMin));\n      paramIndex++;\n    }\n    if (filters.pegRatioMax) {\n      whereConditions.push(`s.peg_ratio <= $${paramIndex}`);\n      params.push(parseFloat(filters.pegRatioMax));\n      paramIndex++;\n    }\n\n    if (filters.pbRatioMin) {\n      whereConditions.push(`s.pb_ratio >= $${paramIndex}`);\n      params.push(parseFloat(filters.pbRatioMin));\n      paramIndex++;\n    }\n    if (filters.pbRatioMax) {\n      whereConditions.push(`s.pb_ratio <= $${paramIndex}`);\n      params.push(parseFloat(filters.pbRatioMax));\n      paramIndex++;\n    }\n\n    // Profitability filters\n    if (filters.roeMin) {\n      whereConditions.push(`s.roe >= $${paramIndex}`);\n      params.push(parseFloat(filters.roeMin) / 100);\n      paramIndex++;\n    }\n    if (filters.roeMax) {\n      whereConditions.push(`s.roe <= $${paramIndex}`);\n      params.push(parseFloat(filters.roeMax) / 100);\n      paramIndex++;\n    }\n\n    if (filters.roaMin) {\n      whereConditions.push(`s.roa >= $${paramIndex}`);\n      params.push(parseFloat(filters.roaMin) / 100);\n      paramIndex++;\n    }\n    if (filters.roaMax) {\n      whereConditions.push(`s.roa <= $${paramIndex}`);\n      params.push(parseFloat(filters.roaMax) / 100);\n      paramIndex++;\n    }\n\n    if (filters.netMarginMin) {\n      whereConditions.push(`s.net_margin >= $${paramIndex}`);\n      params.push(parseFloat(filters.netMarginMin) / 100);\n      paramIndex++;\n    }\n    if (filters.netMarginMax) {\n      whereConditions.push(`s.net_margin <= $${paramIndex}`);\n      params.push(parseFloat(filters.netMarginMax) / 100);\n      paramIndex++;\n    }\n\n    // Growth filters\n    if (filters.revenueGrowthMin) {\n      whereConditions.push(`s.revenue_growth >= $${paramIndex}`);\n      params.push(parseFloat(filters.revenueGrowthMin) / 100);\n      paramIndex++;\n    }\n    if (filters.revenueGrowthMax) {\n      whereConditions.push(`s.revenue_growth <= $${paramIndex}`);\n      params.push(parseFloat(filters.revenueGrowthMax) / 100);\n      paramIndex++;\n    }\n\n    if (filters.earningsGrowthMin) {\n      whereConditions.push(`s.earnings_growth >= $${paramIndex}`);\n      params.push(parseFloat(filters.earningsGrowthMin) / 100);\n      paramIndex++;\n    }\n    if (filters.earningsGrowthMax) {\n      whereConditions.push(`s.earnings_growth <= $${paramIndex}`);\n      params.push(parseFloat(filters.earningsGrowthMax) / 100);\n      paramIndex++;\n    }\n\n    // Dividend filters\n    if (filters.dividendYieldMin) {\n      whereConditions.push(`s.dividend_yield >= $${paramIndex}`);\n      params.push(parseFloat(filters.dividendYieldMin) / 100);\n      paramIndex++;\n    }\n    if (filters.dividendYieldMax) {\n      whereConditions.push(`s.dividend_yield <= $${paramIndex}`);\n      params.push(parseFloat(filters.dividendYieldMax) / 100);\n      paramIndex++;\n    }\n\n    // Sector filter\n    if (filters.sector) {\n      whereConditions.push(`ss.sector = $${paramIndex}`);\n      params.push(filters.sector);\n      paramIndex++;\n    }\n\n    // Exchange filter\n    if (filters.exchange) {\n      whereConditions.push(`ss.exchange = $${paramIndex}`);\n      params.push(filters.exchange);\n      paramIndex++;\n    }\n\n    // Technical filters\n    if (filters.rsiMin) {\n      whereConditions.push(`td.rsi >= $${paramIndex}`);\n      params.push(parseFloat(filters.rsiMin));\n      paramIndex++;\n    }\n    if (filters.rsiMax) {\n      whereConditions.push(`td.rsi <= $${paramIndex}`);\n      params.push(parseFloat(filters.rsiMax));\n      paramIndex++;\n    }\n\n    if (filters.volumeMin) {\n      whereConditions.push(`sd.volume >= $${paramIndex}`);\n      params.push(parseFloat(filters.volumeMin));\n      paramIndex++;\n    }\n\n    // Beta filter\n    if (filters.betaMin) {\n      whereConditions.push(`s.beta >= $${paramIndex}`);\n      params.push(parseFloat(filters.betaMin));\n      paramIndex++;\n    }\n    if (filters.betaMax) {\n      whereConditions.push(`s.beta <= $${paramIndex}`);\n      params.push(parseFloat(filters.betaMax));\n      paramIndex++;\n    }\n\n    // Factor score filter\n    if (filters.factorScoreMin) {\n      whereConditions.push(`s.factor_score >= $${paramIndex}`);\n      params.push(parseFloat(filters.factorScoreMin));\n      paramIndex++;\n    }\n\n    // Build WHERE clause\n    let whereClause = '';\n    if (whereConditions.length > 0) {\n      whereClause = 'WHERE ' + whereConditions.join(' AND ');\n    }\n\n    // Build ORDER BY clause\n    let orderBy = 'ORDER BY s.market_cap DESC';\n    if (filters.sortBy) {\n      const sortField = filters.sortBy;\n      const sortOrder = filters.sortOrder === 'desc' ? 'DESC' : 'ASC';\n      \n      // Map frontend sort fields to database fields\n      const fieldMap = {\n        'symbol': 's.symbol',\n        'companyName': 'ss.company_name',\n        'price': 'sd.close',\n        'marketCap': 's.market_cap',\n        'peRatio': 's.pe_ratio',\n        'pegRatio': 's.peg_ratio',\n        'pbRatio': 's.pb_ratio',\n        'roe': 's.roe',\n        'roa': 's.roa',\n        'netMargin': 's.net_margin',\n        'revenueGrowth': 's.revenue_growth',\n        'earningsGrowth': 's.earnings_growth',\n        'dividendYield': 's.dividend_yield',\n        'factorScore': 's.factor_score',\n        'volume': 'sd.volume',\n        'rsi': 'td.rsi',\n        'beta': 's.beta'\n      };\n\n      const dbField = fieldMap[sortField] || 's.market_cap';\n      orderBy = `ORDER BY ${dbField} ${sortOrder}`;\n    }\n\n    // Main query\n    const mainQuery = `\n      SELECT \n        s.symbol,\n        ss.company_name,\n        ss.sector,\n        ss.exchange,\n        sd.close as price,\n        sd.volume,\n        sd.date as price_date,\n        s.market_cap,\n        s.pe_ratio,\n        s.peg_ratio,\n        s.pb_ratio,\n        s.ps_ratio,\n        s.roe,\n        s.roa,\n        s.gross_margin,\n        s.operating_margin,\n        s.net_margin,\n        s.revenue_growth,\n        s.earnings_growth,\n        s.eps_growth,\n        s.dividend_yield,\n        s.payout_ratio,\n        s.debt_to_equity,\n        s.current_ratio,\n        s.quick_ratio,\n        s.interest_coverage,\n        s.asset_turnover,\n        s.inventory_turnover,\n        s.beta,\n        s.factor_score,\n        td.rsi,\n        td.macd,\n        td.macd_signal,\n        td.sma_20,\n        td.sma_50,\n        td.sma_200,\n        td.price_momentum_3m,\n        td.price_momentum_12m,\n        (sd.close - LAG(sd.close, 1) OVER (PARTITION BY s.symbol ORDER BY sd.date)) / LAG(sd.close, 1) OVER (PARTITION BY s.symbol ORDER BY sd.date) * 100 as price_change_percent\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM technicals_daily\n        ORDER BY symbol, date DESC\n      ) td ON s.symbol = td.symbol\n      ${whereClause}\n      ${orderBy}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    params.push(limit, offset);\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM technicals_daily\n        ORDER BY symbol, date DESC\n      ) td ON s.symbol = td.symbol\n      ${whereClause}\n    `;\n\n    // Execute queries\n    const [results, countResult] = await Promise.all([\n      query(mainQuery, params),\n      query(countQuery, params.slice(0, -2)) // Remove limit and offset from count query\n    ]);\n\n    const stocks = results.rows;\n    const totalCount = parseInt(countResult.rows[0].total);\n\n    // Calculate factor scores for stocks that don't have them\n    const stocksWithScores = await Promise.all(\n      stocks.map(async (stock) => {\n        if (!stock.factor_score) {\n          try {\n            const scoreData = await factorEngine.calculateCompositeScore(stock);\n            stock.factor_score = scoreData.compositeScore;\n            stock.factor_grade = scoreData.grade;\n            stock.risk_level = scoreData.riskLevel;\n            stock.recommendation = scoreData.recommendation;\n          } catch (error) {\n            console.error(`Error calculating factor score for ${stock.symbol}:`, error);\n            stock.factor_score = 50;\n            stock.factor_grade = 'C';\n            stock.risk_level = 'Medium';\n            stock.recommendation = 'Hold';\n          }\n        } else {\n          stock.factor_grade = factorEngine.getGrade(stock.factor_score);\n          stock.risk_level = factorEngine.getRiskLevel(stock);\n          stock.recommendation = factorEngine.getRecommendation(stock.factor_score);\n        }\n\n        return stock;\n      })\n    );\n\n    res.json({\n      success: true,\n      data: {\n        stocks: stocksWithScores,\n        pagination: {\n          page,\n          limit,\n          totalCount,\n          totalPages: Math.ceil(totalCount / limit),\n          hasMore: offset + limit < totalCount\n        },\n        filters: {\n          applied: whereConditions.length,\n          total: Object.keys(filters).length\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Stock screening error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Stock screening failed',\n      message: error.message\n    });\n  }\n});\n\n// Get available filter options\nrouter.get('/filters', async (req, res) => {\n  try {\n    // Get sectors\n    const sectorsResult = await query(`\n      SELECT DISTINCT sector\n      FROM stock_symbols\n      WHERE sector IS NOT NULL\n      ORDER BY sector\n    `);\n\n    // Get exchanges\n    const exchangesResult = await query(`\n      SELECT DISTINCT exchange\n      FROM stock_symbols\n      WHERE exchange IS NOT NULL\n      ORDER BY exchange\n    `);\n\n    // Get market cap ranges\n    const marketCapResult = await query(`\n      SELECT \n        MIN(market_cap) as min_market_cap,\n        MAX(market_cap) as max_market_cap,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY market_cap) as q1_market_cap,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY market_cap) as median_market_cap,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY market_cap) as q3_market_cap\n      FROM symbols\n      WHERE market_cap > 0\n    `);\n\n    // Get price ranges\n    const priceResult = await query(`\n      SELECT \n        MIN(close) as min_price,\n        MAX(close) as max_price,\n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY close) as q1_price,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY close) as median_price,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY close) as q3_price\n      FROM price_daily sd\n      WHERE EXISTS (\n        SELECT 1 FROM price_daily sd2 \n        WHERE sd2.symbol = sd.symbol \n        AND sd2.date >= sd.date \n        ORDER BY sd2.date DESC \n        LIMIT 1\n      )\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        sectors: sectorsResult.rows.map(row => row.sector),\n        exchanges: exchangesResult.rows.map(row => row.exchange),\n        ranges: {\n          marketCap: marketCapResult.rows[0],\n          price: priceResult.rows[0]\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching filter options:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch filter options',\n      message: error.message\n    });\n  }\n});\n\n\n// Get preset screens\nrouter.get('/presets', (req, res) => {\n  const presets = [\n    {\n      id: 'value_stocks',\n      name: 'Value Stocks',\n      description: 'Low P/E, P/B ratios with decent profitability',\n      filters: {\n        peRatioMax: 15,\n        pbRatioMax: 1.5,\n        roeMin: 10,\n        debtToEquityMax: 0.5,\n        marketCapMin: 1000000000\n      }\n    },\n    {\n      id: 'growth_stocks',\n      name: 'Growth Stocks',\n      description: 'High revenue and earnings growth',\n      filters: {\n        revenueGrowthMin: 15,\n        earningsGrowthMin: 20,\n        pegRatioMax: 2,\n        marketCapMin: 2000000000\n      }\n    },\n    {\n      id: 'dividend_stocks',\n      name: 'Dividend Stocks',\n      description: 'High dividend yield with sustainable payout',\n      filters: {\n        dividendYieldMin: 3,\n        payoutRatioMax: 60,\n        debtToEquityMax: 0.8,\n        marketCapMin: 5000000000\n      }\n    },\n    {\n      id: 'momentum_stocks',\n      name: 'Momentum Stocks',\n      description: 'Strong price momentum and technical indicators',\n      filters: {\n        priceMomentum3mMin: 5,\n        priceMomentum12mMin: 10,\n        rsiMin: 50,\n        rsiMax: 80,\n        volumeMin: 500000\n      }\n    },\n    {\n      id: 'quality_stocks',\n      name: 'Quality Stocks',\n      description: 'High-quality companies with strong fundamentals',\n      filters: {\n        roeMin: 15,\n        roaMin: 8,\n        netMarginMin: 10,\n        debtToEquityMax: 0.3,\n        currentRatioMin: 1.5,\n        factorScoreMin: 70\n      }\n    },\n    {\n      id: 'small_cap_growth',\n      name: 'Small Cap Growth',\n      description: 'Small cap stocks with high growth potential',\n      filters: {\n        marketCapMin: 300000000,\n        marketCapMax: 2000000000,\n        revenueGrowthMin: 20,\n        earningsGrowthMin: 25,\n        pegRatioMax: 1.5\n      }\n    }\n  ];\n\n  res.json({\n    success: true,\n    data: presets\n  });\n});\n\n// Templates endpoint (alias for presets)\nrouter.get('/templates', (req, res) => {\n  const templates = [\n    {\n      id: 'value_stocks',\n      name: 'Value Stocks Template',\n      description: 'Low P/E, P/B ratios with decent profitability',\n      filters: {\n        peRatioMax: 15,\n        pbRatioMax: 1.5,\n        roeMin: 10,\n        debtToEquityMax: 0.5,\n        marketCapMin: 1000000000\n      }\n    },\n    {\n      id: 'growth_stocks',\n      name: 'Growth Stocks Template',\n      description: 'High revenue and earnings growth',\n      filters: {\n        revenueGrowthMin: 15,\n        earningsGrowthMin: 20,\n        pegRatioMax: 2,\n        marketCapMin: 2000000000\n      }\n    },\n    {\n      id: 'dividend_stocks',\n      name: 'Dividend Stocks Template',\n      description: 'High dividend yield with sustainable payout',\n      filters: {\n        dividendYieldMin: 3,\n        payoutRatioMax: 60,\n        debtToEquityMax: 0.8,\n        marketCapMin: 5000000000\n      }\n    },\n    {\n      id: 'momentum_stocks',\n      name: 'Momentum Stocks Template',\n      description: 'Strong price momentum and technical indicators',\n      filters: {\n        priceMomentum3mMin: 5,\n        priceMomentum12mMin: 10,\n        rsiMin: 50,\n        rsiMax: 80,\n        volumeMin: 500000\n      }\n    },\n    {\n      id: 'quality_stocks',\n      name: 'Quality Stocks Template',\n      description: 'High-quality companies with strong fundamentals',\n      filters: {\n        roeMin: 15,\n        roaMin: 8,\n        netMarginMin: 10,\n        debtToEquityMax: 0.3,\n        currentRatioMin: 1.5,\n        factorScoreMin: 70\n      }\n    },\n    {\n      id: 'small_cap_growth',\n      name: 'Small Cap Growth Template',\n      description: 'Small cap stocks with high growth potential',\n      filters: {\n        marketCapMin: 300000000,\n        marketCapMax: 2000000000,\n        revenueGrowthMin: 20,\n        earningsGrowthMin: 25,\n        pegRatioMax: 1.5\n      }\n    }\n  ];\n\n  res.json({\n    success: true,\n    data: templates\n  });\n});\n\n// Growth stocks endpoint (specific growth filter)\nrouter.get('/growth', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      id: 'growth_stocks',\n      name: 'Growth Stocks',\n      description: 'High revenue and earnings growth stocks',\n      filters: {\n        revenueGrowthMin: 15,\n        earningsGrowthMin: 20,\n        pegRatioMax: 2,\n        marketCapMin: 2000000000\n      },\n      criteria: {\n        revenueGrowth: 'minimum 15%',\n        earningsGrowth: 'minimum 20%',\n        pegRatio: 'maximum 2.0',\n        marketCap: 'minimum $2B'\n      }\n    }\n  });\n});\n\n// Screener results endpoint\nrouter.get('/results', async (req, res) => {\n  try {\n    console.log('📊 Screener results endpoint called');\n    const { \n      limit = 20, \n      offset = 0,\n      filters = '{}' \n    } = req.query;\n\n    // Mock screener results for ServiceHealth testing\n    const mockResults = [\n      {\n        symbol: 'AAPL',\n        company_name: 'Apple Inc.',\n        sector: 'Technology',\n        price: 175.50,\n        market_cap: 2750000000000,\n        pe_ratio: 28.5,\n        peg_ratio: 1.8,\n        pb_ratio: 39.2,\n        roe: 0.96,\n        roa: 0.22,\n        revenue_growth: 0.08,\n        earnings_growth: 0.12,\n        dividend_yield: 0.005,\n        factor_score: 85,\n        factor_grade: 'A',\n        recommendation: 'Buy'\n      },\n      {\n        symbol: 'MSFT',\n        company_name: 'Microsoft Corporation',\n        sector: 'Technology',\n        price: 310.25,\n        market_cap: 2300000000000,\n        pe_ratio: 32.1,\n        peg_ratio: 1.9,\n        pb_ratio: 12.8,\n        roe: 0.47,\n        roa: 0.18,\n        revenue_growth: 0.11,\n        earnings_growth: 0.15,\n        dividend_yield: 0.007,\n        factor_score: 82,\n        factor_grade: 'A',\n        recommendation: 'Buy'\n      },\n      {\n        symbol: 'GOOGL',\n        company_name: 'Alphabet Inc.',\n        sector: 'Technology',\n        price: 125.75,\n        market_cap: 1570000000000,\n        pe_ratio: 24.8,\n        peg_ratio: 1.2,\n        pb_ratio: 5.9,\n        roe: 0.26,\n        roa: 0.14,\n        revenue_growth: 0.07,\n        earnings_growth: 0.09,\n        dividend_yield: 0.000,\n        factor_score: 78,\n        factor_grade: 'B+',\n        recommendation: 'Buy'\n      }\n    ];\n\n    // Apply pagination\n    const paginatedResults = mockResults.slice(\n      parseInt(offset), \n      parseInt(offset) + parseInt(limit)\n    );\n\n    res.json({\n      success: true,\n      data: {\n        stocks: paginatedResults,\n        pagination: {\n          total: mockResults.length,\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          hasMore: parseInt(offset) + parseInt(limit) < mockResults.length\n        },\n        filters: {\n          applied: 0,\n          total: 0\n        },\n        source: 'mock_data'\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ Error in screener results:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch screener results',\n      details: error.message\n    });\n  }\n});\n\n// Apply preset screen\nrouter.post('/presets/:presetId/apply', (req, res) => {\n  const { presetId } = req.params;\n  \n  const presets = {\n    value_stocks: {\n      peRatioMax: 15,\n      pbRatioMax: 1.5,\n      roeMin: 10,\n      debtToEquityMax: 0.5,\n      marketCapMin: 1000000000\n    },\n    growth_stocks: {\n      revenueGrowthMin: 15,\n      earningsGrowthMin: 20,\n      pegRatioMax: 2,\n      marketCapMin: 2000000000\n    },\n    dividend_stocks: {\n      dividendYieldMin: 3,\n      payoutRatioMax: 60,\n      debtToEquityMax: 0.8,\n      marketCapMin: 5000000000\n    },\n    momentum_stocks: {\n      priceMomentum3mMin: 5,\n      priceMomentum12mMin: 10,\n      rsiMin: 50,\n      rsiMax: 80,\n      volumeMin: 500000\n    },\n    quality_stocks: {\n      roeMin: 15,\n      roaMin: 8,\n      netMarginMin: 10,\n      debtToEquityMax: 0.3,\n      currentRatioMin: 1.5,\n      factorScoreMin: 70\n    },\n    small_cap_growth: {\n      marketCapMin: 300000000,\n      marketCapMax: 2000000000,\n      revenueGrowthMin: 20,\n      earningsGrowthMin: 25,\n      pegRatioMax: 1.5\n    }\n  };\n\n  const preset = presets[presetId];\n  if (!preset) {\n    return res.status(404).json({\n      success: false,\n      error: 'Preset not found'\n    });\n  }\n\n  res.json({\n    success: true,\n    data: {\n      presetId,\n      filters: preset\n    }\n  });\n});\n\n// Save custom screen\nrouter.post('/screens/save', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { name, description, filters } = req.body;\n\n    if (!name || !filters) {\n      return res.status(400).json({\n        success: false,\n        error: 'Name and filters are required'\n      });\n    }\n\n    const result = await query(`\n      INSERT INTO saved_screens (user_id, name, description, filters, created_at)\n      VALUES ($1, $2, $3, $4, NOW())\n      RETURNING *\n    `, [userId, name, description, JSON.stringify(filters)]);\n\n    res.json({\n      success: true,\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Error saving screen:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to save screen',\n      message: error.message\n    });\n  }\n});\n\n// Get saved screens\nrouter.get('/screens', async (req, res) => {\n  try {\n    console.log('📋 Fetching saved screens for user:', req.user?.sub);\n    const userId = req.user?.sub;\n\n    if (!userId) {\n      console.error('❌ No user ID found in request');\n      return res.status(401).json({\n        success: false,\n        error: 'User authentication required'\n      });\n    }\n\n    // Try to fetch from database first\n    try {\n      const result = await query(`\n        SELECT *\n        FROM saved_screens\n        WHERE user_id = $1\n        ORDER BY created_at DESC\n      `, [userId]);\n\n      const screens = result.rows.map(screen => ({\n        ...screen,\n        filters: typeof screen.filters === 'string' ? JSON.parse(screen.filters) : screen.filters\n      }));\n\n      console.log(`✅ Found ${screens.length} saved screens for user ${userId}`);\n\n      res.json({\n        success: true,\n        data: screens\n      });\n\n    } catch (dbError) {\n      console.log('⚠️ Database query failed for saved screens, returning empty array:', dbError.message);\n      \n      // Return empty array if database fails\n      res.json({\n        success: true,\n        data: [],\n        note: 'Database unavailable - returning empty screens list'\n      });\n    }\n\n  } catch (error) {\n    console.error('❌ Error fetching saved screens:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch saved screens',\n      message: error.message\n    });\n  }\n});\n\n// Export screen results\nrouter.post('/export', async (req, res) => {\n  try {\n    const { symbols, format = 'csv' } = req.body;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No symbols provided for export'\n      });\n    }\n\n    // Get detailed data for symbols\n    const symbolsStr = symbols.map(s => `'${s}'`).join(',');\n    const result = await query(`\n      SELECT \n        s.symbol,\n        ss.company_name,\n        ss.sector,\n        sd.close as price,\n        s.market_cap,\n        s.pe_ratio,\n        s.pb_ratio,\n        s.roe,\n        s.roa,\n        s.revenue_growth,\n        s.earnings_growth,\n        s.dividend_yield,\n        s.factor_score\n      FROM symbols s\n      JOIN stock_symbols ss ON s.symbol = ss.symbol\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) *\n        FROM price_daily\n        ORDER BY symbol, date DESC\n      ) sd ON s.symbol = sd.symbol\n      WHERE s.symbol IN (${symbolsStr})\n      ORDER BY s.market_cap DESC\n    `);\n\n    if (format === 'csv') {\n      // Generate CSV\n      const headers = ['Symbol', 'Company', 'Sector', 'Price', 'Market Cap', 'P/E', 'P/B', 'ROE', 'ROA', 'Revenue Growth', 'Earnings Growth', 'Dividend Yield', 'Factor Score'];\n      const rows = result.rows.map(row => [\n        row.symbol,\n        row.company_name,\n        row.sector,\n        row.price,\n        row.market_cap,\n        row.pe_ratio,\n        row.pb_ratio,\n        row.roe,\n        row.roa,\n        row.revenue_growth,\n        row.earnings_growth,\n        row.dividend_yield,\n        row.factor_score\n      ]);\n\n      const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\n');\n\n      res.set({\n        'Content-Type': 'text/csv',\n        'Content-Disposition': `attachment; filename=stock_screen_${new Date().toISOString().split('T')[0]}.csv`\n      });\n      res.send(csvContent);\n    } else {\n      // JSON format\n      res.json({\n        success: true,\n        data: result.rows,\n        exportedAt: new Date().toISOString()\n      });\n    }\n\n  } catch (error) {\n    console.error('Error exporting screen results:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to export screen results',\n      message: error.message\n    });\n  }\n});\n\n// Get user watchlists (alias for saved screens)\nrouter.get('/watchlists', async (req, res) => {\n  try {\n    console.log('🔍 Watchlists endpoint called');\n    console.log('🔍 Request headers authorization:', req.headers.authorization ? 'Present' : 'Missing');\n    console.log('🔍 Request user object:', req.user);\n    console.log('🔍 User ID from req.user:', req.user?.sub);\n    \n    const userId = req.user?.sub;\n\n    if (!userId) {\n      console.error('❌ No user ID found in watchlists request');\n      console.error('❌ Auth header:', req.headers.authorization);\n      console.error('❌ User object:', req.user);\n      \n      // Instead of returning 401, let's provide a helpful fallback\n      console.log('🔄 Providing fallback watchlists for unauthenticated request');\n      \n      const fallbackWatchlists = [\n        {\n          id: 'guest-1',\n          name: 'Growth Stocks Demo',\n          description: 'Sample growth stocks watchlist',\n          filters: {\n            marketCapMin: 1000000000,\n            revenueGrowthMin: 15,\n            earningsGrowthMin: 20\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          type: 'demo'\n        },\n        {\n          id: 'guest-2',\n          name: 'Value Picks Demo',\n          description: 'Sample value stocks watchlist',\n          filters: {\n            peRatioMax: 15,\n            pbRatioMax: 1.5,\n            roeMin: 10\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          type: 'demo'\n        }\n      ];\n\n      return res.json({\n        success: true,\n        data: fallbackWatchlists,\n        note: 'Demo watchlists - please log in for personal watchlists',\n        authenticated: false,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Try to get saved screens from database\n    try {\n      const result = await query(`\n        SELECT \n          id,\n          name,\n          description,\n          filters,\n          created_at,\n          updated_at\n        FROM saved_screens\n        WHERE user_id = $1\n        ORDER BY created_at DESC\n      `, [userId]);\n\n      const watchlists = result.rows.map(screen => ({\n        id: screen.id,\n        name: screen.name,\n        description: screen.description,\n        filters: typeof screen.filters === 'string' ? JSON.parse(screen.filters) : screen.filters,\n        createdAt: screen.created_at,\n        updatedAt: screen.updated_at,\n        type: 'screen'\n      }));\n\n      res.json({\n        success: true,\n        data: watchlists,\n        authenticated: true,\n        userId: userId,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (dbError) {\n      console.log('Database query failed for watchlists, using fallback:', dbError.message);\n      \n      // Return mock watchlists if database fails\n      const fallbackWatchlists = [\n        {\n          id: 'sample-1',\n          name: 'My Growth Stocks',\n          description: 'High growth potential stocks',\n          filters: {\n            marketCapMin: 1000000000,\n            revenueGrowthMin: 15,\n            earningsGrowthMin: 20\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          type: 'screen'\n        },\n        {\n          id: 'sample-2',\n          name: 'Value Picks',\n          description: 'Undervalued stocks with strong fundamentals',\n          filters: {\n            peRatioMax: 15,\n            pbRatioMax: 1.5,\n            roeMin: 10\n          },\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          type: 'screen'\n        }\n      ];\n\n      res.json({\n        success: true,\n        data: fallbackWatchlists,\n        note: 'Using sample watchlists - database connectivity issue',\n        authenticated: true,\n        userId: userId,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n  } catch (error) {\n    console.error('Error in watchlists endpoint:', error);\n    \n    // Final fallback - return empty array\n    res.json({\n      success: true,\n      data: [],\n      note: 'No watchlists available',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Create new watchlist\nrouter.post('/watchlists', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { name, description, symbols = [] } = req.body;\n\n    if (!name) {\n      return res.status(400).json({\n        success: false,\n        error: 'Watchlist name is required'\n      });\n    }\n\n    try {\n      // Try to save to database\n      const filters = { symbols }; // Store symbols as filters for compatibility\n      \n      const result = await query(`\n        INSERT INTO saved_screens (user_id, name, description, filters, created_at, updated_at)\n        VALUES ($1, $2, $3, $4, NOW(), NOW())\n        RETURNING *\n      `, [userId, name, description, JSON.stringify(filters)]);\n\n      const watchlist = {\n        id: result.rows[0].id,\n        name: result.rows[0].name,\n        description: result.rows[0].description,\n        filters: JSON.parse(result.rows[0].filters),\n        createdAt: result.rows[0].created_at,\n        updatedAt: result.rows[0].updated_at,\n        type: 'watchlist'\n      };\n\n      res.json({\n        success: true,\n        data: watchlist,\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (dbError) {\n      console.log('Database save failed for watchlist, returning mock response:', dbError.message);\n      \n      // Return mock success response\n      const mockWatchlist = {\n        id: `mock-${Date.now()}`,\n        name,\n        description,\n        filters: { symbols },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        type: 'watchlist'\n      };\n\n      res.json({\n        success: true,\n        data: mockWatchlist,\n        note: 'Watchlist created in memory only - database connectivity issue',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n  } catch (error) {\n    console.error('Error creating watchlist:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create watchlist',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}