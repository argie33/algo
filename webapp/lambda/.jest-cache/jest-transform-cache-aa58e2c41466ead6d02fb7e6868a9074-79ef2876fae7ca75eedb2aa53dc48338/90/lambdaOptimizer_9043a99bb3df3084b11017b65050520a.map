{"version":3,"names":["cov_17mvr7vriy","actualCoverage","LambdaOptimizer","constructor","f","s","isWarmStart","startTime","Date","now","initializationStages","Map","detectStartType","global","lambdaWarmState","b","console","log","initialized","getPerformanceMetrics","currentMemory","process","memoryUsage","totalDuration","startType","totalInitializationTime","lambda","functionName","env","AWS_LAMBDA_FUNCTION_NAME","functionVersion","AWS_LAMBDA_FUNCTION_VERSION","memorySize","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","module","exports"],"sources":["lambdaOptimizer.js"],"sourcesContent":["/**\n * Lambda Optimizer - Production-Grade Performance Optimization\n * Handles Lambda-specific optimizations for cold starts, memory usage, and performance\n */\n\nclass LambdaOptimizer {\n  constructor() {\n    this.isWarmStart = false;\n    this.startTime = Date.now();\n    this.initializationStages = new Map();\n  }\n\n  detectStartType() {\n    if (global.lambdaWarmState) {\n      this.isWarmStart = true;\n      console.log('ðŸ”¥ Lambda warm start detected');\n      return 'WARM';\n    } else {\n      global.lambdaWarmState = { initialized: Date.now() };\n      this.isWarmStart = false;\n      console.log('ðŸ¥¶ Lambda cold start detected');\n      return 'COLD';\n    }\n  }\n\n  getPerformanceMetrics() {\n    const currentMemory = process.memoryUsage();\n    const totalDuration = Date.now() - this.startTime;\n    \n    return {\n      startType: this.isWarmStart ? 'WARM' : 'COLD',\n      totalInitializationTime: totalDuration,\n      memoryUsage: currentMemory,\n      lambda: {\n        functionName: process.env.AWS_LAMBDA_FUNCTION_NAME,\n        functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION,\n        memorySize: process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE\n      }\n    };\n  }\n}\n\nmodule.exports = LambdaOptimizer;"],"mappings":"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","ignoreList":[]}