962a6b5d6ae22b97d3f38c0f3dad3e7e
'use strict';

/**
 * Module dependencies.
 */
const {
  agent: Agent
} = require('superagent');
const methods = require('methods');
const http = require('http');
let http2;
try {
  http2 = require('http2'); // eslint-disable-line global-require
} catch (_) {
  // eslint-disable-line no-empty
}
const Test = require('./test.js');

/**
 * Initialize a new `TestAgent`.
 *
 * @param {Function|Server} app
 * @param {Object} options
 * @api public
 */

function TestAgent(app, options = {}) {
  if (!(this instanceof TestAgent)) return new TestAgent(app, options);
  Agent.call(this, options);
  this._options = options;
  if (typeof app === 'function') {
    if (options.http2) {
      if (!http2) {
        throw new Error('supertest: this version of Node.js does not support http2');
      }
      app = http2.createServer(app); // eslint-disable-line no-param-reassign
    } else {
      app = http.createServer(app); // eslint-disable-line no-param-reassign
    }
  }
  this.app = app;
}

/**
 * Inherits from `Agent.prototype`.
 */

Object.setPrototypeOf(TestAgent.prototype, Agent.prototype);

// set a host name
TestAgent.prototype.host = function (host) {
  this._host = host;
  return this;
};

// override HTTP verb methods
methods.forEach(function (method) {
  TestAgent.prototype[method] = function (url, fn) {
    // eslint-disable-line no-unused-vars
    const req = new Test(this.app, method.toUpperCase(), url);
    if (this._options.http2) {
      req.http2();
    }
    if (this._host) {
      req.set('host', this._host);
    }
    req.on('response', this._saveCookies.bind(this));
    req.on('redirect', this._saveCookies.bind(this));
    req.on('redirect', this._attachCookies.bind(this, req));
    this._setDefaults(req);
    this._attachCookies(req);
    return req;
  };
});
TestAgent.prototype.del = TestAgent.prototype.delete;

/**
 * Expose `Agent`.
 */

module.exports = TestAgent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZ2VudCIsIkFnZW50IiwicmVxdWlyZSIsIm1ldGhvZHMiLCJodHRwIiwiaHR0cDIiLCJfIiwiVGVzdCIsIlRlc3RBZ2VudCIsImFwcCIsIm9wdGlvbnMiLCJjYWxsIiwiX29wdGlvbnMiLCJFcnJvciIsImNyZWF0ZVNlcnZlciIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiaG9zdCIsIl9ob3N0IiwiZm9yRWFjaCIsIm1ldGhvZCIsInVybCIsImZuIiwicmVxIiwidG9VcHBlckNhc2UiLCJzZXQiLCJvbiIsIl9zYXZlQ29va2llcyIsImJpbmQiLCJfYXR0YWNoQ29va2llcyIsIl9zZXREZWZhdWx0cyIsImRlbCIsImRlbGV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCB7IGFnZW50OiBBZ2VudCB9ID0gcmVxdWlyZSgnc3VwZXJhZ2VudCcpO1xuY29uc3QgbWV0aG9kcyA9IHJlcXVpcmUoJ21ldGhvZHMnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5sZXQgaHR0cDI7XG50cnkge1xuICBodHRwMiA9IHJlcXVpcmUoJ2h0dHAyJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcbn0gY2F0Y2ggKF8pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuY29uc3QgVGVzdCA9IHJlcXVpcmUoJy4vdGVzdC5qcycpO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFRlc3RBZ2VudGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxTZXJ2ZXJ9IGFwcFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gVGVzdEFnZW50KGFwcCwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUZXN0QWdlbnQpKSByZXR1cm4gbmV3IFRlc3RBZ2VudChhcHAsIG9wdGlvbnMpO1xuXG4gIEFnZW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuXG4gIGlmICh0eXBlb2YgYXBwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKG9wdGlvbnMuaHR0cDIpIHtcbiAgICAgIGlmICghaHR0cDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdzdXBlcnRlc3Q6IHRoaXMgdmVyc2lvbiBvZiBOb2RlLmpzIGRvZXMgbm90IHN1cHBvcnQgaHR0cDInXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBhcHAgPSBodHRwMi5jcmVhdGVTZXJ2ZXIoYXBwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH0gZWxzZSB7XG4gICAgICBhcHAgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgfVxuICB9XG4gIHRoaXMuYXBwID0gYXBwO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gYEFnZW50LnByb3RvdHlwZWAuXG4gKi9cblxuT2JqZWN0LnNldFByb3RvdHlwZU9mKFRlc3RBZ2VudC5wcm90b3R5cGUsIEFnZW50LnByb3RvdHlwZSk7XG5cbi8vIHNldCBhIGhvc3QgbmFtZVxuVGVzdEFnZW50LnByb3RvdHlwZS5ob3N0ID0gZnVuY3Rpb24oaG9zdCkge1xuICB0aGlzLl9ob3N0ID0gaG9zdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBvdmVycmlkZSBIVFRQIHZlcmIgbWV0aG9kc1xubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBUZXN0QWdlbnQucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGZuKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCByZXEgPSBuZXcgVGVzdCh0aGlzLmFwcCwgbWV0aG9kLnRvVXBwZXJDYXNlKCksIHVybCk7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMuaHR0cDIpIHtcbiAgICAgIHJlcS5odHRwMigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ob3N0KSB7XG4gICAgICByZXEuc2V0KCdob3N0JywgdGhpcy5faG9zdCk7XG4gICAgfVxuXG4gICAgcmVxLm9uKCdyZXNwb25zZScsIHRoaXMuX3NhdmVDb29raWVzLmJpbmQodGhpcykpO1xuICAgIHJlcS5vbigncmVkaXJlY3QnLCB0aGlzLl9zYXZlQ29va2llcy5iaW5kKHRoaXMpKTtcbiAgICByZXEub24oJ3JlZGlyZWN0JywgdGhpcy5fYXR0YWNoQ29va2llcy5iaW5kKHRoaXMsIHJlcSkpO1xuICAgIHRoaXMuX3NldERlZmF1bHRzKHJlcSk7XG4gICAgdGhpcy5fYXR0YWNoQ29va2llcyhyZXEpO1xuXG4gICAgcmV0dXJuIHJlcTtcbiAgfTtcbn0pO1xuXG5UZXN0QWdlbnQucHJvdG90eXBlLmRlbCA9IFRlc3RBZ2VudC5wcm90b3R5cGUuZGVsZXRlO1xuXG4vKipcbiAqIEV4cG9zZSBgQWdlbnRgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdEFnZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUVBLE1BQU07RUFBRUEsS0FBSyxFQUFFQztBQUFNLENBQUMsR0FBR0MsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUM5QyxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCLElBQUlHLEtBQUs7QUFDVCxJQUFJO0VBQ0ZBLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDLE9BQU9JLENBQUMsRUFBRTtFQUNWO0FBQUE7QUFFRixNQUFNQyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxXQUFXLENBQUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNNLFNBQVNBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ3BDLElBQUksRUFBRSxJQUFJLFlBQVlGLFNBQVMsQ0FBQyxFQUFFLE9BQU8sSUFBSUEsU0FBUyxDQUFDQyxHQUFHLEVBQUVDLE9BQU8sQ0FBQztFQUVwRVQsS0FBSyxDQUFDVSxJQUFJLENBQUMsSUFBSSxFQUFFRCxPQUFPLENBQUM7RUFDekIsSUFBSSxDQUFDRSxRQUFRLEdBQUdGLE9BQU87RUFFdkIsSUFBSSxPQUFPRCxHQUFHLEtBQUssVUFBVSxFQUFFO0lBQzdCLElBQUlDLE9BQU8sQ0FBQ0wsS0FBSyxFQUFFO01BQ2pCLElBQUksQ0FBQ0EsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJUSxLQUFLLENBQ2IsMkRBQ0YsQ0FBQztNQUNIO01BQ0FKLEdBQUcsR0FBR0osS0FBSyxDQUFDUyxZQUFZLENBQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQyxNQUFNO01BQ0xBLEdBQUcsR0FBR0wsSUFBSSxDQUFDVSxZQUFZLENBQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEM7RUFDRjtFQUNBLElBQUksQ0FBQ0EsR0FBRyxHQUFHQSxHQUFHO0FBQ2hCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQU0sTUFBTSxDQUFDQyxjQUFjLENBQUNSLFNBQVMsQ0FBQ1MsU0FBUyxFQUFFaEIsS0FBSyxDQUFDZ0IsU0FBUyxDQUFDOztBQUUzRDtBQUNBVCxTQUFTLENBQUNTLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFVBQVNBLElBQUksRUFBRTtFQUN4QyxJQUFJLENBQUNDLEtBQUssR0FBR0QsSUFBSTtFQUNqQixPQUFPLElBQUk7QUFDYixDQUFDOztBQUVEO0FBQ0FmLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxVQUFTQyxNQUFNLEVBQUU7RUFDL0JiLFNBQVMsQ0FBQ1MsU0FBUyxDQUFDSSxNQUFNLENBQUMsR0FBRyxVQUFTQyxHQUFHLEVBQUVDLEVBQUUsRUFBRTtJQUFFO0lBQ2hELE1BQU1DLEdBQUcsR0FBRyxJQUFJakIsSUFBSSxDQUFDLElBQUksQ0FBQ0UsR0FBRyxFQUFFWSxNQUFNLENBQUNJLFdBQVcsQ0FBQyxDQUFDLEVBQUVILEdBQUcsQ0FBQztJQUN6RCxJQUFJLElBQUksQ0FBQ1YsUUFBUSxDQUFDUCxLQUFLLEVBQUU7TUFDdkJtQixHQUFHLENBQUNuQixLQUFLLENBQUMsQ0FBQztJQUNiO0lBRUEsSUFBSSxJQUFJLENBQUNjLEtBQUssRUFBRTtNQUNkSyxHQUFHLENBQUNFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDUCxLQUFLLENBQUM7SUFDN0I7SUFFQUssR0FBRyxDQUFDRyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaERMLEdBQUcsQ0FBQ0csRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hETCxHQUFHLENBQUNHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDRyxjQUFjLENBQUNELElBQUksQ0FBQyxJQUFJLEVBQUVMLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELElBQUksQ0FBQ08sWUFBWSxDQUFDUCxHQUFHLENBQUM7SUFDdEIsSUFBSSxDQUFDTSxjQUFjLENBQUNOLEdBQUcsQ0FBQztJQUV4QixPQUFPQSxHQUFHO0VBQ1osQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGaEIsU0FBUyxDQUFDUyxTQUFTLENBQUNlLEdBQUcsR0FBR3hCLFNBQVMsQ0FBQ1MsU0FBUyxDQUFDZ0IsTUFBTTs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRzNCLFNBQVMiLCJpZ25vcmVMaXN0IjpbXX0=