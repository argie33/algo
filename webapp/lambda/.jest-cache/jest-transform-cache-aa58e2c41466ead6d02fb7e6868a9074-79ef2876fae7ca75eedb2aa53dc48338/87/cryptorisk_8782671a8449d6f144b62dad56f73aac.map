{"version":3,"names":["cov_11vjnh69gi","actualCoverage","express","s","require","router","Router","query","StructuredLogger","logger","CryptoRiskEngine","constructor","f","calculatePortfolioRisk","portfolioData","marketData","startTime","Date","now","riskMetrics","var","calculateVaR","expectedShortfall","calculateExpectedShortfall","maxDrawdown","calculateMaximumDrawdown","concentrationRisk","calculateConcentrationRisk","liquidityRisk","calculateLiquidityRisk","correlationRisk","calculateCorrelationRisk","volatilityClustering","analyzeVolatilityClustering","tailRisk","calculateTailRisk","stressTests","performStressTests","riskAdjustedMetrics","calculateRiskAdjustedMetrics","overallRiskScore","calculateOverallRiskScore","recommendations","generateRiskRecommendations","performance","portfolio_value","reduce","sum","h","quantity","current_price","holdings_count","length","error","confidenceLevel","b","timeHorizon","portfolioValue","assets","map","symbol","volatilities","getHistoricalVolatilities","correlationMatrix","getCorrelationMatrix","numSimulations","results","i","portfolioReturn","randomReturns","generateCorrelatedReturns","forEach","holding","index","weight","assetReturn","push","sort","a","varIndex","Math","floor","varReturn","varAmount","abs","confidence_level","time_horizon_days","var_percentage","var_amount","simulation_count","historicalReturns","getHistoricalReturns","portfolioReturns","calculatePortfolioReturns","tailLosses","slice","loss","expected_shortfall_percentage","expected_shortfall_amount","tail_observations","historicalData","getHistoricalPrices","portfolioValues","calculateHistoricalPortfolioValues","peak","peakDate","troughDate","currentDrawdownStart","currentValue","value","currentDate","date","drawdown","max_drawdown_percentage","peak_date","trough_date","recovery_days","calculateRecoveryDays","current_drawdown","calculateCurrentDrawdown","totalValue","weights","hhi","pow","sortedWeights","top3Concentration","w","top5Concentration","concentrationScore","min","herfindahl_index","top_3_concentration","top_5_concentration","concentration_score","risk_level","largest_holding_weight","number_of_holdings","liquidityScores","volumeData","getVolumeData","marketCap","getMarketCap","avgDailyVolume","avg_volume_30d","positionValue","volumeRatio","marketCapFactor","exchangeFactor","includes","liquidityScore","max","liquidity_score","volume_ratio","position_value","avg_daily_volume","estimated_exit_days","avgLiquidityScore","ls","overall_liquidity_score","asset_liquidity","illiquid_positions","filter","totalCorrelations","correlationCount","j","correlation","avgCorrelation","highCorrelationPairs","asset1","asset2","correlationRiskScore","average_correlation","correlation_risk_score","high_correlation_pairs","diversification_benefit","stressScenarios","name","description","btc_change","alt_multiplier","stressResults","scenario","scenarioValue","currentHoldingValue","stressPrice","lossPercentage","portfolio_value_after","loss_amount","loss_percentage","severity","current_portfolio_value","stress_tests","worst_case_scenario","worst","current","average_loss","test","riskScore","weightSum","concentration","liquidity","stressTesting","varScore","drawdownScore","stressScore","normalizedScore","overall_score","round","risk_grade","components","var_contribution","concentration_contribution","liquidity_contribution","correlation_contribution","type","priority","title","toFixed","actions","asset","matrix","random","returns","baseReturn","marketCaps","riskEngine","get","req","res","correlationId","userId","params","info","user_id","correlation_id","avg_cost","btc_dominance","total_market_cap","fear_greed_index","volatility_index","riskAnalysis","duration","risk_score","json","success","data","portfolio","market_conditions","risk_analysis","metadata","calculation_time_ms","timestamp","toISOString","duration_ms","status","error_code","module","exports"],"sources":["crypto-risk.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { query } = require('../utils/database');\nconst StructuredLogger = require('../utils/structuredLogger');\nconst logger = new StructuredLogger('crypto-risk');\n\n// Advanced Crypto Risk Management Engine\nclass CryptoRiskEngine {\n  constructor() {\n    this.logger = logger;\n  }\n\n  // Calculate comprehensive portfolio risk metrics\n  async calculatePortfolioRisk(portfolioData, marketData) {\n    const startTime = Date.now();\n    \n    try {\n      const riskMetrics = {\n        // Value at Risk calculations\n        var: await this.calculateVaR(portfolioData, marketData),\n        \n        // Expected Shortfall (Conditional VaR)\n        expectedShortfall: await this.calculateExpectedShortfall(portfolioData, marketData),\n        \n        // Maximum Drawdown analysis\n        maxDrawdown: await this.calculateMaximumDrawdown(portfolioData),\n        \n        // Concentration risk\n        concentrationRisk: this.calculateConcentrationRisk(portfolioData),\n        \n        // Liquidity risk\n        liquidityRisk: await this.calculateLiquidityRisk(portfolioData),\n        \n        // Correlation risk\n        correlationRisk: await this.calculateCorrelationRisk(portfolioData),\n        \n        // Volatility clustering\n        volatilityClustering: await this.analyzeVolatilityClustering(portfolioData),\n        \n        // Tail risk measures\n        tailRisk: await this.calculateTailRisk(portfolioData),\n        \n        // Stress testing\n        stressTests: await this.performStressTests(portfolioData),\n        \n        // Risk-adjusted performance\n        riskAdjustedMetrics: await this.calculateRiskAdjustedMetrics(portfolioData)\n      };\n\n      // Calculate overall risk score\n      riskMetrics.overallRiskScore = this.calculateOverallRiskScore(riskMetrics);\n      \n      // Generate risk recommendations\n      riskMetrics.recommendations = this.generateRiskRecommendations(riskMetrics, portfolioData);\n\n      this.logger.performance('crypto_risk_calculation', Date.now() - startTime, {\n        portfolio_value: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0),\n        holdings_count: portfolioData.length\n      });\n\n      return riskMetrics;\n\n    } catch (error) {\n      this.logger.error('Risk calculation failed', error);\n      throw error;\n    }\n  }\n\n  // Value at Risk using Monte Carlo simulation\n  async calculateVaR(portfolioData, marketData, confidenceLevel = 0.95, timeHorizon = 1) {\n    try {\n      const portfolioValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      \n      // Get historical volatilities and correlations\n      const assets = portfolioData.map(h => h.symbol);\n      const volatilities = await this.getHistoricalVolatilities(assets);\n      const correlationMatrix = await this.getCorrelationMatrix(assets);\n      \n      // Monte Carlo simulation parameters\n      const numSimulations = 10000;\n      const results = [];\n      \n      for (let i = 0; i < numSimulations; i++) {\n        let portfolioReturn = 0;\n        \n        // Generate correlated random returns for each asset\n        const randomReturns = this.generateCorrelatedReturns(assets, volatilities, correlationMatrix);\n        \n        portfolioData.forEach((holding, index) => {\n          const weight = (holding.quantity * holding.current_price) / portfolioValue;\n          const assetReturn = randomReturns[assets[index]] || 0;\n          portfolioReturn += weight * assetReturn;\n        });\n        \n        results.push(portfolioReturn);\n      }\n      \n      // Sort results and find VaR\n      results.sort((a, b) => a - b);\n      const varIndex = Math.floor((1 - confidenceLevel) * numSimulations);\n      const varReturn = results[varIndex];\n      const varAmount = Math.abs(varReturn * portfolioValue);\n      \n      return {\n        confidence_level: confidenceLevel,\n        time_horizon_days: timeHorizon,\n        var_percentage: Math.abs(varReturn) * 100,\n        var_amount: varAmount,\n        portfolio_value: portfolioValue,\n        simulation_count: numSimulations\n      };\n\n    } catch (error) {\n      this.logger.error('VaR calculation failed', error);\n      return {\n        confidence_level: confidenceLevel,\n        time_horizon_days: timeHorizon,\n        var_percentage: 5.0, // Conservative estimate\n        var_amount: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0) * 0.05,\n        portfolio_value: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0),\n        simulation_count: 0,\n        error: 'Calculation failed, using conservative estimate'\n      };\n    }\n  }\n\n  // Expected Shortfall (average loss beyond VaR)\n  async calculateExpectedShortfall(portfolioData, marketData, confidenceLevel = 0.95) {\n    try {\n      const portfolioValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      \n      // Simplified calculation using historical data\n      const assets = portfolioData.map(h => h.symbol);\n      const historicalReturns = await this.getHistoricalReturns(assets, 252); // 1 year\n      \n      const portfolioReturns = this.calculatePortfolioReturns(portfolioData, historicalReturns);\n      portfolioReturns.sort((a, b) => a - b);\n      \n      const varIndex = Math.floor((1 - confidenceLevel) * portfolioReturns.length);\n      const tailLosses = portfolioReturns.slice(0, varIndex);\n      const expectedShortfall = tailLosses.reduce((sum, loss) => sum + loss, 0) / tailLosses.length;\n      \n      return {\n        confidence_level: confidenceLevel,\n        expected_shortfall_percentage: Math.abs(expectedShortfall) * 100,\n        expected_shortfall_amount: Math.abs(expectedShortfall * portfolioValue),\n        portfolio_value: portfolioValue,\n        tail_observations: tailLosses.length\n      };\n\n    } catch (error) {\n      this.logger.error('Expected Shortfall calculation failed', error);\n      return {\n        confidence_level: confidenceLevel,\n        expected_shortfall_percentage: 7.5,\n        expected_shortfall_amount: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0) * 0.075,\n        portfolio_value: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0),\n        error: 'Calculation failed, using conservative estimate'\n      };\n    }\n  }\n\n  // Maximum Drawdown analysis\n  async calculateMaximumDrawdown(portfolioData) {\n    try {\n      // Get historical prices for portfolio assets\n      const assets = portfolioData.map(h => h.symbol);\n      const historicalData = await this.getHistoricalPrices(assets, 365);\n      \n      // Calculate portfolio value over time\n      const portfolioValues = this.calculateHistoricalPortfolioValues(portfolioData, historicalData);\n      \n      let maxDrawdown = 0;\n      let peak = portfolioValues[0];\n      let peakDate = null;\n      let troughDate = null;\n      let currentDrawdownStart = null;\n      \n      for (let i = 0; i < portfolioValues.length; i++) {\n        const currentValue = portfolioValues[i].value;\n        const currentDate = portfolioValues[i].date;\n        \n        if (currentValue > peak) {\n          peak = currentValue;\n          peakDate = currentDate;\n          currentDrawdownStart = null;\n        } else {\n          if (!currentDrawdownStart) {\n            currentDrawdownStart = peakDate;\n          }\n          \n          const drawdown = (peak - currentValue) / peak;\n          if (drawdown > maxDrawdown) {\n            maxDrawdown = drawdown;\n            troughDate = currentDate;\n          }\n        }\n      }\n      \n      return {\n        max_drawdown_percentage: maxDrawdown * 100,\n        peak_date: peakDate,\n        trough_date: troughDate,\n        recovery_days: this.calculateRecoveryDays(portfolioValues, peakDate, troughDate),\n        current_drawdown: this.calculateCurrentDrawdown(portfolioValues)\n      };\n\n    } catch (error) {\n      this.logger.error('Maximum Drawdown calculation failed', error);\n      return {\n        max_drawdown_percentage: 25.0, // Conservative estimate for crypto\n        error: 'Calculation failed, using historical crypto average'\n      };\n    }\n  }\n\n  // Concentration Risk analysis\n  calculateConcentrationRisk(portfolioData) {\n    try {\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      const weights = portfolioData.map(h => (h.quantity * h.current_price) / totalValue);\n      \n      // Herfindahl-Hirschman Index (HHI)\n      const hhi = weights.reduce((sum, weight) => sum + Math.pow(weight, 2), 0);\n      \n      // Top holdings concentration\n      const sortedWeights = weights.sort((a, b) => b - a);\n      const top3Concentration = sortedWeights.slice(0, 3).reduce((sum, w) => sum + w, 0);\n      const top5Concentration = sortedWeights.slice(0, 5).reduce((sum, w) => sum + w, 0);\n      \n      // Calculate concentration score (0-100, higher = more concentrated)\n      const concentrationScore = Math.min(100, hhi * 100 + top3Concentration * 50);\n      \n      return {\n        herfindahl_index: hhi,\n        top_3_concentration: top3Concentration * 100,\n        top_5_concentration: top5Concentration * 100,\n        concentration_score: concentrationScore,\n        risk_level: concentrationScore > 70 ? 'high' : concentrationScore > 40 ? 'medium' : 'low',\n        largest_holding_weight: sortedWeights[0] * 100,\n        number_of_holdings: portfolioData.length\n      };\n\n    } catch (error) {\n      this.logger.error('Concentration risk calculation failed', error);\n      return {\n        concentration_score: 50,\n        risk_level: 'medium',\n        error: 'Calculation failed'\n      };\n    }\n  }\n\n  // Liquidity Risk assessment\n  async calculateLiquidityRisk(portfolioData) {\n    try {\n      const liquidityScores = [];\n      \n      for (const holding of portfolioData) {\n        // Get trading volume data\n        const volumeData = await this.getVolumeData(holding.symbol);\n        const marketCap = await this.getMarketCap(holding.symbol);\n        \n        // Calculate liquidity metrics\n        const avgDailyVolume = volumeData.avg_volume_30d || 1000000;\n        const positionValue = holding.quantity * holding.current_price;\n        const volumeRatio = positionValue / avgDailyVolume;\n        \n        // Market cap factor\n        const marketCapFactor = marketCap > 10e9 ? 1.0 : marketCap > 1e9 ? 0.8 : 0.5;\n        \n        // Exchange listing factor (simplified)\n        const exchangeFactor = ['BTC', 'ETH', 'BNB'].includes(holding.symbol) ? 1.0 : 0.7;\n        \n        const liquidityScore = Math.max(0, 100 - (volumeRatio * 100)) * marketCapFactor * exchangeFactor;\n        \n        liquidityScores.push({\n          symbol: holding.symbol,\n          liquidity_score: liquidityScore,\n          volume_ratio: volumeRatio,\n          position_value: positionValue,\n          avg_daily_volume: avgDailyVolume,\n          estimated_exit_days: Math.max(1, volumeRatio * 10) // Rough estimate\n        });\n      }\n      \n      const avgLiquidityScore = liquidityScores.reduce((sum, ls) => sum + ls.liquidity_score, 0) / liquidityScores.length;\n      \n      return {\n        overall_liquidity_score: avgLiquidityScore,\n        risk_level: avgLiquidityScore > 70 ? 'low' : avgLiquidityScore > 40 ? 'medium' : 'high',\n        asset_liquidity: liquidityScores,\n        illiquid_positions: liquidityScores.filter(ls => ls.liquidity_score < 30)\n      };\n\n    } catch (error) {\n      this.logger.error('Liquidity risk calculation failed', error);\n      return {\n        overall_liquidity_score: 60,\n        risk_level: 'medium',\n        error: 'Calculation failed'\n      };\n    }\n  }\n\n  // Correlation Risk analysis\n  async calculateCorrelationRisk(portfolioData) {\n    try {\n      const assets = portfolioData.map(h => h.symbol);\n      const correlationMatrix = await this.getCorrelationMatrix(assets);\n      \n      // Calculate average correlation\n      let totalCorrelations = 0;\n      let correlationCount = 0;\n      \n      for (let i = 0; i < assets.length; i++) {\n        for (let j = i + 1; j < assets.length; j++) {\n          const correlation = correlationMatrix[assets[i]]?.[assets[j]] || 0.5;\n          totalCorrelations += Math.abs(correlation);\n          correlationCount++;\n        }\n      }\n      \n      const avgCorrelation = correlationCount > 0 ? totalCorrelations / correlationCount : 0;\n      \n      // Identify high correlation pairs\n      const highCorrelationPairs = [];\n      for (let i = 0; i < assets.length; i++) {\n        for (let j = i + 1; j < assets.length; j++) {\n          const correlation = correlationMatrix[assets[i]]?.[assets[j]] || 0.5;\n          if (Math.abs(correlation) > 0.7) {\n            highCorrelationPairs.push({\n              asset1: assets[i],\n              asset2: assets[j],\n              correlation: correlation\n            });\n          }\n        }\n      }\n      \n      const correlationRiskScore = Math.min(100, avgCorrelation * 100 + highCorrelationPairs.length * 20);\n      \n      return {\n        average_correlation: avgCorrelation,\n        correlation_risk_score: correlationRiskScore,\n        risk_level: correlationRiskScore > 70 ? 'high' : correlationRiskScore > 40 ? 'medium' : 'low',\n        high_correlation_pairs: highCorrelationPairs,\n        diversification_benefit: Math.max(0, (1 - avgCorrelation) * 100)\n      };\n\n    } catch (error) {\n      this.logger.error('Correlation risk calculation failed', error);\n      return {\n        average_correlation: 0.6, // Conservative estimate for crypto\n        correlation_risk_score: 60,\n        risk_level: 'medium',\n        error: 'Calculation failed'\n      };\n    }\n  }\n\n  // Stress Testing scenarios\n  async performStressTests(portfolioData) {\n    try {\n      const currentValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      \n      const stressScenarios = [\n        {\n          name: 'Market Crash (2018-style)',\n          description: 'BTC -80%, Alts -90%',\n          btc_change: -0.80,\n          alt_multiplier: -0.90\n        },\n        {\n          name: 'Regulatory Crackdown',\n          description: 'Major regulatory restrictions',\n          btc_change: -0.50,\n          alt_multiplier: -0.60\n        },\n        {\n          name: 'Exchange Hack',\n          description: 'Major exchange security breach',\n          btc_change: -0.30,\n          alt_multiplier: -0.40\n        },\n        {\n          name: 'Tether Collapse',\n          description: 'Stablecoin collapse scenario',\n          btc_change: -0.40,\n          alt_multiplier: -0.50\n        },\n        {\n          name: 'China Ban (Historical)',\n          description: 'China crypto ban replay',\n          btc_change: -0.25,\n          alt_multiplier: -0.35\n        }\n      ];\n      \n      const stressResults = stressScenarios.map(scenario => {\n        let scenarioValue = 0;\n        \n        portfolioData.forEach(holding => {\n          const currentHoldingValue = holding.quantity * holding.current_price;\n          let stressPrice = holding.current_price;\n          \n          if (holding.symbol === 'BTC') {\n            stressPrice *= (1 + scenario.btc_change);\n          } else if (['USDT', 'USDC', 'BUSD'].includes(holding.symbol)) {\n            // Stablecoins less affected except in Tether scenario\n            if (scenario.name.includes('Tether') && holding.symbol === 'USDT') {\n              stressPrice *= 0.5; // 50% haircut\n            }\n          } else {\n            // Altcoins typically more volatile\n            stressPrice *= (1 + scenario.alt_multiplier);\n          }\n          \n          scenarioValue += holding.quantity * Math.max(0, stressPrice);\n        });\n        \n        const loss = currentValue - scenarioValue;\n        const lossPercentage = (loss / currentValue) * 100;\n        \n        return {\n          scenario: scenario.name,\n          description: scenario.description,\n          portfolio_value_after: scenarioValue,\n          loss_amount: loss,\n          loss_percentage: lossPercentage,\n          severity: lossPercentage > 60 ? 'severe' : lossPercentage > 30 ? 'high' : 'moderate'\n        };\n      });\n      \n      return {\n        current_portfolio_value: currentValue,\n        stress_tests: stressResults,\n        worst_case_scenario: stressResults.reduce((worst, current) => \n          current.loss_percentage > worst.loss_percentage ? current : worst\n        ),\n        average_loss: stressResults.reduce((sum, test) => sum + test.loss_percentage, 0) / stressResults.length\n      };\n\n    } catch (error) {\n      this.logger.error('Stress testing failed', error);\n      return {\n        current_portfolio_value: portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0),\n        error: 'Stress testing failed'\n      };\n    }\n  }\n\n  // Calculate overall risk score\n  calculateOverallRiskScore(riskMetrics) {\n    try {\n      let riskScore = 0;\n      let weightSum = 0;\n      \n      // Weight different risk factors\n      const weights = {\n        var: 0.25,\n        concentration: 0.20,\n        liquidity: 0.15,\n        correlation: 0.15,\n        maxDrawdown: 0.15,\n        stressTesting: 0.10\n      };\n      \n      // VaR contribution\n      if (riskMetrics.var?.var_percentage) {\n        const varScore = Math.min(100, riskMetrics.var.var_percentage * 10);\n        riskScore += varScore * weights.var;\n        weightSum += weights.var;\n      }\n      \n      // Concentration risk contribution\n      if (riskMetrics.concentrationRisk?.concentration_score) {\n        riskScore += riskMetrics.concentrationRisk.concentration_score * weights.concentration;\n        weightSum += weights.concentration;\n      }\n      \n      // Liquidity risk contribution\n      if (riskMetrics.liquidityRisk?.overall_liquidity_score) {\n        const liquidityScore = 100 - riskMetrics.liquidityRisk.overall_liquidity_score; // Invert since lower liquidity = higher risk\n        riskScore += liquidityScore * weights.liquidity;\n        weightSum += weights.liquidity;\n      }\n      \n      // Correlation risk contribution\n      if (riskMetrics.correlationRisk?.correlation_risk_score) {\n        riskScore += riskMetrics.correlationRisk.correlation_risk_score * weights.correlation;\n        weightSum += weights.correlation;\n      }\n      \n      // Max drawdown contribution\n      if (riskMetrics.maxDrawdown?.max_drawdown_percentage) {\n        const drawdownScore = Math.min(100, riskMetrics.maxDrawdown.max_drawdown_percentage * 2);\n        riskScore += drawdownScore * weights.maxDrawdown;\n        weightSum += weights.maxDrawdown;\n      }\n      \n      // Stress testing contribution\n      if (riskMetrics.stressTests?.average_loss) {\n        const stressScore = Math.min(100, riskMetrics.stressTests.average_loss);\n        riskScore += stressScore * weights.stressTesting;\n        weightSum += weights.stressTesting;\n      }\n      \n      const normalizedScore = weightSum > 0 ? riskScore / weightSum : 50;\n      \n      return {\n        overall_score: Math.round(normalizedScore),\n        risk_level: normalizedScore > 70 ? 'high' : normalizedScore > 40 ? 'medium' : 'low',\n        risk_grade: normalizedScore > 80 ? 'F' : normalizedScore > 60 ? 'D' : \n                   normalizedScore > 40 ? 'C' : normalizedScore > 20 ? 'B' : 'A',\n        components: {\n          var_contribution: (riskMetrics.var?.var_percentage || 0) * weights.var,\n          concentration_contribution: (riskMetrics.concentrationRisk?.concentration_score || 0) * weights.concentration,\n          liquidity_contribution: (100 - (riskMetrics.liquidityRisk?.overall_liquidity_score || 50)) * weights.liquidity,\n          correlation_contribution: (riskMetrics.correlationRisk?.correlation_risk_score || 0) * weights.correlation\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Overall risk score calculation failed', error);\n      return {\n        overall_score: 50,\n        risk_level: 'medium',\n        risk_grade: 'C',\n        error: 'Calculation failed'\n      };\n    }\n  }\n\n  // Generate risk management recommendations\n  generateRiskRecommendations(riskMetrics, portfolioData) {\n    const recommendations = [];\n    \n    try {\n      // VaR-based recommendations\n      if (riskMetrics.var?.var_percentage > 10) {\n        recommendations.push({\n          type: 'risk_reduction',\n          priority: 'high',\n          title: 'High Value at Risk Detected',\n          description: `Portfolio VaR is ${riskMetrics.var.var_percentage.toFixed(1)}%, indicating high potential losses`,\n          actions: [\n            'Consider reducing position sizes',\n            'Implement stop-loss orders',\n            'Diversify across more assets'\n          ]\n        });\n      }\n      \n      // Concentration risk recommendations\n      if (riskMetrics.concentrationRisk?.concentration_score > 60) {\n        recommendations.push({\n          type: 'diversification',\n          priority: 'high',\n          title: 'Portfolio Over-Concentration',\n          description: 'Portfolio is heavily concentrated in few assets',\n          actions: [\n            `Reduce largest holding from ${riskMetrics.concentrationRisk.largest_holding_weight?.toFixed(1)}%`,\n            'Add more uncorrelated assets',\n            'Consider rebalancing to equal weights'\n          ]\n        });\n      }\n      \n      // Liquidity risk recommendations\n      if (riskMetrics.liquidityRisk?.risk_level === 'high') {\n        recommendations.push({\n          type: 'liquidity',\n          priority: 'medium',\n          title: 'Liquidity Risk Concerns',\n          description: 'Some positions may be difficult to exit quickly',\n          actions: [\n            'Increase allocation to high-volume assets',\n            'Reduce positions in illiquid tokens',\n            'Maintain cash reserves for opportunities'\n          ]\n        });\n      }\n      \n      // Correlation risk recommendations\n      if (riskMetrics.correlationRisk?.average_correlation > 0.7) {\n        recommendations.push({\n          type: 'correlation',\n          priority: 'medium',\n          title: 'High Asset Correlation',\n          description: 'Assets are highly correlated, reducing diversification benefits',\n          actions: [\n            'Add assets from different sectors',\n            'Consider DeFi vs. Layer 1 diversification',\n            'Include some stablecoins for stability'\n          ]\n        });\n      }\n      \n      // Stress test recommendations\n      if (riskMetrics.stressTests?.worst_case_scenario?.loss_percentage > 70) {\n        recommendations.push({\n          type: 'stress_testing',\n          priority: 'high',\n          title: 'Poor Stress Test Performance',\n          description: `Worst-case scenario shows ${riskMetrics.stressTests.worst_case_scenario.loss_percentage.toFixed(1)}% loss`,\n          actions: [\n            'Implement hedging strategies',\n            'Consider portfolio insurance',\n            'Reduce overall crypto allocation'\n          ]\n        });\n      }\n      \n      return recommendations;\n\n    } catch (error) {\n      this.logger.error('Risk recommendations generation failed', error);\n      return [{\n        type: 'general',\n        priority: 'low',\n        title: 'General Risk Management',\n        description: 'Consider implementing basic risk management practices',\n        actions: ['Regular portfolio review', 'Set stop-loss levels', 'Diversify holdings']\n      }];\n    }\n  }\n\n  // Helper methods (simplified implementations)\n  async getHistoricalVolatilities(assets) {\n    // Mock implementation - would fetch from database\n    const volatilities = {};\n    assets.forEach(asset => {\n      volatilities[asset] = asset === 'BTC' ? 0.04 : asset === 'ETH' ? 0.05 : 0.08; // Daily volatility\n    });\n    return volatilities;\n  }\n\n  async getCorrelationMatrix(assets) {\n    // Mock implementation - would calculate from historical data\n    const matrix = {};\n    assets.forEach(asset1 => {\n      matrix[asset1] = {};\n      assets.forEach(asset2 => {\n        if (asset1 === asset2) {\n          matrix[asset1][asset2] = 1.0;\n        } else {\n          // Mock correlations (crypto typically highly correlated)\n          matrix[asset1][asset2] = 0.7 + Math.random() * 0.2;\n        }\n      });\n    });\n    return matrix;\n  }\n\n  generateCorrelatedReturns(assets, volatilities, correlationMatrix) {\n    // Simplified implementation of correlated random number generation\n    const returns = {};\n    assets.forEach(asset => {\n      const baseReturn = (Math.random() - 0.5) * 2 * volatilities[asset]; // Random return\n      returns[asset] = baseReturn;\n    });\n    return returns;\n  }\n\n  async getVolumeData(symbol) {\n    // Mock implementation\n    return {\n      avg_volume_30d: symbol === 'BTC' ? 20000000000 : symbol === 'ETH' ? 10000000000 : 1000000000\n    };\n  }\n\n  async getMarketCap(symbol) {\n    // Mock implementation\n    const marketCaps = {\n      'BTC': 850000000000,\n      'ETH': 350000000000,\n      'BNB': 50000000000\n    };\n    return marketCaps[symbol] || 1000000000;\n  }\n}\n\n// Initialize risk engine\nconst riskEngine = new CryptoRiskEngine();\n\n// GET /crypto-risk/portfolio/:userId - Comprehensive portfolio risk analysis\nrouter.get('/portfolio/:userId', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    const { userId } = req.params;\n    \n    logger.info('Crypto portfolio risk analysis request', {\n      user_id: userId,\n      correlation_id: correlationId\n    });\n\n    // Mock portfolio data (would fetch from actual portfolio service)\n    const portfolioData = [\n      { symbol: 'BTC', quantity: 0.5, current_price: 45000, avg_cost: 40000 },\n      { symbol: 'ETH', quantity: 2.0, current_price: 2800, avg_cost: 2500 },\n      { symbol: 'ADA', quantity: 1000, current_price: 0.45, avg_cost: 0.50 },\n      { symbol: 'SOL', quantity: 10, current_price: 25, avg_cost: 30 },\n      { symbol: 'USDC', quantity: 5000, current_price: 1.0, avg_cost: 1.0 }\n    ];\n\n    // Mock market data (would fetch current market conditions)\n    const marketData = {\n      btc_dominance: 42.5,\n      total_market_cap: 2100000000000,\n      fear_greed_index: 35,\n      volatility_index: 65\n    };\n\n    // Calculate comprehensive risk metrics\n    const riskAnalysis = await riskEngine.calculatePortfolioRisk(portfolioData, marketData);\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_portfolio_risk_analysis', duration, {\n      user_id: userId,\n      correlation_id: correlationId,\n      risk_score: riskAnalysis.overallRiskScore?.overall_score\n    });\n\n    res.json({\n      success: true,\n      data: {\n        portfolio: portfolioData,\n        market_conditions: marketData,\n        risk_analysis: riskAnalysis,\n        metadata: {\n          calculation_time_ms: duration,\n          correlation_id: correlationId,\n          timestamp: new Date().toISOString()\n        }\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto portfolio risk analysis failed', error, {\n      user_id: req.params.userId,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze crypto portfolio risk',\n      error_code: 'CRYPTO_RISK_ANALYSIS_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\nmodule.exports = router;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC;AAAM,CAAC;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMI,gBAAgB;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC7D,MAAMK,MAAM;AAAA;AAAA,CAAAT,cAAA,GAAAG,CAAA,OAAG,IAAIK,gBAAgB,CAAC,aAAa,CAAC;;AAElD;AACA,MAAME,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACZ,IAAI,CAACM,MAAM,GAAGA,MAAM;EACtB;;EAEA;EACA,MAAMI,sBAAsBA,CAACC,aAAa,EAAEC,UAAU,EAAE;IAAA;IAAAf,cAAA,GAAAY,CAAA;IACtD,MAAMI,SAAS;IAAA;IAAA,CAAAhB,cAAA,GAAAG,CAAA,OAAGc,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAAlB,cAAA,GAAAG,CAAA;IAE7B,IAAI;MACF,MAAMgB,WAAW;MAAA;MAAA,CAAAnB,cAAA,GAAAG,CAAA,OAAG;QAClB;QACAiB,GAAG,EAAE,MAAM,IAAI,CAACC,YAAY,CAACP,aAAa,EAAEC,UAAU,CAAC;QAEvD;QACAO,iBAAiB,EAAE,MAAM,IAAI,CAACC,0BAA0B,CAACT,aAAa,EAAEC,UAAU,CAAC;QAEnF;QACAS,WAAW,EAAE,MAAM,IAAI,CAACC,wBAAwB,CAACX,aAAa,CAAC;QAE/D;QACAY,iBAAiB,EAAE,IAAI,CAACC,0BAA0B,CAACb,aAAa,CAAC;QAEjE;QACAc,aAAa,EAAE,MAAM,IAAI,CAACC,sBAAsB,CAACf,aAAa,CAAC;QAE/D;QACAgB,eAAe,EAAE,MAAM,IAAI,CAACC,wBAAwB,CAACjB,aAAa,CAAC;QAEnE;QACAkB,oBAAoB,EAAE,MAAM,IAAI,CAACC,2BAA2B,CAACnB,aAAa,CAAC;QAE3E;QACAoB,QAAQ,EAAE,MAAM,IAAI,CAACC,iBAAiB,CAACrB,aAAa,CAAC;QAErD;QACAsB,WAAW,EAAE,MAAM,IAAI,CAACC,kBAAkB,CAACvB,aAAa,CAAC;QAEzD;QACAwB,mBAAmB,EAAE,MAAM,IAAI,CAACC,4BAA4B,CAACzB,aAAa;MAC5E,CAAC;;MAED;MAAA;MAAAd,cAAA,GAAAG,CAAA;MACAgB,WAAW,CAACqB,gBAAgB,GAAG,IAAI,CAACC,yBAAyB,CAACtB,WAAW,CAAC;;MAE1E;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MACAgB,WAAW,CAACuB,eAAe,GAAG,IAAI,CAACC,2BAA2B,CAACxB,WAAW,EAAEL,aAAa,CAAC;MAAC;MAAAd,cAAA,GAAAG,CAAA;MAE3F,IAAI,CAACM,MAAM,CAACmC,WAAW,CAAC,yBAAyB,EAAE3B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,EAAE;QACzE6B,eAAe,EAAE/B,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC;QAC1FC,cAAc,EAAErC,aAAa,CAACsC;MAChC,CAAC,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAEH,OAAOgB,WAAW;IAEpB,CAAC,CAAC,OAAOkC,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MACpD,MAAMkD,KAAK;IACb;EACF;;EAEA;EACA,MAAMhC,YAAYA,CAACP,aAAa,EAAEC,UAAU,EAAEuC,eAAe;EAAA;EAAA,CAAAtD,cAAA,GAAAuD,CAAA,UAAG,IAAI,GAAEC,WAAW;EAAA;EAAA,CAAAxD,cAAA,GAAAuD,CAAA,UAAG,CAAC,GAAE;IAAA;IAAAvD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACrF,IAAI;MACF,MAAMsD,cAAc;MAAA;MAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;MAAD,CAAC,EAAE,CAAC,CAAC;;MAEhG;MACA,MAAMQ,MAAM;MAAA;MAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAAC6C,GAAG,CAACX,CAAC,IAAI;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA6C,CAAC,CAACY,MAAM;MAAD,CAAC,CAAC;MAC/C,MAAMC,YAAY;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC2D,yBAAyB,CAACJ,MAAM,CAAC;MACjE,MAAMK,iBAAiB;MAAA;MAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC6D,oBAAoB,CAACN,MAAM,CAAC;;MAEjE;MACA,MAAMO,cAAc;MAAA;MAAA,CAAAjE,cAAA,GAAAG,CAAA,QAAG,KAAK;MAC5B,MAAM+D,OAAO;MAAA;MAAA,CAAAlE,cAAA,GAAAG,CAAA,QAAG,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEnB,KAAK,IAAIgE,CAAC;MAAA;MAAA,CAAAnE,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAEgE,CAAC,GAAGF,cAAc,EAAEE,CAAC,EAAE,EAAE;QACvC,IAAIC,eAAe;QAAA;QAAA,CAAApE,cAAA,GAAAG,CAAA,QAAG,CAAC;;QAEvB;QACA,MAAMkE,aAAa;QAAA;QAAA,CAAArE,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACmE,yBAAyB,CAACZ,MAAM,EAAEG,YAAY,EAAEE,iBAAiB,CAAC;QAAC;QAAA/D,cAAA,GAAAG,CAAA;QAE9FW,aAAa,CAACyD,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;UAAA;UAAAzE,cAAA,GAAAY,CAAA;UACxC,MAAM8D,MAAM;UAAA;UAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAIqE,OAAO,CAACvB,QAAQ,GAAGuB,OAAO,CAACtB,aAAa,GAAIO,cAAc;UAC1E,MAAMkB,WAAW;UAAA;UAAA,CAAA3E,cAAA,GAAAG,CAAA;UAAG;UAAA,CAAAH,cAAA,GAAAuD,CAAA,UAAAc,aAAa,CAACX,MAAM,CAACe,KAAK,CAAC,CAAC;UAAA;UAAA,CAAAzE,cAAA,GAAAuD,CAAA,UAAI,CAAC;UAAC;UAAAvD,cAAA,GAAAG,CAAA;UACtDiE,eAAe,IAAIM,MAAM,GAAGC,WAAW;QACzC,CAAC,CAAC;QAAC;QAAA3E,cAAA,GAAAG,CAAA;QAEH+D,OAAO,CAACU,IAAI,CAACR,eAAe,CAAC;MAC/B;;MAEA;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACA+D,OAAO,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEvB,CAAC,KAAK;QAAA;QAAAvD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA2E,CAAC,GAAGvB,CAAC;MAAD,CAAC,CAAC;MAC7B,MAAMwB,QAAQ;MAAA;MAAA,CAAA/E,cAAA,GAAAG,CAAA,QAAG6E,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,GAAG3B,eAAe,IAAIW,cAAc,CAAC;MACnE,MAAMiB,SAAS;MAAA;MAAA,CAAAlF,cAAA,GAAAG,CAAA,QAAG+D,OAAO,CAACa,QAAQ,CAAC;MACnC,MAAMI,SAAS;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG6E,IAAI,CAACI,GAAG,CAACF,SAAS,GAAGzB,cAAc,CAAC;MAAC;MAAAzD,cAAA,GAAAG,CAAA;MAEvD,OAAO;QACLkF,gBAAgB,EAAE/B,eAAe;QACjCgC,iBAAiB,EAAE9B,WAAW;QAC9B+B,cAAc,EAAEP,IAAI,CAACI,GAAG,CAACF,SAAS,CAAC,GAAG,GAAG;QACzCM,UAAU,EAAEL,SAAS;QACrBtC,eAAe,EAAEY,cAAc;QAC/BgC,gBAAgB,EAAExB;MACpB,CAAC;IAEH,CAAC,CAAC,OAAOZ,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MACnD,OAAO;QACLkF,gBAAgB,EAAE/B,eAAe;QACjCgC,iBAAiB,EAAE9B,WAAW;QAC9B+B,cAAc,EAAE,GAAG;QAAE;QACrBC,UAAU,EAAE1E,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI;QAC5FL,eAAe,EAAE/B,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC;QAC1FuC,gBAAgB,EAAE,CAAC;QACnBpC,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA,MAAM9B,0BAA0BA,CAACT,aAAa,EAAEC,UAAU,EAAEuC,eAAe;EAAA;EAAA,CAAAtD,cAAA,GAAAuD,CAAA,UAAG,IAAI,GAAE;IAAA;IAAAvD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAClF,IAAI;MACF,MAAMsD,cAAc;MAAA;MAAA,CAAAzD,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;MAAD,CAAC,EAAE,CAAC,CAAC;;MAEhG;MACA,MAAMQ,MAAM;MAAA;MAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAAC6C,GAAG,CAACX,CAAC,IAAI;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA6C,CAAC,CAACY,MAAM;MAAD,CAAC,CAAC;MAC/C,MAAM8B,iBAAiB;MAAA;MAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACwF,oBAAoB,CAACjC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC;;MAExE,MAAMkC,gBAAgB;MAAA;MAAA,CAAA5F,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC0F,yBAAyB,CAAC/E,aAAa,EAAE4E,iBAAiB,CAAC;MAAC;MAAA1F,cAAA,GAAAG,CAAA;MAC1FyF,gBAAgB,CAACf,IAAI,CAAC,CAACC,CAAC,EAAEvB,CAAC,KAAK;QAAA;QAAAvD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA2E,CAAC,GAAGvB,CAAC;MAAD,CAAC,CAAC;MAEtC,MAAMwB,QAAQ;MAAA;MAAA,CAAA/E,cAAA,GAAAG,CAAA,QAAG6E,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,GAAG3B,eAAe,IAAIsC,gBAAgB,CAACxC,MAAM,CAAC;MAC5E,MAAM0C,UAAU;MAAA;MAAA,CAAA9F,cAAA,GAAAG,CAAA,QAAGyF,gBAAgB,CAACG,KAAK,CAAC,CAAC,EAAEhB,QAAQ,CAAC;MACtD,MAAMzD,iBAAiB;MAAA;MAAA,CAAAtB,cAAA,GAAAG,CAAA,QAAG2F,UAAU,CAAChD,MAAM,CAAC,CAACC,GAAG,EAAEiD,IAAI,KAAK;QAAA;QAAAhG,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAGiD,IAAI;MAAD,CAAC,EAAE,CAAC,CAAC,GAAGF,UAAU,CAAC1C,MAAM;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAE9F,OAAO;QACLkF,gBAAgB,EAAE/B,eAAe;QACjC2C,6BAA6B,EAAEjB,IAAI,CAACI,GAAG,CAAC9D,iBAAiB,CAAC,GAAG,GAAG;QAChE4E,yBAAyB,EAAElB,IAAI,CAACI,GAAG,CAAC9D,iBAAiB,GAAGmC,cAAc,CAAC;QACvEZ,eAAe,EAAEY,cAAc;QAC/B0C,iBAAiB,EAAEL,UAAU,CAAC1C;MAChC,CAAC;IAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAClE,OAAO;QACLkF,gBAAgB,EAAE/B,eAAe;QACjC2C,6BAA6B,EAAE,GAAG;QAClCC,yBAAyB,EAAEpF,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;QAC5GL,eAAe,EAAE/B,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC;QAC1FG,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA,MAAM5B,wBAAwBA,CAACX,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC5C,IAAI;MACF;MACA,MAAMuD,MAAM;MAAA;MAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAAC6C,GAAG,CAACX,CAAC,IAAI;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA6C,CAAC,CAACY,MAAM;MAAD,CAAC,CAAC;MAC/C,MAAMwC,cAAc;MAAA;MAAA,CAAApG,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACkG,mBAAmB,CAAC3C,MAAM,EAAE,GAAG,CAAC;;MAElE;MACA,MAAM4C,eAAe;MAAA;MAAA,CAAAtG,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACoG,kCAAkC,CAACzF,aAAa,EAAEsF,cAAc,CAAC;MAE9F,IAAI5E,WAAW;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,CAAC;MACnB,IAAIqG,IAAI;MAAA;MAAA,CAAAxG,cAAA,GAAAG,CAAA,QAAGmG,eAAe,CAAC,CAAC,CAAC;MAC7B,IAAIG,QAAQ;MAAA;MAAA,CAAAzG,cAAA,GAAAG,CAAA,QAAG,IAAI;MACnB,IAAIuG,UAAU;MAAA;MAAA,CAAA1G,cAAA,GAAAG,CAAA,QAAG,IAAI;MACrB,IAAIwG,oBAAoB;MAAA;MAAA,CAAA3G,cAAA,GAAAG,CAAA,QAAG,IAAI;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEhC,KAAK,IAAIgE,CAAC;MAAA;MAAA,CAAAnE,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAEgE,CAAC,GAAGmC,eAAe,CAAClD,MAAM,EAAEe,CAAC,EAAE,EAAE;QAC/C,MAAMyC,YAAY;QAAA;QAAA,CAAA5G,cAAA,GAAAG,CAAA,QAAGmG,eAAe,CAACnC,CAAC,CAAC,CAAC0C,KAAK;QAC7C,MAAMC,WAAW;QAAA;QAAA,CAAA9G,cAAA,GAAAG,CAAA,QAAGmG,eAAe,CAACnC,CAAC,CAAC,CAAC4C,IAAI;QAAC;QAAA/G,cAAA,GAAAG,CAAA;QAE5C,IAAIyG,YAAY,GAAGJ,IAAI,EAAE;UAAA;UAAAxG,cAAA,GAAAuD,CAAA;UAAAvD,cAAA,GAAAG,CAAA;UACvBqG,IAAI,GAAGI,YAAY;UAAC;UAAA5G,cAAA,GAAAG,CAAA;UACpBsG,QAAQ,GAAGK,WAAW;UAAC;UAAA9G,cAAA,GAAAG,CAAA;UACvBwG,oBAAoB,GAAG,IAAI;QAC7B,CAAC,MAAM;UAAA;UAAA3G,cAAA,GAAAuD,CAAA;UAAAvD,cAAA,GAAAG,CAAA;UACL,IAAI,CAACwG,oBAAoB,EAAE;YAAA;YAAA3G,cAAA,GAAAuD,CAAA;YAAAvD,cAAA,GAAAG,CAAA;YACzBwG,oBAAoB,GAAGF,QAAQ;UACjC,CAAC;UAAA;UAAA;YAAAzG,cAAA,GAAAuD,CAAA;UAAA;UAED,MAAMyD,QAAQ;UAAA;UAAA,CAAAhH,cAAA,GAAAG,CAAA,QAAG,CAACqG,IAAI,GAAGI,YAAY,IAAIJ,IAAI;UAAC;UAAAxG,cAAA,GAAAG,CAAA;UAC9C,IAAI6G,QAAQ,GAAGxF,WAAW,EAAE;YAAA;YAAAxB,cAAA,GAAAuD,CAAA;YAAAvD,cAAA,GAAAG,CAAA;YAC1BqB,WAAW,GAAGwF,QAAQ;YAAC;YAAAhH,cAAA,GAAAG,CAAA;YACvBuG,UAAU,GAAGI,WAAW;UAC1B,CAAC;UAAA;UAAA;YAAA9G,cAAA,GAAAuD,CAAA;UAAA;QACH;MACF;MAAC;MAAAvD,cAAA,GAAAG,CAAA;MAED,OAAO;QACL8G,uBAAuB,EAAEzF,WAAW,GAAG,GAAG;QAC1C0F,SAAS,EAAET,QAAQ;QACnBU,WAAW,EAAET,UAAU;QACvBU,aAAa,EAAE,IAAI,CAACC,qBAAqB,CAACf,eAAe,EAAEG,QAAQ,EAAEC,UAAU,CAAC;QAChFY,gBAAgB,EAAE,IAAI,CAACC,wBAAwB,CAACjB,eAAe;MACjE,CAAC;IAEH,CAAC,CAAC,OAAOjD,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAChE,OAAO;QACL8G,uBAAuB,EAAE,IAAI;QAAE;QAC/B5D,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA1B,0BAA0BA,CAACb,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACxC,IAAI;MACF,MAAMqH,UAAU;MAAA;MAAA,CAAAxH,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;MAAD,CAAC,EAAE,CAAC,CAAC;MAC5F,MAAMuE,OAAO;MAAA;MAAA,CAAAzH,cAAA,GAAAG,CAAA,QAAGW,aAAa,CAAC6C,GAAG,CAACX,CAAC,IAAI;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAC6C,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAa,GAAIsE,UAAU;MAAD,CAAC,CAAC;;MAEnF;MACA,MAAME,GAAG;MAAA;MAAA,CAAA1H,cAAA,GAAAG,CAAA,QAAGsH,OAAO,CAAC3E,MAAM,CAAC,CAACC,GAAG,EAAE2B,MAAM,KAAK;QAAA;QAAA1E,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAGiC,IAAI,CAAC2C,GAAG,CAACjD,MAAM,EAAE,CAAC,CAAC;MAAD,CAAC,EAAE,CAAC,CAAC;;MAEzE;MACA,MAAMkD,aAAa;MAAA;MAAA,CAAA5H,cAAA,GAAAG,CAAA,QAAGsH,OAAO,CAAC5C,IAAI,CAAC,CAACC,CAAC,EAAEvB,CAAC,KAAK;QAAA;QAAAvD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAAoD,CAAC,GAAGuB,CAAC;MAAD,CAAC,CAAC;MACnD,MAAM+C,iBAAiB;MAAA;MAAA,CAAA7H,cAAA,GAAAG,CAAA,QAAGyH,aAAa,CAAC7B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACjD,MAAM,CAAC,CAACC,GAAG,EAAE+E,CAAC,KAAK;QAAA;QAAA9H,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAG+E,CAAC;MAAD,CAAC,EAAE,CAAC,CAAC;MAClF,MAAMC,iBAAiB;MAAA;MAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAGyH,aAAa,CAAC7B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACjD,MAAM,CAAC,CAACC,GAAG,EAAE+E,CAAC,KAAK;QAAA;QAAA9H,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAG+E,CAAC;MAAD,CAAC,EAAE,CAAC,CAAC;;MAElF;MACA,MAAME,kBAAkB;MAAA;MAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACiD,GAAG,CAAC,GAAG,EAAEP,GAAG,GAAG,GAAG,GAAGG,iBAAiB,GAAG,EAAE,CAAC;MAAC;MAAA7H,cAAA,GAAAG,CAAA;MAE7E,OAAO;QACL+H,gBAAgB,EAAER,GAAG;QACrBS,mBAAmB,EAAEN,iBAAiB,GAAG,GAAG;QAC5CO,mBAAmB,EAAEL,iBAAiB,GAAG,GAAG;QAC5CM,mBAAmB,EAAEL,kBAAkB;QACvCM,UAAU,EAAEN,kBAAkB,GAAG,EAAE;QAAA;QAAA,CAAAhI,cAAA,GAAAuD,CAAA,UAAG,MAAM;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,UAAGyE,kBAAkB,GAAG,EAAE;QAAA;QAAA,CAAAhI,cAAA,GAAAuD,CAAA,UAAG,QAAQ;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,UAAG,KAAK;QACzFgF,sBAAsB,EAAEX,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG;QAC9CY,kBAAkB,EAAE1H,aAAa,CAACsC;MACpC,CAAC;IAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAClE,OAAO;QACLkI,mBAAmB,EAAE,EAAE;QACvBC,UAAU,EAAE,QAAQ;QACpBjF,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA,MAAMxB,sBAAsBA,CAACf,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC1C,IAAI;MACF,MAAMsI,eAAe;MAAA;MAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAG,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAE3B,KAAK,MAAMqE,OAAO,IAAI1D,aAAa,EAAE;QACnC;QACA,MAAM4H,UAAU;QAAA;QAAA,CAAA1I,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACwI,aAAa,CAACnE,OAAO,CAACZ,MAAM,CAAC;QAC3D,MAAMgF,SAAS;QAAA;QAAA,CAAA5I,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC0I,YAAY,CAACrE,OAAO,CAACZ,MAAM,CAAC;;QAEzD;QACA,MAAMkF,cAAc;QAAA;QAAA,CAAA9I,cAAA,GAAAG,CAAA;QAAG;QAAA,CAAAH,cAAA,GAAAuD,CAAA,UAAAmF,UAAU,CAACK,cAAc;QAAA;QAAA,CAAA/I,cAAA,GAAAuD,CAAA,UAAI,OAAO;QAC3D,MAAMyF,aAAa;QAAA;QAAA,CAAAhJ,cAAA,GAAAG,CAAA,SAAGqE,OAAO,CAACvB,QAAQ,GAAGuB,OAAO,CAACtB,aAAa;QAC9D,MAAM+F,WAAW;QAAA;QAAA,CAAAjJ,cAAA,GAAAG,CAAA,SAAG6I,aAAa,GAAGF,cAAc;;QAElD;QACA,MAAMI,eAAe;QAAA;QAAA,CAAAlJ,cAAA,GAAAG,CAAA,SAAGyI,SAAS,GAAG,IAAI;QAAA;QAAA,CAAA5I,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGqF,SAAS,GAAG,GAAG;QAAA;QAAA,CAAA5I,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,GAAG;;QAE5E;QACA,MAAM4F,cAAc;QAAA;QAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACiJ,QAAQ,CAAC5E,OAAO,CAACZ,MAAM,CAAC;QAAA;QAAA,CAAA5D,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAEjF,MAAM8F,cAAc;QAAA;QAAA,CAAArJ,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACsE,GAAG,CAAC,CAAC,EAAE,GAAG,GAAIL,WAAW,GAAG,GAAI,CAAC,GAAGC,eAAe,GAAGC,cAAc;QAAC;QAAAnJ,cAAA,GAAAG,CAAA;QAEjGsI,eAAe,CAAC7D,IAAI,CAAC;UACnBhB,MAAM,EAAEY,OAAO,CAACZ,MAAM;UACtB2F,eAAe,EAAEF,cAAc;UAC/BG,YAAY,EAAEP,WAAW;UACzBQ,cAAc,EAAET,aAAa;UAC7BU,gBAAgB,EAAEZ,cAAc;UAChCa,mBAAmB,EAAE3E,IAAI,CAACsE,GAAG,CAAC,CAAC,EAAEL,WAAW,GAAG,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC;MACJ;MAEA,MAAMW,iBAAiB;MAAA;MAAA,CAAA5J,cAAA,GAAAG,CAAA,SAAGsI,eAAe,CAAC3F,MAAM,CAAC,CAACC,GAAG,EAAE8G,EAAE,KAAK;QAAA;QAAA7J,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAG8G,EAAE,CAACN,eAAe;MAAD,CAAC,EAAE,CAAC,CAAC,GAAGd,eAAe,CAACrF,MAAM;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAEpH,OAAO;QACL2J,uBAAuB,EAAEF,iBAAiB;QAC1CtB,UAAU,EAAEsB,iBAAiB,GAAG,EAAE;QAAA;QAAA,CAAA5J,cAAA,GAAAuD,CAAA,WAAG,KAAK;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGqG,iBAAiB,GAAG,EAAE;QAAA;QAAA,CAAA5J,cAAA,GAAAuD,CAAA,WAAG,QAAQ;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,MAAM;QACvFwG,eAAe,EAAEtB,eAAe;QAChCuB,kBAAkB,EAAEvB,eAAe,CAACwB,MAAM,CAACJ,EAAE,IAAI;UAAA;UAAA7J,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA0J,EAAE,CAACN,eAAe,GAAG,EAAE;QAAD,CAAC;MAC1E,CAAC;IAEH,CAAC,CAAC,OAAOlG,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAC9D,OAAO;QACL2J,uBAAuB,EAAE,EAAE;QAC3BxB,UAAU,EAAE,QAAQ;QACpBjF,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA,MAAMtB,wBAAwBA,CAACjB,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC5C,IAAI;MACF,MAAMuD,MAAM;MAAA;MAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAGW,aAAa,CAAC6C,GAAG,CAACX,CAAC,IAAI;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA6C,CAAC,CAACY,MAAM;MAAD,CAAC,CAAC;MAC/C,MAAMG,iBAAiB;MAAA;MAAA,CAAA/D,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC6D,oBAAoB,CAACN,MAAM,CAAC;;MAEjE;MACA,IAAIwG,iBAAiB;MAAA;MAAA,CAAAlK,cAAA,GAAAG,CAAA,SAAG,CAAC;MACzB,IAAIgK,gBAAgB;MAAA;MAAA,CAAAnK,cAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEzB,KAAK,IAAIgE,CAAC;MAAA;MAAA,CAAAnE,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAEgE,CAAC,GAAGT,MAAM,CAACN,MAAM,EAAEe,CAAC,EAAE,EAAE;QAAA;QAAAnE,cAAA,GAAAG,CAAA;QACtC,KAAK,IAAIiK,CAAC;QAAA;QAAA,CAAApK,cAAA,GAAAG,CAAA,SAAGgE,CAAC,GAAG,CAAC,GAAEiG,CAAC,GAAG1G,MAAM,CAACN,MAAM,EAAEgH,CAAC,EAAE,EAAE;UAC1C,MAAMC,WAAW;UAAA;UAAA,CAAArK,cAAA,GAAAG,CAAA;UAAG;UAAA,CAAAH,cAAA,GAAAuD,CAAA,WAAAQ,iBAAiB,CAACL,MAAM,CAACS,CAAC,CAAC,CAAC,GAAGT,MAAM,CAAC0G,CAAC,CAAC,CAAC;UAAA;UAAA,CAAApK,cAAA,GAAAuD,CAAA,WAAI,GAAG;UAAC;UAAAvD,cAAA,GAAAG,CAAA;UACrE+J,iBAAiB,IAAIlF,IAAI,CAACI,GAAG,CAACiF,WAAW,CAAC;UAAC;UAAArK,cAAA,GAAAG,CAAA;UAC3CgK,gBAAgB,EAAE;QACpB;MACF;MAEA,MAAMG,cAAc;MAAA;MAAA,CAAAtK,cAAA,GAAAG,CAAA,SAAGgK,gBAAgB,GAAG,CAAC;MAAA;MAAA,CAAAnK,cAAA,GAAAuD,CAAA,WAAG2G,iBAAiB,GAAGC,gBAAgB;MAAA;MAAA,CAAAnK,cAAA,GAAAuD,CAAA,WAAG,CAAC;;MAEtF;MACA,MAAMgH,oBAAoB;MAAA;MAAA,CAAAvK,cAAA,GAAAG,CAAA,SAAG,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAChC,KAAK,IAAIgE,CAAC;MAAA;MAAA,CAAAnE,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAEgE,CAAC,GAAGT,MAAM,CAACN,MAAM,EAAEe,CAAC,EAAE,EAAE;QAAA;QAAAnE,cAAA,GAAAG,CAAA;QACtC,KAAK,IAAIiK,CAAC;QAAA;QAAA,CAAApK,cAAA,GAAAG,CAAA,SAAGgE,CAAC,GAAG,CAAC,GAAEiG,CAAC,GAAG1G,MAAM,CAACN,MAAM,EAAEgH,CAAC,EAAE,EAAE;UAC1C,MAAMC,WAAW;UAAA;UAAA,CAAArK,cAAA,GAAAG,CAAA;UAAG;UAAA,CAAAH,cAAA,GAAAuD,CAAA,WAAAQ,iBAAiB,CAACL,MAAM,CAACS,CAAC,CAAC,CAAC,GAAGT,MAAM,CAAC0G,CAAC,CAAC,CAAC;UAAA;UAAA,CAAApK,cAAA,GAAAuD,CAAA,WAAI,GAAG;UAAC;UAAAvD,cAAA,GAAAG,CAAA;UACrE,IAAI6E,IAAI,CAACI,GAAG,CAACiF,WAAW,CAAC,GAAG,GAAG,EAAE;YAAA;YAAArK,cAAA,GAAAuD,CAAA;YAAAvD,cAAA,GAAAG,CAAA;YAC/BoK,oBAAoB,CAAC3F,IAAI,CAAC;cACxB4F,MAAM,EAAE9G,MAAM,CAACS,CAAC,CAAC;cACjBsG,MAAM,EAAE/G,MAAM,CAAC0G,CAAC,CAAC;cACjBC,WAAW,EAAEA;YACf,CAAC,CAAC;UACJ,CAAC;UAAA;UAAA;YAAArK,cAAA,GAAAuD,CAAA;UAAA;QACH;MACF;MAEA,MAAMmH,oBAAoB;MAAA;MAAA,CAAA1K,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACiD,GAAG,CAAC,GAAG,EAAEqC,cAAc,GAAG,GAAG,GAAGC,oBAAoB,CAACnH,MAAM,GAAG,EAAE,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAEpG,OAAO;QACLwK,mBAAmB,EAAEL,cAAc;QACnCM,sBAAsB,EAAEF,oBAAoB;QAC5CpC,UAAU,EAAEoC,oBAAoB,GAAG,EAAE;QAAA;QAAA,CAAA1K,cAAA,GAAAuD,CAAA,WAAG,MAAM;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGmH,oBAAoB,GAAG,EAAE;QAAA;QAAA,CAAA1K,cAAA,GAAAuD,CAAA,WAAG,QAAQ;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,KAAK;QAC7FsH,sBAAsB,EAAEN,oBAAoB;QAC5CO,uBAAuB,EAAE9F,IAAI,CAACsE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGgB,cAAc,IAAI,GAAG;MACjE,CAAC;IAEH,CAAC,CAAC,OAAOjH,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAChE,OAAO;QACLwK,mBAAmB,EAAE,GAAG;QAAE;QAC1BC,sBAAsB,EAAE,EAAE;QAC1BtC,UAAU,EAAE,QAAQ;QACpBjF,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACA,MAAMhB,kBAAkBA,CAACvB,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACtC,IAAI;MACF,MAAMyG,YAAY;MAAA;MAAA,CAAA5G,cAAA,GAAAG,CAAA,SAAGW,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;QAAA;QAAAhD,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;MAAD,CAAC,EAAE,CAAC,CAAC;MAE9F,MAAM6H,eAAe;MAAA;MAAA,CAAA/K,cAAA,GAAAG,CAAA,SAAG,CACtB;QACE6K,IAAI,EAAE,2BAA2B;QACjCC,WAAW,EAAE,qBAAqB;QAClCC,UAAU,EAAE,CAAC,IAAI;QACjBC,cAAc,EAAE,CAAC;MACnB,CAAC,EACD;QACEH,IAAI,EAAE,sBAAsB;QAC5BC,WAAW,EAAE,+BAA+B;QAC5CC,UAAU,EAAE,CAAC,IAAI;QACjBC,cAAc,EAAE,CAAC;MACnB,CAAC,EACD;QACEH,IAAI,EAAE,eAAe;QACrBC,WAAW,EAAE,gCAAgC;QAC7CC,UAAU,EAAE,CAAC,IAAI;QACjBC,cAAc,EAAE,CAAC;MACnB,CAAC,EACD;QACEH,IAAI,EAAE,iBAAiB;QACvBC,WAAW,EAAE,8BAA8B;QAC3CC,UAAU,EAAE,CAAC,IAAI;QACjBC,cAAc,EAAE,CAAC;MACnB,CAAC,EACD;QACEH,IAAI,EAAE,wBAAwB;QAC9BC,WAAW,EAAE,yBAAyB;QACtCC,UAAU,EAAE,CAAC,IAAI;QACjBC,cAAc,EAAE,CAAC;MACnB,CAAC,CACF;MAED,MAAMC,aAAa;MAAA;MAAA,CAAApL,cAAA,GAAAG,CAAA,SAAG4K,eAAe,CAACpH,GAAG,CAAC0H,QAAQ,IAAI;QAAA;QAAArL,cAAA,GAAAY,CAAA;QACpD,IAAI0K,aAAa;QAAA;QAAA,CAAAtL,cAAA,GAAAG,CAAA,SAAG,CAAC;QAAC;QAAAH,cAAA,GAAAG,CAAA;QAEtBW,aAAa,CAACyD,OAAO,CAACC,OAAO,IAAI;UAAA;UAAAxE,cAAA,GAAAY,CAAA;UAC/B,MAAM2K,mBAAmB;UAAA;UAAA,CAAAvL,cAAA,GAAAG,CAAA,SAAGqE,OAAO,CAACvB,QAAQ,GAAGuB,OAAO,CAACtB,aAAa;UACpE,IAAIsI,WAAW;UAAA;UAAA,CAAAxL,cAAA,GAAAG,CAAA,SAAGqE,OAAO,CAACtB,aAAa;UAAC;UAAAlD,cAAA,GAAAG,CAAA;UAExC,IAAIqE,OAAO,CAACZ,MAAM,KAAK,KAAK,EAAE;YAAA;YAAA5D,cAAA,GAAAuD,CAAA;YAAAvD,cAAA,GAAAG,CAAA;YAC5BqL,WAAW,IAAK,CAAC,GAAGH,QAAQ,CAACH,UAAW;UAC1C,CAAC,MAAM;YAAA;YAAAlL,cAAA,GAAAuD,CAAA;YAAAvD,cAAA,GAAAG,CAAA;YAAA,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAACiJ,QAAQ,CAAC5E,OAAO,CAACZ,MAAM,CAAC,EAAE;cAAA;cAAA5D,cAAA,GAAAuD,CAAA;cAAAvD,cAAA,GAAAG,CAAA;cAC5D;cACA;cAAI;cAAA,CAAAH,cAAA,GAAAuD,CAAA,WAAA8H,QAAQ,CAACL,IAAI,CAAC5B,QAAQ,CAAC,QAAQ,CAAC;cAAA;cAAA,CAAApJ,cAAA,GAAAuD,CAAA,WAAIiB,OAAO,CAACZ,MAAM,KAAK,MAAM,GAAE;gBAAA;gBAAA5D,cAAA,GAAAuD,CAAA;gBAAAvD,cAAA,GAAAG,CAAA;gBACjEqL,WAAW,IAAI,GAAG,CAAC,CAAC;cACtB,CAAC;cAAA;cAAA;gBAAAxL,cAAA,GAAAuD,CAAA;cAAA;YACH,CAAC,MAAM;cAAA;cAAAvD,cAAA,GAAAuD,CAAA;cAAAvD,cAAA,GAAAG,CAAA;cACL;cACAqL,WAAW,IAAK,CAAC,GAAGH,QAAQ,CAACF,cAAe;YAC9C;UAAA;UAAC;UAAAnL,cAAA,GAAAG,CAAA;UAEDmL,aAAa,IAAI9G,OAAO,CAACvB,QAAQ,GAAG+B,IAAI,CAACsE,GAAG,CAAC,CAAC,EAAEkC,WAAW,CAAC;QAC9D,CAAC,CAAC;QAEF,MAAMxF,IAAI;QAAA;QAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAGyG,YAAY,GAAG0E,aAAa;QACzC,MAAMG,cAAc;QAAA;QAAA,CAAAzL,cAAA,GAAAG,CAAA,SAAI6F,IAAI,GAAGY,YAAY,GAAI,GAAG;QAAC;QAAA5G,cAAA,GAAAG,CAAA;QAEnD,OAAO;UACLkL,QAAQ,EAAEA,QAAQ,CAACL,IAAI;UACvBC,WAAW,EAAEI,QAAQ,CAACJ,WAAW;UACjCS,qBAAqB,EAAEJ,aAAa;UACpCK,WAAW,EAAE3F,IAAI;UACjB4F,eAAe,EAAEH,cAAc;UAC/BI,QAAQ,EAAEJ,cAAc,GAAG,EAAE;UAAA;UAAA,CAAAzL,cAAA,GAAAuD,CAAA,WAAG,QAAQ;UAAA;UAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGkI,cAAc,GAAG,EAAE;UAAA;UAAA,CAAAzL,cAAA,GAAAuD,CAAA,WAAG,MAAM;UAAA;UAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,UAAU;QACtF,CAAC;MACH,CAAC,CAAC;MAAC;MAAAvD,cAAA,GAAAG,CAAA;MAEH,OAAO;QACL2L,uBAAuB,EAAElF,YAAY;QACrCmF,YAAY,EAAEX,aAAa;QAC3BY,mBAAmB,EAAEZ,aAAa,CAACtI,MAAM,CAAC,CAACmJ,KAAK,EAAEC,OAAO,KACvD;UAAA;UAAAlM,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA+L,OAAO,CAACN,eAAe,GAAGK,KAAK,CAACL,eAAe;UAAA;UAAA,CAAA5L,cAAA,GAAAuD,CAAA,WAAG2I,OAAO;UAAA;UAAA,CAAAlM,cAAA,GAAAuD,CAAA,WAAG0I,KAAK;QAAD,CAClE,CAAC;QACDE,YAAY,EAAEf,aAAa,CAACtI,MAAM,CAAC,CAACC,GAAG,EAAEqJ,IAAI,KAAK;UAAA;UAAApM,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAGqJ,IAAI,CAACR,eAAe;QAAD,CAAC,EAAE,CAAC,CAAC,GAAGR,aAAa,CAAChI;MACnG,CAAC;IAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAClD,OAAO;QACL2L,uBAAuB,EAAEhL,aAAa,CAACgC,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UAAA;UAAAhD,cAAA,GAAAY,CAAA;UAAAZ,cAAA,GAAAG,CAAA;UAAA,OAAA4C,GAAG,GAAIC,CAAC,CAACC,QAAQ,GAAGD,CAAC,CAACE,aAAc;QAAD,CAAC,EAAE,CAAC,CAAC;QAClGG,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACAZ,yBAAyBA,CAACtB,WAAW,EAAE;IAAA;IAAAnB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACrC,IAAI;MACF,IAAIkM,SAAS;MAAA;MAAA,CAAArM,cAAA,GAAAG,CAAA,SAAG,CAAC;MACjB,IAAImM,SAAS;MAAA;MAAA,CAAAtM,cAAA,GAAAG,CAAA,SAAG,CAAC;;MAEjB;MACA,MAAMsH,OAAO;MAAA;MAAA,CAAAzH,cAAA,GAAAG,CAAA,SAAG;QACdiB,GAAG,EAAE,IAAI;QACTmL,aAAa,EAAE,IAAI;QACnBC,SAAS,EAAE,IAAI;QACfnC,WAAW,EAAE,IAAI;QACjB7I,WAAW,EAAE,IAAI;QACjBiL,aAAa,EAAE;MACjB,CAAC;;MAED;MAAA;MAAAzM,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACC,GAAG,EAAEmE,cAAc,EAAE;QAAA;QAAAvF,cAAA,GAAAuD,CAAA;QACnC,MAAMmJ,QAAQ;QAAA;QAAA,CAAA1M,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACiD,GAAG,CAAC,GAAG,EAAE9G,WAAW,CAACC,GAAG,CAACmE,cAAc,GAAG,EAAE,CAAC;QAAC;QAAAvF,cAAA,GAAAG,CAAA;QACpEkM,SAAS,IAAIK,QAAQ,GAAGjF,OAAO,CAACrG,GAAG;QAAC;QAAApB,cAAA,GAAAG,CAAA;QACpCmM,SAAS,IAAI7E,OAAO,CAACrG,GAAG;MAC1B,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACO,iBAAiB,EAAE2G,mBAAmB,EAAE;QAAA;QAAArI,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QACtDkM,SAAS,IAAIlL,WAAW,CAACO,iBAAiB,CAAC2G,mBAAmB,GAAGZ,OAAO,CAAC8E,aAAa;QAAC;QAAAvM,cAAA,GAAAG,CAAA;QACvFmM,SAAS,IAAI7E,OAAO,CAAC8E,aAAa;MACpC,CAAC;MAAA;MAAA;QAAAvM,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACS,aAAa,EAAEkI,uBAAuB,EAAE;QAAA;QAAA9J,cAAA,GAAAuD,CAAA;QACtD,MAAM8F,cAAc;QAAA;QAAA,CAAArJ,cAAA,GAAAG,CAAA,SAAG,GAAG,GAAGgB,WAAW,CAACS,aAAa,CAACkI,uBAAuB,EAAC,CAAC;QAAA;QAAA9J,cAAA,GAAAG,CAAA;QAChFkM,SAAS,IAAIhD,cAAc,GAAG5B,OAAO,CAAC+E,SAAS;QAAC;QAAAxM,cAAA,GAAAG,CAAA;QAChDmM,SAAS,IAAI7E,OAAO,CAAC+E,SAAS;MAChC,CAAC;MAAA;MAAA;QAAAxM,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACW,eAAe,EAAE8I,sBAAsB,EAAE;QAAA;QAAA5K,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QACvDkM,SAAS,IAAIlL,WAAW,CAACW,eAAe,CAAC8I,sBAAsB,GAAGnD,OAAO,CAAC4C,WAAW;QAAC;QAAArK,cAAA,GAAAG,CAAA;QACtFmM,SAAS,IAAI7E,OAAO,CAAC4C,WAAW;MAClC,CAAC;MAAA;MAAA;QAAArK,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACK,WAAW,EAAEyF,uBAAuB,EAAE;QAAA;QAAAjH,cAAA,GAAAuD,CAAA;QACpD,MAAMoJ,aAAa;QAAA;QAAA,CAAA3M,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACiD,GAAG,CAAC,GAAG,EAAE9G,WAAW,CAACK,WAAW,CAACyF,uBAAuB,GAAG,CAAC,CAAC;QAAC;QAAAjH,cAAA,GAAAG,CAAA;QACzFkM,SAAS,IAAIM,aAAa,GAAGlF,OAAO,CAACjG,WAAW;QAAC;QAAAxB,cAAA,GAAAG,CAAA;QACjDmM,SAAS,IAAI7E,OAAO,CAACjG,WAAW;MAClC,CAAC;MAAA;MAAA;QAAAxB,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACiB,WAAW,EAAE+J,YAAY,EAAE;QAAA;QAAAnM,cAAA,GAAAuD,CAAA;QACzC,MAAMqJ,WAAW;QAAA;QAAA,CAAA5M,cAAA,GAAAG,CAAA,SAAG6E,IAAI,CAACiD,GAAG,CAAC,GAAG,EAAE9G,WAAW,CAACiB,WAAW,CAAC+J,YAAY,CAAC;QAAC;QAAAnM,cAAA,GAAAG,CAAA;QACxEkM,SAAS,IAAIO,WAAW,GAAGnF,OAAO,CAACgF,aAAa;QAAC;QAAAzM,cAAA,GAAAG,CAAA;QACjDmM,SAAS,IAAI7E,OAAO,CAACgF,aAAa;MACpC,CAAC;MAAA;MAAA;QAAAzM,cAAA,GAAAuD,CAAA;MAAA;MAED,MAAMsJ,eAAe;MAAA;MAAA,CAAA7M,cAAA,GAAAG,CAAA,SAAGmM,SAAS,GAAG,CAAC;MAAA;MAAA,CAAAtM,cAAA,GAAAuD,CAAA,WAAG8I,SAAS,GAAGC,SAAS;MAAA;MAAA,CAAAtM,cAAA,GAAAuD,CAAA,WAAG,EAAE;MAAC;MAAAvD,cAAA,GAAAG,CAAA;MAEnE,OAAO;QACL2M,aAAa,EAAE9H,IAAI,CAAC+H,KAAK,CAACF,eAAe,CAAC;QAC1CvE,UAAU,EAAEuE,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,MAAM;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGsJ,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,QAAQ;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,KAAK;QACnFyJ,UAAU,EAAEH,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGsJ,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WACxDsJ,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGsJ,eAAe,GAAG,EAAE;QAAA;QAAA,CAAA7M,cAAA,GAAAuD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,GAAG;QACxE0J,UAAU,EAAE;UACVC,gBAAgB,EAAE;UAAC;UAAA,CAAAlN,cAAA,GAAAuD,CAAA,WAAApC,WAAW,CAACC,GAAG,EAAEmE,cAAc;UAAA;UAAA,CAAAvF,cAAA,GAAAuD,CAAA,WAAI,CAAC,KAAIkE,OAAO,CAACrG,GAAG;UACtE+L,0BAA0B,EAAE;UAAC;UAAA,CAAAnN,cAAA,GAAAuD,CAAA,WAAApC,WAAW,CAACO,iBAAiB,EAAE2G,mBAAmB;UAAA;UAAA,CAAArI,cAAA,GAAAuD,CAAA,WAAI,CAAC,KAAIkE,OAAO,CAAC8E,aAAa;UAC7Ga,sBAAsB,EAAE,CAAC,GAAG;UAAI;UAAA,CAAApN,cAAA,GAAAuD,CAAA,WAAApC,WAAW,CAACS,aAAa,EAAEkI,uBAAuB;UAAA;UAAA,CAAA9J,cAAA,GAAAuD,CAAA,WAAI,EAAE,EAAC,IAAIkE,OAAO,CAAC+E,SAAS;UAC9Ga,wBAAwB,EAAE;UAAC;UAAA,CAAArN,cAAA,GAAAuD,CAAA,WAAApC,WAAW,CAACW,eAAe,EAAE8I,sBAAsB;UAAA;UAAA,CAAA5K,cAAA,GAAAuD,CAAA,WAAI,CAAC,KAAIkE,OAAO,CAAC4C;QACjG;MACF,CAAC;IAEH,CAAC,CAAC,OAAOhH,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MAClE,OAAO;QACL2M,aAAa,EAAE,EAAE;QACjBxE,UAAU,EAAE,QAAQ;QACpB0E,UAAU,EAAE,GAAG;QACf3J,KAAK,EAAE;MACT,CAAC;IACH;EACF;;EAEA;EACAV,2BAA2BA,CAACxB,WAAW,EAAEL,aAAa,EAAE;IAAA;IAAAd,cAAA,GAAAY,CAAA;IACtD,MAAM8B,eAAe;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAE3B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF;MACA,IAAIgB,WAAW,CAACC,GAAG,EAAEmE,cAAc,GAAG,EAAE,EAAE;QAAA;QAAAvF,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QACxCuC,eAAe,CAACkC,IAAI,CAAC;UACnB0I,IAAI,EAAE,gBAAgB;UACtBC,QAAQ,EAAE,MAAM;UAChBC,KAAK,EAAE,6BAA6B;UACpCvC,WAAW,EAAE,oBAAoB9J,WAAW,CAACC,GAAG,CAACmE,cAAc,CAACkI,OAAO,CAAC,CAAC,CAAC,qCAAqC;UAC/GC,OAAO,EAAE,CACP,kCAAkC,EAClC,4BAA4B,EAC5B,8BAA8B;QAElC,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA1N,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACO,iBAAiB,EAAE2G,mBAAmB,GAAG,EAAE,EAAE;QAAA;QAAArI,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QAC3DuC,eAAe,CAACkC,IAAI,CAAC;UACnB0I,IAAI,EAAE,iBAAiB;UACvBC,QAAQ,EAAE,MAAM;UAChBC,KAAK,EAAE,8BAA8B;UACrCvC,WAAW,EAAE,iDAAiD;UAC9DyC,OAAO,EAAE,CACP,+BAA+BvM,WAAW,CAACO,iBAAiB,CAAC6G,sBAAsB,EAAEkF,OAAO,CAAC,CAAC,CAAC,GAAG,EAClG,8BAA8B,EAC9B,uCAAuC;QAE3C,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAzN,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACS,aAAa,EAAE0G,UAAU,KAAK,MAAM,EAAE;QAAA;QAAAtI,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QACpDuC,eAAe,CAACkC,IAAI,CAAC;UACnB0I,IAAI,EAAE,WAAW;UACjBC,QAAQ,EAAE,QAAQ;UAClBC,KAAK,EAAE,yBAAyB;UAChCvC,WAAW,EAAE,iDAAiD;UAC9DyC,OAAO,EAAE,CACP,2CAA2C,EAC3C,qCAAqC,EACrC,0CAA0C;QAE9C,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA1N,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACW,eAAe,EAAE6I,mBAAmB,GAAG,GAAG,EAAE;QAAA;QAAA3K,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QAC1DuC,eAAe,CAACkC,IAAI,CAAC;UACnB0I,IAAI,EAAE,aAAa;UACnBC,QAAQ,EAAE,QAAQ;UAClBC,KAAK,EAAE,wBAAwB;UAC/BvC,WAAW,EAAE,iEAAiE;UAC9EyC,OAAO,EAAE,CACP,mCAAmC,EACnC,2CAA2C,EAC3C,wCAAwC;QAE5C,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA1N,cAAA,GAAAuD,CAAA;MAAA;;MAED;MAAAvD,cAAA,GAAAG,CAAA;MACA,IAAIgB,WAAW,CAACiB,WAAW,EAAE4J,mBAAmB,EAAEJ,eAAe,GAAG,EAAE,EAAE;QAAA;QAAA5L,cAAA,GAAAuD,CAAA;QAAAvD,cAAA,GAAAG,CAAA;QACtEuC,eAAe,CAACkC,IAAI,CAAC;UACnB0I,IAAI,EAAE,gBAAgB;UACtBC,QAAQ,EAAE,MAAM;UAChBC,KAAK,EAAE,8BAA8B;UACrCvC,WAAW,EAAE,6BAA6B9J,WAAW,CAACiB,WAAW,CAAC4J,mBAAmB,CAACJ,eAAe,CAAC6B,OAAO,CAAC,CAAC,CAAC,QAAQ;UACxHC,OAAO,EAAE,CACP,8BAA8B,EAC9B,8BAA8B,EAC9B,kCAAkC;QAEtC,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA1N,cAAA,GAAAuD,CAAA;MAAA;MAAAvD,cAAA,GAAAG,CAAA;MAED,OAAOuC,eAAe;IAExB,CAAC,CAAC,OAAOW,KAAK,EAAE;MAAA;MAAArD,cAAA,GAAAG,CAAA;MACd,IAAI,CAACM,MAAM,CAAC4C,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAAC;MAAArD,cAAA,GAAAG,CAAA;MACnE,OAAO,CAAC;QACNmN,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,KAAK;QACfC,KAAK,EAAE,yBAAyB;QAChCvC,WAAW,EAAE,uDAAuD;QACpEyC,OAAO,EAAE,CAAC,0BAA0B,EAAE,sBAAsB,EAAE,oBAAoB;MACpF,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,MAAM5J,yBAAyBA,CAACJ,MAAM,EAAE;IAAA;IAAA1D,cAAA,GAAAY,CAAA;IACtC;IACA,MAAMiD,YAAY;IAAA;IAAA,CAAA7D,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACxBuD,MAAM,CAACa,OAAO,CAACoJ,KAAK,IAAI;MAAA;MAAA3N,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACtB0D,YAAY,CAAC8J,KAAK,CAAC,GAAGA,KAAK,KAAK,KAAK;MAAA;MAAA,CAAA3N,cAAA,GAAAuD,CAAA,WAAG,IAAI;MAAA;MAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGoK,KAAK,KAAK,KAAK;MAAA;MAAA,CAAA3N,cAAA,GAAAuD,CAAA,WAAG,IAAI;MAAA;MAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,IAAI,GAAC,CAAC;IAChF,CAAC,CAAC;IAAC;IAAAvD,cAAA,GAAAG,CAAA;IACH,OAAO0D,YAAY;EACrB;EAEA,MAAMG,oBAAoBA,CAACN,MAAM,EAAE;IAAA;IAAA1D,cAAA,GAAAY,CAAA;IACjC;IACA,MAAMgN,MAAM;IAAA;IAAA,CAAA5N,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAClBuD,MAAM,CAACa,OAAO,CAACiG,MAAM,IAAI;MAAA;MAAAxK,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACvByN,MAAM,CAACpD,MAAM,CAAC,GAAG,CAAC,CAAC;MAAC;MAAAxK,cAAA,GAAAG,CAAA;MACpBuD,MAAM,CAACa,OAAO,CAACkG,MAAM,IAAI;QAAA;QAAAzK,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAG,CAAA;QACvB,IAAIqK,MAAM,KAAKC,MAAM,EAAE;UAAA;UAAAzK,cAAA,GAAAuD,CAAA;UAAAvD,cAAA,GAAAG,CAAA;UACrByN,MAAM,CAACpD,MAAM,CAAC,CAACC,MAAM,CAAC,GAAG,GAAG;QAC9B,CAAC,MAAM;UAAA;UAAAzK,cAAA,GAAAuD,CAAA;UAAAvD,cAAA,GAAAG,CAAA;UACL;UACAyN,MAAM,CAACpD,MAAM,CAAC,CAACC,MAAM,CAAC,GAAG,GAAG,GAAGzF,IAAI,CAAC6I,MAAM,CAAC,CAAC,GAAG,GAAG;QACpD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAAC;IAAA7N,cAAA,GAAAG,CAAA;IACH,OAAOyN,MAAM;EACf;EAEAtJ,yBAAyBA,CAACZ,MAAM,EAAEG,YAAY,EAAEE,iBAAiB,EAAE;IAAA;IAAA/D,cAAA,GAAAY,CAAA;IACjE;IACA,MAAMkN,OAAO;IAAA;IAAA,CAAA9N,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACnBuD,MAAM,CAACa,OAAO,CAACoJ,KAAK,IAAI;MAAA;MAAA3N,cAAA,GAAAY,CAAA;MACtB,MAAMmN,UAAU;MAAA;MAAA,CAAA/N,cAAA,GAAAG,CAAA,SAAG,CAAC6E,IAAI,CAAC6I,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAGhK,YAAY,CAAC8J,KAAK,CAAC,EAAC,CAAC;MAAA;MAAA3N,cAAA,GAAAG,CAAA;MACpE2N,OAAO,CAACH,KAAK,CAAC,GAAGI,UAAU;IAC7B,CAAC,CAAC;IAAC;IAAA/N,cAAA,GAAAG,CAAA;IACH,OAAO2N,OAAO;EAChB;EAEA,MAAMnF,aAAaA,CAAC/E,MAAM,EAAE;IAAA;IAAA5D,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC1B;IACA,OAAO;MACL4I,cAAc,EAAEnF,MAAM,KAAK,KAAK;MAAA;MAAA,CAAA5D,cAAA,GAAAuD,CAAA,WAAG,WAAW;MAAA;MAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAGK,MAAM,KAAK,KAAK;MAAA;MAAA,CAAA5D,cAAA,GAAAuD,CAAA,WAAG,WAAW;MAAA;MAAA,CAAAvD,cAAA,GAAAuD,CAAA,WAAG,UAAU;IAC9F,CAAC;EACH;EAEA,MAAMsF,YAAYA,CAACjF,MAAM,EAAE;IAAA;IAAA5D,cAAA,GAAAY,CAAA;IACzB;IACA,MAAMoN,UAAU;IAAA;IAAA,CAAAhO,cAAA,GAAAG,CAAA,SAAG;MACjB,KAAK,EAAE,YAAY;MACnB,KAAK,EAAE,YAAY;MACnB,KAAK,EAAE;IACT,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACF,OAAO,2BAAAH,cAAA,GAAAuD,CAAA,WAAAyK,UAAU,CAACpK,MAAM,CAAC;IAAA;IAAA,CAAA5D,cAAA,GAAAuD,CAAA,WAAI,UAAU;EACzC;AACF;;AAEA;AACA,MAAM0K,UAAU;AAAA;AAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAG,IAAIO,gBAAgB,CAAC,CAAC;;AAEzC;AAAA;AAAAV,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC6N,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAApO,cAAA,GAAAY,CAAA;EACnD,MAAMI,SAAS;EAAA;EAAA,CAAAhB,cAAA,GAAAG,CAAA,SAAGc,IAAI,CAACC,GAAG,CAAC,CAAC;EAC5B,MAAMmN,aAAa;EAAA;EAAA,CAAArO,cAAA,GAAAG,CAAA;EAAG;EAAA,CAAAH,cAAA,GAAAuD,CAAA,WAAA4K,GAAG,CAACE,aAAa;EAAA;EAAA,CAAArO,cAAA,GAAAuD,CAAA,WAAI,SAAS;EAAC;EAAAvD,cAAA,GAAAG,CAAA;EAErD,IAAI;IACF,MAAM;MAAEmO;IAAO,CAAC;IAAA;IAAA,CAAAtO,cAAA,GAAAG,CAAA,SAAGgO,GAAG,CAACI,MAAM;IAAC;IAAAvO,cAAA,GAAAG,CAAA;IAE9BM,MAAM,CAAC+N,IAAI,CAAC,wCAAwC,EAAE;MACpDC,OAAO,EAAEH,MAAM;MACfI,cAAc,EAAEL;IAClB,CAAC,CAAC;;IAEF;IACA,MAAMvN,aAAa;IAAA;IAAA,CAAAd,cAAA,GAAAG,CAAA,SAAG,CACpB;MAAEyD,MAAM,EAAE,KAAK;MAAEX,QAAQ,EAAE,GAAG;MAAEC,aAAa,EAAE,KAAK;MAAEyL,QAAQ,EAAE;IAAM,CAAC,EACvE;MAAE/K,MAAM,EAAE,KAAK;MAAEX,QAAQ,EAAE,GAAG;MAAEC,aAAa,EAAE,IAAI;MAAEyL,QAAQ,EAAE;IAAK,CAAC,EACrE;MAAE/K,MAAM,EAAE,KAAK;MAAEX,QAAQ,EAAE,IAAI;MAAEC,aAAa,EAAE,IAAI;MAAEyL,QAAQ,EAAE;IAAK,CAAC,EACtE;MAAE/K,MAAM,EAAE,KAAK;MAAEX,QAAQ,EAAE,EAAE;MAAEC,aAAa,EAAE,EAAE;MAAEyL,QAAQ,EAAE;IAAG,CAAC,EAChE;MAAE/K,MAAM,EAAE,MAAM;MAAEX,QAAQ,EAAE,IAAI;MAAEC,aAAa,EAAE,GAAG;MAAEyL,QAAQ,EAAE;IAAI,CAAC,CACtE;;IAED;IACA,MAAM5N,UAAU;IAAA;IAAA,CAAAf,cAAA,GAAAG,CAAA,SAAG;MACjByO,aAAa,EAAE,IAAI;MACnBC,gBAAgB,EAAE,aAAa;MAC/BC,gBAAgB,EAAE,EAAE;MACpBC,gBAAgB,EAAE;IACpB,CAAC;;IAED;IACA,MAAMC,YAAY;IAAA;IAAA,CAAAhP,cAAA,GAAAG,CAAA,SAAG,MAAM8N,UAAU,CAACpN,sBAAsB,CAACC,aAAa,EAAEC,UAAU,CAAC;IAEvF,MAAMkO,QAAQ;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAGc,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAhB,cAAA,GAAAG,CAAA;IAExCM,MAAM,CAACmC,WAAW,CAAC,gCAAgC,EAAEqM,QAAQ,EAAE;MAC7DR,OAAO,EAAEH,MAAM;MACfI,cAAc,EAAEL,aAAa;MAC7Ba,UAAU,EAAEF,YAAY,CAACxM,gBAAgB,EAAEsK;IAC7C,CAAC,CAAC;IAAC;IAAA9M,cAAA,GAAAG,CAAA;IAEHiO,GAAG,CAACe,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJC,SAAS,EAAExO,aAAa;QACxByO,iBAAiB,EAAExO,UAAU;QAC7ByO,aAAa,EAAER,YAAY;QAC3BS,QAAQ,EAAE;UACRC,mBAAmB,EAAET,QAAQ;UAC7BP,cAAc,EAAEL,aAAa;UAC7BsB,SAAS,EAAE,IAAI1O,IAAI,CAAC,CAAC,CAAC2O,WAAW,CAAC;QACpC;MACF;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOvM,KAAK,EAAE;IACd,MAAM4L,QAAQ;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAGc,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAhB,cAAA,GAAAG,CAAA;IAExCM,MAAM,CAAC4C,KAAK,CAAC,uCAAuC,EAAEA,KAAK,EAAE;MAC3DoL,OAAO,EAAEN,GAAG,CAACI,MAAM,CAACD,MAAM;MAC1BI,cAAc,EAAEL,aAAa;MAC7BwB,WAAW,EAAEZ;IACf,CAAC,CAAC;IAAC;IAAAjP,cAAA,GAAAG,CAAA;IAEHiO,GAAG,CAAC0B,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd/L,KAAK,EAAE,yCAAyC;MAChD0M,UAAU,EAAE,6BAA6B;MACzCrB,cAAc,EAAEL;IAClB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAArO,cAAA,GAAAG,CAAA;AAEH6P,MAAM,CAACC,OAAO,GAAG5P,MAAM","ignoreList":[]}