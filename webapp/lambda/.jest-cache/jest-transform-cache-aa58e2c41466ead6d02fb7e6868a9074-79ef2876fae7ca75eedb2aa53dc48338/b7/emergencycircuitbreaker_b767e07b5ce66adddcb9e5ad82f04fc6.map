{"version":3,"names":["cov_1f7ipndabk","actualCoverage","express","s","require","resetAllCircuitBreakers","emergencyDatabaseRecovery","getCircuitBreakerStatus","router","Router","post","req","res","f","console","log","result","json","success","message","timestamp","Date","toISOString","nextSteps","error","status","statusCode","b","get","circuitBreakerReset","testDatabaseConnectivity","isHealthy","open","halfOpen","health","overall","totalBreakers","healthy","needsAttention","recommendations","module","exports"],"sources":["emergency-circuit-breaker.js"],"sourcesContent":["/**\n * Emergency Circuit Breaker Reset Route\n * CRITICAL: Provides immediate production fix for circuit breaker crisis\n */\n\nconst express = require('express');\nconst { resetAllCircuitBreakers, emergencyDatabaseRecovery, getCircuitBreakerStatus } = require('../utils/circuitBreakerReset');\nconst router = express.Router();\n\n// Emergency reset all circuit breakers\nrouter.post('/reset-all', async (req, res) => {\n  console.log('🚨 EMERGENCY: Reset all circuit breakers requested');\n  \n  try {\n    const result = resetAllCircuitBreakers();\n    \n    console.log('✅ Emergency circuit breaker reset completed:', result);\n    \n    res.json({\n      success: true,\n      message: 'Emergency circuit breaker reset completed',\n      result,\n      timestamp: new Date().toISOString(),\n      nextSteps: [\n        'Test database connectivity',\n        'Monitor circuit breaker health',\n        'Check application functionality'\n      ]\n    });\n  } catch (error) {\n    console.error('❌ Emergency circuit breaker reset failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      message: 'Emergency circuit breaker reset failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Emergency database recovery\nrouter.post('/database-recovery', async (req, res) => {\n  console.log('🚨 EMERGENCY: Database recovery procedure requested');\n  \n  try {\n    const result = await emergencyDatabaseRecovery();\n    \n    const statusCode = result.success ? 200 : 500;\n    \n    res.status(statusCode).json({\n      success: result.success,\n      message: result.success ? \n        'Emergency database recovery completed successfully' : \n        'Emergency database recovery completed with errors',\n      result,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('❌ Emergency database recovery failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      message: 'Emergency database recovery failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get circuit breaker status\nrouter.get('/status', (req, res) => {\n  try {\n    const status = getCircuitBreakerStatus();\n    \n    res.json({\n      success: true,\n      message: 'Circuit breaker status retrieved',\n      status,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('❌ Failed to get circuit breaker status:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      message: 'Failed to get circuit breaker status',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Test database connectivity\nrouter.post('/test-database', async (req, res) => {\n  console.log('🧪 Testing database connectivity after circuit breaker reset');\n  \n  try {\n    const circuitBreakerReset = require('../utils/circuitBreakerReset');\n    const result = await circuitBreakerReset.testDatabaseConnectivity();\n    \n    const statusCode = result.success ? 200 : 500;\n    \n    res.status(statusCode).json({\n      success: result.success,\n      message: result.success ? \n        'Database connectivity test passed' : \n        'Database connectivity test failed',\n      result,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('❌ Database connectivity test failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      message: 'Database connectivity test failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check with circuit breaker info\nrouter.get('/health', (req, res) => {\n  try {\n    const status = getCircuitBreakerStatus();\n    \n    const isHealthy = status.open === 0 && status.halfOpen <= 1;\n    \n    res.status(isHealthy ? 200 : 503).json({\n      success: isHealthy,\n      message: isHealthy ? 'All circuit breakers healthy' : 'Circuit breakers need attention',\n      health: {\n        overall: isHealthy ? 'healthy' : 'degraded',\n        totalBreakers: status.totalBreakers,\n        healthy: status.healthy,\n        open: status.open,\n        halfOpen: status.halfOpen,\n        needsAttention: status.needsAttention,\n        recommendations: status.recommendations\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('❌ Circuit breaker health check failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message,\n      message: 'Circuit breaker health check failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}