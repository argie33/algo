15d6a72754be0055c5d352af741ac4e5
/* istanbul ignore next */
function cov_26s7sudbz8() {
  var path = "/home/stocks/algo/webapp/lambda/routes/auth-status.js";
  var hash = "27c985cdb4b266a5b4931bc3f5d70043212b0dd5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/auth-status.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "2": {
        start: {
          line: 8,
          column: 64
        },
        end: {
          line: 8,
          column: 93
        }
      },
      "3": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "4": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "5": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 60,
          column: 3
        }
      },
      "6": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "7": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "8": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "9": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "10": {
        start: {
          line: 33,
          column: 19
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "11": {
        start: {
          line: 34,
          column: 18
        },
        end: {
          line: 34,
          column: 54
        }
      },
      "12": {
        start: {
          line: 36,
          column: 18
        },
        end: {
          line: 36,
          column: 50
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "14": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 64
        }
      },
      "15": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "16": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 109,
          column: 3
        }
      },
      "17": {
        start: {
          line: 67,
          column: 2
        },
        end: {
          line: 108,
          column: 3
        }
      },
      "18": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "19": {
        start: {
          line: 69,
          column: 18
        },
        end: {
          line: 69,
          column: 56
        }
      },
      "20": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "21": {
        start: {
          line: 72,
          column: 6
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "22": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 99,
          column: 7
        }
      },
      "23": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 50
        }
      },
      "24": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 107,
          column: 7
        }
      },
      "25": {
        start: {
          line: 115,
          column: 0
        },
        end: {
          line: 165,
          column: 3
        }
      },
      "26": {
        start: {
          line: 116,
          column: 2
        },
        end: {
          line: 164,
          column: 3
        }
      },
      "27": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "28": {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "29": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "30": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 43
        }
      },
      "31": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 163,
          column: 7
        }
      },
      "32": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 238,
          column: 3
        }
      },
      "33": {
        start: {
          line: 172,
          column: 2
        },
        end: {
          line: 237,
          column: 3
        }
      },
      "34": {
        start: {
          line: 173,
          column: 26
        },
        end: {
          line: 173,
          column: 89
        }
      },
      "35": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "36": {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "37": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 58
        }
      },
      "38": {
        start: {
          line: 183,
          column: 22
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "39": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 228,
          column: 7
        }
      },
      "40": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 231,
          column: 48
        }
      },
      "41": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 236,
          column: 7
        }
      },
      "42": {
        start: {
          line: 240,
          column: 0
        },
        end: {
          line: 240,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 21,
            column: 35
          }
        },
        loc: {
          start: {
            line: 21,
            column: 54
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 66,
            column: 49
          },
          end: {
            line: 66,
            column: 50
          }
        },
        loc: {
          start: {
            line: 66,
            column: 69
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 66
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 115,
            column: 45
          }
        },
        loc: {
          start: {
            line: 115,
            column: 64
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 115
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 171,
            column: 30
          },
          end: {
            line: 171,
            column: 31
          }
        },
        loc: {
          start: {
            line: 171,
            column: 50
          },
          end: {
            line: 238,
            column: 1
          }
        },
        line: 171
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 23,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 23,
            column: 64
          }
        }, {
          start: {
            line: 23,
            column: 68
          },
          end: {
            line: 23,
            column: 89
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 19
          },
          end: {
            line: 33,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 19
          },
          end: {
            line: 33,
            column: 35
          }
        }, {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 63
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 33
          }
        }, {
          start: {
            line: 34,
            column: 37
          },
          end: {
            line: 34,
            column: 54
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 18
          },
          end: {
            line: 69,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 18
          },
          end: {
            line: 69,
            column: 28
          }
        }, {
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 56
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 93,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 23
          },
          end: {
            line: 93,
            column: 7
          }
        }, {
          start: {
            line: 93,
            column: 10
          },
          end: {
            line: 93,
            column: 14
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 173,
            column: 26
          },
          end: {
            line: 173,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 26
          },
          end: {
            line: 173,
            column: 64
          }
        }, {
          start: {
            line: 173,
            column: 68
          },
          end: {
            line: 173,
            column: 89
          }
        }],
        line: 173
      },
      "9": {
        loc: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "27c985cdb4b266a5b4931bc3f5d70043212b0dd5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_26s7sudbz8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_26s7sudbz8();
/**
 * Authentication Status and Management Routes
 * Provides authentication status, token generation, and debugging
 */

const express =
/* istanbul ignore next */
(cov_26s7sudbz8().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_26s7sudbz8().s[1]++, express.Router());
const {
  getAuthStatus,
  generateTestToken,
  authenticateToken
} =
/* istanbul ignore next */
(cov_26s7sudbz8().s[2]++, require('../middleware/auth'));
const {
  success,
  error
} =
/* istanbul ignore next */
(cov_26s7sudbz8().s[3]++, require('../utils/responseFormatter'));

/**
 * GET /api/auth-status/status
 * Get current authentication system status
 */
/* istanbul ignore next */
cov_26s7sudbz8().s[4]++;
router.get('/status', getAuthStatus);

/**
 * GET /api/auth-status/generate-dev-token
 * Generate a development token for testing (development mode only)
 */
/* istanbul ignore next */
cov_26s7sudbz8().s[5]++;
router.get('/generate-dev-token', async (req, res) => {
  /* istanbul ignore next */
  cov_26s7sudbz8().f[0]++;
  cov_26s7sudbz8().s[6]++;
  try {
    const isDevelopment =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[7]++,
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[0][0]++, process.env.NODE_ENV === 'development') ||
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[0][1]++, !process.env.NODE_ENV));
    /* istanbul ignore next */
    cov_26s7sudbz8().s[8]++;
    if (!isDevelopment) {
      /* istanbul ignore next */
      cov_26s7sudbz8().b[1][0]++;
      cov_26s7sudbz8().s[9]++;
      return res.status(403).json({
        success: false,
        error: 'Development token generation not allowed in production',
        message: 'This endpoint is only available in development mode'
      });
    } else
    /* istanbul ignore next */
    {
      cov_26s7sudbz8().b[1][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[10]++,
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[2][0]++, req.query.userId) ||
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[2][1]++, 'dev-user-' + Date.now()));
    const email =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[11]++,
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[3][0]++, req.query.email) ||
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[3][1]++, 'dev@example.com'));
    const token =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[12]++, generateTestToken(userId, email));
    /* istanbul ignore next */
    cov_26s7sudbz8().s[13]++;
    res.json({
      success: true,
      message: 'Development token generated successfully',
      token: token,
      usage: {
        header: `Authorization: Bearer ${token}`,
        curlExample: `curl -H "Authorization: Bearer ${token}" http://localhost:3000/api/health`,
        userId: userId,
        email: email,
        expiresIn: '24 hours'
      },
      warning: 'This token is for development use only and should never be used in production'
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_26s7sudbz8().s[14]++;
    console.error('Failed to generate development token:', err);
    /* istanbul ignore next */
    cov_26s7sudbz8().s[15]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate development token',
      message: err.message
    });
  }
});

/**
 * GET /api/auth-status/validate-token
 * Validate the current token and return user information
 */
/* istanbul ignore next */
cov_26s7sudbz8().s[16]++;
router.get('/validate-token', authenticateToken, async (req, res) => {
  /* istanbul ignore next */
  cov_26s7sudbz8().f[1]++;
  cov_26s7sudbz8().s[17]++;
  try {
    const authHeader =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[18]++, req.headers['authorization']);
    const token =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[19]++,
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[4][0]++, authHeader) &&
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[4][1]++, authHeader.split(' ')[1]));
    /* istanbul ignore next */
    cov_26s7sudbz8().s[20]++;
    if (!token) {
      /* istanbul ignore next */
      cov_26s7sudbz8().b[5][0]++;
      cov_26s7sudbz8().s[21]++;
      return res.status(401).json({
        success: false,
        error: 'No token provided',
        message: 'Authorization header with Bearer token is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_26s7sudbz8().b[5][1]++;
    }

    // The token validation will be handled by the auth middleware
    // If we get here, the token is valid
    cov_26s7sudbz8().s[22]++;
    res.json({
      success: true,
      message: 'Token is valid',
      user: req.user ?
      /* istanbul ignore next */
      (cov_26s7sudbz8().b[6][0]++, {
        id: req.user.sub,
        email: req.user.email,
        username: req.user.username,
        role: req.user.role,
        groups: req.user.groups,
        authMethod: req.user.authMethod,
        isDevelopment: req.user.isDevelopment,
        authenticatedAt: req.user.authenticatedAt
      }) :
      /* istanbul ignore next */
      (cov_26s7sudbz8().b[6][1]++, null),
      tokenInfo: {
        issuedAt: req.user?.tokenIssuedAt,
        expiresAt: req.user?.tokenExpiresAt,
        authMethod: req.user?.authMethod
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_26s7sudbz8().s[23]++;
    console.error('Token validation error:', err);
    /* istanbul ignore next */
    cov_26s7sudbz8().s[24]++;
    res.status(401).json({
      success: false,
      error: 'Token validation failed',
      message: err.message
    });
  }
});

/**
 * GET /api/auth-status/user-info
 * Get current authenticated user information
 */
/* istanbul ignore next */
cov_26s7sudbz8().s[25]++;
router.get('/user-info', authenticateToken, async (req, res) => {
  /* istanbul ignore next */
  cov_26s7sudbz8().f[2]++;
  cov_26s7sudbz8().s[26]++;
  try {
    /* istanbul ignore next */
    cov_26s7sudbz8().s[27]++;
    if (!req.user) {
      /* istanbul ignore next */
      cov_26s7sudbz8().b[7][0]++;
      cov_26s7sudbz8().s[28]++;
      return res.status(401).json({
        success: false,
        error: 'Not authenticated',
        message: 'User is not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_26s7sudbz8().b[7][1]++;
    }
    cov_26s7sudbz8().s[29]++;
    res.json({
      success: true,
      user: {
        id: req.user.sub,
        email: req.user.email,
        username: req.user.username,
        role: req.user.role,
        groups: req.user.groups,
        profile: {
          givenName: req.user.givenName,
          familyName: req.user.familyName,
          emailVerified: req.user.emailVerified,
          phoneNumber: req.user.phoneNumber,
          phoneNumberVerified: req.user.phoneNumberVerified
        },
        customAttributes: {
          organization: req.user.organization,
          jobTitle: req.user.jobTitle,
          riskTolerance: req.user.riskTolerance,
          investmentExperience: req.user.investmentExperience,
          accreditedInvestor: req.user.accreditedInvestor
        },
        session: {
          authenticatedAt: req.user.authenticatedAt,
          authMethod: req.user.authMethod,
          isDevelopment: req.user.isDevelopment,
          clientIp: req.user.clientIp,
          requestId: req.user.requestId
        }
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_26s7sudbz8().s[30]++;
    console.error('User info error:', err);
    /* istanbul ignore next */
    cov_26s7sudbz8().s[31]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get user information',
      message: err.message
    });
  }
});

/**
 * GET /api/auth-status/test-endpoints
 * Test different authentication scenarios
 */
/* istanbul ignore next */
cov_26s7sudbz8().s[32]++;
router.get('/test-endpoints', async (req, res) => {
  /* istanbul ignore next */
  cov_26s7sudbz8().f[3]++;
  cov_26s7sudbz8().s[33]++;
  try {
    const isDevelopment =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[34]++,
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[8][0]++, process.env.NODE_ENV === 'development') ||
    /* istanbul ignore next */
    (cov_26s7sudbz8().b[8][1]++, !process.env.NODE_ENV));
    /* istanbul ignore next */
    cov_26s7sudbz8().s[35]++;
    if (!isDevelopment) {
      /* istanbul ignore next */
      cov_26s7sudbz8().b[9][0]++;
      cov_26s7sudbz8().s[36]++;
      return res.status(403).json({
        success: false,
        error: 'Test endpoints not available in production'
      });
    } else
    /* istanbul ignore next */
    {
      cov_26s7sudbz8().b[9][1]++;
    }
    const baseUrl =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[37]++, req.protocol + '://' + req.get('host'));
    const testToken =
    /* istanbul ignore next */
    (cov_26s7sudbz8().s[38]++, generateTestToken('test-user', 'test@example.com'));
    /* istanbul ignore next */
    cov_26s7sudbz8().s[39]++;
    res.json({
      success: true,
      message: 'Authentication test endpoints',
      endpoints: {
        'auth-status': {
          url: `${baseUrl}/api/auth-status/status`,
          method: 'GET',
          description: 'Get authentication system status',
          requiresAuth: false
        },
        'generate-token': {
          url: `${baseUrl}/api/auth-status/generate-dev-token`,
          method: 'GET',
          description: 'Generate development token',
          requiresAuth: false
        },
        'validate-token': {
          url: `${baseUrl}/api/auth-status/validate-token`,
          method: 'GET',
          description: 'Validate provided token',
          requiresAuth: true,
          header: `Authorization: Bearer ${testToken}`
        },
        'user-info': {
          url: `${baseUrl}/api/auth-status/user-info`,
          method: 'GET',
          description: 'Get authenticated user information',
          requiresAuth: true,
          header: `Authorization: Bearer ${testToken}`
        },
        'health-check': {
          url: `${baseUrl}/api/health/api-services`,
          method: 'GET',
          description: 'Test API services with authentication',
          requiresAuth: false
        }
      },
      sampleToken: testToken,
      curlExamples: {
        'test-without-auth': `curl "${baseUrl}/api/auth-status/status"`,
        'test-with-auth': `curl -H "Authorization: Bearer ${testToken}" "${baseUrl}/api/auth-status/user-info"`,
        'test-api-services': `curl -H "Authorization: Bearer ${testToken}" "${baseUrl}/api/health/api-services"`
      }
    });
  } catch (err) {
    /* istanbul ignore next */
    cov_26s7sudbz8().s[40]++;
    console.error('Test endpoints error:', err);
    /* istanbul ignore next */
    cov_26s7sudbz8().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate test endpoints',
      message: err.message
    });
  }
});
/* istanbul ignore next */
cov_26s7sudbz8().s[42]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,