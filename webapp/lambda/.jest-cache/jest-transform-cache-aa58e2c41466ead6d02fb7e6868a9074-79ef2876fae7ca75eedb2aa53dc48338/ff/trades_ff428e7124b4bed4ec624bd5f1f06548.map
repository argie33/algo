{"version":3,"names":["cov_18esqvz1h1","actualCoverage","express","s","require","router","Router","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","authenticateToken","query","transaction","TradeAnalyticsService","apiKeyService","AlpacaService","tradeAnalyticsService","userId","user","sub","b","Error","console","log","result","brokerStatus","rows","map","row","broker","provider","isActive","is_active","keyActive","key_active","isPaperTrading","is_paper_trading","lastSyncStatus","last_sync_status","lastSyncError","last_sync_error","lastImportDate","last_import_date","totalTradesImported","total_trades_imported","totalBrokers","length","activeBrokers","filter","dbError","error","database_query_failed","detailed_diagnostics","attempted_operations","potential_causes","troubleshooting_steps","system_checks","emptyBrokerStatus","note","post","startDate","endDate","forceRefresh","body","credentials","getApiKey","keyId","apiKey","secretKey","apiSecret","configResult","importResult","importAlpacaTrades","isSandbox","data","summary","getTradeAnalysisSummary","limit","offset","statusFilter","params","parseInt","push","countResult","positions","pagination","total","hasMore","positionId","position","executionsResult","symbol","opened_at","closed_at","executions","analytics","riskReward","risk_reward_ratio","alphaGenerated","alpha_generated","patternType","trade_pattern_type","patternConfidence","pattern_confidence","entryQuality","entry_signal_quality","exitQuality","exit_signal_quality","emotionalState","emotional_state_score","disciplineScore","discipline_score","insights","getTradeInsights","timeframe","benchmarkResult","portfolioResult","attributionResult","benchmarks","portfolio","attribution","tradeType","sortBy","sortOrder","getUserApiKey","alpaca","orders","portfolioHistory","Promise","all","getOrders","getPortfolioHistory","trades","order","id","side","quantity","parseFloat","qty","price","filled_avg_price","limit_price","execution_time","filled_at","created_at","order_type","time_in_force","filled_qty","gross_pnl","net_pnl","return_percentage","holding_period_days","commission","source","trade","toUpperCase","toLowerCase","sort","a","aVal","bVal","compareResult","paginatedTrades","slice","apiError","mockTrades","now","details","setMonth","getMonth","setFullYear","getFullYear","liveTradeData","apiKeysResult","keyData","activities","getActivities","activityType","date","split","until","warn","dbMetrics","sectorBreakdown","metricsResult","total_trades","sectorResult","tableError","holdingsResult","holdings","total_positions","winning_trades","winning_positions","losing_trades","losing_positions","total_pnl","avg_pnl","avg_roi","best_trade","best_position","worst_trade","worst_position","avg_holding_period","total_volume","holdingsError","liveMetrics","buys","t","sells","totalVolume","reduce","sum","symbolGroups","forEach","totalPnL","completedTrades","winningTrades","Object","values","sortedTrades","costBasis","pnl","Math","min","max","totalTrades","losingTrades","rawActivities","metrics","winRate","profitFactor","abs","responseData","overview","toFixed","totalPnl","avgPnl","avgRoi","bestTrade","worstTrade","avgHoldingPeriod","dataSource","metadata","liveActivities","dbRecords","hasLiveData","hasStoredData","stack","requestId","process","env","NODE_ENV","undefined","fallbackError","avgPnL","chartData","pnlBySymbol","tradingPatterns","format","whereClause","paramCount","csvHeaders","csvData","sector","industry","csv","join","setHeader","send","delete","confirm","client","module","exports"],"sources":["trades.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'trades',\n    timestamp: new Date().toISOString(),\n    message: 'Trade History service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Trade History API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\nconst { authenticateToken } = require('../middleware/auth');\nconst { query, transaction } = require('../utils/database');\nconst TradeAnalyticsService = require('../services/tradeAnalyticsService');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst AlpacaService = require('../utils/alpacaService');\n\n// Initialize trade analytics service\nlet tradeAnalyticsService;\n\n/**\n * Professional Trade Analysis API Routes\n * Integrates with user API keys from settings for broker data import\n */\n\n/**\n * @route GET /api/trades/import/status\n * @desc Get trade import status for user\n */\nrouter.get('/import/status', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    } // Fixed: use req.user.sub instead of req.user.id\n    console.log('Getting trade import status for user:', userId);\n    \n    try {\n      // Get broker configurations\n      const result = await query(`\n        SELECT bc.*, uak.provider, uak.is_active as key_active\n        FROM broker_api_configs bc\n        JOIN user_api_keys uak ON bc.user_id = uak.user_id AND bc.broker = uak.provider\n        WHERE bc.user_id = $1\n        ORDER BY bc.updated_at DESC\n      `, [userId]);\n\n      const brokerStatus = result.rows.map(row => ({\n        broker: row.broker,\n        provider: row.provider,\n        isActive: row.is_active,\n        keyActive: row.key_active,\n        isPaperTrading: row.is_paper_trading,\n        lastSyncStatus: row.last_sync_status,\n        lastSyncError: row.last_sync_error,\n        lastImportDate: row.last_import_date,\n        totalTradesImported: row.total_trades_imported || 0\n      }));\n\n      res.json({\n        success: true,\n        brokerStatus,\n        totalBrokers: brokerStatus.length,\n        activeBrokers: brokerStatus.filter(b => b.isActive && b.keyActive).length\n      });\n      \n    } catch (dbError) {\n      console.log('Database query failed, returning mock import status:', dbError.message);\n      \n      // Return empty broker status with comprehensive diagnostics\n      console.error('❌ Broker status unavailable - comprehensive diagnosis needed', {\n        database_query_failed: true,\n        detailed_diagnostics: {\n          attempted_operations: ['broker_api_configs_query', 'user_api_keys_join'],\n          potential_causes: [\n            'Database connection failure',\n            'broker_api_configs table missing',\n            'user_api_keys table missing',\n            'Data sync process failed',\n            'User authentication issues'\n          ],\n          troubleshooting_steps: [\n            'Check database connectivity',\n            'Verify broker_api_configs table exists',\n            'Verify user_api_keys table exists',\n            'Check data sync process status',\n            'Review user authentication flow'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Data sync service availability',\n            'Authentication service health'\n          ]\n        }\n      });\n\n      const emptyBrokerStatus = [];\n\n      res.json({\n        success: true,\n        brokerStatus: emptyBrokerStatus,\n        totalBrokers: 0,\n        activeBrokers: 0,\n        message: 'No broker configurations found - configure your broker API keys in settings'\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error fetching import status:', error);\n    res.json({\n      success: true,\n      brokerStatus: [],\n      totalBrokers: 0,\n      activeBrokers: 0,\n      note: 'Unable to fetch import status'\n    });\n  }\n});\n\n/**\n * @route POST /api/trades/import/alpaca\n * @desc Import trades from Alpaca using stored API keys\n */\nrouter.post('/import/alpaca', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { startDate, endDate, forceRefresh = false } = req.body;\n    \n    console.log(`🔄 [TRADES] Import requested for user: ${userId}`);\n    \n    // Get user's Alpaca API credentials using simple API key service\n    const credentials = await apiKeyService.getApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'No active Alpaca API keys found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n    \n    console.log(`✅ [TRADES] Found Alpaca credentials for user`);\n    const { keyId: apiKey, secretKey: apiSecret } = credentials;\n\n    // Check if import is already in progress\n    const configResult = await query(`\n      SELECT last_sync_status FROM broker_api_configs \n      WHERE user_id = $1 AND broker = 'alpaca'\n    `, [userId]);\n\n    if (configResult.rows.length > 0 && configResult.rows[0].last_sync_status === 'in_progress') {\n      return res.status(409).json({\n        success: false,\n        error: 'Trade import already in progress. Please wait for it to complete.'\n      });\n    }\n\n    // Initialize trade analytics service\n    if (!tradeAnalyticsService) {\n      tradeAnalyticsService = new TradeAnalyticsService();\n    }\n\n    // Start import process\n    const importResult = await tradeAnalyticsService.importAlpacaTrades(\n      userId, \n      apiKey, \n      apiSecret, \n      credentials.isSandbox, \n      startDate, \n      endDate\n    );\n\n    res.json({\n      success: true,\n      message: 'Trade import completed successfully',\n      data: importResult\n    });\n\n  } catch (error) {\n    console.error('Error importing Alpaca trades:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message || 'Failed to import trades from Alpaca'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/summary\n * @desc Get comprehensive trade analysis summary\n */\nrouter.get('/summary', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    // Database queries will use the query function directly\n    \n    if (!tradeAnalyticsService) {\n      tradeAnalyticsService = new TradeAnalyticsService();\n    }\n\n    const summary = await tradeAnalyticsService.getTradeAnalysisSummary(userId);\n    \n    res.json({\n      success: true,\n      data: summary\n    });\n\n  } catch (error) {\n    console.error('Error fetching trade summary:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch trade summary'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/positions\n * @desc Get position history with analytics\n */\nrouter.get('/positions', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { status = 'all', limit = 50, offset = 0 } = req.query;\n    // Database queries will use the query function directly\n    \n    let statusFilter = '';\n    let params = [userId, parseInt(limit), parseInt(offset)];\n    \n    if (status !== 'all') {\n      statusFilter = 'AND ph.status = $4';\n      params.push(status);\n    }\n\n    const result = await query(`\n      SELECT \n        ph.*,\n        ta.entry_signal_quality,\n        ta.exit_signal_quality,\n        ta.risk_reward_ratio,\n        ta.alpha_generated,\n        ta.trade_pattern_type,\n        ta.pattern_confidence,\n        s.sector,\n        s.industry\n      FROM position_history ph\n      LEFT JOIN trade_analytics ta ON ph.id = ta.position_id\n      LEFT JOIN symbols s ON ph.symbol = s.symbol\n      WHERE ph.user_id = $1 ${statusFilter}\n      ORDER BY ph.opened_at DESC\n      LIMIT $2 OFFSET $3\n    `, params);\n\n    // Get total count\n    const countResult = await query(`\n      SELECT COUNT(*) as total \n      FROM position_history \n      WHERE user_id = $1 ${status !== 'all' ? `AND status = '${status}'` : ''}\n    `, [userId]);\n\n    res.json({\n      success: true,\n      data: {\n        positions: result.rows,\n        pagination: {\n          total: parseInt(countResult.rows[0].total),\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          hasMore: parseInt(offset) + parseInt(limit) < parseInt(countResult.rows[0].total)\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching positions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch positions'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/analytics/:positionId\n * @desc Get detailed analytics for a specific position\n */\nrouter.get('/analytics/:positionId', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const positionId = parseInt(req.params.positionId);\n    // Database queries will use the query function directly\n    \n    // Get position with full analytics\n    const result = await query(`\n      SELECT \n        ph.*,\n        ta.*,\n        s.sector,\n        s.industry,\n        s.market_cap,\n        s.description as company_description\n      FROM position_history ph\n      LEFT JOIN trade_analytics ta ON ph.id = ta.position_id\n      LEFT JOIN symbols s ON ph.symbol = s.symbol\n      WHERE ph.id = $1 AND ph.user_id = $2\n    `, [positionId, userId]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Position not found'\n      });\n    }\n\n    const position = result.rows[0];\n\n    // Get related executions\n    const executionsResult = await query(`\n      SELECT * FROM trade_executions \n      WHERE user_id = $1 AND symbol = $2 \n      AND execution_time BETWEEN $3 AND $4\n      ORDER BY execution_time\n    `, [userId, position.symbol, position.opened_at, position.closed_at || new Date()]);\n\n    res.json({\n      success: true,\n      data: {\n        position,\n        executions: executionsResult.rows,\n        analytics: {\n          riskReward: position.risk_reward_ratio,\n          alphaGenerated: position.alpha_generated,\n          patternType: position.trade_pattern_type,\n          patternConfidence: position.pattern_confidence,\n          entryQuality: position.entry_signal_quality,\n          exitQuality: position.exit_signal_quality,\n          emotionalState: position.emotional_state_score,\n          disciplineScore: position.discipline_score\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching position analytics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch position analytics'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/insights\n * @desc Get AI-generated trade insights and recommendations\n */\nrouter.get('/insights', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { limit = 10 } = req.query;\n    // Database queries will use the query function directly\n    \n    if (!tradeAnalyticsService) {\n      tradeAnalyticsService = new TradeAnalyticsService();\n    }\n\n    const insights = await tradeAnalyticsService.getTradeInsights(userId, parseInt(limit));\n    \n    res.json({\n      success: true,\n      data: {\n        insights,\n        total: insights.length\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching trade insights:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch trade insights'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/performance\n * @desc Get performance metrics and benchmarks\n */\nrouter.get('/performance', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { timeframe = '3M' } = req.query;\n    // Database queries will use the query function directly\n    \n    // Get performance benchmarks\n    const benchmarkResult = await query(`\n      SELECT * FROM performance_benchmarks \n      WHERE user_id = $1 \n      ORDER BY benchmark_date DESC\n      LIMIT 90\n    `, [userId]);\n\n    // Get portfolio summary\n    const portfolioResult = await query(`\n      SELECT * FROM portfolio_summary \n      WHERE user_id = $1\n    `, [userId]);\n\n    // Get performance attribution\n    const attributionResult = await query(`\n      SELECT * FROM performance_attribution \n      WHERE user_id = $1 \n      ORDER BY closed_at DESC\n      LIMIT 50\n    `, [userId]);\n\n    res.json({\n      success: true,\n      data: {\n        benchmarks: benchmarkResult.rows,\n        portfolio: portfolioResult.rows[0] || null,\n        attribution: attributionResult.rows,\n        timeframe\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching performance data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch performance data'\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/history\n * @desc Get paginated trade history using real broker API integration\n */\nrouter.get('/history', authenticateToken, async (req, res) => {\n  try {\n    console.log('📈 Trade history request received for user:', req.user?.sub);\n    const userId = req.user?.sub;\n    const { \n      symbol, \n      startDate, \n      endDate, \n      tradeType, \n      status = 'all',\n      sortBy = 'execution_time',\n      sortOrder = 'desc',\n      limit = 50, \n      offset = 0 \n    } = req.query;\n\n    if (!userId) {\n      return res.status(401).json({\n        success: false,\n        error: 'User authentication required'\n      });\n    }\n\n    // Use real broker API integration\n    const AlpacaService = require('../utils/alpacaService');\n    \n    try {\n      // Try to get real broker trade data\n      console.log('🔑 Retrieving API credentials for Alpaca...');\n      const credentials = await getUserApiKey(userId, 'alpaca');\n      \n      if (credentials && credentials.apiKey && credentials.apiSecret) {\n        console.log('✅ Valid Alpaca credentials found, fetching real trade history...');\n        const alpaca = new AlpacaService(credentials.apiKey, credentials.apiSecret, credentials.isSandbox);\n        \n        // Get orders and activities from Alpaca\n        const [orders, portfolioHistory] = await Promise.all([\n          alpaca.getOrders({ status: 'all', limit: 500 }),\n          alpaca.getPortfolioHistory('1Y')\n        ]);\n        \n        // Transform orders to trade history format\n        let trades = orders.map(order => ({\n          id: order.id,\n          symbol: order.symbol,\n          side: order.side, // 'buy' or 'sell'\n          quantity: parseFloat(order.qty),\n          price: parseFloat(order.filled_avg_price || order.limit_price || 0),\n          execution_time: order.filled_at || order.created_at,\n          order_type: order.order_type,\n          time_in_force: order.time_in_force,\n          status: order.status,\n          filled_qty: parseFloat(order.filled_qty || 0),\n          gross_pnl: 0, // Would need position tracking for accurate P&L\n          net_pnl: 0,\n          return_percentage: 0,\n          holding_period_days: 0,\n          commission: 0, // Alpaca is commission-free\n          source: 'alpaca_api'\n        }));\n        \n        // Apply filters\n        if (symbol) {\n          trades = trades.filter(trade => trade.symbol.toUpperCase() === symbol.toUpperCase());\n        }\n        \n        if (startDate) {\n          trades = trades.filter(trade => new Date(trade.execution_time) >= new Date(startDate));\n        }\n        \n        if (endDate) {\n          trades = trades.filter(trade => new Date(trade.execution_time) <= new Date(endDate));\n        }\n        \n        if (tradeType && tradeType !== 'all') {\n          trades = trades.filter(trade => trade.side === tradeType.toLowerCase());\n        }\n        \n        if (status !== 'all') {\n          trades = trades.filter(trade => trade.status === status);\n        }\n        \n        // Sort trades\n        trades.sort((a, b) => {\n          const aVal = a[sortBy] || a.execution_time;\n          const bVal = b[sortBy] || b.execution_time;\n          const compareResult = sortOrder === 'desc' ? \n            new Date(bVal) - new Date(aVal) : \n            new Date(aVal) - new Date(bVal);\n          return compareResult;\n        });\n        \n        // Apply pagination\n        const total = trades.length;\n        const paginatedTrades = trades.slice(parseInt(offset), parseInt(offset) + parseInt(limit));\n        \n        console.log(`✅ Retrieved ${total} trades from Alpaca API`);\n        \n        return res.json({\n          success: true,\n          data: {\n            trades: paginatedTrades,\n            pagination: {\n              total,\n              limit: parseInt(limit),\n              offset: parseInt(offset),\n              hasMore: parseInt(offset) + parseInt(limit) < total\n            },\n            source: 'alpaca_api'\n          }\n        });\n      }\n    } catch (apiError) {\n      console.log('⚠️ Broker API failed, falling back to mock data:', apiError.message);\n    }\n    \n    // Fallback to mock trade history data\n    console.log('📝 Using mock trade history data');\n    const mockTrades = [\n      {\n        id: 'mock-1',\n        symbol: 'AAPL',\n        side: 'buy',\n        quantity: 100,\n        price: 150.00,\n        execution_time: new Date(Date.now() - 86400000 * 7).toISOString(), // 7 days ago\n        order_type: 'market',\n        status: 'filled',\n        filled_qty: 100,\n        gross_pnl: 2500,\n        net_pnl: 2500,\n        return_percentage: 16.67,\n        holding_period_days: 7,\n        commission: 0,\n        source: 'mock_data'\n      },\n      {\n        id: 'mock-2',\n        symbol: 'MSFT',\n        side: 'buy',\n        quantity: 50,\n        price: 280.00,\n        execution_time: new Date(Date.now() - 86400000 * 14).toISOString(), // 14 days ago\n        order_type: 'limit',\n        status: 'filled',\n        filled_qty: 50,\n        gross_pnl: 1512,\n        net_pnl: 1512,\n        return_percentage: 10.8,\n        holding_period_days: 14,\n        commission: 0,\n        source: 'mock_data'\n      },\n      {\n        id: 'mock-3',\n        symbol: 'TSLA',\n        side: 'sell',\n        quantity: 25,\n        price: 220.00,\n        execution_time: new Date(Date.now() - 86400000 * 21).toISOString(), // 21 days ago\n        order_type: 'market',\n        status: 'filled',\n        filled_qty: 25,\n        gross_pnl: -500,\n        net_pnl: -500,\n        return_percentage: -8.33,\n        holding_period_days: 30,\n        commission: 0,\n        source: 'mock_data'\n      }\n    ];\n    \n    res.json({\n      success: true,\n      data: {\n        trades: mockTrades,\n        pagination: {\n          total: mockTrades.length,\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          hasMore: false\n        },\n        source: 'mock_data'\n      }\n    });\n    \n  } catch (error) {\n    console.error('❌ Error fetching trade history:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch trade history',\n      details: error.message\n    });\n  }\n});\n\n/**\n * @route GET /api/trades/analytics/overview\n * @desc Get trade analytics overview with key metrics\n */\nrouter.get('/analytics/overview', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    if (!userId) {\n      return res.status(401).json({\n        success: false,\n        error: 'Authentication required',\n        message: 'User must be authenticated to access trade analytics'\n      });\n    } \n    const { timeframe = '3M' } = req.query;\n    \n    console.log(`📊 Trade analytics requested for user ${userId}, timeframe: ${timeframe}`);\n    \n    // Calculate date range\n    const endDate = new Date();\n    const startDate = new Date();\n    switch(timeframe) {\n      case '1M': startDate.setMonth(endDate.getMonth() - 1); break;\n      case '3M': startDate.setMonth(endDate.getMonth() - 3); break;\n      case '6M': startDate.setMonth(endDate.getMonth() - 6); break;\n      case '1Y': startDate.setFullYear(endDate.getFullYear() - 1); break;\n      case 'YTD': startDate.setMonth(0, 1); break;\n      default: startDate.setMonth(endDate.getMonth() - 3);\n    }\n    \n    // First, try to get live trade data from connected brokers\n    let liveTradeData = null;\n    try {\n      // Get user's active API keys to fetch live trade data\n      const apiKeysResult = await query(`\n        SELECT provider, encrypted_api_key, key_iv, key_auth_tag, \n               encrypted_api_secret, secret_iv, secret_auth_tag, user_salt, is_sandbox\n        FROM user_api_keys \n        WHERE user_id = $1 AND is_active = true\n      `, [userId]);\n      \n      if (apiKeysResult.rows.length > 0) {\n        console.log(`🔑 Found ${apiKeysResult.rows.length} active API keys for analytics`);\n        \n        for (const keyData of apiKeysResult.rows) {\n          if (keyData.provider === 'alpaca') {\n            try {\n              // Get live activities/trades from Alpaca\n              const credentials = await getUserApiKey(userId, 'alpaca');\n              \n              if (credentials) {\n                const alpaca = new AlpacaService(\n                  credentials.apiKey,\n                  credentials.apiSecret,\n                  credentials.isSandbox\n                );\n                \n                const activities = await alpaca.getActivities({\n                  activityType: 'FILL',\n                  date: startDate.toISOString().split('T')[0],\n                  until: endDate.toISOString().split('T')[0]\n                });\n                \n                liveTradeData = activities;\n                console.log(`📈 Retrieved ${activities.length} live trade activities from Alpaca`);\n                break;\n              }\n            } catch (apiError) {\n              console.warn(`Failed to fetch live data from ${keyData.provider}:`, apiError.message);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to fetch live trade data:', error.message);\n    }\n    \n    // Get stored trade analytics from database with comprehensive error handling\n    let dbMetrics = null;\n    let sectorBreakdown = [];\n    \n    try {\n      // Try to get trade metrics from stored data first\n      const metricsResult = await query(`\n        SELECT \n          COUNT(*) as total_trades,\n          COUNT(CASE WHEN ph.net_pnl > 0 THEN 1 END) as winning_trades,\n          COUNT(CASE WHEN ph.net_pnl < 0 THEN 1 END) as losing_trades,\n          SUM(ph.net_pnl) as total_pnl,\n          AVG(ph.net_pnl) as avg_pnl,\n          AVG(ph.return_percentage) as avg_roi,\n          MAX(ph.net_pnl) as best_trade,\n          MIN(ph.net_pnl) as worst_trade,\n          AVG(ph.holding_period_days) as avg_holding_period,\n          SUM(CASE WHEN te.quantity IS NOT NULL THEN te.quantity * te.price ELSE 0 END) as total_volume\n        FROM position_history ph\n        LEFT JOIN trade_executions te ON ph.symbol = te.symbol \n          AND ph.user_id = te.user_id\n          AND te.execution_time BETWEEN ph.opened_at AND COALESCE(ph.closed_at, NOW())\n        WHERE ph.user_id = $1 \n          AND ph.opened_at >= $2 \n          AND ph.opened_at <= $3\n      `, [userId, startDate, endDate], 10000);\n      \n      if (metricsResult.rows.length > 0) {\n        dbMetrics = metricsResult.rows[0];\n        console.log(`📊 Found ${dbMetrics.total_trades} stored trades for analytics`);\n      }\n      \n      // Get sector breakdown from stored data\n      const sectorResult = await query(`\n        SELECT \n          COALESCE(s.sector, 'Unknown') as sector,\n          COUNT(*) as trade_count,\n          SUM(ph.net_pnl) as sector_pnl,\n          AVG(ph.return_percentage) as avg_roi,\n          SUM(ph.quantity * ph.avg_entry_price) as total_volume\n        FROM position_history ph\n        LEFT JOIN symbols s ON ph.symbol = s.symbol\n        WHERE ph.user_id = $1 \n          AND ph.opened_at >= $2 \n          AND ph.opened_at <= $3\n        GROUP BY COALESCE(s.sector, 'Unknown')\n        ORDER BY sector_pnl DESC\n      `, [userId, startDate, endDate], 10000);\n      \n      sectorBreakdown = sectorResult.rows;\n      \n    } catch (dbError) {\n      console.warn('Database query failed, checking for tables:', dbError.message);\n      \n      // Check if tables exist and create fallback\n      try {\n        await query('SELECT 1 FROM position_history LIMIT 1', [], 5000);\n      } catch (tableError) {\n        console.warn('Trade tables may not exist yet, using imported portfolio data');\n        \n        // Try to get analytics from portfolio holdings instead\n        try {\n          const holdingsResult = await query(`\n            SELECT \n              COUNT(*) as total_positions,\n              SUM(CASE WHEN unrealized_pl > 0 THEN 1 ELSE 0 END) as winning_positions,\n              SUM(CASE WHEN unrealized_pl < 0 THEN 1 ELSE 0 END) as losing_positions,\n              SUM(unrealized_pl) as total_pnl,\n              AVG(unrealized_pl) as avg_pnl,\n              AVG(unrealized_plpc) as avg_roi,\n              MAX(unrealized_pl) as best_position,\n              MIN(unrealized_pl) as worst_position,\n              SUM(market_value) as total_volume\n            FROM portfolio_holdings \n            WHERE user_id = $1 AND quantity > 0\n          `, [userId], 5000);\n          \n          if (holdingsResult.rows.length > 0) {\n            const holdings = holdingsResult.rows[0];\n            dbMetrics = {\n              total_trades: holdings.total_positions,\n              winning_trades: holdings.winning_positions,\n              losing_trades: holdings.losing_positions,\n              total_pnl: holdings.total_pnl,\n              avg_pnl: holdings.avg_pnl,\n              avg_roi: holdings.avg_roi,\n              best_trade: holdings.best_position,\n              worst_trade: holdings.worst_position,\n              avg_holding_period: 0, // Not available from holdings\n              total_volume: holdings.total_volume\n            };\n            console.log(`📈 Using portfolio holdings for analytics (${holdings.total_positions} positions)`);\n          }\n        } catch (holdingsError) {\n          console.warn('Portfolio holdings query also failed:', holdingsError.message);\n        }\n      }\n    }\n    \n    // Process live trade data if available\n    let liveMetrics = null;\n    if (liveTradeData && liveTradeData.length > 0) {\n      console.log(`🔄 Processing ${liveTradeData.length} live trade activities`);\n      \n      const buys = liveTradeData.filter(t => t.side === 'buy');\n      const sells = liveTradeData.filter(t => t.side === 'sell');\n      const totalVolume = liveTradeData.reduce((sum, t) => sum + (parseFloat(t.qty) * parseFloat(t.price)), 0);\n      \n      // Calculate P&L from matched buy/sell pairs\n      const symbolGroups = {};\n      liveTradeData.forEach(trade => {\n        if (!symbolGroups[trade.symbol]) symbolGroups[trade.symbol] = [];\n        symbolGroups[trade.symbol].push(trade);\n      });\n      \n      let totalPnL = 0;\n      let completedTrades = 0;\n      let winningTrades = 0;\n      \n      Object.values(symbolGroups).forEach(trades => {\n        const sortedTrades = trades.sort((a, b) => new Date(a.date) - new Date(b.date));\n        let position = 0;\n        let costBasis = 0;\n        \n        sortedTrades.forEach(trade => {\n          const qty = parseFloat(trade.qty);\n          const price = parseFloat(trade.price);\n          \n          if (trade.side === 'buy') {\n            costBasis = ((costBasis * position) + (price * qty)) / (position + qty);\n            position += qty;\n          } else { // sell\n            if (position > 0) {\n              const pnl = (price - costBasis) * Math.min(qty, position);\n              totalPnL += pnl;\n              if (pnl > 0) winningTrades++;\n              completedTrades++;\n              position = Math.max(0, position - qty);\n            }\n          }\n        });\n      });\n      \n      liveMetrics = {\n        totalTrades: completedTrades,\n        winningTrades: winningTrades,\n        losingTrades: completedTrades - winningTrades,\n        totalPnL: totalPnL,\n        totalVolume: totalVolume,\n        rawActivities: liveTradeData.length\n      };\n    }\n    \n    // Combine or prioritize metrics (live data takes precedence)\n    const metrics = liveMetrics || dbMetrics || {\n      total_trades: 0,\n      winning_trades: 0,\n      losing_trades: 0,\n      total_pnl: 0,\n      avg_pnl: 0,\n      avg_roi: 0,\n      best_trade: 0,\n      worst_trade: 0,\n      avg_holding_period: 0,\n      total_volume: 0\n    };\n    \n    // Calculate derived metrics\n    const totalTrades = liveMetrics ? liveMetrics.totalTrades : parseInt(metrics.total_trades || 0);\n    const winningTrades = liveMetrics ? liveMetrics.winningTrades : parseInt(metrics.winning_trades || 0);\n    const losingTrades = liveMetrics ? liveMetrics.losingTrades : parseInt(metrics.losing_trades || 0);\n    const winRate = totalTrades > 0 ? (winningTrades / totalTrades * 100) : 0;\n    const totalPnL = liveMetrics ? liveMetrics.totalPnL : parseFloat(metrics.total_pnl || 0);\n    const profitFactor = losingTrades > 0 && totalPnL < 0 ? \n      Math.abs(winningTrades * (totalPnL / totalTrades)) / Math.abs(losingTrades * (totalPnL / totalTrades)) : \n      (totalPnL > 0 ? Math.abs(totalPnL / Math.max(losingTrades, 1)) : null);\n    \n    const responseData = {\n      success: true,\n      data: {\n        overview: {\n          totalTrades: totalTrades,\n          winningTrades: winningTrades,\n          losingTrades: losingTrades,\n          winRate: parseFloat(winRate.toFixed(2)),\n          totalPnl: parseFloat(totalPnL.toFixed(2)),\n          avgPnl: totalTrades > 0 ? parseFloat((totalPnL / totalTrades).toFixed(2)) : 0,\n          avgRoi: parseFloat((metrics.avg_roi || 0)),\n          bestTrade: parseFloat(metrics.best_trade || 0),\n          worstTrade: parseFloat(metrics.worst_trade || 0),\n          avgHoldingPeriod: parseFloat(metrics.avg_holding_period || 0),\n          totalVolume: liveMetrics ? liveMetrics.totalVolume : parseFloat(metrics.total_volume || 0),\n          profitFactor: profitFactor\n        },\n        sectorBreakdown: sectorBreakdown,\n        timeframe: timeframe,\n        dataSource: liveMetrics ? 'live_api' : (dbMetrics ? 'database' : 'none'),\n        metadata: {\n          liveActivities: liveMetrics ? liveMetrics.rawActivities : 0,\n          dbRecords: dbMetrics ? parseInt(dbMetrics.total_trades) : 0,\n          hasLiveData: !!liveMetrics,\n          hasStoredData: !!dbMetrics\n        }\n      }\n    };\n    \n    console.log(`✅ Analytics complete - ${totalTrades} trades, ${winRate.toFixed(1)}% win rate, $${totalPnL.toFixed(2)} P&L`);\n    res.json(responseData);\n    \n  } catch (error) {\n    console.error('Error fetching analytics overview:', {\n      message: error.message,\n      stack: error.stack,\n      userId: req.user?.sub || req.user?.userId || 'unknown',\n      timeframe: req.query.timeframe || '3M',\n      requestId: req.requestId || 'unknown'\n    });\n    \n    // Return detailed error structure with proper HTTP status\n    try {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n        message: 'Failed to fetch analytics overview',\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined,\n        timestamp: new Date().toISOString(),\n        requestId: req.requestId || 'unknown'\n      });\n    } catch (fallbackError) {\n      console.error('Fallback error handler triggered:', fallbackError);\n      // Last resort fallback response\n      res.status(200).json({\n        success: true,\n        data: {\n          analytics: {\n            totalTrades: 0,\n            winningTrades: 0,\n            losingTrades: 0,\n            winRate: 0,\n            totalPnL: 0,\n            avgPnL: 0,\n            avgRoi: 0,\n            bestTrade: 0,\n            worstTrade: 0,\n            avgHoldingPeriod: 0,\n            totalVolume: 0\n          },\n          chartData: [],\n          pnlBySymbol: [],\n          tradingPatterns: [],\n          dataSource: 'none'\n        },\n        message: 'No trade data available. Please import your portfolio data from your broker first.',\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n});\n\n/**\n * @route GET /api/trades/export\n * @desc Export trade data in various formats\n */\nrouter.get('/export', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { format = 'csv', startDate, endDate } = req.query;\n    // Database queries will use the query function directly\n    \n    let whereClause = 'WHERE te.user_id = $1';\n    let params = [userId];\n    let paramCount = 1;\n    \n    if (startDate) {\n      whereClause += ` AND te.execution_time >= $${++paramCount}`;\n      params.push(startDate);\n    }\n    \n    if (endDate) {\n      whereClause += ` AND te.execution_time <= $${++paramCount}`;\n      params.push(endDate);\n    }\n    \n    const result = await query(`\n      SELECT \n        te.execution_time,\n        te.symbol,\n        te.side,\n        te.quantity,\n        te.price,\n        te.commission,\n        ph.gross_pnl,\n        ph.net_pnl,\n        ph.return_percentage,\n        ph.holding_period_days,\n        ta.trade_pattern_type,\n        ta.pattern_confidence,\n        ta.risk_reward_ratio,\n        s.sector,\n        s.industry\n      FROM trade_executions te\n      LEFT JOIN position_history ph ON te.symbol = ph.symbol \n        AND te.user_id = ph.user_id\n        AND te.execution_time BETWEEN ph.opened_at AND COALESCE(ph.closed_at, NOW())\n      LEFT JOIN trade_analytics ta ON ph.id = ta.position_id\n      LEFT JOIN symbols s ON te.symbol = s.symbol\n      ${whereClause}\n      ORDER BY te.execution_time DESC\n    `, params);\n    \n    if (format === 'csv') {\n      // Convert to CSV\n      const csvHeaders = [\n        'Date', 'Symbol', 'Side', 'Quantity', 'Price', 'Commission',\n        'Gross PnL', 'Net PnL', 'Return %',\n        'Holding Period (Days)', 'Pattern Type', 'Pattern Confidence',\n        'Risk/Reward Ratio', 'Sector', 'Industry'\n      ];\n      \n      const csvData = result.rows.map(row => [\n        row.execution_time,\n        row.symbol,\n        row.side,\n        row.quantity,\n        row.price,\n        row.commission,\n        row.gross_pnl,\n        row.net_pnl,\n        row.return_percentage,\n        row.holding_period_days,\n        row.trade_pattern_type,\n        row.pattern_confidence,\n        row.risk_reward_ratio,\n        row.sector,\n        row.industry\n      ]);\n      \n      const csv = [csvHeaders, ...csvData].map(row => row.join(',')).join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=trade_history_${new Date().toISOString().split('T')[0]}.csv`);\n      res.send(csv);\n    } else {\n      // Return JSON\n      res.json({\n        success: true,\n        data: result.rows\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error exporting trade data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to export trade data'\n    });\n  }\n});\n\n/**\n * @route DELETE /api/trades/data\n * @desc Delete all trade data for user (for testing/reset)\n */\nrouter.delete('/data', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { confirm } = req.body;\n    \n    if (confirm !== 'DELETE_ALL_TRADE_DATA') {\n      return res.status(400).json({\n        success: false,\n        error: 'Confirmation required. Send { \"confirm\": \"DELETE_ALL_TRADE_DATA\" }'\n      });\n    }\n\n    // Database queries will use the query function directly\n    \n    // Delete all trade-related data for user using transaction\n    await transaction(async (client) => {\n      await client.query('DELETE FROM trade_analytics WHERE user_id = $1', [userId]);\n      await client.query('DELETE FROM position_history WHERE user_id = $1', [userId]);\n      await client.query('DELETE FROM trade_executions WHERE user_id = $1', [userId]);\n      await client.query('DELETE FROM trade_insights WHERE user_id = $1', [userId]);\n      await client.query('DELETE FROM performance_benchmarks WHERE user_id = $1', [userId]);\n      await client.query('DELETE FROM broker_api_configs WHERE user_id = $1', [userId]);\n    });\n      \n    res.json({\n      success: true,\n      message: 'All trade data deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Error deleting trade data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete trade data'\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}