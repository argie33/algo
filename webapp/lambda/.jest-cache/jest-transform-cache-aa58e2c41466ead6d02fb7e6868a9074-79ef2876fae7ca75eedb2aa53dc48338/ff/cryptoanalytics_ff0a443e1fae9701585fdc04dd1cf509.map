{"version":3,"names":["cov_l22ab92ir","actualCoverage","express","s","require","router","Router","query","StructuredLogger","logger","CryptoMarketAnalytics","constructor","f","generateMarketOverview","startTime","Date","now","overview","market_metrics","getMarketMetrics","sector_analysis","analyzeSectors","sentiment_analysis","analyzeSentiment","momentum_analysis","analyzeMomentum","liquidity_analysis","analyzeLiquidity","correlation_analysis","analyzeCorrelations","defi_analysis","analyzeDeFi","institutional_flow","analyzeInstitutionalFlow","market_structure","analyzeMarketStructure","opportunities","identifyOpportunities","market_health_score","calculateMarketHealthScore","predictions","generateMarketPredictions","performance","error","total_market_cap","total_volume_24h","btc_dominance","eth_dominance","active_cryptocurrencies","market_cap_change_24h","volume_change_24h","market_cap_rank_changes","gainers","symbol","rank_change","market_cap","losers","stablecoin_dominance","defi_tvl","nft_volume_24h","sectors","name","change_24h","change_7d","dominance","top_performers","laggards","momentum_score","sentiment_score","sectorRotation","calculateSectorRotation","sector_rotation","hottest_sector","reduce","hottest","sector","b","coldest_sector","coldest","fear_greed_index","value","classification","historical_average","trend","social_sentiment","twitter_sentiment","reddit_sentiment","telegram_sentiment","overall_social","news_sentiment","article_count_24h","positive_articles","negative_articles","neutral_articles","trending_topics","on_chain_sentiment","whale_activity","exchange_inflows","long_term_holder_behavior","mining_sentiment","institutional_sentiment","flow_direction","announcement_sentiment","regulatory_outlook","retail_sentiment","search_trends","new_wallet_creation","trading_activity","assets","momentumData","map","asset","momentum_1d","Math","random","momentum_7d","momentum_30d","rsi","macd_signal","volume_momentum","sort","a","top_momentum","slice","bottom_momentum","market_momentum","overall_score","sum","length","breadth","calculateMarketBreadth","momentum_divergences","identifyMomentumDivergences","overall_liquidity","score","depth_score","spread_score","exchange_liquidity","exchange","liquidity_score","avg_spread_bps","depth_1pct","market_share","asset_liquidity","liquidity_warnings","correlationMatrix","correlation_matrix","average_correlation","correlation_trend","diversification_opportunities","asset1","asset2","correlation","opportunity","correlation_with_traditional","sp500","gold","dxy","vix","regime_analysis","current_regime","regime_stability","regime_duration_days","total_value_locked","tvl_change_24h","tvl_change_7d","tvl_change_30d","top_protocols","tvl","category","chain","chain_breakdown","yield_opportunities","protocol","apy","risk_score","defi_health_metrics","liquidation_risk","protocol_diversity","chain_diversity","innovation_rate","net_flow_24h","net_flow_7d","net_flow_30d","flow_breakdown","etf_flows","corporate_treasury","hedge_funds","pension_funds","sovereign_wealth","major_announcements","date","institution","type","amount","impact","overall","confidence_score","allocation_trend","regulatory_comfort","upcoming_catalysts","market_concentration","top_10_dominance","top_50_dominance","herfindahl_index","exchange_distribution","centralized_dominance","dex_share","p2p_share","trading_patterns","retail_vs_institutional","retail","institutional","trading_hours_distribution","asia","europe","americas","order_size_distribution","small_orders_under_1k","medium_orders_1k_to_100k","large_orders_over_100k","market_efficiency","arbitrage_opportunities","price_discovery","information_flow","market_depth","structural_risks","buy_exchange","sell_exchange","spread","profit_potential","risk_level","execution_complexity","funding_rate","yield","liquidity","emerging_trends","growth_rate","opportunity_size","time_horizon","sector_rotation_signals","from_sector","to_sector","strength","confidence","healthScore","maxScore","marketWeight","marketScore","sentimentWeight","sentimentScore","liquidityWeight","liquidityScore","defiWeight","defiScore","institutionalWeight","institutionalScore","momentumWeight","momentumScore","normalizedScore","round","grade","status","components","sentiment","defi_health","momentum","short_term","timeframe","direction","key_factors","price_targets","btc","optimistic","realistic","pessimistic","eth","medium_term","long_term","key_risks","catalysts","momentumRanked","hot_sectors","cold_sectors","rotation_strength","rotation_frequency","advancing","filter","declining","advance_decline_ratio","advancing_count","declining_count","breadth_score","abs","analyticsEngine","get","req","res","correlationId","info","correlation_id","marketOverview","duration","json","success","data","metadata","generation_time_ms","timestamp","toISOString","duration_ms","error_code","sectorAnalysis","sectors_analyzed","module","exports"],"sources":["crypto-analytics.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { query } = require('../utils/database');\nconst StructuredLogger = require('../utils/structuredLogger');\nconst logger = new StructuredLogger('crypto-analytics');\n\n// Advanced Crypto Market Analytics Engine\nclass CryptoMarketAnalytics {\n  constructor() {\n    this.logger = logger;\n  }\n\n  // Generate comprehensive market overview\n  async generateMarketOverview() {\n    const startTime = Date.now();\n    \n    try {\n      const overview = {\n        market_metrics: await this.getMarketMetrics(),\n        sector_analysis: await this.analyzeSectors(),\n        sentiment_analysis: await this.analyzeSentiment(),\n        momentum_analysis: await this.analyzeMomentum(),\n        liquidity_analysis: await this.analyzeLiquidity(),\n        correlation_analysis: await this.analyzeCorrelations(),\n        defi_analysis: await this.analyzeDeFi(),\n        institutional_flow: await this.analyzeInstitutionalFlow(),\n        market_structure: await this.analyzeMarketStructure(),\n        opportunities: await this.identifyOpportunities()\n      };\n\n      // Calculate market health score\n      overview.market_health_score = this.calculateMarketHealthScore(overview);\n      \n      // Generate market predictions\n      overview.predictions = await this.generateMarketPredictions(overview);\n\n      this.logger.performance('crypto_market_overview_generation', Date.now() - startTime);\n\n      return overview;\n\n    } catch (error) {\n      this.logger.error('Market overview generation failed', error);\n      throw error;\n    }\n  }\n\n  // Get comprehensive market metrics\n  async getMarketMetrics() {\n    try {\n      // Mock data - would fetch from database/APIs\n      return {\n        total_market_cap: 2150000000000,\n        total_volume_24h: 95000000000,\n        btc_dominance: 42.5,\n        eth_dominance: 18.2,\n        active_cryptocurrencies: 23847,\n        market_cap_change_24h: 2.3,\n        volume_change_24h: -5.2,\n        market_cap_rank_changes: {\n          gainers: [\n            { symbol: 'SOL', rank_change: 2, market_cap: 12000000000 },\n            { symbol: 'MATIC', rank_change: 1, market_cap: 8500000000 }\n          ],\n          losers: [\n            { symbol: 'ADA', rank_change: -1, market_cap: 15000000000 },\n            { symbol: 'DOGE', rank_change: -2, market_cap: 9000000000 }\n          ]\n        },\n        stablecoin_dominance: 12.8,\n        defi_tvl: 185000000000,\n        nft_volume_24h: 45000000\n      };\n    } catch (error) {\n      this.logger.error('Market metrics fetch failed', error);\n      throw error;\n    }\n  }\n\n  // Analyze crypto sectors/categories\n  async analyzeSectors() {\n    try {\n      const sectors = [\n        {\n          name: 'Layer 1 Blockchains',\n          market_cap: 850000000000,\n          change_24h: 1.8,\n          change_7d: -3.2,\n          dominance: 39.5,\n          top_performers: ['ETH', 'SOL', 'AVAX'],\n          laggards: ['ADA', 'DOT', 'ALGO'],\n          momentum_score: 65,\n          sentiment_score: 72\n        },\n        {\n          name: 'DeFi',\n          market_cap: 125000000000,\n          change_24h: 4.2,\n          change_7d: 8.1,\n          dominance: 5.8,\n          top_performers: ['UNI', 'AAVE', 'CRV'],\n          laggards: ['SUSHI', 'YFI', 'COMP'],\n          momentum_score: 78,\n          sentiment_score: 81\n        },\n        {\n          name: 'Layer 2 Solutions',\n          market_cap: 35000000000,\n          change_24h: 6.8,\n          change_7d: 12.3,\n          dominance: 1.6,\n          top_performers: ['MATIC', 'OP', 'ARB'],\n          laggards: ['LRC', 'IMX'],\n          momentum_score: 85,\n          sentiment_score: 77\n        },\n        {\n          name: 'Gaming & Metaverse',\n          market_cap: 28000000000,\n          change_24h: -2.1,\n          change_7d: -8.5,\n          dominance: 1.3,\n          top_performers: ['SAND', 'MANA', 'AXS'],\n          laggards: ['GALA', 'ENJ', 'ALICE'],\n          momentum_score: 42,\n          sentiment_score: 38\n        },\n        {\n          name: 'Privacy Coins',\n          market_cap: 8500000000,\n          change_24h: -1.5,\n          change_7d: -5.2,\n          dominance: 0.4,\n          top_performers: ['XMR', 'ZEC'],\n          laggards: ['DASH', 'ZEN'],\n          momentum_score: 35,\n          sentiment_score: 45\n        }\n      ];\n\n      // Calculate sector rotation signals\n      const sectorRotation = this.calculateSectorRotation(sectors);\n      \n      return {\n        sectors,\n        sector_rotation: sectorRotation,\n        hottest_sector: sectors.reduce((hottest, sector) => \n          sector.momentum_score > hottest.momentum_score ? sector : hottest\n        ),\n        coldest_sector: sectors.reduce((coldest, sector) => \n          sector.momentum_score < coldest.momentum_score ? sector : coldest\n        )\n      };\n\n    } catch (error) {\n      this.logger.error('Sector analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Comprehensive sentiment analysis\n  async analyzeSentiment() {\n    try {\n      return {\n        fear_greed_index: {\n          value: 35,\n          classification: 'Fear',\n          historical_average: 45,\n          trend: 'declining'\n        },\n        social_sentiment: {\n          twitter_sentiment: 0.15, // -1 to 1 scale\n          reddit_sentiment: 0.08,\n          telegram_sentiment: 0.22,\n          overall_social: 0.15,\n          volume_change_24h: 12.5\n        },\n        news_sentiment: {\n          sentiment_score: 0.25,\n          article_count_24h: 1247,\n          positive_articles: 385,\n          negative_articles: 298,\n          neutral_articles: 564,\n          trending_topics: ['Bitcoin ETF', 'Ethereum Upgrade', 'Regulation', 'DeFi Innovation']\n        },\n        on_chain_sentiment: {\n          whale_activity: 'increasing',\n          exchange_inflows: 'decreasing',\n          long_term_holder_behavior: 'accumulating',\n          mining_sentiment: 'neutral'\n        },\n        institutional_sentiment: {\n          flow_direction: 'neutral',\n          announcement_sentiment: 'positive',\n          regulatory_outlook: 'improving'\n        },\n        retail_sentiment: {\n          search_trends: 'declining',\n          new_wallet_creation: 'stable',\n          trading_activity: 'below_average'\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Sentiment analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Market momentum analysis\n  async analyzeMomentum() {\n    try {\n      const assets = ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOT', 'DOGE', 'MATIC', 'LTC'];\n      \n      const momentumData = assets.map(asset => ({\n        symbol: asset,\n        momentum_1d: (Math.random() - 0.5) * 10,\n        momentum_7d: (Math.random() - 0.5) * 30,\n        momentum_30d: (Math.random() - 0.5) * 100,\n        rsi: 30 + Math.random() * 40,\n        macd_signal: Math.random() > 0.5 ? 'bullish' : 'bearish',\n        volume_momentum: Math.random() * 2,\n        momentum_score: 20 + Math.random() * 60\n      }));\n\n      // Sort by momentum score\n      momentumData.sort((a, b) => b.momentum_score - a.momentum_score);\n\n      return {\n        top_momentum: momentumData.slice(0, 5),\n        bottom_momentum: momentumData.slice(-5),\n        market_momentum: {\n          overall_score: momentumData.reduce((sum, asset) => sum + asset.momentum_score, 0) / momentumData.length,\n          trend: 'mixed',\n          breadth: this.calculateMarketBreadth(momentumData)\n        },\n        momentum_divergences: this.identifyMomentumDivergences(momentumData)\n      };\n\n    } catch (error) {\n      this.logger.error('Momentum analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Liquidity analysis across markets\n  async analyzeLiquidity() {\n    try {\n      return {\n        overall_liquidity: {\n          score: 72,\n          trend: 'improving',\n          depth_score: 68,\n          spread_score: 75\n        },\n        exchange_liquidity: [\n          {\n            exchange: 'Binance',\n            liquidity_score: 95,\n            avg_spread_bps: 2.5,\n            depth_1pct: 5200000,\n            market_share: 32.5\n          },\n          {\n            exchange: 'Coinbase',\n            liquidity_score: 88,\n            avg_spread_bps: 4.2,\n            depth_1pct: 3800000,\n            market_share: 18.3\n          },\n          {\n            exchange: 'Kraken',\n            liquidity_score: 82,\n            avg_spread_bps: 5.8,\n            depth_1pct: 2100000,\n            market_share: 8.7\n          }\n        ],\n        asset_liquidity: [\n          { symbol: 'BTC', liquidity_score: 100, avg_spread_bps: 1.2 },\n          { symbol: 'ETH', liquidity_score: 95, avg_spread_bps: 1.8 },\n          { symbol: 'BNB', liquidity_score: 85, avg_spread_bps: 3.2 },\n          { symbol: 'SOL', liquidity_score: 75, avg_spread_bps: 5.5 }\n        ],\n        liquidity_warnings: [\n          'Weekend liquidity typically 20-30% lower',\n          'Some altcoins show increased slippage above $100k orders'\n        ]\n      };\n\n    } catch (error) {\n      this.logger.error('Liquidity analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Cross-asset correlation analysis\n  async analyzeCorrelations() {\n    try {\n      const correlationMatrix = {\n        'BTC': { 'ETH': 0.82, 'BNB': 0.75, 'ADA': 0.68, 'SOL': 0.71 },\n        'ETH': { 'BTC': 0.82, 'BNB': 0.78, 'ADA': 0.73, 'SOL': 0.85 },\n        'BNB': { 'BTC': 0.75, 'ETH': 0.78, 'ADA': 0.65, 'SOL': 0.72 },\n        'ADA': { 'BTC': 0.68, 'ETH': 0.73, 'BNB': 0.65, 'SOL': 0.69 },\n        'SOL': { 'BTC': 0.71, 'ETH': 0.85, 'BNB': 0.72, 'ADA': 0.69 }\n      };\n\n      return {\n        correlation_matrix: correlationMatrix,\n        average_correlation: 0.72,\n        correlation_trend: 'increasing',\n        diversification_opportunities: [\n          { asset1: 'BTC', asset2: 'ADA', correlation: 0.68, opportunity: 'moderate' },\n          { asset1: 'BNB', asset2: 'ADA', correlation: 0.65, opportunity: 'good' }\n        ],\n        correlation_with_traditional: {\n          sp500: 0.45,\n          gold: 0.28,\n          dxy: -0.35,\n          vix: -0.22\n        },\n        regime_analysis: {\n          current_regime: 'high_correlation',\n          regime_stability: 'moderate',\n          regime_duration_days: 42\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Correlation analysis failed', error);\n      throw error;\n    }\n  }\n\n  // DeFi ecosystem analysis\n  async analyzeDeFi() {\n    try {\n      return {\n        total_value_locked: 185000000000,\n        tvl_change_24h: 2.8,\n        tvl_change_7d: -1.2,\n        tvl_change_30d: 12.5,\n        top_protocols: [\n          {\n            name: 'MakerDAO',\n            tvl: 8500000000,\n            category: 'lending',\n            chain: 'Ethereum',\n            tvl_change_24h: 1.2\n          },\n          {\n            name: 'Lido',\n            tvl: 7200000000,\n            category: 'staking',\n            chain: 'Ethereum',\n            tvl_change_24h: 3.8\n          },\n          {\n            name: 'Uniswap V3',\n            tvl: 5100000000,\n            category: 'dex',\n            chain: 'Ethereum',\n            tvl_change_24h: -0.5\n          },\n          {\n            name: 'Aave V3',\n            tvl: 4800000000,\n            category: 'lending',\n            chain: 'Multi-chain',\n            tvl_change_24h: 2.1\n          }\n        ],\n        chain_breakdown: [\n          { chain: 'Ethereum', tvl: 125000000000, dominance: 67.6 },\n          { chain: 'BSC', tvl: 28000000000, dominance: 15.1 },\n          { chain: 'Polygon', tvl: 12000000000, dominance: 6.5 },\n          { chain: 'Avalanche', tvl: 8500000000, dominance: 4.6 },\n          { chain: 'Arbitrum', tvl: 6200000000, dominance: 3.4 }\n        ],\n        yield_opportunities: [\n          { protocol: 'Compound', asset: 'USDC', apy: 4.2, risk_score: 3 },\n          { protocol: 'Aave', asset: 'ETH', apy: 3.8, risk_score: 2 },\n          { protocol: 'Curve', asset: '3CRV', apy: 5.5, risk_score: 4 },\n          { protocol: 'Yearn', asset: 'USDT', apy: 6.1, risk_score: 5 }\n        ],\n        defi_health_metrics: {\n          liquidation_risk: 'low',\n          protocol_diversity: 'high',\n          chain_diversity: 'moderate',\n          innovation_rate: 'high'\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('DeFi analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Institutional flow analysis\n  async analyzeInstitutionalFlow() {\n    try {\n      return {\n        net_flow_24h: 125000000, // USD\n        net_flow_7d: -45000000,\n        net_flow_30d: 2100000000,\n        flow_breakdown: {\n          etf_flows: 85000000,\n          corporate_treasury: 12000000,\n          hedge_funds: 28000000,\n          pension_funds: 0,\n          sovereign_wealth: 0\n        },\n        major_announcements: [\n          {\n            date: '2024-01-15',\n            institution: 'BlackRock',\n            type: 'ETF Purchase',\n            amount: 250000000,\n            impact: 'positive'\n          },\n          {\n            date: '2024-01-12',\n            institution: 'Grayscale',\n            type: 'Outflow',\n            amount: -180000000,\n            impact: 'negative'\n          }\n        ],\n        institutional_sentiment: {\n          overall: 'cautiously_optimistic',\n          confidence_score: 68,\n          allocation_trend: 'increasing',\n          regulatory_comfort: 'improving'\n        },\n        upcoming_catalysts: [\n          'Bitcoin ETF decisions (multiple pending)',\n          'Ethereum ETF applications review',\n          'Corporate earnings with crypto exposure',\n          'Central bank digital currency announcements'\n        ]\n      };\n\n    } catch (error) {\n      this.logger.error('Institutional flow analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Market structure analysis\n  async analyzeMarketStructure() {\n    try {\n      return {\n        market_concentration: {\n          top_10_dominance: 87.2,\n          top_50_dominance: 95.1,\n          herfindahl_index: 0.285\n        },\n        exchange_distribution: {\n          centralized_dominance: 85.3,\n          dex_share: 14.7,\n          p2p_share: 0.1\n        },\n        trading_patterns: {\n          retail_vs_institutional: {\n            retail: 72,\n            institutional: 28\n          },\n          trading_hours_distribution: {\n            asia: 35,\n            europe: 28,\n            americas: 37\n          },\n          order_size_distribution: {\n            small_orders_under_1k: 78,\n            medium_orders_1k_to_100k: 19,\n            large_orders_over_100k: 3\n          }\n        },\n        market_efficiency: {\n          arbitrage_opportunities: 'limited',\n          price_discovery: 'efficient',\n          information_flow: 'fast',\n          market_depth: 'adequate'\n        },\n        structural_risks: [\n          'High concentration in few exchanges',\n          'Regulatory uncertainty in key jurisdictions',\n          'Infrastructure scalability challenges',\n          'Custody and security risks'\n        ]\n      };\n\n    } catch (error) {\n      this.logger.error('Market structure analysis failed', error);\n      throw error;\n    }\n  }\n\n  // Identify market opportunities\n  async identifyOpportunities() {\n    try {\n      return {\n        arbitrage_opportunities: [\n          {\n            type: 'cross_exchange',\n            asset: 'ETH',\n            buy_exchange: 'Kraken',\n            sell_exchange: 'Binance',\n            spread: 0.8,\n            profit_potential: 12500,\n            risk_level: 'low',\n            execution_complexity: 'medium'\n          },\n          {\n            type: 'funding_rate',\n            asset: 'BTC',\n            exchange: 'Bybit',\n            funding_rate: 0.045,\n            profit_potential: 8200,\n            risk_level: 'medium',\n            execution_complexity: 'high'\n          }\n        ],\n        yield_opportunities: [\n          {\n            protocol: 'Compound',\n            asset: 'USDC',\n            yield: 4.2,\n            risk_score: 3,\n            liquidity: 'high'\n          },\n          {\n            protocol: 'Lido',\n            asset: 'ETH',\n            yield: 3.8,\n            risk_score: 2,\n            liquidity: 'medium'\n          }\n        ],\n        emerging_trends: [\n          {\n            trend: 'Layer 2 Adoption',\n            growth_rate: '45%',\n            opportunity_size: 'large',\n            time_horizon: '6-12 months'\n          },\n          {\n            trend: 'Real World Assets Tokenization',\n            growth_rate: '120%',\n            opportunity_size: 'medium',\n            time_horizon: '12-24 months'\n          }\n        ],\n        sector_rotation_signals: [\n          {\n            from_sector: 'Gaming',\n            to_sector: 'DeFi',\n            strength: 'strong',\n            confidence: 'high'\n          },\n          {\n            from_sector: 'Meme Coins',\n            to_sector: 'Infrastructure',\n            strength: 'moderate',\n            confidence: 'medium'\n          }\n        ]\n      };\n\n    } catch (error) {\n      this.logger.error('Opportunity identification failed', error);\n      throw error;\n    }\n  }\n\n  // Calculate market health score\n  calculateMarketHealthScore(overview) {\n    try {\n      let healthScore = 0;\n      let maxScore = 0;\n\n      // Market metrics (25% weight)\n      const marketWeight = 25;\n      const marketScore = overview.market_metrics.market_cap_change_24h > 0 ? 20 : 10;\n      healthScore += marketScore;\n      maxScore += marketWeight;\n\n      // Sentiment (20% weight)\n      const sentimentWeight = 20;\n      const sentimentScore = overview.sentiment_analysis.fear_greed_index.value * 0.2;\n      healthScore += sentimentScore;\n      maxScore += sentimentWeight;\n\n      // Liquidity (15% weight)\n      const liquidityWeight = 15;\n      const liquidityScore = (overview.liquidity_analysis.overall_liquidity.score * liquidityWeight) / 100;\n      healthScore += liquidityScore;\n      maxScore += liquidityWeight;\n\n      // DeFi health (15% weight)\n      const defiWeight = 15;\n      const defiScore = overview.defi_analysis.tvl_change_24h > 0 ? defiWeight * 0.8 : defiWeight * 0.4;\n      healthScore += defiScore;\n      maxScore += defiWeight;\n\n      // Institutional flow (15% weight)\n      const institutionalWeight = 15;\n      const institutionalScore = overview.institutional_flow.net_flow_24h > 0 ? \n        institutionalWeight * 0.8 : institutionalWeight * 0.3;\n      healthScore += institutionalScore;\n      maxScore += institutionalWeight;\n\n      // Momentum (10% weight)\n      const momentumWeight = 10;\n      const momentumScore = (overview.momentum_analysis.market_momentum.overall_score * momentumWeight) / 100;\n      healthScore += momentumScore;\n      maxScore += momentumWeight;\n\n      const normalizedScore = (healthScore / maxScore) * 100;\n\n      return {\n        score: Math.round(normalizedScore),\n        grade: normalizedScore > 80 ? 'A' : normalizedScore > 60 ? 'B' : \n               normalizedScore > 40 ? 'C' : normalizedScore > 20 ? 'D' : 'F',\n        status: normalizedScore > 70 ? 'healthy' : normalizedScore > 40 ? 'cautious' : 'risky',\n        components: {\n          market_metrics: marketScore,\n          sentiment: sentimentScore,\n          liquidity: liquidityScore,\n          defi_health: defiScore,\n          institutional_flow: institutionalScore,\n          momentum: momentumScore\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Market health score calculation failed', error);\n      return {\n        score: 50,\n        grade: 'C',\n        status: 'cautious',\n        error: 'Calculation failed'\n      };\n    }\n  }\n\n  // Generate market predictions\n  async generateMarketPredictions(overview) {\n    try {\n      return {\n        short_term: {\n          timeframe: '1-7 days',\n          direction: 'slightly_bullish',\n          confidence: 65,\n          key_factors: [\n            'Improving institutional sentiment',\n            'Technical support holding',\n            'Reduced selling pressure'\n          ],\n          price_targets: {\n            btc: { optimistic: 48000, realistic: 46000, pessimistic: 42000 },\n            eth: { optimistic: 3100, realistic: 2900, pessimistic: 2600 }\n          }\n        },\n        medium_term: {\n          timeframe: '1-4 weeks',\n          direction: 'bullish',\n          confidence: 58,\n          key_factors: [\n            'ETF approval expectations',\n            'DeFi innovation cycle',\n            'Regulatory clarity improving'\n          ],\n          price_targets: {\n            btc: { optimistic: 52000, realistic: 48000, pessimistic: 40000 },\n            eth: { optimistic: 3500, realistic: 3100, pessimistic: 2500 }\n          }\n        },\n        long_term: {\n          timeframe: '3-12 months',\n          direction: 'bullish',\n          confidence: 72,\n          key_factors: [\n            'Institutional adoption accelerating',\n            'Infrastructure improvements',\n            'Macroeconomic tailwinds'\n          ],\n          price_targets: {\n            btc: { optimistic: 75000, realistic: 60000, pessimistic: 45000 },\n            eth: { optimistic: 5000, realistic: 4000, pessimistic: 2800 }\n          }\n        },\n        key_risks: [\n          'Regulatory crackdown in major jurisdictions',\n          'Major exchange or protocol hack',\n          'Macroeconomic recession',\n          'Technical scalability issues'\n        ],\n        catalysts: [\n          'Bitcoin ETF approval',\n          'Ethereum scaling solutions adoption',\n          'Central bank digital currency launches',\n          'Major corporate adoption announcements'\n        ]\n      };\n\n    } catch (error) {\n      this.logger.error('Market predictions generation failed', error);\n      throw error;\n    }\n  }\n\n  // Helper methods\n  calculateSectorRotation(sectors) {\n    // Simplified sector rotation calculation\n    const momentumRanked = sectors.map(s => ({ ...s })).sort((a, b) => b.momentum_score - a.momentum_score);\n    \n    return {\n      hot_sectors: momentumRanked.slice(0, 2),\n      cold_sectors: momentumRanked.slice(-2),\n      rotation_strength: 'moderate',\n      rotation_frequency: 'weekly'\n    };\n  }\n\n  calculateMarketBreadth(momentumData) {\n    const advancing = momentumData.filter(asset => asset.momentum_1d > 0).length;\n    const declining = momentumData.filter(asset => asset.momentum_1d < 0).length;\n    \n    return {\n      advance_decline_ratio: advancing / declining,\n      advancing_count: advancing,\n      declining_count: declining,\n      breadth_score: (advancing / momentumData.length) * 100\n    };\n  }\n\n  identifyMomentumDivergences(momentumData) {\n    // Simplified divergence identification\n    return momentumData.filter(asset => \n      (asset.momentum_1d > 0 && asset.momentum_7d < 0) || \n      (asset.momentum_1d < 0 && asset.momentum_7d > 0)\n    ).map(asset => ({\n      symbol: asset.symbol,\n      type: asset.momentum_1d > 0 ? 'bullish_divergence' : 'bearish_divergence',\n      strength: Math.abs(asset.momentum_1d - asset.momentum_7d)\n    }));\n  }\n}\n\n// Initialize analytics engine\nconst analyticsEngine = new CryptoMarketAnalytics();\n\n// GET /crypto-analytics/overview - Comprehensive market overview\nrouter.get('/overview', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    logger.info('Crypto market analytics overview request', {\n      correlation_id: correlationId\n    });\n\n    // Generate comprehensive market overview\n    const marketOverview = await analyticsEngine.generateMarketOverview();\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_market_analytics_overview', duration, {\n      correlation_id: correlationId,\n      market_health_score: marketOverview.market_health_score?.score\n    });\n\n    res.json({\n      success: true,\n      data: marketOverview,\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto market analytics overview failed', error, {\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate crypto market analytics overview',\n      error_code: 'CRYPTO_ANALYTICS_OVERVIEW_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\n// GET /crypto-analytics/sectors - Detailed sector analysis\nrouter.get('/sectors', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    logger.info('Crypto sector analysis request', {\n      correlation_id: correlationId\n    });\n\n    const sectorAnalysis = await analyticsEngine.analyzeSectors();\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_sector_analysis', duration, {\n      correlation_id: correlationId,\n      sectors_analyzed: sectorAnalysis.sectors?.length\n    });\n\n    res.json({\n      success: true,\n      data: sectorAnalysis,\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto sector analysis failed', error, {\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze crypto sectors',\n      error_code: 'CRYPTO_SECTOR_ANALYSIS_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}