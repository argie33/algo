{"version":3,"names":["cov_7d5zky34s","actualCoverage","crypto","s","require","decrypt","encryptedText","iv","authTag","salt","f","key","pbkdf2Sync","Buffer","from","decipher","createDecipherGCM","setKey","setIV","setAuthTag","decrypted","update","final","error","console","Error","encrypt","text","randomBytes","cipher","createCipherGCM","encrypted","getAuthTag","toString","generateSalt","module","exports"],"sources":["secrets.js"],"sourcesContent":["const crypto = require('crypto');\n\n/**\n * Encryption/Decryption utilities for API keys\n * Used to securely store and retrieve user API keys\n */\n\n/**\n * Decrypt an encrypted value\n * @param {string} encryptedText - The encrypted text (hex)\n * @param {string} iv - The initialization vector (hex)\n * @param {string} authTag - The authentication tag (hex)\n * @param {string} salt - The user's salt (hex)\n * @returns {string} The decrypted text\n */\nfunction decrypt(encryptedText, iv, authTag, salt) {\n  try {\n    // Derive key from salt (same as used in encryption)\n    const key = crypto.pbkdf2Sync(salt, Buffer.from(salt, 'hex'), 10000, 32, 'sha256');\n    \n    // Create decipher\n    const decipher = crypto.createDecipherGCM('aes-256-gcm');\n    decipher.setKey(key);\n    decipher.setIV(Buffer.from(iv, 'hex'));\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n    \n    // Decrypt\n    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  } catch (error) {\n    console.error('Decryption error:', error);\n    throw new Error('Failed to decrypt API key');\n  }\n}\n\n/**\n * Encrypt a value\n * @param {string} text - The text to encrypt\n * @param {string} salt - The user's salt (hex)\n * @returns {object} Object containing encrypted text, iv, and authTag\n */\nfunction encrypt(text, salt) {\n  try {\n    // Derive key from salt\n    const key = crypto.pbkdf2Sync(salt, Buffer.from(salt, 'hex'), 10000, 32, 'sha256');\n    \n    // Generate IV\n    const iv = crypto.randomBytes(16);\n    \n    // Create cipher\n    const cipher = crypto.createCipherGCM('aes-256-gcm');\n    cipher.setKey(key);\n    cipher.setIV(iv);\n    \n    // Encrypt\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    // Get auth tag\n    const authTag = cipher.getAuthTag();\n    \n    return {\n      encrypted: encrypted,\n      iv: iv.toString('hex'),\n      authTag: authTag.toString('hex')\n    };\n  } catch (error) {\n    console.error('Encryption error:', error);\n    throw new Error('Failed to encrypt API key');\n  }\n}\n\n/**\n * Generate a random salt\n * @returns {string} Random salt as hex string\n */\nfunction generateSalt() {\n  return crypto.randomBytes(32).toString('hex');\n}\n\nmodule.exports = {\n  decrypt,\n  encrypt,\n  generateSalt\n};"],"mappings":"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","ignoreList":[]}