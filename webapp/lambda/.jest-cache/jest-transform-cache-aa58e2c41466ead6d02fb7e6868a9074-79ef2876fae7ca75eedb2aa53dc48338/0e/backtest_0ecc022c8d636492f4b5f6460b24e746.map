{"version":3,"names":["cov_26h5l0vw2s","actualCoverage","express","s","require","router","Router","query","safeQuery","tablesExist","authenticateToken","createValidationMiddleware","rateLimitConfigs","sqlInjectionPrevention","xssPrevention","sanitizers","validator","path","fs","backtestValidationSchemas","runBacktest","strategy","required","type","sanitizer","value","f","string","maxLength","escapeHTML","dangerousPatterns","some","pattern","test","errorMessage","symbols","Array","isArray","b","slice","map","symbol","length","every","startDate","isDate","format","endDate","initialCapital","number","min","max","defaultValue","commission","slippage","symbolSearch","search","alphaNumOnly","limit","integer","strategyManagement","name","code","language","includes","toLowerCase","use","heavy","get","req","res","json","success","data","system","version","status","available_endpoints","timestamp","Date","toISOString","BacktestEngine","constructor","config","maxPositions","positions","Map","trades","equity","date","cash","currentDate","metrics","executeStrategy","strategyCode","marketData","result","safeExecuteStrategy","error","Error","message","safeContext","buy","safeBuy","bind","sell","safeSell","sellAll","safeSellAll","getPosition","Math","abs","round","floor","ceil","pow","sqrt","parseFloat","parseInt","isNaN","isFinite","executePreDefinedStrategy","context","executeSimpleMAStrategy","executeRSIStrategy","executeBuyAndHoldStrategy","executeMomentumStrategy","quantity","price","stopLoss","takeProfit","reason","prices","dayData","Object","entries","close","position","avgPrice","mockRSI","sin","now","keys","open","dayReturn","totalCost","existingPosition","newQuantity","newAvgPrice","set","entryDate","push","action","revenue","realizedPnL","delete","pnl","undefined","from","updatePortfolioValue","totalValue","openPositions","currentPrice","calculateMetrics","returns","values","e","i","dailyReturn","totalReturn","annualizedReturn","avgReturn","reduce","sum","r","variance","volatility","sharpeRatio","maxDrawdown","peak","drawdowns","drawdown","winningTrades","filter","t","losingTrades","totalTrades","winRate","grossProfit","grossLoss","profitFactor","finalValue","startValue","post","validated","console","log","backtestConfig","engine","dataPromises","getHistoricalData","symbolData","Promise","all","forEach","index","allDates","Set","row","add","sortedDates","sort","currentData","currentPrices","find","d","details","finalPositions","alternative","strategies","backtestStore","loadStrategies","addStrategy","getStrategy","params","id","deleteStrategy","sqlQuery","rows","symbolQueries","symbolQuery","source","count","tableError","mockSymbols","short_name","templates","description","userId","user","sub","strategy_code","parameters","JSON","parse","createdAt","created_at","updatedAt","updated_at","isActive","is_active","dbError","mockStrategies","period","rsi_period","oversold","overbought","note","offset","history","strategyName","strategy_name","start_date","end_date","initial_capital","final_value","total_return","max_drawdown","sharpe_ratio","win_rate","total_trades","countResult","pagination","total","hasMore","database_query_failed","detailed_diagnostics","attempted_operations","potential_causes","troubleshooting_steps","system_checks","emptyHistory","body","Function","valid","module","exports"],"sources":["backtest.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { query, safeQuery, tablesExist } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { \n  createValidationMiddleware, \n  rateLimitConfigs, \n  sqlInjectionPrevention, \n  xssPrevention,\n  sanitizers\n} = require('../middleware/validation');\nconst validator = require('validator');\nconst path = require('path');\nconst fs = require('fs');\n\n// Backtest validation schemas\nconst backtestValidationSchemas = {\n  runBacktest: {\n    strategy: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10000, escapeHTML: true }),\n      validator: (value) => {\n        // Validate strategy code for security - only allow safe patterns\n        const dangerousPatterns = [\n          /require\\s*\\(/i,\n          /import\\s+/i,\n          /process\\s*\\./i,\n          /global\\s*\\./i,\n          /eval\\s*\\(/i,\n          /Function\\s*\\(/i,\n          /constructor/i,\n          /prototype/i,\n          /__proto__/i,\n          /fs\\s*\\./i,\n          /child_process/i,\n          /exec/i,\n          /spawn/i,\n          /with\\s*\\(/i,\n          /delete\\s+/i,\n          /setTimeout/i,\n          /setInterval/i\n        ];\n        \n        return !dangerousPatterns.some(pattern => pattern.test(value));\n      },\n      errorMessage: 'Strategy contains prohibited code patterns. Only basic math operations, variables, and trading functions are allowed.'\n    },\n    symbols: {\n      required: true,\n      type: 'array',\n      sanitizer: (value) => {\n        if (!Array.isArray(value)) return [];\n        return value.slice(0, 20).map(symbol => sanitizers.symbol(symbol));\n      },\n      validator: (value) => Array.isArray(value) && value.length > 0 && value.length <= 20 && value.every(s => /^[A-Z]{1,10}$/.test(s)),\n      errorMessage: 'Symbols must be an array of 1-20 valid stock symbols (1-10 uppercase letters each)'\n    },\n    startDate: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'Start date must be in YYYY-MM-DD format'\n    },\n    endDate: {\n      required: true,\n      type: 'string', \n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'End date must be in YYYY-MM-DD format'\n    },\n    initialCapital: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 1000, max: 10000000, defaultValue: 100000 }),\n      validator: (value) => !value || (value >= 1000 && value <= 10000000),\n      errorMessage: 'Initial capital must be between $1,000 and $10,000,000'\n    },\n    commission: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 0.1, defaultValue: 0.001 }),\n      validator: (value) => !value || (value >= 0 && value <= 0.1),\n      errorMessage: 'Commission must be between 0 and 0.1 (10%)'\n    },\n    slippage: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 0.1, defaultValue: 0.001 }),\n      validator: (value) => !value || (value >= 0 && value <= 0.1),\n      errorMessage: 'Slippage must be between 0 and 0.1 (10%)'\n    }\n  },\n\n  symbolSearch: {\n    search: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n      validator: (value) => !value || value.length <= 50,\n      errorMessage: 'Search term must be 50 characters or less'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 500, defaultValue: 100 }),\n      validator: (value) => !value || (value >= 1 && value <= 500),\n      errorMessage: 'Limit must be between 1 and 500'\n    }\n  },\n\n  strategyManagement: {\n    name: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 100, escapeHTML: true }),\n      validator: (value) => value.length >= 3 && value.length <= 100 && /^[a-zA-Z0-9\\s\\-_\\.]+$/.test(value),\n      errorMessage: 'Strategy name must be 3-100 characters, alphanumeric with spaces, hyphens, underscores, or dots'\n    },\n    code: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10000, escapeHTML: true }),\n      validator: (value) => {\n        // Same security validation as strategy field\n        const dangerousPatterns = [\n          /require\\s*\\(/i, /import\\s+/i, /process\\s*\\./i, /global\\s*\\./i,\n          /eval\\s*\\(/i, /Function\\s*\\(/i, /constructor/i, /prototype/i,\n          /__proto__/i, /fs\\s*\\./i, /child_process/i, /exec/i, /spawn/i,\n          /with\\s*\\(/i, /delete\\s+/i, /setTimeout/i, /setInterval/i\n        ];\n        return !dangerousPatterns.some(pattern => pattern.test(value));\n      },\n      errorMessage: 'Strategy code contains prohibited patterns'\n    },\n    language: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, alphaNumOnly: true }),\n      validator: (value) => !value || ['javascript', 'python'].includes(value.toLowerCase()),\n      errorMessage: 'Language must be javascript or python'\n    }\n  }\n};\n\n// Apply authentication and security middleware to all backtest routes\nrouter.use(authenticateToken);\nrouter.use(sqlInjectionPrevention);\nrouter.use(xssPrevention);\nrouter.use(rateLimitConfigs.heavy); // Heavy rate limiting for resource-intensive operations\n\n// Root backtest endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'Backtesting API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'POST /backtest/run - Execute backtest with strategy',\n        'GET /backtest/symbols - Get available symbols for backtesting',\n        'GET /backtest/templates - Get strategy templates',\n        'GET /backtest/strategies - Get user strategies',\n        'POST /backtest/validate - Validate strategy code'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Backtesting engine class\nclass BacktestEngine {\n  constructor(config) {\n    this.config = {\n      initialCapital: config.initialCapital || 100000,\n      commission: config.commission || 0.001, // 0.1%\n      slippage: config.slippage || 0.001, // 0.1%\n      maxPositions: config.maxPositions || 10,\n      startDate: config.startDate,\n      endDate: config.endDate,\n      symbols: config.symbols || [],\n      ...config\n    };\n    \n    this.positions = new Map();\n    this.trades = [];\n    this.equity = [{ date: config.startDate, value: this.config.initialCapital }];\n    this.cash = this.config.initialCapital;\n    this.currentDate = null;\n    this.metrics = {};\n  }\n\n  // Execute user's strategy code safely using a secure parser\n  async executeStrategy(strategyCode, marketData) {\n    try {\n      // Parse and execute strategy using safe interpreter\n      const result = this.safeExecuteStrategy(strategyCode, marketData);\n      return result;\n    } catch (error) {\n      throw new Error(`Strategy execution error: ${error.message}`);\n    }\n  }\n\n  // Safe strategy execution - only allow predefined patterns and functions\n  safeExecuteStrategy(strategyCode, marketData) {\n    // Create a restricted execution environment\n    const safeContext = {\n      data: marketData,\n      positions: new Map(this.positions),\n      cash: this.cash,\n      buy: this.safeBuy.bind(this),\n      sell: this.safeSell.bind(this),\n      sellAll: this.safeSellAll.bind(this),\n      getPosition: this.getPosition.bind(this),\n      // Safe math operations only\n      Math: {\n        abs: Math.abs,\n        min: Math.min,\n        max: Math.max,\n        round: Math.round,\n        floor: Math.floor,\n        ceil: Math.ceil,\n        pow: Math.pow,\n        sqrt: Math.sqrt\n      },\n      parseFloat: parseFloat,\n      parseInt: parseInt,\n      isNaN: isNaN,\n      isFinite: isFinite\n    };\n\n    // Instead of eval, use a simple pattern-based strategy executor\n    // This is much safer but more limited - only predefined strategy patterns allowed\n    return this.executePreDefinedStrategy(strategyCode, safeContext);\n  }\n\n  // Execute only predefined, safe strategy patterns\n  executePreDefinedStrategy(strategyCode, context) {\n    // Simple moving average crossover strategy pattern\n    if (strategyCode.includes('simple_ma_crossover')) {\n      return this.executeSimpleMAStrategy(context);\n    }\n    \n    // RSI-based strategy pattern\n    if (strategyCode.includes('rsi_strategy')) {\n      return this.executeRSIStrategy(context);\n    }\n    \n    // Buy and hold strategy\n    if (strategyCode.includes('buy_and_hold')) {\n      return this.executeBuyAndHoldStrategy(context);\n    }\n\n    // Momentum strategy\n    if (strategyCode.includes('momentum_strategy')) {\n      return this.executeMomentumStrategy(context);\n    }\n\n    // If no predefined pattern matches, return error\n    throw new Error('Strategy pattern not recognized. Please use one of the predefined strategy templates: simple_ma_crossover, rsi_strategy, buy_and_hold, momentum_strategy');\n  }\n\n  // Safe buy wrapper with additional validation\n  safeBuy(symbol, quantity, price, stopLoss = null, takeProfit = null) {\n    // Validate inputs\n    if (!symbol || typeof symbol !== 'string') throw new Error('Invalid symbol');\n    if (!quantity || quantity <= 0 || quantity > 10000) throw new Error('Invalid quantity');\n    if (!price || price <= 0 || price > 100000) throw new Error('Invalid price');\n    if (stopLoss && (stopLoss <= 0 || stopLoss >= price)) throw new Error('Invalid stop loss');\n    if (takeProfit && (takeProfit <= price || takeProfit > price * 10)) throw new Error('Invalid take profit');\n    \n    return this.buy(symbol, quantity, price, stopLoss, takeProfit);\n  }\n\n  // Safe sell wrapper with additional validation\n  safeSell(symbol, quantity, price, reason = null) {\n    if (!symbol || typeof symbol !== 'string') throw new Error('Invalid symbol');\n    if (!quantity || quantity <= 0 || quantity > 10000) throw new Error('Invalid quantity');\n    if (!price || price <= 0 || price > 100000) throw new Error('Invalid price');\n    \n    return this.sell(symbol, quantity, price, reason);\n  }\n\n  // Safe sell all wrapper\n  safeSellAll(prices) {\n    if (!prices || typeof prices !== 'object') throw new Error('Invalid prices object');\n    return this.sellAll(prices);\n  }\n\n  // Predefined strategy implementations\n  executeSimpleMAStrategy(context) {\n    // Simple 20/50 day moving average crossover\n    for (const [symbol, dayData] of Object.entries(context.data)) {\n      if (dayData && dayData.close) {\n        const position = context.getPosition(symbol);\n        \n        // Simple buy signal: if no position and price is reasonable\n        if (!position && dayData.close > 10 && dayData.close < 1000) {\n          context.buy(symbol, 10, dayData.close);\n        }\n        // Simple sell signal: if position exists and price increased by 5%\n        else if (position && dayData.close > position.avgPrice * 1.05) {\n          context.sell(symbol, position.quantity, dayData.close, 'profit_target');\n        }\n      }\n    }\n  }\n\n  executeRSIStrategy(context) {\n    // Simple RSI-based strategy (mock RSI calculation)\n    for (const [symbol, dayData] of Object.entries(context.data)) {\n      if (dayData && dayData.close) {\n        const position = context.getPosition(symbol);\n        \n        // Mock RSI - in real implementation would calculate properly\n        const mockRSI = 50 + Math.sin(Date.now() / 1000000) * 30; // Mock oscillating RSI\n        \n        if (!position && mockRSI < 30 && dayData.close > 5) {\n          context.buy(symbol, 5, dayData.close);\n        } else if (position && mockRSI > 70) {\n          context.sell(symbol, position.quantity, dayData.close, 'rsi_overbought');\n        }\n      }\n    }\n  }\n\n  executeBuyAndHoldStrategy(context) {\n    // Buy once and hold\n    for (const [symbol, dayData] of Object.entries(context.data)) {\n      if (dayData && dayData.close) {\n        const position = context.getPosition(symbol);\n        \n        if (!position && dayData.close > 10) {\n          const quantity = Math.floor(context.cash / (dayData.close * Object.keys(context.data).length));\n          if (quantity > 0) {\n            context.buy(symbol, quantity, dayData.close);\n          }\n        }\n      }\n    }\n  }\n\n  executeMomentumStrategy(context) {\n    // Simple momentum strategy\n    for (const [symbol, dayData] of Object.entries(context.data)) {\n      if (dayData && dayData.close && dayData.open) {\n        const position = context.getPosition(symbol);\n        const dayReturn = (dayData.close - dayData.open) / dayData.open;\n        \n        // Buy on positive momentum\n        if (!position && dayReturn > 0.02 && dayData.close > 10) {\n          context.buy(symbol, 5, dayData.close);\n        }\n        // Sell on negative momentum or profit target\n        else if (position && (dayReturn < -0.02 || dayData.close > position.avgPrice * 1.1)) {\n          context.sell(symbol, position.quantity, dayData.close, 'momentum_exit');\n        }\n      }\n    }\n  }\n\n  // Buy position\n  buy(symbol, quantity, price = null, stopLoss = null, takeProfit = null) {\n    if (!price) {\n      throw new Error('Price is required for buy orders');\n    }\n\n    const totalCost = quantity * price * (1 + this.config.commission + this.config.slippage);\n    \n    if (totalCost > this.cash) {\n      return false; // Insufficient funds\n    }\n\n    const existingPosition = this.positions.get(symbol);\n    if (existingPosition) {\n      // Add to existing position\n      const newQuantity = existingPosition.quantity + quantity;\n      const newAvgPrice = ((existingPosition.quantity * existingPosition.avgPrice) + (quantity * price)) / newQuantity;\n      \n      this.positions.set(symbol, {\n        ...existingPosition,\n        quantity: newQuantity,\n        avgPrice: newAvgPrice,\n        stopLoss: stopLoss || existingPosition.stopLoss,\n        takeProfit: takeProfit || existingPosition.takeProfit\n      });\n    } else {\n      this.positions.set(symbol, {\n        symbol,\n        quantity,\n        avgPrice: price,\n        entryDate: this.currentDate,\n        stopLoss,\n        takeProfit\n      });\n    }\n\n    this.cash -= totalCost;\n    \n    this.trades.push({\n      date: this.currentDate,\n      symbol,\n      action: 'BUY',\n      quantity,\n      price,\n      commission: quantity * price * this.config.commission,\n      slippage: quantity * price * this.config.slippage\n    });\n\n    return true;\n  }\n\n  // Sell position (now supports stop-loss/take-profit logic)\n  sell(symbol, quantity, price = null, reason = null) {\n    if (!price) {\n      throw new Error('Price is required for sell orders');\n    }\n    const position = this.positions.get(symbol);\n    if (!position || position.quantity < quantity) {\n      return false; // No position or insufficient quantity\n    }\n    const revenue = quantity * price * (1 - this.config.commission - this.config.slippage);\n    this.cash += revenue;\n    let realizedPnL = (price - position.avgPrice) * quantity - (quantity * price * (this.config.commission + this.config.slippage));\n    if (position.quantity === quantity) {\n      this.positions.delete(symbol);\n    } else {\n      this.positions.set(symbol, {\n        ...position,\n        quantity: position.quantity - quantity\n      });\n    }\n    this.trades.push({\n      date: this.currentDate,\n      symbol,\n      action: 'SELL',\n      quantity,\n      price,\n      commission: quantity * price * this.config.commission,\n      slippage: quantity * price * this.config.slippage,\n      pnl: realizedPnL,\n      reason: reason || undefined\n    });\n    return true;\n  }\n\n  // Enhanced: Sell all positions with stop-loss/take-profit logic\n  sellAll(prices) {\n    const symbols = Array.from(this.positions.keys());\n    for (const symbol of symbols) {\n      const position = this.positions.get(symbol);\n      const price = prices[symbol];\n      if (price) {\n        // Check stop-loss/take-profit\n        let reason = null;\n        if (position.stopLoss && price <= position.stopLoss) reason = 'stop-loss';\n        if (position.takeProfit && price >= position.takeProfit) reason = 'take-profit';\n        this.sell(symbol, position.quantity, price, reason);\n      }\n    }\n  }\n\n  // Get position\n  getPosition(symbol) {\n    return this.positions.get(symbol) || null;\n  }\n\n  // Update portfolio value (add open positions count)\n  updatePortfolioValue(prices) {\n    let totalValue = this.cash;\n    let openPositions = 0;\n    for (const [symbol, position] of this.positions) {\n      const currentPrice = prices[symbol];\n      if (currentPrice) {\n        totalValue += position.quantity * currentPrice;\n        openPositions++;\n      }\n    }\n    this.equity.push({\n      date: this.currentDate,\n      value: totalValue,\n      cash: this.cash,\n      positions: openPositions\n    });\n  }\n\n  // Calculate performance metrics\n  calculateMetrics() {\n    if (this.equity.length < 2) {\n      return {};\n    }\n\n    const returns = [];\n    const values = this.equity.map(e => e.value);\n    \n    for (let i = 1; i < values.length; i++) {\n      const dailyReturn = (values[i] - values[i-1]) / values[i-1];\n      returns.push(dailyReturn);\n    }\n\n    const totalReturn = (values[values.length - 1] - values[0]) / values[0];\n    const annualizedReturn = Math.pow(1 + totalReturn, 252 / returns.length) - 1;\n    \n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n    const volatility = Math.sqrt(variance) * Math.sqrt(252);\n    \n    const sharpeRatio = volatility !== 0 ? (annualizedReturn - 0.02) / volatility : 0; // Assuming 2% risk-free rate\n    \n    // Calculate max drawdown\n    let maxDrawdown = 0;\n    let peak = values[0];\n    const drawdowns = [];\n    \n    for (let i = 1; i < values.length; i++) {\n      if (values[i] > peak) {\n        peak = values[i];\n      }\n      const drawdown = (peak - values[i]) / peak;\n      drawdowns.push(drawdown);\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n\n    // Win rate calculation\n    const winningTrades = this.trades.filter(t => t.pnl && t.pnl > 0).length;\n    const losingTrades = this.trades.filter(t => t.pnl && t.pnl < 0).length;\n    const totalTrades = winningTrades + losingTrades;\n    const winRate = totalTrades > 0 ? winningTrades / totalTrades : 0;\n\n    // Profit factor\n    const grossProfit = this.trades.reduce((sum, t) => sum + Math.max(t.pnl || 0, 0), 0);\n    const grossLoss = Math.abs(this.trades.reduce((sum, t) => sum + Math.min(t.pnl || 0, 0), 0));\n    const profitFactor = grossLoss !== 0 ? grossProfit / grossLoss : 0;\n\n    return {\n      totalReturn: totalReturn * 100,\n      annualizedReturn: annualizedReturn * 100,\n      volatility: volatility * 100,\n      sharpeRatio,\n      maxDrawdown: maxDrawdown * 100,\n      winRate: winRate * 100,\n      profitFactor,\n      totalTrades,\n      winningTrades,\n      losingTrades,\n      grossProfit,\n      grossLoss,\n      finalValue: values[values.length - 1],\n      startValue: values[0]\n    };\n  }\n}\n\n// --- Unified JavaScript Backtest Endpoint (Quantopian-like API) ---\n// The /run endpoint below is now the main entry point for all backtests.\n// It executes user strategies in a controlled context, day-by-day, with helpers similar to Quantopian (buy, sell, getPosition, etc).\n// Users should write their strategies in JavaScript using these helpers.\n\n// Run backtest endpoint with comprehensive validation\nrouter.post('/run', createValidationMiddleware(backtestValidationSchemas.runBacktest), async (req, res) => {\n  try {\n    const {\n      strategy,\n      symbols,\n      startDate,\n      endDate,\n      initialCapital,\n      commission,\n      slippage\n    } = req.validated;\n\n    console.log(`🔄 Starting backtest: ${symbols.length} symbols, ${startDate} to ${endDate}`);\n\n    // Initialize backtest engine with validated parameters\n    const backtestConfig = {\n      initialCapital: initialCapital || 100000,\n      commission: commission || 0.001,\n      slippage: slippage || 0.001,\n      symbols,\n      startDate,\n      endDate\n    };\n    \n    const engine = new BacktestEngine(backtestConfig);\n\n    // Get historical data for all symbols\n    const dataPromises = symbols.map(symbol => \n      getHistoricalData(symbol, startDate, endDate)\n    );\n    \n    const symbolData = await Promise.all(dataPromises);\n    const marketData = {};\n    \n    // Organize data by symbol\n    symbols.forEach((symbol, index) => {\n      marketData[symbol] = symbolData[index];\n    });\n\n    // Get all unique dates and sort them\n    const allDates = new Set();\n    Object.values(marketData).forEach(data => {\n      data.forEach(row => allDates.add(row.date));\n    });\n    \n    const sortedDates = Array.from(allDates).sort();\n\n    // Run backtest day by day\n    for (const date of sortedDates) {\n      engine.currentDate = date;\n      \n      // Prepare current day data\n      const currentData = {};\n      const currentPrices = {};\n      \n      symbols.forEach(symbol => {\n        const dayData = marketData[symbol].find(d => d.date === date);\n        if (dayData) {\n          currentData[symbol] = dayData;\n          currentPrices[symbol] = dayData.close;\n        }\n      });\n\n      // Execute strategy\n      try {\n        await engine.executeStrategy(strategy, currentData);\n      } catch (error) {\n        return res.status(400).json({ \n          error: 'Strategy execution failed',\n          details: error.message,\n          date: date\n        });\n      }\n\n      // Update portfolio value\n      engine.updatePortfolioValue(currentPrices);\n    }\n\n    // Calculate final metrics\n    const metrics = engine.calculateMetrics();\n\n    // Return results\n    res.json({\n      success: true,\n      config: backtestConfig,\n      metrics,\n      equity: engine.equity,\n      trades: engine.trades,\n      finalPositions: Array.from(engine.positions.entries()).map(([symbol, position]) => ({\n        symbol,\n        ...position\n      }))\n    });\n\n  } catch (error) {\n    console.error('Backtest error:', error);\n    res.status(500).json({ \n      error: 'Backtest execution failed',\n      details: error.message \n    });\n  }\n});\n\n// Run Python strategy endpoint (sandboxed)\n// SECURITY: Python execution disabled due to code injection risk\nrouter.post('/run-python', (req, res) => {\n  res.status(403).json({\n    error: 'Python execution disabled',\n    message: 'Direct Python code execution has been disabled for security reasons. Please use the predefined strategy templates instead.',\n    alternative: 'Use /run endpoint with predefined strategy patterns: simple_ma_crossover, rsi_strategy, buy_and_hold, momentum_strategy'\n  });\n});\n\n// User strategy management endpoints\nrouter.get('/strategies', (req, res) => {\n  res.json({ strategies: backtestStore.loadStrategies() });\n});\n\nrouter.post('/strategies', createValidationMiddleware(backtestValidationSchemas.strategyManagement), (req, res) => {\n  const { name, code, language } = req.validated;\n  const strategy = backtestStore.addStrategy({ name, code, language: language || 'javascript' });\n  res.json({ strategy });\n});\n\nrouter.get('/strategies/:id', (req, res) => {\n  const strategy = backtestStore.getStrategy(req.params.id);\n  if (!strategy) return res.status(404).json({ error: 'Not found' });\n  res.json({ strategy });\n});\n\nrouter.delete('/strategies/:id', (req, res) => {\n  backtestStore.deleteStrategy(req.params.id);\n  res.json({ success: true });\n});\n\n// Get historical data for a symbol\nasync function getHistoricalData(symbol, startDate, endDate) {\n  try {\n    const sqlQuery = `\n      SELECT \n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        adj_close\n      FROM price_daily \n      WHERE symbol = $1 \n        AND date >= $2 \n        AND date <= $3\n      ORDER BY date ASC\n    `;\n    \n    const result = await query(sqlQuery, [symbol, startDate, endDate]);\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n    return result.rows;\n  } catch (error) {\n    console.error(`Error fetching data for ${symbol}:`, error);\n    return res.status(500).json({ error: 'Database error', details: error.message });\n  }\n}\n\n// Get available symbols endpoint\nrouter.get('/symbols', createValidationMiddleware(backtestValidationSchemas.symbolSearch), async (req, res) => {\n  try {\n    console.log('📊 Backtest symbols endpoint called');\n    const { search, limit } = req.validated;\n    \n    // Try different table names for symbols\n    const symbolQueries = [\n      {\n        name: 'company_profiles',\n        query: `SELECT DISTINCT symbol, short_name FROM company_profiles WHERE symbol ILIKE $1 ORDER BY symbol LIMIT $2`\n      },\n      {\n        name: 'stock_symbols_enhanced',\n        query: `SELECT DISTINCT symbol, company_name as short_name FROM stock_symbols_enhanced WHERE symbol ILIKE $1 ORDER BY symbol LIMIT $2`\n      },\n      {\n        name: 'stock_symbols',\n        query: `SELECT DISTINCT symbol, symbol as short_name FROM stock_symbols WHERE symbol ILIKE $1 ORDER BY symbol LIMIT $2`\n      }\n    ];\n    \n    for (const symbolQuery of symbolQueries) {\n      try {\n        console.log(`🔍 Trying ${symbolQuery.name} table...`);\n        const result = await query(symbolQuery.query, [`%${search}%`, limit]);\n        \n        if (result && Array.isArray(result.rows) && result.rows.length > 0) {\n          console.log(`✅ Found ${result.rows.length} symbols in ${symbolQuery.name}`);\n          return res.json({\n            success: true,\n            data: result.rows,\n            source: symbolQuery.name,\n            count: result.rows.length\n          });\n        }\n      } catch (tableError) {\n        console.log(`⚠️ Table ${symbolQuery.name} failed:`, tableError.message);\n        continue;\n      }\n    }\n    \n    // Fallback to mock data if no tables work\n    console.log('📝 Using mock symbols data');\n    const mockSymbols = [\n      { symbol: 'AAPL', short_name: 'Apple Inc.' },\n      { symbol: 'MSFT', short_name: 'Microsoft Corporation' },\n      { symbol: 'GOOGL', short_name: 'Alphabet Inc.' },\n      { symbol: 'AMZN', short_name: 'Amazon.com Inc.' },\n      { symbol: 'TSLA', short_name: 'Tesla Inc.' },\n      { symbol: 'NVDA', short_name: 'NVIDIA Corporation' },\n      { symbol: 'META', short_name: 'Meta Platforms Inc.' },\n      { symbol: 'SPY', short_name: 'SPDR S&P 500 ETF' },\n      { symbol: 'QQQ', short_name: 'Invesco QQQ Trust' },\n      { symbol: 'IWM', short_name: 'iShares Russell 2000 ETF' }\n    ].filter(s => s.symbol.toLowerCase().includes(search.toLowerCase()));\n    \n    res.json({\n      success: true,\n      data: mockSymbols.slice(0, parseInt(limit)),\n      source: 'mock_data',\n      count: mockSymbols.length\n    });\n    \n  } catch (error) {\n    console.error('❌ Error in symbols endpoint:', error);\n    res.status(500).json({ \n      success: false,\n      error: 'Failed to fetch symbols', \n      details: error.message \n    });\n  }\n});\n\n// Get strategy templates endpoint\nrouter.get('/templates', async (req, res) => {\n  try {\n    const templates = [\n      {\n        id: 'buy_and_hold',\n        name: 'Buy and Hold',\n        description: 'Simple buy and hold strategy',\n        code: `// Buy and Hold Strategy\n// Buy on first day and hold\n\nlet hasPosition = false;\n\nfor (const symbol of ['AAPL', 'GOOGL', 'MSFT']) {\n  if (data[symbol] && !hasPosition) {\n    const price = data[symbol].close;\n    const quantity = Math.floor(cash / (price * 3)); // Equal weight\n    \n    if (quantity > 0) {\n      buy(symbol, quantity, price);\n      log(\\`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`);\n    }\n  }\n}`\n      },\n      {\n        id: 'moving_average_crossover',\n        name: 'Moving Average Crossover',\n        description: 'Buy when short MA crosses above long MA, sell when it crosses below',\n        code: `// Moving Average Crossover Strategy\n// Requires historical data for MA calculation\n\nconst shortPeriod = 20;\nconst longPeriod = 50;\n\n// Calculate moving averages (simplified)\nfunction calculateMA(prices, period) {\n  if (prices.length < period) return null;\n  const sum = prices.slice(-period).reduce((a, b) => a + b, 0);\n  return sum / period;\n}\n\nfor (const symbol of ['AAPL', 'GOOGL', 'MSFT']) {\n  if (data[symbol]) {\n    const price = data[symbol].close;\n    const position = getPosition(symbol);\n    \n    // In a real implementation, you'd maintain price history\n    // This is a simplified example\n    \n    if (!position) {\n      // Buy signal logic\n      const quantity = Math.floor(cash / (price * 3));\n      if (quantity > 0) {\n        buy(symbol, quantity, price);\n        log(\\`Bought \\${quantity} shares of \\${symbol} at $\\${price}\\`);\n      }\n    }\n  }\n}`\n      },\n      {\n        id: 'rsi_strategy',\n        name: 'RSI Mean Reversion',\n        description: 'Buy when RSI < 30, sell when RSI > 70',\n        code: `// RSI Mean Reversion Strategy\n// Buy oversold, sell overbought\n\nconst RSI_OVERSOLD = 30;\nconst RSI_OVERBOUGHT = 70;\n\n// Simple RSI calculation (requires price history)\nfunction calculateRSI(prices, period = 14) {\n  if (prices.length < period + 1) return 50; // Default RSI\n  \n  let gains = 0;\n  let losses = 0;\n  \n  for (let i = 1; i <= period; i++) {\n    const change = prices[prices.length - i] - prices[prices.length - i - 1];\n    if (change > 0) gains += change;\n    else losses += Math.abs(change);\n  }\n  \n  const avgGain = gains / period;\n  const avgLoss = losses / period;\n  const rs = avgGain / avgLoss;\n  return 100 - (100 / (1 + rs));\n}\n\nfor (const symbol of ['AAPL', 'GOOGL', 'MSFT']) {\n  if (data[symbol]) {\n    const price = data[symbol].close;\n    const position = getPosition(symbol);\n    \n    // In real implementation, maintain price history for RSI\n    const rsi = 50; // Placeholder\n    \n    if (!position && rsi < RSI_OVERSOLD) {\n      const quantity = Math.floor(cash / (price * 3));\n      if (quantity > 0) {\n        buy(symbol, quantity, price);\n        log(\\`RSI Buy: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`);\n      }\n    } else if (position && rsi > RSI_OVERBOUGHT) {\n      sell(symbol, position.quantity, price);\n      log(\\`RSI Sell: \\${symbol} at $\\${price}, RSI: \\${rsi.toFixed(2)}\\`);\n    }\n  }\n}`\n      }\n    ];\n    \n    res.json({ templates });\n    \n  } catch (error) {\n    console.error('Error fetching templates:', error);\n    res.status(500).json({ error: 'Database error', details: error.message });\n  }\n});\n\n// Get user strategies endpoint\nrouter.get('/strategies', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    \n    // Try to get strategies from database\n    try {\n      const result = await query(`\n        SELECT \n          id,\n          name,\n          description,\n          strategy_code,\n          parameters,\n          created_at,\n          updated_at,\n          is_active\n        FROM user_strategies \n        WHERE user_id = $1\n        ORDER BY updated_at DESC\n      `, [userId]);\n\n      const strategies = result.rows.map(row => ({\n        id: row.id,\n        name: row.name,\n        description: row.description,\n        code: row.strategy_code,\n        parameters: typeof row.parameters === 'string' ? JSON.parse(row.parameters) : row.parameters,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        isActive: row.is_active\n      }));\n\n      res.json({\n        success: true,\n        data: strategies\n      });\n\n    } catch (dbError) {\n      console.log('Database query failed for strategies, using mock data:', dbError.message);\n      \n      // Return mock strategies if database fails\n      const mockStrategies = [\n        {\n          id: 'strategy-1',\n          name: 'Simple Moving Average',\n          description: 'Buy when price crosses above 20-day SMA, sell when below',\n          code: 'if (close > sma20) { buy(); } else if (close < sma20) { sell(); }',\n          parameters: { period: 20, symbol: 'AAPL' },\n          createdAt: new Date(Date.now() - 86400000).toISOString(),\n          updatedAt: new Date().toISOString(),\n          isActive: true\n        },\n        {\n          id: 'strategy-2',\n          name: 'RSI Momentum',\n          description: 'Buy oversold, sell overbought based on RSI',\n          code: 'if (rsi < 30) { buy(); } else if (rsi > 70) { sell(); }',\n          parameters: { rsi_period: 14, oversold: 30, overbought: 70 },\n          createdAt: new Date(Date.now() - 172800000).toISOString(),\n          updatedAt: new Date(Date.now() - 3600000).toISOString(),\n          isActive: true\n        }\n      ];\n\n      res.json({\n        success: true,\n        data: mockStrategies,\n        note: 'Mock strategies - database connectivity issue'\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error fetching strategies:', error);\n    res.status(500).json({ error: 'Failed to fetch strategies', details: error.message });\n  }\n});\n\n// Get backtest history endpoint\nrouter.get('/history', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const limit = parseInt(req.query.limit) || 50;\n    const offset = parseInt(req.query.offset) || 0;\n    \n    // Try to get backtest history from database\n    try {\n      const result = await query(`\n        SELECT \n          id,\n          strategy_name,\n          symbol,\n          start_date,\n          end_date,\n          initial_capital,\n          final_value,\n          total_return,\n          max_drawdown,\n          sharpe_ratio,\n          win_rate,\n          total_trades,\n          created_at,\n          parameters\n        FROM backtest_results \n        WHERE user_id = $1\n        ORDER BY created_at DESC\n        LIMIT $2 OFFSET $3\n      `, [userId, limit, offset]);\n\n      const history = result.rows.map(row => ({\n        id: row.id,\n        strategyName: row.strategy_name,\n        symbol: row.symbol,\n        startDate: row.start_date,\n        endDate: row.end_date,\n        initialCapital: parseFloat(row.initial_capital),\n        finalValue: parseFloat(row.final_value),\n        totalReturn: parseFloat(row.total_return),\n        maxDrawdown: parseFloat(row.max_drawdown),\n        sharpeRatio: parseFloat(row.sharpe_ratio),\n        winRate: parseFloat(row.win_rate),\n        totalTrades: parseInt(row.total_trades),\n        createdAt: row.created_at,\n        parameters: typeof row.parameters === 'string' ? JSON.parse(row.parameters) : row.parameters\n      }));\n\n      // Get total count for pagination\n      const countResult = await query(`\n        SELECT COUNT(*) as total\n        FROM backtest_results \n        WHERE user_id = $1\n      `, [userId]);\n\n      res.json({\n        success: true,\n        data: history,\n        pagination: {\n          total: parseInt(countResult.rows[0].total),\n          limit,\n          offset,\n          hasMore: offset + history.length < parseInt(countResult.rows[0].total)\n        }\n      });\n\n    } catch (dbError) {\n      console.log('Database query failed for backtest history, using mock data:', dbError.message);\n      \n      // Return empty history with comprehensive diagnostics\n      console.error('❌ Backtest history unavailable - comprehensive diagnosis needed', {\n        database_query_failed: true,\n        detailed_diagnostics: {\n          attempted_operations: ['backtest_history_query', 'pagination_query'],\n          potential_causes: [\n            'Database connection failure',\n            'backtest_history table missing',\n            'Data loading scripts not executed',\n            'Database tables corrupted or empty',\n            'User authentication issues'\n          ],\n          troubleshooting_steps: [\n            'Check database connectivity',\n            'Verify backtest_history table exists',\n            'Check data loading process status',\n            'Review table structure and data integrity',\n            'Validate user authentication'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Data freshness assessment',\n            'User context validation'\n          ]\n        }\n      });\n\n      const emptyHistory = [];\n\n      res.json({\n        success: true,\n        data: emptyHistory,\n        pagination: {\n          total: 0,\n          limit,\n          offset,\n          hasMore: false\n        },\n        message: 'No backtest history available - run backtests to view results'\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error fetching backtest history:', error);\n    res.status(500).json({ error: 'Failed to fetch backtest history', details: error.message });\n  }\n});\n\n// Validate strategy code endpoint\nrouter.post('/validate', async (req, res) => {\n  try {\n    const { strategy } = req.body;\n    \n    if (!strategy) {\n      return res.status(400).json({ error: 'Strategy code is required' });\n    }\n\n    // Basic syntax validation\n    try {\n      new Function('context', `with(context) { ${strategy} }`);\n      res.json({ valid: true, message: 'Strategy code is valid' });\n    } catch (error) {\n      res.json({ \n        valid: false, \n        error: error.message,\n        type: 'syntax_error'\n      });\n    }\n    \n  } catch (error) {\n    console.error('Validation error:', error);\n    res.status(500).json({ error: 'Database error', details: error.message });\n  }\n});\n\nmodule.exports = router;\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAY,CAAC;AAAA;AAAA,CAAAT,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtE,MAAM;EAAEM;AAAkB,CAAC;AAAA;AAAA,CAAAV,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAM;EACJO,0BAA0B;EAC1BC,gBAAgB;EAChBC,sBAAsB;EACtBC,aAAa;EACbC;AACF,CAAC;AAAA;AAAA,CAAAf,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AACvC,MAAMY,SAAS;AAAA;AAAA,CAAAhB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMa,IAAI;AAAA;AAAA,CAAAjB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMc,EAAE;AAAA;AAAA,CAAAlB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;;AAExB;AACA,MAAMe,yBAAyB;AAAA;AAAA,CAAAnB,cAAA,GAAAG,CAAA,OAAG;EAChCiB,WAAW,EAAE;IACXC,QAAQ,EAAE;MACRC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACtFb,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QACpB;QACA,MAAMI,iBAAiB;QAAA;QAAA,CAAA9B,cAAA,GAAAG,CAAA,QAAG,CACxB,eAAe,EACf,YAAY,EACZ,eAAe,EACf,cAAc,EACd,YAAY,EACZ,gBAAgB,EAChB,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,UAAU,EACV,gBAAgB,EAChB,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,cAAc,CACf;QAAC;QAAAH,cAAA,GAAAG,CAAA;QAEF,OAAO,CAAC2B,iBAAiB,CAACC,IAAI,CAACC,OAAO,IAAI;UAAA;UAAAhC,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,OAAA6B,OAAO,CAACC,IAAI,CAACR,KAAK,CAAC;QAAD,CAAC,CAAC;MAChE,CAAC;MACDS,YAAY,EAAE;IAChB,CAAC;IACDC,OAAO,EAAE;MACPb,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACpB,IAAI,CAACiC,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,EAAE;UAAA;UAAAzB,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAA,OAAO,EAAE;QAAA,CAAC;QAAA;QAAA;UAAAH,cAAA,GAAAsC,CAAA;QAAA;QAAAtC,cAAA,GAAAG,CAAA;QACrC,OAAOsB,KAAK,CAACc,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAACC,MAAM,IAAI;UAAA;UAAAzC,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,OAAAY,UAAU,CAAC0B,MAAM,CAACA,MAAM,CAAC;QAAD,CAAC,CAAC;MACpE,CAAC;MACDzB,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,UAAAF,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,CAACiB,MAAM,GAAG,CAAC;QAAA;QAAA,CAAA1C,cAAA,GAAAsC,CAAA,UAAIb,KAAK,CAACiB,MAAM,IAAI,EAAE;QAAA;QAAA,CAAA1C,cAAA,GAAAsC,CAAA,UAAIb,KAAK,CAACkB,KAAK,CAACxC,CAAC,IAAI;UAAA;UAAAH,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,sBAAe,CAAC8B,IAAI,CAAC9B,CAAC,CAAC;QAAD,CAAC,CAAC;MAAD,CAAC;MACjI+B,YAAY,EAAE;IAChB,CAAC;IACDU,SAAS,EAAE;MACTtB,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACjEZ,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAa,SAAS,CAAC6B,MAAM,CAACpB,KAAK,EAAE;UAAEqB,MAAM,EAAE;QAAa,CAAC,CAAC;MAAD,CAAC;MACvEZ,YAAY,EAAE;IAChB,CAAC;IACDa,OAAO,EAAE;MACPzB,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACjEZ,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAa,SAAS,CAAC6B,MAAM,CAACpB,KAAK,EAAE;UAAEqB,MAAM,EAAE;QAAa,CAAC,CAAC;MAAD,CAAC;MACvEZ,YAAY,EAAE;IAChB,CAAC;IACDc,cAAc,EAAE;MACdzB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACkC,MAAM,CAACxB,KAAK,EAAE;UAAEyB,GAAG,EAAE,IAAI;UAAEC,GAAG,EAAE,QAAQ;UAAEC,YAAY,EAAE;QAAO,CAAC,CAAC;MAAD,CAAC;MAClGpC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAK;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAAb,KAAK,IAAI,IAAI;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,IAAI,QAAQ,CAAC;MAAD,CAAC;MACpES,YAAY,EAAE;IAChB,CAAC;IACDmB,UAAU,EAAE;MACV9B,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACkC,MAAM,CAACxB,KAAK,EAAE;UAAEyB,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAM,CAAC,CAAC;MAAD,CAAC;MACzFpC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAK;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAAb,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,IAAI,GAAG,CAAC;MAAD,CAAC;MAC5DS,YAAY,EAAE;IAChB,CAAC;IACDoB,QAAQ,EAAE;MACR/B,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACkC,MAAM,CAACxB,KAAK,EAAE;UAAEyB,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAM,CAAC,CAAC;MAAD,CAAC;MACzFpC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAK;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAAb,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,IAAI,GAAG,CAAC;MAAD,CAAC;MAC5DS,YAAY,EAAE;IAChB;EACF,CAAC;EAEDqB,YAAY,EAAE;IACZC,MAAM,EAAE;MACNjC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,EAAE;UAAE6B,YAAY,EAAE;QAAM,CAAC,CAAC;MAAD,CAAC;MACtFzC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,CAACiB,MAAM,IAAI,EAAE;MAAD,CAAC;MAClDR,YAAY,EAAE;IAChB,CAAC;IACDwB,KAAK,EAAE;MACLnC,IAAI,EAAE,SAAS;MACfC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAAC4C,OAAO,CAAClC,KAAK,EAAE;UAAEyB,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAI,CAAC,CAAC;MAAD,CAAC;MACxFpC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAK;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAAb,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAIb,KAAK,IAAI,GAAG,CAAC;MAAD,CAAC;MAC5DS,YAAY,EAAE;IAChB;EACF,CAAC;EAED0B,kBAAkB,EAAE;IAClBC,IAAI,EAAE;MACJvC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACpFb,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,UAAAb,KAAK,CAACiB,MAAM,IAAI,CAAC;QAAA;QAAA,CAAA1C,cAAA,GAAAsC,CAAA,UAAIb,KAAK,CAACiB,MAAM,IAAI,GAAG;QAAA;QAAA,CAAA1C,cAAA,GAAAsC,CAAA,UAAI,uBAAuB,CAACL,IAAI,CAACR,KAAK,CAAC;MAAD,CAAC;MACrGS,YAAY,EAAE;IAChB,CAAC;IACD4B,IAAI,EAAE;MACJxC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACtFb,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QACpB;QACA,MAAMI,iBAAiB;QAAA;QAAA,CAAA9B,cAAA,GAAAG,CAAA,QAAG,CACxB,eAAe,EAAE,YAAY,EAAE,eAAe,EAAE,cAAc,EAC9D,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,YAAY,EAC5D,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,OAAO,EAAE,QAAQ,EAC7D,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,CAC1D;QAAC;QAAAH,cAAA,GAAAG,CAAA;QACF,OAAO,CAAC2B,iBAAiB,CAACC,IAAI,CAACC,OAAO,IAAI;UAAA;UAAAhC,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,OAAA6B,OAAO,CAACC,IAAI,CAACR,KAAK,CAAC;QAAD,CAAC,CAAC;MAChE,CAAC;MACDS,YAAY,EAAE;IAChB,CAAC;IACD6B,QAAQ,EAAE;MACRxC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAAY,UAAU,CAACY,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,EAAE;UAAE6B,YAAY,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACrFzC,SAAS,EAAGS,KAAK,IAAK;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAACb,KAAK;QAAA;QAAA,CAAAzB,cAAA,GAAAsC,CAAA,UAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC0B,QAAQ,CAACvC,KAAK,CAACwC,WAAW,CAAC,CAAC,CAAC;MAAD,CAAC;MACtF/B,YAAY,EAAE;IAChB;EACF;AACF,CAAC;;AAED;AAAA;AAAAlC,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC6D,GAAG,CAACxD,iBAAiB,CAAC;AAAC;AAAAV,cAAA,GAAAG,CAAA;AAC9BE,MAAM,CAAC6D,GAAG,CAACrD,sBAAsB,CAAC;AAAC;AAAAb,cAAA,GAAAG,CAAA;AACnCE,MAAM,CAAC6D,GAAG,CAACpD,aAAa,CAAC;AAAC;AAAAd,cAAA,GAAAG,CAAA;AAC1BE,MAAM,CAAC6D,GAAG,CAACtD,gBAAgB,CAACuD,KAAK,CAAC,CAAC,CAAC;;AAEpC;AAAA;AAAAnE,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC5BmE,GAAG,CAACC,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACbC,IAAI,EAAE;MACJC,MAAM,EAAE,iBAAiB;MACzBC,OAAO,EAAE,OAAO;MAChBC,MAAM,EAAE,aAAa;MACrBC,mBAAmB,EAAE,CACnB,qDAAqD,EACrD,+DAA+D,EAC/D,kDAAkD,EAClD,gDAAgD,EAChD,kDAAkD,CACnD;MACDC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,MAAM,EAAE;IAAA;IAAAnF,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAClB,IAAI,CAACgF,MAAM,GAAG;MACZnC,cAAc;MAAE;MAAA,CAAAhD,cAAA,GAAAsC,CAAA,UAAA6C,MAAM,CAACnC,cAAc;MAAA;MAAA,CAAAhD,cAAA,GAAAsC,CAAA,UAAI,MAAM;MAC/Ce,UAAU;MAAE;MAAA,CAAArD,cAAA,GAAAsC,CAAA,WAAA6C,MAAM,CAAC9B,UAAU;MAAA;MAAA,CAAArD,cAAA,GAAAsC,CAAA,WAAI,KAAK;MAAE;MACxCgB,QAAQ;MAAE;MAAA,CAAAtD,cAAA,GAAAsC,CAAA,WAAA6C,MAAM,CAAC7B,QAAQ;MAAA;MAAA,CAAAtD,cAAA,GAAAsC,CAAA,WAAI,KAAK;MAAE;MACpC8C,YAAY;MAAE;MAAA,CAAApF,cAAA,GAAAsC,CAAA,WAAA6C,MAAM,CAACC,YAAY;MAAA;MAAA,CAAApF,cAAA,GAAAsC,CAAA,WAAI,EAAE;MACvCM,SAAS,EAAEuC,MAAM,CAACvC,SAAS;MAC3BG,OAAO,EAAEoC,MAAM,CAACpC,OAAO;MACvBZ,OAAO;MAAE;MAAA,CAAAnC,cAAA,GAAAsC,CAAA,WAAA6C,MAAM,CAAChD,OAAO;MAAA;MAAA,CAAAnC,cAAA,GAAAsC,CAAA,WAAI,EAAE;MAC7B,GAAG6C;IACL,CAAC;IAAC;IAAAnF,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACkF,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC3B,IAAI,CAACoF,MAAM,GAAG,EAAE;IAAC;IAAAvF,cAAA,GAAAG,CAAA;IACjB,IAAI,CAACqF,MAAM,GAAG,CAAC;MAAEC,IAAI,EAAEN,MAAM,CAACvC,SAAS;MAAEnB,KAAK,EAAE,IAAI,CAAC0D,MAAM,CAACnC;IAAe,CAAC,CAAC;IAAC;IAAAhD,cAAA,GAAAG,CAAA;IAC9E,IAAI,CAACuF,IAAI,GAAG,IAAI,CAACP,MAAM,CAACnC,cAAc;IAAC;IAAAhD,cAAA,GAAAG,CAAA;IACvC,IAAI,CAACwF,WAAW,GAAG,IAAI;IAAC;IAAA3F,cAAA,GAAAG,CAAA;IACxB,IAAI,CAACyF,OAAO,GAAG,CAAC,CAAC;EACnB;;EAEA;EACA,MAAMC,eAAeA,CAACC,YAAY,EAAEC,UAAU,EAAE;IAAA;IAAA/F,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC9C,IAAI;MACF;MACA,MAAM6F,MAAM;MAAA;MAAA,CAAAhG,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC8F,mBAAmB,CAACH,YAAY,EAAEC,UAAU,CAAC;MAAC;MAAA/F,cAAA,GAAAG,CAAA;MAClE,OAAO6F,MAAM;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAlG,cAAA,GAAAG,CAAA;MACd,MAAM,IAAIgG,KAAK,CAAC,6BAA6BD,KAAK,CAACE,OAAO,EAAE,CAAC;IAC/D;EACF;;EAEA;EACAH,mBAAmBA,CAACH,YAAY,EAAEC,UAAU,EAAE;IAAA;IAAA/F,cAAA,GAAA0B,CAAA;IAC5C;IACA,MAAM2E,WAAW;IAAA;IAAA,CAAArG,cAAA,GAAAG,CAAA,QAAG;MAClBsE,IAAI,EAAEsB,UAAU;MAChBV,SAAS,EAAE,IAAIC,GAAG,CAAC,IAAI,CAACD,SAAS,CAAC;MAClCK,IAAI,EAAE,IAAI,CAACA,IAAI;MACfY,GAAG,EAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;MAC5BC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAI,CAAC;MAC9BG,OAAO,EAAE,IAAI,CAACC,WAAW,CAACJ,IAAI,CAAC,IAAI,CAAC;MACpCK,WAAW,EAAE,IAAI,CAACA,WAAW,CAACL,IAAI,CAAC,IAAI,CAAC;MACxC;MACAM,IAAI,EAAE;QACJC,GAAG,EAAED,IAAI,CAACC,GAAG;QACb7D,GAAG,EAAE4D,IAAI,CAAC5D,GAAG;QACbC,GAAG,EAAE2D,IAAI,CAAC3D,GAAG;QACb6D,KAAK,EAAEF,IAAI,CAACE,KAAK;QACjBC,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,GAAG,EAAEL,IAAI,CAACK,GAAG;QACbC,IAAI,EAAEN,IAAI,CAACM;MACb,CAAC;MACDC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;;IAED;IACA;IAAA;IAAAxH,cAAA,GAAAG,CAAA;IACA,OAAO,IAAI,CAACsH,yBAAyB,CAAC3B,YAAY,EAAEO,WAAW,CAAC;EAClE;;EAEA;EACAoB,yBAAyBA,CAAC3B,YAAY,EAAE4B,OAAO,EAAE;IAAA;IAAA1H,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC/C;IACA,IAAI2F,YAAY,CAAC9B,QAAQ,CAAC,qBAAqB,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAChD,OAAO,IAAI,CAACwH,uBAAuB,CAACD,OAAO,CAAC;IAC9C,CAAC;IAAA;IAAA;MAAA1H,cAAA,GAAAsC,CAAA;IAAA;;IAED;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI2F,YAAY,CAAC9B,QAAQ,CAAC,cAAc,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACzC,OAAO,IAAI,CAACyH,kBAAkB,CAACF,OAAO,CAAC;IACzC,CAAC;IAAA;IAAA;MAAA1H,cAAA,GAAAsC,CAAA;IAAA;;IAED;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI2F,YAAY,CAAC9B,QAAQ,CAAC,cAAc,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACzC,OAAO,IAAI,CAAC0H,yBAAyB,CAACH,OAAO,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA1H,cAAA,GAAAsC,CAAA;IAAA;;IAED;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI2F,YAAY,CAAC9B,QAAQ,CAAC,mBAAmB,CAAC,EAAE;MAAA;MAAAhE,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAC9C,OAAO,IAAI,CAAC2H,uBAAuB,CAACJ,OAAO,CAAC;IAC9C,CAAC;IAAA;IAAA;MAAA1H,cAAA,GAAAsC,CAAA;IAAA;;IAED;IAAAtC,cAAA,GAAAG,CAAA;IACA,MAAM,IAAIgG,KAAK,CAAC,0JAA0J,CAAC;EAC7K;;EAEA;EACAI,OAAOA,CAAC9D,MAAM,EAAEsF,QAAQ,EAAEC,KAAK,EAAEC,QAAQ;EAAA;EAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE4F,UAAU;EAAA;EAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAtC,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IACnE;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACG,MAAM;IAAA;IAAA,CAAAzC,cAAA,GAAAsC,CAAA,WAAI,OAAOG,MAAM,KAAK,QAAQ,GAAE;MAAA;MAAAzC,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,gBAAgB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAC7E;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACyF,QAAQ;IAAA;IAAA,CAAA/H,cAAA,GAAAsC,CAAA,WAAIyF,QAAQ,IAAI,CAAC;IAAA;IAAA,CAAA/H,cAAA,GAAAsC,CAAA,WAAIyF,QAAQ,GAAG,KAAK,GAAE;MAAA;MAAA/H,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,kBAAkB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACxF;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAC0F,KAAK;IAAA;IAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,IAAI,CAAC;IAAA;IAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,GAAG,MAAM,GAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,eAAe,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAC7E;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA2F,QAAQ;IAAK;IAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAA2F,QAAQ,IAAI,CAAC;IAAA;IAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAI2F,QAAQ,IAAID,KAAK,EAAC,EAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,mBAAmB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAC3F;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA4F,UAAU;IAAK;IAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAA4F,UAAU,IAAIF,KAAK;IAAA;IAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAI4F,UAAU,GAAGF,KAAK,GAAG,EAAE,EAAC,EAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,qBAAqB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAE3G,OAAO,IAAI,CAACmG,GAAG,CAAC7D,MAAM,EAAEsF,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;EAChE;;EAEA;EACAxB,QAAQA,CAACjE,MAAM,EAAEsF,QAAQ,EAAEC,KAAK,EAAEG,MAAM;EAAA;EAAA,CAAAnI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAtC,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC/C;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACG,MAAM;IAAA;IAAA,CAAAzC,cAAA,GAAAsC,CAAA,WAAI,OAAOG,MAAM,KAAK,QAAQ,GAAE;MAAA;MAAAzC,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,gBAAgB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAC7E;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACyF,QAAQ;IAAA;IAAA,CAAA/H,cAAA,GAAAsC,CAAA,WAAIyF,QAAQ,IAAI,CAAC;IAAA;IAAA,CAAA/H,cAAA,GAAAsC,CAAA,WAAIyF,QAAQ,GAAG,KAAK,GAAE;MAAA;MAAA/H,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,kBAAkB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACxF;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAC0F,KAAK;IAAA;IAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,IAAI,CAAC;IAAA;IAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,GAAG,MAAM,GAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,eAAe,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IAE7E,OAAO,IAAI,CAACsG,IAAI,CAAChE,MAAM,EAAEsF,QAAQ,EAAEC,KAAK,EAAEG,MAAM,CAAC;EACnD;;EAEA;EACAvB,WAAWA,CAACwB,MAAM,EAAE;IAAA;IAAApI,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAClB;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAC8F,MAAM;IAAA;IAAA,CAAApI,cAAA,GAAAsC,CAAA,WAAI,OAAO8F,MAAM,KAAK,QAAQ,GAAE;MAAA;MAAApI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAAA,MAAM,IAAIgG,KAAK,CAAC,uBAAuB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACpF,OAAO,IAAI,CAACwG,OAAO,CAACyB,MAAM,CAAC;EAC7B;;EAEA;EACAT,uBAAuBA,CAACD,OAAO,EAAE;IAAA;IAAA1H,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC/B;IACA,KAAK,MAAM,CAACsC,MAAM,EAAE4F,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACb,OAAO,CAACjD,IAAI,CAAC,EAAE;MAAA;MAAAzE,cAAA,GAAAG,CAAA;MAC5D;MAAI;MAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA+F,OAAO;MAAA;MAAA,CAAArI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAE;QAAA;QAAAxI,cAAA,GAAAsC,CAAA;QAC5B,MAAMmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAG,CAAA,QAAGuH,OAAO,CAACb,WAAW,CAACpE,MAAM,CAAC;;QAE5C;QAAA;QAAAzC,cAAA,GAAAG,CAAA;QACA;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAG,EAAE;QAAA;QAAA,CAAAxI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAG,IAAI,GAAE;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAC3DuH,OAAO,CAACpB,GAAG,CAAC7D,MAAM,EAAE,EAAE,EAAE4F,OAAO,CAACG,KAAK,CAAC;QACxC;QACA;QAAA,KACK;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAA;UAAI;UAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAAmG,QAAQ;UAAA;UAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAGC,QAAQ,CAACC,QAAQ,GAAG,IAAI,GAAE;YAAA;YAAA1I,cAAA,GAAAsC,CAAA;YAAAtC,cAAA,GAAAG,CAAA;YAC7DuH,OAAO,CAACjB,IAAI,CAAChE,MAAM,EAAEgG,QAAQ,CAACV,QAAQ,EAAEM,OAAO,CAACG,KAAK,EAAE,eAAe,CAAC;UACzE,CAAC;UAAA;UAAA;YAAAxI,cAAA,GAAAsC,CAAA;UAAA;QAAD;MACF,CAAC;MAAA;MAAA;QAAAtC,cAAA,GAAAsC,CAAA;MAAA;IACH;EACF;EAEAsF,kBAAkBA,CAACF,OAAO,EAAE;IAAA;IAAA1H,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC1B;IACA,KAAK,MAAM,CAACsC,MAAM,EAAE4F,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACb,OAAO,CAACjD,IAAI,CAAC,EAAE;MAAA;MAAAzE,cAAA,GAAAG,CAAA;MAC5D;MAAI;MAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA+F,OAAO;MAAA;MAAA,CAAArI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAE;QAAA;QAAAxI,cAAA,GAAAsC,CAAA;QAC5B,MAAMmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAG,CAAA,QAAGuH,OAAO,CAACb,WAAW,CAACpE,MAAM,CAAC;;QAE5C;QACA,MAAMkG,OAAO;QAAA;QAAA,CAAA3I,cAAA,GAAAG,CAAA,SAAG,EAAE,GAAG2G,IAAI,CAAC8B,GAAG,CAAC7D,IAAI,CAAC8D,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,EAAC,CAAC;QAAA;QAAA7I,cAAA,GAAAG,CAAA;QAE1D;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAIqG,OAAO,GAAG,EAAE;QAAA;QAAA,CAAA3I,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAG,CAAC,GAAE;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAClDuH,OAAO,CAACpB,GAAG,CAAC7D,MAAM,EAAE,CAAC,EAAE4F,OAAO,CAACG,KAAK,CAAC;QACvC,CAAC,MAAM;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAA;UAAI;UAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAAmG,QAAQ;UAAA;UAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAIqG,OAAO,GAAG,EAAE,GAAE;YAAA;YAAA3I,cAAA,GAAAsC,CAAA;YAAAtC,cAAA,GAAAG,CAAA;YACnCuH,OAAO,CAACjB,IAAI,CAAChE,MAAM,EAAEgG,QAAQ,CAACV,QAAQ,EAAEM,OAAO,CAACG,KAAK,EAAE,gBAAgB,CAAC;UAC1E,CAAC;UAAA;UAAA;YAAAxI,cAAA,GAAAsC,CAAA;UAAA;QAAD;MACF,CAAC;MAAA;MAAA;QAAAtC,cAAA,GAAAsC,CAAA;MAAA;IACH;EACF;EAEAuF,yBAAyBA,CAACH,OAAO,EAAE;IAAA;IAAA1H,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IACjC;IACA,KAAK,MAAM,CAACsC,MAAM,EAAE4F,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACb,OAAO,CAACjD,IAAI,CAAC,EAAE;MAAA;MAAAzE,cAAA,GAAAG,CAAA;MAC5D;MAAI;MAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA+F,OAAO;MAAA;MAAA,CAAArI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAE;QAAA;QAAAxI,cAAA,GAAAsC,CAAA;QAC5B,MAAMmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAGuH,OAAO,CAACb,WAAW,CAACpE,MAAM,CAAC;QAAC;QAAAzC,cAAA,GAAAG,CAAA;QAE7C;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAG,EAAE,GAAE;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UACnC,MAAMyF,QAAQ;UAAA;UAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG2G,IAAI,CAACG,KAAK,CAACS,OAAO,CAAChC,IAAI,IAAI2C,OAAO,CAACG,KAAK,GAAGF,MAAM,CAACQ,IAAI,CAACpB,OAAO,CAACjD,IAAI,CAAC,CAAC/B,MAAM,CAAC,CAAC;UAAC;UAAA1C,cAAA,GAAAG,CAAA;UAC/F,IAAI4H,QAAQ,GAAG,CAAC,EAAE;YAAA;YAAA/H,cAAA,GAAAsC,CAAA;YAAAtC,cAAA,GAAAG,CAAA;YAChBuH,OAAO,CAACpB,GAAG,CAAC7D,MAAM,EAAEsF,QAAQ,EAAEM,OAAO,CAACG,KAAK,CAAC;UAC9C,CAAC;UAAA;UAAA;YAAAxI,cAAA,GAAAsC,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtC,cAAA,GAAAsC,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAtC,cAAA,GAAAsC,CAAA;MAAA;IACH;EACF;EAEAwF,uBAAuBA,CAACJ,OAAO,EAAE;IAAA;IAAA1H,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAC/B;IACA,KAAK,MAAM,CAACsC,MAAM,EAAE4F,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACb,OAAO,CAACjD,IAAI,CAAC,EAAE;MAAA;MAAAzE,cAAA,GAAAG,CAAA;MAC5D;MAAI;MAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAA+F,OAAO;MAAA;MAAA,CAAArI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK;MAAA;MAAA,CAAAxI,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACU,IAAI,GAAE;QAAA;QAAA/I,cAAA,GAAAsC,CAAA;QAC5C,MAAMmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAGuH,OAAO,CAACb,WAAW,CAACpE,MAAM,CAAC;QAC5C,MAAMuG,SAAS;QAAA;QAAA,CAAAhJ,cAAA,GAAAG,CAAA,SAAG,CAACkI,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACU,IAAI,IAAIV,OAAO,CAACU,IAAI;;QAE/D;QAAA;QAAA/I,cAAA,GAAAG,CAAA;QACA;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACmG,QAAQ;QAAA;QAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAI0G,SAAS,GAAG,IAAI;QAAA;QAAA,CAAAhJ,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAG,EAAE,GAAE;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UACvDuH,OAAO,CAACpB,GAAG,CAAC7D,MAAM,EAAE,CAAC,EAAE4F,OAAO,CAACG,KAAK,CAAC;QACvC;QACA;QAAA,KACK;UAAA;UAAAxI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAA;UAAI;UAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAAmG,QAAQ;UAAK;UAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAA0G,SAAS,GAAG,CAAC,IAAI;UAAA;UAAA,CAAAhJ,cAAA,GAAAsC,CAAA,WAAI+F,OAAO,CAACG,KAAK,GAAGC,QAAQ,CAACC,QAAQ,GAAG,GAAG,EAAC,EAAE;YAAA;YAAA1I,cAAA,GAAAsC,CAAA;YAAAtC,cAAA,GAAAG,CAAA;YACnFuH,OAAO,CAACjB,IAAI,CAAChE,MAAM,EAAEgG,QAAQ,CAACV,QAAQ,EAAEM,OAAO,CAACG,KAAK,EAAE,eAAe,CAAC;UACzE,CAAC;UAAA;UAAA;YAAAxI,cAAA,GAAAsC,CAAA;UAAA;QAAD;MACF,CAAC;MAAA;MAAA;QAAAtC,cAAA,GAAAsC,CAAA;MAAA;IACH;EACF;;EAEA;EACAgE,GAAGA,CAAC7D,MAAM,EAAEsF,QAAQ,EAAEC,KAAK;EAAA;EAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE2F,QAAQ;EAAA;EAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE4F,UAAU;EAAA;EAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAtC,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IACtE,IAAI,CAAC6H,KAAK,EAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACV,MAAM,IAAIgG,KAAK,CAAC,kCAAkC,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IAED,MAAM2G,SAAS;IAAA;IAAA,CAAAjJ,cAAA,GAAAG,CAAA,SAAG4H,QAAQ,GAAGC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC7C,MAAM,CAAC9B,UAAU,GAAG,IAAI,CAAC8B,MAAM,CAAC7B,QAAQ,CAAC;IAAC;IAAAtD,cAAA,GAAAG,CAAA;IAEzF,IAAI8I,SAAS,GAAG,IAAI,CAACvD,IAAI,EAAE;MAAA;MAAA1F,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACzB,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAsC,CAAA;IAAA;IAED,MAAM4G,gBAAgB;IAAA;IAAA,CAAAlJ,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACkF,SAAS,CAACjB,GAAG,CAAC3B,MAAM,CAAC;IAAC;IAAAzC,cAAA,GAAAG,CAAA;IACpD,IAAI+I,gBAAgB,EAAE;MAAA;MAAAlJ,cAAA,GAAAsC,CAAA;MACpB;MACA,MAAM6G,WAAW;MAAA;MAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAG+I,gBAAgB,CAACnB,QAAQ,GAAGA,QAAQ;MACxD,MAAMqB,WAAW;MAAA;MAAA,CAAApJ,cAAA,GAAAG,CAAA,SAAG,CAAE+I,gBAAgB,CAACnB,QAAQ,GAAGmB,gBAAgB,CAACR,QAAQ,GAAKX,QAAQ,GAAGC,KAAM,IAAImB,WAAW;MAAC;MAAAnJ,cAAA,GAAAG,CAAA;MAEjH,IAAI,CAACkF,SAAS,CAACgE,GAAG,CAAC5G,MAAM,EAAE;QACzB,GAAGyG,gBAAgB;QACnBnB,QAAQ,EAAEoB,WAAW;QACrBT,QAAQ,EAAEU,WAAW;QACrBnB,QAAQ;QAAE;QAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAA2F,QAAQ;QAAA;QAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAI4G,gBAAgB,CAACjB,QAAQ;QAC/CC,UAAU;QAAE;QAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAA4F,UAAU;QAAA;QAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAI4G,gBAAgB,CAAChB,UAAU;MACvD,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAlI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACL,IAAI,CAACkF,SAAS,CAACgE,GAAG,CAAC5G,MAAM,EAAE;QACzBA,MAAM;QACNsF,QAAQ;QACRW,QAAQ,EAAEV,KAAK;QACfsB,SAAS,EAAE,IAAI,CAAC3D,WAAW;QAC3BsC,QAAQ;QACRC;MACF,CAAC,CAAC;IACJ;IAAC;IAAAlI,cAAA,GAAAG,CAAA;IAED,IAAI,CAACuF,IAAI,IAAIuD,SAAS;IAAC;IAAAjJ,cAAA,GAAAG,CAAA;IAEvB,IAAI,CAACoF,MAAM,CAACgE,IAAI,CAAC;MACf9D,IAAI,EAAE,IAAI,CAACE,WAAW;MACtBlD,MAAM;MACN+G,MAAM,EAAE,KAAK;MACbzB,QAAQ;MACRC,KAAK;MACL3E,UAAU,EAAE0E,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAAC7C,MAAM,CAAC9B,UAAU;MACrDC,QAAQ,EAAEyE,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAAC7C,MAAM,CAAC7B;IAC3C,CAAC,CAAC;IAAC;IAAAtD,cAAA,GAAAG,CAAA;IAEH,OAAO,IAAI;EACb;;EAEA;EACAsG,IAAIA,CAAChE,MAAM,EAAEsF,QAAQ,EAAEC,KAAK;EAAA;EAAA,CAAAhI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE6F,MAAM;EAAA;EAAA,CAAAnI,cAAA,GAAAsC,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAtC,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAClD,IAAI,CAAC6H,KAAK,EAAE;MAAA;MAAAhI,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACV,MAAM,IAAIgG,KAAK,CAAC,mCAAmC,CAAC;IACtD,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAsC,CAAA;IAAA;IACD,MAAMmG,QAAQ;IAAA;IAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACkF,SAAS,CAACjB,GAAG,CAAC3B,MAAM,CAAC;IAAC;IAAAzC,cAAA,GAAAG,CAAA;IAC5C;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAACmG,QAAQ;IAAA;IAAA,CAAAzI,cAAA,GAAAsC,CAAA,WAAImG,QAAQ,CAACV,QAAQ,GAAGA,QAAQ,GAAE;MAAA;MAAA/H,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAC7C,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAsC,CAAA;IAAA;IACD,MAAMmH,OAAO;IAAA;IAAA,CAAAzJ,cAAA,GAAAG,CAAA,SAAG4H,QAAQ,GAAGC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC7C,MAAM,CAAC9B,UAAU,GAAG,IAAI,CAAC8B,MAAM,CAAC7B,QAAQ,CAAC;IAAC;IAAAtD,cAAA,GAAAG,CAAA;IACvF,IAAI,CAACuF,IAAI,IAAI+D,OAAO;IACpB,IAAIC,WAAW;IAAA;IAAA,CAAA1J,cAAA,GAAAG,CAAA,SAAG,CAAC6H,KAAK,GAAGS,QAAQ,CAACC,QAAQ,IAAIX,QAAQ,GAAIA,QAAQ,GAAGC,KAAK,IAAI,IAAI,CAAC7C,MAAM,CAAC9B,UAAU,GAAG,IAAI,CAAC8B,MAAM,CAAC7B,QAAQ,CAAE;IAAC;IAAAtD,cAAA,GAAAG,CAAA;IAChI,IAAIsI,QAAQ,CAACV,QAAQ,KAAKA,QAAQ,EAAE;MAAA;MAAA/H,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAClC,IAAI,CAACkF,SAAS,CAACsE,MAAM,CAAClH,MAAM,CAAC;IAC/B,CAAC,MAAM;MAAA;MAAAzC,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACL,IAAI,CAACkF,SAAS,CAACgE,GAAG,CAAC5G,MAAM,EAAE;QACzB,GAAGgG,QAAQ;QACXV,QAAQ,EAAEU,QAAQ,CAACV,QAAQ,GAAGA;MAChC,CAAC,CAAC;IACJ;IAAC;IAAA/H,cAAA,GAAAG,CAAA;IACD,IAAI,CAACoF,MAAM,CAACgE,IAAI,CAAC;MACf9D,IAAI,EAAE,IAAI,CAACE,WAAW;MACtBlD,MAAM;MACN+G,MAAM,EAAE,MAAM;MACdzB,QAAQ;MACRC,KAAK;MACL3E,UAAU,EAAE0E,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAAC7C,MAAM,CAAC9B,UAAU;MACrDC,QAAQ,EAAEyE,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAAC7C,MAAM,CAAC7B,QAAQ;MACjDsG,GAAG,EAAEF,WAAW;MAChBvB,MAAM;MAAE;MAAA,CAAAnI,cAAA,GAAAsC,CAAA,WAAA6F,MAAM;MAAA;MAAA,CAAAnI,cAAA,GAAAsC,CAAA,WAAIuH,SAAS;IAC7B,CAAC,CAAC;IAAC;IAAA7J,cAAA,GAAAG,CAAA;IACH,OAAO,IAAI;EACb;;EAEA;EACAwG,OAAOA,CAACyB,MAAM,EAAE;IAAA;IAAApI,cAAA,GAAA0B,CAAA;IACd,MAAMS,OAAO;IAAA;IAAA,CAAAnC,cAAA,GAAAG,CAAA,SAAGiC,KAAK,CAAC0H,IAAI,CAAC,IAAI,CAACzE,SAAS,CAACyD,IAAI,CAAC,CAAC,CAAC;IAAC;IAAA9I,cAAA,GAAAG,CAAA;IAClD,KAAK,MAAMsC,MAAM,IAAIN,OAAO,EAAE;MAC5B,MAAMsG,QAAQ;MAAA;MAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACkF,SAAS,CAACjB,GAAG,CAAC3B,MAAM,CAAC;MAC3C,MAAMuF,KAAK;MAAA;MAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAGiI,MAAM,CAAC3F,MAAM,CAAC;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MAC7B,IAAI6H,KAAK,EAAE;QAAA;QAAAhI,cAAA,GAAAsC,CAAA;QACT;QACA,IAAI6F,MAAM;QAAA;QAAA,CAAAnI,cAAA,GAAAG,CAAA,SAAG,IAAI;QAAC;QAAAH,cAAA,GAAAG,CAAA;QAClB;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAAmG,QAAQ,CAACR,QAAQ;QAAA;QAAA,CAAAjI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,IAAIS,QAAQ,CAACR,QAAQ,GAAE;UAAA;UAAAjI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAAgI,MAAM,GAAG,WAAW;QAAA,CAAC;QAAA;QAAA;UAAAnI,cAAA,GAAAsC,CAAA;QAAA;QAAAtC,cAAA,GAAAG,CAAA;QAC1E;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,WAAAmG,QAAQ,CAACP,UAAU;QAAA;QAAA,CAAAlI,cAAA,GAAAsC,CAAA,WAAI0F,KAAK,IAAIS,QAAQ,CAACP,UAAU,GAAE;UAAA;UAAAlI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAAAgI,MAAM,GAAG,aAAa;QAAA,CAAC;QAAA;QAAA;UAAAnI,cAAA,GAAAsC,CAAA;QAAA;QAAAtC,cAAA,GAAAG,CAAA;QAChF,IAAI,CAACsG,IAAI,CAAChE,MAAM,EAAEgG,QAAQ,CAACV,QAAQ,EAAEC,KAAK,EAAEG,MAAM,CAAC;MACrD,CAAC;MAAA;MAAA;QAAAnI,cAAA,GAAAsC,CAAA;MAAA;IACH;EACF;;EAEA;EACAuE,WAAWA,CAACpE,MAAM,EAAE;IAAA;IAAAzC,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IAClB,OAAO,2BAAAH,cAAA,GAAAsC,CAAA,eAAI,CAAC+C,SAAS,CAACjB,GAAG,CAAC3B,MAAM,CAAC;IAAA;IAAA,CAAAzC,cAAA,GAAAsC,CAAA,WAAI,IAAI;EAC3C;;EAEA;EACAyH,oBAAoBA,CAAC3B,MAAM,EAAE;IAAA;IAAApI,cAAA,GAAA0B,CAAA;IAC3B,IAAIsI,UAAU;IAAA;IAAA,CAAAhK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACuF,IAAI;IAC1B,IAAIuE,aAAa;IAAA;IAAA,CAAAjK,cAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACtB,KAAK,MAAM,CAACsC,MAAM,EAAEgG,QAAQ,CAAC,IAAI,IAAI,CAACpD,SAAS,EAAE;MAC/C,MAAM6E,YAAY;MAAA;MAAA,CAAAlK,cAAA,GAAAG,CAAA,SAAGiI,MAAM,CAAC3F,MAAM,CAAC;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MACpC,IAAI+J,YAAY,EAAE;QAAA;QAAAlK,cAAA,GAAAsC,CAAA;QAAAtC,cAAA,GAAAG,CAAA;QAChB6J,UAAU,IAAIvB,QAAQ,CAACV,QAAQ,GAAGmC,YAAY;QAAC;QAAAlK,cAAA,GAAAG,CAAA;QAC/C8J,aAAa,EAAE;MACjB,CAAC;MAAA;MAAA;QAAAjK,cAAA,GAAAsC,CAAA;MAAA;IACH;IAAC;IAAAtC,cAAA,GAAAG,CAAA;IACD,IAAI,CAACqF,MAAM,CAAC+D,IAAI,CAAC;MACf9D,IAAI,EAAE,IAAI,CAACE,WAAW;MACtBlE,KAAK,EAAEuI,UAAU;MACjBtE,IAAI,EAAE,IAAI,CAACA,IAAI;MACfL,SAAS,EAAE4E;IACb,CAAC,CAAC;EACJ;;EAEA;EACAE,gBAAgBA,CAAA,EAAG;IAAA;IAAAnK,cAAA,GAAA0B,CAAA;IAAA1B,cAAA,GAAAG,CAAA;IACjB,IAAI,IAAI,CAACqF,MAAM,CAAC9C,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1C,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MAC1B,OAAO,CAAC,CAAC;IACX,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAsC,CAAA;IAAA;IAED,MAAM8H,OAAO;IAAA;IAAA,CAAApK,cAAA,GAAAG,CAAA,SAAG,EAAE;IAClB,MAAMkK,MAAM;IAAA;IAAA,CAAArK,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACqF,MAAM,CAAChD,GAAG,CAAC8H,CAAC,IAAI;MAAA;MAAAtK,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAAmK,CAAC,CAAC7I,KAAK;IAAD,CAAC,CAAC;IAAC;IAAAzB,cAAA,GAAAG,CAAA;IAE7C,KAAK,IAAIoK,CAAC;IAAA;IAAA,CAAAvK,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAEoK,CAAC,GAAGF,MAAM,CAAC3H,MAAM,EAAE6H,CAAC,EAAE,EAAE;MACtC,MAAMC,WAAW;MAAA;MAAA,CAAAxK,cAAA,GAAAG,CAAA,SAAG,CAACkK,MAAM,CAACE,CAAC,CAAC,GAAGF,MAAM,CAACE,CAAC,GAAC,CAAC,CAAC,IAAIF,MAAM,CAACE,CAAC,GAAC,CAAC,CAAC;MAAC;MAAAvK,cAAA,GAAAG,CAAA;MAC5DiK,OAAO,CAACb,IAAI,CAACiB,WAAW,CAAC;IAC3B;IAEA,MAAMC,WAAW;IAAA;IAAA,CAAAzK,cAAA,GAAAG,CAAA,SAAG,CAACkK,MAAM,CAACA,MAAM,CAAC3H,MAAM,GAAG,CAAC,CAAC,GAAG2H,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC;IACvE,MAAMK,gBAAgB;IAAA;IAAA,CAAA1K,cAAA,GAAAG,CAAA,SAAG2G,IAAI,CAACK,GAAG,CAAC,CAAC,GAAGsD,WAAW,EAAE,GAAG,GAAGL,OAAO,CAAC1H,MAAM,CAAC,GAAG,CAAC;IAE5E,MAAMiI,SAAS;IAAA;IAAA,CAAA3K,cAAA,GAAAG,CAAA,SAAGiK,OAAO,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA9K,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAA0K,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGV,OAAO,CAAC1H,MAAM;IACzE,MAAMqI,QAAQ;IAAA;IAAA,CAAA/K,cAAA,GAAAG,CAAA,SAAGiK,OAAO,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA9K,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAA0K,GAAG,GAAG/D,IAAI,CAACK,GAAG,CAAC2D,CAAC,GAAGH,SAAS,EAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGP,OAAO,CAAC1H,MAAM;IACjG,MAAMsI,UAAU;IAAA;IAAA,CAAAhL,cAAA,GAAAG,CAAA,SAAG2G,IAAI,CAACM,IAAI,CAAC2D,QAAQ,CAAC,GAAGjE,IAAI,CAACM,IAAI,CAAC,GAAG,CAAC;IAEvD,MAAM6D,WAAW;IAAA;IAAA,CAAAjL,cAAA,GAAAG,CAAA,SAAG6K,UAAU,KAAK,CAAC;IAAA;IAAA,CAAAhL,cAAA,GAAAsC,CAAA,WAAG,CAACoI,gBAAgB,GAAG,IAAI,IAAIM,UAAU;IAAA;IAAA,CAAAhL,cAAA,GAAAsC,CAAA,WAAG,CAAC,GAAC,CAAC;;IAEnF;IACA,IAAI4I,WAAW;IAAA;IAAA,CAAAlL,cAAA,GAAAG,CAAA,SAAG,CAAC;IACnB,IAAIgL,IAAI;IAAA;IAAA,CAAAnL,cAAA,GAAAG,CAAA,SAAGkK,MAAM,CAAC,CAAC,CAAC;IACpB,MAAMe,SAAS;IAAA;IAAA,CAAApL,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAErB,KAAK,IAAIoK,CAAC;IAAA;IAAA,CAAAvK,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAEoK,CAAC,GAAGF,MAAM,CAAC3H,MAAM,EAAE6H,CAAC,EAAE,EAAE;MAAA;MAAAvK,cAAA,GAAAG,CAAA;MACtC,IAAIkK,MAAM,CAACE,CAAC,CAAC,GAAGY,IAAI,EAAE;QAAA;QAAAnL,cAAA,GAAAsC,CAAA;QAAAtC,cAAA,GAAAG,CAAA;QACpBgL,IAAI,GAAGd,MAAM,CAACE,CAAC,CAAC;MAClB,CAAC;MAAA;MAAA;QAAAvK,cAAA,GAAAsC,CAAA;MAAA;MACD,MAAM+I,QAAQ;MAAA;MAAA,CAAArL,cAAA,GAAAG,CAAA,SAAG,CAACgL,IAAI,GAAGd,MAAM,CAACE,CAAC,CAAC,IAAIY,IAAI;MAAC;MAAAnL,cAAA,GAAAG,CAAA;MAC3CiL,SAAS,CAAC7B,IAAI,CAAC8B,QAAQ,CAAC;MAAC;MAAArL,cAAA,GAAAG,CAAA;MACzB+K,WAAW,GAAGpE,IAAI,CAAC3D,GAAG,CAAC+H,WAAW,EAAEG,QAAQ,CAAC;IAC/C;;IAEA;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAtL,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACoF,MAAM,CAACgG,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAxL,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAAAkJ,CAAC,CAAC5B,GAAG;MAAA;MAAA,CAAA5J,cAAA,GAAAsC,CAAA,WAAIkJ,CAAC,CAAC5B,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC,CAAClH,MAAM;IACxE,MAAM+I,YAAY;IAAA;IAAA,CAAAzL,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACoF,MAAM,CAACgG,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAxL,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAsC,CAAA,WAAAkJ,CAAC,CAAC5B,GAAG;MAAA;MAAA,CAAA5J,cAAA,GAAAsC,CAAA,WAAIkJ,CAAC,CAAC5B,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC,CAAClH,MAAM;IACvE,MAAMgJ,WAAW;IAAA;IAAA,CAAA1L,cAAA,GAAAG,CAAA,SAAGmL,aAAa,GAAGG,YAAY;IAChD,MAAME,OAAO;IAAA;IAAA,CAAA3L,cAAA,GAAAG,CAAA,SAAGuL,WAAW,GAAG,CAAC;IAAA;IAAA,CAAA1L,cAAA,GAAAsC,CAAA,WAAGgJ,aAAa,GAAGI,WAAW;IAAA;IAAA,CAAA1L,cAAA,GAAAsC,CAAA,WAAG,CAAC;;IAEjE;IACA,MAAMsJ,WAAW;IAAA;IAAA,CAAA5L,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACoF,MAAM,CAACqF,MAAM,CAAC,CAACC,GAAG,EAAEW,CAAC,KAAK;MAAA;MAAAxL,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAA0K,GAAG,GAAG/D,IAAI,CAAC3D,GAAG;MAAC;MAAA,CAAAnD,cAAA,GAAAsC,CAAA,WAAAkJ,CAAC,CAAC5B,GAAG;MAAA;MAAA,CAAA5J,cAAA,GAAAsC,CAAA,WAAI,CAAC,GAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACpF,MAAMuJ,SAAS;IAAA;IAAA,CAAA7L,cAAA,GAAAG,CAAA,SAAG2G,IAAI,CAACC,GAAG,CAAC,IAAI,CAACxB,MAAM,CAACqF,MAAM,CAAC,CAACC,GAAG,EAAEW,CAAC,KAAK;MAAA;MAAAxL,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAA0K,GAAG,GAAG/D,IAAI,CAAC5D,GAAG;MAAC;MAAA,CAAAlD,cAAA,GAAAsC,CAAA,WAAAkJ,CAAC,CAAC5B,GAAG;MAAA;MAAA,CAAA5J,cAAA,GAAAsC,CAAA,WAAI,CAAC,GAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5F,MAAMwJ,YAAY;IAAA;IAAA,CAAA9L,cAAA,GAAAG,CAAA,SAAG0L,SAAS,KAAK,CAAC;IAAA;IAAA,CAAA7L,cAAA,GAAAsC,CAAA,WAAGsJ,WAAW,GAAGC,SAAS;IAAA;IAAA,CAAA7L,cAAA,GAAAsC,CAAA,WAAG,CAAC;IAAC;IAAAtC,cAAA,GAAAG,CAAA;IAEnE,OAAO;MACLsK,WAAW,EAAEA,WAAW,GAAG,GAAG;MAC9BC,gBAAgB,EAAEA,gBAAgB,GAAG,GAAG;MACxCM,UAAU,EAAEA,UAAU,GAAG,GAAG;MAC5BC,WAAW;MACXC,WAAW,EAAEA,WAAW,GAAG,GAAG;MAC9BS,OAAO,EAAEA,OAAO,GAAG,GAAG;MACtBG,YAAY;MACZJ,WAAW;MACXJ,aAAa;MACbG,YAAY;MACZG,WAAW;MACXC,SAAS;MACTE,UAAU,EAAE1B,MAAM,CAACA,MAAM,CAAC3H,MAAM,GAAG,CAAC,CAAC;MACrCsJ,UAAU,EAAE3B,MAAM,CAAC,CAAC;IACtB,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAAArK,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC4L,IAAI,CAAC,MAAM,EAAEtL,0BAA0B,CAACQ,yBAAyB,CAACC,WAAW,CAAC,EAAE,OAAOiD,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EACzG,IAAI;IACF,MAAM;MACJkB,QAAQ;MACRc,OAAO;MACPS,SAAS;MACTG,OAAO;MACPC,cAAc;MACdK,UAAU;MACVC;IACF,CAAC;IAAA;IAAA,CAAAtD,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAAC6H,SAAS;IAAC;IAAAlM,cAAA,GAAAG,CAAA;IAElBgM,OAAO,CAACC,GAAG,CAAC,yBAAyBjK,OAAO,CAACO,MAAM,aAAaE,SAAS,OAAOG,OAAO,EAAE,CAAC;;IAE1F;IACA,MAAMsJ,cAAc;IAAA;IAAA,CAAArM,cAAA,GAAAG,CAAA,SAAG;MACrB6C,cAAc;MAAE;MAAA,CAAAhD,cAAA,GAAAsC,CAAA,WAAAU,cAAc;MAAA;MAAA,CAAAhD,cAAA,GAAAsC,CAAA,WAAI,MAAM;MACxCe,UAAU;MAAE;MAAA,CAAArD,cAAA,GAAAsC,CAAA,WAAAe,UAAU;MAAA;MAAA,CAAArD,cAAA,GAAAsC,CAAA,WAAI,KAAK;MAC/BgB,QAAQ;MAAE;MAAA,CAAAtD,cAAA,GAAAsC,CAAA,WAAAgB,QAAQ;MAAA;MAAA,CAAAtD,cAAA,GAAAsC,CAAA,WAAI,KAAK;MAC3BH,OAAO;MACPS,SAAS;MACTG;IACF,CAAC;IAED,MAAMuJ,MAAM;IAAA;IAAA,CAAAtM,cAAA,GAAAG,CAAA,SAAG,IAAI8E,cAAc,CAACoH,cAAc,CAAC;;IAEjD;IACA,MAAME,YAAY;IAAA;IAAA,CAAAvM,cAAA,GAAAG,CAAA,SAAGgC,OAAO,CAACK,GAAG,CAACC,MAAM,IACrC;MAAA;MAAAzC,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAAqM,iBAAiB,CAAC/J,MAAM,EAAEG,SAAS,EAAEG,OAAO,CAAC;IAAD,CAC9C,CAAC;IAED,MAAM0J,UAAU;IAAA;IAAA,CAAAzM,cAAA,GAAAG,CAAA,SAAG,MAAMuM,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;IAClD,MAAMxG,UAAU;IAAA;IAAA,CAAA/F,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;;IAErB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACAgC,OAAO,CAACyK,OAAO,CAAC,CAACnK,MAAM,EAAEoK,KAAK,KAAK;MAAA;MAAA7M,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MACjC4F,UAAU,CAACtD,MAAM,CAAC,GAAGgK,UAAU,CAACI,KAAK,CAAC;IACxC,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ;IAAA;IAAA,CAAA9M,cAAA,GAAAG,CAAA,SAAG,IAAI4M,GAAG,CAAC,CAAC;IAAC;IAAA/M,cAAA,GAAAG,CAAA;IAC3BmI,MAAM,CAAC+B,MAAM,CAACtE,UAAU,CAAC,CAAC6G,OAAO,CAACnI,IAAI,IAAI;MAAA;MAAAzE,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MACxCsE,IAAI,CAACmI,OAAO,CAACI,GAAG,IAAI;QAAA;QAAAhN,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,OAAA2M,QAAQ,CAACG,GAAG,CAACD,GAAG,CAACvH,IAAI,CAAC;MAAD,CAAC,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMyH,WAAW;IAAA;IAAA,CAAAlN,cAAA,GAAAG,CAAA,SAAGiC,KAAK,CAAC0H,IAAI,CAACgD,QAAQ,CAAC,CAACK,IAAI,CAAC,CAAC;;IAE/C;IAAA;IAAAnN,cAAA,GAAAG,CAAA;IACA,KAAK,MAAMsF,IAAI,IAAIyH,WAAW,EAAE;MAAA;MAAAlN,cAAA,GAAAG,CAAA;MAC9BmM,MAAM,CAAC3G,WAAW,GAAGF,IAAI;;MAEzB;MACA,MAAM2H,WAAW;MAAA;MAAA,CAAApN,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;MACtB,MAAMkN,aAAa;MAAA;MAAA,CAAArN,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEzBgC,OAAO,CAACyK,OAAO,CAACnK,MAAM,IAAI;QAAA;QAAAzC,cAAA,GAAA0B,CAAA;QACxB,MAAM2G,OAAO;QAAA;QAAA,CAAArI,cAAA,GAAAG,CAAA,SAAG4F,UAAU,CAACtD,MAAM,CAAC,CAAC6K,IAAI,CAACC,CAAC,IAAI;UAAA;UAAAvN,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,OAAAoN,CAAC,CAAC9H,IAAI,KAAKA,IAAI;QAAD,CAAC,CAAC;QAAC;QAAAzF,cAAA,GAAAG,CAAA;QAC9D,IAAIkI,OAAO,EAAE;UAAA;UAAArI,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UACXiN,WAAW,CAAC3K,MAAM,CAAC,GAAG4F,OAAO;UAAC;UAAArI,cAAA,GAAAG,CAAA;UAC9BkN,aAAa,CAAC5K,MAAM,CAAC,GAAG4F,OAAO,CAACG,KAAK;QACvC,CAAC;QAAA;QAAA;UAAAxI,cAAA,GAAAsC,CAAA;QAAA;MACH,CAAC,CAAC;;MAEF;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MACA,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACF,MAAMmM,MAAM,CAACzG,eAAe,CAACxE,QAAQ,EAAE+L,WAAW,CAAC;MACrD,CAAC,CAAC,OAAOlH,KAAK,EAAE;QAAA;QAAAlG,cAAA,GAAAG,CAAA;QACd,OAAOmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;UAC1B2B,KAAK,EAAE,2BAA2B;UAClCsH,OAAO,EAAEtH,KAAK,CAACE,OAAO;UACtBX,IAAI,EAAEA;QACR,CAAC,CAAC;MACJ;;MAEA;MAAA;MAAAzF,cAAA,GAAAG,CAAA;MACAmM,MAAM,CAACvC,oBAAoB,CAACsD,aAAa,CAAC;IAC5C;;IAEA;IACA,MAAMzH,OAAO;IAAA;IAAA,CAAA5F,cAAA,GAAAG,CAAA,SAAGmM,MAAM,CAACnC,gBAAgB,CAAC,CAAC;;IAEzC;IAAA;IAAAnK,cAAA,GAAAG,CAAA;IACAmE,GAAG,CAACC,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbW,MAAM,EAAEkH,cAAc;MACtBzG,OAAO;MACPJ,MAAM,EAAE8G,MAAM,CAAC9G,MAAM;MACrBD,MAAM,EAAE+G,MAAM,CAAC/G,MAAM;MACrBkI,cAAc,EAAErL,KAAK,CAAC0H,IAAI,CAACwC,MAAM,CAACjH,SAAS,CAACkD,OAAO,CAAC,CAAC,CAAC,CAAC/F,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEgG,QAAQ,CAAC,KAAM;QAAA;QAAAzI,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA;UAClFsC,MAAM;UACN,GAAGgG;QACL,CAAC;MAAD,CAAE;IACJ,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOvC,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IACxCmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACnB2B,KAAK,EAAE,2BAA2B;MAClCsH,OAAO,EAAEtH,KAAK,CAACE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC4L,IAAI,CAAC,aAAa,EAAE,CAAC5H,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EACvCmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;IACnB2B,KAAK,EAAE,2BAA2B;IAClCE,OAAO,EAAE,4HAA4H;IACrIsH,WAAW,EAAE;EACf,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAA1N,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EACtCmE,GAAG,CAACC,IAAI,CAAC;IAAEoJ,UAAU,EAAEC,aAAa,CAACC,cAAc,CAAC;EAAE,CAAC,CAAC;AAC1D,CAAC,CAAC;AAAC;AAAA7N,cAAA,GAAAG,CAAA;AAEHE,MAAM,CAAC4L,IAAI,CAAC,aAAa,EAAEtL,0BAA0B,CAACQ,yBAAyB,CAACyC,kBAAkB,CAAC,EAAE,CAACS,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EACjH,MAAM;IAAEmC,IAAI;IAAEC,IAAI;IAAEC;EAAS,CAAC;EAAA;EAAA,CAAA/D,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAAC6H,SAAS;EAC9C,MAAM7K,QAAQ;EAAA;EAAA,CAAArB,cAAA,GAAAG,CAAA,SAAGyN,aAAa,CAACE,WAAW,CAAC;IAAEjK,IAAI;IAAEC,IAAI;IAAEC,QAAQ;IAAE;IAAA,CAAA/D,cAAA,GAAAsC,CAAA,WAAAyB,QAAQ;IAAA;IAAA,CAAA/D,cAAA,GAAAsC,CAAA,WAAI,YAAY;EAAC,CAAC,CAAC;EAAC;EAAAtC,cAAA,GAAAG,CAAA;EAC/FmE,GAAG,CAACC,IAAI,CAAC;IAAElD;EAAS,CAAC,CAAC;AACxB,CAAC,CAAC;AAAC;AAAArB,cAAA,GAAAG,CAAA;AAEHE,MAAM,CAAC+D,GAAG,CAAC,iBAAiB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAC1C,MAAML,QAAQ;EAAA;EAAA,CAAArB,cAAA,GAAAG,CAAA,SAAGyN,aAAa,CAACG,WAAW,CAAC1J,GAAG,CAAC2J,MAAM,CAACC,EAAE,CAAC;EAAC;EAAAjO,cAAA,GAAAG,CAAA;EAC1D,IAAI,CAACkB,QAAQ,EAAE;IAAA;IAAArB,cAAA,GAAAsC,CAAA;IAAAtC,cAAA,GAAAG,CAAA;IAAA,OAAOmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE;IAAY,CAAC,CAAC;EAAA,CAAC;EAAA;EAAA;IAAAlG,cAAA,GAAAsC,CAAA;EAAA;EAAAtC,cAAA,GAAAG,CAAA;EACnEmE,GAAG,CAACC,IAAI,CAAC;IAAElD;EAAS,CAAC,CAAC;AACxB,CAAC,CAAC;AAAC;AAAArB,cAAA,GAAAG,CAAA;AAEHE,MAAM,CAACsJ,MAAM,CAAC,iBAAiB,EAAE,CAACtF,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC7CyN,aAAa,CAACM,cAAc,CAAC7J,GAAG,CAAC2J,MAAM,CAACC,EAAE,CAAC;EAAC;EAAAjO,cAAA,GAAAG,CAAA;EAC5CmE,GAAG,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE;EAAK,CAAC,CAAC;AAC7B,CAAC,CAAC;;AAEF;AACA,eAAegI,iBAAiBA,CAAC/J,MAAM,EAAEG,SAAS,EAAEG,OAAO,EAAE;EAAA;EAAA/C,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC3D,IAAI;IACF,MAAMgO,QAAQ;IAAA;IAAA,CAAAnO,cAAA,GAAAG,CAAA,SAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAM6F,MAAM;IAAA;IAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAG,MAAMI,KAAK,CAAC4N,QAAQ,EAAE,CAAC1L,MAAM,EAAEG,SAAS,EAAEG,OAAO,CAAC,CAAC;IAAC;IAAA/C,cAAA,GAAAG,CAAA;IACnE;IAAI;IAAA,CAAAH,cAAA,GAAAsC,CAAA,aAAC0D,MAAM;IAAA;IAAA,CAAAhG,cAAA,GAAAsC,CAAA,YAAI,CAACF,KAAK,CAACC,OAAO,CAAC2D,MAAM,CAACoI,IAAI,CAAC;IAAA;IAAA,CAAApO,cAAA,GAAAsC,CAAA,YAAI0D,MAAM,CAACoI,IAAI,CAAC1L,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA1C,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACtE,OAAOmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;QAAE2B,KAAK,EAAE;MAA+B,CAAC,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAlG,cAAA,GAAAsC,CAAA;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACD,OAAO6F,MAAM,CAACoI,IAAI;EACpB,CAAC,CAAC,OAAOlI,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,2BAA2BzD,MAAM,GAAG,EAAEyD,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IAC3D,OAAOmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE,gBAAgB;MAAEsH,OAAO,EAAEtH,KAAK,CAACE;IAAQ,CAAC,CAAC;EAClF;AACF;;AAEA;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,UAAU,EAAEzD,0BAA0B,CAACQ,yBAAyB,CAACoC,YAAY,CAAC,EAAE,OAAOc,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC7G,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFgM,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAM;MAAE5I,MAAM;MAAEE;IAAM,CAAC;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAAC6H,SAAS;;IAEvC;IACA,MAAMmC,aAAa;IAAA;IAAA,CAAArO,cAAA,GAAAG,CAAA,SAAG,CACpB;MACE0D,IAAI,EAAE,kBAAkB;MACxBtD,KAAK,EAAE;IACT,CAAC,EACD;MACEsD,IAAI,EAAE,wBAAwB;MAC9BtD,KAAK,EAAE;IACT,CAAC,EACD;MACEsD,IAAI,EAAE,eAAe;MACrBtD,KAAK,EAAE;IACT,CAAC,CACF;IAAC;IAAAP,cAAA,GAAAG,CAAA;IAEF,KAAK,MAAMmO,WAAW,IAAID,aAAa,EAAE;MAAA;MAAArO,cAAA,GAAAG,CAAA;MACvC,IAAI;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACFgM,OAAO,CAACC,GAAG,CAAC,aAAakC,WAAW,CAACzK,IAAI,WAAW,CAAC;QACrD,MAAMmC,MAAM;QAAA;QAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAG,MAAMI,KAAK,CAAC+N,WAAW,CAAC/N,KAAK,EAAE,CAAC,IAAIiD,MAAM,GAAG,EAAEE,KAAK,CAAC,CAAC;QAAC;QAAA1D,cAAA,GAAAG,CAAA;QAEtE;QAAI;QAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAA0D,MAAM;QAAA;QAAA,CAAAhG,cAAA,GAAAsC,CAAA,YAAIF,KAAK,CAACC,OAAO,CAAC2D,MAAM,CAACoI,IAAI,CAAC;QAAA;QAAA,CAAApO,cAAA,GAAAsC,CAAA,YAAI0D,MAAM,CAACoI,IAAI,CAAC1L,MAAM,GAAG,CAAC,GAAE;UAAA;UAAA1C,cAAA,GAAAsC,CAAA;UAAAtC,cAAA,GAAAG,CAAA;UAClEgM,OAAO,CAACC,GAAG,CAAC,WAAWpG,MAAM,CAACoI,IAAI,CAAC1L,MAAM,eAAe4L,WAAW,CAACzK,IAAI,EAAE,CAAC;UAAC;UAAA7D,cAAA,GAAAG,CAAA;UAC5E,OAAOmE,GAAG,CAACC,IAAI,CAAC;YACdC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAEuB,MAAM,CAACoI,IAAI;YACjBG,MAAM,EAAED,WAAW,CAACzK,IAAI;YACxB2K,KAAK,EAAExI,MAAM,CAACoI,IAAI,CAAC1L;UACrB,CAAC,CAAC;QACJ,CAAC;QAAA;QAAA;UAAA1C,cAAA,GAAAsC,CAAA;QAAA;MACH,CAAC,CAAC,OAAOmM,UAAU,EAAE;QAAA;QAAAzO,cAAA,GAAAG,CAAA;QACnBgM,OAAO,CAACC,GAAG,CAAC,YAAYkC,WAAW,CAACzK,IAAI,UAAU,EAAE4K,UAAU,CAACrI,OAAO,CAAC;QAAC;QAAApG,cAAA,GAAAG,CAAA;QACxE;MACF;IACF;;IAEA;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACAgM,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,MAAMsC,WAAW;IAAA;IAAA,CAAA1O,cAAA,GAAAG,CAAA,SAAG,CAClB;MAAEsC,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAa,CAAC,EAC5C;MAAElM,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAwB,CAAC,EACvD;MAAElM,MAAM,EAAE,OAAO;MAAEkM,UAAU,EAAE;IAAgB,CAAC,EAChD;MAAElM,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAkB,CAAC,EACjD;MAAElM,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAa,CAAC,EAC5C;MAAElM,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAqB,CAAC,EACpD;MAAElM,MAAM,EAAE,MAAM;MAAEkM,UAAU,EAAE;IAAsB,CAAC,EACrD;MAAElM,MAAM,EAAE,KAAK;MAAEkM,UAAU,EAAE;IAAmB,CAAC,EACjD;MAAElM,MAAM,EAAE,KAAK;MAAEkM,UAAU,EAAE;IAAoB,CAAC,EAClD;MAAElM,MAAM,EAAE,KAAK;MAAEkM,UAAU,EAAE;IAA2B,CAAC,CAC1D,CAACpD,MAAM,CAACpL,CAAC,IAAI;MAAA;MAAAH,cAAA,GAAA0B,CAAA;MAAA1B,cAAA,GAAAG,CAAA;MAAA,OAAAA,CAAC,CAACsC,MAAM,CAACwB,WAAW,CAAC,CAAC,CAACD,QAAQ,CAACR,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAjE,cAAA,GAAAG,CAAA;IAErEmE,GAAG,CAACC,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEiK,WAAW,CAACnM,KAAK,CAAC,CAAC,EAAE+E,QAAQ,CAAC5D,KAAK,CAAC,CAAC;MAC3C6K,MAAM,EAAE,WAAW;MACnBC,KAAK,EAAEE,WAAW,CAAChM;IACrB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOwD,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IACrDmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0B,KAAK,EAAE,yBAAyB;MAChCsH,OAAO,EAAEtH,KAAK,CAACE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAMyO,SAAS;IAAA;IAAA,CAAA5O,cAAA,GAAAG,CAAA,SAAG,CAChB;MACE8N,EAAE,EAAE,cAAc;MAClBpK,IAAI,EAAE,cAAc;MACpBgL,WAAW,EAAE,8BAA8B;MAC3C/K,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,EACD;MACEmK,EAAE,EAAE,0BAA0B;MAC9BpK,IAAI,EAAE,0BAA0B;MAChCgL,WAAW,EAAE,qEAAqE;MAClF/K,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,EACD;MACEmK,EAAE,EAAE,cAAc;MAClBpK,IAAI,EAAE,oBAAoB;MAC1BgL,WAAW,EAAE,uCAAuC;MACpD/K,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACM,CAAC,CACF;IAAC;IAAA9D,cAAA,GAAAG,CAAA;IAEFmE,GAAG,CAACC,IAAI,CAAC;MAAEqK;IAAU,CAAC,CAAC;EAEzB,CAAC,CAAC,OAAO1I,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IAClDmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE,gBAAgB;MAAEsH,OAAO,EAAEtH,KAAK,CAACE;IAAQ,CAAC,CAAC;EAC3E;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,aAAa,EAAE1D,iBAAiB,EAAE,OAAO2D,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC/D,IAAI;IACF,MAAM2O,MAAM;IAAA;IAAA,CAAA9O,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAAC0K,IAAI,CAACC,GAAG;;IAE3B;IAAA;IAAAhP,cAAA,GAAAG,CAAA;IACA,IAAI;MACF,MAAM6F,MAAM;MAAA;MAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAG,MAAMI,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EAAE,CAACuO,MAAM,CAAC,CAAC;MAEZ,MAAMnB,UAAU;MAAA;MAAA,CAAA3N,cAAA,GAAAG,CAAA,SAAG6F,MAAM,CAACoI,IAAI,CAAC5L,GAAG,CAACwK,GAAG,IAAK;QAAA;QAAAhN,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA;UACzC8N,EAAE,EAAEjB,GAAG,CAACiB,EAAE;UACVpK,IAAI,EAAEmJ,GAAG,CAACnJ,IAAI;UACdgL,WAAW,EAAE7B,GAAG,CAAC6B,WAAW;UAC5B/K,IAAI,EAAEkJ,GAAG,CAACiC,aAAa;UACvBC,UAAU,EAAE,OAAOlC,GAAG,CAACkC,UAAU,KAAK,QAAQ;UAAA;UAAA,CAAAlP,cAAA,GAAAsC,CAAA,YAAG6M,IAAI,CAACC,KAAK,CAACpC,GAAG,CAACkC,UAAU,CAAC;UAAA;UAAA,CAAAlP,cAAA,GAAAsC,CAAA,YAAG0K,GAAG,CAACkC,UAAU;UAC5FG,SAAS,EAAErC,GAAG,CAACsC,UAAU;UACzBC,SAAS,EAAEvC,GAAG,CAACwC,UAAU;UACzBC,QAAQ,EAAEzC,GAAG,CAAC0C;QAChB,CAAC;MAAD,CAAE,CAAC;MAAC;MAAA1P,cAAA,GAAAG,CAAA;MAEJmE,GAAG,CAACC,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEkJ;MACR,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOgC,OAAO,EAAE;MAAA;MAAA3P,cAAA,GAAAG,CAAA;MAChBgM,OAAO,CAACC,GAAG,CAAC,wDAAwD,EAAEuD,OAAO,CAACvJ,OAAO,CAAC;;MAEtF;MACA,MAAMwJ,cAAc;MAAA;MAAA,CAAA5P,cAAA,GAAAG,CAAA,SAAG,CACrB;QACE8N,EAAE,EAAE,YAAY;QAChBpK,IAAI,EAAE,uBAAuB;QAC7BgL,WAAW,EAAE,0DAA0D;QACvE/K,IAAI,EAAE,mEAAmE;QACzEoL,UAAU,EAAE;UAAEW,MAAM,EAAE,EAAE;UAAEpN,MAAM,EAAE;QAAO,CAAC;QAC1C4M,SAAS,EAAE,IAAItK,IAAI,CAACA,IAAI,CAAC8D,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC7D,WAAW,CAAC,CAAC;QACxDuK,SAAS,EAAE,IAAIxK,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCyK,QAAQ,EAAE;MACZ,CAAC,EACD;QACExB,EAAE,EAAE,YAAY;QAChBpK,IAAI,EAAE,cAAc;QACpBgL,WAAW,EAAE,4CAA4C;QACzD/K,IAAI,EAAE,yDAAyD;QAC/DoL,UAAU,EAAE;UAAEY,UAAU,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,UAAU,EAAE;QAAG,CAAC;QAC5DX,SAAS,EAAE,IAAItK,IAAI,CAACA,IAAI,CAAC8D,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC7D,WAAW,CAAC,CAAC;QACzDuK,SAAS,EAAE,IAAIxK,IAAI,CAACA,IAAI,CAAC8D,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC7D,WAAW,CAAC,CAAC;QACvDyK,QAAQ,EAAE;MACZ,CAAC,CACF;MAAC;MAAAzP,cAAA,GAAAG,CAAA;MAEFmE,GAAG,CAACC,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEmL,cAAc;QACpBK,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAO/J,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IACnDmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE,4BAA4B;MAAEsH,OAAO,EAAEtH,KAAK,CAACE;IAAQ,CAAC,CAAC;EACvF;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC+D,GAAG,CAAC,UAAU,EAAE1D,iBAAiB,EAAE,OAAO2D,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC5D,IAAI;IACF,MAAM2O,MAAM;IAAA;IAAA,CAAA9O,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAAC0K,IAAI,CAACC,GAAG;IAC3B,MAAMtL,KAAK;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAAgF,QAAQ,CAACjD,GAAG,CAAC9D,KAAK,CAACmD,KAAK,CAAC;IAAA;IAAA,CAAA1D,cAAA,GAAAsC,CAAA,YAAI,EAAE;IAC7C,MAAM4N,MAAM;IAAA;IAAA,CAAAlQ,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAsC,CAAA,YAAAgF,QAAQ,CAACjD,GAAG,CAAC9D,KAAK,CAAC2P,MAAM,CAAC;IAAA;IAAA,CAAAlQ,cAAA,GAAAsC,CAAA,YAAI,CAAC;;IAE9C;IAAA;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI;MACF,MAAM6F,MAAM;MAAA;MAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAG,MAAMI,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EAAE,CAACuO,MAAM,EAAEpL,KAAK,EAAEwM,MAAM,CAAC,CAAC;MAE3B,MAAMC,OAAO;MAAA;MAAA,CAAAnQ,cAAA,GAAAG,CAAA,SAAG6F,MAAM,CAACoI,IAAI,CAAC5L,GAAG,CAACwK,GAAG,IAAK;QAAA;QAAAhN,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA;UACtC8N,EAAE,EAAEjB,GAAG,CAACiB,EAAE;UACVmC,YAAY,EAAEpD,GAAG,CAACqD,aAAa;UAC/B5N,MAAM,EAAEuK,GAAG,CAACvK,MAAM;UAClBG,SAAS,EAAEoK,GAAG,CAACsD,UAAU;UACzBvN,OAAO,EAAEiK,GAAG,CAACuD,QAAQ;UACrBvN,cAAc,EAAEqE,UAAU,CAAC2F,GAAG,CAACwD,eAAe,CAAC;UAC/CzE,UAAU,EAAE1E,UAAU,CAAC2F,GAAG,CAACyD,WAAW,CAAC;UACvChG,WAAW,EAAEpD,UAAU,CAAC2F,GAAG,CAAC0D,YAAY,CAAC;UACzCxF,WAAW,EAAE7D,UAAU,CAAC2F,GAAG,CAAC2D,YAAY,CAAC;UACzC1F,WAAW,EAAE5D,UAAU,CAAC2F,GAAG,CAAC4D,YAAY,CAAC;UACzCjF,OAAO,EAAEtE,UAAU,CAAC2F,GAAG,CAAC6D,QAAQ,CAAC;UACjCnF,WAAW,EAAEpE,QAAQ,CAAC0F,GAAG,CAAC8D,YAAY,CAAC;UACvCzB,SAAS,EAAErC,GAAG,CAACsC,UAAU;UACzBJ,UAAU,EAAE,OAAOlC,GAAG,CAACkC,UAAU,KAAK,QAAQ;UAAA;UAAA,CAAAlP,cAAA,GAAAsC,CAAA,YAAG6M,IAAI,CAACC,KAAK,CAACpC,GAAG,CAACkC,UAAU,CAAC;UAAA;UAAA,CAAAlP,cAAA,GAAAsC,CAAA,YAAG0K,GAAG,CAACkC,UAAU;QAC9F,CAAC;MAAD,CAAE,CAAC;;MAEH;MACA,MAAM6B,WAAW;MAAA;MAAA,CAAA/Q,cAAA,GAAAG,CAAA,SAAG,MAAMI,KAAK,CAAC;AACtC;AACA;AACA;AACA,OAAO,EAAE,CAACuO,MAAM,CAAC,CAAC;MAAC;MAAA9O,cAAA,GAAAG,CAAA;MAEbmE,GAAG,CAACC,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE0L,OAAO;QACba,UAAU,EAAE;UACVC,KAAK,EAAE3J,QAAQ,CAACyJ,WAAW,CAAC3C,IAAI,CAAC,CAAC,CAAC,CAAC6C,KAAK,CAAC;UAC1CvN,KAAK;UACLwM,MAAM;UACNgB,OAAO,EAAEhB,MAAM,GAAGC,OAAO,CAACzN,MAAM,GAAG4E,QAAQ,CAACyJ,WAAW,CAAC3C,IAAI,CAAC,CAAC,CAAC,CAAC6C,KAAK;QACvE;MACF,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOtB,OAAO,EAAE;MAAA;MAAA3P,cAAA,GAAAG,CAAA;MAChBgM,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAEuD,OAAO,CAACvJ,OAAO,CAAC;;MAE5F;MAAA;MAAApG,cAAA,GAAAG,CAAA;MACAgM,OAAO,CAACjG,KAAK,CAAC,iEAAiE,EAAE;QAC/EiL,qBAAqB,EAAE,IAAI;QAC3BC,oBAAoB,EAAE;UACpBC,oBAAoB,EAAE,CAAC,wBAAwB,EAAE,kBAAkB,CAAC;UACpEC,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,gCAAgC,EAChC,mCAAmC,EACnC,oCAAoC,EACpC,4BAA4B,CAC7B;UACDC,qBAAqB,EAAE,CACrB,6BAA6B,EAC7B,sCAAsC,EACtC,mCAAmC,EACnC,2CAA2C,EAC3C,8BAA8B,CAC/B;UACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,2BAA2B,EAC3B,yBAAyB;QAE7B;MACF,CAAC,CAAC;MAEF,MAAMC,YAAY;MAAA;MAAA,CAAAzR,cAAA,GAAAG,CAAA,SAAG,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAExBmE,GAAG,CAACC,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEgN,YAAY;QAClBT,UAAU,EAAE;UACVC,KAAK,EAAE,CAAC;UACRvN,KAAK;UACLwM,MAAM;UACNgB,OAAO,EAAE;QACX,CAAC;QACD9K,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAOF,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IACzDmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE,kCAAkC;MAAEsH,OAAO,EAAEtH,KAAK,CAACE;IAAQ,CAAC,CAAC;EAC7F;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApG,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC4L,IAAI,CAAC,WAAW,EAAE,OAAO5H,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtE,cAAA,GAAA0B,CAAA;EAAA1B,cAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM;MAAEkB;IAAS,CAAC;IAAA;IAAA,CAAArB,cAAA,GAAAG,CAAA,SAAGkE,GAAG,CAACqN,IAAI;IAAC;IAAA1R,cAAA,GAAAG,CAAA;IAE9B,IAAI,CAACkB,QAAQ,EAAE;MAAA;MAAArB,cAAA,GAAAsC,CAAA;MAAAtC,cAAA,GAAAG,CAAA;MACb,OAAOmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;QAAE2B,KAAK,EAAE;MAA4B,CAAC,CAAC;IACrE,CAAC;IAAA;IAAA;MAAAlG,cAAA,GAAAsC,CAAA;IAAA;;IAED;IAAAtC,cAAA,GAAAG,CAAA;IACA,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAIwR,QAAQ,CAAC,SAAS,EAAE,mBAAmBtQ,QAAQ,IAAI,CAAC;MAAC;MAAArB,cAAA,GAAAG,CAAA;MACzDmE,GAAG,CAACC,IAAI,CAAC;QAAEqN,KAAK,EAAE,IAAI;QAAExL,OAAO,EAAE;MAAyB,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAAlG,cAAA,GAAAG,CAAA;MACdmE,GAAG,CAACC,IAAI,CAAC;QACPqN,KAAK,EAAE,KAAK;QACZ1L,KAAK,EAAEA,KAAK,CAACE,OAAO;QACpB7E,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAO2E,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAG,CAAA;IACdgM,OAAO,CAACjG,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAAC;IAAAlG,cAAA,GAAAG,CAAA;IAC1CmE,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAE2B,KAAK,EAAE,gBAAgB;MAAEsH,OAAO,EAAEtH,KAAK,CAACE;IAAQ,CAAC,CAAC;EAC3E;AACF,CAAC,CAAC;AAAC;AAAApG,cAAA,GAAAG,CAAA;AAEH0R,MAAM,CAACC,OAAO,GAAGzR,MAAM","ignoreList":[]}