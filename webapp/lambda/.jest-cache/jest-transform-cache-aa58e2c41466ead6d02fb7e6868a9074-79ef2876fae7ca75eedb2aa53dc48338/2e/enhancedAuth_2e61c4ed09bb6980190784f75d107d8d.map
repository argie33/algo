{"version":3,"names":["cov_2f505nlkgs","actualCoverage","jwt","s","require","crypto","EnhancedAuthService","logger","EnhancedAuthMiddleware","constructor","f","authService","jwtSecret","b","process","env","JWT_SECRET","sessionStore","Map","failedAttempts","deviceFingerprints","rateLimitStore","suspiciousActivityStore","maxFailedAttempts","lockoutDuration","sessionTimeout","deviceTrustDuration","config","rateLimit","windowMs","maxRequests","blockDuration","strictPaths","strictLimit","session","maxAge","renewThreshold","maxConcurrent","security","maxLoginAttempts","suspiciousThreshold","ipWhitelist","IP_WHITELIST","split","trustedProxies","TRUSTED_PROXIES","cors","allowedOrigins","ALLOWED_ORIGINS","allowedMethods","allowedHeaders","exposedHeaders","credentials","setInterval","cleanup","generateDeviceFingerprint","req","userAgent","get","acceptLanguage","acceptEncoding","ip","connection","remoteAddress","fingerprintData","createHash","update","digest","createSessionToken","userId","deviceFingerprint","sessionId","randomBytes","toString","sessionData","createdAt","Date","now","lastActive","ipAddress","set","validateSession","valid","reason","currentTime","delete","currentFingerprint","console","warn","validateJWT","token","decoded","verify","tokenAge","iat","deviceId","error","message","trackFailedAttempt","identifier","has","count","firstAttempt","lastAttempt","lockedUntil","attempts","isAccountLocked","locked","remainingTime","Math","ceil","resetFailedAttempts","trustDevice","trustedAt","expiresAt","log","isDeviceTrusted","deviceInfo","authenticate","options","res","next","correlationId","generateCorrelationId","applySecurityHeaders","handleCORS","clientIP","getClientIP","isRateLimited","sendRateLimitError","detectSuspiciousActivity","sendSuspiciousActivityError","extractToken","required","sendAuthError","verifyToken","user","getUserById","sub","isActive","sessionValid","validateEnhancedSession","requireMFA","mfaVerified","sendMFARequired","roles","hasRequiredRole","permissions","hasRequiredPermissions","updateSessionActivity","info","id","email","path","method","stack","requireAuth","allowApiKey","requireSession","checkDevice","authResult","authHeader","headers","authorization","startsWith","substring","jwtResult","role","authMethod","cookies","sessionResult","apiKey","apiKeyResult","validateApiKey","status","json","success","code","deviceTrusted","requireRole","allowedRoles","userRole","includes","current","requirePermission","permission","userPermissions","available","isBlacklisted","isTokenBlacklisted","tokenId","jti","tokenPreview","getSession","invalidateSession","originalIP","currentIP","flagSuspiciousActivity","userSessions","getUserActiveSessions","length","oldestSessions","sort","a","lastActivity","slice","oldSession","key","requests","resetTime","blocked","rateData","blockedUntil","isStrictPath","limit","score","events","suspicious","scoreIncrease","test","recentEvents","filter","event","timestamp","push","requiredRoles","Array","isArray","userRoles","map","name","some","requiredPermissions","perm","every","origin","header","join","end","csp","secure","cookieToken","forwarded","ips","trim","socket","randomUUID","catch","type","flagged","statusCode","toISOString","retryAfter","mfaRequired","cleanedSessions","cleanedAttempts","cleanedDevices","cleanedRateLimit","cleanedSuspicious","entries","fingerprint","data","getStats","activeSessions","size","trustedDevices","lockedAccounts","from","values","attempt","revokeUserSessions","revokedCount","createAuthMiddleware","middleware","requirePermissions","requireAdmin","requireApiAccess","requireTradingAccess","createLegacyAuthMiddleware","module","exports"],"sources":["enhancedAuth.js"],"sourcesContent":["/**\n * Enhanced Authentication and Authorization Middleware\n * Advanced security features for financial trading platform\n * Integrates with EnhancedAuthService for comprehensive security\n */\n\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\nconst { EnhancedAuthService } = require('../services/EnhancedAuthService');\nconst logger = require('../utils/logger');\n\nclass EnhancedAuthMiddleware {\n    constructor() {\n        this.authService = new EnhancedAuthService();\n        this.jwtSecret = process.env.JWT_SECRET || 'fallback-secret-change-in-production';\n        this.sessionStore = new Map(); // In production, use Redis\n        this.failedAttempts = new Map();\n        this.deviceFingerprints = new Map();\n        this.rateLimitStore = new Map();\n        this.suspiciousActivityStore = new Map();\n        \n        // Security settings\n        this.maxFailedAttempts = 5;\n        this.lockoutDuration = 30 * 60 * 1000; // 30 minutes\n        this.sessionTimeout = 24 * 60 * 60 * 1000; // 24 hours\n        this.deviceTrustDuration = 7 * 24 * 60 * 60 * 1000; // 7 days\n        \n        // Rate limiting configuration\n        this.config = {\n            rateLimit: {\n                windowMs: 15 * 60 * 1000, // 15 minutes\n                maxRequests: 100,\n                blockDuration: 60 * 60 * 1000, // 1 hour\n                strictPaths: ['/api/auth/login', '/api/auth/register'],\n                strictLimit: 5\n            },\n            session: {\n                maxAge: 24 * 60 * 60 * 1000, // 24 hours\n                renewThreshold: 30 * 60 * 1000, // 30 minutes before expiry\n                maxConcurrent: 3\n            },\n            security: {\n                maxLoginAttempts: 5,\n                lockoutDuration: 30 * 60 * 1000, // 30 minutes\n                suspiciousThreshold: 10,\n                ipWhitelist: process.env.IP_WHITELIST?.split(',') || [],\n                trustedProxies: process.env.TRUSTED_PROXIES?.split(',') || []\n            },\n            cors: {\n                allowedOrigins: process.env.ALLOWED_ORIGINS?.split(',') || ['https://d1zb7knau41vl9.cloudfront.net'],\n                allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n                allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'X-API-Key', 'X-Session-ID'],\n                exposedHeaders: ['X-Rate-Limit-Remaining', 'X-Rate-Limit-Reset'],\n                credentials: true,\n                maxAge: 86400 // 24 hours\n            }\n        };\n        \n        // Cleanup interval\n        setInterval(() => this.cleanup(), 10 * 60 * 1000); // Every 10 minutes\n    }\n\n    /**\n     * Generate device fingerprint from request headers\n     */\n    generateDeviceFingerprint(req) {\n        const userAgent = req.get('User-Agent') || '';\n        const acceptLanguage = req.get('Accept-Language') || '';\n        const acceptEncoding = req.get('Accept-Encoding') || '';\n        const ip = req.ip || req.connection.remoteAddress;\n        \n        const fingerprintData = `${userAgent}:${acceptLanguage}:${acceptEncoding}:${ip}`;\n        return crypto.createHash('sha256').update(fingerprintData).digest('hex');\n    }\n\n    /**\n     * Create secure session token\n     */\n    createSessionToken(userId, deviceFingerprint) {\n        const sessionId = crypto.randomBytes(32).toString('hex');\n        const sessionData = {\n            userId,\n            deviceFingerprint,\n            createdAt: Date.now(),\n            lastActive: Date.now(),\n            ipAddress: null,\n            userAgent: null\n        };\n        \n        this.sessionStore.set(sessionId, sessionData);\n        return sessionId;\n    }\n\n    /**\n     * Validate session token\n     */\n    validateSession(sessionId, req) {\n        const session = this.sessionStore.get(sessionId);\n        if (!session) {\n            return { valid: false, reason: 'session_not_found' };\n        }\n\n        const currentTime = Date.now();\n        \n        // Check session timeout\n        if (currentTime - session.lastActive > this.sessionTimeout) {\n            this.sessionStore.delete(sessionId);\n            return { valid: false, reason: 'session_expired' };\n        }\n\n        // Check device fingerprint consistency\n        const currentFingerprint = this.generateDeviceFingerprint(req);\n        if (session.deviceFingerprint !== currentFingerprint) {\n            console.warn(`🚨 Device fingerprint mismatch for user ${session.userId}`);\n            return { valid: false, reason: 'device_mismatch' };\n        }\n\n        // Update last active time\n        session.lastActive = currentTime;\n        session.ipAddress = req.ip;\n        session.userAgent = req.get('User-Agent');\n        \n        return { valid: true, session };\n    }\n\n    /**\n     * Enhanced JWT token validation\n     */\n    validateJWT(token, req) {\n        try {\n            const decoded = jwt.verify(token, this.jwtSecret);\n            \n            // Check token age\n            const tokenAge = Date.now() - (decoded.iat * 1000);\n            if (tokenAge > this.sessionTimeout) {\n                return { valid: false, reason: 'token_expired' };\n            }\n\n            // Check device consistency if available\n            if (decoded.deviceId) {\n                const currentFingerprint = this.generateDeviceFingerprint(req);\n                if (decoded.deviceId !== currentFingerprint) {\n                    console.warn(`🚨 JWT device mismatch for user ${decoded.userId}`);\n                    return { valid: false, reason: 'device_mismatch' };\n                }\n            }\n\n            return { valid: true, decoded };\n        } catch (error) {\n            console.warn(`🚨 JWT validation failed: ${error.message}`);\n            return { valid: false, reason: 'invalid_token' };\n        }\n    }\n\n    /**\n     * Track failed authentication attempts\n     */\n    trackFailedAttempt(identifier) {\n        const currentTime = Date.now();\n        \n        if (!this.failedAttempts.has(identifier)) {\n            this.failedAttempts.set(identifier, {\n                count: 0,\n                firstAttempt: currentTime,\n                lastAttempt: currentTime,\n                lockedUntil: 0\n            });\n        }\n\n        const attempts = this.failedAttempts.get(identifier);\n        attempts.count++;\n        attempts.lastAttempt = currentTime;\n\n        // Apply lockout if max attempts exceeded\n        if (attempts.count >= this.maxFailedAttempts) {\n            attempts.lockedUntil = currentTime + this.lockoutDuration;\n            console.warn(`🔒 Account locked for ${identifier} due to ${attempts.count} failed attempts`);\n        }\n\n        return attempts;\n    }\n\n    /**\n     * Check if account is locked\n     */\n    isAccountLocked(identifier) {\n        const attempts = this.failedAttempts.get(identifier);\n        if (!attempts) return false;\n\n        const currentTime = Date.now();\n        if (attempts.lockedUntil > currentTime) {\n            return {\n                locked: true,\n                remainingTime: Math.ceil((attempts.lockedUntil - currentTime) / 1000),\n                attempts: attempts.count\n            };\n        }\n\n        // Clear old failed attempts if lockout expired\n        if (attempts.lockedUntil > 0 && attempts.lockedUntil <= currentTime) {\n            this.failedAttempts.delete(identifier);\n        }\n\n        return { locked: false };\n    }\n\n    /**\n     * Reset failed attempts on successful login\n     */\n    resetFailedAttempts(identifier) {\n        this.failedAttempts.delete(identifier);\n    }\n\n    /**\n     * Device trust management\n     */\n    trustDevice(deviceFingerprint, userId) {\n        this.deviceFingerprints.set(deviceFingerprint, {\n            userId,\n            trustedAt: Date.now(),\n            expiresAt: Date.now() + this.deviceTrustDuration\n        });\n        console.log(`🛡️ Device trusted for user ${userId}`);\n    }\n\n    /**\n     * Check if device is trusted\n     */\n    isDeviceTrusted(deviceFingerprint, userId) {\n        const deviceInfo = this.deviceFingerprints.get(deviceFingerprint);\n        if (!deviceInfo) return false;\n\n        if (deviceInfo.userId !== userId) return false;\n        if (Date.now() > deviceInfo.expiresAt) {\n            this.deviceFingerprints.delete(deviceFingerprint);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Enhanced main authentication middleware with comprehensive security\n     */\n    authenticate(options = {}) {\n        return async (req, res, next) => {\n            const correlationId = this.generateCorrelationId();\n            req.correlationId = correlationId;\n            \n            try {\n                // Apply security headers\n                this.applySecurityHeaders(req, res);\n                \n                // Handle CORS\n                if (this.handleCORS(req, res)) {\n                    return;\n                }\n                \n                // Get client IP\n                const clientIP = this.getClientIP(req);\n                req.clientIP = clientIP;\n                \n                // Rate limiting\n                if (this.isRateLimited(req, clientIP)) {\n                    return this.sendRateLimitError(res, correlationId);\n                }\n                \n                // Check for suspicious activity\n                if (this.detectSuspiciousActivity(req, clientIP)) {\n                    return this.sendSuspiciousActivityError(res, correlationId);\n                }\n                \n                // Extract and validate JWT token\n                const token = this.extractToken(req);\n                if (!token) {\n                    if (options.required !== false) {\n                        return this.sendAuthError(res, 'Authentication required', correlationId);\n                    }\n                    return next();\n                }\n                \n                // Verify JWT token\n                const decoded = await this.verifyToken(token, correlationId);\n                if (!decoded) {\n                    return this.sendAuthError(res, 'Invalid or expired token', correlationId);\n                }\n                \n                // Get user details\n                const user = await this.authService.getUserById(decoded.sub);\n                if (!user || !user.isActive) {\n                    return this.sendAuthError(res, 'User not found or inactive', correlationId);\n                }\n                \n                // Validate session\n                const sessionValid = await this.validateEnhancedSession(decoded, req, clientIP);\n                if (!sessionValid) {\n                    return this.sendAuthError(res, 'Invalid session', correlationId);\n                }\n                \n                // Check MFA if required\n                if (options.requireMFA && !decoded.mfaVerified) {\n                    return this.sendMFARequired(res, correlationId);\n                }\n                \n                // Role-based access control\n                if (options.roles && !this.hasRequiredRole(user, options.roles)) {\n                    return this.sendAuthError(res, 'Insufficient permissions', correlationId, 403);\n                }\n                \n                // Permission-based access control\n                if (options.permissions && !this.hasRequiredPermissions(user, options.permissions)) {\n                    return this.sendAuthError(res, 'Insufficient permissions', correlationId, 403);\n                }\n                \n                // Attach user to request\n                req.user = user;\n                req.token = decoded;\n                req.sessionId = decoded.sessionId;\n                \n                // Update session activity\n                this.updateSessionActivity(decoded.sessionId, req);\n                \n                // Log successful authentication\n                logger.info('Authentication successful', {\n                    correlationId,\n                    userId: user.id,\n                    email: user.email,\n                    ip: clientIP,\n                    userAgent: req.get('User-Agent'),\n                    path: req.path,\n                    method: req.method\n                });\n                \n                next();\n                \n            } catch (error) {\n                logger.error('Authentication middleware error', {\n                    correlationId,\n                    error: error.message,\n                    stack: error.stack,\n                    ip: req.clientIP,\n                    path: req.path,\n                    method: req.method\n                });\n                \n                return this.sendAuthError(res, 'Authentication failed', correlationId, 500);\n            }\n        };\n    }\n\n    /**\n     * Main authentication middleware (legacy compatibility)\n     */\n    requireAuth(options = {}) {\n        return async (req, res, next) => {\n            const { allowApiKey = true, requireSession = false, checkDevice = true } = options;\n            \n            try {\n                let authResult = null;\n                \n                // Try JWT token first\n                const authHeader = req.headers.authorization;\n                if (authHeader && authHeader.startsWith('Bearer ')) {\n                    const token = authHeader.substring(7);\n                    const jwtResult = this.validateJWT(token, req);\n                    \n                    if (jwtResult.valid) {\n                        authResult = {\n                            userId: jwtResult.decoded.userId,\n                            email: jwtResult.decoded.email,\n                            role: jwtResult.decoded.role,\n                            authMethod: 'jwt'\n                        };\n                    }\n                }\n\n                // Try session token\n                if (!authResult && requireSession) {\n                    const sessionId = req.headers['x-session-id'] || req.cookies?.sessionId;\n                    if (sessionId) {\n                        const sessionResult = this.validateSession(sessionId, req);\n                        \n                        if (sessionResult.valid) {\n                            authResult = {\n                                userId: sessionResult.session.userId,\n                                authMethod: 'session',\n                                sessionId\n                            };\n                        }\n                    }\n                }\n\n                // Try API key authentication\n                if (!authResult && allowApiKey) {\n                    const apiKey = req.headers['x-api-key'];\n                    if (apiKey) {\n                        // Validate API key (implement your API key validation logic)\n                        const apiKeyResult = await this.validateApiKey(apiKey);\n                        if (apiKeyResult.valid) {\n                            authResult = {\n                                userId: apiKeyResult.userId,\n                                authMethod: 'api_key',\n                                permissions: apiKeyResult.permissions\n                            };\n                        }\n                    }\n                }\n\n                if (!authResult) {\n                    return res.status(401).json({\n                        success: false,\n                        error: 'Authentication required',\n                        code: 'UNAUTHORIZED'\n                    });\n                }\n\n                // Device check\n                if (checkDevice) {\n                    const deviceFingerprint = this.generateDeviceFingerprint(req);\n                    const deviceTrusted = this.isDeviceTrusted(deviceFingerprint, authResult.userId);\n                    \n                    if (!deviceTrusted && authResult.authMethod !== 'api_key') {\n                        // Log security event\n                        console.warn(`🚨 Untrusted device access attempt for user ${authResult.userId}`);\n                        \n                        // You might want to require additional verification here\n                        // For now, we'll allow but mark as untrusted\n                        authResult.deviceTrusted = false;\n                    } else {\n                        authResult.deviceTrusted = true;\n                    }\n                }\n\n                // Add auth info to request\n                req.user = authResult;\n                req.userId = authResult.userId;\n                req.authMethod = authResult.authMethod;\n\n                next();\n                \n            } catch (error) {\n                console.error('🚨 Authentication error:', error);\n                res.status(500).json({\n                    success: false,\n                    error: 'Authentication service error',\n                    code: 'AUTH_ERROR'\n                });\n            }\n        };\n    }\n\n    /**\n     * Role-based authorization\n     */\n    requireRole(allowedRoles) {\n        return (req, res, next) => {\n            if (!req.user) {\n                return res.status(401).json({\n                    success: false,\n                    error: 'Authentication required',\n                    code: 'UNAUTHORIZED'\n                });\n            }\n\n            const userRole = req.user.role || 'user';\n            if (!allowedRoles.includes(userRole)) {\n                console.warn(`🚨 Insufficient permissions for user ${req.user.userId}: required ${allowedRoles}, has ${userRole}`);\n                return res.status(403).json({\n                    success: false,\n                    error: 'Insufficient permissions',\n                    code: 'FORBIDDEN',\n                    required: allowedRoles,\n                    current: userRole\n                });\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Permission-based authorization\n     */\n    requirePermission(permission) {\n        return (req, res, next) => {\n            if (!req.user) {\n                return res.status(401).json({\n                    success: false,\n                    error: 'Authentication required',\n                    code: 'UNAUTHORIZED'\n                });\n            }\n\n            const userPermissions = req.user.permissions || [];\n            if (!userPermissions.includes(permission)) {\n                console.warn(`🚨 Missing permission for user ${req.user.userId}: required ${permission}`);\n                return res.status(403).json({\n                    success: false,\n                    error: 'Missing required permission',\n                    code: 'INSUFFICIENT_PERMISSIONS',\n                    required: permission,\n                    available: userPermissions\n                });\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * API key validation (stub - implement based on your system)\n     */\n    async validateApiKey(apiKey) {\n        // Implement your API key validation logic here\n        // This is a stub implementation\n        try {\n            // In a real implementation, you would:\n            // 1. Hash the API key\n            // 2. Look it up in your database\n            // 3. Check if it's active and not expired\n            // 4. Return user info and permissions\n            \n            return {\n                valid: false,\n                reason: 'api_key_validation_not_implemented'\n            };\n        } catch (error) {\n            return {\n                valid: false,\n                reason: 'api_key_validation_error'\n            };\n        }\n    }\n\n    /**\n     * Enhanced JWT token verification with blacklist checking\n     */\n    async verifyToken(token, correlationId) {\n        try {\n            const decoded = jwt.verify(token, this.jwtSecret);\n            \n            // Check if token is blacklisted\n            const isBlacklisted = await this.authService.isTokenBlacklisted(token);\n            if (isBlacklisted) {\n                logger.warn('Blacklisted token used', {\n                    correlationId,\n                    tokenId: decoded.jti,\n                    userId: decoded.sub\n                });\n                return null;\n            }\n            \n            return decoded;\n        } catch (error) {\n            logger.warn('Token verification failed', {\n                correlationId,\n                error: error.message,\n                tokenPreview: token.substring(0, 20) + '...'\n            });\n            return null;\n        }\n    }\n\n    /**\n     * Enhanced session validation with EnhancedAuthService\n     */\n    async validateEnhancedSession(decoded, req, clientIP) {\n        const sessionId = decoded.sessionId;\n        if (!sessionId) {\n            return false;\n        }\n        \n        try {\n            const session = await this.authService.getSession(sessionId);\n            if (!session || !session.isActive) {\n                return false;\n            }\n            \n            // Check session expiry\n            if (session.expiresAt < new Date()) {\n                await this.authService.invalidateSession(sessionId);\n                return false;\n            }\n            \n            // Validate IP consistency (if configured)\n            if (session.ipAddress && session.ipAddress !== clientIP) {\n                logger.warn('IP address mismatch for session', {\n                    sessionId,\n                    originalIP: session.ipAddress,\n                    currentIP: clientIP,\n                    userId: decoded.sub\n                });\n                \n                // Allow IP changes for mobile users, but flag as suspicious\n                this.flagSuspiciousActivity(clientIP, 'ip_change');\n            }\n            \n            // Check concurrent sessions\n            const userSessions = await this.authService.getUserActiveSessions(decoded.sub);\n            if (userSessions.length > this.config.session.maxConcurrent) {\n                // Invalidate oldest sessions\n                const oldestSessions = userSessions\n                    .sort((a, b) => a.lastActivity - b.lastActivity)\n                    .slice(0, userSessions.length - this.config.session.maxConcurrent);\n                \n                for (const oldSession of oldestSessions) {\n                    await this.authService.invalidateSession(oldSession.id);\n                }\n            }\n            \n            return true;\n        } catch (error) {\n            logger.error('Session validation error', {\n                sessionId,\n                error: error.message,\n                userId: decoded.sub\n            });\n            return false;\n        }\n    }\n\n    /**\n     * Rate limiting implementation\n     */\n    isRateLimited(req, clientIP) {\n        const key = `${clientIP}:${req.path}`;\n        const now = Date.now();\n        const windowMs = this.config.rateLimit.windowMs;\n        \n        if (!this.rateLimitStore.has(key)) {\n            this.rateLimitStore.set(key, {\n                requests: 1,\n                resetTime: now + windowMs,\n                blocked: false\n            });\n            return false;\n        }\n        \n        const rateData = this.rateLimitStore.get(key);\n        \n        // Check if in blocked state\n        if (rateData.blocked && now < rateData.blockedUntil) {\n            return true;\n        }\n        \n        // Reset window if expired\n        if (now > rateData.resetTime) {\n            rateData.requests = 1;\n            rateData.resetTime = now + windowMs;\n            rateData.blocked = false;\n            return false;\n        }\n        \n        // Increment requests\n        rateData.requests++;\n        \n        // Check limits\n        const isStrictPath = this.config.rateLimit.strictPaths.includes(req.path);\n        const limit = isStrictPath ? this.config.rateLimit.strictLimit : this.config.rateLimit.maxRequests;\n        \n        if (rateData.requests > limit) {\n            rateData.blocked = true;\n            rateData.blockedUntil = now + this.config.rateLimit.blockDuration;\n            \n            logger.warn('Rate limit exceeded', {\n                ip: clientIP,\n                path: req.path,\n                requests: rateData.requests,\n                limit,\n                userAgent: req.get('User-Agent')\n            });\n            \n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Suspicious activity detection\n     */\n    detectSuspiciousActivity(req, clientIP) {\n        const key = `suspicious:${clientIP}`;\n        const now = Date.now();\n        const windowMs = 60 * 60 * 1000; // 1 hour\n        \n        if (!this.suspiciousActivityStore.has(key)) {\n            this.suspiciousActivityStore.set(key, {\n                score: 0,\n                events: [],\n                resetTime: now + windowMs\n            });\n        }\n        \n        const suspicious = this.suspiciousActivityStore.get(key);\n        \n        // Reset if window expired\n        if (now > suspicious.resetTime) {\n            suspicious.score = 0;\n            suspicious.events = [];\n            suspicious.resetTime = now + windowMs;\n        }\n        \n        // Check for suspicious patterns\n        let scoreIncrease = 0;\n        \n        // Multiple failed auth attempts\n        if (req.path.includes('/auth/') && req.method === 'POST') {\n            scoreIncrease += 2;\n        }\n        \n        // Unusual user agent\n        const userAgent = req.get('User-Agent');\n        if (!userAgent || userAgent.length < 10 || /bot|crawler|spider/i.test(userAgent)) {\n            scoreIncrease += 3;\n        }\n        \n        // Rapid requests\n        const recentEvents = suspicious.events.filter(event => now - event.timestamp < 60000);\n        if (recentEvents.length > 20) {\n            scoreIncrease += 5;\n        }\n        \n        // Update score\n        suspicious.score += scoreIncrease;\n        suspicious.events.push({\n            timestamp: now,\n            path: req.path,\n            method: req.method,\n            userAgent\n        });\n        \n        // Check threshold\n        if (suspicious.score > this.config.security.suspiciousThreshold) {\n            logger.warn('Suspicious activity detected', {\n                ip: clientIP,\n                score: suspicious.score,\n                events: suspicious.events.length,\n                userAgent\n            });\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Role-based access control\n     */\n    hasRequiredRole(user, requiredRoles) {\n        if (!user.roles || !Array.isArray(user.roles)) {\n            return false;\n        }\n        \n        const userRoles = user.roles.map(role => role.name || role);\n        return requiredRoles.some(role => userRoles.includes(role));\n    }\n\n    /**\n     * Permission-based access control\n     */\n    hasRequiredPermissions(user, requiredPermissions) {\n        if (!user.permissions || !Array.isArray(user.permissions)) {\n            return false;\n        }\n        \n        const userPermissions = user.permissions.map(perm => perm.name || perm);\n        return requiredPermissions.every(permission => userPermissions.includes(permission));\n    }\n\n    /**\n     * CORS handling\n     */\n    handleCORS(req, res) {\n        const origin = req.get('Origin');\n        const { allowedOrigins, allowedMethods, allowedHeaders, exposedHeaders, credentials, maxAge } = this.config.cors;\n        \n        // Check if origin is allowed\n        if (origin && (allowedOrigins.includes('*') || allowedOrigins.includes(origin))) {\n            res.header('Access-Control-Allow-Origin', origin);\n        }\n        \n        res.header('Access-Control-Allow-Methods', allowedMethods.join(', '));\n        res.header('Access-Control-Allow-Headers', allowedHeaders.join(', '));\n        res.header('Access-Control-Expose-Headers', exposedHeaders.join(', '));\n        res.header('Access-Control-Allow-Credentials', credentials);\n        res.header('Access-Control-Max-Age', maxAge);\n        \n        // Handle preflight requests\n        if (req.method === 'OPTIONS') {\n            res.status(200).end();\n            return true;\n        }\n        \n        return false;\n    }\n\n    /**\n     * Apply comprehensive security headers\n     */\n    applySecurityHeaders(req, res) {\n        // Basic security headers\n        res.header('X-Content-Type-Options', 'nosniff');\n        res.header('X-Frame-Options', 'DENY');\n        res.header('X-XSS-Protection', '1; mode=block');\n        res.header('Referrer-Policy', 'strict-origin-when-cross-origin');\n        res.header('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n        \n        // Content Security Policy\n        const csp = [\n            \"default-src 'self'\",\n            \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\",\n            \"style-src 'self' 'unsafe-inline'\",\n            \"img-src 'self' data: https:\",\n            \"font-src 'self'\",\n            \"connect-src 'self' https://api.alpaca.markets https://paper-api.alpaca.markets\",\n            \"frame-src 'none'\",\n            \"object-src 'none'\",\n            \"base-uri 'self'\"\n        ].join('; ');\n        \n        res.header('Content-Security-Policy', csp);\n        \n        // HSTS (only for HTTPS)\n        if (req.secure || req.get('X-Forwarded-Proto') === 'https') {\n            res.header('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\n        }\n    }\n\n    /**\n     * Utility methods\n     */\n    extractToken(req) {\n        const authHeader = req.get('Authorization');\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n            return authHeader.substring(7);\n        }\n        \n        // Check for token in cookies\n        const cookieToken = req.cookies?.token;\n        if (cookieToken) {\n            return cookieToken;\n        }\n        \n        return null;\n    }\n\n    getClientIP(req) {\n        // Check trusted proxy headers\n        const forwarded = req.get('X-Forwarded-For');\n        if (forwarded) {\n            const ips = forwarded.split(',').map(ip => ip.trim());\n            return ips[0];\n        }\n        \n        return req.get('X-Real-IP') || \n               req.get('X-Client-IP') || \n               req.connection?.remoteAddress || \n               req.socket?.remoteAddress ||\n               req.ip ||\n               'unknown';\n    }\n\n    generateCorrelationId() {\n        return crypto.randomUUID();\n    }\n\n    updateSessionActivity(sessionId, req) {\n        if (!sessionId) return;\n        \n        this.authService.updateSessionActivity(sessionId, {\n            lastActivity: new Date(),\n            ipAddress: req.clientIP,\n            userAgent: req.get('User-Agent'),\n            path: req.path,\n            method: req.method\n        }).catch(error => {\n            logger.error('Failed to update session activity', {\n                sessionId,\n                error: error.message\n            });\n        });\n    }\n\n    flagSuspiciousActivity(ip, type) {\n        const key = `suspicious:${ip}`;\n        const suspicious = this.suspiciousActivityStore.get(key);\n        if (suspicious) {\n            suspicious.score += 3;\n            suspicious.events.push({\n                timestamp: Date.now(),\n                type,\n                flagged: true\n            });\n        }\n    }\n\n    /**\n     * Error response methods\n     */\n    sendAuthError(res, message, correlationId, statusCode = 401) {\n        res.status(statusCode).json({\n            success: false,\n            error: message,\n            correlationId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    sendRateLimitError(res, correlationId) {\n        res.status(429).json({\n            success: false,\n            error: 'Rate limit exceeded',\n            correlationId,\n            timestamp: new Date().toISOString(),\n            retryAfter: Math.ceil(this.config.rateLimit.blockDuration / 1000)\n        });\n    }\n\n    sendSuspiciousActivityError(res, correlationId) {\n        res.status(403).json({\n            success: false,\n            error: 'Suspicious activity detected',\n            correlationId,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    sendMFARequired(res, correlationId) {\n        res.status(403).json({\n            success: false,\n            error: 'MFA verification required',\n            correlationId,\n            timestamp: new Date().toISOString(),\n            mfaRequired: true\n        });\n    }\n\n    /**\n     * Enhanced cleanup expired sessions and failed attempts\n     */\n    cleanup() {\n        const currentTime = Date.now();\n        let cleanedSessions = 0;\n        let cleanedAttempts = 0;\n        let cleanedDevices = 0;\n        let cleanedRateLimit = 0;\n        let cleanedSuspicious = 0;\n\n        // Clean expired sessions\n        for (const [sessionId, session] of this.sessionStore.entries()) {\n            if (currentTime - session.lastActive > this.sessionTimeout) {\n                this.sessionStore.delete(sessionId);\n                cleanedSessions++;\n            }\n        }\n\n        // Clean old failed attempts\n        for (const [identifier, attempts] of this.failedAttempts.entries()) {\n            if (attempts.lockedUntil > 0 && attempts.lockedUntil < currentTime) {\n                this.failedAttempts.delete(identifier);\n                cleanedAttempts++;\n            }\n        }\n\n        // Clean expired device trusts\n        for (const [fingerprint, deviceInfo] of this.deviceFingerprints.entries()) {\n            if (currentTime > deviceInfo.expiresAt) {\n                this.deviceFingerprints.delete(fingerprint);\n                cleanedDevices++;\n            }\n        }\n\n        // Clean up rate limit store\n        for (const [key, data] of this.rateLimitStore.entries()) {\n            if (currentTime > data.resetTime && !data.blocked) {\n                this.rateLimitStore.delete(key);\n                cleanedRateLimit++;\n            }\n        }\n\n        // Clean up suspicious activity store\n        for (const [key, data] of this.suspiciousActivityStore.entries()) {\n            if (currentTime > data.resetTime) {\n                this.suspiciousActivityStore.delete(key);\n                cleanedSuspicious++;\n            }\n        }\n\n        if (cleanedSessions + cleanedAttempts + cleanedDevices + cleanedRateLimit + cleanedSuspicious > 0) {\n            console.log(`🧹 Auth cleanup: ${cleanedSessions} sessions, ${cleanedAttempts} attempts, ${cleanedDevices} devices, ${cleanedRateLimit} rate limits, ${cleanedSuspicious} suspicious`);\n        }\n    }\n\n    /**\n     * Get authentication statistics\n     */\n    getStats() {\n        return {\n            activeSessions: this.sessionStore.size,\n            failedAttempts: this.failedAttempts.size,\n            trustedDevices: this.deviceFingerprints.size,\n            lockedAccounts: Array.from(this.failedAttempts.values())\n                .filter(attempt => attempt.lockedUntil > Date.now()).length\n        };\n    }\n\n    /**\n     * Revoke user sessions\n     */\n    revokeUserSessions(userId) {\n        let revokedCount = 0;\n        for (const [sessionId, session] of this.sessionStore.entries()) {\n            if (session.userId === userId) {\n                this.sessionStore.delete(sessionId);\n                revokedCount++;\n            }\n        }\n        console.log(`🔒 Revoked ${revokedCount} sessions for user ${userId}`);\n        return revokedCount;\n    }\n}\n\n// Factory functions for common middleware configurations\nconst createAuthMiddleware = (options = {}) => {\n    const middleware = new EnhancedAuthMiddleware();\n    return middleware.authenticate(options);\n};\n\nconst requireAuth = createAuthMiddleware({ required: true });\nconst requireMFA = createAuthMiddleware({ required: true, requireMFA: true });\nconst requireRole = (roles) => createAuthMiddleware({ required: true, roles });\nconst requirePermissions = (permissions) => createAuthMiddleware({ required: true, permissions });\n\n// Admin middleware\nconst requireAdmin = createAuthMiddleware({ \n    required: true, \n    roles: ['admin', 'super_admin'] \n});\n\n// API middleware\nconst requireApiAccess = createAuthMiddleware({\n    required: true,\n    permissions: ['api_access']\n});\n\n// Trading middleware\nconst requireTradingAccess = createAuthMiddleware({\n    required: true,\n    requireMFA: true,\n    permissions: ['trading_access']\n});\n\n// Legacy compatibility middleware\nconst createLegacyAuthMiddleware = (options = {}) => {\n    const middleware = new EnhancedAuthMiddleware();\n    return middleware.requireAuth(options);\n};\n\nmodule.exports = {\n    EnhancedAuthMiddleware,\n    createAuthMiddleware,\n    createLegacyAuthMiddleware,\n    requireAuth,\n    requireMFA,\n    requireRole,\n    requirePermissions,\n    requireAdmin,\n    requireApiAccess,\n    requireTradingAccess\n};"],"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","ignoreList":[]}