{"version":3,"names":["cov_19tkfpirf","actualCoverage","query","s","require","createLogger","AdvancedSignalProcessor","PortfolioOptimizationEngine","AutomatedTradingEngine","BacktestingEngine","MarketAnalyticsEngine","DashboardService","constructor","f","logger","correlationId","generateCorrelationId","signalProcessor","portfolioOptimizer","tradingEngine","backtestingEngine","marketAnalytics","Date","now","Math","random","toString","substr","generateDashboard","userId","dashboardType","b","startTime","info","dashboard","user","id","timestamp","toISOString","type","portfolio","generatePortfolioOverview","market","generateMarketOverview","signals","generateTradingSignals","performance","generatePerformanceAnalytics","risk","generateRiskManagement","automatedTrading","generateAutomatedTradingStatus","research","generateResearchAnalysis","alerts","generateAlertsNotifications","news","generateNewsEvents","watchlist","generateWatchlistAnalysis","processingTime","sectionsGenerated","Object","keys","length","success","metadata","error","message","createEmptyDashboardResponse","currentPortfolio","getCurrentPortfolio","portfolioMetrics","calculatePortfolioMetrics","optimizationSuggestions","getOptimizationSuggestions","performanceAttribution","calculatePerformanceAttribution","rebalancingRecommendations","getRebalancingRecommendations","holdings","metrics","optimization","attribution","rebalancing","summary","generatePortfolioSummary","generateMarketAnalytics","marketSentiment","volatilityAnalysis","sectorAnalysis","overview","analytics","sentiment","volatility","sectors","generateMarketSummary","watchlistSymbols","getWatchlistSymbols","watchlistSignals","Promise","all","map","symbol","signal","generateAdvancedSignals","warn","validSignals","filter","rankedSignals","sort","a","recommendation","confidence","topOpportunities","slice","signalSummary","generateSignalSummary","ranked","lastUpdated","portfolioPerformance","getPortfolioPerformance","performanceMetrics","calculatePerformanceMetrics","benchmarkComparison","getBenchmarkComparison","riskAdjustedReturns","calculateRiskAdjustedReturns","attributionAnalysis","getAttributionAnalysis","benchmark","riskAdjusted","generatePerformanceSummary","riskMetrics","calculateRiskMetrics","stressTestResults","getStressTestResults","varAnalysis","calculateVaRAnalysis","riskRecommendations","getRiskRecommendations","stressTests","var","recommendations","generateRiskSummary","tradingConfig","getTradingConfiguration","recentActivity","getRecentTradingActivity","strategyPerformance","getStrategyPerformance","pendingOrders","getPendingOrders","riskUtilization","getRiskUtilization","config","activity","orders","generateTradingSummary","researchReports","getResearchReports","earningsAnalysis","getEarningsAnalysis","technicalAnalysis","getTechnicalAnalysis","fundamentalAnalysis","getFundamentalAnalysis","reports","earnings","technical","fundamental","generateResearchSummary","activeAlerts","getActiveAlerts","recentNotifications","getRecentNotifications","priceAlerts","getPriceAlerts","newsAlerts","getNewsAlerts","active","recent","price","generateAlertsSummary","marketNews","getMarketNews","earningsCalendar","getEarningsCalendar","economicEvents","getEconomicEvents","personalizedNews","getPersonalizedNews","economic","personalized","generateNewsSummary","watchlistItems","getWatchlistItems","watchlistPerformance","getWatchlistPerformance","getWatchlistSignals","watchlistRecommendations","getWatchlistRecommendations","items","generateWatchlistSummary","portfolioQuery","result","rows","row","quantity","parseFloat","avgCost","avg_cost","currentPrice","current_price","marketValue","market_value","unrealizedPnl","unrealized_pnl","watchlistQuery","totalValue","reduce","sum","holding","totalCost","totalPnl","totalReturn","positionCount","averagePositionSize","largestPosition","max","p","concentrationRisk","calculateConcentrationRisk","weights","w","optimizationResult","optimizePortfolio","status","diversification","trend","buySignals","action","sellSignals","holdSignals","total","buy","sell","hold","averageConfidence","strongSignals","allocation","selection","interaction","returns","dates","sharpeRatio","maxDrawdown","alpha","beta","correlation","sharpe","sortino","calmar","technology","healthcare","styles","growth","value","outlook","expectedShortfall","marketCrash","interestRateShock","inflationShock","var_95","var_99","level","profile","enabled","riskTolerance","maxPositions","momentum","meanReversion","pairs","used","available","daily","title","author","rating","upcoming","surprises","revisions","bullish","bearish","neutral","overvalued","undervalued","fairly_valued","positive","negative","condition","target","time","priority","triggered","pending","source","date","estimate","event","impact","relevance","change","reason","winners","losers","module","exports"],"sources":["dashboardService.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\nconst AdvancedSignalProcessor = require('./advancedSignalProcessor');\nconst PortfolioOptimizationEngine = require('./portfolioOptimizationEngine');\nconst AutomatedTradingEngine = require('./automatedTradingEngine');\nconst BacktestingEngine = require('./backtestingEngine');\nconst MarketAnalyticsEngine = require('./marketAnalyticsEngine');\n\nclass DashboardService {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'dashboard-service');\n    this.correlationId = this.generateCorrelationId();\n    \n    // Initialize all engines\n    this.signalProcessor = new AdvancedSignalProcessor();\n    this.portfolioOptimizer = new PortfolioOptimizationEngine();\n    this.tradingEngine = new AutomatedTradingEngine();\n    this.backtestingEngine = new BacktestingEngine();\n    this.marketAnalytics = new MarketAnalyticsEngine();\n  }\n\n  generateCorrelationId() {\n    return `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate comprehensive dashboard data\n   */\n  async generateDashboard(userId, dashboardType = 'comprehensive') {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info('Starting dashboard generation', {\n        userId,\n        dashboardType,\n        correlationId: this.correlationId\n      });\n\n      const dashboard = {\n        user: { id: userId },\n        timestamp: new Date().toISOString(),\n        type: dashboardType\n      };\n\n      // Portfolio Overview\n      if (dashboardType === 'comprehensive' || dashboardType === 'portfolio') {\n        dashboard.portfolio = await this.generatePortfolioOverview(userId);\n      }\n\n      // Market Overview\n      if (dashboardType === 'comprehensive' || dashboardType === 'market') {\n        dashboard.market = await this.generateMarketOverview();\n      }\n\n      // Trading Signals\n      if (dashboardType === 'comprehensive' || dashboardType === 'signals') {\n        dashboard.signals = await this.generateTradingSignals(userId);\n      }\n\n      // Performance Analytics\n      if (dashboardType === 'comprehensive' || dashboardType === 'performance') {\n        dashboard.performance = await this.generatePerformanceAnalytics(userId);\n      }\n\n      // Risk Management\n      if (dashboardType === 'comprehensive' || dashboardType === 'risk') {\n        dashboard.risk = await this.generateRiskManagement(userId);\n      }\n\n      // Automated Trading Status\n      if (dashboardType === 'comprehensive' || dashboardType === 'trading') {\n        dashboard.automatedTrading = await this.generateAutomatedTradingStatus(userId);\n      }\n\n      // Research & Analysis\n      if (dashboardType === 'comprehensive' || dashboardType === 'research') {\n        dashboard.research = await this.generateResearchAnalysis(userId);\n      }\n\n      // Alerts & Notifications\n      if (dashboardType === 'comprehensive' || dashboardType === 'alerts') {\n        dashboard.alerts = await this.generateAlertsNotifications(userId);\n      }\n\n      // News & Events\n      if (dashboardType === 'comprehensive' || dashboardType === 'news') {\n        dashboard.news = await this.generateNewsEvents(userId);\n      }\n\n      // Watchlist Analysis\n      if (dashboardType === 'comprehensive' || dashboardType === 'watchlist') {\n        dashboard.watchlist = await this.generateWatchlistAnalysis(userId);\n      }\n\n      const processingTime = Date.now() - startTime;\n      \n      this.logger.info('Dashboard generation completed', {\n        userId,\n        dashboardType,\n        sectionsGenerated: Object.keys(dashboard).length - 3, // Exclude user, timestamp, type\n        processingTime,\n        correlationId: this.correlationId\n      });\n\n      return {\n        success: true,\n        dashboard,\n        metadata: {\n          processingTime,\n          correlationId: this.correlationId,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Dashboard generation failed', {\n        userId,\n        dashboardType,\n        error: error.message,\n        correlationId: this.correlationId,\n        processingTime: Date.now() - startTime\n      });\n      \n      return this.createEmptyDashboardResponse(error.message);\n    }\n  }\n\n  /**\n   * Generate portfolio overview section\n   */\n  async generatePortfolioOverview(userId) {\n    try {\n      // Get current portfolio\n      const currentPortfolio = await this.getCurrentPortfolio(userId);\n      \n      // Calculate portfolio metrics\n      const portfolioMetrics = await this.calculatePortfolioMetrics(currentPortfolio);\n      \n      // Get portfolio optimization suggestions\n      const optimizationSuggestions = await this.getOptimizationSuggestions(userId, currentPortfolio);\n      \n      // Calculate performance attribution\n      const performanceAttribution = await this.calculatePerformanceAttribution(currentPortfolio);\n      \n      // Get rebalancing recommendations\n      const rebalancingRecommendations = await this.getRebalancingRecommendations(userId, currentPortfolio);\n      \n      return {\n        holdings: currentPortfolio,\n        metrics: portfolioMetrics,\n        optimization: optimizationSuggestions,\n        attribution: performanceAttribution,\n        rebalancing: rebalancingRecommendations,\n        summary: this.generatePortfolioSummary(portfolioMetrics, optimizationSuggestions)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate portfolio overview', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate market overview section\n   */\n  async generateMarketOverview() {\n    try {\n      // Get comprehensive market analytics\n      const marketAnalytics = await this.marketAnalytics.generateMarketAnalytics('overview');\n      \n      // Get market sentiment\n      const marketSentiment = await this.marketAnalytics.generateMarketAnalytics('sentiment');\n      \n      // Get volatility analysis\n      const volatilityAnalysis = await this.marketAnalytics.generateMarketAnalytics('volatility');\n      \n      // Get sector analysis\n      const sectorAnalysis = await this.marketAnalytics.generateMarketAnalytics('sector');\n      \n      return {\n        overview: marketAnalytics.success ? marketAnalytics.analytics : null,\n        sentiment: marketSentiment.success ? marketSentiment.analytics : null,\n        volatility: volatilityAnalysis.success ? volatilityAnalysis.analytics : null,\n        sectors: sectorAnalysis.success ? sectorAnalysis.analytics : null,\n        summary: this.generateMarketSummary(marketAnalytics, marketSentiment, volatilityAnalysis)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate market overview', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate trading signals section\n   */\n  async generateTradingSignals(userId) {\n    try {\n      // Get watchlist symbols\n      const watchlistSymbols = await this.getWatchlistSymbols(userId);\n      \n      // Generate signals for watchlist\n      const watchlistSignals = await Promise.all(\n        watchlistSymbols.map(async (symbol) => {\n          try {\n            const signal = await this.signalProcessor.generateAdvancedSignals(symbol);\n            return { symbol, ...signal };\n          } catch (error) {\n            this.logger.warn('Failed to generate signal for symbol', {\n              symbol,\n              error: error.message,\n              correlationId: this.correlationId\n            });\n            return null;\n          }\n        })\n      );\n      \n      // Filter successful signals\n      const validSignals = watchlistSignals.filter(signal => signal !== null);\n      \n      // Rank signals by strength\n      const rankedSignals = validSignals.sort((a, b) => \n        (b.recommendation?.confidence || 0) - (a.recommendation?.confidence || 0)\n      );\n      \n      // Get top opportunities\n      const topOpportunities = rankedSignals.slice(0, 10);\n      \n      // Generate signal summary\n      const signalSummary = this.generateSignalSummary(validSignals);\n      \n      return {\n        all: validSignals,\n        ranked: rankedSignals,\n        topOpportunities,\n        summary: signalSummary,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate trading signals', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate performance analytics section\n   */\n  async generatePerformanceAnalytics(userId) {\n    try {\n      // Get portfolio performance data\n      const portfolioPerformance = await this.getPortfolioPerformance(userId);\n      \n      // Calculate performance metrics\n      const performanceMetrics = await this.calculatePerformanceMetrics(portfolioPerformance);\n      \n      // Get benchmark comparison\n      const benchmarkComparison = await this.getBenchmarkComparison(userId, portfolioPerformance);\n      \n      // Calculate risk-adjusted returns\n      const riskAdjustedReturns = await this.calculateRiskAdjustedReturns(portfolioPerformance);\n      \n      // Get attribution analysis\n      const attributionAnalysis = await this.getAttributionAnalysis(userId, portfolioPerformance);\n      \n      return {\n        performance: portfolioPerformance,\n        metrics: performanceMetrics,\n        benchmark: benchmarkComparison,\n        riskAdjusted: riskAdjustedReturns,\n        attribution: attributionAnalysis,\n        summary: this.generatePerformanceSummary(performanceMetrics, benchmarkComparison)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate performance analytics', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate risk management section\n   */\n  async generateRiskManagement(userId) {\n    try {\n      // Get current portfolio\n      const currentPortfolio = await this.getCurrentPortfolio(userId);\n      \n      // Calculate risk metrics\n      const riskMetrics = await this.calculateRiskMetrics(currentPortfolio);\n      \n      // Get stress test results\n      const stressTestResults = await this.getStressTestResults(currentPortfolio);\n      \n      // Calculate VaR and Expected Shortfall\n      const varAnalysis = await this.calculateVaRAnalysis(currentPortfolio);\n      \n      // Get risk recommendations\n      const riskRecommendations = await this.getRiskRecommendations(userId, riskMetrics);\n      \n      return {\n        metrics: riskMetrics,\n        stressTests: stressTestResults,\n        var: varAnalysis,\n        recommendations: riskRecommendations,\n        summary: this.generateRiskSummary(riskMetrics, stressTestResults)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate risk management', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate automated trading status section\n   */\n  async generateAutomatedTradingStatus(userId) {\n    try {\n      // Get automated trading configuration\n      const tradingConfig = await this.getTradingConfiguration(userId);\n      \n      // Get recent trading activity\n      const recentActivity = await this.getRecentTradingActivity(userId);\n      \n      // Get performance of automated strategies\n      const strategyPerformance = await this.getStrategyPerformance(userId);\n      \n      // Get pending orders\n      const pendingOrders = await this.getPendingOrders(userId);\n      \n      // Get risk utilization\n      const riskUtilization = await this.getRiskUtilization(userId);\n      \n      return {\n        config: tradingConfig,\n        activity: recentActivity,\n        performance: strategyPerformance,\n        orders: pendingOrders,\n        risk: riskUtilization,\n        summary: this.generateTradingSummary(tradingConfig, recentActivity, strategyPerformance)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate automated trading status', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate research analysis section\n   */\n  async generateResearchAnalysis(userId) {\n    try {\n      // Get research reports\n      const researchReports = await this.getResearchReports(userId);\n      \n      // Get earnings analysis\n      const earningsAnalysis = await this.getEarningsAnalysis(userId);\n      \n      // Get technical analysis\n      const technicalAnalysis = await this.getTechnicalAnalysis(userId);\n      \n      // Get fundamental analysis\n      const fundamentalAnalysis = await this.getFundamentalAnalysis(userId);\n      \n      return {\n        reports: researchReports,\n        earnings: earningsAnalysis,\n        technical: technicalAnalysis,\n        fundamental: fundamentalAnalysis,\n        summary: this.generateResearchSummary(researchReports, earningsAnalysis)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate research analysis', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate alerts and notifications section\n   */\n  async generateAlertsNotifications(userId) {\n    try {\n      // Get active alerts\n      const activeAlerts = await this.getActiveAlerts(userId);\n      \n      // Get recent notifications\n      const recentNotifications = await this.getRecentNotifications(userId);\n      \n      // Get price alerts\n      const priceAlerts = await this.getPriceAlerts(userId);\n      \n      // Get news alerts\n      const newsAlerts = await this.getNewsAlerts(userId);\n      \n      return {\n        active: activeAlerts,\n        recent: recentNotifications,\n        price: priceAlerts,\n        news: newsAlerts,\n        summary: this.generateAlertsSummary(activeAlerts, recentNotifications)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate alerts notifications', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate news and events section\n   */\n  async generateNewsEvents(userId) {\n    try {\n      // Get market news\n      const marketNews = await this.getMarketNews();\n      \n      // Get earnings calendar\n      const earningsCalendar = await this.getEarningsCalendar(userId);\n      \n      // Get economic events\n      const economicEvents = await this.getEconomicEvents();\n      \n      // Get personalized news\n      const personalizedNews = await this.getPersonalizedNews(userId);\n      \n      return {\n        market: marketNews,\n        earnings: earningsCalendar,\n        economic: economicEvents,\n        personalized: personalizedNews,\n        summary: this.generateNewsSummary(marketNews, earningsCalendar, economicEvents)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate news events', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Generate watchlist analysis section\n   */\n  async generateWatchlistAnalysis(userId) {\n    try {\n      // Get watchlist items\n      const watchlistItems = await this.getWatchlistItems(userId);\n      \n      // Get watchlist performance\n      const watchlistPerformance = await this.getWatchlistPerformance(userId);\n      \n      // Get watchlist signals\n      const watchlistSignals = await this.getWatchlistSignals(userId);\n      \n      // Get watchlist recommendations\n      const watchlistRecommendations = await this.getWatchlistRecommendations(userId);\n      \n      return {\n        items: watchlistItems,\n        performance: watchlistPerformance,\n        signals: watchlistSignals,\n        recommendations: watchlistRecommendations,\n        summary: this.generateWatchlistSummary(watchlistItems, watchlistPerformance)\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate watchlist analysis', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  // Helper methods (simplified implementations)\n  async getCurrentPortfolio(userId) {\n    const portfolioQuery = `\n      SELECT \n        symbol,\n        quantity,\n        avg_cost,\n        current_price,\n        market_value,\n        unrealized_pnl,\n        created_at,\n        updated_at\n      FROM portfolio_holdings\n      WHERE user_id = $1\n        AND quantity > 0\n      ORDER BY market_value DESC\n    `;\n\n    try {\n      const result = await query(portfolioQuery, [userId]);\n      return result.rows.map(row => ({\n        ...row,\n        quantity: parseFloat(row.quantity),\n        avgCost: parseFloat(row.avg_cost),\n        currentPrice: parseFloat(row.current_price),\n        marketValue: parseFloat(row.market_value),\n        unrealizedPnl: parseFloat(row.unrealized_pnl)\n      }));\n    } catch (error) {\n      this.logger.error('Failed to fetch current portfolio', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  async getWatchlistSymbols(userId) {\n    const watchlistQuery = `\n      SELECT DISTINCT symbol \n      FROM watchlist \n      WHERE user_id = $1\n      ORDER BY symbol\n    `;\n\n    try {\n      const result = await query(watchlistQuery, [userId]);\n      return result.rows.map(row => row.symbol);\n    } catch (error) {\n      this.logger.error('Failed to fetch watchlist symbols', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  async calculatePortfolioMetrics(portfolio) {\n    const totalValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n    const totalCost = portfolio.reduce((sum, holding) => sum + (holding.quantity * holding.avgCost), 0);\n    const totalPnl = portfolio.reduce((sum, holding) => sum + holding.unrealizedPnl, 0);\n    \n    return {\n      totalValue,\n      totalCost,\n      totalPnl,\n      totalReturn: totalCost > 0 ? totalPnl / totalCost : 0,\n      positionCount: portfolio.length,\n      averagePositionSize: totalValue / portfolio.length,\n      largestPosition: Math.max(...portfolio.map(p => p.marketValue)),\n      concentrationRisk: this.calculateConcentrationRisk(portfolio)\n    };\n  }\n\n  calculateConcentrationRisk(portfolio) {\n    const totalValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n    const weights = portfolio.map(holding => holding.marketValue / totalValue);\n    return weights.reduce((sum, w) => sum + w * w, 0); // Herfindahl index\n  }\n\n  async getOptimizationSuggestions(userId, portfolio) {\n    try {\n      const optimizationResult = await this.portfolioOptimizer.optimizePortfolio(portfolio, userId);\n      return optimizationResult.success ? optimizationResult.optimization : null;\n    } catch (error) {\n      this.logger.error('Failed to get optimization suggestions', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  async getRebalancingRecommendations(userId, portfolio) {\n    try {\n      const optimizationResult = await this.portfolioOptimizer.optimizePortfolio(portfolio, userId);\n      return optimizationResult.success ? optimizationResult.rebalancing : [];\n    } catch (error) {\n      this.logger.error('Failed to get rebalancing recommendations', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  generatePortfolioSummary(metrics, optimization) {\n    return {\n      status: metrics.totalReturn > 0 ? 'positive' : 'negative',\n      risk: metrics.concentrationRisk > 0.3 ? 'high' : 'moderate',\n      diversification: metrics.positionCount > 10 ? 'good' : 'needs_improvement',\n      recommendation: optimization ? 'rebalance_suggested' : 'maintain_current'\n    };\n  }\n\n  generateMarketSummary(analytics, sentiment, volatility) {\n    return {\n      trend: 'upward',\n      sentiment: sentiment?.success ? 'neutral' : 'unknown',\n      volatility: volatility?.success ? 'moderate' : 'unknown',\n      recommendation: 'cautious_optimism'\n    };\n  }\n\n  generateSignalSummary(signals) {\n    const buySignals = signals.filter(s => s.recommendation?.action === 'buy').length;\n    const sellSignals = signals.filter(s => s.recommendation?.action === 'sell').length;\n    const holdSignals = signals.filter(s => s.recommendation?.action === 'hold').length;\n    \n    return {\n      total: signals.length,\n      buy: buySignals,\n      sell: sellSignals,\n      hold: holdSignals,\n      averageConfidence: signals.reduce((sum, s) => sum + (s.recommendation?.confidence || 0), 0) / signals.length,\n      strongSignals: signals.filter(s => (s.recommendation?.confidence || 0) > 0.7).length\n    };\n  }\n\n  // Additional simplified helper methods\n  async calculatePerformanceAttribution(portfolio) { return { allocation: 0.02, selection: 0.01, interaction: 0.005 }; }\n  async getPortfolioPerformance(userId) { return { returns: [0.01, 0.02, -0.01, 0.03], dates: ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04'] }; }\n  async calculatePerformanceMetrics(performance) { return { totalReturn: 0.15, volatility: 0.20, sharpeRatio: 0.75, maxDrawdown: 0.08 }; }\n  async getBenchmarkComparison(userId, performance) { return { alpha: 0.02, beta: 1.1, correlation: 0.85 }; }\n  async calculateRiskAdjustedReturns(performance) { return { sharpe: 0.75, sortino: 0.85, calmar: 0.65 }; }\n  async getAttributionAnalysis(userId, performance) { return { sectors: { technology: 0.05, healthcare: 0.02 }, styles: { growth: 0.03, value: 0.01 } }; }\n  generatePerformanceSummary(metrics, benchmark) { return { performance: 'outperforming', risk: 'moderate', outlook: 'positive' }; }\n  \n  async calculateRiskMetrics(portfolio) { return { var: 0.025, expectedShortfall: 0.035, beta: 1.2, correlation: 0.85 }; }\n  async getStressTestResults(portfolio) { return { marketCrash: -0.20, interestRateShock: -0.05, inflationShock: -0.03 }; }\n  async calculateVaRAnalysis(portfolio) { return { var_95: 0.025, var_99: 0.045, expectedShortfall: 0.055 }; }\n  async getRiskRecommendations(userId, metrics) { return [{ type: 'diversification', message: 'Consider adding more sectors' }]; }\n  generateRiskSummary(metrics, stressTests) { return { level: 'moderate', profile: 'balanced', recommendation: 'maintain_current' }; }\n  \n  async getTradingConfiguration(userId) { return { enabled: true, riskTolerance: 0.05, maxPositions: 20 }; }\n  async getRecentTradingActivity(userId) { return [{ symbol: 'AAPL', action: 'buy', quantity: 100, price: 150 }]; }\n  async getStrategyPerformance(userId) { return { momentum: 0.12, meanReversion: 0.08, pairs: 0.06 }; }\n  async getPendingOrders(userId) { return [{ symbol: 'MSFT', action: 'buy', quantity: 50, price: 300 }]; }\n  async getRiskUtilization(userId) { return { used: 0.60, available: 0.40, daily: 0.02 }; }\n  generateTradingSummary(config, activity, performance) { return { status: 'active', performance: 'good', risk: 'managed' }; }\n  \n  async getResearchReports(userId) { return [{ title: 'Tech Outlook', author: 'Analyst', rating: 'buy' }]; }\n  async getEarningsAnalysis(userId) { return { upcoming: 5, surprises: 3, revisions: 2 }; }\n  async getTechnicalAnalysis(userId) { return { bullish: 6, bearish: 2, neutral: 4 }; }\n  async getFundamentalAnalysis(userId) { return { overvalued: 3, undervalued: 7, fairly_valued: 2 }; }\n  generateResearchSummary(reports, earnings) { return { total: 12, positive: 8, negative: 2, neutral: 2 }; }\n  \n  async getActiveAlerts(userId) { return [{ type: 'price', symbol: 'AAPL', condition: 'above', target: 160 }]; }\n  async getRecentNotifications(userId) { return [{ message: 'AAPL reached target price', time: '2024-01-01T10:00:00Z' }]; }\n  async getPriceAlerts(userId) { return [{ symbol: 'MSFT', type: 'stop_loss', price: 280 }]; }\n  async getNewsAlerts(userId) { return [{ title: 'Apple earnings beat', priority: 'high' }]; }\n  generateAlertsSummary(active, recent) { return { active: 5, triggered: 3, pending: 2 }; }\n  \n  async getMarketNews() { return [{ title: 'Market rally continues', source: 'Reuters', time: '2024-01-01T09:00:00Z' }]; }\n  async getEarningsCalendar(userId) { return [{ symbol: 'AAPL', date: '2024-01-15', estimate: 1.25 }]; }\n  async getEconomicEvents() { return [{ event: 'Fed Meeting', date: '2024-01-20', impact: 'high' }]; }\n  async getPersonalizedNews(userId) { return [{ title: 'Tech sector outlook', relevance: 'high' }]; }\n  generateNewsSummary(market, earnings, economic) { return { market: 10, earnings: 5, economic: 3 }; }\n  \n  async getWatchlistItems(userId) { return [{ symbol: 'AAPL', price: 150, change: 0.02 }]; }\n  async getWatchlistPerformance(userId) { return { total: 12, positive: 8, negative: 4 }; }\n  async getWatchlistSignals(userId) { return [{ symbol: 'AAPL', signal: 'buy', confidence: 0.8 }]; }\n  async getWatchlistRecommendations(userId) { return [{ symbol: 'MSFT', action: 'add', reason: 'strong_fundamentals' }]; }\n  generateWatchlistSummary(items, performance) { return { total: 12, winners: 8, losers: 4 }; }\n\n  createEmptyDashboardResponse(message) {\n    return {\n      success: false,\n      message,\n      dashboard: null,\n      metadata: {\n        correlationId: this.correlationId,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n}\n\nmodule.exports = DashboardService;"],"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","ignoreList":[]}