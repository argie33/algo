{"version":3,"names":["cov_2lxx0ue4in","actualCoverage","query","s","require","createLogger","AdvancedSignalProcessor","PortfolioOptimizationEngine","AutomatedTradingEngine","constructor","f","logger","correlationId","generateCorrelationId","signalProcessor","portfolioOptimizer","config","maxPositions","maxPositionSize","riskTolerance","rebalanceThreshold","stopLossThreshold","takeProfitThreshold","minSignalStrength","maxDailyTrades","tradingState","dailyTradeCount","lastRebalance","activeOrders","Map","riskMetrics","Date","now","Math","random","toString","substr","executeAutomatedStrategy","userId","preferences","b","startTime","info","currentPortfolio","getCurrentPortfolio","marketSignals","getMarketSignals","portfolioAnalysis","analyzePortfolioHealth","tradingDecisions","generateTradingDecisions","riskManagedDecisions","applyRiskManagement","executionPlan","generateExecutionPlan","updateTradingState","processingTime","decisionsGenerated","length","orders","success","portfolio","signals","analysis","decisions","metadata","timestamp","toISOString","error","message","createEmptyTradingResponse","portfolioQuery","result","rows","map","row","quantity","parseFloat","avgCost","avg_cost","currentPrice","current_price","marketValue","market_value","unrealizedPnl","unrealized_pnl","watchlistQuery","watchlistResult","symbols","symbol","Promise","all","signalData","generateAdvancedSignals","warn","filter","signal","health","riskLevel","recommendations","totalValue","reduce","sum","holding","totalUnrealizedPnl","portfolioReturn","concentrationRisk","calculateConcentrationRisk","sectorConcentration","calculateSectorConcentration","assessRiskLevel","generatePortfolioRecommendations","needsRebalancing","stopLossAlerts","checkStopLossAlerts","takeProfitAlerts","checkTakeProfitAlerts","buySignals","recommendation","action","confidence","decision","evaluateBuyDecision","push","sellSignals","evaluateSellDecision","rebalanceDecisions","generateRebalancingDecisions","stopLossDecisions","generateStopLossDecisions","takeProfitDecisions","generateTakeProfitDecisions","sort","a","priority","totalPortfolioValue","dailyRiskBudget","positionValue","price","positionPercent","adjustedQuantity","floor","rationale","decisionRisk","calculateDecisionRisk","remainingBudget","portfolioChanges","order","orderType","stopLoss","takeProfit","portfolioChange","calculatePortfolioChange","summary","totalOrders","buyOrders","o","sellOrders","estimatedValue","expectedRiskReduction","calculateExpectedRiskReduction","expectedReturn","calculateExpectedReturn","weights","w","sectors","sector","loss","gain","existingPosition","find","p","value","impact","module","exports"],"sources":["automatedTradingEngine.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\nconst AdvancedSignalProcessor = require('./advancedSignalProcessor');\nconst PortfolioOptimizationEngine = require('./portfolioOptimizationEngine');\n\nclass AutomatedTradingEngine {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'automated-trading');\n    this.correlationId = this.generateCorrelationId();\n    this.signalProcessor = new AdvancedSignalProcessor();\n    this.portfolioOptimizer = new PortfolioOptimizationEngine();\n    \n    // Trading parameters\n    this.config = {\n      maxPositions: 20,\n      maxPositionSize: 0.1, // 10% max per position\n      riskTolerance: 0.05, // 5% portfolio risk\n      rebalanceThreshold: 0.05, // 5% drift threshold\n      stopLossThreshold: 0.08, // 8% stop loss\n      takeProfitThreshold: 0.15, // 15% take profit\n      minSignalStrength: 0.6, // Minimum signal confidence\n      maxDailyTrades: 5\n    };\n    \n    this.tradingState = {\n      dailyTradeCount: 0,\n      lastRebalance: null,\n      activeOrders: new Map(),\n      riskMetrics: {}\n    };\n  }\n\n  generateCorrelationId() {\n    return `auto-trade-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Execute automated trading strategy\n   */\n  async executeAutomatedStrategy(userId, preferences = {}) {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info('Starting automated trading execution', {\n        userId,\n        preferences,\n        correlationId: this.correlationId\n      });\n\n      // Get current portfolio\n      const currentPortfolio = await this.getCurrentPortfolio(userId);\n      \n      // Get market signals\n      const marketSignals = await this.getMarketSignals(userId);\n      \n      // Analyze portfolio health\n      const portfolioAnalysis = await this.analyzePortfolioHealth(currentPortfolio, userId);\n      \n      // Generate trading decisions\n      const tradingDecisions = await this.generateTradingDecisions(\n        currentPortfolio,\n        marketSignals,\n        portfolioAnalysis,\n        preferences\n      );\n      \n      // Execute risk management\n      const riskManagedDecisions = await this.applyRiskManagement(\n        tradingDecisions,\n        currentPortfolio,\n        userId\n      );\n      \n      // Generate execution plan\n      const executionPlan = await this.generateExecutionPlan(\n        riskManagedDecisions,\n        currentPortfolio,\n        userId\n      );\n      \n      // Update trading state\n      this.updateTradingState(executionPlan);\n      \n      const processingTime = Date.now() - startTime;\n      \n      this.logger.info('Automated trading execution completed', {\n        userId,\n        decisionsGenerated: tradingDecisions.length,\n        riskManagedDecisions: riskManagedDecisions.length,\n        executionPlan: executionPlan.orders.length,\n        processingTime,\n        correlationId: this.correlationId\n      });\n\n      return {\n        success: true,\n        portfolio: currentPortfolio,\n        signals: marketSignals,\n        analysis: portfolioAnalysis,\n        decisions: riskManagedDecisions,\n        executionPlan: executionPlan,\n        riskMetrics: this.tradingState.riskMetrics,\n        metadata: {\n          processingTime,\n          correlationId: this.correlationId,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Automated trading execution failed', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId,\n        processingTime: Date.now() - startTime\n      });\n      \n      return this.createEmptyTradingResponse(error.message);\n    }\n  }\n\n  /**\n   * Get current portfolio holdings\n   */\n  async getCurrentPortfolio(userId) {\n    const portfolioQuery = `\n      SELECT \n        symbol,\n        quantity,\n        avg_cost,\n        current_price,\n        market_value,\n        unrealized_pnl,\n        created_at,\n        updated_at\n      FROM portfolio_holdings\n      WHERE user_id = $1\n        AND quantity > 0\n      ORDER BY market_value DESC\n    `;\n\n    try {\n      const result = await query(portfolioQuery, [userId]);\n      return result.rows.map(row => ({\n        ...row,\n        quantity: parseFloat(row.quantity),\n        avgCost: parseFloat(row.avg_cost),\n        currentPrice: parseFloat(row.current_price),\n        marketValue: parseFloat(row.market_value),\n        unrealizedPnl: parseFloat(row.unrealized_pnl)\n      }));\n    } catch (error) {\n      this.logger.error('Failed to fetch current portfolio', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Get market signals for watchlist and portfolio\n   */\n  async getMarketSignals(userId) {\n    try {\n      // Get watchlist symbols\n      const watchlistQuery = `\n        SELECT DISTINCT symbol \n        FROM watchlist \n        WHERE user_id = $1\n        UNION\n        SELECT DISTINCT symbol \n        FROM portfolio_holdings \n        WHERE user_id = $1 AND quantity > 0\n      `;\n      \n      const watchlistResult = await query(watchlistQuery, [userId]);\n      const symbols = watchlistResult.rows.map(row => row.symbol);\n      \n      // Generate signals for each symbol\n      const signals = await Promise.all(\n        symbols.map(async (symbol) => {\n          try {\n            const signalData = await this.signalProcessor.generateAdvancedSignals(symbol);\n            return {\n              symbol,\n              ...signalData\n            };\n          } catch (error) {\n            this.logger.warn('Failed to generate signal for symbol', {\n              symbol,\n              error: error.message,\n              correlationId: this.correlationId\n            });\n            return null;\n          }\n        })\n      );\n      \n      return signals.filter(signal => signal !== null);\n    } catch (error) {\n      this.logger.error('Failed to get market signals', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Analyze portfolio health and risk metrics\n   */\n  async analyzePortfolioHealth(portfolio, userId) {\n    if (!portfolio || portfolio.length === 0) {\n      return {\n        health: 'empty',\n        riskLevel: 'low',\n        recommendations: ['Start building your portfolio with diversified positions']\n      };\n    }\n\n    try {\n      // Calculate portfolio metrics\n      const totalValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n      const totalUnrealizedPnl = portfolio.reduce((sum, holding) => sum + holding.unrealizedPnl, 0);\n      const portfolioReturn = totalValue > 0 ? totalUnrealizedPnl / totalValue : 0;\n      \n      // Calculate concentration risk\n      const concentrationRisk = this.calculateConcentrationRisk(portfolio);\n      \n      // Calculate sector concentration\n      const sectorConcentration = await this.calculateSectorConcentration(portfolio);\n      \n      // Risk assessment\n      const riskLevel = this.assessRiskLevel(concentrationRisk, sectorConcentration, portfolioReturn);\n      \n      // Generate recommendations\n      const recommendations = this.generatePortfolioRecommendations(\n        portfolio,\n        concentrationRisk,\n        sectorConcentration,\n        riskLevel\n      );\n\n      return {\n        health: riskLevel,\n        totalValue,\n        totalUnrealizedPnl,\n        portfolioReturn,\n        concentrationRisk,\n        sectorConcentration,\n        riskLevel,\n        recommendations,\n        needsRebalancing: this.needsRebalancing(portfolio),\n        stopLossAlerts: this.checkStopLossAlerts(portfolio),\n        takeProfitAlerts: this.checkTakeProfitAlerts(portfolio)\n      };\n    } catch (error) {\n      this.logger.error('Failed to analyze portfolio health', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return {\n        health: 'unknown',\n        riskLevel: 'unknown',\n        recommendations: ['Unable to analyze portfolio health']\n      };\n    }\n  }\n\n  /**\n   * Generate trading decisions based on signals and portfolio analysis\n   */\n  async generateTradingDecisions(portfolio, signals, portfolioAnalysis, preferences) {\n    const decisions = [];\n    \n    try {\n      // Process buy signals\n      const buySignals = signals.filter(signal => \n        signal.recommendation?.action === 'buy' && \n        signal.recommendation?.confidence >= this.config.minSignalStrength\n      );\n      \n      for (const signal of buySignals) {\n        const decision = await this.evaluateBuyDecision(signal, portfolio, portfolioAnalysis);\n        if (decision) {\n          decisions.push(decision);\n        }\n      }\n      \n      // Process sell signals\n      const sellSignals = signals.filter(signal => \n        signal.recommendation?.action === 'sell' && \n        signal.recommendation?.confidence >= this.config.minSignalStrength\n      );\n      \n      for (const signal of sellSignals) {\n        const decision = await this.evaluateSellDecision(signal, portfolio, portfolioAnalysis);\n        if (decision) {\n          decisions.push(decision);\n        }\n      }\n      \n      // Process rebalancing needs\n      if (portfolioAnalysis.needsRebalancing) {\n        const rebalanceDecisions = await this.generateRebalancingDecisions(portfolio, signals);\n        decisions.push(...rebalanceDecisions);\n      }\n      \n      // Process stop loss alerts\n      if (portfolioAnalysis.stopLossAlerts?.length > 0) {\n        const stopLossDecisions = this.generateStopLossDecisions(portfolioAnalysis.stopLossAlerts);\n        decisions.push(...stopLossDecisions);\n      }\n      \n      // Process take profit alerts\n      if (portfolioAnalysis.takeProfitAlerts?.length > 0) {\n        const takeProfitDecisions = this.generateTakeProfitDecisions(portfolioAnalysis.takeProfitAlerts);\n        decisions.push(...takeProfitDecisions);\n      }\n      \n      return decisions.sort((a, b) => b.priority - a.priority);\n    } catch (error) {\n      this.logger.error('Failed to generate trading decisions', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Apply risk management rules to trading decisions\n   */\n  async applyRiskManagement(decisions, portfolio, userId) {\n    const riskManagedDecisions = [];\n    \n    try {\n      const totalPortfolioValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n      let dailyRiskBudget = totalPortfolioValue * this.config.riskTolerance;\n      \n      for (const decision of decisions) {\n        // Check daily trade limit\n        if (this.tradingState.dailyTradeCount >= this.config.maxDailyTrades) {\n          this.logger.warn('Daily trade limit reached', {\n            userId,\n            dailyTradeCount: this.tradingState.dailyTradeCount,\n            correlationId: this.correlationId\n          });\n          break;\n        }\n        \n        // Check position size limits\n        if (decision.action === 'buy') {\n          const positionValue = decision.quantity * decision.price;\n          const positionPercent = positionValue / totalPortfolioValue;\n          \n          if (positionPercent > this.config.maxPositionSize) {\n            // Reduce position size\n            const adjustedQuantity = Math.floor(\n              (this.config.maxPositionSize * totalPortfolioValue) / decision.price\n            );\n            \n            decision.quantity = adjustedQuantity;\n            decision.rationale += ' (Position size reduced for risk management)';\n          }\n        }\n        \n        // Check portfolio risk budget\n        const decisionRisk = this.calculateDecisionRisk(decision, portfolio);\n        if (decisionRisk <= dailyRiskBudget) {\n          riskManagedDecisions.push(decision);\n          dailyRiskBudget -= decisionRisk;\n        } else {\n          this.logger.warn('Decision exceeds risk budget', {\n            userId,\n            symbol: decision.symbol,\n            decisionRisk,\n            remainingBudget: dailyRiskBudget,\n            correlationId: this.correlationId\n          });\n        }\n      }\n      \n      return riskManagedDecisions;\n    } catch (error) {\n      this.logger.error('Failed to apply risk management', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return decisions; // Return original decisions if risk management fails\n    }\n  }\n\n  /**\n   * Generate execution plan for approved trading decisions\n   */\n  async generateExecutionPlan(decisions, portfolio, userId) {\n    const orders = [];\n    const portfolioChanges = [];\n    \n    try {\n      for (const decision of decisions) {\n        const order = {\n          symbol: decision.symbol,\n          action: decision.action,\n          quantity: decision.quantity,\n          orderType: decision.orderType || 'market',\n          price: decision.price,\n          stopLoss: decision.stopLoss,\n          takeProfit: decision.takeProfit,\n          rationale: decision.rationale,\n          confidence: decision.confidence,\n          priority: decision.priority,\n          correlationId: this.correlationId,\n          timestamp: new Date().toISOString()\n        };\n        \n        orders.push(order);\n        \n        // Calculate portfolio impact\n        const portfolioChange = this.calculatePortfolioChange(decision, portfolio);\n        portfolioChanges.push(portfolioChange);\n      }\n      \n      return {\n        orders,\n        portfolioChanges,\n        summary: {\n          totalOrders: orders.length,\n          buyOrders: orders.filter(o => o.action === 'buy').length,\n          sellOrders: orders.filter(o => o.action === 'sell').length,\n          estimatedValue: orders.reduce((sum, o) => sum + (o.quantity * o.price), 0),\n          expectedRiskReduction: this.calculateExpectedRiskReduction(portfolioChanges),\n          expectedReturn: this.calculateExpectedReturn(portfolioChanges)\n        }\n      };\n    } catch (error) {\n      this.logger.error('Failed to generate execution plan', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return {\n        orders: [],\n        portfolioChanges: [],\n        summary: { totalOrders: 0 }\n      };\n    }\n  }\n\n  // Helper methods (simplified implementations)\n  calculateConcentrationRisk(portfolio) {\n    const totalValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n    const weights = portfolio.map(holding => holding.marketValue / totalValue);\n    return weights.reduce((sum, w) => sum + w * w, 0); // Herfindahl index\n  }\n\n  async calculateSectorConcentration(portfolio) {\n    // Simplified sector concentration calculation\n    const sectors = {};\n    const totalValue = portfolio.reduce((sum, holding) => sum + holding.marketValue, 0);\n    \n    for (const holding of portfolio) {\n      const sector = 'Technology'; // Simplified - would lookup actual sector\n      if (!sectors[sector]) sectors[sector] = 0;\n      sectors[sector] += holding.marketValue / totalValue;\n    }\n    \n    return sectors;\n  }\n\n  assessRiskLevel(concentrationRisk, sectorConcentration, portfolioReturn) {\n    if (concentrationRisk > 0.4) return 'high';\n    if (concentrationRisk > 0.2) return 'medium';\n    return 'low';\n  }\n\n  generatePortfolioRecommendations(portfolio, concentrationRisk, sectorConcentration, riskLevel) {\n    const recommendations = [];\n    \n    if (concentrationRisk > 0.3) {\n      recommendations.push('Consider diversifying - portfolio is highly concentrated');\n    }\n    \n    if (riskLevel === 'high') {\n      recommendations.push('Reduce position sizes in largest holdings');\n    }\n    \n    return recommendations;\n  }\n\n  needsRebalancing(portfolio) {\n    // Simplified rebalancing check\n    return Math.random() > 0.7; // 30% chance needs rebalancing\n  }\n\n  checkStopLossAlerts(portfolio) {\n    return portfolio.filter(holding => {\n      const loss = (holding.currentPrice - holding.avgCost) / holding.avgCost;\n      return loss < -this.config.stopLossThreshold;\n    });\n  }\n\n  checkTakeProfitAlerts(portfolio) {\n    return portfolio.filter(holding => {\n      const gain = (holding.currentPrice - holding.avgCost) / holding.avgCost;\n      return gain > this.config.takeProfitThreshold;\n    });\n  }\n\n  async evaluateBuyDecision(signal, portfolio, portfolioAnalysis) {\n    // Check if we already have a position\n    const existingPosition = portfolio.find(p => p.symbol === signal.symbol);\n    if (existingPosition && existingPosition.quantity > 0) {\n      return null; // Skip if already have position\n    }\n    \n    return {\n      symbol: signal.symbol,\n      action: 'buy',\n      quantity: 100, // Simplified quantity calculation\n      price: signal.currentPrice,\n      orderType: 'market',\n      rationale: signal.recommendation.rationale,\n      confidence: signal.recommendation.confidence,\n      priority: signal.recommendation.confidence * 100,\n      stopLoss: signal.currentPrice * (1 - this.config.stopLossThreshold),\n      takeProfit: signal.currentPrice * (1 + this.config.takeProfitThreshold)\n    };\n  }\n\n  async evaluateSellDecision(signal, portfolio, portfolioAnalysis) {\n    // Check if we have a position to sell\n    const existingPosition = portfolio.find(p => p.symbol === signal.symbol);\n    if (!existingPosition || existingPosition.quantity <= 0) {\n      return null; // Skip if no position\n    }\n    \n    return {\n      symbol: signal.symbol,\n      action: 'sell',\n      quantity: existingPosition.quantity,\n      price: signal.currentPrice,\n      orderType: 'market',\n      rationale: signal.recommendation.rationale,\n      confidence: signal.recommendation.confidence,\n      priority: signal.recommendation.confidence * 100\n    };\n  }\n\n  async generateRebalancingDecisions(portfolio, signals) {\n    // Simplified rebalancing logic\n    return [];\n  }\n\n  generateStopLossDecisions(stopLossAlerts) {\n    return stopLossAlerts.map(holding => ({\n      symbol: holding.symbol,\n      action: 'sell',\n      quantity: holding.quantity,\n      price: holding.currentPrice,\n      orderType: 'market',\n      rationale: 'Stop loss triggered',\n      confidence: 0.9,\n      priority: 95\n    }));\n  }\n\n  generateTakeProfitDecisions(takeProfitAlerts) {\n    return takeProfitAlerts.map(holding => ({\n      symbol: holding.symbol,\n      action: 'sell',\n      quantity: Math.floor(holding.quantity * 0.5), // Sell half\n      price: holding.currentPrice,\n      orderType: 'market',\n      rationale: 'Take profit triggered',\n      confidence: 0.8,\n      priority: 80\n    }));\n  }\n\n  calculateDecisionRisk(decision, portfolio) {\n    const positionValue = decision.quantity * decision.price;\n    return positionValue * 0.1; // Simplified risk calculation\n  }\n\n  calculatePortfolioChange(decision, portfolio) {\n    return {\n      symbol: decision.symbol,\n      action: decision.action,\n      quantity: decision.quantity,\n      value: decision.quantity * decision.price,\n      impact: decision.action === 'buy' ? 'increase' : 'decrease'\n    };\n  }\n\n  calculateExpectedRiskReduction(portfolioChanges) {\n    return Math.random() * 0.1; // Simplified\n  }\n\n  calculateExpectedReturn(portfolioChanges) {\n    return Math.random() * 0.05 + 0.02; // Simplified\n  }\n\n  updateTradingState(executionPlan) {\n    this.tradingState.dailyTradeCount += executionPlan.orders.length;\n    this.tradingState.lastRebalance = new Date();\n  }\n\n  createEmptyTradingResponse(message) {\n    return {\n      success: false,\n      message,\n      portfolio: [],\n      signals: [],\n      analysis: null,\n      decisions: [],\n      executionPlan: { orders: [], portfolioChanges: [], summary: { totalOrders: 0 } },\n      riskMetrics: {},\n      metadata: {\n        correlationId: this.correlationId,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n}\n\nmodule.exports = AutomatedTradingEngine;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE;AAAM,CAAC;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAM;EAAEC;AAAa,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAME,uBAAuB;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,2BAA2B,CAAC;AACpE,MAAMG,2BAA2B;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,+BAA+B,CAAC;AAE5E,MAAMI,sBAAsB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACZ,IAAI,CAACQ,MAAM,GAAGN,YAAY,CAAC,oBAAoB,EAAE,mBAAmB,CAAC;IAAC;IAAAL,cAAA,GAAAG,CAAA;IACtE,IAAI,CAACS,aAAa,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAAC;IAAAb,cAAA,GAAAG,CAAA;IAClD,IAAI,CAACW,eAAe,GAAG,IAAIR,uBAAuB,CAAC,CAAC;IAAC;IAAAN,cAAA,GAAAG,CAAA;IACrD,IAAI,CAACY,kBAAkB,GAAG,IAAIR,2BAA2B,CAAC,CAAC;;IAE3D;IAAA;IAAAP,cAAA,GAAAG,CAAA;IACA,IAAI,CAACa,MAAM,GAAG;MACZC,YAAY,EAAE,EAAE;MAChBC,eAAe,EAAE,GAAG;MAAE;MACtBC,aAAa,EAAE,IAAI;MAAE;MACrBC,kBAAkB,EAAE,IAAI;MAAE;MAC1BC,iBAAiB,EAAE,IAAI;MAAE;MACzBC,mBAAmB,EAAE,IAAI;MAAE;MAC3BC,iBAAiB,EAAE,GAAG;MAAE;MACxBC,cAAc,EAAE;IAClB,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACsB,YAAY,GAAG;MAClBC,eAAe,EAAE,CAAC;MAClBC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE,IAAIC,GAAG,CAAC,CAAC;MACvBC,WAAW,EAAE,CAAC;IAChB,CAAC;EACH;EAEAjB,qBAAqBA,CAAA,EAAG;IAAA;IAAAb,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACtB,OAAO,cAAc4B,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAC9E;;EAEA;AACF;AACA;EACE,MAAMC,wBAAwBA,CAACC,MAAM,EAAEC,WAAW;EAAA;EAAA,CAAAvC,cAAA,GAAAwC,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAxC,cAAA,GAAAU,CAAA;IACvD,MAAM+B,SAAS;IAAA;IAAA,CAAAzC,cAAA,GAAAG,CAAA,QAAG4B,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAAhC,cAAA,GAAAG,CAAA;IAE7B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAACQ,MAAM,CAAC+B,IAAI,CAAC,sCAAsC,EAAE;QACvDJ,MAAM;QACNC,WAAW;QACX3B,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;;MAEF;MACA,MAAM+B,gBAAgB;MAAA;MAAA,CAAA3C,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACyC,mBAAmB,CAACN,MAAM,CAAC;;MAE/D;MACA,MAAMO,aAAa;MAAA;MAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC2C,gBAAgB,CAACR,MAAM,CAAC;;MAEzD;MACA,MAAMS,iBAAiB;MAAA;MAAA,CAAA/C,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC6C,sBAAsB,CAACL,gBAAgB,EAAEL,MAAM,CAAC;;MAErF;MACA,MAAMW,gBAAgB;MAAA;MAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC+C,wBAAwB,CAC1DP,gBAAgB,EAChBE,aAAa,EACbE,iBAAiB,EACjBR,WACF,CAAC;;MAED;MACA,MAAMY,oBAAoB;MAAA;MAAA,CAAAnD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACiD,mBAAmB,CACzDH,gBAAgB,EAChBN,gBAAgB,EAChBL,MACF,CAAC;;MAED;MACA,MAAMe,aAAa;MAAA;MAAA,CAAArD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACmD,qBAAqB,CACpDH,oBAAoB,EACpBR,gBAAgB,EAChBL,MACF,CAAC;;MAED;MAAA;MAAAtC,cAAA,GAAAG,CAAA;MACA,IAAI,CAACoD,kBAAkB,CAACF,aAAa,CAAC;MAEtC,MAAMG,cAAc;MAAA;MAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAG4B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGS,SAAS;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MAE9C,IAAI,CAACQ,MAAM,CAAC+B,IAAI,CAAC,uCAAuC,EAAE;QACxDJ,MAAM;QACNmB,kBAAkB,EAAER,gBAAgB,CAACS,MAAM;QAC3CP,oBAAoB,EAAEA,oBAAoB,CAACO,MAAM;QACjDL,aAAa,EAAEA,aAAa,CAACM,MAAM,CAACD,MAAM;QAC1CF,cAAc;QACd5C,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MAEH,OAAO;QACLyD,OAAO,EAAE,IAAI;QACbC,SAAS,EAAElB,gBAAgB;QAC3BmB,OAAO,EAAEjB,aAAa;QACtBkB,QAAQ,EAAEhB,iBAAiB;QAC3BiB,SAAS,EAAEb,oBAAoB;QAC/BE,aAAa,EAAEA,aAAa;QAC5BvB,WAAW,EAAE,IAAI,CAACL,YAAY,CAACK,WAAW;QAC1CmC,QAAQ,EAAE;UACRT,cAAc;UACd5C,aAAa,EAAE,IAAI,CAACA,aAAa;UACjCsD,SAAS,EAAE,IAAInC,IAAI,CAAC,CAAC,CAACoC,WAAW,CAAC;QACpC;MACF,CAAC;IAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,oCAAoC,EAAE;QACtD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA,aAAa;QACjC4C,cAAc,EAAEzB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGS;MAC/B,CAAC,CAAC;MAAC;MAAAzC,cAAA,GAAAG,CAAA;MAEH,OAAO,IAAI,CAACmE,0BAA0B,CAACF,KAAK,CAACC,OAAO,CAAC;IACvD;EACF;;EAEA;AACF;AACA;EACE,MAAMzB,mBAAmBA,CAACN,MAAM,EAAE;IAAA;IAAAtC,cAAA,GAAAU,CAAA;IAChC,MAAM6D,cAAc;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA,QAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,IAAI;MACF,MAAMqE,MAAM;MAAA;MAAA,CAAAxE,cAAA,GAAAG,CAAA,QAAG,MAAMD,KAAK,CAACqE,cAAc,EAAE,CAACjC,MAAM,CAAC,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MACrD,OAAOqE,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA3E,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA;UAC7B,GAAGwE,GAAG;UACNC,QAAQ,EAAEC,UAAU,CAACF,GAAG,CAACC,QAAQ,CAAC;UAClCE,OAAO,EAAED,UAAU,CAACF,GAAG,CAACI,QAAQ,CAAC;UACjCC,YAAY,EAAEH,UAAU,CAACF,GAAG,CAACM,aAAa,CAAC;UAC3CC,WAAW,EAAEL,UAAU,CAACF,GAAG,CAACQ,YAAY,CAAC;UACzCC,aAAa,EAAEP,UAAU,CAACF,GAAG,CAACU,cAAc;QAC9C,CAAC;MAAD,CAAE,CAAC;IACL,CAAC,CAAC,OAAOjB,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,mCAAmC,EAAE;QACrD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;EACE,MAAM2C,gBAAgBA,CAACR,MAAM,EAAE;IAAA;IAAAtC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC7B,IAAI;MACF;MACA,MAAMmF,cAAc;MAAA;MAAA,CAAAtF,cAAA,GAAAG,CAAA,QAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAMoF,eAAe;MAAA;MAAA,CAAAvF,cAAA,GAAAG,CAAA,QAAG,MAAMD,KAAK,CAACoF,cAAc,EAAE,CAAChD,MAAM,CAAC,CAAC;MAC7D,MAAMkD,OAAO;MAAA;MAAA,CAAAxF,cAAA,GAAAG,CAAA,QAAGoF,eAAe,CAACd,IAAI,CAACC,GAAG,CAACC,GAAG,IAAI;QAAA;QAAA3E,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAwE,GAAG,CAACc,MAAM;MAAD,CAAC,CAAC;;MAE3D;MACA,MAAM3B,OAAO;MAAA;MAAA,CAAA9D,cAAA,GAAAG,CAAA,QAAG,MAAMuF,OAAO,CAACC,GAAG,CAC/BH,OAAO,CAACd,GAAG,CAAC,MAAOe,MAAM,IAAK;QAAA;QAAAzF,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAC5B,IAAI;UACF,MAAMyF,UAAU;UAAA;UAAA,CAAA5F,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACW,eAAe,CAAC+E,uBAAuB,CAACJ,MAAM,CAAC;UAAC;UAAAzF,cAAA,GAAAG,CAAA;UAC9E,OAAO;YACLsF,MAAM;YACN,GAAGG;UACL,CAAC;QACH,CAAC,CAAC,OAAOxB,KAAK,EAAE;UAAA;UAAApE,cAAA,GAAAG,CAAA;UACd,IAAI,CAACQ,MAAM,CAACmF,IAAI,CAAC,sCAAsC,EAAE;YACvDL,MAAM;YACNrB,KAAK,EAAEA,KAAK,CAACC,OAAO;YACpBzD,aAAa,EAAE,IAAI,CAACA;UACtB,CAAC,CAAC;UAAC;UAAAZ,cAAA,GAAAG,CAAA;UACH,OAAO,IAAI;QACb;MACF,CAAC,CACH,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEF,OAAO2D,OAAO,CAACiC,MAAM,CAACC,MAAM,IAAI;QAAA;QAAAhG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAA6F,MAAM,KAAK,IAAI;MAAD,CAAC,CAAC;IAClD,CAAC,CAAC,OAAO5B,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,8BAA8B,EAAE;QAChD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;EACE,MAAM6C,sBAAsBA,CAACa,SAAS,EAAEvB,MAAM,EAAE;IAAA;IAAAtC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC9C;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAACqB,SAAS;IAAA;IAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAIqB,SAAS,CAACH,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA1D,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACxC,OAAO;QACL8F,MAAM,EAAE,OAAO;QACfC,SAAS,EAAE,KAAK;QAChBC,eAAe,EAAE,CAAC,0DAA0D;MAC9E,CAAC;IACH,CAAC;IAAA;IAAA;MAAAnG,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAED,IAAI;MACF;MACA,MAAMiG,UAAU;MAAA;MAAA,CAAApG,cAAA,GAAAG,CAAA,QAAG0D,SAAS,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;QAAA;QAAAvG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAmG,GAAG,GAAGC,OAAO,CAACrB,WAAW;MAAD,CAAC,EAAE,CAAC,CAAC;MACnF,MAAMsB,kBAAkB;MAAA;MAAA,CAAAxG,cAAA,GAAAG,CAAA,QAAG0D,SAAS,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;QAAA;QAAAvG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAmG,GAAG,GAAGC,OAAO,CAACnB,aAAa;MAAD,CAAC,EAAE,CAAC,CAAC;MAC7F,MAAMqB,eAAe;MAAA;MAAA,CAAAzG,cAAA,GAAAG,CAAA,QAAGiG,UAAU,GAAG,CAAC;MAAA;MAAA,CAAApG,cAAA,GAAAwC,CAAA,UAAGgE,kBAAkB,GAAGJ,UAAU;MAAA;MAAA,CAAApG,cAAA,GAAAwC,CAAA,UAAG,CAAC;;MAE5E;MACA,MAAMkE,iBAAiB;MAAA;MAAA,CAAA1G,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACwG,0BAA0B,CAAC9C,SAAS,CAAC;;MAEpE;MACA,MAAM+C,mBAAmB;MAAA;MAAA,CAAA5G,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC0G,4BAA4B,CAAChD,SAAS,CAAC;;MAE9E;MACA,MAAMqC,SAAS;MAAA;MAAA,CAAAlG,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC2G,eAAe,CAACJ,iBAAiB,EAAEE,mBAAmB,EAAEH,eAAe,CAAC;;MAE/F;MACA,MAAMN,eAAe;MAAA;MAAA,CAAAnG,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC4G,gCAAgC,CAC3DlD,SAAS,EACT6C,iBAAiB,EACjBE,mBAAmB,EACnBV,SACF,CAAC;MAAC;MAAAlG,cAAA,GAAAG,CAAA;MAEF,OAAO;QACL8F,MAAM,EAAEC,SAAS;QACjBE,UAAU;QACVI,kBAAkB;QAClBC,eAAe;QACfC,iBAAiB;QACjBE,mBAAmB;QACnBV,SAAS;QACTC,eAAe;QACfa,gBAAgB,EAAE,IAAI,CAACA,gBAAgB,CAACnD,SAAS,CAAC;QAClDoD,cAAc,EAAE,IAAI,CAACC,mBAAmB,CAACrD,SAAS,CAAC;QACnDsD,gBAAgB,EAAE,IAAI,CAACC,qBAAqB,CAACvD,SAAS;MACxD,CAAC;IACH,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,oCAAoC,EAAE;QACtD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO;QACL8F,MAAM,EAAE,SAAS;QACjBC,SAAS,EAAE,SAAS;QACpBC,eAAe,EAAE,CAAC,oCAAoC;MACxD,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,MAAMjD,wBAAwBA,CAACW,SAAS,EAAEC,OAAO,EAAEf,iBAAiB,EAAER,WAAW,EAAE;IAAA;IAAAvC,cAAA,GAAAU,CAAA;IACjF,MAAMsD,SAAS;IAAA;IAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAErB,IAAI;MACF;MACA,MAAMkH,UAAU;MAAA;MAAA,CAAArH,cAAA,GAAAG,CAAA,QAAG2D,OAAO,CAACiC,MAAM,CAACC,MAAM,IACtC;QAAA;QAAAhG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAwC,CAAA,UAAAwD,MAAM,CAACsB,cAAc,EAAEC,MAAM,KAAK,KAAK;QAAA;QAAA,CAAAvH,cAAA,GAAAwC,CAAA,UACvCwD,MAAM,CAACsB,cAAc,EAAEE,UAAU,IAAI,IAAI,CAACxG,MAAM,CAACO,iBAAiB;MAAD,CACnE,CAAC;MAAC;MAAAvB,cAAA,GAAAG,CAAA;MAEF,KAAK,MAAM6F,MAAM,IAAIqB,UAAU,EAAE;QAC/B,MAAMI,QAAQ;QAAA;QAAA,CAAAzH,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACuH,mBAAmB,CAAC1B,MAAM,EAAEnC,SAAS,EAAEd,iBAAiB,CAAC;QAAC;QAAA/C,cAAA,GAAAG,CAAA;QACtF,IAAIsH,QAAQ,EAAE;UAAA;UAAAzH,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAG,CAAA;UACZ6D,SAAS,CAAC2D,IAAI,CAACF,QAAQ,CAAC;QAC1B,CAAC;QAAA;QAAA;UAAAzH,cAAA,GAAAwC,CAAA;QAAA;MACH;;MAEA;MACA,MAAMoF,WAAW;MAAA;MAAA,CAAA5H,cAAA,GAAAG,CAAA,QAAG2D,OAAO,CAACiC,MAAM,CAACC,MAAM,IACvC;QAAA;QAAAhG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAwC,CAAA,UAAAwD,MAAM,CAACsB,cAAc,EAAEC,MAAM,KAAK,MAAM;QAAA;QAAA,CAAAvH,cAAA,GAAAwC,CAAA,UACxCwD,MAAM,CAACsB,cAAc,EAAEE,UAAU,IAAI,IAAI,CAACxG,MAAM,CAACO,iBAAiB;MAAD,CACnE,CAAC;MAAC;MAAAvB,cAAA,GAAAG,CAAA;MAEF,KAAK,MAAM6F,MAAM,IAAI4B,WAAW,EAAE;QAChC,MAAMH,QAAQ;QAAA;QAAA,CAAAzH,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC0H,oBAAoB,CAAC7B,MAAM,EAAEnC,SAAS,EAAEd,iBAAiB,CAAC;QAAC;QAAA/C,cAAA,GAAAG,CAAA;QACvF,IAAIsH,QAAQ,EAAE;UAAA;UAAAzH,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAG,CAAA;UACZ6D,SAAS,CAAC2D,IAAI,CAACF,QAAQ,CAAC;QAC1B,CAAC;QAAA;QAAA;UAAAzH,cAAA,GAAAwC,CAAA;QAAA;MACH;;MAEA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MACA,IAAI4C,iBAAiB,CAACiE,gBAAgB,EAAE;QAAA;QAAAhH,cAAA,GAAAwC,CAAA;QACtC,MAAMsF,kBAAkB;QAAA;QAAA,CAAA9H,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC4H,4BAA4B,CAAClE,SAAS,EAAEC,OAAO,CAAC;QAAC;QAAA9D,cAAA,GAAAG,CAAA;QACvF6D,SAAS,CAAC2D,IAAI,CAAC,GAAGG,kBAAkB,CAAC;MACvC,CAAC;MAAA;MAAA;QAAA9H,cAAA,GAAAwC,CAAA;MAAA;;MAED;MAAAxC,cAAA,GAAAG,CAAA;MACA,IAAI4C,iBAAiB,CAACkE,cAAc,EAAEvD,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA1D,cAAA,GAAAwC,CAAA;QAChD,MAAMwF,iBAAiB;QAAA;QAAA,CAAAhI,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC8H,yBAAyB,CAAClF,iBAAiB,CAACkE,cAAc,CAAC;QAAC;QAAAjH,cAAA,GAAAG,CAAA;QAC3F6D,SAAS,CAAC2D,IAAI,CAAC,GAAGK,iBAAiB,CAAC;MACtC,CAAC;MAAA;MAAA;QAAAhI,cAAA,GAAAwC,CAAA;MAAA;;MAED;MAAAxC,cAAA,GAAAG,CAAA;MACA,IAAI4C,iBAAiB,CAACoE,gBAAgB,EAAEzD,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA1D,cAAA,GAAAwC,CAAA;QAClD,MAAM0F,mBAAmB;QAAA;QAAA,CAAAlI,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACgI,2BAA2B,CAACpF,iBAAiB,CAACoE,gBAAgB,CAAC;QAAC;QAAAnH,cAAA,GAAAG,CAAA;QACjG6D,SAAS,CAAC2D,IAAI,CAAC,GAAGO,mBAAmB,CAAC;MACxC,CAAC;MAAA;MAAA;QAAAlI,cAAA,GAAAwC,CAAA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MAED,OAAO6D,SAAS,CAACoE,IAAI,CAAC,CAACC,CAAC,EAAE7F,CAAC,KAAK;QAAA;QAAAxC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAqC,CAAC,CAAC8F,QAAQ,GAAGD,CAAC,CAACC,QAAQ;MAAD,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOlE,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,sCAAsC,EAAE;QACxDA,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;EACE,MAAMiD,mBAAmBA,CAACY,SAAS,EAAEH,SAAS,EAAEvB,MAAM,EAAE;IAAA;IAAAtC,cAAA,GAAAU,CAAA;IACtD,MAAMyC,oBAAoB;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEhC,IAAI;MACF,MAAMoI,mBAAmB;MAAA;MAAA,CAAAvI,cAAA,GAAAG,CAAA,QAAG0D,SAAS,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;QAAA;QAAAvG,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAmG,GAAG,GAAGC,OAAO,CAACrB,WAAW;MAAD,CAAC,EAAE,CAAC,CAAC;MAC5F,IAAIsD,eAAe;MAAA;MAAA,CAAAxI,cAAA,GAAAG,CAAA,QAAGoI,mBAAmB,GAAG,IAAI,CAACvH,MAAM,CAACG,aAAa;MAAC;MAAAnB,cAAA,GAAAG,CAAA;MAEtE,KAAK,MAAMsH,QAAQ,IAAIzD,SAAS,EAAE;QAAA;QAAAhE,cAAA,GAAAG,CAAA;QAChC;QACA,IAAI,IAAI,CAACsB,YAAY,CAACC,eAAe,IAAI,IAAI,CAACV,MAAM,CAACQ,cAAc,EAAE;UAAA;UAAAxB,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAG,CAAA;UACnE,IAAI,CAACQ,MAAM,CAACmF,IAAI,CAAC,2BAA2B,EAAE;YAC5CxD,MAAM;YACNZ,eAAe,EAAE,IAAI,CAACD,YAAY,CAACC,eAAe;YAClDd,aAAa,EAAE,IAAI,CAACA;UACtB,CAAC,CAAC;UAAC;UAAAZ,cAAA,GAAAG,CAAA;UACH;QACF,CAAC;QAAA;QAAA;UAAAH,cAAA,GAAAwC,CAAA;QAAA;;QAED;QAAAxC,cAAA,GAAAG,CAAA;QACA,IAAIsH,QAAQ,CAACF,MAAM,KAAK,KAAK,EAAE;UAAA;UAAAvH,cAAA,GAAAwC,CAAA;UAC7B,MAAMiG,aAAa;UAAA;UAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAGsH,QAAQ,CAAC7C,QAAQ,GAAG6C,QAAQ,CAACiB,KAAK;UACxD,MAAMC,eAAe;UAAA;UAAA,CAAA3I,cAAA,GAAAG,CAAA,SAAGsI,aAAa,GAAGF,mBAAmB;UAAC;UAAAvI,cAAA,GAAAG,CAAA;UAE5D,IAAIwI,eAAe,GAAG,IAAI,CAAC3H,MAAM,CAACE,eAAe,EAAE;YAAA;YAAAlB,cAAA,GAAAwC,CAAA;YACjD;YACA,MAAMoG,gBAAgB;YAAA;YAAA,CAAA5I,cAAA,GAAAG,CAAA,SAAG8B,IAAI,CAAC4G,KAAK,CAChC,IAAI,CAAC7H,MAAM,CAACE,eAAe,GAAGqH,mBAAmB,GAAId,QAAQ,CAACiB,KACjE,CAAC;YAAC;YAAA1I,cAAA,GAAAG,CAAA;YAEFsH,QAAQ,CAAC7C,QAAQ,GAAGgE,gBAAgB;YAAC;YAAA5I,cAAA,GAAAG,CAAA;YACrCsH,QAAQ,CAACqB,SAAS,IAAI,8CAA8C;UACtE,CAAC;UAAA;UAAA;YAAA9I,cAAA,GAAAwC,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAxC,cAAA,GAAAwC,CAAA;QAAA;;QAED;QACA,MAAMuG,YAAY;QAAA;QAAA,CAAA/I,cAAA,GAAAG,CAAA,SAAG,IAAI,CAAC6I,qBAAqB,CAACvB,QAAQ,EAAE5D,SAAS,CAAC;QAAC;QAAA7D,cAAA,GAAAG,CAAA;QACrE,IAAI4I,YAAY,IAAIP,eAAe,EAAE;UAAA;UAAAxI,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAG,CAAA;UACnCgD,oBAAoB,CAACwE,IAAI,CAACF,QAAQ,CAAC;UAAC;UAAAzH,cAAA,GAAAG,CAAA;UACpCqI,eAAe,IAAIO,YAAY;QACjC,CAAC,MAAM;UAAA;UAAA/I,cAAA,GAAAwC,CAAA;UAAAxC,cAAA,GAAAG,CAAA;UACL,IAAI,CAACQ,MAAM,CAACmF,IAAI,CAAC,8BAA8B,EAAE;YAC/CxD,MAAM;YACNmD,MAAM,EAAEgC,QAAQ,CAAChC,MAAM;YACvBsD,YAAY;YACZE,eAAe,EAAET,eAAe;YAChC5H,aAAa,EAAE,IAAI,CAACA;UACtB,CAAC,CAAC;QACJ;MACF;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MAED,OAAOgD,oBAAoB;IAC7B,CAAC,CAAC,OAAOiB,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,iCAAiC,EAAE;QACnD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO6D,SAAS,CAAC,CAAC;IACpB;EACF;;EAEA;AACF;AACA;EACE,MAAMV,qBAAqBA,CAACU,SAAS,EAAEH,SAAS,EAAEvB,MAAM,EAAE;IAAA;IAAAtC,cAAA,GAAAU,CAAA;IACxD,MAAMiD,MAAM;IAAA;IAAA,CAAA3D,cAAA,GAAAG,CAAA,SAAG,EAAE;IACjB,MAAM+I,gBAAgB;IAAA;IAAA,CAAAlJ,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAE5B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,KAAK,MAAMsH,QAAQ,IAAIzD,SAAS,EAAE;QAChC,MAAMmF,KAAK;QAAA;QAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAG;UACZsF,MAAM,EAAEgC,QAAQ,CAAChC,MAAM;UACvB8B,MAAM,EAAEE,QAAQ,CAACF,MAAM;UACvB3C,QAAQ,EAAE6C,QAAQ,CAAC7C,QAAQ;UAC3BwE,SAAS;UAAE;UAAA,CAAApJ,cAAA,GAAAwC,CAAA,WAAAiF,QAAQ,CAAC2B,SAAS;UAAA;UAAA,CAAApJ,cAAA,GAAAwC,CAAA,WAAI,QAAQ;UACzCkG,KAAK,EAAEjB,QAAQ,CAACiB,KAAK;UACrBW,QAAQ,EAAE5B,QAAQ,CAAC4B,QAAQ;UAC3BC,UAAU,EAAE7B,QAAQ,CAAC6B,UAAU;UAC/BR,SAAS,EAAErB,QAAQ,CAACqB,SAAS;UAC7BtB,UAAU,EAAEC,QAAQ,CAACD,UAAU;UAC/Bc,QAAQ,EAAEb,QAAQ,CAACa,QAAQ;UAC3B1H,aAAa,EAAE,IAAI,CAACA,aAAa;UACjCsD,SAAS,EAAE,IAAInC,IAAI,CAAC,CAAC,CAACoC,WAAW,CAAC;QACpC,CAAC;QAAC;QAAAnE,cAAA,GAAAG,CAAA;QAEFwD,MAAM,CAACgE,IAAI,CAACwB,KAAK,CAAC;;QAElB;QACA,MAAMI,eAAe;QAAA;QAAA,CAAAvJ,cAAA,GAAAG,CAAA,SAAG,IAAI,CAACqJ,wBAAwB,CAAC/B,QAAQ,EAAE5D,SAAS,CAAC;QAAC;QAAA7D,cAAA,GAAAG,CAAA;QAC3E+I,gBAAgB,CAACvB,IAAI,CAAC4B,eAAe,CAAC;MACxC;MAAC;MAAAvJ,cAAA,GAAAG,CAAA;MAED,OAAO;QACLwD,MAAM;QACNuF,gBAAgB;QAChBO,OAAO,EAAE;UACPC,WAAW,EAAE/F,MAAM,CAACD,MAAM;UAC1BiG,SAAS,EAAEhG,MAAM,CAACoC,MAAM,CAAC6D,CAAC,IAAI;YAAA;YAAA5J,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAG,CAAA;YAAA,OAAAyJ,CAAC,CAACrC,MAAM,KAAK,KAAK;UAAD,CAAC,CAAC,CAAC7D,MAAM;UACxDmG,UAAU,EAAElG,MAAM,CAACoC,MAAM,CAAC6D,CAAC,IAAI;YAAA;YAAA5J,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAG,CAAA;YAAA,OAAAyJ,CAAC,CAACrC,MAAM,KAAK,MAAM;UAAD,CAAC,CAAC,CAAC7D,MAAM;UAC1DoG,cAAc,EAAEnG,MAAM,CAAC0C,MAAM,CAAC,CAACC,GAAG,EAAEsD,CAAC,KAAK;YAAA;YAAA5J,cAAA,GAAAU,CAAA;YAAAV,cAAA,GAAAG,CAAA;YAAA,OAAAmG,GAAG,GAAIsD,CAAC,CAAChF,QAAQ,GAAGgF,CAAC,CAAClB,KAAM;UAAD,CAAC,EAAE,CAAC,CAAC;UAC1EqB,qBAAqB,EAAE,IAAI,CAACC,8BAA8B,CAACd,gBAAgB,CAAC;UAC5Ee,cAAc,EAAE,IAAI,CAACC,uBAAuB,CAAChB,gBAAgB;QAC/D;MACF,CAAC;IACH,CAAC,CAAC,OAAO9E,KAAK,EAAE;MAAA;MAAApE,cAAA,GAAAG,CAAA;MACd,IAAI,CAACQ,MAAM,CAACyD,KAAK,CAAC,mCAAmC,EAAE;QACrD9B,MAAM;QACN8B,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBzD,aAAa,EAAE,IAAI,CAACA;MACtB,CAAC,CAAC;MAAC;MAAAZ,cAAA,GAAAG,CAAA;MACH,OAAO;QACLwD,MAAM,EAAE,EAAE;QACVuF,gBAAgB,EAAE,EAAE;QACpBO,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAE;MAC5B,CAAC;IACH;EACF;;EAEA;EACA/C,0BAA0BA,CAAC9C,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IACpC,MAAM0F,UAAU;IAAA;IAAA,CAAApG,cAAA,GAAAG,CAAA,SAAG0D,SAAS,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAmG,GAAG,GAAGC,OAAO,CAACrB,WAAW;IAAD,CAAC,EAAE,CAAC,CAAC;IACnF,MAAMiF,OAAO;IAAA;IAAA,CAAAnK,cAAA,GAAAG,CAAA,SAAG0D,SAAS,CAACa,GAAG,CAAC6B,OAAO,IAAI;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAoG,OAAO,CAACrB,WAAW,GAAGkB,UAAU;IAAD,CAAC,CAAC;IAAC;IAAApG,cAAA,GAAAG,CAAA;IAC3E,OAAOgK,OAAO,CAAC9D,MAAM,CAAC,CAACC,GAAG,EAAE8D,CAAC,KAAK;MAAA;MAAApK,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAmG,GAAG,GAAG8D,CAAC,GAAGA,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACrD;EAEA,MAAMvD,4BAA4BA,CAAChD,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAC5C;IACA,MAAM2J,OAAO;IAAA;IAAA,CAAArK,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAClB,MAAMiG,UAAU;IAAA;IAAA,CAAApG,cAAA,GAAAG,CAAA,SAAG0D,SAAS,CAACwC,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAmG,GAAG,GAAGC,OAAO,CAACrB,WAAW;IAAD,CAAC,EAAE,CAAC,CAAC;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAEpF,KAAK,MAAMoG,OAAO,IAAI1C,SAAS,EAAE;MAC/B,MAAMyG,MAAM;MAAA;MAAA,CAAAtK,cAAA,GAAAG,CAAA,SAAG,YAAY,EAAC,CAAC;MAAA;MAAAH,cAAA,GAAAG,CAAA;MAC7B,IAAI,CAACkK,OAAO,CAACC,MAAM,CAAC,EAAE;QAAA;QAAAtK,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAG,CAAA;QAAAkK,OAAO,CAACC,MAAM,CAAC,GAAG,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAtK,cAAA,GAAAwC,CAAA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC1CkK,OAAO,CAACC,MAAM,CAAC,IAAI/D,OAAO,CAACrB,WAAW,GAAGkB,UAAU;IACrD;IAAC;IAAApG,cAAA,GAAAG,CAAA;IAED,OAAOkK,OAAO;EAChB;EAEAvD,eAAeA,CAACJ,iBAAiB,EAAEE,mBAAmB,EAAEH,eAAe,EAAE;IAAA;IAAAzG,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACvE,IAAIuG,iBAAiB,GAAG,GAAG,EAAE;MAAA;MAAA1G,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAAA,OAAO,MAAM;IAAA,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAC3C,IAAIuG,iBAAiB,GAAG,GAAG,EAAE;MAAA;MAAA1G,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAAA,OAAO,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAC7C,OAAO,KAAK;EACd;EAEA4G,gCAAgCA,CAAClD,SAAS,EAAE6C,iBAAiB,EAAEE,mBAAmB,EAAEV,SAAS,EAAE;IAAA;IAAAlG,cAAA,GAAAU,CAAA;IAC7F,MAAMyF,eAAe;IAAA;IAAA,CAAAnG,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAE3B,IAAIuG,iBAAiB,GAAG,GAAG,EAAE;MAAA;MAAA1G,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC3BgG,eAAe,CAACwB,IAAI,CAAC,0DAA0D,CAAC;IAClF,CAAC;IAAA;IAAA;MAAA3H,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAED,IAAI+F,SAAS,KAAK,MAAM,EAAE;MAAA;MAAAlG,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACxBgG,eAAe,CAACwB,IAAI,CAAC,2CAA2C,CAAC;IACnE,CAAC;IAAA;IAAA;MAAA3H,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAED,OAAOgG,eAAe;EACxB;EAEAa,gBAAgBA,CAACnD,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC1B;IACA,OAAO8B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EAC9B;EAEAgF,mBAAmBA,CAACrD,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC7B,OAAO0D,SAAS,CAACkC,MAAM,CAACQ,OAAO,IAAI;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MACjC,MAAM6J,IAAI;MAAA;MAAA,CAAAvK,cAAA,GAAAG,CAAA,SAAG,CAACoG,OAAO,CAACvB,YAAY,GAAGuB,OAAO,CAACzB,OAAO,IAAIyB,OAAO,CAACzB,OAAO;MAAC;MAAA9E,cAAA,GAAAG,CAAA;MACxE,OAAOoK,IAAI,GAAG,CAAC,IAAI,CAACvJ,MAAM,CAACK,iBAAiB;IAC9C,CAAC,CAAC;EACJ;EAEA+F,qBAAqBA,CAACvD,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC/B,OAAO0D,SAAS,CAACkC,MAAM,CAACQ,OAAO,IAAI;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MACjC,MAAM8J,IAAI;MAAA;MAAA,CAAAxK,cAAA,GAAAG,CAAA,SAAG,CAACoG,OAAO,CAACvB,YAAY,GAAGuB,OAAO,CAACzB,OAAO,IAAIyB,OAAO,CAACzB,OAAO;MAAC;MAAA9E,cAAA,GAAAG,CAAA;MACxE,OAAOqK,IAAI,GAAG,IAAI,CAACxJ,MAAM,CAACM,mBAAmB;IAC/C,CAAC,CAAC;EACJ;EAEA,MAAMoG,mBAAmBA,CAAC1B,MAAM,EAAEnC,SAAS,EAAEd,iBAAiB,EAAE;IAAA;IAAA/C,cAAA,GAAAU,CAAA;IAC9D;IACA,MAAM+J,gBAAgB;IAAA;IAAA,CAAAzK,cAAA,GAAAG,CAAA,SAAG0D,SAAS,CAAC6G,IAAI,CAACC,CAAC,IAAI;MAAA;MAAA3K,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAwK,CAAC,CAAClF,MAAM,KAAKO,MAAM,CAACP,MAAM;IAAD,CAAC,CAAC;IAAC;IAAAzF,cAAA,GAAAG,CAAA;IACzE;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAiI,gBAAgB;IAAA;IAAA,CAAAzK,cAAA,GAAAwC,CAAA,WAAIiI,gBAAgB,CAAC7F,QAAQ,GAAG,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACrD,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAED,OAAO;MACLsF,MAAM,EAAEO,MAAM,CAACP,MAAM;MACrB8B,MAAM,EAAE,KAAK;MACb3C,QAAQ,EAAE,GAAG;MAAE;MACf8D,KAAK,EAAE1C,MAAM,CAAChB,YAAY;MAC1BoE,SAAS,EAAE,QAAQ;MACnBN,SAAS,EAAE9C,MAAM,CAACsB,cAAc,CAACwB,SAAS;MAC1CtB,UAAU,EAAExB,MAAM,CAACsB,cAAc,CAACE,UAAU;MAC5Cc,QAAQ,EAAEtC,MAAM,CAACsB,cAAc,CAACE,UAAU,GAAG,GAAG;MAChD6B,QAAQ,EAAErD,MAAM,CAAChB,YAAY,IAAI,CAAC,GAAG,IAAI,CAAChE,MAAM,CAACK,iBAAiB,CAAC;MACnEiI,UAAU,EAAEtD,MAAM,CAAChB,YAAY,IAAI,CAAC,GAAG,IAAI,CAAChE,MAAM,CAACM,mBAAmB;IACxE,CAAC;EACH;EAEA,MAAMuG,oBAAoBA,CAAC7B,MAAM,EAAEnC,SAAS,EAAEd,iBAAiB,EAAE;IAAA;IAAA/C,cAAA,GAAAU,CAAA;IAC/D;IACA,MAAM+J,gBAAgB;IAAA;IAAA,CAAAzK,cAAA,GAAAG,CAAA,SAAG0D,SAAS,CAAC6G,IAAI,CAACC,CAAC,IAAI;MAAA;MAAA3K,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAwK,CAAC,CAAClF,MAAM,KAAKO,MAAM,CAACP,MAAM;IAAD,CAAC,CAAC;IAAC;IAAAzF,cAAA,GAAAG,CAAA;IACzE;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,YAACiI,gBAAgB;IAAA;IAAA,CAAAzK,cAAA,GAAAwC,CAAA,WAAIiI,gBAAgB,CAAC7F,QAAQ,IAAI,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACvD,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAED,OAAO;MACLsF,MAAM,EAAEO,MAAM,CAACP,MAAM;MACrB8B,MAAM,EAAE,MAAM;MACd3C,QAAQ,EAAE6F,gBAAgB,CAAC7F,QAAQ;MACnC8D,KAAK,EAAE1C,MAAM,CAAChB,YAAY;MAC1BoE,SAAS,EAAE,QAAQ;MACnBN,SAAS,EAAE9C,MAAM,CAACsB,cAAc,CAACwB,SAAS;MAC1CtB,UAAU,EAAExB,MAAM,CAACsB,cAAc,CAACE,UAAU;MAC5Cc,QAAQ,EAAEtC,MAAM,CAACsB,cAAc,CAACE,UAAU,GAAG;IAC/C,CAAC;EACH;EAEA,MAAMO,4BAA4BA,CAAClE,SAAS,EAAEC,OAAO,EAAE;IAAA;IAAA9D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACrD;IACA,OAAO,EAAE;EACX;EAEA8H,yBAAyBA,CAAChB,cAAc,EAAE;IAAA;IAAAjH,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACxC,OAAO8G,cAAc,CAACvC,GAAG,CAAC6B,OAAO,IAAK;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA;QACpCsF,MAAM,EAAEc,OAAO,CAACd,MAAM;QACtB8B,MAAM,EAAE,MAAM;QACd3C,QAAQ,EAAE2B,OAAO,CAAC3B,QAAQ;QAC1B8D,KAAK,EAAEnC,OAAO,CAACvB,YAAY;QAC3BoE,SAAS,EAAE,QAAQ;QACnBN,SAAS,EAAE,qBAAqB;QAChCtB,UAAU,EAAE,GAAG;QACfc,QAAQ,EAAE;MACZ,CAAC;IAAD,CAAE,CAAC;EACL;EAEAH,2BAA2BA,CAAChB,gBAAgB,EAAE;IAAA;IAAAnH,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC5C,OAAOgH,gBAAgB,CAACzC,GAAG,CAAC6B,OAAO,IAAK;MAAA;MAAAvG,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA;QACtCsF,MAAM,EAAEc,OAAO,CAACd,MAAM;QACtB8B,MAAM,EAAE,MAAM;QACd3C,QAAQ,EAAE3C,IAAI,CAAC4G,KAAK,CAACtC,OAAO,CAAC3B,QAAQ,GAAG,GAAG,CAAC;QAAE;QAC9C8D,KAAK,EAAEnC,OAAO,CAACvB,YAAY;QAC3BoE,SAAS,EAAE,QAAQ;QACnBN,SAAS,EAAE,uBAAuB;QAClCtB,UAAU,EAAE,GAAG;QACfc,QAAQ,EAAE;MACZ,CAAC;IAAD,CAAE,CAAC;EACL;EAEAU,qBAAqBA,CAACvB,QAAQ,EAAE5D,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IACzC,MAAM+H,aAAa;IAAA;IAAA,CAAAzI,cAAA,GAAAG,CAAA,SAAGsH,QAAQ,CAAC7C,QAAQ,GAAG6C,QAAQ,CAACiB,KAAK;IAAC;IAAA1I,cAAA,GAAAG,CAAA;IACzD,OAAOsI,aAAa,GAAG,GAAG,CAAC,CAAC;EAC9B;EAEAe,wBAAwBA,CAAC/B,QAAQ,EAAE5D,SAAS,EAAE;IAAA;IAAA7D,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC5C,OAAO;MACLsF,MAAM,EAAEgC,QAAQ,CAAChC,MAAM;MACvB8B,MAAM,EAAEE,QAAQ,CAACF,MAAM;MACvB3C,QAAQ,EAAE6C,QAAQ,CAAC7C,QAAQ;MAC3BgG,KAAK,EAAEnD,QAAQ,CAAC7C,QAAQ,GAAG6C,QAAQ,CAACiB,KAAK;MACzCmC,MAAM,EAAEpD,QAAQ,CAACF,MAAM,KAAK,KAAK;MAAA;MAAA,CAAAvH,cAAA,GAAAwC,CAAA,WAAG,UAAU;MAAA;MAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,UAAU;IAC7D,CAAC;EACH;EAEAwH,8BAA8BA,CAACd,gBAAgB,EAAE;IAAA;IAAAlJ,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAC/C,OAAO8B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;EAC9B;EAEAgI,uBAAuBA,CAAChB,gBAAgB,EAAE;IAAA;IAAAlJ,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IACxC,OAAO8B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;EACtC;EAEAqB,kBAAkBA,CAACF,aAAa,EAAE;IAAA;IAAArD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAChC,IAAI,CAACsB,YAAY,CAACC,eAAe,IAAI2B,aAAa,CAACM,MAAM,CAACD,MAAM;IAAC;IAAA1D,cAAA,GAAAG,CAAA;IACjE,IAAI,CAACsB,YAAY,CAACE,aAAa,GAAG,IAAII,IAAI,CAAC,CAAC;EAC9C;EAEAuC,0BAA0BA,CAACD,OAAO,EAAE;IAAA;IAAArE,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAG,CAAA;IAClC,OAAO;MACLyD,OAAO,EAAE,KAAK;MACdS,OAAO;MACPR,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,EAAE;MACbX,aAAa,EAAE;QAAEM,MAAM,EAAE,EAAE;QAAEuF,gBAAgB,EAAE,EAAE;QAAEO,OAAO,EAAE;UAAEC,WAAW,EAAE;QAAE;MAAE,CAAC;MAChF5H,WAAW,EAAE,CAAC,CAAC;MACfmC,QAAQ,EAAE;QACRrD,aAAa,EAAE,IAAI,CAACA,aAAa;QACjCsD,SAAS,EAAE,IAAInC,IAAI,CAAC,CAAC,CAACoC,WAAW,CAAC;MACpC;IACF,CAAC;EACH;AACF;AAAC;AAAAnE,cAAA,GAAAG,CAAA;AAED2K,MAAM,CAACC,OAAO,GAAGvK,sBAAsB","ignoreList":[]}