{"version":3,"names":["cov_hvwltsod5","actualCoverage","express","s","require","query","authenticateToken","createValidationMiddleware","sanitizers","router","Router","financialsValidationSchemas","symbolBased","symbol","required","type","sanitizer","validator","value","f","test","errorMessage","timeSeriesBased","ticker","period","string","maxLength","toLowerCase","defaultValue","includes","limit","integer","min","max","b","use","get","req","res","console","log","tables","results","table","SecureQueryBuilder","queryBuilder","allowedTables","has","warn","exists","error","authorized","tableExistsQuery","tableExists","rows","columnsQuery","columnsResult","countQuery","params","countParams","buildSelect","columns","countResult","sampleQuery","sampleParams","sampleResult","totalRecords","parseInt","total","sampleData","message","json","status","timestamp","Date","toISOString","tableName","balanceSheetQuery","result","toUpperCase","Array","isArray","length","groupedData","forEach","row","dateKey","date","items","item_name","parseFloat","transformedData","Object","values","map","totalAssets","totalLiabilities","stockholdersEquity","cashAndCashEquivalents","currentAssets","currentLiabilities","longTermDebt","workingCapital","retainedEarnings","commonStockEquity","tangibleBookValue","netDebt","investedCapital","success","data","metadata","count","stack","details","incomeQuery","revenue","costOfRevenue","grossProfit","operatingIncome","netIncome","ebit","ebitda","cashFlowQuery","operatingCashFlow","investingCashFlow","financingCashFlow","freeCashFlow","capitalExpenditures","balanceSheet","incomeStatement","cashFlow","Promise","all","getFinancialStatement","balance_sheet","income_statement","cash_flow","split","fetched_at","sort","a","service","keyMetricsQuery","metrics","organizedMetrics","valuation","title","icon","trailing_pe","forward_pe","price_to_sales_ttm","price_to_book","peg_ratio","book_value","enterprise","enterprise_value","ev_to_revenue","ev_to_ebitda","financial_performance","total_revenue","net_income","gross_profit","earnings","eps_trailing","eps_forward","eps_current_year","price_eps_current_year","growth","earnings_q_growth_pct","revenue_growth_pct","earnings_growth_pct","cash_and_debt","total_cash","cash_per_share","operating_cashflow","free_cashflow","total_debt","debt_to_equity","liquidity","quick_ratio","current_ratio","profitability","profit_margin_pct","gross_margin_pct","ebitda_margin_pct","operating_margin_pct","returns","return_on_assets_pct","return_on_equity_pct","dividends","dividend_rate","dividend_yield","five_year_avg_dividend_yield","payout_ratio","totalFields","reduce","sum","category","keys","populatedFields","filter","undefined","dataQuality","toFixed","totalMetrics","populatedMetrics","lastUpdated","source","dataQuery","statement_type","push","earningsQuery","module","exports"],"sources":["financials.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\n\nconst router = express.Router();\n\n// Validation schemas for financials endpoints\nconst financialsValidationSchemas = {\n  symbolBased: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    }\n  },\n  \n  timeSeriesBased: {\n    ticker: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Ticker must be 1-10 uppercase letters'\n    },\n    period: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, toLowerCase: true, defaultValue: 'quarterly' }),\n      validator: (value) => ['annual', 'quarterly', 'ttm'].includes(value),\n      errorMessage: 'Period must be annual, quarterly, or ttm'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 20, defaultValue: 4 }),\n      validator: (value) => value >= 1 && value <= 20,\n      errorMessage: 'Limit must be between 1 and 20'\n    }\n  }\n};\n\n// Apply authentication to all financial data routes\nrouter.use(authenticateToken);\n\n// Debug endpoint to check table structure\nrouter.get('/debug/tables', async (req, res) => {\n  try {\n    console.log('Financials debug endpoint called');\n    \n    const tables = ['balance_sheet', 'ttm_income_stmt', 'ttm_cashflow', 'quarterly_balance_sheet', 'quarterly_income_stmt', 'quarterly_cashflow'];\n    const results = {};\n    \n    for (const table of tables) {\n      try {\n        // Use secure query builder to prevent SQL injection\n        const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n        const queryBuilder = new SecureQueryBuilder();\n        \n        // Validate table name against whitelist\n        if (!queryBuilder.allowedTables.has(table.toLowerCase())) {\n          console.warn(`🚨 Unauthorized table access attempt: ${table}`);\n          results[table] = {\n            exists: false,\n            error: 'Unauthorized table access',\n            authorized: false\n          };\n          continue;\n        }\n        \n        // Check if table exists using parameterized query\n        const tableExistsQuery = `\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name = $1\n          );\n        `;\n        \n        const tableExists = await query(tableExistsQuery, [table]);\n        \n        if (tableExists.rows[0].exists) {\n          // Get column information using parameterized query\n          const columnsQuery = `\n            SELECT column_name, data_type, is_nullable\n            FROM information_schema.columns \n            WHERE table_name = $1 \n            AND table_schema = 'public'\n            ORDER BY ordinal_position\n          `;\n          \n          const columnsResult = await query(columnsQuery, [table]);\n          \n          // Use secure query builder for count and sample queries\n          const { query: countQuery, params: countParams } = queryBuilder.buildSelect({\n            table: table,\n            columns: ['COUNT(*) as total']\n          });\n          const countResult = await query(countQuery, countParams);\n          \n          // Get sample records using secure query builder\n          const { query: sampleQuery, params: sampleParams } = queryBuilder.buildSelect({\n            table: table,\n            columns: ['*'],\n            limit: 2\n          });\n          const sampleResult = await query(sampleQuery, sampleParams);\n          \n          results[table] = {\n            exists: true,\n            totalRecords: parseInt(countResult.rows[0].total),\n            columns: columnsResult.rows,\n            sampleData: sampleResult.rows\n          };\n        } else {\n          results[table] = {\n            exists: false,\n            message: `${table} table does not exist`\n          };\n        }\n        \n      } catch (error) {\n        results[table] = {\n          exists: false,\n          error: error.message\n        };\n      }\n    }\n    \n    res.json({\n      status: 'ok',\n      tables: results,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in financials debug:', error);\n    res.status(500).json({ \n      error: 'Debug check failed', \n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get financial statements for a ticker\nrouter.get('/:ticker/balance-sheet', createValidationMiddleware(financialsValidationSchemas.timeSeriesBased), async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`Balance sheet request for ${ticker}, period: ${period}`);\n    \n    // Determine table name based on period\n    let tableName = 'annual_balance_sheet';\n    if (period === 'quarterly') {\n      tableName = 'quarterly_balance_sheet';\n    }\n    \n    // Query the normalized balance sheet table\n    const balanceSheetQuery = `\n      SELECT \n        symbol,\n        date,\n        item_name,\n        value\n      FROM ${tableName}\n      WHERE UPPER(symbol) = UPPER($1)\n      ORDER BY date DESC, item_name\n      LIMIT 200\n    `;\n    \n    const result = await query(balanceSheetQuery, [ticker.toUpperCase()]);\n    \n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n    \n    // Transform the normalized data into a structured format\n    const groupedData = {};\n    \n    result.rows.forEach(row => {\n      const dateKey = row.date;\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = {\n          symbol: row.symbol,\n          date: row.date,\n          items: {}\n        };\n      }\n      groupedData[dateKey].items[row.item_name] = parseFloat(row.value || 0);\n    });\n    \n    // Convert to array and add common balance sheet metrics\n    const transformedData = Object.values(groupedData).map(period => ({\n      symbol: period.symbol,\n      date: period.date,\n      totalAssets: period.items['Total Assets'] || 0,\n      totalLiabilities: period.items['Total Liabilities Net Minority Interest'] || 0,\n      stockholdersEquity: period.items['Total Equity Gross Minority Interest'] || 0,\n      cashAndCashEquivalents: period.items['Cash And Cash Equivalents'] || 0,\n      currentAssets: period.items['Total Current Assets'] || 0,\n      currentLiabilities: period.items['Total Current Liabilities'] || 0,\n      longTermDebt: period.items['Long Term Debt'] || 0,\n      workingCapital: period.items['Working Capital'] || 0,\n      retainedEarnings: period.items['Retained Earnings'] || 0,\n      commonStockEquity: period.items['Common Stock'] || 0,\n      tangibleBookValue: period.items['Tangible Book Value'] || 0,\n      netDebt: period.items['Net Debt'] || 0,\n      investedCapital: period.items['Invested Capital'] || 0,\n      items: period.items // Include all raw items for debugging\n    }));\n    \n    res.json({\n      success: true,\n      data: transformedData,\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        period,\n        count: transformedData.length,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Balance sheet fetch error:', error.message);\n    console.error('Stack:', error.stack);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch balance sheet data',\n      message: error.message,\n      details: 'Check if balance sheet table exists and contains data for this ticker'\n    });\n  }\n});\n\n// Get income statement for a ticker\nrouter.get('/:ticker/income-statement', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`Income statement request for ${ticker}, period: ${period}`);\n    \n    // Determine table name based on period\n    let tableName = 'annual_income_statement';\n    if (period === 'quarterly') {\n      tableName = 'quarterly_income_statement';\n    } else if (period === 'ttm') {\n      tableName = 'ttm_income_stmt';\n    }\n    \n    // Query the normalized income statement table\n    const incomeQuery = `\n      SELECT \n        symbol,\n        date,\n        item_name,\n        value\n      FROM ${tableName}\n      WHERE UPPER(symbol) = UPPER($1)\n      ORDER BY date DESC, item_name\n      LIMIT 200\n    `;\n    \n    const result = await query(incomeQuery, [ticker.toUpperCase()]);\n    \n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n    \n    // Transform the normalized data into a structured format\n    const groupedData = {};\n    \n    result.rows.forEach(row => {\n      const dateKey = row.date;\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = {\n          symbol: row.symbol,\n          date: row.date,\n          items: {}\n        };\n      }\n      groupedData[dateKey].items[row.item_name] = parseFloat(row.value || 0);\n    });\n    \n    // Convert to array and add common financial metrics\n    const transformedData = Object.values(groupedData).map(period => ({\n      symbol: period.symbol,\n      date: period.date,\n      revenue: period.items['Total Revenue'] || period.items['Revenue'] || 0,\n      costOfRevenue: period.items['Cost Of Revenue'] || 0,\n      grossProfit: period.items['Gross Profit'] || 0,\n      operatingIncome: period.items['Operating Income'] || 0,\n      netIncome: period.items['Net Income'] || 0,\n      ebit: period.items['EBIT'] || 0,\n      ebitda: period.items['EBITDA'] || 0,\n      items: period.items // Include all raw items for debugging\n    }));\n    \n    res.json({\n      success: true,\n      data: transformedData,\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        period,\n        count: transformedData.length,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Income statement fetch error:', error.message);\n    console.error('Stack:', error.stack);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch income statement data',\n      message: error.message,\n      details: 'Check if income statement table exists and contains data for this ticker'\n    });\n  }\n});\n\n// Get cash flow statement for a ticker\nrouter.get('/:ticker/cash-flow', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const { period = 'annual' } = req.query;\n    \n    console.log(`Cash flow request for ${ticker}, period: ${period}`);\n    \n    // Determine table name based on period\n    let tableName = 'annual_cash_flow';\n    if (period === 'quarterly') {\n      tableName = 'quarterly_cash_flow';\n    } else if (period === 'ttm') {\n      tableName = 'ttm_cashflow';\n    }\n    \n    // Query the normalized cash flow table\n    const cashFlowQuery = `\n      SELECT \n        symbol,\n        date,\n        item_name,\n        value\n      FROM ${tableName}\n      WHERE UPPER(symbol) = UPPER($1)\n      ORDER BY date DESC, item_name\n      LIMIT 200\n    `;\n    \n    const result = await query(cashFlowQuery, [ticker.toUpperCase()]);\n    \n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n    \n    // Transform the normalized data into a structured format\n    const groupedData = {};\n    \n    result.rows.forEach(row => {\n      const dateKey = row.date;\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = {\n          symbol: row.symbol,\n          date: row.date,\n          items: {}\n        };\n      }\n      groupedData[dateKey].items[row.item_name] = parseFloat(row.value || 0);\n    });\n    \n    // Convert to array and add common cash flow metrics\n    const transformedData = Object.values(groupedData).map(period => ({\n      symbol: period.symbol,\n      date: period.date,\n      operatingCashFlow: period.items['Operating Cash Flow'] || period.items['Cash Flow From Operating Activities'] || 0,\n      investingCashFlow: period.items['Investing Cash Flow'] || period.items['Cash Flow From Investing Activities'] || 0,\n      financingCashFlow: period.items['Financing Cash Flow'] || period.items['Cash Flow From Financing Activities'] || 0,\n      freeCashFlow: period.items['Free Cash Flow'] || 0,\n      capitalExpenditures: period.items['Capital Expenditure'] || period.items['Capital Expenditures'] || 0,\n      netIncome: period.items['Net Income'] || 0,\n      items: period.items // Include all raw items for debugging\n    }));\n    \n    res.json({\n      success: true,\n      data: transformedData,\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        period,\n        count: transformedData.length,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Cash flow fetch error:', error.message);\n    console.error('Stack:', error.stack);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch cash flow data',\n      message: error.message,\n      details: 'Check if cash flow table exists and contains data for this ticker'\n    });\n  }\n});\n\n// Get all financial statements for a ticker (combined)\nrouter.get('/:ticker/financials', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const { period = 'annual' } = req.query;\n    \n    // Get all three statements in parallel\n    const [balanceSheet, incomeStatement, cashFlow] = await Promise.all([\n      getFinancialStatement(ticker, 'balance_sheet', period),\n      getFinancialStatement(ticker, 'income_stmt', period),\n      getFinancialStatement(ticker, 'cash_flow', period)\n    ]);\n    \n    res.json({\n      success: true,\n      data: {\n        balance_sheet: balanceSheet,\n        income_statement: incomeStatement,\n        cash_flow: cashFlow\n      },\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        period,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n  } catch (error) {\n    console.error('Financial statements fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch financial statements',\n      message: error.message\n    });\n  }\n});\n\n// Helper function to get financial statement data\nasync function getFinancialStatement(ticker, type, period) {\n  let tableName = type;\n  if (period === 'quarterly' && type !== 'balance_sheet') {\n    tableName = `quarterly_${type}`;\n  } else if (period === 'ttm' && type !== 'balance_sheet') {\n    tableName = `ttm_${type}`;\n  } else if (period === 'quarterly' && type === 'balance_sheet') {\n    tableName = 'quarterly_balance_sheet';\n  }\n  \n  const query = `\n    SELECT \n      date,\n      item_name,\n      value,\n      fetched_at\n    FROM ${tableName}\n    WHERE UPPER(symbol) = UPPER($1)\n    ORDER BY date DESC, item_name\n  `;\n  \n  const result = await query(query, [ticker]);\n  \n  if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n    return res.status(404).json({ error: 'No data found for this query' });\n  }\n  \n  // Group by date\n  const groupedData = {};\n  result.rows.forEach(row => {\n    const dateKey = row.date.toISOString().split('T')[0];\n    if (!groupedData[dateKey]) {\n      groupedData[dateKey] = {\n        date: dateKey,\n        items: {},\n        fetched_at: row.fetched_at\n      };\n    }\n    groupedData[dateKey].items[row.item_name] = row.value;\n  });\n  \n  return Object.values(groupedData).sort((a, b) => new Date(b.date) - new Date(a.date));\n}\n\n// Health check\nrouter.get('/ping', (req, res) => {\n  res.json({ success: true, service: 'financials', timestamp: new Date().toISOString() });\n});\n\n// Get key metrics for a ticker (comprehensive financial ratios and metrics)\nrouter.get('/:ticker/key-metrics', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    \n    console.log(`Key metrics request for ${ticker}`);\n    \n    // Query the key_metrics table from loadinfo\n    const keyMetricsQuery = `\n      SELECT \n        ticker,\n        -- Valuation ratios\n        trailing_pe,\n        forward_pe,\n        price_to_sales_ttm,\n        price_to_book,\n        book_value,\n        peg_ratio,\n        \n        -- Enterprise metrics\n        enterprise_value,\n        ev_to_revenue,\n        ev_to_ebitda,\n        \n        -- Financial results\n        total_revenue,\n        net_income,\n        ebitda,\n        gross_profit,\n        \n        -- Earnings per share\n        eps_trailing,\n        eps_forward,\n        eps_current_year,\n        price_eps_current_year,\n        \n        -- Growth metrics\n        earnings_q_growth_pct,\n        revenue_growth_pct,\n        earnings_growth_pct,\n        \n        -- Cash & debt\n        total_cash,\n        cash_per_share,\n        operating_cashflow,\n        free_cashflow,\n        total_debt,\n        debt_to_equity,\n        \n        -- Liquidity ratios\n        quick_ratio,\n        current_ratio,\n        \n        -- Profitability margins\n        profit_margin_pct,\n        gross_margin_pct,\n        ebitda_margin_pct,\n        operating_margin_pct,\n        \n        -- Return metrics\n        return_on_assets_pct,\n        return_on_equity_pct,\n        \n        -- Dividend information\n        dividend_rate,\n        dividend_yield,\n        five_year_avg_dividend_yield,\n        payout_ratio\n        \n      FROM key_metrics\n      WHERE UPPER(ticker) = UPPER($1)\n    `;\n    \n    const result = await query(keyMetricsQuery, [ticker.toUpperCase()]);\n    \n    if (result.rows.length === 0) {\n      return res.json({\n        success: false,\n        error: 'No key metrics data found',\n        data: null,\n        metadata: {\n          ticker: ticker.toUpperCase(),\n          message: 'Key metrics data not available for this ticker'\n        }\n      });\n    }\n    \n    const metrics = result.rows[0];\n    \n    // Organize metrics into logical categories for better presentation\n    const organizedMetrics = {\n      valuation: {\n        title: 'Valuation Ratios',\n        icon: 'TrendingUp',\n        metrics: {\n          'P/E Ratio (Trailing)': metrics.trailing_pe,\n          'P/E Ratio (Forward)': metrics.forward_pe,\n          'Price/Sales (TTM)': metrics.price_to_sales_ttm,\n          'Price/Book': metrics.price_to_book,\n          'PEG Ratio': metrics.peg_ratio,\n          'Book Value': metrics.book_value\n        }\n      },\n      \n      enterprise: {\n        title: 'Enterprise Metrics',\n        icon: 'BusinessCenter',\n        metrics: {\n          'Enterprise Value': metrics.enterprise_value,\n          'EV/Revenue': metrics.ev_to_revenue,\n          'EV/EBITDA': metrics.ev_to_ebitda\n        }\n      },\n      \n      financial_performance: {\n        title: 'Financial Performance',\n        icon: 'Assessment',\n        metrics: {\n          'Total Revenue': metrics.total_revenue,\n          'Net Income': metrics.net_income,\n          'EBITDA': metrics.ebitda,\n          'Gross Profit': metrics.gross_profit\n        }\n      },\n      \n      earnings: {\n        title: 'Earnings Per Share',\n        icon: 'MonetizationOn',\n        metrics: {\n          'EPS (Trailing)': metrics.eps_trailing,\n          'EPS (Forward)': metrics.eps_forward,\n          'EPS (Current Year)': metrics.eps_current_year,\n          'Price/EPS Current Year': metrics.price_eps_current_year\n        }\n      },\n      \n      growth: {\n        title: 'Growth Metrics',\n        icon: 'ShowChart',\n        metrics: {\n          'Earnings Growth (Quarterly)': metrics.earnings_q_growth_pct,\n          'Revenue Growth': metrics.revenue_growth_pct,\n          'Earnings Growth': metrics.earnings_growth_pct\n        }\n      },\n      \n      cash_and_debt: {\n        title: 'Cash & Debt',\n        icon: 'AccountBalance',\n        metrics: {\n          'Total Cash': metrics.total_cash,\n          'Cash per Share': metrics.cash_per_share,\n          'Operating Cash Flow': metrics.operating_cashflow,\n          'Free Cash Flow': metrics.free_cashflow,\n          'Total Debt': metrics.total_debt,\n          'Debt to Equity': metrics.debt_to_equity\n        }\n      },\n      \n      liquidity: {\n        title: 'Liquidity Ratios',\n        icon: 'WaterDrop',\n        metrics: {\n          'Quick Ratio': metrics.quick_ratio,\n          'Current Ratio': metrics.current_ratio\n        }\n      },\n      \n      profitability: {\n        title: 'Profitability Margins',\n        icon: 'Percent',\n        metrics: {\n          'Profit Margin': metrics.profit_margin_pct,\n          'Gross Margin': metrics.gross_margin_pct,\n          'EBITDA Margin': metrics.ebitda_margin_pct,\n          'Operating Margin': metrics.operating_margin_pct\n        }\n      },\n      \n      returns: {\n        title: 'Return Metrics',\n        icon: 'TrendingUp',\n        metrics: {\n          'Return on Assets': metrics.return_on_assets_pct,\n          'Return on Equity': metrics.return_on_equity_pct\n        }\n      },\n      \n      dividends: {\n        title: 'Dividend Information',\n        icon: 'Savings',\n        metrics: {\n          'Dividend Rate': metrics.dividend_rate,\n          'Dividend Yield': metrics.dividend_yield,\n          '5-Year Avg Dividend Yield': metrics.five_year_avg_dividend_yield,\n          'Payout Ratio': metrics.payout_ratio\n        }\n      }\n    };\n    \n    // Calculate data quality score\n    const totalFields = Object.values(organizedMetrics).reduce((sum, category) => {\n      return sum + Object.keys(category.metrics).length;\n    }, 0);\n    \n    const populatedFields = Object.values(organizedMetrics).reduce((sum, category) => {\n      return sum + Object.values(category.metrics).filter(value => value !== null && value !== undefined).length;\n    }, 0);\n    \n    const dataQuality = totalFields > 0 ? (populatedFields / totalFields * 100).toFixed(1) : 0;\n    \n    res.json({\n      success: true,\n      data: organizedMetrics,\n      metadata: {\n        ticker: ticker.toUpperCase(),\n        dataQuality: `${dataQuality}%`,\n        totalMetrics: totalFields,\n        populatedMetrics: populatedFields,\n        lastUpdated: new Date().toISOString(),\n        source: 'key_metrics table via loadinfo'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Key metrics fetch error:', error.message);\n    console.error('Stack:', error.stack);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch key metrics data',\n      message: error.message,\n      details: 'Check if key_metrics table exists and contains data for this ticker'\n    });\n  }\n});\n\n// Get financial data for a specific symbol\nrouter.get('/data/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`💰 [FINANCIALS] Fetching financial data for ${symbol}`);\n  \n  try {\n    // Get comprehensive financial data\n    const dataQuery = `\n      SELECT \n        symbol,\n        date,\n        item_name,\n        value,\n        statement_type\n      FROM (\n        SELECT symbol, date, item_name, value, 'balance_sheet' as statement_type\n        FROM annual_balance_sheet \n        WHERE symbol = $1\n        UNION ALL\n        SELECT symbol, date, item_name, value, 'income_statement' as statement_type\n        FROM annual_income_statement \n        WHERE symbol = $1\n        UNION ALL\n        SELECT symbol, date, item_name, value, 'cash_flow' as statement_type\n        FROM annual_cash_flow \n        WHERE symbol = $1\n      ) combined_data\n      ORDER BY date DESC, statement_type, item_name\n      LIMIT 100\n    `;\n\n    const result = await query(dataQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No financial data found for symbol ${symbol}`\n      });\n    }\n\n    // Group by statement type\n    const groupedData = {\n      balance_sheet: [],\n      income_statement: [],\n      cash_flow: []\n    };\n\n    result.rows.forEach(row => {\n      groupedData[row.statement_type].push({\n        date: row.date,\n        item_name: row.item_name,\n        value: parseFloat(row.value || 0)\n      });\n    });\n\n    res.json({\n      success: true,\n      data: groupedData,\n      symbol: symbol.toUpperCase(),\n      count: result.rows.length\n    });\n  } catch (error) {\n    console.error(`❌ [FINANCIALS] Error fetching financial data for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch financial data',\n      details: error.message\n    });\n  }\n});\n\n// Get earnings data for a specific symbol\nrouter.get('/earnings/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`📊 [FINANCIALS] Fetching earnings data for ${symbol}`);\n  \n  try {\n    // Get earnings history\n    const earningsQuery = `\n      SELECT \n        symbol,\n        report_date,\n        actual_eps,\n        estimated_eps,\n        surprise_percent,\n        revenue_actual,\n        revenue_estimated,\n        revenue_surprise_percent\n      FROM earnings_history\n      WHERE symbol = $1\n      ORDER BY report_date DESC\n      LIMIT 20\n    `;\n\n    const result = await query(earningsQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No earnings data found for symbol ${symbol}`\n      });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      symbol: symbol.toUpperCase()\n    });\n  } catch (error) {\n    console.error(`❌ [FINANCIALS] Error fetching earnings data for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch earnings data',\n      details: error.message\n    });\n  }\n});\n\n// Get cash flow for a specific symbol (alias for existing endpoint)\nrouter.get('/cash-flow/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`💵 [FINANCIALS] Fetching cash flow for ${symbol}`);\n  \n  try {\n    // Use the existing cash flow endpoint logic\n    const cashFlowQuery = `\n      SELECT \n        symbol,\n        date,\n        item_name,\n        value\n      FROM annual_cash_flow\n      WHERE UPPER(symbol) = UPPER($1)\n      ORDER BY date DESC, item_name\n      LIMIT 100\n    `;\n    \n    const result = await query(cashFlowQuery, [symbol.toUpperCase()]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No cash flow data found for symbol ${symbol}`\n      });\n    }\n\n    // Transform the normalized data into a structured format\n    const groupedData = {};\n    \n    result.rows.forEach(row => {\n      const dateKey = row.date;\n      if (!groupedData[dateKey]) {\n        groupedData[dateKey] = {\n          symbol: row.symbol,\n          date: row.date,\n          items: {}\n        };\n      }\n      groupedData[dateKey].items[row.item_name] = parseFloat(row.value || 0);\n    });\n\n    res.json({\n      success: true,\n      data: Object.values(groupedData),\n      count: Object.keys(groupedData).length,\n      symbol: symbol.toUpperCase()\n    });\n  } catch (error) {\n    console.error(`❌ [FINANCIALS] Error fetching cash flow for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch cash flow data',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}