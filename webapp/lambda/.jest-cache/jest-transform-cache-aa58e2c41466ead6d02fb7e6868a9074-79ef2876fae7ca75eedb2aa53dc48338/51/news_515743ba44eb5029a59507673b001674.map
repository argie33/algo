{"version":3,"names":["cov_v460thdpu","actualCoverage","express","s","require","router","Router","authenticateToken","query","NewsAnalyzer","SentimentEngine","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","authRouter","use","newsAnalyzer","sentimentEngine","symbol","category","sentiment","limit","b","offset","timeframe","whereClause","params","paramIndex","timeframeMap","intervalClause","push","result","parseInt","countResult","articles","rows","map","row","id","title","content","source","author","published_at","url","score","parseFloat","sentiment_score","label","sentiment_label","confidence","sentiment_confidence","keywords","summary","impact_score","relevance_score","created_at","data","total","filters","error","console","sentimentResult","trendResult","keywordResult","sentimentAnalysis","overall_sentiment","avg_sentiment","scoreToLabel","distribution","positive","positive_count","negative","negative_count","neutral","neutral_count","total_articles","avg_impact","avg_relevance","trend","hour","article_count","keyword","frequency","marketResult","categoryResult","symbolResult","market","marketSentiment","by_category","top_symbols","impact","post","text","body","analysis","analyzeSentiment","sources","sentiment_distribution","reliability_score","calculateReliabilityScore","length","categories","trending","symbols","mention_count","module","exports"],"sources":["news.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\nconst NewsAnalyzer = require('../utils/newsAnalyzer');\nconst SentimentEngine = require('../utils/sentimentEngine');\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'news',\n    timestamp: new Date().toISOString(),\n    message: 'News service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'News API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\n\n// Apply authentication to protected routes only\nconst authRouter = express.Router();\nauthRouter.use(authenticateToken);\n\n// Initialize news analyzer and sentiment engine\nconst newsAnalyzer = new NewsAnalyzer();\nconst sentimentEngine = new SentimentEngine();\n\n// Get news articles with sentiment analysis\nrouter.get('/articles', async (req, res) => {\n  try {\n    const { \n      symbol, \n      category, \n      sentiment, \n      limit = 50, \n      offset = 0, \n      timeframe = '24h' \n    } = req.query;\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    // Parse timeframe\n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    whereClause += ` AND published_at >= NOW() - INTERVAL '${intervalClause}'`;\n    \n    if (symbol) {\n      whereClause += ` AND (symbol = $${paramIndex} OR content ILIKE $${paramIndex + 1})`;\n      params.push(symbol, `%${symbol}%`);\n      paramIndex += 2;\n    }\n    \n    if (category) {\n      whereClause += ` AND category = $${paramIndex}`;\n      params.push(category);\n      paramIndex++;\n    }\n    \n    if (sentiment) {\n      whereClause += ` AND sentiment_label = $${paramIndex}`;\n      params.push(sentiment);\n      paramIndex++;\n    }\n    \n    const result = await query(`\n      SELECT \n        na.id,\n        na.title,\n        na.content,\n        na.source,\n        na.author,\n        na.published_at,\n        na.url,\n        na.category,\n        na.symbol,\n        na.sentiment_score,\n        na.sentiment_label,\n        na.sentiment_confidence,\n        na.keywords,\n        na.summary,\n        na.impact_score,\n        na.relevance_score,\n        na.created_at\n      FROM news_articles na\n      ${whereClause}\n      ORDER BY na.published_at DESC, na.relevance_score DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `, [...params, parseInt(limit), parseInt(offset)]);\n    \n    // Get total count\n    const countResult = await query(`\n      SELECT COUNT(*) as total\n      FROM news_articles na\n      ${whereClause}\n    `, params);\n    \n    const articles = result.rows.map(row => ({\n      id: row.id,\n      title: row.title,\n      content: row.content,\n      source: row.source,\n      author: row.author,\n      published_at: row.published_at,\n      url: row.url,\n      category: row.category,\n      symbol: row.symbol,\n      sentiment: {\n        score: parseFloat(row.sentiment_score),\n        label: row.sentiment_label,\n        confidence: parseFloat(row.sentiment_confidence)\n      },\n      keywords: row.keywords,\n      summary: row.summary,\n      impact_score: parseFloat(row.impact_score),\n      relevance_score: parseFloat(row.relevance_score),\n      created_at: row.created_at\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        articles,\n        total: parseInt(countResult.rows[0].total),\n        limit: parseInt(limit),\n        offset: parseInt(offset),\n        filters: {\n          symbol,\n          category,\n          sentiment,\n          timeframe\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching news articles:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch news articles',\n      message: error.message\n    });\n  }\n});\n\n// Get sentiment analysis for a specific symbol\nrouter.get('/sentiment/:symbol', async (req, res) => {\n  try {\n    const { symbol } = req.params;\n    const { timeframe = '24h' } = req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get sentiment analysis\n    const sentimentResult = await query(`\n      SELECT \n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as total_articles,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count,\n        AVG(impact_score) as avg_impact,\n        AVG(relevance_score) as avg_relevance\n      FROM news_articles\n      WHERE symbol = $1\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n    `, [symbol]);\n    \n    // Get sentiment trend over time\n    const trendResult = await query(`\n      SELECT \n        DATE_TRUNC('hour', published_at) as hour,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE symbol = $1\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY DATE_TRUNC('hour', published_at)\n      ORDER BY hour ASC\n    `, [symbol]);\n    \n    // Get top keywords\n    const keywordResult = await query(`\n      SELECT \n        keyword,\n        COUNT(*) as frequency\n      FROM (\n        SELECT UNNEST(keywords) as keyword\n        FROM news_articles\n        WHERE symbol = $1\n        AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      ) kw\n      GROUP BY keyword\n      ORDER BY frequency DESC\n      LIMIT 10\n    `, [symbol]);\n    \n    const sentiment = sentimentResult.rows[0];\n    const sentimentAnalysis = {\n      symbol,\n      timeframe,\n      overall_sentiment: {\n        score: parseFloat(sentiment.avg_sentiment) || 0,\n        label: sentimentEngine.scoreToLabel(parseFloat(sentiment.avg_sentiment) || 0),\n        distribution: {\n          positive: parseInt(sentiment.positive_count) || 0,\n          negative: parseInt(sentiment.negative_count) || 0,\n          neutral: parseInt(sentiment.neutral_count) || 0\n        },\n        total_articles: parseInt(sentiment.total_articles) || 0,\n        avg_impact: parseFloat(sentiment.avg_impact) || 0,\n        avg_relevance: parseFloat(sentiment.avg_relevance) || 0\n      },\n      trend: trendResult.rows.map(row => ({\n        hour: row.hour,\n        sentiment: parseFloat(row.avg_sentiment),\n        article_count: parseInt(row.article_count)\n      })),\n      keywords: keywordResult.rows.map(row => ({\n        keyword: row.keyword,\n        frequency: parseInt(row.frequency)\n      }))\n    };\n    \n    res.json({\n      success: true,\n      data: sentimentAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching sentiment analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch sentiment analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get market sentiment overview\nrouter.get('/market-sentiment', async (req, res) => {\n  try {\n    const { timeframe = '24h' } = req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week',\n      '1m': '1 month'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get overall market sentiment\n    const marketResult = await query(`\n      SELECT \n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as total_articles,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n    `);\n    \n    // Get sentiment by category\n    const categoryResult = await query(`\n      SELECT \n        category,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY category\n      ORDER BY article_count DESC\n    `);\n    \n    // Get top symbols by sentiment impact\n    const symbolResult = await query(`\n      SELECT \n        symbol,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE symbol IS NOT NULL\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY symbol\n      HAVING COUNT(*) >= 3\n      ORDER BY avg_impact DESC, article_count DESC\n      LIMIT 20\n    `);\n    \n    // Get sentiment trend\n    const trendResult = await query(`\n      SELECT \n        DATE_TRUNC('hour', published_at) as hour,\n        AVG(sentiment_score) as avg_sentiment,\n        COUNT(*) as article_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY DATE_TRUNC('hour', published_at)\n      ORDER BY hour ASC\n    `);\n    \n    const market = marketResult.rows[0];\n    const marketSentiment = {\n      timeframe,\n      overall_sentiment: {\n        score: parseFloat(market.avg_sentiment) || 0,\n        label: sentimentEngine.scoreToLabel(parseFloat(market.avg_sentiment) || 0),\n        distribution: {\n          positive: parseInt(market.positive_count) || 0,\n          negative: parseInt(market.negative_count) || 0,\n          neutral: parseInt(market.neutral_count) || 0\n        },\n        total_articles: parseInt(market.total_articles) || 0\n      },\n      by_category: categoryResult.rows.map(row => ({\n        category: row.category,\n        sentiment: parseFloat(row.avg_sentiment),\n        article_count: parseInt(row.article_count),\n        label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n      })),\n      top_symbols: symbolResult.rows.map(row => ({\n        symbol: row.symbol,\n        sentiment: parseFloat(row.avg_sentiment),\n        article_count: parseInt(row.article_count),\n        impact: parseFloat(row.avg_impact),\n        label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n      })),\n      trend: trendResult.rows.map(row => ({\n        hour: row.hour,\n        sentiment: parseFloat(row.avg_sentiment),\n        article_count: parseInt(row.article_count)\n      }))\n    };\n    \n    res.json({\n      success: true,\n      data: marketSentiment\n    });\n  } catch (error) {\n    console.error('Error fetching market sentiment:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market sentiment',\n      message: error.message\n    });\n  }\n});\n\n// Analyze sentiment for custom text\nrouter.post('/analyze-sentiment', async (req, res) => {\n  try {\n    const { text, symbol } = req.body;\n    \n    if (!text) {\n      return res.status(400).json({\n        success: false,\n        error: 'Text is required for sentiment analysis'\n      });\n    }\n    \n    const analysis = await sentimentEngine.analyzeSentiment(text, symbol);\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error analyzing sentiment:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze sentiment',\n      message: error.message\n    });\n  }\n});\n\n// Get news sources and their reliability scores\nrouter.get('/sources', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        source,\n        COUNT(*) as article_count,\n        AVG(relevance_score) as avg_relevance,\n        AVG(impact_score) as avg_impact,\n        COUNT(CASE WHEN sentiment_label = 'positive' THEN 1 END) as positive_count,\n        COUNT(CASE WHEN sentiment_label = 'negative' THEN 1 END) as negative_count,\n        COUNT(CASE WHEN sentiment_label = 'neutral' THEN 1 END) as neutral_count\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '7 days'\n      GROUP BY source\n      ORDER BY article_count DESC\n    `);\n    \n    const sources = result.rows.map(row => ({\n      source: row.source,\n      article_count: parseInt(row.article_count),\n      avg_relevance: parseFloat(row.avg_relevance),\n      avg_impact: parseFloat(row.avg_impact),\n      sentiment_distribution: {\n        positive: parseInt(row.positive_count),\n        negative: parseInt(row.negative_count),\n        neutral: parseInt(row.neutral_count)\n      },\n      reliability_score: newsAnalyzer.calculateReliabilityScore(row.source)\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        sources,\n        total: sources.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching news sources:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch news sources',\n      message: error.message\n    });\n  }\n});\n\n// Get news categories\nrouter.get('/categories', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        category,\n        COUNT(*) as article_count,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE published_at >= NOW() - INTERVAL '7 days'\n      GROUP BY category\n      ORDER BY article_count DESC\n    `);\n    \n    const categories = result.rows.map(row => ({\n      category: row.category,\n      article_count: parseInt(row.article_count),\n      avg_sentiment: parseFloat(row.avg_sentiment),\n      avg_impact: parseFloat(row.avg_impact),\n      sentiment_label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        categories,\n        total: categories.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching news categories:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch news categories',\n      message: error.message\n    });\n  }\n});\n\n// Get trending topics\nrouter.get('/trending', async (req, res) => {\n  try {\n    const { timeframe = '24h', limit = 10 } = req.query;\n    \n    const timeframeMap = {\n      '1h': '1 hour',\n      '6h': '6 hours',\n      '24h': '24 hours',\n      '3d': '3 days',\n      '1w': '1 week'\n    };\n    \n    const intervalClause = timeframeMap[timeframe] || '24 hours';\n    \n    // Get trending keywords\n    const keywordResult = await query(`\n      SELECT \n        keyword,\n        COUNT(*) as frequency,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM (\n        SELECT \n          UNNEST(keywords) as keyword,\n          sentiment_score,\n          impact_score\n        FROM news_articles\n        WHERE published_at >= NOW() - INTERVAL '${intervalClause}'\n      ) kw\n      GROUP BY keyword\n      HAVING COUNT(*) >= 3\n      ORDER BY frequency DESC, avg_impact DESC\n      LIMIT $1\n    `, [parseInt(limit)]);\n    \n    // Get trending symbols\n    const symbolResult = await query(`\n      SELECT \n        symbol,\n        COUNT(*) as mention_count,\n        AVG(sentiment_score) as avg_sentiment,\n        AVG(impact_score) as avg_impact\n      FROM news_articles\n      WHERE symbol IS NOT NULL\n      AND published_at >= NOW() - INTERVAL '${intervalClause}'\n      GROUP BY symbol\n      ORDER BY mention_count DESC, avg_impact DESC\n      LIMIT $1\n    `, [parseInt(limit)]);\n    \n    const trending = {\n      timeframe,\n      keywords: keywordResult.rows.map(row => ({\n        keyword: row.keyword,\n        frequency: parseInt(row.frequency),\n        avg_sentiment: parseFloat(row.avg_sentiment),\n        avg_impact: parseFloat(row.avg_impact),\n        sentiment_label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n      })),\n      symbols: symbolResult.rows.map(row => ({\n        symbol: row.symbol,\n        mention_count: parseInt(row.mention_count),\n        avg_sentiment: parseFloat(row.avg_sentiment),\n        avg_impact: parseFloat(row.avg_impact),\n        sentiment_label: sentimentEngine.scoreToLabel(parseFloat(row.avg_sentiment))\n      }))\n    };\n    \n    res.json({\n      success: true,\n      data: trending\n    });\n  } catch (error) {\n    console.error('Error fetching trending topics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch trending topics',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC;AAAkB,CAAC;AAAA;AAAA,CAAAP,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAM;EAAEI;AAAM,CAAC;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMK,YAAY;AAAA;AAAA,CAAAT,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAMM,eAAe;AAAA;AAAA,CAAAV,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;;AAE3D;AAAA;AAAAJ,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAClCU,GAAG,CAACE,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,aAAa;IACrBC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAC5BU,GAAG,CAACE,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACbM,OAAO,EAAE,kBAAkB;IAC3BH,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCJ,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMM,UAAU;AAAA;AAAA,CAAAvB,aAAA,GAAAG,CAAA,QAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;AAAC;AAAAN,aAAA,GAAAG,CAAA;AACpCoB,UAAU,CAACC,GAAG,CAACjB,iBAAiB,CAAC;;AAEjC;AACA,MAAMkB,YAAY;AAAA;AAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAG,IAAIM,YAAY,CAAC,CAAC;AACvC,MAAMiB,eAAe;AAAA;AAAA,CAAA1B,aAAA,GAAAG,CAAA,QAAG,IAAIO,eAAe,CAAC,CAAC;;AAE7C;AAAA;AAAAV,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAC1C,IAAI;IACF,MAAM;MACJwB,MAAM;MACNC,QAAQ;MACRC,SAAS;MACTC,KAAK;MAAA;MAAA,CAAA9B,aAAA,GAAA+B,CAAA,UAAG,EAAE;MACVC,MAAM;MAAA;MAAA,CAAAhC,aAAA,GAAA+B,CAAA,UAAG,CAAC;MACVE,SAAS;MAAA;MAAA,CAAAjC,aAAA,GAAA+B,CAAA,UAAG,KAAK;IACnB,CAAC;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA,QAAGS,GAAG,CAACJ,KAAK;IAEb,IAAI0B,WAAW;IAAA;IAAA,CAAAlC,aAAA,GAAAG,CAAA,QAAG,WAAW;IAC7B,MAAMgC,MAAM;IAAA;IAAA,CAAAnC,aAAA,GAAAG,CAAA,QAAG,EAAE;IACjB,IAAIiC,UAAU;IAAA;IAAA,CAAApC,aAAA,GAAAG,CAAA,QAAG,CAAC;;IAElB;IACA,MAAMkC,YAAY;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAG;MACnB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,SAAS;MACf,KAAK,EAAE,UAAU;MACjB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;IACR,CAAC;IAED,MAAMmC,cAAc;IAAA;IAAA,CAAAtC,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA+B,CAAA,UAAAM,YAAY,CAACJ,SAAS,CAAC;IAAA;IAAA,CAAAjC,aAAA,GAAA+B,CAAA,UAAI,UAAU;IAAC;IAAA/B,aAAA,GAAAG,CAAA;IAC7D+B,WAAW,IAAI,0CAA0CI,cAAc,GAAG;IAAC;IAAAtC,aAAA,GAAAG,CAAA;IAE3E,IAAIwB,MAAM,EAAE;MAAA;MAAA3B,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAG,CAAA;MACV+B,WAAW,IAAI,mBAAmBE,UAAU,sBAAsBA,UAAU,GAAG,CAAC,GAAG;MAAC;MAAApC,aAAA,GAAAG,CAAA;MACpFgC,MAAM,CAACI,IAAI,CAACZ,MAAM,EAAE,IAAIA,MAAM,GAAG,CAAC;MAAC;MAAA3B,aAAA,GAAAG,CAAA;MACnCiC,UAAU,IAAI,CAAC;IACjB,CAAC;IAAA;IAAA;MAAApC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAG,CAAA;IAED,IAAIyB,QAAQ,EAAE;MAAA;MAAA5B,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAG,CAAA;MACZ+B,WAAW,IAAI,oBAAoBE,UAAU,EAAE;MAAC;MAAApC,aAAA,GAAAG,CAAA;MAChDgC,MAAM,CAACI,IAAI,CAACX,QAAQ,CAAC;MAAC;MAAA5B,aAAA,GAAAG,CAAA;MACtBiC,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAApC,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAG,CAAA;IAED,IAAI0B,SAAS,EAAE;MAAA;MAAA7B,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAG,CAAA;MACb+B,WAAW,IAAI,2BAA2BE,UAAU,EAAE;MAAC;MAAApC,aAAA,GAAAG,CAAA;MACvDgC,MAAM,CAACI,IAAI,CAACV,SAAS,CAAC;MAAC;MAAA7B,aAAA,GAAAG,CAAA;MACvBiC,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAApC,aAAA,GAAA+B,CAAA;IAAA;IAED,MAAMS,MAAM;IAAA;IAAA,CAAAxC,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ0B,WAAW;AACnB;AACA,eAAeE,UAAU,YAAYA,UAAU,GAAG,CAAC;AACnD,KAAK,EAAE,CAAC,GAAGD,MAAM,EAAEM,QAAQ,CAACX,KAAK,CAAC,EAAEW,QAAQ,CAACT,MAAM,CAAC,CAAC,CAAC;;IAElD;IACA,MAAMU,WAAW;IAAA;IAAA,CAAA1C,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACpC;AACA;AACA,QAAQ0B,WAAW;AACnB,KAAK,EAAEC,MAAM,CAAC;IAEV,MAAMQ,QAAQ;IAAA;IAAA,CAAA3C,aAAA,GAAAG,CAAA,QAAGqC,MAAM,CAACI,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;MAAA;MAAA9C,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAG,CAAA;MAAA;QACvC4C,EAAE,EAAED,GAAG,CAACC,EAAE;QACVC,KAAK,EAAEF,GAAG,CAACE,KAAK;QAChBC,OAAO,EAAEH,GAAG,CAACG,OAAO;QACpBC,MAAM,EAAEJ,GAAG,CAACI,MAAM;QAClBC,MAAM,EAAEL,GAAG,CAACK,MAAM;QAClBC,YAAY,EAAEN,GAAG,CAACM,YAAY;QAC9BC,GAAG,EAAEP,GAAG,CAACO,GAAG;QACZzB,QAAQ,EAAEkB,GAAG,CAAClB,QAAQ;QACtBD,MAAM,EAAEmB,GAAG,CAACnB,MAAM;QAClBE,SAAS,EAAE;UACTyB,KAAK,EAAEC,UAAU,CAACT,GAAG,CAACU,eAAe,CAAC;UACtCC,KAAK,EAAEX,GAAG,CAACY,eAAe;UAC1BC,UAAU,EAAEJ,UAAU,CAACT,GAAG,CAACc,oBAAoB;QACjD,CAAC;QACDC,QAAQ,EAAEf,GAAG,CAACe,QAAQ;QACtBC,OAAO,EAAEhB,GAAG,CAACgB,OAAO;QACpBC,YAAY,EAAER,UAAU,CAACT,GAAG,CAACiB,YAAY,CAAC;QAC1CC,eAAe,EAAET,UAAU,CAACT,GAAG,CAACkB,eAAe,CAAC;QAChDC,UAAU,EAAEnB,GAAG,CAACmB;MAClB,CAAC;IAAD,CAAE,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAEJU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAE;QACJvB,QAAQ;QACRwB,KAAK,EAAE1B,QAAQ,CAACC,WAAW,CAACE,IAAI,CAAC,CAAC,CAAC,CAACuB,KAAK,CAAC;QAC1CrC,KAAK,EAAEW,QAAQ,CAACX,KAAK,CAAC;QACtBE,MAAM,EAAES,QAAQ,CAACT,MAAM,CAAC;QACxBoC,OAAO,EAAE;UACPzC,MAAM;UACNC,QAAQ;UACRC,SAAS;UACTI;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOoC,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACtDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,+BAA+B;MACtC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EACnD,IAAI;IACF,MAAM;MAAEwB;IAAO,CAAC;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAGS,GAAG,CAACuB,MAAM;IAC7B,MAAM;MAAEF,SAAS;MAAA;MAAA,CAAAjC,aAAA,GAAA+B,CAAA,UAAG,KAAK;IAAC,CAAC;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA,QAAGS,GAAG,CAACJ,KAAK;IAEvC,MAAM6B,YAAY;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAG;MACnB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,SAAS;MACf,KAAK,EAAE,UAAU;MACjB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;IACR,CAAC;IAED,MAAMmC,cAAc;IAAA;IAAA,CAAAtC,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA+B,CAAA,UAAAM,YAAY,CAACJ,SAAS,CAAC;IAAA;IAAA,CAAAjC,aAAA,GAAA+B,CAAA,UAAI,UAAU;;IAE5D;IACA,MAAMwC,eAAe;IAAA;IAAA,CAAAvE,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C8B,cAAc;AAC5D,KAAK,EAAE,CAACX,MAAM,CAAC,CAAC;;IAEZ;IACA,MAAM6C,WAAW;IAAA;IAAA,CAAAxE,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C8B,cAAc;AAC5D;AACA;AACA,KAAK,EAAE,CAACX,MAAM,CAAC,CAAC;;IAEZ;IACA,MAAM8C,aAAa;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD8B,cAAc;AAC9D;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACX,MAAM,CAAC,CAAC;IAEZ,MAAME,SAAS;IAAA;IAAA,CAAA7B,aAAA,GAAAG,CAAA,QAAGoE,eAAe,CAAC3B,IAAI,CAAC,CAAC,CAAC;IACzC,MAAM8B,iBAAiB;IAAA;IAAA,CAAA1E,aAAA,GAAAG,CAAA,QAAG;MACxBwB,MAAM;MACNM,SAAS;MACT0C,iBAAiB,EAAE;QACjBrB,KAAK;QAAE;QAAA,CAAAtD,aAAA,GAAA+B,CAAA,UAAAwB,UAAU,CAAC1B,SAAS,CAAC+C,aAAa,CAAC;QAAA;QAAA,CAAA5E,aAAA,GAAA+B,CAAA,UAAI,CAAC;QAC/C0B,KAAK,EAAE/B,eAAe,CAACmD,YAAY;QAAC;QAAA,CAAA7E,aAAA,GAAA+B,CAAA,WAAAwB,UAAU,CAAC1B,SAAS,CAAC+C,aAAa,CAAC;QAAA;QAAA,CAAA5E,aAAA,GAAA+B,CAAA,WAAI,CAAC,EAAC;QAC7E+C,YAAY,EAAE;UACZC,QAAQ;UAAE;UAAA,CAAA/E,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACZ,SAAS,CAACmD,cAAc,CAAC;UAAA;UAAA,CAAAhF,aAAA,GAAA+B,CAAA,WAAI,CAAC;UACjDkD,QAAQ;UAAE;UAAA,CAAAjF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACZ,SAAS,CAACqD,cAAc,CAAC;UAAA;UAAA,CAAAlF,aAAA,GAAA+B,CAAA,WAAI,CAAC;UACjDoD,OAAO;UAAE;UAAA,CAAAnF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACZ,SAAS,CAACuD,aAAa,CAAC;UAAA;UAAA,CAAApF,aAAA,GAAA+B,CAAA,WAAI,CAAC;QACjD,CAAC;QACDsD,cAAc;QAAE;QAAA,CAAArF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACZ,SAAS,CAACwD,cAAc,CAAC;QAAA;QAAA,CAAArF,aAAA,GAAA+B,CAAA,WAAI,CAAC;QACvDuD,UAAU;QAAE;QAAA,CAAAtF,aAAA,GAAA+B,CAAA,WAAAwB,UAAU,CAAC1B,SAAS,CAACyD,UAAU,CAAC;QAAA;QAAA,CAAAtF,aAAA,GAAA+B,CAAA,WAAI,CAAC;QACjDwD,aAAa;QAAE;QAAA,CAAAvF,aAAA,GAAA+B,CAAA,WAAAwB,UAAU,CAAC1B,SAAS,CAAC0D,aAAa,CAAC;QAAA;QAAA,CAAAvF,aAAA,GAAA+B,CAAA,WAAI,CAAC;MACzD,CAAC;MACDyD,KAAK,EAAEhB,WAAW,CAAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UAClCsF,IAAI,EAAE3C,GAAG,CAAC2C,IAAI;UACd5D,SAAS,EAAE0B,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UACxCc,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa;QAC3C,CAAC;MAAD,CAAE,CAAC;MACH7B,QAAQ,EAAEY,aAAa,CAAC7B,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UACvCwF,OAAO,EAAE7C,GAAG,CAAC6C,OAAO;UACpBC,SAAS,EAAEnD,QAAQ,CAACK,GAAG,CAAC8C,SAAS;QACnC,CAAC;MAAD,CAAE;IACJ,CAAC;IAAC;IAAA5F,aAAA,GAAAG,CAAA;IAEFU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAEQ;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IAC3DU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,oCAAoC;MAC3C/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAClD,IAAI;IACF,MAAM;MAAE8B,SAAS;MAAA;MAAA,CAAAjC,aAAA,GAAA+B,CAAA,WAAG,KAAK;IAAC,CAAC;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA,QAAGS,GAAG,CAACJ,KAAK;IAEvC,MAAM6B,YAAY;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAG;MACnB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,SAAS;MACf,KAAK,EAAE,UAAU;MACjB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;IACR,CAAC;IAED,MAAMmC,cAAc;IAAA;IAAA,CAAAtC,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA+B,CAAA,WAAAM,YAAY,CAACJ,SAAS,CAAC;IAAA;IAAA,CAAAjC,aAAA,GAAA+B,CAAA,WAAI,UAAU;;IAE5D;IACA,MAAM8D,YAAY;IAAA;IAAA,CAAA7F,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD8B,cAAc;AAC9D,KAAK,CAAC;;IAEF;IACA,MAAMwD,cAAc;IAAA;IAAA,CAAA9F,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,gDAAgD8B,cAAc;AAC9D;AACA;AACA,KAAK,CAAC;;IAEF;IACA,MAAMyD,YAAY;IAAA;IAAA,CAAA/F,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C8B,cAAc;AAC5D;AACA;AACA;AACA;AACA,KAAK,CAAC;;IAEF;IACA,MAAMkC,WAAW;IAAA;IAAA,CAAAxE,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,gDAAgD8B,cAAc;AAC9D;AACA;AACA,KAAK,CAAC;IAEF,MAAM0D,MAAM;IAAA;IAAA,CAAAhG,aAAA,GAAAG,CAAA,QAAG0F,YAAY,CAACjD,IAAI,CAAC,CAAC,CAAC;IACnC,MAAMqD,eAAe;IAAA;IAAA,CAAAjG,aAAA,GAAAG,CAAA,QAAG;MACtB8B,SAAS;MACT0C,iBAAiB,EAAE;QACjBrB,KAAK;QAAE;QAAA,CAAAtD,aAAA,GAAA+B,CAAA,WAAAwB,UAAU,CAACyC,MAAM,CAACpB,aAAa,CAAC;QAAA;QAAA,CAAA5E,aAAA,GAAA+B,CAAA,WAAI,CAAC;QAC5C0B,KAAK,EAAE/B,eAAe,CAACmD,YAAY;QAAC;QAAA,CAAA7E,aAAA,GAAA+B,CAAA,WAAAwB,UAAU,CAACyC,MAAM,CAACpB,aAAa,CAAC;QAAA;QAAA,CAAA5E,aAAA,GAAA+B,CAAA,WAAI,CAAC,EAAC;QAC1E+C,YAAY,EAAE;UACZC,QAAQ;UAAE;UAAA,CAAA/E,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACuD,MAAM,CAAChB,cAAc,CAAC;UAAA;UAAA,CAAAhF,aAAA,GAAA+B,CAAA,WAAI,CAAC;UAC9CkD,QAAQ;UAAE;UAAA,CAAAjF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACuD,MAAM,CAACd,cAAc,CAAC;UAAA;UAAA,CAAAlF,aAAA,GAAA+B,CAAA,WAAI,CAAC;UAC9CoD,OAAO;UAAE;UAAA,CAAAnF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACuD,MAAM,CAACZ,aAAa,CAAC;UAAA;UAAA,CAAApF,aAAA,GAAA+B,CAAA,WAAI,CAAC;QAC9C,CAAC;QACDsD,cAAc;QAAE;QAAA,CAAArF,aAAA,GAAA+B,CAAA,WAAAU,QAAQ,CAACuD,MAAM,CAACX,cAAc,CAAC;QAAA;QAAA,CAAArF,aAAA,GAAA+B,CAAA,WAAI,CAAC;MACtD,CAAC;MACDmE,WAAW,EAAEJ,cAAc,CAAClD,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UAC3CyB,QAAQ,EAAEkB,GAAG,CAAClB,QAAQ;UACtBC,SAAS,EAAE0B,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UACxCc,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa,CAAC;UAC1CjC,KAAK,EAAE/B,eAAe,CAACmD,YAAY,CAACtB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;QACnE,CAAC;MAAD,CAAE,CAAC;MACHuB,WAAW,EAAEJ,YAAY,CAACnD,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UACzCwB,MAAM,EAAEmB,GAAG,CAACnB,MAAM;UAClBE,SAAS,EAAE0B,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UACxCc,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa,CAAC;UAC1CU,MAAM,EAAE7C,UAAU,CAACT,GAAG,CAACwC,UAAU,CAAC;UAClC7B,KAAK,EAAE/B,eAAe,CAACmD,YAAY,CAACtB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;QACnE,CAAC;MAAD,CAAE,CAAC;MACHY,KAAK,EAAEhB,WAAW,CAAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UAClCsF,IAAI,EAAE3C,GAAG,CAAC2C,IAAI;UACd5D,SAAS,EAAE0B,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UACxCc,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa;QAC3C,CAAC;MAAD,CAAE;IACJ,CAAC;IAAC;IAAA1F,aAAA,GAAAG,CAAA;IAEFU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAE+B;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO5B,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACzDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,kCAAkC;MACzC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACgG,IAAI,CAAC,oBAAoB,EAAE,OAAOzF,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM;MAAEmG,IAAI;MAAE3E;IAAO,CAAC;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAGS,GAAG,CAAC2F,IAAI;IAAC;IAAAvG,aAAA,GAAAG,CAAA;IAElC,IAAI,CAACmG,IAAI,EAAE;MAAA;MAAAtG,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAG,CAAA;MACT,OAAOU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdqD,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAArE,aAAA,GAAA+B,CAAA;IAAA;IAED,MAAMyE,QAAQ;IAAA;IAAA,CAAAxG,aAAA,GAAAG,CAAA,QAAG,MAAMuB,eAAe,CAAC+E,gBAAgB,CAACH,IAAI,EAAE3E,MAAM,CAAC;IAAC;IAAA3B,aAAA,GAAAG,CAAA;IAEtEU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAEsC;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnC,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACnDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,6BAA6B;MACpC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EACzC,IAAI;IACF,MAAMqC,MAAM;IAAA;IAAA,CAAAxC,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMkG,OAAO;IAAA;IAAA,CAAA1G,aAAA,GAAAG,CAAA,QAAGqC,MAAM,CAACI,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;MAAA;MAAA9C,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAG,CAAA;MAAA;QACtC+C,MAAM,EAAEJ,GAAG,CAACI,MAAM;QAClBwC,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa,CAAC;QAC1CH,aAAa,EAAEhC,UAAU,CAACT,GAAG,CAACyC,aAAa,CAAC;QAC5CD,UAAU,EAAE/B,UAAU,CAACT,GAAG,CAACwC,UAAU,CAAC;QACtCqB,sBAAsB,EAAE;UACtB5B,QAAQ,EAAEtC,QAAQ,CAACK,GAAG,CAACkC,cAAc,CAAC;UACtCC,QAAQ,EAAExC,QAAQ,CAACK,GAAG,CAACoC,cAAc,CAAC;UACtCC,OAAO,EAAE1C,QAAQ,CAACK,GAAG,CAACsC,aAAa;QACrC,CAAC;QACDwB,iBAAiB,EAAEnF,YAAY,CAACoF,yBAAyB,CAAC/D,GAAG,CAACI,MAAM;MACtE,CAAC;IAAD,CAAE,CAAC;IAAC;IAAAlD,aAAA,GAAAG,CAAA;IAEJU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAE;QACJwC,OAAO;QACPvC,KAAK,EAAEuC,OAAO,CAACI;MACjB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOzC,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACrDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,8BAA8B;MACrC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,aAAa,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAC5C,IAAI;IACF,MAAMqC,MAAM;IAAA;IAAA,CAAAxC,aAAA,GAAAG,CAAA,QAAG,MAAMK,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMuG,UAAU;IAAA;IAAA,CAAA/G,aAAA,GAAAG,CAAA,QAAGqC,MAAM,CAACI,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;MAAA;MAAA9C,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAG,CAAA;MAAA;QACzCyB,QAAQ,EAAEkB,GAAG,CAAClB,QAAQ;QACtB8D,aAAa,EAAEjD,QAAQ,CAACK,GAAG,CAAC4C,aAAa,CAAC;QAC1Cd,aAAa,EAAErB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;QAC5CU,UAAU,EAAE/B,UAAU,CAACT,GAAG,CAACwC,UAAU,CAAC;QACtC5B,eAAe,EAAEhC,eAAe,CAACmD,YAAY,CAACtB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;MAC7E,CAAC;IAAD,CAAE,CAAC;IAAC;IAAA5E,aAAA,GAAAG,CAAA;IAEJU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAE;QACJ6C,UAAU;QACV5C,KAAK,EAAE4C,UAAU,CAACD;MACpB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOzC,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACxDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,iCAAiC;MACxC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACM,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAb,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EAC1C,IAAI;IACF,MAAM;MAAE8B,SAAS;MAAA;MAAA,CAAAjC,aAAA,GAAA+B,CAAA,WAAG,KAAK;MAAED,KAAK;MAAA;MAAA,CAAA9B,aAAA,GAAA+B,CAAA,WAAG,EAAE;IAAC,CAAC;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA,SAAGS,GAAG,CAACJ,KAAK;IAEnD,MAAM6B,YAAY;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,SAAG;MACnB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,SAAS;MACf,KAAK,EAAE,UAAU;MACjB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;IACR,CAAC;IAED,MAAMmC,cAAc;IAAA;IAAA,CAAAtC,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA+B,CAAA,WAAAM,YAAY,CAACJ,SAAS,CAAC;IAAA;IAAA,CAAAjC,aAAA,GAAA+B,CAAA,WAAI,UAAU;;IAE5D;IACA,MAAM0C,aAAa;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,SAAG,MAAMK,KAAK,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD8B,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACG,QAAQ,CAACX,KAAK,CAAC,CAAC,CAAC;;IAErB;IACA,MAAMiE,YAAY;IAAA;IAAA,CAAA/F,aAAA,GAAAG,CAAA,SAAG,MAAMK,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C8B,cAAc;AAC5D;AACA;AACA;AACA,KAAK,EAAE,CAACG,QAAQ,CAACX,KAAK,CAAC,CAAC,CAAC;IAErB,MAAMkF,QAAQ;IAAA;IAAA,CAAAhH,aAAA,GAAAG,CAAA,SAAG;MACf8B,SAAS;MACT4B,QAAQ,EAAEY,aAAa,CAAC7B,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UACvCwF,OAAO,EAAE7C,GAAG,CAAC6C,OAAO;UACpBC,SAAS,EAAEnD,QAAQ,CAACK,GAAG,CAAC8C,SAAS,CAAC;UAClChB,aAAa,EAAErB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UAC5CU,UAAU,EAAE/B,UAAU,CAACT,GAAG,CAACwC,UAAU,CAAC;UACtC5B,eAAe,EAAEhC,eAAe,CAACmD,YAAY,CAACtB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;QAC7E,CAAC;MAAD,CAAE,CAAC;MACHqC,OAAO,EAAElB,YAAY,CAACnD,IAAI,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAAA;UACrCwB,MAAM,EAAEmB,GAAG,CAACnB,MAAM;UAClBuF,aAAa,EAAEzE,QAAQ,CAACK,GAAG,CAACoE,aAAa,CAAC;UAC1CtC,aAAa,EAAErB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;UAC5CU,UAAU,EAAE/B,UAAU,CAACT,GAAG,CAACwC,UAAU,CAAC;UACtC5B,eAAe,EAAEhC,eAAe,CAACmD,YAAY,CAACtB,UAAU,CAACT,GAAG,CAAC8B,aAAa,CAAC;QAC7E,CAAC;MAAD,CAAE;IACJ,CAAC;IAAC;IAAA5E,aAAA,GAAAG,CAAA;IAEFU,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkD,IAAI,EAAE8C;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO3C,KAAK,EAAE;IAAA;IAAArE,aAAA,GAAAG,CAAA;IACdmE,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAArE,aAAA,GAAAG,CAAA;IACxDU,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdqD,KAAK,EAAE,iCAAiC;MACxC/C,OAAO,EAAE+C,KAAK,CAAC/C;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAAtB,aAAA,GAAAG,CAAA;AAEHgH,MAAM,CAACC,OAAO,GAAG/G,MAAM","ignoreList":[]}