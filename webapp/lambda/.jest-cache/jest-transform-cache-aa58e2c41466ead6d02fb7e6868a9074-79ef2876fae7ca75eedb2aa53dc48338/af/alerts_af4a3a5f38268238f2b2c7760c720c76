795a0eb49703094f77a636aa3d13122b
/* istanbul ignore next */
function cov_ocnzwc2in() {
  var path = "/home/stocks/algo/webapp/lambda/routes/alerts.js";
  var hash = "ec0e052f35c29f00d7e1e3c404c627f22336f100";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/alerts.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 30
        },
        end: {
          line: 2,
          column: 59
        }
      },
      "2": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 46
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 31
        }
      },
      "4": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "5": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "6": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 30
        }
      },
      "7": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "8": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 97,
          column: 3
        }
      },
      "9": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "10": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      "11": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 56
        }
      },
      "12": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 96,
          column: 7
        }
      },
      "13": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 228,
          column: 3
        }
      },
      "14": {
        start: {
          line: 102,
          column: 2
        },
        end: {
          line: 227,
          column: 3
        }
      },
      "15": {
        start: {
          line: 103,
          column: 19
        },
        end: {
          line: 103,
          column: 31
        }
      },
      "16": {
        start: {
          line: 104,
          column: 18
        },
        end: {
          line: 104,
          column: 49
        }
      },
      "17": {
        start: {
          line: 105,
          column: 19
        },
        end: {
          line: 105,
          column: 50
        }
      },
      "18": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 106,
          column: 50
        }
      },
      "19": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "20": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 110,
          column: 44
        }
      },
      "21": {
        start: {
          line: 111,
          column: 19
        },
        end: {
          line: 111,
          column: 27
        }
      },
      "22": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "23": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 46
        }
      },
      "24": {
        start: {
          line: 117,
          column: 21
        },
        end: {
          line: 132,
          column: 36
        }
      },
      "25": {
        start: {
          line: 134,
          column: 26
        },
        end: {
          line: 138,
          column: 16
        }
      },
      "26": {
        start: {
          line: 140,
          column: 28
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "27": {
        start: {
          line: 140,
          column: 61
        },
        end: {
          line: 153,
          column: 7
        }
      },
      "28": {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "29": {
        start: {
          line: 168,
          column: 6
        },
        end: {
          line: 168,
          column: 96
        }
      },
      "30": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 204,
          column: 7
        }
      },
      "31": {
        start: {
          line: 206,
          column: 6
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "32": {
        start: {
          line: 208,
          column: 57
        },
        end: {
          line: 208,
          column: 66
        }
      },
      "33": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 58
        }
      },
      "34": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 226,
          column: 7
        }
      },
      "35": {
        start: {
          line: 230,
          column: 0
        },
        end: {
          line: 230,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 17
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 22
          }
        },
        loc: {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 101,
            column: 29
          },
          end: {
            line: 101,
            column: 30
          }
        },
        loc: {
          start: {
            line: 101,
            column: 49
          },
          end: {
            line: 228,
            column: 1
          }
        },
        line: 101
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 140,
            column: 45
          }
        },
        loc: {
          start: {
            line: 140,
            column: 61
          },
          end: {
            line: 153,
            column: 7
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 208,
            column: 52
          },
          end: {
            line: 208,
            column: 53
          }
        },
        loc: {
          start: {
            line: 208,
            column: 57
          },
          end: {
            line: 208,
            column: 66
          }
        },
        line: 208
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 104,
            column: 18
          },
          end: {
            line: 104,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 18
          },
          end: {
            line: 104,
            column: 43
          }
        }, {
          start: {
            line: 104,
            column: 47
          },
          end: {
            line: 104,
            column: 49
          }
        }],
        line: 104
      },
      "1": {
        loc: {
          start: {
            line: 105,
            column: 19
          },
          end: {
            line: 105,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 19
          },
          end: {
            line: 105,
            column: 45
          }
        }, {
          start: {
            line: 105,
            column: 49
          },
          end: {
            line: 105,
            column: 50
          }
        }],
        line: 105
      },
      "2": {
        loc: {
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 115,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 115,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "3": {
        loc: {
          start: {
            line: 150,
            column: 18
          },
          end: {
            line: 152,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 45
          }
        }, {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 33
          }
        }],
        line: 150
      },
      "4": {
        loc: {
          start: {
            line: 208,
            column: 14
          },
          end: {
            line: 208,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 208,
            column: 67
          }
        }, {
          start: {
            line: 208,
            column: 70
          },
          end: {
            line: 208,
            column: 87
          }
        }],
        line: 208
      },
      "5": {
        loc: {
          start: {
            line: 210,
            column: 17
          },
          end: {
            line: 210,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 30
          },
          end: {
            line: 210,
            column: 31
          }
        }, {
          start: {
            line: 210,
            column: 34
          },
          end: {
            line: 210,
            column: 35
          }
        }],
        line: 210
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ec0e052f35c29f00d7e1e3c404c627f22336f100"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ocnzwc2in = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ocnzwc2in();
const express =
/* istanbul ignore next */
(cov_ocnzwc2in().s[0]++, require('express'));
const {
  authenticateToken
} =
/* istanbul ignore next */
(cov_ocnzwc2in().s[1]++, require('../middleware/auth'));
const {
  query
} =
/* istanbul ignore next */
(cov_ocnzwc2in().s[2]++, require('../utils/database'));
const router =
/* istanbul ignore next */
(cov_ocnzwc2in().s[3]++, express.Router());

// Root alerts endpoint for health checks
/* istanbul ignore next */
cov_ocnzwc2in().s[4]++;
router.get('/', (req, res) => {
  /* istanbul ignore next */
  cov_ocnzwc2in().f[0]++;
  cov_ocnzwc2in().s[5]++;
  res.json({
    success: true,
    data: {
      system: 'Alerts API',
      version: '1.0.0',
      status: 'operational',
      available_endpoints: ['GET /alerts - List user alerts', 'GET /alerts/types - Alert type definitions', 'GET /alerts/notifications - User notifications', 'POST /alerts - Create new alert', 'DELETE /alerts/:id - Delete alert'],
      timestamp: new Date().toISOString()
    }
  });
});

// Apply authentication to all other routes
/* istanbul ignore next */
cov_ocnzwc2in().s[6]++;
router.use(authenticateToken);

// Get alert types
/* istanbul ignore next */
cov_ocnzwc2in().s[7]++;
router.get('/types', (req, res) => {
  /* istanbul ignore next */
  cov_ocnzwc2in().f[1]++;
  cov_ocnzwc2in().s[8]++;
  try {
    const alertTypes =
    /* istanbul ignore next */
    (cov_ocnzwc2in().s[9]++, [{
      id: 'price_target',
      name: 'Price Target',
      description: 'Alert when stock reaches target price',
      category: 'price',
      parameters: ['symbol', 'target_price', 'condition'],
      conditions: ['above', 'below', 'crosses']
    }, {
      id: 'volume_spike',
      name: 'Volume Spike',
      description: 'Alert on unusual trading volume',
      category: 'volume',
      parameters: ['symbol', 'volume_threshold', 'percentage'],
      conditions: ['above_average', 'percentage_increase']
    }, {
      id: 'technical_indicator',
      name: 'Technical Indicator',
      description: 'Alert based on technical analysis signals',
      category: 'technical',
      parameters: ['symbol', 'indicator', 'condition', 'value'],
      conditions: ['overbought', 'oversold', 'breakout', 'breakdown']
    }, {
      id: 'earnings_announcement',
      name: 'Earnings Announcement',
      description: 'Alert before earnings releases',
      category: 'fundamental',
      parameters: ['symbol', 'days_before'],
      conditions: ['upcoming', 'pre_market', 'after_market']
    }, {
      id: 'analyst_upgrade',
      name: 'Analyst Rating Change',
      description: 'Alert on analyst upgrades/downgrades',
      category: 'analyst',
      parameters: ['symbol', 'rating_change'],
      conditions: ['upgrade', 'downgrade', 'any_change']
    }, {
      id: 'news_sentiment',
      name: 'News Sentiment',
      description: 'Alert on significant news sentiment changes',
      category: 'sentiment',
      parameters: ['symbol', 'sentiment_score', 'threshold'],
      conditions: ['positive', 'negative', 'neutral']
    }]);
    /* istanbul ignore next */
    cov_ocnzwc2in().s[10]++;
    res.json({
      success: true,
      data: alertTypes,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ocnzwc2in().s[11]++;
    console.error('Error fetching alert types:', error);
    /* istanbul ignore next */
    cov_ocnzwc2in().s[12]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch alert types',
      details: error.message
    });
  }
});

// Get user notifications
/* istanbul ignore next */
cov_ocnzwc2in().s[13]++;
router.get('/notifications', async (req, res) => {
  /* istanbul ignore next */
  cov_ocnzwc2in().f[2]++;
  cov_ocnzwc2in().s[14]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_ocnzwc2in().s[15]++, req.user.sub);
    const limit =
    /* istanbul ignore next */
    (cov_ocnzwc2in().s[16]++,
    /* istanbul ignore next */
    (cov_ocnzwc2in().b[0][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_ocnzwc2in().b[0][1]++, 50));
    const offset =
    /* istanbul ignore next */
    (cov_ocnzwc2in().s[17]++,
    /* istanbul ignore next */
    (cov_ocnzwc2in().b[1][0]++, parseInt(req.query.offset)) ||
    /* istanbul ignore next */
    (cov_ocnzwc2in().b[1][1]++, 0));
    const unreadOnly =
    /* istanbul ignore next */
    (cov_ocnzwc2in().s[18]++, req.query.unread === 'true');

    // Try to get notifications from database
    /* istanbul ignore next */
    cov_ocnzwc2in().s[19]++;
    try {
      let whereClause =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[20]++, 'WHERE user_id = $1');
      let params =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[21]++, [userId]);
      /* istanbul ignore next */
      cov_ocnzwc2in().s[22]++;
      if (unreadOnly) {
        /* istanbul ignore next */
        cov_ocnzwc2in().b[2][0]++;
        cov_ocnzwc2in().s[23]++;
        whereClause += ' AND read_at IS NULL';
      } else
      /* istanbul ignore next */
      {
        cov_ocnzwc2in().b[2][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[24]++, await query(`
        SELECT 
          id,
          alert_id,
          title,
          message,
          category,
          priority,
          read_at,
          created_at,
          metadata
        FROM alert_notifications
        ${whereClause}
        ORDER BY created_at DESC
        LIMIT $${params.length + 1} OFFSET $${params.length + 2}
      `, [...params, limit, offset]));
      const countResult =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[25]++, await query(`
        SELECT COUNT(*) as total
        FROM alert_notifications
        ${whereClause}
      `, params));
      const notifications =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[26]++, result.rows.map(notification => {
        /* istanbul ignore next */
        cov_ocnzwc2in().f[3]++;
        cov_ocnzwc2in().s[27]++;
        return {
          id: notification.id,
          alertId: notification.alert_id,
          title: notification.title,
          message: notification.message,
          category: notification.category,
          priority: notification.priority,
          isRead: !!notification.read_at,
          readAt: notification.read_at,
          createdAt: notification.created_at,
          metadata: typeof notification.metadata === 'string' ?
          /* istanbul ignore next */
          (cov_ocnzwc2in().b[3][0]++, JSON.parse(notification.metadata)) :
          /* istanbul ignore next */
          (cov_ocnzwc2in().b[3][1]++, notification.metadata)
        };
      }));
      /* istanbul ignore next */
      cov_ocnzwc2in().s[28]++;
      res.json({
        success: true,
        data: notifications,
        pagination: {
          total: parseInt(countResult.rows[0].total),
          limit,
          offset,
          hasMore: offset + notifications.length < parseInt(countResult.rows[0].total)
        },
        timestamp: new Date().toISOString()
      });
    } catch (dbError) {
      /* istanbul ignore next */
      cov_ocnzwc2in().s[29]++;
      console.log('Database query failed for notifications, using mock data:', dbError.message);

      // Return mock notifications if database fails
      const mockNotifications =
      /* istanbul ignore next */
      (cov_ocnzwc2in().s[30]++, [{
        id: 'notif-1',
        alertId: 'alert-1',
        title: 'Price Alert Triggered',
        message: 'AAPL has reached your target price of $175.00',
        category: 'price',
        priority: 'high',
        isRead: false,
        readAt: null,
        createdAt: new Date().toISOString(),
        metadata: {
          symbol: 'AAPL',
          currentPrice: 175.50,
          targetPrice: 175.00
        }
      }, {
        id: 'notif-2',
        alertId: 'alert-2',
        title: 'Volume Spike Detected',
        message: 'TSLA is experiencing unusual trading volume',
        category: 'volume',
        priority: 'medium',
        isRead: true,
        readAt: new Date(Date.now() - 3600000).toISOString(),
        createdAt: new Date(Date.now() - 7200000).toISOString(),
        metadata: {
          symbol: 'TSLA',
          currentVolume: 85000000,
          averageVolume: 45000000
        }
      }]);
      /* istanbul ignore next */
      cov_ocnzwc2in().s[31]++;
      res.json({
        success: true,
        data: unreadOnly ?
        /* istanbul ignore next */
        (cov_ocnzwc2in().b[4][0]++, mockNotifications.filter(n => {
          /* istanbul ignore next */
          cov_ocnzwc2in().f[4]++;
          cov_ocnzwc2in().s[32]++;
          return !n.isRead;
        })) :
        /* istanbul ignore next */
        (cov_ocnzwc2in().b[4][1]++, mockNotifications),
        pagination: {
          total: unreadOnly ?
          /* istanbul ignore next */
          (cov_ocnzwc2in().b[5][0]++, 1) :
          /* istanbul ignore next */
          (cov_ocnzwc2in().b[5][1]++, 2),
          limit,
          offset,
          hasMore: false
        },
        note: 'Mock notifications - database connectivity issue',
        timestamp: new Date().toISOString()
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_ocnzwc2in().s[33]++;
    console.error('Error fetching notifications:', error);
    /* istanbul ignore next */
    cov_ocnzwc2in().s[34]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch notifications',
      details: error.message
    });
  }
});
/* istanbul ignore next */
cov_ocnzwc2in().s[35]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,