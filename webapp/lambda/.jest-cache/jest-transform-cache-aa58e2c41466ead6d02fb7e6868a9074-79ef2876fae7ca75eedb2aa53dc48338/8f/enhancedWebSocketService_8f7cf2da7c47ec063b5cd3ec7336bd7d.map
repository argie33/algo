{"version":3,"names":["cov_1lugbwhenf","actualCoverage","RealtimeDataPipeline","s","require","createRequestLogger","getTimeout","AlpacaService","EnhancedWebSocketService","constructor","options","b","f","maxConnections","connectionTimeout","heartbeatInterval","reconnectAttempts","reconnectDelay","dataSourceOptions","bufferSize","flushInterval","batchSize","compressionEnabled","performanceMonitoring","dataPipeline","connections","Map","userConnections","alpacaConnections","metrics","totalConnections","activeConnections","totalSubscriptions","dataMessages","errorCount","reconnectCount","startTime","Date","now","logger","info","startPeriodicCleanup","createConnection","userId","symbols","connectionId","Math","random","toString","substr","substring","size","Error","connection","id","Set","dataTypes","compression","throttle","status","createdAt","lastActivity","subscriptionId","alpacaConnection","heartbeatTimer","set","has","get","add","addSubscription","establishAlpacaConnection","startHeartbeat","Array","from","error","message","cleanupConnection","existingConnection","addSymbolsToAlpacaConnection","apiKeyService","credentials","getDecryptedApiKey","alpacaService","apiKey","apiSecret","isSandbox","wsConfig","getWebSocketConfig","alpacaWS","createAlpacaWebSocket","environment","Promise","resolve","reject","mockWS","lastMessage","dataGenerator","setInterval","generateMockMarketData","subscribe","newSymbols","forEach","symbol","debug","unsubscribe","removeSymbols","delete","close","clearInterval","setupAlpacaDataHandlers","mockQuote","bid","ask","bidSize","floor","askSize","timestamp","price","processIncomingData","mockTrade","conditions","exchange","symbolsToAdd","filter","length","totalSymbols","sendHeartbeat","heartbeatData","type","closeConnection","reason","removeSubscription","userConnectionSet","cleanupAlpacaConnection","cleanupStaleConnections","staleConnections","inactiveTime","push","getStatus","uptimeSeconds","uptime","seconds","formatted","formatUptime","total","active","byUser","subscriptions","errorsPerHour","connectionsPerHour","hours","minutes","secs","shutdown","connectionIds","keys","all","map","module","exports"],"sources":["enhancedWebSocketService.js"],"sourcesContent":["/**\n * Enhanced WebSocket Service\n * Provides high-performance real-time market data streaming with the optimized pipeline\n */\n\nconst { RealtimeDataPipeline } = require('./realtimeDataPipeline');\nconst { createRequestLogger } = require('./logger');\nconst { getTimeout } = require('./timeoutManager');\nconst AlpacaService = require('./alpacaService');\n\nclass EnhancedWebSocketService {\n  constructor(options = {}) {\n    this.options = {\n      maxConnections: options.maxConnections || 1000,\n      connectionTimeout: options.connectionTimeout || 30000,\n      heartbeatInterval: options.heartbeatInterval || 30000,\n      reconnectAttempts: options.reconnectAttempts || 5,\n      reconnectDelay: options.reconnectDelay || 1000,\n      dataSourceOptions: {\n        bufferSize: 2000,\n        flushInterval: 500, // More aggressive flushing for real-time\n        batchSize: 200,\n        compressionEnabled: true,\n        performanceMonitoring: true\n      },\n      ...options\n    };\n\n    // Initialize the real-time data pipeline\n    this.dataPipeline = new RealtimeDataPipeline(this.options.dataSourceOptions);\n    \n    // Connection management\n    this.connections = new Map(); // connectionId -> connection details\n    this.userConnections = new Map(); // userId -> Set of connectionIds\n    this.alpacaConnections = new Map(); // userId -> AlpacaWebSocket instance\n\n    // Service metrics\n    this.metrics = {\n      totalConnections: 0,\n      activeConnections: 0,\n      totalSubscriptions: 0,\n      dataMessages: 0,\n      errorCount: 0,\n      reconnectCount: 0,\n      startTime: Date.now()\n    };\n\n    this.logger = createRequestLogger('websocket-service');\n    this.logger.info('🚀 Enhanced WebSocket Service initialized', this.options);\n\n    // Start periodic cleanup\n    this.startPeriodicCleanup();\n  }\n\n  /**\n   * Create a new connection for a user\n   */\n  async createConnection(userId, symbols, options = {}) {\n    const connectionId = `conn_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      this.logger.info('📡 Creating new connection', {\n        connectionId,\n        userId: `${userId.substring(0, 8)}...`,\n        symbols,\n        options\n      });\n\n      // Validate connection limits\n      if (this.connections.size >= this.options.maxConnections) {\n        throw new Error('Maximum connections exceeded');\n      }\n\n      // Create connection record\n      const connection = {\n        id: connectionId,\n        userId,\n        symbols: new Set(symbols),\n        options: {\n          dataTypes: ['quotes', 'trades', 'bars'],\n          compression: true,\n          throttle: 100,\n          ...options\n        },\n        status: 'connecting',\n        createdAt: Date.now(),\n        lastActivity: Date.now(),\n        subscriptionId: null,\n        alpacaConnection: null,\n        heartbeatTimer: null,\n        reconnectAttempts: 0\n      };\n\n      // Add to connection maps\n      this.connections.set(connectionId, connection);\n      \n      if (!this.userConnections.has(userId)) {\n        this.userConnections.set(userId, new Set());\n      }\n      this.userConnections.get(userId).add(connectionId);\n\n      // Create subscription in data pipeline\n      const subscriptionId = this.dataPipeline.addSubscription(\n        userId,\n        symbols,\n        connection.options.dataTypes,\n        connection.options\n      );\n      connection.subscriptionId = subscriptionId;\n\n      // Establish Alpaca connection if needed\n      await this.establishAlpacaConnection(userId, connection);\n\n      // Start heartbeat\n      this.startHeartbeat(connectionId);\n\n      // Update metrics\n      this.metrics.totalConnections++;\n      this.metrics.activeConnections++;\n      this.metrics.totalSubscriptions++;\n\n      connection.status = 'connected';\n      \n      this.logger.info('✅ Connection established successfully', {\n        connectionId,\n        subscriptionId,\n        activeConnections: this.metrics.activeConnections\n      });\n\n      return {\n        connectionId,\n        subscriptionId,\n        status: 'connected',\n        symbols: Array.from(symbols),\n        dataTypes: connection.options.dataTypes\n      };\n\n    } catch (error) {\n      this.metrics.errorCount++;\n      this.logger.error('❌ Failed to create connection', {\n        connectionId,\n        userId: `${userId.substring(0, 8)}...`,\n        error: error.message\n      });\n      \n      // Cleanup partial connection\n      await this.cleanupConnection(connectionId);\n      throw error;\n    }\n  }\n\n  /**\n   * Establish Alpaca WebSocket connection for user\n   */\n  async establishAlpacaConnection(userId, connection) {\n    try {\n      // Check if user already has an Alpaca connection\n      if (this.alpacaConnections.has(userId)) {\n        const existingConnection = this.alpacaConnections.get(userId);\n        // Reuse existing connection and add symbols\n        await this.addSymbolsToAlpacaConnection(existingConnection, connection.symbols);\n        connection.alpacaConnection = existingConnection;\n        return;\n      }\n\n      // Get user's Alpaca credentials\n      const apiKeyService = require('./apiKeyService');\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (!credentials) {\n        throw new Error('Alpaca API credentials not found for user');\n      }\n\n      // Create new Alpaca service instance\n      const alpacaService = new AlpacaService(\n        credentials.apiKey,\n        credentials.apiSecret,\n        credentials.isSandbox\n      );\n\n      // Create WebSocket connection\n      const wsConfig = alpacaService.getWebSocketConfig();\n      const alpacaWS = await this.createAlpacaWebSocket(wsConfig, userId, connection.symbols);\n      \n      // Store connection\n      this.alpacaConnections.set(userId, alpacaWS);\n      connection.alpacaConnection = alpacaWS;\n\n      this.logger.info('✅ Alpaca WebSocket connection established', {\n        userId: `${userId.substring(0, 8)}...`,\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        symbols: Array.from(connection.symbols)\n      });\n\n    } catch (error) {\n      this.logger.error('❌ Failed to establish Alpaca connection', {\n        userId: `${userId.substring(0, 8)}...`,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Create Alpaca WebSocket connection with enhanced error handling\n   */\n  async createAlpacaWebSocket(wsConfig, userId, symbols) {\n    return new Promise((resolve, reject) => {\n      try {\n        // This would be your actual Alpaca WebSocket implementation\n        // For now, we'll create a mock connection that generates test data\n        const mockWS = {\n          userId,\n          symbols: new Set(symbols),\n          status: 'connected',\n          lastMessage: Date.now(),\n          \n          // Mock data generation\n          dataGenerator: setInterval(() => {\n            this.generateMockMarketData(symbols);\n          }, 1000), // Generate data every second\n\n          // Mock methods\n          subscribe: (newSymbols) => {\n            newSymbols.forEach(symbol => mockWS.symbols.add(symbol));\n            this.logger.debug('Mock WS subscribed to new symbols', { newSymbols });\n          },\n\n          unsubscribe: (removeSymbols) => {\n            removeSymbols.forEach(symbol => mockWS.symbols.delete(symbol));\n            this.logger.debug('Mock WS unsubscribed from symbols', { removeSymbols });\n          },\n\n          close: () => {\n            if (mockWS.dataGenerator) {\n              clearInterval(mockWS.dataGenerator);\n            }\n            mockWS.status = 'closed';\n            this.logger.debug('Mock WS connection closed');\n          }\n        };\n\n        // Set up data handlers\n        this.setupAlpacaDataHandlers(mockWS);\n\n        resolve(mockWS);\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Setup data handlers for Alpaca WebSocket\n   */\n  setupAlpacaDataHandlers(alpacaWS) {\n    // In a real implementation, you'd set up event handlers for the actual WebSocket\n    // For now, we'll just log that handlers are set up\n    this.logger.debug('Alpaca WebSocket data handlers configured', {\n      userId: `${alpacaWS.userId.substring(0, 8)}...`\n    });\n  }\n\n  /**\n   * Generate mock market data for testing\n   */\n  generateMockMarketData(symbols) {\n    const now = Date.now();\n    \n    Array.from(symbols).forEach(symbol => {\n      // Generate mock quote data\n      const mockQuote = {\n        symbol,\n        bid: 100 + Math.random() * 50,\n        ask: 100 + Math.random() * 50 + 0.01,\n        bidSize: Math.floor(Math.random() * 1000) + 100,\n        askSize: Math.floor(Math.random() * 1000) + 100,\n        timestamp: now\n      };\n      mockQuote.price = (mockQuote.bid + mockQuote.ask) / 2;\n\n      // Send to data pipeline\n      this.dataPipeline.processIncomingData('quote', mockQuote);\n\n      // Occasionally generate trade data\n      if (Math.random() < 0.3) {\n        const mockTrade = {\n          symbol,\n          price: mockQuote.price + (Math.random() - 0.5) * 0.1,\n          size: Math.floor(Math.random() * 500) + 100,\n          timestamp: now,\n          conditions: ['@'],\n          exchange: 'NASDAQ'\n        };\n\n        this.dataPipeline.processIncomingData('trade', mockTrade);\n      }\n    });\n  }\n\n  /**\n   * Add symbols to existing Alpaca connection\n   */\n  async addSymbolsToAlpacaConnection(alpacaConnection, newSymbols) {\n    try {\n      const symbolsToAdd = Array.from(newSymbols).filter(\n        symbol => !alpacaConnection.symbols.has(symbol)\n      );\n\n      if (symbolsToAdd.length > 0) {\n        alpacaConnection.subscribe(symbolsToAdd);\n        this.logger.debug('Added symbols to existing Alpaca connection', {\n          symbolsToAdd,\n          totalSymbols: alpacaConnection.symbols.size\n        });\n      }\n\n    } catch (error) {\n      this.logger.error('Error adding symbols to Alpaca connection', {\n        error: error.message,\n        newSymbols: Array.from(newSymbols)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Start heartbeat for connection\n   */\n  startHeartbeat(connectionId) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    connection.heartbeatTimer = setInterval(() => {\n      this.sendHeartbeat(connectionId);\n    }, this.options.heartbeatInterval);\n  }\n\n  /**\n   * Send heartbeat to connection\n   */\n  sendHeartbeat(connectionId) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    const heartbeatData = {\n      type: 'heartbeat',\n      timestamp: Date.now(),\n      connectionId,\n      status: 'alive'\n    };\n\n    // In a real implementation, this would send via WebSocket\n    this.logger.debug('Heartbeat sent', { connectionId });\n    connection.lastActivity = Date.now();\n  }\n\n  /**\n   * Close a connection\n   */\n  async closeConnection(connectionId, reason = 'client_request') {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    try {\n      this.logger.info('🔌 Closing connection', {\n        connectionId,\n        reason,\n        userId: `${connection.userId.substring(0, 8)}...`\n      });\n\n      // Clean up heartbeat\n      if (connection.heartbeatTimer) {\n        clearInterval(connection.heartbeatTimer);\n      }\n\n      // Remove subscription from data pipeline\n      if (connection.subscriptionId) {\n        this.dataPipeline.removeSubscription(connection.subscriptionId);\n      }\n\n      // Clean up connection maps\n      await this.cleanupConnection(connectionId);\n\n      // Update metrics\n      this.metrics.activeConnections--;\n\n      this.logger.info('✅ Connection closed successfully', {\n        connectionId,\n        activeConnections: this.metrics.activeConnections\n      });\n\n    } catch (error) {\n      this.logger.error('❌ Error closing connection', {\n        connectionId,\n        error: error.message\n      });\n    }\n  }\n\n  /**\n   * Cleanup connection from all maps\n   */\n  async cleanupConnection(connectionId) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return;\n\n    // Remove from connections map\n    this.connections.delete(connectionId);\n\n    // Remove from user connections map\n    const userConnectionSet = this.userConnections.get(connection.userId);\n    if (userConnectionSet) {\n      userConnectionSet.delete(connectionId);\n      \n      // If user has no more connections, cleanup Alpaca connection\n      if (userConnectionSet.size === 0) {\n        this.userConnections.delete(connection.userId);\n        await this.cleanupAlpacaConnection(connection.userId);\n      }\n    }\n  }\n\n  /**\n   * Cleanup Alpaca connection for user\n   */\n  async cleanupAlpacaConnection(userId) {\n    const alpacaConnection = this.alpacaConnections.get(userId);\n    if (alpacaConnection) {\n      try {\n        alpacaConnection.close();\n        this.alpacaConnections.delete(userId);\n        \n        this.logger.info('🔌 Alpaca connection cleaned up', {\n          userId: `${userId.substring(0, 8)}...`\n        });\n      } catch (error) {\n        this.logger.error('❌ Error cleaning up Alpaca connection', {\n          userId: `${userId.substring(0, 8)}...`,\n          error: error.message\n        });\n      }\n    }\n  }\n\n  /**\n   * Start periodic cleanup of stale connections\n   */\n  startPeriodicCleanup() {\n    setInterval(() => {\n      this.cleanupStaleConnections();\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Clean up stale connections\n   */\n  cleanupStaleConnections() {\n    const now = Date.now();\n    const staleConnections = [];\n\n    for (const [connectionId, connection] of this.connections) {\n      const inactiveTime = now - connection.lastActivity;\n      \n      // Consider connection stale if inactive for more than 5 minutes\n      if (inactiveTime > 300000) {\n        staleConnections.push(connectionId);\n      }\n    }\n\n    if (staleConnections.length > 0) {\n      this.logger.info('🧹 Cleaning up stale connections', {\n        staleConnections: staleConnections.length,\n        totalConnections: this.connections.size\n      });\n\n      staleConnections.forEach(connectionId => {\n        this.closeConnection(connectionId, 'stale_connection');\n      });\n    }\n  }\n\n  /**\n   * Get service status and metrics\n   */\n  getStatus() {\n    const now = Date.now();\n    const uptimeSeconds = (now - this.metrics.startTime) / 1000;\n\n    return {\n      status: 'active',\n      uptime: {\n        seconds: uptimeSeconds,\n        formatted: this.formatUptime(uptimeSeconds)\n      },\n      connections: {\n        total: this.metrics.totalConnections,\n        active: this.metrics.activeConnections,\n        byUser: this.userConnections.size\n      },\n      subscriptions: {\n        total: this.metrics.totalSubscriptions,\n        active: this.dataPipeline.subscriptions.size\n      },\n      metrics: {\n        ...this.metrics,\n        errorsPerHour: this.metrics.errorCount / (uptimeSeconds / 3600),\n        connectionsPerHour: this.metrics.totalConnections / (uptimeSeconds / 3600)\n      },\n      dataPipeline: this.dataPipeline.getStatus(),\n      alpacaConnections: this.alpacaConnections.size\n    };\n  }\n\n  /**\n   * Format uptime in human-readable format\n   */\n  formatUptime(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return `${hours}h ${minutes}m ${secs}s`;\n  }\n\n  /**\n   * Shutdown the service\n   */\n  async shutdown() {\n    this.logger.info('🛑 Shutting down Enhanced WebSocket Service');\n\n    // Close all connections\n    const connectionIds = Array.from(this.connections.keys());\n    await Promise.all(\n      connectionIds.map(id => this.closeConnection(id, 'service_shutdown'))\n    );\n\n    // Shutdown data pipeline\n    this.dataPipeline.shutdown();\n\n    // Clean up Alpaca connections\n    for (const userId of this.alpacaConnections.keys()) {\n      await this.cleanupAlpacaConnection(userId);\n    }\n\n    this.logger.info('✅ Enhanced WebSocket Service shutdown completed');\n  }\n}\n\nmodule.exports = { EnhancedWebSocketService };"],"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","ignoreList":[]}