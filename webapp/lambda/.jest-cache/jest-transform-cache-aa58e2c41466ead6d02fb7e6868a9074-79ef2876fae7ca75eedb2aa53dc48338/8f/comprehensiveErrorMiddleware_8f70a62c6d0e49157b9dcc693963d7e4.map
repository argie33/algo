{"version":3,"names":["cov_1kxrv6ix1w","actualCoverage","comprehensiveErrorHandler","s","require","globalErrorHandler","error","req","res","next","f","headersSent","b","context","method","url","originalUrl","userAgent","get","ip","timestamp","Date","toISOString","headers","body","params","query","user","id","email","errorResponse","handleError","statusCode","getHttpStatusCode","status","json","success","errorId","message","category","severity","canRetry","canRecover","process","env","NODE_ENV","stack","diagnostics","meta","requestId","asyncErrorHandler","fn","Promise","resolve","catch","databaseErrorHandler","operation","enhancedError","Error","originalError","code","errno","sqlState","sqlMessage","apiErrorHandler","endpoint","response","responseData","data","validationErrorHandler","validationResult","field","errors","array","errorMessages","map","err","param","msg","join","validationErrors","authErrorHandler","authCode","networkErrorHandler","service","fileSystemErrorHandler","path","performanceErrorHandler","duration","threshold","configErrorHandler","configKey","circuitBreakerErrorHandler","state","statusMap","errorMonitoringMiddleware","startTime","now","originalJson","performanceError","logger","warn","call","healthCheckErrorHandler","checks","failedChecks","filter","check","healthy","length","c","name","module","exports"],"sources":["comprehensiveErrorMiddleware.js"],"sourcesContent":["/**\n * Comprehensive Error Handling Middleware\n * Intercepts all errors in the webapp and provides detailed diagnostics\n */\n\nconst comprehensiveErrorHandler = require('../utils/comprehensiveErrorHandler');\n\n/**\n * Global error handler middleware\n */\nconst globalErrorHandler = (error, req, res, next) => {\n    // Skip if response already sent\n    if (res.headersSent) {\n        return next(error);\n    }\n\n    // Add request context\n    const context = {\n        method: req.method,\n        url: req.originalUrl,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip,\n        timestamp: new Date().toISOString(),\n        headers: req.headers,\n        body: req.body,\n        params: req.params,\n        query: req.query,\n        user: req.user ? { id: req.user.id, email: req.user.email } : null\n    };\n\n    // Handle the error comprehensively\n    const errorResponse = comprehensiveErrorHandler.handleError(error, context);\n    \n    // Determine appropriate HTTP status\n    const statusCode = getHttpStatusCode(errorResponse);\n    \n    // Send comprehensive error response\n    res.status(statusCode).json({\n        success: false,\n        error: {\n            id: errorResponse.errorId,\n            message: errorResponse.message,\n            category: errorResponse.category,\n            severity: errorResponse.severity,\n            canRetry: errorResponse.canRecover,\n            timestamp: new Date().toISOString(),\n            ...(process.env.NODE_ENV === 'development' && {\n                stack: error.stack,\n                diagnostics: errorResponse.diagnostics\n            })\n        },\n        meta: {\n            requestId: req.id || 'unknown',\n            method: req.method,\n            url: req.originalUrl\n        }\n    });\n};\n\n/**\n * Async error wrapper for route handlers\n */\nconst asyncErrorHandler = (fn) => {\n    return (req, res, next) => {\n        Promise.resolve(fn(req, res, next)).catch(next);\n    };\n};\n\n/**\n * Database error handler\n */\nconst databaseErrorHandler = (error, operation = 'database operation') => {\n    const enhancedError = new Error(`Database ${operation} failed: ${error.message}`);\n    enhancedError.originalError = error;\n    enhancedError.operation = operation;\n    enhancedError.category = 'DATABASE_ERROR';\n    enhancedError.code = error.code;\n    enhancedError.errno = error.errno;\n    enhancedError.sqlState = error.sqlState;\n    enhancedError.sqlMessage = error.sqlMessage;\n    \n    return enhancedError;\n};\n\n/**\n * API error handler\n */\nconst apiErrorHandler = (error, endpoint = 'unknown endpoint') => {\n    const enhancedError = new Error(`API call to ${endpoint} failed: ${error.message}`);\n    enhancedError.originalError = error;\n    enhancedError.endpoint = endpoint;\n    enhancedError.category = 'API_ERROR';\n    enhancedError.statusCode = error.response?.status;\n    enhancedError.responseData = error.response?.data;\n    \n    return enhancedError;\n};\n\n/**\n * Validation error handler\n */\nconst validationErrorHandler = (validationResult, field = 'input') => {\n    const errors = validationResult.array ? validationResult.array() : [validationResult];\n    const errorMessages = errors.map(err => `${err.param}: ${err.msg}`).join(', ');\n    \n    const enhancedError = new Error(`Validation failed for ${field}: ${errorMessages}`);\n    enhancedError.category = 'VALIDATION_ERROR';\n    enhancedError.validationErrors = errors;\n    enhancedError.field = field;\n    \n    return enhancedError;\n};\n\n/**\n * Authentication error handler\n */\nconst authErrorHandler = (message = 'Authentication failed', code = 'AUTH_FAILED') => {\n    const enhancedError = new Error(message);\n    enhancedError.category = 'AUTH_ERROR';\n    enhancedError.authCode = code;\n    \n    return enhancedError;\n};\n\n/**\n * Network error handler\n */\nconst networkErrorHandler = (error, service = 'external service') => {\n    const enhancedError = new Error(`Network error connecting to ${service}: ${error.message}`);\n    enhancedError.originalError = error;\n    enhancedError.service = service;\n    enhancedError.category = 'NETWORK_ERROR';\n    enhancedError.code = error.code;\n    enhancedError.errno = error.errno;\n    \n    return enhancedError;\n};\n\n/**\n * File system error handler\n */\nconst fileSystemErrorHandler = (error, operation = 'file operation') => {\n    const enhancedError = new Error(`File system ${operation} failed: ${error.message}`);\n    enhancedError.originalError = error;\n    enhancedError.operation = operation;\n    enhancedError.category = 'FILESYSTEM_ERROR';\n    enhancedError.code = error.code;\n    enhancedError.path = error.path;\n    \n    return enhancedError;\n};\n\n/**\n * Performance error handler\n */\nconst performanceErrorHandler = (operation, duration, threshold) => {\n    const enhancedError = new Error(`Performance issue: ${operation} took ${duration}ms (threshold: ${threshold}ms)`);\n    enhancedError.category = 'PERFORMANCE_ERROR';\n    enhancedError.operation = operation;\n    enhancedError.duration = duration;\n    enhancedError.threshold = threshold;\n    \n    return enhancedError;\n};\n\n/**\n * Configuration error handler\n */\nconst configErrorHandler = (configKey, message = 'Configuration error') => {\n    const enhancedError = new Error(`${message}: ${configKey}`);\n    enhancedError.category = 'CONFIG_ERROR';\n    enhancedError.configKey = configKey;\n    \n    return enhancedError;\n};\n\n/**\n * Circuit breaker error handler\n */\nconst circuitBreakerErrorHandler = (service, state) => {\n    const enhancedError = new Error(`Circuit breaker ${state} for service: ${service}`);\n    enhancedError.category = 'CIRCUIT_BREAKER_ERROR';\n    enhancedError.service = service;\n    enhancedError.state = state;\n    \n    return enhancedError;\n};\n\n/**\n * Get appropriate HTTP status code for error category\n */\nfunction getHttpStatusCode(errorResponse) {\n    const statusMap = {\n        'AUTH_ERROR': 401,\n        'VALIDATION_ERROR': 400,\n        'NETWORK_ERROR': 503,\n        'API_ERROR': 502,\n        'DATABASE_ERROR': 503,\n        'PERFORMANCE_ERROR': 503,\n        'CONFIG_ERROR': 500,\n        'FILESYSTEM_ERROR': 500,\n        'CIRCUIT_BREAKER_ERROR': 503,\n        'UNKNOWN_ERROR': 500\n    };\n\n    return statusMap[errorResponse.category] || 500;\n}\n\n/**\n * Error monitoring middleware\n */\nconst errorMonitoringMiddleware = (req, res, next) => {\n    // Track response time\n    const startTime = Date.now();\n    \n    // Override res.json to capture response details\n    const originalJson = res.json;\n    res.json = function(body) {\n        const duration = Date.now() - startTime;\n        \n        // Log slow responses\n        if (duration > 5000) {\n            const performanceError = performanceErrorHandler(\n                `${req.method} ${req.originalUrl}`,\n                duration,\n                5000\n            );\n            comprehensiveErrorHandler.handleError(performanceError, {\n                method: req.method,\n                url: req.originalUrl,\n                duration,\n                statusCode: res.statusCode\n            });\n        }\n        \n        // Log error responses\n        if (res.statusCode >= 400) {\n            comprehensiveErrorHandler.logger.warn('Error Response', {\n                method: req.method,\n                url: req.originalUrl,\n                statusCode: res.statusCode,\n                duration,\n                body: body\n            });\n        }\n        \n        return originalJson.call(this, body);\n    };\n    \n    next();\n};\n\n/**\n * Health check error handler\n */\nconst healthCheckErrorHandler = (checks) => {\n    const failedChecks = checks.filter(check => !check.healthy);\n    \n    if (failedChecks.length > 0) {\n        const enhancedError = new Error(`Health check failed: ${failedChecks.map(c => c.name).join(', ')}`);\n        enhancedError.category = 'HEALTH_CHECK_ERROR';\n        enhancedError.failedChecks = failedChecks;\n        \n        return enhancedError;\n    }\n    \n    return null;\n};\n\nmodule.exports = {\n    globalErrorHandler,\n    asyncErrorHandler,\n    databaseErrorHandler,\n    apiErrorHandler,\n    validationErrorHandler,\n    authErrorHandler,\n    networkErrorHandler,\n    fileSystemErrorHandler,\n    performanceErrorHandler,\n    configErrorHandler,\n    circuitBreakerErrorHandler,\n    errorMonitoringMiddleware,\n    healthCheckErrorHandler\n};"],"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","ignoreList":[]}