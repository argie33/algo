a654dd6da042a3fbb283148a7abfb943
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleSet = void 0;
const u = "required",
  v = "fn",
  w = "argv",
  x = "ref";
const a = true,
  b = "isSet",
  c = "booleanEquals",
  d = "error",
  e = "endpoint",
  f = "tree",
  g = "PartitionResult",
  h = "getAttr",
  i = {
    [u]: false,
    "type": "String"
  },
  j = {
    [u]: true,
    "default": false,
    "type": "Boolean"
  },
  k = {
    [x]: "Endpoint"
  },
  l = {
    [v]: c,
    [w]: [{
      [x]: "UseFIPS"
    }, true]
  },
  m = {
    [v]: c,
    [w]: [{
      [x]: "UseDualStack"
    }, true]
  },
  n = {},
  o = {
    [v]: h,
    [w]: [{
      [x]: g
    }, "supportsFIPS"]
  },
  p = {
    [x]: g
  },
  q = {
    [v]: c,
    [w]: [true, {
      [v]: h,
      [w]: [p, "supportsDualStack"]
    }]
  },
  r = [l],
  s = [m],
  t = [{
    [x]: "Region"
  }];
const _data = {
  version: "1.0",
  parameters: {
    Region: i,
    UseDualStack: j,
    UseFIPS: j,
    Endpoint: i
  },
  rules: [{
    conditions: [{
      [v]: b,
      [w]: [k]
    }],
    rules: [{
      conditions: r,
      error: "Invalid Configuration: FIPS and custom endpoint are not supported",
      type: d
    }, {
      conditions: s,
      error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
      type: d
    }, {
      endpoint: {
        url: k,
        properties: n,
        headers: n
      },
      type: e
    }],
    type: f
  }, {
    conditions: [{
      [v]: b,
      [w]: t
    }],
    rules: [{
      conditions: [{
        [v]: "aws.partition",
        [w]: t,
        assign: g
      }],
      rules: [{
        conditions: [l, m],
        rules: [{
          conditions: [{
            [v]: c,
            [w]: [a, o]
          }, q],
          rules: [{
            endpoint: {
              url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
              properties: n,
              headers: n
            },
            type: e
          }],
          type: f
        }, {
          error: "FIPS and DualStack are enabled, but this partition does not support one or both",
          type: d
        }],
        type: f
      }, {
        conditions: r,
        rules: [{
          conditions: [{
            [v]: c,
            [w]: [o, a]
          }],
          rules: [{
            conditions: [{
              [v]: "stringEquals",
              [w]: [{
                [v]: h,
                [w]: [p, "name"]
              }, "aws-us-gov"]
            }],
            endpoint: {
              url: "https://ssm.{Region}.amazonaws.com",
              properties: n,
              headers: n
            },
            type: e
          }, {
            endpoint: {
              url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}",
              properties: n,
              headers: n
            },
            type: e
          }],
          type: f
        }, {
          error: "FIPS is enabled but this partition does not support FIPS",
          type: d
        }],
        type: f
      }, {
        conditions: s,
        rules: [{
          conditions: [q],
          rules: [{
            endpoint: {
              url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}",
              properties: n,
              headers: n
            },
            type: e
          }],
          type: f
        }, {
          error: "DualStack is enabled but this partition does not support DualStack",
          type: d
        }],
        type: f
      }, {
        endpoint: {
          url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}",
          properties: n,
          headers: n
        },
        type: e
      }],
      type: f
    }],
    type: f
  }, {
    error: "Invalid Configuration: Missing Region",
    type: d
  }]
};
exports.ruleSet = _data;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJ1bGVTZXQiLCJ1IiwidiIsInciLCJ4IiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJpIiwiaiIsImsiLCJsIiwibSIsIm4iLCJvIiwicCIsInEiLCJyIiwicyIsInQiLCJfZGF0YSIsInZlcnNpb24iLCJwYXJhbWV0ZXJzIiwiUmVnaW9uIiwiVXNlRHVhbFN0YWNrIiwiVXNlRklQUyIsIkVuZHBvaW50IiwicnVsZXMiLCJjb25kaXRpb25zIiwiZXJyb3IiLCJ0eXBlIiwiZW5kcG9pbnQiLCJ1cmwiLCJwcm9wZXJ0aWVzIiwiaGVhZGVycyIsImFzc2lnbiJdLCJzb3VyY2VzIjpbInJ1bGVzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJ1bGVTZXQgPSB2b2lkIDA7XG5jb25zdCB1ID0gXCJyZXF1aXJlZFwiLCB2ID0gXCJmblwiLCB3ID0gXCJhcmd2XCIsIHggPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IFwiZ2V0QXR0clwiLCBpID0geyBbdV06IGZhbHNlLCBcInR5cGVcIjogXCJTdHJpbmdcIiB9LCBqID0geyBbdV06IHRydWUsIFwiZGVmYXVsdFwiOiBmYWxzZSwgXCJ0eXBlXCI6IFwiQm9vbGVhblwiIH0sIGsgPSB7IFt4XTogXCJFbmRwb2ludFwiIH0sIGwgPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRklQU1wiIH0sIHRydWVdIH0sIG0gPSB7IFt2XTogYywgW3ddOiBbeyBbeF06IFwiVXNlRHVhbFN0YWNrXCIgfSwgdHJ1ZV0gfSwgbiA9IHt9LCBvID0geyBbdl06IGgsIFt3XTogW3sgW3hdOiBnIH0sIFwic3VwcG9ydHNGSVBTXCJdIH0sIHAgPSB7IFt4XTogZyB9LCBxID0geyBbdl06IGMsIFt3XTogW3RydWUsIHsgW3ZdOiBoLCBbd106IFtwLCBcInN1cHBvcnRzRHVhbFN0YWNrXCJdIH1dIH0sIHIgPSBbbF0sIHMgPSBbbV0sIHQgPSBbeyBbeF06IFwiUmVnaW9uXCIgfV07XG5jb25zdCBfZGF0YSA9IHsgdmVyc2lvbjogXCIxLjBcIiwgcGFyYW1ldGVyczogeyBSZWdpb246IGksIFVzZUR1YWxTdGFjazogaiwgVXNlRklQUzogaiwgRW5kcG9pbnQ6IGkgfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYiwgW3ddOiBba10gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiByLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgY29uZGl0aW9uczogcywgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBrLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogdCB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogXCJhd3MucGFydGl0aW9uXCIsIFt3XTogdCwgYXNzaWduOiBnIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2wsIG1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBjLCBbd106IFthLCBvXSB9LCBxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3NzbS1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGFuZCBEdWFsU3RhY2sgYXJlIGVuYWJsZWQsIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IG9uZSBvciBib3RoXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiByLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBjLCBbd106IFtvLCBhXSB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogXCJzdHJpbmdFcXVhbHNcIiwgW3ddOiBbeyBbdl06IGgsIFt3XTogW3AsIFwibmFtZVwiXSB9LCBcImF3cy11cy1nb3ZcIl0gfV0sIGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3NzbS57UmVnaW9ufS5hbWF6b25hd3MuY29tXCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3NzbS1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRklQU1wiLCB0eXBlOiBkIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogcywgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtxXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3NzbS57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRHVhbFN0YWNrIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRHVhbFN0YWNrXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9zc20ue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogTWlzc2luZyBSZWdpb25cIiwgdHlwZTogZCB9XSB9O1xuZXhwb3J0cy5ydWxlU2V0ID0gX2RhdGE7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQU1DLENBQUMsR0FBRyxVQUFVO0VBQUVDLENBQUMsR0FBRyxJQUFJO0VBQUVDLENBQUMsR0FBRyxNQUFNO0VBQUVDLENBQUMsR0FBRyxLQUFLO0FBQ3JELE1BQU1DLENBQUMsR0FBRyxJQUFJO0VBQUVDLENBQUMsR0FBRyxPQUFPO0VBQUVDLENBQUMsR0FBRyxlQUFlO0VBQUVDLENBQUMsR0FBRyxPQUFPO0VBQUVDLENBQUMsR0FBRyxVQUFVO0VBQUVDLENBQUMsR0FBRyxNQUFNO0VBQUVDLENBQUMsR0FBRyxpQkFBaUI7RUFBRUMsQ0FBQyxHQUFHLFNBQVM7RUFBRUMsQ0FBQyxHQUFHO0lBQUUsQ0FBQ1osQ0FBQyxHQUFHLEtBQUs7SUFBRSxNQUFNLEVBQUU7RUFBUyxDQUFDO0VBQUVhLENBQUMsR0FBRztJQUFFLENBQUNiLENBQUMsR0FBRyxJQUFJO0lBQUUsU0FBUyxFQUFFLEtBQUs7SUFBRSxNQUFNLEVBQUU7RUFB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