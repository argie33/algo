879ad165a3fc76b8a6279779b4ace470
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveHttpAuthSchemeConfig = exports.defaultLambdaHttpAuthSchemeProvider = exports.defaultLambdaHttpAuthSchemeParametersProvider = void 0;
const core_1 = require("@aws-sdk/core");
const util_middleware_1 = require("@smithy/util-middleware");
const defaultLambdaHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: (0, util_middleware_1.getSmithyContext)(context).operation,
    region: (await (0, util_middleware_1.normalizeProvider)(config.region)()) || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
exports.defaultLambdaHttpAuthSchemeParametersProvider = defaultLambdaHttpAuthSchemeParametersProvider;
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "lambda",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
const defaultLambdaHttpAuthSchemeProvider = authParameters => {
  const options = [];
  switch (authParameters.operation) {
    default:
      {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
  }
  return options;
};
exports.defaultLambdaHttpAuthSchemeProvider = defaultLambdaHttpAuthSchemeProvider;
const resolveHttpAuthSchemeConfig = config => {
  const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
  return Object.assign(config_0, {
    authSchemePreference: (0, util_middleware_1.normalizeProvider)(config.authSchemePreference ?? [])
  });
};
exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyIsImRlZmF1bHRMYW1iZGFIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiZGVmYXVsdExhbWJkYUh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyIiwiY29yZV8xIiwicmVxdWlyZSIsInV0aWxfbWlkZGxld2FyZV8xIiwiY29uZmlnIiwiY29udGV4dCIsImlucHV0Iiwib3BlcmF0aW9uIiwiZ2V0U21pdGh5Q29udGV4dCIsInJlZ2lvbiIsIm5vcm1hbGl6ZVByb3ZpZGVyIiwiRXJyb3IiLCJjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbiIsImF1dGhQYXJhbWV0ZXJzIiwic2NoZW1lSWQiLCJzaWduaW5nUHJvcGVydGllcyIsIm5hbWUiLCJwcm9wZXJ0aWVzRXh0cmFjdG9yIiwib3B0aW9ucyIsInB1c2giLCJjb25maWdfMCIsInJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyIsImFzc2lnbiIsImF1dGhTY2hlbWVQcmVmZXJlbmNlIl0sInNvdXJjZXMiOlsiaHR0cEF1dGhTY2hlbWVQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnID0gZXhwb3J0cy5kZWZhdWx0TGFtYmRhSHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IGV4cG9ydHMuZGVmYXVsdExhbWJkYUh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NvcmVcIik7XG5jb25zdCB1dGlsX21pZGRsZXdhcmVfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiKTtcbmNvbnN0IGRlZmF1bHRMYW1iZGFIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGFzeW5jIChjb25maWcsIGNvbnRleHQsIGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0aW9uOiAoMCwgdXRpbF9taWRkbGV3YXJlXzEuZ2V0U21pdGh5Q29udGV4dCkoY29udGV4dCkub3BlcmF0aW9uLFxuICAgICAgICByZWdpb246IChhd2FpdCAoMCwgdXRpbF9taWRkbGV3YXJlXzEubm9ybWFsaXplUHJvdmlkZXIpKGNvbmZpZy5yZWdpb24pKCkpIHx8XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdGVkIGByZWdpb25gIHRvIGJlIGNvbmZpZ3VyZWQgZm9yIGBhd3MuYXV0aCNzaWd2NGBcIik7XG4gICAgICAgICAgICB9KSgpLFxuICAgIH07XG59O1xuZXhwb3J0cy5kZWZhdWx0TGFtYmRhSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIgPSBkZWZhdWx0TGFtYmRhSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXI7XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcImxhbWJkYVwiLFxuICAgICAgICAgICAgcmVnaW9uOiBhdXRoUGFyYW1ldGVycy5yZWdpb24sXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXNFeHRyYWN0b3I6IChjb25maWcsIGNvbnRleHQpID0+ICh7XG4gICAgICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmNvbnN0IGRlZmF1bHRMYW1iZGFIdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gKGF1dGhQYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgIHN3aXRjaCAoYXV0aFBhcmFtZXRlcnMub3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydHMuZGVmYXVsdExhbWJkYUh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBkZWZhdWx0TGFtYmRhSHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbmNvbnN0IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBjb25maWdfMCA9ICgwLCBjb3JlXzEucmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnKShjb25maWcpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbmZpZ18wLCB7XG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiAoMCwgdXRpbF9taWRkbGV3YXJlXzEubm9ybWFsaXplUHJvdmlkZXIpKGNvbmZpZy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBbXSksXG4gICAgfSk7XG59O1xuZXhwb3J0cy5yZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWc7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSwyQkFBMkIsR0FBR0YsT0FBTyxDQUFDRyxtQ0FBbUMsR0FBR0gsT0FBTyxDQUFDSSw2Q0FBNkMsR0FBRyxLQUFLLENBQUM7QUFDbEosTUFBTUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3ZDLE1BQU1DLGlCQUFpQixHQUFHRCxPQUFPLENBQUMseUJBQXlCLENBQUM7QUFDNUQsTUFBTUYsNkNBQTZDLEdBQUcsTUFBQUEsQ0FBT0ksTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssS0FBSztFQUNwRixPQUFPO0lBQ0hDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRUosaUJBQWlCLENBQUNLLGdCQUFnQixFQUFFSCxPQUFPLENBQUMsQ0FBQ0UsU0FBUztJQUNyRUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRU4saUJBQWlCLENBQUNPLGlCQUFpQixFQUFFTixNQUFNLENBQUNLLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FDcEUsQ0FBQyxNQUFNO01BQ0gsTUFBTSxJQUFJRSxLQUFLLENBQUMseURBQXlELENBQUM7SUFDOUUsQ0FBQyxFQUFFO0VBQ1gsQ0FBQztBQUNMLENBQUM7QUFDRGYsT0FBTyxDQUFDSSw2Q0FBNkMsR0FBR0EsNkNBQTZDO0FBQ3JHLFNBQVNZLGdDQUFnQ0EsQ0FBQ0MsY0FBYyxFQUFFO0VBQ3RELE9BQU87SUFDSEMsUUFBUSxFQUFFLGdCQUFnQjtJQUMxQkMsaUJBQWlCLEVBQUU7TUFDZkMsSUFBSSxFQUFFLFFBQVE7TUFDZFAsTUFBTSxFQUFFSSxjQUFjLENBQUNKO0lBQzNCLENBQUM7SUFDRFEsbUJBQW1CLEVBQUVBLENBQUNiLE1BQU0sRUFBRUMsT0FBTyxNQUFNO01BQ3ZDVSxpQkFBaUIsRUFBRTtRQUNmWCxNQUFNO1FBQ05DO01BQ0o7SUFDSixDQUFDO0VBQ0wsQ0FBQztBQUNMO0FBQ0EsTUFBTU4sbUNBQW1DLEdBQUljLGNBQWMsSUFBSztFQUM1RCxNQUFNSyxPQUFPLEdBQUcsRUFBRTtFQUNsQixRQUFRTCxjQUFjLENBQUNOLFNBQVM7SUFDNUI7TUFBUztRQUNMVyxPQUFPLENBQUNDLElBQUksQ0FBQ1AsZ0NBQWdDLENBQUNDLGNBQWMsQ0FBQyxDQUFDO01BQ2xFO0VBQ0o7RUFDQSxPQUFPSyxPQUFPO0FBQ2xCLENBQUM7QUFDRHRCLE9BQU8sQ0FBQ0csbUNBQW1DLEdBQUdBLG1DQUFtQztBQUNqRixNQUFNRCwyQkFBMkIsR0FBSU0sTUFBTSxJQUFLO0VBQzVDLE1BQU1nQixRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUVuQixNQUFNLENBQUNvQix3QkFBd0IsRUFBRWpCLE1BQU0sQ0FBQztFQUM3RCxPQUFPVixNQUFNLENBQUM0QixNQUFNLENBQUNGLFFBQVEsRUFBRTtJQUMzQkcsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLEVBQUVwQixpQkFBaUIsQ0FBQ08saUJBQWlCLEVBQUVOLE1BQU0sQ0FBQ21CLG9CQUFvQixJQUFJLEVBQUU7RUFDcEcsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUNEM0IsT0FBTyxDQUFDRSwyQkFBMkIsR0FBR0EsMkJBQTJCIiwiaWdub3JlTGlzdCI6W119