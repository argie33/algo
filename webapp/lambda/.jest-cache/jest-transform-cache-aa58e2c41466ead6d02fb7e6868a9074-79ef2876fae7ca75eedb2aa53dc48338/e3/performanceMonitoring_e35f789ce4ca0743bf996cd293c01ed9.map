{"version":3,"names":["cov_2mjmroo8ho","actualCoverage","PerformanceMonitoringService","s","require","PerformanceMonitoringMiddleware","constructor","f","performanceService","activeRequests","Map","requestTrackingMiddleware","req","res","next","startTime","Date","now","requestId","Math","random","toString","substr","set","method","path","userAgent","get","ip","originalEnd","end","args","endTime","responseTime","recordRequestMetrics","delete","apply","setHeader","endpoint","normalizeEndpoint","statusCode","isError","recordMetric","contentLength","b","getHeader","timestamp","errorType","classifyError","normalized","split","replace","systemHealthMiddleware","process","nextTick","collectSystemHealthMetrics","memoryUsage","memoryUtilization","heapUsed","heapTotal","size","type","uptime","error","console","errorTrackingMiddleware","message","getPerformanceService","getActiveRequestsCount","module","exports"],"sources":["performanceMonitoring.js"],"sourcesContent":["// Performance Monitoring Middleware\n// Automatic metrics collection for response times, throughput, and system health\n\nconst PerformanceMonitoringService = require('../services/performanceMonitoringService');\n\nclass PerformanceMonitoringMiddleware {\n  constructor() {\n    this.performanceService = new PerformanceMonitoringService();\n    this.activeRequests = new Map();\n  }\n\n  // Request performance tracking middleware\n  requestTrackingMiddleware() {\n    return (req, res, next) => {\n      const startTime = Date.now();\n      const requestId = `req_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Store request start time\n      this.activeRequests.set(requestId, {\n        startTime,\n        method: req.method,\n        path: req.path,\n        userAgent: req.get('User-Agent'),\n        ip: req.ip\n      });\n      \n      // Override res.end to capture response time\n      const originalEnd = res.end;\n      res.end = (...args) => {\n        const endTime = Date.now();\n        const responseTime = endTime - startTime;\n        \n        // Record performance metrics\n        this.recordRequestMetrics(req, res, responseTime, requestId);\n        \n        // Clean up active request tracking\n        this.activeRequests.delete(requestId);\n        \n        // Call original end\n        originalEnd.apply(res, args);\n      };\n      \n      // Add request ID to response headers for tracking\n      res.setHeader('X-Request-ID', requestId);\n      \n      next();\n    };\n  }\n\n  // Record metrics for completed requests\n  recordRequestMetrics(req, res, responseTime, requestId) {\n    const endpoint = this.normalizeEndpoint(req.path);\n    const statusCode = res.statusCode;\n    const isError = statusCode >= 400;\n    \n    // Record response time metric\n    this.performanceService.recordMetric(\n      `api_response_time_${endpoint}`,\n      responseTime,\n      'api',\n      {\n        method: req.method,\n        endpoint: req.path,\n        statusCode,\n        userAgent: req.get('User-Agent'),\n        contentLength: res.getHeader('content-length') || 0,\n        requestId\n      }\n    );\n    \n    // Record throughput metric\n    this.performanceService.recordMetric(\n      'api_throughput',\n      1,\n      'api',\n      {\n        endpoint,\n        method: req.method,\n        timestamp: Date.now()\n      }\n    );\n    \n    // Record error rate if applicable\n    if (isError) {\n      this.performanceService.recordMetric(\n        `api_error_rate_${endpoint}`,\n        1,\n        'api',\n        {\n          statusCode,\n          method: req.method,\n          endpoint: req.path,\n          errorType: this.classifyError(statusCode)\n        }\n      );\n    }\n  }\n\n  // Normalize endpoint for consistent metrics\n  normalizeEndpoint(path) {\n    let normalized = path.split('?')[0];\n    normalized = normalized.replace(/\\/[0-9a-f-]{36}/gi, '/:id');\n    normalized = normalized.replace(/\\/\\d+/g, '/:id');\n    normalized = normalized.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    return normalized || 'root';\n  }\n\n  // Classify error types\n  classifyError(statusCode) {\n    if (statusCode >= 500) return 'server_error';\n    if (statusCode >= 400 && statusCode < 500) return 'client_error';\n    return 'unknown_error';\n  }\n\n  // System health monitoring middleware\n  systemHealthMiddleware() {\n    return (req, res, next) => {\n      if (Math.random() < 0.05) {\n        process.nextTick(() => {\n          this.collectSystemHealthMetrics();\n        });\n      }\n      next();\n    };\n  }\n\n  // Collect system health metrics\n  collectSystemHealthMetrics() {\n    try {\n      const memoryUsage = process.memoryUsage();\n      const memoryUtilization = memoryUsage.heapUsed / memoryUsage.heapTotal;\n      \n      this.performanceService.recordMetric(\n        'system_memory_utilization',\n        memoryUtilization,\n        'memory',\n        memoryUsage\n      );\n      \n      this.performanceService.recordMetric(\n        'system_active_requests',\n        this.activeRequests.size,\n        'api',\n        { type: 'concurrent_requests' }\n      );\n      \n      this.performanceService.recordMetric(\n        'system_uptime',\n        process.uptime(),\n        'system',\n        { type: 'process_uptime' }\n      );\n    } catch (error) {\n      console.error('System health metrics collection failed:', error);\n    }\n  }\n\n  // Error tracking middleware\n  errorTrackingMiddleware() {\n    return (error, req, res, next) => {\n      this.performanceService.recordMetric(\n        'application_error_rate',\n        1,\n        'api',\n        {\n          error: error.message,\n          endpoint: req.path,\n          method: req.method,\n          statusCode: res.statusCode || 500\n        }\n      );\n      next(error);\n    };\n  }\n\n  getPerformanceService() {\n    return this.performanceService;\n  }\n\n  getActiveRequestsCount() {\n    return this.activeRequests.size;\n  }\n}\n\nmodule.exports = PerformanceMonitoringMiddleware;"],"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","ignoreList":[]}