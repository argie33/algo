{"version":3,"names":["cov_23btk2yx1l","actualCoverage","SecureLogger","constructor","f","s","sensitivePatterns","pattern","replacement","sensitiveFields","Set","logLevel","getLogLevel","isProduction","process","env","NODE_ENV","isDevelopment","b","levels","production","staging","development","test","sanitize","data","maxDepth","sanitizeString","Array","isArray","map","item","sanitized","key","value","Object","entries","isSensitiveField","str","replace","fieldName","lower","toLowerCase","has","some","sensitive","includes","redactUserId","userId","length","substring","redactCorrelationId","correlationId","createLogEntry","level","message","context","timestamp","Date","toISOString","logEntry","toUpperCase","service","environment","component","operation","undefined","shouldLog","debug","console","JSON","stringify","info","log","warn","error","errorData","name","stack","security","eventType","severity","sendToSecurityMonitoring","auditDatabase","table","details","auditAuth","auditApiKey","provider","secureLogger","module","exports"],"sources":["secureLogger.js"],"sourcesContent":["/**\n * Secure Logger Utility\n * Prevents sensitive data exposure in logs for financial applications\n */\n\nclass SecureLogger {\n  constructor() {\n    // Sensitive patterns to redact from logs\n    this.sensitivePatterns = [\n      // API Keys and Tokens\n      { pattern: /AKIAIO[A-Z0-9]{14,}/gi, replacement: '[AWS_ACCESS_KEY_REDACTED]' },\n      { pattern: /pk_[a-zA-Z0-9]{48}/gi, replacement: '[ALPACA_KEY_REDACTED]' },\n      { pattern: /sk_[a-zA-Z0-9]{48}/gi, replacement: '[ALPACA_SECRET_REDACTED]' },\n      { pattern: /[A-Za-z0-9+/]{40,}={0,2}/g, replacement: '[BASE64_TOKEN_REDACTED]' },\n      \n      // JWT Tokens\n      { pattern: /eyJ[A-Za-z0-9+/=]{100,}/g, replacement: '[JWT_TOKEN_REDACTED]' },\n      \n      // Database Passwords (common patterns)\n      { pattern: /password['\"]*\\s*[:=]\\s*['\"][^'\"]{8,}['\"]/gi, replacement: 'password=\"[REDACTED]\"' },\n      { pattern: /pwd['\"]*\\s*[:=]\\s*['\"][^'\"]{8,}['\"]/gi, replacement: 'pwd=\"[REDACTED]\"' },\n      \n      // AWS ARNs\n      { pattern: /arn:aws:[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:\\d{12}:[a-zA-Z0-9-/:]+/g, replacement: '[AWS_ARN_REDACTED]' },\n      \n      // IP Addresses (internal networks)\n      { pattern: /\\b(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/g, replacement: '[INTERNAL_IP_REDACTED]' },\n      \n      // Email addresses\n      { pattern: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g, replacement: '[EMAIL_REDACTED]' },\n      \n      // Credit card patterns (basic)\n      { pattern: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g, replacement: '[CARD_NUMBER_REDACTED]' },\n      \n      // SSN patterns\n      { pattern: /\\b\\d{3}-?\\d{2}-?\\d{4}\\b/g, replacement: '[SSN_REDACTED]' },\n      \n      // Phone numbers\n      { pattern: /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g, replacement: '[PHONE_REDACTED]' },\n      \n      // Process.env variables (selective)\n      { pattern: /(DB_PASSWORD|API_KEY|SECRET|TOKEN|PRIVATE_KEY)['\"]*\\s*[:=]\\s*['\"][^'\"]*['\"]/gi, replacement: '$1=\"[REDACTED]\"' }\n    ];\n\n    // Sensitive field names to redact\n    this.sensitiveFields = new Set([\n      'password', 'secret', 'token', 'key', 'apikey', 'api_key',\n      'auth', 'authorization', 'credential', 'private', 'confidential',\n      'ssn', 'social_security', 'credit_card', 'card_number', 'cvv',\n      'pin', 'account_number', 'routing_number', 'bank_account',\n      'jwt', 'bearer', 'oauth', 'session_id', 'csrf_token'\n    ]);\n\n    // Environment-based log level control\n    this.logLevel = this.getLogLevel();\n    this.isProduction = process.env.NODE_ENV === 'production';\n    this.isDevelopment = process.env.NODE_ENV === 'development';\n  }\n\n  /**\n   * Get appropriate log level based on environment\n   */\n  getLogLevel() {\n    const env = process.env.NODE_ENV || 'development';\n    const levels = {\n      production: ['error', 'warn'],\n      staging: ['error', 'warn', 'info'],\n      development: ['error', 'warn', 'info', 'debug'],\n      test: ['error']\n    };\n    return levels[env] || levels.development;\n  }\n\n  /**\n   * Sanitize any value to remove sensitive data\n   */\n  sanitize(data, maxDepth = 3) {\n    if (maxDepth <= 0) return '[MAX_DEPTH_REACHED]';\n\n    if (typeof data === 'string') {\n      return this.sanitizeString(data);\n    }\n\n    if (typeof data === 'object' && data !== null) {\n      if (Array.isArray(data)) {\n        return data.map(item => this.sanitize(item, maxDepth - 1));\n      }\n\n      const sanitized = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (this.isSensitiveField(key)) {\n          sanitized[key] = '[REDACTED]';\n        } else {\n          sanitized[key] = this.sanitize(value, maxDepth - 1);\n        }\n      }\n      return sanitized;\n    }\n\n    return data;\n  }\n\n  /**\n   * Sanitize string content\n   */\n  sanitizeString(str) {\n    if (!str || typeof str !== 'string') return str;\n\n    let sanitized = str;\n    for (const { pattern, replacement } of this.sensitivePatterns) {\n      sanitized = sanitized.replace(pattern, replacement);\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Check if field name is sensitive\n   */\n  isSensitiveField(fieldName) {\n    if (!fieldName || typeof fieldName !== 'string') return false;\n    \n    const lower = fieldName.toLowerCase();\n    return this.sensitiveFields.has(lower) || \n           [...this.sensitiveFields].some(sensitive => lower.includes(sensitive));\n  }\n\n  /**\n   * Redact user identifiers for privacy\n   */\n  redactUserId(userId) {\n    if (!userId) return '[NO_USER_ID]';\n    if (typeof userId !== 'string') return '[INVALID_USER_ID]';\n    \n    // Show first 4 characters only\n    if (userId.length <= 8) return '[USER_ID_REDACTED]';\n    return `${userId.substring(0, 4)}...${userId.substring(userId.length - 4)}`;\n  }\n\n  /**\n   * Redact correlation IDs partially for tracking\n   */\n  redactCorrelationId(correlationId) {\n    if (!correlationId) return '[NO_CORRELATION_ID]';\n    if (typeof correlationId !== 'string') return '[INVALID_CORRELATION_ID]';\n    \n    // Show first 8 characters for correlation\n    return correlationId.length > 12 ? `${correlationId.substring(0, 8)}...` : correlationId;\n  }\n\n  /**\n   * Create secure log entry\n   */\n  createLogEntry(level, message, data = null, context = {}) {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      level: level.toUpperCase(),\n      message: this.sanitizeString(message),\n      service: 'financial-platform',\n      environment: process.env.NODE_ENV || 'unknown'\n    };\n\n    // Add correlation ID if provided\n    if (context.correlationId) {\n      logEntry.correlationId = this.redactCorrelationId(context.correlationId);\n    }\n\n    // Add user ID if provided (redacted)\n    if (context.userId) {\n      logEntry.userId = this.redactUserId(context.userId);\n    }\n\n    // Add component/module context\n    if (context.component) {\n      logEntry.component = context.component;\n    }\n\n    // Add operation context\n    if (context.operation) {\n      logEntry.operation = context.operation;\n    }\n\n    // Sanitize and add data if provided\n    if (data !== null && data !== undefined) {\n      logEntry.data = this.sanitize(data);\n    }\n\n    return logEntry;\n  }\n\n  /**\n   * Check if log level should be output\n   */\n  shouldLog(level) {\n    return this.logLevel.includes(level.toLowerCase());\n  }\n\n  /**\n   * Secure debug logging\n   */\n  debug(message, data = null, context = {}) {\n    if (!this.shouldLog('debug')) return;\n    \n    const logEntry = this.createLogEntry('debug', message, data, context);\n    console.debug('üîç [DEBUG]', JSON.stringify(logEntry));\n  }\n\n  /**\n   * Secure info logging\n   */\n  info(message, data = null, context = {}) {\n    if (!this.shouldLog('info')) return;\n    \n    const logEntry = this.createLogEntry('info', message, data, context);\n    console.log('‚ÑπÔ∏è  [INFO]', JSON.stringify(logEntry));\n  }\n\n  /**\n   * Secure warning logging\n   */\n  warn(message, data = null, context = {}) {\n    if (!this.shouldLog('warn')) return;\n    \n    const logEntry = this.createLogEntry('warn', message, data, context);\n    console.warn('‚ö†Ô∏è  [WARN]', JSON.stringify(logEntry));\n  }\n\n  /**\n   * Secure error logging\n   */\n  error(message, error = null, context = {}) {\n    if (!this.shouldLog('error')) return;\n    \n    let errorData = null;\n    if (error) {\n      errorData = {\n        name: error.name,\n        message: this.sanitizeString(error.message),\n        ...(this.isDevelopment && { stack: error.stack })\n      };\n    }\n    \n    const logEntry = this.createLogEntry('error', message, errorData, context);\n    console.error('‚ùå [ERROR]', JSON.stringify(logEntry));\n  }\n\n  /**\n   * Secure security event logging (always logs regardless of level)\n   */\n  security(eventType, message, data = null, context = {}) {\n    const logEntry = this.createLogEntry('security', message, data, {\n      ...context,\n      eventType,\n      severity: context.severity || 'MEDIUM'\n    });\n    \n    console.warn('üö® [SECURITY]', JSON.stringify(logEntry));\n    \n    // In production, also send to security monitoring system\n    if (this.isProduction) {\n      this.sendToSecurityMonitoring(logEntry);\n    }\n  }\n\n  /**\n   * Send security events to monitoring system (placeholder)\n   */\n  sendToSecurityMonitoring(logEntry) {\n    // TODO: Implement integration with security monitoring system\n    // Example: AWS CloudWatch, Splunk, DataDog, etc.\n    console.warn('üîí Security event logged for monitoring:', {\n      timestamp: logEntry.timestamp,\n      eventType: logEntry.eventType,\n      severity: logEntry.severity\n    });\n  }\n\n  /**\n   * Audit database operations\n   */\n  auditDatabase(operation, table, userId, details = {}) {\n    this.security('DATABASE_OPERATION', `Database ${operation} on ${table}`, {\n      operation,\n      table,\n      details: this.sanitize(details)\n    }, {\n      userId,\n      component: 'database',\n      severity: 'LOW'\n    });\n  }\n\n  /**\n   * Audit authentication events\n   */\n  auditAuth(eventType, userId, details = {}) {\n    this.security('AUTHENTICATION', `Auth event: ${eventType}`, {\n      eventType,\n      details: this.sanitize(details)\n    }, {\n      userId,\n      component: 'authentication',\n      severity: eventType.includes('fail') ? 'HIGH' : 'MEDIUM'\n    });\n  }\n\n  /**\n   * Log API key operations (always redacted)\n   */\n  auditApiKey(operation, userId, provider) {\n    this.security('API_KEY_OPERATION', `API key ${operation}`, {\n      operation,\n      provider\n    }, {\n      userId,\n      component: 'api-key-service',\n      severity: 'MEDIUM'\n    });\n  }\n}\n\n// Create singleton instance\nconst secureLogger = new SecureLogger();\n\n// Export both the class and singleton for flexibility\nmodule.exports = {\n  SecureLogger,\n  secureLogger,\n  \n  // Convenience methods for quick usage\n  debug: (message, data, context) => secureLogger.debug(message, data, context),\n  info: (message, data, context) => secureLogger.info(message, data, context),\n  warn: (message, data, context) => secureLogger.warn(message, data, context),\n  error: (message, error, context) => secureLogger.error(message, error, context),\n  security: (eventType, message, data, context) => secureLogger.security(eventType, message, data, context),\n  \n  // Audit methods\n  auditDatabase: (operation, table, userId, details) => secureLogger.auditDatabase(operation, table, userId, details),\n  auditAuth: (eventType, userId, details) => secureLogger.auditAuth(eventType, userId, details),\n  auditApiKey: (operation, userId, provider) => secureLogger.auditApiKey(operation, userId, provider),\n  \n  // Utility methods\n  sanitize: (data) => secureLogger.sanitize(data),\n  redactUserId: (userId) => secureLogger.redactUserId(userId)\n};"],"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","ignoreList":[]}