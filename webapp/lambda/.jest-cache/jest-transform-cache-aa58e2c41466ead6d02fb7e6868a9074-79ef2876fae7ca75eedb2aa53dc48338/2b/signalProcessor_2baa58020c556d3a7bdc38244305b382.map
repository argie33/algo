{"version":3,"names":["cov_fr286oah9","actualCoverage","logger","s","require","query","SignalProcessor","constructor","f","patternCache","Map","signalHistory","performanceMetrics","processSignals","priceData","symbol","options","b","startTime","Date","now","info","dataPoints","length","timeframe","patterns","Error","indicators","calculateTechnicalIndicators","detectPatterns","signals","generateCompositeSignals","analysis","analyzeSignalStrength","storeSignalHistory","processingTime","signalCount","patternCount","strongestSignal","primary","type","confidence","success","timestamp","toISOString","recommendations","generateRecommendations","error","message","errorStack","stack","trend","momentum","volatility","volume","support_resistance","sma_20","calculateSMA","sma_50","sma_200","ema_12","calculateEMA","ema_26","bollinger_bands","calculateBollingerBands","trend_direction","determineTrendDirection","rsi","calculateRSI","macd","calculateMACD","stochastic","calculateStochastic","williams_r","calculateWilliamsR","momentum_score","calculateMomentumScore","atr","calculateATR","volatility_ratio","calculateVolatilityRatio","price_volatility","calculatePriceVolatility","volume_sma","calculateVolumeSMA","volume_ratio","calculateVolumeRatio","obv","calculateOBV","calculateSupportResistance","candlestickPatterns","detectCandlestickPatterns","push","chartPatterns","detectChartPatterns","harmonicPatterns","detectHarmonicPatterns","volumePatterns","detectVolumePatterns","sort","a","patternsFound","highConfidencePatterns","filter","p","detectDoji","detectHammer","detectEngulfing","detectStar","detectHarami","detectHeadAndShoulders","detectDoubleTopBottom","detectTriangles","detectFlagsAndPennants","detectWedges","trendSignal","generateTrendSignal","momentumSignal","generateMomentumSignal","meanReversionSignal","generateMeanReversionSignal","breakoutSignal","generateBreakoutSignal","patternSignals","generatePatternSignals","volumeSignal","generateVolumeSignal","secondary","conflicting","strength","recommendation","bullishSignals","direction","bearishSignals","bullishWeight","reduce","sum","weight","bearishWeight","calculateSignalStrength","slice","JSON","stringify","action","riskLevel","calculateRiskLevel","positionSize","calculatePositionSize","stopLoss","calculateStopLoss","takeProfit","calculateTakeProfit","determineTimeframe","rationale","generateRationale","data","period","acc","item","close","multiplier","ema","i","gains","losses","change","avgGain","avgLoss","rs","ema12","ema26","macdLine","macdData","map","_","signalLine","signal","histogram","recent","forEach","candle","bodySize","Math","abs","open","shadowSize","high","low","pattern","description","lowerShadow","min","upperShadow","max","currentPrice","baseSize","baseStop","riskMultiplier","baseProfit","rewardMultiplier","reasons","join","stdDev","upper","middle","lower","k","d","support","resistance","module","exports"],"sources":["signalProcessor.js"],"sourcesContent":["const logger = require('./logger');\nconst { query } = require('./database');\n\n/**\n * Advanced Signal Processing and Pattern Recognition System\n * Institutional-grade technical analysis and pattern detection\n */\nclass SignalProcessor {\n  constructor() {\n    this.patternCache = new Map();\n    this.signalHistory = new Map();\n    this.performanceMetrics = new Map();\n  }\n\n  /**\n   * Process market data and generate trading signals\n   * @param {Array} priceData - Array of price data with OHLCV\n   * @param {string} symbol - Stock symbol\n   * @param {Object} options - Processing options\n   * @returns {Object} Signal analysis results\n   */\n  async processSignals(priceData, symbol, options = {}) {\n    const startTime = Date.now();\n    \n    try {\n      logger.info('üîç Starting signal processing', {\n        symbol: symbol,\n        dataPoints: priceData.length,\n        timeframe: options.timeframe || '1D',\n        patterns: options.patterns || 'all'\n      });\n\n      // Validate input data\n      if (!priceData || priceData.length < 50) {\n        throw new Error('Insufficient price data for signal processing');\n      }\n\n      // Calculate technical indicators\n      const indicators = await this.calculateTechnicalIndicators(priceData);\n      \n      // Detect chart patterns\n      const patterns = await this.detectPatterns(priceData, symbol);\n      \n      // Generate composite signals\n      const signals = await this.generateCompositeSignals(indicators, patterns, priceData);\n      \n      // Calculate signal strength and confidence\n      const analysis = await this.analyzeSignalStrength(signals, indicators, patterns);\n      \n      // Store signal history\n      await this.storeSignalHistory(symbol, analysis);\n      \n      const processingTime = Date.now() - startTime;\n      \n      logger.info('‚úÖ Signal processing completed', {\n        symbol: symbol,\n        signalCount: signals.length,\n        patternCount: patterns.length,\n        processingTime: processingTime,\n        strongestSignal: analysis.primary?.type || 'none',\n        confidence: analysis.primary?.confidence || 0\n      });\n\n      return {\n        success: true,\n        symbol: symbol,\n        timestamp: new Date().toISOString(),\n        processingTime: processingTime,\n        indicators: indicators,\n        patterns: patterns,\n        signals: signals,\n        analysis: analysis,\n        recommendations: await this.generateRecommendations(analysis)\n      };\n\n    } catch (error) {\n      logger.error('‚ùå Signal processing failed', {\n        symbol: symbol,\n        error: error.message,\n        errorStack: error.stack,\n        processingTime: Date.now() - startTime\n      });\n      \n      throw new Error(`Signal processing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate comprehensive technical indicators\n   * @param {Array} priceData - Price data array\n   * @returns {Object} Technical indicators\n   */\n  async calculateTechnicalIndicators(priceData) {\n    const indicators = {\n      trend: {},\n      momentum: {},\n      volatility: {},\n      volume: {},\n      support_resistance: {}\n    };\n\n    // Trend Indicators\n    indicators.trend.sma_20 = this.calculateSMA(priceData, 20);\n    indicators.trend.sma_50 = this.calculateSMA(priceData, 50);\n    indicators.trend.sma_200 = this.calculateSMA(priceData, 200);\n    indicators.trend.ema_12 = this.calculateEMA(priceData, 12);\n    indicators.trend.ema_26 = this.calculateEMA(priceData, 26);\n    indicators.trend.bollinger_bands = this.calculateBollingerBands(priceData, 20, 2);\n    indicators.trend.trend_direction = this.determineTrendDirection(indicators.trend);\n\n    // Momentum Indicators\n    indicators.momentum.rsi = this.calculateRSI(priceData, 14);\n    indicators.momentum.macd = this.calculateMACD(priceData);\n    indicators.momentum.stochastic = this.calculateStochastic(priceData, 14);\n    indicators.momentum.williams_r = this.calculateWilliamsR(priceData, 14);\n    indicators.momentum.momentum_score = this.calculateMomentumScore(indicators.momentum);\n\n    // Volatility Indicators\n    indicators.volatility.atr = this.calculateATR(priceData, 14);\n    indicators.volatility.volatility_ratio = this.calculateVolatilityRatio(priceData);\n    indicators.volatility.price_volatility = this.calculatePriceVolatility(priceData);\n\n    // Volume Indicators\n    indicators.volume.volume_sma = this.calculateVolumeSMA(priceData, 20);\n    indicators.volume.volume_ratio = this.calculateVolumeRatio(priceData);\n    indicators.volume.obv = this.calculateOBV(priceData);\n\n    // Support and Resistance\n    indicators.support_resistance = this.calculateSupportResistance(priceData);\n\n    return indicators;\n  }\n\n  /**\n   * Detect various chart patterns\n   * @param {Array} priceData - Price data array\n   * @param {string} symbol - Stock symbol\n   * @returns {Array} Detected patterns\n   */\n  async detectPatterns(priceData, symbol) {\n    const patterns = [];\n\n    try {\n      // Candlestick Patterns\n      const candlestickPatterns = await this.detectCandlestickPatterns(priceData);\n      patterns.push(...candlestickPatterns);\n\n      // Chart Patterns\n      const chartPatterns = await this.detectChartPatterns(priceData);\n      patterns.push(...chartPatterns);\n\n      // Harmonic Patterns\n      const harmonicPatterns = await this.detectHarmonicPatterns(priceData);\n      patterns.push(...harmonicPatterns);\n\n      // Volume Patterns\n      const volumePatterns = await this.detectVolumePatterns(priceData);\n      patterns.push(...volumePatterns);\n\n      // Sort patterns by confidence\n      patterns.sort((a, b) => b.confidence - a.confidence);\n\n      logger.info('üîç Pattern detection completed', {\n        symbol: symbol,\n        patternsFound: patterns.length,\n        highConfidencePatterns: patterns.filter(p => p.confidence > 0.8).length\n      });\n\n      return patterns;\n\n    } catch (error) {\n      logger.error('‚ùå Pattern detection failed', {\n        symbol: symbol,\n        error: error.message\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Detect candlestick patterns\n   * @param {Array} priceData - Price data array\n   * @returns {Array} Candlestick patterns\n   */\n  async detectCandlestickPatterns(priceData) {\n    const patterns = [];\n    \n    // Doji patterns\n    patterns.push(...this.detectDoji(priceData));\n    \n    // Hammer and Hanging Man\n    patterns.push(...this.detectHammer(priceData));\n    \n    // Engulfing patterns\n    patterns.push(...this.detectEngulfing(priceData));\n    \n    // Morning/Evening Star\n    patterns.push(...this.detectStar(priceData));\n    \n    // Harami patterns\n    patterns.push(...this.detectHarami(priceData));\n\n    return patterns;\n  }\n\n  /**\n   * Detect chart patterns (head and shoulders, triangles, etc.)\n   * @param {Array} priceData - Price data array\n   * @returns {Array} Chart patterns\n   */\n  async detectChartPatterns(priceData) {\n    const patterns = [];\n    \n    // Head and Shoulders\n    patterns.push(...this.detectHeadAndShoulders(priceData));\n    \n    // Double Top/Bottom\n    patterns.push(...this.detectDoubleTopBottom(priceData));\n    \n    // Triangles\n    patterns.push(...this.detectTriangles(priceData));\n    \n    // Flags and Pennants\n    patterns.push(...this.detectFlagsAndPennants(priceData));\n    \n    // Wedges\n    patterns.push(...this.detectWedges(priceData));\n\n    return patterns;\n  }\n\n  /**\n   * Generate composite trading signals\n   * @param {Object} indicators - Technical indicators\n   * @param {Array} patterns - Detected patterns\n   * @param {Array} priceData - Price data\n   * @returns {Array} Trading signals\n   */\n  async generateCompositeSignals(indicators, patterns, priceData) {\n    const signals = [];\n    \n    // Trend following signals\n    const trendSignal = this.generateTrendSignal(indicators.trend, priceData);\n    if (trendSignal) signals.push(trendSignal);\n    \n    // Momentum signals\n    const momentumSignal = this.generateMomentumSignal(indicators.momentum, priceData);\n    if (momentumSignal) signals.push(momentumSignal);\n    \n    // Mean reversion signals\n    const meanReversionSignal = this.generateMeanReversionSignal(indicators, priceData);\n    if (meanReversionSignal) signals.push(meanReversionSignal);\n    \n    // Breakout signals\n    const breakoutSignal = this.generateBreakoutSignal(indicators, priceData);\n    if (breakoutSignal) signals.push(breakoutSignal);\n    \n    // Pattern-based signals\n    const patternSignals = this.generatePatternSignals(patterns, priceData);\n    signals.push(...patternSignals);\n    \n    // Volume confirmation signals\n    const volumeSignal = this.generateVolumeSignal(indicators.volume, priceData);\n    if (volumeSignal) signals.push(volumeSignal);\n\n    return signals;\n  }\n\n  /**\n   * Analyze signal strength and generate confidence scores\n   * @param {Array} signals - Generated signals\n   * @param {Object} indicators - Technical indicators\n   * @param {Array} patterns - Detected patterns\n   * @returns {Object} Signal analysis\n   */\n  async analyzeSignalStrength(signals, indicators, patterns) {\n    const analysis = {\n      primary: null,\n      secondary: [],\n      conflicting: [],\n      confidence: 0,\n      strength: 'weak',\n      recommendation: 'hold'\n    };\n\n    if (signals.length === 0) {\n      return analysis;\n    }\n\n    // Group signals by direction\n    const bullishSignals = signals.filter(s => s.direction === 'bullish');\n    const bearishSignals = signals.filter(s => s.direction === 'bearish');\n\n    // Calculate weighted confidence\n    const bullishWeight = bullishSignals.reduce((sum, s) => sum + (s.confidence * s.weight), 0);\n    const bearishWeight = bearishSignals.reduce((sum, s) => sum + (s.confidence * s.weight), 0);\n\n    // Determine primary signal\n    if (bullishWeight > bearishWeight && bullishWeight > 0.6) {\n      analysis.primary = {\n        type: 'bullish',\n        confidence: bullishWeight,\n        signals: bullishSignals.length,\n        strength: this.calculateSignalStrength(bullishWeight)\n      };\n      analysis.recommendation = 'buy';\n    } else if (bearishWeight > bullishWeight && bearishWeight > 0.6) {\n      analysis.primary = {\n        type: 'bearish',\n        confidence: bearishWeight,\n        signals: bearishSignals.length,\n        strength: this.calculateSignalStrength(bearishWeight)\n      };\n      analysis.recommendation = 'sell';\n    } else {\n      analysis.primary = {\n        type: 'neutral',\n        confidence: 0.5,\n        signals: signals.length,\n        strength: 'weak'\n      };\n      analysis.recommendation = 'hold';\n    }\n\n    // Add secondary signals\n    analysis.secondary = signals\n      .filter(s => s.direction !== analysis.primary?.type)\n      .slice(0, 3);\n\n    // Identify conflicting signals\n    if (bullishSignals.length > 0 && bearishSignals.length > 0) {\n      analysis.conflicting = signals.filter(s => \n        s.confidence > 0.7 && s.direction !== analysis.primary?.type\n      );\n    }\n\n    analysis.confidence = analysis.primary?.confidence || 0;\n    analysis.strength = analysis.primary?.strength || 'weak';\n\n    return analysis;\n  }\n\n  /**\n   * Store signal history in database\n   * @param {string} symbol - Stock symbol\n   * @param {Object} analysis - Signal analysis\n   */\n  async storeSignalHistory(symbol, analysis) {\n    try {\n      await query(`\n        INSERT INTO signal_history (\n          symbol, timestamp, signal_type, confidence, strength, \n          recommendation, analysis_data, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())\n      `, [\n        symbol,\n        new Date().toISOString(),\n        analysis.primary?.type || 'neutral',\n        analysis.confidence,\n        analysis.strength,\n        analysis.recommendation,\n        JSON.stringify(analysis)\n      ]);\n    } catch (error) {\n      logger.error('‚ùå Failed to store signal history', {\n        symbol: symbol,\n        error: error.message\n      });\n    }\n  }\n\n  /**\n   * Generate trading recommendations\n   * @param {Object} analysis - Signal analysis\n   * @returns {Object} Recommendations\n   */\n  async generateRecommendations(analysis) {\n    const recommendations = {\n      action: analysis.recommendation,\n      confidence: analysis.confidence,\n      riskLevel: this.calculateRiskLevel(analysis),\n      positionSize: this.calculatePositionSize(analysis),\n      stopLoss: this.calculateStopLoss(analysis),\n      takeProfit: this.calculateTakeProfit(analysis),\n      timeframe: this.determineTimeframe(analysis),\n      rationale: this.generateRationale(analysis)\n    };\n\n    return recommendations;\n  }\n\n  // Helper methods for technical calculations\n  calculateSMA(data, period) {\n    if (data.length < period) return null;\n    const slice = data.slice(-period);\n    const sum = slice.reduce((acc, item) => acc + item.close, 0);\n    return sum / period;\n  }\n\n  calculateEMA(data, period) {\n    if (data.length < period) return null;\n    const multiplier = 2 / (period + 1);\n    let ema = data[0].close;\n    \n    for (let i = 1; i < data.length; i++) {\n      ema = (data[i].close - ema) * multiplier + ema;\n    }\n    \n    return ema;\n  }\n\n  calculateRSI(data, period) {\n    if (data.length < period + 1) return null;\n    \n    let gains = 0;\n    let losses = 0;\n    \n    for (let i = 1; i < period + 1; i++) {\n      const change = data[i].close - data[i - 1].close;\n      if (change > 0) gains += change;\n      else losses -= change;\n    }\n    \n    let avgGain = gains / period;\n    let avgLoss = losses / period;\n    \n    for (let i = period + 1; i < data.length; i++) {\n      const change = data[i].close - data[i - 1].close;\n      if (change > 0) {\n        avgGain = (avgGain * (period - 1) + change) / period;\n        avgLoss = (avgLoss * (period - 1)) / period;\n      } else {\n        avgGain = (avgGain * (period - 1)) / period;\n        avgLoss = (avgLoss * (period - 1) - change) / period;\n      }\n    }\n    \n    const rs = avgGain / avgLoss;\n    return 100 - (100 / (1 + rs));\n  }\n\n  calculateMACD(data) {\n    if (data.length < 26) return null;\n    \n    const ema12 = this.calculateEMA(data, 12);\n    const ema26 = this.calculateEMA(data, 26);\n    const macdLine = ema12 - ema26;\n    \n    // Signal line (EMA of MACD)\n    const macdData = data.slice(-9).map((_, i) => ({ close: macdLine }));\n    const signalLine = this.calculateEMA(macdData, 9);\n    \n    return {\n      macd: macdLine,\n      signal: signalLine,\n      histogram: macdLine - signalLine,\n      direction: macdLine > signalLine ? 'bullish' : 'bearish'\n    };\n  }\n\n  // Pattern detection methods (simplified implementations)\n  detectDoji(data) {\n    const patterns = [];\n    const recent = data.slice(-5);\n    \n    recent.forEach((candle, i) => {\n      const bodySize = Math.abs(candle.close - candle.open);\n      const shadowSize = candle.high - candle.low;\n      \n      if (bodySize < shadowSize * 0.1) {\n        patterns.push({\n          type: 'doji',\n          pattern: 'reversal',\n          confidence: 0.7,\n          direction: 'neutral',\n          timestamp: candle.timestamp,\n          description: 'Doji candlestick indicates potential reversal'\n        });\n      }\n    });\n    \n    return patterns;\n  }\n\n  detectHammer(data) {\n    const patterns = [];\n    const recent = data.slice(-3);\n    \n    recent.forEach((candle, i) => {\n      const bodySize = Math.abs(candle.close - candle.open);\n      const lowerShadow = Math.min(candle.open, candle.close) - candle.low;\n      const upperShadow = candle.high - Math.max(candle.open, candle.close);\n      \n      if (lowerShadow > bodySize * 2 && upperShadow < bodySize * 0.5) {\n        patterns.push({\n          type: 'hammer',\n          pattern: 'reversal',\n          confidence: 0.75,\n          direction: 'bullish',\n          timestamp: candle.timestamp,\n          description: 'Hammer pattern suggests potential upward reversal'\n        });\n      }\n    });\n    \n    return patterns;\n  }\n\n  // Additional pattern detection methods would be implemented here\n  detectEngulfing(data) { return []; }\n  detectStar(data) { return []; }\n  detectHarami(data) { return []; }\n  detectHeadAndShoulders(data) { return []; }\n  detectDoubleTopBottom(data) { return []; }\n  detectTriangles(data) { return []; }\n  detectFlagsAndPennants(data) { return []; }\n  detectWedges(data) { return []; }\n  detectHarmonicPatterns(data) { return []; }\n  detectVolumePatterns(data) { return []; }\n\n  // Signal generation methods\n  generateTrendSignal(trend, data) {\n    if (!trend.sma_20 || !trend.sma_50) return null;\n    \n    const currentPrice = data[data.length - 1].close;\n    \n    if (currentPrice > trend.sma_20 && trend.sma_20 > trend.sma_50) {\n      return {\n        type: 'trend_following',\n        direction: 'bullish',\n        confidence: 0.7,\n        weight: 0.8,\n        description: 'Price above moving averages with bullish trend'\n      };\n    } else if (currentPrice < trend.sma_20 && trend.sma_20 < trend.sma_50) {\n      return {\n        type: 'trend_following',\n        direction: 'bearish',\n        confidence: 0.7,\n        weight: 0.8,\n        description: 'Price below moving averages with bearish trend'\n      };\n    }\n    \n    return null;\n  }\n\n  generateMomentumSignal(momentum, data) {\n    if (!momentum.rsi || !momentum.macd) return null;\n    \n    if (momentum.rsi < 30 && momentum.macd.histogram > 0) {\n      return {\n        type: 'momentum',\n        direction: 'bullish',\n        confidence: 0.8,\n        weight: 0.7,\n        description: 'Oversold RSI with bullish MACD momentum'\n      };\n    } else if (momentum.rsi > 70 && momentum.macd.histogram < 0) {\n      return {\n        type: 'momentum',\n        direction: 'bearish',\n        confidence: 0.8,\n        weight: 0.7,\n        description: 'Overbought RSI with bearish MACD momentum'\n      };\n    }\n    \n    return null;\n  }\n\n  generateMeanReversionSignal(indicators, data) {\n    // Simplified mean reversion logic\n    return null;\n  }\n\n  generateBreakoutSignal(indicators, data) {\n    // Simplified breakout logic\n    return null;\n  }\n\n  generatePatternSignals(patterns, data) {\n    return patterns.map(pattern => ({\n      type: 'pattern',\n      direction: pattern.direction,\n      confidence: pattern.confidence,\n      weight: 0.6,\n      description: pattern.description,\n      pattern: pattern.type\n    }));\n  }\n\n  generateVolumeSignal(volume, data) {\n    if (!volume.volume_ratio) return null;\n    \n    if (volume.volume_ratio > 1.5) {\n      return {\n        type: 'volume',\n        direction: 'bullish',\n        confidence: 0.6,\n        weight: 0.5,\n        description: 'Above average volume confirms price movement'\n      };\n    }\n    \n    return null;\n  }\n\n  // Helper calculation methods\n  calculateSignalStrength(confidence) {\n    if (confidence > 0.8) return 'strong';\n    if (confidence > 0.6) return 'moderate';\n    return 'weak';\n  }\n\n  calculateRiskLevel(analysis) {\n    if (analysis.confidence > 0.8) return 'low';\n    if (analysis.confidence > 0.6) return 'medium';\n    return 'high';\n  }\n\n  calculatePositionSize(analysis) {\n    const baseSize = 0.02; // 2% of portfolio\n    const multiplier = analysis.confidence;\n    return Math.min(baseSize * multiplier, 0.05); // Max 5%\n  }\n\n  calculateStopLoss(analysis) {\n    const baseStop = 0.02; // 2% stop loss\n    const riskMultiplier = analysis.confidence > 0.8 ? 0.8 : 1.2;\n    return baseStop * riskMultiplier;\n  }\n\n  calculateTakeProfit(analysis) {\n    const baseProfit = 0.06; // 6% take profit\n    const rewardMultiplier = analysis.confidence > 0.8 ? 1.5 : 1.0;\n    return baseProfit * rewardMultiplier;\n  }\n\n  determineTimeframe(analysis) {\n    if (analysis.strength === 'strong') return 'short';\n    if (analysis.strength === 'moderate') return 'medium';\n    return 'long';\n  }\n\n  generateRationale(analysis) {\n    const reasons = [];\n    \n    if (analysis.primary?.type === 'bullish') {\n      reasons.push('Multiple bullish signals detected');\n    } else if (analysis.primary?.type === 'bearish') {\n      reasons.push('Multiple bearish signals detected');\n    }\n    \n    if (analysis.conflicting.length > 0) {\n      reasons.push('Some conflicting signals present');\n    }\n    \n    return reasons.join('. ');\n  }\n\n  // Additional helper methods for technical indicators\n  calculateBollingerBands(data, period, stdDev) {\n    // Implementation for Bollinger Bands\n    return { upper: 0, middle: 0, lower: 0 };\n  }\n\n  calculateStochastic(data, period) {\n    // Implementation for Stochastic oscillator\n    return { k: 0, d: 0 };\n  }\n\n  calculateWilliamsR(data, period) {\n    // Implementation for Williams %R\n    return 0;\n  }\n\n  calculateATR(data, period) {\n    // Implementation for Average True Range\n    return 0;\n  }\n\n  calculateOBV(data) {\n    // Implementation for On-Balance Volume\n    return 0;\n  }\n\n  // Additional calculation methods would be implemented here\n  determineTrendDirection(trend) { return 'neutral'; }\n  calculateMomentumScore(momentum) { return 0.5; }\n  calculateVolatilityRatio(data) { return 1.0; }\n  calculatePriceVolatility(data) { return 0.2; }\n  calculateVolumeSMA(data, period) { return 0; }\n  calculateVolumeRatio(data) { return 1.0; }\n  calculateSupportResistance(data) { return { support: [], resistance: [] }; }\n}\n\nmodule.exports = SignalProcessor;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,MAAM;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAM,CAAC;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,YAAY,CAAC;;AAEvC;AACA;AACA;AACA;AACA,MAAME,eAAe,CAAC;EACpBC,WAAWA,CAAA,EAAG;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACZ,IAAI,CAACM,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAV,aAAA,GAAAG,CAAA;IAC9B,IAAI,CAACQ,aAAa,GAAG,IAAID,GAAG,CAAC,CAAC;IAAC;IAAAV,aAAA,GAAAG,CAAA;IAC/B,IAAI,CAACS,kBAAkB,GAAG,IAAIF,GAAG,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,cAAcA,CAACC,SAAS,EAAEC,MAAM,EAAEC,OAAO;EAAA;EAAA,CAAAhB,aAAA,GAAAiB,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAjB,aAAA,GAAAQ,CAAA;IACpD,MAAMU,SAAS;IAAA;IAAA,CAAAlB,aAAA,GAAAG,CAAA,OAAGgB,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAApB,aAAA,GAAAG,CAAA;IAE7B,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACFD,MAAM,CAACmB,IAAI,CAAC,+BAA+B,EAAE;QAC3CN,MAAM,EAAEA,MAAM;QACdO,UAAU,EAAER,SAAS,CAACS,MAAM;QAC5BC,SAAS;QAAE;QAAA,CAAAxB,aAAA,GAAAiB,CAAA,UAAAD,OAAO,CAACQ,SAAS;QAAA;QAAA,CAAAxB,aAAA,GAAAiB,CAAA,UAAI,IAAI;QACpCQ,QAAQ;QAAE;QAAA,CAAAzB,aAAA,GAAAiB,CAAA,UAAAD,OAAO,CAACS,QAAQ;QAAA;QAAA,CAAAzB,aAAA,GAAAiB,CAAA,UAAI,KAAK;MACrC,CAAC,CAAC;;MAEF;MAAA;MAAAjB,aAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,WAACH,SAAS;MAAA;MAAA,CAAAd,aAAA,GAAAiB,CAAA,UAAIH,SAAS,CAACS,MAAM,GAAG,EAAE,GAAE;QAAA;QAAAvB,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACvC,MAAM,IAAIuB,KAAK,CAAC,+CAA+C,CAAC;MAClE,CAAC;MAAA;MAAA;QAAA1B,aAAA,GAAAiB,CAAA;MAAA;;MAED;MACA,MAAMU,UAAU;MAAA;MAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACyB,4BAA4B,CAACd,SAAS,CAAC;;MAErE;MACA,MAAMW,QAAQ;MAAA;MAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC0B,cAAc,CAACf,SAAS,EAAEC,MAAM,CAAC;;MAE7D;MACA,MAAMe,OAAO;MAAA;MAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC4B,wBAAwB,CAACJ,UAAU,EAAEF,QAAQ,EAAEX,SAAS,CAAC;;MAEpF;MACA,MAAMkB,QAAQ;MAAA;MAAA,CAAAhC,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC8B,qBAAqB,CAACH,OAAO,EAAEH,UAAU,EAAEF,QAAQ,CAAC;;MAEhF;MAAA;MAAAzB,aAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAAC+B,kBAAkB,CAACnB,MAAM,EAAEiB,QAAQ,CAAC;MAE/C,MAAMG,cAAc;MAAA;MAAA,CAAAnC,aAAA,GAAAG,CAAA,QAAGgB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAAC;MAAAlB,aAAA,GAAAG,CAAA;MAE9CD,MAAM,CAACmB,IAAI,CAAC,+BAA+B,EAAE;QAC3CN,MAAM,EAAEA,MAAM;QACdqB,WAAW,EAAEN,OAAO,CAACP,MAAM;QAC3Bc,YAAY,EAAEZ,QAAQ,CAACF,MAAM;QAC7BY,cAAc,EAAEA,cAAc;QAC9BG,eAAe;QAAE;QAAA,CAAAtC,aAAA,GAAAiB,CAAA,UAAAe,QAAQ,CAACO,OAAO,EAAEC,IAAI;QAAA;QAAA,CAAAxC,aAAA,GAAAiB,CAAA,UAAI,MAAM;QACjDwB,UAAU;QAAE;QAAA,CAAAzC,aAAA,GAAAiB,CAAA,UAAAe,QAAQ,CAACO,OAAO,EAAEE,UAAU;QAAA;QAAA,CAAAzC,aAAA,GAAAiB,CAAA,UAAI,CAAC;MAC/C,CAAC,CAAC;MAAC;MAAAjB,aAAA,GAAAG,CAAA;MAEH,OAAO;QACLuC,OAAO,EAAE,IAAI;QACb3B,MAAM,EAAEA,MAAM;QACd4B,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC,CAAC;QACnCT,cAAc,EAAEA,cAAc;QAC9BR,UAAU,EAAEA,UAAU;QACtBF,QAAQ,EAAEA,QAAQ;QAClBK,OAAO,EAAEA,OAAO;QAChBE,QAAQ,EAAEA,QAAQ;QAClBa,eAAe,EAAE,MAAM,IAAI,CAACC,uBAAuB,CAACd,QAAQ;MAC9D,CAAC;IAEH,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdD,MAAM,CAAC6C,KAAK,CAAC,4BAA4B,EAAE;QACzChC,MAAM,EAAEA,MAAM;QACdgC,KAAK,EAAEA,KAAK,CAACC,OAAO;QACpBC,UAAU,EAAEF,KAAK,CAACG,KAAK;QACvBf,cAAc,EAAEhB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF;MAC/B,CAAC,CAAC;MAAC;MAAAlB,aAAA,GAAAG,CAAA;MAEH,MAAM,IAAIuB,KAAK,CAAC,6BAA6BqB,KAAK,CAACC,OAAO,EAAE,CAAC;IAC/D;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMpB,4BAA4BA,CAACd,SAAS,EAAE;IAAA;IAAAd,aAAA,GAAAQ,CAAA;IAC5C,MAAMmB,UAAU;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAG;MACjBgD,KAAK,EAAE,CAAC,CAAC;MACTC,QAAQ,EAAE,CAAC,CAAC;MACZC,UAAU,EAAE,CAAC,CAAC;MACdC,MAAM,EAAE,CAAC,CAAC;MACVC,kBAAkB,EAAE,CAAC;IACvB,CAAC;;IAED;IAAA;IAAAvD,aAAA,GAAAG,CAAA;IACAwB,UAAU,CAACwB,KAAK,CAACK,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC3C,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC3DwB,UAAU,CAACwB,KAAK,CAACO,MAAM,GAAG,IAAI,CAACD,YAAY,CAAC3C,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC3DwB,UAAU,CAACwB,KAAK,CAACQ,OAAO,GAAG,IAAI,CAACF,YAAY,CAAC3C,SAAS,EAAE,GAAG,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC7DwB,UAAU,CAACwB,KAAK,CAACS,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC/C,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC3DwB,UAAU,CAACwB,KAAK,CAACW,MAAM,GAAG,IAAI,CAACD,YAAY,CAAC/C,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC3DwB,UAAU,CAACwB,KAAK,CAACY,eAAe,GAAG,IAAI,CAACC,uBAAuB,CAAClD,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAClFwB,UAAU,CAACwB,KAAK,CAACc,eAAe,GAAG,IAAI,CAACC,uBAAuB,CAACvC,UAAU,CAACwB,KAAK,CAAC;;IAEjF;IAAA;IAAAnD,aAAA,GAAAG,CAAA;IACAwB,UAAU,CAACyB,QAAQ,CAACe,GAAG,GAAG,IAAI,CAACC,YAAY,CAACtD,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC3DwB,UAAU,CAACyB,QAAQ,CAACiB,IAAI,GAAG,IAAI,CAACC,aAAa,CAACxD,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACzDwB,UAAU,CAACyB,QAAQ,CAACmB,UAAU,GAAG,IAAI,CAACC,mBAAmB,CAAC1D,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACzEwB,UAAU,CAACyB,QAAQ,CAACqB,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAC5D,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACxEwB,UAAU,CAACyB,QAAQ,CAACuB,cAAc,GAAG,IAAI,CAACC,sBAAsB,CAACjD,UAAU,CAACyB,QAAQ,CAAC;;IAErF;IAAA;IAAApD,aAAA,GAAAG,CAAA;IACAwB,UAAU,CAAC0B,UAAU,CAACwB,GAAG,GAAG,IAAI,CAACC,YAAY,CAAChE,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC7DwB,UAAU,CAAC0B,UAAU,CAAC0B,gBAAgB,GAAG,IAAI,CAACC,wBAAwB,CAAClE,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAClFwB,UAAU,CAAC0B,UAAU,CAAC4B,gBAAgB,GAAG,IAAI,CAACC,wBAAwB,CAACpE,SAAS,CAAC;;IAEjF;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAwB,UAAU,CAAC2B,MAAM,CAAC6B,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAACtE,SAAS,EAAE,EAAE,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACtEwB,UAAU,CAAC2B,MAAM,CAAC+B,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACxE,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACtEwB,UAAU,CAAC2B,MAAM,CAACiC,GAAG,GAAG,IAAI,CAACC,YAAY,CAAC1E,SAAS,CAAC;;IAEpD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAwB,UAAU,CAAC4B,kBAAkB,GAAG,IAAI,CAACkC,0BAA0B,CAAC3E,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAE3E,OAAOwB,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAME,cAAcA,CAACf,SAAS,EAAEC,MAAM,EAAE;IAAA;IAAAf,aAAA,GAAAQ,CAAA;IACtC,MAAMiB,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEpB,IAAI;MACF;MACA,MAAMuF,mBAAmB;MAAA;MAAA,CAAA1F,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACwF,yBAAyB,CAAC7E,SAAS,CAAC;MAAC;MAAAd,aAAA,GAAAG,CAAA;MAC5EsB,QAAQ,CAACmE,IAAI,CAAC,GAAGF,mBAAmB,CAAC;;MAErC;MACA,MAAMG,aAAa;MAAA;MAAA,CAAA7F,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC2F,mBAAmB,CAAChF,SAAS,CAAC;MAAC;MAAAd,aAAA,GAAAG,CAAA;MAChEsB,QAAQ,CAACmE,IAAI,CAAC,GAAGC,aAAa,CAAC;;MAE/B;MACA,MAAME,gBAAgB;MAAA;MAAA,CAAA/F,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC6F,sBAAsB,CAAClF,SAAS,CAAC;MAAC;MAAAd,aAAA,GAAAG,CAAA;MACtEsB,QAAQ,CAACmE,IAAI,CAAC,GAAGG,gBAAgB,CAAC;;MAElC;MACA,MAAME,cAAc;MAAA;MAAA,CAAAjG,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC+F,oBAAoB,CAACpF,SAAS,CAAC;MAAC;MAAAd,aAAA,GAAAG,CAAA;MAClEsB,QAAQ,CAACmE,IAAI,CAAC,GAAGK,cAAc,CAAC;;MAEhC;MAAA;MAAAjG,aAAA,GAAAG,CAAA;MACAsB,QAAQ,CAAC0E,IAAI,CAAC,CAACC,CAAC,EAAEnF,CAAC,KAAK;QAAA;QAAAjB,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAc,CAAC,CAACwB,UAAU,GAAG2D,CAAC,CAAC3D,UAAU;MAAD,CAAC,CAAC;MAAC;MAAAzC,aAAA,GAAAG,CAAA;MAErDD,MAAM,CAACmB,IAAI,CAAC,gCAAgC,EAAE;QAC5CN,MAAM,EAAEA,MAAM;QACdsF,aAAa,EAAE5E,QAAQ,CAACF,MAAM;QAC9B+E,sBAAsB,EAAE7E,QAAQ,CAAC8E,MAAM,CAACC,CAAC,IAAI;UAAA;UAAAxG,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAG,CAAA;UAAA,OAAAqG,CAAC,CAAC/D,UAAU,GAAG,GAAG;QAAD,CAAC,CAAC,CAAClB;MACnE,CAAC,CAAC;MAAC;MAAAvB,aAAA,GAAAG,CAAA;MAEH,OAAOsB,QAAQ;IAEjB,CAAC,CAAC,OAAOsB,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdD,MAAM,CAAC6C,KAAK,CAAC,4BAA4B,EAAE;QACzChC,MAAM,EAAEA,MAAM;QACdgC,KAAK,EAAEA,KAAK,CAACC;MACf,CAAC,CAAC;MAAC;MAAAhD,aAAA,GAAAG,CAAA;MACH,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMwF,yBAAyBA,CAAC7E,SAAS,EAAE;IAAA;IAAAd,aAAA,GAAAQ,CAAA;IACzC,MAAMiB,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAG,EAAE;;IAEnB;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACa,UAAU,CAAC3F,SAAS,CAAC,CAAC;;IAE5C;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACc,YAAY,CAAC5F,SAAS,CAAC,CAAC;;IAE9C;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACe,eAAe,CAAC7F,SAAS,CAAC,CAAC;;IAEjD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACgB,UAAU,CAAC9F,SAAS,CAAC,CAAC;;IAE5C;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACiB,YAAY,CAAC/F,SAAS,CAAC,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAE/C,OAAOsB,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMqE,mBAAmBA,CAAChF,SAAS,EAAE;IAAA;IAAAd,aAAA,GAAAQ,CAAA;IACnC,MAAMiB,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAG,EAAE;;IAEnB;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACkB,sBAAsB,CAAChG,SAAS,CAAC,CAAC;;IAExD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACmB,qBAAqB,CAACjG,SAAS,CAAC,CAAC;;IAEvD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACoB,eAAe,CAAClG,SAAS,CAAC,CAAC;;IAEjD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACqB,sBAAsB,CAACnG,SAAS,CAAC,CAAC;;IAExD;IAAA;IAAAd,aAAA,GAAAG,CAAA;IACAsB,QAAQ,CAACmE,IAAI,CAAC,GAAG,IAAI,CAACsB,YAAY,CAACpG,SAAS,CAAC,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAE/C,OAAOsB,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMM,wBAAwBA,CAACJ,UAAU,EAAEF,QAAQ,EAAEX,SAAS,EAAE;IAAA;IAAAd,aAAA,GAAAQ,CAAA;IAC9D,MAAMsB,OAAO;IAAA;IAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAG,EAAE;;IAElB;IACA,MAAMgH,WAAW;IAAA;IAAA,CAAAnH,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACiH,mBAAmB,CAACzF,UAAU,CAACwB,KAAK,EAAErC,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC1E,IAAIgH,WAAW,EAAE;MAAA;MAAAnH,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA2B,OAAO,CAAC8D,IAAI,CAACuB,WAAW,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAnH,aAAA,GAAAiB,CAAA;IAAA;;IAE3C;IACA,MAAMoG,cAAc;IAAA;IAAA,CAAArH,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACmH,sBAAsB,CAAC3F,UAAU,CAACyB,QAAQ,EAAEtC,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACnF,IAAIkH,cAAc,EAAE;MAAA;MAAArH,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA2B,OAAO,CAAC8D,IAAI,CAACyB,cAAc,CAAC;IAAA,CAAC;IAAA;IAAA;MAAArH,aAAA,GAAAiB,CAAA;IAAA;;IAEjD;IACA,MAAMsG,mBAAmB;IAAA;IAAA,CAAAvH,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACqH,2BAA2B,CAAC7F,UAAU,EAAEb,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACpF,IAAIoH,mBAAmB,EAAE;MAAA;MAAAvH,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA2B,OAAO,CAAC8D,IAAI,CAAC2B,mBAAmB,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAvH,aAAA,GAAAiB,CAAA;IAAA;;IAE3D;IACA,MAAMwG,cAAc;IAAA;IAAA,CAAAzH,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACuH,sBAAsB,CAAC/F,UAAU,EAAEb,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC1E,IAAIsH,cAAc,EAAE;MAAA;MAAAzH,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA2B,OAAO,CAAC8D,IAAI,CAAC6B,cAAc,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAzH,aAAA,GAAAiB,CAAA;IAAA;;IAEjD;IACA,MAAM0G,cAAc;IAAA;IAAA,CAAA3H,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACyH,sBAAsB,CAACnG,QAAQ,EAAEX,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IACxE2B,OAAO,CAAC8D,IAAI,CAAC,GAAG+B,cAAc,CAAC;;IAE/B;IACA,MAAME,YAAY;IAAA;IAAA,CAAA7H,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC2H,oBAAoB,CAACnG,UAAU,CAAC2B,MAAM,EAAExC,SAAS,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAC7E,IAAI0H,YAAY,EAAE;MAAA;MAAA7H,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA2B,OAAO,CAAC8D,IAAI,CAACiC,YAAY,CAAC;IAAA,CAAC;IAAA;IAAA;MAAA7H,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAE7C,OAAO2B,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,qBAAqBA,CAACH,OAAO,EAAEH,UAAU,EAAEF,QAAQ,EAAE;IAAA;IAAAzB,aAAA,GAAAQ,CAAA;IACzD,MAAMwB,QAAQ;IAAA;IAAA,CAAAhC,aAAA,GAAAG,CAAA,QAAG;MACfoC,OAAO,EAAE,IAAI;MACbwF,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfvF,UAAU,EAAE,CAAC;MACbwF,QAAQ,EAAE,MAAM;MAChBC,cAAc,EAAE;IAClB,CAAC;IAAC;IAAAlI,aAAA,GAAAG,CAAA;IAEF,IAAI2B,OAAO,CAACP,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAvB,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MACxB,OAAO6B,QAAQ;IACjB,CAAC;IAAA;IAAA;MAAAhC,aAAA,GAAAiB,CAAA;IAAA;;IAED;IACA,MAAMkH,cAAc;IAAA;IAAA,CAAAnI,aAAA,GAAAG,CAAA,QAAG2B,OAAO,CAACyE,MAAM,CAACpG,CAAC,IAAI;MAAA;MAAAH,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAA,CAAC,CAACiI,SAAS,KAAK,SAAS;IAAD,CAAC,CAAC;IACrE,MAAMC,cAAc;IAAA;IAAA,CAAArI,aAAA,GAAAG,CAAA,QAAG2B,OAAO,CAACyE,MAAM,CAACpG,CAAC,IAAI;MAAA;MAAAH,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAA,CAAC,CAACiI,SAAS,KAAK,SAAS;IAAD,CAAC,CAAC;;IAErE;IACA,MAAME,aAAa;IAAA;IAAA,CAAAtI,aAAA,GAAAG,CAAA,QAAGgI,cAAc,CAACI,MAAM,CAAC,CAACC,GAAG,EAAErI,CAAC,KAAK;MAAA;MAAAH,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAqI,GAAG,GAAIrI,CAAC,CAACsC,UAAU,GAAGtC,CAAC,CAACsI,MAAO;IAAD,CAAC,EAAE,CAAC,CAAC;IAC3F,MAAMC,aAAa;IAAA;IAAA,CAAA1I,aAAA,GAAAG,CAAA,SAAGkI,cAAc,CAACE,MAAM,CAAC,CAACC,GAAG,EAAErI,CAAC,KAAK;MAAA;MAAAH,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAqI,GAAG,GAAIrI,CAAC,CAACsC,UAAU,GAAGtC,CAAC,CAACsI,MAAO;IAAD,CAAC,EAAE,CAAC,CAAC;;IAE3F;IAAA;IAAAzI,aAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAqH,aAAa,GAAGI,aAAa;IAAA;IAAA,CAAA1I,aAAA,GAAAiB,CAAA,WAAIqH,aAAa,GAAG,GAAG,GAAE;MAAA;MAAAtI,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MACxD6B,QAAQ,CAACO,OAAO,GAAG;QACjBC,IAAI,EAAE,SAAS;QACfC,UAAU,EAAE6F,aAAa;QACzBxG,OAAO,EAAEqG,cAAc,CAAC5G,MAAM;QAC9B0G,QAAQ,EAAE,IAAI,CAACU,uBAAuB,CAACL,aAAa;MACtD,CAAC;MAAC;MAAAtI,aAAA,GAAAG,CAAA;MACF6B,QAAQ,CAACkG,cAAc,GAAG,KAAK;IACjC,CAAC,MAAM;MAAA;MAAAlI,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAyH,aAAa,GAAGJ,aAAa;MAAA;MAAA,CAAAtI,aAAA,GAAAiB,CAAA,WAAIyH,aAAa,GAAG,GAAG,GAAE;QAAA;QAAA1I,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAC/D6B,QAAQ,CAACO,OAAO,GAAG;UACjBC,IAAI,EAAE,SAAS;UACfC,UAAU,EAAEiG,aAAa;UACzB5G,OAAO,EAAEuG,cAAc,CAAC9G,MAAM;UAC9B0G,QAAQ,EAAE,IAAI,CAACU,uBAAuB,CAACD,aAAa;QACtD,CAAC;QAAC;QAAA1I,aAAA,GAAAG,CAAA;QACF6B,QAAQ,CAACkG,cAAc,GAAG,MAAM;MAClC,CAAC,MAAM;QAAA;QAAAlI,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACL6B,QAAQ,CAACO,OAAO,GAAG;UACjBC,IAAI,EAAE,SAAS;UACfC,UAAU,EAAE,GAAG;UACfX,OAAO,EAAEA,OAAO,CAACP,MAAM;UACvB0G,QAAQ,EAAE;QACZ,CAAC;QAAC;QAAAjI,aAAA,GAAAG,CAAA;QACF6B,QAAQ,CAACkG,cAAc,GAAG,MAAM;MAClC;IAAA;;IAEA;IAAA;IAAAlI,aAAA,GAAAG,CAAA;IACA6B,QAAQ,CAAC+F,SAAS,GAAGjG,OAAO,CACzByE,MAAM,CAACpG,CAAC,IAAI;MAAA;MAAAH,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAA,CAAC,CAACiI,SAAS,KAAKpG,QAAQ,CAACO,OAAO,EAAEC,IAAI;IAAD,CAAC,CAAC,CACnDoG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEd;IAAA;IAAA5I,aAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAkH,cAAc,CAAC5G,MAAM,GAAG,CAAC;IAAA;IAAA,CAAAvB,aAAA,GAAAiB,CAAA,WAAIoH,cAAc,CAAC9G,MAAM,GAAG,CAAC,GAAE;MAAA;MAAAvB,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAC1D6B,QAAQ,CAACgG,WAAW,GAAGlG,OAAO,CAACyE,MAAM,CAACpG,CAAC,IACrC;QAAA;QAAAH,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,kCAAAH,aAAA,GAAAiB,CAAA,WAAAd,CAAC,CAACsC,UAAU,GAAG,GAAG;QAAA;QAAA,CAAAzC,aAAA,GAAAiB,CAAA,WAAId,CAAC,CAACiI,SAAS,KAAKpG,QAAQ,CAACO,OAAO,EAAEC,IAAI;MAAD,CAC7D,CAAC;IACH,CAAC;IAAA;IAAA;MAAAxC,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAED6B,QAAQ,CAACS,UAAU;IAAG;IAAA,CAAAzC,aAAA,GAAAiB,CAAA,WAAAe,QAAQ,CAACO,OAAO,EAAEE,UAAU;IAAA;IAAA,CAAAzC,aAAA,GAAAiB,CAAA,WAAI,CAAC;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IACxD6B,QAAQ,CAACiG,QAAQ;IAAG;IAAA,CAAAjI,aAAA,GAAAiB,CAAA,WAAAe,QAAQ,CAACO,OAAO,EAAE0F,QAAQ;IAAA;IAAA,CAAAjI,aAAA,GAAAiB,CAAA,WAAI,MAAM;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEzD,OAAO6B,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,kBAAkBA,CAACnB,MAAM,EAAEiB,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzC,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACF,MAAME,KAAK,CAAC;AAClB;AACA;AACA;AACA;AACA,OAAO,EAAE,CACDU,MAAM,EACN,IAAII,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC,CAAC;MACxB;MAAA,CAAA5C,aAAA,GAAAiB,CAAA,WAAAe,QAAQ,CAACO,OAAO,EAAEC,IAAI;MAAA;MAAA,CAAAxC,aAAA,GAAAiB,CAAA,WAAI,SAAS,GACnCe,QAAQ,CAACS,UAAU,EACnBT,QAAQ,CAACiG,QAAQ,EACjBjG,QAAQ,CAACkG,cAAc,EACvBW,IAAI,CAACC,SAAS,CAAC9G,QAAQ,CAAC,CACzB,CAAC;IACJ,CAAC,CAAC,OAAOe,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdD,MAAM,CAAC6C,KAAK,CAAC,kCAAkC,EAAE;QAC/ChC,MAAM,EAAEA,MAAM;QACdgC,KAAK,EAAEA,KAAK,CAACC;MACf,CAAC,CAAC;IACJ;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMF,uBAAuBA,CAACd,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IACtC,MAAMqC,eAAe;IAAA;IAAA,CAAA7C,aAAA,GAAAG,CAAA,SAAG;MACtB4I,MAAM,EAAE/G,QAAQ,CAACkG,cAAc;MAC/BzF,UAAU,EAAET,QAAQ,CAACS,UAAU;MAC/BuG,SAAS,EAAE,IAAI,CAACC,kBAAkB,CAACjH,QAAQ,CAAC;MAC5CkH,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACnH,QAAQ,CAAC;MAClDoH,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACrH,QAAQ,CAAC;MAC1CsH,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAACvH,QAAQ,CAAC;MAC9CR,SAAS,EAAE,IAAI,CAACgI,kBAAkB,CAACxH,QAAQ,CAAC;MAC5CyH,SAAS,EAAE,IAAI,CAACC,iBAAiB,CAAC1H,QAAQ;IAC5C,CAAC;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAEF,OAAO0C,eAAe;EACxB;;EAEA;EACAY,YAAYA,CAACkG,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzB,IAAIwJ,IAAI,CAACpI,MAAM,GAAGqI,MAAM,EAAE;MAAA;MAAA5J,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IACtC,MAAM2H,KAAK;IAAA;IAAA,CAAA5I,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACf,KAAK,CAAC,CAACgB,MAAM,CAAC;IACjC,MAAMpB,GAAG;IAAA;IAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAGyI,KAAK,CAACL,MAAM,CAAC,CAACsB,GAAG,EAAEC,IAAI,KAAK;MAAA;MAAA9J,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAA0J,GAAG,GAAGC,IAAI,CAACC,KAAK;IAAD,CAAC,EAAE,CAAC,CAAC;IAAC;IAAA/J,aAAA,GAAAG,CAAA;IAC7D,OAAOqI,GAAG,GAAGoB,MAAM;EACrB;EAEA/F,YAAYA,CAAC8F,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzB,IAAIwJ,IAAI,CAACpI,MAAM,GAAGqI,MAAM,EAAE;MAAA;MAAA5J,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IACtC,MAAM+I,UAAU;IAAA;IAAA,CAAAhK,aAAA,GAAAG,CAAA,SAAG,CAAC,IAAIyJ,MAAM,GAAG,CAAC,CAAC;IACnC,IAAIK,GAAG;IAAA;IAAA,CAAAjK,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAAC,CAAC,CAAC,CAACI,KAAK;IAAC;IAAA/J,aAAA,GAAAG,CAAA;IAExB,KAAK,IAAI+J,CAAC;IAAA;IAAA,CAAAlK,aAAA,GAAAG,CAAA,SAAG,CAAC,GAAE+J,CAAC,GAAGP,IAAI,CAACpI,MAAM,EAAE2I,CAAC,EAAE,EAAE;MAAA;MAAAlK,aAAA,GAAAG,CAAA;MACpC8J,GAAG,GAAG,CAACN,IAAI,CAACO,CAAC,CAAC,CAACH,KAAK,GAAGE,GAAG,IAAID,UAAU,GAAGC,GAAG;IAChD;IAAC;IAAAjK,aAAA,GAAAG,CAAA;IAED,OAAO8J,GAAG;EACZ;EAEA7F,YAAYA,CAACuF,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzB,IAAIwJ,IAAI,CAACpI,MAAM,GAAGqI,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA5J,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAE1C,IAAIkJ,KAAK;IAAA;IAAA,CAAAnK,aAAA,GAAAG,CAAA,SAAG,CAAC;IACb,IAAIiK,MAAM;IAAA;IAAA,CAAApK,aAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEf,KAAK,IAAI+J,CAAC;IAAA;IAAA,CAAAlK,aAAA,GAAAG,CAAA,SAAG,CAAC,GAAE+J,CAAC,GAAGN,MAAM,GAAG,CAAC,EAAEM,CAAC,EAAE,EAAE;MACnC,MAAMG,MAAM;MAAA;MAAA,CAAArK,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACO,CAAC,CAAC,CAACH,KAAK,GAAGJ,IAAI,CAACO,CAAC,GAAG,CAAC,CAAC,CAACH,KAAK;MAAC;MAAA/J,aAAA,GAAAG,CAAA;MACjD,IAAIkK,MAAM,GAAG,CAAC,EAAE;QAAA;QAAArK,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAAAgK,KAAK,IAAIE,MAAM;MAAA,CAAC,MAC3B;QAAA;QAAArK,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAAAiK,MAAM,IAAIC,MAAM;MAAA;IACvB;IAEA,IAAIC,OAAO;IAAA;IAAA,CAAAtK,aAAA,GAAAG,CAAA,SAAGgK,KAAK,GAAGP,MAAM;IAC5B,IAAIW,OAAO;IAAA;IAAA,CAAAvK,aAAA,GAAAG,CAAA,SAAGiK,MAAM,GAAGR,MAAM;IAAC;IAAA5J,aAAA,GAAAG,CAAA;IAE9B,KAAK,IAAI+J,CAAC;IAAA;IAAA,CAAAlK,aAAA,GAAAG,CAAA,SAAGyJ,MAAM,GAAG,CAAC,GAAEM,CAAC,GAAGP,IAAI,CAACpI,MAAM,EAAE2I,CAAC,EAAE,EAAE;MAC7C,MAAMG,MAAM;MAAA;MAAA,CAAArK,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACO,CAAC,CAAC,CAACH,KAAK,GAAGJ,IAAI,CAACO,CAAC,GAAG,CAAC,CAAC,CAACH,KAAK;MAAC;MAAA/J,aAAA,GAAAG,CAAA;MACjD,IAAIkK,MAAM,GAAG,CAAC,EAAE;QAAA;QAAArK,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACdmK,OAAO,GAAG,CAACA,OAAO,IAAIV,MAAM,GAAG,CAAC,CAAC,GAAGS,MAAM,IAAIT,MAAM;QAAC;QAAA5J,aAAA,GAAAG,CAAA;QACrDoK,OAAO,GAAIA,OAAO,IAAIX,MAAM,GAAG,CAAC,CAAC,GAAIA,MAAM;MAC7C,CAAC,MAAM;QAAA;QAAA5J,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACLmK,OAAO,GAAIA,OAAO,IAAIV,MAAM,GAAG,CAAC,CAAC,GAAIA,MAAM;QAAC;QAAA5J,aAAA,GAAAG,CAAA;QAC5CoK,OAAO,GAAG,CAACA,OAAO,IAAIX,MAAM,GAAG,CAAC,CAAC,GAAGS,MAAM,IAAIT,MAAM;MACtD;IACF;IAEA,MAAMY,EAAE;IAAA;IAAA,CAAAxK,aAAA,GAAAG,CAAA,SAAGmK,OAAO,GAAGC,OAAO;IAAC;IAAAvK,aAAA,GAAAG,CAAA;IAC7B,OAAO,GAAG,GAAI,GAAG,IAAI,CAAC,GAAGqK,EAAE,CAAE;EAC/B;EAEAlG,aAAaA,CAACqF,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAClB,IAAIwJ,IAAI,CAACpI,MAAM,GAAG,EAAE,EAAE;MAAA;MAAAvB,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAElC,MAAMwJ,KAAK;IAAA;IAAA,CAAAzK,aAAA,GAAAG,CAAA,SAAG,IAAI,CAAC0D,YAAY,CAAC8F,IAAI,EAAE,EAAE,CAAC;IACzC,MAAMe,KAAK;IAAA;IAAA,CAAA1K,aAAA,GAAAG,CAAA,SAAG,IAAI,CAAC0D,YAAY,CAAC8F,IAAI,EAAE,EAAE,CAAC;IACzC,MAAMgB,QAAQ;IAAA;IAAA,CAAA3K,aAAA,GAAAG,CAAA,SAAGsK,KAAK,GAAGC,KAAK;;IAE9B;IACA,MAAME,QAAQ;IAAA;IAAA,CAAA5K,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACf,KAAK,CAAC,CAAC,CAAC,CAAC,CAACiC,GAAG,CAAC,CAACC,CAAC,EAAEZ,CAAC,KAAM;MAAA;MAAAlK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA;QAAE4J,KAAK,EAAEY;MAAS,CAAC;IAAD,CAAE,CAAC;IACpE,MAAMI,UAAU;IAAA;IAAA,CAAA/K,aAAA,GAAAG,CAAA,SAAG,IAAI,CAAC0D,YAAY,CAAC+G,QAAQ,EAAE,CAAC,CAAC;IAAC;IAAA5K,aAAA,GAAAG,CAAA;IAElD,OAAO;MACLkE,IAAI,EAAEsG,QAAQ;MACdK,MAAM,EAAED,UAAU;MAClBE,SAAS,EAAEN,QAAQ,GAAGI,UAAU;MAChC3C,SAAS,EAAEuC,QAAQ,GAAGI,UAAU;MAAA;MAAA,CAAA/K,aAAA,GAAAiB,CAAA,WAAG,SAAS;MAAA;MAAA,CAAAjB,aAAA,GAAAiB,CAAA,WAAG,SAAS;IAC1D,CAAC;EACH;;EAEA;EACAwF,UAAUA,CAACkD,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IACf,MAAMiB,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAG,EAAE;IACnB,MAAM+K,MAAM;IAAA;IAAA,CAAAlL,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACf,KAAK,CAAC,CAAC,CAAC,CAAC;IAAC;IAAA5I,aAAA,GAAAG,CAAA;IAE9B+K,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM,EAAElB,CAAC,KAAK;MAAA;MAAAlK,aAAA,GAAAQ,CAAA;MAC5B,MAAM6K,QAAQ;MAAA;MAAA,CAAArL,aAAA,GAAAG,CAAA,SAAGmL,IAAI,CAACC,GAAG,CAACH,MAAM,CAACrB,KAAK,GAAGqB,MAAM,CAACI,IAAI,CAAC;MACrD,MAAMC,UAAU;MAAA;MAAA,CAAAzL,aAAA,GAAAG,CAAA,SAAGiL,MAAM,CAACM,IAAI,GAAGN,MAAM,CAACO,GAAG;MAAC;MAAA3L,aAAA,GAAAG,CAAA;MAE5C,IAAIkL,QAAQ,GAAGI,UAAU,GAAG,GAAG,EAAE;QAAA;QAAAzL,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAC/BsB,QAAQ,CAACmE,IAAI,CAAC;UACZpD,IAAI,EAAE,MAAM;UACZoJ,OAAO,EAAE,UAAU;UACnBnJ,UAAU,EAAE,GAAG;UACf2F,SAAS,EAAE,SAAS;UACpBzF,SAAS,EAAEyI,MAAM,CAACzI,SAAS;UAC3BkJ,WAAW,EAAE;QACf,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA7L,aAAA,GAAAiB,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEH,OAAOsB,QAAQ;EACjB;EAEAiF,YAAYA,CAACiD,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IACjB,MAAMiB,QAAQ;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAG,EAAE;IACnB,MAAM+K,MAAM;IAAA;IAAA,CAAAlL,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACf,KAAK,CAAC,CAAC,CAAC,CAAC;IAAC;IAAA5I,aAAA,GAAAG,CAAA;IAE9B+K,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM,EAAElB,CAAC,KAAK;MAAA;MAAAlK,aAAA,GAAAQ,CAAA;MAC5B,MAAM6K,QAAQ;MAAA;MAAA,CAAArL,aAAA,GAAAG,CAAA,SAAGmL,IAAI,CAACC,GAAG,CAACH,MAAM,CAACrB,KAAK,GAAGqB,MAAM,CAACI,IAAI,CAAC;MACrD,MAAMM,WAAW;MAAA;MAAA,CAAA9L,aAAA,GAAAG,CAAA,SAAGmL,IAAI,CAACS,GAAG,CAACX,MAAM,CAACI,IAAI,EAAEJ,MAAM,CAACrB,KAAK,CAAC,GAAGqB,MAAM,CAACO,GAAG;MACpE,MAAMK,WAAW;MAAA;MAAA,CAAAhM,aAAA,GAAAG,CAAA,SAAGiL,MAAM,CAACM,IAAI,GAAGJ,IAAI,CAACW,GAAG,CAACb,MAAM,CAACI,IAAI,EAAEJ,MAAM,CAACrB,KAAK,CAAC;MAAC;MAAA/J,aAAA,GAAAG,CAAA;MAEtE;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAA6K,WAAW,GAAGT,QAAQ,GAAG,CAAC;MAAA;MAAA,CAAArL,aAAA,GAAAiB,CAAA,WAAI+K,WAAW,GAAGX,QAAQ,GAAG,GAAG,GAAE;QAAA;QAAArL,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAC9DsB,QAAQ,CAACmE,IAAI,CAAC;UACZpD,IAAI,EAAE,QAAQ;UACdoJ,OAAO,EAAE,UAAU;UACnBnJ,UAAU,EAAE,IAAI;UAChB2F,SAAS,EAAE,SAAS;UACpBzF,SAAS,EAAEyI,MAAM,CAACzI,SAAS;UAC3BkJ,WAAW,EAAE;QACf,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA7L,aAAA,GAAAiB,CAAA;MAAA;IACH,CAAC,CAAC;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEH,OAAOsB,QAAQ;EACjB;;EAEA;EACAkF,eAAeA,CAACgD,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EACnCyG,UAAUA,CAAC+C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAC9B0G,YAAYA,CAAC8C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAChC2G,sBAAsBA,CAAC6C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAC1C4G,qBAAqBA,CAAC4C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EACzC6G,eAAeA,CAAC2C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EACnC8G,sBAAsBA,CAAC0C,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAC1C+G,YAAYA,CAACyC,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAChC6F,sBAAsBA,CAAC2D,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;EAC1C+F,oBAAoBA,CAACyD,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,EAAE;EAAE;;EAExC;EACAiH,mBAAmBA,CAACjE,KAAK,EAAEwG,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC/B;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,YAACkC,KAAK,CAACK,MAAM;IAAA;IAAA,CAAAxD,aAAA,GAAAiB,CAAA,WAAI,CAACkC,KAAK,CAACO,MAAM,GAAE;MAAA;MAAA1D,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAEhD,MAAMiL,YAAY;IAAA;IAAA,CAAAlM,aAAA,GAAAG,CAAA,SAAGwJ,IAAI,CAACA,IAAI,CAACpI,MAAM,GAAG,CAAC,CAAC,CAACwI,KAAK;IAAC;IAAA/J,aAAA,GAAAG,CAAA;IAEjD;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAiL,YAAY,GAAG/I,KAAK,CAACK,MAAM;IAAA;IAAA,CAAAxD,aAAA,GAAAiB,CAAA,WAAIkC,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACO,MAAM,GAAE;MAAA;MAAA1D,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAC9D,OAAO;QACLqC,IAAI,EAAE,iBAAiB;QACvB4F,SAAS,EAAE,SAAS;QACpB3F,UAAU,EAAE,GAAG;QACfgG,MAAM,EAAE,GAAG;QACXoD,WAAW,EAAE;MACf,CAAC;IACH,CAAC,MAAM;MAAA;MAAA7L,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAiL,YAAY,GAAG/I,KAAK,CAACK,MAAM;MAAA;MAAA,CAAAxD,aAAA,GAAAiB,CAAA,WAAIkC,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACO,MAAM,GAAE;QAAA;QAAA1D,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QACrE,OAAO;UACLqC,IAAI,EAAE,iBAAiB;UACvB4F,SAAS,EAAE,SAAS;UACpB3F,UAAU,EAAE,GAAG;UACfgG,MAAM,EAAE,GAAG;UACXoD,WAAW,EAAE;QACf,CAAC;MACH,CAAC;MAAA;MAAA;QAAA7L,aAAA,GAAAiB,CAAA;MAAA;IAAD;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAED,OAAO,IAAI;EACb;EAEAmH,sBAAsBA,CAAClE,QAAQ,EAAEuG,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACrC;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,YAACmC,QAAQ,CAACe,GAAG;IAAA;IAAA,CAAAnE,aAAA,GAAAiB,CAAA,WAAI,CAACmC,QAAQ,CAACiB,IAAI,GAAE;MAAA;MAAArE,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAEjD;IAAI;IAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAmC,QAAQ,CAACe,GAAG,GAAG,EAAE;IAAA;IAAA,CAAAnE,aAAA,GAAAiB,CAAA,WAAImC,QAAQ,CAACiB,IAAI,CAAC4G,SAAS,GAAG,CAAC,GAAE;MAAA;MAAAjL,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MACpD,OAAO;QACLqC,IAAI,EAAE,UAAU;QAChB4F,SAAS,EAAE,SAAS;QACpB3F,UAAU,EAAE,GAAG;QACfgG,MAAM,EAAE,GAAG;QACXoD,WAAW,EAAE;MACf,CAAC;IACH,CAAC,MAAM;MAAA;MAAA7L,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA;MAAI;MAAA,CAAAH,aAAA,GAAAiB,CAAA,WAAAmC,QAAQ,CAACe,GAAG,GAAG,EAAE;MAAA;MAAA,CAAAnE,aAAA,GAAAiB,CAAA,WAAImC,QAAQ,CAACiB,IAAI,CAAC4G,SAAS,GAAG,CAAC,GAAE;QAAA;QAAAjL,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAC3D,OAAO;UACLqC,IAAI,EAAE,UAAU;UAChB4F,SAAS,EAAE,SAAS;UACpB3F,UAAU,EAAE,GAAG;UACfgG,MAAM,EAAE,GAAG;UACXoD,WAAW,EAAE;QACf,CAAC;MACH,CAAC;MAAA;MAAA;QAAA7L,aAAA,GAAAiB,CAAA;MAAA;IAAD;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAED,OAAO,IAAI;EACb;EAEAqH,2BAA2BA,CAAC7F,UAAU,EAAEgI,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC5C;IACA,OAAO,IAAI;EACb;EAEAuH,sBAAsBA,CAAC/F,UAAU,EAAEgI,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACvC;IACA,OAAO,IAAI;EACb;EAEAyH,sBAAsBA,CAACnG,QAAQ,EAAEkI,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACrC,OAAOsB,QAAQ,CAACoJ,GAAG,CAACe,OAAO,IAAK;MAAA;MAAA5L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA;QAC9BqC,IAAI,EAAE,SAAS;QACf4F,SAAS,EAAEwD,OAAO,CAACxD,SAAS;QAC5B3F,UAAU,EAAEmJ,OAAO,CAACnJ,UAAU;QAC9BgG,MAAM,EAAE,GAAG;QACXoD,WAAW,EAAED,OAAO,CAACC,WAAW;QAChCD,OAAO,EAAEA,OAAO,CAACpJ;MACnB,CAAC;IAAD,CAAE,CAAC;EACL;EAEAsF,oBAAoBA,CAACxE,MAAM,EAAEqG,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACjC,IAAI,CAACmD,MAAM,CAAC+B,YAAY,EAAE;MAAA;MAAArF,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAEtC,IAAImD,MAAM,CAAC+B,YAAY,GAAG,GAAG,EAAE;MAAA;MAAArF,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAC7B,OAAO;QACLqC,IAAI,EAAE,QAAQ;QACd4F,SAAS,EAAE,SAAS;QACpB3F,UAAU,EAAE,GAAG;QACfgG,MAAM,EAAE,GAAG;QACXoD,WAAW,EAAE;MACf,CAAC;IACH,CAAC;IAAA;IAAA;MAAA7L,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAED,OAAO,IAAI;EACb;;EAEA;EACAwI,uBAAuBA,CAAClG,UAAU,EAAE;IAAA;IAAAzC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAClC,IAAIsC,UAAU,GAAG,GAAG,EAAE;MAAA;MAAAzC,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IACtC,IAAIsC,UAAU,GAAG,GAAG,EAAE;MAAA;MAAAzC,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,UAAU;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IACxC,OAAO,MAAM;EACf;EAEA8I,kBAAkBA,CAACjH,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC3B,IAAI6B,QAAQ,CAACS,UAAU,GAAG,GAAG,EAAE;MAAA;MAAAzC,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAC5C,IAAI6B,QAAQ,CAACS,UAAU,GAAG,GAAG,EAAE;MAAA;MAAAzC,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAC/C,OAAO,MAAM;EACf;EAEAgJ,qBAAqBA,CAACnH,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAC9B,MAAM2L,QAAQ;IAAA;IAAA,CAAAnM,aAAA,GAAAG,CAAA,SAAG,IAAI,EAAC,CAAC;IACvB,MAAM6J,UAAU;IAAA;IAAA,CAAAhK,aAAA,GAAAG,CAAA,SAAG6B,QAAQ,CAACS,UAAU;IAAC;IAAAzC,aAAA,GAAAG,CAAA;IACvC,OAAOmL,IAAI,CAACS,GAAG,CAACI,QAAQ,GAAGnC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;EAChD;EAEAX,iBAAiBA,CAACrH,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAC1B,MAAM4L,QAAQ;IAAA;IAAA,CAAApM,aAAA,GAAAG,CAAA,SAAG,IAAI,EAAC,CAAC;IACvB,MAAMkM,cAAc;IAAA;IAAA,CAAArM,aAAA,GAAAG,CAAA,SAAG6B,QAAQ,CAACS,UAAU,GAAG,GAAG;IAAA;IAAA,CAAAzC,aAAA,GAAAiB,CAAA,WAAG,GAAG;IAAA;IAAA,CAAAjB,aAAA,GAAAiB,CAAA,WAAG,GAAG;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAC7D,OAAOiM,QAAQ,GAAGC,cAAc;EAClC;EAEA9C,mBAAmBA,CAACvH,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAC5B,MAAM8L,UAAU;IAAA;IAAA,CAAAtM,aAAA,GAAAG,CAAA,SAAG,IAAI,EAAC,CAAC;IACzB,MAAMoM,gBAAgB;IAAA;IAAA,CAAAvM,aAAA,GAAAG,CAAA,SAAG6B,QAAQ,CAACS,UAAU,GAAG,GAAG;IAAA;IAAA,CAAAzC,aAAA,GAAAiB,CAAA,WAAG,GAAG;IAAA;IAAA,CAAAjB,aAAA,GAAAiB,CAAA,WAAG,GAAG;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAC/D,OAAOmM,UAAU,GAAGC,gBAAgB;EACtC;EAEA/C,kBAAkBA,CAACxH,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC3B,IAAI6B,QAAQ,CAACiG,QAAQ,KAAK,QAAQ,EAAE;MAAA;MAAAjI,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IACnD,IAAI6B,QAAQ,CAACiG,QAAQ,KAAK,UAAU,EAAE;MAAA;MAAAjI,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,OAAO,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IACtD,OAAO,MAAM;EACf;EAEAuJ,iBAAiBA,CAAC1H,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAAQ,CAAA;IAC1B,MAAMgM,OAAO;IAAA;IAAA,CAAAxM,aAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEnB,IAAI6B,QAAQ,CAACO,OAAO,EAAEC,IAAI,KAAK,SAAS,EAAE;MAAA;MAAAxC,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MACxCqM,OAAO,CAAC5G,IAAI,CAAC,mCAAmC,CAAC;IACnD,CAAC,MAAM;MAAA;MAAA5F,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MAAA,IAAI6B,QAAQ,CAACO,OAAO,EAAEC,IAAI,KAAK,SAAS,EAAE;QAAA;QAAAxC,aAAA,GAAAiB,CAAA;QAAAjB,aAAA,GAAAG,CAAA;QAC/CqM,OAAO,CAAC5G,IAAI,CAAC,mCAAmC,CAAC;MACnD,CAAC;MAAA;MAAA;QAAA5F,aAAA,GAAAiB,CAAA;MAAA;IAAD;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAED,IAAI6B,QAAQ,CAACgG,WAAW,CAACzG,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAvB,aAAA,GAAAiB,CAAA;MAAAjB,aAAA,GAAAG,CAAA;MACnCqM,OAAO,CAAC5G,IAAI,CAAC,kCAAkC,CAAC;IAClD,CAAC;IAAA;IAAA;MAAA5F,aAAA,GAAAiB,CAAA;IAAA;IAAAjB,aAAA,GAAAG,CAAA;IAED,OAAOqM,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAC3B;;EAEA;EACAzI,uBAAuBA,CAAC2F,IAAI,EAAEC,MAAM,EAAE8C,MAAM,EAAE;IAAA;IAAA1M,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC5C;IACA,OAAO;MAAEwM,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;EAC1C;EAEArI,mBAAmBA,CAACmF,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAChC;IACA,OAAO;MAAE2M,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EACvB;EAEArI,kBAAkBA,CAACiF,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC/B;IACA,OAAO,CAAC;EACV;EAEA2E,YAAYA,CAAC6E,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACzB;IACA,OAAO,CAAC;EACV;EAEAqF,YAAYA,CAACmE,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACjB;IACA,OAAO,CAAC;EACV;;EAEA;EACA+D,uBAAuBA,CAACf,KAAK,EAAE;IAAA;IAAAnD,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,SAAS;EAAE;EACnDyE,sBAAsBA,CAACxB,QAAQ,EAAE;IAAA;IAAApD,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,GAAG;EAAE;EAC/C6E,wBAAwBA,CAAC2E,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,GAAG;EAAE;EAC7C+E,wBAAwBA,CAACyE,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,GAAG;EAAE;EAC7CiF,kBAAkBA,CAACuE,IAAI,EAAEC,MAAM,EAAE;IAAA;IAAA5J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,CAAC;EAAE;EAC7CmF,oBAAoBA,CAACqE,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO,GAAG;EAAE;EACzCsF,0BAA0BA,CAACkE,IAAI,EAAE;IAAA;IAAA3J,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAAE,OAAO;MAAE6M,OAAO,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAG,CAAC;EAAE;AAC7E;AAAC;AAAAjN,aAAA,GAAAG,CAAA;AAED+M,MAAM,CAACC,OAAO,GAAG7M,eAAe","ignoreList":[]}