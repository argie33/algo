{"version":3,"names":["crypto","require","PerformanceMonitoringService","constructor","metrics","Map","alerts","recommendations","performanceData","responseTime","throughput","errorRate","systemHealth","thresholds","warning","critical","memoryUsage","cpuUsage","categories","startPeriodicMonitoring","recordMetric","name","value","category","metadata","timestamp","Date","now","metricId","randomUUID","metric","id","source","environment","process","env","NODE_ENV","has","set","metricHistory","get","push","length","splice","analyzeMetricForAlerts","updatePerformanceData","includes","triggerAlert","threshold","impact","toFixed","severity","title","details","alert","toISOString","status","acknowledged","resolvedAt","slice","console","log","generateRecommendation","relevantRecommendations","recommendation","alertId","priority","categorizeMetric","implemented","metricName","toLowerCase","timeWindow","filter","point","calculateStatistics","recentMetrics","m","values","map","sort","a","b","count","sum","reduce","acc","val","mean","median","Math","floor","p95Index","p99Index","variance","pow","stdDev","sqrt","parseFloat","min","max","p95","p99","lastUpdated","getPerformanceDashboard","oneHour","healthScore","calculateSystemHealthScore","recentAlerts","getTime","activeRecommendations","rec","priorityOrder","metricSummaries","entries","stats","systemMetrics","memory","used","heapUsed","total","heapTotal","utilization","external","uptime","nodeVersion","version","platform","architecture","arch","summary","totalMetrics","size","recent","system","performance","calculateAverageFromArray","score","forEach","avgErrorRate","avgResponseTime","memoryUtilization","dataArray","item","setInterval","collectSystemMetrics","cleanup","user","getMetricsByCategory","categoryMetrics","statistics","acknowledgeAlert","acknowledgedBy","find","acknowledgedAt","resolveAlert","resolvedBy","resolution","implementRecommendation","recommendationId","implementedBy","r","implementedAt","maxAge","filteredMetrics","exportPerformanceData","format","exportData","data","convertToCSV","csvRows","metricData","Object","join","module","exports"],"sources":["performanceMonitoringService.js"],"sourcesContent":["// Performance Monitoring Service\n// Automated alerting, optimization recommendations, and BI dashboard\n\nconst crypto = require('crypto');\n\nclass PerformanceMonitoringService {\n  constructor() {\n    this.metrics = new Map();\n    this.alerts = [];\n    this.recommendations = [];\n    this.performanceData = {\n      responseTime: [],\n      throughput: [],\n      errorRate: [],\n      systemHealth: []\n    };\n    \n    // Performance thresholds\n    this.thresholds = {\n      responseTime: {\n        warning: 2000,   // 2 seconds\n        critical: 5000   // 5 seconds\n      },\n      errorRate: {\n        warning: 0.05,   // 5%\n        critical: 0.10   // 10%\n      },\n      throughput: {\n        warning: 10,     // requests per second\n        critical: 5      // requests per second\n      },\n      memoryUsage: {\n        warning: 0.80,   // 80%\n        critical: 0.90   // 90%\n      },\n      cpuUsage: {\n        warning: 0.70,   // 70%\n        critical: 0.85   // 85%\n      }\n    };\n    \n    // Performance categories for analysis\n    this.categories = {\n      'database': 'Database Operations',\n      'api': 'API Endpoints',\n      'external': 'External Service Calls',\n      'compute': 'Computational Tasks',\n      'memory': 'Memory Operations',\n      'io': 'Input/Output Operations'\n    };\n    \n    // Start periodic monitoring\n    this.startPeriodicMonitoring();\n  }\n\n  // Record performance metric\n  recordMetric(name, value, category = 'general', metadata = {}) {\n    const timestamp = Date.now();\n    const metricId = crypto.randomUUID();\n    \n    const metric = {\n      id: metricId,\n      name,\n      value,\n      category,\n      timestamp,\n      metadata: {\n        ...metadata,\n        source: 'performance_service',\n        environment: process.env.NODE_ENV || 'production'\n      }\n    };\n    \n    // Store metric\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    \n    const metricHistory = this.metrics.get(name);\n    metricHistory.push(metric);\n    \n    // Keep only recent metrics (last 1000 per metric)\n    if (metricHistory.length > 1000) {\n      metricHistory.splice(0, metricHistory.length - 1000);\n    }\n    \n    // Analyze metric for alerts\n    this.analyzeMetricForAlerts(metric);\n    \n    // Update aggregated performance data\n    this.updatePerformanceData(name, value, timestamp);\n    \n    return metric;\n  }\n\n  // Analyze metric for alert conditions\n  analyzeMetricForAlerts(metric) {\n    const { name, value, timestamp } = metric;\n    \n    // Check response time alerts\n    if (name.includes('response_time') || name.includes('duration')) {\n      if (value > this.thresholds.responseTime.critical) {\n        this.triggerAlert('CRITICAL', 'High Response Time', {\n          metric: name,\n          value: `${value}ms`,\n          threshold: `${this.thresholds.responseTime.critical}ms`,\n          impact: 'User experience severely degraded'\n        });\n      } else if (value > this.thresholds.responseTime.warning) {\n        this.triggerAlert('WARNING', 'Elevated Response Time', {\n          metric: name,\n          value: `${value}ms`,\n          threshold: `${this.thresholds.responseTime.warning}ms`,\n          impact: 'User experience may be affected'\n        });\n      }\n    }\n    \n    // Check error rate alerts\n    if (name.includes('error_rate')) {\n      if (value > this.thresholds.errorRate.critical) {\n        this.triggerAlert('CRITICAL', 'High Error Rate', {\n          metric: name,\n          value: `${(value * 100).toFixed(2)}%`,\n          threshold: `${(this.thresholds.errorRate.critical * 100).toFixed(2)}%`,\n          impact: 'Service reliability compromised'\n        });\n      } else if (value > this.thresholds.errorRate.warning) {\n        this.triggerAlert('WARNING', 'Elevated Error Rate', {\n          metric: name,\n          value: `${(value * 100).toFixed(2)}%`,\n          threshold: `${(this.thresholds.errorRate.warning * 100).toFixed(2)}%`,\n          impact: 'Service stability may be affected'\n        });\n      }\n    }\n    \n    // Check memory usage alerts\n    if (name.includes('memory')) {\n      if (value > this.thresholds.memoryUsage.critical) {\n        this.triggerAlert('CRITICAL', 'Critical Memory Usage', {\n          metric: name,\n          value: `${(value * 100).toFixed(1)}%`,\n          threshold: `${(this.thresholds.memoryUsage.critical * 100).toFixed(1)}%`,\n          impact: 'Risk of service crashes'\n        });\n      } else if (value > this.thresholds.memoryUsage.warning) {\n        this.triggerAlert('WARNING', 'High Memory Usage', {\n          metric: name,\n          value: `${(value * 100).toFixed(1)}%`,\n          threshold: `${(this.thresholds.memoryUsage.warning * 100).toFixed(1)}%`,\n          impact: 'Performance degradation possible'\n        });\n      }\n    }\n  }\n\n  // Trigger performance alert\n  triggerAlert(severity, title, details) {\n    const alert = {\n      id: crypto.randomUUID(),\n      severity,\n      title,\n      details,\n      timestamp: new Date().toISOString(),\n      status: 'ACTIVE',\n      category: 'PERFORMANCE',\n      acknowledged: false,\n      resolvedAt: null\n    };\n    \n    this.alerts.push(alert);\n    \n    // Keep only recent alerts (last 500)\n    if (this.alerts.length > 500) {\n      this.alerts = this.alerts.slice(-500);\n    }\n    \n    // Log alert\n    console.log(`[PERFORMANCE ALERT] ${severity}: ${title}`, details);\n    \n    // Generate recommendation based on alert\n    this.generateRecommendation(alert);\n    \n    return alert;\n  }\n\n  // Generate optimization recommendation\n  generateRecommendation(alert) {\n    const recommendations = {\n      'High Response Time': [\n        'Consider implementing caching for frequently accessed data',\n        'Optimize database queries with proper indexing',\n        'Review and optimize slow API endpoints',\n        'Consider database connection pooling'\n      ],\n      'High Error Rate': [\n        'Review error logs for common failure patterns',\n        'Implement circuit breakers for external service calls',\n        'Add input validation to prevent invalid requests',\n        'Improve error handling and recovery mechanisms'\n      ],\n      'High Memory Usage': [\n        'Review memory-intensive operations and optimize',\n        'Implement proper garbage collection strategies',\n        'Consider streaming for large data processing',\n        'Review object lifecycle and cleanup patterns'\n      ],\n      'Low Throughput': [\n        'Optimize critical path operations',\n        'Consider horizontal scaling options',\n        'Review and tune thread/worker configurations',\n        'Implement request batching where appropriate'\n      ]\n    };\n    \n    const relevantRecommendations = recommendations[alert.title] || [\n      'Monitor system metrics for patterns',\n      'Review application logs for anomalies',\n      'Consider performance profiling'\n    ];\n    \n    const recommendation = {\n      id: crypto.randomUUID(),\n      alertId: alert.id,\n      title: `Optimization Recommendations for ${alert.title}`,\n      recommendations: relevantRecommendations,\n      priority: alert.severity === 'CRITICAL' ? 'HIGH' : 'MEDIUM',\n      category: alert.details.metric ? this.categorizeMetric(alert.details.metric) : 'general',\n      timestamp: new Date().toISOString(),\n      implemented: false\n    };\n    \n    this.recommendations.push(recommendation);\n    \n    return recommendation;\n  }\n\n  // Categorize metric by name\n  categorizeMetric(metricName) {\n    const name = metricName.toLowerCase();\n    \n    if (name.includes('db') || name.includes('database') || name.includes('query')) {\n      return 'database';\n    }\n    if (name.includes('api') || name.includes('endpoint') || name.includes('route')) {\n      return 'api';\n    }\n    if (name.includes('external') || name.includes('http') || name.includes('request')) {\n      return 'external';\n    }\n    if (name.includes('memory') || name.includes('heap')) {\n      return 'memory';\n    }\n    if (name.includes('cpu') || name.includes('compute')) {\n      return 'compute';\n    }\n    \n    return 'general';\n  }\n\n  // Update aggregated performance data\n  updatePerformanceData(metricName, value, timestamp) {\n    const timeWindow = 5 * 60 * 1000; // 5 minutes\n    const now = Date.now();\n    \n    // Update response time data\n    if (metricName.includes('response_time') || metricName.includes('duration')) {\n      this.performanceData.responseTime.push({ timestamp, value });\n      this.performanceData.responseTime = this.performanceData.responseTime\n        .filter(point => now - point.timestamp < timeWindow);\n    }\n    \n    // Update error rate data\n    if (metricName.includes('error_rate')) {\n      this.performanceData.errorRate.push({ timestamp, value });\n      this.performanceData.errorRate = this.performanceData.errorRate\n        .filter(point => now - point.timestamp < timeWindow);\n    }\n    \n    // Update throughput data\n    if (metricName.includes('throughput') || metricName.includes('requests_per_second')) {\n      this.performanceData.throughput.push({ timestamp, value });\n      this.performanceData.throughput = this.performanceData.throughput\n        .filter(point => now - point.timestamp < timeWindow);\n    }\n  }\n\n  // Calculate performance statistics\n  calculateStatistics(metricName, timeWindow = 3600000) { // 1 hour default\n    const metrics = this.metrics.get(metricName);\n    if (!metrics) {\n      return null;\n    }\n    \n    const now = Date.now();\n    const recentMetrics = metrics.filter(m => now - m.timestamp < timeWindow);\n    \n    if (recentMetrics.length === 0) {\n      return null;\n    }\n    \n    const values = recentMetrics.map(m => m.value);\n    values.sort((a, b) => a - b);\n    \n    const count = values.length;\n    const sum = values.reduce((acc, val) => acc + val, 0);\n    const mean = sum / count;\n    \n    const median = count % 2 === 0\n      ? (values[count / 2 - 1] + values[count / 2]) / 2\n      : values[Math.floor(count / 2)];\n    \n    const p95Index = Math.floor(count * 0.95);\n    const p99Index = Math.floor(count * 0.99);\n    \n    // Calculate standard deviation\n    const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / count;\n    const stdDev = Math.sqrt(variance);\n    \n    return {\n      count,\n      mean: parseFloat(mean.toFixed(2)),\n      median: parseFloat(median.toFixed(2)),\n      min: values[0],\n      max: values[count - 1],\n      p95: values[p95Index] || values[count - 1],\n      p99: values[p99Index] || values[count - 1],\n      stdDev: parseFloat(stdDev.toFixed(2)),\n      timeWindow,\n      lastUpdated: recentMetrics[recentMetrics.length - 1].timestamp\n    };\n  }\n\n  // Get performance dashboard data\n  getPerformanceDashboard() {\n    const now = Date.now();\n    const oneHour = 60 * 60 * 1000;\n    \n    // Calculate system health score\n    const healthScore = this.calculateSystemHealthScore();\n    \n    // Get recent alerts\n    const recentAlerts = this.alerts\n      .filter(alert => now - new Date(alert.timestamp).getTime() < oneHour)\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    \n    // Get active recommendations\n    const activeRecommendations = this.recommendations\n      .filter(rec => !rec.implemented)\n      .sort((a, b) => {\n        const priorityOrder = { 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      })\n      .slice(0, 10);\n    \n    // Calculate metric summaries\n    const metricSummaries = {};\n    for (const [name, metrics] of this.metrics.entries()) {\n      const stats = this.calculateStatistics(name);\n      if (stats) {\n        metricSummaries[name] = stats;\n      }\n    }\n    \n    // System metrics\n    const memoryUsage = process.memoryUsage();\n    const systemMetrics = {\n      memory: {\n        used: memoryUsage.heapUsed,\n        total: memoryUsage.heapTotal,\n        utilization: memoryUsage.heapUsed / memoryUsage.heapTotal,\n        external: memoryUsage.external\n      },\n      uptime: process.uptime(),\n      nodeVersion: process.version,\n      platform: process.platform,\n      architecture: process.arch\n    };\n    \n    return {\n      timestamp: new Date().toISOString(),\n      healthScore,\n      summary: {\n        totalMetrics: this.metrics.size,\n        recentAlerts: recentAlerts.length,\n        activeRecommendations: activeRecommendations.length,\n        systemHealth: healthScore > 80 ? 'HEALTHY' : healthScore > 60 ? 'WARNING' : 'CRITICAL'\n      },\n      alerts: {\n        recent: recentAlerts.slice(0, 10),\n        critical: recentAlerts.filter(a => a.severity === 'CRITICAL').length,\n        warning: recentAlerts.filter(a => a.severity === 'WARNING').length\n      },\n      recommendations: activeRecommendations,\n      metrics: metricSummaries,\n      system: systemMetrics,\n      performance: {\n        responseTime: this.calculateAverageFromArray(this.performanceData.responseTime),\n        errorRate: this.calculateAverageFromArray(this.performanceData.errorRate),\n        throughput: this.calculateAverageFromArray(this.performanceData.throughput)\n      }\n    };\n  }\n\n  // Calculate system health score\n  calculateSystemHealthScore() {\n    let score = 100;\n    const now = Date.now();\n    const oneHour = 60 * 60 * 1000;\n    \n    // Deduct points for recent alerts\n    const recentAlerts = this.alerts.filter(alert => \n      now - new Date(alert.timestamp).getTime() < oneHour\n    );\n    \n    recentAlerts.forEach(alert => {\n      if (alert.severity === 'CRITICAL') {\n        score -= 20;\n      } else if (alert.severity === 'WARNING') {\n        score -= 10;\n      }\n    });\n    \n    // Deduct points for high error rates\n    const avgErrorRate = this.calculateAverageFromArray(this.performanceData.errorRate);\n    if (avgErrorRate > this.thresholds.errorRate.critical) {\n      score -= 25;\n    } else if (avgErrorRate > this.thresholds.errorRate.warning) {\n      score -= 15;\n    }\n    \n    // Deduct points for slow response times\n    const avgResponseTime = this.calculateAverageFromArray(this.performanceData.responseTime);\n    if (avgResponseTime > this.thresholds.responseTime.critical) {\n      score -= 20;\n    } else if (avgResponseTime > this.thresholds.responseTime.warning) {\n      score -= 10;\n    }\n    \n    // Deduct points for memory usage\n    const memoryUsage = process.memoryUsage();\n    const memoryUtilization = memoryUsage.heapUsed / memoryUsage.heapTotal;\n    if (memoryUtilization > this.thresholds.memoryUsage.critical) {\n      score -= 15;\n    } else if (memoryUtilization > this.thresholds.memoryUsage.warning) {\n      score -= 8;\n    }\n    \n    return Math.max(0, score);\n  }\n\n  // Calculate average from array of timestamp/value objects\n  calculateAverageFromArray(dataArray) {\n    if (dataArray.length === 0) return 0;\n    \n    const sum = dataArray.reduce((acc, item) => acc + item.value, 0);\n    return sum / dataArray.length;\n  }\n\n  // Start periodic monitoring\n  startPeriodicMonitoring() {\n    // Monitor system metrics every 30 seconds\n    setInterval(() => {\n      this.collectSystemMetrics();\n    }, 30000);\n    \n    // Clean up old data every 5 minutes\n    setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000);\n  }\n\n  // Collect system metrics\n  collectSystemMetrics() {\n    const memoryUsage = process.memoryUsage();\n    const memoryUtilization = memoryUsage.heapUsed / memoryUsage.heapTotal;\n    \n    this.recordMetric('system_memory_utilization', memoryUtilization, 'memory', {\n      heapUsed: memoryUsage.heapUsed,\n      heapTotal: memoryUsage.heapTotal,\n      external: memoryUsage.external\n    });\n    \n    this.recordMetric('system_uptime', process.uptime(), 'system');\n    \n    // Record process metrics\n    if (process.cpuUsage) {\n      const cpuUsage = process.cpuUsage();\n      this.recordMetric('system_cpu_user', cpuUsage.user, 'compute');\n      this.recordMetric('system_cpu_system', cpuUsage.system, 'compute');\n    }\n  }\n\n  // Get all metrics for a category\n  getMetricsByCategory(category, timeWindow = 3600000) {\n    const categoryMetrics = {};\n    \n    for (const [name, metrics] of this.metrics.entries()) {\n      const recentMetrics = metrics.filter(m => \n        Date.now() - m.timestamp < timeWindow && \n        m.category === category\n      );\n      \n      if (recentMetrics.length > 0) {\n        categoryMetrics[name] = {\n          values: recentMetrics.map(m => ({ timestamp: m.timestamp, value: m.value })),\n          statistics: this.calculateStatistics(name, timeWindow)\n        };\n      }\n    }\n    \n    return categoryMetrics;\n  }\n\n  // Acknowledge alert\n  acknowledgeAlert(alertId, acknowledgedBy = 'system') {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.acknowledged = true;\n      alert.acknowledgedBy = acknowledgedBy;\n      alert.acknowledgedAt = new Date().toISOString();\n    }\n    return alert;\n  }\n\n  // Resolve alert\n  resolveAlert(alertId, resolvedBy = 'system', resolution = 'Manual resolution') {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert) {\n      alert.status = 'RESOLVED';\n      alert.resolvedBy = resolvedBy;\n      alert.resolvedAt = new Date().toISOString();\n      alert.resolution = resolution;\n    }\n    return alert;\n  }\n\n  // Mark recommendation as implemented\n  implementRecommendation(recommendationId, implementedBy = 'system') {\n    const recommendation = this.recommendations.find(r => r.id === recommendationId);\n    if (recommendation) {\n      recommendation.implemented = true;\n      recommendation.implementedBy = implementedBy;\n      recommendation.implementedAt = new Date().toISOString();\n    }\n    return recommendation;\n  }\n\n  // Cleanup old data\n  cleanup() {\n    const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n    const now = Date.now();\n    \n    // Clean old metrics\n    for (const [name, metrics] of this.metrics.entries()) {\n      const filteredMetrics = metrics.filter(m => now - m.timestamp < maxAge);\n      this.metrics.set(name, filteredMetrics);\n    }\n    \n    // Clean old alerts\n    this.alerts = this.alerts.filter(alert => \n      now - new Date(alert.timestamp).getTime() < maxAge\n    );\n    \n    // Clean old recommendations\n    this.recommendations = this.recommendations.filter(rec => \n      now - new Date(rec.timestamp).getTime() < maxAge\n    );\n    \n    console.log(`Performance monitoring cleanup completed. Metrics: ${this.metrics.size}, Alerts: ${this.alerts.length}, Recommendations: ${this.recommendations.length}`);\n  }\n\n  // Export performance data for analysis\n  exportPerformanceData(format = 'json', timeWindow = 3600000) {\n    const now = Date.now();\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      timeWindow,\n      metrics: {},\n      alerts: this.alerts.filter(a => now - new Date(a.timestamp).getTime() < timeWindow),\n      recommendations: this.recommendations.filter(r => now - new Date(r.timestamp).getTime() < timeWindow),\n      summary: this.getPerformanceDashboard().summary\n    };\n    \n    // Export metrics\n    for (const [name, metrics] of this.metrics.entries()) {\n      const recentMetrics = metrics.filter(m => now - m.timestamp < timeWindow);\n      if (recentMetrics.length > 0) {\n        exportData.metrics[name] = {\n          data: recentMetrics,\n          statistics: this.calculateStatistics(name, timeWindow)\n        };\n      }\n    }\n    \n    if (format === 'csv') {\n      // Convert to CSV format (simplified)\n      return this.convertToCSV(exportData);\n    }\n    \n    return exportData;\n  }\n\n  // Convert data to CSV format\n  convertToCSV(data) {\n    const csvRows = [];\n    csvRows.push('metric_name,timestamp,value,category');\n    \n    for (const [name, metricData] of Object.entries(data.metrics)) {\n      metricData.data.forEach(metric => {\n        csvRows.push(`${name},${new Date(metric.timestamp).toISOString()},${metric.value},${metric.category || 'general'}`);\n      });\n    }\n    \n    return csvRows.join('\\n');\n  }\n}\n\nmodule.exports = PerformanceMonitoringService;"],"mappings":"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","ignoreList":[]}