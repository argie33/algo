{"version":3,"names":["cov_ue98ginn2","actualCoverage","express","s","require","query","transaction","authenticateToken","createLogger","createValidationMiddleware","router","Router","logger","use","adminState","providers","Map","costMetrics","totalCost","savings","efficiency","lastCalculated","alerts","serviceHealth","status","uptime","lastCheck","subscriptionStats","totalSubscriptions","activeUsers","topSymbols","initializeProviders","f","defaultProviders","id","name","type","cost_per_request","rate_limit","capabilities","reliability","latency","data_quality","monthly_cost","request_count","error_rate","last_error","configuration","api_key_required","websocket_supported","historical_depth","supported_symbols","forEach","provider","set","get","req","res","correlationId","Date","now","info","Array","from","values","activeProviders","filter","p","totalMonthlyCost","reduce","sum","totalRequests","avgReliability","length","performHealthCheck","costOptimization","calculateCostOptimization","performanceMetrics","calculatePerformanceMetrics","recentAlerts","slice","dashboardData","overview","totalProviders","serviceStatus","map","recommendations","generateRecommendations","json","success","data","metadata","timestamp","toISOString","generated_at","error","message","details","enhancedProviders","healthScore","calculateProviderHealthScore","costEfficiency","calculateCostEfficiency","recommendedStatus","getRecommendedStatus","recentPerformance","getRecentPerformance","configurationStatus","validateProviderConfiguration","summary","total","active","available","offline","put","providerId","params","updates","body","b","validatedUpdates","validateProviderUpdates","updatedProvider","adminUser","user","userId","push","severity","post","testResult","testProviderConnection","last_test","test_status","costAnalysis","current","averageCostPerRequest","providerBreakdown","requests","percentage","optimization","potentialSavings","efficiencyScore","trends","generateCostTrends","getCostAlerts","generateCostOptimizationRecommendations","performanceData","averageLatency","averageReliability","averageErrorRate","generatePerformanceTrends","benchmarks","getPerformanceBenchmarks","getPerformanceAlerts","subscriptionsQuery","subscriptionsResult","popularSymbolsQuery","popularSymbolsResult","subscriptionData","users","rows","popularSymbols","totalUsers","activeSubscriptions","u","parseInt","active_symbols","total_requests","averageSymbolsPerUser","insights","generateSubscriptionInsights","target","constraints","optimizationResult","runOptimizationAnalysis","lastOptimization","reliabilityScore","latencyScore","Math","max","errorScore","round","costPerRequest","last_24h","avg_latency","last_7d","issues","isValid","score","validFields","validated","key","value","Object","entries","includes","isHealthy","random","i","date","setDate","getDate","split","cost","floor","action","impact","potential_savings","inefficiencies","currentCost","avgLatency","avgErrorRate","priority","unhealthyProviders","_","warning","critical","toFixed","mostActiveUser","username","topSymbol","symbol","growthRate","churnRate","analysis","efficiency_improvements","risk_assessment","implementation_plan","costRecommendations","phase","title","actions","r","module","exports"],"sources":["admin.js"],"sourcesContent":["const express = require('express');\nconst { query, transaction } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createLogger } = require('../utils/structuredLogger');\nconst { createValidationMiddleware } = require('../middleware/validation');\n\nconst router = express.Router();\nconst logger = createLogger('financial-platform', 'admin-console');\n\n// Apply authentication middleware to ALL admin routes\nrouter.use(authenticateToken);\n\n/**\n * LIVE DATA ADMIN CONSOLE\n * \n * Comprehensive admin interface for managing live data providers,\n * monitoring costs, optimizing performance, and controlling service operations\n * \n * Features:\n * - Provider management (Alpaca, Polygon, Finnhub, etc.)\n * - Cost optimization and monitoring\n * - Performance metrics and analytics\n * - Service control and health monitoring\n * - User subscription management\n * - Real-time data quality monitoring\n */\n\n// In-memory admin state management\nconst adminState = {\n  providers: new Map(),\n  costMetrics: {\n    totalCost: 0,\n    savings: 0,\n    efficiency: 0,\n    lastCalculated: null\n  },\n  alerts: [],\n  serviceHealth: {\n    status: 'healthy',\n    uptime: 0,\n    lastCheck: null\n  },\n  subscriptionStats: {\n    totalSubscriptions: 0,\n    activeUsers: 0,\n    topSymbols: []\n  }\n};\n\n// Initialize default providers\nconst initializeProviders = () => {\n  const defaultProviders = [\n    {\n      id: 'alpaca',\n      name: 'Alpaca Markets',\n      type: 'broker',\n      status: 'active',\n      cost_per_request: 0.001,\n      rate_limit: 200,\n      capabilities: ['real-time quotes', 'historical data', 'trading'],\n      reliability: 0.99,\n      latency: 50,\n      data_quality: 0.98,\n      monthly_cost: 0,\n      request_count: 0,\n      error_rate: 0.01,\n      last_error: null,\n      configuration: {\n        api_key_required: true,\n        websocket_supported: true,\n        historical_depth: '5 years',\n        supported_symbols: ['US_STOCKS', 'ETF']\n      }\n    },\n    {\n      id: 'polygon',\n      name: 'Polygon.io',\n      type: 'data_provider',\n      status: 'available',\n      cost_per_request: 0.002,\n      rate_limit: 1000,\n      capabilities: ['real-time data', 'historical data', 'technical indicators'],\n      reliability: 0.995,\n      latency: 30,\n      data_quality: 0.99,\n      monthly_cost: 0,\n      request_count: 0,\n      error_rate: 0.005,\n      last_error: null,\n      configuration: {\n        api_key_required: true,\n        websocket_supported: true,\n        historical_depth: '20 years',\n        supported_symbols: ['US_STOCKS', 'ETF', 'FOREX', 'CRYPTO']\n      }\n    },\n    {\n      id: 'finnhub',\n      name: 'Finnhub',\n      type: 'data_provider',\n      status: 'available',\n      cost_per_request: 0.0015,\n      rate_limit: 300,\n      capabilities: ['company data', 'news', 'earnings', 'estimates'],\n      reliability: 0.97,\n      latency: 100,\n      data_quality: 0.96,\n      monthly_cost: 0,\n      request_count: 0,\n      error_rate: 0.03,\n      last_error: null,\n      configuration: {\n        api_key_required: true,\n        websocket_supported: false,\n        historical_depth: '10 years',\n        supported_symbols: ['US_STOCKS', 'INTERNATIONAL']\n      }\n    },\n    {\n      id: 'yahoo_finance',\n      name: 'Yahoo Finance',\n      type: 'free_provider',\n      status: 'backup',\n      cost_per_request: 0,\n      rate_limit: 100,\n      capabilities: ['basic quotes', 'historical data'],\n      reliability: 0.85,\n      latency: 200,\n      data_quality: 0.85,\n      monthly_cost: 0,\n      request_count: 0,\n      error_rate: 0.15,\n      last_error: null,\n      configuration: {\n        api_key_required: false,\n        websocket_supported: false,\n        historical_depth: '2 years',\n        supported_symbols: ['US_STOCKS', 'ETF', 'INDEXES']\n      }\n    }\n  ];\n\n  defaultProviders.forEach(provider => {\n    adminState.providers.set(provider.id, provider);\n  });\n};\n\n// Initialize providers on startup\ninitializeProviders();\n\n/**\n * GET /admin/dashboard - Main admin dashboard with overview metrics\n */\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const correlationId = `admin-dashboard-${Date.now()}`;\n    \n    logger.info('Admin dashboard requested', { correlationId });\n\n    // Calculate real-time metrics\n    const providers = Array.from(adminState.providers.values());\n    const activeProviders = providers.filter(p => p.status === 'active');\n    const totalMonthlyCost = providers.reduce((sum, p) => sum + p.monthly_cost, 0);\n    const totalRequests = providers.reduce((sum, p) => sum + p.request_count, 0);\n    const avgReliability = providers.reduce((sum, p) => sum + p.reliability, 0) / providers.length;\n    \n    // Service health check\n    const serviceHealth = await performHealthCheck();\n    \n    // Cost optimization analysis\n    const costOptimization = calculateCostOptimization(providers);\n    \n    // Performance metrics\n    const performanceMetrics = calculatePerformanceMetrics(providers);\n    \n    // Recent alerts\n    const recentAlerts = adminState.alerts.slice(-10);\n\n    const dashboardData = {\n      overview: {\n        totalProviders: providers.length,\n        activeProviders: activeProviders.length,\n        totalMonthlyCost,\n        totalRequests,\n        avgReliability,\n        serviceStatus: serviceHealth.status,\n        uptime: serviceHealth.uptime\n      },\n      providers: providers.map(p => ({\n        id: p.id,\n        name: p.name,\n        status: p.status,\n        reliability: p.reliability,\n        latency: p.latency,\n        monthly_cost: p.monthly_cost,\n        request_count: p.request_count,\n        error_rate: p.error_rate\n      })),\n      costOptimization,\n      performanceMetrics,\n      recentAlerts,\n      subscriptionStats: adminState.subscriptionStats,\n      recommendations: generateRecommendations(providers, costOptimization)\n    };\n\n    res.json({\n      success: true,\n      data: dashboardData,\n      metadata: {\n        correlationId,\n        timestamp: new Date().toISOString(),\n        generated_at: Date.now()\n      }\n    });\n\n  } catch (error) {\n    logger.error('Admin dashboard error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to load admin dashboard',\n      details: error.message\n    });\n  }\n});\n\n/**\n * GET /admin/providers - Detailed provider management\n */\nrouter.get('/providers', async (req, res) => {\n  try {\n    const providers = Array.from(adminState.providers.values());\n    \n    // Enhanced provider details with real-time metrics\n    const enhancedProviders = providers.map(provider => ({\n      ...provider,\n      healthScore: calculateProviderHealthScore(provider),\n      costEfficiency: calculateCostEfficiency(provider),\n      recommendedStatus: getRecommendedStatus(provider),\n      recentPerformance: getRecentPerformance(provider.id),\n      configurationStatus: validateProviderConfiguration(provider)\n    }));\n\n    res.json({\n      success: true,\n      data: {\n        providers: enhancedProviders,\n        summary: {\n          total: providers.length,\n          active: providers.filter(p => p.status === 'active').length,\n          available: providers.filter(p => p.status === 'available').length,\n          offline: providers.filter(p => p.status === 'offline').length,\n          totalCost: providers.reduce((sum, p) => sum + p.monthly_cost, 0),\n          avgReliability: providers.reduce((sum, p) => sum + p.reliability, 0) / providers.length\n        }\n      }\n    });\n\n  } catch (error) {\n    logger.error('Provider management error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to load provider data'\n    });\n  }\n});\n\n/**\n * PUT /admin/providers/:providerId - Update provider configuration\n */\nrouter.put('/providers/:providerId', async (req, res) => {\n  try {\n    const { providerId } = req.params;\n    const updates = req.body;\n    \n    const provider = adminState.providers.get(providerId);\n    if (!provider) {\n      return res.status(404).json({\n        success: false,\n        error: 'Provider not found'\n      });\n    }\n\n    // Validate updates\n    const validatedUpdates = validateProviderUpdates(updates);\n    \n    // Apply updates\n    const updatedProvider = { ...provider, ...validatedUpdates };\n    adminState.providers.set(providerId, updatedProvider);\n    \n    // Log the change\n    logger.info('Provider updated', {\n      providerId,\n      updates: validatedUpdates,\n      adminUser: req.user.userId\n    });\n\n    // Add to alerts\n    adminState.alerts.push({\n      type: 'provider_update',\n      message: `Provider ${provider.name} configuration updated`,\n      timestamp: new Date().toISOString(),\n      severity: 'info',\n      details: validatedUpdates\n    });\n\n    res.json({\n      success: true,\n      data: updatedProvider,\n      message: `Provider ${provider.name} updated successfully`\n    });\n\n  } catch (error) {\n    logger.error('Provider update error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update provider'\n    });\n  }\n});\n\n/**\n * POST /admin/providers/:providerId/test - Test provider connection\n */\nrouter.post('/providers/:providerId/test', async (req, res) => {\n  try {\n    const { providerId } = req.params;\n    const provider = adminState.providers.get(providerId);\n    \n    if (!provider) {\n      return res.status(404).json({\n        success: false,\n        error: 'Provider not found'\n      });\n    }\n\n    // Perform connection test\n    const testResult = await testProviderConnection(provider);\n    \n    // Update provider metrics based on test\n    provider.last_test = new Date().toISOString();\n    provider.test_status = testResult.success ? 'passed' : 'failed';\n    \n    if (!testResult.success) {\n      provider.last_error = testResult.error;\n    }\n\n    res.json({\n      success: true,\n      data: {\n        providerId,\n        testResult,\n        provider: {\n          id: provider.id,\n          name: provider.name,\n          status: provider.status,\n          last_test: provider.last_test,\n          test_status: provider.test_status\n        }\n      }\n    });\n\n  } catch (error) {\n    logger.error('Provider test error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to test provider connection'\n    });\n  }\n});\n\n/**\n * GET /admin/costs - Cost monitoring and optimization\n */\nrouter.get('/costs', async (req, res) => {\n  try {\n    const providers = Array.from(adminState.providers.values());\n    \n    // Calculate detailed cost metrics\n    const costAnalysis = {\n      current: {\n        totalMonthlyCost: providers.reduce((sum, p) => sum + p.monthly_cost, 0),\n        totalRequests: providers.reduce((sum, p) => sum + p.request_count, 0),\n        averageCostPerRequest: 0,\n        providerBreakdown: providers.map(p => ({\n          id: p.id,\n          name: p.name,\n          monthly_cost: p.monthly_cost,\n          requests: p.request_count,\n          cost_per_request: p.cost_per_request,\n          percentage: 0\n        }))\n      },\n      optimization: {\n        potentialSavings: 0,\n        recommendations: [],\n        efficiencyScore: 0\n      },\n      trends: generateCostTrends(),\n      alerts: getCostAlerts(providers)\n    };\n\n    // Calculate percentages and averages\n    if (costAnalysis.current.totalMonthlyCost > 0) {\n      costAnalysis.current.providerBreakdown.forEach(p => {\n        p.percentage = (p.monthly_cost / costAnalysis.current.totalMonthlyCost) * 100;\n      });\n    }\n\n    if (costAnalysis.current.totalRequests > 0) {\n      costAnalysis.current.averageCostPerRequest = \n        costAnalysis.current.totalMonthlyCost / costAnalysis.current.totalRequests;\n    }\n\n    // Generate optimization recommendations\n    costAnalysis.optimization = generateCostOptimizationRecommendations(providers);\n\n    res.json({\n      success: true,\n      data: costAnalysis\n    });\n\n  } catch (error) {\n    logger.error('Cost analysis error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze costs'\n    });\n  }\n});\n\n/**\n * GET /admin/performance - Performance monitoring and metrics\n */\nrouter.get('/performance', async (req, res) => {\n  try {\n    const providers = Array.from(adminState.providers.values());\n    \n    const performanceData = {\n      overview: {\n        averageLatency: providers.reduce((sum, p) => sum + p.latency, 0) / providers.length,\n        averageReliability: providers.reduce((sum, p) => sum + p.reliability, 0) / providers.length,\n        averageErrorRate: providers.reduce((sum, p) => sum + p.error_rate, 0) / providers.length,\n        totalRequests: providers.reduce((sum, p) => sum + p.request_count, 0)\n      },\n      providers: providers.map(p => ({\n        id: p.id,\n        name: p.name,\n        latency: p.latency,\n        reliability: p.reliability,\n        error_rate: p.error_rate,\n        data_quality: p.data_quality,\n        healthScore: calculateProviderHealthScore(p),\n        status: p.status\n      })),\n      trends: generatePerformanceTrends(),\n      benchmarks: getPerformanceBenchmarks(),\n      alerts: getPerformanceAlerts(providers)\n    };\n\n    res.json({\n      success: true,\n      data: performanceData\n    });\n\n  } catch (error) {\n    logger.error('Performance analysis error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze performance'\n    });\n  }\n});\n\n/**\n * GET /admin/subscriptions - User subscription management\n */\nrouter.get('/subscriptions', async (req, res) => {\n  try {\n    // Get subscription data from database\n    const subscriptionsQuery = `\n      SELECT \n        u.id as user_id,\n        u.username,\n        u.email,\n        COUNT(DISTINCT ws.symbol) as active_symbols,\n        COUNT(DISTINCT wa.id) as active_alerts,\n        u.created_at as user_since,\n        u.last_login,\n        COALESCE(SUM(ws.request_count), 0) as total_requests\n      FROM users u\n      LEFT JOIN user_subscriptions ws ON u.id = ws.user_id\n      LEFT JOIN watchlist_alerts wa ON u.id = wa.user_id AND wa.is_active = true\n      GROUP BY u.id, u.username, u.email, u.created_at, u.last_login\n      ORDER BY total_requests DESC\n      LIMIT 100\n    `;\n\n    const subscriptionsResult = await query(subscriptionsQuery);\n    \n    // Get popular symbols\n    const popularSymbolsQuery = `\n      SELECT \n        symbol,\n        COUNT(DISTINCT user_id) as subscriber_count,\n        SUM(request_count) as total_requests\n      FROM user_subscriptions\n      GROUP BY symbol\n      ORDER BY subscriber_count DESC\n      LIMIT 20\n    `;\n\n    const popularSymbolsResult = await query(popularSymbolsQuery);\n\n    const subscriptionData = {\n      users: subscriptionsResult.rows,\n      popularSymbols: popularSymbolsResult.rows,\n      summary: {\n        totalUsers: subscriptionsResult.rows.length,\n        activeSubscriptions: subscriptionsResult.rows.reduce((sum, u) => sum + parseInt(u.active_symbols), 0),\n        totalRequests: subscriptionsResult.rows.reduce((sum, u) => sum + parseInt(u.total_requests), 0),\n        averageSymbolsPerUser: subscriptionsResult.rows.length > 0 ? \n          subscriptionsResult.rows.reduce((sum, u) => sum + parseInt(u.active_symbols), 0) / subscriptionsResult.rows.length : 0\n      },\n      insights: generateSubscriptionInsights(subscriptionsResult.rows, popularSymbolsResult.rows)\n    };\n\n    res.json({\n      success: true,\n      data: subscriptionData\n    });\n\n  } catch (error) {\n    logger.error('Subscription analysis error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze subscriptions'\n    });\n  }\n});\n\n/**\n * POST /admin/optimize - Run cost optimization analysis\n */\nrouter.post('/optimize', async (req, res) => {\n  try {\n    const { target = 'cost', constraints = {} } = req.body;\n    \n    const providers = Array.from(adminState.providers.values());\n    const optimizationResult = await runOptimizationAnalysis(providers, target, constraints);\n    \n    // Store optimization results\n    adminState.costMetrics.lastOptimization = optimizationResult;\n    adminState.costMetrics.lastCalculated = new Date().toISOString();\n    \n    logger.info('Optimization analysis completed', {\n      target,\n      potentialSavings: optimizationResult.savings,\n      recommendations: optimizationResult.recommendations.length\n    });\n\n    res.json({\n      success: true,\n      data: optimizationResult,\n      message: 'Optimization analysis completed successfully'\n    });\n\n  } catch (error) {\n    logger.error('Optimization error', { error: error.message });\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run optimization analysis'\n    });\n  }\n});\n\n// Helper functions\nfunction calculateProviderHealthScore(provider) {\n  const reliabilityScore = provider.reliability * 40;\n  const latencyScore = Math.max(0, 40 - (provider.latency / 10));\n  const errorScore = Math.max(0, 20 - (provider.error_rate * 1000));\n  \n  return Math.round(reliabilityScore + latencyScore + errorScore);\n}\n\nfunction calculateCostEfficiency(provider) {\n  if (provider.request_count === 0) return 100;\n  \n  const costPerRequest = provider.monthly_cost / provider.request_count;\n  const efficiency = Math.max(0, 100 - (costPerRequest * 10000));\n  \n  return Math.round(efficiency);\n}\n\nfunction getRecommendedStatus(provider) {\n  const healthScore = calculateProviderHealthScore(provider);\n  \n  if (healthScore >= 85) return 'active';\n  if (healthScore >= 70) return 'available';\n  return 'review';\n}\n\nfunction getRecentPerformance(providerId) {\n  // Simplified recent performance data\n  return {\n    last_24h: {\n      uptime: 0.99,\n      avg_latency: 45,\n      error_rate: 0.02,\n      requests: 1250\n    },\n    last_7d: {\n      uptime: 0.98,\n      avg_latency: 52,\n      error_rate: 0.03,\n      requests: 8750\n    }\n  };\n}\n\nfunction validateProviderConfiguration(provider) {\n  const issues = [];\n  \n  if (provider.status === 'active' && provider.reliability < 0.9) {\n    issues.push('Low reliability for active provider');\n  }\n  \n  if (provider.latency > 500) {\n    issues.push('High latency detected');\n  }\n  \n  if (provider.error_rate > 0.1) {\n    issues.push('High error rate');\n  }\n  \n  return {\n    isValid: issues.length === 0,\n    issues,\n    score: Math.max(0, 100 - (issues.length * 25))\n  };\n}\n\nfunction validateProviderUpdates(updates) {\n  const validFields = ['status', 'rate_limit', 'configuration', 'monthly_cost'];\n  const validated = {};\n  \n  for (const [key, value] of Object.entries(updates)) {\n    if (validFields.includes(key)) {\n      validated[key] = value;\n    }\n  }\n  \n  return validated;\n}\n\nasync function testProviderConnection(provider) {\n  try {\n    // Simulate connection test\n    const isHealthy = provider.reliability > 0.8 && provider.error_rate < 0.1;\n    \n    return {\n      success: isHealthy,\n      latency: provider.latency + Math.random() * 20,\n      timestamp: new Date().toISOString(),\n      error: isHealthy ? null : 'Connection timeout or high error rate'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\nfunction generateCostTrends() {\n  // Generate sample cost trend data\n  const trends = [];\n  const now = new Date();\n  \n  for (let i = 6; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n    \n    trends.push({\n      date: date.toISOString().split('T')[0],\n      cost: Math.random() * 100 + 50,\n      requests: Math.floor(Math.random() * 10000) + 5000,\n      efficiency: Math.random() * 20 + 80\n    });\n  }\n  \n  return trends;\n}\n\nfunction getCostAlerts(providers) {\n  const alerts = [];\n  \n  providers.forEach(provider => {\n    if (provider.monthly_cost > 100) {\n      alerts.push({\n        type: 'high_cost',\n        provider: provider.name,\n        message: `High monthly cost: $${provider.monthly_cost}`,\n        severity: 'warning'\n      });\n    }\n    \n    if (provider.cost_per_request > 0.01) {\n      alerts.push({\n        type: 'expensive_requests',\n        provider: provider.name,\n        message: `Expensive per-request cost: $${provider.cost_per_request}`,\n        severity: 'info'\n      });\n    }\n  });\n  \n  return alerts;\n}\n\nfunction generateCostOptimizationRecommendations(providers) {\n  const recommendations = [];\n  let potentialSavings = 0;\n  \n  providers.forEach(provider => {\n    if (provider.status === 'active' && provider.reliability < 0.9) {\n      recommendations.push({\n        type: 'reliability',\n        provider: provider.name,\n        action: 'Consider switching to more reliable provider',\n        impact: 'Medium',\n        potential_savings: provider.monthly_cost * 0.1\n      });\n      potentialSavings += provider.monthly_cost * 0.1;\n    }\n    \n    if (provider.error_rate > 0.05) {\n      recommendations.push({\n        type: 'error_rate',\n        provider: provider.name,\n        action: 'Investigate high error rate',\n        impact: 'High',\n        potential_savings: provider.monthly_cost * 0.15\n      });\n      potentialSavings += provider.monthly_cost * 0.15;\n    }\n  });\n  \n  return {\n    recommendations,\n    potentialSavings: Math.round(potentialSavings * 100) / 100,\n    efficiencyScore: Math.round((1 - potentialSavings / 100) * 100)\n  };\n}\n\nfunction calculateCostOptimization(providers) {\n  const totalCost = providers.reduce((sum, p) => sum + p.monthly_cost, 0);\n  const inefficiencies = providers.reduce((sum, p) => {\n    return sum + (p.error_rate * p.monthly_cost);\n  }, 0);\n  \n  return {\n    currentCost: totalCost,\n    potentialSavings: Math.round(inefficiencies * 100) / 100,\n    efficiencyScore: Math.round((1 - inefficiencies / totalCost) * 100)\n  };\n}\n\nfunction calculatePerformanceMetrics(providers) {\n  return {\n    avgLatency: providers.reduce((sum, p) => sum + p.latency, 0) / providers.length,\n    avgReliability: providers.reduce((sum, p) => sum + p.reliability, 0) / providers.length,\n    avgErrorRate: providers.reduce((sum, p) => sum + p.error_rate, 0) / providers.length,\n    healthScore: providers.reduce((sum, p) => sum + calculateProviderHealthScore(p), 0) / providers.length\n  };\n}\n\nfunction generateRecommendations(providers, costOptimization) {\n  const recommendations = [];\n  \n  if (costOptimization.potentialSavings > 20) {\n    recommendations.push({\n      type: 'cost',\n      priority: 'high',\n      message: `Potential savings of $${costOptimization.potentialSavings} identified`,\n      action: 'Review provider configurations and optimize usage'\n    });\n  }\n  \n  const unhealthyProviders = providers.filter(p => calculateProviderHealthScore(p) < 70);\n  if (unhealthyProviders.length > 0) {\n    recommendations.push({\n      type: 'health',\n      priority: 'medium',\n      message: `${unhealthyProviders.length} providers need attention`,\n      action: 'Review and fix provider issues'\n    });\n  }\n  \n  return recommendations;\n}\n\nasync function performHealthCheck() {\n  return {\n    status: 'healthy',\n    uptime: Math.random() * 100,\n    lastCheck: new Date().toISOString()\n  };\n}\n\nfunction generatePerformanceTrends() {\n  return {\n    latency: Array.from({ length: 7 }, (_, i) => ({\n      date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      value: Math.random() * 100 + 50\n    })),\n    reliability: Array.from({ length: 7 }, (_, i) => ({\n      date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      value: Math.random() * 0.05 + 0.95\n    }))\n  };\n}\n\nfunction getPerformanceBenchmarks() {\n  return {\n    latency: { target: 100, warning: 200, critical: 500 },\n    reliability: { target: 0.99, warning: 0.95, critical: 0.9 },\n    error_rate: { target: 0.01, warning: 0.05, critical: 0.1 }\n  };\n}\n\nfunction getPerformanceAlerts(providers) {\n  const alerts = [];\n  \n  providers.forEach(provider => {\n    if (provider.latency > 500) {\n      alerts.push({\n        type: 'latency',\n        provider: provider.name,\n        message: `Critical latency: ${provider.latency}ms`,\n        severity: 'critical'\n      });\n    }\n    \n    if (provider.reliability < 0.95) {\n      alerts.push({\n        type: 'reliability',\n        provider: provider.name,\n        message: `Low reliability: ${(provider.reliability * 100).toFixed(1)}%`,\n        severity: 'warning'\n      });\n    }\n  });\n  \n  return alerts;\n}\n\nfunction generateSubscriptionInsights(users, popularSymbols) {\n  return {\n    mostActiveUser: users.length > 0 ? users[0].username : null,\n    averageSymbolsPerUser: users.length > 0 ? \n      users.reduce((sum, u) => sum + parseInt(u.active_symbols), 0) / users.length : 0,\n    topSymbol: popularSymbols.length > 0 ? popularSymbols[0].symbol : null,\n    growthRate: Math.random() * 20 + 5, // Simulated growth rate\n    churnRate: Math.random() * 5 + 1 // Simulated churn rate\n  };\n}\n\nasync function runOptimizationAnalysis(providers, target, constraints) {\n  // Comprehensive optimization analysis\n  const analysis = {\n    target,\n    constraints,\n    recommendations: [],\n    savings: 0,\n    efficiency_improvements: [],\n    risk_assessment: {},\n    implementation_plan: []\n  };\n  \n  // Cost optimization\n  if (target === 'cost' || target === 'balanced') {\n    const costRecommendations = generateCostOptimizationRecommendations(providers);\n    analysis.recommendations.push(...costRecommendations.recommendations);\n    analysis.savings += costRecommendations.potentialSavings;\n  }\n  \n  // Performance optimization\n  if (target === 'performance' || target === 'balanced') {\n    providers.forEach(provider => {\n      if (provider.latency > 200) {\n        analysis.recommendations.push({\n          type: 'performance',\n          provider: provider.name,\n          action: 'Optimize latency through caching or provider switch',\n          impact: 'High',\n          potential_savings: provider.monthly_cost * 0.05\n        });\n      }\n    });\n  }\n  \n  // Generate implementation plan\n  analysis.implementation_plan = [\n    {\n      phase: 1,\n      title: 'Immediate Actions',\n      actions: analysis.recommendations.filter(r => r.impact === 'High').slice(0, 3)\n    },\n    {\n      phase: 2,\n      title: 'Medium-term Improvements',\n      actions: analysis.recommendations.filter(r => r.impact === 'Medium').slice(0, 3)\n    },\n    {\n      phase: 3,\n      title: 'Long-term Strategy',\n      actions: analysis.recommendations.filter(r => r.impact === 'Low').slice(0, 2)\n    }\n  ];\n  \n  return analysis;\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}