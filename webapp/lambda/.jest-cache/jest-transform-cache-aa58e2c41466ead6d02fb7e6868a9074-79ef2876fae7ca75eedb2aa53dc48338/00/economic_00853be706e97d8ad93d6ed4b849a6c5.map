{"version":3,"names":["cov_1asx7fui37","actualCoverage","express","s","require","router","Router","authenticateToken","query","use","economicEngine","EconomicModelingEngine","error","console","log","message","get","req","res","f","category","period","b","limit","whereClause","params","paramIndex","push","periodMap","intervalClause","result","parseInt","indicators","rows","forEach","row","indicator_id","id","name","indicator_name","units","frequency","data","date","value","parseFloat","last_updated","json","success","Object","values","count","keys","length","status","from_date","to_date","importance","country","events","filters","model_type","horizon","models","getEconomicModels","mockModels","type","target","accuracy","Date","toISOString","parameters","p","d","q","lags","variables","note","post","base_scenario","shock_scenarios","time_horizon","confidence_level","body","analysis","runScenarioAnalysis","method","indicatorList","split","correlations","calculateCorrelations","mockCorrelations","matrix","forecast","generateForecast","economic_event","affected_sectors","analysis_type","analyzeEconomicImpact","yieldCurve","getYieldCurveAnalysis","components","inflationAnalysis","getInflationAnalysis","detailed","employmentAnalysis","getEmploymentAnalysis","gdpAnalysis","getGDPAnalysis","map","description","source","data_points","categorized","indicator","total_count","module","exports"],"sources":["economic.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\n\n// Apply authentication to all routes\nrouter.use(authenticateToken);\n\n// Try to initialize economic modeling engine with fallback\nlet economicEngine = null;\ntry {\n  const EconomicModelingEngine = require('../utils/economicModelingEngine');\n  economicEngine = new EconomicModelingEngine();\n} catch (error) {\n  console.log('EconomicModelingEngine not available, using fallback methods:', error.message);\n}\n\n// Get economic indicators\nrouter.get('/indicators', async (req, res) => {\n  try {\n    const { category, period = '1Y', limit = 100 } = req.query;\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n    \n    if (category) {\n      whereClause += ` AND category = $${paramIndex}`;\n      params.push(category);\n      paramIndex++;\n    }\n    \n    // Parse period\n    const periodMap = {\n      '1M': '1 month',\n      '3M': '3 months',\n      '6M': '6 months',\n      '1Y': '1 year',\n      '2Y': '2 years',\n      '5Y': '5 years'\n    };\n    \n    const intervalClause = periodMap[period] || '1 year';\n    whereClause += ` AND date >= NOW() - INTERVAL '${intervalClause}'`;\n    \n    const result = await query(`\n      SELECT \n        indicator_id,\n        indicator_name,\n        category,\n        value,\n        date,\n        units,\n        frequency,\n        last_updated\n      FROM economic_indicators\n      ${whereClause}\n      ORDER BY date DESC, indicator_name\n      LIMIT $${paramIndex}\n    `, [...params, parseInt(limit)]);\n    \n    // Group by indicator for better structure\n    const indicators = {};\n    result.rows.forEach(row => {\n      if (!indicators[row.indicator_id]) {\n        indicators[row.indicator_id] = {\n          id: row.indicator_id,\n          name: row.indicator_name,\n          category: row.category,\n          units: row.units,\n          frequency: row.frequency,\n          data: []\n        };\n      }\n      indicators[row.indicator_id].data.push({\n        date: row.date,\n        value: parseFloat(row.value),\n        last_updated: row.last_updated\n      });\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        indicators: Object.values(indicators),\n        period,\n        count: Object.keys(indicators).length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching economic indicators:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch economic indicators',\n      message: error.message\n    });\n  }\n});\n\n// Get economic calendar\nrouter.get('/calendar', async (req, res) => {\n  try {\n    const { from_date, to_date, importance, country = 'US' } = req.query;\n    \n    let whereClause = 'WHERE country = $1';\n    const params = [country];\n    let paramIndex = 2;\n    \n    if (from_date) {\n      whereClause += ` AND event_date >= $${paramIndex}`;\n      params.push(from_date);\n      paramIndex++;\n    }\n    \n    if (to_date) {\n      whereClause += ` AND event_date <= $${paramIndex}`;\n      params.push(to_date);\n      paramIndex++;\n    }\n    \n    if (importance) {\n      whereClause += ` AND importance = $${paramIndex}`;\n      params.push(importance);\n      paramIndex++;\n    }\n    \n    const result = await query(`\n      SELECT \n        event_id,\n        event_name,\n        event_date,\n        event_time,\n        country,\n        importance,\n        forecast_value,\n        previous_value,\n        actual_value,\n        currency,\n        category,\n        source,\n        description,\n        impact_score\n      FROM economic_calendar\n      ${whereClause}\n      ORDER BY event_date ASC, event_time ASC\n    `, params);\n    \n    res.json({\n      success: true,\n      data: {\n        events: result.rows,\n        count: result.rows.length,\n        filters: {\n          from_date,\n          to_date,\n          importance,\n          country\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching economic calendar:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch economic calendar',\n      message: error.message\n    });\n  }\n});\n\n// Get economic models and forecasts\nrouter.get('/models', async (req, res) => {\n  try {\n    const { model_type, horizon = '12M' } = req.query;\n    \n    if (economicEngine) {\n      const models = await economicEngine.getEconomicModels(model_type, horizon);\n      res.json({\n        success: true,\n        data: models\n      });\n    } else {\n      // Fallback mock data\n      const mockModels = [\n        {\n          id: 'arima_gdp',\n          name: 'ARIMA GDP Model',\n          type: 'arima',\n          target: 'GDP Growth',\n          accuracy: 0.85,\n          horizon: horizon,\n          last_updated: new Date().toISOString(),\n          parameters: { p: 2, d: 1, q: 2 }\n        },\n        {\n          id: 'var_inflation',\n          name: 'VAR Inflation Model',\n          type: 'var',\n          target: 'Core CPI',\n          accuracy: 0.78,\n          horizon: horizon,\n          last_updated: new Date().toISOString(),\n          parameters: { lags: 4, variables: ['cpi', 'unemployment', 'fed_rate'] }\n        }\n      ];\n\n      res.json({\n        success: true,\n        data: mockModels,\n        note: 'Mock economic models - modeling engine not available'\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching economic models:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch economic models',\n      message: error.message\n    });\n  }\n});\n\n// Run economic scenario analysis\nrouter.post('/scenario-analysis', async (req, res) => {\n  try {\n    const { \n      base_scenario,\n      shock_scenarios = [],\n      indicators = [],\n      time_horizon = 12,\n      confidence_level = 0.95 \n    } = req.body;\n    \n    if (!base_scenario || !indicators || indicators.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Base scenario and indicators are required'\n      });\n    }\n    \n    const analysis = await economicEngine.runScenarioAnalysis({\n      base_scenario,\n      shock_scenarios,\n      indicators,\n      time_horizon,\n      confidence_level\n    });\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error running scenario analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run scenario analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get economic correlations\nrouter.get('/correlations', async (req, res) => {\n  try {\n    const { indicators, period = '2Y', method = 'pearson' } = req.query;\n    \n    if (economicEngine && indicators) {\n      const indicatorList = indicators.split(',');\n      const correlations = await economicEngine.calculateCorrelations(indicatorList, period, method);\n      \n      res.json({\n        success: true,\n        data: {\n          correlations,\n          indicators: indicatorList,\n          period,\n          method\n        }\n      });\n    } else {\n      // Fallback mock correlations\n      const mockCorrelations = {\n        matrix: {\n          'GDP': { 'GDP': 1.0, 'CPI': 0.23, 'UNEMPLOYMENT': -0.67, 'FED_RATE': 0.45 },\n          'CPI': { 'GDP': 0.23, 'CPI': 1.0, 'UNEMPLOYMENT': -0.12, 'FED_RATE': 0.78 },\n          'UNEMPLOYMENT': { 'GDP': -0.67, 'CPI': -0.12, 'UNEMPLOYMENT': 1.0, 'FED_RATE': -0.34 },\n          'FED_RATE': { 'GDP': 0.45, 'CPI': 0.78, 'UNEMPLOYMENT': -0.34, 'FED_RATE': 1.0 }\n        },\n        period: period,\n        method: method,\n        last_updated: new Date().toISOString()\n      };\n\n      res.json({\n        success: true,\n        data: mockCorrelations,\n        note: 'Mock correlations - modeling engine not available'\n      });\n    }\n  } catch (error) {\n    console.error('Error calculating correlations:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate correlations',\n      message: error.message\n    });\n  }\n});\n\n// Get economic forecasts\nrouter.get('/forecasts', async (req, res) => {\n  try {\n    const { indicator_id, horizon = '12M', model_type = 'arima' } = req.query;\n    \n    if (!indicator_id) {\n      return res.status(400).json({\n        success: false,\n        error: 'Indicator ID is required'\n      });\n    }\n    \n    const forecast = await economicEngine.generateForecast(indicator_id, horizon, model_type);\n    \n    res.json({\n      success: true,\n      data: forecast\n    });\n  } catch (error) {\n    console.error('Error generating forecast:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate forecast',\n      message: error.message\n    });\n  }\n});\n\n// Get economic impact analysis\nrouter.post('/impact-analysis', async (req, res) => {\n  try {\n    const { \n      economic_event,\n      affected_sectors = [],\n      time_horizon = 90,\n      analysis_type = 'comprehensive'\n    } = req.body;\n    \n    if (!economic_event) {\n      return res.status(400).json({\n        success: false,\n        error: 'Economic event is required'\n      });\n    }\n    \n    const analysis = await economicEngine.analyzeEconomicImpact({\n      economic_event,\n      affected_sectors,\n      time_horizon,\n      analysis_type\n    });\n    \n    res.json({\n      success: true,\n      data: analysis\n    });\n  } catch (error) {\n    console.error('Error analyzing economic impact:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze economic impact',\n      message: error.message\n    });\n  }\n});\n\n// Get yield curve analysis\nrouter.get('/yield-curve', async (req, res) => {\n  try {\n    const { date, analysis_type = 'current' } = req.query;\n    \n    const yieldCurve = await economicEngine.getYieldCurveAnalysis(date, analysis_type);\n    \n    res.json({\n      success: true,\n      data: yieldCurve\n    });\n  } catch (error) {\n    console.error('Error fetching yield curve:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch yield curve analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get inflation analysis\nrouter.get('/inflation', async (req, res) => {\n  try {\n    const { period = '5Y', components = true } = req.query;\n    \n    const inflationAnalysis = await economicEngine.getInflationAnalysis(period, components);\n    \n    res.json({\n      success: true,\n      data: inflationAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching inflation analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch inflation analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get employment analysis\nrouter.get('/employment', async (req, res) => {\n  try {\n    const { period = '2Y', detailed = false } = req.query;\n    \n    const employmentAnalysis = await economicEngine.getEmploymentAnalysis(period, detailed);\n    \n    res.json({\n      success: true,\n      data: employmentAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching employment analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch employment analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get GDP analysis\nrouter.get('/gdp', async (req, res) => {\n  try {\n    const { period = '5Y', components = true } = req.query;\n    \n    const gdpAnalysis = await economicEngine.getGDPAnalysis(period, components);\n    \n    res.json({\n      success: true,\n      data: gdpAnalysis\n    });\n  } catch (error) {\n    console.error('Error fetching GDP analysis:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch GDP analysis',\n      message: error.message\n    });\n  }\n});\n\n// Get available economic indicators list\nrouter.get('/indicators/list', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT DISTINCT\n        indicator_id,\n        indicator_name,\n        category,\n        units,\n        frequency,\n        description,\n        source,\n        last_updated,\n        COUNT(*) as data_points\n      FROM economic_indicators\n      GROUP BY indicator_id, indicator_name, category, units, frequency, description, source, last_updated\n      ORDER BY category, indicator_name\n    `);\n    \n    const indicators = result.rows.map(row => ({\n      id: row.indicator_id,\n      name: row.indicator_name,\n      category: row.category,\n      units: row.units,\n      frequency: row.frequency,\n      description: row.description,\n      source: row.source,\n      last_updated: row.last_updated,\n      data_points: parseInt(row.data_points)\n    }));\n    \n    // Group by category\n    const categorized = {};\n    indicators.forEach(indicator => {\n      if (!categorized[indicator.category]) {\n        categorized[indicator.category] = [];\n      }\n      categorized[indicator.category].push(indicator);\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        indicators,\n        categorized,\n        total_count: indicators.length\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching indicators list:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch indicators list',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}