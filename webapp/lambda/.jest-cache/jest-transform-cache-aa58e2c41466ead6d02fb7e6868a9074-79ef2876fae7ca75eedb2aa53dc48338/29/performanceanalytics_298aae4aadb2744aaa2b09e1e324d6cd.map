{"version":3,"names":["cov_pkmto5eaf","actualCoverage","express","s","require","router","Router","authenticateToken","createValidationMiddleware","getDatabase","AdvancedPerformanceAnalytics","createRequestLogger","formatResponse","logger","performanceAnalysisSchema","startDate","type","required","pattern","message","endDate","format","enum","default","includeBenchmarks","performanceReportSchema","reportType","get","req","res","f","requestId","userId","user","query","info","substring","period","db","analytics","performanceMetrics","calculatePortfolioPerformance","response","b","getBasicMetrics","calculationTime","metadata","dataPoints","json","error","stack","status","report","generatePerformanceReport","reportId","generationTime","attributionAnalysis","calculateAttributionAnalysis","holdings","numberOfHoldings","totalValue","totalPortfolioValue","portfolioHistory","getPortfolioHistory","riskMetrics","calculateRiskMetrics","factorExposure","calculateFactorExposure","riskAssessment","overallRisk","assessRiskProfile","riskRecommendations","generateRecommendations","length","calculationDate","Date","toISOString","volatility","maxDrawdown","sectorAnalysis","calculateSectorAnalysis","sectorCount","diversificationScore","totalHoldings","benchmarkMetrics","calculateBenchmarkMetrics","alpha","beta","testQuery","health","service","timestamp","version","capabilities","module","exports"],"sources":["performance-analytics.js"],"sourcesContent":["/**\n * Performance Analytics API Routes\n * Advanced performance metrics and analytics endpoints\n */\n\nconst express = require('express');\nconst router = express.Router();\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware } = require('../middleware/validation');\nconst { getDatabase } = require('../utils/database');\nconst { AdvancedPerformanceAnalytics } = require('../utils/advancedPerformanceAnalytics');\nconst { createRequestLogger } = require('../utils/logger');\nconst { formatResponse } = require('../utils/responseFormatter');\n\nconst logger = createRequestLogger('performance-analytics-routes');\n\n// Input validation schemas\nconst performanceAnalysisSchema = {\n  startDate: {\n    type: 'string',\n    required: true,\n    pattern: /^\\d{4}-\\d{2}-\\d{2}$/,\n    message: 'Start date must be in YYYY-MM-DD format'\n  },\n  endDate: {\n    type: 'string',\n    required: true,\n    pattern: /^\\d{4}-\\d{2}-\\d{2}$/,\n    message: 'End date must be in YYYY-MM-DD format'\n  },\n  format: {\n    type: 'string',\n    required: false,\n    enum: ['basic', 'detailed'],\n    default: 'detailed'\n  },\n  includeBenchmarks: {\n    type: 'boolean',\n    required: false,\n    default: true\n  }\n};\n\nconst performanceReportSchema = {\n  ...performanceAnalysisSchema,\n  reportType: {\n    type: 'string',\n    required: false,\n    enum: ['summary', 'detailed', 'executive'],\n    default: 'detailed'\n  }\n};\n\n/**\n * GET /performance-analytics/portfolio\n * Get comprehensive portfolio performance analysis\n */\nrouter.get('/portfolio', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate, format, includeBenchmarks } = req.query;\n  \n  try {\n    logger.info('Portfolio performance analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`,\n      format\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Calculate comprehensive performance metrics\n    const performanceMetrics = await analytics.calculatePortfolioPerformance(\n      userId,\n      startDate,\n      endDate,\n      { includeBenchmarks }\n    );\n    \n    // Format response based on requested format\n    const response = format === 'basic' ? \n      analytics.getBasicMetrics(performanceMetrics) : \n      performanceMetrics;\n    \n    logger.info('Portfolio performance analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      calculationTime: performanceMetrics.metadata.calculationTime,\n      dataPoints: performanceMetrics.metadata.dataPoints\n    });\n    \n    res.json(formatResponse(response, 'Portfolio performance analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in portfolio performance analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating portfolio performance', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/report\n * Generate comprehensive performance report\n */\nrouter.get('/report', authenticateToken, createValidationMiddleware(performanceReportSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate, reportType } = req.query;\n  \n  try {\n    logger.info('Performance report requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`,\n      reportType\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Generate performance report\n    const report = await analytics.generatePerformanceReport(\n      userId,\n      startDate,\n      endDate,\n      reportType\n    );\n    \n    logger.info('Performance report generated', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      reportId: report.reportId,\n      generationTime: report.generationTime\n    });\n    \n    res.json(formatResponse(report, 'Performance report generated successfully'));\n    \n  } catch (error) {\n    logger.error('Error generating performance report', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error generating performance report', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/attribution\n * Get performance attribution analysis\n */\nrouter.get('/attribution', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate } = req.query;\n  \n  try {\n    logger.info('Attribution analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Calculate attribution analysis\n    const attributionAnalysis = await analytics.calculateAttributionAnalysis(\n      userId,\n      startDate,\n      endDate\n    );\n    \n    logger.info('Attribution analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      holdings: attributionAnalysis.numberOfHoldings,\n      totalValue: attributionAnalysis.totalPortfolioValue\n    });\n    \n    res.json(formatResponse(attributionAnalysis, 'Attribution analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in attribution analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating attribution analysis', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/risk-metrics\n * Get comprehensive risk metrics\n */\nrouter.get('/risk-metrics', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate } = req.query;\n  \n  try {\n    logger.info('Risk metrics analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Get portfolio history for risk calculations\n    const portfolioHistory = await analytics.getPortfolioHistory(userId, startDate, endDate);\n    \n    // Calculate risk metrics\n    const riskMetrics = await analytics.calculateRiskMetrics(portfolioHistory);\n    \n    // Calculate factor exposure for additional risk insights\n    const factorExposure = await analytics.calculateFactorExposure(userId, startDate, endDate);\n    \n    const response = {\n      riskMetrics,\n      factorExposure,\n      riskAssessment: {\n        overallRisk: analytics.assessRiskProfile(riskMetrics),\n        riskRecommendations: analytics.generateRecommendations({ riskMetrics, factorExposure })\n      },\n      metadata: {\n        dataPoints: portfolioHistory.length,\n        calculationDate: new Date().toISOString()\n      }\n    };\n    \n    logger.info('Risk metrics analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      volatility: riskMetrics.volatility,\n      maxDrawdown: riskMetrics.maxDrawdown\n    });\n    \n    res.json(formatResponse(response, 'Risk metrics analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in risk metrics analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating risk metrics', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/sector-analysis\n * Get sector allocation and performance analysis\n */\nrouter.get('/sector-analysis', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate } = req.query;\n  \n  try {\n    logger.info('Sector analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Calculate sector analysis\n    const sectorAnalysis = await analytics.calculateSectorAnalysis(userId, startDate, endDate);\n    \n    logger.info('Sector analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      sectorCount: sectorAnalysis.sectorCount,\n      diversificationScore: sectorAnalysis.diversificationScore.diversificationScore\n    });\n    \n    res.json(formatResponse(sectorAnalysis, 'Sector analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in sector analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating sector analysis', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/factor-exposure\n * Get factor exposure analysis\n */\nrouter.get('/factor-exposure', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate } = req.query;\n  \n  try {\n    logger.info('Factor exposure analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Calculate factor exposure\n    const factorExposure = await analytics.calculateFactorExposure(userId, startDate, endDate);\n    \n    logger.info('Factor exposure analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      totalHoldings: factorExposure.totalHoldings,\n      totalValue: factorExposure.totalValue\n    });\n    \n    res.json(formatResponse(factorExposure, 'Factor exposure analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in factor exposure analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating factor exposure', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/benchmarks\n * Get benchmark comparison analysis\n */\nrouter.get('/benchmarks', authenticateToken, createValidationMiddleware(performanceAnalysisSchema), async (req, res) => {\n  const requestId = req.requestId;\n  const userId = req.user.userId;\n  const { startDate, endDate } = req.query;\n  \n  try {\n    logger.info('Benchmark analysis requested', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      period: `${startDate} to ${endDate}`\n    });\n    \n    const db = await getDatabase();\n    const analytics = new AdvancedPerformanceAnalytics(db);\n    \n    // Get portfolio history for benchmark comparison\n    const portfolioHistory = await analytics.getPortfolioHistory(userId, startDate, endDate);\n    \n    // Calculate benchmark metrics\n    const benchmarkMetrics = await analytics.calculateBenchmarkMetrics(portfolioHistory, startDate, endDate);\n    \n    logger.info('Benchmark analysis completed', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      alpha: benchmarkMetrics.alpha,\n      beta: benchmarkMetrics.beta\n    });\n    \n    res.json(formatResponse(benchmarkMetrics, 'Benchmark analysis completed successfully'));\n    \n  } catch (error) {\n    logger.error('Error in benchmark analysis', {\n      requestId,\n      userId: `${userId.substring(0, 8)}...`,\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Error calculating benchmark analysis', error.message));\n  }\n});\n\n/**\n * GET /performance-analytics/health\n * Performance analytics service health check\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const db = await getDatabase();\n    \n    // Test database connectivity\n    const testQuery = 'SELECT 1 as test';\n    await db.query(testQuery);\n    \n    const health = {\n      status: 'healthy',\n      service: 'performance-analytics',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      capabilities: [\n        'portfolio-analysis',\n        'risk-metrics',\n        'attribution-analysis',\n        'sector-analysis',\n        'factor-exposure',\n        'benchmark-comparison',\n        'performance-reporting'\n      ]\n    };\n    \n    res.json(formatResponse(health, 'Performance analytics service is healthy'));\n    \n  } catch (error) {\n    logger.error('Performance analytics health check failed', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    res.status(500).json(formatResponse(null, 'Performance analytics service health check failed', error.message));\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}