{"version":3,"names":["cov_p8jo8h11d","actualCoverage","SecureQueryBuilder","constructor","f","s","allowedTables","Set","allowedColumns","users","user_api_keys","user_notification_preferences","user_theme_preferences","allowedOperators","allowedOrderDirections","validateTable","tableName","b","Error","cleanTable","toLowerCase","trim","has","validateColumn","columnName","cleanColumn","allowedCols","validateOperator","operator","cleanOp","toUpperCase","buildSelect","options","table","columns","where","orderBy","limit","offset","validTable","validColumns","map","col","query","join","params","paramIndex","Object","keys","length","whereConditions","column","condition","entries","validColumn","value","validOperator","Array","isArray","placeholders","push","orderParts","order","direction","validDirection","Number","isInteger","buildUpdate","set","setClause","whereClause","buildInsert","data","onConflict","values","action","conflictColumns","updateColumns","update","validCol","buildDelete","executeSecure","dbConnection","queryBuilder","context","startTime","Date","now","logData","replace","paramCount","timestamp","toISOString","console","log","result","duration","error","message","module","exports"],"sources":["secureQueryBuilder.js"],"sourcesContent":["/**\n * Secure Query Builder Utility\n * Replaces vulnerable dynamic SQL construction with secure parameterized queries\n */\n\nclass SecureQueryBuilder {\n  constructor() {\n    // Whitelisted table names (prevent table injection)\n    this.allowedTables = new Set([\n      'users',\n      'user_api_keys',\n      'user_notification_preferences', \n      'user_theme_preferences',\n      'user_sessions',\n      'portfolio_holdings',\n      'trade_history',\n      'watchlist',\n      'alerts',\n      'market_data',\n      'stock_symbols',\n      'technical_indicators',\n      'earnings_data',\n      'news_articles',\n      'sentiment_data',\n      'economic_data'\n    ]);\n\n    // Whitelisted columns for each table\n    this.allowedColumns = {\n      users: new Set([\n        'id', 'cognito_id', 'email', 'first_name', 'last_name', \n        'phone', 'timezone', 'language', 'currency_preference',\n        'created_at', 'updated_at', 'last_login', 'is_active'\n      ]),\n      user_api_keys: new Set([\n        'id', 'user_id', 'provider', 'api_key_encrypted', 'masked_api_key',\n        'is_active', 'validation_status', 'created_at', 'updated_at'\n      ]),\n      user_notification_preferences: new Set([\n        'id', 'user_id', 'email_notifications', 'push_notifications', \n        'sms_notifications', 'updated_at'\n      ]),\n      user_theme_preferences: new Set([\n        'id', 'user_id', 'dark_mode', 'primary_color', 'updated_at'\n      ])\n    };\n\n    // SQL operators whitelist\n    this.allowedOperators = new Set([\n      '=', '!=', '<>', '<', '>', '<=', '>=', \n      'LIKE', 'ILIKE', 'IN', 'NOT IN', 'IS NULL', 'IS NOT NULL'\n    ]);\n\n    // ORDER BY directions\n    this.allowedOrderDirections = new Set(['ASC', 'DESC']);\n  }\n\n  /**\n   * Validate table name against whitelist\n   */\n  validateTable(tableName) {\n    if (!tableName || typeof tableName !== 'string') {\n      throw new Error('Invalid table name');\n    }\n\n    const cleanTable = tableName.toLowerCase().trim();\n    if (!this.allowedTables.has(cleanTable)) {\n      throw new Error(`Unauthorized table access: ${tableName}`);\n    }\n\n    return cleanTable;\n  }\n\n  /**\n   * Validate column name against table-specific whitelist\n   */\n  validateColumn(tableName, columnName) {\n    if (!columnName || typeof columnName !== 'string') {\n      throw new Error('Invalid column name');\n    }\n\n    const cleanTable = this.validateTable(tableName);\n    const cleanColumn = columnName.toLowerCase().trim();\n    \n    const allowedCols = this.allowedColumns[cleanTable];\n    if (!allowedCols || !allowedCols.has(cleanColumn)) {\n      throw new Error(`Unauthorized column access: ${tableName}.${columnName}`);\n    }\n\n    return cleanColumn;\n  }\n\n  /**\n   * Validate SQL operator\n   */\n  validateOperator(operator) {\n    if (!operator || typeof operator !== 'string') {\n      throw new Error('Invalid operator');\n    }\n\n    const cleanOp = operator.toUpperCase().trim();\n    if (!this.allowedOperators.has(cleanOp)) {\n      throw new Error(`Unauthorized operator: ${operator}`);\n    }\n\n    return cleanOp;\n  }\n\n  /**\n   * Build secure SELECT query\n   */\n  buildSelect(options) {\n    const {\n      table,\n      columns = ['*'],\n      where = {},\n      orderBy = null,\n      limit = null,\n      offset = null\n    } = options;\n\n    // Validate table\n    const validTable = this.validateTable(table);\n    \n    // Validate columns\n    const validColumns = columns.map(col => {\n      if (col === '*') return '*';\n      return this.validateColumn(validTable, col);\n    });\n\n    // Build query parts\n    let query = `SELECT ${validColumns.join(', ')} FROM ${validTable}`;\n    const params = [];\n    let paramIndex = 1;\n\n    // Build WHERE clause\n    if (Object.keys(where).length > 0) {\n      const whereConditions = [];\n      \n      for (const [column, condition] of Object.entries(where)) {\n        const validColumn = this.validateColumn(validTable, column);\n        \n        if (typeof condition === 'object' && condition !== null) {\n          // Handle complex conditions like { operator: '>', value: 10 }\n          const { operator = '=', value } = condition;\n          const validOperator = this.validateOperator(operator);\n          \n          if (validOperator === 'IN' || validOperator === 'NOT IN') {\n            if (!Array.isArray(value)) {\n              throw new Error(`${validOperator} requires an array value`);\n            }\n            const placeholders = value.map(() => `$${paramIndex++}`).join(', ');\n            whereConditions.push(`${validColumn} ${validOperator} (${placeholders})`);\n            params.push(...value);\n          } else if (validOperator === 'IS NULL' || validOperator === 'IS NOT NULL') {\n            whereConditions.push(`${validColumn} ${validOperator}`);\n          } else {\n            whereConditions.push(`${validColumn} ${validOperator} $${paramIndex++}`);\n            params.push(value);\n          }\n        } else {\n          // Simple equality\n          whereConditions.push(`${validColumn} = $${paramIndex++}`);\n          params.push(condition);\n        }\n      }\n      \n      query += ` WHERE ${whereConditions.join(' AND ')}`;\n    }\n\n    // Build ORDER BY clause\n    if (orderBy) {\n      if (Array.isArray(orderBy)) {\n        const orderParts = orderBy.map(order => {\n          const { column, direction = 'ASC' } = order;\n          const validColumn = this.validateColumn(validTable, column);\n          const validDirection = this.allowedOrderDirections.has(direction.toUpperCase()) \n            ? direction.toUpperCase() \n            : 'ASC';\n          return `${validColumn} ${validDirection}`;\n        });\n        query += ` ORDER BY ${orderParts.join(', ')}`;\n      } else {\n        const { column, direction = 'ASC' } = orderBy;\n        const validColumn = this.validateColumn(validTable, column);\n        const validDirection = this.allowedOrderDirections.has(direction.toUpperCase()) \n          ? direction.toUpperCase() \n          : 'ASC';\n        query += ` ORDER BY ${validColumn} ${validDirection}`;\n      }\n    }\n\n    // Build LIMIT clause\n    if (limit !== null) {\n      if (!Number.isInteger(limit) || limit < 1 || limit > 1000) {\n        throw new Error('Limit must be an integer between 1 and 1000');\n      }\n      query += ` LIMIT $${paramIndex++}`;\n      params.push(limit);\n    }\n\n    // Build OFFSET clause\n    if (offset !== null) {\n      if (!Number.isInteger(offset) || offset < 0) {\n        throw new Error('Offset must be a non-negative integer');\n      }\n      query += ` OFFSET $${paramIndex++}`;\n      params.push(offset);\n    }\n\n    return { query, params };\n  }\n\n  /**\n   * Build secure UPDATE query\n   */\n  buildUpdate(options) {\n    const { table, set = {}, where = {} } = options;\n\n    if (Object.keys(set).length === 0) {\n      throw new Error('UPDATE requires at least one field to update');\n    }\n\n    if (Object.keys(where).length === 0) {\n      throw new Error('UPDATE requires WHERE conditions for security');\n    }\n\n    // Validate table\n    const validTable = this.validateTable(table);\n\n    const params = [];\n    let paramIndex = 1;\n\n    // Build SET clause\n    const setClause = [];\n    for (const [column, value] of Object.entries(set)) {\n      const validColumn = this.validateColumn(validTable, column);\n      setClause.push(`${validColumn} = $${paramIndex++}`);\n      params.push(value);\n    }\n\n    // Build WHERE clause\n    const whereClause = [];\n    for (const [column, value] of Object.entries(where)) {\n      const validColumn = this.validateColumn(validTable, column);\n      whereClause.push(`${validColumn} = $${paramIndex++}`);\n      params.push(value);\n    }\n\n    const query = `UPDATE ${validTable} SET ${setClause.join(', ')} WHERE ${whereClause.join(' AND ')} RETURNING *`;\n\n    return { query, params };\n  }\n\n  /**\n   * Build secure INSERT query\n   */\n  buildInsert(options) {\n    const { table, data = {}, onConflict = null } = options;\n\n    if (Object.keys(data).length === 0) {\n      throw new Error('INSERT requires at least one field');\n    }\n\n    // Validate table\n    const validTable = this.validateTable(table);\n\n    // Validate columns and build query\n    const columns = [];\n    const values = [];\n    const params = [];\n    let paramIndex = 1;\n\n    for (const [column, value] of Object.entries(data)) {\n      const validColumn = this.validateColumn(validTable, column);\n      columns.push(validColumn);\n      values.push(`$${paramIndex++}`);\n      params.push(value);\n    }\n\n    let query = `INSERT INTO ${validTable} (${columns.join(', ')}) VALUES (${values.join(', ')})`;\n\n    // Handle ON CONFLICT clause\n    if (onConflict) {\n      if (onConflict.action === 'DO_NOTHING') {\n        const conflictColumns = onConflict.columns.map(col => this.validateColumn(validTable, col));\n        query += ` ON CONFLICT (${conflictColumns.join(', ')}) DO NOTHING`;\n      } else if (onConflict.action === 'DO_UPDATE') {\n        const conflictColumns = onConflict.columns.map(col => this.validateColumn(validTable, col));\n        const updateColumns = onConflict.update.map(col => {\n          const validCol = this.validateColumn(validTable, col);\n          return `${validCol} = EXCLUDED.${validCol}`;\n        });\n        query += ` ON CONFLICT (${conflictColumns.join(', ')}) DO UPDATE SET ${updateColumns.join(', ')}`;\n      }\n    }\n\n    query += ' RETURNING *';\n\n    return { query, params };\n  }\n\n  /**\n   * Build secure DELETE query\n   */\n  buildDelete(options) {\n    const { table, where = {} } = options;\n\n    if (Object.keys(where).length === 0) {\n      throw new Error('DELETE requires WHERE conditions for security');\n    }\n\n    // Validate table\n    const validTable = this.validateTable(table);\n\n    const params = [];\n    let paramIndex = 1;\n\n    // Build WHERE clause\n    const whereClause = [];\n    for (const [column, value] of Object.entries(where)) {\n      const validColumn = this.validateColumn(validTable, column);\n      whereClause.push(`${validColumn} = $${paramIndex++}`);\n      params.push(value);\n    }\n\n    const query = `DELETE FROM ${validTable} WHERE ${whereClause.join(' AND ')} RETURNING *`;\n\n    return { query, params };\n  }\n\n  /**\n   * Execute query with automatic logging and monitoring\n   */\n  async executeSecure(dbConnection, queryBuilder, context = {}) {\n    const { query, params } = queryBuilder;\n    const startTime = Date.now();\n\n    try {\n      // Log query for security monitoring (without sensitive data)\n      const logData = {\n        query: query.replace(/\\$\\d+/g, '?'), // Replace params with placeholders\n        paramCount: params.length,\n        context,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('🔒 Secure Query:', logData);\n\n      // Execute query\n      const result = await dbConnection.query(query, params);\n      \n      // Log successful execution\n      const duration = Date.now() - startTime;\n      console.log(`✅ Query executed successfully in ${duration}ms`);\n      \n      return result;\n    } catch (error) {\n      // Log failed execution\n      const duration = Date.now() - startTime;\n      console.error(`❌ Query failed after ${duration}ms:`, error.message);\n      \n      // Don't expose internal database errors to client\n      throw new Error('Database operation failed');\n    }\n  }\n}\n\nmodule.exports = SecureQueryBuilder;"],"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","ignoreList":[]}