{"version":3,"names":["cov_335swckei","actualCoverage","Pool","s","require","getDbCredentials","pool","getPool","f","b","creds","host","port","user","username","password","database","dbname","max","idleTimeoutMillis","connectionTimeoutMillis","getEnhancedSignals","event","timeframe","signalType","minStrength","limit","queryStringParameters","query","params","result","signals","rows","map","row","symbol","company_name","sector","date","signal","signal_type","signal_strength","strength","current_price","parseFloat","close","entry_price","buylevel","pivot_price","buy_zone_start","buy_zone_end","in_buy_zone","exit_trigger_1_price","exit_trigger_2_price","exit_trigger_3_condition","exit_trigger_3_price","exit_trigger_4_condition","exit_trigger_4_price","initial_stop","trailing_stop","stop_loss","stoplevel","base_type","base_length_days","volume","avg_volume_50d","volume_surge_pct","rs_rating","breakout_quality","risk_reward_ratio","in_position","inposition","position_status","current_gain_pct","days_in_position","market_cap","trailing_pe","forward_pe","peg_ratio","price_to_book","beta","statusCode","body","JSON","stringify","success","count","length","filters","error","console","message","getActivePositions","positions","summary","total_positions","winning_positions","filter","p","losing_positions","zone_1_reached","zone_2_reached","stop_loss_warnings","getMarketTiming","marketTiming","market_status","distribution_days","follow_through_day","sp500_above_50ma","sp500_above_200ma","nasdaq_above_50ma","nasdaq_above_200ma","growth_leaders_up","growth_leaders_down","put_call_ratio","vix_level","advance_decline","new_highs","new_lows","last_updated","Date","toISOString","data","module","exports"],"sources":["trading_enhanced.js"],"sourcesContent":["const { Pool } = require('pg');\nconst { getDbCredentials } = require('../utils/secrets');\n\nlet pool;\n\nasync function getPool() {\n  if (!pool) {\n    const creds = await getDbCredentials();\n    pool = new Pool({\n      host: creds.host,\n      port: creds.port || 5432,\n      user: creds.username,\n      password: creds.password,\n      database: creds.dbname,\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n  }\n  return pool;\n}\n\n// Get enhanced trading signals with O'Neill methodology\nasync function getEnhancedSignals(event) {\n  const { timeframe = 'daily', signalType = 'all', minStrength = 0, limit = 100 } = event.queryStringParameters || {};\n  \n  try {\n    const pool = await getPool();\n    \n    let query = `\n      WITH latest_signals AS (\n        SELECT DISTINCT ON (bs.symbol) \n          bs.*,\n          ss.company_name,\n          ss.sector,\n          ss.exchange,\n          ss.market_cap,\n          -- Calculate if currently in buy zone\n          CASE \n            WHEN bs.buy_zone_start IS NOT NULL AND bs.buy_zone_end IS NOT NULL \n                 AND bs.close >= bs.buy_zone_start AND bs.close <= bs.buy_zone_end \n            THEN true \n            ELSE false \n          END as in_buy_zone,\n          -- Calculate position status if in position\n          CASE\n            WHEN bs.inposition AND bs.current_gain_pct >= 20 THEN 'TARGET_1_REACHED'\n            WHEN bs.inposition AND bs.current_gain_pct >= 25 THEN 'TARGET_2_REACHED'\n            WHEN bs.inposition AND bs.current_gain_pct <= -7 THEN 'STOP_LOSS_WARNING'\n            WHEN bs.inposition THEN 'ACTIVE'\n            ELSE 'NO_POSITION'\n          END as position_status,\n          -- Additional metrics\n          s.trailing_pe,\n          s.forward_pe,\n          s.peg_ratio,\n          s.price_to_book,\n          s.beta\n        FROM buy_sell_${timeframe} bs\n        JOIN stock_symbols ss ON bs.symbol = ss.symbol\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        WHERE bs.strength >= $1\n          ${signalType !== 'all' ? \"AND bs.signal = $2\" : ''}\n        ORDER BY bs.symbol, bs.date DESC\n      )\n      SELECT * FROM latest_signals\n      WHERE signal != 'None'\n      ORDER BY \n        CASE \n          WHEN signal = 'Buy' AND in_buy_zone THEN 0\n          WHEN signal = 'Buy' THEN 1\n          WHEN signal = 'Sell' THEN 2\n          ELSE 3\n        END,\n        strength DESC,\n        volume_surge_pct DESC\n      LIMIT $${signalType !== 'all' ? '3' : '2'}\n    `;\n    \n    const params = signalType !== 'all' \n      ? [minStrength, signalType, limit]\n      : [minStrength, limit];\n    \n    const result = await pool.query(query, params);\n    \n    // Process and enhance the signals\n    const signals = result.rows.map(row => ({\n      // Basic info\n      symbol: row.symbol,\n      company_name: row.company_name,\n      sector: row.sector,\n      date: row.date,\n      \n      // Signal info\n      signal: row.signal,\n      signal_type: row.signal_type || 'Standard',\n      signal_strength: row.strength,\n      \n      // Price data\n      current_price: parseFloat(row.close),\n      entry_price: parseFloat(row.entry_price || row.buylevel),\n      \n      // O'Neill specific fields\n      pivot_price: parseFloat(row.pivot_price),\n      buy_zone_start: parseFloat(row.buy_zone_start),\n      buy_zone_end: parseFloat(row.buy_zone_end),\n      in_buy_zone: row.in_buy_zone,\n      \n      // Exit triggers\n      exit_trigger_1_price: parseFloat(row.exit_trigger_1_price),\n      exit_trigger_2_price: parseFloat(row.exit_trigger_2_price),\n      exit_trigger_3_condition: row.exit_trigger_3_condition,\n      exit_trigger_3_price: parseFloat(row.exit_trigger_3_price),\n      exit_trigger_4_condition: row.exit_trigger_4_condition,\n      exit_trigger_4_price: parseFloat(row.exit_trigger_4_price),\n      \n      // Stop loss\n      initial_stop: parseFloat(row.initial_stop),\n      trailing_stop: parseFloat(row.trailing_stop),\n      stop_loss: parseFloat(row.stoplevel),\n      \n      // Base pattern info\n      base_type: row.base_type,\n      base_length_days: row.base_length_days,\n      \n      // Volume analysis\n      volume: row.volume,\n      avg_volume_50d: row.avg_volume_50d,\n      volume_surge_pct: parseFloat(row.volume_surge_pct),\n      \n      // Relative strength\n      rs_rating: row.rs_rating,\n      breakout_quality: row.breakout_quality,\n      \n      // Risk/Reward\n      risk_reward_ratio: parseFloat(row.risk_reward_ratio),\n      \n      // Position tracking\n      in_position: row.inposition,\n      position_status: row.position_status,\n      current_gain_pct: parseFloat(row.current_gain_pct),\n      days_in_position: row.days_in_position,\n      \n      // Fundamentals\n      market_cap: parseFloat(row.market_cap),\n      trailing_pe: parseFloat(row.trailing_pe),\n      forward_pe: parseFloat(row.forward_pe),\n      peg_ratio: parseFloat(row.peg_ratio),\n      price_to_book: parseFloat(row.price_to_book),\n      beta: parseFloat(row.beta)\n    }));\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        success: true,\n        signals: signals,\n        count: signals.length,\n        timeframe: timeframe,\n        filters: {\n          signalType,\n          minStrength,\n          limit\n        }\n      })\n    };\n    \n  } catch (error) {\n    console.error('Error fetching enhanced signals:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        success: false,\n        error: 'Failed to fetch enhanced trading signals',\n        message: error.message\n      })\n    };\n  }\n}\n\n// Get active positions with exit zone tracking\nasync function getActivePositions(event) {\n  try {\n    const pool = await getPool();\n    \n    const query = `\n      SELECT \n        bs.symbol,\n        ss.company_name,\n        bs.date as signal_date,\n        bs.buylevel as entry_price,\n        bs.close as current_price,\n        bs.exit_trigger_1_price,\n        bs.exit_trigger_2_price,\n        bs.exit_trigger_3_condition,\n        bs.exit_trigger_3_price,\n        bs.exit_trigger_4_condition,\n        bs.exit_trigger_4_price,\n        bs.initial_stop,\n        bs.trailing_stop,\n        bs.current_gain_pct,\n        bs.days_in_position,\n        bs.volume_surge_pct,\n        bs.rs_rating,\n        bs.breakout_quality,\n        -- Calculate which exit zones have been reached\n        CASE\n          WHEN bs.current_gain_pct >= 25 THEN 'ZONE_2_REACHED'\n          WHEN bs.current_gain_pct >= 20 THEN 'ZONE_1_REACHED'\n          WHEN bs.close < bs.initial_stop THEN 'STOP_LOSS_WARNING'\n          ELSE 'ACTIVE'\n        END as position_status,\n        -- Calculate shares based on $10k position size\n        FLOOR(10000 / bs.buylevel) as shares,\n        FLOOR(10000 / bs.buylevel) * bs.close as current_value\n      FROM buy_sell_daily bs\n      JOIN stock_symbols ss ON bs.symbol = ss.symbol\n      WHERE bs.inposition = true\n        AND bs.date = (\n          SELECT MAX(date) \n          FROM buy_sell_daily \n          WHERE symbol = bs.symbol\n        )\n      ORDER BY bs.current_gain_pct DESC\n    `;\n    \n    const result = await pool.query(query);\n    \n    // Group positions by status\n    const positions = result.rows;\n    const summary = {\n      total_positions: positions.length,\n      winning_positions: positions.filter(p => p.current_gain_pct > 0).length,\n      losing_positions: positions.filter(p => p.current_gain_pct < 0).length,\n      zone_1_reached: positions.filter(p => p.current_gain_pct >= 20).length,\n      zone_2_reached: positions.filter(p => p.current_gain_pct >= 25).length,\n      stop_loss_warnings: positions.filter(p => p.current_gain_pct <= -5).length\n    };\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        success: true,\n        positions: positions,\n        summary: summary\n      })\n    };\n    \n  } catch (error) {\n    console.error('Error fetching active positions:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        success: false,\n        error: 'Failed to fetch active positions',\n        message: error.message\n      })\n    };\n  }\n}\n\n// Get market timing indicators\nasync function getMarketTiming(event) {\n  try {\n    const pool = await getPool();\n    \n    // For now, return mock data - would calculate from actual market data\n    const marketTiming = {\n      market_status: 'Confirmed Uptrend',\n      distribution_days: 2,\n      follow_through_day: '2024-01-15',\n      sp500_above_50ma: 68,\n      sp500_above_200ma: 75,\n      nasdaq_above_50ma: 62,\n      nasdaq_above_200ma: 71,\n      growth_leaders_up: 42,\n      growth_leaders_down: 8,\n      put_call_ratio: 0.85,\n      vix_level: 15.2,\n      advance_decline: 1.8,\n      new_highs: 145,\n      new_lows: 32,\n      last_updated: new Date().toISOString()\n    };\n    \n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        success: true,\n        data: marketTiming\n      })\n    };\n    \n  } catch (error) {\n    console.error('Error fetching market timing:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        success: false,\n        error: 'Failed to fetch market timing data',\n        message: error.message\n      })\n    };\n  }\n}\n\nmodule.exports = {\n  getEnhancedSignals,\n  getActivePositions,\n  getMarketTiming\n};"],"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","ignoreList":[]}