{"version":3,"names":["cov_uov7ymlab","actualCoverage","SecretsManagerClient","GetSecretValueCommand","s","require","SecretsLoader","constructor","f","client","region","b","process","env","WEBAPP_AWS_REGION","AWS_REGION","secretsCache","Map","initialized","loadAllSecrets","console","log","startTime","Date","now","loadCoreSecrets","loadApiKeyEncryptionSecret","loadJwtSecrets","error","message","warn","setRequiredEnvironmentVariables","secretArn","DB_SECRET_ARN","dbSecrets","getSecret","possibleSecrets","encryptionSecret","secretName","secret","API_KEY_ENCRYPTION_SECRET","encryptionKey","secretKey","err","Error","possibleJwtSecrets","jwtSecret","JWT_SECRET","secretId","has","get","command","SecretId","response","send","SecretString","JSON","parse","parseError","SecretBinary","Buffer","from","toString","set","name","validateRequiredSecrets","requiredSecrets","missing","filter","length","join","isInitialized","isUsingTempSecrets","TEMP_ENCRYPTION_KEY","TEMP_JWT_SECRET","getStatus","hasApiKeyEncryption","hasJwtSecret","usingTempEncryption","usingTempJwt","cachedSecrets","size","secretsLoader","module","exports"],"sources":["secretsLoader.js"],"sourcesContent":["// Centralized Secrets Management for Lambda\n// Loads required secrets from AWS Secrets Manager and injects into process.env\n// This ensures all Lambda functions have access to required environment variables\n\nconst { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n\nclass SecretsLoader {\n  constructor() {\n    this.client = new SecretsManagerClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    });\n    this.secretsCache = new Map();\n    this.initialized = false;\n  }\n\n  async loadAllSecrets() {\n    if (this.initialized) {\n      console.log('‚úÖ Secrets already loaded');\n      return;\n    }\n\n    console.log('üîê Loading application secrets...');\n    const startTime = Date.now();\n\n    try {\n      // Load core application secrets\n      await this.loadCoreSecrets();\n      \n      // Load API key encryption secret\n      await this.loadApiKeyEncryptionSecret();\n      \n      // Load JWT secrets\n      await this.loadJwtSecrets();\n      \n      this.initialized = true;\n      console.log(`‚úÖ All secrets loaded successfully in ${Date.now() - startTime}ms`);\n      \n    } catch (error) {\n      console.error('‚ùå Failed to load secrets:', error.message);\n      console.warn('‚ö†Ô∏è  Application will run with limited functionality');\n      \n      // Security: Require proper secrets for production deployment\n      this.setRequiredEnvironmentVariables();\n    }\n  }\n\n  async loadCoreSecrets() {\n    try {\n      // Try to get the main application secrets\n      const secretArn = process.env.DB_SECRET_ARN;\n      if (secretArn) {\n        console.log('üîë Loading database secrets...');\n        const dbSecrets = await this.getSecret(secretArn);\n        \n        // Database secrets are already handled by database.js\n        // Just validate they're accessible\n        if (dbSecrets) {\n          console.log('‚úÖ Database secrets accessible');\n        }\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Database secrets not available:', error.message);\n    }\n  }\n\n  async loadApiKeyEncryptionSecret() {\n    try {\n      console.log('üîê Loading API key encryption secret...');\n      \n      // Try multiple possible secret locations (CloudFormation naming first)\n      const possibleSecrets = [\n        'stocks-app-api-key-encryption-stocks-app-stack',\n        'stocks-app-api-key-encryption-dev',\n        'stocks-app/api-key-encryption',\n        'stocks/api-key-encryption',\n        'financial-dashboard/encryption-key',\n        'webapp/api-encryption-secret'\n      ];\n\n      let encryptionSecret = null;\n      \n      for (const secretName of possibleSecrets) {\n        try {\n          const secret = await this.getSecret(secretName);\n          if (secret) {\n            if (typeof secret === 'string') {\n              encryptionSecret = secret;\n            } else if (secret.API_KEY_ENCRYPTION_SECRET) {\n              encryptionSecret = secret.API_KEY_ENCRYPTION_SECRET;\n            } else if (secret.encryptionKey) {\n              encryptionSecret = secret.encryptionKey;\n            } else if (secret.secretKey) {\n              encryptionSecret = secret.secretKey;\n            }\n            \n            if (encryptionSecret) {\n              console.log(`‚úÖ Found encryption secret from AWS Secrets Manager`);\n              break; // Security: Don't log secret location details\n            }\n          }\n        } catch (err) {\n          console.log(`üîç Secret not found: ${secretName}`);\n          continue;\n        }\n      }\n\n      if (encryptionSecret) {\n        process.env.API_KEY_ENCRYPTION_SECRET = encryptionSecret;\n        console.log('‚úÖ API key encryption secret loaded and injected');\n      } else {\n        console.error('‚ùå CRITICAL: No API key encryption secret found - API key service will be disabled');\n        console.error('üí° REQUIRED: Create a secret named \"stocks-app/api-key-encryption\" in AWS Secrets Manager');\n        // Security: Never generate temporary encryption keys for financial data\n        throw new Error('API key encryption secret is required for production deployment');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Failed to load API key encryption secret:', error.message);\n      console.error('üí° REQUIRED: Create a secret named \"stocks-app/api-key-encryption\" in AWS Secrets Manager');\n      // Security: Never generate temporary encryption keys for financial data\n      throw new Error('API key encryption secret is required for production deployment');\n    }\n  }\n\n  async loadJwtSecrets() {\n    try {\n      console.log('üîê Loading JWT secrets...');\n      \n      const possibleJwtSecrets = [\n        'stocks-app-jwt-secret-stocks-app-stack',\n        'stocks-app-jwt-secret-dev',\n        'stocks-app/jwt-secret',\n        'stocks/jwt-secret',\n        'financial-dashboard/jwt-key',\n        'webapp/jwt-secret'\n      ];\n\n      let jwtSecret = null;\n      \n      for (const secretName of possibleJwtSecrets) {\n        try {\n          const secret = await this.getSecret(secretName);\n          if (secret) {\n            if (typeof secret === 'string') {\n              jwtSecret = secret;\n            } else if (secret.JWT_SECRET) {\n              jwtSecret = secret.JWT_SECRET;\n            } else if (secret.jwtSecret) {\n              jwtSecret = secret.jwtSecret;\n            }\n            \n            if (jwtSecret) {\n              console.log(`‚úÖ Found JWT secret from AWS Secrets Manager`);\n              break; // Security: Don't log secret location details\n            }\n          }\n        } catch (err) {\n          continue;\n        }\n      }\n\n      if (jwtSecret) {\n        process.env.JWT_SECRET = jwtSecret;\n        console.log('‚úÖ JWT secret loaded and injected');\n      } else {\n        console.warn('‚ö†Ô∏è  No JWT secret found - using existing environment value');\n      }\n      \n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Failed to load JWT secret:', error.message);\n    }\n  }\n\n  async getSecret(secretId) {\n    try {\n      // Check cache first\n      if (this.secretsCache.has(secretId)) {\n        return this.secretsCache.get(secretId);\n      }\n\n      const command = new GetSecretValueCommand({ SecretId: secretId });\n      const response = await this.client.send(command);\n      \n      let secret;\n      if (response.SecretString) {\n        try {\n          secret = JSON.parse(response.SecretString);\n        } catch (parseError) {\n          secret = response.SecretString; // Plain string secret\n        }\n      } else if (response.SecretBinary) {\n        secret = Buffer.from(response.SecretBinary, 'base64').toString('utf-8');\n      }\n      \n      // Cache the secret\n      this.secretsCache.set(secretId, secret);\n      \n      return secret;\n    } catch (error) {\n      if (error.name === 'ResourceNotFoundException') {\n        console.log(`üîç Secret not found: ${secretId}`);\n      } else {\n        console.error(`‚ùå Error getting secret ${secretId}:`, error.message);\n      }\n      return null;\n    }\n  }\n\n  // SECURITY: Removed temporary encryption key generation\n  // Financial applications must never use temporary encryption keys\n  // This prevents accidental production deployment with insecure keys\n  \n  async validateRequiredSecrets() {\n    console.log('üîê Validating required production secrets...');\n    \n    if (!process.env.API_KEY_ENCRYPTION_SECRET) {\n      throw new Error('CRITICAL: API_KEY_ENCRYPTION_SECRET is required for financial application');\n    }\n    \n    console.log('‚úÖ Required secrets validation passed');\n  }\n\n  // SECURITY: Removed fallback secrets generation\n  // Financial applications must never use temporary/fallback secrets\n  // This prevents accidental production deployment with insecure keys\n  \n  setRequiredEnvironmentVariables() {\n    console.log('üîç Checking required environment variables...');\n    \n    const requiredSecrets = [\n      'API_KEY_ENCRYPTION_SECRET',\n      'JWT_SECRET'\n    ];\n    \n    const missing = requiredSecrets.filter(secret => !process.env[secret]);\n    \n    if (missing.length > 0) {\n      console.error('‚ùå CRITICAL: Missing required secrets:', missing);\n      throw new Error(`Missing required secrets: ${missing.join(', ')}`);\n    }\n    \n    console.log('‚úÖ All required environment variables are present');\n  }\n\n  // Helper method to check if secrets are loaded\n  isInitialized() {\n    return this.initialized;\n  }\n\n  // Helper method to check if using temporary secrets\n  isUsingTempSecrets() {\n    return process.env.TEMP_ENCRYPTION_KEY === 'true' || process.env.TEMP_JWT_SECRET === 'true';\n  }\n\n  // Get initialization status for debugging\n  getStatus() {\n    return {\n      initialized: this.initialized,\n      hasApiKeyEncryption: !!process.env.API_KEY_ENCRYPTION_SECRET,\n      hasJwtSecret: !!process.env.JWT_SECRET,\n      usingTempEncryption: process.env.TEMP_ENCRYPTION_KEY === 'true',\n      usingTempJwt: process.env.TEMP_JWT_SECRET === 'true',\n      cachedSecrets: this.secretsCache.size\n    };\n  }\n}\n\n// Create singleton instance\nconst secretsLoader = new SecretsLoader();\n\nmodule.exports = secretsLoader;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ;AACA;AACA;;AAEA,MAAM;EAAEE,oBAAoB;EAAEC;AAAsB,CAAC;AAAA;AAAA,CAAAH,aAAA,GAAAI,CAAA,OAAGC,OAAO,CAAC,iCAAiC,CAAC;AAElG,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACZ,IAAI,CAACK,MAAM,GAAG,IAAIP,oBAAoB,CAAC;MACrCQ,MAAM;MAAE;MAAA,CAAAV,aAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACC,iBAAiB;MAAA;MAAA,CAAAd,aAAA,GAAAW,CAAA,UAAIC,OAAO,CAACC,GAAG,CAACE,UAAU;MAAA;MAAA,CAAAf,aAAA,GAAAW,CAAA,UAAI,WAAW;IAChF,CAAC,CAAC;IAAC;IAAAX,aAAA,GAAAI,CAAA;IACH,IAAI,CAACY,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAjB,aAAA,GAAAI,CAAA;IAC9B,IAAI,CAACc,WAAW,GAAG,KAAK;EAC1B;EAEA,MAAMC,cAAcA,CAAA,EAAG;IAAA;IAAAnB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACrB,IAAI,IAAI,CAACc,WAAW,EAAE;MAAA;MAAAlB,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAI,CAAA;MACpBgB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAAC;MAAArB,aAAA,GAAAI,CAAA;MACxC;IACF,CAAC;IAAA;IAAA;MAAAJ,aAAA,GAAAW,CAAA;IAAA;IAAAX,aAAA,GAAAI,CAAA;IAEDgB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChD,MAAMC,SAAS;IAAA;IAAA,CAAAtB,aAAA,GAAAI,CAAA,OAAGmB,IAAI,CAACC,GAAG,CAAC,CAAC;IAAC;IAAAxB,aAAA,GAAAI,CAAA;IAE7B,IAAI;MAAA;MAAAJ,aAAA,GAAAI,CAAA;MACF;MACA,MAAM,IAAI,CAACqB,eAAe,CAAC,CAAC;;MAE5B;MAAA;MAAAzB,aAAA,GAAAI,CAAA;MACA,MAAM,IAAI,CAACsB,0BAA0B,CAAC,CAAC;;MAEvC;MAAA;MAAA1B,aAAA,GAAAI,CAAA;MACA,MAAM,IAAI,CAACuB,cAAc,CAAC,CAAC;MAAC;MAAA3B,aAAA,GAAAI,CAAA;MAE5B,IAAI,CAACc,WAAW,GAAG,IAAI;MAAC;MAAAlB,aAAA,GAAAI,CAAA;MACxBgB,OAAO,CAACC,GAAG,CAAC,wCAAwCE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,IAAI,CAAC;IAEjF,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACdgB,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACC,OAAO,CAAC;MAAC;MAAA7B,aAAA,GAAAI,CAAA;MAC1DgB,OAAO,CAACU,IAAI,CAAC,qDAAqD,CAAC;;MAEnE;MAAA;MAAA9B,aAAA,GAAAI,CAAA;MACA,IAAI,CAAC2B,+BAA+B,CAAC,CAAC;IACxC;EACF;EAEA,MAAMN,eAAeA,CAAA,EAAG;IAAA;IAAAzB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACtB,IAAI;MACF;MACA,MAAM4B,SAAS;MAAA;MAAA,CAAAhC,aAAA,GAAAI,CAAA,QAAGQ,OAAO,CAACC,GAAG,CAACoB,aAAa;MAAC;MAAAjC,aAAA,GAAAI,CAAA;MAC5C,IAAI4B,SAAS,EAAE;QAAA;QAAAhC,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACbgB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,MAAMa,SAAS;QAAA;QAAA,CAAAlC,aAAA,GAAAI,CAAA,QAAG,MAAM,IAAI,CAAC+B,SAAS,CAACH,SAAS,CAAC;;QAEjD;QACA;QAAA;QAAAhC,aAAA,GAAAI,CAAA;QACA,IAAI8B,SAAS,EAAE;UAAA;UAAAlC,aAAA,GAAAW,CAAA;UAAAX,aAAA,GAAAI,CAAA;UACbgB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC9C,CAAC;QAAA;QAAA;UAAArB,aAAA,GAAAW,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAX,aAAA,GAAAW,CAAA;MAAA;IACH,CAAC,CAAC,OAAOiB,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACdgB,OAAO,CAACU,IAAI,CAAC,qCAAqC,EAAEF,KAAK,CAACC,OAAO,CAAC;IACpE;EACF;EAEA,MAAMH,0BAA0BA,CAAA,EAAG;IAAA;IAAA1B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACjC,IAAI;MAAA;MAAAJ,aAAA,GAAAI,CAAA;MACFgB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;;MAEtD;MACA,MAAMe,eAAe;MAAA;MAAA,CAAApC,aAAA,GAAAI,CAAA,QAAG,CACtB,gDAAgD,EAChD,mCAAmC,EACnC,+BAA+B,EAC/B,2BAA2B,EAC3B,oCAAoC,EACpC,8BAA8B,CAC/B;MAED,IAAIiC,gBAAgB;MAAA;MAAA,CAAArC,aAAA,GAAAI,CAAA,QAAG,IAAI;MAAC;MAAAJ,aAAA,GAAAI,CAAA;MAE5B,KAAK,MAAMkC,UAAU,IAAIF,eAAe,EAAE;QAAA;QAAApC,aAAA,GAAAI,CAAA;QACxC,IAAI;UACF,MAAMmC,MAAM;UAAA;UAAA,CAAAvC,aAAA,GAAAI,CAAA,QAAG,MAAM,IAAI,CAAC+B,SAAS,CAACG,UAAU,CAAC;UAAC;UAAAtC,aAAA,GAAAI,CAAA;UAChD,IAAImC,MAAM,EAAE;YAAA;YAAAvC,aAAA,GAAAW,CAAA;YAAAX,aAAA,GAAAI,CAAA;YACV,IAAI,OAAOmC,MAAM,KAAK,QAAQ,EAAE;cAAA;cAAAvC,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cAC9BiC,gBAAgB,GAAGE,MAAM;YAC3B,CAAC,MAAM;cAAA;cAAAvC,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cAAA,IAAImC,MAAM,CAACC,yBAAyB,EAAE;gBAAA;gBAAAxC,aAAA,GAAAW,CAAA;gBAAAX,aAAA,GAAAI,CAAA;gBAC3CiC,gBAAgB,GAAGE,MAAM,CAACC,yBAAyB;cACrD,CAAC,MAAM;gBAAA;gBAAAxC,aAAA,GAAAW,CAAA;gBAAAX,aAAA,GAAAI,CAAA;gBAAA,IAAImC,MAAM,CAACE,aAAa,EAAE;kBAAA;kBAAAzC,aAAA,GAAAW,CAAA;kBAAAX,aAAA,GAAAI,CAAA;kBAC/BiC,gBAAgB,GAAGE,MAAM,CAACE,aAAa;gBACzC,CAAC,MAAM;kBAAA;kBAAAzC,aAAA,GAAAW,CAAA;kBAAAX,aAAA,GAAAI,CAAA;kBAAA,IAAImC,MAAM,CAACG,SAAS,EAAE;oBAAA;oBAAA1C,aAAA,GAAAW,CAAA;oBAAAX,aAAA,GAAAI,CAAA;oBAC3BiC,gBAAgB,GAAGE,MAAM,CAACG,SAAS;kBACrC,CAAC;kBAAA;kBAAA;oBAAA1C,aAAA,GAAAW,CAAA;kBAAA;gBAAD;cAAA;YAAA;YAAC;YAAAX,aAAA,GAAAI,CAAA;YAED,IAAIiC,gBAAgB,EAAE;cAAA;cAAArC,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cACpBgB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;cAAC;cAAArB,aAAA,GAAAI,CAAA;cAClE,MAAM,CAAC;YACT,CAAC;YAAA;YAAA;cAAAJ,aAAA,GAAAW,CAAA;YAAA;UACH,CAAC;UAAA;UAAA;YAAAX,aAAA,GAAAW,CAAA;UAAA;QACH,CAAC,CAAC,OAAOgC,GAAG,EAAE;UAAA;UAAA3C,aAAA,GAAAI,CAAA;UACZgB,OAAO,CAACC,GAAG,CAAC,wBAAwBiB,UAAU,EAAE,CAAC;UAAC;UAAAtC,aAAA,GAAAI,CAAA;UAClD;QACF;MACF;MAAC;MAAAJ,aAAA,GAAAI,CAAA;MAED,IAAIiC,gBAAgB,EAAE;QAAA;QAAArC,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACpBQ,OAAO,CAACC,GAAG,CAAC2B,yBAAyB,GAAGH,gBAAgB;QAAC;QAAArC,aAAA,GAAAI,CAAA;QACzDgB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAChE,CAAC,MAAM;QAAA;QAAArB,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACLgB,OAAO,CAACQ,KAAK,CAAC,mFAAmF,CAAC;QAAC;QAAA5B,aAAA,GAAAI,CAAA;QACnGgB,OAAO,CAACQ,KAAK,CAAC,2FAA2F,CAAC;QAC1G;QAAA;QAAA5B,aAAA,GAAAI,CAAA;QACA,MAAM,IAAIwC,KAAK,CAAC,iEAAiE,CAAC;MACpF;IAEF,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACdgB,OAAO,CAACQ,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAACC,OAAO,CAAC;MAAC;MAAA7B,aAAA,GAAAI,CAAA;MAC5EgB,OAAO,CAACQ,KAAK,CAAC,2FAA2F,CAAC;MAC1G;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACA,MAAM,IAAIwC,KAAK,CAAC,iEAAiE,CAAC;IACpF;EACF;EAEA,MAAMjB,cAAcA,CAAA,EAAG;IAAA;IAAA3B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACrB,IAAI;MAAA;MAAAJ,aAAA,GAAAI,CAAA;MACFgB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExC,MAAMwB,kBAAkB;MAAA;MAAA,CAAA7C,aAAA,GAAAI,CAAA,QAAG,CACzB,wCAAwC,EACxC,2BAA2B,EAC3B,uBAAuB,EACvB,mBAAmB,EACnB,6BAA6B,EAC7B,mBAAmB,CACpB;MAED,IAAI0C,SAAS;MAAA;MAAA,CAAA9C,aAAA,GAAAI,CAAA,QAAG,IAAI;MAAC;MAAAJ,aAAA,GAAAI,CAAA;MAErB,KAAK,MAAMkC,UAAU,IAAIO,kBAAkB,EAAE;QAAA;QAAA7C,aAAA,GAAAI,CAAA;QAC3C,IAAI;UACF,MAAMmC,MAAM;UAAA;UAAA,CAAAvC,aAAA,GAAAI,CAAA,QAAG,MAAM,IAAI,CAAC+B,SAAS,CAACG,UAAU,CAAC;UAAC;UAAAtC,aAAA,GAAAI,CAAA;UAChD,IAAImC,MAAM,EAAE;YAAA;YAAAvC,aAAA,GAAAW,CAAA;YAAAX,aAAA,GAAAI,CAAA;YACV,IAAI,OAAOmC,MAAM,KAAK,QAAQ,EAAE;cAAA;cAAAvC,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cAC9B0C,SAAS,GAAGP,MAAM;YACpB,CAAC,MAAM;cAAA;cAAAvC,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cAAA,IAAImC,MAAM,CAACQ,UAAU,EAAE;gBAAA;gBAAA/C,aAAA,GAAAW,CAAA;gBAAAX,aAAA,GAAAI,CAAA;gBAC5B0C,SAAS,GAAGP,MAAM,CAACQ,UAAU;cAC/B,CAAC,MAAM;gBAAA;gBAAA/C,aAAA,GAAAW,CAAA;gBAAAX,aAAA,GAAAI,CAAA;gBAAA,IAAImC,MAAM,CAACO,SAAS,EAAE;kBAAA;kBAAA9C,aAAA,GAAAW,CAAA;kBAAAX,aAAA,GAAAI,CAAA;kBAC3B0C,SAAS,GAAGP,MAAM,CAACO,SAAS;gBAC9B,CAAC;gBAAA;gBAAA;kBAAA9C,aAAA,GAAAW,CAAA;gBAAA;cAAD;YAAA;YAAC;YAAAX,aAAA,GAAAI,CAAA;YAED,IAAI0C,SAAS,EAAE;cAAA;cAAA9C,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAI,CAAA;cACbgB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;cAAC;cAAArB,aAAA,GAAAI,CAAA;cAC3D,MAAM,CAAC;YACT,CAAC;YAAA;YAAA;cAAAJ,aAAA,GAAAW,CAAA;YAAA;UACH,CAAC;UAAA;UAAA;YAAAX,aAAA,GAAAW,CAAA;UAAA;QACH,CAAC,CAAC,OAAOgC,GAAG,EAAE;UAAA;UAAA3C,aAAA,GAAAI,CAAA;UACZ;QACF;MACF;MAAC;MAAAJ,aAAA,GAAAI,CAAA;MAED,IAAI0C,SAAS,EAAE;QAAA;QAAA9C,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACbQ,OAAO,CAACC,GAAG,CAACkC,UAAU,GAAGD,SAAS;QAAC;QAAA9C,aAAA,GAAAI,CAAA;QACnCgB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACjD,CAAC,MAAM;QAAA;QAAArB,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACLgB,OAAO,CAACU,IAAI,CAAC,4DAA4D,CAAC;MAC5E;IAEF,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACdgB,OAAO,CAACU,IAAI,CAAC,gCAAgC,EAAEF,KAAK,CAACC,OAAO,CAAC;IAC/D;EACF;EAEA,MAAMM,SAASA,CAACa,QAAQ,EAAE;IAAA;IAAAhD,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACxB,IAAI;MAAA;MAAAJ,aAAA,GAAAI,CAAA;MACF;MACA,IAAI,IAAI,CAACY,YAAY,CAACiC,GAAG,CAACD,QAAQ,CAAC,EAAE;QAAA;QAAAhD,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACnC,OAAO,IAAI,CAACY,YAAY,CAACkC,GAAG,CAACF,QAAQ,CAAC;MACxC,CAAC;MAAA;MAAA;QAAAhD,aAAA,GAAAW,CAAA;MAAA;MAED,MAAMwC,OAAO;MAAA;MAAA,CAAAnD,aAAA,GAAAI,CAAA,QAAG,IAAID,qBAAqB,CAAC;QAAEiD,QAAQ,EAAEJ;MAAS,CAAC,CAAC;MACjE,MAAMK,QAAQ;MAAA;MAAA,CAAArD,aAAA,GAAAI,CAAA,QAAG,MAAM,IAAI,CAACK,MAAM,CAAC6C,IAAI,CAACH,OAAO,CAAC;MAEhD,IAAIZ,MAAM;MAAC;MAAAvC,aAAA,GAAAI,CAAA;MACX,IAAIiD,QAAQ,CAACE,YAAY,EAAE;QAAA;QAAAvD,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACzB,IAAI;UAAA;UAAAJ,aAAA,GAAAI,CAAA;UACFmC,MAAM,GAAGiB,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACE,YAAY,CAAC;QAC5C,CAAC,CAAC,OAAOG,UAAU,EAAE;UAAA;UAAA1D,aAAA,GAAAI,CAAA;UACnBmC,MAAM,GAAGc,QAAQ,CAACE,YAAY,CAAC,CAAC;QAClC;MACF,CAAC,MAAM;QAAA;QAAAvD,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QAAA,IAAIiD,QAAQ,CAACM,YAAY,EAAE;UAAA;UAAA3D,aAAA,GAAAW,CAAA;UAAAX,aAAA,GAAAI,CAAA;UAChCmC,MAAM,GAAGqB,MAAM,CAACC,IAAI,CAACR,QAAQ,CAACM,YAAY,EAAE,QAAQ,CAAC,CAACG,QAAQ,CAAC,OAAO,CAAC;QACzE,CAAC;QAAA;QAAA;UAAA9D,aAAA,GAAAW,CAAA;QAAA;MAAD;;MAEA;MAAA;MAAAX,aAAA,GAAAI,CAAA;MACA,IAAI,CAACY,YAAY,CAAC+C,GAAG,CAACf,QAAQ,EAAET,MAAM,CAAC;MAAC;MAAAvC,aAAA,GAAAI,CAAA;MAExC,OAAOmC,MAAM;IACf,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAI,CAAA;MACd,IAAIwB,KAAK,CAACoC,IAAI,KAAK,2BAA2B,EAAE;QAAA;QAAAhE,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QAC9CgB,OAAO,CAACC,GAAG,CAAC,wBAAwB2B,QAAQ,EAAE,CAAC;MACjD,CAAC,MAAM;QAAA;QAAAhD,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAI,CAAA;QACLgB,OAAO,CAACQ,KAAK,CAAC,0BAA0BoB,QAAQ,GAAG,EAAEpB,KAAK,CAACC,OAAO,CAAC;MACrE;MAAC;MAAA7B,aAAA,GAAAI,CAAA;MACD,OAAO,IAAI;IACb;EACF;;EAEA;EACA;EACA;;EAEA,MAAM6D,uBAAuBA,CAAA,EAAG;IAAA;IAAAjE,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IAC9BgB,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAAC;IAAArB,aAAA,GAAAI,CAAA;IAE5D,IAAI,CAACQ,OAAO,CAACC,GAAG,CAAC2B,yBAAyB,EAAE;MAAA;MAAAxC,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAI,CAAA;MAC1C,MAAM,IAAIwC,KAAK,CAAC,2EAA2E,CAAC;IAC9F,CAAC;IAAA;IAAA;MAAA5C,aAAA,GAAAW,CAAA;IAAA;IAAAX,aAAA,GAAAI,CAAA;IAEDgB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACrD;;EAEA;EACA;EACA;;EAEAU,+BAA+BA,CAAA,EAAG;IAAA;IAAA/B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IAChCgB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAE5D,MAAM6C,eAAe;IAAA;IAAA,CAAAlE,aAAA,GAAAI,CAAA,SAAG,CACtB,2BAA2B,EAC3B,YAAY,CACb;IAED,MAAM+D,OAAO;IAAA;IAAA,CAAAnE,aAAA,GAAAI,CAAA,SAAG8D,eAAe,CAACE,MAAM,CAAC7B,MAAM,IAAI;MAAA;MAAAvC,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAI,CAAA;MAAA,QAACQ,OAAO,CAACC,GAAG,CAAC0B,MAAM,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAvC,aAAA,GAAAI,CAAA;IAEvE,IAAI+D,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MAAA;MAAArE,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAI,CAAA;MACtBgB,OAAO,CAACQ,KAAK,CAAC,uCAAuC,EAAEuC,OAAO,CAAC;MAAC;MAAAnE,aAAA,GAAAI,CAAA;MAChE,MAAM,IAAIwC,KAAK,CAAC,6BAA6BuB,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAtE,aAAA,GAAAW,CAAA;IAAA;IAAAX,aAAA,GAAAI,CAAA;IAEDgB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE;;EAEA;EACAkD,aAAaA,CAAA,EAAG;IAAA;IAAAvE,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACd,OAAO,IAAI,CAACc,WAAW;EACzB;;EAEA;EACAsD,kBAAkBA,CAAA,EAAG;IAAA;IAAAxE,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACnB,OAAO,2BAAAJ,aAAA,GAAAW,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC4D,mBAAmB,KAAK,MAAM;IAAA;IAAA,CAAAzE,aAAA,GAAAW,CAAA,WAAIC,OAAO,CAACC,GAAG,CAAC6D,eAAe,KAAK,MAAM;EAC7F;;EAEA;EACAC,SAASA,CAAA,EAAG;IAAA;IAAA3E,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAI,CAAA;IACV,OAAO;MACLc,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7B0D,mBAAmB,EAAE,CAAC,CAAChE,OAAO,CAACC,GAAG,CAAC2B,yBAAyB;MAC5DqC,YAAY,EAAE,CAAC,CAACjE,OAAO,CAACC,GAAG,CAACkC,UAAU;MACtC+B,mBAAmB,EAAElE,OAAO,CAACC,GAAG,CAAC4D,mBAAmB,KAAK,MAAM;MAC/DM,YAAY,EAAEnE,OAAO,CAACC,GAAG,CAAC6D,eAAe,KAAK,MAAM;MACpDM,aAAa,EAAE,IAAI,CAAChE,YAAY,CAACiE;IACnC,CAAC;EACH;AACF;;AAEA;AACA,MAAMC,aAAa;AAAA;AAAA,CAAAlF,aAAA,GAAAI,CAAA,SAAG,IAAIE,aAAa,CAAC,CAAC;AAAC;AAAAN,aAAA,GAAAI,CAAA;AAE1C+E,MAAM,CAACC,OAAO,GAAGF,aAAa","ignoreList":[]}