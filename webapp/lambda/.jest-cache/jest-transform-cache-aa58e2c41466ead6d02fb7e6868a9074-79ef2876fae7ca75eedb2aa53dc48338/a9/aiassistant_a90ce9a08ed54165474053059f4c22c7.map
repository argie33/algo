{"version":3,"names":["cov_2pozt6pyep","actualCoverage","express","s","require","authenticateToken","query","router","Router","use","conversationHistory","Map","AI_CONFIG","maxHistoryLength","maxResponseLength","supportedLanguages","features","portfolioAnalysis","marketInsights","stockResearch","investmentAdvice","digitalHuman","process","env","NVIDIA_DIGITAL_HUMAN_ENABLED","voiceChat","VOICE_CHAT_ENABLED","getUserHistory","userId","f","has","b","set","get","addToHistory","message","history","push","timestamp","Date","length","splice","getPortfolioContext","portfolioData","totalValue","rows","reduce","sum","holding","parseFloat","market_value","totalGainLoss","unrealized_pl","holdings","gainLossPercent","error","console","generateAIResponse","userMessage","context","toLowerCase","portfolioContext","includes","response","suggestions","toFixed","slice","map","index","symbol","unrealized_plpc","join","content","hasPortfolioData","portfolioValue","analysisType","post","req","res","user","sub","body","trim","status","json","success","id","now","type","aiResponse","assistantMessage","conversationId","limit","recentHistory","parseInt","total","delete","preferences","ai_voice_enabled","ai_digital_human_enabled","ai_auto_voice_response","ai_language","userPrefs","dbError","log","config","userPreferences","note","put","voiceEnabled","digitalHumanEnabled","autoVoiceResponse","language","indicesQuery","sectorsQuery","sentimentQuery","indices","forEach","row","indexName","value","current_price","change","change_percent","volume","sectors","sectorName","sector","replace","performance","avg_change","sentiment","sentimentData","indicator_name","vix","fearGreedIndex","putCallRatio","marketContext","Object","keys","volatility","level","trend","overall","dataSource","queriesExecuted","lastUpdated","toISOString","audioData","format","availableFeatures","recommendedAction","avatar","module","exports"],"sources":["ai-assistant.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\n\nconst router = express.Router();\n\n// Apply authentication middleware to all AI assistant routes\nrouter.use(authenticateToken);\n\n// Store conversation history in memory (in production, use Redis or database)\nconst conversationHistory = new Map();\n\n// AI Assistant Configuration\nconst AI_CONFIG = {\n  maxHistoryLength: 50,\n  maxResponseLength: 1000,\n  supportedLanguages: ['en'],\n  features: {\n    portfolioAnalysis: true,\n    marketInsights: true,\n    stockResearch: true,\n    investmentAdvice: true,\n    digitalHuman: process.env.NVIDIA_DIGITAL_HUMAN_ENABLED === 'true',\n    voiceChat: process.env.VOICE_CHAT_ENABLED === 'true'\n  }\n};\n\n// Helper function to get user conversation history\nconst getUserHistory = (userId) => {\n  if (!conversationHistory.has(userId)) {\n    conversationHistory.set(userId, []);\n  }\n  return conversationHistory.get(userId);\n};\n\n// Helper function to add message to history\nconst addToHistory = (userId, message) => {\n  const history = getUserHistory(userId);\n  history.push({\n    ...message,\n    timestamp: new Date()\n  });\n  \n  // Keep only last N messages\n  if (history.length > AI_CONFIG.maxHistoryLength) {\n    history.splice(0, history.length - AI_CONFIG.maxHistoryLength);\n  }\n  \n  conversationHistory.set(userId, history);\n};\n\n// Helper function to analyze user's portfolio context\nconst getPortfolioContext = async (userId) => {\n  try {\n    const portfolioData = await query(`\n      SELECT \n        symbol,\n        quantity,\n        avg_cost,\n        current_price,\n        market_value,\n        unrealized_pl,\n        unrealized_plpc\n      FROM portfolio_holdings \n      WHERE user_id = $1\n      ORDER BY market_value DESC\n      LIMIT 10\n    `, [userId]);\n\n    const totalValue = portfolioData.rows.reduce((sum, holding) => sum + parseFloat(holding.market_value || 0), 0);\n    const totalGainLoss = portfolioData.rows.reduce((sum, holding) => sum + parseFloat(holding.unrealized_pl || 0), 0);\n    \n    return {\n      holdings: portfolioData.rows,\n      totalValue: totalValue,\n      totalGainLoss: totalGainLoss,\n      gainLossPercent: totalValue > 0 ? (totalGainLoss / totalValue) * 100 : 0\n    };\n  } catch (error) {\n    console.error('Error getting portfolio context:', error);\n    return null;\n  }\n};\n\n// Helper function to generate AI response\nconst generateAIResponse = async (userMessage, userId, context = {}) => {\n  const message = userMessage.toLowerCase();\n  \n  // Get portfolio context if needed\n  let portfolioContext = null;\n  if (message.includes('portfolio') || message.includes('holdings') || message.includes('performance')) {\n    portfolioContext = await getPortfolioContext(userId);\n  }\n\n  // Generate contextual response\n  let response = '';\n  let suggestions = [];\n  \n  if (message.includes('portfolio') && portfolioContext) {\n    response = `Based on your portfolio analysis:\n    \n• Total Portfolio Value: $${portfolioContext.totalValue.toFixed(2)}\n• Total Gain/Loss: ${portfolioContext.totalGainLoss >= 0 ? '+' : ''}$${portfolioContext.totalGainLoss.toFixed(2)} (${portfolioContext.gainLossPercent.toFixed(2)}%)\n• Number of Holdings: ${portfolioContext.holdings.length}\n\nYour top holdings by value:\n${portfolioContext.holdings.slice(0, 5).map((holding, index) => \n  `${index + 1}. ${holding.symbol}: $${parseFloat(holding.market_value).toFixed(2)} (${parseFloat(holding.unrealized_plpc || 0).toFixed(2)}%)`\n).join('\\n')}\n\n${portfolioContext.gainLossPercent > 0 ? \n  'Your portfolio is performing well! ' : \n  'Your portfolio is down, but this could be a good time to review your strategy. '\n}Would you like me to analyze any specific holdings or suggest rebalancing strategies?`;\n    \n    suggestions = ['Analyze top performers', 'Suggest rebalancing', 'Risk assessment', 'Compare to benchmark'];\n  } \n  else if (message.includes('market') || message.includes('trending')) {\n    response = `Here's today's market overview:\n\n• **Market Sentiment**: Mixed signals with technology stocks leading gains\n• **Key Movers**: Healthcare and renewable energy showing strength\n• **Volatility**: Moderate with VIX at typical levels\n• **Sector Rotation**: Investors moving from growth to value stocks\n\n**Key Points to Watch:**\n- Federal Reserve policy updates\n- Earnings season momentum\n- Economic indicators (employment, inflation)\n- Geopolitical developments\n\nThe current market presents both opportunities and risks. Consider focusing on quality companies with strong fundamentals and dividend-paying stocks for stability.`;\n    \n    suggestions = ['Sector analysis', 'Economic indicators', 'Earnings calendar', 'Volatility outlook'];\n  }\n  else if (message.includes('stock') || message.includes('research')) {\n    response = `I can help you research stocks comprehensively. Here's what I analyze:\n\n**Fundamental Analysis:**\n• Financial statements and ratios\n• Revenue and earnings trends\n• Debt levels and cash flow\n• Industry position and competitive advantages\n\n**Technical Analysis:**\n• Price trends and patterns\n• Volume analysis\n• Support and resistance levels\n• Technical indicators (RSI, MACD, etc.)\n\n**Market Sentiment:**\n• Analyst ratings and price targets\n• News sentiment analysis\n• Social media buzz\n• Institutional activity\n\nPlease provide a ticker symbol, and I'll give you a detailed analysis with actionable insights.`;\n    \n    suggestions = ['Analyze AAPL', 'Research TSLA', 'Check NVDA', 'Screen for value stocks'];\n  }\n  else if (message.includes('invest') || message.includes('strategy')) {\n    response = `Let me help you with investment strategies based on current market conditions:\n\n**Recommended Strategies:**\n1. **Diversification**: Spread risk across sectors and asset classes\n2. **Dollar-Cost Averaging**: Regular investments to reduce timing risk\n3. **Quality Focus**: Companies with strong balance sheets and consistent earnings\n4. **Dividend Growth**: Stocks with history of increasing dividends\n\n**Current Opportunities:**\n• Undervalued blue-chip stocks\n• REITs for income generation\n• International diversification\n• ESG-focused investments\n\n**Risk Management:**\n• Position sizing (no more than 5% in single stock)\n• Stop-loss orders for downside protection\n• Regular portfolio rebalancing\n• Emergency fund maintenance\n\nWhat's your investment timeline and risk tolerance? I can provide more specific recommendations.`;\n    \n    suggestions = ['Risk assessment', 'Portfolio allocation', 'Investment timeline', 'Dividend strategies'];\n  }\n  else if (message.includes('risk')) {\n    response = `Let me analyze your risk profile and portfolio risk metrics:\n\n**Risk Assessment Factors:**\n• **Volatility**: How much your portfolio value fluctuates\n• **Concentration Risk**: Over-exposure to single stocks/sectors\n• **Market Risk**: Sensitivity to overall market movements\n• **Liquidity Risk**: Ability to sell positions quickly\n\n**Risk Management Tools:**\n• Diversification across asset classes\n• Hedging strategies (options, inverse ETFs)\n• Regular rebalancing\n• Position sizing limits\n\n**Your Risk Tolerance:**\nBased on your portfolio, you appear to have a moderate risk tolerance. Consider:\n- Maintaining 60-70% stocks, 30-40% bonds\n- International exposure for diversification\n- Some alternative investments (REITs, commodities)\n\nWould you like me to analyze specific risk metrics for your current holdings?`;\n    \n    suggestions = ['Portfolio beta', 'Volatility analysis', 'Correlation matrix', 'Risk-adjusted returns'];\n  }\n  else {\n    response = `I'm your AI investment assistant, ready to help with:\n\n**Portfolio Management:**\n• Performance analysis and optimization\n• Risk assessment and management\n• Rebalancing recommendations\n• Asset allocation strategies\n\n**Market Intelligence:**\n• Daily market analysis and trends\n• Sector rotation insights\n• Economic indicator interpretation\n• Volatility and sentiment analysis\n\n**Stock Research:**\n• Fundamental and technical analysis\n• Earnings and news impact\n• Analyst ratings compilation\n• Price target analysis\n\n**Investment Education:**\n• Strategy explanations\n• Risk management principles\n• Market mechanics\n• Investment best practices\n\nWhat specific area would you like to explore? I can provide detailed analysis and actionable recommendations.`;\n    \n    suggestions = ['Portfolio review', 'Market analysis', 'Stock research', 'Investment strategies'];\n  }\n\n  return {\n    content: response,\n    suggestions: suggestions,\n    context: {\n      hasPortfolioData: !!portfolioContext,\n      portfolioValue: portfolioContext?.totalValue,\n      analysisType: message.includes('portfolio') ? 'portfolio' : \n                   message.includes('market') ? 'market' : \n                   message.includes('stock') ? 'stock' : 'general'\n    }\n  };\n};\n\n// Send message to AI assistant\nrouter.post('/chat', async (req, res) => {\n  const userId = req.user.sub;\n  const { message, context = {} } = req.body;\n\n  if (!message || !message.trim()) {\n    return res.status(400).json({\n      success: false,\n      error: 'Message is required'\n    });\n  }\n\n  try {\n    // Add user message to history\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: message.trim(),\n      context: context\n    };\n    addToHistory(userId, userMessage);\n\n    // Generate AI response\n    const aiResponse = await generateAIResponse(message, userId, context);\n    \n    // Add AI response to history\n    const assistantMessage = {\n      id: Date.now() + 1,\n      type: 'assistant',\n      content: aiResponse.content,\n      suggestions: aiResponse.suggestions,\n      context: aiResponse.context\n    };\n    addToHistory(userId, assistantMessage);\n\n    res.json({\n      success: true,\n      message: assistantMessage,\n      conversationId: userId // In production, use proper conversation IDs\n    });\n  } catch (error) {\n    console.error('Error processing AI chat:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process message'\n    });\n  }\n});\n\n// Get conversation history\nrouter.get('/history', async (req, res) => {\n  const userId = req.user.sub;\n  const { limit = 20 } = req.query;\n\n  try {\n    const history = getUserHistory(userId);\n    const recentHistory = history.slice(-parseInt(limit));\n\n    res.json({\n      success: true,\n      history: recentHistory,\n      total: history.length\n    });\n  } catch (error) {\n    console.error('Error fetching conversation history:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch conversation history'\n    });\n  }\n});\n\n// Clear conversation history\nrouter.delete('/history', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    conversationHistory.delete(userId);\n    \n    res.json({\n      success: true,\n      message: 'Conversation history cleared'\n    });\n  } catch (error) {\n    console.error('Error clearing conversation history:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to clear conversation history'\n    });\n  }\n});\n\n// Get AI assistant configuration\nrouter.get('/config', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    let preferences = {\n      ai_voice_enabled: false,\n      ai_digital_human_enabled: false,\n      ai_auto_voice_response: false,\n      ai_language: 'en'\n    };\n\n    // Try to get user preferences from database\n    try {\n      const userPrefs = await query(`\n        SELECT \n          ai_voice_enabled,\n          ai_digital_human_enabled,\n          ai_auto_voice_response,\n          ai_language\n        FROM users \n        WHERE id = $1\n      `, [userId]);\n\n      if (userPrefs.rows.length > 0) {\n        preferences = userPrefs.rows[0];\n      }\n    } catch (dbError) {\n      console.log('Database query failed for AI config, using defaults:', dbError.message);\n      // Continue with default preferences\n    }\n\n    res.json({\n      success: true,\n      config: {\n        ...AI_CONFIG,\n        userPreferences: preferences,\n        note: 'AI Assistant configuration loaded successfully'\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching AI config:', error);\n    res.json({\n      success: true,\n      config: {\n        ...AI_CONFIG,\n        userPreferences: {\n          ai_voice_enabled: false,\n          ai_digital_human_enabled: false,\n          ai_auto_voice_response: false,\n          ai_language: 'en'\n        },\n        note: 'Using default AI configuration - database connectivity issue'\n      }\n    });\n  }\n});\n\n// Update AI assistant preferences\nrouter.put('/preferences', async (req, res) => {\n  const userId = req.user.sub;\n  const { \n    voiceEnabled, \n    digitalHumanEnabled, \n    autoVoiceResponse, \n    language = 'en' \n  } = req.body;\n\n  try {\n    // Update user preferences in database\n    await query(`\n      UPDATE users \n      SET \n        ai_voice_enabled = COALESCE($2, ai_voice_enabled),\n        ai_digital_human_enabled = COALESCE($3, ai_digital_human_enabled),\n        ai_auto_voice_response = COALESCE($4, ai_auto_voice_response),\n        ai_language = COALESCE($5, ai_language),\n        updated_at = NOW()\n      WHERE id = $1\n    `, [userId, voiceEnabled, digitalHumanEnabled, autoVoiceResponse, language]);\n\n    res.json({\n      success: true,\n      message: 'AI assistant preferences updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating AI preferences:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update AI preferences'\n    });\n  }\n});\n\n// Get market context for AI responses\nrouter.get('/market-context', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    // Fetch real market data from database\n    console.log('📊 AI Assistant: Fetching real market context data for user:', userId);\n    \n    // Get major indices data\n    const indicesQuery = await query(`\n      SELECT symbol, current_price, change_percent, volume\n      FROM stocks \n      WHERE symbol IN ('SPY', 'QQQ', 'DIA')\n      ORDER BY symbol\n    `);\n    \n    // Get sector performance data\n    const sectorsQuery = await query(`\n      SELECT sector, AVG(change_percent) as avg_change, COUNT(*) as stock_count\n      FROM stocks \n      WHERE sector IS NOT NULL \n      GROUP BY sector \n      ORDER BY avg_change DESC\n      LIMIT 10\n    `);\n    \n    // Get market sentiment indicators\n    const sentimentQuery = await query(`\n      SELECT value, indicator_name\n      FROM market_indicators \n      WHERE indicator_name IN ('VIX', 'FEAR_GREED_INDEX', 'PUT_CALL_RATIO')\n      AND date = CURRENT_DATE\n    `);\n    \n    // Process indices data\n    const indices = {};\n    indicesQuery.rows.forEach(row => {\n      const indexName = row.symbol === 'SPY' ? 'sp500' : \n                       row.symbol === 'QQQ' ? 'nasdaq' : 'dow';\n      indices[indexName] = {\n        value: parseFloat(row.current_price || 0),\n        change: parseFloat(row.change_percent || 0),\n        volume: parseFloat(row.volume || 0) > 1000000 ? 'high' : 'normal'\n      };\n    });\n    \n    // Process sector data\n    const sectors = {};\n    sectorsQuery.rows.forEach(row => {\n      const sectorName = row.sector.toLowerCase().replace(/\\s+/g, '');\n      sectors[sectorName] = {\n        performance: parseFloat(row.avg_change || 0),\n        sentiment: parseFloat(row.avg_change || 0) > 1 ? 'positive' : \n                  parseFloat(row.avg_change || 0) > -1 ? 'neutral' : 'negative'\n      };\n    });\n    \n    // Process sentiment indicators\n    const sentimentData = {};\n    sentimentQuery.rows.forEach(row => {\n      if (row.indicator_name === 'VIX') sentimentData.vix = parseFloat(row.value || 20);\n      if (row.indicator_name === 'FEAR_GREED_INDEX') sentimentData.fearGreedIndex = parseFloat(row.value || 50);\n      if (row.indicator_name === 'PUT_CALL_RATIO') sentimentData.putCallRatio = parseFloat(row.value || 1.0);\n    });\n    \n    const marketContext = {\n      indices: Object.keys(indices).length > 0 ? indices : {\n        note: 'Market indices data not available - database query returned no results'\n      },\n      sectors: Object.keys(sectors).length > 0 ? sectors : {\n        note: 'Sector performance data not available - database query returned no results'\n      },\n      volatility: {\n        vix: sentimentData.vix || null,\n        level: sentimentData.vix ? (sentimentData.vix > 25 ? 'high' : sentimentData.vix > 15 ? 'moderate' : 'low') : 'unknown',\n        trend: 'data_required'\n      },\n      sentiment: {\n        overall: sentimentData.fearGreedIndex ? \n          (sentimentData.fearGreedIndex > 70 ? 'greedy' : \n           sentimentData.fearGreedIndex > 30 ? 'neutral' : 'fearful') : 'unknown',\n        fearGreedIndex: sentimentData.fearGreedIndex || null,\n        putCallRatio: sentimentData.putCallRatio || null\n      },\n      dataSource: 'real_database',\n      queriesExecuted: 3\n    };\n\n    res.json({\n      success: true,\n      marketContext: marketContext,\n      lastUpdated: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching market context:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market context'\n    });\n  }\n});\n\n// Voice chat endpoint (for future implementation)\nrouter.post('/voice', async (req, res) => {\n  const userId = req.user.sub;\n  const { audioData, format = 'webm' } = req.body;\n\n  try {\n    // This would integrate with speech-to-text and text-to-speech services\n    // Check if voice chat is enabled\n    if (!AI_CONFIG.features.voiceChat) {\n      return res.status(503).json({\n        success: false,\n        error: 'Voice chat feature is not currently enabled',\n        availableFeatures: ['text chat', 'portfolio analysis', 'market insights']\n      });\n    }\n    \n    // Voice chat processing would integrate with speech-to-text and text-to-speech services\n    res.json({\n      success: false,\n      error: 'Voice chat integration requires additional setup',\n      message: 'Please use text chat for now. Voice features require AWS Transcribe and Polly configuration.',\n      recommendedAction: 'Continue with text-based conversation'\n    });\n  } catch (error) {\n    console.error('Error processing voice chat:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process voice input'\n    });\n  }\n});\n\n// Digital human endpoint (for future NVIDIA integration)\nrouter.post('/digital-human', async (req, res) => {\n  const userId = req.user.sub;\n  const { message, avatar = 'default' } = req.body;\n\n  try {\n    // This would integrate with NVIDIA Digital Human API\n    // Check if digital human is enabled\n    if (!AI_CONFIG.features.digitalHuman) {\n      return res.status(503).json({\n        success: false,\n        error: 'Digital human feature is not currently enabled',\n        message: 'This feature requires NVIDIA Omniverse integration',\n        availableFeatures: ['text chat', 'portfolio analysis', 'market insights']\n      });\n    }\n    \n    // Digital human integration would require NVIDIA Omniverse or similar platform\n    res.json({\n      success: false,\n      error: 'Digital human integration requires additional infrastructure',\n      message: 'This feature requires NVIDIA Digital Human setup and GPU infrastructure.',\n      recommendedAction: 'Continue with standard text-based AI assistant'\n    });\n  } catch (error) {\n    console.error('Error processing digital human request:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process digital human request'\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}