{"version":3,"names":["cov_auk92v9qg","actualCoverage","s","require","config","databaseManager","Pool","SecretsManagerClient","GetSecretValueCommand","getTimeout","withDatabaseTimeout","ConnectionRetry","pool","dbInitialized","dbConfig","connectionRetry","maxRetries","initialDelay","maxDelay","backoffMultiplier","secretsManager","region","b","process","env","WEBAPP_AWS_REGION","AWS_REGION","getDbConfig","f","console","log","configStart","Date","now","DB_HOST","DB_USER","DB_PASSWORD","host","DB_ENDPOINT","port","parseInt","DB_PORT","database","DB_NAME","DB_DATABASE","user","DB_USERNAME","password","ssl","DB_SSL","rejectUnauthorized","max","DB_POOL_MAX","idleTimeoutMillis","DB_POOL_IDLE_TIMEOUT","connectionTimeoutMillis","DB_CONNECT_TIMEOUT","DB_SECRET_ARN","secretArn","SecretsManagerDiagnostic","diagnostic","diagnosis","diagnoseSecret","success","Error","error","secret","secretStart","method","requiredFields","missingFields","filter","field","length","Object","keys","join","dbname","username","message","code","stack","split","slice","calculateOptimalPoolConfig","isLambda","AWS_LAMBDA_FUNCTION_NAME","nodeEnv","NODE_ENV","isProduction","lambdaConcurrency","LAMBDA_CONCURRENT_EXECUTIONS","expectedUsers","EXPECTED_CONCURRENT_USERS","poolConfig","baseConnections","Math","min","maxConnections","floor","acquireTimeoutMillis","createTimeoutMillis","ceil","DB_POOL_MIN","initializeDatabase","initStart","dynamicPoolConfig","destroyTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","keepAlive","keepAliveInitialDelayMillis","allowExitOnIdle","propagateCreateError","lazy","evictionRunIntervalMillis","numTestsPerEvictionRun","softIdleTimeoutMillis","testOnBorrow","testOnReturn","testWhileIdle","poolStart","on","err","updatePoolMetrics","connectionTest","execute","attempt","testStart","client","Promise","race","connect","_","reject","setTimeout","queryStart","query","release","connected","duration","attempts","totalDuration","startPoolMonitoring","errorDuration","detail","hint","monitorInterval","setInterval","status","getPoolStatus","metrics","recommendations","utilizationPercent","currentStats","totalCount","waitingCount","reason","warn","errorRate","round","clearInterval","getPool","poolMetrics","acquireCount","releaseCount","peakConnections","averageAcquireTime","connectionErrors","lastAcquireTime","startTime","recentAcquires","Array","fill","recentReleases","acquireIndex","releaseIndex","adaptiveRecommendations","suggestedMin","suggestedMax","lastRecommendation","event","generateAdaptiveRecommendations","fiveMinutesAgo","time","avgAcquiresPerMinute","avgReleasesPerMinute","currentUtilization","options","utilization","acquiresPerMinute","releasesPerMinute","abs","initialized","uptimeSeconds","idleCount","acquiresPerSecond","text","params","timeoutMs","queryId","random","toString","substr","substring","result","rows","performanceMonitor","operation","trim","toUpperCase","table","extractTableName","recordDatabaseOperation","perfError","queryDuration","trackDbOperation","severity","position","internalPosition","internalQuery","where","schema","column","dataType","constraint","transaction","callback","healthCheck","db","timestamp","version","note","includes","recovery","tableExists","tableName","exists","tablesExist","tableNames","existsMap","forEach","row","table_name","fallbackMap","name","REQUIRED_SCHEMA","core","portfolio","market_data","analytics","optional","validateDatabaseSchema","requestId","validationStart","allTables","tableCheckStart","tableExistenceMap","tableCheckDuration","validation","required","existing","missing","totalRequired","totalExisting","totalMissing","schemaHealthPercentage","criticalMissing","push","map","t","validationDuration","overall","healthPercentage","optionalExisting","optionalMissing","categories","impact","recommendation","affectedFeatures","getCriticalFeatureImpact","entries","category","info","missingTables","existingTables","getCategoryImpact","valid","toISOString","errorStack","impacts","some","safeQuery","requiredTables","closeDatabase","end","warmConnections","warmStart","warmPromises","i","all","initForLambda","lambdaInitStart","sql","cleanSql","toLowerCase","patterns","pattern","match","resetDatabaseState","module","exports"],"sources":["database.js"],"sourcesContent":["// Load environment variables first\nrequire('dotenv').config();\n\n// CIRCUIT BREAKER FIX: Use new database connection manager with integrated circuit breaker\nconst databaseManager = require('./databaseConnectionManager');\n\n// Legacy imports for compatibility (will be removed in future versions)\nconst { Pool } = require('pg');\nconst { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\nconst { getTimeout, withDatabaseTimeout } = require('./timeoutManager');\nconst ConnectionRetry = require('./connectionRetry');\n\n// Legacy global state (for backward compatibility)\nlet pool = null;\nlet dbInitialized = false;\nlet dbConfig = null;\n\n// Initialize connection retry utility (legacy)\nconst connectionRetry = new ConnectionRetry({\n    maxRetries: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    backoffMultiplier: 2\n});\n\n// Configure AWS SDK for Secrets Manager\nconst secretsManager = new SecretsManagerClient({\n    region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n});\n\n/**\n * Get database configuration from environment variables or AWS Secrets Manager with enhanced error handling\n */\nasync function getDbConfig() {\n    if (dbConfig) {\n        console.log('‚úÖ Using cached database config');\n        return dbConfig;\n    }\n\n    const configStart = Date.now();\n    try {\n        // First try direct environment variables (full set)\n        if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n            console.log('üîß Using complete direct database environment variables');\n            \n            dbConfig = {\n                host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n                port: parseInt(process.env.DB_PORT) || 5432,\n                database: process.env.DB_NAME || process.env.DB_DATABASE || 'stocks',\n                user: process.env.DB_USER || process.env.DB_USERNAME,\n                password: process.env.DB_PASSWORD,\n                ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,\n                max: parseInt(process.env.DB_POOL_MAX) || 3,\n                idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n                connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000\n            };\n\n            console.log('‚úÖ Database config loaded from complete environment variables');\n            console.log(`   üîí SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n            console.log(`   üèä Pool Max: ${dbConfig.max}`);\n            console.log(`   üèóÔ∏è Host: ${dbConfig.host}:${dbConfig.port}`);\n            console.log(`   üìö Database: ${dbConfig.database}`);\n            console.log(`   üë§ User: ${dbConfig.user}`);\n\n            return dbConfig;\n        }\n\n        // Hybrid approach: use environment variables but get password from secret\n        if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_SECRET_ARN) {\n            console.log('üîß Using hybrid approach: env vars + secret for password');\n            \n            const secretArn = process.env.DB_SECRET_ARN;\n            console.log(`üîë Getting password from Secrets Manager: ${secretArn}`);\n            \n            // Use diagnostic tool to get password from secret\n            const SecretsManagerDiagnostic = require('./secretsManagerDiagnostic');\n            const diagnostic = new SecretsManagerDiagnostic();\n            \n            const diagnosis = await diagnostic.diagnoseSecret(secretArn);\n            if (!diagnosis.success) {\n                throw new Error(`Failed to get password from Secrets Manager: ${diagnosis.error}`);\n            }\n            \n            const secret = diagnosis.config;\n            \n            dbConfig = {\n                host: process.env.DB_HOST || process.env.DB_ENDPOINT,\n                port: parseInt(process.env.DB_PORT) || 5432,\n                database: process.env.DB_NAME || process.env.DB_DATABASE || 'stocks',\n                user: process.env.DB_USER || process.env.DB_USERNAME,\n                password: secret.password,  // Password from secret\n                ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,\n                max: parseInt(process.env.DB_POOL_MAX) || 3,\n                idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n                connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000\n            };\n\n            console.log('‚úÖ Database config loaded from hybrid env vars + secret');\n            console.log(`   üîí SSL: ${dbConfig.ssl ? 'enabled' : 'disabled'}`);\n            console.log(`   üèä Pool Max: ${dbConfig.max}`);\n            console.log(`   üèóÔ∏è Host: ${dbConfig.host}:${dbConfig.port}`);\n            console.log(`   üìö Database: ${dbConfig.database}`);\n            console.log(`   üë§ User: ${dbConfig.user}`);\n\n            return dbConfig;\n        }\n\n        // Fallback to Secrets Manager if environment variables not available\n        const secretArn = process.env.DB_SECRET_ARN;\n        if (!secretArn) {\n            throw new Error(`Database configuration incomplete. Available: DB_HOST=${!!process.env.DB_HOST}, DB_USER=${!!process.env.DB_USER}, DB_PASSWORD=${!!process.env.DB_PASSWORD}, DB_SECRET_ARN=${!!process.env.DB_SECRET_ARN}. Need either complete env vars or DB_SECRET_ARN.`);\n        }\n\n        console.log(`üîë Getting DB credentials from Secrets Manager: ${secretArn}`);\n        const secretStart = Date.now();\n        \n        // Use diagnostic tool to properly handle secret retrieval\n        const SecretsManagerDiagnostic = require('./secretsManagerDiagnostic');\n        const diagnostic = new SecretsManagerDiagnostic();\n        \n        const diagnosis = await diagnostic.diagnoseSecret(secretArn);\n        console.log(`‚úÖ Secrets Manager responded in ${Date.now() - secretStart}ms using method: ${diagnosis.method}`);\n        \n        if (!diagnosis.success) {\n            throw new Error(`Secrets Manager diagnosis failed: ${diagnosis.error}`);\n        }\n        \n        const secret = diagnosis.config;\n        \n        // Validate required fields\n        const requiredFields = ['host', 'username', 'password', 'dbname'];\n        const missingFields = requiredFields.filter(field => !secret[field]);\n        \n        if (missingFields.length > 0) {\n            console.error('‚ùå Missing required database fields:', missingFields);\n            console.error('‚ùå Available fields:', Object.keys(secret));\n            throw new Error(`Missing required database configuration fields: ${missingFields.join(', ')}`);\n        }\n\n        dbConfig = {\n            host: secret.host || process.env.DB_ENDPOINT,\n            port: parseInt(secret.port) || 5432,\n            database: secret.dbname || 'stocks',\n            user: secret.username,\n            password: secret.password,\n            ssl: false, // Match working ECS task configuration - no SSL for RDS in public subnets\n            max: parseInt(process.env.DB_POOL_MAX) || 3,\n            idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE_TIMEOUT) || 30000,\n            connectionTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000\n        };\n\n        console.log('‚úÖ Database config loaded from Secrets Manager successfully');\n        console.log(`   üîí SSL: disabled (matching working ECS task configuration)`);\n        console.log(`   üèä Pool Max: ${dbConfig.max}`);\n        console.log(`   üèóÔ∏è Host: ${dbConfig.host}:${dbConfig.port}`);\n        console.log(`   üìö Database: ${dbConfig.database}`);\n        console.log(`   üë§ User: ${dbConfig.user}`);\n\n        return dbConfig;\n    } catch (error) {\n        console.error('‚ùå Failed to get database config:', error.message);\n        console.error('‚ùå Error details:', {\n            code: error.code,\n            stack: error.stack?.split('\\n').slice(0, 3).join('\\n')\n        });\n        \n        // Provide helpful troubleshooting info\n        console.error('‚ùå Database configuration troubleshooting:');\n        console.error('   Set DB_HOST, DB_USER, DB_PASSWORD environment variables');\n        console.error('   Current environment variables:', {\n            DB_HOST: !!process.env.DB_HOST,\n            DB_USER: !!process.env.DB_USER,\n            DB_PASSWORD: !!process.env.DB_PASSWORD,\n            DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n            DB_ENDPOINT: !!process.env.DB_ENDPOINT\n        });\n        \n        throw error;\n    }\n}\n\n/**\n * Calculate optimal pool configuration based on environment and expected load\n */\nfunction calculateOptimalPoolConfig() {\n    // Environment detection\n    const isLambda = !!process.env.AWS_LAMBDA_FUNCTION_NAME;\n    const nodeEnv = process.env.NODE_ENV || 'development';\n    const isProduction = nodeEnv === 'production';\n    \n    // Lambda concurrent execution limits and expected load\n    const lambdaConcurrency = parseInt(process.env.LAMBDA_CONCURRENT_EXECUTIONS) || 10;\n    const expectedUsers = parseInt(process.env.EXPECTED_CONCURRENT_USERS) || 25;\n    \n    let poolConfig;\n    \n    if (isLambda) {\n        // Lambda-specific pool configuration\n        // Each Lambda execution needs 1-2 connections depending on the request\n        const baseConnections = Math.min(lambdaConcurrency, 5); // Base connections\n        const maxConnections = Math.min(lambdaConcurrency * 2, 20); // Max for bursts\n        \n        poolConfig = {\n            min: Math.max(1, Math.floor(baseConnections / 2)), // Keep some connections alive\n            max: maxConnections,\n            // Aggressive acquisition for Lambda\n            acquireTimeoutMillis: 8000,\n            createTimeoutMillis: 15000,\n        };\n        \n        console.log(`üèä Lambda pool config: ${poolConfig.min}-${poolConfig.max} connections for ${lambdaConcurrency} concurrent executions`);\n        \n    } else {\n        // Local development or container-based deployment\n        const baseConnections = isProduction ? \n            Math.min(Math.ceil(expectedUsers / 3), 15) : // Production: assume 3 users per connection\n            3; // Development: small pool\n            \n        const maxConnections = isProduction ?\n            Math.min(expectedUsers, 50) : // Production: scale with users\n            5; // Development: limited\n            \n        poolConfig = {\n            min: Math.max(1, Math.floor(baseConnections / 2)),\n            max: maxConnections,\n            acquireTimeoutMillis: 10000,\n            createTimeoutMillis: 20000,\n        };\n        \n        console.log(`üèä ${isProduction ? 'Production' : 'Development'} pool config: ${poolConfig.min}-${poolConfig.max} connections for ${expectedUsers} expected users`);\n    }\n    \n    // Override from environment variables if provided\n    if (process.env.DB_POOL_MIN) {\n        poolConfig.min = parseInt(process.env.DB_POOL_MIN);\n    }\n    if (process.env.DB_POOL_MAX) {\n        poolConfig.max = parseInt(process.env.DB_POOL_MAX);\n    }\n    \n    // Validate configuration\n    poolConfig.min = Math.max(1, poolConfig.min);\n    poolConfig.max = Math.max(poolConfig.min, poolConfig.max);\n    poolConfig.max = Math.min(poolConfig.max, 100); // Hard limit for safety\n    \n    console.log(`üéØ Final pool configuration: min=${poolConfig.min}, max=${poolConfig.max}`);\n    \n    return poolConfig;\n}\n\n/**\n * Initialize database connection pool\n */\nasync function initializeDatabase() {\n    if (dbInitialized && pool) {\n        console.log('‚úÖ Database already initialized, returning existing pool');\n        return pool;\n    }\n\n    const initStart = Date.now();\n    try {\n        console.log('üîÑ Initializing database connection pool...');\n        \n        const configStart = Date.now();\n        const config = await getDbConfig();\n        console.log(`‚úÖ Database config retrieved in ${Date.now() - configStart}ms`);\n        \n        // Dynamic connection pool sizing based on Lambda concurrency\n        const dynamicPoolConfig = calculateOptimalPoolConfig();\n        \n        const poolConfig = {\n            ...config,\n            ...dynamicPoolConfig,\n            idleTimeoutMillis: 30000, // Longer timeout for Lambda\n            connectionTimeoutMillis: 15000, // Longer timeout for cold starts\n            acquireTimeoutMillis: 10000, // Longer acquire timeout for cold starts\n            createTimeoutMillis: 15000, // Longer create timeout for cold starts\n            destroyTimeoutMillis: 5000, // Keep destroy timeout short\n            createRetryIntervalMillis: 1000, // Slower retry for stability\n            reapIntervalMillis: 5000, // Less frequent cleanup for Lambda\n            keepAlive: true, // Keep connections alive\n            keepAliveInitialDelayMillis: 10000,\n            // Advanced pool management\n            allowExitOnIdle: false, // Don't exit when idle\n            acquireTimeoutMillis: 8000, // Reasonable timeout for acquiring connections\n            propagateCreateError: false, // Don't propagate connection creation errors immediately\n            // Lazy initialization and connection optimization\n            lazy: true, // Enable lazy connection creation\n            evictionRunIntervalMillis: 30000, // Run eviction every 30 seconds\n            numTestsPerEvictionRun: 3, // Test 3 connections per eviction run\n            softIdleTimeoutMillis: 60000, // Soft idle timeout (1 minute)\n            testOnBorrow: true, // Test connections when borrowing\n            testOnReturn: false, // Don't test on return for performance\n            testWhileIdle: true // Test idle connections\n        };\n        \n        console.log(`üèä Creating pool with config:`, {\n            host: poolConfig.host,\n            port: poolConfig.port,\n            database: poolConfig.database,\n            max: poolConfig.max,\n            connectionTimeoutMillis: poolConfig.connectionTimeoutMillis\n        });\n        \n        const poolStart = Date.now();\n        pool = new Pool(poolConfig);\n        console.log(`‚úÖ Pool created in ${Date.now() - poolStart}ms`);\n\n        // Add pool event listeners for monitoring\n        pool.on('connect', () => {\n            console.log('üîó Pool: New client connected');\n        });\n\n        pool.on('acquire', () => {\n            console.log('üì§ Pool: Client acquired from pool');\n        });\n\n        pool.on('remove', () => {\n            console.log('üóëÔ∏è Pool: Client removed from pool');\n        });\n\n        pool.on('error', (err) => {\n            console.error('üí• Pool error:', err.message);\n        });\n\n        // Enhanced pool monitoring for concurrent user scaling\n        pool.on('acquire', () => {\n            console.log('üì§ Pool: Client acquired from pool');\n            updatePoolMetrics('acquire');\n        });\n\n        pool.on('release', () => {\n            console.log('üì• Pool: Client released to pool');\n            updatePoolMetrics('release');\n        });\n\n        // Test connection with retry logic\n        console.log('üß™ Testing database connection with retry logic...');\n        \n        const connectionTest = await connectionRetry.execute(async (attempt) => {\n            const testStart = Date.now();\n            \n            const client = await Promise.race([\n                pool.connect(),\n                new Promise((_, reject) => \n                    setTimeout(() => reject(new Error('Connection test timeout after 15 seconds')), 15000)\n                )\n            ]);\n            \n            console.log(`‚úÖ Client connected in ${Date.now() - testStart}ms (attempt ${attempt + 1})`);\n            \n            // Use the simplest possible query\n            const queryStart = Date.now();\n            await client.query('SELECT 1 as test');\n            console.log(`‚úÖ Test query completed in ${Date.now() - queryStart}ms`);\n            \n            client.release();\n            return { connected: true, duration: Date.now() - testStart };\n        }, 'database connection test');\n        \n        if (!connectionTest.success) {\n            throw new Error(`Database connection test failed: ${connectionTest.error}`);\n        }\n        \n        console.log(`üéØ Database connection test completed successfully in ${connectionTest.attempts} attempts`);\n        \n        const totalDuration = Date.now() - initStart;\n        console.log(`‚úÖ Database fully initialized in ${totalDuration}ms`);\n\n        dbInitialized = true;\n        \n        // Start pool monitoring for concurrent user scaling\n        startPoolMonitoring();\n        \n        return pool;\n    } catch (error) {\n        const errorDuration = Date.now() - initStart;\n        console.error(`‚ùå Database initialization failed after ${errorDuration}ms:`, {\n            message: error.message,\n            code: error.code,\n            detail: error.detail,\n            hint: error.hint\n        });\n        \n        // Reset state on failure\n        pool = null;\n        dbInitialized = false;\n        dbConfig = null;\n        \n        throw error;\n    }\n}\n\n/**\n * Start pool monitoring for concurrent user scaling\n */\nfunction startPoolMonitoring() {\n    if (!pool) return;\n    \n    console.log('üìä Starting pool monitoring for concurrent user scaling...');\n    \n    // Pool monitoring only in development environment to avoid Lambda memory leaks\n    if (process.env.NODE_ENV === 'development') {\n        const monitorInterval = setInterval(() => {\n            if (!pool || !dbInitialized) return;\n            \n            const status = getPoolStatus();\n            const { metrics, recommendations } = status;\n            \n            // Log status if utilization is high or recommendations available\n            if (metrics.utilizationPercent > 70 || recommendations.currentStats) {\n                console.log(`üìä Pool Status: ${status.totalCount}/${status.max} connections (${metrics.utilizationPercent}% util), ${status.waitingCount} waiting`);\n                \n                if (recommendations.reason !== 'Current configuration optimal') {\n                    console.log(`üí° ${recommendations.reason}`);\n                }\n            }\n            \n            // Warn on high utilization\n            if (metrics.utilizationPercent > 90) {\n                console.warn(`‚ö†Ô∏è Pool utilization very high (${metrics.utilizationPercent}%) - consider scaling up`);\n            }\n            \n            // Warn on connection queue buildup\n            if (status.waitingCount > 5) {\n                console.warn(`‚ö†Ô∏è ${status.waitingCount} connections waiting - pool may be undersized`);\n            }\n            \n            // Warn on high error rate\n            if (metrics.errorRate > 0.1) {\n                console.warn(`‚ö†Ô∏è High connection error rate: ${Math.round(metrics.errorRate * 100)}%`);\n            }\n            \n        }, 30000); // Every 30 seconds\n        \n        console.log('‚úÖ Pool monitoring started (development mode)');\n        \n        // Clear interval on process exit to prevent memory leaks\n        process.on('exit', () => clearInterval(monitorInterval));\n        process.on('SIGINT', () => clearInterval(monitorInterval));\n        process.on('SIGTERM', () => clearInterval(monitorInterval));\n    }\n}\n\n/**\n * Get database connection pool\n */\nfunction getPool() {\n    if (!pool || !dbInitialized) {\n        throw new Error('Database not initialized. Call initializeDatabase() first.');\n    }\n    return pool;\n}\n\n// Pool metrics for monitoring and adaptive scaling\nlet poolMetrics = {\n    acquireCount: 0,\n    releaseCount: 0,\n    peakConnections: 0,\n    averageAcquireTime: 0,\n    connectionErrors: 0,\n    lastAcquireTime: 0,\n    startTime: Date.now(),\n    // Adaptive scaling metrics - fixed size arrays to prevent memory leaks\n    recentAcquires: new Array(100).fill(0), // Circular buffer for last 100 acquires\n    recentReleases: new Array(100).fill(0), // Circular buffer for last 100 releases\n    acquireIndex: 0,\n    releaseIndex: 0,\n    adaptiveRecommendations: {\n        suggestedMin: null,\n        suggestedMax: null,\n        lastRecommendation: 0\n    }\n};\n\n/**\n * Update pool metrics for monitoring and adaptive scaling\n */\nfunction updatePoolMetrics(event) {\n    const now = Date.now();\n    \n    switch (event) {\n        case 'acquire':\n            poolMetrics.acquireCount++;\n            poolMetrics.lastAcquireTime = now;\n            \n            // Use circular buffer to prevent memory leaks\n            poolMetrics.recentAcquires[poolMetrics.acquireIndex] = now;\n            poolMetrics.acquireIndex = (poolMetrics.acquireIndex + 1) % poolMetrics.recentAcquires.length;\n            \n            // Track peak connections\n            if (pool && pool.totalCount > poolMetrics.peakConnections) {\n                poolMetrics.peakConnections = pool.totalCount;\n            }\n            break;\n            \n        case 'release':\n            poolMetrics.releaseCount++;\n            \n            // Use circular buffer to prevent memory leaks\n            poolMetrics.recentReleases[poolMetrics.releaseIndex] = now;\n            poolMetrics.releaseIndex = (poolMetrics.releaseIndex + 1) % poolMetrics.recentReleases.length;\n            break;\n            \n        case 'error':\n            poolMetrics.connectionErrors++;\n            break;\n    }\n    \n    // Generate adaptive recommendations every 2 minutes\n    if (now - poolMetrics.adaptiveRecommendations.lastRecommendation > 120000) {\n        generateAdaptiveRecommendations();\n        poolMetrics.adaptiveRecommendations.lastRecommendation = now;\n    }\n}\n\n/**\n * Generate adaptive pool sizing recommendations based on usage patterns\n */\nfunction generateAdaptiveRecommendations() {\n    if (!pool || poolMetrics.recentAcquires.length < 3) {\n        return; // Not enough data\n    }\n    \n    const now = Date.now();\n    const fiveMinutesAgo = now - 300000;\n    const recentAcquires = poolMetrics.recentAcquires.filter(time => time > fiveMinutesAgo);\n    const recentReleases = poolMetrics.recentReleases.filter(time => time > fiveMinutesAgo);\n    \n    // Calculate concurrent connection usage pattern\n    const avgAcquiresPerMinute = recentAcquires.length / 5;\n    const avgReleasesPerMinute = recentReleases.length / 5;\n    const currentUtilization = pool.totalCount / pool.options.max;\n    \n    let recommendations = {\n        suggestedMin: pool.options.min,\n        suggestedMax: pool.options.max,\n        reason: 'Current configuration optimal'\n    };\n    \n    // High utilization - recommend scaling up\n    if (currentUtilization > 0.8 && avgAcquiresPerMinute > avgReleasesPerMinute) {\n        recommendations.suggestedMax = Math.min(pool.options.max * 1.5, 50);\n        recommendations.suggestedMin = Math.min(pool.options.min + 2, recommendations.suggestedMax / 2);\n        recommendations.reason = 'High utilization detected - recommend scaling up';\n    }\n    \n    // Low utilization - recommend scaling down (but conservatively)\n    else if (currentUtilization < 0.3 && pool.options.max > 5) {\n        recommendations.suggestedMax = Math.max(pool.options.max * 0.8, 5);\n        recommendations.suggestedMin = Math.max(pool.options.min - 1, 1);\n        recommendations.reason = 'Low utilization detected - consider scaling down';\n    }\n    \n    // High error rate - recommend more conservative settings\n    else if (poolMetrics.connectionErrors > 5) {\n        recommendations.suggestedMax = Math.max(pool.options.max - 2, 3);\n        recommendations.reason = 'High error rate - recommend more conservative pool size';\n    }\n    \n    poolMetrics.adaptiveRecommendations = {\n        ...recommendations,\n        lastRecommendation: Date.now(),\n        currentStats: {\n            utilization: currentUtilization,\n            acquiresPerMinute: avgAcquiresPerMinute,\n            releasesPerMinute: avgReleasesPerMinute,\n            errorRate: poolMetrics.connectionErrors / Math.max(poolMetrics.acquireCount, 1)\n        }\n    };\n    \n    // Log recommendations if significant change suggested\n    if (Math.abs(recommendations.suggestedMax - pool.options.max) > 2) {\n        console.log(`üéØ Pool scaling recommendation: ${pool.options.min}-${pool.options.max} ‚Üí ${recommendations.suggestedMin}-${recommendations.suggestedMax} (${recommendations.reason})`);\n    }\n}\n\n/**\n * Get detailed pool status for monitoring\n */\nfunction getPoolStatus() {\n    if (!pool) {\n        return {\n            initialized: false,\n            error: 'Pool not initialized'\n        };\n    }\n    \n    const now = Date.now();\n    const uptimeSeconds = Math.floor((now - poolMetrics.startTime) / 1000);\n    \n    return {\n        initialized: dbInitialized,\n        // Current pool state\n        totalCount: pool.totalCount,\n        idleCount: pool.idleCount,\n        waitingCount: pool.waitingCount,\n        min: pool.options.min,\n        max: pool.options.max,\n        connectionTimeoutMillis: pool.options.connectionTimeoutMillis,\n        idleTimeoutMillis: pool.options.idleTimeoutMillis,\n        // Performance metrics\n        metrics: {\n            ...poolMetrics,\n            uptimeSeconds,\n            utilizationPercent: Math.round((pool.totalCount / pool.options.max) * 100),\n            acquiresPerSecond: poolMetrics.acquireCount / Math.max(uptimeSeconds, 1),\n            errorRate: poolMetrics.connectionErrors / Math.max(poolMetrics.acquireCount, 1)\n        },\n        // Adaptive recommendations\n        recommendations: poolMetrics.adaptiveRecommendations\n    };\n}\n\n/**\n * CIRCUIT BREAKER FIX: Execute a database query with circuit breaker protection\n * This function now uses the new database connection manager with integrated circuit breaker\n */\nasync function query(text, params = [], timeoutMs = null) {\n    const queryId = Math.random().toString(36).substr(2, 9);\n    const startTime = Date.now();\n    \n    console.log(`üîç [${queryId}] QUERY START (Circuit Breaker): ${text.substring(0, 100)}...`);\n    console.log(`üîç [${queryId}] Params:`, params);\n    \n    try {\n        // Use new database manager with circuit breaker protection\n        const result = await databaseManager.query(text, params);\n        \n        const duration = Date.now() - startTime;\n        console.log(`‚úÖ [${queryId}] Query completed in ${duration}ms`);\n        console.log(`‚úÖ [${queryId}] Rows returned: ${result.rows?.length || 0}`);\n        \n        // Track performance metrics (legacy compatibility)\n        try {\n            const { performanceMonitor } = require('./performanceMonitor');\n            const operation = text.trim().split(' ')[0].toUpperCase();\n            const table = extractTableName(text);\n            \n            performanceMonitor.recordDatabaseOperation(operation, table, duration, true);\n        } catch (perfError) {\n            // Performance monitoring is optional - don't fail the query\n            console.warn(`‚ö†Ô∏è [${queryId}] Performance monitoring failed:`, perfError.message);\n        }\n        \n        return result;\n        \n        const queryDuration = Date.now() - queryStart;\n        const totalDuration = Date.now() - startTime;\n        \n        console.log(`‚úÖ [${queryId}] Query completed in ${queryDuration}ms (total: ${totalDuration}ms)`);\n        console.log(`‚úÖ [${queryId}] Rows returned: ${result.rows?.length || 0}`);\n        \n        // Track performance metrics\n        try {\n            const { performanceMonitor } = require('./performanceMonitor');\n            const operation = text.trim().split(' ')[0].toUpperCase();\n            const table = extractTableName(text);\n            performanceMonitor.trackDbOperation(operation, table, queryDuration, true, queryId);\n        } catch (perfError) {\n            // Don't fail the query if performance monitoring fails\n            console.warn('Performance monitoring failed:', perfError.message);\n        }\n        \n        return result;\n        \n    } catch (error) {\n        const errorDuration = Date.now() - startTime;\n        console.error(`‚ùå [${queryId}] Query failed after ${errorDuration}ms:`, error.message);\n        console.error(`‚ùå [${queryId}] Error details:`, {\n            code: error.code,\n            severity: error.severity,\n            detail: error.detail,\n            hint: error.hint,\n            position: error.position,\n            internalPosition: error.internalPosition,\n            internalQuery: error.internalQuery,\n            where: error.where,\n            schema: error.schema,\n            table: error.table,\n            column: error.column,\n            dataType: error.dataType,\n            constraint: error.constraint\n        });\n        \n        // Update pool metrics for connection errors\n        updatePoolMetrics('error');\n        \n        // Track performance metrics for failed queries\n        try {\n            const { performanceMonitor } = require('./performanceMonitor');\n            const operation = text.trim().split(' ')[0].toUpperCase();\n            const table = extractTableName(text);\n            performanceMonitor.trackDbOperation(operation, table, errorDuration, false, queryId);\n        } catch (perfError) {\n            console.warn('Performance monitoring failed:', perfError.message);\n        }\n        \n        throw error;\n    }\n}\n\n/**\n * Execute a transaction\n */\nasync function transaction(callback) {\n    if (!dbInitialized || !pool) {\n        await initializeDatabase();\n    }\n\n    const client = await pool.connect();\n    try {\n        await client.query('BEGIN');\n        const result = await callback(client);\n        await client.query('COMMIT');\n        return result;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n    } finally {\n        client.release();\n    }\n}\n\n/**\n * CIRCUIT BREAKER FIX: Health check using new database manager with circuit breaker\n */\nasync function healthCheck() {\n    try {\n        // Use new database manager with circuit breaker protection\n        const result = await databaseManager.query('SELECT NOW() as timestamp, current_database() as db, version() as version');\n        \n        return {\n            status: 'healthy',\n            database: result.rows[0].db,\n            timestamp: result.rows[0].timestamp,\n            version: result.rows[0].version.split(' ')[0],\n            note: 'Database connection verified with circuit breaker protection'\n        };\n    } catch (error) {\n        // Check if this is a circuit breaker error and provide helpful info\n        if (error.message.includes('Circuit breaker is OPEN')) {\n            return {\n                status: 'circuit_breaker_open',\n                error: error.message,\n                note: 'Database access blocked by circuit breaker. Use emergency reset endpoint if needed.',\n                recovery: 'POST /api/health/emergency/reset-circuit-breaker'\n            };\n        }\n        \n        return {\n            status: 'unhealthy',\n            error: error.message,\n            note: 'Database connection failed - check configuration and network connectivity'\n        };\n    }\n}\n\n/**\n * Check if a table exists in the database\n */\nasync function tableExists(tableName) {\n    try {\n        if (!dbInitialized || !pool) {\n            await initializeDatabase();\n        }\n        const result = await query(`\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE table_schema = 'public' \n                AND table_name = $1\n            )\n        `, [tableName]);\n        \n        return result.rows[0].exists;\n    } catch (error) {\n        console.error(`Error checking if table ${tableName} exists:`, error);\n        return false;\n    }\n}\n\n/**\n * Check if multiple tables exist\n */\nasync function tablesExist(tableNames) {\n    try {\n        if (!dbInitialized || !pool) {\n            await initializeDatabase();\n        }\n        const result = await query(`\n            SELECT table_name, \n                   EXISTS (\n                       SELECT FROM information_schema.tables \n                       WHERE table_schema = 'public' \n                       AND table_name = t.table_name\n                   ) as exists\n            FROM unnest($1::text[]) AS t(table_name)\n        `, [tableNames]);\n        \n        const existsMap = {};\n        result.rows.forEach(row => {\n            existsMap[row.table_name] = row.exists;\n        });\n        \n        return existsMap;\n    } catch (error) {\n        console.error('Error checking if tables exist:', error);\n        const fallbackMap = {};\n        tableNames.forEach(name => {\n            fallbackMap[name] = false;\n        });\n        return fallbackMap;\n    }\n}\n\n/**\n * Comprehensive database schema validation\n */\nconst REQUIRED_SCHEMA = {\n    // Core user and authentication tables\n    core: [\n        'user_api_keys',\n        'users'\n    ],\n    \n    // Portfolio and trading tables\n    portfolio: [\n        'portfolio_holdings',\n        'portfolio_metadata',\n        'trading_orders'\n    ],\n    \n    // Market data tables\n    market_data: [\n        'symbols',\n        'stock_symbols', \n        'price_daily',\n        'market_data'\n    ],\n    \n    // Analytics and scoring tables\n    analytics: [\n        'buy_sell_daily',\n        'buy_sell_weekly', \n        'buy_sell_monthly',\n        'technicals_daily',\n        'fundamentals',\n        'scores'\n    ],\n    \n    // Optional enhancement tables\n    optional: [\n        'patterns',\n        'sentiment',\n        'earnings',\n        'risk_metrics',\n        'alerts',\n        'swing_trader',\n        'company_profile',\n        'key_metrics'\n    ]\n};\n\n/**\n * Comprehensive database schema validation with detailed logging\n */\nasync function validateDatabaseSchema(requestId = 'schema-check') {\n    const validationStart = Date.now();\n    console.log(`üîç [${requestId}] Starting comprehensive database schema validation`);\n    \n    try {\n        // Initialize database if needed\n        await initializeDatabase();\n        console.log(`‚úÖ [${requestId}] Database initialized for schema validation`);\n        \n        const allTables = [\n            ...REQUIRED_SCHEMA.core,\n            ...REQUIRED_SCHEMA.portfolio,\n            ...REQUIRED_SCHEMA.market_data,\n            ...REQUIRED_SCHEMA.analytics,\n            ...REQUIRED_SCHEMA.optional\n        ];\n        \n        console.log(`üîç [${requestId}] Checking ${allTables.length} tables across schema categories`);\n        \n        // Check table existence\n        const tableCheckStart = Date.now();\n        const tableExistenceMap = await tablesExist(allTables);\n        const tableCheckDuration = Date.now() - tableCheckStart;\n        \n        console.log(`‚úÖ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`);\n        \n        // Categorize results\n        const validation = {\n            core: {\n                required: REQUIRED_SCHEMA.core,\n                existing: REQUIRED_SCHEMA.core.filter(table => tableExistenceMap[table]),\n                missing: REQUIRED_SCHEMA.core.filter(table => !tableExistenceMap[table])\n            },\n            portfolio: {\n                required: REQUIRED_SCHEMA.portfolio,\n                existing: REQUIRED_SCHEMA.portfolio.filter(table => tableExistenceMap[table]),\n                missing: REQUIRED_SCHEMA.portfolio.filter(table => !tableExistenceMap[table])\n            },\n            market_data: {\n                required: REQUIRED_SCHEMA.market_data,\n                existing: REQUIRED_SCHEMA.market_data.filter(table => tableExistenceMap[table]),\n                missing: REQUIRED_SCHEMA.market_data.filter(table => !tableExistenceMap[table])\n            },\n            analytics: {\n                required: REQUIRED_SCHEMA.analytics,\n                existing: REQUIRED_SCHEMA.analytics.filter(table => tableExistenceMap[table]),\n                missing: REQUIRED_SCHEMA.analytics.filter(table => !tableExistenceMap[table])\n            },\n            optional: {\n                required: REQUIRED_SCHEMA.optional,\n                existing: REQUIRED_SCHEMA.optional.filter(table => tableExistenceMap[table]),\n                missing: REQUIRED_SCHEMA.optional.filter(table => !tableExistenceMap[table])\n            }\n        };\n        \n        // Calculate overall health\n        const totalRequired = REQUIRED_SCHEMA.core.length + REQUIRED_SCHEMA.portfolio.length + \n                             REQUIRED_SCHEMA.market_data.length + REQUIRED_SCHEMA.analytics.length;\n        const totalExisting = validation.core.existing.length + validation.portfolio.existing.length +\n                             validation.market_data.existing.length + validation.analytics.existing.length;\n        const totalMissing = validation.core.missing.length + validation.portfolio.missing.length +\n                            validation.market_data.missing.length + validation.analytics.missing.length;\n        \n        const schemaHealthPercentage = Math.round((totalExisting / totalRequired) * 100);\n        \n        // Determine criticality\n        const criticalMissing = [];\n        if (validation.core.missing.length > 0) criticalMissing.push(...validation.core.missing.map(t => `core.${t}`));\n        if (validation.portfolio.missing.length > 0) criticalMissing.push(...validation.portfolio.missing.map(t => `portfolio.${t}`));\n        \n        const validationDuration = Date.now() - validationStart;\n        \n        // Comprehensive logging\n        console.log(`üìä [${requestId}] Database schema validation completed in ${validationDuration}ms`, {\n            overall: {\n                healthPercentage: schemaHealthPercentage,\n                totalRequired,\n                totalExisting,\n                totalMissing,\n                optionalExisting: validation.optional.existing.length,\n                optionalMissing: validation.optional.missing.length\n            },\n            categories: {\n                core: `${validation.core.existing.length}/${validation.core.required.length}`,\n                portfolio: `${validation.portfolio.existing.length}/${validation.portfolio.required.length}`,\n                market_data: `${validation.market_data.existing.length}/${validation.market_data.required.length}`,\n                analytics: `${validation.analytics.existing.length}/${validation.analytics.required.length}`,\n                optional: `${validation.optional.existing.length}/${validation.optional.required.length}`\n            }\n        });\n        \n        // Log critical issues\n        if (criticalMissing.length > 0) {\n            console.error(`‚ùå [${requestId}] CRITICAL: Missing essential database tables:`, {\n                criticalMissing,\n                impact: 'Core application functionality will fail',\n                recommendation: 'Run database initialization scripts immediately',\n                affectedFeatures: getCriticalFeatureImpact(criticalMissing)\n            });\n        }\n        \n        // Log category-specific issues\n        Object.entries(validation).forEach(([category, info]) => {\n            if (info.missing.length > 0 && category !== 'optional') {\n                console.error(`‚ùå [${requestId}] Missing ${category} tables:`, {\n                    category,\n                    missingTables: info.missing,\n                    existingTables: info.existing,\n                    impact: getCategoryImpact(category),\n                    recommendation: `Create missing ${category} tables`\n                });\n            }\n        });\n        \n        return {\n            valid: criticalMissing.length === 0,\n            healthPercentage: schemaHealthPercentage,\n            validation,\n            criticalMissing,\n            totalRequired,\n            totalExisting,\n            validationDuration,\n            requestId,\n            timestamp: new Date().toISOString()\n        };\n        \n    } catch (error) {\n        const errorDuration = Date.now() - validationStart;\n        console.error(`‚ùå [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`, {\n            error: error.message,\n            errorStack: error.stack,\n            impact: 'Cannot determine database schema health',\n            recommendation: 'Check database connectivity and permissions'\n        });\n        \n        return {\n            valid: false,\n            error: error.message,\n            validationDuration: errorDuration,\n            requestId,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\n/**\n * Get impact description for missing critical tables\n */\nfunction getCriticalFeatureImpact(missingTables) {\n    const impacts = [];\n    \n    if (missingTables.some(t => t.includes('user_api_keys'))) {\n        impacts.push('API key management will fail');\n    }\n    if (missingTables.some(t => t.includes('portfolio'))) {\n        impacts.push('Portfolio functionality will be broken');\n    }\n    if (missingTables.some(t => t.includes('trading'))) {\n        impacts.push('Trading operations will fail');\n    }\n    if (missingTables.some(t => t.includes('market_data'))) {\n        impacts.push('Market data display will be broken');\n    }\n    \n    return impacts;\n}\n\n/**\n * Get category-specific impact description\n */\nfunction getCategoryImpact(category) {\n    const impacts = {\n        core: 'User authentication and API key management will fail',\n        portfolio: 'Portfolio tracking and management features will be broken',\n        market_data: 'Stock data and market information will be unavailable',\n        analytics: 'Trading signals and analysis features will not work'\n    };\n    \n    return impacts[category] || 'Some application features may be limited';\n}\n\n/**\n * Safe query that checks table existence first with comprehensive validation\n */\nasync function safeQuery(text, params = [], requiredTables = []) {\n    if (requiredTables.length > 0) {\n        const tableExistenceMap = await tablesExist(requiredTables);\n        const missingTables = requiredTables.filter(table => !tableExistenceMap[table]);\n        \n        if (missingTables.length > 0) {\n            throw new Error(`Required tables not found: ${missingTables.join(', ')}`);\n        }\n    }\n    \n    return await query(text, params);\n}\n\n\n/**\n * Close database connections\n */\nasync function closeDatabase() {\n    if (pool) {\n        await pool.end();\n        pool = null;\n        dbInitialized = false;\n        dbConfig = null;\n    }\n}\n\n/**\n * Warm up database connections to reduce cold start latency\n */\nasync function warmConnections() {\n    console.log('üî• Warming up database connections...');\n    const warmStart = Date.now();\n    \n    try {\n        // Initialize database if not already done\n        if (!dbInitialized || !pool) {\n            await initializeDatabase();\n        }\n\n        // Create and test connections up to pool max\n        const maxConnections = 2; // Match our pool max\n        const warmPromises = [];\n\n        for (let i = 0; i < maxConnections; i++) {\n            warmPromises.push(\n                (async () => {\n                    try {\n                        const client = await pool.connect();\n                        await client.query('SELECT 1'); // Simple test query\n                        client.release();\n                        console.log(`üî• Connection ${i + 1} warmed successfully`);\n                    } catch (error) {\n                        console.warn(`‚ö†Ô∏è Failed to warm connection ${i + 1}:`, error.message);\n                    }\n                })()\n            );\n        }\n\n        await Promise.all(warmPromises);\n        console.log(`‚úÖ Database connections warmed in ${Date.now() - warmStart}ms`);\n        \n    } catch (error) {\n        console.error('‚ùå Failed to warm database connections:', error.message);\n    }\n}\n\n/**\n * Lambda-optimized database initialization with connection warming\n */\nasync function initForLambda() {\n    console.log('üöÄ Initializing database for Lambda with connection warming...');\n    const lambdaInitStart = Date.now();\n    \n    try {\n        // Initialize database\n        await initializeDatabase();\n        \n        // Warm connections to reduce future cold start latency\n        await warmConnections();\n        \n        console.log(`üöÄ Lambda database initialization complete in ${Date.now() - lambdaInitStart}ms`);\n        return true;\n        \n    } catch (error) {\n        console.error('‚ùå Lambda database initialization failed:', error.message);\n        return false;\n    }\n}\n\n/**\n * Extract table name from SQL query for performance tracking\n */\nfunction extractTableName(sql) {\n    try {\n        const cleanSql = sql.trim().toLowerCase();\n        \n        // Match common SQL patterns\n        const patterns = [\n            /^insert\\s+into\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^update\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^delete\\s+from\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^select\\s+.*?\\s+from\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^create\\s+table\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^drop\\s+table\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^truncate\\s+table\\s+([a-zA-Z_][a-zA-Z0-9_]*)/,\n            /^alter\\s+table\\s+([a-zA-Z_][a-zA-Z0-9_]*)/\n        ];\n        \n        for (const pattern of patterns) {\n            const match = cleanSql.match(pattern);\n            if (match) {\n                return match[1];\n            }\n        }\n        \n        return 'unknown';\n    } catch (error) {\n        return 'unknown';\n    }\n}\n\n/**\n * Reset database state for testing purposes\n */\nasync function resetDatabaseState() {\n    if (pool) {\n        await pool.end();\n        pool = null;\n    }\n    dbInitialized = false;\n    dbConfig = null;\n    console.log('üîÑ Database state reset for testing');\n}\n\nmodule.exports = {\n    initializeDatabase,\n    initForLambda,\n    warmConnections,\n    getPool,\n    getPoolStatus,\n    query,\n    safeQuery,\n    tableExists,\n    tablesExist,\n    validateDatabaseSchema,\n    transaction,\n    closeDatabase,\n    healthCheck,\n    resetDatabaseState,\n    REQUIRED_SCHEMA,\n    extractTableName\n};"],"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","ignoreList":[]}