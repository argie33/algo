{"version":3,"names":["cov_1kgsvbxpyd","actualCoverage","crypto","s","require","StructuredLogger","constructor","service","b","component","f","correlationId","generateCorrelationId","startTime","Date","now","randomUUID","split","createLogEntry","level","message","context","timestamp","toISOString","duration","toUpperCase","duration_ms","environment","process","env","NODE_ENV","aws_region","AWS_REGION","lambda_function","AWS_LAMBDA_FUNCTION_NAME","lambda_version","AWS_LAMBDA_FUNCTION_VERSION","debug","logEntry","console","log","JSON","stringify","info","warn","error","stack","code","name","fatal","dbOperation","operation","query","params","rowCount","database","query_preview","substring","params_count","length","row_count","apiCall","endpoint","method","statusCode","external_api","status_code","authEvent","event","userId","outcome","details","authentication","user_id","performance","metrics","userAction","action","user_action","systemEvent","severity","system_event","lambdaStart","lambda","event_type","httpMethod","path","source_ip","requestContext","identity","sourceIp","user_agent","headers","request_id","awsRequestId","remaining_time","getRemainingTimeInMillis","lambdaEnd","circuitBreaker","state","failure_count","circuit_breaker","child","additionalContext","childLogger","setCorrelationId","getCorrelationId","formatError","createLogger","requestLoggingMiddleware","req","res","next","logger","setHeader","request","url","get","origin","content_type","content_length","ip","originalSend","send","data","response","response_size","call","module","exports"],"sources":["structuredLogger.js"],"sourcesContent":["/**\n * Structured Logger - Comprehensive logging for all system components\n * Provides consistent logging format with correlation IDs and context\n */\n\nconst crypto = require('crypto');\n\nclass StructuredLogger {\n  constructor(service = 'financial-platform', component = 'unknown') {\n    this.service = service;\n    this.component = component;\n    this.correlationId = this.generateCorrelationId();\n    this.startTime = Date.now();\n  }\n\n  generateCorrelationId() {\n    return crypto.randomUUID().split('-')[0];\n  }\n\n  createLogEntry(level, message, context = {}) {\n    const timestamp = new Date().toISOString();\n    const duration = Date.now() - this.startTime;\n    \n    return {\n      timestamp,\n      level: level.toUpperCase(),\n      message,\n      service: this.service,\n      component: this.component,\n      correlationId: this.correlationId,\n      duration_ms: duration,\n      context: {\n        ...context,\n        environment: process.env.NODE_ENV || 'unknown',\n        aws_region: process.env.AWS_REGION || 'unknown',\n        lambda_function: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n        lambda_version: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown'\n      }\n    };\n  }\n\n  debug(message, context = {}) {\n    if (process.env.NODE_ENV === 'development') {\n      const logEntry = this.createLogEntry('DEBUG', message, context);\n      console.log(JSON.stringify(logEntry, null, 2));\n    }\n  }\n\n  info(message, context = {}) {\n    const logEntry = this.createLogEntry('INFO', message, context);\n    console.log(JSON.stringify(logEntry));\n  }\n\n  warn(message, context = {}) {\n    const logEntry = this.createLogEntry('WARN', message, context);\n    console.warn(JSON.stringify(logEntry));\n  }\n\n  error(message, error = null, context = {}) {\n    const logEntry = this.createLogEntry('ERROR', message, {\n      ...context,\n      error: error ? {\n        message: error.message,\n        stack: error.stack,\n        code: error.code,\n        name: error.name\n      } : null\n    });\n    console.error(JSON.stringify(logEntry));\n  }\n\n  fatal(message, error = null, context = {}) {\n    const logEntry = this.createLogEntry('FATAL', message, {\n      ...context,\n      error: error ? {\n        message: error.message,\n        stack: error.stack,\n        code: error.code,\n        name: error.name\n      } : null\n    });\n    console.error(JSON.stringify(logEntry));\n  }\n\n  // Database operation logging\n  dbOperation(operation, query, params = [], duration = 0, rowCount = 0, error = null) {\n    const context = {\n      database: {\n        operation,\n        query_preview: query ? query.substring(0, 100) + '...' : 'N/A',\n        params_count: params.length,\n        duration_ms: duration,\n        row_count: rowCount,\n        error: error ? {\n          message: error.message,\n          code: error.code\n        } : null\n      }\n    };\n\n    if (error) {\n      this.error(`Database operation failed: ${operation}`, error, context);\n    } else {\n      this.info(`Database operation completed: ${operation}`, context);\n    }\n  }\n\n  // External API call logging\n  apiCall(service, endpoint, method = 'GET', statusCode = 0, duration = 0, error = null) {\n    const context = {\n      external_api: {\n        service,\n        endpoint,\n        method,\n        status_code: statusCode,\n        duration_ms: duration,\n        error: error ? {\n          message: error.message,\n          code: error.code\n        } : null\n      }\n    };\n\n    if (error || statusCode >= 400) {\n      this.error(`External API call failed: ${service}/${endpoint}`, error, context);\n    } else {\n      this.info(`External API call completed: ${service}/${endpoint}`, context);\n    }\n  }\n\n  // Authentication and authorization logging\n  authEvent(event, userId = null, outcome = 'success', details = {}) {\n    const context = {\n      authentication: {\n        event,\n        user_id: userId,\n        outcome,\n        details\n      }\n    };\n\n    if (outcome === 'success') {\n      this.info(`Authentication event: ${event}`, context);\n    } else {\n      this.warn(`Authentication event failed: ${event}`, context);\n    }\n  }\n\n  // Performance tracking\n  performance(operation, duration, metrics = {}) {\n    const context = {\n      performance: {\n        operation,\n        duration_ms: duration,\n        metrics\n      }\n    };\n\n    if (duration > 5000) {\n      this.warn(`Slow operation detected: ${operation}`, context);\n    } else {\n      this.info(`Performance tracking: ${operation}`, context);\n    }\n  }\n\n  // User action logging\n  userAction(action, userId, details = {}) {\n    const context = {\n      user_action: {\n        action,\n        user_id: userId,\n        details\n      }\n    };\n\n    this.info(`User action: ${action}`, context);\n  }\n\n  // System event logging\n  systemEvent(event, severity = 'info', details = {}) {\n    const context = {\n      system_event: {\n        event,\n        severity,\n        details\n      }\n    };\n\n    switch (severity) {\n      case 'critical':\n        this.fatal(`System event: ${event}`, null, context);\n        break;\n      case 'error':\n        this.error(`System event: ${event}`, null, context);\n        break;\n      case 'warning':\n        this.warn(`System event: ${event}`, context);\n        break;\n      default:\n        this.info(`System event: ${event}`, context);\n    }\n  }\n\n  // Lambda lifecycle events\n  lambdaStart(event, context) {\n    this.info('Lambda function started', {\n      lambda: {\n        event_type: event?.httpMethod || 'unknown',\n        path: event?.path || 'unknown',\n        source_ip: event?.requestContext?.identity?.sourceIp || 'unknown',\n        user_agent: event?.headers?.['user-agent'] || 'unknown',\n        request_id: context?.awsRequestId || 'unknown',\n        remaining_time: context?.getRemainingTimeInMillis?.() || 0\n      }\n    });\n  }\n\n  lambdaEnd(duration, statusCode, error = null) {\n    const context = {\n      lambda: {\n        duration_ms: duration,\n        status_code: statusCode,\n        error: error ? {\n          message: error.message,\n          stack: error.stack\n        } : null\n      }\n    };\n\n    if (error) {\n      this.error('Lambda function ended with error', error, context);\n    } else {\n      this.info('Lambda function completed successfully', context);\n    }\n  }\n\n  // Circuit breaker logging\n  circuitBreaker(service, state, failure_count = 0, details = {}) {\n    const context = {\n      circuit_breaker: {\n        service,\n        state,\n        failure_count,\n        details\n      }\n    };\n\n    switch (state) {\n      case 'open':\n        this.error(`Circuit breaker opened for ${service}`, null, context);\n        break;\n      case 'half-open':\n        this.warn(`Circuit breaker half-open for ${service}`, context);\n        break;\n      case 'closed':\n        this.info(`Circuit breaker closed for ${service}`, context);\n        break;\n      default:\n        this.info(`Circuit breaker state change: ${service}`, context);\n    }\n  }\n\n  // Create child logger with additional context\n  child(additionalContext = {}) {\n    const childLogger = new StructuredLogger(this.service, this.component);\n    childLogger.correlationId = this.correlationId;\n    childLogger.additionalContext = {\n      ...this.additionalContext,\n      ...additionalContext\n    };\n    return childLogger;\n  }\n\n  // Set correlation ID for request tracing\n  setCorrelationId(correlationId) {\n    this.correlationId = correlationId;\n  }\n\n  // Get current correlation ID\n  getCorrelationId() {\n    return this.correlationId;\n  }\n\n  // Format error for logging\n  formatError(error) {\n    return {\n      message: error.message,\n      stack: error.stack,\n      code: error.code,\n      name: error.name,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n// Factory function to create logger instances\nfunction createLogger(service, component) {\n  return new StructuredLogger(service, component);\n}\n\n// Express middleware for request logging\nfunction requestLoggingMiddleware(req, res, next) {\n  const logger = createLogger('financial-platform', 'express');\n  const startTime = Date.now();\n\n  // Generate correlation ID for request\n  const correlationId = req.headers['x-correlation-id'] || crypto.randomUUID().split('-')[0];\n  logger.setCorrelationId(correlationId);\n\n  // Add correlation ID to response headers\n  res.setHeader('X-Correlation-ID', correlationId);\n\n  // Log request start\n  logger.info('HTTP request started', {\n    request: {\n      method: req.method,\n      url: req.url,\n      path: req.path,\n      query: req.query,\n      user_agent: req.get('User-Agent'),\n      origin: req.get('Origin'),\n      content_type: req.get('Content-Type'),\n      content_length: req.get('Content-Length'),\n      source_ip: req.ip\n    }\n  });\n\n  // Attach logger to request object\n  req.logger = logger;\n\n  // Log response\n  const originalSend = res.send;\n  res.send = function(data) {\n    const duration = Date.now() - startTime;\n    \n    logger.info('HTTP request completed', {\n      response: {\n        status_code: res.statusCode,\n        duration_ms: duration,\n        response_size: data ? data.length : 0\n      }\n    });\n\n    return originalSend.call(this, data);\n  };\n\n  next();\n}\n\nmodule.exports = {\n  StructuredLogger,\n  createLogger,\n  requestLoggingMiddleware\n};"],"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","ignoreList":[]}