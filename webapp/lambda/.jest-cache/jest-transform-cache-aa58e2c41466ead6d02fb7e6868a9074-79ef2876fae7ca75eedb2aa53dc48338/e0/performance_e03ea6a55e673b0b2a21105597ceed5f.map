{"version":3,"names":["cov_2mwro0o90g","actualCoverage","express","s","require","router","Router","PerformanceMonitoringService","performanceService","get","req","res","f","dashboard","getPerformanceDashboard","json","success","data","timestamp","Date","toISOString","error","console","status","message","post","name","value","category","b","metadata","body","undefined","metric","recordMetric","source","userAgent","endpoint","originalUrl","metricId","id","severity","limit","acknowledged","query","alerts","filter","alert","toLowerCase","isAcknowledged","sort","a","slice","parseInt","summary","total","length","critical","warning","active","filters","priority","implemented","recommendations","isImplemented","rec","priorityOrder","priorityDiff","high","r","medium","low","testMetric","now","test","services","metricCollection","totalMetrics","metrics","size","alerting","totalAlerts","activeAlerts","totalRecommendations","activeRecommendations","healthScore","statistics","systemHealth","thresholds","module","exports"],"sources":["performance.js"],"sourcesContent":["// Performance Monitoring Routes\n// API endpoints for performance metrics, alerts, and optimization recommendations\n\nconst express = require('express');\nconst router = express.Router();\nconst PerformanceMonitoringService = require('../services/performanceMonitoringService');\n\n// Initialize service\nconst performanceService = new PerformanceMonitoringService();\n\n// Get performance dashboard\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const dashboard = performanceService.getPerformanceDashboard();\n    \n    res.json({\n      success: true,\n      data: dashboard,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Performance dashboard failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get performance dashboard',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Record performance metric\nrouter.post('/metrics', async (req, res) => {\n  try {\n    const { name, value, category = 'general', metadata = {} } = req.body;\n    \n    if (!name || value === undefined) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'name and value are required'\n      });\n    }\n    \n    if (typeof value !== 'number') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid value type',\n        message: 'value must be a number'\n      });\n    }\n    \n    const metric = performanceService.recordMetric(name, value, category, {\n      ...metadata,\n      source: 'api',\n      userAgent: req.get('User-Agent'),\n      endpoint: req.originalUrl\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        metricId: metric.id,\n        name: metric.name,\n        value: metric.value,\n        category: metric.category,\n        timestamp: metric.timestamp\n      },\n      message: 'Performance metric recorded successfully',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Metric recording failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to record performance metric',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get all alerts\nrouter.get('/alerts', async (req, res) => {\n  try {\n    const { \n      severity, \n      status = 'all', \n      limit = 50, \n      acknowledged \n    } = req.query;\n    \n    let alerts = [...performanceService.alerts];\n    \n    // Filter by severity\n    if (severity) {\n      alerts = alerts.filter(alert => \n        alert.severity.toLowerCase() === severity.toLowerCase()\n      );\n    }\n    \n    // Filter by status\n    if (status !== 'all') {\n      alerts = alerts.filter(alert => \n        alert.status.toLowerCase() === status.toLowerCase()\n      );\n    }\n    \n    // Filter by acknowledgment\n    if (acknowledged !== undefined) {\n      const isAcknowledged = acknowledged === 'true';\n      alerts = alerts.filter(alert => alert.acknowledged === isAcknowledged);\n    }\n    \n    // Sort by most recent and limit\n    alerts = alerts\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\n      .slice(0, parseInt(limit));\n    \n    const summary = {\n      total: alerts.length,\n      critical: alerts.filter(a => a.severity === 'CRITICAL').length,\n      warning: alerts.filter(a => a.severity === 'WARNING').length,\n      active: alerts.filter(a => a.status === 'ACTIVE').length,\n      acknowledged: alerts.filter(a => a.acknowledged).length\n    };\n    \n    res.json({\n      success: true,\n      data: {\n        alerts,\n        summary,\n        filters: { severity, status, acknowledged, limit }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Alerts retrieval failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get alerts',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get optimization recommendations\nrouter.get('/recommendations', async (req, res) => {\n  try {\n    const { \n      priority, \n      category, \n      implemented = 'false', \n      limit = 20 \n    } = req.query;\n    \n    let recommendations = [...performanceService.recommendations];\n    \n    // Filter by implementation status\n    const isImplemented = implemented === 'true';\n    recommendations = recommendations.filter(rec => rec.implemented === isImplemented);\n    \n    // Filter by priority\n    if (priority) {\n      recommendations = recommendations.filter(rec => \n        rec.priority.toLowerCase() === priority.toLowerCase()\n      );\n    }\n    \n    // Filter by category\n    if (category) {\n      recommendations = recommendations.filter(rec => \n        rec.category.toLowerCase() === category.toLowerCase()\n      );\n    }\n    \n    // Sort by priority and timestamp\n    const priorityOrder = { 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1 };\n    recommendations = recommendations\n      .sort((a, b) => {\n        const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n        if (priorityDiff !== 0) return priorityDiff;\n        return new Date(b.timestamp) - new Date(a.timestamp);\n      })\n      .slice(0, parseInt(limit));\n    \n    const summary = {\n      total: recommendations.length,\n      high: recommendations.filter(r => r.priority === 'HIGH').length,\n      medium: recommendations.filter(r => r.priority === 'MEDIUM').length,\n      low: recommendations.filter(r => r.priority === 'LOW').length\n    };\n    \n    res.json({\n      success: true,\n      data: {\n        recommendations,\n        summary,\n        filters: { priority, category, implemented, limit }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Recommendations retrieval failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get recommendations',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Performance health check\nrouter.get('/health', async (req, res) => {\n  try {\n    // Test performance monitoring functionality\n    const testMetric = performanceService.recordMetric(\n      'health_check_response_time', \n      Date.now() % 1000, \n      'api', \n      { test: true }\n    );\n    \n    const dashboard = performanceService.getPerformanceDashboard();\n    \n    res.json({\n      success: true,\n      message: 'Performance monitoring services operational',\n      services: {\n        metricCollection: {\n          status: testMetric ? 'operational' : 'error',\n          totalMetrics: performanceService.metrics.size\n        },\n        alerting: {\n          status: 'operational',\n          totalAlerts: performanceService.alerts.length,\n          activeAlerts: performanceService.alerts.filter(a => a.status === 'ACTIVE').length\n        },\n        recommendations: {\n          status: 'operational',\n          totalRecommendations: performanceService.recommendations.length,\n          activeRecommendations: performanceService.recommendations.filter(r => !r.implemented).length\n        },\n        dashboard: {\n          status: dashboard ? 'operational' : 'error',\n          healthScore: dashboard.healthScore\n        }\n      },\n      statistics: {\n        metrics: performanceService.metrics.size,\n        alerts: performanceService.alerts.length,\n        recommendations: performanceService.recommendations.length,\n        systemHealth: dashboard.summary.systemHealth\n      },\n      thresholds: performanceService.thresholds,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Performance monitoring health check failed:', error);\n    res.status(503).json({\n      success: false,\n      error: 'Performance monitoring services unhealthy',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}