{"version":3,"names":["cov_1dia7ijgyx","actualCoverage","express","s","require","router","Router","query","StructuredLogger","logger","CryptoPortfolioAnalytics","constructor","f","calculatePortfolioMetrics","userId","portfolioData","startTime","Date","now","metrics","totalValue","reduce","sum","holding","quantity","current_price","totalCost","cost_basis","volatility","calculatePortfolioVolatility","sharpeRatio","calculateSharpeRatio","correlation","calculateAssetCorrelations","diversificationScore","calculateDiversificationScore","valueAtRisk","calculateVaR","maximumDrawdown","calculateMaxDrawdown","betaToMarket","calculateBetaToMarket","sectorBreakdown","calculateSectorBreakdown","performanceAttribution","calculatePerformanceAttribution","totalPnL","totalPnLPercent","b","performance","user_id","holdings_count","length","total_value","error","symbols","map","h","symbol","priceHistory","returns","forEach","prices","rows","filter","row","i","dailyReturn","close_price","push","weights","portfolioReturns","maxLength","Math","max","portfolioReturn","j","undefined","variance","calculateVariance","sqrt","riskFreeRate","totalReturn","holdingReturn","avg_cost","annualizedReturn","excessReturn","correlations","calculatePairCorrelation","symbol1","symbol2","returns1","returns2","return1","price1","return2","price2","calculateCorrelationCoefficient","assetCountScore","min","idealWeight","weightDeviation","w","abs","distributionScore","avgCorrelation","Object","values","corr","correlationScore","confidenceLevel","dailyVolatility","var95","currentValue","costBasis","maxDrawdown","holdingDrawdown","marketReturns","btcReturns","portfolioSymbols","weightedBeta","weight","assetBeta","calculateAssetBeta","assetPrices","assetReturns","minLength","alignedAssetReturns","slice","alignedMarketReturns","covariance","calculateCovariance","marketVariance","sectorMapping","sector","value","percentage","assets","keys","attribution","assetSelection","marketTiming","totalAttribution","mean","r","pow","mean1","mean2","r1","std1","std2","portfolioAnalytics","get","req","res","correlationId","params","info","correlation_id","analytics","insights","riskLevel","diversificationGrade","recommendations","generatePortfolioRecommendations","duration","json","success","data","portfolio","metadata","calculation_time_ms","timestamp","toISOString","duration_ms","status","error_code","type","priority","message","action","toFixed","module","exports"],"sources":["crypto-advanced.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { query } = require('../utils/database');\nconst StructuredLogger = require('../utils/structuredLogger');\nconst logger = new StructuredLogger('crypto-advanced');\n\n// Advanced Crypto Portfolio Analytics Engine\nclass CryptoPortfolioAnalytics {\n  constructor() {\n    this.logger = logger;\n  }\n\n  // Calculate comprehensive portfolio metrics\n  async calculatePortfolioMetrics(userId, portfolioData) {\n    const startTime = Date.now();\n    \n    try {\n      const metrics = {\n        // Basic metrics\n        totalValue: portfolioData.reduce((sum, holding) => sum + (holding.quantity * holding.current_price), 0),\n        totalCost: portfolioData.reduce((sum, holding) => sum + holding.cost_basis, 0),\n        \n        // Advanced metrics\n        volatility: await this.calculatePortfolioVolatility(portfolioData),\n        sharpeRatio: await this.calculateSharpeRatio(portfolioData),\n        correlation: await this.calculateAssetCorrelations(portfolioData),\n        diversificationScore: await this.calculateDiversificationScore(portfolioData),\n        \n        // Risk metrics\n        valueAtRisk: await this.calculateVaR(portfolioData),\n        maximumDrawdown: await this.calculateMaxDrawdown(portfolioData),\n        betaToMarket: await this.calculateBetaToMarket(portfolioData),\n        \n        // Performance attribution\n        sectorBreakdown: await this.calculateSectorBreakdown(portfolioData),\n        performanceAttribution: await this.calculatePerformanceAttribution(portfolioData)\n      };\n\n      metrics.totalPnL = metrics.totalValue - metrics.totalCost;\n      metrics.totalPnLPercent = metrics.totalCost > 0 ? (metrics.totalPnL / metrics.totalCost) * 100 : 0;\n\n      this.logger.performance('crypto_portfolio_metrics_calculation', Date.now() - startTime, {\n        user_id: userId,\n        holdings_count: portfolioData.length,\n        total_value: metrics.totalValue\n      });\n\n      return metrics;\n    } catch (error) {\n      this.logger.error('Portfolio metrics calculation failed', error, {\n        user_id: userId,\n        holdings_count: portfolioData?.length || 0\n      });\n      throw error;\n    }\n  }\n\n  // Calculate portfolio volatility using historical data\n  async calculatePortfolioVolatility(portfolioData) {\n    try {\n      const symbols = portfolioData.map(h => h.symbol);\n      if (symbols.length === 0) return 0;\n\n      // Get 30-day historical prices for all holdings\n      const priceHistory = await query(`\n        SELECT symbol, timestamp, close_price\n        FROM crypto_prices \n        WHERE symbol = ANY($1)\n          AND timestamp >= NOW() - INTERVAL '30 days'\n          AND interval_type = '1d'\n        ORDER BY symbol, timestamp\n      `, [symbols]);\n\n      // Calculate daily returns for each asset\n      const returns = {};\n      symbols.forEach(symbol => {\n        const prices = priceHistory.rows.filter(row => row.symbol === symbol);\n        returns[symbol] = [];\n        \n        for (let i = 1; i < prices.length; i++) {\n          const dailyReturn = (prices[i].close_price - prices[i-1].close_price) / prices[i-1].close_price;\n          returns[symbol].push(dailyReturn);\n        }\n      });\n\n      // Calculate weighted portfolio returns\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      const weights = portfolioData.map(h => (h.quantity * h.current_price) / totalValue);\n      \n      const portfolioReturns = [];\n      const maxLength = Math.max(...symbols.map(s => returns[s]?.length || 0));\n      \n      for (let i = 0; i < maxLength; i++) {\n        let portfolioReturn = 0;\n        for (let j = 0; j < symbols.length; j++) {\n          if (returns[symbols[j]] && returns[symbols[j]][i] !== undefined) {\n            portfolioReturn += weights[j] * returns[symbols[j]][i];\n          }\n        }\n        portfolioReturns.push(portfolioReturn);\n      }\n\n      // Calculate annualized volatility\n      const variance = this.calculateVariance(portfolioReturns);\n      const volatility = Math.sqrt(variance * 365) * 100; // Annualized percentage\n\n      return volatility;\n    } catch (error) {\n      this.logger.error('Volatility calculation failed', error);\n      return 0;\n    }\n  }\n\n  // Calculate Sharpe ratio\n  async calculateSharpeRatio(portfolioData) {\n    try {\n      const riskFreeRate = 0.02; // 2% annual risk-free rate\n      const volatility = await this.calculatePortfolioVolatility(portfolioData);\n      \n      // Calculate portfolio return (simplified - would use actual historical performance)\n      const totalReturn = portfolioData.reduce((sum, holding) => {\n        const holdingReturn = holding.current_price > holding.avg_cost ? \n          ((holding.current_price - holding.avg_cost) / holding.avg_cost) : 0;\n        return sum + holdingReturn;\n      }, 0) / portfolioData.length;\n\n      const annualizedReturn = totalReturn * 365; // Simplified annualization\n      const excessReturn = annualizedReturn - riskFreeRate;\n      \n      return volatility > 0 ? excessReturn / (volatility / 100) : 0;\n    } catch (error) {\n      this.logger.error('Sharpe ratio calculation failed', error);\n      return 0;\n    }\n  }\n\n  // Calculate asset correlations\n  async calculateAssetCorrelations(portfolioData) {\n    try {\n      const symbols = portfolioData.map(h => h.symbol);\n      if (symbols.length < 2) return {};\n\n      const correlations = {};\n      \n      for (let i = 0; i < symbols.length; i++) {\n        for (let j = i + 1; j < symbols.length; j++) {\n          const correlation = await this.calculatePairCorrelation(symbols[i], symbols[j]);\n          correlations[`${symbols[i]}_${symbols[j]}`] = correlation;\n        }\n      }\n\n      return correlations;\n    } catch (error) {\n      this.logger.error('Correlation calculation failed', error);\n      return {};\n    }\n  }\n\n  // Calculate pair correlation between two assets\n  async calculatePairCorrelation(symbol1, symbol2) {\n    try {\n      const prices = await query(`\n        SELECT \n          p1.timestamp,\n          p1.close_price as price1,\n          p2.close_price as price2\n        FROM crypto_prices p1\n        JOIN crypto_prices p2 ON p1.timestamp = p2.timestamp\n        WHERE p1.symbol = $1 \n          AND p2.symbol = $2\n          AND p1.interval_type = '1d'\n          AND p2.interval_type = '1d'\n          AND p1.timestamp >= NOW() - INTERVAL '30 days'\n        ORDER BY p1.timestamp\n      `, [symbol1, symbol2]);\n\n      if (prices.rows.length < 2) return 0;\n\n      // Calculate daily returns\n      const returns1 = [];\n      const returns2 = [];\n      \n      for (let i = 1; i < prices.rows.length; i++) {\n        const return1 = (prices.rows[i].price1 - prices.rows[i-1].price1) / prices.rows[i-1].price1;\n        const return2 = (prices.rows[i].price2 - prices.rows[i-1].price2) / prices.rows[i-1].price2;\n        returns1.push(return1);\n        returns2.push(return2);\n      }\n\n      return this.calculateCorrelationCoefficient(returns1, returns2);\n    } catch (error) {\n      this.logger.error('Pair correlation calculation failed', error, {\n        symbol1, symbol2\n      });\n      return 0;\n    }\n  }\n\n  // Calculate diversification score\n  async calculateDiversificationScore(portfolioData) {\n    try {\n      if (portfolioData.length === 0) return 0;\n\n      // Factor 1: Number of assets (max score: 30 points)\n      const assetCountScore = Math.min(portfolioData.length * 3, 30);\n      \n      // Factor 2: Even distribution (max score: 30 points)\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      const weights = portfolioData.map(h => (h.quantity * h.current_price) / totalValue);\n      const idealWeight = 1 / portfolioData.length;\n      const weightDeviation = weights.reduce((sum, w) => sum + Math.abs(w - idealWeight), 0);\n      const distributionScore = Math.max(0, 30 - (weightDeviation * 100));\n\n      // Factor 3: Low correlation (max score: 40 points)\n      const correlations = await this.calculateAssetCorrelations(portfolioData);\n      const avgCorrelation = Object.values(correlations).reduce((sum, corr) => sum + Math.abs(corr), 0) / \n        Math.max(Object.values(correlations).length, 1);\n      const correlationScore = Math.max(0, 40 - (avgCorrelation * 40));\n\n      return Math.min(100, assetCountScore + distributionScore + correlationScore);\n    } catch (error) {\n      this.logger.error('Diversification score calculation failed', error);\n      return 0;\n    }\n  }\n\n  // Calculate Value at Risk (95% confidence)\n  async calculateVaR(portfolioData) {\n    try {\n      const volatility = await this.calculatePortfolioVolatility(portfolioData);\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      \n      // 95% VaR using normal distribution approximation\n      const confidenceLevel = 1.645; // 95% confidence z-score\n      const dailyVolatility = (volatility / 100) / Math.sqrt(365);\n      const var95 = totalValue * dailyVolatility * confidenceLevel;\n\n      return var95;\n    } catch (error) {\n      this.logger.error('VaR calculation failed', error);\n      return 0;\n    }\n  }\n\n  // Calculate maximum drawdown\n  async calculateMaxDrawdown(portfolioData) {\n    try {\n      // Simplified calculation - would need historical portfolio values for accuracy\n      const currentValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n      const costBasis = portfolioData.reduce((sum, h) => sum + h.cost_basis, 0);\n      \n      // Estimate max drawdown based on individual asset drawdowns\n      let maxDrawdown = 0;\n      for (const holding of portfolioData) {\n        const holdingDrawdown = Math.max(0, (holding.avg_cost - holding.current_price) / holding.avg_cost);\n        maxDrawdown = Math.max(maxDrawdown, holdingDrawdown);\n      }\n\n      return maxDrawdown * 100; // Return as percentage\n    } catch (error) {\n      this.logger.error('Max drawdown calculation failed', error);\n      return 0;\n    }\n  }\n\n  // Calculate beta to overall crypto market\n  async calculateBetaToMarket(portfolioData) {\n    try {\n      // Use BTC as market proxy\n      const marketReturns = await query(`\n        SELECT close_price, timestamp\n        FROM crypto_prices\n        WHERE symbol = 'BTC'\n          AND interval_type = '1d'\n          AND timestamp >= NOW() - INTERVAL '30 days'\n        ORDER BY timestamp\n      `);\n\n      if (marketReturns.rows.length < 2) return 1.0;\n\n      // Calculate market daily returns\n      const btcReturns = [];\n      for (let i = 1; i < marketReturns.rows.length; i++) {\n        const dailyReturn = (marketReturns.rows[i].close_price - marketReturns.rows[i-1].close_price) / \n          marketReturns.rows[i-1].close_price;\n        btcReturns.push(dailyReturn);\n      }\n\n      // Calculate portfolio beta (simplified)\n      const portfolioSymbols = portfolioData.map(h => h.symbol);\n      let weightedBeta = 0;\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n\n      for (const holding of portfolioData) {\n        const weight = (holding.quantity * holding.current_price) / totalValue;\n        const assetBeta = await this.calculateAssetBeta(holding.symbol, btcReturns);\n        weightedBeta += weight * assetBeta;\n      }\n\n      return weightedBeta;\n    } catch (error) {\n      this.logger.error('Beta calculation failed', error);\n      return 1.0;\n    }\n  }\n\n  // Helper function to calculate individual asset beta\n  async calculateAssetBeta(symbol, marketReturns) {\n    try {\n      const assetPrices = await query(`\n        SELECT close_price, timestamp\n        FROM crypto_prices\n        WHERE symbol = $1\n          AND interval_type = '1d'\n          AND timestamp >= NOW() - INTERVAL '30 days'\n        ORDER BY timestamp\n      `, [symbol]);\n\n      if (assetPrices.rows.length < 2) return 1.0;\n\n      const assetReturns = [];\n      for (let i = 1; i < assetPrices.rows.length; i++) {\n        const dailyReturn = (assetPrices.rows[i].close_price - assetPrices.rows[i-1].close_price) / \n          assetPrices.rows[i-1].close_price;\n        assetReturns.push(dailyReturn);\n      }\n\n      // Calculate beta using covariance and variance\n      const minLength = Math.min(assetReturns.length, marketReturns.length);\n      const alignedAssetReturns = assetReturns.slice(0, minLength);\n      const alignedMarketReturns = marketReturns.slice(0, minLength);\n\n      const covariance = this.calculateCovariance(alignedAssetReturns, alignedMarketReturns);\n      const marketVariance = this.calculateVariance(alignedMarketReturns);\n\n      return marketVariance > 0 ? covariance / marketVariance : 1.0;\n    } catch (error) {\n      this.logger.error('Asset beta calculation failed', error, { symbol });\n      return 1.0;\n    }\n  }\n\n  // Calculate sector breakdown\n  async calculateSectorBreakdown(portfolioData) {\n    try {\n      // Map crypto assets to sectors/categories\n      const sectorMapping = {\n        'BTC': 'Store of Value',\n        'ETH': 'Smart Contract Platform',\n        'BNB': 'Exchange Token',\n        'ADA': 'Smart Contract Platform',\n        'SOL': 'Smart Contract Platform',\n        'DOT': 'Interoperability',\n        'LINK': 'Oracle',\n        'UNI': 'DeFi',\n        'AAVE': 'DeFi',\n        'USDT': 'Stablecoin',\n        'USDC': 'Stablecoin'\n      };\n\n      const sectorBreakdown = {};\n      const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n\n      for (const holding of portfolioData) {\n        const sector = sectorMapping[holding.symbol] || 'Other';\n        const value = holding.quantity * holding.current_price;\n        \n        if (!sectorBreakdown[sector]) {\n          sectorBreakdown[sector] = { value: 0, percentage: 0, assets: [] };\n        }\n        \n        sectorBreakdown[sector].value += value;\n        sectorBreakdown[sector].assets.push(holding.symbol);\n      }\n\n      // Calculate percentages\n      Object.keys(sectorBreakdown).forEach(sector => {\n        sectorBreakdown[sector].percentage = (sectorBreakdown[sector].value / totalValue) * 100;\n      });\n\n      return sectorBreakdown;\n    } catch (error) {\n      this.logger.error('Sector breakdown calculation failed', error);\n      return {};\n    }\n  }\n\n  // Calculate performance attribution\n  async calculatePerformanceAttribution(portfolioData) {\n    try {\n      const attribution = {\n        assetSelection: 0,\n        marketTiming: 0,\n        totalAttribution: 0\n      };\n\n      // Simplified attribution analysis\n      for (const holding of portfolioData) {\n        const holdingReturn = holding.current_price > holding.avg_cost ? \n          ((holding.current_price - holding.avg_cost) / holding.avg_cost) * 100 : 0;\n        \n        const weight = (holding.quantity * holding.current_price) / \n          portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n        \n        attribution.assetSelection += weight * holdingReturn;\n      }\n\n      attribution.totalAttribution = attribution.assetSelection + attribution.marketTiming;\n\n      return attribution;\n    } catch (error) {\n      this.logger.error('Performance attribution calculation failed', error);\n      return { assetSelection: 0, marketTiming: 0, totalAttribution: 0 };\n    }\n  }\n\n  // Utility functions\n  calculateVariance(returns) {\n    if (returns.length === 0) return 0;\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / returns.length;\n    return variance;\n  }\n\n  calculateCovariance(returns1, returns2) {\n    if (returns1.length !== returns2.length || returns1.length === 0) return 0;\n    \n    const mean1 = returns1.reduce((sum, r) => sum + r, 0) / returns1.length;\n    const mean2 = returns2.reduce((sum, r) => sum + r, 0) / returns2.length;\n    \n    const covariance = returns1.reduce((sum, r1, i) => {\n      return sum + (r1 - mean1) * (returns2[i] - mean2);\n    }, 0) / returns1.length;\n    \n    return covariance;\n  }\n\n  calculateCorrelationCoefficient(returns1, returns2) {\n    const covariance = this.calculateCovariance(returns1, returns2);\n    const std1 = Math.sqrt(this.calculateVariance(returns1));\n    const std2 = Math.sqrt(this.calculateVariance(returns2));\n    \n    return (std1 > 0 && std2 > 0) ? covariance / (std1 * std2) : 0;\n  }\n}\n\n// Initialize analytics engine\nconst portfolioAnalytics = new CryptoPortfolioAnalytics();\n\n// GET /crypto-advanced/portfolio/:userId - Advanced portfolio analytics\nrouter.get('/portfolio/:userId', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    const { userId } = req.params;\n    \n    logger.info('Crypto advanced portfolio analytics request', {\n      user_id: userId,\n      correlation_id: correlationId\n    });\n\n    // Get user's crypto portfolio (mock data for now - would integrate with actual portfolio service)\n    const portfolioData = [\n      { symbol: 'BTC', quantity: 0.5, current_price: 45000, avg_cost: 40000, cost_basis: 20000 },\n      { symbol: 'ETH', quantity: 2.0, current_price: 2800, avg_cost: 2500, cost_basis: 5000 },\n      { symbol: 'ADA', quantity: 1000, current_price: 0.45, avg_cost: 0.50, cost_basis: 500 },\n      { symbol: 'SOL', quantity: 10, current_price: 25, avg_cost: 30, cost_basis: 300 }\n    ];\n\n    // Calculate comprehensive analytics\n    const analytics = await portfolioAnalytics.calculatePortfolioMetrics(userId, portfolioData);\n\n    // Add additional insights\n    const insights = {\n      riskLevel: analytics.volatility > 50 ? 'High' : analytics.volatility > 25 ? 'Medium' : 'Low',\n      diversificationGrade: analytics.diversificationScore > 80 ? 'A' : \n                           analytics.diversificationScore > 60 ? 'B' : \n                           analytics.diversificationScore > 40 ? 'C' : 'D',\n      recommendations: await generatePortfolioRecommendations(analytics, portfolioData)\n    };\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_advanced_portfolio_analytics', duration, {\n      user_id: userId,\n      correlation_id: correlationId,\n      total_value: analytics.totalValue,\n      holdings_count: portfolioData.length\n    });\n\n    res.json({\n      success: true,\n      data: {\n        portfolio: portfolioData,\n        analytics,\n        insights,\n        metadata: {\n          calculation_time_ms: duration,\n          correlation_id: correlationId,\n          timestamp: new Date().toISOString()\n        }\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto advanced portfolio analytics failed', error, {\n      user_id: req.params.userId,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate advanced portfolio analytics',\n      error_code: 'CRYPTO_PORTFOLIO_ANALYTICS_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\n// Generate portfolio recommendations\nasync function generatePortfolioRecommendations(analytics, portfolioData) {\n  const recommendations = [];\n\n  // Diversification recommendations\n  if (analytics.diversificationScore < 50) {\n    recommendations.push({\n      type: 'diversification',\n      priority: 'high',\n      message: 'Consider adding more assets to improve diversification',\n      action: 'Add 2-3 uncorrelated assets from different sectors'\n    });\n  }\n\n  // Risk management recommendations\n  if (analytics.volatility > 60) {\n    recommendations.push({\n      type: 'risk_management',\n      priority: 'high',\n      message: 'Portfolio volatility is high - consider rebalancing',\n      action: 'Reduce allocation to high-volatility assets or add stablecoins'\n    });\n  }\n\n  // Performance recommendations\n  if (analytics.sharpeRatio < 1.0) {\n    recommendations.push({\n      type: 'performance',\n      priority: 'medium',\n      message: 'Sharpe ratio below optimal level',\n      action: 'Consider rebalancing toward assets with better risk-adjusted returns'\n    });\n  }\n\n  // Sector concentration recommendations\n  const totalValue = portfolioData.reduce((sum, h) => sum + (h.quantity * h.current_price), 0);\n  for (const holding of portfolioData) {\n    const weight = (holding.quantity * holding.current_price) / totalValue;\n    if (weight > 0.5) {\n      recommendations.push({\n        type: 'concentration',\n        priority: 'high',\n        message: `Over-concentrated in ${holding.symbol} (${(weight * 100).toFixed(1)}%)`,\n        action: 'Consider reducing position size to improve diversification'\n      });\n    }\n  }\n\n  return recommendations;\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}