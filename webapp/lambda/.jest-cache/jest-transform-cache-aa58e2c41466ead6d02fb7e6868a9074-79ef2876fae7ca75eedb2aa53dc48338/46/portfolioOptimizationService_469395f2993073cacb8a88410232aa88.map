{"version":3,"names":["PortfolioOptimizationService","constructor","rebalancingStrategies","thresholdRebalancing","bind","timeBasedRebalancing","volatilityBasedRebalancing","riskParityRebalancing","momentumRebalancing","meanReversionRebalancing","optimizePortfolio","portfolio","marketData","options","strategy","targetAllocations","rebalanceThreshold","maxTurnover","minTradeSize","taxOptimization","riskTolerance","holdings","Error","Object","keys","length","currentMetrics","calculatePortfolioMetrics","rebalanceRecommendations","generateRebalancingRecommendations","optimizedRecommendations","applyTaxOptimization","riskAnalysis","analyzePortfolioRisk","performanceAttribution","calculatePerformanceAttribution","optimization","taxOptimized","estimatedTaxImpact","estimateTaxImpact","turnover","calculateTurnover","implementationCost","estimateImplementationCost","timestamp","Date","toISOString","totalValue","positions","forEach","holding","symbol","shares","currentPrice","price","averagePrice","positionValue","push","unrealizedPnL","unrealizedPnLPercent","sector","marketCap","allocations","map","pos","allocation","sectorAllocations","calculateSectorAllocations","riskMetrics","calculateRiskMetrics","diversificationMetrics","calculateDiversificationMetrics","positionCount","cashPosition","cash","totalPortfolioValue","recommendations","entries","targetPercent","currentPosition","find","p","currentPercent","deviation","Math","abs","targetValue","currentValue","adjustmentNeeded","sharesAdjustment","round","action","estimatedCost","reason","toFixed","priority","sort","a","b","rebalanceFrequency","lastRebalanceDate","now","intervals","interval","QUARTERLY","riskContributions","volatility","calculateVolatility","riskContribution","totalRisk","reduce","sum","rc","targetRiskPerPosition","currentRiskPercent","targetRiskPercent","adjustmentFactor","currentShares","targetShares","riskAdjustment","lossPositions","filter","position","unrealizedLoss","existingRecommendation","r","estimatedTaxSavings","optimizeExecutionOrder","priorityOrder","beta","sharpeRatio","var95","maxDrawdown","weightedBeta","weightedVolatility","weight","calculateSharpeRatio","calculateMaxDrawdown","concentration","calculateConcentrationRisk","totalReturn","returnPercent","riskFreeRate","sectorMap","Map","currentAllocation","get","set","Array","from","count","herfindahlIndex","effectivePositions","concentrationRatio","diversificationScore","sortedPositions","top5Allocation","slice","max","maxAllocation","totalUnrealizedPnL","min","attributions","marketReturn","sectorReturn","marketContribution","sectorContribution","stockSpecific","totals","acc","attr","byPosition","summary","marketEffect","sectorEffect","selectionEffect","totalEffect","shortTermTaxRate","longTermTaxRate","estimatedTaxLiability","rec","h","costBasis","proceeds","gain","shortTermRate","longTermRate","taxOptimizationSavings","totalTradeValue","commissionPerTrade","spreadCost","totalCost","tradeValue","commissionCost","metrics","riskLevels","maxVolatility","maxConcentration","maxBeta","targetRisk","MODERATE","currentRisk","riskAlerts","type","severity","message","recommendation","riskScore","calculateRiskScore","generateRiskRecommendations","volatilityScore","concentrationScore","betaScore","overallScore","overall","rating","alert","description","getAvailableStrategies","key","id","name","replace","toLowerCase","l","toUpperCase","getStrategyDescription","descriptions","module","exports"],"sources":["portfolioOptimizationService.js"],"sourcesContent":["// Portfolio Optimization Service\n// Implements automated rebalancing, tax optimization, and advanced analytics\n\nclass PortfolioOptimizationService {\n  constructor() {\n    this.rebalancingStrategies = {\n      'THRESHOLD': this.thresholdRebalancing.bind(this),\n      'TIME_BASED': this.timeBasedRebalancing.bind(this),\n      'VOLATILITY_BASED': this.volatilityBasedRebalancing.bind(this),\n      'RISK_PARITY': this.riskParityRebalancing.bind(this),\n      'MOMENTUM': this.momentumRebalancing.bind(this),\n      'MEAN_REVERSION': this.meanReversionRebalancing.bind(this)\n    };\n  }\n\n  // Main portfolio optimization method\n  async optimizePortfolio(portfolio, marketData, options = {}) {\n    const {\n      strategy = 'THRESHOLD',\n      targetAllocations = {},\n      rebalanceThreshold = 0.05, // 5%\n      maxTurnover = 0.25, // 25%\n      minTradeSize = 100,\n      taxOptimization = true,\n      riskTolerance = 'MODERATE'\n    } = options;\n\n    // Validate inputs\n    if (!portfolio || !portfolio.holdings) {\n      throw new Error('Invalid portfolio data');\n    }\n\n    if (!marketData || Object.keys(marketData).length === 0) {\n      throw new Error('Market data required for optimization');\n    }\n\n    // Calculate current portfolio metrics\n    const currentMetrics = this.calculatePortfolioMetrics(portfolio, marketData);\n    \n    // Generate rebalancing recommendations\n    const rebalanceRecommendations = await this.generateRebalancingRecommendations(\n      portfolio, \n      marketData, \n      targetAllocations, \n      strategy,\n      options\n    );\n\n    // Apply tax optimization if enabled\n    let optimizedRecommendations = rebalanceRecommendations;\n    if (taxOptimization) {\n      optimizedRecommendations = this.applyTaxOptimization(\n        rebalanceRecommendations,\n        portfolio,\n        marketData\n      );\n    }\n\n    // Risk analysis\n    const riskAnalysis = this.analyzePortfolioRisk(portfolio, marketData, riskTolerance);\n\n    // Performance attribution\n    const performanceAttribution = this.calculatePerformanceAttribution(\n      portfolio,\n      marketData\n    );\n\n    return {\n      currentMetrics,\n      rebalanceRecommendations: optimizedRecommendations,\n      riskAnalysis,\n      performanceAttribution,\n      optimization: {\n        strategy,\n        taxOptimized: taxOptimization,\n        estimatedTaxImpact: this.estimateTaxImpact(optimizedRecommendations, portfolio),\n        turnover: this.calculateTurnover(optimizedRecommendations, portfolio),\n        implementationCost: this.estimateImplementationCost(optimizedRecommendations)\n      },\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Calculate comprehensive portfolio metrics\n  calculatePortfolioMetrics(portfolio, marketData) {\n    const holdings = portfolio.holdings || [];\n    let totalValue = 0;\n    const positions = [];\n\n    // Calculate individual position metrics\n    holdings.forEach(holding => {\n      const symbol = holding.symbol;\n      const shares = holding.shares || 0;\n      const currentPrice = marketData[symbol]?.price || holding.averagePrice || 0;\n      const positionValue = shares * currentPrice;\n      \n      totalValue += positionValue;\n      \n      positions.push({\n        symbol,\n        shares,\n        currentPrice,\n        positionValue,\n        averagePrice: holding.averagePrice || 0,\n        unrealizedPnL: shares * (currentPrice - (holding.averagePrice || 0)),\n        unrealizedPnLPercent: holding.averagePrice ? \n          ((currentPrice - holding.averagePrice) / holding.averagePrice) * 100 : 0,\n        sector: marketData[symbol]?.sector || 'Unknown',\n        marketCap: marketData[symbol]?.marketCap || 0\n      });\n    });\n\n    // Calculate allocations\n    const allocations = positions.map(pos => ({\n      ...pos,\n      allocation: totalValue > 0 ? (pos.positionValue / totalValue) * 100 : 0\n    }));\n\n    // Sector allocation\n    const sectorAllocations = this.calculateSectorAllocations(allocations);\n\n    // Risk metrics\n    const riskMetrics = this.calculateRiskMetrics(positions, marketData);\n\n    // Diversification metrics\n    const diversificationMetrics = this.calculateDiversificationMetrics(allocations);\n\n    return {\n      totalValue,\n      positionCount: positions.length,\n      positions: allocations,\n      sectorAllocations,\n      riskMetrics,\n      diversificationMetrics,\n      cashPosition: portfolio.cash || 0,\n      totalPortfolioValue: totalValue + (portfolio.cash || 0)\n    };\n  }\n\n  // Threshold-based rebalancing\n  async thresholdRebalancing(portfolio, marketData, targetAllocations, options) {\n    const { rebalanceThreshold = 0.05 } = options;\n    const currentMetrics = this.calculatePortfolioMetrics(portfolio, marketData);\n    const recommendations = [];\n\n    Object.entries(targetAllocations).forEach(([symbol, targetPercent]) => {\n      const currentPosition = currentMetrics.positions.find(p => p.symbol === symbol);\n      const currentPercent = currentPosition ? currentPosition.allocation : 0;\n      const deviation = Math.abs(currentPercent - targetPercent);\n\n      if (deviation > rebalanceThreshold * 100) {\n        const targetValue = (targetPercent / 100) * currentMetrics.totalPortfolioValue;\n        const currentValue = currentPosition ? currentPosition.positionValue : 0;\n        const adjustmentNeeded = targetValue - currentValue;\n        const currentPrice = marketData[symbol]?.price || 0;\n\n        if (currentPrice > 0) {\n          const sharesAdjustment = Math.round(adjustmentNeeded / currentPrice);\n          \n          recommendations.push({\n            symbol,\n            action: sharesAdjustment > 0 ? 'BUY' : 'SELL',\n            shares: Math.abs(sharesAdjustment),\n            currentPrice,\n            estimatedCost: Math.abs(adjustmentNeeded),\n            reason: `Rebalance: ${currentPercent.toFixed(1)}% â†’ ${targetPercent.toFixed(1)}%`,\n            priority: deviation > rebalanceThreshold * 200 ? 'HIGH' : 'MEDIUM',\n            deviation: deviation\n          });\n        }\n      }\n    });\n\n    return recommendations.sort((a, b) => b.deviation - a.deviation);\n  }\n\n  // Time-based rebalancing\n  async timeBasedRebalancing(portfolio, marketData, targetAllocations, options) {\n    const { rebalanceFrequency = 'QUARTERLY' } = options;\n    const lastRebalanceDate = portfolio.lastRebalanceDate || 0;\n    const now = Date.now();\n    \n    const intervals = {\n      'MONTHLY': 30 * 24 * 60 * 60 * 1000,\n      'QUARTERLY': 90 * 24 * 60 * 60 * 1000,\n      'SEMI_ANNUALLY': 180 * 24 * 60 * 60 * 1000,\n      'ANNUALLY': 365 * 24 * 60 * 60 * 1000\n    };\n\n    const interval = intervals[rebalanceFrequency] || intervals.QUARTERLY;\n    \n    if (now - lastRebalanceDate >= interval) {\n      // Force rebalance regardless of threshold\n      return this.thresholdRebalancing(portfolio, marketData, targetAllocations, {\n        ...options,\n        rebalanceThreshold: 0 // Force all positions to rebalance\n      });\n    }\n\n    return [];\n  }\n\n  // Risk parity rebalancing\n  async riskParityRebalancing(portfolio, marketData, targetAllocations, options) {\n    const positions = portfolio.holdings || [];\n    const recommendations = [];\n\n    // Calculate risk contribution for each position\n    const riskContributions = positions.map(holding => {\n      const symbol = holding.symbol;\n      const volatility = this.calculateVolatility(symbol, marketData);\n      const positionValue = holding.shares * (marketData[symbol]?.price || 0);\n      \n      return {\n        symbol,\n        volatility,\n        positionValue,\n        riskContribution: positionValue * volatility\n      };\n    });\n\n    const totalRisk = riskContributions.reduce((sum, rc) => sum + rc.riskContribution, 0);\n    const targetRiskPerPosition = totalRisk / riskContributions.length;\n\n    riskContributions.forEach(rc => {\n      const currentRiskPercent = totalRisk > 0 ? (rc.riskContribution / totalRisk) * 100 : 0;\n      const targetRiskPercent = (targetRiskPerPosition / totalRisk) * 100;\n      const deviation = Math.abs(currentRiskPercent - targetRiskPercent);\n\n      if (deviation > 5) { // 5% risk allocation deviation\n        const adjustmentFactor = targetRiskPercent / currentRiskPercent;\n        const currentShares = positions.find(p => p.symbol === rc.symbol)?.shares || 0;\n        const targetShares = Math.round(currentShares * adjustmentFactor);\n        const sharesAdjustment = targetShares - currentShares;\n\n        if (Math.abs(sharesAdjustment) > 0) {\n          recommendations.push({\n            symbol: rc.symbol,\n            action: sharesAdjustment > 0 ? 'BUY' : 'SELL',\n            shares: Math.abs(sharesAdjustment),\n            currentPrice: marketData[rc.symbol]?.price || 0,\n            estimatedCost: Math.abs(sharesAdjustment) * (marketData[rc.symbol]?.price || 0),\n            reason: `Risk parity: ${currentRiskPercent.toFixed(1)}% â†’ ${targetRiskPercent.toFixed(1)}% risk`,\n            priority: 'MEDIUM',\n            riskAdjustment: true\n          });\n        }\n      }\n    });\n\n    return recommendations;\n  }\n\n  // Tax-loss harvesting\n  applyTaxOptimization(recommendations, portfolio, marketData) {\n    const optimizedRecommendations = [...recommendations];\n    const holdings = portfolio.holdings || [];\n\n    // Identify positions with unrealized losses\n    const lossPositions = holdings.filter(holding => {\n      const currentPrice = marketData[holding.symbol]?.price || 0;\n      const unrealizedPnL = holding.shares * (currentPrice - (holding.averagePrice || 0));\n      return unrealizedPnL < 0;\n    });\n\n    // Add tax-loss harvesting opportunities\n    lossPositions.forEach(position => {\n      const currentPrice = marketData[position.symbol]?.price || 0;\n      const unrealizedLoss = position.shares * (currentPrice - (position.averagePrice || 0));\n      \n      // Only harvest if loss is significant\n      if (unrealizedLoss < -500) { // $500 minimum loss\n        const existingRecommendation = optimizedRecommendations.find(r => r.symbol === position.symbol);\n        \n        if (!existingRecommendation) {\n          optimizedRecommendations.push({\n            symbol: position.symbol,\n            action: 'SELL',\n            shares: position.shares,\n            currentPrice,\n            estimatedCost: position.shares * currentPrice,\n            reason: `Tax-loss harvesting: Realize $${Math.abs(unrealizedLoss).toFixed(2)} loss`,\n            priority: 'LOW',\n            taxOptimization: true,\n            estimatedTaxSavings: Math.abs(unrealizedLoss) * 0.25 // Assume 25% tax rate\n          });\n        }\n      }\n    });\n\n    // Optimize order of execution for tax efficiency\n    return this.optimizeExecutionOrder(optimizedRecommendations, portfolio);\n  }\n\n  // Optimize execution order for tax efficiency\n  optimizeExecutionOrder(recommendations, portfolio) {\n    // Sort recommendations to minimize tax impact\n    return recommendations.sort((a, b) => {\n      // Prioritize tax-loss harvesting\n      if (a.taxOptimization && !b.taxOptimization) return -1;\n      if (!a.taxOptimization && b.taxOptimization) return 1;\n      \n      // Then by priority\n      const priorityOrder = { 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1 };\n      return (priorityOrder[b.priority] || 0) - (priorityOrder[a.priority] || 0);\n    });\n  }\n\n  // Calculate portfolio risk metrics\n  calculateRiskMetrics(positions, marketData) {\n    if (positions.length === 0) {\n      return {\n        beta: 1.0,\n        volatility: 0,\n        sharpeRatio: 0,\n        var95: 0,\n        maxDrawdown: 0\n      };\n    }\n\n    // Calculate weighted average beta\n    let totalValue = positions.reduce((sum, pos) => sum + pos.positionValue, 0);\n    let weightedBeta = 0;\n    let weightedVolatility = 0;\n\n    positions.forEach(position => {\n      const weight = position.positionValue / totalValue;\n      const beta = marketData[position.symbol]?.beta || 1.0;\n      const volatility = this.calculateVolatility(position.symbol, marketData);\n      \n      weightedBeta += weight * beta;\n      weightedVolatility += weight * volatility;\n    });\n\n    // Calculate Value at Risk (simplified)\n    const var95 = totalValue * 0.05 * weightedVolatility; // 5% probability of loss\n\n    return {\n      beta: weightedBeta,\n      volatility: weightedVolatility,\n      sharpeRatio: this.calculateSharpeRatio(positions, marketData),\n      var95,\n      maxDrawdown: this.calculateMaxDrawdown(positions, marketData),\n      concentration: this.calculateConcentrationRisk(positions)\n    };\n  }\n\n  // Calculate Sharpe ratio\n  calculateSharpeRatio(positions, marketData) {\n    // Simplified calculation - would need historical returns for accurate calculation\n    const totalValue = positions.reduce((sum, pos) => sum + pos.positionValue, 0);\n    const totalReturn = positions.reduce((sum, pos) => sum + pos.unrealizedPnL, 0);\n    const returnPercent = totalValue > 0 ? (totalReturn / totalValue) * 100 : 0;\n    const riskFreeRate = 2.5; // Assume 2.5% risk-free rate\n    const volatility = this.calculateRiskMetrics(positions, marketData).volatility;\n    \n    return volatility > 0 ? (returnPercent - riskFreeRate) / volatility : 0;\n  }\n\n  // Calculate volatility for a symbol\n  calculateVolatility(symbol, marketData) {\n    // Simplified volatility calculation\n    // In production, this would use historical price data\n    return marketData[symbol]?.volatility || 0.2; // Default 20% volatility\n  }\n\n  // Calculate sector allocations\n  calculateSectorAllocations(positions) {\n    const sectorMap = new Map();\n    \n    positions.forEach(position => {\n      const sector = position.sector || 'Unknown';\n      const currentAllocation = sectorMap.get(sector) || 0;\n      sectorMap.set(sector, currentAllocation + position.allocation);\n    });\n\n    return Array.from(sectorMap.entries()).map(([sector, allocation]) => ({\n      sector,\n      allocation: allocation,\n      count: positions.filter(p => p.sector === sector).length\n    })).sort((a, b) => b.allocation - a.allocation);\n  }\n\n  // Calculate diversification metrics\n  calculateDiversificationMetrics(positions) {\n    if (positions.length === 0) {\n      return {\n        herfindahlIndex: 1,\n        effectivePositions: 0,\n        concentrationRatio: 100,\n        diversificationScore: 0\n      };\n    }\n\n    // Herfindahl-Hirschman Index\n    const herfindahlIndex = positions.reduce((sum, pos) => {\n      const weight = pos.allocation / 100;\n      return sum + (weight * weight);\n    }, 0);\n\n    // Effective number of positions\n    const effectivePositions = 1 / herfindahlIndex;\n\n    // Concentration ratio (top 5 positions)\n    const sortedPositions = [...positions].sort((a, b) => b.allocation - a.allocation);\n    const top5Allocation = sortedPositions.slice(0, 5).reduce((sum, pos) => sum + pos.allocation, 0);\n\n    // Diversification score (0-100, higher is better)\n    const diversificationScore = Math.max(0, 100 - (herfindahlIndex * 100));\n\n    return {\n      herfindahlIndex,\n      effectivePositions,\n      concentrationRatio: top5Allocation,\n      diversificationScore,\n      positionCount: positions.length\n    };\n  }\n\n  // Calculate concentration risk\n  calculateConcentrationRisk(positions) {\n    if (positions.length === 0) return 100;\n    \n    const maxAllocation = Math.max(...positions.map(p => p.allocation));\n    return maxAllocation;\n  }\n\n  // Calculate maximum drawdown\n  calculateMaxDrawdown(positions, marketData) {\n    // Simplified calculation\n    // In production, this would use historical portfolio values\n    const totalUnrealizedPnL = positions.reduce((sum, pos) => sum + pos.unrealizedPnL, 0);\n    const totalValue = positions.reduce((sum, pos) => sum + pos.positionValue, 0);\n    \n    return totalValue > 0 ? Math.min(0, (totalUnrealizedPnL / totalValue) * 100) : 0;\n  }\n\n  // Performance attribution analysis\n  calculatePerformanceAttribution(portfolio, marketData) {\n    const holdings = portfolio.holdings || [];\n    const attributions = [];\n\n    holdings.forEach(holding => {\n      const currentPrice = marketData[holding.symbol]?.price || 0;\n      const unrealizedPnL = holding.shares * (currentPrice - (holding.averagePrice || 0));\n      const marketReturn = marketData[holding.symbol]?.marketReturn || 0;\n      const sectorReturn = marketData[holding.symbol]?.sectorReturn || 0;\n      \n      // Attribution breakdown\n      const marketContribution = holding.shares * holding.averagePrice * (marketReturn / 100);\n      const sectorContribution = holding.shares * holding.averagePrice * ((sectorReturn - marketReturn) / 100);\n      const stockSpecific = unrealizedPnL - marketContribution - sectorContribution;\n\n      attributions.push({\n        symbol: holding.symbol,\n        totalReturn: unrealizedPnL,\n        marketContribution,\n        sectorContribution,\n        stockSpecific,\n        allocation: (holding.shares * currentPrice) / portfolio.totalValue * 100\n      });\n    });\n\n    const totals = attributions.reduce((acc, attr) => ({\n      totalReturn: acc.totalReturn + attr.totalReturn,\n      marketContribution: acc.marketContribution + attr.marketContribution,\n      sectorContribution: acc.sectorContribution + attr.sectorContribution,\n      stockSpecific: acc.stockSpecific + attr.stockSpecific\n    }), { totalReturn: 0, marketContribution: 0, sectorContribution: 0, stockSpecific: 0 });\n\n    return {\n      byPosition: attributions,\n      totals,\n      summary: {\n        marketEffect: totals.marketContribution,\n        sectorEffect: totals.sectorContribution,\n        selectionEffect: totals.stockSpecific,\n        totalEffect: totals.totalReturn\n      }\n    };\n  }\n\n  // Estimate tax impact\n  estimateTaxImpact(recommendations, portfolio) {\n    const shortTermTaxRate = 0.37; // 37% for short-term gains\n    const longTermTaxRate = 0.20;  // 20% for long-term gains\n    let estimatedTaxLiability = 0;\n\n    recommendations.forEach(rec => {\n      if (rec.action === 'SELL') {\n        const holding = portfolio.holdings?.find(h => h.symbol === rec.symbol);\n        if (holding) {\n          const costBasis = holding.averagePrice * rec.shares;\n          const proceeds = rec.currentPrice * rec.shares;\n          const gain = proceeds - costBasis;\n          \n          if (gain > 0) {\n            // Assume long-term for simplicity\n            estimatedTaxLiability += gain * longTermTaxRate;\n          }\n        }\n      }\n    });\n\n    return {\n      estimatedTaxLiability,\n      shortTermRate: shortTermTaxRate * 100,\n      longTermRate: longTermTaxRate * 100,\n      taxOptimizationSavings: recommendations\n        .filter(r => r.taxOptimization)\n        .reduce((sum, r) => sum + (r.estimatedTaxSavings || 0), 0)\n    };\n  }\n\n  // Calculate turnover\n  calculateTurnover(recommendations, portfolio) {\n    const totalPortfolioValue = portfolio.totalValue || 0;\n    const totalTradeValue = recommendations.reduce((sum, rec) => {\n      return sum + (rec.shares * rec.currentPrice);\n    }, 0);\n\n    return totalPortfolioValue > 0 ? (totalTradeValue / totalPortfolioValue) * 100 : 0;\n  }\n\n  // Estimate implementation cost\n  estimateImplementationCost(recommendations) {\n    const commissionPerTrade = 0; // Assume commission-free trading\n    const spreadCost = 0.001; // 0.1% spread cost\n    \n    let totalCost = recommendations.length * commissionPerTrade;\n    \n    recommendations.forEach(rec => {\n      const tradeValue = rec.shares * rec.currentPrice;\n      totalCost += tradeValue * spreadCost;\n    });\n\n    return {\n      commissionCost: recommendations.length * commissionPerTrade,\n      spreadCost: totalCost - (recommendations.length * commissionPerTrade),\n      totalCost\n    };\n  }\n\n  // Analyze portfolio risk\n  analyzePortfolioRisk(portfolio, marketData, riskTolerance) {\n    const metrics = this.calculatePortfolioMetrics(portfolio, marketData);\n    const riskLevels = {\n      'CONSERVATIVE': { maxVolatility: 0.1, maxConcentration: 10, maxBeta: 0.8 },\n      'MODERATE': { maxVolatility: 0.15, maxConcentration: 15, maxBeta: 1.0 },\n      'AGGRESSIVE': { maxVolatility: 0.25, maxConcentration: 25, maxBeta: 1.3 }\n    };\n\n    const targetRisk = riskLevels[riskTolerance] || riskLevels.MODERATE;\n    const currentRisk = metrics.riskMetrics;\n    \n    const riskAlerts = [];\n    \n    if (currentRisk.volatility > targetRisk.maxVolatility) {\n      riskAlerts.push({\n        type: 'HIGH_VOLATILITY',\n        severity: 'HIGH',\n        message: `Portfolio volatility (${(currentRisk.volatility * 100).toFixed(1)}%) exceeds target (${(targetRisk.maxVolatility * 100).toFixed(1)}%)`,\n        recommendation: 'Consider reducing exposure to volatile assets'\n      });\n    }\n\n    if (currentRisk.concentration > targetRisk.maxConcentration) {\n      riskAlerts.push({\n        type: 'HIGH_CONCENTRATION',\n        severity: 'MEDIUM',\n        message: `Highest position concentration (${currentRisk.concentration.toFixed(1)}%) exceeds target (${targetRisk.maxConcentration}%)`,\n        recommendation: 'Consider diversifying concentrated positions'\n      });\n    }\n\n    if (Math.abs(currentRisk.beta) > targetRisk.maxBeta) {\n      riskAlerts.push({\n        type: 'HIGH_BETA',\n        severity: 'MEDIUM',\n        message: `Portfolio beta (${currentRisk.beta.toFixed(2)}) exceeds target (${targetRisk.maxBeta})`,\n        recommendation: 'Consider adding defensive positions to reduce market sensitivity'\n      });\n    }\n\n    return {\n      riskTolerance,\n      targetRisk,\n      currentRisk,\n      riskAlerts,\n      riskScore: this.calculateRiskScore(currentRisk, targetRisk),\n      recommendations: this.generateRiskRecommendations(riskAlerts)\n    };\n  }\n\n  // Calculate overall risk score\n  calculateRiskScore(currentRisk, targetRisk) {\n    const volatilityScore = Math.min(1, currentRisk.volatility / targetRisk.maxVolatility);\n    const concentrationScore = Math.min(1, currentRisk.concentration / targetRisk.maxConcentration);\n    const betaScore = Math.min(1, Math.abs(currentRisk.beta) / targetRisk.maxBeta);\n    \n    const overallScore = (volatilityScore + concentrationScore + betaScore) / 3;\n    \n    return {\n      overall: Math.round(overallScore * 100),\n      volatility: Math.round(volatilityScore * 100),\n      concentration: Math.round(concentrationScore * 100),\n      beta: Math.round(betaScore * 100),\n      rating: overallScore < 0.7 ? 'LOW' : overallScore < 1.0 ? 'MODERATE' : 'HIGH'\n    };\n  }\n\n  // Generate risk-based recommendations\n  generateRiskRecommendations(riskAlerts) {\n    const recommendations = [];\n    \n    riskAlerts.forEach(alert => {\n      switch (alert.type) {\n        case 'HIGH_VOLATILITY':\n          recommendations.push({\n            action: 'DIVERSIFY',\n            description: 'Add low-volatility assets (bonds, utilities, REITs)',\n            priority: 'HIGH'\n          });\n          break;\n        case 'HIGH_CONCENTRATION':\n          recommendations.push({\n            action: 'REBALANCE',\n            description: 'Reduce position sizes in concentrated holdings',\n            priority: 'MEDIUM'\n          });\n          break;\n        case 'HIGH_BETA':\n          recommendations.push({\n            action: 'HEDGE',\n            description: 'Add defensive positions or consider market hedging',\n            priority: 'MEDIUM'\n          });\n          break;\n      }\n    });\n\n    return recommendations;\n  }\n\n  // Get available rebalancing strategies\n  getAvailableStrategies() {\n    return Object.keys(this.rebalancingStrategies).map(key => ({\n      id: key,\n      name: key.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase()),\n      description: this.getStrategyDescription(key)\n    }));\n  }\n\n  getStrategyDescription(strategy) {\n    const descriptions = {\n      'THRESHOLD': 'Rebalances when allocations deviate beyond specified threshold',\n      'TIME_BASED': 'Rebalances at regular time intervals regardless of drift',\n      'VOLATILITY_BASED': 'Adjusts allocations based on changing market volatility',\n      'RISK_PARITY': 'Maintains equal risk contribution from all positions',\n      'MOMENTUM': 'Increases allocation to outperforming assets',\n      'MEAN_REVERSION': 'Increases allocation to underperforming assets'\n    };\n    return descriptions[strategy] || 'Custom rebalancing strategy';\n  }\n}\n\nmodule.exports = PortfolioOptimizationService;"],"mappings":"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","ignoreList":[]}