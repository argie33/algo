{"version":3,"names":["cov_gqzgadq2p","actualCoverage","express","s","require","success","error","LiveDataManager","authenticateToken","AlpacaService","query","timeoutHelper","jwt","console","warn","message","router","Router","liveDataManager","alpacaService","activeFeeds","Map","feedMetrics","subscribers","get","req","res","f","json","status","service","timestamp","Date","toISOString","isRunning","activeUsers","activeSymbols","serviceState","Set","userSubscriptions","providerConnections","serviceMetrics","totalUsers","activeConnections","dataLatency","errorRate","lastUpdate","costSavings","startTime","authenticateUser","next","authHeader","headers","authorization","b","startsWith","msg","statusCode","details","token","replace","user","userId","username","verifier","CognitoJwtVerifier","create","userPoolId","process","env","COGNITO_USER_POOL_ID","tokenUse","clientId","COGNITO_CLIENT_ID","payload","verify","sub","metrics","getServiceMetrics","data","post","symbol","provider","body","result","subscribe","removeAll","userSymbols","forEach","sym","otherUsersSubscribed","Array","from","entries","some","otherUserId","otherSymbols","has","delete","log","responseFormatter","createSuccessResponse","removedAll","remainingActiveSymbols","size","createErrorResponse","upperSymbol","toUpperCase","values","unsubscribed","remainingUserSubscriptions","totalActiveSymbols","isAdmin","adminUsers","ADMIN_USER_ID","role","includes","totalConnections","feedsArray","feed","symbols","add","messagesPerSecond","reduce","total","id","usageQuery","dbMetrics","rows","total_users","total_requests","avg_response_time","Math","max","parseInt","adminMetrics","round","parseFloat","uptime","feedCount","totalRequests","map","subscriberCount","filter","subscribedFeeds","length","createdAt","assetType","dataTypes","feedId","now","random","toString","substr","feedConfig","createdBy","set","connect","subscribeToTrades","subscribeToQuotes","subscribeToBars","startedAt","messageCount","params","unsubscribe","push","q","searchQuery","type","searchResults","searchSymbols","start","stop","providers","architecture","description","benefits","module","exports"],"sources":["liveData.js"],"sourcesContent":["const express = require('express');\nconst { success, error } = require('../utils/responseFormatter');\nconst LiveDataManager = require('../utils/liveDataManager');\nconst { authenticateToken } = require('../middleware/auth');\nconst AlpacaService = require('../utils/alpacaService');\nconst { query } = require('../utils/database');\nconst timeoutHelper = require('../utils/timeoutHelper');\n\n// Import JWT authentication - handle errors gracefully\nlet jwt;\ntry {\n  jwt = require('aws-jwt-verify');\n} catch (error) {\n  console.warn('JWT verification not available:', error.message);\n}\n\nconst router = express.Router();\n\n// Initialize live data manager and Alpaca service\nconst liveDataManager = new LiveDataManager();\nconst alpacaService = new AlpacaService();\n\n// Active feeds storage (in production, use Redis)\nconst activeFeeds = new Map();\nconst feedMetrics = new Map();\nconst subscribers = new Map();\n\n// Basic health endpoint for live data service\nrouter.get('/health', (req, res) => {\n  res.json(success({\n    status: 'operational',\n    service: 'live-data',\n    timestamp: new Date().toISOString(),\n    message: 'Live Data service is running'\n  }));\n});\n\n// Basic status endpoint\nrouter.get('/status', (req, res) => {\n  res.json(success({\n    isRunning: true,\n    service: 'live-data',\n    activeUsers: 0,\n    activeSymbols: 0,\n    timestamp: new Date().toISOString()\n  }));\n});\n\n/**\n * Centralized Live Data Service Endpoints\n * Implements admin-managed live data architecture from FINANCIAL_PLATFORM_BLUEPRINT.md\n * \n * Key Features:\n * - Single websocket connection per symbol (not per user)\n * - Centralized caching and distribution\n * - Admin controls for service management\n * - Cost-efficient architecture with shared streams\n */\n\n// In-memory service state (Lambda-friendly)\nconst serviceState = {\n  isRunning: false,\n  activeSymbols: new Set(),\n  userSubscriptions: new Map(), // userId -> Set of symbols\n  providerConnections: new Map(), // provider -> connection status\n  serviceMetrics: {\n    totalUsers: 0,\n    activeConnections: 0,\n    dataLatency: 0,\n    errorRate: 0,\n    lastUpdate: null,\n    costSavings: 0\n  },\n  startTime: null\n};\n\n// Authentication middleware with proper JWT support\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json(((msg, statusCode = 500, details) => ({ success: false, error: msg, ...details, timestamp: new Date().toISOString() }))('Authentication required'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    if (!jwt) {\n      // Fallback if JWT not available\n      console.warn('JWT not available, using demo user');\n      req.user = { userId: 'demo-user', username: 'demo' };\n      return next();\n    }\n\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    req.user = { userId: payload.sub, username: payload.username };\n    next();\n  } catch (error) {\n    console.error('Authentication failed:', error);\n    return res.status(401).json(((msg, statusCode = 500, details) => ({ success: false, error: msg, ...details, timestamp: new Date().toISOString() }))('Invalid authentication token'));\n  }\n};\n\n/**\n * Get service metrics and health status\n */\nrouter.get('/metrics', authenticateToken, async (req, res) => {\n  try {\n    const metrics = liveDataManager.getServiceMetrics();\n    \n    res.json({\n      success: true,\n      data: metrics,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Failed to get service metrics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve service metrics',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n/**\n * Subscribe user to symbol data\n */\nrouter.post('/subscribe', authenticateToken, async (req, res) => {\n  try {\n    const { symbol, provider = 'alpaca' } = req.body;\n    const { userId } = req.user;\n\n    if (!symbol || typeof symbol !== 'string') {\n      return res.status(400).json({\n        success: false,\n        error: 'Valid symbol is required',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const result = await liveDataManager.subscribe(userId, symbol, provider);\n    \n    res.json({\n      success: result.success,\n      data: result.success ? result : null,\n      error: result.success ? null : result.error,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Failed to subscribe to symbol:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to subscribe to symbol',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n/**\n * Unsubscribe user from symbol data\n */\nrouter.post('/unsubscribe', authenticateUser, async (req, res) => {\n  try {\n    const { symbol, removeAll = false } = req.body;\n    const { userId } = req.user;\n\n    if (removeAll) {\n      // Remove all subscriptions for this user\n      const userSymbols = serviceState.userSubscriptions.get(userId);\n      if (userSymbols) {\n        userSymbols.forEach(sym => {\n          // Check if any other users are subscribed to this symbol\n          const otherUsersSubscribed = Array.from(serviceState.userSubscriptions.entries())\n            .some(([otherUserId, otherSymbols]) => \n              otherUserId !== userId && otherSymbols.has(sym));\n          \n          if (!otherUsersSubscribed) {\n            serviceState.activeSymbols.delete(sym);\n            console.log(`üóëÔ∏è Removed ${sym} from centralized stream (no more subscribers)`);\n          }\n        });\n        \n        serviceState.userSubscriptions.delete(userId);\n        console.log(`‚úÖ Removed all subscriptions for user ${userId}`);\n      }\n      \n      return res.json(responseFormatter.createSuccessResponse({\n        removedAll: true,\n        userId,\n        remainingActiveSymbols: serviceState.activeSymbols.size\n      }));\n    }\n\n    if (!symbol || typeof symbol !== 'string') {\n      return res.status(400).json(responseFormatter.createErrorResponse('Valid symbol is required'));\n    }\n\n    const upperSymbol = symbol.toUpperCase();\n    const userSymbols = serviceState.userSubscriptions.get(userId);\n    \n    if (userSymbols && userSymbols.has(upperSymbol)) {\n      userSymbols.delete(upperSymbol);\n      \n      // If user has no more subscriptions, remove them entirely\n      if (userSymbols.size === 0) {\n        serviceState.userSubscriptions.delete(userId);\n      }\n      \n      // Check if any other users are still subscribed to this symbol\n      const otherUsersSubscribed = Array.from(serviceState.userSubscriptions.values())\n        .some(otherSymbols => otherSymbols.has(upperSymbol));\n      \n      if (!otherUsersSubscribed) {\n        serviceState.activeSymbols.delete(upperSymbol);\n        console.log(`üóëÔ∏è Removed ${upperSymbol} from centralized stream (no more subscribers)`);\n      }\n      \n      console.log(`‚úÖ User ${userId} unsubscribed from ${upperSymbol}`);\n    }\n\n    res.json(responseFormatter.createSuccessResponse({\n      symbol: upperSymbol,\n      userId,\n      unsubscribed: true,\n      remainingUserSubscriptions: userSymbols ? userSymbols.size : 0,\n      totalActiveSymbols: serviceState.activeSymbols.size\n    }));\n\n  } catch (error) {\n    console.error('Failed to unsubscribe from symbol:', error);\n    res.status(500).json(responseFormatter.createErrorResponse('Failed to unsubscribe from symbol'));\n  }\n});\n\n/**\n * Start the centralized live data service\n */\n/**\n * ADMIN ENDPOINTS - Enhanced feed management\n */\n\n// Check if user is admin (basic check - enhance as needed)\nconst isAdmin = (req, res, next) => {\n  // For now, check if user has admin role or is specific admin user\n  const adminUsers = ['admin', 'administrator', process.env.ADMIN_USER_ID];\n  if (req.user && (req.user.role === 'admin' || adminUsers.includes(req.user.userId))) {\n    return next();\n  }\n  return res.status(403).json(error('Admin access required'));\n};\n\n/**\n * Admin: Get detailed system metrics\n */\nrouter.get('/admin/metrics', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    console.log('üìä Admin requesting detailed metrics');\n    \n    // Get real-time metrics\n    const totalConnections = subscribers.size;\n    const activeSymbols = new Set();\n    const feedsArray = Array.from(activeFeeds.values());\n    \n    feedsArray.forEach(feed => {\n      feed.symbols.forEach(symbol => activeSymbols.add(symbol));\n    });\n    \n    const messagesPerSecond = feedsArray.reduce((total, feed) => {\n      const metrics = feedMetrics.get(feed.id);\n      return total + (metrics?.messagesPerSecond || 0);\n    }, 0);\n    \n    // Get database metrics\n    const usageQuery = await query(`\n      SELECT \n        COUNT(DISTINCT user_id) as total_users,\n        COUNT(*) as total_requests,\n        AVG(response_time_ms) as avg_response_time\n      FROM api_usage_logs \n      WHERE service_type = 'live_data'\n      AND created_at > NOW() - INTERVAL '24 hours'\n    `);\n    \n    const dbMetrics = usageQuery.rows[0] || { total_users: 0, total_requests: 0, avg_response_time: 0 };\n    \n    // Calculate cost savings\n    const costSavings = Math.max(0, (parseInt(dbMetrics.total_users) * 50) - 200);\n    \n    const adminMetrics = {\n      totalConnections,\n      activeSymbols: activeSymbols.size,\n      messagesPerSecond,\n      totalUsers: parseInt(dbMetrics.total_users),\n      costSavings,\n      dataLatency: Math.round(parseFloat(dbMetrics.avg_response_time) || 15),\n      uptime: 99.8,\n      lastUpdate: new Date().toISOString(),\n      feedCount: activeFeeds.size,\n      totalRequests: parseInt(dbMetrics.total_requests)\n    };\n    \n    res.json(success(adminMetrics));\n  } catch (error) {\n    console.error('‚ùå Failed to get admin metrics:', error);\n    res.status(500).json(error('Failed to get admin metrics'));\n  }\n});\n\n/**\n * Admin: Get active feeds\n */\nrouter.get('/admin/feeds', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    console.log('üì° Admin requesting active feeds');\n    \n    const feedsArray = Array.from(activeFeeds.values()).map(feed => {\n      const metrics = feedMetrics.get(feed.id);\n      const subscriberCount = Array.from(subscribers.values())\n        .filter(sub => sub.subscribedFeeds?.includes(feed.id)).length;\n      \n      return {\n        ...feed,\n        subscriberCount,\n        messagesPerSecond: metrics?.messagesPerSecond || 0,\n        lastUpdate: metrics?.lastUpdate || feed.createdAt\n      };\n    });\n    \n    res.json(success(feedsArray));\n  } catch (error) {\n    console.error('‚ùå Failed to get active feeds:', error);\n    res.status(500).json(error('Failed to get active feeds'));\n  }\n});\n\n/**\n * Admin: Start new feed\n */\nrouter.post('/admin/feeds', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    const { assetType, dataTypes, symbols } = req.body;\n    \n    console.log('üöÄ Admin starting new feed:', { assetType, dataTypes, symbols });\n    \n    if (!assetType || !dataTypes || !symbols || symbols.length === 0) {\n      return res.status(400).json(error('Missing required fields'));\n    }\n    \n    const feedId = `feed-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    const feedConfig = {\n      id: feedId,\n      assetType,\n      dataTypes,\n      symbols: symbols.map(s => s.toUpperCase()),\n      status: 'starting',\n      createdAt: new Date().toISOString(),\n      createdBy: req.user.userId\n    };\n    \n    activeFeeds.set(feedId, feedConfig);\n    \n    try {\n      // Start Alpaca feed\n      await alpacaService.connect();\n      \n      if (dataTypes.includes('trades')) {\n        await alpacaService.subscribeToTrades(feedConfig.symbols);\n      }\n      if (dataTypes.includes('quotes')) {\n        await alpacaService.subscribeToQuotes(feedConfig.symbols);\n      }\n      if (dataTypes.includes('bars')) {\n        await alpacaService.subscribeToBars(feedConfig.symbols);\n      }\n      \n      feedConfig.status = 'running';\n      feedConfig.startedAt = new Date().toISOString();\n      \n      // Initialize metrics\n      feedMetrics.set(feedId, {\n        messagesPerSecond: 0,\n        lastUpdate: new Date().toISOString(),\n        messageCount: 0\n      });\n      \n      console.log(`‚úÖ Feed ${feedId} started successfully`);\n      res.json(success({ message: 'Feed started successfully', feed: feedConfig }));\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to start feed ${feedId}:`, error);\n      feedConfig.status = 'failed';\n      feedConfig.error = error.message;\n      res.status(500).json(error('Failed to start feed'));\n    }\n  } catch (error) {\n    console.error('‚ùå Failed to create feed:', error);\n    res.status(500).json(error('Failed to create feed'));\n  }\n});\n\n/**\n * Admin: Stop feed\n */\nrouter.delete('/admin/feeds/:feedId', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    const { feedId } = req.params;\n    \n    console.log(`‚èπÔ∏è Admin stopping feed: ${feedId}`);\n    \n    const feed = activeFeeds.get(feedId);\n    if (!feed) {\n      return res.status(404).json(error('Feed not found'));\n    }\n    \n    feed.status = 'stopping';\n    \n    try {\n      await alpacaService.unsubscribe(feed.symbols);\n      \n      activeFeeds.delete(feedId);\n      feedMetrics.delete(feedId);\n      \n      console.log(`‚úÖ Feed ${feedId} stopped successfully`);\n      res.json(success({ message: 'Feed stopped successfully' }));\n      \n    } catch (error) {\n      console.error(`‚ùå Failed to stop feed ${feedId}:`, error);\n      res.status(500).json(error('Failed to stop feed'));\n    }\n  } catch (error) {\n    console.error('‚ùå Failed to stop feed:', error);\n    res.status(500).json(error('Failed to stop feed'));\n  }\n});\n\n/**\n * Admin: Add symbol to feed\n */\nrouter.post('/admin/feeds/:feedId/symbols', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    const { feedId } = req.params;\n    const { symbol } = req.body;\n    \n    console.log(`‚ûï Admin adding symbol ${symbol} to feed ${feedId}`);\n    \n    const feed = activeFeeds.get(feedId);\n    if (!feed) {\n      return res.status(404).json(error('Feed not found'));\n    }\n    \n    if (!symbol) {\n      return res.status(400).json(error('Symbol is required'));\n    }\n    \n    const upperSymbol = symbol.toUpperCase();\n    \n    if (feed.symbols.includes(upperSymbol)) {\n      return res.status(400).json(error('Symbol already exists in feed'));\n    }\n    \n    feed.symbols.push(upperSymbol);\n    \n    // Subscribe to new symbol\n    if (feed.dataTypes.includes('trades')) {\n      await alpacaService.subscribeToTrades([upperSymbol]);\n    }\n    if (feed.dataTypes.includes('quotes')) {\n      await alpacaService.subscribeToQuotes([upperSymbol]);\n    }\n    if (feed.dataTypes.includes('bars')) {\n      await alpacaService.subscribeToBars([upperSymbol]);\n    }\n    \n    console.log(`‚úÖ Symbol ${upperSymbol} added to feed ${feedId}`);\n    res.json(success({ message: 'Symbol added successfully', feed: feed }));\n    \n  } catch (error) {\n    console.error('‚ùå Failed to add symbol:', error);\n    res.status(500).json(error('Failed to add symbol'));\n  }\n});\n\n/**\n * Admin: Search symbols\n */\nrouter.get('/admin/symbols/search', authenticateToken, isAdmin, async (req, res) => {\n  try {\n    const { q: searchQuery, type = 'stocks' } = req.query;\n    \n    console.log(`üîç Admin searching symbols: \"${searchQuery}\"`);\n    \n    if (!searchQuery || searchQuery.length < 1) {\n      return res.status(400).json(error('Search query is required'));\n    }\n    \n    const searchResults = await alpacaService.searchSymbols(searchQuery, type);\n    \n    res.json(success(searchResults));\n  } catch (error) {\n    console.error('‚ùå Failed to search symbols:', error);\n    res.status(500).json(error('Failed to search symbols'));\n  }\n});\n\n/**\n * Regular service endpoints\n */\nrouter.post('/start', authenticateToken, async (req, res) => {\n  try {\n    const result = await liveDataManager.start();\n    \n    res.json({\n      success: result.success,\n      data: result.success ? result : null,\n      error: result.success ? null : result.error,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Failed to start service:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to start live data service',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n/**\n * Stop the centralized live data service\n */\nrouter.post('/stop', authenticateToken, async (req, res) => {\n  try {\n    const result = await liveDataManager.stop();\n    \n    res.json({\n      success: result.success,\n      data: result.success ? result : null,\n      error: result.success ? null : result.error,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Failed to stop service:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to stop live data service',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n/**\n * Get current service configuration and status\n */\nrouter.get('/status', authenticateUser, async (req, res) => {\n  try {\n    const { userId } = req.user;\n    const userSubscriptions = serviceState.userSubscriptions.get(userId);\n    \n    res.json(responseFormatter.createSuccessResponse({\n      isRunning: serviceState.isRunning,\n      startTime: serviceState.startTime,\n      uptime: serviceState.startTime ? Date.now() - serviceState.startTime : 0,\n      userSubscriptions: userSubscriptions ? Array.from(userSubscriptions) : [],\n      totalActiveSymbols: serviceState.activeSymbols.size,\n      totalUsers: serviceState.userSubscriptions.size,\n      providers: Array.from(serviceState.providerConnections.entries()),\n      architecture: {\n        type: 'centralized',\n        description: 'Single connection per symbol, shared across all users',\n        benefits: ['Cost efficient', 'Reduced latency', 'Better reliability', 'Admin managed']\n      }\n    }));\n\n  } catch (error) {\n    console.error('Failed to get service status:', error);\n    res.status(500).json(responseFormatter.createErrorResponse('Failed to get service status'));\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}