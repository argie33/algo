{"version":3,"names":["cov_v3x1uoq4j","actualCoverage","ConnectionRetry","constructor","options","b","f","s","maxRetries","initialDelay","maxDelay","backoffMultiplier","jitterRange","retryableErrors","isRetryableError","error","errorMessage","message","toLowerCase","errorCode","code","toUpperCase","some","retryableError","checkError","includes","calculateDelay","attemptNumber","delay","Math","pow","min","jitter","random","max","execute","fn","context","retryId","toString","substr","lastError","console","log","attempt","startTime","Date","now","result","duration","success","attempts","totalDuration","isRetryable","isLastAttempt","retryable","lastAttempt","finalError","ms","Promise","resolve","setTimeout","createRetryableConnection","connectionFn","createRetryableQuery","queryFn","text","params","substring","executeWithCircuitBreaker","circuitBreakerKey","timeoutHelper","require","isCircuitOpen","Error","recordSuccess","recordFailure","getRetryStats","results","Array","isArray","stats","total","length","successful","failed","totalAttempts","averageAttempts","maxAttempts","minAttempts","Infinity","retriedOperations","forEach","successRate","retryRate","module","exports"],"sources":["connectionRetry.js"],"sourcesContent":["/**\n * Database Connection Retry Logic\n * Implements exponential backoff and intelligent retry strategies\n */\n\nclass ConnectionRetry {\n    constructor(options = {}) {\n        this.maxRetries = options.maxRetries || 5;\n        this.initialDelay = options.initialDelay || 1000; // 1 second\n        this.maxDelay = options.maxDelay || 30000; // 30 seconds\n        this.backoffMultiplier = options.backoffMultiplier || 2;\n        this.jitterRange = options.jitterRange || 0.1; // 10% jitter\n        this.retryableErrors = options.retryableErrors || [\n            'ECONNREFUSED',\n            'ENOTFOUND', \n            'ETIMEDOUT',\n            'ECONNRESET',\n            'EPIPE',\n            'connection terminated unexpectedly',\n            'Connection terminated',\n            'server closed the connection unexpectedly',\n            'timeout',\n            'Circuit breaker'\n        ];\n    }\n\n    /**\n     * Check if an error is retryable\n     */\n    isRetryableError(error) {\n        const errorMessage = error.message?.toLowerCase() || '';\n        const errorCode = error.code?.toUpperCase() || '';\n        \n        return this.retryableErrors.some(retryableError => {\n            const checkError = retryableError.toLowerCase();\n            return errorMessage.includes(checkError) || errorCode === retryableError;\n        });\n    }\n\n    /**\n     * Calculate delay for next retry attempt\n     */\n    calculateDelay(attemptNumber) {\n        // Exponential backoff: delay = initialDelay * (backoffMultiplier ^ attemptNumber)\n        let delay = this.initialDelay * Math.pow(this.backoffMultiplier, attemptNumber);\n        \n        // Cap at max delay\n        delay = Math.min(delay, this.maxDelay);\n        \n        // Add jitter to prevent thundering herd\n        const jitter = delay * this.jitterRange * (Math.random() * 2 - 1);\n        delay += jitter;\n        \n        return Math.max(delay, 0);\n    }\n\n    /**\n     * Execute function with retry logic\n     */\n    async execute(fn, context = 'operation') {\n        const retryId = Math.random().toString(36).substr(2, 9);\n        let lastError;\n        \n        console.log(`🔄 [${retryId}] Starting ${context} with retry logic (max ${this.maxRetries} attempts)`);\n        \n        for (let attempt = 0; attempt <= this.maxRetries; attempt++) {\n            try {\n                const startTime = Date.now();\n                const result = await fn(attempt);\n                const duration = Date.now() - startTime;\n                \n                if (attempt > 0) {\n                    console.log(`✅ [${retryId}] ${context} succeeded on attempt ${attempt + 1} after ${duration}ms`);\n                } else {\n                    console.log(`✅ [${retryId}] ${context} succeeded on first attempt in ${duration}ms`);\n                }\n                \n                return {\n                    success: true,\n                    result,\n                    attempts: attempt + 1,\n                    totalDuration: duration,\n                    retryId\n                };\n                \n            } catch (error) {\n                lastError = error;\n                const isRetryable = this.isRetryableError(error);\n                const isLastAttempt = attempt === this.maxRetries;\n                \n                console.error(`❌ [${retryId}] ${context} failed on attempt ${attempt + 1}:`, {\n                    error: error.message,\n                    code: error.code,\n                    retryable: isRetryable,\n                    lastAttempt: isLastAttempt\n                });\n                \n                // Don't retry if error is not retryable or this is the last attempt\n                if (!isRetryable || isLastAttempt) {\n                    break;\n                }\n                \n                // Calculate delay for next attempt\n                const delay = this.calculateDelay(attempt);\n                console.log(`⏳ [${retryId}] Retrying ${context} in ${delay}ms (attempt ${attempt + 2}/${this.maxRetries + 1})`);\n                \n                await this.delay(delay);\n            }\n        }\n        \n        console.error(`❌ [${retryId}] ${context} failed after ${this.maxRetries + 1} attempts`);\n        \n        return {\n            success: false,\n            error: lastError.message,\n            code: lastError.code,\n            attempts: this.maxRetries + 1,\n            retryId,\n            finalError: lastError\n        };\n    }\n\n    /**\n     * Utility delay function\n     */\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    /**\n     * Create a retryable database connection function\n     */\n    createRetryableConnection(connectionFn) {\n        return async () => {\n            return this.execute(async (attempt) => {\n                console.log(`🔌 Database connection attempt ${attempt + 1}`);\n                return await connectionFn();\n            }, 'database connection');\n        };\n    }\n\n    /**\n     * Create a retryable query function\n     */\n    createRetryableQuery(queryFn) {\n        return async (text, params = []) => {\n            return this.execute(async (attempt) => {\n                console.log(`🔍 Database query attempt ${attempt + 1}: ${text.substring(0, 50)}...`);\n                return await queryFn(text, params);\n            }, 'database query');\n        };\n    }\n\n    /**\n     * Advanced retry with circuit breaker integration\n     */\n    async executeWithCircuitBreaker(fn, context = 'operation', circuitBreakerKey = null) {\n        // If circuit breaker key is provided, check and manage circuit breaker\n        if (circuitBreakerKey) {\n            const timeoutHelper = require('./timeoutHelper');\n            \n            // Check if circuit breaker is open\n            if (timeoutHelper.isCircuitOpen && timeoutHelper.isCircuitOpen(circuitBreakerKey)) {\n                const error = new Error(`Circuit breaker open for ${circuitBreakerKey}`);\n                error.code = 'CIRCUIT_BREAKER_OPEN';\n                throw error;\n            }\n        }\n        \n        const result = await this.execute(fn, context);\n        \n        // Update circuit breaker based on result\n        if (circuitBreakerKey) {\n            const timeoutHelper = require('./timeoutHelper');\n            \n            if (result.success) {\n                if (timeoutHelper.recordSuccess) {\n                    timeoutHelper.recordSuccess(circuitBreakerKey);\n                }\n            } else {\n                if (timeoutHelper.recordFailure) {\n                    timeoutHelper.recordFailure(circuitBreakerKey);\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    /**\n     * Get retry statistics for monitoring\n     */\n    getRetryStats(results) {\n        if (!Array.isArray(results)) {\n            results = [results];\n        }\n        \n        const stats = {\n            total: results.length,\n            successful: 0,\n            failed: 0,\n            totalAttempts: 0,\n            averageAttempts: 0,\n            maxAttempts: 0,\n            minAttempts: Infinity,\n            retriedOperations: 0\n        };\n        \n        results.forEach(result => {\n            if (result.success) {\n                stats.successful++;\n            } else {\n                stats.failed++;\n            }\n            \n            stats.totalAttempts += result.attempts;\n            stats.maxAttempts = Math.max(stats.maxAttempts, result.attempts);\n            stats.minAttempts = Math.min(stats.minAttempts, result.attempts);\n            \n            if (result.attempts > 1) {\n                stats.retriedOperations++;\n            }\n        });\n        \n        stats.averageAttempts = stats.totalAttempts / stats.total;\n        stats.successRate = (stats.successful / stats.total) * 100;\n        stats.retryRate = (stats.retriedOperations / stats.total) * 100;\n        \n        if (stats.minAttempts === Infinity) {\n            stats.minAttempts = 0;\n        }\n        \n        return stats;\n    }\n}\n\nmodule.exports = ConnectionRetry;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}