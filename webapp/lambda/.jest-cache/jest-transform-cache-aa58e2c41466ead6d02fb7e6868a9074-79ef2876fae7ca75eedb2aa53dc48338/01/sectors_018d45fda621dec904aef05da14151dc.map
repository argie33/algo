{"version":3,"names":["cov_1p7fos9h80","actualCoverage","express","s","require","query","authenticateToken","router","Router","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","use","console","log","timeframe","b","validTimeframes","includes","error","sectorAnalysisQuery","sectorData","rows","length","totalSectors","totalStocks","reduce","sum","row","parseInt","priced_stocks","avgMarketReturn","parseFloat","avg_monthly_change","bullishSectors","filter","bearishSectors","response","data","summary","total_sectors","total_stocks_analyzed","avg_market_return","toFixed","bullish_sectors","bearish_sectors","neutral_sectors","sectors","map","sector","industry","metrics","stock_count","avg_price","performance","daily_change","avg_daily_change","weekly_change","avg_weekly_change","monthly_change","performance_rank","technicals","avg_rsi","avg_momentum","avg_macd","trend_distribution","bullish","bullish_stocks","bearish","bearish_stocks","neutral","neutral_stocks","momentum","jt_momentum_12_1","avg_jt_momentum","momentum_3m","avg_momentum_3m","momentum_6m","avg_momentum_6m","risk_adjusted","avg_risk_adj_momentum","momentum_strength","avg_momentum_strength","volume_weighted","avg_volume_momentum","volume","avg_volume","total_dollar_volume","top_performers","bottom_performers","sectorsQuery","result","sectorMap","forEach","industries","total_companies","active_companies","push","company_count","Object","values","total_industries","params","limit","sectorDetailQuery","stocks","avgReturn","stock","totalVolume","avgMomentum","trendCounts","counts","trend","industryBreakdown","count","avg_return","ticker","industryStocks","avg_monthly_return","total_volume","industry_count","keys","sort","a","symbol","name","short_name","current_price","rsi","macd","rsi_signal","macd_signal","macd_signal_type","risk_adjusted_momentum","strength","module","exports"],"sources":["sectors.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'sectors',\n    timestamp: new Date().toISOString(),\n    message: 'Sectors service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Sectors API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\n\n// Apply authentication to all sector analysis routes\nrouter.use(authenticateToken);\n\n/**\n * GET /sectors/analysis\n * Comprehensive sector analysis using live data from company_profile, price tables, and technical tables\n * Updated: 2025-07-08 - Trigger original webapp deployment\n */\nrouter.get('/analysis', async (req, res) => {\n    try {\n        console.log('📊 Fetching comprehensive sector analysis from live tables...');\n        \n        const { timeframe = 'daily' } = req.query;\n        \n        // Validate timeframe\n        const validTimeframes = ['daily', 'weekly', 'monthly'];\n        if (!validTimeframes.includes(timeframe)) {\n            return res.status(400).json({\n                success: false,\n                error: 'Invalid timeframe. Must be daily, weekly, or monthly.'\n            });\n        }\n        \n        // Get sector analysis with current prices, momentum, and performance metrics\n        const sectorAnalysisQuery = `\n            WITH latest_prices AS (\n                SELECT DISTINCT ON (symbol) \n                    symbol,\n                    date,\n                    close as current_price,\n                    volume,\n                    (close - LAG(close, 1) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 1) OVER (PARTITION BY symbol ORDER BY date) * 100 as daily_change_pct,\n                    (close - LAG(close, 5) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 5) OVER (PARTITION BY symbol ORDER BY date) * 100 as weekly_change_pct,\n                    (close - LAG(close, 22) OVER (PARTITION BY symbol ORDER BY date)) / LAG(close, 22) OVER (PARTITION BY symbol ORDER BY date) * 100 as monthly_change_pct\n                FROM price_${timeframe}\n                WHERE date >= CURRENT_DATE - INTERVAL '6 months'\n                ORDER BY symbol, date DESC\n            ),\n            latest_technicals AS (\n                SELECT DISTINCT ON (symbol)\n                    symbol,\n                    date,\n                    rsi,\n                    momentum,\n                    macd,\n                    macd_signal,\n                    volume as tech_volume,\n                    sma_20,\n                    sma_50,\n                    CASE \n                        WHEN close > sma_20 AND sma_20 > sma_50 THEN 'bullish'\n                        WHEN close < sma_20 AND sma_20 < sma_50 THEN 'bearish'\n                        ELSE 'neutral'\n                    END as trend\n                FROM technical_data_${timeframe}\n                WHERE date >= CURRENT_DATE - INTERVAL '3 months'\n                ORDER BY symbol, date DESC\n            ),\n            momentum_data AS (\n                SELECT DISTINCT ON (symbol)\n                    symbol,\n                    jt_momentum_12_1,\n                    momentum_3m,\n                    momentum_6m,\n                    risk_adjusted_momentum,\n                    momentum_strength,\n                    volume_weighted_momentum\n                FROM momentum_metrics\n                WHERE date >= CURRENT_DATE - INTERVAL '1 month'\n                ORDER BY symbol, date DESC\n            ),\n            sector_summary AS (\n                SELECT \n                    s.sector,\n                    s.industry,\n                    COUNT(*) as stock_count,\n                    COUNT(lp.symbol) as priced_stocks,\n                    AVG(lp.current_price) as avg_price,\n                    AVG(lp.daily_change_pct) as avg_daily_change,\n                    AVG(lp.weekly_change_pct) as avg_weekly_change,\n                    AVG(lp.monthly_change_pct) as avg_monthly_change,\n                    AVG(lp.volume) as avg_volume,\n                    \n                    -- Technical indicators\n                    AVG(lt.rsi) as avg_rsi,\n                    AVG(lt.momentum) as avg_momentum,\n                    AVG(lt.macd) as avg_macd,\n                    \n                    -- Momentum metrics\n                    AVG(md.jt_momentum_12_1) as avg_jt_momentum,\n                    AVG(md.momentum_3m) as avg_momentum_3m,\n                    AVG(md.momentum_6m) as avg_momentum_6m,\n                    AVG(md.risk_adjusted_momentum) as avg_risk_adj_momentum,\n                    AVG(md.momentum_strength) as avg_momentum_strength,\n                    AVG(md.volume_weighted_momentum) as avg_volume_momentum,\n                    \n                    -- Trend analysis\n                    COUNT(CASE WHEN lt.trend = 'bullish' THEN 1 END) as bullish_stocks,\n                    COUNT(CASE WHEN lt.trend = 'bearish' THEN 1 END) as bearish_stocks,\n                    COUNT(CASE WHEN lt.trend = 'neutral' THEN 1 END) as neutral_stocks,\n                    \n                    -- Market cap estimates (based on volume as proxy)\n                    SUM(lp.current_price * lp.volume) as total_dollar_volume,\n                    \n                    -- Performance ranking\n                    RANK() OVER (ORDER BY AVG(lp.monthly_change_pct) DESC) as performance_rank\n                    \n                FROM symbols s\n                LEFT JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol  \n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL \n                    AND s.sector != ''\n                    AND s.industry IS NOT NULL\n                    AND s.industry != ''\n                GROUP BY s.sector, s.industry\n                HAVING COUNT(lp.symbol) >= 3  -- Only include sectors/industries with at least 3 priced stocks\n            ),\n            top_performers AS (\n                SELECT \n                    s.sector,\n                    s.ticker,\n                    s.short_name,\n                    lp.current_price,\n                    lp.monthly_change_pct,\n                    lt.momentum as current_momentum,\n                    md.jt_momentum_12_1,\n                    ROW_NUMBER() OVER (PARTITION BY s.sector ORDER BY lp.monthly_change_pct DESC) as sector_rank\n                FROM symbols s\n                INNER JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol\n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL AND lp.monthly_change_pct IS NOT NULL\n            ),\n            bottom_performers AS (\n                SELECT \n                    s.sector,\n                    s.ticker,\n                    s.short_name,\n                    lp.current_price,\n                    lp.monthly_change_pct,\n                    lt.momentum as current_momentum,\n                    md.jt_momentum_12_1,\n                    ROW_NUMBER() OVER (PARTITION BY s.sector ORDER BY lp.monthly_change_pct ASC) as sector_rank\n                FROM symbols s\n                INNER JOIN latest_prices lp ON s.ticker = lp.symbol\n                LEFT JOIN latest_technicals lt ON s.ticker = lt.symbol\n                LEFT JOIN momentum_data md ON s.ticker = md.ticker\n                WHERE s.sector IS NOT NULL AND lp.monthly_change_pct IS NOT NULL\n            )\n            \n            SELECT \n                ss.*,\n                \n                -- Top 3 performers in each sector\n                JSON_AGG(\n                    CASE WHEN tp.sector_rank <= 3 THEN \n                        JSON_BUILD_OBJECT(\n                            'symbol', tp.ticker,\n                            'name', tp.short_name,\n                            'price', tp.current_price,\n                            'monthly_return', tp.monthly_change_pct,\n                            'momentum', tp.current_momentum,\n                            'jt_momentum', tp.jt_momentum_12_1\n                        )\n                    END\n                ) FILTER (WHERE tp.sector_rank <= 3) as top_performers,\n                \n                -- Bottom 3 performers in each sector\n                JSON_AGG(\n                    CASE WHEN bp.sector_rank <= 3 THEN \n                        JSON_BUILD_OBJECT(\n                            'symbol', bp.ticker,\n                            'name', bp.short_name,\n                            'price', bp.current_price,\n                            'monthly_return', bp.monthly_change_pct,\n                            'momentum', bp.current_momentum,\n                            'jt_momentum', bp.jt_momentum_12_1\n                        )\n                    END\n                ) FILTER (WHERE bp.sector_rank <= 3) as bottom_performers\n                \n            FROM sector_summary ss\n            LEFT JOIN top_performers tp ON ss.sector = tp.sector\n            LEFT JOIN bottom_performers bp ON ss.sector = bp.sector\n            GROUP BY \n                ss.sector, ss.industry, ss.stock_count, ss.priced_stocks, \n                ss.avg_price, ss.avg_daily_change, ss.avg_weekly_change, ss.avg_monthly_change,\n                ss.avg_volume, ss.avg_rsi, ss.avg_momentum, ss.avg_macd,\n                ss.avg_jt_momentum, ss.avg_momentum_3m, ss.avg_momentum_6m, \n                ss.avg_risk_adj_momentum, ss.avg_momentum_strength, ss.avg_volume_momentum,\n                ss.bullish_stocks, ss.bearish_stocks, ss.neutral_stocks,\n                ss.total_dollar_volume, ss.performance_rank\n            ORDER BY ss.avg_monthly_change DESC\n        `;\n        \n        const sectorData = await query(sectorAnalysisQuery);\n        \n        console.log(`✅ Found ${sectorData.rows.length} sectors with live data`);\n        \n        // Calculate summary statistics\n        const totalSectors = sectorData.rows.length;\n        const totalStocks = sectorData.rows.reduce((sum, row) => sum + parseInt(row.priced_stocks || 0), 0);\n        const avgMarketReturn = sectorData.rows.reduce((sum, row) => sum + parseFloat(row.avg_monthly_change || 0), 0) / totalSectors;\n        \n        // Identify sector trends\n        const bullishSectors = sectorData.rows.filter(row => parseFloat(row.avg_monthly_change || 0) > 0).length;\n        const bearishSectors = sectorData.rows.filter(row => parseFloat(row.avg_monthly_change || 0) < 0).length;\n        \n        const response = {\n            success: true,\n            data: {\n                timeframe,\n                summary: {\n                    total_sectors: totalSectors,\n                    total_stocks_analyzed: totalStocks,\n                    avg_market_return: avgMarketReturn.toFixed(2),\n                    bullish_sectors: bullishSectors,\n                    bearish_sectors: bearishSectors,\n                    neutral_sectors: totalSectors - bullishSectors - bearishSectors\n                },\n                sectors: sectorData.rows.map(row => ({\n                    sector: row.sector,\n                    industry: row.industry,\n                    metrics: {\n                        stock_count: parseInt(row.stock_count),\n                        priced_stocks: parseInt(row.priced_stocks),\n                        avg_price: parseFloat(row.avg_price || 0).toFixed(2),\n                        performance: {\n                            daily_change: parseFloat(row.avg_daily_change || 0).toFixed(2),\n                            weekly_change: parseFloat(row.avg_weekly_change || 0).toFixed(2),\n                            monthly_change: parseFloat(row.avg_monthly_change || 0).toFixed(2),\n                            performance_rank: parseInt(row.performance_rank)\n                        },\n                        technicals: {\n                            avg_rsi: parseFloat(row.avg_rsi || 0).toFixed(2),\n                            avg_momentum: parseFloat(row.avg_momentum || 0).toFixed(2),\n                            avg_macd: parseFloat(row.avg_macd || 0).toFixed(4),\n                            trend_distribution: {\n                                bullish: parseInt(row.bullish_stocks || 0),\n                                bearish: parseInt(row.bearish_stocks || 0),\n                                neutral: parseInt(row.neutral_stocks || 0)\n                            }\n                        },\n                        momentum: {\n                            jt_momentum_12_1: parseFloat(row.avg_jt_momentum || 0).toFixed(4),\n                            momentum_3m: parseFloat(row.avg_momentum_3m || 0).toFixed(4),\n                            momentum_6m: parseFloat(row.avg_momentum_6m || 0).toFixed(4),\n                            risk_adjusted: parseFloat(row.avg_risk_adj_momentum || 0).toFixed(4),\n                            momentum_strength: parseFloat(row.avg_momentum_strength || 0).toFixed(2),\n                            volume_weighted: parseFloat(row.avg_volume_momentum || 0).toFixed(4)\n                        },\n                        volume: {\n                            avg_volume: parseInt(row.avg_volume || 0),\n                            total_dollar_volume: parseFloat(row.total_dollar_volume || 0)\n                        }\n                    },\n                    top_performers: row.top_performers || [],\n                    bottom_performers: row.bottom_performers || []\n                }))\n            },\n            timestamp: new Date().toISOString()\n        };\n        \n        res.json(response);\n        \n    } catch (error) {\n        console.error('❌ Error in sector analysis:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to fetch sector analysis'\n        });\n    }\n});\n\n/**\n * GET /sectors/list\n * Get list of all available sectors and industries\n */\nrouter.get('/list', async (req, res) => {\n    try {\n        console.log('📋 Fetching sector and industry list...');\n        \n        const sectorsQuery = `\n            SELECT \n                sector,\n                industry,\n                COUNT(*) as company_count,\n                COUNT(CASE WHEN ticker IN (\n                    SELECT DISTINCT symbol FROM price_daily \n                    WHERE date >= CURRENT_DATE - INTERVAL '7 days'\n                ) THEN 1 END) as active_companies\n            FROM company_profile \n            WHERE sector IS NOT NULL \n                AND sector != ''\n                AND industry IS NOT NULL \n                AND industry != ''\n            GROUP BY sector, industry\n            ORDER BY sector, industry\n        `;\n        \n        const result = await query(sectorsQuery);\n        \n        // Group by sector\n        const sectorMap = {};\n        result.rows.forEach(row => {\n            if (!sectorMap[row.sector]) {\n                sectorMap[row.sector] = {\n                    sector: row.sector,\n                    industries: [],\n                    total_companies: 0,\n                    active_companies: 0\n                };\n            }\n            \n            sectorMap[row.sector].industries.push({\n                industry: row.industry,\n                company_count: parseInt(row.company_count),\n                active_companies: parseInt(row.active_companies)\n            });\n            \n            sectorMap[row.sector].total_companies += parseInt(row.company_count);\n            sectorMap[row.sector].active_companies += parseInt(row.active_companies);\n        });\n        \n        const sectors = Object.values(sectorMap);\n        \n        console.log(`✅ Found ${sectors.length} sectors with ${result.rows.length} industries`);\n        \n        res.json({\n            success: true,\n            data: {\n                sectors,\n                summary: {\n                    total_sectors: sectors.length,\n                    total_industries: result.rows.length,\n                    total_companies: sectors.reduce((sum, s) => sum + s.total_companies, 0),\n                    active_companies: sectors.reduce((sum, s) => sum + s.active_companies, 0)\n                }\n            },\n            timestamp: new Date().toISOString()\n        });\n        \n    } catch (error) {\n        console.error('❌ Error fetching sector list:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to fetch sector list'\n        });\n    }\n});\n\n/**\n * GET /sectors/:sector/details\n * Get detailed analysis for a specific sector\n */\nrouter.get('/:sector/details', async (req, res) => {\n    try {\n        const { sector } = req.params;\n        const { limit = 50 } = req.query;\n        \n        console.log(`📊 Fetching detailed analysis for sector: ${sector}`);\n        \n        const sectorDetailQuery = `\n            WITH latest_data AS (\n                SELECT DISTINCT ON (s.ticker)\n                    s.ticker,\n                    s.short_name,\n                    s.long_name,\n                    s.industry,\n                    s.market,\n                    s.country,\n                    pd.close as current_price,\n                    pd.volume,\n                    pd.date as price_date,\n                    \n                    -- Performance metrics\n                    (pd.close - LAG(pd.close, 1) OVER (PARTITION BY s.ticker ORDER BY pd.date)) / LAG(pd.close, 1) OVER (PARTITION BY s.ticker ORDER BY pd.date) * 100 as daily_change,\n                    (pd.close - LAG(pd.close, 5) OVER (PARTITION BY s.ticker ORDER BY pd.date)) / LAG(pd.close, 5) OVER (PARTITION BY s.ticker ORDER BY pd.date) * 100 as weekly_change,\n                    (pd.close - LAG(pd.close, 22) OVER (PARTITION BY s.ticker ORDER BY pd.date)) / LAG(pd.close, 22) OVER (PARTITION BY s.ticker ORDER BY pd.date) * 100 as monthly_change,\n                    \n                    -- Technical indicators\n                    td.rsi,\n                    td.momentum,\n                    td.macd,\n                    td.macd_signal,\n                    td.sma_20,\n                    td.sma_50,\n                    \n                    -- Momentum data\n                    mm.jt_momentum_12_1,\n                    mm.momentum_3m,\n                    mm.momentum_6m,\n                    mm.risk_adjusted_momentum,\n                    mm.momentum_strength,\n                    \n                    -- Market cap estimate (price * volume as proxy)\n                    pd.close * pd.volume as dollar_volume\n                    \n                FROM symbols s\n                LEFT JOIN price_daily pd ON s.ticker = pd.symbol\n                LEFT JOIN technical_data_daily td ON s.ticker = td.symbol AND td.date = pd.date\n                LEFT JOIN momentum_metrics mm ON s.ticker = mm.symbol\n                WHERE s.sector = $1\n                    AND pd.date >= CURRENT_DATE - INTERVAL '7 days'\n                ORDER BY s.ticker, pd.date DESC\n            )\n            \n            SELECT *,\n                CASE \n                    WHEN current_price > sma_20 AND sma_20 > sma_50 THEN 'bullish'\n                    WHEN current_price < sma_20 AND sma_20 < sma_50 THEN 'bearish'\n                    ELSE 'neutral'\n                END as trend,\n                \n                CASE \n                    WHEN rsi > 70 THEN 'overbought'\n                    WHEN rsi < 30 THEN 'oversold'\n                    ELSE 'neutral'\n                END as rsi_signal,\n                \n                CASE \n                    WHEN macd > macd_signal THEN 'bullish'\n                    WHEN macd < macd_signal THEN 'bearish'\n                    ELSE 'neutral'\n                END as macd_signal_type\n                \n            FROM latest_data\n            WHERE current_price IS NOT NULL\n            ORDER BY monthly_change DESC NULLS LAST\n            LIMIT $2\n        `;\n        \n        const result = await query(sectorDetailQuery, [sector, limit]);\n        \n        if (result.rows.length === 0) {\n            return res.status(404).json({\n                success: false,\n                error: `Sector '${sector}' not found or has no current price data`\n            });\n        }\n        \n        // Calculate sector statistics\n        const stocks = result.rows;\n        const avgReturn = stocks.reduce((sum, stock) => sum + (parseFloat(stock.monthly_change) || 0), 0) / stocks.length;\n        const totalVolume = stocks.reduce((sum, stock) => sum + (parseInt(stock.volume) || 0), 0);\n        const avgMomentum = stocks.reduce((sum, stock) => sum + (parseFloat(stock.jt_momentum_12_1) || 0), 0) / stocks.length;\n        \n        // Trend distribution\n        const trendCounts = stocks.reduce((counts, stock) => {\n            counts[stock.trend] = (counts[stock.trend] || 0) + 1;\n            return counts;\n        }, {});\n        \n        // Industry breakdown\n        const industryBreakdown = stocks.reduce((industries, stock) => {\n            if (!industries[stock.industry]) {\n                industries[stock.industry] = {\n                    industry: stock.industry,\n                    count: 0,\n                    avg_return: 0,\n                    stocks: []\n                };\n            }\n            industries[stock.industry].count += 1;\n            industries[stock.industry].stocks.push(stock.ticker);\n            return industries;\n        }, {});\n        \n        // Calculate industry averages\n        Object.values(industryBreakdown).forEach(industry => {\n            const industryStocks = stocks.filter(s => s.industry === industry.industry);\n            industry.avg_return = industryStocks.reduce((sum, s) => sum + (parseFloat(s.monthly_change) || 0), 0) / industryStocks.length;\n        });\n        \n        console.log(`✅ Found ${stocks.length} stocks in ${sector} sector`);\n        \n        res.json({\n            success: true,\n            data: {\n                sector,\n                summary: {\n                    stock_count: stocks.length,\n                    avg_monthly_return: avgReturn.toFixed(2),\n                    total_volume: totalVolume,\n                    avg_jt_momentum: avgMomentum.toFixed(4),\n                    trend_distribution: trendCounts,\n                    industry_count: Object.keys(industryBreakdown).length\n                },\n                industries: Object.values(industryBreakdown).sort((a, b) => b.avg_return - a.avg_return),\n                stocks: stocks.map(stock => ({\n                    symbol: stock.ticker,\n                    name: stock.short_name,\n                    industry: stock.industry,\n                    current_price: parseFloat(stock.current_price || 0).toFixed(2),\n                    volume: parseInt(stock.volume || 0),\n                    performance: {\n                        daily_change: parseFloat(stock.daily_change || 0).toFixed(2),\n                        weekly_change: parseFloat(stock.weekly_change || 0).toFixed(2),\n                        monthly_change: parseFloat(stock.monthly_change || 0).toFixed(2)\n                    },\n                    technicals: {\n                        rsi: parseFloat(stock.rsi || 0).toFixed(2),\n                        momentum: parseFloat(stock.momentum || 0).toFixed(2),\n                        macd: parseFloat(stock.macd || 0).toFixed(4),\n                        trend: stock.trend,\n                        rsi_signal: stock.rsi_signal,\n                        macd_signal: stock.macd_signal_type\n                    },\n                    momentum: {\n                        jt_momentum_12_1: parseFloat(stock.jt_momentum_12_1 || 0).toFixed(4),\n                        momentum_3m: parseFloat(stock.momentum_3m || 0).toFixed(4),\n                        momentum_6m: parseFloat(stock.momentum_6m || 0).toFixed(4),\n                        risk_adjusted: parseFloat(stock.risk_adjusted_momentum || 0).toFixed(4),\n                        strength: parseFloat(stock.momentum_strength || 0).toFixed(2)\n                    }\n                }))\n            },\n            timestamp: new Date().toISOString()\n        });\n        \n    } catch (error) {\n        console.error(`❌ Error fetching details for sector ${req.params.sector}:`, error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to fetch sector details'\n        });\n    }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}