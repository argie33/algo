{"version":3,"names":["cov_1poq9zxhnm","actualCoverage","createRequestLogger","s","require","getTimeout","withTradingTimeout","AdvancedPerformanceAnalytics","constructor","dbClient","f","db","logger","calculatePortfolioPerformance","userId","startDate","endDate","options","b","startTime","Date","now","portfolioHistory","getPortfolioHistory","baseMetrics","calculateBaseMetrics","riskMetrics","calculateRiskMetrics","advancedMetrics","calculateAdvancedMetrics","benchmarkMetrics","calculateBenchmarkMetrics","attributionAnalysis","calculateAttributionAnalysis","sectorAnalysis","calculateSectorAnalysis","factorExposures","calculateFactorExposure","performanceMetrics","period","start","end","daysInPeriod","calculateDaysInPeriod","metadata","calculationTime","timestamp","toISOString","dataPoints","length","info","substring","error","message","stack","query","result","rows","totalReturn","annualizedReturn","totalReturnPercent","averageDailyReturn","compoundAnnualGrowthRate","startValue","parseFloat","total_value","endValue","dailyReturns","i","currentValue","previousValue","dailyReturn","push","reduce","sum","ret","Math","pow","days","years","volatility","downsideVolatility","maxDrawdown","valueAtRisk","expectedShortfall","calmarRatio","sterlingRatio","meanReturn","variance","sqrt","negativeReturns","filter","downsideVariance","calculateMaxDrawdown","sortedReturns","sort","a","varIndex","floor","slice","abs","peak","Infinity","record","value","drawdown","informationRatio","treynorRatio","jensenAlpha","trackingError","uptureRatio","gainLossRatio","winRate","positiveReturns","averageGain","averageLoss","positiveReturnsCount","negativeReturnsCount","benchmarkQuery","benchmarkData","warn","availableDataPoints","benchmarkReturn","alpha","beta","correlation","sharpeRatio","sortinoRatio","upCaptureRatio","downCaptureRatio","dataQuality","benchmarkReturns","currentPrice","close_price","previousPrice","portfolioReturns","calculateAlignedPortfolioReturns","calculateBetaAndAlpha","calculateTrackingError","calculateCaptureRatios","portfolioMeanReturn","portfolioVolatility","calculateVolatility","downsideDeviation","holdings","totalPortfolioValue","holding","securityAttribution","map","symbol","sector","weight","contribution","total_pnl","totalValue","totalPnL","returnContribution","total_cost_basis","sectorAttribution","calculateSectorAttribution","numberOfHoldings","sectorMap","Map","forEach","pnl","has","set","count","sectorData","get","Array","from","entries","data","holdingCount","sectors","sectorBreakdown","allocation","parseInt","holding_count","averageReturn","avg_return","returnVolatility","return_volatility","diversificationScore","calculateDiversificationScore","sectorCount","hhi","max","herfindahlIndex","interpretation","getDiversificationInterpretation","score","riskFactors","styleFactors","h","market_value","size","calculateSizeFactor","calculateValueFactor","momentum","calculateMomentumFactor","quality","calculateQualityFactor","concentration","calculateConcentrationRisk","sectorConcentration","calculateSectorConcentrationRisk","calculateVolatilityRisk","growthTilt","calculateGrowthTilt","valueTilt","calculateValueTilt","qualityTilt","calculateQualityTilt","totalHoldings","top10Value","weightedPE","totalWeightWithPE","proxyPE","return_pct","avgPE","weightedReturn","returnPct","maxPositionWeight","concentrationPenalty","diversificationBonus","min","top1Weight","top5Weight","riskLevel","sectorWeights","values","maxSectorWeight","returns","techWeight","valueWeight","includes","timeDiff","getTime","ceil","generatePerformanceReport","format","report","reportId","summary","generatePerformanceSummary","metrics","getBasicMetrics","recommendations","generateRecommendations","generatedAt","generationTime","overallPerformance","getPerformanceGrade","keyHighlights","toFixed","riskProfile","assessRiskProfile","recommendation","getOverallRecommendation","returnPercent","type","priority","title","description","action","benchmarkDates","benchmarkDate","date","prevBenchmarkDate","currentPortfolio","find","p","previousPortfolio","portfolioReturn","portfolioMean","benchmarkMean","covariance","portfolioVariance","benchmarkVariance","portfolioDiff","benchmarkDiff","trackingDifferences","pRet","meanDifference","diff","upPeriods","downPeriods","portfolio","benchmark","mean","module","exports"],"sources":["advancedPerformanceAnalytics.js"],"sourcesContent":["/**\n * Advanced Performance Analytics Service\n * Institutional-grade performance metrics and analytics for portfolio and trading analysis\n */\n\nconst { createRequestLogger } = require('./logger');\nconst { getTimeout, withTradingTimeout } = require('./timeoutManager');\n\nclass AdvancedPerformanceAnalytics {\n  constructor(dbClient) {\n    this.db = dbClient;\n    this.logger = createRequestLogger('performance-analytics');\n  }\n\n  /**\n   * Calculate comprehensive portfolio performance metrics\n   */\n  async calculatePortfolioPerformance(userId, startDate, endDate, options = {}) {\n    const startTime = Date.now();\n    \n    try {\n      // Get portfolio value history\n      const portfolioHistory = await this.getPortfolioHistory(userId, startDate, endDate);\n      \n      // Calculate base metrics\n      const baseMetrics = await this.calculateBaseMetrics(portfolioHistory);\n      \n      // Calculate risk metrics\n      const riskMetrics = await this.calculateRiskMetrics(portfolioHistory);\n      \n      // Calculate advanced metrics\n      const advancedMetrics = await this.calculateAdvancedMetrics(portfolioHistory);\n      \n      // Calculate benchmark comparisons\n      const benchmarkMetrics = await this.calculateBenchmarkMetrics(portfolioHistory, startDate, endDate);\n      \n      // Calculate attribution analysis\n      const attributionAnalysis = await this.calculateAttributionAnalysis(userId, startDate, endDate);\n      \n      // Calculate sector and style analysis\n      const sectorAnalysis = await this.calculateSectorAnalysis(userId, startDate, endDate);\n      \n      // Calculate factor exposure\n      const factorExposures = await this.calculateFactorExposure(userId, startDate, endDate);\n      \n      const performanceMetrics = {\n        period: {\n          start: startDate,\n          end: endDate,\n          daysInPeriod: this.calculateDaysInPeriod(startDate, endDate)\n        },\n        baseMetrics,\n        riskMetrics,\n        advancedMetrics,\n        benchmarkMetrics,\n        attributionAnalysis,\n        sectorAnalysis,\n        factorExposures,\n        metadata: {\n          calculationTime: Date.now() - startTime,\n          timestamp: new Date().toISOString(),\n          dataPoints: portfolioHistory.length\n        }\n      };\n      \n      this.logger.info('Portfolio performance metrics calculated', {\n        userId: `${userId.substring(0, 8)}...`,\n        period: `${startDate} to ${endDate}`,\n        calculationTime: Date.now() - startTime,\n        dataPoints: portfolioHistory.length\n      });\n      \n      return performanceMetrics;\n      \n    } catch (error) {\n      this.logger.error('Error calculating portfolio performance', {\n        userId: `${userId.substring(0, 8)}...`,\n        error: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get portfolio value history from database\n   */\n  async getPortfolioHistory(userId, startDate, endDate) {\n    const query = `\n      SELECT \n        DATE(created_at) as date,\n        SUM(market_value) as total_value,\n        SUM(unrealized_pl) as unrealized_pl,\n        SUM(cost_basis) as cost_basis,\n        COUNT(*) as position_count\n      FROM portfolio_holdings \n      WHERE user_id = $1 \n        AND created_at >= $2 \n        AND created_at <= $3\n        AND quantity > 0\n      GROUP BY DATE(created_at)\n      ORDER BY date ASC\n    `;\n    \n    const result = await this.db.query(query, [userId, startDate, endDate]);\n    return result.rows;\n  }\n\n  /**\n   * Calculate base performance metrics\n   */\n  async calculateBaseMetrics(portfolioHistory) {\n    if (portfolioHistory.length < 2) {\n      return {\n        totalReturn: 0,\n        annualizedReturn: 0,\n        totalReturnPercent: 0,\n        averageDailyReturn: 0,\n        compoundAnnualGrowthRate: 0\n      };\n    }\n    \n    const startValue = parseFloat(portfolioHistory[0].total_value);\n    const endValue = parseFloat(portfolioHistory[portfolioHistory.length - 1].total_value);\n    const totalReturn = endValue - startValue;\n    const totalReturnPercent = (totalReturn / startValue) * 100;\n    \n    // Calculate daily returns\n    const dailyReturns = [];\n    for (let i = 1; i < portfolioHistory.length; i++) {\n      const currentValue = parseFloat(portfolioHistory[i].total_value);\n      const previousValue = parseFloat(portfolioHistory[i - 1].total_value);\n      const dailyReturn = (currentValue - previousValue) / previousValue;\n      dailyReturns.push(dailyReturn);\n    }\n    \n    const averageDailyReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n    const annualizedReturn = Math.pow(1 + averageDailyReturn, 252) - 1; // 252 trading days\n    \n    // Compound Annual Growth Rate (CAGR)\n    const days = portfolioHistory.length;\n    const years = days / 365.25;\n    const compoundAnnualGrowthRate = years > 0 ? Math.pow(endValue / startValue, 1 / years) - 1 : 0;\n    \n    return {\n      totalReturn,\n      annualizedReturn: annualizedReturn * 100,\n      totalReturnPercent,\n      averageDailyReturn: averageDailyReturn * 100,\n      compoundAnnualGrowthRate: compoundAnnualGrowthRate * 100,\n      startValue,\n      endValue,\n      dailyReturns\n    };\n  }\n\n  /**\n   * Calculate risk metrics\n   */\n  async calculateRiskMetrics(portfolioHistory) {\n    if (portfolioHistory.length < 2) {\n      return {\n        volatility: 0,\n        downsideVolatility: 0,\n        maxDrawdown: 0,\n        valueAtRisk: 0,\n        expectedShortfall: 0,\n        calmarRatio: 0,\n        sterlingRatio: 0\n      };\n    }\n    \n    // Calculate daily returns\n    const dailyReturns = [];\n    for (let i = 1; i < portfolioHistory.length; i++) {\n      const currentValue = parseFloat(portfolioHistory[i].total_value);\n      const previousValue = parseFloat(portfolioHistory[i - 1].total_value);\n      const dailyReturn = (currentValue - previousValue) / previousValue;\n      dailyReturns.push(dailyReturn);\n    }\n    \n    // Volatility (standard deviation of returns)\n    const meanReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n    const variance = dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - meanReturn, 2), 0) / dailyReturns.length;\n    const volatility = Math.sqrt(variance) * Math.sqrt(252) * 100; // Annualized volatility\n    \n    // Downside volatility (only negative returns)\n    const negativeReturns = dailyReturns.filter(ret => ret < 0);\n    const downsideVariance = negativeReturns.length > 0 ? \n      negativeReturns.reduce((sum, ret) => sum + Math.pow(ret, 2), 0) / negativeReturns.length : 0;\n    const downsideVolatility = Math.sqrt(downsideVariance) * Math.sqrt(252) * 100;\n    \n    // Maximum Drawdown\n    const maxDrawdown = this.calculateMaxDrawdown(portfolioHistory);\n    \n    // Value at Risk (VaR) at 95% confidence level\n    const sortedReturns = [...dailyReturns].sort((a, b) => a - b);\n    const varIndex = Math.floor(sortedReturns.length * 0.05);\n    const valueAtRisk = sortedReturns[varIndex] * 100;\n    \n    // Expected Shortfall (Conditional VaR)\n    const expectedShortfall = sortedReturns.slice(0, varIndex).reduce((sum, ret) => sum + ret, 0) / varIndex * 100;\n    \n    // Calmar Ratio (CAGR / Max Drawdown)\n    const annualizedReturn = Math.pow(1 + meanReturn, 252) - 1;\n    const calmarRatio = maxDrawdown !== 0 ? (annualizedReturn * 100) / Math.abs(maxDrawdown) : 0;\n    \n    // Sterling Ratio (similar to Calmar but uses average drawdown)\n    const sterlingRatio = maxDrawdown !== 0 ? (annualizedReturn * 100) / Math.abs(maxDrawdown * 0.1) : 0;\n    \n    return {\n      volatility,\n      downsideVolatility,\n      maxDrawdown,\n      valueAtRisk,\n      expectedShortfall,\n      calmarRatio,\n      sterlingRatio,\n      meanReturn: meanReturn * 100,\n      variance: variance * 100\n    };\n  }\n\n  /**\n   * Calculate maximum drawdown\n   */\n  calculateMaxDrawdown(portfolioHistory) {\n    let maxDrawdown = 0;\n    let peak = -Infinity;\n    \n    for (const record of portfolioHistory) {\n      const value = parseFloat(record.total_value);\n      if (value > peak) {\n        peak = value;\n      }\n      \n      const drawdown = (peak - value) / peak;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    }\n    \n    return maxDrawdown * 100;\n  }\n\n  /**\n   * Calculate advanced metrics\n   */\n  async calculateAdvancedMetrics(portfolioHistory) {\n    if (portfolioHistory.length < 2) {\n      return {\n        informationRatio: 0,\n        treynorRatio: 0,\n        jensenAlpha: 0,\n        trackingError: 0,\n        uptureRatio: 0,\n        gainLossRatio: 0,\n        winRate: 0\n      };\n    }\n    \n    // Calculate daily returns\n    const dailyReturns = [];\n    for (let i = 1; i < portfolioHistory.length; i++) {\n      const currentValue = parseFloat(portfolioHistory[i].total_value);\n      const previousValue = parseFloat(portfolioHistory[i - 1].total_value);\n      const dailyReturn = (currentValue - previousValue) / previousValue;\n      dailyReturns.push(dailyReturn);\n    }\n    \n    const meanReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n    \n    // Separate positive and negative returns\n    const positiveReturns = dailyReturns.filter(ret => ret > 0);\n    const negativeReturns = dailyReturns.filter(ret => ret < 0);\n    \n    // Win Rate\n    const winRate = (positiveReturns.length / dailyReturns.length) * 100;\n    \n    // Gain/Loss Ratio\n    const averageGain = positiveReturns.length > 0 ? \n      positiveReturns.reduce((sum, ret) => sum + ret, 0) / positiveReturns.length : 0;\n    const averageLoss = negativeReturns.length > 0 ? \n      Math.abs(negativeReturns.reduce((sum, ret) => sum + ret, 0) / negativeReturns.length) : 0;\n    const gainLossRatio = averageLoss !== 0 ? averageGain / averageLoss : 0;\n    \n    // Upture Ratio (capture of positive market moves)\n    const uptureRatio = positiveReturns.length > 0 ? \n      (positiveReturns.reduce((sum, ret) => sum + ret, 0) / positiveReturns.length) * 100 : 0;\n    \n    // Placeholder values for metrics requiring benchmark data\n    const informationRatio = 0; // Requires benchmark comparison\n    const treynorRatio = 0; // Requires beta calculation\n    const jensenAlpha = 0; // Requires benchmark comparison\n    const trackingError = 0; // Requires benchmark comparison\n    \n    return {\n      informationRatio,\n      treynorRatio,\n      jensenAlpha,\n      trackingError,\n      uptureRatio,\n      gainLossRatio,\n      winRate,\n      averageGain: averageGain * 100,\n      averageLoss: averageLoss * 100,\n      positiveReturnsCount: positiveReturns.length,\n      negativeReturnsCount: negativeReturns.length\n    };\n  }\n\n  /**\n   * Calculate benchmark comparison metrics\n   */\n  async calculateBenchmarkMetrics(portfolioHistory, startDate, endDate) {\n    try {\n      // Fetch SPY (S&P 500) benchmark data from our stock_prices table\n      const benchmarkQuery = `\n        SELECT \n          DATE(date) as date,\n          close as close_price\n        FROM stock_prices \n        WHERE symbol = 'SPY' \n          AND date >= $1 \n          AND date <= $2\n        ORDER BY date\n      `;\n      \n      const benchmarkData = await this.db.query(benchmarkQuery, [startDate, endDate]);\n      \n      if (benchmarkData.rows.length < 2) {\n        this.logger.warn('Insufficient benchmark data for metrics calculation', {\n          availableDataPoints: benchmarkData.rows.length,\n          startDate,\n          endDate\n        });\n        return {\n          benchmarkReturn: 0,\n          alpha: 0,\n          beta: 0,\n          correlation: 0,\n          sharpeRatio: 0,\n          sortinoRatio: 0,\n          informationRatio: 0,\n          trackingError: 0,\n          upCaptureRatio: 0,\n          downCaptureRatio: 0,\n          dataQuality: 'insufficient'\n        };\n      }\n\n      // Calculate benchmark returns\n      const benchmarkReturns = [];\n      for (let i = 1; i < benchmarkData.rows.length; i++) {\n        const currentPrice = parseFloat(benchmarkData.rows[i].close_price);\n        const previousPrice = parseFloat(benchmarkData.rows[i - 1].close_price);\n        const dailyReturn = (currentPrice - previousPrice) / previousPrice;\n        benchmarkReturns.push(dailyReturn);\n      }\n\n      // Calculate portfolio returns aligned with benchmark dates\n      const portfolioReturns = this.calculateAlignedPortfolioReturns(portfolioHistory, benchmarkData.rows);\n      \n      if (portfolioReturns.length < 2) {\n        return {\n          benchmarkReturn: 0,\n          alpha: 0,\n          beta: 0,\n          correlation: 0,\n          sharpeRatio: 0,\n          sortinoRatio: 0,\n          informationRatio: 0,\n          trackingError: 0,\n          upCaptureRatio: 0,\n          downCaptureRatio: 0,\n          dataQuality: 'insufficient_portfolio_data'\n        };\n      }\n\n      // Calculate benchmark metrics\n      const benchmarkReturn = benchmarkReturns.reduce((sum, ret) => sum + ret, 0) * 100;\n      const { beta, alpha, correlation } = this.calculateBetaAndAlpha(portfolioReturns, benchmarkReturns);\n      const trackingError = this.calculateTrackingError(portfolioReturns, benchmarkReturns);\n      const { upCaptureRatio, downCaptureRatio } = this.calculateCaptureRatios(portfolioReturns, benchmarkReturns);\n      \n      // Calculate Sharpe and Sortino ratios (assuming risk-free rate of 0 for simplicity)\n      const portfolioMeanReturn = portfolioReturns.reduce((sum, ret) => sum + ret, 0) / portfolioReturns.length;\n      const portfolioVolatility = this.calculateVolatility(portfolioReturns);\n      const sharpeRatio = portfolioVolatility > 0 ? (portfolioMeanReturn * 252) / (portfolioVolatility * Math.sqrt(252)) : 0;\n      \n      const negativeReturns = portfolioReturns.filter(ret => ret < 0);\n      const downsideDeviation = this.calculateVolatility(negativeReturns);\n      const sortinoRatio = downsideDeviation > 0 ? (portfolioMeanReturn * 252) / (downsideDeviation * Math.sqrt(252)) : 0;\n      \n      const informationRatio = trackingError > 0 ? alpha / trackingError : 0;\n\n      return {\n        benchmarkReturn,\n        alpha: alpha * 100,\n        beta,\n        correlation,\n        sharpeRatio,\n        sortinoRatio,\n        informationRatio,\n        trackingError: trackingError * 100,\n        upCaptureRatio: upCaptureRatio * 100,\n        downCaptureRatio: downCaptureRatio * 100,\n        dataQuality: 'complete'\n      };\n\n    } catch (error) {\n      this.logger.error('Error calculating benchmark metrics', {\n        error: error.message,\n        startDate,\n        endDate\n      });\n      return {\n        benchmarkReturn: 0,\n        alpha: 0,\n        beta: 0,\n        correlation: 0,\n        sharpeRatio: 0,\n        sortinoRatio: 0,\n        informationRatio: 0,\n        trackingError: 0,\n        upCaptureRatio: 0,\n        downCaptureRatio: 0,\n        dataQuality: 'error',\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Calculate attribution analysis\n   */\n  async calculateAttributionAnalysis(userId, startDate, endDate) {\n    const query = `\n      SELECT \n        symbol,\n        sector,\n        SUM(market_value) as total_value,\n        SUM(unrealized_pl) as total_pnl,\n        SUM(cost_basis) as total_cost_basis,\n        AVG(quantity) as avg_quantity\n      FROM portfolio_holdings \n      WHERE user_id = $1 \n        AND created_at >= $2 \n        AND created_at <= $3\n        AND quantity > 0\n      GROUP BY symbol, sector\n      ORDER BY total_value DESC\n    `;\n    \n    const result = await this.db.query(query, [userId, startDate, endDate]);\n    const holdings = result.rows;\n    \n    const totalPortfolioValue = holdings.reduce((sum, holding) => sum + parseFloat(holding.total_value), 0);\n    \n    const attributionAnalysis = {\n      securityAttribution: holdings.map(holding => ({\n        symbol: holding.symbol,\n        sector: holding.sector,\n        weight: (parseFloat(holding.total_value) / totalPortfolioValue) * 100,\n        contribution: (parseFloat(holding.total_pnl) / totalPortfolioValue) * 100,\n        totalValue: parseFloat(holding.total_value),\n        totalPnL: parseFloat(holding.total_pnl),\n        returnContribution: (parseFloat(holding.total_pnl) / parseFloat(holding.total_cost_basis)) * 100\n      })).slice(0, 20), // Top 20 contributors\n      \n      sectorAttribution: this.calculateSectorAttribution(holdings, totalPortfolioValue),\n      \n      totalPortfolioValue,\n      numberOfHoldings: holdings.length\n    };\n    \n    return attributionAnalysis;\n  }\n\n  /**\n   * Calculate sector attribution\n   */\n  calculateSectorAttribution(holdings, totalPortfolioValue) {\n    const sectorMap = new Map();\n    \n    holdings.forEach(holding => {\n      const sector = holding.sector || 'Unknown';\n      const value = parseFloat(holding.total_value);\n      const pnl = parseFloat(holding.total_pnl);\n      \n      if (!sectorMap.has(sector)) {\n        sectorMap.set(sector, { value: 0, pnl: 0, count: 0 });\n      }\n      \n      const sectorData = sectorMap.get(sector);\n      sectorData.value += value;\n      sectorData.pnl += pnl;\n      sectorData.count += 1;\n    });\n    \n    return Array.from(sectorMap.entries()).map(([sector, data]) => ({\n      sector,\n      weight: (data.value / totalPortfolioValue) * 100,\n      contribution: (data.pnl / totalPortfolioValue) * 100,\n      totalValue: data.value,\n      totalPnL: data.pnl,\n      holdingCount: data.count\n    })).sort((a, b) => b.weight - a.weight);\n  }\n\n  /**\n   * Calculate sector analysis\n   */\n  async calculateSectorAnalysis(userId, startDate, endDate) {\n    const query = `\n      SELECT \n        sector,\n        COUNT(*) as holding_count,\n        SUM(market_value) as total_value,\n        SUM(unrealized_pl) as total_pnl,\n        AVG(unrealized_plpc) as avg_return,\n        STDDEV(unrealized_plpc) as return_volatility\n      FROM portfolio_holdings \n      WHERE user_id = $1 \n        AND created_at >= $2 \n        AND created_at <= $3\n        AND quantity > 0\n        AND sector IS NOT NULL\n      GROUP BY sector\n      ORDER BY total_value DESC\n    `;\n    \n    const result = await this.db.query(query, [userId, startDate, endDate]);\n    const sectors = result.rows;\n    \n    const totalPortfolioValue = sectors.reduce((sum, sector) => sum + parseFloat(sector.total_value), 0);\n    \n    return {\n      sectorBreakdown: sectors.map(sector => ({\n        sector: sector.sector,\n        allocation: (parseFloat(sector.total_value) / totalPortfolioValue) * 100,\n        holdingCount: parseInt(sector.holding_count),\n        totalValue: parseFloat(sector.total_value),\n        totalPnL: parseFloat(sector.total_pnl),\n        averageReturn: parseFloat(sector.avg_return) || 0,\n        returnVolatility: parseFloat(sector.return_volatility) || 0,\n        contribution: (parseFloat(sector.total_pnl) / totalPortfolioValue) * 100\n      })),\n      diversificationScore: this.calculateDiversificationScore(sectors, totalPortfolioValue),\n      sectorCount: sectors.length,\n      totalPortfolioValue\n    };\n  }\n\n  /**\n   * Calculate diversification score\n   */\n  calculateDiversificationScore(sectors, totalPortfolioValue) {\n    // Calculate Herfindahl-Hirschman Index (HHI) for sector concentration\n    const hhi = sectors.reduce((sum, sector) => {\n      const weight = parseFloat(sector.total_value) / totalPortfolioValue;\n      return sum + (weight * weight);\n    }, 0);\n    \n    // Convert to diversification score (0-100, higher is better)\n    const diversificationScore = Math.max(0, (1 - hhi) * 100);\n    \n    return {\n      diversificationScore,\n      herfindahlIndex: hhi,\n      interpretation: this.getDiversificationInterpretation(diversificationScore)\n    };\n  }\n\n  /**\n   * Get diversification interpretation\n   */\n  getDiversificationInterpretation(score) {\n    if (score >= 80) return 'Highly Diversified';\n    if (score >= 60) return 'Well Diversified';\n    if (score >= 40) return 'Moderately Diversified';\n    if (score >= 20) return 'Somewhat Concentrated';\n    return 'Highly Concentrated';\n  }\n\n  /**\n   * Calculate factor exposure\n   */\n  async calculateFactorExposure(userId, startDate, endDate) {\n    // This would typically involve sophisticated factor analysis\n    // For now, return a basic implementation\n    \n    const query = `\n      SELECT \n        symbol,\n        market_value,\n        unrealized_plpc as return_pct,\n        sector\n      FROM portfolio_holdings \n      WHERE user_id = $1 \n        AND created_at >= $2 \n        AND created_at <= $3\n        AND quantity > 0\n        AND market_value > 0\n      ORDER BY market_value DESC\n    `;\n    \n    const result = await this.db.query(query, [userId, startDate, endDate]);\n    const holdings = result.rows;\n    \n    if (holdings.length === 0) {\n      return {\n        factorExposures: {},\n        riskFactors: {},\n        styleFactors: {}\n      };\n    }\n    \n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value), 0);\n    \n    // Calculate basic factor exposures\n    const factorExposures = {\n      size: this.calculateSizeFactor(holdings, totalValue),\n      value: this.calculateValueFactor(holdings, totalValue),\n      momentum: this.calculateMomentumFactor(holdings, totalValue),\n      quality: this.calculateQualityFactor(holdings, totalValue)\n    };\n    \n    const riskFactors = {\n      concentration: this.calculateConcentrationRisk(holdings, totalValue),\n      sectorConcentration: this.calculateSectorConcentrationRisk(holdings, totalValue),\n      volatility: this.calculateVolatilityRisk(holdings)\n    };\n    \n    const styleFactors = {\n      growthTilt: this.calculateGrowthTilt(holdings, totalValue),\n      valueTilt: this.calculateValueTilt(holdings, totalValue),\n      qualityTilt: this.calculateQualityTilt(holdings, totalValue)\n    };\n    \n    return {\n      factorExposures,\n      riskFactors,\n      styleFactors,\n      totalHoldings: holdings.length,\n      totalValue\n    };\n  }\n\n  /**\n   * Calculate size factor (placeholder implementation)\n   */\n  calculateSizeFactor(holdings, totalValue) {\n    // Simple proxy: weight of top 10 holdings (large cap bias)\n    const top10Value = holdings.slice(0, 10).reduce((sum, h) => sum + parseFloat(h.market_value), 0);\n    return (top10Value / totalValue) * 100;\n  }\n\n  /**\n   * Calculate value factor using P/E and P/B ratios\n   */\n  calculateValueFactor(holdings, totalValue) {\n    // Calculate weighted average P/E ratio as proxy for value tilt\n    // Higher P/E = growth tilt (positive value), Lower P/E = value tilt (negative value)\n    let weightedPE = 0;\n    let totalWeightWithPE = 0;\n    \n    holdings.forEach(holding => {\n      const weight = parseFloat(holding.market_value) / totalValue;\n      // Use a proxy P/E based on return performance (high performers = high P/E)\n      const proxyPE = 15 + (parseFloat(holding.return_pct || 0) * 0.5); // Base P/E of 15\n      \n      if (proxyPE > 0) {\n        weightedPE += weight * proxyPE;\n        totalWeightWithPE += weight;\n      }\n    });\n    \n    if (totalWeightWithPE === 0) return 0;\n    \n    const avgPE = weightedPE / totalWeightWithPE;\n    \n    // Convert to factor score: positive = growth, negative = value\n    // Market average P/E ~20, so adjust relative to that\n    return ((avgPE - 20) / 20) * 100;\n  }\n\n  /**\n   * Calculate momentum factor (placeholder implementation)\n   */\n  calculateMomentumFactor(holdings, totalValue) {\n    // Simple proxy: weighted average of returns\n    const weightedReturn = holdings.reduce((sum, h) => {\n      const weight = parseFloat(h.market_value) / totalValue;\n      const returnPct = parseFloat(h.return_pct) || 0;\n      return sum + (weight * returnPct);\n    }, 0);\n    return weightedReturn;\n  }\n\n  /**\n   * Calculate quality factor using fundamental metrics\n   */\n  calculateQualityFactor(holdings, totalValue) {\n    // Quality score based on diversification and position sizing\n    const maxPositionWeight = Math.max(...holdings.map(h => parseFloat(h.market_value) / totalValue));\n    const concentrationPenalty = Math.max(0, (maxPositionWeight - 0.1) * 100); // Penalty for positions > 10%\n    const diversificationBonus = Math.min(25, holdings.length * 2); // Bonus for more holdings\n    \n    return Math.max(0, 75 + diversificationBonus - concentrationPenalty);\n  }\n\n  /**\n   * Calculate concentration risk\n   */\n  calculateConcentrationRisk(holdings, totalValue) {\n    const top1Weight = holdings.length > 0 ? (parseFloat(holdings[0].market_value) / totalValue) * 100 : 0;\n    const top5Weight = holdings.slice(0, 5).reduce((sum, h) => sum + parseFloat(h.market_value), 0) / totalValue * 100;\n    \n    return {\n      top1Weight,\n      top5Weight,\n      riskLevel: top1Weight > 20 ? 'High' : top1Weight > 10 ? 'Medium' : 'Low'\n    };\n  }\n\n  /**\n   * Calculate sector concentration risk\n   */\n  calculateSectorConcentrationRisk(holdings, totalValue) {\n    const sectorMap = new Map();\n    \n    holdings.forEach(holding => {\n      const sector = holding.sector || 'Unknown';\n      const value = parseFloat(holding.market_value);\n      \n      if (!sectorMap.has(sector)) {\n        sectorMap.set(sector, 0);\n      }\n      sectorMap.set(sector, sectorMap.get(sector) + value);\n    });\n    \n    const sectorWeights = Array.from(sectorMap.values()).map(value => (value / totalValue) * 100);\n    const maxSectorWeight = Math.max(...sectorWeights);\n    \n    return {\n      maxSectorWeight,\n      sectorCount: sectorMap.size,\n      riskLevel: maxSectorWeight > 40 ? 'High' : maxSectorWeight > 25 ? 'Medium' : 'Low'\n    };\n  }\n\n  /**\n   * Calculate volatility risk\n   */\n  calculateVolatilityRisk(holdings) {\n    const returns = holdings.map(h => parseFloat(h.return_pct) || 0);\n    const meanReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - meanReturn, 2), 0) / returns.length;\n    const volatility = Math.sqrt(variance);\n    \n    return {\n      volatility,\n      riskLevel: volatility > 25 ? 'High' : volatility > 15 ? 'Medium' : 'Low'\n    };\n  }\n\n  /**\n   * Calculate growth tilt\n   */\n  calculateGrowthTilt(holdings, totalValue) {\n    // Placeholder: assume growth tilt based on sector distribution\n    const techWeight = holdings.filter(h => h.sector === 'Technology').reduce((sum, h) => sum + parseFloat(h.market_value), 0);\n    return (techWeight / totalValue) * 100;\n  }\n\n  /**\n   * Calculate value tilt\n   */\n  calculateValueTilt(holdings, totalValue) {\n    // Placeholder: assume value tilt based on sector distribution\n    const valueWeight = holdings.filter(h => ['Finance', 'Energy', 'Utilities'].includes(h.sector)).reduce((sum, h) => sum + parseFloat(h.market_value), 0);\n    return (valueWeight / totalValue) * 100;\n  }\n\n  /**\n   * Calculate quality tilt\n   */\n  calculateQualityTilt(holdings, totalValue) {\n    // Placeholder: assume quality based on diversification\n    return Math.min(100, holdings.length * 1.5);\n  }\n\n  /**\n   * Calculate days in period\n   */\n  calculateDaysInPeriod(startDate, endDate) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const timeDiff = end.getTime() - start.getTime();\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  }\n\n  /**\n   * Generate performance report\n   */\n  async generatePerformanceReport(userId, startDate, endDate, format = 'detailed') {\n    const startTime = Date.now();\n    \n    try {\n      const performanceMetrics = await this.calculatePortfolioPerformance(userId, startDate, endDate);\n      \n      const report = {\n        reportId: `perf_${userId}_${Date.now()}`,\n        userId,\n        period: performanceMetrics.period,\n        summary: this.generatePerformanceSummary(performanceMetrics),\n        metrics: format === 'detailed' ? performanceMetrics : this.getBasicMetrics(performanceMetrics),\n        recommendations: this.generateRecommendations(performanceMetrics),\n        generatedAt: new Date().toISOString(),\n        generationTime: Date.now() - startTime\n      };\n      \n      this.logger.info('Performance report generated', {\n        userId: `${userId.substring(0, 8)}...`,\n        reportId: report.reportId,\n        generationTime: report.generationTime\n      });\n      \n      return report;\n      \n    } catch (error) {\n      this.logger.error('Error generating performance report', {\n        userId: `${userId.substring(0, 8)}...`,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate performance summary\n   */\n  generatePerformanceSummary(metrics) {\n    const { baseMetrics, riskMetrics, sectorAnalysis } = metrics;\n    \n    return {\n      overallPerformance: this.getPerformanceGrade(baseMetrics.totalReturnPercent),\n      keyHighlights: [\n        `Total Return: ${baseMetrics.totalReturnPercent.toFixed(2)}%`,\n        `Annualized Return: ${baseMetrics.annualizedReturn.toFixed(2)}%`,\n        `Volatility: ${riskMetrics.volatility.toFixed(2)}%`,\n        `Max Drawdown: ${riskMetrics.maxDrawdown.toFixed(2)}%`,\n        `Diversification: ${sectorAnalysis.diversificationScore.diversificationScore.toFixed(0)}/100`\n      ],\n      riskProfile: this.assessRiskProfile(riskMetrics),\n      recommendation: this.getOverallRecommendation(metrics)\n    };\n  }\n\n  /**\n   * Get performance grade\n   */\n  getPerformanceGrade(returnPercent) {\n    if (returnPercent >= 20) return 'A+';\n    if (returnPercent >= 15) return 'A';\n    if (returnPercent >= 10) return 'B+';\n    if (returnPercent >= 5) return 'B';\n    if (returnPercent >= 0) return 'C';\n    if (returnPercent >= -5) return 'D';\n    return 'F';\n  }\n\n  /**\n   * Assess risk profile\n   */\n  assessRiskProfile(riskMetrics) {\n    const { volatility, maxDrawdown } = riskMetrics;\n    \n    if (volatility > 25 || maxDrawdown > 20) return 'High Risk';\n    if (volatility > 15 || maxDrawdown > 10) return 'Medium Risk';\n    return 'Low Risk';\n  }\n\n  /**\n   * Get overall recommendation\n   */\n  getOverallRecommendation(metrics) {\n    const { baseMetrics, riskMetrics, sectorAnalysis } = metrics;\n    \n    if (baseMetrics.totalReturnPercent > 10 && riskMetrics.volatility < 20) {\n      return 'Excellent performance with controlled risk. Continue current strategy.';\n    } else if (baseMetrics.totalReturnPercent > 0 && riskMetrics.maxDrawdown < 15) {\n      return 'Solid performance. Consider optimizing for better risk-adjusted returns.';\n    } else if (riskMetrics.volatility > 25) {\n      return 'High volatility detected. Consider diversification to reduce risk.';\n    } else {\n      return 'Performance needs improvement. Review strategy and consider rebalancing.';\n    }\n  }\n\n  /**\n   * Get basic metrics for simplified reports\n   */\n  getBasicMetrics(performanceMetrics) {\n    return {\n      totalReturn: performanceMetrics.baseMetrics.totalReturnPercent,\n      annualizedReturn: performanceMetrics.baseMetrics.annualizedReturn,\n      volatility: performanceMetrics.riskMetrics.volatility,\n      maxDrawdown: performanceMetrics.riskMetrics.maxDrawdown,\n      sharpeRatio: performanceMetrics.benchmarkMetrics.sharpeRatio,\n      sectorCount: performanceMetrics.sectorAnalysis.sectorCount\n    };\n  }\n\n  /**\n   * Generate recommendations\n   */\n  generateRecommendations(metrics) {\n    const recommendations = [];\n    \n    // Risk-based recommendations\n    if (metrics.riskMetrics.volatility > 25) {\n      recommendations.push({\n        type: 'risk_management',\n        priority: 'high',\n        title: 'High Volatility Alert',\n        description: 'Portfolio volatility is above 25%. Consider diversification or position sizing adjustments.',\n        action: 'Reduce concentration in high-volatility positions'\n      });\n    }\n    \n    // Concentration recommendations\n    if (metrics.factorExposures && \n        metrics.factorExposures.riskFactors && \n        metrics.factorExposures.riskFactors.concentration && \n        metrics.factorExposures.riskFactors.concentration.top1Weight > 20) {\n      recommendations.push({\n        type: 'diversification',\n        priority: 'medium',\n        title: 'Position Concentration',\n        description: 'Largest position exceeds 20% of portfolio. Consider reducing concentration.',\n        action: 'Trim largest position or add diversifying holdings'\n      });\n    }\n    \n    // Performance recommendations\n    if (metrics.baseMetrics.totalReturnPercent < 0) {\n      recommendations.push({\n        type: 'performance',\n        priority: 'high',\n        title: 'Negative Returns',\n        description: 'Portfolio has negative returns. Review strategy and consider rebalancing.',\n        action: 'Conduct thorough portfolio review and strategy reassessment'\n      });\n    }\n    \n    return recommendations;\n  }\n  /**\n   * Calculate aligned portfolio returns for benchmark comparison\n   */\n  calculateAlignedPortfolioReturns(portfolioHistory, benchmarkDates) {\n    const portfolioReturns = [];\n    \n    for (let i = 1; i < benchmarkDates.length; i++) {\n      const benchmarkDate = benchmarkDates[i].date;\n      const prevBenchmarkDate = benchmarkDates[i - 1].date;\n      \n      // Find portfolio values for these dates\n      const currentPortfolio = portfolioHistory.find(p => p.date === benchmarkDate);\n      const previousPortfolio = portfolioHistory.find(p => p.date === prevBenchmarkDate);\n      \n      if (currentPortfolio && previousPortfolio) {\n        const currentValue = parseFloat(currentPortfolio.total_value);\n        const previousValue = parseFloat(previousPortfolio.total_value);\n        if (previousValue > 0) {\n          const portfolioReturn = (currentValue - previousValue) / previousValue;\n          portfolioReturns.push(portfolioReturn);\n        }\n      }\n    }\n    \n    return portfolioReturns;\n  }\n\n  /**\n   * Calculate beta, alpha, and correlation with benchmark\n   */\n  calculateBetaAndAlpha(portfolioReturns, benchmarkReturns) {\n    if (portfolioReturns.length !== benchmarkReturns.length || portfolioReturns.length < 2) {\n      return { beta: 0, alpha: 0, correlation: 0 };\n    }\n\n    const portfolioMean = portfolioReturns.reduce((sum, ret) => sum + ret, 0) / portfolioReturns.length;\n    const benchmarkMean = benchmarkReturns.reduce((sum, ret) => sum + ret, 0) / benchmarkReturns.length;\n    \n    let covariance = 0;\n    let portfolioVariance = 0;\n    let benchmarkVariance = 0;\n    \n    for (let i = 0; i < portfolioReturns.length; i++) {\n      const portfolioDiff = portfolioReturns[i] - portfolioMean;\n      const benchmarkDiff = benchmarkReturns[i] - benchmarkMean;\n      \n      covariance += portfolioDiff * benchmarkDiff;\n      portfolioVariance += portfolioDiff * portfolioDiff;\n      benchmarkVariance += benchmarkDiff * benchmarkDiff;\n    }\n    \n    covariance /= portfolioReturns.length;\n    portfolioVariance /= portfolioReturns.length;\n    benchmarkVariance /= benchmarkReturns.length;\n    \n    const beta = benchmarkVariance > 0 ? covariance / benchmarkVariance : 0;\n    const correlation = (portfolioVariance > 0 && benchmarkVariance > 0) ? \n      covariance / (Math.sqrt(portfolioVariance) * Math.sqrt(benchmarkVariance)) : 0;\n    const alpha = portfolioMean - (beta * benchmarkMean);\n    \n    return { beta, alpha, correlation };\n  }\n\n  /**\n   * Calculate tracking error\n   */\n  calculateTrackingError(portfolioReturns, benchmarkReturns) {\n    if (portfolioReturns.length !== benchmarkReturns.length || portfolioReturns.length < 2) {\n      return 0;\n    }\n\n    const trackingDifferences = portfolioReturns.map((pRet, i) => pRet - benchmarkReturns[i]);\n    const meanDifference = trackingDifferences.reduce((sum, diff) => sum + diff, 0) / trackingDifferences.length;\n    const variance = trackingDifferences.reduce((sum, diff) => sum + Math.pow(diff - meanDifference, 2), 0) / trackingDifferences.length;\n    \n    return Math.sqrt(variance);\n  }\n\n  /**\n   * Calculate up and down capture ratios\n   */\n  calculateCaptureRatios(portfolioReturns, benchmarkReturns) {\n    if (portfolioReturns.length !== benchmarkReturns.length || portfolioReturns.length < 2) {\n      return { upCaptureRatio: 0, downCaptureRatio: 0 };\n    }\n\n    const upPeriods = [];\n    const downPeriods = [];\n    \n    for (let i = 0; i < benchmarkReturns.length; i++) {\n      if (benchmarkReturns[i] > 0) {\n        upPeriods.push({ portfolio: portfolioReturns[i], benchmark: benchmarkReturns[i] });\n      } else if (benchmarkReturns[i] < 0) {\n        downPeriods.push({ portfolio: portfolioReturns[i], benchmark: benchmarkReturns[i] });\n      }\n    }\n    \n    const upCaptureRatio = upPeriods.length > 0 ?\n      (upPeriods.reduce((sum, p) => sum + p.portfolio, 0) / upPeriods.length) /\n      (upPeriods.reduce((sum, p) => sum + p.benchmark, 0) / upPeriods.length) : 0;\n      \n    const downCaptureRatio = downPeriods.length > 0 ?\n      (downPeriods.reduce((sum, p) => sum + p.portfolio, 0) / downPeriods.length) /\n      (downPeriods.reduce((sum, p) => sum + p.benchmark, 0) / downPeriods.length) : 0;\n    \n    return { upCaptureRatio, downCaptureRatio };\n  }\n\n  /**\n   * Calculate volatility (standard deviation)\n   */\n  calculateVolatility(returns) {\n    if (returns.length < 2) return 0;\n    \n    const mean = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - mean, 2), 0) / returns.length;\n    \n    return Math.sqrt(variance);\n  }\n}\n\nmodule.exports = { AdvancedPerformanceAnalytics };"],"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","ignoreList":[]}