{"version":3,"names":["EventEmitter","require","WebSocket","WebSocketManager","constructor","options","maxReconnectAttempts","reconnectDelay","maxReconnectDelay","heartbeatInterval","connectionTimeout","connections","Map","subscriptions","reconnectAttempts","heartbeatIntervals","providers","alpaca","wsUrl","authRequired","dataTypes","rateLimit","polygon","finnhub","circuitBreakers","initializeCircuitBreakers","Object","keys","forEach","provider","set","failures","lastFailureTime","state","threshold","timeout","connect","apiKey","symbols","circuitBreaker","get","timeSinceFailure","Date","now","Error","Math","ceil","providerConfig","console","log","ws","connectionId","setTimeout","readyState","CONNECTING","close","handleConnectionFailure","onopen","clearTimeout","connected","lastActivity","Set","authenticate","length","subscribe","startHeartbeat","emit","onmessage","event","handleMessage","data","onclose","code","reason","handleDisconnection","onerror","error","connection","authMessage","action","key","keyId","secret","secretKey","params","type","symbol","send","JSON","stringify","subscribeMessage","trades","quotes","bars","join","msg","add","has","unsubscribe","unsubscribeMessage","delete","symbolProviders","size","message","parse","parseError","warn","timestamp","handleProviderMessage","T","S","price","p","s","t","bid","bp","ask","ap","bidSize","bs","askSize","as","ev","sym","trade","v","stopHeartbeat","attemptReconnection","attempts","delay","min","pow","attempt","interval","setInterval","clearInterval","timeSinceLastActivity","OPEN","ping","disconnect","disconnectAll","getConnectionStatus","status","Array","from","circuitBreakerState","getSubscriptions","module","exports"],"sources":["webSocketManager.js"],"sourcesContent":["// WebSocket Connection Manager - Real-time Market Data Streaming\n// Handles multi-provider WebSocket connections with reconnection logic and failover\n\nconst EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass WebSocketManager extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.options = {\n      maxReconnectAttempts: options.maxReconnectAttempts || 5,\n      reconnectDelay: options.reconnectDelay || 1000,\n      maxReconnectDelay: options.maxReconnectDelay || 30000,\n      heartbeatInterval: options.heartbeatInterval || 30000,\n      connectionTimeout: options.connectionTimeout || 10000,\n      ...options\n    };\n    \n    // Connection state management\n    this.connections = new Map();\n    this.subscriptions = new Map();\n    this.reconnectAttempts = new Map();\n    this.heartbeatIntervals = new Map();\n    \n    // Provider configurations\n    this.providers = {\n      alpaca: {\n        wsUrl: 'wss://stream.data.alpaca.markets/v2/iex',\n        authRequired: true,\n        dataTypes: ['trades', 'quotes', 'bars'],\n        rateLimit: 200 // messages per second\n      },\n      polygon: {\n        wsUrl: 'wss://socket.polygon.io/stocks',\n        authRequired: true,\n        dataTypes: ['T', 'Q', 'A'], // trades, quotes, aggregates\n        rateLimit: 100\n      },\n      finnhub: {\n        wsUrl: 'wss://ws.finnhub.io',\n        authRequired: true,\n        dataTypes: ['trade', 'quote'],\n        rateLimit: 60\n      }\n    };\n    \n    // Circuit breaker for each provider\n    this.circuitBreakers = new Map();\n    this.initializeCircuitBreakers();\n  }\n  \n  initializeCircuitBreakers() {\n    Object.keys(this.providers).forEach(provider => {\n      this.circuitBreakers.set(provider, {\n        failures: 0,\n        lastFailureTime: null,\n        state: 'CLOSED', // CLOSED, OPEN, HALF_OPEN\n        threshold: 3,\n        timeout: 60000 // 1 minute\n      });\n    });\n  }\n  \n  async connect(provider, apiKey, symbols = []) {\n    try {\n      const circuitBreaker = this.circuitBreakers.get(provider);\n      \n      // Check circuit breaker state\n      if (circuitBreaker.state === 'OPEN') {\n        const timeSinceFailure = Date.now() - circuitBreaker.lastFailureTime;\n        if (timeSinceFailure < circuitBreaker.timeout) {\n          throw new Error(`Circuit breaker OPEN for ${provider}. Retry in ${Math.ceil((circuitBreaker.timeout - timeSinceFailure) / 1000)}s`);\n        } else {\n          circuitBreaker.state = 'HALF_OPEN';\n        }\n      }\n      \n      const providerConfig = this.providers[provider];\n      if (!providerConfig) {\n        throw new Error(`Unknown provider: ${provider}`);\n      }\n      \n      console.log(`🔌 Connecting to ${provider} WebSocket...`);\n      \n      const ws = new WebSocket(providerConfig.wsUrl);\n      const connectionId = `${provider}-${Date.now()}`;\n      \n      // Connection timeout\n      const connectionTimeout = setTimeout(() => {\n        if (ws.readyState === WebSocket.CONNECTING) {\n          ws.close();\n          this.handleConnectionFailure(provider, new Error('Connection timeout'));\n        }\n      }, this.options.connectionTimeout);\n      \n      ws.onopen = () => {\n        clearTimeout(connectionTimeout);\n        console.log(`✅ Connected to ${provider} WebSocket`);\n        \n        // Reset circuit breaker on successful connection\n        circuitBreaker.failures = 0;\n        circuitBreaker.state = 'CLOSED';\n        \n        // Store connection\n        this.connections.set(provider, {\n          ws,\n          connectionId,\n          provider,\n          connected: true,\n          lastActivity: Date.now(),\n          subscriptions: new Set()\n        });\n        \n        // Authenticate if required\n        if (providerConfig.authRequired) {\n          this.authenticate(provider, apiKey);\n        }\n        \n        // Subscribe to symbols if provided\n        if (symbols.length > 0) {\n          this.subscribe(provider, symbols);\n        }\n        \n        // Start heartbeat\n        this.startHeartbeat(provider);\n        \n        this.emit('connected', { provider, connectionId });\n      };\n      \n      ws.onmessage = (event) => {\n        this.handleMessage(provider, event.data);\n      };\n      \n      ws.onclose = (event) => {\n        console.log(`🔌 ${provider} WebSocket closed:`, event.code, event.reason);\n        this.handleDisconnection(provider, event);\n      };\n      \n      ws.onerror = (error) => {\n        console.error(`❌ ${provider} WebSocket error:`, error);\n        this.handleConnectionFailure(provider, error);\n      };\n      \n      return connectionId;\n      \n    } catch (error) {\n      this.handleConnectionFailure(provider, error);\n      throw error;\n    }\n  }\n  \n  authenticate(provider, apiKey) {\n    const connection = this.connections.get(provider);\n    if (!connection || !connection.connected) {\n      throw new Error(`No active connection for ${provider}`);\n    }\n    \n    let authMessage;\n    \n    switch (provider) {\n      case 'alpaca':\n        authMessage = {\n          action: 'auth',\n          key: apiKey.keyId,\n          secret: apiKey.secretKey\n        };\n        break;\n        \n      case 'polygon':\n        authMessage = {\n          action: 'auth',\n          params: apiKey.keyId\n        };\n        break;\n        \n      case 'finnhub':\n        authMessage = {\n          type: 'subscribe',\n          symbol: 'BINANCE:BTCUSDT' // Test subscription\n        };\n        // Finnhub uses token in URL, so no auth message needed\n        return;\n        \n      default:\n        throw new Error(`Authentication not implemented for ${provider}`);\n    }\n    \n    connection.ws.send(JSON.stringify(authMessage));\n    console.log(`🔐 Sent authentication to ${provider}`);\n  }\n  \n  subscribe(provider, symbols) {\n    const connection = this.connections.get(provider);\n    if (!connection || !connection.connected) {\n      throw new Error(`No active connection for ${provider}`);\n    }\n    \n    let subscribeMessage;\n    \n    switch (provider) {\n      case 'alpaca':\n        subscribeMessage = {\n          action: 'subscribe',\n          trades: symbols,\n          quotes: symbols,\n          bars: symbols\n        };\n        break;\n        \n      case 'polygon':\n        subscribeMessage = {\n          action: 'subscribe',\n          params: `T.${symbols.join(',T.')}`\n        };\n        break;\n        \n      case 'finnhub':\n        // Finnhub requires individual symbol subscriptions\n        symbols.forEach(symbol => {\n          const msg = {\n            type: 'subscribe',\n            symbol: symbol\n          };\n          connection.ws.send(JSON.stringify(msg));\n        });\n        return;\n        \n      default:\n        throw new Error(`Subscription not implemented for ${provider}`);\n    }\n    \n    connection.ws.send(JSON.stringify(subscribeMessage));\n    \n    // Track subscriptions\n    symbols.forEach(symbol => {\n      connection.subscriptions.add(symbol);\n      \n      if (!this.subscriptions.has(symbol)) {\n        this.subscriptions.set(symbol, new Set());\n      }\n      this.subscriptions.get(symbol).add(provider);\n    });\n    \n    console.log(`📊 Subscribed to ${symbols.length} symbols on ${provider}`);\n  }\n  \n  unsubscribe(provider, symbols) {\n    const connection = this.connections.get(provider);\n    if (!connection || !connection.connected) {\n      return;\n    }\n    \n    let unsubscribeMessage;\n    \n    switch (provider) {\n      case 'alpaca':\n        unsubscribeMessage = {\n          action: 'unsubscribe',\n          trades: symbols,\n          quotes: symbols,\n          bars: symbols\n        };\n        break;\n        \n      case 'polygon':\n        unsubscribeMessage = {\n          action: 'unsubscribe',\n          params: `T.${symbols.join(',T.')}`\n        };\n        break;\n        \n      case 'finnhub':\n        symbols.forEach(symbol => {\n          const msg = {\n            type: 'unsubscribe',\n            symbol: symbol\n          };\n          connection.ws.send(JSON.stringify(msg));\n        });\n        return;\n        \n      default:\n        return;\n    }\n    \n    connection.ws.send(JSON.stringify(unsubscribeMessage));\n    \n    // Remove from tracking\n    symbols.forEach(symbol => {\n      connection.subscriptions.delete(symbol);\n      \n      const symbolProviders = this.subscriptions.get(symbol);\n      if (symbolProviders) {\n        symbolProviders.delete(provider);\n        if (symbolProviders.size === 0) {\n          this.subscriptions.delete(symbol);\n        }\n      }\n    });\n    \n    console.log(`📊 Unsubscribed from ${symbols.length} symbols on ${provider}`);\n  }\n  \n  handleMessage(provider, data) {\n    try {\n      const connection = this.connections.get(provider);\n      if (connection) {\n        connection.lastActivity = Date.now();\n      }\n      \n      let message;\n      try {\n        message = JSON.parse(data);\n      } catch (parseError) {\n        console.warn(`Failed to parse message from ${provider}:`, data);\n        return;\n      }\n      \n      // Emit raw message for processing by data normalization service\n      this.emit('message', {\n        provider,\n        data: message,\n        timestamp: Date.now()\n      });\n      \n      // Handle provider-specific messages\n      this.handleProviderMessage(provider, message);\n      \n    } catch (error) {\n      console.error(`Error handling message from ${provider}:`, error);\n    }\n  }\n  \n  handleProviderMessage(provider, message) {\n    switch (provider) {\n      case 'alpaca':\n        if (message.T === 't') { // Trade\n          this.emit('trade', {\n            provider,\n            symbol: message.S,\n            price: message.p,\n            size: message.s,\n            timestamp: new Date(message.t)\n          });\n        } else if (message.T === 'q') { // Quote\n          this.emit('quote', {\n            provider,\n            symbol: message.S,\n            bid: message.bp,\n            ask: message.ap,\n            bidSize: message.bs,\n            askSize: message.as,\n            timestamp: new Date(message.t)\n          });\n        }\n        break;\n        \n      case 'polygon':\n        if (message.ev === 'T') { // Trade\n          this.emit('trade', {\n            provider,\n            symbol: message.sym,\n            price: message.p,\n            size: message.s,\n            timestamp: new Date(message.t)\n          });\n        }\n        break;\n        \n      case 'finnhub':\n        if (message.type === 'trade') {\n          message.data.forEach(trade => {\n            this.emit('trade', {\n              provider,\n              symbol: trade.s,\n              price: trade.p,\n              size: trade.v,\n              timestamp: new Date(trade.t)\n            });\n          });\n        }\n        break;\n    }\n  }\n  \n  handleDisconnection(provider, event) {\n    const connection = this.connections.get(provider);\n    if (connection) {\n      connection.connected = false;\n      this.stopHeartbeat(provider);\n    }\n    \n    this.emit('disconnected', { provider, code: event.code, reason: event.reason });\n    \n    // Attempt reconnection unless it was a clean close\n    if (event.code !== 1000) {\n      this.attemptReconnection(provider);\n    }\n  }\n  \n  handleConnectionFailure(provider, error) {\n    const circuitBreaker = this.circuitBreakers.get(provider);\n    circuitBreaker.failures++;\n    circuitBreaker.lastFailureTime = Date.now();\n    \n    if (circuitBreaker.failures >= circuitBreaker.threshold) {\n      circuitBreaker.state = 'OPEN';\n      console.log(`🚨 Circuit breaker OPEN for ${provider} after ${circuitBreaker.failures} failures`);\n    }\n    \n    this.emit('error', { provider, error });\n  }\n  \n  async attemptReconnection(provider) {\n    const attempts = this.reconnectAttempts.get(provider) || 0;\n    \n    if (attempts >= this.options.maxReconnectAttempts) {\n      console.log(`❌ Max reconnection attempts reached for ${provider}`);\n      this.emit('maxReconnectAttemptsReached', { provider });\n      return;\n    }\n    \n    const delay = Math.min(\n      this.options.reconnectDelay * Math.pow(2, attempts),\n      this.options.maxReconnectDelay\n    );\n    \n    this.reconnectAttempts.set(provider, attempts + 1);\n    \n    console.log(`🔄 Reconnecting to ${provider} in ${delay}ms (attempt ${attempts + 1}/${this.options.maxReconnectAttempts})`);\n    \n    setTimeout(() => {\n      // TODO: Reconnect with stored API key and subscriptions\n      this.emit('reconnectAttempt', { provider, attempt: attempts + 1 });\n    }, delay);\n  }\n  \n  startHeartbeat(provider) {\n    const interval = setInterval(() => {\n      const connection = this.connections.get(provider);\n      if (!connection || !connection.connected) {\n        clearInterval(interval);\n        return;\n      }\n      \n      // Check if connection is still alive\n      const timeSinceLastActivity = Date.now() - connection.lastActivity;\n      if (timeSinceLastActivity > this.options.heartbeatInterval * 2) {\n        console.warn(`❤️ No activity from ${provider} for ${timeSinceLastActivity}ms, closing connection`);\n        connection.ws.close();\n        return;\n      }\n      \n      // Send ping if supported by provider\n      if (connection.ws.readyState === WebSocket.OPEN) {\n        try {\n          connection.ws.ping();\n        } catch (error) {\n          // Ping not supported, just check connection state\n        }\n      }\n    }, this.options.heartbeatInterval);\n    \n    this.heartbeatIntervals.set(provider, interval);\n  }\n  \n  stopHeartbeat(provider) {\n    const interval = this.heartbeatIntervals.get(provider);\n    if (interval) {\n      clearInterval(interval);\n      this.heartbeatIntervals.delete(provider);\n    }\n  }\n  \n  disconnect(provider) {\n    const connection = this.connections.get(provider);\n    if (connection && connection.connected) {\n      connection.ws.close(1000, 'Client disconnect');\n      this.connections.delete(provider);\n      this.stopHeartbeat(provider);\n      this.reconnectAttempts.delete(provider);\n    }\n  }\n  \n  disconnectAll() {\n    this.connections.forEach((connection, provider) => {\n      this.disconnect(provider);\n    });\n  }\n  \n  getConnectionStatus() {\n    const status = {};\n    \n    this.connections.forEach((connection, provider) => {\n      const circuitBreaker = this.circuitBreakers.get(provider);\n      status[provider] = {\n        connected: connection.connected,\n        lastActivity: connection.lastActivity,\n        subscriptions: Array.from(connection.subscriptions),\n        circuitBreakerState: circuitBreaker.state,\n        failures: circuitBreaker.failures,\n        reconnectAttempts: this.reconnectAttempts.get(provider) || 0\n      };\n    });\n    \n    return status;\n  }\n  \n  getSubscriptions() {\n    const subscriptions = {};\n    \n    this.subscriptions.forEach((providers, symbol) => {\n      subscriptions[symbol] = Array.from(providers);\n    });\n    \n    return subscriptions;\n  }\n}\n\nmodule.exports = WebSocketManager;"],"mappings":"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","ignoreList":[]}