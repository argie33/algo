{"version":3,"names":["cov_2m9w6esyql","actualCoverage","query","safeQuery","transaction","s","require","createRequestLogger","DatabaseOptimizer","constructor","options","b","f","slowQueryThreshold","analyzeStatisticsInterval","enableAutoIndexing","maxAnalysisQueries","logger","performanceMetrics","totalQueries","slowQueries","avgQueryTime","indexesCreated","optimizationsApplied","slowQueryLog","Map","indexRecommendations","optimizationHistory","info","analyzePerformance","analysisStart","Date","now","analysisId","analysis","id","timestamp","toISOString","missingIndexes","tableStatistics","recommendations","performance","analyzeSlowQueries","analyzeTableStatistics","identifyMissingIndexes","generateOptimizationRecommendations","calculatePerformanceMetrics","analysisDuration","duration","slowQueriesFound","length","missingIndexesFound","recommendationsGenerated","error","message","stack","extensionCheck","rows","has_extension","warn","analyzeQueryLogPatterns","processedQueries","map","row","sanitizeQuery","calls","parseInt","totalTime","parseFloat","total_time","meanTime","mean_time","maxTime","max_time","minTime","min_time","stddevTime","stddev_time","totalRows","total_rows","hitPercent","hit_percent","severity","calculateQuerySeverity","generateQueryRecommendations","queriesAnalyzed","averageTime","reduce","sum","q","pattern","recommendation","estimatedImpact","tableStats","tableSizes","indexStats","indexUsage","analyzeTableStatisticsForOptimizations","indexCandidates","table","columns","type","reason","priority","existingIndexes","getExistingIndexes","candidate","indexExists","checkIndexExists","tableExists","checkTableExists","push","estimateIndexImpact","createStatement","generateCreateIndexStatement","candidatesAnalyzed","indexes","some","index","tablename","every","col","indexdef","toLowerCase","includes","tableName","result","exists","indexCandidate","tableSize","sizeBytes","size_bytes","indexName","join","columnList","forEach","description","impact","sql","category","slowQuery","substring","total_size_bytes","total_size","sort","a","priorityOrder","applyOptimizations","applyStart","dryRun","maxIndexes","results","applied","failed","skipped","totalRecommendations","applyIndexRecommendation","success","applyDuration","action","createStart","createDuration","connectionStats","cacheStats","dbSize","stats","totalReads","heap_read","idx_read","totalHits","heap_hit","idx_hit","hitRatio","cacheHitRatio","toFixed","databaseSize","size","connectionStates","metrics","replace","trim","queryStats","idx_scan","indexname","getStatus","module","exports"],"sources":["databaseOptimizer.js"],"sourcesContent":["/**\n * Database Performance Optimizer\n * Analyzes query performance, identifies bottlenecks, and implements optimization strategies\n */\n\nconst { query, safeQuery, transaction } = require('./database');\nconst { createRequestLogger } = require('./logger');\n\nclass DatabaseOptimizer {\n  constructor(options = {}) {\n    this.options = {\n      slowQueryThreshold: options.slowQueryThreshold || 1000, // ms\n      analyzeStatisticsInterval: options.analyzeStatisticsInterval || 3600000, // 1 hour\n      enableAutoIndexing: options.enableAutoIndexing || false,\n      maxAnalysisQueries: options.maxAnalysisQueries || 100,\n      ...options\n    };\n\n    this.logger = createRequestLogger('db-optimizer');\n    this.performanceMetrics = {\n      totalQueries: 0,\n      slowQueries: 0,\n      avgQueryTime: 0,\n      indexesCreated: 0,\n      optimizationsApplied: 0\n    };\n\n    this.slowQueryLog = new Map(); // query -> performance data\n    this.indexRecommendations = new Map(); // table -> recommended indexes\n    this.optimizationHistory = [];\n\n    this.logger.info('🚀 Database Optimizer initialized', this.options);\n  }\n\n  /**\n   * Analyze database performance and provide optimization recommendations\n   */\n  async analyzePerformance() {\n    const analysisStart = Date.now();\n    const analysisId = `analysis_${Date.now()}`;\n\n    try {\n      this.logger.info('📊 Starting database performance analysis', { analysisId });\n\n      const analysis = {\n        id: analysisId,\n        timestamp: new Date().toISOString(),\n        slowQueries: [],\n        missingIndexes: [],\n        tableStatistics: [],\n        recommendations: [],\n        performance: {}\n      };\n\n      // Analyze slow queries\n      analysis.slowQueries = await this.analyzeSlowQueries();\n      \n      // Analyze table statistics\n      analysis.tableStatistics = await this.analyzeTableStatistics();\n      \n      // Identify missing indexes\n      analysis.missingIndexes = await this.identifyMissingIndexes();\n      \n      // Generate recommendations\n      analysis.recommendations = await this.generateOptimizationRecommendations(analysis);\n      \n      // Calculate performance metrics\n      analysis.performance = await this.calculatePerformanceMetrics();\n\n      const analysisDuration = Date.now() - analysisStart;\n      \n      this.logger.info('✅ Database performance analysis completed', {\n        analysisId,\n        duration: `${analysisDuration}ms`,\n        slowQueriesFound: analysis.slowQueries.length,\n        missingIndexesFound: analysis.missingIndexes.length,\n        recommendationsGenerated: analysis.recommendations.length\n      });\n\n      return analysis;\n\n    } catch (error) {\n      this.logger.error('❌ Database performance analysis failed', {\n        analysisId,\n        error: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze slow queries using PostgreSQL statistics\n   */\n  async analyzeSlowQueries() {\n    try {\n      // Check if pg_stat_statements extension is available\n      const extensionCheck = await safeQuery(`\n        SELECT EXISTS (\n          SELECT 1 FROM pg_extension WHERE extname = 'pg_stat_statements'\n        ) as has_extension\n      `);\n\n      if (!extensionCheck.rows[0]?.has_extension) {\n        this.logger.warn('pg_stat_statements extension not available, using query log analysis');\n        return await this.analyzeQueryLogPatterns();\n      }\n\n      // Get slow queries from pg_stat_statements\n      const slowQueries = await safeQuery(`\n        SELECT \n          query,\n          calls,\n          total_time,\n          mean_time,\n          max_time,\n          min_time,\n          stddev_time,\n          rows as total_rows,\n          100.0 * shared_blks_hit / nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent\n        FROM pg_stat_statements \n        WHERE mean_time > $1\n        ORDER BY mean_time DESC \n        LIMIT $2\n      `, [this.options.slowQueryThreshold, this.options.maxAnalysisQueries]);\n\n      const processedQueries = slowQueries.rows.map(row => ({\n        query: this.sanitizeQuery(row.query),\n        calls: parseInt(row.calls),\n        totalTime: parseFloat(row.total_time),\n        meanTime: parseFloat(row.mean_time),\n        maxTime: parseFloat(row.max_time),\n        minTime: parseFloat(row.min_time),\n        stddevTime: parseFloat(row.stddev_time),\n        totalRows: parseInt(row.total_rows),\n        hitPercent: parseFloat(row.hit_percent) || 0,\n        severity: this.calculateQuerySeverity(row),\n        recommendations: this.generateQueryRecommendations(row)\n      }));\n\n      this.logger.info('Slow queries analysis completed', {\n        queriesAnalyzed: processedQueries.length,\n        averageTime: processedQueries.reduce((sum, q) => sum + q.meanTime, 0) / processedQueries.length\n      });\n\n      return processedQueries;\n\n    } catch (error) {\n      this.logger.error('Error analyzing slow queries', { error: error.message });\n      return [];\n    }\n  }\n\n  /**\n   * Analyze query patterns from application logs (fallback method)\n   */\n  async analyzeQueryLogPatterns() {\n    // This would analyze query patterns from application logs\n    // For now, return common slow query patterns we've observed\n    return [\n      {\n        query: 'SELECT * FROM portfolio_holdings WHERE user_id = $1',\n        pattern: 'full_table_scan',\n        recommendation: 'Add index on user_id',\n        estimatedImpact: 'high'\n      },\n      {\n        query: 'SELECT * FROM price_daily WHERE symbol = $1 ORDER BY date DESC',\n        pattern: 'missing_compound_index',\n        recommendation: 'Add compound index on (symbol, date)',\n        estimatedImpact: 'medium'\n      }\n    ];\n  }\n\n  /**\n   * Analyze table statistics and bloat\n   */\n  async analyzeTableStatistics() {\n    try {\n      const tableStats = await safeQuery(`\n        SELECT \n          schemaname,\n          tablename,\n          attname,\n          n_distinct,\n          correlation,\n          null_frac,\n          avg_width,\n          most_common_vals,\n          most_common_freqs\n        FROM pg_stats \n        WHERE schemaname = 'public'\n        ORDER BY tablename, attname\n      `);\n\n      // Get table sizes and bloat estimates\n      const tableSizes = await safeQuery(`\n        SELECT \n          schemaname,\n          tablename,\n          pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as total_size,\n          pg_total_relation_size(schemaname||'.'||tablename) as total_size_bytes,\n          pg_size_pretty(pg_relation_size(schemaname||'.'||tablename)) as table_size,\n          pg_relation_size(schemaname||'.'||tablename) as table_size_bytes\n        FROM pg_tables \n        WHERE schemaname = 'public'\n        ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC\n      `);\n\n      // Get index usage statistics\n      const indexStats = await safeQuery(`\n        SELECT \n          schemaname,\n          tablename,\n          indexname,\n          idx_tup_read,\n          idx_tup_fetch,\n          idx_scan\n        FROM pg_stat_user_indexes\n        ORDER BY idx_scan DESC\n      `);\n\n      const analysis = {\n        tableStats: tableStats.rows,\n        tableSizes: tableSizes.rows,\n        indexUsage: indexStats.rows,\n        recommendations: []\n      };\n\n      // Analyze for optimization opportunities\n      analysis.recommendations = this.analyzeTableStatisticsForOptimizations(analysis);\n\n      return analysis;\n\n    } catch (error) {\n      this.logger.error('Error analyzing table statistics', { error: error.message });\n      return { tableStats: [], tableSizes: [], indexUsage: [], recommendations: [] };\n    }\n  }\n\n  /**\n   * Identify missing indexes based on query patterns\n   */\n  async identifyMissingIndexes() {\n    try {\n      const missingIndexes = [];\n\n      // Analyze common query patterns and suggest indexes\n      const indexCandidates = [\n        // Portfolio-related indexes\n        {\n          table: 'portfolio_holdings',\n          columns: ['user_id'],\n          type: 'btree',\n          reason: 'Frequent user portfolio queries',\n          priority: 'high'\n        },\n        {\n          table: 'portfolio_holdings',\n          columns: ['user_id', 'symbol'],\n          type: 'btree',\n          reason: 'User-specific symbol lookups',\n          priority: 'high'\n        },\n        {\n          table: 'portfolio_metadata',\n          columns: ['user_id'],\n          type: 'btree',\n          reason: 'User metadata queries',\n          priority: 'high'\n        },\n\n        // Price data indexes\n        {\n          table: 'price_daily',\n          columns: ['symbol'],\n          type: 'btree',\n          reason: 'Symbol-based price queries',\n          priority: 'high'\n        },\n        {\n          table: 'price_daily',\n          columns: ['symbol', 'date'],\n          type: 'btree',\n          reason: 'Time-series price queries',\n          priority: 'high'\n        },\n        {\n          table: 'price_daily',\n          columns: ['date'],\n          type: 'btree',\n          reason: 'Date-range queries',\n          priority: 'medium'\n        },\n\n        // Technical indicators indexes\n        {\n          table: 'technicals_daily',\n          columns: ['symbol', 'date'],\n          type: 'btree',\n          reason: 'Technical analysis queries',\n          priority: 'medium'\n        },\n\n        // Stock symbols indexes\n        {\n          table: 'stock_symbols',\n          columns: ['symbol'],\n          type: 'btree',\n          reason: 'Symbol lookups',\n          priority: 'high'\n        },\n        {\n          table: 'stock_symbols',\n          columns: ['exchange'],\n          type: 'btree',\n          reason: 'Exchange-based filtering',\n          priority: 'low'\n        },\n\n        // User API keys\n        {\n          table: 'user_api_keys',\n          columns: ['user_id'],\n          type: 'btree',\n          reason: 'User API key lookups',\n          priority: 'high'\n        },\n        {\n          table: 'user_api_keys',\n          columns: ['user_id', 'provider'],\n          type: 'btree',\n          reason: 'Provider-specific API key lookups',\n          priority: 'high'\n        }\n      ];\n\n      // Check which indexes already exist\n      const existingIndexes = await this.getExistingIndexes();\n      \n      for (const candidate of indexCandidates) {\n        const indexExists = this.checkIndexExists(existingIndexes, candidate);\n        \n        if (!indexExists) {\n          const tableExists = await this.checkTableExists(candidate.table);\n          \n          if (tableExists) {\n            missingIndexes.push({\n              ...candidate,\n              estimatedImpact: await this.estimateIndexImpact(candidate),\n              createStatement: this.generateCreateIndexStatement(candidate)\n            });\n          }\n        }\n      }\n\n      this.logger.info('Missing indexes analysis completed', {\n        candidatesAnalyzed: indexCandidates.length,\n        missingIndexes: missingIndexes.length,\n        existingIndexes: existingIndexes.length\n      });\n\n      return missingIndexes;\n\n    } catch (error) {\n      this.logger.error('Error identifying missing indexes', { error: error.message });\n      return [];\n    }\n  }\n\n  /**\n   * Get existing indexes\n   */\n  async getExistingIndexes() {\n    try {\n      const indexes = await safeQuery(`\n        SELECT \n          schemaname,\n          tablename,\n          indexname,\n          indexdef\n        FROM pg_indexes \n        WHERE schemaname = 'public'\n        ORDER BY tablename, indexname\n      `);\n\n      return indexes.rows;\n    } catch (error) {\n      this.logger.error('Error getting existing indexes', { error: error.message });\n      return [];\n    }\n  }\n\n  /**\n   * Check if an index already exists\n   */\n  checkIndexExists(existingIndexes, candidate) {\n    return existingIndexes.some(index => {\n      return index.tablename === candidate.table &&\n             candidate.columns.every(col => \n               index.indexdef.toLowerCase().includes(col.toLowerCase())\n             );\n    });\n  }\n\n  /**\n   * Check if a table exists\n   */\n  async checkTableExists(tableName) {\n    try {\n      const result = await safeQuery(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name = $1\n        )\n      `, [tableName]);\n\n      return result.rows[0]?.exists || false;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Estimate the impact of creating an index\n   */\n  async estimateIndexImpact(indexCandidate) {\n    try {\n      // Get table size\n      const tableSize = await safeQuery(`\n        SELECT pg_total_relation_size($1) as size_bytes\n      `, [indexCandidate.table]);\n\n      const sizeBytes = parseInt(tableSize.rows[0]?.size_bytes || 0);\n      \n      // Estimate based on table size and query patterns\n      if (sizeBytes > 100000000) { // > 100MB\n        return indexCandidate.priority === 'high' ? 'very_high' : 'high';\n      } else if (sizeBytes > 10000000) { // > 10MB\n        return indexCandidate.priority === 'high' ? 'high' : 'medium';\n      } else {\n        return 'medium';\n      }\n\n    } catch (error) {\n      return 'unknown';\n    }\n  }\n\n  /**\n   * Generate CREATE INDEX statement\n   */\n  generateCreateIndexStatement(indexCandidate) {\n    const indexName = `idx_${indexCandidate.table}_${indexCandidate.columns.join('_')}`;\n    const columnList = indexCandidate.columns.join(', ');\n    \n    return `CREATE INDEX CONCURRENTLY ${indexName} ON ${indexCandidate.table} USING ${indexCandidate.type} (${columnList});`;\n  }\n\n  /**\n   * Generate optimization recommendations\n   */\n  async generateOptimizationRecommendations(analysis) {\n    const recommendations = [];\n\n    // Index recommendations\n    analysis.missingIndexes.forEach(index => {\n      if (index.priority === 'high' || index.estimatedImpact === 'very_high') {\n        recommendations.push({\n          type: 'create_index',\n          priority: index.priority,\n          description: `Create index on ${index.table}(${index.columns.join(', ')})`,\n          reason: index.reason,\n          impact: index.estimatedImpact,\n          sql: index.createStatement,\n          category: 'performance'\n        });\n      }\n    });\n\n    // Query optimization recommendations\n    analysis.slowQueries.forEach(slowQuery => {\n      if (slowQuery.severity === 'high') {\n        recommendations.push({\n          type: 'optimize_query',\n          priority: 'high',\n          description: `Optimize slow query: ${slowQuery.query.substring(0, 100)}...`,\n          meanTime: slowQuery.meanTime,\n          calls: slowQuery.calls,\n          recommendations: slowQuery.recommendations,\n          category: 'query_optimization'\n        });\n      }\n    });\n\n    // Table maintenance recommendations\n    if (analysis.tableStatistics.tableSizes) {\n      analysis.tableStatistics.tableSizes.forEach(table => {\n        if (table.total_size_bytes > 1000000000) { // > 1GB\n          recommendations.push({\n            type: 'table_maintenance',\n            priority: 'medium',\n            description: `Consider partitioning or archiving large table: ${table.tablename}`,\n            tableSize: table.total_size,\n            category: 'maintenance'\n          });\n        }\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n   * Apply optimization recommendations\n   */\n  async applyOptimizations(recommendations, options = {}) {\n    const applyStart = Date.now();\n    const { dryRun = true, maxIndexes = 5 } = options;\n    \n    const results = {\n      applied: [],\n      failed: [],\n      skipped: []\n    };\n\n    try {\n      this.logger.info('🔧 Applying database optimizations', {\n        totalRecommendations: recommendations.length,\n        dryRun,\n        maxIndexes\n      });\n\n      let indexesCreated = 0;\n\n      for (const recommendation of recommendations) {\n        try {\n          if (recommendation.type === 'create_index' && indexesCreated < maxIndexes) {\n            const result = await this.applyIndexRecommendation(recommendation, dryRun);\n            \n            if (result.success) {\n              results.applied.push(result);\n              if (!dryRun) indexesCreated++;\n            } else {\n              results.failed.push(result);\n            }\n          } else if (recommendation.type === 'create_index') {\n            results.skipped.push({\n              recommendation,\n              reason: 'Index creation limit reached'\n            });\n          } else {\n            results.skipped.push({\n              recommendation,\n              reason: 'Optimization type not implemented'\n            });\n          }\n        } catch (error) {\n          results.failed.push({\n            recommendation,\n            error: error.message\n          });\n        }\n      }\n\n      const applyDuration = Date.now() - applyStart;\n      \n      this.logger.info('✅ Database optimization application completed', {\n        duration: `${applyDuration}ms`,\n        applied: results.applied.length,\n        failed: results.failed.length,\n        skipped: results.skipped.length,\n        dryRun\n      });\n\n      return results;\n\n    } catch (error) {\n      this.logger.error('❌ Error applying optimizations', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Apply index recommendation\n   */\n  async applyIndexRecommendation(recommendation, dryRun = true) {\n    try {\n      if (dryRun) {\n        this.logger.info('🔍 [DRY RUN] Would create index', {\n          sql: recommendation.sql,\n          table: recommendation.description\n        });\n        \n        return {\n          success: true,\n          recommendation,\n          action: 'dry_run',\n          message: 'Index creation validated (dry run)'\n        };\n      }\n\n      // Execute the index creation\n      const createStart = Date.now();\n      await safeQuery(recommendation.sql);\n      const createDuration = Date.now() - createStart;\n\n      this.logger.info('✅ Index created successfully', {\n        sql: recommendation.sql,\n        duration: `${createDuration}ms`\n      });\n\n      this.performanceMetrics.indexesCreated++;\n      this.performanceMetrics.optimizationsApplied++;\n\n      return {\n        success: true,\n        recommendation,\n        action: 'created',\n        duration: createDuration,\n        message: 'Index created successfully'\n      };\n\n    } catch (error) {\n      this.logger.error('❌ Failed to create index', {\n        sql: recommendation.sql,\n        error: error.message\n      });\n\n      return {\n        success: false,\n        recommendation,\n        error: error.message,\n        message: 'Index creation failed'\n      };\n    }\n  }\n\n  /**\n   * Calculate performance metrics\n   */\n  async calculatePerformanceMetrics() {\n    try {\n      // Get connection and cache statistics\n      const connectionStats = await safeQuery(`\n        SELECT \n          state,\n          count(*) as count\n        FROM pg_stat_activity \n        WHERE datname = current_database()\n        GROUP BY state\n      `);\n\n      const cacheStats = await safeQuery(`\n        SELECT \n          sum(heap_blks_read) as heap_read,\n          sum(heap_blks_hit) as heap_hit,\n          sum(idx_blks_read) as idx_read,\n          sum(idx_blks_hit) as idx_hit\n        FROM pg_statio_user_tables\n      `);\n\n      const dbSize = await safeQuery(`\n        SELECT pg_size_pretty(pg_database_size(current_database())) as size\n      `);\n\n      const stats = cacheStats.rows[0];\n      const totalReads = parseInt(stats.heap_read) + parseInt(stats.idx_read);\n      const totalHits = parseInt(stats.heap_hit) + parseInt(stats.idx_hit);\n      const hitRatio = totalHits / (totalHits + totalReads) * 100;\n\n      return {\n        cacheHitRatio: hitRatio.toFixed(2),\n        databaseSize: dbSize.rows[0]?.size,\n        connectionStates: connectionStats.rows,\n        metrics: this.performanceMetrics\n      };\n\n    } catch (error) {\n      this.logger.error('Error calculating performance metrics', { error: error.message });\n      return { error: error.message };\n    }\n  }\n\n  /**\n   * Utility methods\n   */\n  sanitizeQuery(query) {\n    // Remove parameter values and normalize for analysis\n    return query.replace(/\\$\\d+/g, '$?').replace(/\\s+/g, ' ').trim();\n  }\n\n  calculateQuerySeverity(queryStats) {\n    const meanTime = parseFloat(queryStats.mean_time);\n    const calls = parseInt(queryStats.calls);\n    \n    if (meanTime > 5000 || (meanTime > 1000 && calls > 100)) {\n      return 'high';\n    } else if (meanTime > 1000 || (meanTime > 500 && calls > 1000)) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }\n\n  generateQueryRecommendations(queryStats) {\n    const recommendations = [];\n    const query = queryStats.query.toLowerCase();\n    \n    if (query.includes('select *')) {\n      recommendations.push('Avoid SELECT *, specify only needed columns');\n    }\n    \n    if (query.includes('order by') && !query.includes('limit')) {\n      recommendations.push('Consider adding LIMIT to ORDER BY queries');\n    }\n    \n    if (parseFloat(queryStats.hit_percent) < 95) {\n      recommendations.push('Low cache hit ratio - consider indexing or query optimization');\n    }\n    \n    return recommendations;\n  }\n\n  analyzeTableStatisticsForOptimizations(analysis) {\n    const recommendations = [];\n    \n    // Analyze unused indexes\n    analysis.indexUsage.forEach(index => {\n      if (parseInt(index.idx_scan) === 0) {\n        recommendations.push({\n          type: 'remove_unused_index',\n          description: `Consider removing unused index: ${index.indexname}`,\n          table: index.tablename,\n          index: index.indexname\n        });\n      }\n    });\n    \n    return recommendations;\n  }\n\n  /**\n   * Get optimization status and metrics\n   */\n  getStatus() {\n    return {\n      metrics: this.performanceMetrics,\n      options: this.options,\n      slowQueries: this.slowQueryLog.size,\n      indexRecommendations: this.indexRecommendations.size,\n      optimizationHistory: this.optimizationHistory.length\n    };\n  }\n}\n\nmodule.exports = { DatabaseOptimizer };"],"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","ignoreList":[]}