{"version":3,"names":["cov_1fj3cpl13c","actualCoverage","validator","s","require","body","param","query","validationResult","InputValidationMiddleware","constructor","f","maxStringLength","maxArrayLength","allowedCurrencies","allowedTimeframes","validateSymbol","optional","isString","isLength","min","max","matches","withMessage","validateAmount","isNumeric","isFloat","isInt","validateDateRange","isISO8601","validatePagination","validateApiKey","validateTradingOrder","isIn","validatePortfolio","join","validateTechnicalAnalysis","isArray","validateSearch","sanitizeInput","req","res","next","sanitizeObject","obj","b","escape","replace","trim","Array","map","slice","sanitized","key","value","Object","entries","length","params","validateRateLimit","suspiciousPatterns","requestData","JSON","stringify","pattern","test","console","warn","ip","status","json","success","error","code","handleValidationErrors","errors","isEmpty","validationErrors","array","field","message","msg","method","path","details","preventSqlInjection","sqlPatterns","checkForSql","substring","i","getValidationRules","endpointType","rules","trading","portfolio","market","technical","search","auth","getSecurityMiddleware","module","exports"],"sources":["inputValidation.js"],"sourcesContent":["/**\n * Input Validation and Sanitization Middleware\n * Comprehensive security validation for financial trading platform\n */\n\nconst validator = require('validator');\nconst { body, param, query, validationResult } = require('express-validator');\n\nclass InputValidationMiddleware {\n    constructor() {\n        this.maxStringLength = 1000;\n        this.maxArrayLength = 100;\n        this.allowedCurrencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF'];\n        this.allowedTimeframes = ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w', '1M'];\n    }\n\n    /**\n     * Sanitize and validate financial symbol\n     */\n    validateSymbol() {\n        return [\n            body('symbol')\n                .optional()\n                .isString()\n                .isLength({ min: 1, max: 10 })\n                .matches(/^[A-Z0-9.-]+$/)\n                .withMessage('Symbol must be alphanumeric with dots/hyphens only'),\n            param('symbol')\n                .optional()\n                .isString()\n                .isLength({ min: 1, max: 10 })\n                .matches(/^[A-Z0-9.-]+$/)\n                .withMessage('Symbol must be alphanumeric with dots/hyphens only'),\n            query('symbol')\n                .optional()\n                .isString()\n                .isLength({ min: 1, max: 10 })\n                .matches(/^[A-Z0-9.-]+$/)\n                .withMessage('Symbol must be alphanumeric with dots/hyphens only')\n        ];\n    }\n\n    /**\n     * Validate financial amount/price\n     */\n    validateAmount() {\n        return [\n            body('amount')\n                .optional()\n                .isNumeric()\n                .isFloat({ min: 0, max: 1000000000 })\n                .withMessage('Amount must be a positive number under 1 billion'),\n            body('price')\n                .optional()\n                .isNumeric()\n                .isFloat({ min: 0.01, max: 100000 })\n                .withMessage('Price must be between 0.01 and 100,000'),\n            body('quantity')\n                .optional()\n                .isInt({ min: 1, max: 1000000 })\n                .withMessage('Quantity must be an integer between 1 and 1,000,000')\n        ];\n    }\n\n    /**\n     * Validate date ranges\n     */\n    validateDateRange() {\n        return [\n            body('startDate')\n                .optional()\n                .isISO8601()\n                .withMessage('Start date must be valid ISO8601 format'),\n            body('endDate')\n                .optional()\n                .isISO8601()\n                .withMessage('End date must be valid ISO8601 format'),\n            query('startDate')\n                .optional()\n                .isISO8601()\n                .withMessage('Start date must be valid ISO8601 format'),\n            query('endDate')\n                .optional()\n                .isISO8601()\n                .withMessage('End date must be valid ISO8601 format')\n        ];\n    }\n\n    /**\n     * Validate pagination parameters\n     */\n    validatePagination() {\n        return [\n            query('page')\n                .optional()\n                .isInt({ min: 1, max: 10000 })\n                .withMessage('Page must be an integer between 1 and 10,000'),\n            query('limit')\n                .optional()\n                .isInt({ min: 1, max: 1000 })\n                .withMessage('Limit must be an integer between 1 and 1,000'),\n            query('offset')\n                .optional()\n                .isInt({ min: 0, max: 100000 })\n                .withMessage('Offset must be a non-negative integer under 100,000')\n        ];\n    }\n\n    /**\n     * Validate API key format\n     */\n    validateApiKey() {\n        return [\n            body('apiKey')\n                .optional()\n                .isString()\n                .isLength({ min: 10, max: 200 })\n                .matches(/^[A-Za-z0-9_-]+$/)\n                .withMessage('API key must be alphanumeric with underscores/hyphens only'),\n            body('apiSecret')\n                .optional()\n                .isString()\n                .isLength({ min: 10, max: 200 })\n                .matches(/^[A-Za-z0-9_-]+$/)\n                .withMessage('API secret must be alphanumeric with underscores/hyphens only')\n        ];\n    }\n\n    /**\n     * Validate trading order parameters\n     */\n    validateTradingOrder() {\n        return [\n            body('orderType')\n                .isIn(['market', 'limit', 'stop', 'stop_limit'])\n                .withMessage('Order type must be market, limit, stop, or stop_limit'),\n            body('side')\n                .isIn(['buy', 'sell'])\n                .withMessage('Side must be buy or sell'),\n            body('timeInForce')\n                .optional()\n                .isIn(['day', 'gtc', 'ioc', 'fok'])\n                .withMessage('Time in force must be day, gtc, ioc, or fok'),\n            ...this.validateSymbol(),\n            ...this.validateAmount()\n        ];\n    }\n\n    /**\n     * Validate portfolio parameters\n     */\n    validatePortfolio() {\n        return [\n            body('portfolioName')\n                .optional()\n                .isString()\n                .isLength({ min: 1, max: 100 })\n                .matches(/^[A-Za-z0-9\\s_-]+$/)\n                .withMessage('Portfolio name must be alphanumeric with spaces/underscores/hyphens'),\n            body('currency')\n                .optional()\n                .isIn(this.allowedCurrencies)\n                .withMessage(`Currency must be one of: ${this.allowedCurrencies.join(', ')}`),\n            body('riskTolerance')\n                .optional()\n                .isIn(['conservative', 'moderate', 'aggressive'])\n                .withMessage('Risk tolerance must be conservative, moderate, or aggressive')\n        ];\n    }\n\n    /**\n     * Validate technical analysis parameters\n     */\n    validateTechnicalAnalysis() {\n        return [\n            query('timeframe')\n                .optional()\n                .isIn(this.allowedTimeframes)\n                .withMessage(`Timeframe must be one of: ${this.allowedTimeframes.join(', ')}`),\n            query('indicators')\n                .optional()\n                .isArray({ max: 20 })\n                .withMessage('Indicators must be an array with max 20 items'),\n            body('period')\n                .optional()\n                .isInt({ min: 1, max: 500 })\n                .withMessage('Period must be an integer between 1 and 500')\n        ];\n    }\n\n    /**\n     * Validate search parameters\n     */\n    validateSearch() {\n        return [\n            query('q')\n                .optional()\n                .isString()\n                .isLength({ min: 1, max: 100 })\n                .matches(/^[A-Za-z0-9\\s.-]+$/)\n                .withMessage('Search query must be alphanumeric with spaces/dots/hyphens'),\n            query('category')\n                .optional()\n                .isIn(['stocks', 'crypto', 'forex', 'commodities', 'indices'])\n                .withMessage('Category must be stocks, crypto, forex, commodities, or indices')\n        ];\n    }\n\n    /**\n     * Sanitize user input to prevent XSS and injection attacks\n     */\n    sanitizeInput() {\n        return (req, res, next) => {\n            // Sanitize string fields recursively\n            const sanitizeObject = (obj) => {\n                if (typeof obj === 'string') {\n                    // Remove potential XSS patterns\n                    return validator.escape(obj)\n                        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n                        .replace(/javascript:/gi, '')\n                        .replace(/on\\w+\\s*=/gi, '')\n                        .trim();\n                } else if (Array.isArray(obj)) {\n                    return obj.map(sanitizeObject).slice(0, this.maxArrayLength);\n                } else if (obj && typeof obj === 'object') {\n                    const sanitized = {};\n                    for (const [key, value] of Object.entries(obj)) {\n                        if (typeof key === 'string' && key.length <= 100) {\n                            sanitized[key] = sanitizeObject(value);\n                        }\n                    }\n                    return sanitized;\n                }\n                return obj;\n            };\n\n            // Sanitize request body, query, and params\n            if (req.body) {\n                req.body = sanitizeObject(req.body);\n            }\n            if (req.query) {\n                req.query = sanitizeObject(req.query);\n            }\n            if (req.params) {\n                req.params = sanitizeObject(req.params);\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Rate limiting validation\n     */\n    validateRateLimit() {\n        return (req, res, next) => {\n            // Check for suspicious request patterns\n            const suspiciousPatterns = [\n                /union\\s+select/i,\n                /drop\\s+table/i,\n                /'.*or.*'.*='.*'/i,\n                /script\\s*>/i,\n                /javascript:/i\n            ];\n\n            const requestData = JSON.stringify({\n                body: req.body,\n                query: req.query,\n                params: req.params\n            });\n\n            for (const pattern of suspiciousPatterns) {\n                if (pattern.test(requestData)) {\n                    console.warn(`🚨 Suspicious request pattern detected from ${req.ip}: ${pattern}`);\n                    return res.status(400).json({\n                        success: false,\n                        error: 'Invalid request format',\n                        code: 'SUSPICIOUS_PATTERN'\n                    });\n                }\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Handle validation errors\n     */\n    handleValidationErrors() {\n        return (req, res, next) => {\n            const errors = validationResult(req);\n            \n            if (!errors.isEmpty()) {\n                const validationErrors = errors.array().map(error => ({\n                    field: error.param,\n                    message: error.msg,\n                    value: error.value\n                }));\n\n                console.warn(`🚨 Validation errors for ${req.method} ${req.path}:`, validationErrors);\n\n                return res.status(400).json({\n                    success: false,\n                    error: 'Validation failed',\n                    code: 'VALIDATION_ERROR',\n                    details: validationErrors\n                });\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * SQL injection prevention\n     */\n    preventSqlInjection() {\n        return (req, res, next) => {\n            const sqlPatterns = [\n                /(\\b(select|insert|update|delete|drop|create|alter|exec|execute)\\b)/i,\n                /(\\b(union|having|group\\s+by|order\\s+by)\\b)/i,\n                /(;|\\||\\|\\||&&)/,\n                /('|(\\\\x27)|(\\\\x2D\\\\x2D))/i\n            ];\n\n            const checkForSql = (obj, path = '') => {\n                if (typeof obj === 'string') {\n                    for (const pattern of sqlPatterns) {\n                        if (pattern.test(obj)) {\n                            console.warn(`🚨 Potential SQL injection attempt at ${path}: ${obj.substring(0, 100)}`);\n                            return true;\n                        }\n                    }\n                } else if (Array.isArray(obj)) {\n                    for (let i = 0; i < obj.length; i++) {\n                        if (checkForSql(obj[i], `${path}[${i}]`)) return true;\n                    }\n                } else if (obj && typeof obj === 'object') {\n                    for (const [key, value] of Object.entries(obj)) {\n                        if (checkForSql(value, `${path}.${key}`)) return true;\n                    }\n                }\n                return false;\n            };\n\n            if (checkForSql(req.body, 'body') || \n                checkForSql(req.query, 'query') || \n                checkForSql(req.params, 'params')) {\n                \n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid request format',\n                    code: 'SECURITY_VIOLATION'\n                });\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Get validation rules for specific endpoint types\n     */\n    getValidationRules(endpointType) {\n        const rules = {\n            trading: [\n                ...this.validateTradingOrder(),\n                this.handleValidationErrors()\n            ],\n            portfolio: [\n                ...this.validatePortfolio(),\n                ...this.validatePagination(),\n                this.handleValidationErrors()\n            ],\n            market: [\n                ...this.validateSymbol(),\n                ...this.validateDateRange(),\n                ...this.validatePagination(),\n                this.handleValidationErrors()\n            ],\n            technical: [\n                ...this.validateTechnicalAnalysis(),\n                ...this.validateSymbol(),\n                this.handleValidationErrors()\n            ],\n            search: [\n                ...this.validateSearch(),\n                ...this.validatePagination(),\n                this.handleValidationErrors()\n            ],\n            auth: [\n                ...this.validateApiKey(),\n                this.handleValidationErrors()\n            ]\n        };\n\n        return rules[endpointType] || [this.handleValidationErrors()];\n    }\n\n    /**\n     * Universal security middleware stack\n     */\n    getSecurityMiddleware() {\n        return [\n            this.sanitizeInput(),\n            this.validateRateLimit(),\n            this.preventSqlInjection()\n        ];\n    }\n}\n\nmodule.exports = InputValidationMiddleware;"],"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","ignoreList":[]}