46fcd47ef1797b389d523e3671d4193a
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", {
  value,
  configurable: true
});
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  XmlNode: () => XmlNode,
  XmlText: () => XmlText
});
module.exports = __toCommonJS(index_exports);

// src/escape-attribute.ts
function escapeAttribute(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}
__name(escapeAttribute, "escapeAttribute");

// src/escape-element.ts
function escapeElement(value) {
  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
}
__name(escapeElement, "escapeElement");

// src/XmlText.ts
var XmlText = class {
  constructor(value) {
    this.value = value;
  }
  static {
    __name(this, "XmlText");
  }
  toString() {
    return escapeElement("" + this.value);
  }
};

// src/XmlNode.ts
var XmlNode = class _XmlNode {
  constructor(name, children = []) {
    this.name = name;
    this.children = children;
  }
  static {
    __name(this, "XmlNode");
  }
  attributes = {};
  static of(name, childText, withName) {
    const node = new _XmlNode(name);
    if (childText !== void 0) {
      node.addChildNode(new XmlText(childText));
    }
    if (withName !== void 0) {
      node.withName(withName);
    }
    return node;
  }
  withName(name) {
    this.name = name;
    return this;
  }
  addAttribute(name, value) {
    this.attributes[name] = value;
    return this;
  }
  addChildNode(child) {
    this.children.push(child);
    return this;
  }
  removeAttribute(name) {
    delete this.attributes[name];
    return this;
  }
  /**
   * @internal
   * Alias of {@link XmlNode#withName(string)} for codegen brevity.
   */
  n(name) {
    this.name = name;
    return this;
  }
  /**
   * @internal
   * Alias of {@link XmlNode#addChildNode(string)} for codegen brevity.
   */
  c(child) {
    this.children.push(child);
    return this;
  }
  /**
   * @internal
   * Checked version of {@link XmlNode#addAttribute(string)} for codegen brevity.
   */
  a(name, value) {
    if (value != null) {
      this.attributes[name] = value;
    }
    return this;
  }
  /**
   * Create a child node.
   * Used in serialization of string fields.
   * @internal
   */
  cc(input, field, withName = field) {
    if (input[field] != null) {
      const node = _XmlNode.of(field, input[field]).withName(withName);
      this.c(node);
    }
  }
  /**
   * Creates list child nodes.
   * @internal
   */
  l(input, listName, memberName, valueProvider) {
    if (input[listName] != null) {
      const nodes = valueProvider();
      nodes.map(node => {
        node.withName(memberName);
        this.c(node);
      });
    }
  }
  /**
   * Creates list child nodes with container.
   * @internal
   */
  lc(input, listName, memberName, valueProvider) {
    if (input[listName] != null) {
      const nodes = valueProvider();
      const containerNode = new _XmlNode(memberName);
      nodes.map(node => {
        containerNode.c(node);
      });
      this.c(containerNode);
    }
  }
  toString() {
    const hasChildren = Boolean(this.children.length);
    let xmlText = `<${this.name}`;
    const attributes = this.attributes;
    for (const attributeName of Object.keys(attributes)) {
      const attribute = attributes[attributeName];
      if (attribute != null) {
        xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
      }
    }
    return xmlText += !hasChildren ? "/>" : `>${this.children.map(c => c.toString()).join("")}</${this.name}>`;
  }
};
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  XmlNode,
  XmlText
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJpbmRleF9leHBvcnRzIiwiWG1sTm9kZSIsIlhtbFRleHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXNjYXBlQXR0cmlidXRlIiwicmVwbGFjZSIsImVzY2FwZUVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInRvU3RyaW5nIiwiX1htbE5vZGUiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZXMiLCJvZiIsImNoaWxkVGV4dCIsIndpdGhOYW1lIiwibm9kZSIsImFkZENoaWxkTm9kZSIsImFkZEF0dHJpYnV0ZSIsImNoaWxkIiwicHVzaCIsInJlbW92ZUF0dHJpYnV0ZSIsIm4iLCJjIiwiYSIsImNjIiwiaW5wdXQiLCJmaWVsZCIsImwiLCJsaXN0TmFtZSIsIm1lbWJlck5hbWUiLCJ2YWx1ZVByb3ZpZGVyIiwibm9kZXMiLCJtYXAiLCJsYyIsImNvbnRhaW5lck5vZGUiLCJoYXNDaGlsZHJlbiIsIkJvb2xlYW4iLCJsZW5ndGgiLCJ4bWxUZXh0IiwiYXR0cmlidXRlTmFtZSIsImtleXMiLCJhdHRyaWJ1dGUiLCJqb2luIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIFhtbE5vZGU6ICgpID0+IFhtbE5vZGUsXG4gIFhtbFRleHQ6ICgpID0+IFhtbFRleHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW5kZXhfZXhwb3J0cyk7XG5cbi8vIHNyYy9lc2NhcGUtYXR0cmlidXRlLnRzXG5mdW5jdGlvbiBlc2NhcGVBdHRyaWJ1dGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKTtcbn1cbl9fbmFtZShlc2NhcGVBdHRyaWJ1dGUsIFwiZXNjYXBlQXR0cmlidXRlXCIpO1xuXG4vLyBzcmMvZXNjYXBlLWVsZW1lbnQudHNcbmZ1bmN0aW9uIGVzY2FwZUVsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKS5yZXBsYWNlKC8nL2csIFwiJmFwb3M7XCIpLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpLnJlcGxhY2UoL1xcci9nLCBcIiYjeDBEO1wiKS5yZXBsYWNlKC9cXG4vZywgXCImI3gwQTtcIikucmVwbGFjZSgvXFx1MDA4NS9nLCBcIiYjeDg1O1wiKS5yZXBsYWNlKC9cXHUyMDI4LywgXCImI3gyMDI4O1wiKTtcbn1cbl9fbmFtZShlc2NhcGVFbGVtZW50LCBcImVzY2FwZUVsZW1lbnRcIik7XG5cbi8vIHNyYy9YbWxUZXh0LnRzXG52YXIgWG1sVGV4dCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJYbWxUZXh0XCIpO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBlc2NhcGVFbGVtZW50KFwiXCIgKyB0aGlzLnZhbHVlKTtcbiAgfVxufTtcblxuLy8gc3JjL1htbE5vZGUudHNcbnZhciBYbWxOb2RlID0gY2xhc3MgX1htbE5vZGUge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBjaGlsZHJlbiA9IFtdKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH1cbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJYbWxOb2RlXCIpO1xuICB9XG4gIGF0dHJpYnV0ZXMgPSB7fTtcbiAgc3RhdGljIG9mKG5hbWUsIGNoaWxkVGV4dCwgd2l0aE5hbWUpIHtcbiAgICBjb25zdCBub2RlID0gbmV3IF9YbWxOb2RlKG5hbWUpO1xuICAgIGlmIChjaGlsZFRleHQgIT09IHZvaWQgMCkge1xuICAgICAgbm9kZS5hZGRDaGlsZE5vZGUobmV3IFhtbFRleHQoY2hpbGRUZXh0KSk7XG4gICAgfVxuICAgIGlmICh3aXRoTmFtZSAhPT0gdm9pZCAwKSB7XG4gICAgICBub2RlLndpdGhOYW1lKHdpdGhOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgd2l0aE5hbWUobmFtZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzW25hbWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWRkQ2hpbGROb2RlKGNoaWxkKSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVBdHRyaWJ1dGUobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBBbGlhcyBvZiB7QGxpbmsgWG1sTm9kZSN3aXRoTmFtZShzdHJpbmcpfSBmb3IgY29kZWdlbiBicmV2aXR5LlxuICAgKi9cbiAgbihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEFsaWFzIG9mIHtAbGluayBYbWxOb2RlI2FkZENoaWxkTm9kZShzdHJpbmcpfSBmb3IgY29kZWdlbiBicmV2aXR5LlxuICAgKi9cbiAgYyhjaGlsZCkge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBDaGVja2VkIHZlcnNpb24gb2Yge0BsaW5rIFhtbE5vZGUjYWRkQXR0cmlidXRlKHN0cmluZyl9IGZvciBjb2RlZ2VuIGJyZXZpdHkuXG4gICAqL1xuICBhKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgY2hpbGQgbm9kZS5cbiAgICogVXNlZCBpbiBzZXJpYWxpemF0aW9uIG9mIHN0cmluZyBmaWVsZHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY2MoaW5wdXQsIGZpZWxkLCB3aXRoTmFtZSA9IGZpZWxkKSB7XG4gICAgaWYgKGlucHV0W2ZpZWxkXSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlID0gX1htbE5vZGUub2YoZmllbGQsIGlucHV0W2ZpZWxkXSkud2l0aE5hbWUod2l0aE5hbWUpO1xuICAgICAgdGhpcy5jKG5vZGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBsaXN0IGNoaWxkIG5vZGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGwoaW5wdXQsIGxpc3ROYW1lLCBtZW1iZXJOYW1lLCB2YWx1ZVByb3ZpZGVyKSB7XG4gICAgaWYgKGlucHV0W2xpc3ROYW1lXSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBub2RlcyA9IHZhbHVlUHJvdmlkZXIoKTtcbiAgICAgIG5vZGVzLm1hcCgobm9kZSkgPT4ge1xuICAgICAgICBub2RlLndpdGhOYW1lKG1lbWJlck5hbWUpO1xuICAgICAgICB0aGlzLmMobm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgbGlzdCBjaGlsZCBub2RlcyB3aXRoIGNvbnRhaW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBsYyhpbnB1dCwgbGlzdE5hbWUsIG1lbWJlck5hbWUsIHZhbHVlUHJvdmlkZXIpIHtcbiAgICBpZiAoaW5wdXRbbGlzdE5hbWVdICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gdmFsdWVQcm92aWRlcigpO1xuICAgICAgY29uc3QgY29udGFpbmVyTm9kZSA9IG5ldyBfWG1sTm9kZShtZW1iZXJOYW1lKTtcbiAgICAgIG5vZGVzLm1hcCgobm9kZSkgPT4ge1xuICAgICAgICBjb250YWluZXJOb2RlLmMobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYyhjb250YWluZXJOb2RlKTtcbiAgICB9XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgaGFzQ2hpbGRyZW4gPSBCb29sZWFuKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICBsZXQgeG1sVGV4dCA9IGA8JHt0aGlzLm5hbWV9YDtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlTmFtZSBvZiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKSkge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUgIT0gbnVsbCkge1xuICAgICAgICB4bWxUZXh0ICs9IGAgJHthdHRyaWJ1dGVOYW1lfT1cIiR7ZXNjYXBlQXR0cmlidXRlKFwiXCIgKyBhdHRyaWJ1dGUpfVwiYDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhtbFRleHQgKz0gIWhhc0NoaWxkcmVuID8gXCIvPlwiIDogYD4ke3RoaXMuY2hpbGRyZW4ubWFwKChjKSA9PiBjLnRvU3RyaW5nKCkpLmpvaW4oXCJcIil9PC8ke3RoaXMubmFtZX0+YDtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIFhtbE5vZGUsXG4gIFhtbFRleHRcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osSUFBSUEsU0FBUyxHQUFHQyxNQUFNLENBQUNDLGNBQWM7QUFDckMsSUFBSUMsZ0JBQWdCLEdBQUdGLE1BQU0sQ0FBQ0csd0JBQXdCO0FBQ3RELElBQUlDLGlCQUFpQixHQUFHSixNQUFNLENBQUNLLG1CQUFtQjtBQUNsRCxJQUFJQyxZQUFZLEdBQUdOLE1BQU0sQ0FBQ08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLE1BQU0sR0FBR0EsQ0FBQ0MsTUFBTSxFQUFFQyxLQUFLLEtBQUtaLFNBQVMsQ0FBQ1csTUFBTSxFQUFFLE1BQU0sRUFBRTtFQUFFQyxLQUFLO0VBQUVDLFlBQVksRUFBRTtBQUFLLENBQUMsQ0FBQztBQUN4RixJQUFJQyxRQUFRLEdBQUdBLENBQUNILE1BQU0sRUFBRUksR0FBRyxLQUFLO0VBQzlCLEtBQUssSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQ2xCZixTQUFTLENBQUNXLE1BQU0sRUFBRUssSUFBSSxFQUFFO0lBQUVDLEdBQUcsRUFBRUYsR0FBRyxDQUFDQyxJQUFJLENBQUM7SUFBRUUsVUFBVSxFQUFFO0VBQUssQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFDRCxJQUFJQyxXQUFXLEdBQUdBLENBQUNDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVB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QUFDO01BQ2QsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUNBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0VrQixFQUFFQSxDQUFDUixLQUFLLEVBQUVHLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUU7SUFDN0MsSUFBSUwsS0FBSyxDQUFDRyxRQUFRLENBQUMsSUFBSSxJQUFJLEVBQUU7TUFDM0IsTUFBTUcsS0FBSyxHQUFHRCxhQUFhLENBQUMsQ0FBQztNQUM3QixNQUFNSSxhQUFhLEdBQUcsSUFBSXpCLFFBQVEsQ0FBQ29CLFVBQVUsQ0FBQztNQUM5Q0UsS0FBSyxDQUFDQyxHQUFHLENBQUVqQixJQUFJLElBQUs7UUFDbEJtQixhQUFhLENBQUNaLENBQUMsQ0FBQ1AsSUFBSSxDQUFDO01BQ3ZCLENBQUMsQ0FBQztNQUNGLElBQUksQ0FBQ08sQ0FBQyxDQUFDWSxhQUFhLENBQUM7SUFDdkI7RUFDRjtFQUNBMUIsUUFBUUEsQ0FBQSxFQUFHO0lBQ1QsTUFBTTJCLFdBQVcsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQzFCLFFBQVEsQ0FBQzJCLE1BQU0sQ0FBQztJQUNqRCxJQUFJQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUNuRCxJQUFJLEVBQUU7SUFDN0IsTUFBTXdCLFVBQVUsR0FBRyxJQUFJLENBQUNBLFVBQVU7SUFDbEMsS0FBSyxNQUFNNEIsYUFBYSxJQUFJbkUsTUFBTSxDQUFDb0UsSUFBSSxDQUFDN0IsVUFBVSxDQUFDLEVBQUU7TUFDbkQsTUFBTThCLFNBQVMsR0FBRzlCLFVBQVUsQ0FBQzRCLGFBQWEsQ0FBQztNQUMzQyxJQUFJRSxTQUFTLElBQUksSUFBSSxFQUFFO1FBQ3JCSCxPQUFPLElBQUksSUFBSUMsYUFBYSxLQUFLbkMsZUFBZSxDQUFDLEVBQUUsR0FBR3FDLFNBQVMsQ0FBQyxHQUFHO01BQ3JFO0lBQ0Y7SUFDQSxPQUFPSCxPQUFPLElBQUksQ0FBQ0gsV0FBVyxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQ3pCLFFBQVEsQ0FBQ3NCLEdBQUcsQ0FBRVYsQ0FBQyxJQUFLQSxDQUFDLENBQUNkLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQ2tDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUN2RCxJQUFJLEdBQUc7RUFDOUc7QUFDRixDQUFDO0FBQ0Q7O0FBRUEsQ0FBQyxLQUFLZSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNyQkgsT0FBTztFQUNQQztBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==