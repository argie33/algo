{"version":3,"names":["cov_wrczz4m8q","actualCoverage","express","s","require","healthCheck","query","validateDatabaseSchema","REQUIRED_SCHEMA","apiKeyService","AlpacaService","timeoutHelper","schemaValidator","SecretsManagerClient","GetSecretValueCommand","CognitoIdentityProviderClient","DescribeUserPoolCommand","jwtSecretManager","crypto","router","Router","get","req","res","f","startTime","Date","now","maxTimeout","quick","b","success","status","healthy","service","environment","process","env","ENVIRONMENT","memory","memoryUsage","uptime","note","database","api","version","config","hasDbSecret","DB_SECRET_ARN","hasDbEndpoint","DB_ENDPOINT","hasAwsRegion","AWS_REGION","dbHealthPromise","getComprehensiveDbHealth","timeoutPromise","Promise","_","reject","setTimeout","Error","dbHealth","race","isHealthy","serviceUnavailable","error","duration","console","message","json","timestamp","toISOString","serverError","tablesResult","existingTables","rows","map","r","table_name","criticalWebappTables","results","table","includes","result","exists","count","parseInt","dataLoadingTables","dataTablesInfo","webappTablesReady","Object","values","every","ready","webapp_tables","data_loading_tables","total_tables_found","length","all_tables","database_info","code","table_count","tables","log","services","checkDatabaseHealth","alpacaApi","checkAlpacaApiHealth","awsSecretsManager","checkAwsSecretsManagerHealth","awsRds","checkAwsRdsHealth","awsCognito","checkAwsCognitoHealth","healthyServices","filter","totalServices","keys","allHealthy","responseData","summary","total_services","healthy_services","degraded_services","failed_services","health_percentage","Math","round","checkApiKeyServiceHealth","jwtSecretService","checkJwtSecretServiceHealth","encryptionService","checkEncryptionServiceHealth","checkDatabaseTablesForApiKeys","secrets","checkSecretsManagerHealth","recommendations","generateApiServiceRecommendations","tableName","tableCheck","tableExists","tableData","data","record_count","circuitBreakers","getCircuitBreakerStatus","timeoutConfig","defaultTimeouts","alpaca","news","sentiment","external","upload","websocket","timeouts","totalCircuitBreakers","openCircuitBreakers","cb","state","halfOpenCircuitBreakers","generateTimeoutRecommendations","analytics","serviceKey","breaker","entries","timeSinceLastFailure","lastFailureTime","isRecentFailure","analysis","healthScore","calculateHealthScore","riskLevel","calculateRiskLevel","nextStateTransition","getNextStateTransition","recommendedAction","getRecommendedAction","alertLevel","getAlertLevel","systemAnalytics","overallHealthScore","calculateOverallHealthScore","criticalServices","key","warningServices","recentFailures","totalFailures","reduce","sum","failures","generateSystemRecommendations","a","options","includeOptional","include_optional","strict","report","getSchemaValidationReport","totalTables","validSchemas","missingRequired","invalidSchemas","params","throwOnMissing","throw","validateTableExists","useCache","no_cache","expectedTable","expectedTables","expected","post","cacheStatus","getCacheStatus","clearCache","previousCacheSize","size","clearedEntries","column_count","columns","diagnostics","region","WEBAPP_AWS_REGION","system","platform","nodeVersion","configuration","endpoint","secretArn","connectTimeout","DB_CONNECT_TIMEOUT","poolMax","DB_POOL_MAX","authentication","cognitoUserPool","COGNITO_USER_POOL_ID","cognitoClient","COGNITO_CLIENT_ID","apiKeys","encryptionSecret","API_KEY_ENCRYPTION_SECRET_ARN","lambda","functionName","AWS_LAMBDA_FUNCTION_NAME","functionVersion","AWS_LAMBDA_FUNCTION_VERSION","healthChecks","secretsManager","ensureInitialized","diagnosticsDuration","lambdaOptimizer","metrics","getMetrics","lambdaMetrics","NODE_ENV","database_config","lambda_info","node_version","header","headers","origin","healthData","last_updated","last_checked","critical_table","table_category","storeError","warn","details","basicHealth","total_tables","healthy_tables","stale_tables","error_tables","empty_tables","missing_tables","total_records","total_missing_data","tableCategorization","criticalTables","categorizeTable","category","batchQuery","allTables","tableHealth","totalRecords","healthyTables","staleTables","errorTables","emptyTables","estimatedRows","estimated_rows","lastUpdated","last_analyze","last_autoanalyze","last_vacuum","last_autovacuum","isStale","hoursSinceUpdate","is_stale","missing_data_count","currentTime","postgresVersion","responseTime","connection","host","pool","ssl","timeout","testCredentials","credentialsQuery","row","decryptedKey","decryptApiKey","api_key_encrypted","decryptedSecret","api_secret_encrypted","apiKey","apiSecret","isSandbox","is_sandbox","dbError","accountInfo","getAccount","account","tradingBlocked","trading_blocked","features","trading","marketData","portfolio","circuitBreakerTriggered","testSecretArn","configured","send","SecretId","dbSecret","apiKeySecret","multiAz","backups","userPoolId","clientId","userPool","cognitoIdp","UserPoolId","userManagement","mfa","testResult","testEncryptionFunctionality","isEnabled","enabled","encryption","encryptionTest","initialize","secretInfo","getSecretInfo","jwtTestResult","testJwtFunctionality","available","source","validation","jwtTest","tokenGeneration","tokenGenerated","tokenValidation","tokenValid","secretStrength","strength","serviceHealth","getServiceHealth","overall","jwt","jwtService","hasEncryptionSecret","hasSecret","jwtAvailable","secretLength","requiredTables","tableStatus","t","substring","push","issue","recommendation","priority","requestId","randomUUID","split","requestStart","userAgent","ip","schemaValidation","schema_validation","valid","healthPercentage","critical_missing","criticalMissing","total_required","totalRequired","total_existing","totalExisting","categories","core","missing","required","existing","existing_tables","market_data","optional","schema_definition","generateSchemaRecommendations","validation_info","duration_ms","validationDuration","request_id","request_info","total_duration_ms","statusCode","totalDuration","schemaHealth","errorDuration","errorStack","stack","impact","error_duration_ms","type","action","forEach","categoryData","join","getCategoryImpact","impacts","testApiKey","random","toString","substr","testSalt","testUserId","testProvider","encrypted","encryptApiKey","decrypted","originalLength","encryptedLength","decryptedLength","roundTripSuccess","testPermissions","token","generateApiKeyToken","validateApiKeyToken","userId","provider","tokenLength","userIdMatch","providerMatch","permissionsMatch","JSON","stringify","permissions","threshold","max","timeoutMs","timeUntilHalfOpen","nextState","transitionTime","description","ceil","totalScore","title","overallHealth","module","exports"],"sources":["health.js"],"sourcesContent":["const express = require('express');\nconst { healthCheck, query, validateDatabaseSchema, REQUIRED_SCHEMA } = require('../utils/database');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst AlpacaService = require('../utils/alpacaService');\nconst timeoutHelper = require('../utils/timeoutHelper');\nconst schemaValidator = require('../utils/schemaValidator');\nconst { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\nconst { CognitoIdentityProviderClient, DescribeUserPoolCommand } = require('@aws-sdk/client-cognito-identity-provider');\nconst jwtSecretManager = require('../utils/jwtSecretManager');\nconst crypto = require('crypto');\n\nconst router = express.Router();\n\n// Infrastructure health check - tests database connectivity only\nrouter.get('/', async (req, res) => {\n  const startTime = Date.now();\n  const maxTimeout = 10000; // 10 second max timeout\n  \n  try {\n    // Quick health check without database\n    if (req.query.quick === 'true') {\n      return res.success({\n        status: 'healthy',\n        healthy: true,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        note: 'Quick infrastructure check - database not tested',\n        database: { status: 'not_tested' },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        config: {\n          hasDbSecret: !!process.env.DB_SECRET_ARN,\n          hasDbEndpoint: !!process.env.DB_ENDPOINT,\n          hasAwsRegion: !!process.env.AWS_REGION\n        }\n      });\n    }\n\n    // Full health check with timeout protection\n    const dbHealthPromise = getComprehensiveDbHealth();\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Health check timeout')), maxTimeout)\n    );\n    \n    const dbHealth = await Promise.race([dbHealthPromise, timeoutPromise]);\n    const isHealthy = dbHealth.status === 'connected';\n\n    if (isHealthy) {\n      return res.success({\n        status: 'healthy',\n        healthy: true,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: dbHealth.database,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    } else {\n      return res.serviceUnavailable('Database', {\n        status: 'unhealthy',\n        healthy: false,\n        service: 'Financial Dashboard API',\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: dbHealth.database,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    }\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error('Health check failed:', error);\n    \n    // Handle timeout specifically\n    if (error.message === 'Health check timeout') {\n      return res.status(408).json({\n        status: 'timeout',\n        healthy: false,\n        message: 'Health check timed out after 10 seconds',\n        database: { status: 'timeout', error: 'Database health check exceeded timeout' },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        duration: duration,\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    res.serverError('Health check failed', {\n      status: 'unhealthy',\n      healthy: false,\n      database: { status: 'error', error: error.message },\n      api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n      duration: duration,\n      memory: process.memoryUsage(),\n      uptime: process.uptime()\n    });\n  }\n});\n\n// Application readiness check - tests if database has tables\nrouter.get('/ready', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    \n    // First check what tables actually exist\n    const tablesResult = await query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_type = 'BASE TABLE'\n      ORDER BY table_name;\n    `);\n    \n    const existingTables = tablesResult.rows.map(r => r.table_name);\n    \n    // Check critical webapp tables (not stock_symbols - that comes from data loading)\n    const criticalWebappTables = ['last_updated', 'health_status'];\n    const results = {};\n    \n    for (const table of criticalWebappTables) {\n      if (existingTables.includes(table)) {\n        try {\n          const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n          results[table] = { \n            exists: true, \n            count: parseInt(result.rows[0].count),\n            status: 'ready'\n          };\n        } catch (error) {\n          results[table] = { \n            exists: true,\n            error: error.message,\n            status: 'error'\n          };\n        }\n      } else {\n        results[table] = { \n          exists: false,\n          status: 'not_ready'\n        };\n      }\n    }\n    \n    // Check if data loading tables exist (but don't fail if they don't)\n    const dataLoadingTables = ['stock_symbols', 'company_profiles', 'prices'];\n    const dataTablesInfo = {};\n    \n    for (const table of dataLoadingTables) {\n      dataTablesInfo[table] = {\n        exists: existingTables.includes(table),\n        note: 'Created by data loading scripts'\n      };\n    }\n    \n    const webappTablesReady = Object.values(results).every(r => r.status === 'ready');\n    \n    return res.status(webappTablesReady ? 200 : 503).json({\n      status: webappTablesReady ? 'ready' : 'not_ready',\n      ready: webappTablesReady,\n      service: 'Financial Dashboard API',\n      timestamp: new Date().toISOString(),\n      environment: process.env.ENVIRONMENT || 'dev',\n      webapp_tables: results,\n      data_loading_tables: dataTablesInfo,\n      total_tables_found: existingTables.length,\n      all_tables: existingTables,\n      note: 'Webapp tables must be ready; data tables are optional'\n    });\n    \n  } catch (error) {\n    console.error('Readiness check failed:', error);\n    res.status(503).json({\n      status: 'not_ready',\n      ready: false,\n      timestamp: new Date().toISOString(),\n      error: error.message,\n      note: 'Application readiness check failed'\n    });\n  }\n});\n\n// REMOVED: Emergency table creation endpoint - use proper IaC deployment instead\n\n// Debug endpoint for raw database queries\nrouter.get('/debug/db-test', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    \n    const result = await query(`\n      SELECT \n        NOW() as current_time,\n        current_database() as db_name,\n        current_user as db_user,\n        version() as db_version,\n        inet_server_addr() as server_ip,\n        inet_server_port() as server_port\n    `);\n    \n    res.json({\n      status: 'success',\n      database_info: result.rows[0],\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('DB test failed:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      code: error.code,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Debug endpoint to list all tables in database\nrouter.get('/debug/tables', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    \n    const result = await query(`\n      SELECT \n        table_name,\n        table_type,\n        is_insertable_into\n      FROM information_schema.tables \n      WHERE table_schema = 'public'\n      ORDER BY table_name\n    `);\n    \n    res.json({\n      status: 'success',\n      table_count: result.rows.length,\n      tables: result.rows,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Tables list failed:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// External services health check - tests all external dependencies\nrouter.get('/external-services', async (req, res) => {\n  try {\n    console.log('🔍 Starting external services health check...');\n    const startTime = Date.now();\n    \n    const services = {\n      database: await checkDatabaseHealth(),\n      alpacaApi: await checkAlpacaApiHealth(),\n      awsSecretsManager: await checkAwsSecretsManagerHealth(),\n      awsRds: await checkAwsRdsHealth(),\n      awsCognito: await checkAwsCognitoHealth()\n    };\n    \n    const healthyServices = Object.values(services).filter(s => s.status === 'healthy').length;\n    const totalServices = Object.keys(services).length;\n    const allHealthy = healthyServices === totalServices;\n    const duration = Date.now() - startTime;\n    \n    console.log(`✅ External services health check completed in ${duration}ms`);\n    console.log(`📊 Services: ${healthyServices}/${totalServices} healthy`);\n    \n    const responseData = {\n      status: allHealthy ? 'healthy' : 'degraded',\n      healthy: allHealthy,\n      service: 'External Services Health',\n      duration: `${duration}ms`,\n      services,\n      summary: {\n        total_services: totalServices,\n        healthy_services: healthyServices,\n        degraded_services: Object.values(services).filter(s => s.status === 'degraded').length,\n        failed_services: Object.values(services).filter(s => s.status === 'failed').length,\n        health_percentage: Math.round((healthyServices / totalServices) * 100)\n      }\n    };\n    \n    if (allHealthy) {\n      res.success(responseData);\n    } else {\n      res.serviceUnavailable('External services', responseData);\n    }\n    \n  } catch (error) {\n    console.error('❌ External services health check failed:', error);\n    res.serverError('External services health check failed', {\n      service: 'External Services Health',\n      error: error.message\n    });\n  }\n});\n\n// API services health check - tests API key service and related functionality\nrouter.get('/api-services', async (req, res) => {\n  try {\n    const services = {\n      apiKeyService: await checkApiKeyServiceHealth(),\n      jwtSecretService: await checkJwtSecretServiceHealth(),\n      encryptionService: await checkEncryptionServiceHealth(),\n      database: await checkDatabaseTablesForApiKeys(),\n      secrets: await checkSecretsManagerHealth()\n    };\n    \n    const allHealthy = Object.values(services).every(service => service.status === 'healthy');\n    \n    res.status(allHealthy ? 200 : 503).json({\n      status: allHealthy ? 'healthy' : 'degraded',\n      healthy: allHealthy,\n      service: 'API Services Health',\n      timestamp: new Date().toISOString(),\n      services,\n      summary: {\n        total_services: Object.keys(services).length,\n        healthy_services: Object.values(services).filter(s => s.status === 'healthy').length,\n        degraded_services: Object.values(services).filter(s => s.status === 'degraded').length,\n        failed_services: Object.values(services).filter(s => s.status === 'failed').length\n      },\n      recommendations: generateApiServiceRecommendations(services)\n    });\n    \n  } catch (error) {\n    console.error('API services health check failed:', error);\n    res.status(500).json({\n      status: 'error',\n      healthy: false,\n      service: 'API Services Health',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Debug endpoint to test specific table queries\nrouter.get('/debug/test-query', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    const tableName = req.query.table || 'stock_symbols';\n    \n    // First check if table exists\n    const tableCheck = await query(`\n      SELECT COUNT(*) as exists \n      FROM information_schema.tables \n      WHERE table_schema = 'public' AND table_name = $1\n    `, [tableName]);\n    \n    const tableExists = parseInt(tableCheck.rows[0].exists) > 0;\n    \n    let tableData = null;\n    if (tableExists) {\n      const data = await query(`SELECT COUNT(*) as record_count FROM \"${tableName}\"`);\n      tableData = { record_count: parseInt(data.rows[0].record_count) };\n    }\n    \n    res.json({\n      status: 'success',\n      table: tableName,\n      exists: tableExists,\n      data: tableData,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Test query failed:', error);\n    res.status(500).json({\n      status: 'error',\n      table: req.query.table || 'stock_symbols',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Timeout and circuit breaker monitoring endpoint\nrouter.get('/timeout-status', async (req, res) => {\n  try {\n    const circuitBreakers = timeoutHelper.getCircuitBreakerStatus();\n    const timeoutConfig = {\n      database: timeoutHelper.defaultTimeouts.database,\n      alpaca: timeoutHelper.defaultTimeouts.alpaca,\n      news: timeoutHelper.defaultTimeouts.news,\n      sentiment: timeoutHelper.defaultTimeouts.sentiment,\n      external: timeoutHelper.defaultTimeouts.external,\n      upload: timeoutHelper.defaultTimeouts.upload,\n      websocket: timeoutHelper.defaultTimeouts.websocket\n    };\n\n    res.success({\n      timeouts: timeoutConfig,\n      circuitBreakers: circuitBreakers,\n      summary: {\n        totalCircuitBreakers: Object.keys(circuitBreakers).length,\n        openCircuitBreakers: Object.values(circuitBreakers).filter(cb => cb.state === 'open').length,\n        halfOpenCircuitBreakers: Object.values(circuitBreakers).filter(cb => cb.state === 'half-open').length,\n        healthyServices: Object.values(circuitBreakers).filter(cb => cb.state === 'closed').length\n      },\n      recommendations: generateTimeoutRecommendations(circuitBreakers)\n    });\n  } catch (error) {\n    console.error('❌ Timeout status check failed:', error);\n    res.serverError('Failed to get timeout status', error.message);\n  }\n});\n\n// Enhanced circuit breaker analytics endpoint\nrouter.get('/circuit-breaker-analytics', async (req, res) => {\n  try {\n    const circuitBreakers = timeoutHelper.getCircuitBreakerStatus();\n    const analytics = {};\n    \n    // Analyze each circuit breaker\n    for (const [serviceKey, breaker] of Object.entries(circuitBreakers)) {\n      const timeSinceLastFailure = Date.now() - breaker.lastFailureTime;\n      const isRecentFailure = timeSinceLastFailure < 300000; // 5 minutes\n      \n      analytics[serviceKey] = {\n        ...breaker,\n        analysis: {\n          healthScore: calculateHealthScore(breaker),\n          riskLevel: calculateRiskLevel(breaker),\n          timeSinceLastFailure: timeSinceLastFailure,\n          isRecentFailure,\n          nextStateTransition: getNextStateTransition(breaker),\n          recommendedAction: getRecommendedAction(breaker),\n          alertLevel: getAlertLevel(breaker)\n        }\n      };\n    }\n    \n    // Generate system-wide analytics\n    const systemAnalytics = {\n      overallHealthScore: calculateOverallHealthScore(analytics),\n      criticalServices: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.alertLevel === 'critical').map(([key, _]) => key),\n      warningServices: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.alertLevel === 'warning').map(([key, _]) => key),\n      recentFailures: Object.entries(analytics).filter(([_, breaker]) => \n        breaker.analysis.isRecentFailure).length,\n      totalFailures: Object.values(analytics).reduce((sum, breaker) => sum + breaker.failures, 0),\n      recommendations: generateSystemRecommendations(analytics)\n    };\n\n    res.success({\n      timestamp: new Date().toISOString(),\n      analytics,\n      systemAnalytics,\n      summary: {\n        totalServices: Object.keys(analytics).length,\n        healthyServices: Object.values(analytics).filter(a => a.analysis.alertLevel === 'healthy').length,\n        warningServices: systemAnalytics.warningServices.length,\n        criticalServices: systemAnalytics.criticalServices.length,\n        overallHealthScore: systemAnalytics.overallHealthScore\n      }\n    });\n  } catch (error) {\n    console.error('❌ Circuit breaker analytics failed:', error);\n    res.serverError('Failed to generate circuit breaker analytics', error.message);\n  }\n});\n\n// Schema validation endpoint - comprehensive database schema analysis\nrouter.get('/schema-validation', async (req, res) => {\n  try {\n    console.log('🔍 Starting comprehensive schema validation...');\n    const startTime = Date.now();\n    \n    const options = {\n      includeOptional: req.query.include_optional !== 'false',\n      strict: req.query.strict === 'true'\n    };\n    \n    const report = await schemaValidator.getSchemaValidationReport(options);\n    const duration = Date.now() - startTime;\n    \n    console.log(`✅ Schema validation completed in ${duration}ms`);\n    console.log(`📊 Summary: ${report.summary.existingTables}/${report.summary.totalTables} tables exist, ${report.summary.validSchemas} valid schemas`);\n    \n    // Determine overall health status\n    const isHealthy = report.summary.missingRequired === 0 && report.summary.invalidSchemas === 0;\n    \n    const responseData = {\n      ...report,\n      duration: `${duration}ms`,\n      status: isHealthy ? 'healthy' : 'degraded',\n      healthy: isHealthy\n    };\n    \n    if (isHealthy) {\n      res.success(responseData);\n    } else {\n      res.serviceUnavailable('Database schema', responseData);\n    }\n  } catch (error) {\n    console.error('❌ Schema validation failed:', error);\n    res.serverError('Schema validation failed', error.message);\n  }\n});\n\n// Table existence check endpoint\nrouter.get('/table-exists/:tableName', async (req, res) => {\n  try {\n    const tableName = req.params.tableName;\n    const throwOnMissing = req.query.throw === 'true';\n    \n    const exists = await schemaValidator.validateTableExists(tableName, {\n      throwOnMissing,\n      useCache: req.query.no_cache !== 'true'\n    });\n    \n    const expectedTable = schemaValidator.expectedTables[tableName];\n    \n    res.success({\n      table: tableName,\n      exists,\n      expected: expectedTable || null,\n      message: exists \n        ? `Table '${tableName}' exists`\n        : `Table '${tableName}' does not exist`\n    });\n  } catch (error) {\n    console.error(`❌ Table existence check failed for '${req.params.tableName}':`, error);\n    res.serverError('Table existence check failed', error.message);\n  }\n});\n\n// Schema validation cache management\nrouter.post('/schema-validation/clear-cache', async (req, res) => {\n  try {\n    const cacheStatus = schemaValidator.getCacheStatus();\n    schemaValidator.clearCache();\n    \n    res.success({\n      message: 'Schema validation cache cleared',\n      previousCacheSize: cacheStatus.size,\n      clearedEntries: cacheStatus.entries.length\n    });\n  } catch (error) {\n    console.error('❌ Failed to clear schema cache:', error);\n    res.serverError('Failed to clear schema cache', error.message);\n  }\n});\n\n// Debug endpoint to check table structure\nrouter.get('/debug/table-structure', async (req, res) => {\n  try {\n    const { query } = require('../utils/database');\n    const tableName = req.query.table || 'users';\n    \n    // Get table column information\n    const result = await query(`\n      SELECT \n        column_name,\n        data_type,\n        is_nullable,\n        column_default,\n        character_maximum_length\n      FROM information_schema.columns \n      WHERE table_schema = 'public' AND table_name = $1\n      ORDER BY ordinal_position\n    `, [tableName]);\n    \n    res.json({\n      status: 'success',\n      table: tableName,\n      column_count: result.rows.length,\n      columns: result.rows,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Table structure check failed:', error);\n    res.status(500).json({\n      status: 'error',\n      table: req.query.table || 'users',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Diagnostics endpoint - comprehensive system information\nrouter.get('/diagnostics', async (req, res) => {\n  try {\n    const startTime = Date.now();\n    \n    // Gather comprehensive system diagnostics\n    const diagnostics = {\n      service: 'Financial Dashboard API',\n      version: '1.0.0',\n      status: 'operational',\n      environment: process.env.ENVIRONMENT || 'dev',\n      region: process.env.AWS_REGION || process.env.WEBAPP_AWS_REGION || 'us-east-1',\n      \n      // System info\n      system: {\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        platform: process.platform,\n        nodeVersion: process.version,\n        timestamp: new Date().toISOString()\n      },\n      \n      // Configuration status\n      configuration: {\n        database: {\n          endpoint: process.env.DB_ENDPOINT ? 'configured' : 'not_configured',\n          secretArn: process.env.DB_SECRET_ARN ? 'configured' : 'not_configured',\n          connectTimeout: process.env.DB_CONNECT_TIMEOUT || 'default',\n          poolMax: process.env.DB_POOL_MAX || 'default'\n        },\n        authentication: {\n          cognitoUserPool: process.env.COGNITO_USER_POOL_ID ? 'configured' : 'not_configured',\n          cognitoClient: process.env.COGNITO_CLIENT_ID ? 'configured' : 'not_configured'\n        },\n        apiKeys: {\n          encryptionSecret: process.env.API_KEY_ENCRYPTION_SECRET_ARN ? 'configured' : 'not_configured'\n        },\n        lambda: {\n          functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\n          functionVersion: process.env.AWS_LAMBDA_FUNCTION_VERSION || 'unknown',\n          region: process.env.AWS_REGION || 'unknown'\n        }\n      },\n      \n      // Quick health checks\n      healthChecks: {\n        database: 'checking...',\n        apiKeyService: 'checking...',\n        secretsManager: 'checking...'\n      }\n    };\n    \n    // Perform basic health checks\n    try {\n      const dbHealth = await healthCheck();\n      diagnostics.healthChecks.database = dbHealth.status === 'healthy' ? 'healthy' : 'unhealthy';\n    } catch (error) {\n      diagnostics.healthChecks.database = 'failed';\n    }\n    \n    try {\n      await apiKeyService.ensureInitialized();\n      diagnostics.healthChecks.apiKeyService = 'healthy';\n    } catch (error) {\n      diagnostics.healthChecks.apiKeyService = 'failed';\n    }\n    \n    try {\n      const secretArn = process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n      if (secretArn) {\n        diagnostics.healthChecks.secretsManager = 'healthy';\n      } else {\n        diagnostics.healthChecks.secretsManager = 'not_configured';\n      }\n    } catch (error) {\n      diagnostics.healthChecks.secretsManager = 'failed';\n    }\n    \n    const duration = Date.now() - startTime;\n    diagnostics.diagnosticsDuration = `${duration}ms`;\n    \n    res.success(diagnostics);\n  } catch (error) {\n    console.error('Diagnostics endpoint failed:', error);\n    res.serverError('Diagnostics failed', {\n      error: error.message,\n      service: 'Financial Dashboard API',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Lambda performance metrics endpoint\nrouter.get('/lambda-metrics', async (req, res) => {\n  try {\n    const lambdaOptimizer = require('../utils/lambdaOptimizer');\n    const metrics = lambdaOptimizer.getMetrics();\n    \n    res.success({\n      lambdaMetrics: metrics,\n      endpoint: 'lambda-metrics',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Lambda metrics endpoint failed:', error);\n    res.serverError('Lambda metrics failed', {\n      error: error.message,\n      endpoint: 'lambda-metrics',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Debug endpoint for environment and configuration\nrouter.get('/debug/env', async (req, res) => {\n  try {\n    res.json({\n      status: 'success',\n      environment: {\n        NODE_ENV: process.env.NODE_ENV,\n        ENVIRONMENT: process.env.ENVIRONMENT,\n        AWS_REGION: process.env.AWS_REGION,\n        WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,\n        AWS_LAMBDA_FUNCTION_NAME: process.env.AWS_LAMBDA_FUNCTION_NAME,\n        AWS_LAMBDA_FUNCTION_VERSION: process.env.AWS_LAMBDA_FUNCTION_VERSION\n      },\n      database_config: {\n        DB_ENDPOINT: process.env.DB_ENDPOINT,\n        DB_SECRET_ARN: process.env.DB_SECRET_ARN ? 'SET' : 'NOT_SET',\n        DB_CONNECT_TIMEOUT: process.env.DB_CONNECT_TIMEOUT,\n        DB_POOL_MAX: process.env.DB_POOL_MAX\n      },\n      lambda_info: {\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        platform: process.platform,\n        node_version: process.version\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Debug endpoint to test CORS\nrouter.get('/debug/cors-test', async (req, res) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  \n  res.json({\n    status: 'success',\n    message: 'CORS test successful',\n    headers: req.headers,\n    origin: req.get('origin'),\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Update health status endpoint - for \"Update All Tables\" button\nrouter.post('/update-status', async (req, res) => {\n  try {\n    console.log('🔄 Health status update requested');\n    \n    // Get comprehensive database health\n    const healthData = await getComprehensiveDbHealth();\n    \n    // Optionally store in health_status table if it exists\n    try {\n      // Check if health_status table exists\n      const tableCheck = await query(`\n        SELECT COUNT(*) as exists \n        FROM information_schema.tables \n        WHERE table_schema = 'public' AND table_name = 'health_status'\n      `);\n      \n      if (parseInt(tableCheck.rows[0].exists) > 0) {\n        console.log('💾 Storing health data in health_status table...');\n        \n        // Store each table's health data\n        for (const [tableName, tableData] of Object.entries(healthData.database.tables)) {\n          await query(`\n            INSERT INTO health_status (\n              table_name, record_count, status, last_updated, \n              last_checked, critical_table, table_category, error_message\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n            ON CONFLICT (table_name) DO UPDATE SET\n              record_count = EXCLUDED.record_count,\n              status = EXCLUDED.status,\n              last_updated = EXCLUDED.last_updated,\n              last_checked = EXCLUDED.last_checked,\n              critical_table = EXCLUDED.critical_table,\n              table_category = EXCLUDED.table_category,\n              error_message = EXCLUDED.error_message\n          `, [\n            tableName,\n            tableData.record_count,\n            tableData.status,\n            tableData.last_updated,\n            tableData.last_checked,\n            tableData.critical_table,\n            tableData.table_category,\n            tableData.error\n          ]);\n        }\n        \n        console.log('✅ Health data stored in health_status table');\n      } else {\n        console.log('⚠️ health_status table does not exist - skipping storage');\n      }\n    } catch (storeError) {\n      console.warn('⚠️ Failed to store health data in health_status table:', storeError.message);\n      // Don't fail the whole request if storage fails\n    }\n    \n    res.json({\n      status: 'success',\n      message: 'Database health status updated successfully',\n      data: healthData,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ Failed to update health status:', error);\n    res.status(500).json({\n      status: 'error',\n      error: 'Failed to update health status',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n/**\n * Comprehensive database health check that analyzes all tables\n * This is what the frontend ServiceHealth.jsx expects to receive\n */\nasync function getComprehensiveDbHealth() {\n  try {\n    console.log('🔍 Starting optimized database health check...');\n    const startTime = Date.now();\n    \n    // First test basic connectivity\n    const basicHealth = await healthCheck();\n    if (basicHealth.status !== 'healthy') {\n      return {\n        status: 'disconnected',\n        error: basicHealth.error,\n        database: {\n          status: 'error',\n          tables: {},\n          summary: {\n            total_tables: 0,\n            healthy_tables: 0,\n            stale_tables: 0,\n            error_tables: 0,\n            empty_tables: 0,\n            missing_tables: 0,\n            total_records: 0,\n            total_missing_data: 0\n          }\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n    \n    // Define table categories and critical tables\n    const tableCategorization = {\n      'symbols': ['symbols', 'stock_symbols', 'etf_symbols'],\n      'prices': ['price_daily', 'price_weekly', 'price_monthly', 'latest_prices'],\n      'technicals': ['technicals_daily', 'technicals_weekly', 'technicals_monthly', 'latest_technicals'],\n      'financials': ['balance_sheet', 'income_statement', 'cash_flow', 'key_metrics'],\n      'company': ['company_profile', 'company_profiles'],\n      'earnings': ['earnings_estimates', 'earnings_history', 'earnings_metrics'],\n      'sentiment': ['fear_greed_index', 'naaim', 'aaii_sentiment'],\n      'trading': ['buy_sell_daily', 'buy_sell_weekly', 'swing_trader', 'trade_executions'],\n      'portfolio': ['portfolio_holdings', 'position_history', 'user_api_keys'],\n      'system': ['health_status', 'last_updated']\n    };\n    \n    const criticalTables = [\n      'symbols', 'stock_symbols', 'price_daily', 'latest_prices', \n      'portfolio_holdings', 'user_api_keys', 'health_status', 'last_updated'\n    ];\n    \n    // Function to categorize table\n    function categorizeTable(tableName) {\n      for (const [category, tables] of Object.entries(tableCategorization)) {\n        if (tables.includes(tableName)) {\n          return category;\n        }\n      }\n      return 'other';\n    }\n    \n    // OPTIMIZED: Get table info and record counts in one efficient query\n    console.log('📋 Getting table info and record counts efficiently...');\n    const batchQuery = `\n      SELECT \n        t.table_name,\n        t.table_type,\n        COALESCE(s.n_tup_ins - s.n_tup_del, 0) as estimated_rows,\n        s.last_vacuum,\n        s.last_autovacuum,\n        s.last_analyze,\n        s.last_autoanalyze\n      FROM information_schema.tables t\n      LEFT JOIN pg_stat_user_tables s ON s.relname = t.table_name\n      WHERE t.table_schema = 'public' \n      AND t.table_type = 'BASE TABLE'\n      ORDER BY t.table_name\n    `;\n    \n    const tablesResult = await query(batchQuery, [], 15000);\n    const allTables = tablesResult.rows;\n    console.log(`📋 Found ${allTables.length} tables in database`);\n    \n    // Build table health data efficiently\n    const tableHealth = {};\n    let totalRecords = 0;\n    let healthyTables = 0;\n    let staleTables = 0;\n    let errorTables = 0;\n    let emptyTables = 0;\n    \n    console.log('🔍 Processing table health data...');\n    for (const table of allTables) {\n      const tableName = table.table_name;\n      const estimatedRows = parseInt(table.estimated_rows) || 0;\n      totalRecords += estimatedRows;\n      \n      // Use pg_stat timestamps for freshness check\n      const lastUpdated = table.last_analyze || table.last_autoanalyze || table.last_vacuum || table.last_autovacuum;\n      \n      // Determine table status\n      let status = 'healthy';\n      let isStale = false;\n      \n      if (estimatedRows === 0) {\n        status = 'empty';\n        emptyTables++;\n      } else if (lastUpdated) {\n        const hoursSinceUpdate = (new Date() - new Date(lastUpdated)) / (1000 * 60 * 60);\n        if (hoursSinceUpdate > 72) { // 3 days\n          status = 'stale';\n          isStale = true;\n          staleTables++;\n        } else {\n          healthyTables++;\n        }\n      } else {\n        // No timestamp available, assume healthy if has data\n        healthyTables++;\n      }\n      \n      tableHealth[tableName] = {\n        status: status,\n        record_count: estimatedRows,\n        last_updated: lastUpdated,\n        last_checked: new Date().toISOString(),\n        table_category: categorizeTable(tableName),\n        critical_table: criticalTables.includes(tableName),\n        is_stale: isStale,\n        missing_data_count: 0,\n        error: null,\n        note: 'Using pg_stat estimated counts for performance'\n      };\n    }\n    \n    // Calculate summary statistics\n    const summary = {\n      total_tables: allTables.length,\n      healthy_tables: healthyTables,\n      stale_tables: staleTables,\n      error_tables: errorTables,\n      empty_tables: emptyTables,\n      missing_tables: 0, // Tables we expect but don't exist\n      total_records: totalRecords,\n      total_missing_data: 0 // Could be enhanced\n    };\n    \n    const duration = Date.now() - startTime;\n    console.log(`✅ Comprehensive database health check completed in ${duration}ms`);\n    console.log(`📊 Summary: ${summary.total_tables} tables, ${summary.healthy_tables} healthy, ${summary.total_records} total records`);\n    \n    return {\n      status: 'connected',\n      database: {\n        status: 'connected',\n        currentTime: basicHealth.timestamp,\n        postgresVersion: basicHealth.version,\n        tables: tableHealth,\n        summary: summary\n      },\n      timestamp: new Date().toISOString(),\n      note: `Analyzed ${allTables.length} database tables in ${duration}ms`\n    };\n    \n  } catch (error) {\n    console.error('❌ Comprehensive database health check failed:', error);\n    return {\n      status: 'error',\n      error: error.message,\n      database: {\n        status: 'error',\n        tables: {},\n        summary: {\n          total_tables: 0,\n          healthy_tables: 0,\n          stale_tables: 0,\n          error_tables: 0,\n          empty_tables: 0,\n          missing_tables: 0,\n          total_records: 0,\n          total_missing_data: 0\n        }\n      },\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n// Create health_status table if it doesn't exist (for storing health data)\n// REMOVED: Table creation endpoints - tables should be created by db-init infrastructure\n\n// External Service Health Check Functions\n\n/**\n * Database health check with timeout and circuit breaker\n */\nasync function checkDatabaseHealth() {\n  try {\n    console.log('🔍 Checking database health...');\n    const startTime = Date.now();\n    \n    // Test basic connectivity with timeout\n    const dbHealth = await Promise.race([\n      healthCheck(),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Database health check timeout')), 5000)\n      )\n    ]);\n    \n    const duration = Date.now() - startTime;\n    \n    if (dbHealth.status === 'healthy') {\n      return {\n        status: 'healthy',\n        message: 'Database is connected and responsive',\n        responseTime: `${duration}ms`,\n        version: dbHealth.version || 'unknown',\n        connection: {\n          host: process.env.DB_ENDPOINT ? 'configured' : 'not_configured',\n          pool: 'active',\n          ssl: 'enabled'\n        }\n      };\n    } else {\n      return {\n        status: 'failed',\n        message: 'Database connection failed',\n        error: dbHealth.error,\n        responseTime: `${duration}ms`\n      };\n    }\n  } catch (error) {\n    console.error('❌ Database health check failed:', error);\n    return {\n      status: 'failed',\n      message: 'Database health check failed',\n      error: error.message,\n      timeout: error.message.includes('timeout')\n    };\n  }\n}\n\n/**\n * Alpaca API health check with sample credentials\n */\nasync function checkAlpacaApiHealth() {\n  try {\n    console.log('🔍 Checking Alpaca API health...');\n    const startTime = Date.now();\n    \n    // Check if we have any valid Alpaca credentials to test with\n    let testCredentials = null;\n    \n    try {\n      // Try to get any user's API credentials for testing\n      const credentialsQuery = await query(`\n        SELECT api_key_encrypted, api_secret_encrypted, is_sandbox \n        FROM user_api_keys \n        WHERE provider = 'alpaca' AND status = 'active' \n        LIMIT 1\n      `);\n      \n      if (credentialsQuery.rows.length > 0) {\n        const row = credentialsQuery.rows[0];\n        \n        // Decrypt credentials for testing\n        const decryptedKey = await apiKeyService.decryptApiKey(row.api_key_encrypted);\n        const decryptedSecret = await apiKeyService.decryptApiKey(row.api_secret_encrypted);\n        \n        testCredentials = {\n          apiKey: decryptedKey,\n          apiSecret: decryptedSecret,\n          isSandbox: row.is_sandbox\n        };\n      }\n    } catch (dbError) {\n      console.log('⚠️ Could not fetch test credentials from database:', dbError.message);\n    }\n    \n    if (testCredentials) {\n      // Test with real credentials\n      const alpaca = new AlpacaService(\n        testCredentials.apiKey,\n        testCredentials.apiSecret,\n        testCredentials.isSandbox\n      );\n      \n      // Test API connectivity with account info (lightweight call)\n      const accountInfo = await Promise.race([\n        alpaca.getAccount(),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Alpaca API timeout')), 10000)\n        )\n      ]);\n      \n      const duration = Date.now() - startTime;\n      \n      return {\n        status: 'healthy',\n        message: 'Alpaca API is accessible and responsive',\n        responseTime: `${duration}ms`,\n        environment: testCredentials.isSandbox ? 'sandbox' : 'live',\n        account: {\n          status: accountInfo?.status || 'unknown',\n          tradingBlocked: accountInfo?.trading_blocked || false\n        },\n        features: {\n          trading: true,\n          marketData: true,\n          portfolio: true\n        }\n      };\n    } else {\n      // No credentials available - check basic API availability\n      return {\n        status: 'degraded',\n        message: 'No API credentials available for testing',\n        responseTime: 'N/A',\n        environment: 'unknown',\n        features: {\n          trading: false,\n          marketData: false,\n          portfolio: false\n        },\n        note: 'Add API credentials in Settings to enable full functionality'\n      };\n    }\n  } catch (error) {\n    console.error('❌ Alpaca API health check failed:', error);\n    return {\n      status: 'failed',\n      message: 'Alpaca API health check failed',\n      error: error.message,\n      timeout: error.message.includes('timeout'),\n      circuitBreakerTriggered: error.message.includes('circuit breaker')\n    };\n  }\n}\n\n/**\n * AWS Secrets Manager health check\n */\nasync function checkAwsSecretsManagerHealth() {\n  try {\n    console.log('🔍 Checking AWS Secrets Manager health...');\n    const startTime = Date.now();\n    \n    const secretsManager = new SecretsManagerClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    });\n    \n    // Test basic Secrets Manager connectivity\n    const testSecretArn = process.env.DB_SECRET_ARN || process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n    \n    if (!testSecretArn) {\n      return {\n        status: 'degraded',\n        message: 'No Secrets Manager ARNs configured',\n        configured: false,\n        region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n      };\n    }\n    \n    // Test secrets access with timeout\n    await Promise.race([\n      secretsManager.send(new GetSecretValueCommand({ SecretId: testSecretArn })),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Secrets Manager timeout')), 5000)\n      )\n    ]);\n    \n    const duration = Date.now() - startTime;\n    \n    return {\n      status: 'healthy',\n      message: 'AWS Secrets Manager is accessible',\n      responseTime: `${duration}ms`,\n      configured: true,\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n      secrets: {\n        dbSecret: !!process.env.DB_SECRET_ARN,\n        apiKeySecret: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN\n      }\n    };\n  } catch (error) {\n    console.error('❌ AWS Secrets Manager health check failed:', error);\n    return {\n      status: 'failed',\n      message: 'AWS Secrets Manager health check failed',\n      error: error.message,\n      timeout: error.message.includes('timeout'),\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    };\n  }\n}\n\n/**\n * AWS RDS health check\n */\nasync function checkAwsRdsHealth() {\n  try {\n    console.log('🔍 Checking AWS RDS health...');\n    \n    if (!process.env.DB_ENDPOINT) {\n      return {\n        status: 'degraded',\n        message: 'DB_ENDPOINT not configured',\n        configured: false\n      };\n    }\n    \n    // RDS health is primarily determined by database connectivity\n    // We can also check RDS-specific metrics if needed\n    const dbHealth = await checkDatabaseHealth();\n    \n    return {\n      status: dbHealth.status,\n      message: dbHealth.status === 'healthy' ? 'AWS RDS instance is accessible' : 'AWS RDS connection issues',\n      responseTime: dbHealth.responseTime,\n      configured: true,\n      endpoint: 'configured',\n      ssl: 'enforced',\n      multiAz: 'unknown', // Would need RDS API to check\n      backups: 'unknown'  // Would need RDS API to check\n    };\n  } catch (error) {\n    console.error('❌ AWS RDS health check failed:', error);\n    return {\n      status: 'failed',\n      message: 'AWS RDS health check failed',\n      error: error.message\n    };\n  }\n}\n\n/**\n * AWS Cognito health check\n */\nasync function checkAwsCognitoHealth() {\n  try {\n    console.log('🔍 Checking AWS Cognito health...');\n    const startTime = Date.now();\n    \n    const userPoolId = process.env.COGNITO_USER_POOL_ID;\n    const clientId = process.env.COGNITO_CLIENT_ID;\n    \n    if (!userPoolId || !clientId) {\n      return {\n        status: 'degraded',\n        message: 'Cognito configuration not complete',\n        configured: false,\n        region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n        userPool: !!userPoolId,\n        clientId: !!clientId\n      };\n    }\n    \n    const cognitoIdp = new CognitoIdentityProviderClient({\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    });\n    \n    // Test Cognito connectivity by describing the user pool\n    await Promise.race([\n      cognitoIdp.send(new DescribeUserPoolCommand({ UserPoolId: userPoolId })),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Cognito timeout')), 5000)\n      )\n    ]);\n    \n    const duration = Date.now() - startTime;\n    \n    return {\n      status: 'healthy',\n      message: 'AWS Cognito is accessible',\n      responseTime: `${duration}ms`,\n      configured: true,\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n      userPool: !!userPoolId,\n      clientId: !!clientId,\n      features: {\n        authentication: true,\n        userManagement: true,\n        mfa: 'unknown' // Would need to check user pool config\n      }\n    };\n  } catch (error) {\n    console.error('❌ AWS Cognito health check failed:', error);\n    return {\n      status: 'failed',\n      message: 'AWS Cognito health check failed',\n      error: error.message,\n      timeout: error.message.includes('timeout'),\n      region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n    };\n  }\n}\n\n// API Service Health Check Functions\nasync function checkApiKeyServiceHealth() {\n  try {\n    // Check if API key service is initialized and enabled\n    await apiKeyService.ensureInitialized();\n    \n    // Test encryption/decryption functionality\n    const testResult = await testEncryptionFunctionality();\n    \n    return {\n      status: apiKeyService.isEnabled && testResult.success ? 'healthy' : 'degraded',\n      enabled: apiKeyService.isEnabled,\n      message: 'API key service is initialized and enabled',\n      features: {\n        encryption: apiKeyService.isEnabled,\n        secretsManager: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n        encryptionTest: testResult.success\n      },\n      encryptionTest: testResult\n    };\n  } catch (error) {\n    return {\n      status: 'failed',\n      enabled: false,\n      error: error.message,\n      message: 'API key service is not available',\n      features: {\n        encryption: false,\n        secretsManager: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,\n        encryptionTest: false\n      }\n    };\n  }\n}\n\nasync function checkJwtSecretServiceHealth() {\n  try {\n    console.log('🔍 Checking JWT secret service health...');\n    \n    // Initialize JWT secret manager\n    await jwtSecretManager.initialize();\n    \n    // Get secret info\n    const secretInfo = await jwtSecretManager.getSecretInfo();\n    \n    // Test JWT token generation and validation\n    const jwtTestResult = await testJwtFunctionality();\n    \n    return {\n      status: secretInfo.available && jwtTestResult.success ? 'healthy' : 'degraded',\n      available: secretInfo.available,\n      source: secretInfo.source,\n      validation: secretInfo.validation,\n      message: secretInfo.available ? 'JWT secret service is available' : 'JWT secret service is not available',\n      jwtTest: jwtTestResult,\n      features: {\n        tokenGeneration: jwtTestResult.tokenGenerated,\n        tokenValidation: jwtTestResult.tokenValid,\n        secretStrength: secretInfo.validation?.strength || 'unknown'\n      }\n    };\n  } catch (error) {\n    console.error('❌ JWT secret service health check failed:', error);\n    return {\n      status: 'failed',\n      available: false,\n      error: error.message,\n      message: 'JWT secret service health check failed',\n      features: {\n        tokenGeneration: false,\n        tokenValidation: false,\n        secretStrength: 'unknown'\n      }\n    };\n  }\n}\n\nasync function checkEncryptionServiceHealth() {\n  try {\n    console.log('🔍 Checking encryption service health...');\n    \n    // Get overall service health\n    const serviceHealth = await apiKeyService.getServiceHealth();\n    \n    return {\n      status: serviceHealth.overall === 'healthy' ? 'healthy' : 'degraded',\n      encryption: serviceHealth.encryptionService,\n      jwt: serviceHealth.jwtService,\n      overall: serviceHealth.overall,\n      message: `Encryption service is ${serviceHealth.overall}`,\n      features: {\n        hasEncryptionSecret: serviceHealth.encryptionService.hasSecret,\n        jwtAvailable: serviceHealth.jwtService.available,\n        secretLength: serviceHealth.encryptionService.secretLength\n      }\n    };\n  } catch (error) {\n    console.error('❌ Encryption service health check failed:', error);\n    return {\n      status: 'failed',\n      error: error.message,\n      message: 'Encryption service health check failed',\n      features: {\n        hasEncryptionSecret: false,\n        jwtAvailable: false,\n        secretLength: 0\n      }\n    };\n  }\n}\n\nasync function checkDatabaseTablesForApiKeys() {\n  try {\n    const requiredTables = [\n      'user_api_keys',\n      'portfolio_holdings', \n      'portfolio_metadata',\n      'portfolio_data_refresh_requests'\n    ];\n    \n    const tableStatus = {};\n    \n    for (const table of requiredTables) {\n      try {\n        const result = await query(`SELECT COUNT(*) as count FROM ${table} LIMIT 1`);\n        tableStatus[table] = {\n          exists: true,\n          status: 'healthy',\n          count: parseInt(result.rows[0].count)\n        };\n      } catch (error) {\n        if (error.message.includes('does not exist')) {\n          tableStatus[table] = {\n            exists: false,\n            status: 'missing',\n            error: 'Table does not exist'\n          };\n        } else {\n          tableStatus[table] = {\n            exists: true,\n            status: 'error',\n            error: error.message\n          };\n        }\n      }\n    }\n    \n    const allHealthy = Object.values(tableStatus).every(t => t.status === 'healthy');\n    \n    return {\n      status: allHealthy ? 'healthy' : 'degraded',\n      tables: tableStatus,\n      summary: {\n        total_tables: requiredTables.length,\n        healthy_tables: Object.values(tableStatus).filter(t => t.status === 'healthy').length,\n        missing_tables: Object.values(tableStatus).filter(t => t.status === 'missing').length,\n        error_tables: Object.values(tableStatus).filter(t => t.status === 'error').length\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'failed',\n      error: error.message,\n      message: 'Failed to check database tables'\n    };\n  }\n}\n\nasync function checkSecretsManagerHealth() {\n  try {\n    const secretArn = process.env.API_KEY_ENCRYPTION_SECRET_ARN;\n    \n    if (!secretArn) {\n      return {\n        status: 'degraded',\n        message: 'API_KEY_ENCRYPTION_SECRET_ARN not configured',\n        configured: false\n      };\n    }\n    \n    // Try to load the secret (this will test both permissions and secret existence)\n    try {\n      await apiKeyService.ensureInitialized();\n      return {\n        status: 'healthy',\n        message: 'Secrets Manager access is working',\n        configured: true,\n        secretArn: secretArn.substring(0, 50) + '...' // Truncate for security\n      };\n    } catch (error) {\n      return {\n        status: 'failed',\n        message: 'Cannot access encryption secret',\n        configured: true,\n        error: error.message,\n        secretArn: secretArn.substring(0, 50) + '...'\n      };\n    }\n  } catch (error) {\n    return {\n      status: 'failed',\n      error: error.message,\n      message: 'Secrets Manager health check failed'\n    };\n  }\n}\n\n/**\n * Generate timeout recommendations based on circuit breaker status\n */\nfunction generateTimeoutRecommendations(circuitBreakers) {\n  const recommendations = [];\n  \n  for (const [serviceKey, breaker] of Object.entries(circuitBreakers)) {\n    if (breaker.state === 'open') {\n      recommendations.push({\n        service: serviceKey,\n        issue: 'Circuit breaker is open',\n        recommendation: 'Service is currently unavailable due to repeated failures. Check service health.',\n        priority: 'high'\n      });\n    } else if (breaker.state === 'half-open') {\n      recommendations.push({\n        service: serviceKey,\n        issue: 'Circuit breaker is half-open',\n        recommendation: 'Service is recovering from failures. Monitor closely.',\n        priority: 'medium'\n      });\n    } else if (breaker.failures > 2) {\n      recommendations.push({\n        service: serviceKey,\n        issue: 'Recent failures detected',\n        recommendation: 'Service has recent failures but is still operational. Consider investigating.',\n        priority: 'low'\n      });\n    }\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      service: 'all',\n      issue: 'none',\n      recommendation: 'All services are operating normally with proper timeout handling.',\n      priority: 'info'\n    });\n  }\n  \n  return recommendations;\n}\n\n// Comprehensive Database Schema Validation Endpoint\nrouter.get('/database/schema', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    console.log(`🚀 [${requestId}] Database schema validation endpoint called`, {\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    // Perform comprehensive database schema validation\n    console.log(`🔍 [${requestId}] Starting comprehensive database schema validation`);\n    const schemaValidation = await validateDatabaseSchema(requestId);\n    \n    const responseData = {\n      success: true,\n      schema_validation: {\n        overall: {\n          status: schemaValidation.valid ? 'valid' : 'invalid',\n          health_percentage: schemaValidation.healthPercentage,\n          critical_missing: schemaValidation.criticalMissing || [],\n          total_required: schemaValidation.totalRequired,\n          total_existing: schemaValidation.totalExisting\n        },\n        categories: schemaValidation.validation ? {\n          core: {\n            status: schemaValidation.validation.core.missing.length === 0 ? 'complete' : 'incomplete',\n            required: schemaValidation.validation.core.required.length,\n            existing: schemaValidation.validation.core.existing.length,\n            missing: schemaValidation.validation.core.missing,\n            existing_tables: schemaValidation.validation.core.existing\n          },\n          portfolio: {\n            status: schemaValidation.validation.portfolio.missing.length === 0 ? 'complete' : 'incomplete',\n            required: schemaValidation.validation.portfolio.required.length,\n            existing: schemaValidation.validation.portfolio.existing.length,\n            missing: schemaValidation.validation.portfolio.missing,\n            existing_tables: schemaValidation.validation.portfolio.existing\n          },\n          market_data: {\n            status: schemaValidation.validation.market_data.missing.length === 0 ? 'complete' : 'incomplete',\n            required: schemaValidation.validation.market_data.required.length,\n            existing: schemaValidation.validation.market_data.existing.length,\n            missing: schemaValidation.validation.market_data.missing,\n            existing_tables: schemaValidation.validation.market_data.existing\n          },\n          analytics: {\n            status: schemaValidation.validation.analytics.missing.length === 0 ? 'complete' : 'incomplete',\n            required: schemaValidation.validation.analytics.required.length,\n            existing: schemaValidation.validation.analytics.existing.length,\n            missing: schemaValidation.validation.analytics.missing,\n            existing_tables: schemaValidation.validation.analytics.existing\n          },\n          optional: {\n            status: 'optional',\n            required: schemaValidation.validation.optional.required.length,\n            existing: schemaValidation.validation.optional.existing.length,\n            missing: schemaValidation.validation.optional.missing,\n            existing_tables: schemaValidation.validation.optional.existing\n          }\n        } : null,\n        schema_definition: REQUIRED_SCHEMA,\n        recommendations: generateSchemaRecommendations(schemaValidation),\n        validation_info: {\n          duration_ms: schemaValidation.validationDuration,\n          timestamp: schemaValidation.timestamp,\n          request_id: requestId\n        }\n      },\n      request_info: {\n        request_id: requestId,\n        total_duration_ms: Date.now() - requestStart,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    // Set appropriate HTTP status based on schema health\n    let statusCode = 200;\n    if (schemaValidation.error) {\n      statusCode = 500;\n    } else if (schemaValidation.criticalMissing && schemaValidation.criticalMissing.length > 0) {\n      statusCode = 503; // Service unavailable due to missing critical tables\n    } else if (schemaValidation.healthPercentage < 80) {\n      statusCode = 206; // Partial content - some tables missing but not critical\n    }\n\n    const totalDuration = Date.now() - requestStart;\n    console.log(`✅ [${requestId}] Database schema validation completed in ${totalDuration}ms`, {\n      status: statusCode,\n      schemaHealth: `${schemaValidation.healthPercentage}%`,\n      criticalMissing: schemaValidation.criticalMissing?.length || 0,\n      totalRequired: schemaValidation.totalRequired,\n      totalExisting: schemaValidation.totalExisting\n    });\n\n    res.status(statusCode).json(responseData);\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Database schema validation FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack,\n      impact: 'Cannot validate database schema',\n      recommendation: 'Check database connectivity and permissions'\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Database schema validation failed',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n      request_info: {\n        request_id: requestId,\n        error_duration_ms: errorDuration,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n});\n\n/**\n * Generate schema-specific recommendations based on validation results\n */\nfunction generateSchemaRecommendations(schemaValidation) {\n  const recommendations = [];\n  \n  if (schemaValidation.error) {\n    recommendations.push({\n      type: 'error',\n      priority: 'critical',\n      message: 'Database schema validation failed',\n      action: 'Check database connectivity and permissions',\n      details: schemaValidation.error\n    });\n    return recommendations;\n  }\n  \n  if (schemaValidation.criticalMissing && schemaValidation.criticalMissing.length > 0) {\n    recommendations.push({\n      type: 'critical_tables_missing',\n      priority: 'critical',\n      message: `${schemaValidation.criticalMissing.length} critical tables missing`,\n      action: 'Run database initialization scripts immediately',\n      details: schemaValidation.criticalMissing,\n      impact: 'Core application functionality will not work'\n    });\n  }\n  \n  if (schemaValidation.validation) {\n    const categories = ['core', 'portfolio', 'market_data', 'analytics'];\n    \n    categories.forEach(category => {\n      const categoryData = schemaValidation.validation[category];\n      if (categoryData && categoryData.missing.length > 0) {\n        recommendations.push({\n          type: 'category_tables_missing',\n          priority: category === 'core' ? 'high' : 'medium',\n          message: `Missing ${categoryData.missing.length} ${category} tables`,\n          action: `Create missing ${category} tables: ${categoryData.missing.join(', ')}`,\n          details: categoryData.missing,\n          impact: getCategoryImpact(category)\n        });\n      }\n    });\n  }\n  \n  if (schemaValidation.healthPercentage < 100 && schemaValidation.healthPercentage >= 80) {\n    recommendations.push({\n      type: 'partial_schema',\n      priority: 'low',\n      message: `Schema is ${schemaValidation.healthPercentage}% complete`,\n      action: 'Consider creating missing optional tables for full functionality',\n      details: 'Some advanced features may be limited'\n    });\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      type: 'schema_complete',\n      priority: 'info',\n      message: 'Database schema is complete and healthy',\n      action: 'No action required',\n      details: 'All required tables are present and accessible'\n    });\n  }\n  \n  return recommendations;\n}\n\n/**\n * Get category-specific impact description for recommendations\n */\nfunction getCategoryImpact(category) {\n  const impacts = {\n    core: 'User authentication and API key management will fail',\n    portfolio: 'Portfolio tracking and management features will be broken',\n    market_data: 'Stock data and market information will be unavailable',\n    analytics: 'Trading signals and analysis features will not work'\n  };\n  \n  return impacts[category] || 'Some application features may be limited';\n}\n\n/**\n * Test encryption functionality with sample data\n */\nasync function testEncryptionFunctionality() {\n  try {\n    const testApiKey = 'TEST_KEY_' + Math.random().toString(36).substr(2, 10);\n    const testSalt = 'test_salt_' + Math.random().toString(36).substr(2, 8);\n    const testUserId = 'test_user';\n    const testProvider = 'test';\n    \n    // Test encryption\n    const encrypted = await apiKeyService.encryptApiKey(testApiKey, testSalt, testUserId, testProvider);\n    \n    // Test decryption\n    const decrypted = await apiKeyService.decryptApiKey(encrypted, testSalt, testUserId, testProvider);\n    \n    const success = testApiKey === decrypted;\n    \n    return {\n      success,\n      message: success ? 'Encryption test passed' : 'Encryption test failed',\n      details: {\n        originalLength: testApiKey.length,\n        encryptedLength: encrypted.encrypted.length,\n        decryptedLength: decrypted.length,\n        roundTripSuccess: success\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Encryption test failed',\n      error: error.message\n    };\n  }\n}\n\n/**\n * Test JWT functionality with sample data\n */\nasync function testJwtFunctionality() {\n  try {\n    const testUserId = 'test_user_' + Math.random().toString(36).substr(2, 6);\n    const testProvider = 'test_provider';\n    const testPermissions = ['read', 'write'];\n    \n    // Test token generation\n    const token = await apiKeyService.generateApiKeyToken(testUserId, testProvider, testPermissions, '1h');\n    \n    // Test token validation\n    const validation = await apiKeyService.validateApiKeyToken(token);\n    \n    const success = validation.valid && validation.userId === testUserId && validation.provider === testProvider;\n    \n    return {\n      success,\n      tokenGenerated: !!token,\n      tokenValid: validation.valid,\n      message: success ? 'JWT test passed' : 'JWT test failed',\n      details: {\n        tokenLength: token ? token.length : 0,\n        userIdMatch: validation.userId === testUserId,\n        providerMatch: validation.provider === testProvider,\n        permissionsMatch: JSON.stringify(validation.permissions) === JSON.stringify(testPermissions)\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      tokenGenerated: false,\n      tokenValid: false,\n      message: 'JWT test failed',\n      error: error.message\n    };\n  }\n}\n\n/**\n * Generate recommendations for API service issues\n */\nfunction generateApiServiceRecommendations(services) {\n  const recommendations = [];\n  \n  if (services.encryptionService.status === 'failed') {\n    recommendations.push({\n      priority: 'critical',\n      service: 'encryption',\n      issue: 'Encryption service is not available',\n      action: 'Configure API_KEY_ENCRYPTION_SECRET or API_KEY_ENCRYPTION_SECRET_ARN',\n      impact: 'Cannot encrypt/decrypt user API keys'\n    });\n  }\n  \n  if (services.jwtSecretService.status === 'failed') {\n    recommendations.push({\n      priority: 'critical',\n      service: 'jwt',\n      issue: 'JWT secret service is not available',\n      action: 'Configure JWT_SECRET or JWT_SECRET_ARN',\n      impact: 'Cannot generate authentication tokens'\n    });\n  }\n  \n  if (services.jwtSecretService.validation?.strength === 'low_entropy') {\n    recommendations.push({\n      priority: 'medium',\n      service: 'jwt',\n      issue: 'JWT secret has low entropy',\n      action: 'Rotate JWT secret with crypto.randomBytes()',\n      impact: 'Reduced security for token signing'\n    });\n  }\n  \n  if (services.database.status === 'degraded') {\n    recommendations.push({\n      priority: 'high',\n      service: 'database',\n      issue: 'Some API-related database tables are missing',\n      action: 'Run database initialization scripts',\n      impact: 'API key storage and portfolio features may not work'\n    });\n  }\n  \n  if (services.secrets.status === 'degraded') {\n    recommendations.push({\n      priority: 'medium',\n      service: 'secrets',\n      issue: 'Secrets Manager not fully configured',\n      action: 'Set up API_KEY_ENCRYPTION_SECRET_ARN and JWT_SECRET_ARN',\n      impact: 'Fallback to environment variables for secrets'\n    });\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      priority: 'info',\n      service: 'all',\n      issue: 'All API services are healthy',\n      action: 'No action required',\n      impact: 'API key service fully operational'\n    });\n  }\n  \n  return recommendations;\n}\n\n// Circuit Breaker Analytics Helper Functions\n\n/**\n * Calculate health score for a circuit breaker (0-100)\n */\nfunction calculateHealthScore(breaker) {\n  if (breaker.state === 'closed' && breaker.failures === 0) {\n    return 100;\n  }\n  \n  if (breaker.state === 'open') {\n    return 0;\n  }\n  \n  if (breaker.state === 'half-open') {\n    return 50;\n  }\n  \n  // For closed state with failures\n  const threshold = 5; // Default threshold\n  const healthScore = Math.max(0, 100 - (breaker.failures / threshold) * 100);\n  return Math.round(healthScore);\n}\n\n/**\n * Calculate risk level for a circuit breaker\n */\nfunction calculateRiskLevel(breaker) {\n  if (breaker.state === 'open') {\n    return 'critical';\n  }\n  \n  if (breaker.state === 'half-open') {\n    return 'warning';\n  }\n  \n  if (breaker.failures >= 3) {\n    return 'warning';\n  }\n  \n  if (breaker.failures >= 1) {\n    return 'minor';\n  }\n  \n  return 'low';\n}\n\n/**\n * Get next state transition information\n */\nfunction getNextStateTransition(breaker) {\n  const now = Date.now();\n  const timeSinceLastFailure = now - breaker.lastFailureTime;\n  \n  if (breaker.state === 'open') {\n    const timeoutMs = 60000; // 1 minute default timeout\n    const timeUntilHalfOpen = timeoutMs - timeSinceLastFailure;\n    \n    if (timeUntilHalfOpen <= 0) {\n      return {\n        nextState: 'half-open',\n        transitionTime: 'now',\n        description: 'Circuit breaker is ready to transition to half-open state'\n      };\n    }\n    \n    return {\n      nextState: 'half-open',\n      transitionTime: `${Math.ceil(timeUntilHalfOpen / 1000)} seconds`,\n      description: `Circuit breaker will transition to half-open in ${Math.ceil(timeUntilHalfOpen / 1000)} seconds`\n    };\n  }\n  \n  if (breaker.state === 'half-open') {\n    return {\n      nextState: 'closed or open',\n      transitionTime: 'on next request',\n      description: 'Circuit breaker will transition based on next request result'\n    };\n  }\n  \n  return {\n    nextState: 'stable',\n    transitionTime: 'on failure',\n    description: 'Circuit breaker will remain closed until failure threshold is reached'\n  };\n}\n\n/**\n * Get recommended action for circuit breaker\n */\nfunction getRecommendedAction(breaker) {\n  if (breaker.state === 'open') {\n    return 'Investigate service issues, check connectivity and logs';\n  }\n  \n  if (breaker.state === 'half-open') {\n    return 'Monitor closely, service is recovering';\n  }\n  \n  if (breaker.failures >= 3) {\n    return 'Monitor for patterns, consider increasing timeout or improving service reliability';\n  }\n  \n  if (breaker.failures >= 1) {\n    return 'Monitor for additional failures';\n  }\n  \n  return 'No action required';\n}\n\n/**\n * Get alert level for circuit breaker\n */\nfunction getAlertLevel(breaker) {\n  if (breaker.state === 'open') {\n    return 'critical';\n  }\n  \n  if (breaker.state === 'half-open') {\n    return 'warning';\n  }\n  \n  if (breaker.failures >= 3) {\n    return 'warning';\n  }\n  \n  if (breaker.failures >= 1) {\n    return 'minor';\n  }\n  \n  return 'healthy';\n}\n\n/**\n * Calculate overall health score from all circuit breakers\n */\nfunction calculateOverallHealthScore(analytics) {\n  const services = Object.values(analytics);\n  \n  if (services.length === 0) {\n    return 100;\n  }\n  \n  const totalScore = services.reduce((sum, service) => sum + service.analysis.healthScore, 0);\n  return Math.round(totalScore / services.length);\n}\n\n/**\n * Generate system-wide recommendations\n */\nfunction generateSystemRecommendations(analytics) {\n  const recommendations = [];\n  const services = Object.entries(analytics);\n  \n  // Check for critical services\n  const criticalServices = services.filter(([_, service]) => service.analysis.alertLevel === 'critical');\n  if (criticalServices.length > 0) {\n    recommendations.push({\n      priority: 'critical',\n      title: 'Critical Service Failures',\n      description: `${criticalServices.length} service(s) have circuit breakers in open state`,\n      services: criticalServices.map(([key, _]) => key),\n      action: 'Immediate investigation required'\n    });\n  }\n  \n  // Check for warning services\n  const warningServices = services.filter(([_, service]) => service.analysis.alertLevel === 'warning');\n  if (warningServices.length > 0) {\n    recommendations.push({\n      priority: 'warning',\n      title: 'Services Under Stress',\n      description: `${warningServices.length} service(s) showing signs of instability`,\n      services: warningServices.map(([key, _]) => key),\n      action: 'Monitor closely and investigate patterns'\n    });\n  }\n  \n  // Check for recent failures\n  const recentFailures = services.filter(([_, service]) => service.analysis.isRecentFailure);\n  if (recentFailures.length > 0) {\n    recommendations.push({\n      priority: 'info',\n      title: 'Recent Failures Detected',\n      description: `${recentFailures.length} service(s) had failures in the last 5 minutes`,\n      services: recentFailures.map(([key, _]) => key),\n      action: 'Review recent activity and error logs'\n    });\n  }\n  \n  // Check overall health\n  const overallHealth = calculateOverallHealthScore(analytics);\n  if (overallHealth < 70) {\n    recommendations.push({\n      priority: 'warning',\n      title: 'Overall System Health Below Threshold',\n      description: `System health score is ${overallHealth}%`,\n      action: 'Review system architecture and service dependencies'\n    });\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      priority: 'info',\n      title: 'All Services Healthy',\n      description: 'All circuit breakers are in healthy state',\n      action: 'Continue monitoring'\n    });\n  }\n  \n  return recommendations;\n}\n\nmodule.exports = router;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC,WAAW;EAAEC,KAAK;EAAEC,sBAAsB;EAAEC;AAAgB,CAAC;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AACpG,MAAMK,aAAa;AAAA;AAAA,CAAAT,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,8BAA8B,CAAC;AAC7D,MAAMM,aAAa;AAAA;AAAA,CAAAV,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMO,aAAa;AAAA;AAAA,CAAAX,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMQ,eAAe;AAAA;AAAA,CAAAZ,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAM;EAAES,oBAAoB;EAAEC;AAAsB,CAAC;AAAA;AAAA,CAAAd,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,iCAAiC,CAAC;AAClG,MAAM;EAAEW,6BAA6B;EAAEC;AAAwB,CAAC;AAAA;AAAA,CAAAhB,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,2CAA2C,CAAC;AACvH,MAAMa,gBAAgB;AAAA;AAAA,CAAAjB,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC7D,MAAMc,MAAM;AAAA;AAAA,CAAAlB,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMe,MAAM;AAAA;AAAA,CAAAnB,aAAA,GAAAG,CAAA,QAAGD,OAAO,CAACkB,MAAM,CAAC,CAAC;;AAE/B;AAAA;AAAApB,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAClC,MAAMC,SAAS;EAAA;EAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;EAC5B,MAAMC,UAAU;EAAA;EAAA,CAAA5B,aAAA,GAAAG,CAAA,QAAG,KAAK,EAAC,CAAC;EAAA;EAAAH,aAAA,GAAAG,CAAA;EAE1B,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACF;IACA,IAAImB,GAAG,CAAChB,KAAK,CAACuB,KAAK,KAAK,MAAM,EAAE;MAAA;MAAA7B,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC9B,OAAOoB,GAAG,CAACQ,OAAO,CAAC;QACjBC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,yBAAyB;QAClCC,WAAW;QAAE;QAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;QAAA;QAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAC7CS,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC,CAAC;QACxBC,IAAI,EAAE,kDAAkD;QACxDC,QAAQ,EAAE;UAAEX,MAAM,EAAE;QAAa,CAAC;QAClCY,GAAG,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEV,WAAW;UAAE;UAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;UAAA;UAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAAC,CAAC;QACxEgB,MAAM,EAAE;UACNC,WAAW,EAAE,CAAC,CAACX,OAAO,CAACC,GAAG,CAACW,aAAa;UACxCC,aAAa,EAAE,CAAC,CAACb,OAAO,CAACC,GAAG,CAACa,WAAW;UACxCC,YAAY,EAAE,CAAC,CAACf,OAAO,CAACC,GAAG,CAACe;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApD,aAAA,GAAA8B,CAAA;IAAA;;IAED;IACA,MAAMuB,eAAe;IAAA;IAAA,CAAArD,aAAA,GAAAG,CAAA,QAAGmD,wBAAwB,CAAC,CAAC;IAClD,MAAMC,cAAc;IAAA;IAAA,CAAAvD,aAAA,GAAAG,CAAA,QAAG,IAAIqD,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KAC3C;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAwD,UAAU,CAAC,MAAM;QAAA;QAAA3D,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAuD,MAAM,CAAC,IAAIE,KAAK,CAAC,sBAAsB,CAAC,CAAC;MAAD,CAAC,EAAEhC,UAAU,CAAC;IAAD,CACxE,CAAC;IAED,MAAMiC,QAAQ;IAAA;IAAA,CAAA7D,aAAA,GAAAG,CAAA,QAAG,MAAMqD,OAAO,CAACM,IAAI,CAAC,CAACT,eAAe,EAAEE,cAAc,CAAC,CAAC;IACtE,MAAMQ,SAAS;IAAA;IAAA,CAAA/D,aAAA,GAAAG,CAAA,QAAG0D,QAAQ,CAAC7B,MAAM,KAAK,WAAW;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAElD,IAAI4D,SAAS,EAAE;MAAA;MAAA/D,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACb,OAAOoB,GAAG,CAACQ,OAAO,CAAC;QACjBC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,yBAAyB;QAClCC,WAAW;QAAE;QAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;QAAA;QAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAC7Ca,QAAQ,EAAEkB,QAAQ,CAAClB,QAAQ;QAC3BC,GAAG,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEV,WAAW;UAAE;UAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;UAAA;UAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAAC,CAAC;QACxES,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAzC,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACL,OAAOoB,GAAG,CAACyC,kBAAkB,CAAC,UAAU,EAAE;QACxChC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,yBAAyB;QAClCC,WAAW;QAAE;QAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;QAAA;QAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAC7Ca,QAAQ,EAAEkB,QAAQ,CAAClB,QAAQ;QAC3BC,GAAG,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEV,WAAW;UAAE;UAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;UAAA;UAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAAC,CAAC;QACxES,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC;MACzB,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACd,MAAMC,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,QAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IACxCgE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;;IAE5C;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACA,IAAI8D,KAAK,CAACG,OAAO,KAAK,sBAAsB,EAAE;MAAA;MAAApE,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC5C,OAAOoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;QAC1BrC,MAAM,EAAE,SAAS;QACjBC,OAAO,EAAE,KAAK;QACdmC,OAAO,EAAE,yCAAyC;QAClDzB,QAAQ,EAAE;UAAEX,MAAM,EAAE,SAAS;UAAEiC,KAAK,EAAE;QAAyC,CAAC;QAChFrB,GAAG,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEV,WAAW;UAAE;UAAA,CAAAnC,aAAA,GAAA8B,CAAA,UAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;UAAA;UAAA,CAAAtC,aAAA,GAAA8B,CAAA,UAAI,KAAK;QAAC,CAAC;QACxEoC,QAAQ,EAAEA,QAAQ;QAClB3B,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC,CAAC;QACxB6B,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAA8B,CAAA;IAAA;IAAA9B,aAAA,GAAAG,CAAA;IAEDoB,GAAG,CAACiD,WAAW,CAAC,qBAAqB,EAAE;MACrCxC,MAAM,EAAE,WAAW;MACnBC,OAAO,EAAE,KAAK;MACdU,QAAQ,EAAE;QAAEX,MAAM,EAAE,OAAO;QAAEiC,KAAK,EAAEA,KAAK,CAACG;MAAQ,CAAC;MACnDxB,GAAG,EAAE;QAAEC,OAAO,EAAE,OAAO;QAAEV,WAAW;QAAE;QAAA,CAAAnC,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;QAAA;QAAA,CAAAtC,aAAA,GAAA8B,CAAA,WAAI,KAAK;MAAC,CAAC;MACxEoC,QAAQ,EAAEA,QAAQ;MAClB3B,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;MAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC;IACzB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAzC,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACvC,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC;IAAA;IAAA,CAAAN,aAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,mBAAmB,CAAC;;IAE9C;IACA,MAAMqE,YAAY;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,QAAG,MAAMG,KAAK,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMoE,cAAc;IAAA;IAAA,CAAA1E,aAAA,GAAAG,CAAA,QAAGsE,YAAY,CAACE,IAAI,CAACC,GAAG,CAACC,CAAC,IAAI;MAAA;MAAA7E,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,UAAU;IAAD,CAAC,CAAC;;IAE/D;IACA,MAAMC,oBAAoB;IAAA;IAAA,CAAA/E,aAAA,GAAAG,CAAA,QAAG,CAAC,cAAc,EAAE,eAAe,CAAC;IAC9D,MAAM6E,OAAO;IAAA;IAAA,CAAAhF,aAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEnB,KAAK,MAAM8E,KAAK,IAAIF,oBAAoB,EAAE;MAAA;MAAA/E,aAAA,GAAAG,CAAA;MACxC,IAAIuE,cAAc,CAACQ,QAAQ,CAACD,KAAK,CAAC,EAAE;QAAA;QAAAjF,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAClC,IAAI;UACF,MAAMgF,MAAM;UAAA;UAAA,CAAAnF,aAAA,GAAAG,CAAA,QAAG,MAAMG,KAAK,CAAC,iCAAiC2E,KAAK,UAAU,CAAC;UAAC;UAAAjF,aAAA,GAAAG,CAAA;UAC7E6E,OAAO,CAACC,KAAK,CAAC,GAAG;YACfG,MAAM,EAAE,IAAI;YACZC,KAAK,EAAEC,QAAQ,CAACH,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC;YACrCrD,MAAM,EAAE;UACV,CAAC;QACH,CAAC,CAAC,OAAOiC,KAAK,EAAE;UAAA;UAAAjE,aAAA,GAAAG,CAAA;UACd6E,OAAO,CAACC,KAAK,CAAC,GAAG;YACfG,MAAM,EAAE,IAAI;YACZnB,KAAK,EAAEA,KAAK,CAACG,OAAO;YACpBpC,MAAM,EAAE;UACV,CAAC;QACH;MACF,CAAC,MAAM;QAAA;QAAAhC,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACL6E,OAAO,CAACC,KAAK,CAAC,GAAG;UACfG,MAAM,EAAE,KAAK;UACbpD,MAAM,EAAE;QACV,CAAC;MACH;IACF;;IAEA;IACA,MAAMuD,iBAAiB;IAAA;IAAA,CAAAvF,aAAA,GAAAG,CAAA,QAAG,CAAC,eAAe,EAAE,kBAAkB,EAAE,QAAQ,CAAC;IACzE,MAAMqF,cAAc;IAAA;IAAA,CAAAxF,aAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAE1B,KAAK,MAAM8E,KAAK,IAAIM,iBAAiB,EAAE;MAAA;MAAAvF,aAAA,GAAAG,CAAA;MACrCqF,cAAc,CAACP,KAAK,CAAC,GAAG;QACtBG,MAAM,EAAEV,cAAc,CAACQ,QAAQ,CAACD,KAAK,CAAC;QACtCvC,IAAI,EAAE;MACR,CAAC;IACH;IAEA,MAAM+C,iBAAiB;IAAA;IAAA,CAAAzF,aAAA,GAAAG,CAAA,QAAGuF,MAAM,CAACC,MAAM,CAACX,OAAO,CAAC,CAACY,KAAK,CAACf,CAAC,IAAI;MAAA;MAAA7E,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAAC7C,MAAM,KAAK,OAAO;IAAD,CAAC,CAAC;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAElF,OAAOoB,GAAG,CAACS,MAAM,CAACyD,iBAAiB;IAAA;IAAA,CAAAzF,aAAA,GAAA8B,CAAA,WAAG,GAAG;IAAA;IAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,GAAG,EAAC,CAACuC,IAAI,CAAC;MACpDrC,MAAM,EAAEyD,iBAAiB;MAAA;MAAA,CAAAzF,aAAA,GAAA8B,CAAA,WAAG,OAAO;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,WAAW;MACjD+D,KAAK,EAAEJ,iBAAiB;MACxBvD,OAAO,EAAE,yBAAyB;MAClCoC,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;MACnCpC,WAAW;MAAE;MAAA,CAAAnC,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;MAAA;MAAA,CAAAtC,aAAA,GAAA8B,CAAA,WAAI,KAAK;MAC7CgE,aAAa,EAAEd,OAAO;MACtBe,mBAAmB,EAAEP,cAAc;MACnCQ,kBAAkB,EAAEtB,cAAc,CAACuB,MAAM;MACzCC,UAAU,EAAExB,cAAc;MAC1BhC,IAAI,EAAE;IACR,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOuB,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAChDoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,WAAW;MACnB6D,KAAK,EAAE,KAAK;MACZvB,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;MACnCN,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpB1B,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;;AAEA;AAAA;AAAA1C,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC/C,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC;IAAA;IAAA,CAAAN,aAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,mBAAmB,CAAC;IAE9C,MAAM+E,MAAM;IAAA;IAAA,CAAAnF,aAAA,GAAAG,CAAA,QAAG,MAAMG,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAAC;IAAAN,aAAA,GAAAG,CAAA;IAEHoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBmE,aAAa,EAAEhB,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC;MAC7BL,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACxCoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBgC,IAAI,EAAEnC,KAAK,CAACmC,IAAI;MAChB9B,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC9C,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC;IAAA;IAAA,CAAAN,aAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,mBAAmB,CAAC;IAE9C,MAAM+E,MAAM;IAAA;IAAA,CAAAnF,aAAA,GAAAG,CAAA,QAAG,MAAMG,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAAC;IAAAN,aAAA,GAAAG,CAAA;IAEHoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBqE,WAAW,EAAElB,MAAM,CAACR,IAAI,CAACsB,MAAM;MAC/BK,MAAM,EAAEnB,MAAM,CAACR,IAAI;MACnBL,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC5CoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACnD,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,+CAA+C,CAAC;IAC5D,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,MAAM6E,QAAQ;IAAA;IAAA,CAAAxG,aAAA,GAAAG,CAAA,QAAG;MACfwC,QAAQ,EAAE,MAAM8D,mBAAmB,CAAC,CAAC;MACrCC,SAAS,EAAE,MAAMC,oBAAoB,CAAC,CAAC;MACvCC,iBAAiB,EAAE,MAAMC,4BAA4B,CAAC,CAAC;MACvDC,MAAM,EAAE,MAAMC,iBAAiB,CAAC,CAAC;MACjCC,UAAU,EAAE,MAAMC,qBAAqB,CAAC;IAC1C,CAAC;IAED,MAAMC,eAAe;IAAA;IAAA,CAAAlH,aAAA,GAAAG,CAAA,QAAGuF,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;MAAA;MAAAH,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC,CAACiE,MAAM;IAC1F,MAAMmB,aAAa;IAAA;IAAA,CAAApH,aAAA,GAAAG,CAAA,QAAGuF,MAAM,CAAC2B,IAAI,CAACb,QAAQ,CAAC,CAACP,MAAM;IAClD,MAAMqB,UAAU;IAAA;IAAA,CAAAtH,aAAA,GAAAG,CAAA,QAAG+G,eAAe,KAAKE,aAAa;IACpD,MAAMlD,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,QAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAExCgE,OAAO,CAACoC,GAAG,CAAC,iDAAiDrC,QAAQ,IAAI,CAAC;IAAC;IAAAlE,aAAA,GAAAG,CAAA;IAC3EgE,OAAO,CAACoC,GAAG,CAAC,gBAAgBW,eAAe,IAAIE,aAAa,UAAU,CAAC;IAEvE,MAAMG,YAAY;IAAA;IAAA,CAAAvH,aAAA,GAAAG,CAAA,QAAG;MACnB6B,MAAM,EAAEsF,UAAU;MAAA;MAAA,CAAAtH,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC3CG,OAAO,EAAEqF,UAAU;MACnBpF,OAAO,EAAE,0BAA0B;MACnCgC,QAAQ,EAAE,GAAGA,QAAQ,IAAI;MACzBsC,QAAQ;MACRgB,OAAO,EAAE;QACPC,cAAc,EAAEL,aAAa;QAC7BM,gBAAgB,EAAER,eAAe;QACjCS,iBAAiB,EAAEjC,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;UAAA;UAAAH,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,UAAU;QAAD,CAAC,CAAC,CAACiE,MAAM;QACtF2B,eAAe,EAAElC,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;UAAA;UAAAH,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,QAAQ;QAAD,CAAC,CAAC,CAACiE,MAAM;QAClF4B,iBAAiB,EAAEC,IAAI,CAACC,KAAK,CAAEb,eAAe,GAAGE,aAAa,GAAI,GAAG;MACvE;IACF,CAAC;IAAC;IAAApH,aAAA,GAAAG,CAAA;IAEF,IAAImH,UAAU,EAAE;MAAA;MAAAtH,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACdoB,GAAG,CAACQ,OAAO,CAACwF,YAAY,CAAC;IAC3B,CAAC,MAAM;MAAA;MAAAvH,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACLoB,GAAG,CAACyC,kBAAkB,CAAC,mBAAmB,EAAEuD,YAAY,CAAC;IAC3D;EAEF,CAAC,CAAC,OAAOtD,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACjEoB,GAAG,CAACiD,WAAW,CAAC,uCAAuC,EAAE;MACvDtC,OAAO,EAAE,0BAA0B;MACnC+B,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC9C,IAAI;IACF,MAAMqG,QAAQ;IAAA;IAAA,CAAAxG,aAAA,GAAAG,CAAA,QAAG;MACfM,aAAa,EAAE,MAAMuH,wBAAwB,CAAC,CAAC;MAC/CC,gBAAgB,EAAE,MAAMC,2BAA2B,CAAC,CAAC;MACrDC,iBAAiB,EAAE,MAAMC,4BAA4B,CAAC,CAAC;MACvDzF,QAAQ,EAAE,MAAM0F,6BAA6B,CAAC,CAAC;MAC/CC,OAAO,EAAE,MAAMC,yBAAyB,CAAC;IAC3C,CAAC;IAED,MAAMjB,UAAU;IAAA;IAAA,CAAAtH,aAAA,GAAAG,CAAA,QAAGuF,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACZ,KAAK,CAAC1D,OAAO,IAAI;MAAA;MAAAlC,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAA+B,OAAO,CAACF,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAE1FoB,GAAG,CAACS,MAAM,CAACsF,UAAU;IAAA;IAAA,CAAAtH,aAAA,GAAA8B,CAAA,WAAG,GAAG;IAAA;IAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,GAAG,EAAC,CAACuC,IAAI,CAAC;MACtCrC,MAAM,EAAEsF,UAAU;MAAA;MAAA,CAAAtH,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC3CG,OAAO,EAAEqF,UAAU;MACnBpF,OAAO,EAAE,qBAAqB;MAC9BoC,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;MACnCiC,QAAQ;MACRgB,OAAO,EAAE;QACPC,cAAc,EAAE/B,MAAM,CAAC2B,IAAI,CAACb,QAAQ,CAAC,CAACP,MAAM;QAC5CyB,gBAAgB,EAAEhC,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;UAAA;UAAAH,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,SAAS;QAAD,CAAC,CAAC,CAACiE,MAAM;QACpF0B,iBAAiB,EAAEjC,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;UAAA;UAAAH,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,UAAU;QAAD,CAAC,CAAC,CAACiE,MAAM;QACtF2B,eAAe,EAAElC,MAAM,CAACC,MAAM,CAACa,QAAQ,CAAC,CAACW,MAAM,CAAChH,CAAC,IAAI;UAAA;UAAAH,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,CAAC6B,MAAM,KAAK,QAAQ;QAAD,CAAC,CAAC,CAACiE;MAC9E,CAAC;MACDuC,eAAe,EAAEC,iCAAiC,CAACjC,QAAQ;IAC7D,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOvC,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC1DoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,qBAAqB;MAC9B+B,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAClD,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC;IAAA;IAAA,CAAAN,aAAA,GAAAG,CAAA,SAAGC,OAAO,CAAC,mBAAmB,CAAC;IAC9C,MAAMsI,SAAS;IAAA;IAAA,CAAA1I,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAR,GAAG,CAAChB,KAAK,CAAC2E,KAAK;IAAA;IAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAI,eAAe;;IAEpD;IACA,MAAM6G,UAAU;IAAA;IAAA,CAAA3I,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC;AACnC;AACA;AACA;AACA,KAAK,EAAE,CAACoI,SAAS,CAAC,CAAC;IAEf,MAAME,WAAW;IAAA;IAAA,CAAA5I,aAAA,GAAAG,CAAA,SAAGmF,QAAQ,CAACqD,UAAU,CAAChE,IAAI,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,GAAG,CAAC;IAE3D,IAAIyD,SAAS;IAAA;IAAA,CAAA7I,aAAA,GAAAG,CAAA,SAAG,IAAI;IAAC;IAAAH,aAAA,GAAAG,CAAA;IACrB,IAAIyI,WAAW,EAAE;MAAA;MAAA5I,aAAA,GAAA8B,CAAA;MACf,MAAMgH,IAAI;MAAA;MAAA,CAAA9I,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC,yCAAyCoI,SAAS,GAAG,CAAC;MAAC;MAAA1I,aAAA,GAAAG,CAAA;MAChF0I,SAAS,GAAG;QAAEE,YAAY,EAAEzD,QAAQ,CAACwD,IAAI,CAACnE,IAAI,CAAC,CAAC,CAAC,CAACoE,YAAY;MAAE,CAAC;IACnE,CAAC;IAAA;IAAA;MAAA/I,aAAA,GAAA8B,CAAA;IAAA;IAAA9B,aAAA,GAAAG,CAAA;IAEDoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBiD,KAAK,EAAEyD,SAAS;MAChBtD,MAAM,EAAEwD,WAAW;MACnBE,IAAI,EAAED,SAAS;MACfvE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC3CoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiD,KAAK;MAAE;MAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAAR,GAAG,CAAChB,KAAK,CAAC2E,KAAK;MAAA;MAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAI,eAAe;MACzCmC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAChD,IAAI;IACF,MAAM6I,eAAe;IAAA;IAAA,CAAAhJ,aAAA,GAAAG,CAAA,SAAGQ,aAAa,CAACsI,uBAAuB,CAAC,CAAC;IAC/D,MAAMC,aAAa;IAAA;IAAA,CAAAlJ,aAAA,GAAAG,CAAA,SAAG;MACpBwC,QAAQ,EAAEhC,aAAa,CAACwI,eAAe,CAACxG,QAAQ;MAChDyG,MAAM,EAAEzI,aAAa,CAACwI,eAAe,CAACC,MAAM;MAC5CC,IAAI,EAAE1I,aAAa,CAACwI,eAAe,CAACE,IAAI;MACxCC,SAAS,EAAE3I,aAAa,CAACwI,eAAe,CAACG,SAAS;MAClDC,QAAQ,EAAE5I,aAAa,CAACwI,eAAe,CAACI,QAAQ;MAChDC,MAAM,EAAE7I,aAAa,CAACwI,eAAe,CAACK,MAAM;MAC5CC,SAAS,EAAE9I,aAAa,CAACwI,eAAe,CAACM;IAC3C,CAAC;IAAC;IAAAzJ,aAAA,GAAAG,CAAA;IAEFoB,GAAG,CAACQ,OAAO,CAAC;MACV2H,QAAQ,EAAER,aAAa;MACvBF,eAAe,EAAEA,eAAe;MAChCxB,OAAO,EAAE;QACPmC,oBAAoB,EAAEjE,MAAM,CAAC2B,IAAI,CAAC2B,eAAe,CAAC,CAAC/C,MAAM;QACzD2D,mBAAmB,EAAElE,MAAM,CAACC,MAAM,CAACqD,eAAe,CAAC,CAAC7B,MAAM,CAAC0C,EAAE,IAAI;UAAA;UAAA7J,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAA0J,EAAE,CAACC,KAAK,KAAK,MAAM;QAAD,CAAC,CAAC,CAAC7D,MAAM;QAC5F8D,uBAAuB,EAAErE,MAAM,CAACC,MAAM,CAACqD,eAAe,CAAC,CAAC7B,MAAM,CAAC0C,EAAE,IAAI;UAAA;UAAA7J,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAA0J,EAAE,CAACC,KAAK,KAAK,WAAW;QAAD,CAAC,CAAC,CAAC7D,MAAM;QACrGiB,eAAe,EAAExB,MAAM,CAACC,MAAM,CAACqD,eAAe,CAAC,CAAC7B,MAAM,CAAC0C,EAAE,IAAI;UAAA;UAAA7J,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAA0J,EAAE,CAACC,KAAK,KAAK,QAAQ;QAAD,CAAC,CAAC,CAAC7D;MACtF,CAAC;MACDuC,eAAe,EAAEwB,8BAA8B,CAAChB,eAAe;IACjE,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO/E,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACvDoB,GAAG,CAACiD,WAAW,CAAC,8BAA8B,EAAEP,KAAK,CAACG,OAAO,CAAC;EAChE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,4BAA4B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC3D,IAAI;IACF,MAAM6I,eAAe;IAAA;IAAA,CAAAhJ,aAAA,GAAAG,CAAA,SAAGQ,aAAa,CAACsI,uBAAuB,CAAC,CAAC;IAC/D,MAAMgB,SAAS;IAAA;IAAA,CAAAjK,aAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;;IAEpB;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACA,KAAK,MAAM,CAAC+J,UAAU,EAAEC,OAAO,CAAC,IAAIzE,MAAM,CAAC0E,OAAO,CAACpB,eAAe,CAAC,EAAE;MACnE,MAAMqB,oBAAoB;MAAA;MAAA,CAAArK,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGwI,OAAO,CAACG,eAAe;MACjE,MAAMC,eAAe;MAAA;MAAA,CAAAvK,aAAA,GAAAG,CAAA,SAAGkK,oBAAoB,GAAG,MAAM,EAAC,CAAC;MAAA;MAAArK,aAAA,GAAAG,CAAA;MAEvD8J,SAAS,CAACC,UAAU,CAAC,GAAG;QACtB,GAAGC,OAAO;QACVK,QAAQ,EAAE;UACRC,WAAW,EAAEC,oBAAoB,CAACP,OAAO,CAAC;UAC1CQ,SAAS,EAAEC,kBAAkB,CAACT,OAAO,CAAC;UACtCE,oBAAoB,EAAEA,oBAAoB;UAC1CE,eAAe;UACfM,mBAAmB,EAAEC,sBAAsB,CAACX,OAAO,CAAC;UACpDY,iBAAiB,EAAEC,oBAAoB,CAACb,OAAO,CAAC;UAChDc,UAAU,EAAEC,aAAa,CAACf,OAAO;QACnC;MACF,CAAC;IACH;;IAEA;IACA,MAAMgB,eAAe;IAAA;IAAA,CAAAnL,aAAA,GAAAG,CAAA,SAAG;MACtBiL,kBAAkB,EAAEC,2BAA2B,CAACpB,SAAS,CAAC;MAC1DqB,gBAAgB,EAAE5F,MAAM,CAAC0E,OAAO,CAACH,SAAS,CAAC,CAAC9C,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAE0G,OAAO,CAAC,KAC9D;QAAA;QAAAnK,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAgK,OAAO,CAACK,QAAQ,CAACS,UAAU,KAAK,UAAU;MAAD,CAAC,CAAC,CAACrG,GAAG,CAAC,CAAC,CAAC2G,GAAG,EAAE9H,CAAC,CAAC,KAAK8H;QAAAA;QAAAA,uBAAA;QAAAA,wBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC,CAAC;MACpEC,eAAe,EAAE9F,MAAM,CAAC0E,OAAO,CAACH,SAAS,CAAC,CAAC9C,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAE0G,OAAO,CAAC,KAC7D;QAAA;QAAAnK,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAgK,OAAO,CAACK,QAAQ,CAACS,UAAU,KAAK,SAAS;MAAD,CAAC,CAAC,CAACrG,GAAG,CAAC,CAAC,CAAC2G,GAAG,EAAE9H,CAAC,CAAC,KAAK8H;QAAAA;QAAAA,uBAAA;QAAAA,wBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC,CAAC;MACnEE,cAAc,EAAE/F,MAAM,CAAC0E,OAAO,CAACH,SAAS,CAAC,CAAC9C,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAE0G,OAAO,CAAC,KAC5D;QAAA;QAAAnK,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAgK,OAAO,CAACK,QAAQ,CAACD,eAAe;MAAD,CAAC,CAAC,CAACtE,MAAM;MAC1CyF,aAAa,EAAEhG,MAAM,CAACC,MAAM,CAACsE,SAAS,CAAC,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEzB,OAAO,KAAK;QAAA;QAAAnK,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAyL,GAAG,GAAGzB,OAAO,CAAC0B,QAAQ;MAAD,CAAC,EAAE,CAAC,CAAC;MAC3FrD,eAAe,EAAEsD,6BAA6B,CAAC7B,SAAS;IAC1D,CAAC;IAAC;IAAAjK,aAAA,GAAAG,CAAA;IAEFoB,GAAG,CAACQ,OAAO,CAAC;MACVuC,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;MACnC0F,SAAS;MACTkB,eAAe;MACf3D,OAAO,EAAE;QACPJ,aAAa,EAAE1B,MAAM,CAAC2B,IAAI,CAAC4C,SAAS,CAAC,CAAChE,MAAM;QAC5CiB,eAAe,EAAExB,MAAM,CAACC,MAAM,CAACsE,SAAS,CAAC,CAAC9C,MAAM,CAAC4E,CAAC,IAAI;UAAA;UAAA/L,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAA4L,CAAC,CAACvB,QAAQ,CAACS,UAAU,KAAK,SAAS;QAAD,CAAC,CAAC,CAAChF,MAAM;QACjGuF,eAAe,EAAEL,eAAe,CAACK,eAAe,CAACvF,MAAM;QACvDqF,gBAAgB,EAAEH,eAAe,CAACG,gBAAgB,CAACrF,MAAM;QACzDmF,kBAAkB,EAAED,eAAe,CAACC;MACtC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOnH,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC5DoB,GAAG,CAACiD,WAAW,CAAC,8CAA8C,EAAEP,KAAK,CAACG,OAAO,CAAC;EAChF;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACnD,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,gDAAgD,CAAC;IAC7D,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,MAAMqK,OAAO;IAAA;IAAA,CAAAhM,aAAA,GAAAG,CAAA,SAAG;MACd8L,eAAe,EAAE3K,GAAG,CAAChB,KAAK,CAAC4L,gBAAgB,KAAK,OAAO;MACvDC,MAAM,EAAE7K,GAAG,CAAChB,KAAK,CAAC6L,MAAM,KAAK;IAC/B,CAAC;IAED,MAAMC,MAAM;IAAA;IAAA,CAAApM,aAAA,GAAAG,CAAA,SAAG,MAAMS,eAAe,CAACyL,yBAAyB,CAACL,OAAO,CAAC;IACvE,MAAM9H,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAExCgE,OAAO,CAACoC,GAAG,CAAC,oCAAoCrC,QAAQ,IAAI,CAAC;IAAC;IAAAlE,aAAA,GAAAG,CAAA;IAC9DgE,OAAO,CAACoC,GAAG,CAAC,eAAe6F,MAAM,CAAC5E,OAAO,CAAC9C,cAAc,IAAI0H,MAAM,CAAC5E,OAAO,CAAC8E,WAAW,kBAAkBF,MAAM,CAAC5E,OAAO,CAAC+E,YAAY,gBAAgB,CAAC;;IAEpJ;IACA,MAAMxI,SAAS;IAAA;IAAA,CAAA/D,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAsK,MAAM,CAAC5E,OAAO,CAACgF,eAAe,KAAK,CAAC;IAAA;IAAA,CAAAxM,aAAA,GAAA8B,CAAA,WAAIsK,MAAM,CAAC5E,OAAO,CAACiF,cAAc,KAAK,CAAC;IAE7F,MAAMlF,YAAY;IAAA;IAAA,CAAAvH,aAAA,GAAAG,CAAA,SAAG;MACnB,GAAGiM,MAAM;MACTlI,QAAQ,EAAE,GAAGA,QAAQ,IAAI;MACzBlC,MAAM,EAAE+B,SAAS;MAAA;MAAA,CAAA/D,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC1CG,OAAO,EAAE8B;IACX,CAAC;IAAC;IAAA/D,aAAA,GAAAG,CAAA;IAEF,IAAI4D,SAAS,EAAE;MAAA;MAAA/D,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACboB,GAAG,CAACQ,OAAO,CAACwF,YAAY,CAAC;IAC3B,CAAC,MAAM;MAAA;MAAAvH,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACLoB,GAAG,CAACyC,kBAAkB,CAAC,iBAAiB,EAAEuD,YAAY,CAAC;IACzD;EACF,CAAC,CAAC,OAAOtD,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACpDoB,GAAG,CAACiD,WAAW,CAAC,0BAA0B,EAAEP,KAAK,CAACG,OAAO,CAAC;EAC5D;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,0BAA0B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACzD,IAAI;IACF,MAAMuI,SAAS;IAAA;IAAA,CAAA1I,aAAA,GAAAG,CAAA,SAAGmB,GAAG,CAACoL,MAAM,CAAChE,SAAS;IACtC,MAAMiE,cAAc;IAAA;IAAA,CAAA3M,aAAA,GAAAG,CAAA,SAAGmB,GAAG,CAAChB,KAAK,CAACsM,KAAK,KAAK,MAAM;IAEjD,MAAMxH,MAAM;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,SAAG,MAAMS,eAAe,CAACiM,mBAAmB,CAACnE,SAAS,EAAE;MAClEiE,cAAc;MACdG,QAAQ,EAAExL,GAAG,CAAChB,KAAK,CAACyM,QAAQ,KAAK;IACnC,CAAC,CAAC;IAEF,MAAMC,aAAa;IAAA;IAAA,CAAAhN,aAAA,GAAAG,CAAA,SAAGS,eAAe,CAACqM,cAAc,CAACvE,SAAS,CAAC;IAAC;IAAA1I,aAAA,GAAAG,CAAA;IAEhEoB,GAAG,CAACQ,OAAO,CAAC;MACVkD,KAAK,EAAEyD,SAAS;MAChBtD,MAAM;MACN8H,QAAQ;MAAE;MAAA,CAAAlN,aAAA,GAAA8B,CAAA,WAAAkL,aAAa;MAAA;MAAA,CAAAhN,aAAA,GAAA8B,CAAA,WAAI,IAAI;MAC/BsC,OAAO,EAAEgB,MAAM;MAAA;MAAA,CAAApF,aAAA,GAAA8B,CAAA,WACX,UAAU4G,SAAS,UAAU;MAAA;MAAA,CAAA1I,aAAA,GAAA8B,CAAA,WAC7B,UAAU4G,SAAS,kBAAkB;IAC3C,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOzE,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,uCAAuC3C,GAAG,CAACoL,MAAM,CAAChE,SAAS,IAAI,EAAEzE,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACtFoB,GAAG,CAACiD,WAAW,CAAC,8BAA8B,EAAEP,KAAK,CAACG,OAAO,CAAC;EAChE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACgM,IAAI,CAAC,gCAAgC,EAAE,OAAO7L,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAChE,IAAI;IACF,MAAMiN,WAAW;IAAA;IAAA,CAAApN,aAAA,GAAAG,CAAA,SAAGS,eAAe,CAACyM,cAAc,CAAC,CAAC;IAAC;IAAArN,aAAA,GAAAG,CAAA;IACrDS,eAAe,CAAC0M,UAAU,CAAC,CAAC;IAAC;IAAAtN,aAAA,GAAAG,CAAA;IAE7BoB,GAAG,CAACQ,OAAO,CAAC;MACVqC,OAAO,EAAE,iCAAiC;MAC1CmJ,iBAAiB,EAAEH,WAAW,CAACI,IAAI;MACnCC,cAAc,EAAEL,WAAW,CAAChD,OAAO,CAACnE;IACtC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACxDoB,GAAG,CAACiD,WAAW,CAAC,8BAA8B,EAAEP,KAAK,CAACG,OAAO,CAAC;EAChE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,wBAAwB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACvD,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC;IAAA;IAAA,CAAAN,aAAA,GAAAG,CAAA,SAAGC,OAAO,CAAC,mBAAmB,CAAC;IAC9C,MAAMsI,SAAS;IAAA;IAAA,CAAA1I,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAR,GAAG,CAAChB,KAAK,CAAC2E,KAAK;IAAA;IAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAI,OAAO;;IAE5C;IACA,MAAMqD,MAAM;IAAA;IAAA,CAAAnF,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACoI,SAAS,CAAC,CAAC;IAAC;IAAA1I,aAAA,GAAAG,CAAA;IAEhBoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBiD,KAAK,EAAEyD,SAAS;MAChBgF,YAAY,EAAEvI,MAAM,CAACR,IAAI,CAACsB,MAAM;MAChC0H,OAAO,EAAExI,MAAM,CAACR,IAAI;MACpBL,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACtDoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiD,KAAK;MAAE;MAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAAR,GAAG,CAAChB,KAAK,CAAC2E,KAAK;MAAA;MAAA,CAAAjF,aAAA,GAAA8B,CAAA,WAAI,OAAO;MACjCmC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC7C,IAAI;IACF,MAAMsB,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE5B;IACA,MAAMiM,WAAW;IAAA;IAAA,CAAA5N,aAAA,GAAAG,CAAA,SAAG;MAClB+B,OAAO,EAAE,yBAAyB;MAClCW,OAAO,EAAE,OAAO;MAChBb,MAAM,EAAE,aAAa;MACrBG,WAAW;MAAE;MAAA,CAAAnC,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACC,WAAW;MAAA;MAAA,CAAAtC,aAAA,GAAA8B,CAAA,WAAI,KAAK;MAC7C+L,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAI,WAAW;MAE9E;MACAiM,MAAM,EAAE;QACNxL,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC,CAAC;QACxBuL,QAAQ,EAAE5L,OAAO,CAAC4L,QAAQ;QAC1BC,WAAW,EAAE7L,OAAO,CAACS,OAAO;QAC5ByB,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACpC,CAAC;MAED;MACA2J,aAAa,EAAE;QACbvL,QAAQ,EAAE;UACRwL,QAAQ,EAAE/L,OAAO,CAACC,GAAG,CAACa,WAAW;UAAA;UAAA,CAAAlD,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;UACnEsM,SAAS,EAAEhM,OAAO,CAACC,GAAG,CAACW,aAAa;UAAA;UAAA,CAAAhD,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;UACtEuM,cAAc;UAAE;UAAA,CAAArO,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACiM,kBAAkB;UAAA;UAAA,CAAAtO,aAAA,GAAA8B,CAAA,WAAI,SAAS;UAC3DyM,OAAO;UAAE;UAAA,CAAAvO,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACmM,WAAW;UAAA;UAAA,CAAAxO,aAAA,GAAA8B,CAAA,WAAI,SAAS;QAC/C,CAAC;QACD2M,cAAc,EAAE;UACdC,eAAe,EAAEtM,OAAO,CAACC,GAAG,CAACsM,oBAAoB;UAAA;UAAA,CAAA3O,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;UACnF8M,aAAa,EAAExM,OAAO,CAACC,GAAG,CAACwM,iBAAiB;UAAA;UAAA,CAAA7O,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;QAChF,CAAC;QACDgN,OAAO,EAAE;UACPC,gBAAgB,EAAE3M,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;UAAA;UAAA,CAAAhP,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;QAC/F,CAAC;QACDmN,MAAM,EAAE;UACNC,YAAY;UAAE;UAAA,CAAAlP,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAAC8M,wBAAwB;UAAA;UAAA,CAAAnP,aAAA,GAAA8B,CAAA,WAAI,SAAS;UAC/DsN,eAAe;UAAE;UAAA,CAAApP,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACgN,2BAA2B;UAAA;UAAA,CAAArP,aAAA,GAAA8B,CAAA,WAAI,SAAS;UACrE+L,MAAM;UAAE;UAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACe,UAAU;UAAA;UAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,SAAS;QAC7C;MACF,CAAC;MAED;MACAwN,YAAY,EAAE;QACZ3M,QAAQ,EAAE,aAAa;QACvBlC,aAAa,EAAE,aAAa;QAC5B8O,cAAc,EAAE;MAClB;IACF,CAAC;;IAED;IAAA;IAAAvP,aAAA,GAAAG,CAAA;IACA,IAAI;MACF,MAAM0D,QAAQ;MAAA;MAAA,CAAA7D,aAAA,GAAAG,CAAA,SAAG,MAAME,WAAW,CAAC,CAAC;MAAC;MAAAL,aAAA,GAAAG,CAAA;MACrCyN,WAAW,CAAC0B,YAAY,CAAC3M,QAAQ,GAAGkB,QAAQ,CAAC7B,MAAM,KAAK,SAAS;MAAA;MAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,WAAW;IAC7F,CAAC,CAAC,OAAOmC,KAAK,EAAE;MAAA;MAAAjE,aAAA,GAAAG,CAAA;MACdyN,WAAW,CAAC0B,YAAY,CAAC3M,QAAQ,GAAG,QAAQ;IAC9C;IAAC;IAAA3C,aAAA,GAAAG,CAAA;IAED,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACF,MAAMM,aAAa,CAAC+O,iBAAiB,CAAC,CAAC;MAAC;MAAAxP,aAAA,GAAAG,CAAA;MACxCyN,WAAW,CAAC0B,YAAY,CAAC7O,aAAa,GAAG,SAAS;IACpD,CAAC,CAAC,OAAOwD,KAAK,EAAE;MAAA;MAAAjE,aAAA,GAAAG,CAAA;MACdyN,WAAW,CAAC0B,YAAY,CAAC7O,aAAa,GAAG,QAAQ;IACnD;IAAC;IAAAT,aAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMiO,SAAS;MAAA;MAAA,CAAApO,aAAA,GAAAG,CAAA,SAAGiC,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;MAAC;MAAAhP,aAAA,GAAAG,CAAA;MAC5D,IAAIiO,SAAS,EAAE;QAAA;QAAApO,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACbyN,WAAW,CAAC0B,YAAY,CAACC,cAAc,GAAG,SAAS;MACrD,CAAC,MAAM;QAAA;QAAAvP,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACLyN,WAAW,CAAC0B,YAAY,CAACC,cAAc,GAAG,gBAAgB;MAC5D;IACF,CAAC,CAAC,OAAOtL,KAAK,EAAE;MAAA;MAAAjE,aAAA,GAAAG,CAAA;MACdyN,WAAW,CAAC0B,YAAY,CAACC,cAAc,GAAG,QAAQ;IACpD;IAEA,MAAMrL,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IACxCyN,WAAW,CAAC6B,mBAAmB,GAAG,GAAGvL,QAAQ,IAAI;IAAC;IAAAlE,aAAA,GAAAG,CAAA;IAElDoB,GAAG,CAACQ,OAAO,CAAC6L,WAAW,CAAC;EAC1B,CAAC,CAAC,OAAO3J,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACrDoB,GAAG,CAACiD,WAAW,CAAC,oBAAoB,EAAE;MACpCP,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBlC,OAAO,EAAE,yBAAyB;MAClCoC,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAChD,IAAI;IACF,MAAMuP,eAAe;IAAA;IAAA,CAAA1P,aAAA,GAAAG,CAAA,SAAGC,OAAO,CAAC,0BAA0B,CAAC;IAC3D,MAAMuP,OAAO;IAAA;IAAA,CAAA3P,aAAA,GAAAG,CAAA,SAAGuP,eAAe,CAACE,UAAU,CAAC,CAAC;IAAC;IAAA5P,aAAA,GAAAG,CAAA;IAE7CoB,GAAG,CAACQ,OAAO,CAAC;MACV8N,aAAa,EAAEF,OAAO;MACtBxB,QAAQ,EAAE,gBAAgB;MAC1B7J,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACxDoB,GAAG,CAACiD,WAAW,CAAC,uBAAuB,EAAE;MACvCP,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpB+J,QAAQ,EAAE,gBAAgB;MAC1B7J,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC3C,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBG,WAAW,EAAE;QACX2N,QAAQ,EAAE1N,OAAO,CAACC,GAAG,CAACyN,QAAQ;QAC9BxN,WAAW,EAAEF,OAAO,CAACC,GAAG,CAACC,WAAW;QACpCc,UAAU,EAAEhB,OAAO,CAACC,GAAG,CAACe,UAAU;QAClC0K,iBAAiB,EAAE1L,OAAO,CAACC,GAAG,CAACyL,iBAAiB;QAChDqB,wBAAwB,EAAE/M,OAAO,CAACC,GAAG,CAAC8M,wBAAwB;QAC9DE,2BAA2B,EAAEjN,OAAO,CAACC,GAAG,CAACgN;MAC3C,CAAC;MACDU,eAAe,EAAE;QACf7M,WAAW,EAAEd,OAAO,CAACC,GAAG,CAACa,WAAW;QACpCF,aAAa,EAAEZ,OAAO,CAACC,GAAG,CAACW,aAAa;QAAA;QAAA,CAAAhD,aAAA,GAAA8B,CAAA,WAAG,KAAK;QAAA;QAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,SAAS;QAC5DwM,kBAAkB,EAAElM,OAAO,CAACC,GAAG,CAACiM,kBAAkB;QAClDE,WAAW,EAAEpM,OAAO,CAACC,GAAG,CAACmM;MAC3B,CAAC;MACDwB,WAAW,EAAE;QACXzN,MAAM,EAAEH,OAAO,CAACI,WAAW,CAAC,CAAC;QAC7BC,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC,CAAC;QACxBuL,QAAQ,EAAE5L,OAAO,CAAC4L,QAAQ;QAC1BiC,YAAY,EAAE7N,OAAO,CAACS;MACxB,CAAC;MACDyB,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACjDoB,GAAG,CAAC2O,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;EAAC;EAAAlQ,aAAA,GAAAG,CAAA;EAC/CoB,GAAG,CAAC2O,MAAM,CAAC,8BAA8B,EAAE,oBAAoB,CAAC;EAAC;EAAAlQ,aAAA,GAAAG,CAAA;EACjEoB,GAAG,CAAC2O,MAAM,CAAC,8BAA8B,EAAE,cAAc,CAAC;EAAC;EAAAlQ,aAAA,GAAAG,CAAA;EAE3DoB,GAAG,CAAC8C,IAAI,CAAC;IACPrC,MAAM,EAAE,SAAS;IACjBoC,OAAO,EAAE,sBAAsB;IAC/B+L,OAAO,EAAE7O,GAAG,CAAC6O,OAAO;IACpBC,MAAM,EAAE9O,GAAG,CAACD,GAAG,CAAC,QAAQ,CAAC;IACzBiD,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAAvE,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACgM,IAAI,CAAC,gBAAgB,EAAE,OAAO7L,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAChD,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,mCAAmC,CAAC;;IAEhD;IACA,MAAM8J,UAAU;IAAA;IAAA,CAAArQ,aAAA,GAAAG,CAAA,SAAG,MAAMmD,wBAAwB,CAAC,CAAC;;IAEnD;IAAA;IAAAtD,aAAA,GAAAG,CAAA;IACA,IAAI;MACF;MACA,MAAMwI,UAAU;MAAA;MAAA,CAAA3I,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC;AACrC;AACA;AACA;AACA,OAAO,CAAC;MAAC;MAAAN,aAAA,GAAAG,CAAA;MAEH,IAAImF,QAAQ,CAACqD,UAAU,CAAChE,IAAI,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,GAAG,CAAC,EAAE;QAAA;QAAApF,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAC3CgE,OAAO,CAACoC,GAAG,CAAC,kDAAkD,CAAC;;QAE/D;QAAA;QAAAvG,aAAA,GAAAG,CAAA;QACA,KAAK,MAAM,CAACuI,SAAS,EAAEG,SAAS,CAAC,IAAInD,MAAM,CAAC0E,OAAO,CAACiG,UAAU,CAAC1N,QAAQ,CAAC2D,MAAM,CAAC,EAAE;UAAA;UAAAtG,aAAA,GAAAG,CAAA;UAC/E,MAAMG,KAAK,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE,CACDoI,SAAS,EACTG,SAAS,CAACE,YAAY,EACtBF,SAAS,CAAC7G,MAAM,EAChB6G,SAAS,CAACyH,YAAY,EACtBzH,SAAS,CAAC0H,YAAY,EACtB1H,SAAS,CAAC2H,cAAc,EACxB3H,SAAS,CAAC4H,cAAc,EACxB5H,SAAS,CAAC5E,KAAK,CAChB,CAAC;QACJ;QAAC;QAAAjE,aAAA,GAAAG,CAAA;QAEDgE,OAAO,CAACoC,GAAG,CAAC,6CAA6C,CAAC;MAC5D,CAAC,MAAM;QAAA;QAAAvG,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACLgE,OAAO,CAACoC,GAAG,CAAC,0DAA0D,CAAC;MACzE;IACF,CAAC,CAAC,OAAOmK,UAAU,EAAE;MAAA;MAAA1Q,aAAA,GAAAG,CAAA;MACnBgE,OAAO,CAACwM,IAAI,CAAC,wDAAwD,EAAED,UAAU,CAACtM,OAAO,CAAC;MAC1F;IACF;IAAC;IAAApE,aAAA,GAAAG,CAAA;IAEDoB,GAAG,CAAC8C,IAAI,CAAC;MACPrC,MAAM,EAAE,SAAS;MACjBoC,OAAO,EAAE,6CAA6C;MACtD0E,IAAI,EAAEuH,UAAU;MAChB/L,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC1DoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBrC,MAAM,EAAE,OAAO;MACfiC,KAAK,EAAE,gCAAgC;MACvC2M,OAAO,EAAE3M,KAAK,CAACG,OAAO;MACtBE,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,eAAejB,wBAAwBA,CAAA,EAAG;EAAA;EAAAtD,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACxC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,gDAAgD,CAAC;IAC7D,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE5B;IACA,MAAMkP,WAAW;IAAA;IAAA,CAAA7Q,aAAA,GAAAG,CAAA,SAAG,MAAME,WAAW,CAAC,CAAC;IAAC;IAAAL,aAAA,GAAAG,CAAA;IACxC,IAAI0Q,WAAW,CAAC7O,MAAM,KAAK,SAAS,EAAE;MAAA;MAAAhC,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACpC,OAAO;QACL6B,MAAM,EAAE,cAAc;QACtBiC,KAAK,EAAE4M,WAAW,CAAC5M,KAAK;QACxBtB,QAAQ,EAAE;UACRX,MAAM,EAAE,OAAO;UACfsE,MAAM,EAAE,CAAC,CAAC;UACVkB,OAAO,EAAE;YACPsJ,YAAY,EAAE,CAAC;YACfC,cAAc,EAAE,CAAC;YACjBC,YAAY,EAAE,CAAC;YACfC,YAAY,EAAE,CAAC;YACfC,YAAY,EAAE,CAAC;YACfC,cAAc,EAAE,CAAC;YACjBC,aAAa,EAAE,CAAC;YAChBC,kBAAkB,EAAE;UACtB;QACF,CAAC;QACD/M,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACpC,CAAC;IACH,CAAC;IAAA;IAAA;MAAAvE,aAAA,GAAA8B,CAAA;IAAA;;IAED;IACA,MAAMwP,mBAAmB;IAAA;IAAA,CAAAtR,aAAA,GAAAG,CAAA,SAAG;MAC1B,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,aAAa,CAAC;MACtD,QAAQ,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,CAAC;MAC3E,YAAY,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;MAClG,YAAY,EAAE,CAAC,eAAe,EAAE,kBAAkB,EAAE,WAAW,EAAE,aAAa,CAAC;MAC/E,SAAS,EAAE,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;MAClD,UAAU,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,kBAAkB,CAAC;MAC1E,WAAW,EAAE,CAAC,kBAAkB,EAAE,OAAO,EAAE,gBAAgB,CAAC;MAC5D,SAAS,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,cAAc,EAAE,kBAAkB,CAAC;MACpF,WAAW,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,EAAE,eAAe,CAAC;MACxE,QAAQ,EAAE,CAAC,eAAe,EAAE,cAAc;IAC5C,CAAC;IAED,MAAMoR,cAAc;IAAA;IAAA,CAAAvR,aAAA,GAAAG,CAAA,SAAG,CACrB,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,eAAe,EAC1D,oBAAoB,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CACvE;;IAED;IACA,SAASqR,eAAeA,CAAC9I,SAAS,EAAE;MAAA;MAAA1I,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAClC,KAAK,MAAM,CAACsR,QAAQ,EAAEnL,MAAM,CAAC,IAAIZ,MAAM,CAAC0E,OAAO,CAACkH,mBAAmB,CAAC,EAAE;QAAA;QAAAtR,aAAA,GAAAG,CAAA;QACpE,IAAImG,MAAM,CAACpB,QAAQ,CAACwD,SAAS,CAAC,EAAE;UAAA;UAAA1I,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UAC9B,OAAOsR,QAAQ;QACjB,CAAC;QAAA;QAAA;UAAAzR,aAAA,GAAA8B,CAAA;QAAA;MACH;MAAC;MAAA9B,aAAA,GAAAG,CAAA;MACD,OAAO,OAAO;IAChB;;IAEA;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACAgE,OAAO,CAACoC,GAAG,CAAC,wDAAwD,CAAC;IACrE,MAAMmL,UAAU;IAAA;IAAA,CAAA1R,aAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMsE,YAAY;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAACoR,UAAU,EAAE,EAAE,EAAE,KAAK,CAAC;IACvD,MAAMC,SAAS;IAAA;IAAA,CAAA3R,aAAA,GAAAG,CAAA,SAAGsE,YAAY,CAACE,IAAI;IAAC;IAAA3E,aAAA,GAAAG,CAAA;IACpCgE,OAAO,CAACoC,GAAG,CAAC,YAAYoL,SAAS,CAAC1L,MAAM,qBAAqB,CAAC;;IAE9D;IACA,MAAM2L,WAAW;IAAA;IAAA,CAAA5R,aAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IACtB,IAAI0R,YAAY;IAAA;IAAA,CAAA7R,aAAA,GAAAG,CAAA,SAAG,CAAC;IACpB,IAAI2R,aAAa;IAAA;IAAA,CAAA9R,aAAA,GAAAG,CAAA,SAAG,CAAC;IACrB,IAAI4R,WAAW;IAAA;IAAA,CAAA/R,aAAA,GAAAG,CAAA,SAAG,CAAC;IACnB,IAAI6R,WAAW;IAAA;IAAA,CAAAhS,aAAA,GAAAG,CAAA,SAAG,CAAC;IACnB,IAAI8R,WAAW;IAAA;IAAA,CAAAjS,aAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEpBgE,OAAO,CAACoC,GAAG,CAAC,oCAAoC,CAAC;IAAC;IAAAvG,aAAA,GAAAG,CAAA;IAClD,KAAK,MAAM8E,KAAK,IAAI0M,SAAS,EAAE;MAC7B,MAAMjJ,SAAS;MAAA;MAAA,CAAA1I,aAAA,GAAAG,CAAA,SAAG8E,KAAK,CAACH,UAAU;MAClC,MAAMoN,aAAa;MAAA;MAAA,CAAAlS,aAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAwD,QAAQ,CAACL,KAAK,CAACkN,cAAc,CAAC;MAAA;MAAA,CAAAnS,aAAA,GAAA8B,CAAA,WAAI,CAAC;MAAC;MAAA9B,aAAA,GAAAG,CAAA;MAC1D0R,YAAY,IAAIK,aAAa;;MAE7B;MACA,MAAME,WAAW;MAAA;MAAA,CAAApS,aAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAmD,KAAK,CAACoN,YAAY;MAAA;MAAA,CAAArS,aAAA,GAAA8B,CAAA,WAAImD,KAAK,CAACqN,gBAAgB;MAAA;MAAA,CAAAtS,aAAA,GAAA8B,CAAA,WAAImD,KAAK,CAACsN,WAAW;MAAA;MAAA,CAAAvS,aAAA,GAAA8B,CAAA,WAAImD,KAAK,CAACuN,eAAe;;MAE9G;MACA,IAAIxQ,MAAM;MAAA;MAAA,CAAAhC,aAAA,GAAAG,CAAA,SAAG,SAAS;MACtB,IAAIsS,OAAO;MAAA;MAAA,CAAAzS,aAAA,GAAAG,CAAA,SAAG,KAAK;MAAC;MAAAH,aAAA,GAAAG,CAAA;MAEpB,IAAI+R,aAAa,KAAK,CAAC,EAAE;QAAA;QAAAlS,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACvB6B,MAAM,GAAG,OAAO;QAAC;QAAAhC,aAAA,GAAAG,CAAA;QACjB8R,WAAW,EAAE;MACf,CAAC,MAAM;QAAA;QAAAjS,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAAA,IAAIiS,WAAW,EAAE;UAAA;UAAApS,aAAA,GAAA8B,CAAA;UACtB,MAAM4Q,gBAAgB;UAAA;UAAA,CAAA1S,aAAA,GAAAG,CAAA,SAAG,CAAC,IAAIuB,IAAI,CAAC,CAAC,GAAG,IAAIA,IAAI,CAAC0Q,WAAW,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;UAAC;UAAApS,aAAA,GAAAG,CAAA;UACjF,IAAIuS,gBAAgB,GAAG,EAAE,EAAE;YAAA;YAAA1S,aAAA,GAAA8B,CAAA;YAAA9B,aAAA,GAAAG,CAAA;YAAE;YAC3B6B,MAAM,GAAG,OAAO;YAAC;YAAAhC,aAAA,GAAAG,CAAA;YACjBsS,OAAO,GAAG,IAAI;YAAC;YAAAzS,aAAA,GAAAG,CAAA;YACf4R,WAAW,EAAE;UACf,CAAC,MAAM;YAAA;YAAA/R,aAAA,GAAA8B,CAAA;YAAA9B,aAAA,GAAAG,CAAA;YACL2R,aAAa,EAAE;UACjB;QACF,CAAC,MAAM;UAAA;UAAA9R,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UACL;UACA2R,aAAa,EAAE;QACjB;MAAA;MAAC;MAAA9R,aAAA,GAAAG,CAAA;MAEDyR,WAAW,CAAClJ,SAAS,CAAC,GAAG;QACvB1G,MAAM,EAAEA,MAAM;QACd+G,YAAY,EAAEmJ,aAAa;QAC3B5B,YAAY,EAAE8B,WAAW;QACzB7B,YAAY,EAAE,IAAI7O,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;QACtCkM,cAAc,EAAEe,eAAe,CAAC9I,SAAS,CAAC;QAC1C8H,cAAc,EAAEe,cAAc,CAACrM,QAAQ,CAACwD,SAAS,CAAC;QAClDiK,QAAQ,EAAEF,OAAO;QACjBG,kBAAkB,EAAE,CAAC;QACrB3O,KAAK,EAAE,IAAI;QACXvB,IAAI,EAAE;MACR,CAAC;IACH;;IAEA;IACA,MAAM8E,OAAO;IAAA;IAAA,CAAAxH,aAAA,GAAAG,CAAA,SAAG;MACd2Q,YAAY,EAAEa,SAAS,CAAC1L,MAAM;MAC9B8K,cAAc,EAAEe,aAAa;MAC7Bd,YAAY,EAAEe,WAAW;MACzBd,YAAY,EAAEe,WAAW;MACzBd,YAAY,EAAEe,WAAW;MACzBd,cAAc,EAAE,CAAC;MAAE;MACnBC,aAAa,EAAES,YAAY;MAC3BR,kBAAkB,EAAE,CAAC,CAAC;IACxB,CAAC;IAED,MAAMnN,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IACxCgE,OAAO,CAACoC,GAAG,CAAC,sDAAsDrC,QAAQ,IAAI,CAAC;IAAC;IAAAlE,aAAA,GAAAG,CAAA;IAChFgE,OAAO,CAACoC,GAAG,CAAC,eAAeiB,OAAO,CAACsJ,YAAY,YAAYtJ,OAAO,CAACuJ,cAAc,aAAavJ,OAAO,CAAC4J,aAAa,gBAAgB,CAAC;IAAC;IAAApR,aAAA,GAAAG,CAAA;IAErI,OAAO;MACL6B,MAAM,EAAE,WAAW;MACnBW,QAAQ,EAAE;QACRX,MAAM,EAAE,WAAW;QACnB6Q,WAAW,EAAEhC,WAAW,CAACvM,SAAS;QAClCwO,eAAe,EAAEjC,WAAW,CAAChO,OAAO;QACpCyD,MAAM,EAAEsL,WAAW;QACnBpK,OAAO,EAAEA;MACX,CAAC;MACDlD,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC,CAAC;MACnC7B,IAAI,EAAE,YAAYiP,SAAS,CAAC1L,MAAM,uBAAuB/B,QAAQ;IACnE,CAAC;EAEH,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACtE,OAAO;MACL6B,MAAM,EAAE,OAAO;MACfiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBzB,QAAQ,EAAE;QACRX,MAAM,EAAE,OAAO;QACfsE,MAAM,EAAE,CAAC,CAAC;QACVkB,OAAO,EAAE;UACPsJ,YAAY,EAAE,CAAC;UACfC,cAAc,EAAE,CAAC;UACjBC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE,CAAC;UACfC,YAAY,EAAE,CAAC;UACfC,cAAc,EAAE,CAAC;UACjBC,aAAa,EAAE,CAAC;UAChBC,kBAAkB,EAAE;QACtB;MACF,CAAC;MACD/M,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC;EACH;AACF;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAekC,mBAAmBA,CAAA,EAAG;EAAA;EAAAzG,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACnC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,gCAAgC,CAAC;IAC7C,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE5B;IACA,MAAMkC,QAAQ;IAAA;IAAA,CAAA7D,aAAA,GAAAG,CAAA,SAAG,MAAMqD,OAAO,CAACM,IAAI,CAAC,CAClCzD,WAAW,CAAC,CAAC,EACb,IAAImD,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KACpB;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAwD,UAAU,CAAC,MAAM;QAAA;QAAA3D,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAuD,MAAM,CAAC,IAAIE,KAAK,CAAC,+BAA+B,CAAC,CAAC;MAAD,CAAC,EAAE,IAAI,CAAC;IAAD,CAC3E,CAAC,CACF,CAAC;IAEF,MAAMM,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAExC,IAAI0D,QAAQ,CAAC7B,MAAM,KAAK,SAAS,EAAE;MAAA;MAAAhC,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACjC,OAAO;QACL6B,MAAM,EAAE,SAAS;QACjBoC,OAAO,EAAE,sCAAsC;QAC/C2O,YAAY,EAAE,GAAG7O,QAAQ,IAAI;QAC7BrB,OAAO;QAAE;QAAA,CAAA7C,aAAA,GAAA8B,CAAA,WAAA+B,QAAQ,CAAChB,OAAO;QAAA;QAAA,CAAA7C,aAAA,GAAA8B,CAAA,WAAI,SAAS;QACtCkR,UAAU,EAAE;UACVC,IAAI,EAAE7Q,OAAO,CAACC,GAAG,CAACa,WAAW;UAAA;UAAA,CAAAlD,aAAA,GAAA8B,CAAA,WAAG,YAAY;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,gBAAgB;UAC/DoR,IAAI,EAAE,QAAQ;UACdC,GAAG,EAAE;QACP;MACF,CAAC;IACH,CAAC,MAAM;MAAA;MAAAnT,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACL,OAAO;QACL6B,MAAM,EAAE,QAAQ;QAChBoC,OAAO,EAAE,4BAA4B;QACrCH,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrB8O,YAAY,EAAE,GAAG7O,QAAQ;MAC3B,CAAC;IACH;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACxD,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBoC,OAAO,EAAE,8BAA8B;MACvCH,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBgP,OAAO,EAAEnP,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,SAAS;IAC3C,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,eAAeyB,oBAAoBA,CAAA,EAAG;EAAA;EAAA3G,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACpC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE5B;IACA,IAAI0R,eAAe;IAAA;IAAA,CAAArT,aAAA,GAAAG,CAAA,SAAG,IAAI;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAE3B,IAAI;MACF;MACA,MAAMmT,gBAAgB;MAAA;MAAA,CAAAtT,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC;AAC3C;AACA;AACA;AACA;AACA,OAAO,CAAC;MAAC;MAAAN,aAAA,GAAAG,CAAA;MAEH,IAAImT,gBAAgB,CAAC3O,IAAI,CAACsB,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAjG,aAAA,GAAA8B,CAAA;QACpC,MAAMyR,GAAG;QAAA;QAAA,CAAAvT,aAAA,GAAAG,CAAA,SAAGmT,gBAAgB,CAAC3O,IAAI,CAAC,CAAC,CAAC;;QAEpC;QACA,MAAM6O,YAAY;QAAA;QAAA,CAAAxT,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACgT,aAAa,CAACF,GAAG,CAACG,iBAAiB,CAAC;QAC7E,MAAMC,eAAe;QAAA;QAAA,CAAA3T,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACgT,aAAa,CAACF,GAAG,CAACK,oBAAoB,CAAC;QAAC;QAAA5T,aAAA,GAAAG,CAAA;QAEpFkT,eAAe,GAAG;UAChBQ,MAAM,EAAEL,YAAY;UACpBM,SAAS,EAAEH,eAAe;UAC1BI,SAAS,EAAER,GAAG,CAACS;QACjB,CAAC;MACH,CAAC;MAAA;MAAA;QAAAhU,aAAA,GAAA8B,CAAA;MAAA;IACH,CAAC,CAAC,OAAOmS,OAAO,EAAE;MAAA;MAAAjU,aAAA,GAAAG,CAAA;MAChBgE,OAAO,CAACoC,GAAG,CAAC,oDAAoD,EAAE0N,OAAO,CAAC7P,OAAO,CAAC;IACpF;IAAC;IAAApE,aAAA,GAAAG,CAAA;IAED,IAAIkT,eAAe,EAAE;MAAA;MAAArT,aAAA,GAAA8B,CAAA;MACnB;MACA,MAAMsH,MAAM;MAAA;MAAA,CAAApJ,aAAA,GAAAG,CAAA,SAAG,IAAIO,aAAa,CAC9B2S,eAAe,CAACQ,MAAM,EACtBR,eAAe,CAACS,SAAS,EACzBT,eAAe,CAACU,SAClB,CAAC;;MAED;MACA,MAAMG,WAAW;MAAA;MAAA,CAAAlU,aAAA,GAAAG,CAAA,SAAG,MAAMqD,OAAO,CAACM,IAAI,CAAC,CACrCsF,MAAM,CAAC+K,UAAU,CAAC,CAAC,EACnB,IAAI3Q,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KACpB;QAAA;QAAA1D,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAwD,UAAU,CAAC,MAAM;UAAA;UAAA3D,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAuD,MAAM,CAAC,IAAIE,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAAD,CAAC,EAAE,KAAK,CAAC;MAAD,CACjE,CAAC,CACF,CAAC;MAEF,MAAMM,QAAQ;MAAA;MAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAAC;MAAAzB,aAAA,GAAAG,CAAA;MAExC,OAAO;QACL6B,MAAM,EAAE,SAAS;QACjBoC,OAAO,EAAE,yCAAyC;QAClD2O,YAAY,EAAE,GAAG7O,QAAQ,IAAI;QAC7B/B,WAAW,EAAEkR,eAAe,CAACU,SAAS;QAAA;QAAA,CAAA/T,aAAA,GAAA8B,CAAA,WAAG,SAAS;QAAA;QAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,MAAM;QAC3DsS,OAAO,EAAE;UACPpS,MAAM;UAAE;UAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAAoS,WAAW,EAAElS,MAAM;UAAA;UAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAI,SAAS;UACxCuS,cAAc;UAAE;UAAA,CAAArU,aAAA,GAAA8B,CAAA,WAAAoS,WAAW,EAAEI,eAAe;UAAA;UAAA,CAAAtU,aAAA,GAAA8B,CAAA,WAAI,KAAK;QACvD,CAAC;QACDyS,QAAQ,EAAE;UACRC,OAAO,EAAE,IAAI;UACbC,UAAU,EAAE,IAAI;UAChBC,SAAS,EAAE;QACb;MACF,CAAC;IACH,CAAC,MAAM;MAAA;MAAA1U,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACL;MACA,OAAO;QACL6B,MAAM,EAAE,UAAU;QAClBoC,OAAO,EAAE,0CAA0C;QACnD2O,YAAY,EAAE,KAAK;QACnB5Q,WAAW,EAAE,SAAS;QACtBoS,QAAQ,EAAE;UACRC,OAAO,EAAE,KAAK;UACdC,UAAU,EAAE,KAAK;UACjBC,SAAS,EAAE;QACb,CAAC;QACDhS,IAAI,EAAE;MACR,CAAC;IACH;EACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC1D,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBoC,OAAO,EAAE,gCAAgC;MACzCH,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBgP,OAAO,EAAEnP,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,SAAS,CAAC;MAC1CyP,uBAAuB,EAAE1Q,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,iBAAiB;IACnE,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,eAAe2B,4BAA4BA,CAAA,EAAG;EAAA;EAAA7G,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC5C,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,2CAA2C,CAAC;IACxD,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,MAAM4N,cAAc;IAAA;IAAA,CAAAvP,aAAA,GAAAG,CAAA,SAAG,IAAIU,oBAAoB,CAAC;MAC9CgN,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;IAChF,CAAC,CAAC;;IAEF;IACA,MAAM8S,aAAa;IAAA;IAAA,CAAA5U,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACW,aAAa;IAAA;IAAA,CAAAhD,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;IAAC;IAAAhP,aAAA,GAAAG,CAAA;IAE7F,IAAI,CAACyU,aAAa,EAAE;MAAA;MAAA5U,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAClB,OAAO;QACL6B,MAAM,EAAE,UAAU;QAClBoC,OAAO,EAAE,oCAAoC;QAC7CyQ,UAAU,EAAE,KAAK;QACjBhH,MAAM;QAAE;QAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;QAAA;QAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;QAAA;QAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;MAChF,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,aAAA,GAAA8B,CAAA;IAAA;;IAED;IAAA9B,aAAA,GAAAG,CAAA;IACA,MAAMqD,OAAO,CAACM,IAAI,CAAC,CACjByL,cAAc,CAACuF,IAAI,CAAC,IAAIhU,qBAAqB,CAAC;MAAEiU,QAAQ,EAAEH;IAAc,CAAC,CAAC,CAAC,EAC3E,IAAIpR,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KACpB;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAwD,UAAU,CAAC,MAAM;QAAA;QAAA3D,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAuD,MAAM,CAAC,IAAIE,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAAD,CAAC,EAAE,IAAI,CAAC;IAAD,CACrE,CAAC,CACF,CAAC;IAEF,MAAMM,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAExC,OAAO;MACL6B,MAAM,EAAE,SAAS;MACjBoC,OAAO,EAAE,mCAAmC;MAC5C2O,YAAY,EAAE,GAAG7O,QAAQ,IAAI;MAC7B2Q,UAAU,EAAE,IAAI;MAChBhH,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;MAC9EwG,OAAO,EAAE;QACP0M,QAAQ,EAAE,CAAC,CAAC5S,OAAO,CAACC,GAAG,CAACW,aAAa;QACrCiS,YAAY,EAAE,CAAC,CAAC7S,OAAO,CAACC,GAAG,CAAC2M;MAC9B;IACF,CAAC;EACH,CAAC,CAAC,OAAO/K,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACnE,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBoC,OAAO,EAAE,yCAAyC;MAClDH,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBgP,OAAO,EAAEnP,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,SAAS,CAAC;MAC1C2I,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;IAChF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,eAAeiF,iBAAiBA,CAAA,EAAG;EAAA;EAAA/G,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACjC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,+BAA+B,CAAC;IAAC;IAAAvG,aAAA,GAAAG,CAAA;IAE7C,IAAI,CAACiC,OAAO,CAACC,GAAG,CAACa,WAAW,EAAE;MAAA;MAAAlD,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC5B,OAAO;QACL6B,MAAM,EAAE,UAAU;QAClBoC,OAAO,EAAE,4BAA4B;QACrCyQ,UAAU,EAAE;MACd,CAAC;IACH,CAAC;IAAA;IAAA;MAAA7U,aAAA,GAAA8B,CAAA;IAAA;;IAED;IACA;IACA,MAAM+B,QAAQ;IAAA;IAAA,CAAA7D,aAAA,GAAAG,CAAA,SAAG,MAAMsG,mBAAmB,CAAC,CAAC;IAAC;IAAAzG,aAAA,GAAAG,CAAA;IAE7C,OAAO;MACL6B,MAAM,EAAE6B,QAAQ,CAAC7B,MAAM;MACvBoC,OAAO,EAAEP,QAAQ,CAAC7B,MAAM,KAAK,SAAS;MAAA;MAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAG,gCAAgC;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,2BAA2B;MACvGiR,YAAY,EAAElP,QAAQ,CAACkP,YAAY;MACnC8B,UAAU,EAAE,IAAI;MAChB1G,QAAQ,EAAE,YAAY;MACtBgF,GAAG,EAAE,UAAU;MACf+B,OAAO,EAAE,SAAS;MAAE;MACpBC,OAAO,EAAE,SAAS,CAAE;IACtB,CAAC;EACH,CAAC,CAAC,OAAOlR,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACvD,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBoC,OAAO,EAAE,6BAA6B;MACtCH,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,eAAe6C,qBAAqBA,CAAA,EAAG;EAAA;EAAAjH,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACrC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,mCAAmC,CAAC;IAChD,MAAM9E,SAAS;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,MAAMyT,UAAU;IAAA;IAAA,CAAApV,aAAA,GAAAG,CAAA,SAAGiC,OAAO,CAACC,GAAG,CAACsM,oBAAoB;IACnD,MAAM0G,QAAQ;IAAA;IAAA,CAAArV,aAAA,GAAAG,CAAA,SAAGiC,OAAO,CAACC,GAAG,CAACwM,iBAAiB;IAAC;IAAA7O,aAAA,GAAAG,CAAA;IAE/C;IAAI;IAAA,CAAAH,aAAA,GAAA8B,CAAA,YAACsT,UAAU;IAAA;IAAA,CAAApV,aAAA,GAAA8B,CAAA,WAAI,CAACuT,QAAQ,GAAE;MAAA;MAAArV,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC5B,OAAO;QACL6B,MAAM,EAAE,UAAU;QAClBoC,OAAO,EAAE,oCAAoC;QAC7CyQ,UAAU,EAAE,KAAK;QACjBhH,MAAM;QAAE;QAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;QAAA;QAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;QAAA;QAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;QAC9EwT,QAAQ,EAAE,CAAC,CAACF,UAAU;QACtBC,QAAQ,EAAE,CAAC,CAACA;MACd,CAAC;IACH,CAAC;IAAA;IAAA;MAAArV,aAAA,GAAA8B,CAAA;IAAA;IAED,MAAMyT,UAAU;IAAA;IAAA,CAAAvV,aAAA,GAAAG,CAAA,SAAG,IAAIY,6BAA6B,CAAC;MACnD8M,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;IAChF,CAAC,CAAC;;IAEF;IAAA;IAAA9B,aAAA,GAAAG,CAAA;IACA,MAAMqD,OAAO,CAACM,IAAI,CAAC,CACjByR,UAAU,CAACT,IAAI,CAAC,IAAI9T,uBAAuB,CAAC;MAAEwU,UAAU,EAAEJ;IAAW,CAAC,CAAC,CAAC,EACxE,IAAI5R,OAAO,CAAC,CAACC,CAAC,EAAEC,MAAM,KACpB;MAAA;MAAA1D,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAwD,UAAU,CAAC,MAAM;QAAA;QAAA3D,aAAA,GAAAwB,CAAA;QAAAxB,aAAA,GAAAG,CAAA;QAAA,OAAAuD,MAAM,CAAC,IAAIE,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAAD,CAAC,EAAE,IAAI,CAAC;IAAD,CAC7D,CAAC,CACF,CAAC;IAEF,MAAMM,QAAQ;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAExC,OAAO;MACL6B,MAAM,EAAE,SAAS;MACjBoC,OAAO,EAAE,2BAA2B;MACpC2O,YAAY,EAAE,GAAG7O,QAAQ,IAAI;MAC7B2Q,UAAU,EAAE,IAAI;MAChBhH,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;MAC9EwT,QAAQ,EAAE,CAAC,CAACF,UAAU;MACtBC,QAAQ,EAAE,CAAC,CAACA,QAAQ;MACpBd,QAAQ,EAAE;QACR9F,cAAc,EAAE,IAAI;QACpBgH,cAAc,EAAE,IAAI;QACpBC,GAAG,EAAE,SAAS,CAAC;MACjB;IACF,CAAC;EACH,CAAC,CAAC,OAAOzR,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAC3D,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBoC,OAAO,EAAE,iCAAiC;MAC1CH,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBgP,OAAO,EAAEnP,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,SAAS,CAAC;MAC1C2I,MAAM;MAAE;MAAA,CAAA7N,aAAA,GAAA8B,CAAA,WAAAM,OAAO,CAACC,GAAG,CAACyL,iBAAiB;MAAA;MAAA,CAAA9N,aAAA,GAAA8B,CAAA,WAAIM,OAAO,CAACC,GAAG,CAACe,UAAU;MAAA;MAAA,CAAApD,aAAA,GAAA8B,CAAA,WAAI,WAAW;IAChF,CAAC;EACH;AACF;;AAEA;AACA,eAAekG,wBAAwBA,CAAA,EAAG;EAAA;EAAAhI,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACxC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACF;IACA,MAAMM,aAAa,CAAC+O,iBAAiB,CAAC,CAAC;;IAEvC;IACA,MAAMmG,UAAU;IAAA;IAAA,CAAA3V,aAAA,GAAAG,CAAA,SAAG,MAAMyV,2BAA2B,CAAC,CAAC;IAAC;IAAA5V,aAAA,GAAAG,CAAA;IAEvD,OAAO;MACL6B,MAAM;MAAE;MAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAArB,aAAa,CAACoV,SAAS;MAAA;MAAA,CAAA7V,aAAA,GAAA8B,CAAA,WAAI6T,UAAU,CAAC5T,OAAO;MAAA;MAAA,CAAA/B,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC9EgU,OAAO,EAAErV,aAAa,CAACoV,SAAS;MAChCzR,OAAO,EAAE,4CAA4C;MACrDmQ,QAAQ,EAAE;QACRwB,UAAU,EAAEtV,aAAa,CAACoV,SAAS;QACnCtG,cAAc,EAAE,CAAC,CAACnN,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;QAC3DgH,cAAc,EAAEL,UAAU,CAAC5T;MAC7B,CAAC;MACDiU,cAAc,EAAEL;IAClB,CAAC;EACH,CAAC,CAAC,OAAO1R,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACd,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChB8T,OAAO,EAAE,KAAK;MACd7R,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBA,OAAO,EAAE,kCAAkC;MAC3CmQ,QAAQ,EAAE;QACRwB,UAAU,EAAE,KAAK;QACjBxG,cAAc,EAAE,CAAC,CAACnN,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;QAC3DgH,cAAc,EAAE;MAClB;IACF,CAAC;EACH;AACF;AAEA,eAAe9N,2BAA2BA,CAAA,EAAG;EAAA;EAAAlI,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC3C,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IAAA;IAAAvG,aAAA,GAAAG,CAAA;IACA,MAAMc,gBAAgB,CAACgV,UAAU,CAAC,CAAC;;IAEnC;IACA,MAAMC,UAAU;IAAA;IAAA,CAAAlW,aAAA,GAAAG,CAAA,SAAG,MAAMc,gBAAgB,CAACkV,aAAa,CAAC,CAAC;;IAEzD;IACA,MAAMC,aAAa;IAAA;IAAA,CAAApW,aAAA,GAAAG,CAAA,SAAG,MAAMkW,oBAAoB,CAAC,CAAC;IAAC;IAAArW,aAAA,GAAAG,CAAA;IAEnD,OAAO;MACL6B,MAAM;MAAE;MAAA,CAAAhC,aAAA,GAAA8B,CAAA,WAAAoU,UAAU,CAACI,SAAS;MAAA;MAAA,CAAAtW,aAAA,GAAA8B,CAAA,WAAIsU,aAAa,CAACrU,OAAO;MAAA;MAAA,CAAA/B,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC9EwU,SAAS,EAAEJ,UAAU,CAACI,SAAS;MAC/BC,MAAM,EAAEL,UAAU,CAACK,MAAM;MACzBC,UAAU,EAAEN,UAAU,CAACM,UAAU;MACjCpS,OAAO,EAAE8R,UAAU,CAACI,SAAS;MAAA;MAAA,CAAAtW,aAAA,GAAA8B,CAAA,WAAG,iCAAiC;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,qCAAqC;MACzG2U,OAAO,EAAEL,aAAa;MACtB7B,QAAQ,EAAE;QACRmC,eAAe,EAAEN,aAAa,CAACO,cAAc;QAC7CC,eAAe,EAAER,aAAa,CAACS,UAAU;QACzCC,cAAc;QAAE;QAAA,CAAA9W,aAAA,GAAA8B,CAAA,WAAAoU,UAAU,CAACM,UAAU,EAAEO,QAAQ;QAAA;QAAA,CAAA/W,aAAA,GAAA8B,CAAA,WAAI,SAAS;MAC9D;IACF,CAAC;EACH,CAAC,CAAC,OAAOmC,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAClE,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBsU,SAAS,EAAE,KAAK;MAChBrS,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBA,OAAO,EAAE,wCAAwC;MACjDmQ,QAAQ,EAAE;QACRmC,eAAe,EAAE,KAAK;QACtBE,eAAe,EAAE,KAAK;QACtBE,cAAc,EAAE;MAClB;IACF,CAAC;EACH;AACF;AAEA,eAAe1O,4BAA4BA,CAAA,EAAG;EAAA;EAAApI,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC5C,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAMyQ,aAAa;IAAA;IAAA,CAAAhX,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACwW,gBAAgB,CAAC,CAAC;IAAC;IAAAjX,aAAA,GAAAG,CAAA;IAE7D,OAAO;MACL6B,MAAM,EAAEgV,aAAa,CAACE,OAAO,KAAK,SAAS;MAAA;MAAA,CAAAlX,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MACpEiU,UAAU,EAAEiB,aAAa,CAAC7O,iBAAiB;MAC3CgP,GAAG,EAAEH,aAAa,CAACI,UAAU;MAC7BF,OAAO,EAAEF,aAAa,CAACE,OAAO;MAC9B9S,OAAO,EAAE,yBAAyB4S,aAAa,CAACE,OAAO,EAAE;MACzD3C,QAAQ,EAAE;QACR8C,mBAAmB,EAAEL,aAAa,CAAC7O,iBAAiB,CAACmP,SAAS;QAC9DC,YAAY,EAAEP,aAAa,CAACI,UAAU,CAACd,SAAS;QAChDkB,YAAY,EAAER,aAAa,CAAC7O,iBAAiB,CAACqP;MAChD;IACF,CAAC;EACH,CAAC,CAAC,OAAOvT,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACdgE,OAAO,CAACF,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAClE,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBA,OAAO,EAAE,wCAAwC;MACjDmQ,QAAQ,EAAE;QACR8C,mBAAmB,EAAE,KAAK;QAC1BE,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE;MAChB;IACF,CAAC;EACH;AACF;AAEA,eAAenP,6BAA6BA,CAAA,EAAG;EAAA;EAAArI,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC7C,IAAI;IACF,MAAMsX,cAAc;IAAA;IAAA,CAAAzX,aAAA,GAAAG,CAAA,SAAG,CACrB,eAAe,EACf,oBAAoB,EACpB,oBAAoB,EACpB,iCAAiC,CAClC;IAED,MAAMuX,WAAW;IAAA;IAAA,CAAA1X,aAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEvB,KAAK,MAAM8E,KAAK,IAAIwS,cAAc,EAAE;MAAA;MAAAzX,aAAA,GAAAG,CAAA;MAClC,IAAI;QACF,MAAMgF,MAAM;QAAA;QAAA,CAAAnF,aAAA,GAAAG,CAAA,SAAG,MAAMG,KAAK,CAAC,iCAAiC2E,KAAK,UAAU,CAAC;QAAC;QAAAjF,aAAA,GAAAG,CAAA;QAC7EuX,WAAW,CAACzS,KAAK,CAAC,GAAG;UACnBG,MAAM,EAAE,IAAI;UACZpD,MAAM,EAAE,SAAS;UACjBqD,KAAK,EAAEC,QAAQ,CAACH,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC,CAACU,KAAK;QACtC,CAAC;MACH,CAAC,CAAC,OAAOpB,KAAK,EAAE;QAAA;QAAAjE,aAAA,GAAAG,CAAA;QACd,IAAI8D,KAAK,CAACG,OAAO,CAACc,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UAAA;UAAAlF,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UAC5CuX,WAAW,CAACzS,KAAK,CAAC,GAAG;YACnBG,MAAM,EAAE,KAAK;YACbpD,MAAM,EAAE,SAAS;YACjBiC,KAAK,EAAE;UACT,CAAC;QACH,CAAC,MAAM;UAAA;UAAAjE,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UACLuX,WAAW,CAACzS,KAAK,CAAC,GAAG;YACnBG,MAAM,EAAE,IAAI;YACZpD,MAAM,EAAE,OAAO;YACfiC,KAAK,EAAEA,KAAK,CAACG;UACf,CAAC;QACH;MACF;IACF;IAEA,MAAMkD,UAAU;IAAA;IAAA,CAAAtH,aAAA,GAAAG,CAAA,SAAGuF,MAAM,CAACC,MAAM,CAAC+R,WAAW,CAAC,CAAC9R,KAAK,CAAC+R,CAAC,IAAI;MAAA;MAAA3X,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAG,CAAA;MAAA,OAAAwX,CAAC,CAAC3V,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAEjF,OAAO;MACL6B,MAAM,EAAEsF,UAAU;MAAA;MAAA,CAAAtH,aAAA,GAAA8B,CAAA,WAAG,SAAS;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,UAAU;MAC3CwE,MAAM,EAAEoR,WAAW;MACnBlQ,OAAO,EAAE;QACPsJ,YAAY,EAAE2G,cAAc,CAACxR,MAAM;QACnC8K,cAAc,EAAErL,MAAM,CAACC,MAAM,CAAC+R,WAAW,CAAC,CAACvQ,MAAM,CAACwQ,CAAC,IAAI;UAAA;UAAA3X,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAwX,CAAC,CAAC3V,MAAM,KAAK,SAAS;QAAD,CAAC,CAAC,CAACiE,MAAM;QACrFkL,cAAc,EAAEzL,MAAM,CAACC,MAAM,CAAC+R,WAAW,CAAC,CAACvQ,MAAM,CAACwQ,CAAC,IAAI;UAAA;UAAA3X,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAwX,CAAC,CAAC3V,MAAM,KAAK,SAAS;QAAD,CAAC,CAAC,CAACiE,MAAM;QACrFgL,YAAY,EAAEvL,MAAM,CAACC,MAAM,CAAC+R,WAAW,CAAC,CAACvQ,MAAM,CAACwQ,CAAC,IAAI;UAAA;UAAA3X,aAAA,GAAAwB,CAAA;UAAAxB,aAAA,GAAAG,CAAA;UAAA,OAAAwX,CAAC,CAAC3V,MAAM,KAAK,OAAO;QAAD,CAAC,CAAC,CAACiE;MAC7E;IACF,CAAC;EACH,CAAC,CAAC,OAAOhC,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACd,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBA,OAAO,EAAE;IACX,CAAC;EACH;AACF;AAEA,eAAemE,yBAAyBA,CAAA,EAAG;EAAA;EAAAvI,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACzC,IAAI;IACF,MAAMiO,SAAS;IAAA;IAAA,CAAApO,aAAA,GAAAG,CAAA,SAAGiC,OAAO,CAACC,GAAG,CAAC2M,6BAA6B;IAAC;IAAAhP,aAAA,GAAAG,CAAA;IAE5D,IAAI,CAACiO,SAAS,EAAE;MAAA;MAAApO,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MACd,OAAO;QACL6B,MAAM,EAAE,UAAU;QAClBoC,OAAO,EAAE,8CAA8C;QACvDyQ,UAAU,EAAE;MACd,CAAC;IACH,CAAC;IAAA;IAAA;MAAA7U,aAAA,GAAA8B,CAAA;IAAA;;IAED;IAAA9B,aAAA,GAAAG,CAAA;IACA,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACF,MAAMM,aAAa,CAAC+O,iBAAiB,CAAC,CAAC;MAAC;MAAAxP,aAAA,GAAAG,CAAA;MACxC,OAAO;QACL6B,MAAM,EAAE,SAAS;QACjBoC,OAAO,EAAE,mCAAmC;QAC5CyQ,UAAU,EAAE,IAAI;QAChBzG,SAAS,EAAEA,SAAS,CAACwJ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAChD,CAAC;IACH,CAAC,CAAC,OAAO3T,KAAK,EAAE;MAAA;MAAAjE,aAAA,GAAAG,CAAA;MACd,OAAO;QACL6B,MAAM,EAAE,QAAQ;QAChBoC,OAAO,EAAE,iCAAiC;QAC1CyQ,UAAU,EAAE,IAAI;QAChB5Q,KAAK,EAAEA,KAAK,CAACG,OAAO;QACpBgK,SAAS,EAAEA,SAAS,CAACwJ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;MAC1C,CAAC;IACH;EACF,CAAC,CAAC,OAAO3T,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACd,OAAO;MACL6B,MAAM,EAAE,QAAQ;MAChBiC,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBA,OAAO,EAAE;IACX,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,SAAS4F,8BAA8BA,CAAChB,eAAe,EAAE;EAAA;EAAAhJ,aAAA,GAAAwB,CAAA;EACvD,MAAMgH,eAAe;EAAA;EAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;EAAC;EAAAH,aAAA,GAAAG,CAAA;EAE3B,KAAK,MAAM,CAAC+J,UAAU,EAAEC,OAAO,CAAC,IAAIzE,MAAM,CAAC0E,OAAO,CAACpB,eAAe,CAAC,EAAE;IAAA;IAAAhJ,aAAA,GAAAG,CAAA;IACnE,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;MAAA;MAAA9J,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC5BqI,eAAe,CAACqP,IAAI,CAAC;QACnB3V,OAAO,EAAEgI,UAAU;QACnB4N,KAAK,EAAE,yBAAyB;QAChCC,cAAc,EAAE,kFAAkF;QAClGC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAhY,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAAA,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;QAAA;QAAA9J,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACxCqI,eAAe,CAACqP,IAAI,CAAC;UACnB3V,OAAO,EAAEgI,UAAU;UACnB4N,KAAK,EAAE,8BAA8B;UACrCC,cAAc,EAAE,uDAAuD;UACvEC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QAAA;QAAAhY,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAAA,IAAIgK,OAAO,CAAC0B,QAAQ,GAAG,CAAC,EAAE;UAAA;UAAA7L,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UAC/BqI,eAAe,CAACqP,IAAI,CAAC;YACnB3V,OAAO,EAAEgI,UAAU;YACnB4N,KAAK,EAAE,0BAA0B;YACjCC,cAAc,EAAE,+EAA+E;YAC/FC,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAhY,aAAA,GAAA8B,CAAA;QAAA;MAAD;IAAA;EACF;EAAC;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqI,eAAe,CAACvC,MAAM,KAAK,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAChCqI,eAAe,CAACqP,IAAI,CAAC;MACnB3V,OAAO,EAAE,KAAK;MACd4V,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,mEAAmE;MACnFC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAhY,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAOqI,eAAe;AACxB;;AAEA;AAAA;AAAAxI,aAAA,GAAAG,CAAA;AACAgB,MAAM,CAACE,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAvB,aAAA,GAAAwB,CAAA;EACjD,MAAMyW,SAAS;EAAA;EAAA,CAAAjY,aAAA,GAAAG,CAAA,SAAGe,MAAM,CAACgX,UAAU,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnD,MAAMC,YAAY;EAAA;EAAA,CAAApY,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;EAAC;EAAA3B,aAAA,GAAAG,CAAA;EAEhC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFgE,OAAO,CAACoC,GAAG,CAAC,OAAO0R,SAAS,8CAA8C,EAAE;MAC1EI,SAAS,EAAE/W,GAAG,CAAC6O,OAAO,CAAC,YAAY,CAAC;MACpCmI,EAAE,EAAEhX,GAAG,CAACgX,EAAE;MACVhU,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;IACpC,CAAC,CAAC;;IAEF;IAAA;IAAAvE,aAAA,GAAAG,CAAA;IACAgE,OAAO,CAACoC,GAAG,CAAC,OAAO0R,SAAS,qDAAqD,CAAC;IAClF,MAAMM,gBAAgB;IAAA;IAAA,CAAAvY,aAAA,GAAAG,CAAA,SAAG,MAAMI,sBAAsB,CAAC0X,SAAS,CAAC;IAEhE,MAAM1Q,YAAY;IAAA;IAAA,CAAAvH,aAAA,GAAAG,CAAA,SAAG;MACnB4B,OAAO,EAAE,IAAI;MACbyW,iBAAiB,EAAE;QACjBtB,OAAO,EAAE;UACPlV,MAAM,EAAEuW,gBAAgB,CAACE,KAAK;UAAA;UAAA,CAAAzY,aAAA,GAAA8B,CAAA,WAAG,OAAO;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,SAAS;UACpD+F,iBAAiB,EAAE0Q,gBAAgB,CAACG,gBAAgB;UACpDC,gBAAgB;UAAE;UAAA,CAAA3Y,aAAA,GAAA8B,CAAA,WAAAyW,gBAAgB,CAACK,eAAe;UAAA;UAAA,CAAA5Y,aAAA,GAAA8B,CAAA,WAAI,EAAE;UACxD+W,cAAc,EAAEN,gBAAgB,CAACO,aAAa;UAC9CC,cAAc,EAAER,gBAAgB,CAACS;QACnC,CAAC;QACDC,UAAU,EAAEV,gBAAgB,CAAC/B,UAAU;QAAA;QAAA,CAAAxW,aAAA,GAAA8B,CAAA,WAAG;UACxCoX,IAAI,EAAE;YACJlX,MAAM,EAAEuW,gBAAgB,CAAC/B,UAAU,CAAC0C,IAAI,CAACC,OAAO,CAAClT,MAAM,KAAK,CAAC;YAAA;YAAA,CAAAjG,aAAA,GAAA8B,CAAA,WAAG,UAAU;YAAA;YAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,YAAY;YACzFsX,QAAQ,EAAEb,gBAAgB,CAAC/B,UAAU,CAAC0C,IAAI,CAACE,QAAQ,CAACnT,MAAM;YAC1DoT,QAAQ,EAAEd,gBAAgB,CAAC/B,UAAU,CAAC0C,IAAI,CAACG,QAAQ,CAACpT,MAAM;YAC1DkT,OAAO,EAAEZ,gBAAgB,CAAC/B,UAAU,CAAC0C,IAAI,CAACC,OAAO;YACjDG,eAAe,EAAEf,gBAAgB,CAAC/B,UAAU,CAAC0C,IAAI,CAACG;UACpD,CAAC;UACD3E,SAAS,EAAE;YACT1S,MAAM,EAAEuW,gBAAgB,CAAC/B,UAAU,CAAC9B,SAAS,CAACyE,OAAO,CAAClT,MAAM,KAAK,CAAC;YAAA;YAAA,CAAAjG,aAAA,GAAA8B,CAAA,WAAG,UAAU;YAAA;YAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,YAAY;YAC9FsX,QAAQ,EAAEb,gBAAgB,CAAC/B,UAAU,CAAC9B,SAAS,CAAC0E,QAAQ,CAACnT,MAAM;YAC/DoT,QAAQ,EAAEd,gBAAgB,CAAC/B,UAAU,CAAC9B,SAAS,CAAC2E,QAAQ,CAACpT,MAAM;YAC/DkT,OAAO,EAAEZ,gBAAgB,CAAC/B,UAAU,CAAC9B,SAAS,CAACyE,OAAO;YACtDG,eAAe,EAAEf,gBAAgB,CAAC/B,UAAU,CAAC9B,SAAS,CAAC2E;UACzD,CAAC;UACDE,WAAW,EAAE;YACXvX,MAAM,EAAEuW,gBAAgB,CAAC/B,UAAU,CAAC+C,WAAW,CAACJ,OAAO,CAAClT,MAAM,KAAK,CAAC;YAAA;YAAA,CAAAjG,aAAA,GAAA8B,CAAA,WAAG,UAAU;YAAA;YAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,YAAY;YAChGsX,QAAQ,EAAEb,gBAAgB,CAAC/B,UAAU,CAAC+C,WAAW,CAACH,QAAQ,CAACnT,MAAM;YACjEoT,QAAQ,EAAEd,gBAAgB,CAAC/B,UAAU,CAAC+C,WAAW,CAACF,QAAQ,CAACpT,MAAM;YACjEkT,OAAO,EAAEZ,gBAAgB,CAAC/B,UAAU,CAAC+C,WAAW,CAACJ,OAAO;YACxDG,eAAe,EAAEf,gBAAgB,CAAC/B,UAAU,CAAC+C,WAAW,CAACF;UAC3D,CAAC;UACDpP,SAAS,EAAE;YACTjI,MAAM,EAAEuW,gBAAgB,CAAC/B,UAAU,CAACvM,SAAS,CAACkP,OAAO,CAAClT,MAAM,KAAK,CAAC;YAAA;YAAA,CAAAjG,aAAA,GAAA8B,CAAA,WAAG,UAAU;YAAA;YAAA,CAAA9B,aAAA,GAAA8B,CAAA,WAAG,YAAY;YAC9FsX,QAAQ,EAAEb,gBAAgB,CAAC/B,UAAU,CAACvM,SAAS,CAACmP,QAAQ,CAACnT,MAAM;YAC/DoT,QAAQ,EAAEd,gBAAgB,CAAC/B,UAAU,CAACvM,SAAS,CAACoP,QAAQ,CAACpT,MAAM;YAC/DkT,OAAO,EAAEZ,gBAAgB,CAAC/B,UAAU,CAACvM,SAAS,CAACkP,OAAO;YACtDG,eAAe,EAAEf,gBAAgB,CAAC/B,UAAU,CAACvM,SAAS,CAACoP;UACzD,CAAC;UACDG,QAAQ,EAAE;YACRxX,MAAM,EAAE,UAAU;YAClBoX,QAAQ,EAAEb,gBAAgB,CAAC/B,UAAU,CAACgD,QAAQ,CAACJ,QAAQ,CAACnT,MAAM;YAC9DoT,QAAQ,EAAEd,gBAAgB,CAAC/B,UAAU,CAACgD,QAAQ,CAACH,QAAQ,CAACpT,MAAM;YAC9DkT,OAAO,EAAEZ,gBAAgB,CAAC/B,UAAU,CAACgD,QAAQ,CAACL,OAAO;YACrDG,eAAe,EAAEf,gBAAgB,CAAC/B,UAAU,CAACgD,QAAQ,CAACH;UACxD;QACF,CAAC;QAAA;QAAA,CAAArZ,aAAA,GAAA8B,CAAA,WAAG,IAAI;QACR2X,iBAAiB,EAAEjZ,eAAe;QAClCgI,eAAe,EAAEkR,6BAA6B,CAACnB,gBAAgB,CAAC;QAChEoB,eAAe,EAAE;UACfC,WAAW,EAAErB,gBAAgB,CAACsB,kBAAkB;UAChDvV,SAAS,EAAEiU,gBAAgB,CAACjU,SAAS;UACrCwV,UAAU,EAAE7B;QACd;MACF,CAAC;MACD8B,YAAY,EAAE;QACZD,UAAU,EAAE7B,SAAS;QACrB+B,iBAAiB,EAAEtY,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGyW,YAAY;QAC5C9T,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACpC;IACF,CAAC;;IAED;IACA,IAAI0V,UAAU;IAAA;IAAA,CAAAja,aAAA,GAAAG,CAAA,SAAG,GAAG;IAAC;IAAAH,aAAA,GAAAG,CAAA;IACrB,IAAIoY,gBAAgB,CAACtU,KAAK,EAAE;MAAA;MAAAjE,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC1B8Z,UAAU,GAAG,GAAG;IAClB,CAAC,MAAM;MAAA;MAAAja,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAAA;MAAI;MAAA,CAAAH,aAAA,GAAA8B,CAAA,WAAAyW,gBAAgB,CAACK,eAAe;MAAA;MAAA,CAAA5Y,aAAA,GAAA8B,CAAA,WAAIyW,gBAAgB,CAACK,eAAe,CAAC3S,MAAM,GAAG,CAAC,GAAE;QAAA;QAAAjG,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAC1F8Z,UAAU,GAAG,GAAG,CAAC,CAAC;MACpB,CAAC,MAAM;QAAA;QAAAja,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QAAA,IAAIoY,gBAAgB,CAACG,gBAAgB,GAAG,EAAE,EAAE;UAAA;UAAA1Y,aAAA,GAAA8B,CAAA;UAAA9B,aAAA,GAAAG,CAAA;UACjD8Z,UAAU,GAAG,GAAG,CAAC,CAAC;QACpB,CAAC;QAAA;QAAA;UAAAja,aAAA,GAAA8B,CAAA;QAAA;MAAD;IAAA;IAEA,MAAMoY,aAAa;IAAA;IAAA,CAAAla,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGyW,YAAY;IAAC;IAAApY,aAAA,GAAAG,CAAA;IAChDgE,OAAO,CAACoC,GAAG,CAAC,MAAM0R,SAAS,6CAA6CiC,aAAa,IAAI,EAAE;MACzFlY,MAAM,EAAEiY,UAAU;MAClBE,YAAY,EAAE,GAAG5B,gBAAgB,CAACG,gBAAgB,GAAG;MACrDE,eAAe;MAAE;MAAA,CAAA5Y,aAAA,GAAA8B,CAAA,WAAAyW,gBAAgB,CAACK,eAAe,EAAE3S,MAAM;MAAA;MAAA,CAAAjG,aAAA,GAAA8B,CAAA,WAAI,CAAC;MAC9DgX,aAAa,EAAEP,gBAAgB,CAACO,aAAa;MAC7CE,aAAa,EAAET,gBAAgB,CAACS;IAClC,CAAC,CAAC;IAAC;IAAAhZ,aAAA,GAAAG,CAAA;IAEHoB,GAAG,CAACS,MAAM,CAACiY,UAAU,CAAC,CAAC5V,IAAI,CAACkD,YAAY,CAAC;EAE3C,CAAC,CAAC,OAAOtD,KAAK,EAAE;IACd,MAAMmW,aAAa;IAAA;IAAA,CAAApa,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGyW,YAAY;IAAC;IAAApY,aAAA,GAAAG,CAAA;IAChDgE,OAAO,CAACF,KAAK,CAAC,MAAMgU,SAAS,6CAA6CmC,aAAa,KAAK,EAAE;MAC5FnW,KAAK,EAAEA,KAAK,CAACG,OAAO;MACpBiW,UAAU,EAAEpW,KAAK,CAACqW,KAAK;MACvBC,MAAM,EAAE,iCAAiC;MACzCxC,cAAc,EAAE;IAClB,CAAC,CAAC;IAAC;IAAA/X,aAAA,GAAAG,CAAA;IAEHoB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACqC,IAAI,CAAC;MACnBtC,OAAO,EAAE,KAAK;MACdkC,KAAK,EAAE,mCAAmC;MAC1C2M,OAAO,EAAExO,OAAO,CAACC,GAAG,CAACyN,QAAQ,KAAK,aAAa;MAAA;MAAA,CAAA9P,aAAA,GAAA8B,CAAA,YAAGmC,KAAK,CAACG,OAAO;MAAA;MAAA,CAAApE,aAAA,GAAA8B,CAAA,YAAG,uBAAuB;MACzFiY,YAAY,EAAE;QACZD,UAAU,EAAE7B,SAAS;QACrBuC,iBAAiB,EAAEJ,aAAa;QAChC9V,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAAC6C,WAAW,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASmV,6BAA6BA,CAACnB,gBAAgB,EAAE;EAAA;EAAAvY,aAAA,GAAAwB,CAAA;EACvD,MAAMgH,eAAe;EAAA;EAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;EAAC;EAAAH,aAAA,GAAAG,CAAA;EAE3B,IAAIoY,gBAAgB,CAACtU,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC1BqI,eAAe,CAACqP,IAAI,CAAC;MACnB4C,IAAI,EAAE,OAAO;MACbzC,QAAQ,EAAE,UAAU;MACpB5T,OAAO,EAAE,mCAAmC;MAC5CsW,MAAM,EAAE,6CAA6C;MACrD9J,OAAO,EAAE2H,gBAAgB,CAACtU;IAC5B,CAAC,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IACH,OAAOqI,eAAe;EACxB,CAAC;EAAA;EAAA;IAAAxI,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED;EAAI;EAAA,CAAAH,aAAA,GAAA8B,CAAA,YAAAyW,gBAAgB,CAACK,eAAe;EAAA;EAAA,CAAA5Y,aAAA,GAAA8B,CAAA,YAAIyW,gBAAgB,CAACK,eAAe,CAAC3S,MAAM,GAAG,CAAC,GAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACnFqI,eAAe,CAACqP,IAAI,CAAC;MACnB4C,IAAI,EAAE,yBAAyB;MAC/BzC,QAAQ,EAAE,UAAU;MACpB5T,OAAO,EAAE,GAAGmU,gBAAgB,CAACK,eAAe,CAAC3S,MAAM,0BAA0B;MAC7EyU,MAAM,EAAE,iDAAiD;MACzD9J,OAAO,EAAE2H,gBAAgB,CAACK,eAAe;MACzC2B,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIoY,gBAAgB,CAAC/B,UAAU,EAAE;IAAA;IAAAxW,aAAA,GAAA8B,CAAA;IAC/B,MAAMmX,UAAU;IAAA;IAAA,CAAAjZ,aAAA,GAAAG,CAAA,SAAG,CAAC,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,WAAW,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAErE8Y,UAAU,CAAC0B,OAAO,CAAClJ,QAAQ,IAAI;MAAA;MAAAzR,aAAA,GAAAwB,CAAA;MAC7B,MAAMoZ,YAAY;MAAA;MAAA,CAAA5a,aAAA,GAAAG,CAAA,SAAGoY,gBAAgB,CAAC/B,UAAU,CAAC/E,QAAQ,CAAC;MAAC;MAAAzR,aAAA,GAAAG,CAAA;MAC3D;MAAI;MAAA,CAAAH,aAAA,GAAA8B,CAAA,YAAA8Y,YAAY;MAAA;MAAA,CAAA5a,aAAA,GAAA8B,CAAA,YAAI8Y,YAAY,CAACzB,OAAO,CAAClT,MAAM,GAAG,CAAC,GAAE;QAAA;QAAAjG,aAAA,GAAA8B,CAAA;QAAA9B,aAAA,GAAAG,CAAA;QACnDqI,eAAe,CAACqP,IAAI,CAAC;UACnB4C,IAAI,EAAE,yBAAyB;UAC/BzC,QAAQ,EAAEvG,QAAQ,KAAK,MAAM;UAAA;UAAA,CAAAzR,aAAA,GAAA8B,CAAA,YAAG,MAAM;UAAA;UAAA,CAAA9B,aAAA,GAAA8B,CAAA,YAAG,QAAQ;UACjDsC,OAAO,EAAE,WAAWwW,YAAY,CAACzB,OAAO,CAAClT,MAAM,IAAIwL,QAAQ,SAAS;UACpEiJ,MAAM,EAAE,kBAAkBjJ,QAAQ,YAAYmJ,YAAY,CAACzB,OAAO,CAAC0B,IAAI,CAAC,IAAI,CAAC,EAAE;UAC/EjK,OAAO,EAAEgK,YAAY,CAACzB,OAAO;UAC7BoB,MAAM,EAAEO,iBAAiB,CAACrJ,QAAQ;QACpC,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAzR,aAAA,GAAA8B,CAAA;MAAA;IACH,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA9B,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED;EAAI;EAAA,CAAAH,aAAA,GAAA8B,CAAA,YAAAyW,gBAAgB,CAACG,gBAAgB,GAAG,GAAG;EAAA;EAAA,CAAA1Y,aAAA,GAAA8B,CAAA,YAAIyW,gBAAgB,CAACG,gBAAgB,IAAI,EAAE,GAAE;IAAA;IAAA1Y,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACtFqI,eAAe,CAACqP,IAAI,CAAC;MACnB4C,IAAI,EAAE,gBAAgB;MACtBzC,QAAQ,EAAE,KAAK;MACf5T,OAAO,EAAE,aAAamU,gBAAgB,CAACG,gBAAgB,YAAY;MACnEgC,MAAM,EAAE,kEAAkE;MAC1E9J,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA5Q,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqI,eAAe,CAACvC,MAAM,KAAK,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAChCqI,eAAe,CAACqP,IAAI,CAAC;MACnB4C,IAAI,EAAE,iBAAiB;MACvBzC,QAAQ,EAAE,MAAM;MAChB5T,OAAO,EAAE,yCAAyC;MAClDsW,MAAM,EAAE,oBAAoB;MAC5B9J,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA5Q,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAOqI,eAAe;AACxB;;AAEA;AACA;AACA;AACA,SAASsS,iBAAiBA,CAACrJ,QAAQ,EAAE;EAAA;EAAAzR,aAAA,GAAAwB,CAAA;EACnC,MAAMuZ,OAAO;EAAA;EAAA,CAAA/a,aAAA,GAAAG,CAAA,SAAG;IACd+Y,IAAI,EAAE,sDAAsD;IAC5DxE,SAAS,EAAE,2DAA2D;IACtE6E,WAAW,EAAE,uDAAuD;IACpEtP,SAAS,EAAE;EACb,CAAC;EAAC;EAAAjK,aAAA,GAAAG,CAAA;EAEF,OAAO,2BAAAH,aAAA,GAAA8B,CAAA,YAAAiZ,OAAO,CAACtJ,QAAQ,CAAC;EAAA;EAAA,CAAAzR,aAAA,GAAA8B,CAAA,YAAI,0CAA0C;AACxE;;AAEA;AACA;AACA;AACA,eAAe8T,2BAA2BA,CAAA,EAAG;EAAA;EAAA5V,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM6a,UAAU;IAAA;IAAA,CAAAhb,aAAA,GAAAG,CAAA,SAAG,WAAW,GAAG2H,IAAI,CAACmT,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;IACzE,MAAMC,QAAQ;IAAA;IAAA,CAAApb,aAAA,GAAAG,CAAA,SAAG,YAAY,GAAG2H,IAAI,CAACmT,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACvE,MAAME,UAAU;IAAA;IAAA,CAAArb,aAAA,GAAAG,CAAA,SAAG,WAAW;IAC9B,MAAMmb,YAAY;IAAA;IAAA,CAAAtb,aAAA,GAAAG,CAAA,SAAG,MAAM;;IAE3B;IACA,MAAMob,SAAS;IAAA;IAAA,CAAAvb,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAAC+a,aAAa,CAACR,UAAU,EAAEI,QAAQ,EAAEC,UAAU,EAAEC,YAAY,CAAC;;IAEnG;IACA,MAAMG,SAAS;IAAA;IAAA,CAAAzb,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACgT,aAAa,CAAC8H,SAAS,EAAEH,QAAQ,EAAEC,UAAU,EAAEC,YAAY,CAAC;IAElG,MAAMvZ,OAAO;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA,SAAG6a,UAAU,KAAKS,SAAS;IAAC;IAAAzb,aAAA,GAAAG,CAAA;IAEzC,OAAO;MACL4B,OAAO;MACPqC,OAAO,EAAErC,OAAO;MAAA;MAAA,CAAA/B,aAAA,GAAA8B,CAAA,YAAG,wBAAwB;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,YAAG,wBAAwB;MACtE8O,OAAO,EAAE;QACP8K,cAAc,EAAEV,UAAU,CAAC/U,MAAM;QACjC0V,eAAe,EAAEJ,SAAS,CAACA,SAAS,CAACtV,MAAM;QAC3C2V,eAAe,EAAEH,SAAS,CAACxV,MAAM;QACjC4V,gBAAgB,EAAE9Z;MACpB;IACF,CAAC;EACH,CAAC,CAAC,OAAOkC,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACd,OAAO;MACL4B,OAAO,EAAE,KAAK;MACdqC,OAAO,EAAE,wBAAwB;MACjCH,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,eAAeiS,oBAAoBA,CAAA,EAAG;EAAA;EAAArW,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACpC,IAAI;IACF,MAAMkb,UAAU;IAAA;IAAA,CAAArb,aAAA,GAAAG,CAAA,SAAG,YAAY,GAAG2H,IAAI,CAACmT,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACzE,MAAMG,YAAY;IAAA;IAAA,CAAAtb,aAAA,GAAAG,CAAA,SAAG,eAAe;IACpC,MAAM2b,eAAe;IAAA;IAAA,CAAA9b,aAAA,GAAAG,CAAA,SAAG,CAAC,MAAM,EAAE,OAAO,CAAC;;IAEzC;IACA,MAAM4b,KAAK;IAAA;IAAA,CAAA/b,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACub,mBAAmB,CAACX,UAAU,EAAEC,YAAY,EAAEQ,eAAe,EAAE,IAAI,CAAC;;IAEtG;IACA,MAAMtF,UAAU;IAAA;IAAA,CAAAxW,aAAA,GAAAG,CAAA,SAAG,MAAMM,aAAa,CAACwb,mBAAmB,CAACF,KAAK,CAAC;IAEjE,MAAMha,OAAO;IAAA;IAAA,CAAA/B,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAA8B,CAAA,YAAA0U,UAAU,CAACiC,KAAK;IAAA;IAAA,CAAAzY,aAAA,GAAA8B,CAAA,YAAI0U,UAAU,CAAC0F,MAAM,KAAKb,UAAU;IAAA;IAAA,CAAArb,aAAA,GAAA8B,CAAA,YAAI0U,UAAU,CAAC2F,QAAQ,KAAKb,YAAY;IAAC;IAAAtb,aAAA,GAAAG,CAAA;IAE7G,OAAO;MACL4B,OAAO;MACP4U,cAAc,EAAE,CAAC,CAACoF,KAAK;MACvBlF,UAAU,EAAEL,UAAU,CAACiC,KAAK;MAC5BrU,OAAO,EAAErC,OAAO;MAAA;MAAA,CAAA/B,aAAA,GAAA8B,CAAA,YAAG,iBAAiB;MAAA;MAAA,CAAA9B,aAAA,GAAA8B,CAAA,YAAG,iBAAiB;MACxD8O,OAAO,EAAE;QACPwL,WAAW,EAAEL,KAAK;QAAA;QAAA,CAAA/b,aAAA,GAAA8B,CAAA,YAAGia,KAAK,CAAC9V,MAAM;QAAA;QAAA,CAAAjG,aAAA,GAAA8B,CAAA,YAAG,CAAC;QACrCua,WAAW,EAAE7F,UAAU,CAAC0F,MAAM,KAAKb,UAAU;QAC7CiB,aAAa,EAAE9F,UAAU,CAAC2F,QAAQ,KAAKb,YAAY;QACnDiB,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACjG,UAAU,CAACkG,WAAW,CAAC,KAAKF,IAAI,CAACC,SAAS,CAACX,eAAe;MAC7F;IACF,CAAC;EACH,CAAC,CAAC,OAAO7X,KAAK,EAAE;IAAA;IAAAjE,aAAA,GAAAG,CAAA;IACd,OAAO;MACL4B,OAAO,EAAE,KAAK;MACd4U,cAAc,EAAE,KAAK;MACrBE,UAAU,EAAE,KAAK;MACjBzS,OAAO,EAAE,iBAAiB;MAC1BH,KAAK,EAAEA,KAAK,CAACG;IACf,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,SAASqE,iCAAiCA,CAACjC,QAAQ,EAAE;EAAA;EAAAxG,aAAA,GAAAwB,CAAA;EACnD,MAAMgH,eAAe;EAAA;EAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;EAAC;EAAAH,aAAA,GAAAG,CAAA;EAE3B,IAAIqG,QAAQ,CAAC2B,iBAAiB,CAACnG,MAAM,KAAK,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAClDqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,UAAU;MACpB9V,OAAO,EAAE,YAAY;MACrB4V,KAAK,EAAE,qCAAqC;MAC5C4C,MAAM,EAAE,sEAAsE;MAC9EH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqG,QAAQ,CAACyB,gBAAgB,CAACjG,MAAM,KAAK,QAAQ,EAAE;IAAA;IAAAhC,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjDqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,UAAU;MACpB9V,OAAO,EAAE,KAAK;MACd4V,KAAK,EAAE,qCAAqC;MAC5C4C,MAAM,EAAE,wCAAwC;MAChDH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqG,QAAQ,CAACyB,gBAAgB,CAACuO,UAAU,EAAEO,QAAQ,KAAK,aAAa,EAAE;IAAA;IAAA/W,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACpEqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,QAAQ;MAClB9V,OAAO,EAAE,KAAK;MACd4V,KAAK,EAAE,4BAA4B;MACnC4C,MAAM,EAAE,6CAA6C;MACrDH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqG,QAAQ,CAAC7D,QAAQ,CAACX,MAAM,KAAK,UAAU,EAAE;IAAA;IAAAhC,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC3CqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,MAAM;MAChB9V,OAAO,EAAE,UAAU;MACnB4V,KAAK,EAAE,8CAA8C;MACrD4C,MAAM,EAAE,qCAAqC;MAC7CH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqG,QAAQ,CAAC8B,OAAO,CAACtG,MAAM,KAAK,UAAU,EAAE;IAAA;IAAAhC,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC1CqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,QAAQ;MAClB9V,OAAO,EAAE,SAAS;MAClB4V,KAAK,EAAE,sCAAsC;MAC7C4C,MAAM,EAAE,yDAAyD;MACjEH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqI,eAAe,CAACvC,MAAM,KAAK,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAChCqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,MAAM;MAChB9V,OAAO,EAAE,KAAK;MACd4V,KAAK,EAAE,8BAA8B;MACrC4C,MAAM,EAAE,oBAAoB;MAC5BH,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAva,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAOqI,eAAe;AACxB;;AAEA;;AAEA;AACA;AACA;AACA,SAASkC,oBAAoBA,CAACP,OAAO,EAAE;EAAA;EAAAnK,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACrC;EAAI;EAAA,CAAAH,aAAA,GAAA8B,CAAA,YAAAqI,OAAO,CAACL,KAAK,KAAK,QAAQ;EAAA;EAAA,CAAA9J,aAAA,GAAA8B,CAAA,YAAIqI,OAAO,CAAC0B,QAAQ,KAAK,CAAC,GAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACxD,OAAO,GAAG;EACZ,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC5B,OAAO,CAAC;EACV,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjC,OAAO,EAAE;EACX,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;;EAED;EACA,MAAM6a,SAAS;EAAA;EAAA,CAAA3c,aAAA,GAAAG,CAAA,SAAG,CAAC,EAAC,CAAC;EACrB,MAAMsK,WAAW;EAAA;EAAA,CAAAzK,aAAA,GAAAG,CAAA,SAAG2H,IAAI,CAAC8U,GAAG,CAAC,CAAC,EAAE,GAAG,GAAIzS,OAAO,CAAC0B,QAAQ,GAAG8Q,SAAS,GAAI,GAAG,CAAC;EAAC;EAAA3c,aAAA,GAAAG,CAAA;EAC5E,OAAO2H,IAAI,CAACC,KAAK,CAAC0C,WAAW,CAAC;AAChC;;AAEA;AACA;AACA;AACA,SAASG,kBAAkBA,CAACT,OAAO,EAAE;EAAA;EAAAnK,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACnC,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC5B,OAAO,UAAU;EACnB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjC,OAAO,SAAS;EAClB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,SAAS;EAClB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,OAAO;EAChB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA,SAAS2K,sBAAsBA,CAACX,OAAO,EAAE;EAAA;EAAAnK,aAAA,GAAAwB,CAAA;EACvC,MAAMG,GAAG;EAAA;EAAA,CAAA3B,aAAA,GAAAG,CAAA,SAAGuB,IAAI,CAACC,GAAG,CAAC,CAAC;EACtB,MAAM0I,oBAAoB;EAAA;EAAA,CAAArK,aAAA,GAAAG,CAAA,SAAGwB,GAAG,GAAGwI,OAAO,CAACG,eAAe;EAAC;EAAAtK,aAAA,GAAAG,CAAA;EAE3D,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAC5B,MAAM+a,SAAS;IAAA;IAAA,CAAA7c,aAAA,GAAAG,CAAA,SAAG,KAAK,EAAC,CAAC;IACzB,MAAM2c,iBAAiB;IAAA;IAAA,CAAA9c,aAAA,GAAAG,CAAA,SAAG0c,SAAS,GAAGxS,oBAAoB;IAAC;IAAArK,aAAA,GAAAG,CAAA;IAE3D,IAAI2c,iBAAiB,IAAI,CAAC,EAAE;MAAA;MAAA9c,aAAA,GAAA8B,CAAA;MAAA9B,aAAA,GAAAG,CAAA;MAC1B,OAAO;QACL4c,SAAS,EAAE,WAAW;QACtBC,cAAc,EAAE,KAAK;QACrBC,WAAW,EAAE;MACf,CAAC;IACH,CAAC;IAAA;IAAA;MAAAjd,aAAA,GAAA8B,CAAA;IAAA;IAAA9B,aAAA,GAAAG,CAAA;IAED,OAAO;MACL4c,SAAS,EAAE,WAAW;MACtBC,cAAc,EAAE,GAAGlV,IAAI,CAACoV,IAAI,CAACJ,iBAAiB,GAAG,IAAI,CAAC,UAAU;MAChEG,WAAW,EAAE,mDAAmDnV,IAAI,CAACoV,IAAI,CAACJ,iBAAiB,GAAG,IAAI,CAAC;IACrG,CAAC;EACH,CAAC;EAAA;EAAA;IAAA9c,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjC,OAAO;MACL4c,SAAS,EAAE,gBAAgB;MAC3BC,cAAc,EAAE,iBAAiB;MACjCC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EAAA;EAAA;IAAAjd,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAO;IACL4c,SAAS,EAAE,QAAQ;IACnBC,cAAc,EAAE,YAAY;IAC5BC,WAAW,EAAE;EACf,CAAC;AACH;;AAEA;AACA;AACA;AACA,SAASjS,oBAAoBA,CAACb,OAAO,EAAE;EAAA;EAAAnK,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EACrC,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC5B,OAAO,yDAAyD;EAClE,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjC,OAAO,wCAAwC;EACjD,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,oFAAoF;EAC7F,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,iCAAiC;EAC1C,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAO,oBAAoB;AAC7B;;AAEA;AACA;AACA;AACA,SAAS+K,aAAaA,CAACf,OAAO,EAAE;EAAA;EAAAnK,aAAA,GAAAwB,CAAA;EAAAxB,aAAA,GAAAG,CAAA;EAC9B,IAAIgK,OAAO,CAACL,KAAK,KAAK,MAAM,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC5B,OAAO,UAAU;EACnB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IAAA;IAAA9J,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACjC,OAAO,SAAS;EAClB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,SAAS;EAClB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIgK,OAAO,CAAC0B,QAAQ,IAAI,CAAC,EAAE;IAAA;IAAA7L,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,OAAO;EAChB,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAO,SAAS;AAClB;;AAEA;AACA;AACA;AACA,SAASkL,2BAA2BA,CAACpB,SAAS,EAAE;EAAA;EAAAjK,aAAA,GAAAwB,CAAA;EAC9C,MAAMgF,QAAQ;EAAA;EAAA,CAAAxG,aAAA,GAAAG,CAAA,SAAGuF,MAAM,CAACC,MAAM,CAACsE,SAAS,CAAC;EAAC;EAAAjK,aAAA,GAAAG,CAAA;EAE1C,IAAIqG,QAAQ,CAACP,MAAM,KAAK,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACzB,OAAO,GAAG;EACZ,CAAC;EAAA;EAAA;IAAAH,aAAA,GAAA8B,CAAA;EAAA;EAED,MAAMqb,UAAU;EAAA;EAAA,CAAAnd,aAAA,GAAAG,CAAA,SAAGqG,QAAQ,CAACmF,MAAM,CAAC,CAACC,GAAG,EAAE1J,OAAO,KAAK;IAAA;IAAAlC,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAG,CAAA;IAAA,OAAAyL,GAAG,GAAG1J,OAAO,CAACsI,QAAQ,CAACC,WAAW;EAAD,CAAC,EAAE,CAAC,CAAC;EAAC;EAAAzK,aAAA,GAAAG,CAAA;EAC5F,OAAO2H,IAAI,CAACC,KAAK,CAACoV,UAAU,GAAG3W,QAAQ,CAACP,MAAM,CAAC;AACjD;;AAEA;AACA;AACA;AACA,SAAS6F,6BAA6BA,CAAC7B,SAAS,EAAE;EAAA;EAAAjK,aAAA,GAAAwB,CAAA;EAChD,MAAMgH,eAAe;EAAA;EAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;EAC1B,MAAMqG,QAAQ;EAAA;EAAA,CAAAxG,aAAA,GAAAG,CAAA,SAAGuF,MAAM,CAAC0E,OAAO,CAACH,SAAS,CAAC;;EAE1C;EACA,MAAMqB,gBAAgB;EAAA;EAAA,CAAAtL,aAAA,GAAAG,CAAA,SAAGqG,QAAQ,CAACW,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAEvB,OAAO,CAAC,KAAK;IAAA;IAAAlC,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAG,CAAA;IAAA,OAAA+B,OAAO,CAACsI,QAAQ,CAACS,UAAU,KAAK,UAAU;EAAD,CAAC,CAAC;EAAC;EAAAjL,aAAA,GAAAG,CAAA;EACvG,IAAImL,gBAAgB,CAACrF,MAAM,GAAG,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC/BqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,UAAU;MACpBoF,KAAK,EAAE,2BAA2B;MAClCH,WAAW,EAAE,GAAG3R,gBAAgB,CAACrF,MAAM,iDAAiD;MACxFO,QAAQ,EAAE8E,gBAAgB,CAAC1G,GAAG,CAAC,CAAC,CAAC2G,GAAG,EAAE9H,CAAC,CAAC,KAAK8H;QAAAA;QAAAA,uBAAA;QAAAA,wBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC,CAAC;MACjDmP,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1a,aAAA,GAAA8B,CAAA;EAAA;;EAED;EACA,MAAM0J,eAAe;EAAA;EAAA,CAAAxL,aAAA,GAAAG,CAAA,SAAGqG,QAAQ,CAACW,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAEvB,OAAO,CAAC,KAAK;IAAA;IAAAlC,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAG,CAAA;IAAA,OAAA+B,OAAO,CAACsI,QAAQ,CAACS,UAAU,KAAK,SAAS;EAAD,CAAC,CAAC;EAAC;EAAAjL,aAAA,GAAAG,CAAA;EACrG,IAAIqL,eAAe,CAACvF,MAAM,GAAG,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC9BqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,SAAS;MACnBoF,KAAK,EAAE,uBAAuB;MAC9BH,WAAW,EAAE,GAAGzR,eAAe,CAACvF,MAAM,0CAA0C;MAChFO,QAAQ,EAAEgF,eAAe,CAAC5G,GAAG,CAAC,CAAC,CAAC2G,GAAG,EAAE9H,CAAC,CAAC,KAAK8H;QAAAA;QAAAA,uBAAA;QAAAA,wBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC,CAAC;MAChDmP,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1a,aAAA,GAAA8B,CAAA;EAAA;;EAED;EACA,MAAM2J,cAAc;EAAA;EAAA,CAAAzL,aAAA,GAAAG,CAAA,SAAGqG,QAAQ,CAACW,MAAM,CAAC,CAAC,CAAC1D,CAAC,EAAEvB,OAAO,CAAC,KAAK;IAAA;IAAAlC,aAAA,GAAAwB,CAAA;IAAAxB,aAAA,GAAAG,CAAA;IAAA,OAAA+B,OAAO,CAACsI,QAAQ,CAACD,eAAe;EAAD,CAAC,CAAC;EAAC;EAAAvK,aAAA,GAAAG,CAAA;EAC3F,IAAIsL,cAAc,CAACxF,MAAM,GAAG,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAC7BqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,MAAM;MAChBoF,KAAK,EAAE,0BAA0B;MACjCH,WAAW,EAAE,GAAGxR,cAAc,CAACxF,MAAM,gDAAgD;MACrFO,QAAQ,EAAEiF,cAAc,CAAC7G,GAAG,CAAC,CAAC,CAAC2G,GAAG,EAAE9H,CAAC,CAAC,KAAK8H;QAAAA;QAAAA,uBAAA;QAAAA,wBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC,CAAC;MAC/CmP,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1a,aAAA,GAAA8B,CAAA;EAAA;;EAED;EACA,MAAMub,aAAa;EAAA;EAAA,CAAArd,aAAA,GAAAG,CAAA,SAAGkL,2BAA2B,CAACpB,SAAS,CAAC;EAAC;EAAAjK,aAAA,GAAAG,CAAA;EAC7D,IAAIkd,aAAa,GAAG,EAAE,EAAE;IAAA;IAAArd,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IACtBqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,SAAS;MACnBoF,KAAK,EAAE,uCAAuC;MAC9CH,WAAW,EAAE,0BAA0BI,aAAa,GAAG;MACvD3C,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1a,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,IAAIqI,eAAe,CAACvC,MAAM,KAAK,CAAC,EAAE;IAAA;IAAAjG,aAAA,GAAA8B,CAAA;IAAA9B,aAAA,GAAAG,CAAA;IAChCqI,eAAe,CAACqP,IAAI,CAAC;MACnBG,QAAQ,EAAE,MAAM;MAChBoF,KAAK,EAAE,sBAAsB;MAC7BH,WAAW,EAAE,2CAA2C;MACxDvC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA1a,aAAA,GAAA8B,CAAA;EAAA;EAAA9B,aAAA,GAAAG,CAAA;EAED,OAAOqI,eAAe;AACxB;AAAC;AAAAxI,aAAA,GAAAG,CAAA;AAEDmd,MAAM,CAACC,OAAO,GAAGpc,MAAM","ignoreList":[]}