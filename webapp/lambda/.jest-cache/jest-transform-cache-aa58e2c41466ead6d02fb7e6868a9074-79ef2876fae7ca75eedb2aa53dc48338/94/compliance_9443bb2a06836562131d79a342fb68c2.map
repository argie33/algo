{"version":3,"names":["cov_2js67m6skp","actualCoverage","ComplianceService","s","require","ComplianceMiddleware","constructor","f","complianceService","auditMiddleware","req","res","next","originalJson","json","originalSend","send","body","responseData","call","on","logAPIRequest","sensitiveEndpoints","isSensitive","some","endpoint","path","startsWith","b","statusCode","auditData","userId","user","id","headers","action","method","replace","toUpperCase","resource","getResourceFromPath","details","userAgent","get","responseTime","getHeaders","bodySize","queryParams","Object","keys","query","length","hasBody","success","ipAddress","ip","sessionId","sessionID","riskLevel","assessRequestRisk","complianceFramework","logAuditEvent","pathParts","split","filter","Boolean","highRiskPaths","dataProcessingMiddleware","hasPersonalData","containsPersonalData","activity","dataType","identifyDataType","purpose","identifyProcessingPurpose","legalBasis","determineLegalBasis","dataSubjects","extractDataSubjects","categories","classifyDataCategories","securityMeasures","automatedDecisionMaking","hasAutomatedDecisionMaking","recordDataProcessing","personalDataFields","bodyString","JSON","stringify","toLowerCase","field","includes","purposes","push","automatedPaths","autoPath","consentValidationMiddleware","requiresConsent","hasConsent","reason","status","error","message","consentRequired","dataProcessingPurpose","consentRequiredPaths","consentPath","retentionCleanupMiddleware","shouldCleanup","Math","random","process","nextTick","retentionTypes","forEach","type","applyRetentionPolicy","console","getComplianceService","module","exports"],"sources":["compliance.js"],"sourcesContent":["// Compliance Middleware\n// Automatic audit logging for GDPR and financial compliance requirements\n\nconst ComplianceService = require('../services/complianceService');\n\nclass ComplianceMiddleware {\n  constructor() {\n    this.complianceService = new ComplianceService();\n  }\n\n  // Audit logging middleware for API endpoints\n  auditMiddleware() {\n    return (req, res, next) => {\n      const originalJson = res.json;\n      const originalSend = res.send;\n      \n      // Capture response data\n      res.json = function(body) {\n        res.responseData = body;\n        return originalJson.call(this, body);\n      };\n      \n      res.send = function(body) {\n        res.responseData = body;\n        return originalSend.call(this, body);\n      };\n      \n      // Log the request after response is sent\n      res.on('finish', () => {\n        this.logAPIRequest(req, res);\n      });\n      \n      next();\n    };\n  }\n\n  // Log API requests for compliance audit\n  logAPIRequest(req, res) {\n    const sensitiveEndpoints = [\n      '/api/settings',\n      '/api/auth',\n      '/api/portfolio',\n      '/api/trading',\n      '/api/compliance'\n    ];\n    \n    const isSensitive = sensitiveEndpoints.some(endpoint => \n      req.path.startsWith(endpoint)\n    );\n    \n    if (isSensitive || res.statusCode >= 400) {\n      const auditData = {\n        userId: req.user?.id || req.headers['x-user-id'] || 'anonymous',\n        action: `${req.method}_${req.path.replace(/\\/api\\//, '').toUpperCase()}`,\n        resource: this.getResourceFromPath(req.path),\n        details: {\n          method: req.method,\n          path: req.path,\n          statusCode: res.statusCode,\n          userAgent: req.get('User-Agent'),\n          responseTime: res.getHeaders()['x-response-time'],\n          bodySize: req.headers['content-length'] || 0,\n          queryParams: Object.keys(req.query).length > 0 ? '[PRESENT]' : 'none',\n          hasBody: req.body && Object.keys(req.body).length > 0,\n          success: res.statusCode < 400\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        sessionId: req.sessionID || req.headers['x-session-id'],\n        success: res.statusCode < 400,\n        riskLevel: this.assessRequestRisk(req, res),\n        complianceFramework: ['GDPR', 'SOX', 'FINRA']\n      };\n      \n      this.complianceService.logAuditEvent(auditData);\n    }\n  }\n\n  // Extract resource name from API path\n  getResourceFromPath(path) {\n    const pathParts = path.split('/').filter(Boolean);\n    if (pathParts.length >= 2) {\n      return pathParts[1]; // Return the resource part after /api/\n    }\n    return 'unknown';\n  }\n\n  // Assess risk level of the request\n  assessRequestRisk(req, res) {\n    if (res.statusCode >= 500) return 'HIGH';\n    if (res.statusCode >= 400) return 'MEDIUM';\n    \n    const highRiskPaths = [\n      '/api/settings/api-keys',\n      '/api/auth/login',\n      '/api/compliance/data-subject',\n      '/api/trading'\n    ];\n    \n    if (highRiskPaths.some(path => req.path.startsWith(path))) {\n      return 'HIGH';\n    }\n    \n    if (req.method !== 'GET') return 'MEDIUM';\n    \n    return 'LOW';\n  }\n\n  // Data processing activity logging middleware\n  dataProcessingMiddleware() {\n    return (req, res, next) => {\n      // Monitor data processing activities\n      if (req.method !== 'GET' && req.body) {\n        const hasPersonalData = this.containsPersonalData(req.body);\n        \n        if (hasPersonalData) {\n          const activity = {\n            dataType: this.identifyDataType(req.path, req.body),\n            purpose: this.identifyProcessingPurpose(req.path, req.method),\n            legalBasis: this.determineLegalBasis(req.path),\n            dataSubjects: this.extractDataSubjects(req),\n            categories: this.classifyDataCategories(req.body),\n            securityMeasures: ['HTTPS', 'Authentication', 'Input Validation'],\n            automatedDecisionMaking: this.hasAutomatedDecisionMaking(req.path)\n          };\n          \n          this.complianceService.recordDataProcessing(activity);\n        }\n      }\n      \n      next();\n    };\n  }\n\n  // Check if request contains personal data\n  containsPersonalData(body) {\n    const personalDataFields = [\n      'email', 'name', 'firstName', 'lastName', 'phone', 'address',\n      'dateOfBirth', 'ssn', 'userId', 'accountNumber'\n    ];\n    \n    const bodyString = JSON.stringify(body).toLowerCase();\n    return personalDataFields.some(field => bodyString.includes(field));\n  }\n\n  // Identify data type being processed\n  identifyDataType(path, body) {\n    if (path.includes('/auth')) return 'authentication_data';\n    if (path.includes('/settings')) return 'user_preferences';\n    if (path.includes('/portfolio')) return 'financial_data';\n    if (path.includes('/trading')) return 'transaction_data';\n    if (path.includes('/compliance')) return 'compliance_data';\n    return 'user_data';\n  }\n\n  // Identify processing purpose\n  identifyProcessingPurpose(path, method) {\n    const purposes = {\n      'POST': 'Data Creation',\n      'PUT': 'Data Update',\n      'PATCH': 'Data Modification',\n      'DELETE': 'Data Deletion'\n    };\n    \n    if (path.includes('/auth')) return 'User Authentication';\n    if (path.includes('/portfolio')) return 'Portfolio Management';\n    if (path.includes('/trading')) return 'Trade Execution';\n    if (path.includes('/settings')) return 'User Preferences Management';\n    \n    return purposes[method] || 'Data Processing';\n  }\n\n  // Determine legal basis for processing\n  determineLegalBasis(path) {\n    if (path.includes('/auth')) return 'Contract';\n    if (path.includes('/trading')) return 'Contract';\n    if (path.includes('/compliance')) return 'Legal Obligation';\n    return 'Legitimate Interest';\n  }\n\n  // Extract data subjects from request\n  extractDataSubjects(req) {\n    const userId = req.user?.id || req.headers['x-user-id'];\n    return userId ? [userId] : ['anonymous'];\n  }\n\n  // Classify data categories\n  classifyDataCategories(body) {\n    const categories = [];\n    const bodyString = JSON.stringify(body).toLowerCase();\n    \n    if (bodyString.includes('email') || bodyString.includes('name')) {\n      categories.push('Identity Data');\n    }\n    if (bodyString.includes('phone') || bodyString.includes('address')) {\n      categories.push('Contact Data');\n    }\n    if (bodyString.includes('account') || bodyString.includes('portfolio')) {\n      categories.push('Financial Data');\n    }\n    if (bodyString.includes('preference') || bodyString.includes('setting')) {\n      categories.push('Preference Data');\n    }\n    \n    return categories.length > 0 ? categories : ['User Data'];\n  }\n\n  // Check for automated decision making\n  hasAutomatedDecisionMaking(path) {\n    const automatedPaths = [\n      '/api/algo',\n      '/api/portfolio-optimization',\n      '/api/technical',\n      '/api/screener'\n    ];\n    \n    return automatedPaths.some(autoPath => path.startsWith(autoPath));\n  }\n\n  // GDPR consent validation middleware\n  consentValidationMiddleware() {\n    return (req, res, next) => {\n      // Check for consent requirements on data processing endpoints\n      if (req.method !== 'GET' && this.requiresConsent(req.path)) {\n        const hasConsent = req.headers['x-user-consent'] === 'true' ||\n                          req.body?.hasConsent === true;\n        \n        if (!hasConsent) {\n          // Log consent requirement\n          this.complianceService.logAuditEvent({\n            userId: req.user?.id || 'anonymous',\n            action: 'CONSENT_REQUIRED',\n            resource: 'data_processing',\n            details: {\n              path: req.path,\n              method: req.method,\n              reason: 'User consent required for data processing'\n            },\n            ipAddress: req.ip,\n            riskLevel: 'MEDIUM',\n            complianceFramework: ['GDPR']\n          });\n          \n          return res.status(403).json({\n            success: false,\n            error: 'Consent required',\n            message: 'User consent is required for this data processing activity',\n            consentRequired: true,\n            dataProcessingPurpose: this.identifyProcessingPurpose(req.path, req.method)\n          });\n        }\n      }\n      \n      next();\n    };\n  }\n\n  // Check if endpoint requires explicit consent\n  requiresConsent(path) {\n    const consentRequiredPaths = [\n      '/api/settings/notifications',\n      '/api/portfolio/create',\n      '/api/trading',\n      '/api/compliance/data-processing'\n    ];\n    \n    return consentRequiredPaths.some(consentPath => path.startsWith(consentPath));\n  }\n\n  // Data retention cleanup middleware\n  retentionCleanupMiddleware() {\n    return (req, res, next) => {\n      // Trigger retention policy cleanup periodically\n      const shouldCleanup = Math.random() < 0.01; // 1% chance per request\n      \n      if (shouldCleanup) {\n        process.nextTick(() => {\n          try {\n            const retentionTypes = ['session_data', 'temporary_data'];\n            retentionTypes.forEach(type => {\n              this.complianceService.applyRetentionPolicy(type);\n            });\n          } catch (error) {\n            console.error('Retention cleanup failed:', error);\n          }\n        });\n      }\n      \n      next();\n    };\n  }\n\n  // Get compliance service instance\n  getComplianceService() {\n    return this.complianceService;\n  }\n}\n\nmodule.exports = ComplianceMiddleware;"],"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","ignoreList":[]}