{"version":3,"names":["cov_1x5m1ahaly","actualCoverage","express","s","require","query","safeQuery","tablesExist","authenticateToken","PatternDetector","WatchlistAlerts","createValidationMiddleware","rateLimitConfigs","sqlInjectionPrevention","xssPrevention","sanitizers","validator","router","Router","patternValidationSchemas","patternScan","symbol","type","sanitizer","value","f","b","test","errorMessage","timeframe","string","maxLength","alphaNumOnly","includes","category","min_confidence","number","min","max","defaultValue","limit","integer","patternAnalysis","required","pattern_type","start_date","isDate","format","end_date","performanceAnalysis","min_samples","use","api","get","req","res","json","success","data","system","version","status","available_endpoints","timestamp","Date","toISOString","patternDetector","watchlistAlerts","startRealTimeMonitoring","validated","console","log","whereClause","params","paramIndex","push","result","parseInt","patterns","rows","map","row","id","patternName","pattern_name","description","detectionDate","detection_date","startDate","endDate","confidence","parseFloat","confidence_score","mlConfidence","ml_confidence","traditionalConfidence","traditional_confidence","signalStrength","signal_strength","direction","targetPrice","target_price","stopLoss","stop_loss","riskRewardRatio","risk_reward_ratio","patternData","pattern_data","keyLevels","key_levels","volumeConfirmation","volume_confirmation","momentumConfirmation","momentum_confirmation","reliabilityScore","reliability_score","total","length","filters","minConfidence","error","details","message","post","categories","body","toUpperCase","categoryPlaceholders","join","summaryResult","summary","totalPatterns","count","avgConfidence","avg_confidence","bullishCount","bullish_count","bearishCount","bearish_count","overallSentiment","calculateOverallSentiment","highestConfidencePattern","analysisDate","is_active","patternTypes","name","minBars","min_bars","maxBars","max_bars","isActive","createdAt","created_at","groupedTypes","reduce","acc","pattern","Object","keys","days","performance","total_patterns","successfulPatterns","successful_patterns","successRate","toFixed","avgReturn","avg_return","avgAccuracy","avg_accuracy","avgTimeToTarget","avg_time_to_target","maxReturn","max_return","minReturn","min_return","overallStats","overallData","overall","totalPatternsEvaluated","total_patterns_evaluated","totalSuccessful","total_successful","overallSuccessRate","overallAvgReturn","overall_avg_return","overallAvgAccuracy","overall_avg_accuracy","patternType","generatedAt","userId","user","sub","is_sent","priority","undefined","alerts","alertType","alert_type","isSent","sentAt","sent_at","alertId","alert","recentPatterns","categoryStats","signalStats","directionStats","topSymbols","dashboard","patternCount","pattern_count","bullishScore","bearishScore","forEach","weight","bullishRatio","symbols","timeframes","detections","results","detectPatterns","storePatternDetections","createPatternAlerts","patterns_detected","alerts_created","slice","period","stats","getPatternStatistics","getPatternPerformance","pattern_types","notify_email","alertConfig","condition","targetValue","metadata","createAlert","reliability","timeframe_suitability","detection","JSON","stringify","periodClause","categoryFilter","statistics","total_detections","sum","detection_count","period_days","performance_data","module","exports"],"sources":["patterns.js"],"sourcesContent":["const express = require('express');\nconst { query, safeQuery, tablesExist } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst PatternDetector = require('../utils/patternDetector');\nconst WatchlistAlerts = require('../utils/watchlistAlerts');\nconst { \n  createValidationMiddleware, \n  rateLimitConfigs, \n  sqlInjectionPrevention, \n  xssPrevention,\n  sanitizers\n} = require('../middleware/validation');\nconst validator = require('validator');\n\nconst router = express.Router();\n\n// Pattern recognition validation schemas\nconst patternValidationSchemas = {\n  patternScan: {\n    symbol: {\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => !value || /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    timeframe: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, alphaNumOnly: false }),\n      validator: (value) => !value || ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w', '1M'].includes(value),\n      errorMessage: 'Timeframe must be one of: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w, 1M'\n    },\n    category: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n      validator: (value) => !value || ['reversal', 'continuation', 'breakout', 'momentum', 'volume'].includes(value),\n      errorMessage: 'Category must be one of: reversal, continuation, breakout, momentum, volume'\n    },\n    min_confidence: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 1, defaultValue: 0.60 }),\n      validator: (value) => !value || (value >= 0 && value <= 1),\n      errorMessage: 'Minimum confidence must be between 0 and 1'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 200, defaultValue: 50 }),\n      validator: (value) => !value || (value >= 1 && value <= 200),\n      errorMessage: 'Limit must be between 1 and 200'\n    }\n  },\n\n  patternAnalysis: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    pattern_type: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n      validator: (value) => !value || ['head_and_shoulders', 'double_top', 'double_bottom', 'triangle', 'flag', 'wedge'].includes(value),\n      errorMessage: 'Pattern type must be a valid technical pattern'\n    },\n    start_date: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'Start date must be in YYYY-MM-DD format'\n    },\n    end_date: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'End date must be in YYYY-MM-DD format'\n    }\n  },\n\n  performanceAnalysis: {\n    pattern_type: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n      validator: (value) => !value || ['head_and_shoulders', 'double_top', 'double_bottom', 'triangle', 'flag', 'wedge'].includes(value),\n      errorMessage: 'Pattern type must be a valid technical pattern'\n    },\n    timeframe: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, alphaNumOnly: false }),\n      validator: (value) => !value || ['1m', '5m', '15m', '30m', '1h', '4h', '1d', '1w', '1M'].includes(value),\n      errorMessage: 'Timeframe must be valid'\n    },\n    min_samples: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 10, max: 10000, defaultValue: 50 }),\n      validator: (value) => !value || (value >= 10 && value <= 10000),\n      errorMessage: 'Minimum samples must be between 10 and 10,000'\n    }\n  }\n};\n\n// Apply authentication and security middleware to pattern routes\nrouter.use(authenticateToken);\nrouter.use(sqlInjectionPrevention);\nrouter.use(xssPrevention);\nrouter.use(rateLimitConfigs.api);\n\n// Root patterns endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'Pattern Recognition API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'GET /patterns/scan - Scan for patterns in real-time',\n        'GET /patterns/types - Get available pattern types',\n        'GET /patterns/performance - Get pattern performance analytics',\n        'GET /patterns/alerts - Get pattern-based alerts',\n        'GET /patterns/dashboard - Get pattern recognition dashboard',\n        'GET /patterns/statistics - Get pattern statistics'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Apply authentication middleware to all other pattern routes\nrouter.use(authenticateToken);\n\n// Initialize pattern detector and alerts system\nconst patternDetector = new PatternDetector();\nconst watchlistAlerts = new WatchlistAlerts();\n\n// Start real-time pattern monitoring\npatternDetector.startRealTimeMonitoring();\n\n/**\n * GET /api/patterns/scan\n * Scan for patterns in real-time\n */\nrouter.get('/scan', createValidationMiddleware(patternValidationSchemas.patternScan), async (req, res) => {\n  try {\n    const { \n      symbol, \n      timeframe, \n      category,\n      min_confidence,\n      limit \n    } = req.validated;\n\n    console.log(`🔍 Pattern scan request: symbol=${symbol}, timeframe=${timeframe}, confidence>=${min_confidence}`);\n\n    let whereClause = 'WHERE dp.status = $1';\n    let params = ['active'];\n    let paramIndex = 2;\n\n    // Add validated symbol filter\n    if (symbol) {\n      whereClause += ` AND dp.symbol = $${paramIndex}`;\n      params.push(symbol);\n      paramIndex++;\n    }\n\n    // Add validated timeframe filter\n    if (timeframe) {\n      whereClause += ` AND dp.timeframe = $${paramIndex}`;\n      params.push(timeframe);\n      paramIndex++;\n    }\n\n    // Add validated category filter\n    if (category) {\n      whereClause += ` AND pt.category = $${paramIndex}`;\n      params.push(category);\n      paramIndex++;\n    }\n\n    // Add validated confidence filter\n    whereClause += ` AND dp.confidence_score >= $${paramIndex}`;\n    params.push(min_confidence);\n    paramIndex++;\n\n    // Add limit with validated value\n    whereClause += ` ORDER BY dp.detected_at DESC LIMIT $${paramIndex}`;\n    params.push(limit);\n\n    const result = await query(`\n      SELECT \n        dp.id,\n        dp.symbol,\n        dp.timeframe,\n        dp.detection_date,\n        dp.start_date,\n        dp.end_date,\n        dp.confidence_score,\n        dp.ml_confidence,\n        dp.traditional_confidence,\n        dp.signal_strength,\n        dp.direction,\n        dp.target_price,\n        dp.stop_loss,\n        dp.risk_reward_ratio,\n        dp.pattern_data,\n        dp.key_levels,\n        dp.volume_confirmation,\n        dp.momentum_confirmation,\n        dp.status,\n        pt.name as pattern_name,\n        pt.category,\n        pt.description,\n        pt.reliability_score\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY dp.detection_date DESC, dp.confidence_score DESC\n      LIMIT $${paramIndex}\n    `, [...params, parseInt(limit)]);\n\n    const patterns = result.rows.map(row => ({\n      id: row.id,\n      symbol: row.symbol,\n      patternName: row.pattern_name,\n      category: row.category,\n      description: row.description,\n      timeframe: row.timeframe,\n      detectionDate: row.detection_date,\n      startDate: row.start_date,\n      endDate: row.end_date,\n      confidence: parseFloat(row.confidence_score),\n      mlConfidence: row.ml_confidence ? parseFloat(row.ml_confidence) : null,\n      traditionalConfidence: parseFloat(row.traditional_confidence),\n      signalStrength: row.signal_strength,\n      direction: row.direction,\n      targetPrice: row.target_price ? parseFloat(row.target_price) : null,\n      stopLoss: row.stop_loss ? parseFloat(row.stop_loss) : null,\n      riskRewardRatio: row.risk_reward_ratio ? parseFloat(row.risk_reward_ratio) : null,\n      patternData: row.pattern_data,\n      keyLevels: row.key_levels,\n      volumeConfirmation: row.volume_confirmation,\n      momentumConfirmation: row.momentum_confirmation,\n      status: row.status,\n      reliabilityScore: parseFloat(row.reliability_score)\n    }));\n\n    res.json({\n      success: true,\n      patterns,\n      total: patterns.length,\n      filters: {\n        symbol,\n        timeframe,\n        category,\n        minConfidence: min_confidence\n      }\n    });\n\n  } catch (error) {\n    console.error('Error scanning patterns:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to scan patterns',\n      details: error.message\n    });\n  }\n});\n\n/**\n * POST /api/patterns/analyze\n * Analyze a specific symbol for patterns\n */\nrouter.post('/analyze', async (req, res) => {\n  try {\n    const { symbol, timeframe = '1d', categories } = req.body;\n\n    if (!symbol) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbol is required'\n      });\n    }\n\n    // This would trigger the pattern recognition service\n    // For now, we'll return existing patterns and simulate analysis\n    \n    let whereClause = 'WHERE dp.symbol = $1 AND dp.timeframe = $2';\n    let params = [symbol.toUpperCase(), timeframe];\n    let paramIndex = 3;\n\n    if (categories && categories.length > 0) {\n      const categoryPlaceholders = categories.map(() => `$${paramIndex++}`).join(',');\n      whereClause += ` AND pt.category IN (${categoryPlaceholders})`;\n      params.push(...categories);\n    }\n\n    const result = await query(`\n      SELECT \n        dp.*,\n        pt.name as pattern_name,\n        pt.category,\n        pt.description,\n        pt.reliability_score\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY dp.detection_date DESC\n      LIMIT 20\n    `, params);\n\n    const patterns = result.rows.map(row => ({\n      id: row.id,\n      symbol: row.symbol,\n      patternName: row.pattern_name,\n      category: row.category,\n      description: row.description,\n      timeframe: row.timeframe,\n      detectionDate: row.detection_date,\n      startDate: row.start_date,\n      endDate: row.end_date,\n      confidence: parseFloat(row.confidence_score),\n      mlConfidence: row.ml_confidence ? parseFloat(row.ml_confidence) : null,\n      traditionalConfidence: parseFloat(row.traditional_confidence),\n      signalStrength: row.signal_strength,\n      direction: row.direction,\n      targetPrice: row.target_price ? parseFloat(row.target_price) : null,\n      stopLoss: row.stop_loss ? parseFloat(row.stop_loss) : null,\n      riskRewardRatio: row.risk_reward_ratio ? parseFloat(row.risk_reward_ratio) : null,\n      patternData: row.pattern_data,\n      keyLevels: row.key_levels,\n      volumeConfirmation: row.volume_confirmation,\n      momentumConfirmation: row.momentum_confirmation,\n      status: row.status,\n      reliabilityScore: parseFloat(row.reliability_score)\n    }));\n\n    // Get pattern summary statistics\n    const summaryResult = await query(`\n      SELECT \n        pt.category,\n        COUNT(*) as count,\n        AVG(dp.confidence_score) as avg_confidence,\n        COUNT(CASE WHEN dp.direction = 'bullish' THEN 1 END) as bullish_count,\n        COUNT(CASE WHEN dp.direction = 'bearish' THEN 1 END) as bearish_count\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      WHERE dp.symbol = $1 AND dp.timeframe = $2 \n        AND dp.detection_date >= NOW() - INTERVAL '30 days'\n      GROUP BY pt.category\n    `, [symbol.toUpperCase(), timeframe]);\n\n    const summary = {\n      totalPatterns: patterns.length,\n      categories: summaryResult.rows.map(row => ({\n        category: row.category,\n        count: parseInt(row.count),\n        avgConfidence: parseFloat(row.avg_confidence),\n        bullishCount: parseInt(row.bullish_count),\n        bearishCount: parseInt(row.bearish_count)\n      })),\n      overallSentiment: calculateOverallSentiment(patterns),\n      highestConfidencePattern: patterns.length > 0 ? patterns[0] : null\n    };\n\n    res.json({\n      success: true,\n      symbol: symbol.toUpperCase(),\n      timeframe,\n      patterns,\n      summary,\n      analysisDate: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error analyzing patterns:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze patterns',\n      details: error.message\n    });\n  }\n});\n\n/**\n * GET /api/patterns/types\n * Get all available pattern types\n */\nrouter.get('/types', async (req, res) => {\n  try {\n    const { category, is_active = true } = req.query;\n\n    let whereClause = 'WHERE is_active = $1';\n    let params = [is_active === 'true'];\n    let paramIndex = 2;\n\n    if (category) {\n      whereClause += ` AND category = $${paramIndex}`;\n      params.push(category);\n      paramIndex++;\n    }\n\n    const result = await query(`\n      SELECT \n        id,\n        name,\n        category,\n        description,\n        min_bars,\n        max_bars,\n        reliability_score,\n        is_active,\n        created_at\n      FROM pattern_types\n      ${whereClause}\n      ORDER BY category, reliability_score DESC, name\n    `, params);\n\n    const patternTypes = result.rows.map(row => ({\n      id: row.id,\n      name: row.name,\n      category: row.category,\n      description: row.description,\n      minBars: row.min_bars,\n      maxBars: row.max_bars,\n      reliabilityScore: parseFloat(row.reliability_score),\n      isActive: row.is_active,\n      createdAt: row.created_at\n    }));\n\n    // Group by category\n    const groupedTypes = patternTypes.reduce((acc, pattern) => {\n      if (!acc[pattern.category]) {\n        acc[pattern.category] = [];\n      }\n      acc[pattern.category].push(pattern);\n      return acc;\n    }, {});\n\n    res.json({\n      success: true,\n      patternTypes,\n      groupedTypes,\n      total: patternTypes.length,\n      categories: Object.keys(groupedTypes)\n    });\n\n  } catch (error) {\n    console.error('Error fetching pattern types:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern types',\n      details: error.message\n    });\n  }\n});\n\n/**\n * GET /api/patterns/performance\n * Get pattern performance analytics\n */\nrouter.get('/performance', async (req, res) => {\n  try {\n    const { \n      symbol, \n      pattern_type,\n      timeframe = '1d',\n      days = 30 \n    } = req.query;\n\n    let whereClause = 'WHERE pp.evaluation_date >= NOW() - INTERVAL $1 DAY';\n    let params = [parseInt(days)];\n    let paramIndex = 2;\n\n    if (symbol) {\n      whereClause += ` AND dp.symbol = $${paramIndex}`;\n      params.push(symbol.toUpperCase());\n      paramIndex++;\n    }\n\n    if (pattern_type) {\n      whereClause += ` AND pt.name = $${paramIndex}`;\n      params.push(pattern_type);\n      paramIndex++;\n    }\n\n    if (timeframe) {\n      whereClause += ` AND dp.timeframe = $${paramIndex}`;\n      params.push(timeframe);\n      paramIndex++;\n    }\n\n    const result = await query(`\n      SELECT \n        pt.name as pattern_name,\n        pt.category,\n        COUNT(*) as total_patterns,\n        COUNT(CASE WHEN pp.target_hit = true THEN 1 END) as successful_patterns,\n        AVG(pp.percentage_change) as avg_return,\n        AVG(pp.accuracy_score) as avg_accuracy,\n        AVG(pp.time_to_target) as avg_time_to_target,\n        AVG(dp.confidence_score) as avg_confidence,\n        MAX(pp.percentage_change) as max_return,\n        MIN(pp.percentage_change) as min_return\n      FROM pattern_performance pp\n      JOIN detected_patterns dp ON pp.detected_pattern_id = dp.id\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      GROUP BY pt.name, pt.category\n      ORDER BY avg_accuracy DESC, avg_return DESC\n    `, params);\n\n    const performance = result.rows.map(row => ({\n      patternName: row.pattern_name,\n      category: row.category,\n      totalPatterns: parseInt(row.total_patterns),\n      successfulPatterns: parseInt(row.successful_patterns),\n      successRate: row.total_patterns > 0 ? \n        (parseInt(row.successful_patterns) / parseInt(row.total_patterns) * 100).toFixed(2) : '0.00',\n      avgReturn: parseFloat(row.avg_return || 0).toFixed(2),\n      avgAccuracy: parseFloat(row.avg_accuracy || 0).toFixed(4),\n      avgTimeToTarget: parseFloat(row.avg_time_to_target || 0).toFixed(1),\n      avgConfidence: parseFloat(row.avg_confidence || 0).toFixed(4),\n      maxReturn: parseFloat(row.max_return || 0).toFixed(2),\n      minReturn: parseFloat(row.min_return || 0).toFixed(2)\n    }));\n\n    // Overall statistics\n    const overallStats = await query(`\n      SELECT \n        COUNT(DISTINCT dp.id) as total_patterns_evaluated,\n        COUNT(CASE WHEN pp.target_hit = true THEN 1 END) as total_successful,\n        AVG(pp.percentage_change) as overall_avg_return,\n        AVG(pp.accuracy_score) as overall_avg_accuracy\n      FROM pattern_performance pp\n      JOIN detected_patterns dp ON pp.detected_pattern_id = dp.id\n      WHERE pp.evaluation_date >= NOW() - INTERVAL $1 DAY\n    `, [parseInt(days)]);\n\n    const overallData = overallStats.rows[0];\n    const overall = {\n      totalPatternsEvaluated: parseInt(overallData.total_patterns_evaluated || 0),\n      totalSuccessful: parseInt(overallData.total_successful || 0),\n      overallSuccessRate: overallData.total_patterns_evaluated > 0 ? \n        (parseInt(overallData.total_successful) / parseInt(overallData.total_patterns_evaluated) * 100).toFixed(2) : '0.00',\n      overallAvgReturn: parseFloat(overallData.overall_avg_return || 0).toFixed(2),\n      overallAvgAccuracy: parseFloat(overallData.overall_avg_accuracy || 0).toFixed(4)\n    };\n\n    res.json({\n      success: true,\n      performance,\n      overall,\n      filters: {\n        symbol,\n        patternType: pattern_type,\n        timeframe,\n        days\n      },\n      generatedAt: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching pattern performance:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern performance',\n      details: error.message\n    });\n  }\n});\n\n/**\n * GET /api/patterns/alerts\n * Get pattern-based alerts\n */\nrouter.get('/alerts', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { is_sent = false, priority, limit = 50 } = req.query;\n\n    let whereClause = 'WHERE 1=1';\n    let params = [];\n    let paramIndex = 1;\n\n    // Filter by sent status\n    if (is_sent !== undefined) {\n      whereClause += ` AND pa.is_sent = $${paramIndex}`;\n      params.push(is_sent === 'true');\n      paramIndex++;\n    }\n\n    // Filter by priority\n    if (priority) {\n      whereClause += ` AND pa.priority = $${paramIndex}`;\n      params.push(priority);\n      paramIndex++;\n    }\n\n    const result = await query(`\n      SELECT \n        pa.id,\n        pa.alert_type,\n        pa.message,\n        pa.is_sent,\n        pa.sent_at,\n        pa.priority,\n        pa.created_at,\n        dp.symbol,\n        dp.timeframe,\n        dp.confidence_score,\n        dp.direction,\n        pt.name as pattern_name,\n        pt.category\n      FROM pattern_alerts pa\n      JOIN detected_patterns dp ON pa.detected_pattern_id = dp.id\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      ${whereClause}\n      ORDER BY pa.created_at DESC\n      LIMIT $${paramIndex}\n    `, [...params, parseInt(limit)]);\n\n    const alerts = result.rows.map(row => ({\n      id: row.id,\n      alertType: row.alert_type,\n      message: row.message,\n      isSent: row.is_sent,\n      sentAt: row.sent_at,\n      priority: row.priority,\n      createdAt: row.created_at,\n      symbol: row.symbol,\n      timeframe: row.timeframe,\n      patternName: row.pattern_name,\n      category: row.category,\n      confidence: parseFloat(row.confidence_score),\n      direction: row.direction\n    }));\n\n    res.json({\n      success: true,\n      alerts,\n      total: alerts.length,\n      filters: {\n        isSent: is_sent,\n        priority\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching pattern alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern alerts',\n      details: error.message\n    });\n  }\n});\n\n/**\n * POST /api/patterns/alerts/:id/mark-sent\n * Mark an alert as sent\n */\nrouter.post('/alerts/:id/mark-sent', async (req, res) => {\n  try {\n    const alertId = parseInt(req.params.id);\n\n    if (!alertId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid alert ID'\n      });\n    }\n\n    const result = await query(`\n      UPDATE pattern_alerts\n      SET is_sent = true, sent_at = NOW()\n      WHERE id = $1\n      RETURNING *\n    `, [alertId]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Alert marked as sent',\n      alert: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Error marking alert as sent:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to mark alert as sent',\n      details: error.message\n    });\n  }\n});\n\n/**\n * GET /api/patterns/dashboard\n * Get pattern recognition dashboard data\n */\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const { timeframe = '1d', days = 7 } = req.query;\n\n    // Recent patterns\n    const recentPatterns = await query(`\n      SELECT \n        dp.symbol,\n        dp.detection_date,\n        dp.confidence_score,\n        dp.direction,\n        dp.signal_strength,\n        pt.name as pattern_name,\n        pt.category\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      WHERE dp.timeframe = $1 \n        AND dp.detection_date >= NOW() - INTERVAL $2 DAY\n        AND dp.status = 'active'\n      ORDER BY dp.detection_date DESC, dp.confidence_score DESC\n      LIMIT 10\n    `, [timeframe, parseInt(days)]);\n\n    // Pattern categories distribution\n    const categoryStats = await query(`\n      SELECT \n        pt.category,\n        COUNT(*) as count,\n        AVG(dp.confidence_score) as avg_confidence\n      FROM detected_patterns dp\n      JOIN pattern_types pt ON dp.pattern_type_id = pt.id\n      WHERE dp.timeframe = $1 \n        AND dp.detection_date >= NOW() - INTERVAL $2 DAY\n        AND dp.status = 'active'\n      GROUP BY pt.category\n      ORDER BY count DESC\n    `, [timeframe, parseInt(days)]);\n\n    // Signal strength distribution\n    const signalStats = await query(`\n      SELECT \n        signal_strength,\n        COUNT(*) as count\n      FROM detected_patterns\n      WHERE timeframe = $1 \n        AND detection_date >= NOW() - INTERVAL $2 DAY\n        AND status = 'active'\n      GROUP BY signal_strength\n      ORDER BY \n        CASE signal_strength\n          WHEN 'very_strong' THEN 1\n          WHEN 'strong' THEN 2\n          WHEN 'moderate' THEN 3\n          WHEN 'weak' THEN 4\n        END\n    `, [timeframe, parseInt(days)]);\n\n    // Direction distribution\n    const directionStats = await query(`\n      SELECT \n        direction,\n        COUNT(*) as count,\n        AVG(confidence_score) as avg_confidence\n      FROM detected_patterns\n      WHERE timeframe = $1 \n        AND detection_date >= NOW() - INTERVAL $2 DAY\n        AND status = 'active'\n      GROUP BY direction\n    `, [timeframe, parseInt(days)]);\n\n    // Top performing symbols\n    const topSymbols = await query(`\n      SELECT \n        symbol,\n        COUNT(*) as pattern_count,\n        AVG(confidence_score) as avg_confidence,\n        COUNT(CASE WHEN direction = 'bullish' THEN 1 END) as bullish_count,\n        COUNT(CASE WHEN direction = 'bearish' THEN 1 END) as bearish_count\n      FROM detected_patterns\n      WHERE timeframe = $1 \n        AND detection_date >= NOW() - INTERVAL $2 DAY\n        AND status = 'active'\n      GROUP BY symbol\n      HAVING COUNT(*) >= 2\n      ORDER BY pattern_count DESC, avg_confidence DESC\n      LIMIT 10\n    `, [timeframe, parseInt(days)]);\n\n    res.json({\n      success: true,\n      dashboard: {\n        recentPatterns: recentPatterns.rows.map(row => ({\n          symbol: row.symbol,\n          patternName: row.pattern_name,\n          category: row.category,\n          detectionDate: row.detection_date,\n          confidence: parseFloat(row.confidence_score),\n          direction: row.direction,\n          signalStrength: row.signal_strength\n        })),\n        categoryStats: categoryStats.rows.map(row => ({\n          category: row.category,\n          count: parseInt(row.count),\n          avgConfidence: parseFloat(row.avg_confidence)\n        })),\n        signalStats: signalStats.rows.map(row => ({\n          signalStrength: row.signal_strength,\n          count: parseInt(row.count)\n        })),\n        directionStats: directionStats.rows.map(row => ({\n          direction: row.direction,\n          count: parseInt(row.count),\n          avgConfidence: parseFloat(row.avg_confidence)\n        })),\n        topSymbols: topSymbols.rows.map(row => ({\n          symbol: row.symbol,\n          patternCount: parseInt(row.pattern_count),\n          avgConfidence: parseFloat(row.avg_confidence),\n          bullishCount: parseInt(row.bullish_count),\n          bearishCount: parseInt(row.bearish_count)\n        }))\n      },\n      filters: {\n        timeframe,\n        days\n      },\n      generatedAt: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching pattern dashboard:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern dashboard',\n      details: error.message\n    });\n  }\n});\n\n// Helper functions\nfunction calculateOverallSentiment(patterns) {\n  if (patterns.length === 0) return 'neutral';\n  \n  let bullishScore = 0;\n  let bearishScore = 0;\n  \n  patterns.forEach(pattern => {\n    const weight = pattern.confidence;\n    if (pattern.direction === 'bullish') {\n      bullishScore += weight;\n    } else if (pattern.direction === 'bearish') {\n      bearishScore += weight;\n    }\n  });\n  \n  const total = bullishScore + bearishScore;\n  if (total === 0) return 'neutral';\n  \n  const bullishRatio = bullishScore / total;\n  if (bullishRatio > 0.6) return 'bullish';\n  if (bullishRatio < 0.4) return 'bearish';\n  return 'neutral';\n}\n\n// Real-time pattern detection endpoint\nrouter.post('/detect-realtime', async (req, res) => {\n  try {\n    const { symbols, timeframes = ['1d'], patterns } = req.body;\n    const userId = req.user.sub;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols array is required'\n      });\n    }\n\n    // Detect patterns for specified symbols\n    const detections = [];\n    for (const symbol of symbols) {\n      for (const timeframe of timeframes) {\n        const results = await patternDetector.detectPatterns(symbol, timeframe, patterns);\n        detections.push(...results);\n      }\n    }\n\n    // Store pattern detections\n    await storePatternDetections(detections, userId);\n\n    // Create alerts for significant patterns\n    const alerts = await createPatternAlerts(detections, userId);\n\n    res.json({\n      success: true,\n      data: {\n        patterns_detected: detections.length,\n        alerts_created: alerts.length,\n        detections: detections.slice(0, 20), // Return top 20\n        alerts: alerts\n      }\n    });\n  } catch (error) {\n    console.error('Error in real-time pattern detection:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Pattern detection failed',\n      message: error.message\n    });\n  }\n});\n\n// Get pattern statistics\nrouter.get('/statistics', async (req, res) => {\n  try {\n    const { period = '30d', category } = req.query;\n    \n    // Get pattern statistics\n    const stats = await getPatternStatistics(period, category);\n    \n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    console.error('Error fetching pattern statistics:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern statistics',\n      message: error.message\n    });\n  }\n});\n\n// Get pattern performance\nrouter.get('/performance', async (req, res) => {\n  try {\n    const { pattern_type, timeframe = '1d', days = 30 } = req.query;\n    \n    const performance = await getPatternPerformance(pattern_type, timeframe, days);\n    \n    res.json({\n      success: true,\n      data: performance\n    });\n  } catch (error) {\n    console.error('Error fetching pattern performance:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern performance',\n      message: error.message\n    });\n  }\n});\n\n// Create pattern alert\nrouter.post('/alerts', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const { symbol, pattern_types, min_confidence = 0.7, notify_email = true } = req.body;\n    \n    if (!symbol || !pattern_types || pattern_types.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbol and pattern_types are required'\n      });\n    }\n    \n    // Create pattern-based alerts\n    const alerts = [];\n    for (const patternType of pattern_types) {\n      const alertConfig = {\n        symbol: symbol.toUpperCase(),\n        alertType: 'pattern_detected',\n        condition: 'equals',\n        targetValue: patternType,\n        metadata: {\n          pattern_type: patternType,\n          min_confidence: min_confidence,\n          notify_email: notify_email\n        },\n        message: `Pattern alert: ${patternType} detected for ${symbol}`\n      };\n      \n      const alert = await watchlistAlerts.createAlert(userId, alertConfig);\n      alerts.push(alert);\n    }\n    \n    res.json({\n      success: true,\n      data: alerts,\n      message: `Created ${alerts.length} pattern alerts`\n    });\n  } catch (error) {\n    console.error('Error creating pattern alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create pattern alert',\n      message: error.message\n    });\n  }\n});\n\n// Get available pattern types\nrouter.get('/types', (req, res) => {\n  try {\n    const patternTypes = [\n      {\n        id: 'head_and_shoulders',\n        name: 'Head and Shoulders',\n        category: 'reversal',\n        description: 'Bearish reversal pattern with three peaks',\n        reliability: 'high',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'inverse_head_and_shoulders',\n        name: 'Inverse Head and Shoulders',\n        category: 'reversal',\n        description: 'Bullish reversal pattern with three troughs',\n        reliability: 'high',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'double_top',\n        name: 'Double Top',\n        category: 'reversal',\n        description: 'Bearish reversal with two peaks at similar levels',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'double_bottom',\n        name: 'Double Bottom',\n        category: 'reversal',\n        description: 'Bullish reversal with two troughs at similar levels',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'triangle_ascending',\n        name: 'Ascending Triangle',\n        category: 'continuation',\n        description: 'Bullish continuation pattern with horizontal resistance',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'triangle_descending',\n        name: 'Descending Triangle',\n        category: 'continuation',\n        description: 'Bearish continuation pattern with horizontal support',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'triangle_symmetrical',\n        name: 'Symmetrical Triangle',\n        category: 'continuation',\n        description: 'Neutral pattern with converging support and resistance',\n        reliability: 'low',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'flag_bull',\n        name: 'Bull Flag',\n        category: 'continuation',\n        description: 'Bullish continuation after strong upward move',\n        reliability: 'high',\n        timeframe_suitability: ['1h', '1d']\n      },\n      {\n        id: 'flag_bear',\n        name: 'Bear Flag',\n        category: 'continuation',\n        description: 'Bearish continuation after strong downward move',\n        reliability: 'high',\n        timeframe_suitability: ['1h', '1d']\n      },\n      {\n        id: 'cup_and_handle',\n        name: 'Cup and Handle',\n        category: 'continuation',\n        description: 'Bullish continuation pattern with rounded bottom',\n        reliability: 'high',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'wedge_rising',\n        name: 'Rising Wedge',\n        category: 'reversal',\n        description: 'Bearish pattern with upward sloping support and resistance',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      },\n      {\n        id: 'wedge_falling',\n        name: 'Falling Wedge',\n        category: 'reversal',\n        description: 'Bullish pattern with downward sloping support and resistance',\n        reliability: 'medium',\n        timeframe_suitability: ['1d', '1w']\n      }\n    ];\n    \n    res.json({\n      success: true,\n      data: patternTypes\n    });\n  } catch (error) {\n    console.error('Error fetching pattern types:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pattern types'\n    });\n  }\n});\n\n// Helper functions\nasync function storePatternDetections(detections, userId) {\n  if (!detections || detections.length === 0) return;\n  \n  try {\n    for (const detection of detections) {\n      await query(`\n        INSERT INTO pattern_detections (\n          user_id, symbol, pattern_type, timeframe, confidence_score,\n          detection_data, start_date, end_date, status, detected_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n        ON CONFLICT (symbol, pattern_type, timeframe, start_date)\n        DO UPDATE SET\n          confidence_score = EXCLUDED.confidence_score,\n          detection_data = EXCLUDED.detection_data,\n          status = EXCLUDED.status,\n          detected_at = EXCLUDED.detected_at\n      `, [\n        userId,\n        detection.symbol,\n        detection.pattern_type,\n        detection.timeframe,\n        detection.confidence,\n        JSON.stringify(detection.data),\n        detection.start_date,\n        detection.end_date,\n        'active'\n      ]);\n    }\n  } catch (error) {\n    console.error('Error storing pattern detections:', error);\n  }\n}\n\nasync function createPatternAlerts(detections, userId) {\n  const alerts = [];\n  \n  try {\n    for (const detection of detections) {\n      if (detection.confidence >= 0.75) { // High confidence patterns\n        const alertConfig = {\n          symbol: detection.symbol,\n          alertType: 'pattern_detected',\n          condition: 'equals',\n          targetValue: detection.pattern_type,\n          metadata: {\n            pattern_type: detection.pattern_type,\n            confidence: detection.confidence,\n            timeframe: detection.timeframe\n          },\n          message: `High confidence ${detection.pattern_type} pattern detected for ${detection.symbol} (${(detection.confidence * 100).toFixed(1)}% confidence)`\n        };\n        \n        const alert = await watchlistAlerts.createAlert(userId, alertConfig);\n        alerts.push(alert);\n      }\n    }\n  } catch (error) {\n    console.error('Error creating pattern alerts:', error);\n  }\n  \n  return alerts;\n}\n\nasync function getPatternStatistics(period, category) {\n  try {\n    const periodClause = {\n      '7d': \"detected_at >= NOW() - INTERVAL '7 days'\",\n      '30d': \"detected_at >= NOW() - INTERVAL '30 days'\",\n      '90d': \"detected_at >= NOW() - INTERVAL '90 days'\",\n      '1y': \"detected_at >= NOW() - INTERVAL '1 year'\"\n    }[period] || \"detected_at >= NOW() - INTERVAL '30 days'\";\n    \n    let categoryFilter = '';\n    if (category) {\n      categoryFilter = `AND pt.category = '${category}'`;\n    }\n    \n    const result = await query(`\n      SELECT \n        pd.pattern_type,\n        pt.category,\n        pt.name,\n        COUNT(*) as detection_count,\n        AVG(pd.confidence_score) as avg_confidence,\n        COUNT(DISTINCT pd.symbol) as unique_symbols,\n        MAX(pd.detected_at) as latest_detection\n      FROM pattern_detections pd\n      LEFT JOIN pattern_types pt ON pd.pattern_type = pt.id\n      WHERE ${periodClause} ${categoryFilter}\n      GROUP BY pd.pattern_type, pt.category, pt.name\n      ORDER BY detection_count DESC\n    `);\n    \n    return {\n      period,\n      category,\n      statistics: result.rows,\n      total_detections: result.rows.reduce((sum, row) => sum + parseInt(row.detection_count), 0)\n    };\n  } catch (error) {\n    console.error('Error getting pattern statistics:', error);\n    return { period, category, statistics: [], total_detections: 0 };\n  }\n}\n\nasync function getPatternPerformance(patternType, timeframe, days) {\n  try {\n    const result = await query(`\n      SELECT \n        pd.symbol,\n        pd.pattern_type,\n        pd.confidence_score,\n        pd.detected_at,\n        pd.detection_data,\n        -- Calculate performance metrics\n        CASE \n          WHEN pd.pattern_type LIKE '%bull%' OR pd.pattern_type LIKE '%ascending%' OR pd.pattern_type = 'cup_and_handle'\n          THEN 'bullish'\n          WHEN pd.pattern_type LIKE '%bear%' OR pd.pattern_type LIKE '%descending%' OR pd.pattern_type = 'head_and_shoulders'\n          THEN 'bearish'\n          ELSE 'neutral'\n        END as expected_direction\n      FROM pattern_detections pd\n      WHERE pd.pattern_type = $1\n      AND pd.timeframe = $2\n      AND pd.detected_at >= NOW() - INTERVAL '$3 days'\n      ORDER BY pd.detected_at DESC\n    `, [patternType, timeframe, days]);\n    \n    return {\n      pattern_type: patternType,\n      timeframe,\n      period_days: days,\n      total_detections: result.rows.length,\n      performance_data: result.rows\n    };\n  } catch (error) {\n    console.error('Error getting pattern performance:', error);\n    return {\n      pattern_type: patternType,\n      timeframe,\n      period_days: days,\n      total_detections: 0,\n      performance_data: []\n    };\n  }\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}