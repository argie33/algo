{"version":3,"names":["cov_xkspvi43q","actualCoverage","express","s","require","authenticateToken","createValidationMiddleware","sanitizers","tradingStrategyEngine","logger","responseFormatter","router","Router","use","strategyValidationSchemas","create","type","required","sanitizer","value","f","string","maxLength","trim","validator","includes","errorMessage","symbols","b","Array","isArray","length","active","boolean","defaultValue","name","description","execute","signal","get","req","res","requestId","locals","userId","user","sub","info","substring","strategies","getUserStrategies","response","success","totalCount","activeCount","filter","is_active","json","error","message","errorStack","stack","details","status","strategyId","params","strategy","getStrategyPerformance","user_id","strategyType","strategy_type","post","startTime","Date","now","parameters","riskManagement","body","strategyConfig","riskPerTrade","maxPositionSize","stopLoss","takeProfit","provider","result","registerStrategy","configuration","totalTime","hasSignal","executionResult","executeStrategy","executionId","executionTime","ordersPlaced","orders","totalValue","put","deactivateStrategy","delete","query","limit","offset","executions","rows","pagination","parseInt","total","executionCount","strategyTypes","momentum","lookbackPeriod","default","min","max","momentumThreshold","rsiOverbought","rsiOversold","mean_reversion","smaLength","buyThreshold","sellThreshold","breakout","breakoutPeriod","volumeMultiplier","pattern_recognition","confidenceThreshold","patterns","supportedProviders","riskManagementDefaults","module","exports"],"sources":["trading-strategies.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst tradingStrategyEngine = require('../utils/tradingStrategyEngine');\nconst logger = require('../utils/logger');\nconst { responseFormatter } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n// Apply authentication middleware to all routes\nrouter.use(authenticateToken);\n\n// Validation schemas for trading strategy endpoints\nconst strategyValidationSchemas = {\n  create: {\n    type: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, trim: true }),\n      validator: (value) => ['momentum', 'mean_reversion', 'breakout', 'pattern_recognition'].includes(value),\n      errorMessage: 'Type must be one of: momentum, mean_reversion, breakout, pattern_recognition'\n    },\n    symbols: {\n      required: true,\n      type: 'array',\n      validator: (value) => Array.isArray(value) && value.length > 0 && value.length <= 10,\n      errorMessage: 'Symbols must be an array with 1-10 stock symbols'\n    },\n    active: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'Active must be true or false'\n    },\n    name: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 100, trim: true }),\n      validator: (value) => !value || (value.length >= 2 && value.length <= 100),\n      errorMessage: 'Name must be 2-100 characters if provided'\n    },\n    description: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 500, trim: true }),\n      validator: (value) => !value || value.length <= 500,\n      errorMessage: 'Description must be 500 characters or less'\n    }\n  },\n  \n  execute: {\n    signal: {\n      type: 'object',\n      validator: (value) => !value || (typeof value === 'object' && value.type),\n      errorMessage: 'Signal must be an object with a type property'\n    }\n  }\n};\n\n// Get all trading strategies for authenticated user\nrouter.get('/', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üìä [${requestId}] Fetching user trading strategies`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    });\n    \n    const strategies = await tradingStrategyEngine.getUserStrategies(userId);\n    \n    const response = responseFormatter.success({\n      strategies,\n      totalCount: strategies.length,\n      activeCount: strategies.filter(s => s.is_active).length\n    }, 'Trading strategies retrieved successfully');\n    \n    logger.info(`‚úÖ [${requestId}] User strategies retrieved`, {\n      totalCount: strategies.length,\n      activeCount: strategies.filter(s => s.is_active).length\n    });\n    \n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error retrieving strategies`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve trading strategies',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get specific trading strategy\nrouter.get('/:strategyId', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const { strategyId } = req.params;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üìä [${requestId}] Fetching strategy details`, {\n      strategyId,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    });\n    \n    const strategy = await tradingStrategyEngine.getStrategyPerformance(strategyId);\n    \n    if (!strategy) {\n      const response = responseFormatter.error('Strategy not found', 404);\n      return res.status(404).json(response);\n    }\n    \n    // Verify ownership\n    if (strategy.user_id !== userId) {\n      const response = responseFormatter.error('Access denied', 403);\n      return res.status(403).json(response);\n    }\n    \n    const response = responseFormatter.success(strategy, 'Strategy details retrieved successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Strategy details retrieved`, {\n      strategyId,\n      strategyType: strategy.strategy_type\n    });\n    \n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error retrieving strategy details`, {\n      error: error.message,\n      errorStack: error.stack,\n      strategyId\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve strategy details',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Create new trading strategy\nrouter.post('/', createValidationMiddleware(strategyValidationSchemas.create), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { type, symbols, parameters, riskManagement, active, name, description } = req.body;\n    \n    logger.info(`üöÄ [${requestId}] Creating new trading strategy`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      strategyType: type,\n      symbols: symbols,\n      active: active\n    });\n    \n    // Build strategy configuration\n    const strategyConfig = {\n      type,\n      symbols,\n      parameters: parameters || {},\n      riskManagement: riskManagement || {\n        riskPerTrade: 0.02,\n        maxPositionSize: 0.1,\n        stopLoss: 0.05,\n        takeProfit: 0.10\n      },\n      active: active || false,\n      name: name || `${type} Strategy`,\n      description: description || `Automated ${type} trading strategy`,\n      provider: 'alpaca'\n    };\n    \n    // Register strategy with engine\n    const result = await tradingStrategyEngine.registerStrategy(userId, strategyConfig);\n    \n    const response = responseFormatter.success({\n      strategyId: result.strategyId,\n      status: result.status,\n      active: result.active,\n      configuration: strategyConfig\n    }, 'Trading strategy created successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Strategy created successfully`, {\n      strategyId: result.strategyId,\n      strategyType: type,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.status(201).json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error creating strategy`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to create trading strategy',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Execute trading strategy\nrouter.post('/:strategyId/execute', createValidationMiddleware(strategyValidationSchemas.execute), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const { strategyId } = req.params;\n  const { signal } = req.body;\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üéØ [${requestId}] Executing trading strategy`, {\n      strategyId,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      hasSignal: !!signal\n    });\n    \n    // Execute strategy\n    const executionResult = await tradingStrategyEngine.executeStrategy(strategyId, signal);\n    \n    const response = responseFormatter.success({\n      executionId: `exec-${Date.now()}`,\n      strategyId,\n      executionResult,\n      executionTime: Date.now() - startTime\n    }, 'Strategy executed successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Strategy executed successfully`, {\n      strategyId,\n      ordersPlaced: executionResult.orders?.length || 0,\n      totalValue: executionResult.totalValue || 0,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error executing strategy`, {\n      error: error.message,\n      errorStack: error.stack,\n      strategyId,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to execute trading strategy',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Update trading strategy\nrouter.put('/:strategyId', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const { strategyId } = req.params;\n  \n  try {\n    const userId = req.user.sub;\n    const { active, parameters, riskManagement, name, description } = req.body;\n    \n    logger.info(`üîÑ [${requestId}] Updating trading strategy`, {\n      strategyId,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      active\n    });\n    \n    // For now, we'll implement a simple active/inactive toggle\n    // More comprehensive updates would require additional validation\n    if (active === false) {\n      const result = await tradingStrategyEngine.deactivateStrategy(strategyId);\n      \n      if (result) {\n        const response = responseFormatter.success({\n          strategyId,\n          status: 'deactivated'\n        }, 'Strategy deactivated successfully');\n        \n        logger.info(`‚úÖ [${requestId}] Strategy deactivated`, { strategyId });\n        res.json(response);\n      } else {\n        const response = responseFormatter.error('Failed to deactivate strategy', 500);\n        res.status(500).json(response);\n      }\n    } else {\n      const response = responseFormatter.error('Strategy updates not fully implemented', 501);\n      res.status(501).json(response);\n    }\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error updating strategy`, {\n      error: error.message,\n      errorStack: error.stack,\n      strategyId\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to update trading strategy',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Delete trading strategy\nrouter.delete('/:strategyId', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const { strategyId } = req.params;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üóëÔ∏è [${requestId}] Deleting trading strategy`, {\n      strategyId,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n    });\n    \n    // First deactivate the strategy\n    await tradingStrategyEngine.deactivateStrategy(strategyId);\n    \n    // Then delete from database\n    const { query } = require('../utils/database');\n    await query(`\n      DELETE FROM trading_strategies \n      WHERE id = $1 AND user_id = $2\n    `, [strategyId, userId]);\n    \n    const response = responseFormatter.success({\n      strategyId,\n      status: 'deleted'\n    }, 'Strategy deleted successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Strategy deleted`, { strategyId });\n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error deleting strategy`, {\n      error: error.message,\n      errorStack: error.stack,\n      strategyId\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to delete trading strategy',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get strategy execution history\nrouter.get('/:strategyId/executions', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const { strategyId } = req.params;\n  const { limit = 50, offset = 0 } = req.query;\n  \n  try {\n    const userId = req.user.sub;\n    \n    logger.info(`üìä [${requestId}] Fetching strategy execution history`, {\n      strategyId,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      limit,\n      offset\n    });\n    \n    const { query } = require('../utils/database');\n    const result = await query(`\n      SELECT \n        e.*,\n        s.user_id\n      FROM strategy_executions e\n      JOIN trading_strategies s ON e.strategy_id = s.id\n      WHERE e.strategy_id = $1 AND s.user_id = $2\n      ORDER BY e.executed_at DESC\n      LIMIT $3 OFFSET $4\n    `, [strategyId, userId, limit, offset]);\n    \n    const response = responseFormatter.success({\n      executions: result.rows,\n      strategyId,\n      pagination: {\n        limit: parseInt(limit),\n        offset: parseInt(offset),\n        total: result.rows.length\n      }\n    }, 'Strategy execution history retrieved successfully');\n    \n    logger.info(`‚úÖ [${requestId}] Execution history retrieved`, {\n      strategyId,\n      executionCount: result.rows.length\n    });\n    \n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error retrieving execution history`, {\n      error: error.message,\n      errorStack: error.stack,\n      strategyId\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve execution history',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get available strategy types and their configurations\nrouter.get('/config/types', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  \n  try {\n    logger.info(`üìã [${requestId}] Fetching available strategy types`);\n    \n    const strategyTypes = {\n      momentum: {\n        name: 'Momentum Strategy',\n        description: 'Follows price momentum and trend direction',\n        parameters: {\n          lookbackPeriod: { type: 'number', default: 20, min: 5, max: 100 },\n          momentumThreshold: { type: 'number', default: 0.02, min: 0.01, max: 0.1 },\n          rsiOverbought: { type: 'number', default: 70, min: 50, max: 90 },\n          rsiOversold: { type: 'number', default: 30, min: 10, max: 50 }\n        }\n      },\n      mean_reversion: {\n        name: 'Mean Reversion Strategy',\n        description: 'Trades based on price returning to historical average',\n        parameters: {\n          lookbackPeriod: { type: 'number', default: 20, min: 10, max: 50 },\n          smaLength: { type: 'number', default: 20, min: 10, max: 50 },\n          buyThreshold: { type: 'number', default: -0.02, min: -0.1, max: -0.01 },\n          sellThreshold: { type: 'number', default: 0.02, min: 0.01, max: 0.1 }\n        }\n      },\n      breakout: {\n        name: 'Breakout Strategy',\n        description: 'Trades on price breaking through support or resistance',\n        parameters: {\n          lookbackPeriod: { type: 'number', default: 50, min: 20, max: 100 },\n          breakoutPeriod: { type: 'number', default: 20, min: 10, max: 50 },\n          volumeMultiplier: { type: 'number', default: 1.5, min: 1.0, max: 3.0 }\n        }\n      },\n      pattern_recognition: {\n        name: 'Pattern Recognition Strategy',\n        description: 'Trades based on technical chart patterns',\n        parameters: {\n          lookbackPeriod: { type: 'number', default: 100, min: 50, max: 200 },\n          confidenceThreshold: { type: 'number', default: 0.7, min: 0.5, max: 0.9 },\n          patterns: { type: 'array', default: ['double_top', 'double_bottom', 'head_shoulders'] }\n        }\n      }\n    };\n    \n    const response = responseFormatter.success({\n      strategyTypes,\n      supportedProviders: ['alpaca'],\n      riskManagementDefaults: {\n        riskPerTrade: 0.02,\n        maxPositionSize: 0.1,\n        stopLoss: 0.05,\n        takeProfit: 0.10\n      }\n    }, 'Strategy configuration retrieved successfully');\n    \n    res.json(response);\n  } catch (error) {\n    logger.error(`‚ùå [${requestId}] Error retrieving strategy config`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve strategy configuration',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}