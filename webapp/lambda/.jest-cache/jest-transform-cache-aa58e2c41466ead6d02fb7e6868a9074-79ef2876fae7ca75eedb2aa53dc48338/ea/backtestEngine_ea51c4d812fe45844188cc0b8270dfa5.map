{"version":3,"names":["cov_8au3s426z","actualCoverage","query","s","require","BacktestEngine","constructor","config","f","initialCapital","b","commission","slippage","maxPositions","startDate","endDate","symbols","benchmark","positions","Map","trades","equity","cash","currentDate","dayCount","metrics","runBacktest","strategyCode","console","log","historicalData","getHistoricalData","length","Error","benchmarkData","getBenchmarkData","dataByDate","groupDataByDate","sortedDates","Object","keys","sort","date","value","marketData","updatePositionValues","checkStopLossAndTakeProfit","executeStrategy","totalValue","calculateTotalValue","push","toFixed","calculateMetrics","finalPositions","Array","from","values","summary","generateSummary","error","context","data","buy","bind","sell","sellAll","getPosition","getTechnicalIndicator","getPrice","message","Math","Date","parseFloat","parseInt","isNaN","isFinite","func","Function","symbol","quantity","price","stopLoss","takeProfit","warn","totalCost","existingPosition","get","newQuantity","newAvgPrice","avgPrice","set","entryDate","action","position","totalRevenue","delete","pnl","field","currentMarketData","indicator","currentPrice","marketValue","unrealizedPnL","unrealizedPnLPercent","positionsToClose","reason","symbolsStr","map","join","result","rows","generateMockData","mockData","random","setDate","getDate","getDay","change","high","low","open","close","volume","floor","toISOString","split","rsi","macd","macd_signal","sma_20","sma_50","sma_200","atr","grouped","row","getEmptyMetrics","returns","calculateReturns","benchmarkReturns","calculateBenchmarkReturns","totalReturn","calculateTotalReturn","totalReturnPercent","calculateTotalReturnPercent","annualizedReturn","calculateAnnualizedReturn","volatility","calculateVolatility","sharpeRatio","calculateSharpeRatio","sortinoRatio","calculateSortinoRatio","maxDrawdown","calculateMaxDrawdown","beta","calculateBeta","alpha","calculateAlpha","informationRatio","calculateInformationRatio","totalTrades","winningTrades","filter","t","losingTrades","winRate","calculateWinRate","averageWin","calculateAverageWin","averageLoss","calculateAverageLoss","profitFactor","calculateProfitFactor","calmarRatio","calculateCalmarRatio","recoveryFactor","calculateRecoveryFactor","payoffRatio","calculatePayoffRatio","i","dailyReturn","initial","final","avgDailyReturn","reduce","sum","r","mean","variance","pow","sqrt","riskFreeRate","avgReturn","negativeReturns","downside","downsideDeviation","peak","point","drawdown","meanReturn","meanBenchmark","covariance","benchmarkVariance","avgBenchmark","excessReturns","avgExcess","trackingError","profitTrades","grossProfit","grossLoss","abs","avgWin","avgLoss","openPositions","finalValue","daysProcessed","module","exports"],"sources":["backtestEngine.js"],"sourcesContent":["const { query } = require('./database');\n\nclass BacktestEngine {\n  constructor(config) {\n    this.config = {\n      initialCapital: config.initialCapital || 100000,\n      commission: config.commission || 0.001, // 0.1%\n      slippage: config.slippage || 0.001, // 0.1%\n      maxPositions: config.maxPositions || 10,\n      startDate: config.startDate,\n      endDate: config.endDate,\n      symbols: config.symbols || [],\n      benchmark: config.benchmark || 'SPY',\n      ...config\n    };\n    \n    this.positions = new Map();\n    this.trades = [];\n    this.equity = [];\n    this.cash = this.config.initialCapital;\n    this.currentDate = null;\n    this.dayCount = 0;\n    this.metrics = {};\n  }\n\n  // Main backtesting execution\n  async runBacktest(strategyCode) {\n    try {\n      console.log('Starting backtest...');\n      \n      // Get historical data for all symbols\n      const historicalData = await this.getHistoricalData();\n      \n      if (!historicalData || historicalData.length === 0) {\n        throw new Error('No historical data found for the specified symbols and date range');\n      }\n\n      // Get benchmark data\n      const benchmarkData = await this.getBenchmarkData();\n      \n      // Group data by date\n      const dataByDate = this.groupDataByDate(historicalData);\n      const sortedDates = Object.keys(dataByDate).sort();\n      \n      console.log(`Processing ${sortedDates.length} trading days`);\n      \n      // Initialize equity tracking\n      this.equity = [{ date: sortedDates[0], value: this.config.initialCapital }];\n      \n      // Run strategy for each trading day\n      for (const date of sortedDates) {\n        this.currentDate = date;\n        this.dayCount++;\n        \n        const marketData = dataByDate[date];\n        \n        // Update position values\n        this.updatePositionValues(marketData);\n        \n        // Check stop losses and take profits\n        this.checkStopLossAndTakeProfit(marketData);\n        \n        // Execute strategy\n        await this.executeStrategy(strategyCode, marketData);\n        \n        // Record daily equity\n        const totalValue = this.calculateTotalValue(marketData);\n        this.equity.push({ date, value: totalValue });\n        \n        // Log progress\n        if (this.dayCount % 100 === 0) {\n          console.log(`Processed ${this.dayCount} days, Current value: $${totalValue.toFixed(2)}`);\n        }\n      }\n      \n      // Calculate final metrics\n      this.metrics = this.calculateMetrics(benchmarkData);\n      \n      console.log('Backtest completed successfully');\n      \n      return {\n        config: this.config,\n        trades: this.trades,\n        equity: this.equity,\n        finalPositions: Array.from(this.positions.values()),\n        metrics: this.metrics,\n        summary: this.generateSummary()\n      };\n    } catch (error) {\n      console.error('Backtest execution error:', error);\n      throw error;\n    }\n  }\n\n  // Execute user's strategy code\n  async executeStrategy(strategyCode, marketData) {\n    // Create a safe execution context\n    const context = {\n      data: marketData,\n      positions: this.positions,\n      cash: this.cash,\n      currentDate: this.currentDate,\n      dayCount: this.dayCount,\n      buy: this.buy.bind(this),\n      sell: this.sell.bind(this),\n      sellAll: this.sellAll.bind(this),\n      getPosition: this.getPosition.bind(this),\n      getTechnicalIndicator: this.getTechnicalIndicator.bind(this),\n      getPrice: this.getPrice.bind(this),\n      log: (message) => console.log(`[${this.currentDate}] ${message}`),\n      Math: Math,\n      Date: Date,\n      parseFloat: parseFloat,\n      parseInt: parseInt,\n      isNaN: isNaN,\n      isFinite: isFinite\n    };\n\n    try {\n      // Execute strategy in isolated context\n      const func = new Function('context', `\n        with(context) {\n          ${strategyCode}\n        }\n      `);\n      \n      await func(context);\n    } catch (error) {\n      throw new Error(`Strategy execution error on ${this.currentDate}: ${error.message}`);\n    }\n  }\n\n  // Buy position\n  buy(symbol, quantity, price = null, stopLoss = null, takeProfit = null) {\n    if (!price) {\n      price = this.getPrice(symbol);\n    }\n    \n    if (!price) {\n      console.warn(`No price data for ${symbol} on ${this.currentDate}`);\n      return false;\n    }\n\n    const totalCost = quantity * price * (1 + this.config.commission + this.config.slippage);\n    \n    if (totalCost > this.cash) {\n      return false; // Insufficient funds\n    }\n\n    const existingPosition = this.positions.get(symbol);\n    if (existingPosition) {\n      // Add to existing position\n      const newQuantity = existingPosition.quantity + quantity;\n      const newAvgPrice = ((existingPosition.quantity * existingPosition.avgPrice) + (quantity * price)) / newQuantity;\n      \n      this.positions.set(symbol, {\n        ...existingPosition,\n        quantity: newQuantity,\n        avgPrice: newAvgPrice,\n        stopLoss: stopLoss || existingPosition.stopLoss,\n        takeProfit: takeProfit || existingPosition.takeProfit\n      });\n    } else {\n      this.positions.set(symbol, {\n        symbol,\n        quantity,\n        avgPrice: price,\n        entryDate: this.currentDate,\n        stopLoss,\n        takeProfit\n      });\n    }\n\n    this.cash -= totalCost;\n    \n    // Record trade\n    this.trades.push({\n      symbol,\n      action: 'BUY',\n      quantity,\n      price,\n      date: this.currentDate,\n      commission: quantity * price * this.config.commission,\n      value: quantity * price\n    });\n\n    return true;\n  }\n\n  // Sell position\n  sell(symbol, quantity, price = null) {\n    if (!price) {\n      price = this.getPrice(symbol);\n    }\n    \n    if (!price) {\n      console.warn(`No price data for ${symbol} on ${this.currentDate}`);\n      return false;\n    }\n\n    const position = this.positions.get(symbol);\n    if (!position || position.quantity < quantity) {\n      return false; // No position or insufficient quantity\n    }\n\n    const totalRevenue = quantity * price * (1 - this.config.commission - this.config.slippage);\n    this.cash += totalRevenue;\n\n    // Update position\n    if (position.quantity === quantity) {\n      this.positions.delete(symbol);\n    } else {\n      this.positions.set(symbol, {\n        ...position,\n        quantity: position.quantity - quantity\n      });\n    }\n\n    // Record trade\n    this.trades.push({\n      symbol,\n      action: 'SELL',\n      quantity,\n      price,\n      date: this.currentDate,\n      commission: quantity * price * this.config.commission,\n      value: quantity * price,\n      pnl: (price - position.avgPrice) * quantity\n    });\n\n    return true;\n  }\n\n  // Sell all of a position\n  sellAll(symbol) {\n    const position = this.positions.get(symbol);\n    if (!position) return false;\n    \n    return this.sell(symbol, position.quantity);\n  }\n\n  // Get position\n  getPosition(symbol) {\n    return this.positions.get(symbol) || null;\n  }\n\n  // Get price for a symbol\n  getPrice(symbol, field = 'close') {\n    const data = this.currentMarketData?.[symbol];\n    return data?.[field] || null;\n  }\n\n  // Get technical indicator\n  getTechnicalIndicator(symbol, indicator) {\n    const data = this.currentMarketData?.[symbol];\n    return data?.[indicator] || null;\n  }\n\n  // Update position values\n  updatePositionValues(marketData) {\n    this.currentMarketData = marketData;\n    \n    for (const [symbol, position] of this.positions) {\n      const currentPrice = this.getPrice(symbol);\n      if (currentPrice) {\n        position.currentPrice = currentPrice;\n        position.marketValue = position.quantity * currentPrice;\n        position.unrealizedPnL = (currentPrice - position.avgPrice) * position.quantity;\n        position.unrealizedPnLPercent = ((currentPrice - position.avgPrice) / position.avgPrice) * 100;\n      }\n    }\n  }\n\n  // Check stop losses and take profits\n  checkStopLossAndTakeProfit(marketData) {\n    const positionsToClose = [];\n    \n    for (const [symbol, position] of this.positions) {\n      const currentPrice = this.getPrice(symbol);\n      if (!currentPrice) continue;\n      \n      // Check stop loss\n      if (position.stopLoss && currentPrice <= position.stopLoss) {\n        positionsToClose.push({ symbol, reason: 'STOP_LOSS', price: currentPrice });\n      }\n      \n      // Check take profit\n      if (position.takeProfit && currentPrice >= position.takeProfit) {\n        positionsToClose.push({ symbol, reason: 'TAKE_PROFIT', price: currentPrice });\n      }\n    }\n    \n    // Close positions\n    for (const { symbol, reason, price } of positionsToClose) {\n      const position = this.positions.get(symbol);\n      if (position) {\n        this.sell(symbol, position.quantity, price);\n        console.log(`Closed position ${symbol} due to ${reason} at $${price}`);\n      }\n    }\n  }\n\n  // Calculate total portfolio value\n  calculateTotalValue(marketData) {\n    let totalValue = this.cash;\n    \n    for (const [symbol, position] of this.positions) {\n      const currentPrice = this.getPrice(symbol) || position.avgPrice;\n      totalValue += position.quantity * currentPrice;\n    }\n    \n    return totalValue;\n  }\n\n  // Get historical data\n  async getHistoricalData() {\n    try {\n      const symbolsStr = this.config.symbols.map(s => `'${s}'`).join(',');\n      \n      const result = await query(`\n        SELECT \n          sd.symbol,\n          sd.date,\n          sd.open,\n          sd.high,\n          sd.low,\n          sd.close,\n          sd.volume,\n          td.rsi,\n          td.macd,\n          td.macd_signal,\n          td.macd_hist,\n          td.sma_20,\n          td.sma_50,\n          td.sma_200,\n          td.ema_9,\n          td.ema_21,\n          td.bbands_upper,\n          td.bbands_middle,\n          td.bbands_lower,\n          td.atr,\n          td.adx\n        FROM stock_data sd\n        LEFT JOIN technical_data_daily td ON sd.symbol = td.symbol AND sd.date = td.date\n        WHERE sd.symbol IN (${symbolsStr})\n        AND sd.date >= $1\n        AND sd.date <= $2\n        ORDER BY sd.date ASC, sd.symbol ASC\n      `, [this.config.startDate, this.config.endDate]);\n      \n      return result.rows;\n    } catch (error) {\n      console.error('Error fetching historical data:', error);\n      \n      // Fallback to mock data for testing\n      return this.generateMockData();\n    }\n  }\n\n  // Generate mock data for testing\n  generateMockData() {\n    const mockData = [];\n    const startDate = new Date(this.config.startDate);\n    const endDate = new Date(this.config.endDate);\n    \n    for (const symbol of this.config.symbols) {\n      let price = 100 + Math.random() * 100; // Random starting price\n      \n      for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {\n        // Skip weekends\n        if (date.getDay() === 0 || date.getDay() === 6) continue;\n        \n        // Generate random price movement\n        const change = (Math.random() - 0.5) * 0.05; // ±2.5% daily change\n        price = price * (1 + change);\n        \n        const high = price * (1 + Math.random() * 0.02);\n        const low = price * (1 - Math.random() * 0.02);\n        const open = low + Math.random() * (high - low);\n        const close = low + Math.random() * (high - low);\n        const volume = Math.floor(Math.random() * 1000000) + 100000;\n        \n        mockData.push({\n          symbol,\n          date: date.toISOString().split('T')[0],\n          open,\n          high,\n          low,\n          close,\n          volume,\n          rsi: 30 + Math.random() * 40,\n          macd: (Math.random() - 0.5) * 2,\n          macd_signal: (Math.random() - 0.5) * 2,\n          sma_20: close * (0.95 + Math.random() * 0.1),\n          sma_50: close * (0.9 + Math.random() * 0.2),\n          sma_200: close * (0.8 + Math.random() * 0.4),\n          atr: close * (0.01 + Math.random() * 0.02)\n        });\n      }\n    }\n    \n    return mockData;\n  }\n\n  // Get benchmark data\n  async getBenchmarkData() {\n    try {\n      const result = await query(`\n        SELECT date, close\n        FROM stock_data\n        WHERE symbol = $1\n        AND date >= $2\n        AND date <= $3\n        ORDER BY date ASC\n      `, [this.config.benchmark, this.config.startDate, this.config.endDate]);\n      \n      return result.rows;\n    } catch (error) {\n      console.error('Error fetching benchmark data:', error);\n      return [];\n    }\n  }\n\n  // Group data by date\n  groupDataByDate(data) {\n    const grouped = {};\n    \n    for (const row of data) {\n      const date = row.date;\n      if (!grouped[date]) {\n        grouped[date] = {};\n      }\n      grouped[date][row.symbol] = row;\n    }\n    \n    return grouped;\n  }\n\n  // Calculate performance metrics\n  calculateMetrics(benchmarkData) {\n    if (this.equity.length < 2) {\n      return this.getEmptyMetrics();\n    }\n\n    const returns = this.calculateReturns(this.equity);\n    const benchmarkReturns = this.calculateBenchmarkReturns(benchmarkData);\n    \n    const metrics = {\n      // Basic metrics\n      totalReturn: this.calculateTotalReturn(),\n      totalReturnPercent: this.calculateTotalReturnPercent(),\n      annualizedReturn: this.calculateAnnualizedReturn(returns),\n      \n      // Risk metrics\n      volatility: this.calculateVolatility(returns),\n      sharpeRatio: this.calculateSharpeRatio(returns),\n      sortinoRatio: this.calculateSortinoRatio(returns),\n      maxDrawdown: this.calculateMaxDrawdown(),\n      \n      // Benchmark comparison\n      beta: this.calculateBeta(returns, benchmarkReturns),\n      alpha: this.calculateAlpha(returns, benchmarkReturns),\n      informationRatio: this.calculateInformationRatio(returns, benchmarkReturns),\n      \n      // Trade statistics\n      totalTrades: this.trades.length,\n      winningTrades: this.trades.filter(t => t.pnl > 0).length,\n      losingTrades: this.trades.filter(t => t.pnl < 0).length,\n      winRate: this.calculateWinRate(),\n      averageWin: this.calculateAverageWin(),\n      averageLoss: this.calculateAverageLoss(),\n      profitFactor: this.calculateProfitFactor(),\n      \n      // Other metrics\n      calmarRatio: this.calculateCalmarRatio(),\n      recoveryFactor: this.calculateRecoveryFactor(),\n      payoffRatio: this.calculatePayoffRatio()\n    };\n\n    return metrics;\n  }\n\n  // Calculate daily returns\n  calculateReturns(equity) {\n    const returns = [];\n    for (let i = 1; i < equity.length; i++) {\n      const dailyReturn = (equity[i].value - equity[i-1].value) / equity[i-1].value;\n      returns.push(dailyReturn);\n    }\n    return returns;\n  }\n\n  // Calculate benchmark returns\n  calculateBenchmarkReturns(benchmarkData) {\n    const returns = [];\n    for (let i = 1; i < benchmarkData.length; i++) {\n      const dailyReturn = (benchmarkData[i].close - benchmarkData[i-1].close) / benchmarkData[i-1].close;\n      returns.push(dailyReturn);\n    }\n    return returns;\n  }\n\n  // Calculate total return\n  calculateTotalReturn() {\n    if (this.equity.length < 2) return 0;\n    const initial = this.equity[0].value;\n    const final = this.equity[this.equity.length - 1].value;\n    return final - initial;\n  }\n\n  // Calculate total return percentage\n  calculateTotalReturnPercent() {\n    if (this.equity.length < 2) return 0;\n    const initial = this.equity[0].value;\n    const final = this.equity[this.equity.length - 1].value;\n    return ((final - initial) / initial) * 100;\n  }\n\n  // Calculate annualized return\n  calculateAnnualizedReturn(returns) {\n    if (returns.length === 0) return 0;\n    const avgDailyReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    return avgDailyReturn * 252 * 100; // 252 trading days per year\n  }\n\n  // Calculate volatility\n  calculateVolatility(returns) {\n    if (returns.length < 2) return 0;\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / returns.length;\n    return Math.sqrt(variance * 252) * 100; // Annualized volatility\n  }\n\n  // Calculate Sharpe ratio\n  calculateSharpeRatio(returns) {\n    if (returns.length === 0) return 0;\n    const riskFreeRate = 0.02; // 2% annual risk-free rate\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const annualizedReturn = avgReturn * 252;\n    const volatility = this.calculateVolatility(returns) / 100;\n    return volatility > 0 ? (annualizedReturn - riskFreeRate) / volatility : 0;\n  }\n\n  // Calculate Sortino ratio\n  calculateSortinoRatio(returns) {\n    if (returns.length === 0) return 0;\n    const riskFreeRate = 0.02;\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const annualizedReturn = avgReturn * 252;\n    \n    const negativeReturns = returns.filter(r => r < 0);\n    if (negativeReturns.length === 0) return annualizedReturn - riskFreeRate;\n    \n    const downside = negativeReturns.reduce((sum, r) => sum + r * r, 0) / negativeReturns.length;\n    const downsideDeviation = Math.sqrt(downside * 252);\n    \n    return downsideDeviation > 0 ? (annualizedReturn - riskFreeRate) / downsideDeviation : 0;\n  }\n\n  // Calculate maximum drawdown\n  calculateMaxDrawdown() {\n    if (this.equity.length < 2) return 0;\n    \n    let maxDrawdown = 0;\n    let peak = this.equity[0].value;\n    \n    for (const point of this.equity) {\n      if (point.value > peak) {\n        peak = point.value;\n      }\n      const drawdown = (peak - point.value) / peak;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    }\n    \n    return maxDrawdown * 100;\n  }\n\n  // Calculate beta\n  calculateBeta(returns, benchmarkReturns) {\n    if (returns.length !== benchmarkReturns.length || returns.length < 2) return 1;\n    \n    const meanReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const meanBenchmark = benchmarkReturns.reduce((sum, r) => sum + r, 0) / benchmarkReturns.length;\n    \n    let covariance = 0;\n    let benchmarkVariance = 0;\n    \n    for (let i = 0; i < returns.length; i++) {\n      covariance += (returns[i] - meanReturn) * (benchmarkReturns[i] - meanBenchmark);\n      benchmarkVariance += Math.pow(benchmarkReturns[i] - meanBenchmark, 2);\n    }\n    \n    return benchmarkVariance > 0 ? covariance / benchmarkVariance : 1;\n  }\n\n  // Calculate alpha\n  calculateAlpha(returns, benchmarkReturns) {\n    if (returns.length === 0 || benchmarkReturns.length === 0) return 0;\n    \n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const avgBenchmark = benchmarkReturns.reduce((sum, r) => sum + r, 0) / benchmarkReturns.length;\n    const beta = this.calculateBeta(returns, benchmarkReturns);\n    const riskFreeRate = 0.02 / 252; // Daily risk-free rate\n    \n    return (avgReturn - (riskFreeRate + beta * (avgBenchmark - riskFreeRate))) * 252 * 100;\n  }\n\n  // Calculate information ratio\n  calculateInformationRatio(returns, benchmarkReturns) {\n    if (returns.length !== benchmarkReturns.length || returns.length < 2) return 0;\n    \n    const excessReturns = returns.map((r, i) => r - benchmarkReturns[i]);\n    const avgExcess = excessReturns.reduce((sum, r) => sum + r, 0) / excessReturns.length;\n    \n    const trackingError = Math.sqrt(\n      excessReturns.reduce((sum, r) => sum + Math.pow(r - avgExcess, 2), 0) / excessReturns.length\n    );\n    \n    return trackingError > 0 ? (avgExcess * Math.sqrt(252)) / (trackingError * Math.sqrt(252)) : 0;\n  }\n\n  // Calculate win rate\n  calculateWinRate() {\n    const profitTrades = this.trades.filter(t => t.pnl > 0);\n    return this.trades.length > 0 ? (profitTrades.length / this.trades.length) * 100 : 0;\n  }\n\n  // Calculate average win\n  calculateAverageWin() {\n    const winningTrades = this.trades.filter(t => t.pnl > 0);\n    return winningTrades.length > 0 ? \n      winningTrades.reduce((sum, t) => sum + t.pnl, 0) / winningTrades.length : 0;\n  }\n\n  // Calculate average loss\n  calculateAverageLoss() {\n    const losingTrades = this.trades.filter(t => t.pnl < 0);\n    return losingTrades.length > 0 ? \n      losingTrades.reduce((sum, t) => sum + t.pnl, 0) / losingTrades.length : 0;\n  }\n\n  // Calculate profit factor\n  calculateProfitFactor() {\n    const grossProfit = this.trades.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0);\n    const grossLoss = Math.abs(this.trades.filter(t => t.pnl < 0).reduce((sum, t) => sum + t.pnl, 0));\n    return grossLoss > 0 ? grossProfit / grossLoss : 0;\n  }\n\n  // Calculate Calmar ratio\n  calculateCalmarRatio() {\n    const annualizedReturn = this.calculateAnnualizedReturn(this.calculateReturns(this.equity)) / 100;\n    const maxDrawdown = this.calculateMaxDrawdown() / 100;\n    return maxDrawdown > 0 ? annualizedReturn / maxDrawdown : 0;\n  }\n\n  // Calculate recovery factor\n  calculateRecoveryFactor() {\n    const totalReturn = this.calculateTotalReturn();\n    const maxDrawdown = this.calculateMaxDrawdown() / 100;\n    return maxDrawdown > 0 ? totalReturn / (maxDrawdown * this.config.initialCapital) : 0;\n  }\n\n  // Calculate payoff ratio\n  calculatePayoffRatio() {\n    const avgWin = this.calculateAverageWin();\n    const avgLoss = Math.abs(this.calculateAverageLoss());\n    return avgLoss > 0 ? avgWin / avgLoss : 0;\n  }\n\n  // Generate summary\n  generateSummary() {\n    const final = this.equity[this.equity.length - 1];\n    const openPositions = Array.from(this.positions.values());\n    \n    return {\n      initialCapital: this.config.initialCapital,\n      finalValue: final?.value || this.config.initialCapital,\n      totalReturn: this.calculateTotalReturn(),\n      totalReturnPercent: this.calculateTotalReturnPercent(),\n      totalTrades: this.trades.length,\n      openPositions: openPositions.length,\n      cash: this.cash,\n      startDate: this.config.startDate,\n      endDate: this.config.endDate,\n      daysProcessed: this.dayCount\n    };\n  }\n\n  // Get empty metrics\n  getEmptyMetrics() {\n    return {\n      totalReturn: 0,\n      totalReturnPercent: 0,\n      annualizedReturn: 0,\n      volatility: 0,\n      sharpeRatio: 0,\n      sortinoRatio: 0,\n      maxDrawdown: 0,\n      beta: 1,\n      alpha: 0,\n      informationRatio: 0,\n      totalTrades: 0,\n      winningTrades: 0,\n      losingTrades: 0,\n      winRate: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      profitFactor: 0,\n      calmarRatio: 0,\n      recoveryFactor: 0,\n      payoffRatio: 0\n    };\n  }\n}\n\nmodule.exports = BacktestEngine;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAM;EAAEE;AAAM,CAAC;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,YAAY,CAAC;AAEvC,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,MAAM,EAAE;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAClB,IAAI,CAACI,MAAM,GAAG;MACZE,cAAc;MAAE;MAAA,CAAAT,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACE,cAAc;MAAA;MAAA,CAAAT,aAAA,GAAAU,CAAA,UAAI,MAAM;MAC/CC,UAAU;MAAE;MAAA,CAAAX,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACI,UAAU;MAAA;MAAA,CAAAX,aAAA,GAAAU,CAAA,UAAI,KAAK;MAAE;MACxCE,QAAQ;MAAE;MAAA,CAAAZ,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACK,QAAQ;MAAA;MAAA,CAAAZ,aAAA,GAAAU,CAAA,UAAI,KAAK;MAAE;MACpCG,YAAY;MAAE;MAAA,CAAAb,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACM,YAAY;MAAA;MAAA,CAAAb,aAAA,GAAAU,CAAA,UAAI,EAAE;MACvCI,SAAS,EAAEP,MAAM,CAACO,SAAS;MAC3BC,OAAO,EAAER,MAAM,CAACQ,OAAO;MACvBC,OAAO;MAAE;MAAA,CAAAhB,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACS,OAAO;MAAA;MAAA,CAAAhB,aAAA,GAAAU,CAAA,UAAI,EAAE;MAC7BO,SAAS;MAAE;MAAA,CAAAjB,aAAA,GAAAU,CAAA,UAAAH,MAAM,CAACU,SAAS;MAAA;MAAA,CAAAjB,aAAA,GAAAU,CAAA,UAAI,KAAK;MACpC,GAAGH;IACL,CAAC;IAAC;IAAAP,aAAA,GAAAG,CAAA;IAEF,IAAI,CAACe,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC;IAAAnB,aAAA,GAAAG,CAAA;IAC3B,IAAI,CAACiB,MAAM,GAAG,EAAE;IAAC;IAAApB,aAAA,GAAAG,CAAA;IACjB,IAAI,CAACkB,MAAM,GAAG,EAAE;IAAC;IAAArB,aAAA,GAAAG,CAAA;IACjB,IAAI,CAACmB,IAAI,GAAG,IAAI,CAACf,MAAM,CAACE,cAAc;IAAC;IAAAT,aAAA,GAAAG,CAAA;IACvC,IAAI,CAACoB,WAAW,GAAG,IAAI;IAAC;IAAAvB,aAAA,GAAAG,CAAA;IACxB,IAAI,CAACqB,QAAQ,GAAG,CAAC;IAAC;IAAAxB,aAAA,GAAAG,CAAA;IAClB,IAAI,CAACsB,OAAO,GAAG,CAAC,CAAC;EACnB;;EAEA;EACA,MAAMC,WAAWA,CAACC,YAAY,EAAE;IAAA;IAAA3B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC9B,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACFyB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;MAEnC;MACA,MAAMC,cAAc;MAAA;MAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC4B,iBAAiB,CAAC,CAAC;MAAC;MAAA/B,aAAA,GAAAG,CAAA;MAEtD;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,WAACoB,cAAc;MAAA;MAAA,CAAA9B,aAAA,GAAAU,CAAA,UAAIoB,cAAc,CAACE,MAAM,KAAK,CAAC,GAAE;QAAA;QAAAhC,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAClD,MAAM,IAAI8B,KAAK,CAAC,mEAAmE,CAAC;MACtF,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAU,CAAA;MAAA;;MAED;MACA,MAAMwB,aAAa;MAAA;MAAA,CAAAlC,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACgC,gBAAgB,CAAC,CAAC;;MAEnD;MACA,MAAMC,UAAU;MAAA;MAAA,CAAApC,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACkC,eAAe,CAACP,cAAc,CAAC;MACvD,MAAMQ,WAAW;MAAA;MAAA,CAAAtC,aAAA,GAAAG,CAAA,QAAGoC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC,CAAC;MAAC;MAAAzC,aAAA,GAAAG,CAAA;MAEnDyB,OAAO,CAACC,GAAG,CAAC,cAAcS,WAAW,CAACN,MAAM,eAAe,CAAC;;MAE5D;MAAA;MAAAhC,aAAA,GAAAG,CAAA;MACA,IAAI,CAACkB,MAAM,GAAG,CAAC;QAAEqB,IAAI,EAAEJ,WAAW,CAAC,CAAC,CAAC;QAAEK,KAAK,EAAE,IAAI,CAACpC,MAAM,CAACE;MAAe,CAAC,CAAC;;MAE3E;MAAA;MAAAT,aAAA,GAAAG,CAAA;MACA,KAAK,MAAMuC,IAAI,IAAIJ,WAAW,EAAE;QAAA;QAAAtC,aAAA,GAAAG,CAAA;QAC9B,IAAI,CAACoB,WAAW,GAAGmB,IAAI;QAAC;QAAA1C,aAAA,GAAAG,CAAA;QACxB,IAAI,CAACqB,QAAQ,EAAE;QAEf,MAAMoB,UAAU;QAAA;QAAA,CAAA5C,aAAA,GAAAG,CAAA,QAAGiC,UAAU,CAACM,IAAI,CAAC;;QAEnC;QAAA;QAAA1C,aAAA,GAAAG,CAAA;QACA,IAAI,CAAC0C,oBAAoB,CAACD,UAAU,CAAC;;QAErC;QAAA;QAAA5C,aAAA,GAAAG,CAAA;QACA,IAAI,CAAC2C,0BAA0B,CAACF,UAAU,CAAC;;QAE3C;QAAA;QAAA5C,aAAA,GAAAG,CAAA;QACA,MAAM,IAAI,CAAC4C,eAAe,CAACpB,YAAY,EAAEiB,UAAU,CAAC;;QAEpD;QACA,MAAMI,UAAU;QAAA;QAAA,CAAAhD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC8C,mBAAmB,CAACL,UAAU,CAAC;QAAC;QAAA5C,aAAA,GAAAG,CAAA;QACxD,IAAI,CAACkB,MAAM,CAAC6B,IAAI,CAAC;UAAER,IAAI;UAAEC,KAAK,EAAEK;QAAW,CAAC,CAAC;;QAE7C;QAAA;QAAAhD,aAAA,GAAAG,CAAA;QACA,IAAI,IAAI,CAACqB,QAAQ,GAAG,GAAG,KAAK,CAAC,EAAE;UAAA;UAAAxB,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAG,CAAA;UAC7ByB,OAAO,CAACC,GAAG,CAAC,aAAa,IAAI,CAACL,QAAQ,0BAA0BwB,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1F,CAAC;QAAA;QAAA;UAAAnD,aAAA,GAAAU,CAAA;QAAA;MACH;;MAEA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MACA,IAAI,CAACsB,OAAO,GAAG,IAAI,CAAC2B,gBAAgB,CAAClB,aAAa,CAAC;MAAC;MAAAlC,aAAA,GAAAG,CAAA;MAEpDyB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAAC;MAAA7B,aAAA,GAAAG,CAAA;MAE/C,OAAO;QACLI,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBa,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBgC,cAAc,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrC,SAAS,CAACsC,MAAM,CAAC,CAAC,CAAC;QACnD/B,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBgC,OAAO,EAAE,IAAI,CAACC,eAAe,CAAC;MAChC,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAG,CAAA;MACdyB,OAAO,CAAC+B,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAA3D,aAAA,GAAAG,CAAA;MAClD,MAAMwD,KAAK;IACb;EACF;;EAEA;EACA,MAAMZ,eAAeA,CAACpB,YAAY,EAAEiB,UAAU,EAAE;IAAA;IAAA5C,aAAA,GAAAQ,CAAA;IAC9C;IACA,MAAMoD,OAAO;IAAA;IAAA,CAAA5D,aAAA,GAAAG,CAAA,QAAG;MACd0D,IAAI,EAAEjB,UAAU;MAChB1B,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBI,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBsC,GAAG,EAAE,IAAI,CAACA,GAAG,CAACC,IAAI,CAAC,IAAI,CAAC;MACxBC,IAAI,EAAE,IAAI,CAACA,IAAI,CAACD,IAAI,CAAC,IAAI,CAAC;MAC1BE,OAAO,EAAE,IAAI,CAACA,OAAO,CAACF,IAAI,CAAC,IAAI,CAAC;MAChCG,WAAW,EAAE,IAAI,CAACA,WAAW,CAACH,IAAI,CAAC,IAAI,CAAC;MACxCI,qBAAqB,EAAE,IAAI,CAACA,qBAAqB,CAACJ,IAAI,CAAC,IAAI,CAAC;MAC5DK,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACL,IAAI,CAAC,IAAI,CAAC;MAClClC,GAAG,EAAGwC,OAAO,IAAK;QAAA;QAAArE,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAyB,OAAO,CAACC,GAAG,CAAC,IAAI,IAAI,CAACN,WAAW,KAAK8C,OAAO,EAAE,CAAC;MAAD,CAAC;MACjEC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;IAAC;IAAA3E,aAAA,GAAAG,CAAA;IAEF,IAAI;MACF;MACA,MAAMyE,IAAI;MAAA;MAAA,CAAA5E,aAAA,GAAAG,CAAA,QAAG,IAAI0E,QAAQ,CAAC,SAAS,EAAE;AAC3C;AACA,YAAYlD,YAAY;AACxB;AACA,OAAO,CAAC;MAAC;MAAA3B,aAAA,GAAAG,CAAA;MAEH,MAAMyE,IAAI,CAAChB,OAAO,CAAC;IACrB,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAG,CAAA;MACd,MAAM,IAAI8B,KAAK,CAAC,+BAA+B,IAAI,CAACV,WAAW,KAAKoC,KAAK,CAACU,OAAO,EAAE,CAAC;IACtF;EACF;;EAEA;EACAP,GAAGA,CAACgB,MAAM,EAAEC,QAAQ,EAAEC,KAAK;EAAA;EAAA,CAAAhF,aAAA,GAAAU,CAAA,UAAG,IAAI,GAAEuE,QAAQ;EAAA;EAAA,CAAAjF,aAAA,GAAAU,CAAA,WAAG,IAAI,GAAEwE,UAAU;EAAA;EAAA,CAAAlF,aAAA,GAAAU,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAV,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACtE,IAAI,CAAC6E,KAAK,EAAE;MAAA;MAAAhF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACV6E,KAAK,GAAG,IAAI,CAACZ,QAAQ,CAACU,MAAM,CAAC;IAC/B,CAAC;IAAA;IAAA;MAAA9E,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAED,IAAI,CAAC6E,KAAK,EAAE;MAAA;MAAAhF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACVyB,OAAO,CAACuD,IAAI,CAAC,qBAAqBL,MAAM,OAAO,IAAI,CAACvD,WAAW,EAAE,CAAC;MAAC;MAAAvB,aAAA,GAAAG,CAAA;MACnE,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAED,MAAM0E,SAAS;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,QAAG4E,QAAQ,GAAGC,KAAK,IAAI,CAAC,GAAG,IAAI,CAACzE,MAAM,CAACI,UAAU,GAAG,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC;IAAC;IAAAZ,aAAA,GAAAG,CAAA;IAEzF,IAAIiF,SAAS,GAAG,IAAI,CAAC9D,IAAI,EAAE;MAAA;MAAAtB,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACzB,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAED,MAAM2E,gBAAgB;IAAA;IAAA,CAAArF,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACe,SAAS,CAACoE,GAAG,CAACR,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAG,CAAA;IACpD,IAAIkF,gBAAgB,EAAE;MAAA;MAAArF,aAAA,GAAAU,CAAA;MACpB;MACA,MAAM6E,WAAW;MAAA;MAAA,CAAAvF,aAAA,GAAAG,CAAA,QAAGkF,gBAAgB,CAACN,QAAQ,GAAGA,QAAQ;MACxD,MAAMS,WAAW;MAAA;MAAA,CAAAxF,aAAA,GAAAG,CAAA,QAAG,CAAEkF,gBAAgB,CAACN,QAAQ,GAAGM,gBAAgB,CAACI,QAAQ,GAAKV,QAAQ,GAAGC,KAAM,IAAIO,WAAW;MAAC;MAAAvF,aAAA,GAAAG,CAAA;MAEjH,IAAI,CAACe,SAAS,CAACwE,GAAG,CAACZ,MAAM,EAAE;QACzB,GAAGO,gBAAgB;QACnBN,QAAQ,EAAEQ,WAAW;QACrBE,QAAQ,EAAED,WAAW;QACrBP,QAAQ;QAAE;QAAA,CAAAjF,aAAA,GAAAU,CAAA,WAAAuE,QAAQ;QAAA;QAAA,CAAAjF,aAAA,GAAAU,CAAA,WAAI2E,gBAAgB,CAACJ,QAAQ;QAC/CC,UAAU;QAAE;QAAA,CAAAlF,aAAA,GAAAU,CAAA,WAAAwE,UAAU;QAAA;QAAA,CAAAlF,aAAA,GAAAU,CAAA,WAAI2E,gBAAgB,CAACH,UAAU;MACvD,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAlF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACL,IAAI,CAACe,SAAS,CAACwE,GAAG,CAACZ,MAAM,EAAE;QACzBA,MAAM;QACNC,QAAQ;QACRU,QAAQ,EAAET,KAAK;QACfW,SAAS,EAAE,IAAI,CAACpE,WAAW;QAC3B0D,QAAQ;QACRC;MACF,CAAC,CAAC;IACJ;IAAC;IAAAlF,aAAA,GAAAG,CAAA;IAED,IAAI,CAACmB,IAAI,IAAI8D,SAAS;;IAEtB;IAAA;IAAApF,aAAA,GAAAG,CAAA;IACA,IAAI,CAACiB,MAAM,CAAC8B,IAAI,CAAC;MACf4B,MAAM;MACNc,MAAM,EAAE,KAAK;MACbb,QAAQ;MACRC,KAAK;MACLtC,IAAI,EAAE,IAAI,CAACnB,WAAW;MACtBZ,UAAU,EAAEoE,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAACzE,MAAM,CAACI,UAAU;MACrDgC,KAAK,EAAEoC,QAAQ,GAAGC;IACpB,CAAC,CAAC;IAAC;IAAAhF,aAAA,GAAAG,CAAA;IAEH,OAAO,IAAI;EACb;;EAEA;EACA6D,IAAIA,CAACc,MAAM,EAAEC,QAAQ,EAAEC,KAAK;EAAA;EAAA,CAAAhF,aAAA,GAAAU,CAAA,WAAG,IAAI,GAAE;IAAA;IAAAV,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACnC,IAAI,CAAC6E,KAAK,EAAE;MAAA;MAAAhF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACV6E,KAAK,GAAG,IAAI,CAACZ,QAAQ,CAACU,MAAM,CAAC;IAC/B,CAAC;IAAA;IAAA;MAAA9E,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAED,IAAI,CAAC6E,KAAK,EAAE;MAAA;MAAAhF,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACVyB,OAAO,CAACuD,IAAI,CAAC,qBAAqBL,MAAM,OAAO,IAAI,CAACvD,WAAW,EAAE,CAAC;MAAC;MAAAvB,aAAA,GAAAG,CAAA;MACnE,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAED,MAAMmF,QAAQ;IAAA;IAAA,CAAA7F,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACe,SAAS,CAACoE,GAAG,CAACR,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAG,CAAA;IAC5C;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,YAACmF,QAAQ;IAAA;IAAA,CAAA7F,aAAA,GAAAU,CAAA,WAAImF,QAAQ,CAACd,QAAQ,GAAGA,QAAQ,GAAE;MAAA;MAAA/E,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC7C,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAED,MAAMoF,YAAY;IAAA;IAAA,CAAA9F,aAAA,GAAAG,CAAA,QAAG4E,QAAQ,GAAGC,KAAK,IAAI,CAAC,GAAG,IAAI,CAACzE,MAAM,CAACI,UAAU,GAAG,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC;IAAC;IAAAZ,aAAA,GAAAG,CAAA;IAC5F,IAAI,CAACmB,IAAI,IAAIwE,YAAY;;IAEzB;IAAA;IAAA9F,aAAA,GAAAG,CAAA;IACA,IAAI0F,QAAQ,CAACd,QAAQ,KAAKA,QAAQ,EAAE;MAAA;MAAA/E,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAClC,IAAI,CAACe,SAAS,CAAC6E,MAAM,CAACjB,MAAM,CAAC;IAC/B,CAAC,MAAM;MAAA;MAAA9E,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MACL,IAAI,CAACe,SAAS,CAACwE,GAAG,CAACZ,MAAM,EAAE;QACzB,GAAGe,QAAQ;QACXd,QAAQ,EAAEc,QAAQ,CAACd,QAAQ,GAAGA;MAChC,CAAC,CAAC;IACJ;;IAEA;IAAA;IAAA/E,aAAA,GAAAG,CAAA;IACA,IAAI,CAACiB,MAAM,CAAC8B,IAAI,CAAC;MACf4B,MAAM;MACNc,MAAM,EAAE,MAAM;MACdb,QAAQ;MACRC,KAAK;MACLtC,IAAI,EAAE,IAAI,CAACnB,WAAW;MACtBZ,UAAU,EAAEoE,QAAQ,GAAGC,KAAK,GAAG,IAAI,CAACzE,MAAM,CAACI,UAAU;MACrDgC,KAAK,EAAEoC,QAAQ,GAAGC,KAAK;MACvBgB,GAAG,EAAE,CAAChB,KAAK,GAAGa,QAAQ,CAACJ,QAAQ,IAAIV;IACrC,CAAC,CAAC;IAAC;IAAA/E,aAAA,GAAAG,CAAA;IAEH,OAAO,IAAI;EACb;;EAEA;EACA8D,OAAOA,CAACa,MAAM,EAAE;IAAA;IAAA9E,aAAA,GAAAQ,CAAA;IACd,MAAMqF,QAAQ;IAAA;IAAA,CAAA7F,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACe,SAAS,CAACoE,GAAG,CAACR,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAG,CAAA;IAC5C,IAAI,CAAC0F,QAAQ,EAAE;MAAA;MAAA7F,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IAE5B,OAAO,IAAI,CAAC6D,IAAI,CAACc,MAAM,EAAEe,QAAQ,CAACd,QAAQ,CAAC;EAC7C;;EAEA;EACAb,WAAWA,CAACY,MAAM,EAAE;IAAA;IAAA9E,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAClB,OAAO,2BAAAH,aAAA,GAAAU,CAAA,eAAI,CAACQ,SAAS,CAACoE,GAAG,CAACR,MAAM,CAAC;IAAA;IAAA,CAAA9E,aAAA,GAAAU,CAAA,WAAI,IAAI;EAC3C;;EAEA;EACA0D,QAAQA,CAACU,MAAM,EAAEmB,KAAK;EAAA;EAAA,CAAAjG,aAAA,GAAAU,CAAA,WAAG,OAAO,GAAE;IAAA;IAAAV,aAAA,GAAAQ,CAAA;IAChC,MAAMqD,IAAI;IAAA;IAAA,CAAA7D,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC+F,iBAAiB,GAAGpB,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAG,CAAA;IAC9C,OAAO,2BAAAH,aAAA,GAAAU,CAAA,WAAAmD,IAAI,GAAGoC,KAAK,CAAC;IAAA;IAAA,CAAAjG,aAAA,GAAAU,CAAA,WAAI,IAAI;EAC9B;;EAEA;EACAyD,qBAAqBA,CAACW,MAAM,EAAEqB,SAAS,EAAE;IAAA;IAAAnG,aAAA,GAAAQ,CAAA;IACvC,MAAMqD,IAAI;IAAA;IAAA,CAAA7D,aAAA,GAAAG,CAAA,QAAG,IAAI,CAAC+F,iBAAiB,GAAGpB,MAAM,CAAC;IAAC;IAAA9E,aAAA,GAAAG,CAAA;IAC9C,OAAO,2BAAAH,aAAA,GAAAU,CAAA,WAAAmD,IAAI,GAAGsC,SAAS,CAAC;IAAA;IAAA,CAAAnG,aAAA,GAAAU,CAAA,WAAI,IAAI;EAClC;;EAEA;EACAmC,oBAAoBA,CAACD,UAAU,EAAE;IAAA;IAAA5C,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC/B,IAAI,CAAC+F,iBAAiB,GAAGtD,UAAU;IAAC;IAAA5C,aAAA,GAAAG,CAAA;IAEpC,KAAK,MAAM,CAAC2E,MAAM,EAAEe,QAAQ,CAAC,IAAI,IAAI,CAAC3E,SAAS,EAAE;MAC/C,MAAMkF,YAAY;MAAA;MAAA,CAAApG,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACiE,QAAQ,CAACU,MAAM,CAAC;MAAC;MAAA9E,aAAA,GAAAG,CAAA;MAC3C,IAAIiG,YAAY,EAAE;QAAA;QAAApG,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAChB0F,QAAQ,CAACO,YAAY,GAAGA,YAAY;QAAC;QAAApG,aAAA,GAAAG,CAAA;QACrC0F,QAAQ,CAACQ,WAAW,GAAGR,QAAQ,CAACd,QAAQ,GAAGqB,YAAY;QAAC;QAAApG,aAAA,GAAAG,CAAA;QACxD0F,QAAQ,CAACS,aAAa,GAAG,CAACF,YAAY,GAAGP,QAAQ,CAACJ,QAAQ,IAAII,QAAQ,CAACd,QAAQ;QAAC;QAAA/E,aAAA,GAAAG,CAAA;QAChF0F,QAAQ,CAACU,oBAAoB,GAAI,CAACH,YAAY,GAAGP,QAAQ,CAACJ,QAAQ,IAAII,QAAQ,CAACJ,QAAQ,GAAI,GAAG;MAChG,CAAC;MAAA;MAAA;QAAAzF,aAAA,GAAAU,CAAA;MAAA;IACH;EACF;;EAEA;EACAoC,0BAA0BA,CAACF,UAAU,EAAE;IAAA;IAAA5C,aAAA,GAAAQ,CAAA;IACrC,MAAMgG,gBAAgB;IAAA;IAAA,CAAAxG,aAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAE5B,KAAK,MAAM,CAAC2E,MAAM,EAAEe,QAAQ,CAAC,IAAI,IAAI,CAAC3E,SAAS,EAAE;MAC/C,MAAMkF,YAAY;MAAA;MAAA,CAAApG,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACiE,QAAQ,CAACU,MAAM,CAAC;MAAC;MAAA9E,aAAA,GAAAG,CAAA;MAC3C,IAAI,CAACiG,YAAY,EAAE;QAAA;QAAApG,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAAA;MAAQ,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAU,CAAA;MAAA;;MAE5B;MAAAV,aAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAmF,QAAQ,CAACZ,QAAQ;MAAA;MAAA,CAAAjF,aAAA,GAAAU,CAAA,WAAI0F,YAAY,IAAIP,QAAQ,CAACZ,QAAQ,GAAE;QAAA;QAAAjF,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAC1DqG,gBAAgB,CAACtD,IAAI,CAAC;UAAE4B,MAAM;UAAE2B,MAAM,EAAE,WAAW;UAAEzB,KAAK,EAAEoB;QAAa,CAAC,CAAC;MAC7E,CAAC;MAAA;MAAA;QAAApG,aAAA,GAAAU,CAAA;MAAA;;MAED;MAAAV,aAAA,GAAAG,CAAA;MACA;MAAI;MAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAmF,QAAQ,CAACX,UAAU;MAAA;MAAA,CAAAlF,aAAA,GAAAU,CAAA,WAAI0F,YAAY,IAAIP,QAAQ,CAACX,UAAU,GAAE;QAAA;QAAAlF,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAC9DqG,gBAAgB,CAACtD,IAAI,CAAC;UAAE4B,MAAM;UAAE2B,MAAM,EAAE,aAAa;UAAEzB,KAAK,EAAEoB;QAAa,CAAC,CAAC;MAC/E,CAAC;MAAA;MAAA;QAAApG,aAAA,GAAAU,CAAA;MAAA;IACH;;IAEA;IAAA;IAAAV,aAAA,GAAAG,CAAA;IACA,KAAK,MAAM;MAAE2E,MAAM;MAAE2B,MAAM;MAAEzB;IAAM,CAAC,IAAIwB,gBAAgB,EAAE;MACxD,MAAMX,QAAQ;MAAA;MAAA,CAAA7F,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACe,SAAS,CAACoE,GAAG,CAACR,MAAM,CAAC;MAAC;MAAA9E,aAAA,GAAAG,CAAA;MAC5C,IAAI0F,QAAQ,EAAE;QAAA;QAAA7F,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACZ,IAAI,CAAC6D,IAAI,CAACc,MAAM,EAAEe,QAAQ,CAACd,QAAQ,EAAEC,KAAK,CAAC;QAAC;QAAAhF,aAAA,GAAAG,CAAA;QAC5CyB,OAAO,CAACC,GAAG,CAAC,mBAAmBiD,MAAM,WAAW2B,MAAM,QAAQzB,KAAK,EAAE,CAAC;MACxE,CAAC;MAAA;MAAA;QAAAhF,aAAA,GAAAU,CAAA;MAAA;IACH;EACF;;EAEA;EACAuC,mBAAmBA,CAACL,UAAU,EAAE;IAAA;IAAA5C,aAAA,GAAAQ,CAAA;IAC9B,IAAIwC,UAAU;IAAA;IAAA,CAAAhD,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACmB,IAAI;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAE3B,KAAK,MAAM,CAAC2E,MAAM,EAAEe,QAAQ,CAAC,IAAI,IAAI,CAAC3E,SAAS,EAAE;MAC/C,MAAMkF,YAAY;MAAA;MAAA,CAAApG,aAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,aAAA,GAAAU,CAAA,eAAI,CAAC0D,QAAQ,CAACU,MAAM,CAAC;MAAA;MAAA,CAAA9E,aAAA,GAAAU,CAAA,WAAImF,QAAQ,CAACJ,QAAQ;MAAC;MAAAzF,aAAA,GAAAG,CAAA;MAChE6C,UAAU,IAAI6C,QAAQ,CAACd,QAAQ,GAAGqB,YAAY;IAChD;IAAC;IAAApG,aAAA,GAAAG,CAAA;IAED,OAAO6C,UAAU;EACnB;;EAEA;EACA,MAAMjB,iBAAiBA,CAAA,EAAG;IAAA;IAAA/B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACxB,IAAI;MACF,MAAMuG,UAAU;MAAA;MAAA,CAAA1G,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACI,MAAM,CAACS,OAAO,CAAC2F,GAAG,CAACxG,CAAC,IAAI;QAAA;QAAAH,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,WAAIA,CAAC,GAAG;MAAD,CAAC,CAAC,CAACyG,IAAI,CAAC,GAAG,CAAC;MAEnE,MAAMC,MAAM;MAAA;MAAA,CAAA7G,aAAA,GAAAG,CAAA,SAAG,MAAMD,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8BwG,UAAU;AACxC;AACA;AACA;AACA,OAAO,EAAE,CAAC,IAAI,CAACnG,MAAM,CAACO,SAAS,EAAE,IAAI,CAACP,MAAM,CAACQ,OAAO,CAAC,CAAC;MAAC;MAAAf,aAAA,GAAAG,CAAA;MAEjD,OAAO0G,MAAM,CAACC,IAAI;IACpB,CAAC,CAAC,OAAOnD,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAG,CAAA;MACdyB,OAAO,CAAC+B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;MAEvD;MAAA;MAAA3D,aAAA,GAAAG,CAAA;MACA,OAAO,IAAI,CAAC4G,gBAAgB,CAAC,CAAC;IAChC;EACF;;EAEA;EACAA,gBAAgBA,CAAA,EAAG;IAAA;IAAA/G,aAAA,GAAAQ,CAAA;IACjB,MAAMwG,QAAQ;IAAA;IAAA,CAAAhH,aAAA,GAAAG,CAAA,SAAG,EAAE;IACnB,MAAMW,SAAS;IAAA;IAAA,CAAAd,aAAA,GAAAG,CAAA,SAAG,IAAIoE,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACO,SAAS,CAAC;IACjD,MAAMC,OAAO;IAAA;IAAA,CAAAf,aAAA,GAAAG,CAAA,SAAG,IAAIoE,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACQ,OAAO,CAAC;IAAC;IAAAf,aAAA,GAAAG,CAAA;IAE9C,KAAK,MAAM2E,MAAM,IAAI,IAAI,CAACvE,MAAM,CAACS,OAAO,EAAE;MACxC,IAAIgE,KAAK;MAAA;MAAA,CAAAhF,aAAA,GAAAG,CAAA,SAAG,GAAG,GAAGmE,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,EAAC,CAAC;MAAA;MAAAjH,aAAA,GAAAG,CAAA;MAEvC,KAAK,IAAIuC,IAAI;MAAA;MAAA,CAAA1C,aAAA,GAAAG,CAAA,SAAG,IAAIoE,IAAI,CAACzD,SAAS,CAAC,GAAE4B,IAAI,IAAI3B,OAAO,EAAE2B,IAAI,CAACwE,OAAO,CAACxE,IAAI,CAACyE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QAAA;QAAAnH,aAAA,GAAAG,CAAA;QACtF;QACA;QAAI;QAAA,CAAAH,aAAA,GAAAU,CAAA,WAAAgC,IAAI,CAAC0E,MAAM,CAAC,CAAC,KAAK,CAAC;QAAA;QAAA,CAAApH,aAAA,GAAAU,CAAA,WAAIgC,IAAI,CAAC0E,MAAM,CAAC,CAAC,KAAK,CAAC,GAAE;UAAA;UAAApH,aAAA,GAAAU,CAAA;UAAAV,aAAA,GAAAG,CAAA;UAAA;QAAQ,CAAC;QAAA;QAAA;UAAAH,aAAA,GAAAU,CAAA;QAAA;;QAEzD;QACA,MAAM2G,MAAM;QAAA;QAAA,CAAArH,aAAA,GAAAG,CAAA,SAAG,CAACmE,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,EAAC,CAAC;QAAA;QAAAjH,aAAA,GAAAG,CAAA;QAC7C6E,KAAK,GAAGA,KAAK,IAAI,CAAC,GAAGqC,MAAM,CAAC;QAE5B,MAAMC,IAAI;QAAA;QAAA,CAAAtH,aAAA,GAAAG,CAAA,SAAG6E,KAAK,IAAI,CAAC,GAAGV,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QAC/C,MAAMM,GAAG;QAAA;QAAA,CAAAvH,aAAA,GAAAG,CAAA,SAAG6E,KAAK,IAAI,CAAC,GAAGV,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;QAC9C,MAAMO,IAAI;QAAA;QAAA,CAAAxH,aAAA,GAAAG,CAAA,SAAGoH,GAAG,GAAGjD,IAAI,CAAC2C,MAAM,CAAC,CAAC,IAAIK,IAAI,GAAGC,GAAG,CAAC;QAC/C,MAAME,KAAK;QAAA;QAAA,CAAAzH,aAAA,GAAAG,CAAA,SAAGoH,GAAG,GAAGjD,IAAI,CAAC2C,MAAM,CAAC,CAAC,IAAIK,IAAI,GAAGC,GAAG,CAAC;QAChD,MAAMG,MAAM;QAAA;QAAA,CAAA1H,aAAA,GAAAG,CAAA,SAAGmE,IAAI,CAACqD,KAAK,CAACrD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,MAAM;QAAC;QAAAjH,aAAA,GAAAG,CAAA;QAE5D6G,QAAQ,CAAC9D,IAAI,CAAC;UACZ4B,MAAM;UACNpC,IAAI,EAAEA,IAAI,CAACkF,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACtCL,IAAI;UACJF,IAAI;UACJC,GAAG;UACHE,KAAK;UACLC,MAAM;UACNI,GAAG,EAAE,EAAE,GAAGxD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,EAAE;UAC5Bc,IAAI,EAAE,CAACzD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;UAC/Be,WAAW,EAAE,CAAC1D,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;UACtCgB,MAAM,EAAER,KAAK,IAAI,IAAI,GAAGnD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;UAC5CiB,MAAM,EAAET,KAAK,IAAI,GAAG,GAAGnD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;UAC3CkB,OAAO,EAAEV,KAAK,IAAI,GAAG,GAAGnD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;UAC5CmB,GAAG,EAAEX,KAAK,IAAI,IAAI,GAAGnD,IAAI,CAAC2C,MAAM,CAAC,CAAC,GAAG,IAAI;QAC3C,CAAC,CAAC;MACJ;IACF;IAAC;IAAAjH,aAAA,GAAAG,CAAA;IAED,OAAO6G,QAAQ;EACjB;;EAEA;EACA,MAAM7E,gBAAgBA,CAAA,EAAG;IAAA;IAAAnC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACvB,IAAI;MACF,MAAM0G,MAAM;MAAA;MAAA,CAAA7G,aAAA,GAAAG,CAAA,SAAG,MAAMD,KAAK,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,EAAE,CAAC,IAAI,CAACK,MAAM,CAACU,SAAS,EAAE,IAAI,CAACV,MAAM,CAACO,SAAS,EAAE,IAAI,CAACP,MAAM,CAACQ,OAAO,CAAC,CAAC;MAAC;MAAAf,aAAA,GAAAG,CAAA;MAExE,OAAO0G,MAAM,CAACC,IAAI;IACpB,CAAC,CAAC,OAAOnD,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAG,CAAA;MACdyB,OAAO,CAAC+B,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAAC;MAAA3D,aAAA,GAAAG,CAAA;MACvD,OAAO,EAAE;IACX;EACF;;EAEA;EACAkC,eAAeA,CAACwB,IAAI,EAAE;IAAA;IAAA7D,aAAA,GAAAQ,CAAA;IACpB,MAAM6H,OAAO;IAAA;IAAA,CAAArI,aAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEnB,KAAK,MAAMmI,GAAG,IAAIzE,IAAI,EAAE;MACtB,MAAMnB,IAAI;MAAA;MAAA,CAAA1C,aAAA,GAAAG,CAAA,SAAGmI,GAAG,CAAC5F,IAAI;MAAC;MAAA1C,aAAA,GAAAG,CAAA;MACtB,IAAI,CAACkI,OAAO,CAAC3F,IAAI,CAAC,EAAE;QAAA;QAAA1C,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAClBkI,OAAO,CAAC3F,IAAI,CAAC,GAAG,CAAC,CAAC;MACpB,CAAC;MAAA;MAAA;QAAA1C,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAG,CAAA;MACDkI,OAAO,CAAC3F,IAAI,CAAC,CAAC4F,GAAG,CAACxD,MAAM,CAAC,GAAGwD,GAAG;IACjC;IAAC;IAAAtI,aAAA,GAAAG,CAAA;IAED,OAAOkI,OAAO;EAChB;;EAEA;EACAjF,gBAAgBA,CAAClB,aAAa,EAAE;IAAA;IAAAlC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC9B,IAAI,IAAI,CAACkB,MAAM,CAACW,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAC1B,OAAO,IAAI,CAACoI,eAAe,CAAC,CAAC;IAC/B,CAAC;IAAA;IAAA;MAAAvI,aAAA,GAAAU,CAAA;IAAA;IAED,MAAM8H,OAAO;IAAA;IAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACsI,gBAAgB,CAAC,IAAI,CAACpH,MAAM,CAAC;IAClD,MAAMqH,gBAAgB;IAAA;IAAA,CAAA1I,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACwI,yBAAyB,CAACzG,aAAa,CAAC;IAEtE,MAAMT,OAAO;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,SAAG;MACd;MACAyI,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACxCC,kBAAkB,EAAE,IAAI,CAACC,2BAA2B,CAAC,CAAC;MACtDC,gBAAgB,EAAE,IAAI,CAACC,yBAAyB,CAACT,OAAO,CAAC;MAEzD;MACAU,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAACX,OAAO,CAAC;MAC7CY,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAACb,OAAO,CAAC;MAC/Cc,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACf,OAAO,CAAC;MACjDgB,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAExC;MACAC,IAAI,EAAE,IAAI,CAACC,aAAa,CAACnB,OAAO,EAAEE,gBAAgB,CAAC;MACnDkB,KAAK,EAAE,IAAI,CAACC,cAAc,CAACrB,OAAO,EAAEE,gBAAgB,CAAC;MACrDoB,gBAAgB,EAAE,IAAI,CAACC,yBAAyB,CAACvB,OAAO,EAAEE,gBAAgB,CAAC;MAE3E;MACAsB,WAAW,EAAE,IAAI,CAAC5I,MAAM,CAACY,MAAM;MAC/BiI,aAAa,EAAE,IAAI,CAAC7I,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;QAAA;QAAAnK,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;MAAD,CAAC,CAAC,CAAChE,MAAM;MACxDoI,YAAY,EAAE,IAAI,CAAChJ,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;QAAA;QAAAnK,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAG,CAAA;QAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;MAAD,CAAC,CAAC,CAAChE,MAAM;MACvDqI,OAAO,EAAE,IAAI,CAACC,gBAAgB,CAAC,CAAC;MAChCC,UAAU,EAAE,IAAI,CAACC,mBAAmB,CAAC,CAAC;MACtCC,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACxCC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAE1C;MACAC,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACxCC,cAAc,EAAE,IAAI,CAACC,uBAAuB,CAAC,CAAC;MAC9CC,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC;IACzC,CAAC;IAAC;IAAAlL,aAAA,GAAAG,CAAA;IAEF,OAAOsB,OAAO;EAChB;;EAEA;EACAgH,gBAAgBA,CAACpH,MAAM,EAAE;IAAA;IAAArB,aAAA,GAAAQ,CAAA;IACvB,MAAMgI,OAAO;IAAA;IAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IACnB,KAAK,IAAIgL,CAAC;IAAA;IAAA,CAAAnL,aAAA,GAAAG,CAAA,SAAG,CAAC,GAAEgL,CAAC,GAAG9J,MAAM,CAACW,MAAM,EAAEmJ,CAAC,EAAE,EAAE;MACtC,MAAMC,WAAW;MAAA;MAAA,CAAApL,aAAA,GAAAG,CAAA,SAAG,CAACkB,MAAM,CAAC8J,CAAC,CAAC,CAACxI,KAAK,GAAGtB,MAAM,CAAC8J,CAAC,GAAC,CAAC,CAAC,CAACxI,KAAK,IAAItB,MAAM,CAAC8J,CAAC,GAAC,CAAC,CAAC,CAACxI,KAAK;MAAC;MAAA3C,aAAA,GAAAG,CAAA;MAC9EqI,OAAO,CAACtF,IAAI,CAACkI,WAAW,CAAC;IAC3B;IAAC;IAAApL,aAAA,GAAAG,CAAA;IACD,OAAOqI,OAAO;EAChB;;EAEA;EACAG,yBAAyBA,CAACzG,aAAa,EAAE;IAAA;IAAAlC,aAAA,GAAAQ,CAAA;IACvC,MAAMgI,OAAO;IAAA;IAAA,CAAAxI,aAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,aAAA,GAAAG,CAAA;IACnB,KAAK,IAAIgL,CAAC;IAAA;IAAA,CAAAnL,aAAA,GAAAG,CAAA,SAAG,CAAC,GAAEgL,CAAC,GAAGjJ,aAAa,CAACF,MAAM,EAAEmJ,CAAC,EAAE,EAAE;MAC7C,MAAMC,WAAW;MAAA;MAAA,CAAApL,aAAA,GAAAG,CAAA,SAAG,CAAC+B,aAAa,CAACiJ,CAAC,CAAC,CAAC1D,KAAK,GAAGvF,aAAa,CAACiJ,CAAC,GAAC,CAAC,CAAC,CAAC1D,KAAK,IAAIvF,aAAa,CAACiJ,CAAC,GAAC,CAAC,CAAC,CAAC1D,KAAK;MAAC;MAAAzH,aAAA,GAAAG,CAAA;MACnGqI,OAAO,CAACtF,IAAI,CAACkI,WAAW,CAAC;IAC3B;IAAC;IAAApL,aAAA,GAAAG,CAAA;IACD,OAAOqI,OAAO;EAChB;;EAEA;EACAK,oBAAoBA,CAAA,EAAG;IAAA;IAAA7I,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACrB,IAAI,IAAI,CAACkB,MAAM,CAACW,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACrC,MAAM2K,OAAO;IAAA;IAAA,CAAArL,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,CAAC,CAAC,CAACsB,KAAK;IACpC,MAAM2I,KAAK;IAAA;IAAA,CAAAtL,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACA,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC,CAACW,KAAK;IAAC;IAAA3C,aAAA,GAAAG,CAAA;IACxD,OAAOmL,KAAK,GAAGD,OAAO;EACxB;;EAEA;EACAtC,2BAA2BA,CAAA,EAAG;IAAA;IAAA/I,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC5B,IAAI,IAAI,CAACkB,MAAM,CAACW,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACrC,MAAM2K,OAAO;IAAA;IAAA,CAAArL,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,CAAC,CAAC,CAACsB,KAAK;IACpC,MAAM2I,KAAK;IAAA;IAAA,CAAAtL,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACA,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC,CAACW,KAAK;IAAC;IAAA3C,aAAA,GAAAG,CAAA;IACxD,OAAQ,CAACmL,KAAK,GAAGD,OAAO,IAAIA,OAAO,GAAI,GAAG;EAC5C;;EAEA;EACApC,yBAAyBA,CAACT,OAAO,EAAE;IAAA;IAAAxI,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACjC,IAAIqI,OAAO,CAACxG,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACnC,MAAM6K,cAAc;IAAA;IAAA,CAAAvL,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAC/E,OAAOoL,cAAc,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;EACrC;;EAEA;EACApC,mBAAmBA,CAACX,OAAO,EAAE;IAAA;IAAAxI,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC3B,IAAIqI,OAAO,CAACxG,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACjC,MAAMiL,IAAI;IAAA;IAAA,CAAA3L,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IACpE,MAAM4J,QAAQ;IAAA;IAAA,CAAA5L,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGnH,IAAI,CAACuH,GAAG,CAACH,CAAC,GAAGC,IAAI,EAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGnD,OAAO,CAACxG,MAAM;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAC7F,OAAOmE,IAAI,CAACwH,IAAI,CAACF,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;EAC1C;;EAEA;EACAvC,oBAAoBA,CAACb,OAAO,EAAE;IAAA;IAAAxI,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC5B,IAAIqI,OAAO,CAACxG,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACnC,MAAMqL,YAAY;IAAA;IAAA,CAAA/L,aAAA,GAAAG,CAAA,SAAG,IAAI,EAAC,CAAC;IAC3B,MAAM6L,SAAS;IAAA;IAAA,CAAAhM,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IACzE,MAAMgH,gBAAgB;IAAA;IAAA,CAAAhJ,aAAA,GAAAG,CAAA,SAAG6L,SAAS,GAAG,GAAG;IACxC,MAAM9C,UAAU;IAAA;IAAA,CAAAlJ,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACgJ,mBAAmB,CAACX,OAAO,CAAC,GAAG,GAAG;IAAC;IAAAxI,aAAA,GAAAG,CAAA;IAC3D,OAAO+I,UAAU,GAAG,CAAC;IAAA;IAAA,CAAAlJ,aAAA,GAAAU,CAAA,WAAG,CAACsI,gBAAgB,GAAG+C,YAAY,IAAI7C,UAAU;IAAA;IAAA,CAAAlJ,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC5E;;EAEA;EACA6I,qBAAqBA,CAACf,OAAO,EAAE;IAAA;IAAAxI,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAC7B,IAAIqI,OAAO,CAACxG,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IACnC,MAAMqL,YAAY;IAAA;IAAA,CAAA/L,aAAA,GAAAG,CAAA,SAAG,IAAI;IACzB,MAAM6L,SAAS;IAAA;IAAA,CAAAhM,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IACzE,MAAMgH,gBAAgB;IAAA;IAAA,CAAAhJ,aAAA,GAAAG,CAAA,SAAG6L,SAAS,GAAG,GAAG;IAExC,MAAMC,eAAe;IAAA;IAAA,CAAAjM,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAAC0B,MAAM,CAACwB,CAAC,IAAI;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAuL,CAAC,GAAG,CAAC;IAAD,CAAC,CAAC;IAAC;IAAA1L,aAAA,GAAAG,CAAA;IACnD,IAAI8L,eAAe,CAACjK,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO6I,gBAAgB,GAAG+C,YAAY;IAAA,CAAC;IAAA;IAAA;MAAA/L,aAAA,GAAAU,CAAA;IAAA;IAEzE,MAAMwL,QAAQ;IAAA;IAAA,CAAAlM,aAAA,GAAAG,CAAA,SAAG8L,eAAe,CAACT,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC,GAAGA,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGO,eAAe,CAACjK,MAAM;IAC5F,MAAMmK,iBAAiB;IAAA;IAAA,CAAAnM,aAAA,GAAAG,CAAA,SAAGmE,IAAI,CAACwH,IAAI,CAACI,QAAQ,GAAG,GAAG,CAAC;IAAC;IAAAlM,aAAA,GAAAG,CAAA;IAEpD,OAAOgM,iBAAiB,GAAG,CAAC;IAAA;IAAA,CAAAnM,aAAA,GAAAU,CAAA,WAAG,CAACsI,gBAAgB,GAAG+C,YAAY,IAAII,iBAAiB;IAAA;IAAA,CAAAnM,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC1F;;EAEA;EACA+I,oBAAoBA,CAAA,EAAG;IAAA;IAAAzJ,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACrB,IAAI,IAAI,CAACkB,MAAM,CAACW,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAErC,IAAI8I,WAAW;IAAA;IAAA,CAAAxJ,aAAA,GAAAG,CAAA,SAAG,CAAC;IACnB,IAAIiM,IAAI;IAAA;IAAA,CAAApM,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,CAAC,CAAC,CAACsB,KAAK;IAAC;IAAA3C,aAAA,GAAAG,CAAA;IAEhC,KAAK,MAAMkM,KAAK,IAAI,IAAI,CAAChL,MAAM,EAAE;MAAA;MAAArB,aAAA,GAAAG,CAAA;MAC/B,IAAIkM,KAAK,CAAC1J,KAAK,GAAGyJ,IAAI,EAAE;QAAA;QAAApM,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QACtBiM,IAAI,GAAGC,KAAK,CAAC1J,KAAK;MACpB,CAAC;MAAA;MAAA;QAAA3C,aAAA,GAAAU,CAAA;MAAA;MACD,MAAM4L,QAAQ;MAAA;MAAA,CAAAtM,aAAA,GAAAG,CAAA,SAAG,CAACiM,IAAI,GAAGC,KAAK,CAAC1J,KAAK,IAAIyJ,IAAI;MAAC;MAAApM,aAAA,GAAAG,CAAA;MAC7C,IAAImM,QAAQ,GAAG9C,WAAW,EAAE;QAAA;QAAAxJ,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAG,CAAA;QAC1BqJ,WAAW,GAAG8C,QAAQ;MACxB,CAAC;MAAA;MAAA;QAAAtM,aAAA,GAAAU,CAAA;MAAA;IACH;IAAC;IAAAV,aAAA,GAAAG,CAAA;IAED,OAAOqJ,WAAW,GAAG,GAAG;EAC1B;;EAEA;EACAG,aAAaA,CAACnB,OAAO,EAAEE,gBAAgB,EAAE;IAAA;IAAA1I,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACvC;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,WAAA8H,OAAO,CAACxG,MAAM,KAAK0G,gBAAgB,CAAC1G,MAAM;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAI8H,OAAO,CAACxG,MAAM,GAAG,CAAC,GAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAE/E,MAAM6L,UAAU;IAAA;IAAA,CAAAvM,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IAC1E,MAAMwK,aAAa;IAAA;IAAA,CAAAxM,aAAA,GAAAG,CAAA,SAAGuI,gBAAgB,CAAC8C,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGhD,gBAAgB,CAAC1G,MAAM;IAE/F,IAAIyK,UAAU;IAAA;IAAA,CAAAzM,aAAA,GAAAG,CAAA,SAAG,CAAC;IAClB,IAAIuM,iBAAiB;IAAA;IAAA,CAAA1M,aAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAE1B,KAAK,IAAIgL,CAAC;IAAA;IAAA,CAAAnL,aAAA,GAAAG,CAAA,SAAG,CAAC,GAAEgL,CAAC,GAAG3C,OAAO,CAACxG,MAAM,EAAEmJ,CAAC,EAAE,EAAE;MAAA;MAAAnL,aAAA,GAAAG,CAAA;MACvCsM,UAAU,IAAI,CAACjE,OAAO,CAAC2C,CAAC,CAAC,GAAGoB,UAAU,KAAK7D,gBAAgB,CAACyC,CAAC,CAAC,GAAGqB,aAAa,CAAC;MAAC;MAAAxM,aAAA,GAAAG,CAAA;MAChFuM,iBAAiB,IAAIpI,IAAI,CAACuH,GAAG,CAACnD,gBAAgB,CAACyC,CAAC,CAAC,GAAGqB,aAAa,EAAE,CAAC,CAAC;IACvE;IAAC;IAAAxM,aAAA,GAAAG,CAAA;IAED,OAAOuM,iBAAiB,GAAG,CAAC;IAAA;IAAA,CAAA1M,aAAA,GAAAU,CAAA,WAAG+L,UAAU,GAAGC,iBAAiB;IAAA;IAAA,CAAA1M,aAAA,GAAAU,CAAA,WAAG,CAAC;EACnE;;EAEA;EACAmJ,cAAcA,CAACrB,OAAO,EAAEE,gBAAgB,EAAE;IAAA;IAAA1I,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACxC;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,WAAA8H,OAAO,CAACxG,MAAM,KAAK,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAIgI,gBAAgB,CAAC1G,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAEpE,MAAMsL,SAAS;IAAA;IAAA,CAAAhM,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAACgD,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGlD,OAAO,CAACxG,MAAM;IACzE,MAAM2K,YAAY;IAAA;IAAA,CAAA3M,aAAA,GAAAG,CAAA,SAAGuI,gBAAgB,CAAC8C,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGhD,gBAAgB,CAAC1G,MAAM;IAC9F,MAAM0H,IAAI;IAAA;IAAA,CAAA1J,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACwJ,aAAa,CAACnB,OAAO,EAAEE,gBAAgB,CAAC;IAC1D,MAAMqD,YAAY;IAAA;IAAA,CAAA/L,aAAA,GAAAG,CAAA,SAAG,IAAI,GAAG,GAAG,EAAC,CAAC;IAAA;IAAAH,aAAA,GAAAG,CAAA;IAEjC,OAAO,CAAC6L,SAAS,IAAID,YAAY,GAAGrC,IAAI,IAAIiD,YAAY,GAAGZ,YAAY,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG;EACxF;;EAEA;EACAhC,yBAAyBA,CAACvB,OAAO,EAAEE,gBAAgB,EAAE;IAAA;IAAA1I,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IACnD;IAAI;IAAA,CAAAH,aAAA,GAAAU,CAAA,WAAA8H,OAAO,CAACxG,MAAM,KAAK0G,gBAAgB,CAAC1G,MAAM;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAI8H,OAAO,CAACxG,MAAM,GAAG,CAAC,GAAE;MAAA;MAAAhC,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAG,CAAA;MAAA,OAAO,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAU,CAAA;IAAA;IAE/E,MAAMkM,aAAa;IAAA;IAAA,CAAA5M,aAAA,GAAAG,CAAA,SAAGqI,OAAO,CAAC7B,GAAG,CAAC,CAAC+E,CAAC,EAAEP,CAAC,KAAK;MAAA;MAAAnL,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAuL,CAAC,GAAGhD,gBAAgB,CAACyC,CAAC,CAAC;IAAD,CAAC,CAAC;IACpE,MAAM0B,SAAS;IAAA;IAAA,CAAA7M,aAAA,GAAAG,CAAA,SAAGyM,aAAa,CAACpB,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGkB,aAAa,CAAC5K,MAAM;IAErF,MAAM8K,aAAa;IAAA;IAAA,CAAA9M,aAAA,GAAAG,CAAA,SAAGmE,IAAI,CAACwH,IAAI,CAC7Bc,aAAa,CAACpB,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA1L,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGnH,IAAI,CAACuH,GAAG,CAACH,CAAC,GAAGmB,SAAS,EAAE,CAAC,CAAC;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGD,aAAa,CAAC5K,MACxF,CAAC;IAAC;IAAAhC,aAAA,GAAAG,CAAA;IAEF,OAAO2M,aAAa,GAAG,CAAC;IAAA;IAAA,CAAA9M,aAAA,GAAAU,CAAA,WAAImM,SAAS,GAAGvI,IAAI,CAACwH,IAAI,CAAC,GAAG,CAAC,IAAKgB,aAAa,GAAGxI,IAAI,CAACwH,IAAI,CAAC,GAAG,CAAC,CAAC;IAAA;IAAA,CAAA9L,aAAA,GAAAU,CAAA,WAAG,CAAC;EAChG;;EAEA;EACA4J,gBAAgBA,CAAA,EAAG;IAAA;IAAAtK,aAAA,GAAAQ,CAAA;IACjB,MAAMuM,YAAY;IAAA;IAAA,CAAA/M,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACiB,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAhG,aAAA,GAAAG,CAAA;IACxD,OAAO,IAAI,CAACiB,MAAM,CAACY,MAAM,GAAG,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAIqM,YAAY,CAAC/K,MAAM,GAAG,IAAI,CAACZ,MAAM,CAACY,MAAM,GAAI,GAAG;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAG,CAAC;EACtF;;EAEA;EACA8J,mBAAmBA,CAAA,EAAG;IAAA;IAAAxK,aAAA,GAAAQ,CAAA;IACpB,MAAMyJ,aAAa;IAAA;IAAA,CAAAjK,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACiB,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAhG,aAAA,GAAAG,CAAA;IACzD,OAAO8J,aAAa,CAACjI,MAAM,GAAG,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAC7BuJ,aAAa,CAACuB,MAAM,CAAC,CAACC,GAAG,EAAEtB,CAAC,KAAK;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGtB,CAAC,CAACnE,GAAG;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGiE,aAAa,CAACjI,MAAM;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC/E;;EAEA;EACAgK,oBAAoBA,CAAA,EAAG;IAAA;IAAA1K,aAAA,GAAAQ,CAAA;IACrB,MAAM4J,YAAY;IAAA;IAAA,CAAApK,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACiB,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC;IAAC;IAAAhG,aAAA,GAAAG,CAAA;IACxD,OAAOiK,YAAY,CAACpI,MAAM,GAAG,CAAC;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAC5B0J,YAAY,CAACoB,MAAM,CAAC,CAACC,GAAG,EAAEtB,CAAC,KAAK;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGtB,CAAC,CAACnE,GAAG;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGoE,YAAY,CAACpI,MAAM;IAAA;IAAA,CAAAhC,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC7E;;EAEA;EACAkK,qBAAqBA,CAAA,EAAG;IAAA;IAAA5K,aAAA,GAAAQ,CAAA;IACtB,MAAMwM,WAAW;IAAA;IAAA,CAAAhN,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACiB,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC,CAACwF,MAAM,CAAC,CAACC,GAAG,EAAEtB,CAAC,KAAK;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGtB,CAAC,CAACnE,GAAG;IAAD,CAAC,EAAE,CAAC,CAAC;IACzF,MAAMiH,SAAS;IAAA;IAAA,CAAAjN,aAAA,GAAAG,CAAA,SAAGmE,IAAI,CAAC4I,GAAG,CAAC,IAAI,CAAC9L,MAAM,CAAC8I,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAgK,CAAC,CAACnE,GAAG,GAAG,CAAC;IAAD,CAAC,CAAC,CAACwF,MAAM,CAAC,CAACC,GAAG,EAAEtB,CAAC,KAAK;MAAA;MAAAnK,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAG,CAAA;MAAA,OAAAsL,GAAG,GAAGtB,CAAC,CAACnE,GAAG;IAAD,CAAC,EAAE,CAAC,CAAC,CAAC;IAAC;IAAAhG,aAAA,GAAAG,CAAA;IAClG,OAAO8M,SAAS,GAAG,CAAC;IAAA;IAAA,CAAAjN,aAAA,GAAAU,CAAA,WAAGsM,WAAW,GAAGC,SAAS;IAAA;IAAA,CAAAjN,aAAA,GAAAU,CAAA,WAAG,CAAC;EACpD;;EAEA;EACAoK,oBAAoBA,CAAA,EAAG;IAAA;IAAA9K,aAAA,GAAAQ,CAAA;IACrB,MAAMwI,gBAAgB;IAAA;IAAA,CAAAhJ,aAAA,GAAAG,CAAA,SAAG,IAAI,CAAC8I,yBAAyB,CAAC,IAAI,CAACR,gBAAgB,CAAC,IAAI,CAACpH,MAAM,CAAC,CAAC,GAAG,GAAG;IACjG,MAAMmI,WAAW;IAAA;IAAA,CAAAxJ,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACsJ,oBAAoB,CAAC,CAAC,GAAG,GAAG;IAAC;IAAAzJ,aAAA,GAAAG,CAAA;IACtD,OAAOqJ,WAAW,GAAG,CAAC;IAAA;IAAA,CAAAxJ,aAAA,GAAAU,CAAA,WAAGsI,gBAAgB,GAAGQ,WAAW;IAAA;IAAA,CAAAxJ,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC7D;;EAEA;EACAsK,uBAAuBA,CAAA,EAAG;IAAA;IAAAhL,aAAA,GAAAQ,CAAA;IACxB,MAAMoI,WAAW;IAAA;IAAA,CAAA5I,aAAA,GAAAG,CAAA,SAAG,IAAI,CAAC0I,oBAAoB,CAAC,CAAC;IAC/C,MAAMW,WAAW;IAAA;IAAA,CAAAxJ,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACsJ,oBAAoB,CAAC,CAAC,GAAG,GAAG;IAAC;IAAAzJ,aAAA,GAAAG,CAAA;IACtD,OAAOqJ,WAAW,GAAG,CAAC;IAAA;IAAA,CAAAxJ,aAAA,GAAAU,CAAA,WAAGkI,WAAW,IAAIY,WAAW,GAAG,IAAI,CAACjJ,MAAM,CAACE,cAAc,CAAC;IAAA;IAAA,CAAAT,aAAA,GAAAU,CAAA,WAAG,CAAC;EACvF;;EAEA;EACAwK,oBAAoBA,CAAA,EAAG;IAAA;IAAAlL,aAAA,GAAAQ,CAAA;IACrB,MAAM2M,MAAM;IAAA;IAAA,CAAAnN,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACqK,mBAAmB,CAAC,CAAC;IACzC,MAAM4C,OAAO;IAAA;IAAA,CAAApN,aAAA,GAAAG,CAAA,SAAGmE,IAAI,CAAC4I,GAAG,CAAC,IAAI,CAACxC,oBAAoB,CAAC,CAAC,CAAC;IAAC;IAAA1K,aAAA,GAAAG,CAAA;IACtD,OAAOiN,OAAO,GAAG,CAAC;IAAA;IAAA,CAAApN,aAAA,GAAAU,CAAA,WAAGyM,MAAM,GAAGC,OAAO;IAAA;IAAA,CAAApN,aAAA,GAAAU,CAAA,WAAG,CAAC;EAC3C;;EAEA;EACAgD,eAAeA,CAAA,EAAG;IAAA;IAAA1D,aAAA,GAAAQ,CAAA;IAChB,MAAM8K,KAAK;IAAA;IAAA,CAAAtL,aAAA,GAAAG,CAAA,SAAG,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACA,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC;IACjD,MAAMqL,aAAa;IAAA;IAAA,CAAArN,aAAA,GAAAG,CAAA,SAAGmD,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrC,SAAS,CAACsC,MAAM,CAAC,CAAC,CAAC;IAAC;IAAAxD,aAAA,GAAAG,CAAA;IAE1D,OAAO;MACLM,cAAc,EAAE,IAAI,CAACF,MAAM,CAACE,cAAc;MAC1C6M,UAAU;MAAE;MAAA,CAAAtN,aAAA,GAAAU,CAAA,WAAA4K,KAAK,EAAE3I,KAAK;MAAA;MAAA,CAAA3C,aAAA,GAAAU,CAAA,WAAI,IAAI,CAACH,MAAM,CAACE,cAAc;MACtDmI,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACxCC,kBAAkB,EAAE,IAAI,CAACC,2BAA2B,CAAC,CAAC;MACtDiB,WAAW,EAAE,IAAI,CAAC5I,MAAM,CAACY,MAAM;MAC/BqL,aAAa,EAAEA,aAAa,CAACrL,MAAM;MACnCV,IAAI,EAAE,IAAI,CAACA,IAAI;MACfR,SAAS,EAAE,IAAI,CAACP,MAAM,CAACO,SAAS;MAChCC,OAAO,EAAE,IAAI,CAACR,MAAM,CAACQ,OAAO;MAC5BwM,aAAa,EAAE,IAAI,CAAC/L;IACtB,CAAC;EACH;;EAEA;EACA+G,eAAeA,CAAA,EAAG;IAAA;IAAAvI,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAG,CAAA;IAChB,OAAO;MACLyI,WAAW,EAAE,CAAC;MACdE,kBAAkB,EAAE,CAAC;MACrBE,gBAAgB,EAAE,CAAC;MACnBE,UAAU,EAAE,CAAC;MACbE,WAAW,EAAE,CAAC;MACdE,YAAY,EAAE,CAAC;MACfE,WAAW,EAAE,CAAC;MACdE,IAAI,EAAE,CAAC;MACPE,KAAK,EAAE,CAAC;MACRE,gBAAgB,EAAE,CAAC;MACnBE,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAChBG,YAAY,EAAE,CAAC;MACfC,OAAO,EAAE,CAAC;MACVE,UAAU,EAAE,CAAC;MACbE,WAAW,EAAE,CAAC;MACdE,YAAY,EAAE,CAAC;MACfE,WAAW,EAAE,CAAC;MACdE,cAAc,EAAE,CAAC;MACjBE,WAAW,EAAE;IACf,CAAC;EACH;AACF;AAAC;AAAAjL,aAAA,GAAAG,CAAA;AAEDqN,MAAM,CAACC,OAAO,GAAGpN,cAAc","ignoreList":[]}