{"version":3,"names":["cov_2qh547gqfk","actualCoverage","rateLimit","s","require","slowDown","helmet","validator","rateLimitConfigs","auth","windowMs","max","message","error","retryAfter","standardHeaders","legacyHeaders","skip","req","f","process","env","NODE_ENV","api","trading","heavy","slowDownConfigs","delayAfter","delayMs","maxDelayMs","sanitizers","string","value","options","b","sanitized","trim","replace","escapeHTML","escape","alphaNumOnly","maxLength","slice","email","normalizeEmail","number","num","parseFloat","isNaN","defaultValue","min","undefined","integer","parseInt","symbol","toUpperCase","boolean","includes","toLowerCase","Boolean","validationSchemas","stockSymbol","required","type","sanitizer","test","errorMessage","pagination","page","limit","userInput","isEmail","username","trade","quantity","price","createValidationMiddleware","schema","res","next","errors","sources","fieldName","rules","Object","entries","found","source","push","length","validationError","validated","requestSizeLimit","contentLength","get","sizeInBytes","limitInBytes","maxSize","sqlInjectionPrevention","checkForSqlInjection","sqlPatterns","some","pattern","checkObject","obj","key","nestedCheck","query","body","params","filter","suspiciousField","badRequest","field","xssPrevention","checkForXss","xssPatterns","sanitizeValue","sanitizeObject","forEach","module","exports"],"sources":["validation.js"],"sourcesContent":["/**\n * Input Validation and Sanitization Middleware\n * Provides comprehensive input validation for API endpoints\n */\n\nconst rateLimit = require('express-rate-limit');\nconst slowDown = require('express-slow-down');\nconst helmet = require('helmet');\nconst validator = require('validator');\n\n/**\n * Rate limiting configurations for different endpoint types\n */\nconst rateLimitConfigs = {\n    // Strict rate limiting for authentication endpoints\n    auth: rateLimit({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 5, // 5 attempts per window\n        message: {\n            error: 'Too many authentication attempts, please try again later',\n            retryAfter: 15 * 60 // 15 minutes in seconds\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            // Skip rate limiting in development mode\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    // Moderate rate limiting for API endpoints\n    api: rateLimit({\n        windowMs: 60 * 1000, // 1 minute\n        max: 100, // 100 requests per minute\n        message: {\n            error: 'Too many API requests, please slow down',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    // Lenient rate limiting for trading endpoints (higher frequency needed)\n    trading: rateLimit({\n        windowMs: 60 * 1000, // 1 minute\n        max: 200, // 200 requests per minute\n        message: {\n            error: 'Trading API rate limit exceeded',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    // Very strict rate limiting for resource-intensive endpoints\n    heavy: rateLimit({\n        windowMs: 5 * 60 * 1000, // 5 minutes\n        max: 10, // 10 requests per 5 minutes\n        message: {\n            error: 'Rate limit exceeded for resource-intensive operation',\n            retryAfter: 5 * 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false\n    })\n};\n\n/**\n * Slow down configurations to add delays before hard rate limits\n */\nconst slowDownConfigs = {\n    api: slowDown({\n        windowMs: 60 * 1000, // 1 minute\n        delayAfter: 50, // After 50 requests\n        delayMs: 500, // Add 500ms delay\n        maxDelayMs: 5000, // Maximum 5 second delay\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    trading: slowDown({\n        windowMs: 60 * 1000, // 1 minute\n        delayAfter: 100, // After 100 requests\n        delayMs: 200, // Add 200ms delay\n        maxDelayMs: 2000, // Maximum 2 second delay\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    })\n};\n\n/**\n * Input sanitization functions\n */\nconst sanitizers = {\n    // Sanitize string input - remove dangerous characters\n    string: (value, options = {}) => {\n        if (typeof value !== 'string') return '';\n        \n        let sanitized = value.trim();\n        \n        // Remove null bytes\n        sanitized = sanitized.replace(/\\0/g, '');\n        \n        // Optional: escape HTML\n        if (options.escapeHTML) {\n            sanitized = validator.escape(sanitized);\n        }\n        \n        // Optional: remove/replace special characters\n        if (options.alphaNumOnly) {\n            sanitized = sanitized.replace(/[^a-zA-Z0-9\\s]/g, '');\n        }\n        \n        // Length limit\n        if (options.maxLength) {\n            sanitized = sanitized.slice(0, options.maxLength);\n        }\n        \n        return sanitized;\n    },\n\n    // Sanitize email input\n    email: (value) => {\n        if (!value || typeof value !== 'string') return '';\n        return validator.normalizeEmail(value.trim()) || '';\n    },\n\n    // Sanitize numeric input\n    number: (value, options = {}) => {\n        const num = parseFloat(value);\n        if (isNaN(num)) return options.defaultValue || 0;\n        \n        if (options.min !== undefined && num < options.min) return options.min;\n        if (options.max !== undefined && num > options.max) return options.max;\n        \n        return num;\n    },\n\n    // Sanitize integer input\n    integer: (value, options = {}) => {\n        const num = parseInt(value);\n        if (isNaN(num)) return options.defaultValue || 0;\n        \n        if (options.min !== undefined && num < options.min) return options.min;\n        if (options.max !== undefined && num > options.max) return options.max;\n        \n        return num;\n    },\n\n    // Sanitize stock symbol\n    symbol: (value) => {\n        if (!value || typeof value !== 'string') return '';\n        return value.trim().toUpperCase().replace(/[^A-Z]/g, '').slice(0, 10);\n    },\n\n    // Sanitize boolean input\n    boolean: (value) => {\n        if (typeof value === 'boolean') return value;\n        if (typeof value === 'string') {\n            return ['true', '1', 'yes', 'on'].includes(value.toLowerCase());\n        }\n        return Boolean(value);\n    }\n};\n\n/**\n * Validation schemas for different types of requests\n */\nconst validationSchemas = {\n    // Stock symbol validation\n    stockSymbol: {\n        symbol: {\n            required: true,\n            type: 'string',\n            sanitizer: sanitizers.symbol,\n            validator: (value) => /^[A-Z]{1,10}$/.test(value),\n            errorMessage: 'Symbol must be 1-10 uppercase letters'\n        }\n    },\n\n    // Pagination validation\n    pagination: {\n        page: {\n            type: 'integer',\n            sanitizer: (value) => sanitizers.integer(value, { min: 1, defaultValue: 1 }),\n            validator: (value) => value >= 1,\n            errorMessage: 'Page must be a positive integer'\n        },\n        limit: {\n            type: 'integer',\n            sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 200, defaultValue: 50 }),\n            validator: (value) => value >= 1 && value <= 200,\n            errorMessage: 'Limit must be between 1 and 200'\n        }\n    },\n\n    // User input validation\n    userInput: {\n        email: {\n            required: true,\n            type: 'string',\n            sanitizer: sanitizers.email,\n            validator: validator.isEmail,\n            errorMessage: 'Invalid email format'\n        },\n        username: {\n            required: true,\n            type: 'string',\n            sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n            validator: (value) => /^[a-zA-Z0-9_-]{3,50}$/.test(value),\n            errorMessage: 'Username must be 3-50 characters, alphanumeric, underscore, or dash'\n        }\n    },\n\n    // Trading validation\n    trade: {\n        quantity: {\n            required: true,\n            type: 'number',\n            sanitizer: (value) => sanitizers.number(value, { min: 0.001 }),\n            validator: (value) => value > 0 && value <= 1000000,\n            errorMessage: 'Quantity must be between 0.001 and 1,000,000'\n        },\n        price: {\n            type: 'number',\n            sanitizer: (value) => sanitizers.number(value, { min: 0.01 }),\n            validator: (value) => value > 0 && value <= 100000,\n            errorMessage: 'Price must be between 0.01 and 100,000'\n        }\n    }\n};\n\n/**\n * Generic validation middleware factory\n */\nfunction createValidationMiddleware(schema, options = {}) {\n    return (req, res, next) => {\n        const errors = [];\n        const sanitized = {};\n\n        // Determine source of data (query, body, params)\n        const sources = ['query', 'body', 'params'];\n        \n        for (const [fieldName, rules] of Object.entries(schema)) {\n            let value = null;\n            let found = false;\n\n            // Find the field in request sources\n            for (const source of sources) {\n                if (req[source] && req[source][fieldName] !== undefined) {\n                    value = req[source][fieldName];\n                    found = true;\n                    break;\n                }\n            }\n\n            // Check if required field is missing\n            if (rules.required && (!found || value === null || value === undefined || value === '')) {\n                errors.push(`${fieldName} is required`);\n                continue;\n            }\n\n            // Skip validation if field is not required and not provided\n            if (!found && !rules.required) {\n                continue;\n            }\n\n            // Sanitize the value\n            if (rules.sanitizer) {\n                value = rules.sanitizer(value);\n            }\n\n            // Validate the sanitized value\n            if (rules.validator && !rules.validator(value)) {\n                errors.push(rules.errorMessage || `${fieldName} is invalid`);\n                continue;\n            }\n\n            // Store sanitized value\n            sanitized[fieldName] = value;\n        }\n\n        // If there are validation errors, return them using standardized format\n        if (errors.length > 0) {\n            return res.validationError(errors);\n        }\n\n        // Attach sanitized data to request\n        req.validated = sanitized;\n        next();\n    };\n}\n\n/**\n * Request size limiting middleware\n */\nconst requestSizeLimit = (limit = '1mb') => {\n    return (req, res, next) => {\n        // This would typically be handled by express.json({ limit })\n        // But we can add additional checks here\n        const contentLength = req.get('content-length');\n        if (contentLength) {\n            const sizeInBytes = parseInt(contentLength);\n            const limitInBytes = limit.includes('mb') ? \n                parseInt(limit) * 1024 * 1024 : \n                parseInt(limit);\n            \n            if (sizeInBytes > limitInBytes) {\n                return res.error('Request too large', 413, { maxSize: limit }, 'PAYLOAD_TOO_LARGE');\n            }\n        }\n        next();\n    };\n};\n\n/**\n * SQL injection prevention middleware\n */\nconst sqlInjectionPrevention = (req, res, next) => {\n    const checkForSqlInjection = (value) => {\n        if (typeof value !== 'string') return false;\n        \n        const sqlPatterns = [\n            /(\\s|^)(select|insert|update|delete|drop|create|alter|exec|execute|sp_|xp_)/i,\n            /(union\\s+select|or\\s+1\\s*=\\s*1|and\\s+1\\s*=\\s*1)/i,\n            /('|\\\";|--|\\/\\*|\\*\\/)/,\n            /(script|javascript|vbscript|onload|onerror)/i\n        ];\n        \n        return sqlPatterns.some(pattern => pattern.test(value));\n    };\n\n    const checkObject = (obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n            if (typeof value === 'string' && checkForSqlInjection(value)) {\n                return key;\n            }\n            if (typeof value === 'object' && value !== null) {\n                const nestedCheck = checkObject(value);\n                if (nestedCheck) return `${key}.${nestedCheck}`;\n            }\n        }\n        return null;\n    };\n\n    // Check query parameters, body, and params\n    const sources = [req.query, req.body, req.params].filter(Boolean);\n    \n    for (const source of sources) {\n        const suspiciousField = checkObject(source);\n        if (suspiciousField) {\n            return res.badRequest('Invalid input detected', { field: suspiciousField });\n        }\n    }\n\n    next();\n};\n\n/**\n * XSS prevention middleware\n */\nconst xssPrevention = (req, res, next) => {\n    const checkForXss = (value) => {\n        if (typeof value !== 'string') return false;\n        \n        const xssPatterns = [\n            /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n            /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\n            /javascript:/gi,\n            /on\\w+\\s*=/gi,\n            /<\\s*img[^>]+src[^>]*>/gi\n        ];\n        \n        return xssPatterns.some(pattern => pattern.test(value));\n    };\n\n    const sanitizeValue = (value) => {\n        if (typeof value === 'string') {\n            return validator.escape(value);\n        }\n        return value;\n    };\n\n    const sanitizeObject = (obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n            if (typeof value === 'string') {\n                if (checkForXss(value)) {\n                    obj[key] = sanitizeValue(value);\n                }\n            } else if (typeof value === 'object' && value !== null) {\n                sanitizeObject(value);\n            }\n        }\n    };\n\n    // Sanitize inputs\n    [req.query, req.body, req.params].filter(Boolean).forEach(sanitizeObject);\n    \n    next();\n};\n\nmodule.exports = {\n    rateLimitConfigs,\n    slowDownConfigs,\n    sanitizers,\n    validationSchemas,\n    createValidationMiddleware,\n    requestSizeLimit,\n    sqlInjectionPrevention,\n    xssPrevention\n};"],"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","ignoreList":[]}