{"version":3,"names":["cov_2p6ey3zgfp","actualCoverage","express","s","require","router","Router","authenticateToken","query","use","activeBacktests","Map","post","req","res","f","strategyCode","symbols","startDate","endDate","initialCapital","b","commission","slippage","maxPositions","benchmark","body","status","json","success","error","Array","isArray","length","backtestId","Date","now","Math","random","toString","substr","set","startTime","config","result","get","endTime","message","console","params","backtest","userId","user","sub","userBacktests","id","entries","push","summary","backtests","sort","a","delete","has","rows","templates","name","description","code","Function","dangerousPatterns","pattern","test","source","details","module","exports"],"sources":["backtest-new.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\n\n// Apply authentication to all routes\nrouter.use(authenticateToken);\n\n// Store active backtests\nconst activeBacktests = new Map();\n\n// Run backtest\nrouter.post('/run', async (req, res) => {\n  try {\n    const {\n      strategyCode,\n      symbols,\n      startDate,\n      endDate,\n      initialCapital = 100000,\n      commission = 0.001,\n      slippage = 0.001,\n      maxPositions = 10,\n      benchmark = 'SPY'\n    } = req.body;\n\n    // Validate inputs\n    if (!strategyCode || !symbols || !startDate || !endDate) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required parameters: strategyCode, symbols, startDate, endDate'\n      });\n    }\n\n    if (!Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols must be a non-empty array'\n      });\n    }\n\n    // Create unique backtest ID\n    const backtestId = `backtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Store backtest as running\n    activeBacktests.set(backtestId, {\n      status: 'running',\n      startTime: new Date(),\n      config: {\n        symbols,\n        startDate,\n        endDate,\n        initialCapital,\n        commission,\n        slippage,\n        maxPositions,\n        benchmark\n      }\n    });\n\n    // Start backtest asynchronously\n    const config = {\n      symbols,\n      startDate,\n      endDate,\n      initialCapital,\n      commission,\n      slippage,\n      maxPositions,\n      benchmark\n    };\n\n    // BacktestEngine temporarily disabled - functionality moved to backtest.js\n    // const engine = new BacktestEngine(config);\n    \n    // Run backtest\n    // const result = await engine.runBacktest(strategyCode);\n    \n    // Temporary response until backtest engine is fixed\n    const result = {\n      success: false,\n      error: 'Backtest engine temporarily disabled - use /backtest/run instead'\n    };\n    \n    // Update backtest status\n    activeBacktests.set(backtestId, {\n      status: 'completed',\n      startTime: activeBacktests.get(backtestId).startTime,\n      endTime: new Date(),\n      config,\n      result\n    });\n\n    res.json({\n      success: true,\n      backtestId,\n      result,\n      message: 'Backtest completed successfully'\n    });\n\n  } catch (error) {\n    console.error('Backtest error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Backtest failed',\n      message: error.message\n    });\n  }\n});\n\n// Get backtest status\nrouter.get('/status/:backtestId', (req, res) => {\n  const { backtestId } = req.params;\n  const backtest = activeBacktests.get(backtestId);\n  \n  if (!backtest) {\n    return res.status(404).json({\n      success: false,\n      error: 'Backtest not found'\n    });\n  }\n\n  res.json({\n    success: true,\n    backtest\n  });\n});\n\n// Get backtest result\nrouter.get('/result/:backtestId', (req, res) => {\n  const { backtestId } = req.params;\n  const backtest = activeBacktests.get(backtestId);\n  \n  if (!backtest) {\n    return res.status(404).json({\n      success: false,\n      error: 'Backtest not found'\n    });\n  }\n\n  if (backtest.status !== 'completed') {\n    return res.status(400).json({\n      success: false,\n      error: 'Backtest not completed yet',\n      status: backtest.status\n    });\n  }\n\n  res.json({\n    success: true,\n    result: backtest.result\n  });\n});\n\n// Get user's backtest history\nrouter.get('/history', (req, res) => {\n  const userId = req.user.sub;\n  const userBacktests = [];\n  \n  for (const [id, backtest] of activeBacktests.entries()) {\n    // In a real implementation, you'd filter by userId\n    userBacktests.push({\n      id,\n      status: backtest.status,\n      startTime: backtest.startTime,\n      endTime: backtest.endTime,\n      config: backtest.config,\n      summary: backtest.result?.summary\n    });\n  }\n\n  res.json({\n    success: true,\n    backtests: userBacktests.sort((a, b) => new Date(b.startTime) - new Date(a.startTime))\n  });\n});\n\n// Delete backtest\nrouter.delete('/:backtestId', (req, res) => {\n  const { backtestId } = req.params;\n  \n  if (activeBacktests.has(backtestId)) {\n    activeBacktests.delete(backtestId);\n    res.json({\n      success: true,\n      message: 'Backtest deleted'\n    });\n  } else {\n    res.status(404).json({\n      success: false,\n      error: 'Backtest not found'\n    });\n  }\n});\n\n// Get available symbols for backtesting\nrouter.get('/symbols', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT DISTINCT symbol, company_name, sector, market_cap\n      FROM stock_fundamentals sf\n      JOIN stock_symbols_enhanced sse ON sf.symbol = sse.symbol\n      WHERE market_cap > 1000000000\n      ORDER BY market_cap DESC\n      LIMIT 500\n    `);\n\n    res.json({\n      success: true,\n      symbols: result.rows\n    });\n  } catch (error) {\n    console.error('Error fetching symbols:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch symbols'\n    });\n  }\n});\n\n// Get strategy templates\nrouter.get('/templates', (req, res) => {\n  const templates = [\n    {\n      id: 'buy_and_hold',\n      name: 'Buy and Hold',\n      description: 'Simple buy and hold strategy',\n      code: `\n// Buy and Hold Strategy\nif (dayCount === 1) {\n  // Buy equal amounts of each symbol on first day\n  const cashPerSymbol = cash / data.length;\n  \n  for (const [symbol, stockData] of Object.entries(data)) {\n    const quantity = Math.floor(cashPerSymbol / stockData.close);\n    if (quantity > 0) {\n      buy(symbol, quantity, stockData.close);\n      log('Bought ' + quantity + ' shares of ' + symbol + ' at $' + stockData.close);\n    }\n  }\n}\n`\n    },\n    {\n      id: 'moving_average_crossover',\n      name: 'Moving Average Crossover',\n      description: 'Buy when short MA crosses above long MA',\n      code: `\n// Moving Average Crossover Strategy\nfor (const [symbol, stockData] of Object.entries(data)) {\n  const position = getPosition(symbol);\n  const sma20 = stockData.sma_20;\n  const sma50 = stockData.sma_50;\n  \n  if (!sma20 || !sma50) continue;\n  \n  // Buy signal: SMA20 crosses above SMA50\n  if (sma20 > sma50 && !position) {\n    const quantity = Math.floor(cash * 0.1 / stockData.close); // 10% of cash\n    if (quantity > 0) {\n      buy(symbol, quantity, stockData.close);\n      log('Buy signal: ' + symbol + ' at $' + stockData.close);\n    }\n  }\n  \n  // Sell signal: SMA20 crosses below SMA50\n  if (sma20 < sma50 && position) {\n    sellAll(symbol);\n    log('Sell signal: ' + symbol + ' at $' + stockData.close);\n  }\n}\n`\n    },\n    {\n      id: 'rsi_mean_reversion',\n      name: 'RSI Mean Reversion',\n      description: 'Buy oversold stocks (RSI < 30), sell overbought (RSI > 70)',\n      code: `\n// RSI Mean Reversion Strategy\nfor (const [symbol, stockData] of Object.entries(data)) {\n  const position = getPosition(symbol);\n  const rsi = stockData.rsi;\n  \n  if (!rsi) continue;\n  \n  // Buy signal: RSI < 30 (oversold)\n  if (rsi < 30 && !position) {\n    const quantity = Math.floor(cash * 0.05 / stockData.close); // 5% of cash\n    if (quantity > 0) {\n      buy(symbol, quantity, stockData.close);\n      log('RSI oversold buy: ' + symbol + ' RSI=' + rsi.toFixed(2));\n    }\n  }\n  \n  // Sell signal: RSI > 70 (overbought)\n  if (rsi > 70 && position) {\n    sellAll(symbol);\n    log('RSI overbought sell: ' + symbol + ' RSI=' + rsi.toFixed(2));\n  }\n}\n`\n    },\n    {\n      id: 'momentum_strategy',\n      name: 'Momentum Strategy',\n      description: 'Buy stocks with strong momentum, sell weak ones',\n      code: `\n// Momentum Strategy\nfor (const [symbol, stockData] of Object.entries(data)) {\n  const position = getPosition(symbol);\n  const sma20 = stockData.sma_20;\n  const sma50 = stockData.sma_50;\n  const rsi = stockData.rsi;\n  const price = stockData.close;\n  \n  if (!sma20 || !sma50 || !rsi) continue;\n  \n  // Strong momentum conditions\n  const bullishMomentum = price > sma20 && sma20 > sma50 && rsi > 50 && rsi < 80;\n  const bearishMomentum = price < sma20 && sma20 < sma50 && rsi < 50;\n  \n  // Buy signal\n  if (bullishMomentum && !position) {\n    const quantity = Math.floor(cash * 0.08 / price); // 8% of cash\n    if (quantity > 0) {\n      buy(symbol, quantity, price);\n      log('Momentum buy: ' + symbol + ' at $' + price);\n    }\n  }\n  \n  // Sell signal\n  if (bearishMomentum && position) {\n    sellAll(symbol);\n    log('Momentum sell: ' + symbol + ' at $' + price);\n  }\n}\n`\n    }\n  ];\n\n  res.json({\n    success: true,\n    templates\n  });\n});\n\n// Validate strategy code\nrouter.post('/validate', (req, res) => {\n  const { strategyCode } = req.body;\n  \n  if (!strategyCode) {\n    return res.status(400).json({\n      success: false,\n      error: 'Strategy code is required'\n    });\n  }\n\n  try {\n    // Basic syntax validation\n    new Function('context', `\n      with(context) {\n        ${strategyCode}\n      }\n    `);\n\n    // Check for dangerous patterns\n    const dangerousPatterns = [\n      /require\\s*\\(/,\n      /import\\s+/,\n      /eval\\s*\\(/,\n      /Function\\s*\\(/,\n      /process\\./,\n      /global\\./,\n      /window\\./,\n      /document\\./,\n      /setTimeout/,\n      /setInterval/,\n      /clearTimeout/,\n      /clearInterval/,\n      /XMLHttpRequest/,\n      /fetch\\s*\\(/\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(strategyCode)) {\n        return res.status(400).json({\n          success: false,\n          error: `Dangerous pattern detected: ${pattern.source}`\n        });\n      }\n    }\n\n    res.json({\n      success: true,\n      message: 'Strategy code is valid'\n    });\n\n  } catch (error) {\n    res.status(400).json({\n      success: false,\n      error: 'Syntax error in strategy code',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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lB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAA9B,cAAA,GAAAG,CAAA;IAChDW,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAA9B,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACwC,GAAG,CAAC,YAAY,EAAE,CAAChC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAd,cAAA,GAAAe,CAAA;EACrC,MAAMkD,SAAS;EAAA;EAAA,CAAAjE,cAAA,GAAAG,CAAA,QAAG,CAChB;IACEoD,EAAE,EAAE,cAAc;IAClBW,IAAI,EAAE,cAAc;IACpBC,WAAW,EAAE,8BAA8B;IAC3CC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEb,EAAE,EAAE,0BAA0B;IAC9BW,IAAI,EAAE,0BAA0B;IAChCC,WAAW,EAAE,yCAAyC;IACtDC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEb,EAAE,EAAE,oBAAoB;IACxBW,IAAI,EAAE,oBAAoB;IAC1BC,WAAW,EAAE,4DAA4D;IACzEC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEb,EAAE,EAAE,mBAAmB;IACvBW,IAAI,EAAE,mBAAmB;IACzBC,WAAW,EAAE,iDAAiD;IAC9DC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CACF;EAAC;EAAApE,cAAA,GAAAG,CAAA;EAEFW,GAAG,CAACc,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACboC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAAjE,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACO,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAd,cAAA,GAAAe,CAAA;EACrC,MAAM;IAAEC;EAAa,CAAC;EAAA;EAAA,CAAAhB,cAAA,GAAAG,CAAA,QAAGU,GAAG,CAACa,IAAI;EAAC;EAAA1B,cAAA,GAAAG,CAAA;EAElC,IAAI,CAACa,YAAY,EAAE;IAAA;IAAAhB,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAG,CAAA;IACjB,OAAOW,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC;EAAA;EAAA;IAAA9B,cAAA,GAAAqB,CAAA;EAAA;EAAArB,cAAA,GAAAG,CAAA;EAED,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACF;IACA,IAAIkE,QAAQ,CAAC,SAAS,EAAE;AAC5B;AACA,UAAUrD,YAAY;AACtB;AACA,KAAK,CAAC;;IAEF;IACA,MAAMsD,iBAAiB;IAAA;IAAA,CAAAtE,cAAA,GAAAG,CAAA,QAAG,CACxB,cAAc,EACd,WAAW,EACX,WAAW,EACX,eAAe,EACf,WAAW,EACX,UAAU,EACV,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,cAAc,EACd,eAAe,EACf,gBAAgB,EAChB,YAAY,CACb;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,KAAK,MAAMoE,OAAO,IAAID,iBAAiB,EAAE;MAAA;MAAAtE,cAAA,GAAAG,CAAA;MACvC,IAAIoE,OAAO,CAACC,IAAI,CAACxD,YAAY,CAAC,EAAE;QAAA;QAAAhB,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAG,CAAA;QAC9B,OAAOW,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE,+BAA+ByC,OAAO,CAACE,MAAM;QACtD,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAzE,cAAA,GAAAqB,CAAA;MAAA;IACH;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAEDW,GAAG,CAACc,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbkB,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IAAA;IAAA9B,cAAA,GAAAG,CAAA;IACdW,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,+BAA+B;MACtC4C,OAAO,EAAE5C,KAAK,CAACiB;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAA/C,cAAA,GAAAG,CAAA;AAEHwE,MAAM,CAACC,OAAO,GAAGvE,MAAM","ignoreList":[]}