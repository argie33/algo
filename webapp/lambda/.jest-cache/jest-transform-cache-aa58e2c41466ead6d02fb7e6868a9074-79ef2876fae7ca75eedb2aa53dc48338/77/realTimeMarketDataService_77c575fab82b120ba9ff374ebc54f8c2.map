{"version":3,"names":["EventEmitter","require","WebSocketManager","DataNormalizationService","RealTimeMarketDataService","constructor","options","enabledProviders","primaryProvider","fallbackProviders","dataBufferSize","dataFlushInterval","wsManager","normalizer","dataBuffer","activeSubscriptions","Map","lastDataBySymbol","dataCache","connectedProviders","Set","apiKeys","setupWebSocketHandlers","startDataProcessing","on","provider","console","log","add","emit","delete","handleProviderFailover","data","processRawMessage","error","message","trade","quote","connectProvider","apiKey","includes","Error","set","connect","connectAllProviders","results","success","subscribe","symbols","providers","Array","isArray","targetProviders","from","length","forEach","symbol","subscribedProviders","has","push","unsubscribe","get","remainingProviders","filter","p","rawData","normalizedData","normalizeMessage","processNormalizedData","symbolCache","splice","type","setInterval","flushDataBuffer","batchData","aggregatedData","aggregateBySymbol","aggregated","count","timestamp","Date","Object","keys","failedProvider","affectedSymbols","availableFallbacks","fallbackProvider","to","warn","getLastData","getRecentData","slice","getConnectionStatus","totalProviders","wsManagerStatus","fromEntries","dataQuality","getQualityMetrics","getSubscriptions","active","healthCheck","status","healthy","details","toISOString","disconnect","disconnectAll","clear","module","exports"],"sources":["realTimeMarketDataService.js"],"sourcesContent":["// Real-Time Market Data Service\n// Orchestrates WebSocket connections and data normalization for live market data\n\nconst EventEmitter = require('events');\nconst WebSocketManager = require('./webSocketManager');\nconst DataNormalizationService = require('./dataNormalizationService');\n\nclass RealTimeMarketDataService extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.options = {\n      enabledProviders: options.enabledProviders || ['alpaca', 'polygon', 'finnhub'],\n      primaryProvider: options.primaryProvider || 'alpaca',\n      fallbackProviders: options.fallbackProviders || ['polygon', 'finnhub'],\n      dataBufferSize: options.dataBufferSize || 1000,\n      dataFlushInterval: options.dataFlushInterval || 5000,\n      ...options\n    };\n    \n    // Initialize services\n    this.wsManager = new WebSocketManager();\n    this.normalizer = new DataNormalizationService();\n    \n    // Data management\n    this.dataBuffer = [];\n    this.activeSubscriptions = new Map(); // symbol -> providers[]\n    this.lastDataBySymbol = new Map(); // symbol -> lastData\n    this.dataCache = new Map(); // symbol -> recent data\n    \n    // Connection management\n    this.connectedProviders = new Set();\n    this.apiKeys = new Map(); // provider -> apiKey\n    \n    // Setup WebSocket event handlers\n    this.setupWebSocketHandlers();\n    \n    // Start data processing\n    this.startDataProcessing();\n  }\n  \n  setupWebSocketHandlers() {\n    this.wsManager.on('connected', ({ provider }) => {\n      console.log(`✅ Real-time service: ${provider} connected`);\n      this.connectedProviders.add(provider);\n      this.emit('providerConnected', { provider });\n    });\n    \n    this.wsManager.on('disconnected', ({ provider }) => {\n      console.log(`🔌 Real-time service: ${provider} disconnected`);\n      this.connectedProviders.delete(provider);\n      this.emit('providerDisconnected', { provider });\n      \n      // Handle fallback if primary provider disconnects\n      this.handleProviderFailover(provider);\n    });\n    \n    this.wsManager.on('message', ({ provider, data }) => {\n      this.processRawMessage(provider, data);\n    });\n    \n    this.wsManager.on('error', ({ provider, error }) => {\n      console.error(`❌ Real-time service: ${provider} error:`, error.message);\n      this.emit('providerError', { provider, error });\n    });\n    \n    this.wsManager.on('trade', (trade) => {\n      this.emit('trade', trade);\n    });\n    \n    this.wsManager.on('quote', (quote) => {\n      this.emit('quote', quote);\n    });\n  }\n  \n  async connectProvider(provider, apiKey) {\n    try {\n      if (!this.options.enabledProviders.includes(provider)) {\n        throw new Error(`Provider ${provider} not enabled`);\n      }\n      \n      this.apiKeys.set(provider, apiKey);\n      await this.wsManager.connect(provider, apiKey);\n      \n      console.log(`🔌 Connected to ${provider} for real-time data`);\n      return true;\n      \n    } catch (error) {\n      console.error(`Failed to connect to ${provider}:`, error.message);\n      throw error;\n    }\n  }\n  \n  async connectAllProviders(apiKeys) {\n    const results = {};\n    \n    for (const provider of this.options.enabledProviders) {\n      if (apiKeys[provider]) {\n        try {\n          await this.connectProvider(provider, apiKeys[provider]);\n          results[provider] = { success: true };\n        } catch (error) {\n          results[provider] = { success: false, error: error.message };\n        }\n      } else {\n        results[provider] = { success: false, error: 'No API key provided' };\n      }\n    }\n    \n    return results;\n  }\n  \n  subscribe(symbols, providers = null) {\n    if (!Array.isArray(symbols)) {\n      symbols = [symbols];\n    }\n    \n    // Use specified providers or all connected providers\n    const targetProviders = providers || Array.from(this.connectedProviders);\n    \n    if (targetProviders.length === 0) {\n      throw new Error('No providers available for subscription');\n    }\n    \n    const results = {};\n    \n    symbols.forEach(symbol => {\n      const subscribedProviders = [];\n      \n      targetProviders.forEach(provider => {\n        if (this.connectedProviders.has(provider)) {\n          try {\n            this.wsManager.subscribe(provider, [symbol]);\n            subscribedProviders.push(provider);\n          } catch (error) {\n            console.error(`Failed to subscribe ${symbol} on ${provider}:`, error.message);\n          }\n        }\n      });\n      \n      if (subscribedProviders.length > 0) {\n        this.activeSubscriptions.set(symbol, subscribedProviders);\n        results[symbol] = { success: true, providers: subscribedProviders };\n      } else {\n        results[symbol] = { success: false, error: 'No providers available' };\n      }\n    });\n    \n    console.log(`📊 Subscribed to ${symbols.length} symbols across providers`);\n    this.emit('subscribed', { symbols, results });\n    \n    return results;\n  }\n  \n  unsubscribe(symbols, providers = null) {\n    if (!Array.isArray(symbols)) {\n      symbols = [symbols];\n    }\n    \n    symbols.forEach(symbol => {\n      const subscribedProviders = this.activeSubscriptions.get(symbol) || [];\n      const targetProviders = providers || subscribedProviders;\n      \n      targetProviders.forEach(provider => {\n        if (subscribedProviders.includes(provider)) {\n          try {\n            this.wsManager.unsubscribe(provider, [symbol]);\n          } catch (error) {\n            console.error(`Failed to unsubscribe ${symbol} from ${provider}:`, error.message);\n          }\n        }\n      });\n      \n      if (!providers) {\n        // Complete unsubscription\n        this.activeSubscriptions.delete(symbol);\n        this.lastDataBySymbol.delete(symbol);\n        this.dataCache.delete(symbol);\n      } else {\n        // Partial unsubscription\n        const remainingProviders = subscribedProviders.filter(p => !targetProviders.includes(p));\n        if (remainingProviders.length > 0) {\n          this.activeSubscriptions.set(symbol, remainingProviders);\n        } else {\n          this.activeSubscriptions.delete(symbol);\n        }\n      }\n    });\n    \n    console.log(`📊 Unsubscribed from ${symbols.length} symbols`);\n    this.emit('unsubscribed', { symbols });\n  }\n  \n  processRawMessage(provider, rawData) {\n    try {\n      const normalizedData = this.normalizer.normalizeMessage(provider, rawData);\n      \n      if (normalizedData) {\n        if (Array.isArray(normalizedData)) {\n          normalizedData.forEach(data => this.processNormalizedData(data));\n        } else {\n          this.processNormalizedData(normalizedData);\n        }\n      }\n      \n    } catch (error) {\n      console.error(`Error processing message from ${provider}:`, error.message);\n    }\n  }\n  \n  processNormalizedData(data) {\n    // Add to buffer for batch processing\n    this.dataBuffer.push(data);\n    \n    // Update latest data cache\n    if (data.symbol) {\n      this.lastDataBySymbol.set(data.symbol, data);\n      \n      // Maintain recent data cache\n      if (!this.dataCache.has(data.symbol)) {\n        this.dataCache.set(data.symbol, []);\n      }\n      \n      const symbolCache = this.dataCache.get(data.symbol);\n      symbolCache.push(data);\n      \n      // Keep only recent data (last 100 items)\n      if (symbolCache.length > 100) {\n        symbolCache.splice(0, symbolCache.length - 100);\n      }\n    }\n    \n    // Emit real-time events\n    this.emit('data', data);\n    this.emit(data.type, data);\n    \n    if (data.symbol) {\n      this.emit(`${data.type}:${data.symbol}`, data);\n    }\n  }\n  \n  startDataProcessing() {\n    // Process buffered data periodically\n    setInterval(() => {\n      this.flushDataBuffer();\n    }, this.options.dataFlushInterval);\n  }\n  \n  flushDataBuffer() {\n    if (this.dataBuffer.length === 0) {\n      return;\n    }\n    \n    const batchData = [...this.dataBuffer];\n    this.dataBuffer = [];\n    \n    // Aggregate data by symbol\n    const aggregatedData = this.normalizer.aggregateBySymbol(batchData);\n    \n    // Emit batch events\n    this.emit('dataBatch', {\n      data: batchData,\n      aggregated: aggregatedData,\n      count: batchData.length,\n      timestamp: new Date()\n    });\n    \n    // Store aggregated data for API access\n    Object.keys(aggregatedData).forEach(symbol => {\n      this.emit(`aggregated:${symbol}`, aggregatedData[symbol]);\n    });\n  }\n  \n  handleProviderFailover(failedProvider) {\n    if (failedProvider !== this.options.primaryProvider) {\n      return; // Only handle primary provider failures\n    }\n    \n    console.log(`🔄 Handling failover from primary provider: ${failedProvider}`);\n    \n    // Find symbols that were subscribed via the failed provider\n    const affectedSymbols = [];\n    this.activeSubscriptions.forEach((providers, symbol) => {\n      if (providers.includes(failedProvider)) {\n        affectedSymbols.push(symbol);\n      }\n    });\n    \n    if (affectedSymbols.length === 0) {\n      return;\n    }\n    \n    // Try to resubscribe using fallback providers\n    const availableFallbacks = this.options.fallbackProviders.filter(p => \n      this.connectedProviders.has(p) && p !== failedProvider\n    );\n    \n    if (availableFallbacks.length > 0) {\n      const fallbackProvider = availableFallbacks[0];\n      console.log(`🔄 Failing over ${affectedSymbols.length} symbols to ${fallbackProvider}`);\n      \n      try {\n        this.subscribe(affectedSymbols, [fallbackProvider]);\n        this.emit('failover', { \n          from: failedProvider, \n          to: fallbackProvider, \n          symbols: affectedSymbols \n        });\n      } catch (error) {\n        console.error('Failover failed:', error.message);\n        this.emit('failoverFailed', { \n          from: failedProvider, \n          error: error.message,\n          symbols: affectedSymbols \n        });\n      }\n    } else {\n      console.warn('No fallback providers available for failover');\n      this.emit('noFallbackAvailable', { \n        failedProvider, \n        symbols: affectedSymbols \n      });\n    }\n  }\n  \n  // API methods for accessing data\n  getLastData(symbol) {\n    return this.lastDataBySymbol.get(symbol) || null;\n  }\n  \n  getRecentData(symbol, count = 50) {\n    const symbolCache = this.dataCache.get(symbol);\n    if (!symbolCache) {\n      return [];\n    }\n    \n    return symbolCache.slice(-count);\n  }\n  \n  getConnectionStatus() {\n    return {\n      connectedProviders: Array.from(this.connectedProviders),\n      totalProviders: this.options.enabledProviders.length,\n      wsManagerStatus: this.wsManager.getConnectionStatus(),\n      activeSubscriptions: Object.fromEntries(this.activeSubscriptions),\n      dataQuality: this.normalizer.getQualityMetrics()\n    };\n  }\n  \n  getSubscriptions() {\n    return {\n      active: Object.fromEntries(this.activeSubscriptions),\n      wsManager: this.wsManager.getSubscriptions()\n    };\n  }\n  \n  async healthCheck() {\n    const status = this.getConnectionStatus();\n    \n    return {\n      healthy: status.connectedProviders.length > 0,\n      status: status.connectedProviders.length > 0 ? 'operational' : 'degraded',\n      details: status,\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  disconnect() {\n    console.log('🔌 Disconnecting real-time market data service');\n    this.wsManager.disconnectAll();\n    this.activeSubscriptions.clear();\n    this.lastDataBySymbol.clear();\n    this.dataCache.clear();\n    this.connectedProviders.clear();\n    this.emit('disconnected');\n  }\n}\n\nmodule.exports = RealTimeMarketDataService;"],"mappings":"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","ignoreList":[]}