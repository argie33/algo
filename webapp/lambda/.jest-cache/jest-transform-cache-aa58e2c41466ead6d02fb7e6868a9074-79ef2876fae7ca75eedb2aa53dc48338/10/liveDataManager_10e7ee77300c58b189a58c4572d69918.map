{"version":3,"names":["cov_dnygge6ll","actualCoverage","query","s","require","createLogger","LiveDataManager","constructor","f","logger","correlationId","generateCorrelationId","isRunning","startTime","providers","Map","activeSymbols","Set","userSubscriptions","connectionPools","costTracker","performanceMetrics","initializeProviders","Date","now","Math","random","toString","substr","id","name","type","priority","costPerRequest","rateLimit","capabilities","status","config","baseUrl","streamUrl","requiresAuth","forEach","provider","set","connections","requests","errors","lastError","lastRequest","performance","latency","uptime","errorRate","start","b","success","message","initializeProviderConnections","startMonitoring","info","size","timestamp","toISOString","Array","from","keys","error","details","stop","closeAllConnections","stopMonitoring","finalStats","getServiceStats","subscribe","userId","symbol","upperSymbol","toUpperCase","has","userSymbols","get","wasAlreadySubscribed","add","wasNewSymbol","initializeSymbolConnection","updateCostMetrics","totalUserSubscriptions","totalActiveSymbols","unsubscribe","removeAll","remainingSubscriptions","sym","removeSymbolIfNoSubscribers","delete","removedCount","remainingActiveSymbols","remainingUserSubscriptions","getServiceMetrics","values","totalUsers","totalSymbols","totalSubscriptions","reduce","sum","totalCost","p","traditionaCost","savings","max","savingsPercentage","avgLatency","length","avgUptime","avgErrorRate","service","usage","activeProviders","filter","totalProviders","cost","round","estimatedTraditionalCost","efficiency","healthScore","map","getProviderStatus","providerId","formatProviderStatus","updateProvider","updates","validUpdates","validateProviderUpdates","Object","assign","testProvider","performConnectionTest","min","initializeProvider","Error","excludeUserId","hasOtherSubscribers","entries","some","action","tracker","validFields","validated","key","value","includes","shouldFail","Promise","resolve","setTimeout","clear","monitoringInterval","setInterval","updatePerformanceMetrics","clearInterval","module","exports"],"sources":["liveDataManager.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\n\n/**\n * Live Data Manager - Centralized service for managing live data providers\n * \n * This service implements the centralized live data architecture described in\n * FINANCIAL_PLATFORM_BLUEPRINT.md, focusing on cost optimization and efficiency.\n * \n * Key Features:\n * - Single connection per symbol (not per user)\n * - Provider management and failover\n * - Cost tracking and optimization\n * - Performance monitoring\n * - User subscription management\n */\n\nclass LiveDataManager {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'live-data-manager');\n    this.correlationId = this.generateCorrelationId();\n    \n    // Service state\n    this.isRunning = false;\n    this.startTime = null;\n    this.providers = new Map();\n    this.activeSymbols = new Set();\n    this.userSubscriptions = new Map();\n    this.connectionPools = new Map();\n    this.costTracker = new Map();\n    this.performanceMetrics = new Map();\n    \n    // Initialize default providers\n    this.initializeProviders();\n  }\n\n  generateCorrelationId() {\n    return `live-data-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Initialize default data providers\n   */\n  initializeProviders() {\n    const providers = [\n      {\n        id: 'alpaca',\n        name: 'Alpaca Markets',\n        type: 'broker',\n        priority: 1,\n        costPerRequest: 0.001,\n        rateLimit: 200,\n        capabilities: ['real-time', 'historical', 'trading'],\n        status: 'active',\n        config: {\n          baseUrl: 'https://paper-api.alpaca.markets/v2',\n          streamUrl: 'wss://stream.data.alpaca.markets/v2',\n          requiresAuth: true\n        }\n      },\n      {\n        id: 'polygon',\n        name: 'Polygon.io',\n        type: 'data',\n        priority: 2,\n        costPerRequest: 0.002,\n        rateLimit: 1000,\n        capabilities: ['real-time', 'historical', 'crypto'],\n        status: 'available',\n        config: {\n          baseUrl: 'https://api.polygon.io/v2',\n          streamUrl: 'wss://socket.polygon.io',\n          requiresAuth: true\n        }\n      },\n      {\n        id: 'yahoo',\n        name: 'Yahoo Finance',\n        type: 'free',\n        priority: 3,\n        costPerRequest: 0,\n        rateLimit: 100,\n        capabilities: ['quotes', 'historical'],\n        status: 'backup',\n        config: {\n          baseUrl: 'https://query1.finance.yahoo.com/v8',\n          streamUrl: null,\n          requiresAuth: false\n        }\n      }\n    ];\n\n    providers.forEach(provider => {\n      this.providers.set(provider.id, {\n        ...provider,\n        connections: 0,\n        requests: 0,\n        errors: 0,\n        lastError: null,\n        lastRequest: null,\n        performance: {\n          latency: 0,\n          uptime: 100,\n          errorRate: 0\n        }\n      });\n    });\n  }\n\n  /**\n   * Start the live data service\n   */\n  async start() {\n    if (this.isRunning) {\n      return { success: true, message: 'Service already running' };\n    }\n\n    try {\n      this.isRunning = true;\n      this.startTime = Date.now();\n      \n      // Initialize provider connections\n      await this.initializeProviderConnections();\n      \n      // Start monitoring\n      this.startMonitoring();\n      \n      this.logger.info('Live data service started', {\n        correlationId: this.correlationId,\n        providers: this.providers.size,\n        timestamp: new Date().toISOString()\n      });\n\n      return {\n        success: true,\n        message: 'Live data service started successfully',\n        providers: Array.from(this.providers.keys()),\n        startTime: this.startTime\n      };\n\n    } catch (error) {\n      this.logger.error('Failed to start live data service', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      \n      this.isRunning = false;\n      this.startTime = null;\n      \n      return {\n        success: false,\n        error: 'Failed to start service',\n        details: error.message\n      };\n    }\n  }\n\n  /**\n   * Stop the live data service\n   */\n  async stop() {\n    if (!this.isRunning) {\n      return { success: true, message: 'Service already stopped' };\n    }\n\n    try {\n      // Close all connections\n      await this.closeAllConnections();\n      \n      // Stop monitoring\n      this.stopMonitoring();\n      \n      const uptime = this.startTime ? Date.now() - this.startTime : 0;\n      \n      this.isRunning = false;\n      this.startTime = null;\n      \n      this.logger.info('Live data service stopped', {\n        correlationId: this.correlationId,\n        uptime,\n        timestamp: new Date().toISOString()\n      });\n\n      return {\n        success: true,\n        message: 'Live data service stopped successfully',\n        uptime,\n        finalStats: this.getServiceStats()\n      };\n\n    } catch (error) {\n      this.logger.error('Failed to stop live data service', {\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      \n      return {\n        success: false,\n        error: 'Failed to stop service',\n        details: error.message\n      };\n    }\n  }\n\n  /**\n   * Subscribe user to symbol data\n   */\n  async subscribe(userId, symbol, provider = 'alpaca') {\n    try {\n      const upperSymbol = symbol.toUpperCase();\n      \n      // Add to user subscriptions\n      if (!this.userSubscriptions.has(userId)) {\n        this.userSubscriptions.set(userId, new Set());\n      }\n      \n      const userSymbols = this.userSubscriptions.get(userId);\n      const wasAlreadySubscribed = userSymbols.has(upperSymbol);\n      userSymbols.add(upperSymbol);\n      \n      // Add to active symbols\n      const wasNewSymbol = !this.activeSymbols.has(upperSymbol);\n      this.activeSymbols.add(upperSymbol);\n      \n      // Initialize connection if new symbol\n      if (wasNewSymbol) {\n        await this.initializeSymbolConnection(upperSymbol, provider);\n      }\n      \n      // Update cost tracking\n      this.updateCostMetrics(provider, 'subscribe');\n      \n      this.logger.info('User subscribed to symbol', {\n        userId,\n        symbol: upperSymbol,\n        provider,\n        wasNewSymbol,\n        correlationId: this.correlationId\n      });\n\n      return {\n        success: true,\n        symbol: upperSymbol,\n        provider,\n        wasNewSymbol,\n        wasAlreadySubscribed,\n        totalUserSubscriptions: userSymbols.size,\n        totalActiveSymbols: this.activeSymbols.size\n      };\n\n    } catch (error) {\n      this.logger.error('Failed to subscribe user to symbol', {\n        userId,\n        symbol,\n        provider,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      \n      return {\n        success: false,\n        error: 'Failed to subscribe to symbol',\n        details: error.message\n      };\n    }\n  }\n\n  /**\n   * Unsubscribe user from symbol data\n   */\n  async unsubscribe(userId, symbol = null, removeAll = false) {\n    try {\n      const userSymbols = this.userSubscriptions.get(userId);\n      \n      if (!userSymbols) {\n        return {\n          success: true,\n          message: 'User has no subscriptions',\n          remainingSubscriptions: 0\n        };\n      }\n\n      if (removeAll) {\n        // Remove all subscriptions for user\n        for (const sym of userSymbols) {\n          await this.removeSymbolIfNoSubscribers(sym, userId);\n        }\n        \n        this.userSubscriptions.delete(userId);\n        \n        return {\n          success: true,\n          message: 'All subscriptions removed',\n          removedCount: userSymbols.size,\n          remainingActiveSymbols: this.activeSymbols.size\n        };\n      }\n\n      if (symbol) {\n        const upperSymbol = symbol.toUpperCase();\n        \n        if (userSymbols.has(upperSymbol)) {\n          userSymbols.delete(upperSymbol);\n          \n          // Remove user if no more subscriptions\n          if (userSymbols.size === 0) {\n            this.userSubscriptions.delete(userId);\n          }\n          \n          // Remove symbol if no more subscribers\n          await this.removeSymbolIfNoSubscribers(upperSymbol, userId);\n        }\n        \n        return {\n          success: true,\n          symbol: upperSymbol,\n          remainingUserSubscriptions: userSymbols.size,\n          totalActiveSymbols: this.activeSymbols.size\n        };\n      }\n\n      return {\n        success: false,\n        error: 'Invalid unsubscribe request'\n      };\n\n    } catch (error) {\n      this.logger.error('Failed to unsubscribe user from symbol', {\n        userId,\n        symbol,\n        removeAll,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      \n      return {\n        success: false,\n        error: 'Failed to unsubscribe',\n        details: error.message\n      };\n    }\n  }\n\n  /**\n   * Get comprehensive service metrics\n   */\n  getServiceMetrics() {\n    const providers = Array.from(this.providers.values());\n    const totalUsers = this.userSubscriptions.size;\n    const totalSymbols = this.activeSymbols.size;\n    const totalSubscriptions = Array.from(this.userSubscriptions.values())\n      .reduce((sum, userSymbols) => sum + userSymbols.size, 0);\n    \n    // Cost calculations\n    const totalCost = providers.reduce((sum, p) => sum + (p.requests * p.costPerRequest), 0);\n    const traditionaCost = totalSubscriptions * 0.001; // Estimated traditional cost\n    const savings = Math.max(0, traditionaCost - totalCost);\n    const savingsPercentage = traditionaCost > 0 ? (savings / traditionaCost) * 100 : 0;\n    \n    // Performance metrics\n    const avgLatency = providers.reduce((sum, p) => sum + p.performance.latency, 0) / providers.length;\n    const avgUptime = providers.reduce((sum, p) => sum + p.performance.uptime, 0) / providers.length;\n    const avgErrorRate = providers.reduce((sum, p) => sum + p.performance.errorRate, 0) / providers.length;\n    \n    return {\n      service: {\n        isRunning: this.isRunning,\n        uptime: this.startTime ? Date.now() - this.startTime : 0,\n        startTime: this.startTime,\n        correlationId: this.correlationId\n      },\n      usage: {\n        totalUsers,\n        totalSymbols,\n        totalSubscriptions,\n        activeProviders: providers.filter(p => p.status === 'active').length,\n        totalProviders: providers.length\n      },\n      cost: {\n        totalCost: Math.round(totalCost * 100) / 100,\n        estimatedTraditionalCost: Math.round(traditionaCost * 100) / 100,\n        savings: Math.round(savings * 100) / 100,\n        savingsPercentage: Math.round(savingsPercentage * 100) / 100,\n        efficiency: Math.round((totalSymbols / Math.max(totalSubscriptions, 1)) * 100)\n      },\n      performance: {\n        avgLatency: Math.round(avgLatency),\n        avgUptime: Math.round(avgUptime * 100) / 100,\n        avgErrorRate: Math.round(avgErrorRate * 100) / 100,\n        healthScore: Math.round((avgUptime * 0.6) + ((100 - avgErrorRate) * 0.4))\n      },\n      providers: providers.map(p => ({\n        id: p.id,\n        name: p.name,\n        status: p.status,\n        connections: p.connections,\n        requests: p.requests,\n        errors: p.errors,\n        cost: Math.round(p.requests * p.costPerRequest * 100) / 100,\n        performance: p.performance\n      }))\n    };\n  }\n\n  /**\n   * Get provider status and health\n   */\n  getProviderStatus(providerId = null) {\n    if (providerId) {\n      const provider = this.providers.get(providerId);\n      return provider ? {\n        success: true,\n        provider: this.formatProviderStatus(provider)\n      } : {\n        success: false,\n        error: 'Provider not found'\n      };\n    }\n\n    return {\n      success: true,\n      providers: Array.from(this.providers.values()).map(p => this.formatProviderStatus(p))\n    };\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateProvider(providerId, updates) {\n    const provider = this.providers.get(providerId);\n    \n    if (!provider) {\n      return {\n        success: false,\n        error: 'Provider not found'\n      };\n    }\n\n    // Validate and apply updates\n    const validUpdates = this.validateProviderUpdates(updates);\n    Object.assign(provider, validUpdates);\n    \n    this.logger.info('Provider updated', {\n      providerId,\n      updates: validUpdates,\n      correlationId: this.correlationId\n    });\n\n    return {\n      success: true,\n      provider: this.formatProviderStatus(provider),\n      message: 'Provider updated successfully'\n    };\n  }\n\n  /**\n   * Test provider connection\n   */\n  async testProvider(providerId) {\n    const provider = this.providers.get(providerId);\n    \n    if (!provider) {\n      return {\n        success: false,\n        error: 'Provider not found'\n      };\n    }\n\n    try {\n      const startTime = Date.now();\n      \n      // Simulate connection test\n      await this.performConnectionTest(provider);\n      \n      const latency = Date.now() - startTime;\n      \n      // Update provider performance\n      provider.performance.latency = latency;\n      provider.performance.uptime = Math.min(100, provider.performance.uptime + 1);\n      provider.lastRequest = new Date().toISOString();\n      \n      return {\n        success: true,\n        provider: provider.id,\n        latency,\n        status: 'connected',\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      provider.errors++;\n      provider.lastError = error.message;\n      provider.performance.errorRate = (provider.errors / Math.max(provider.requests, 1)) * 100;\n      \n      return {\n        success: false,\n        provider: provider.id,\n        error: error.message,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  // Helper methods\n  async initializeProviderConnections() {\n    const activeProviders = Array.from(this.providers.values())\n      .filter(p => p.status === 'active');\n    \n    for (const provider of activeProviders) {\n      try {\n        await this.initializeProvider(provider);\n      } catch (error) {\n        this.logger.error('Failed to initialize provider', {\n          provider: provider.id,\n          error: error.message,\n          correlationId: this.correlationId\n        });\n      }\n    }\n  }\n\n  async initializeProvider(provider) {\n    // Simulate provider initialization\n    provider.connections = 1;\n    provider.performance.uptime = 100;\n    provider.performance.latency = Math.random() * 100 + 50;\n    \n    this.logger.info('Provider initialized', {\n      provider: provider.id,\n      correlationId: this.correlationId\n    });\n  }\n\n  async initializeSymbolConnection(symbol, providerId) {\n    const provider = this.providers.get(providerId);\n    \n    if (!provider) {\n      throw new Error(`Provider ${providerId} not found`);\n    }\n\n    // Simulate symbol connection\n    provider.connections++;\n    provider.requests++;\n    \n    this.logger.info('Symbol connection initialized', {\n      symbol,\n      provider: providerId,\n      correlationId: this.correlationId\n    });\n  }\n\n  async removeSymbolIfNoSubscribers(symbol, excludeUserId) {\n    // Check if any other users are subscribed to this symbol\n    const hasOtherSubscribers = Array.from(this.userSubscriptions.entries())\n      .some(([userId, userSymbols]) => \n        userId !== excludeUserId && userSymbols.has(symbol));\n    \n    if (!hasOtherSubscribers) {\n      this.activeSymbols.delete(symbol);\n      \n      // Decrease connections for all providers\n      this.providers.forEach(provider => {\n        if (provider.connections > 0) {\n          provider.connections--;\n        }\n      });\n      \n      this.logger.info('Symbol removed from active symbols', {\n        symbol,\n        correlationId: this.correlationId\n      });\n    }\n  }\n\n  updateCostMetrics(providerId, action) {\n    const provider = this.providers.get(providerId);\n    if (provider) {\n      provider.requests++;\n      \n      if (!this.costTracker.has(providerId)) {\n        this.costTracker.set(providerId, { requests: 0, cost: 0 });\n      }\n      \n      const tracker = this.costTracker.get(providerId);\n      tracker.requests++;\n      tracker.cost += provider.costPerRequest;\n    }\n  }\n\n  formatProviderStatus(provider) {\n    return {\n      id: provider.id,\n      name: provider.name,\n      type: provider.type,\n      status: provider.status,\n      priority: provider.priority,\n      connections: provider.connections,\n      requests: provider.requests,\n      errors: provider.errors,\n      cost: Math.round(provider.requests * provider.costPerRequest * 100) / 100,\n      performance: provider.performance,\n      lastRequest: provider.lastRequest,\n      lastError: provider.lastError,\n      capabilities: provider.capabilities\n    };\n  }\n\n  validateProviderUpdates(updates) {\n    const validFields = ['status', 'priority', 'rateLimit', 'costPerRequest'];\n    const validated = {};\n    \n    for (const [key, value] of Object.entries(updates)) {\n      if (validFields.includes(key)) {\n        validated[key] = value;\n      }\n    }\n    \n    return validated;\n  }\n\n  async performConnectionTest(provider) {\n    // Simulate connection test with potential failure\n    const shouldFail = Math.random() < 0.1; // 10% chance of failure\n    \n    if (shouldFail) {\n      throw new Error('Connection timeout');\n    }\n    \n    // Simulate network latency\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 100));\n  }\n\n  async closeAllConnections() {\n    this.providers.forEach(provider => {\n      provider.connections = 0;\n    });\n    \n    this.activeSymbols.clear();\n    this.userSubscriptions.clear();\n  }\n\n  startMonitoring() {\n    // Start periodic monitoring (in a real implementation)\n    this.monitoringInterval = setInterval(() => {\n      this.updatePerformanceMetrics();\n    }, 30000); // Every 30 seconds\n  }\n\n  stopMonitoring() {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n  }\n\n  updatePerformanceMetrics() {\n    // Update performance metrics for all providers\n    this.providers.forEach(provider => {\n      // Simulate performance updates\n      provider.performance.latency = Math.max(10, provider.performance.latency + (Math.random() - 0.5) * 10);\n      provider.performance.uptime = Math.min(100, Math.max(90, provider.performance.uptime + (Math.random() - 0.5) * 2));\n      provider.performance.errorRate = provider.requests > 0 ? (provider.errors / provider.requests) * 100 : 0;\n    });\n  }\n\n  getServiceStats() {\n    return {\n      totalUsers: this.userSubscriptions.size,\n      totalSymbols: this.activeSymbols.size,\n      totalSubscriptions: Array.from(this.userSubscriptions.values())\n        .reduce((sum, userSymbols) => sum + userSymbols.size, 0),\n      totalProviders: this.providers.size,\n      activeProviders: Array.from(this.providers.values())\n        .filter(p => p.status === 'active').length\n    };\n  }\n}\n\nmodule.exports = LiveDataManager;"],"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","ignoreList":[]}