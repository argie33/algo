{"version":3,"names":["cov_24jj3sz56b","actualCoverage","calculateSharpeRatio","returns","riskFreeRate","b","f","s","length","avgReturn","reduce","sum","r","variance","Math","pow","stdDev","sqrt","annualizedReturn","annualizedStdDev","calculateMaxDrawdown","portfolioValues","maxDrawdown","drawdownPeriod","peak","trough","currentDrawdownStart","i","drawdown","calculateBeta","portfolioReturns","marketReturns","portfolioMean","marketMean","covariance","marketVariance","portfolioDeviation","marketDeviation","calculateVaR","confidenceLevel","sortedReturns","sort","a","index","floor","abs","calculateVolatility","calculateInformationRatio","benchmarkReturns","activeReturns","map","avgActiveReturn","trackingError","calculatePortfolioAnalytics","portfolioData","benchmarkData","totalReturn","volatility","sharpeRatio","beta","var95","informationRatio","winRate","averageWin","averageLoss","profitFactor","currentValue","portfolioValue","value","previousValue","push","firstValue","lastValue","days","wins","filter","losses","d","maxDrawdownInfo","drawdownInfo","calculateSectorAnalysis","holdings","sectorAllocation","diversificationScore","concentrationRisk","herfindahlIndex","totalValue","h","marketValue","sectorMap","acc","holding","sector","count","Object","entries","data","allocation","weight","max","slice","module","exports"],"sources":["portfolioAnalytics.js"],"sourcesContent":["/**\n * Advanced Portfolio Analytics Utility\n * Provides sophisticated performance metrics and risk analysis\n */\n\n/**\n * Calculate Sharpe ratio for a portfolio\n * @param {Array} returns - Array of portfolio returns\n * @param {number} riskFreeRate - Risk-free rate (default 0.02 for 2%)\n * @returns {number} Sharpe ratio\n */\nfunction calculateSharpeRatio(returns, riskFreeRate = 0.02) {\n  if (!returns || returns.length === 0) return 0;\n  \n  const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n  const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n  const stdDev = Math.sqrt(variance);\n  \n  if (stdDev === 0) return 0;\n  \n  const annualizedReturn = avgReturn * 252; // 252 trading days\n  const annualizedStdDev = stdDev * Math.sqrt(252);\n  \n  return (annualizedReturn - riskFreeRate) / annualizedStdDev;\n}\n\n/**\n * Calculate maximum drawdown\n * @param {Array} portfolioValues - Array of portfolio values over time\n * @returns {Object} Maximum drawdown info\n */\nfunction calculateMaxDrawdown(portfolioValues) {\n  if (!portfolioValues || portfolioValues.length === 0) {\n    return { maxDrawdown: 0, drawdownPeriod: 0, peak: 0, trough: 0 };\n  }\n  \n  let maxDrawdown = 0;\n  let peak = portfolioValues[0];\n  let trough = portfolioValues[0];\n  let drawdownPeriod = 0;\n  let currentDrawdownStart = 0;\n  \n  for (let i = 1; i < portfolioValues.length; i++) {\n    if (portfolioValues[i] > peak) {\n      peak = portfolioValues[i];\n      currentDrawdownStart = i;\n    }\n    \n    const drawdown = (peak - portfolioValues[i]) / peak;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n      trough = portfolioValues[i];\n      drawdownPeriod = i - currentDrawdownStart;\n    }\n  }\n  \n  return {\n    maxDrawdown: maxDrawdown * 100, // Convert to percentage\n    drawdownPeriod,\n    peak,\n    trough\n  };\n}\n\n/**\n * Calculate beta relative to market (S&P 500)\n * @param {Array} portfolioReturns - Portfolio returns\n * @param {Array} marketReturns - Market returns (S&P 500)\n * @returns {number} Beta coefficient\n */\nfunction calculateBeta(portfolioReturns, marketReturns) {\n  if (!portfolioReturns || !marketReturns || portfolioReturns.length !== marketReturns.length) {\n    return 1.0; // Default beta of 1\n  }\n  \n  const portfolioMean = portfolioReturns.reduce((sum, r) => sum + r, 0) / portfolioReturns.length;\n  const marketMean = marketReturns.reduce((sum, r) => sum + r, 0) / marketReturns.length;\n  \n  let covariance = 0;\n  let marketVariance = 0;\n  \n  for (let i = 0; i < portfolioReturns.length; i++) {\n    const portfolioDeviation = portfolioReturns[i] - portfolioMean;\n    const marketDeviation = marketReturns[i] - marketMean;\n    \n    covariance += portfolioDeviation * marketDeviation;\n    marketVariance += marketDeviation * marketDeviation;\n  }\n  \n  if (marketVariance === 0) return 1.0;\n  \n  return covariance / marketVariance;\n}\n\n/**\n * Calculate Value at Risk (VaR) at 95% confidence level\n * @param {Array} returns - Array of portfolio returns\n * @param {number} confidenceLevel - Confidence level (default 0.95)\n * @returns {number} VaR as a percentage\n */\nfunction calculateVaR(returns, confidenceLevel = 0.95) {\n  if (!returns || returns.length === 0) return 0;\n  \n  const sortedReturns = [...returns].sort((a, b) => a - b);\n  const index = Math.floor((1 - confidenceLevel) * sortedReturns.length);\n  \n  return Math.abs(sortedReturns[index] || 0) * 100;\n}\n\n/**\n * Calculate portfolio volatility (annualized)\n * @param {Array} returns - Array of portfolio returns\n * @returns {number} Annualized volatility as percentage\n */\nfunction calculateVolatility(returns) {\n  if (!returns || returns.length === 0) return 0;\n  \n  const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n  const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n  const stdDev = Math.sqrt(variance);\n  \n  return stdDev * Math.sqrt(252) * 100; // Annualized volatility as percentage\n}\n\n/**\n * Calculate information ratio\n * @param {Array} portfolioReturns - Portfolio returns\n * @param {Array} benchmarkReturns - Benchmark returns\n * @returns {number} Information ratio\n */\nfunction calculateInformationRatio(portfolioReturns, benchmarkReturns) {\n  if (!portfolioReturns || !benchmarkReturns || portfolioReturns.length !== benchmarkReturns.length) {\n    return 0;\n  }\n  \n  const activeReturns = portfolioReturns.map((r, i) => r - benchmarkReturns[i]);\n  const avgActiveReturn = activeReturns.reduce((sum, r) => sum + r, 0) / activeReturns.length;\n  const trackingError = Math.sqrt(\n    activeReturns.reduce((sum, r) => sum + Math.pow(r - avgActiveReturn, 2), 0) / activeReturns.length\n  );\n  \n  if (trackingError === 0) return 0;\n  \n  return (avgActiveReturn * 252) / (trackingError * Math.sqrt(252));\n}\n\n/**\n * Calculate comprehensive portfolio analytics\n * @param {Array} portfolioData - Array of portfolio data with dates and values\n * @param {Array} benchmarkData - Optional benchmark data for comparison\n * @returns {Object} Comprehensive analytics\n */\nfunction calculatePortfolioAnalytics(portfolioData, benchmarkData = null) {\n  if (!portfolioData || portfolioData.length === 0) {\n    return {\n      totalReturn: 0,\n      annualizedReturn: 0,\n      volatility: 0,\n      sharpeRatio: 0,\n      maxDrawdown: 0,\n      beta: 1.0,\n      var95: 0,\n      informationRatio: 0,\n      winRate: 0,\n      averageWin: 0,\n      averageLoss: 0,\n      profitFactor: 0\n    };\n  }\n  \n  // Calculate returns\n  const returns = [];\n  for (let i = 1; i < portfolioData.length; i++) {\n    const currentValue = portfolioData[i].portfolioValue || portfolioData[i].value;\n    const previousValue = portfolioData[i - 1].portfolioValue || portfolioData[i - 1].value;\n    \n    if (previousValue > 0) {\n      returns.push((currentValue - previousValue) / previousValue);\n    }\n  }\n  \n  // Calculate total return\n  const firstValue = portfolioData[0].portfolioValue || portfolioData[0].value;\n  const lastValue = portfolioData[portfolioData.length - 1].portfolioValue || portfolioData[portfolioData.length - 1].value;\n  const totalReturn = firstValue > 0 ? ((lastValue - firstValue) / firstValue) * 100 : 0;\n  \n  // Calculate annualized return\n  const days = portfolioData.length;\n  const annualizedReturn = days > 0 ? (Math.pow(lastValue / firstValue, 252 / days) - 1) * 100 : 0;\n  \n  // Calculate win/loss metrics\n  const wins = returns.filter(r => r > 0);\n  const losses = returns.filter(r => r < 0);\n  const winRate = returns.length > 0 ? (wins.length / returns.length) * 100 : 0;\n  const averageWin = wins.length > 0 ? wins.reduce((sum, r) => sum + r, 0) / wins.length * 100 : 0;\n  const averageLoss = losses.length > 0 ? Math.abs(losses.reduce((sum, r) => sum + r, 0) / losses.length) * 100 : 0;\n  const profitFactor = averageLoss > 0 ? (averageWin * wins.length) / (averageLoss * losses.length) : 0;\n  \n  // Calculate drawdown\n  const portfolioValues = portfolioData.map(d => d.portfolioValue || d.value);\n  const maxDrawdownInfo = calculateMaxDrawdown(portfolioValues);\n  \n  // Calculate benchmark comparison metrics\n  let beta = 1.0;\n  let informationRatio = 0;\n  \n  if (benchmarkData && benchmarkData.length === portfolioData.length) {\n    const benchmarkReturns = [];\n    for (let i = 1; i < benchmarkData.length; i++) {\n      const currentValue = benchmarkData[i].value;\n      const previousValue = benchmarkData[i - 1].value;\n      \n      if (previousValue > 0) {\n        benchmarkReturns.push((currentValue - previousValue) / previousValue);\n      }\n    }\n    \n    beta = calculateBeta(returns, benchmarkReturns);\n    informationRatio = calculateInformationRatio(returns, benchmarkReturns);\n  }\n  \n  return {\n    totalReturn,\n    annualizedReturn,\n    volatility: calculateVolatility(returns),\n    sharpeRatio: calculateSharpeRatio(returns),\n    maxDrawdown: maxDrawdownInfo.maxDrawdown,\n    beta,\n    var95: calculateVaR(returns),\n    informationRatio,\n    winRate,\n    averageWin,\n    averageLoss,\n    profitFactor,\n    drawdownInfo: maxDrawdownInfo\n  };\n}\n\n/**\n * Calculate sector allocation and diversification metrics\n * @param {Array} holdings - Array of portfolio holdings\n * @returns {Object} Sector analysis\n */\nfunction calculateSectorAnalysis(holdings) {\n  if (!holdings || holdings.length === 0) {\n    return {\n      sectorAllocation: [],\n      diversificationScore: 0,\n      concentrationRisk: 0,\n      herfindahlIndex: 0\n    };\n  }\n  \n  const totalValue = holdings.reduce((sum, h) => sum + (h.marketValue || 0), 0);\n  \n  // Calculate sector allocation\n  const sectorMap = holdings.reduce((acc, holding) => {\n    const sector = holding.sector || 'Other';\n    acc[sector] = acc[sector] || { value: 0, count: 0 };\n    acc[sector].value += holding.marketValue || 0;\n    acc[sector].count += 1;\n    return acc;\n  }, {});\n  \n  const sectorAllocation = Object.entries(sectorMap).map(([sector, data]) => ({\n    sector,\n    value: data.value,\n    allocation: totalValue > 0 ? (data.value / totalValue) * 100 : 0,\n    count: data.count\n  })).sort((a, b) => b.allocation - a.allocation);\n  \n  // Calculate Herfindahl-Hirschman Index (concentration measure)\n  const herfindahlIndex = sectorAllocation.reduce((sum, sector) => {\n    const weight = sector.allocation / 100;\n    return sum + (weight * weight);\n  }, 0);\n  \n  // Calculate diversification score (0-100, higher is better)\n  const diversificationScore = Math.max(0, 100 - (herfindahlIndex * 100));\n  \n  // Calculate concentration risk (% in top 3 sectors)\n  const concentrationRisk = sectorAllocation.slice(0, 3).reduce((sum, sector) => sum + sector.allocation, 0);\n  \n  return {\n    sectorAllocation,\n    diversificationScore,\n    concentrationRisk,\n    herfindahlIndex\n  };\n}\n\nmodule.exports = {\n  calculateSharpeRatio,\n  calculateMaxDrawdown,\n  calculateBeta,\n  calculateVaR,\n  calculateVolatility,\n  calculateInformationRatio,\n  calculatePortfolioAnalytics,\n  calculateSectorAnalysis\n};"],"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","ignoreList":[]}