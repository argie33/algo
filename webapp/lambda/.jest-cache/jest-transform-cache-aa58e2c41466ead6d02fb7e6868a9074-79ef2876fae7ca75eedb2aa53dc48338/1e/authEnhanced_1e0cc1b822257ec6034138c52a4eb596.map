{"version":3,"names":["cov_5fogwilzc","actualCoverage","CognitoJwtVerifier","s","require","SecretsManagerClient","GetSecretValueCommand","crypto","jwt","secretsManager","region","b","process","env","AWS_DEFAULT_REGION","AWS_REGION","cognitoConfig","configLoadPromise","verifier","verifierPromise","isDevelopment","NODE_ENV","allowDevBypass","ALLOW_DEV_AUTH_BYPASS","loadCognitoConfig","f","COGNITO_SECRET_ARN","console","log","command","SecretId","response","send","secret","JSON","parse","SecretString","userPoolId","clientId","domain","COGNITO_USER_POOL_ID","COGNITO_CLIENT_ID","warn","error","getVerifier","config","create","tokenUse","generateDevToken","userId","email","payload","sub","username","split","given_name","family_name","email_verified","iat","Math","floor","Date","now","exp","aud","iss","DEV_JWT_SECRET","sign","validateDevToken","token","decoded","verify","valid","message","authenticateToken","req","res","next","startTime","requestId","headers","randomUUID","clientIp","connection","remoteAddress","userAgent","method","path","authHeader","user","role","groups","authenticatedAt","toISOString","authMethod","givenName","familyName","emailVerified","status","json","details","authHeaderPresent","expectedFormat","devValidation","jwtVerifier","cognitoConfigured","developmentMode","tokenIssuedAt","tokenExpiresAt","phoneNumber","phone_number","phoneNumberVerified","phone_number_verified","organization","jobTitle","riskTolerance","investmentExperience","accreditedInvestor","duration","name","stack","undefined","errorType","code","authError","errorName","requireRole","roles","userRole","userGroups","hasRole","includes","hasGroup","some","join","optionalAuth","generateTestToken","getAuthStatus","configuration","verifierAvailable","developmentBypassAllowed","cognito","configured","environment","hasUserPoolId","hasClientId","hasSecretArn","timestamp","module","exports"],"sources":["authEnhanced.js"],"sourcesContent":["/**\n * Enhanced Authentication Middleware with Development Mode Support\n * Handles both production Cognito authentication and development bypass\n */\n\nconst { CognitoJwtVerifier } = require('aws-jwt-verify');\nconst { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\nconst crypto = require('crypto');\nconst jwt = require('jsonwebtoken');\n\n// Initialize secrets manager client\nconst secretsManager = new SecretsManagerClient({\n  region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || 'us-east-1'\n});\n\n// Cache for Cognito config\nlet cognitoConfig = null;\nlet configLoadPromise = null;\nlet verifier = null;\nlet verifierPromise = null;\n\n// Development authentication settings\nconst isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;\nconst allowDevBypass = process.env.ALLOW_DEV_AUTH_BYPASS === 'true' || isDevelopment;\n\n/**\n * Load Cognito configuration from Secrets Manager or environment\n */\nasync function loadCognitoConfig() {\n  if (cognitoConfig) {\n    return cognitoConfig;\n  }\n\n  if (configLoadPromise) {\n    return configLoadPromise;\n  }\n\n  configLoadPromise = (async () => {\n    try {\n      // First try to load from Secrets Manager if ARN is provided\n      if (process.env.COGNITO_SECRET_ARN) {\n        console.log('üì° Loading Cognito config from Secrets Manager...');\n        const command = new GetSecretValueCommand({\n          SecretId: process.env.COGNITO_SECRET_ARN\n        });\n        const response = await secretsManager.send(command);\n        const secret = JSON.parse(response.SecretString);\n        \n        cognitoConfig = {\n          userPoolId: secret.userPoolId,\n          clientId: secret.clientId,\n          domain: secret.domain,\n          region: secret.region\n        };\n        \n        console.log('‚úÖ Cognito config loaded from Secrets Manager');\n        return cognitoConfig;\n      }\n      \n      // Fall back to environment variables\n      if (process.env.COGNITO_USER_POOL_ID && process.env.COGNITO_CLIENT_ID) {\n        cognitoConfig = {\n          userPoolId: process.env.COGNITO_USER_POOL_ID,\n          clientId: process.env.COGNITO_CLIENT_ID,\n          region: process.env.AWS_DEFAULT_REGION || process.env.AWS_REGION || 'us-east-1'\n        };\n        \n        console.log('‚úÖ Cognito config loaded from environment variables');\n        return cognitoConfig;\n      }\n      \n      console.warn('‚ö†Ô∏è No Cognito configuration found');\n      return null;\n    } catch (error) {\n      console.error('‚ùå Failed to load Cognito config:', error);\n      configLoadPromise = null; // Reset to allow retry\n      return null;\n    }\n  })();\n\n  return configLoadPromise;\n}\n\n/**\n * Create JWT verifier for Cognito tokens\n */\nasync function getVerifier() {\n  if (verifier) {\n    return verifier;\n  }\n\n  if (verifierPromise) {\n    return verifierPromise;\n  }\n\n  verifierPromise = (async () => {\n    const config = await loadCognitoConfig();\n    \n    if (!config) {\n      console.warn('‚ö†Ô∏è Cognito configuration not available. Production authentication will be disabled.');\n      return null;\n    }\n\n    try {\n      verifier = CognitoJwtVerifier.create({\n        userPoolId: config.userPoolId,\n        tokenUse: 'access',\n        clientId: config.clientId,\n      });\n      \n      console.log('‚úÖ Cognito JWT verifier created successfully');\n      return verifier;\n    } catch (error) {\n      console.error('‚ùå Failed to create Cognito JWT verifier:', error);\n      verifierPromise = null; // Reset to allow retry\n      return null;\n    }\n  })();\n\n  return verifierPromise;\n}\n\n/**\n * Generate development authentication token\n */\nfunction generateDevToken(userId = 'dev-user', email = 'dev@example.com') {\n  const payload = {\n    sub: userId,\n    email: email,\n    username: email.split('@')[0],\n    'custom:role': 'admin',\n    'cognito:groups': ['admin'],\n    given_name: 'Dev',\n    family_name: 'User',\n    email_verified: true,\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours\n    aud: 'development-client',\n    iss: 'https://cognito-idp.us-east-1.amazonaws.com/development'\n  };\n\n  const secret = process.env.DEV_JWT_SECRET || 'development-secret-key';\n  return jwt.sign(payload, secret);\n}\n\n/**\n * Validate development token\n */\nfunction validateDevToken(token) {\n  try {\n    const secret = process.env.DEV_JWT_SECRET || 'development-secret-key';\n    const decoded = jwt.verify(token, secret);\n    return { valid: true, payload: decoded };\n  } catch (error) {\n    return { valid: false, error: error.message };\n  }\n}\n\n/**\n * Main authentication middleware\n */\nconst authenticateToken = async (req, res, next) => {\n  const startTime = Date.now();\n  const requestId = req.headers['x-request-id'] || crypto.randomUUID();\n  const clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n  const userAgent = req.headers['user-agent'] || 'unknown';\n  \n  try {\n    console.log(`üîê [${requestId}] Authentication middleware called for ${req.method} ${req.path}`);\n    \n    // Get authorization header\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    \n    console.log(`üé´ [${requestId}] Token present: ${!!token}`);\n    \n    // If no token provided, check if we're in development mode\n    if (!token) {\n      if (allowDevBypass) {\n        console.log(`üîß [${requestId}] No token provided, using development bypass`);\n        \n        // Create development user\n        req.user = {\n          sub: 'dev-user-' + Date.now(),\n          email: 'dev@example.com',\n          username: 'dev-user',\n          role: 'admin',\n          groups: ['admin'],\n          clientIp,\n          userAgent,\n          requestId,\n          authenticatedAt: new Date().toISOString(),\n          authMethod: 'dev-bypass',\n          givenName: 'Dev',\n          familyName: 'User',\n          emailVerified: true,\n          isDevelopment: true\n        };\n        \n        console.log(`‚úÖ [${requestId}] Development authentication successful`);\n        return next();\n      } else {\n        console.error(`‚ùå [${requestId}] No token found and development bypass disabled`);\n        return res.status(401).json({\n          error: 'Authentication required',\n          message: 'Access token is missing from Authorization header',\n          details: {\n            requestId,\n            authHeaderPresent: !!authHeader,\n            expectedFormat: 'Bearer <token>'\n          }\n        });\n      }\n    }\n\n    // Try to validate as development token first (if allowed)\n    if (allowDevBypass) {\n      const devValidation = validateDevToken(token);\n      if (devValidation.valid) {\n        console.log(`üîß [${requestId}] Valid development token detected`);\n        \n        req.user = {\n          sub: devValidation.payload.sub,\n          email: devValidation.payload.email,\n          username: devValidation.payload.username,\n          role: devValidation.payload['custom:role'] || 'user',\n          groups: devValidation.payload['cognito:groups'] || [],\n          clientIp,\n          userAgent,\n          requestId,\n          authenticatedAt: new Date().toISOString(),\n          authMethod: 'dev-token',\n          givenName: devValidation.payload.given_name,\n          familyName: devValidation.payload.family_name,\n          emailVerified: devValidation.payload.email_verified,\n          isDevelopment: true\n        };\n        \n        console.log(`‚úÖ [${requestId}] Development token authentication successful`);\n        return next();\n      }\n    }\n\n    // Try Cognito JWT verification\n    console.log(`üîç [${requestId}] Attempting Cognito JWT verification...`);\n    const jwtVerifier = await getVerifier();\n\n    if (!jwtVerifier) {\n      // No Cognito verifier available\n      if (allowDevBypass) {\n        console.log(`üîß [${requestId}] Cognito not available, allowing development access`);\n        \n        // Create development user even with invalid token\n        req.user = {\n          sub: 'dev-user-fallback',\n          email: 'dev@example.com',\n          username: 'dev-user',\n          role: 'admin',\n          groups: ['admin'],\n          clientIp,\n          userAgent,\n          requestId,\n          authenticatedAt: new Date().toISOString(),\n          authMethod: 'dev-fallback',\n          givenName: 'Dev',\n          familyName: 'User',\n          emailVerified: true,\n          isDevelopment: true\n        };\n        \n        console.log(`‚úÖ [${requestId}] Development fallback authentication successful`);\n        return next();\n      } else {\n        console.error(`‚ùå [${requestId}] Cognito verifier not available and development bypass disabled`);\n        return res.status(503).json({\n          error: 'Authentication service unavailable',\n          message: 'Unable to verify authentication tokens. Please check Cognito configuration.',\n          details: {\n            requestId,\n            cognitoConfigured: false,\n            developmentMode: isDevelopment\n          }\n        });\n      }\n    }\n\n    // Verify Cognito JWT token\n    const payload = await jwtVerifier.verify(token);\n    console.log(`üéØ [${requestId}] Cognito token verified successfully`);\n    \n    // Add user information to request\n    req.user = {\n      sub: payload.sub,\n      email: payload.email,\n      username: payload.username,\n      role: payload['custom:role'] || 'user',\n      groups: payload['cognito:groups'] || [],\n      clientIp,\n      userAgent,\n      requestId,\n      authenticatedAt: new Date().toISOString(),\n      authMethod: 'cognito',\n      tokenIssuedAt: new Date(payload.iat * 1000).toISOString(),\n      tokenExpiresAt: new Date(payload.exp * 1000).toISOString(),\n      givenName: payload.given_name,\n      familyName: payload.family_name,\n      phoneNumber: payload.phone_number,\n      phoneNumberVerified: payload.phone_number_verified,\n      emailVerified: payload.email_verified,\n      organization: payload['custom:organization'],\n      jobTitle: payload['custom:job_title'],\n      riskTolerance: payload['custom:risk_tolerance'],\n      investmentExperience: payload['custom:investment_experience'],\n      accreditedInvestor: payload['custom:accredited_investor'],\n      isDevelopment: false\n    };\n\n    const duration = Date.now() - startTime;\n    console.log(`‚úÖ [${requestId}] Cognito authentication successful in ${duration}ms`);\n    \n    next();\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`‚ùå [${requestId}] Authentication error after ${duration}ms:`, {\n      name: error.name,\n      message: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n    \n    // Handle specific JWT errors\n    if (error.name === 'TokenExpiredError') {\n      console.error(`üïê [${requestId}] Token expired`);\n      return res.status(401).json({\n        error: 'Token expired',\n        message: 'Your session has expired. Please log in again.',\n        details: { requestId, errorType: 'TOKEN_EXPIRED' }\n      });\n    }\n    \n    if (error.name === 'JsonWebTokenError') {\n      console.error(`üö´ [${requestId}] Invalid token format`);\n      return res.status(401).json({\n        error: 'Invalid token',\n        message: 'The provided token is invalid.',\n        details: { requestId, errorType: 'TOKEN_INVALID' }\n      });\n    }\n\n    if (error.name === 'JwtVerifyError') {\n      console.error(`üö´ [${requestId}] JWT verification failed:`, error.message);\n      return res.status(401).json({\n        error: 'Token verification failed',\n        message: 'Unable to verify the provided token.',\n        details: { requestId, errorType: 'JWT_VERIFY_ERROR' }\n      });\n    }\n\n    // Handle network/service errors\n    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n      console.error(`üåê [${requestId}] Network error during token verification`);\n      return res.status(503).json({\n        error: 'Authentication service unavailable',\n        message: 'Unable to connect to authentication service.',\n        details: { requestId, errorType: 'NETWORK_ERROR' }\n      });\n    }\n\n    // Development fallback for authentication errors\n    if (allowDevBypass) {\n      console.warn(`üîß [${requestId}] Authentication failed, using development fallback`);\n      \n      req.user = {\n        sub: 'dev-user-error-fallback',\n        email: 'dev@example.com',\n        username: 'dev-user',\n        role: 'admin',\n        groups: ['admin'],\n        clientIp,\n        userAgent,\n        requestId,\n        authenticatedAt: new Date().toISOString(),\n        authMethod: 'dev-error-fallback',\n        givenName: 'Dev',\n        familyName: 'User',\n        emailVerified: true,\n        isDevelopment: true,\n        authError: error.message\n      };\n      \n      console.log(`‚úÖ [${requestId}] Development error fallback successful`);\n      return next();\n    }\n\n    console.error(`üî• [${requestId}] Final authentication failure:`, error);\n    return res.status(401).json({\n      error: 'Authentication failed',\n      message: 'Could not verify authentication token',\n      details: { \n        requestId, \n        errorType: 'UNKNOWN_ERROR',\n        errorName: error.name\n      }\n    });\n  }\n};\n\n/**\n * Role-based authorization middleware\n */\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        error: 'Authentication required',\n        message: 'User must be authenticated to access this resource'\n      });\n    }\n\n    const userRole = req.user.role;\n    const userGroups = req.user.groups || [];\n    \n    // Check if user has required role or is in required group\n    const hasRole = roles.includes(userRole);\n    const hasGroup = roles.some(role => userGroups.includes(role));\n    \n    if (!hasRole && !hasGroup) {\n      return res.status(403).json({\n        error: 'Insufficient permissions',\n        message: `Access denied. Required roles: ${roles.join(', ')}`\n      });\n    }\n\n    next();\n  };\n};\n\n/**\n * Optional authentication middleware (doesn't fail if no token)\n */\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1];\n\n    if (!token) {\n      // No token provided, continue without authentication\n      return next();\n    }\n\n    // Try to authenticate, but don't fail if it doesn't work\n    await authenticateToken(req, res, next);\n  } catch (error) {\n    // Silently continue without authentication\n    console.log('Optional auth failed:', error.message);\n    next();\n  }\n};\n\n/**\n * Generate development authentication token for testing\n */\nconst generateTestToken = (userId = 'test-user', email = 'test@example.com') => {\n  return generateDevToken(userId, email);\n};\n\n/**\n * Authentication status endpoint\n */\nconst getAuthStatus = async (req, res) => {\n  try {\n    const cognitoConfig = await loadCognitoConfig();\n    const verifier = await getVerifier();\n    \n    res.json({\n      status: 'healthy',\n      configuration: {\n        cognitoConfigured: !!cognitoConfig,\n        verifierAvailable: !!verifier,\n        developmentMode: isDevelopment,\n        developmentBypassAllowed: allowDevBypass\n      },\n      cognito: cognitoConfig ? {\n        userPoolId: cognitoConfig.userPoolId,\n        region: cognitoConfig.region,\n        configured: true\n      } : {\n        configured: false\n      },\n      environment: {\n        NODE_ENV: process.env.NODE_ENV,\n        AWS_REGION: process.env.AWS_REGION,\n        hasUserPoolId: !!process.env.COGNITO_USER_POOL_ID,\n        hasClientId: !!process.env.COGNITO_CLIENT_ID,\n        hasSecretArn: !!process.env.COGNITO_SECRET_ARN\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\nmodule.exports = {\n  authenticateToken,\n  requireRole,\n  optionalAuth,\n  generateTestToken,\n  getAuthStatus,\n  loadCognitoConfig,\n  getVerifier\n};"],"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","ignoreList":[]}