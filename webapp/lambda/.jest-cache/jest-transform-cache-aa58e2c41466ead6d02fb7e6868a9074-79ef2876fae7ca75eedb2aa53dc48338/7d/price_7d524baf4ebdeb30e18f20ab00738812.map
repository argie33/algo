{"version":3,"names":["cov_8qi21014","actualCoverage","express","s","require","query","router","Router","get","req","res","f","json","status","endpoint","timestamp","Date","toISOString","timeframe","params","page","b","limit","symbol","start_date","end_date","validTimeframes","includes","error","offset","parseInt","maxLimit","Math","min","whereClause","paramIndex","trim","push","toUpperCase","tableName","tableExists","rows","exists","availableTimeframes","countQuery","countResult","total","dataQuery","dataResult","prices","map","row","parseFloat","close","volumes","volume","stats","length","avgPrice","reduce","a","toFixed","minPrice","maxPrice","max","avgVolume","round","totalRecords","response","success","data","date","open","high","low","adjustedClose","adj_close","splitFactor","stock_splits","dividend","dividends","pagination","totalPages","ceil","hasNextPage","hasPreviousPage","statistics","metadata","dateRange","from","to","generatedAt","console","log","details","process","env","NODE_ENV","message","undefined","search","symbolQuery","result","recordCount","record_count","earliest","earliest_date","latest","latest_date","priceRange","min_close","max_close","totalSymbols","searchTerm","latestQuery","latestData","adjusted_close","module","exports"],"sources":["price.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\n\nconst router = express.Router();\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'price',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Main price history endpoint - timeframe-based (daily, weekly, monthly)\nrouter.get('/history/:timeframe', async (req, res) => {\n  const { timeframe } = req.params;\n  const { page = 1, limit = 50, symbol, start_date, end_date } = req.query;\n\n  // Validate timeframe\n  const validTimeframes = ['daily', 'weekly', 'monthly'];\n  if (!validTimeframes.includes(timeframe)) {\n    return res.status(400).json({ error: 'Invalid timeframe. Use daily, weekly, or monthly.' });\n  }\n\n  try {\n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    const maxLimit = Math.min(parseInt(limit), 200);\n\n    // Build WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter (required)\n    if (!symbol || !symbol.trim()) {\n      return res.status(400).json({ error: 'Symbol parameter is required' });\n    }\n    \n    whereClause += ` AND symbol = $${paramIndex}`;\n    params.push(symbol.toUpperCase());\n    paramIndex++;\n\n    // Date filters\n    if (start_date) {\n      whereClause += ` AND date >= $${paramIndex}`;\n      params.push(start_date);\n      paramIndex++;\n    }\n\n    if (end_date) {\n      whereClause += ` AND date <= $${paramIndex}`;\n      params.push(end_date);\n      paramIndex++;\n    }\n\n    // Determine table name based on timeframe\n    const tableName = `price_${timeframe}`;\n\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      )`, [tableName]);\n\n    if (!tableExists.rows[0].exists) {\n      return res.status(404).json({ \n        error: `Price data table for ${timeframe} timeframe not found`,\n        availableTimeframes: validTimeframes\n      });\n    }\n\n    // Get total count for pagination\n    const countQuery = `\n      SELECT COUNT(*) as total \n      FROM ${tableName} \n      ${whereClause}\n    `;\n\n    const countResult = await query(countQuery, params);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Main data query with pagination\n    const dataQuery = `\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        adj_close,\n        stock_splits,\n        dividends\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY date DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    params.push(maxLimit, offset);\n    const dataResult = await query(dataQuery, params);\n\n    // Calculate some basic statistics for the response\n    const prices = dataResult.rows.map(row => parseFloat(row.close));\n    const volumes = dataResult.rows.map(row => parseInt(row.volume));\n    \n    const stats = prices.length > 0 ? {\n      avgPrice: (prices.reduce((a, b) => a + b, 0) / prices.length).toFixed(2),\n      minPrice: Math.min(...prices).toFixed(2),\n      maxPrice: Math.max(...prices).toFixed(2),\n      avgVolume: Math.round(volumes.reduce((a, b) => a + b, 0) / volumes.length),\n      totalRecords: total\n    } : null;\n\n    // Format response\n    const response = {\n      success: true,\n      data: dataResult.rows.map(row => ({\n        symbol: row.symbol,\n        date: row.date,\n        open: parseFloat(row.open),\n        high: parseFloat(row.high),\n        low: parseFloat(row.low),\n        close: parseFloat(row.close),\n        volume: parseInt(row.volume),\n        adjustedClose: row.adj_close ? parseFloat(row.adj_close) : null,\n        splitFactor: row.stock_splits ? parseFloat(row.stock_splits) : null,\n        dividend: row.dividends ? parseFloat(row.dividends) : null\n      })),\n      pagination: {\n        page: parseInt(page),\n        limit: maxLimit,\n        total: total,\n        totalPages: Math.ceil(total / maxLimit),\n        hasNextPage: offset + maxLimit < total,\n        hasPreviousPage: page > 1\n      },\n      statistics: stats,\n      metadata: {\n        symbol: symbol.toUpperCase(),\n        timeframe: timeframe,\n        dateRange: {\n          from: start_date || 'earliest',\n          to: end_date || 'latest'\n        },\n        generatedAt: new Date().toISOString()\n      }\n    };\n\n    console.log(`üìä Price history query successful: ${symbol} ${timeframe} - ${dataResult.rows.length} records`);\n    res.json(response);\n\n  } catch (error) {\n    console.error('‚ùå Price history query error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch price history data',\n      details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Get available symbols for a timeframe\nrouter.get('/symbols/:timeframe', async (req, res) => {\n  const { timeframe } = req.params;\n  const { search, limit = 100 } = req.query;\n\n  // Validate timeframe\n  const validTimeframes = ['daily', 'weekly', 'monthly'];\n  if (!validTimeframes.includes(timeframe)) {\n    return res.status(400).json({ error: 'Invalid timeframe. Use daily, weekly, or monthly.' });\n  }\n\n  try {\n    const tableName = `price_${timeframe}`;\n    const maxLimit = Math.min(parseInt(limit), 500);\n\n    let whereClause = '';\n    const params = [];\n    let paramIndex = 1;\n\n    // Add search filter if provided\n    if (search && search.trim()) {\n      whereClause = `WHERE symbol ILIKE $${paramIndex}`;\n      params.push(`%${search.toUpperCase()}%`);\n      paramIndex++;\n    }\n\n    const symbolQuery = `\n      SELECT \n        symbol,\n        COUNT(*) as record_count,\n        MIN(date) as earliest_date,\n        MAX(date) as latest_date,\n        MAX(close) as max_close,\n        MIN(close) as min_close\n      FROM ${tableName}\n      ${whereClause}\n      GROUP BY symbol\n      ORDER BY symbol\n      LIMIT $${paramIndex}\n    `;\n\n    params.push(maxLimit);\n    const result = await query(symbolQuery, params);\n\n    res.json({\n      success: true,\n      data: result.rows.map(row => ({\n        symbol: row.symbol,\n        recordCount: parseInt(row.record_count),\n        dateRange: {\n          earliest: row.earliest_date,\n          latest: row.latest_date\n        },\n        priceRange: {\n          min: parseFloat(row.min_close),\n          max: parseFloat(row.max_close)\n        }\n      })),\n      metadata: {\n        timeframe: timeframe,\n        totalSymbols: result.rows.length,\n        searchTerm: search || null\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Symbols query error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch available symbols',\n      details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Get latest price for a symbol\nrouter.get('/latest/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  const { timeframe = 'daily' } = req.query;\n\n  try {\n    const tableName = `price_${timeframe}`;\n    \n    const latestQuery = `\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        adjusted_close\n      FROM ${tableName}\n      WHERE symbol = $1\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    const result = await query(latestQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No price data found for symbol ${symbol.toUpperCase()} in ${timeframe} timeframe`\n      });\n    }\n\n    const latestData = result.rows[0];\n\n    res.json({\n      success: true,\n      data: {\n        symbol: latestData.symbol,\n        date: latestData.date,\n        open: parseFloat(latestData.open),\n        high: parseFloat(latestData.high),\n        low: parseFloat(latestData.low),\n        close: parseFloat(latestData.close),\n        volume: parseInt(latestData.volume),\n        adjustedClose: latestData.adjusted_close ? parseFloat(latestData.adjusted_close) : null\n      },\n      metadata: {\n        timeframe: timeframe,\n        generatedAt: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    console.error('‚ùå Latest price query error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch latest price data',\n      details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}