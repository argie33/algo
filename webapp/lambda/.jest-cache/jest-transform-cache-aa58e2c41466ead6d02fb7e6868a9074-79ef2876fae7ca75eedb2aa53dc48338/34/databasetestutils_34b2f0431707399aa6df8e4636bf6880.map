{"version":3,"names":["Pool","require","crypto","DatabaseTestUtils","constructor","pool","testUsers","testData","initialize","dbConfig","host","process","env","TEST_DB_HOST","DB_HOST","port","TEST_DB_PORT","DB_PORT","database","TEST_DB_NAME","DB_NAME","user","TEST_DB_USER","DB_USER","password","TEST_DB_PASSWORD","DB_PASSWORD","ssl","TEST_DB_SSL","DB_SSL","max","idleTimeoutMillis","connectionTimeoutMillis","console","log","client","connect","query","release","ensureTestTables","error","message","createTestUser","userData","defaultUser","email","Date","now","username","cognito_user_id","first_name","last_name","role","result","createdUser","rows","push","createTestApiKeys","userId","apiKeys","defaultKeys","alpaca_api_key","alpaca_secret_key","keys","createdKeys","salt","randomBytes","toString","cipher","createCipher","API_KEY_ENCRYPTION_SECRET","encryptedKey","update","final","encryptedSecret","secretCipher","createTestPortfolio","positions","defaultPositions","symbol","quantity","avg_cost","current_price","sector","portfolioPositions","length","createdPositions","position","marketValue","unrealizedPl","createTestTransactions","transactions","addPositionsToPortfolio","cleanup","user_id","end","sql","params","getClient","dbTestUtils","userPrefix","cleanupTestUser","withDatabaseTransaction","callback","mockClient","jest","fn","mockResolvedValue","rowCount","module","exports"],"sources":["database-test-utils.js"],"sourcesContent":["/**\n * Database Test Utilities\n * Provides real database connections and test data management for integration tests\n */\n\nconst { Pool } = require('pg');\nconst crypto = require('crypto');\n\nclass DatabaseTestUtils {\n  constructor() {\n    this.pool = null;\n    this.testUsers = [];\n    this.testData = [];\n  }\n\n  /**\n   * Initialize database connection for tests\n   */\n  async initialize() {\n    try {\n      // Use environment variables or defaults for database connection\n      const dbConfig = {\n        host: process.env.TEST_DB_HOST || process.env.DB_HOST || 'localhost',\n        port: process.env.TEST_DB_PORT || process.env.DB_PORT || 5432,\n        database: process.env.TEST_DB_NAME || process.env.DB_NAME || 'financial_platform_test',\n        user: process.env.TEST_DB_USER || process.env.DB_USER || 'postgres',\n        password: process.env.TEST_DB_PASSWORD || process.env.DB_PASSWORD || 'postgres',\n        ssl: (process.env.TEST_DB_SSL || process.env.DB_SSL || 'false') === 'true',\n        max: 5, // Limit connections for tests\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 2000,\n      };\n\n      console.log('üîå Connecting to test database:', {\n        host: dbConfig.host,\n        port: dbConfig.port,\n        database: dbConfig.database,\n        user: dbConfig.user,\n        ssl: dbConfig.ssl\n      });\n\n      this.pool = new Pool(dbConfig);\n\n      // Test the connection\n      const client = await this.pool.connect();\n      await client.query('SELECT NOW()');\n      client.release();\n\n      console.log('‚úÖ Database test connection established');\n\n      // Ensure test tables exist\n      await this.ensureTestTables();\n\n    } catch (error) {\n      console.error('‚ùå Database test connection failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Ensure required test tables exist\n   */\n  async ensureTestTables() {\n    try {\n      const client = await this.pool.connect();\n\n      // Create users table if it doesn't exist\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS users (\n          user_id SERIAL PRIMARY KEY,\n          email VARCHAR(255) UNIQUE NOT NULL,\n          username VARCHAR(100) UNIQUE NOT NULL,\n          cognito_user_id VARCHAR(255) UNIQUE,\n          password_hash VARCHAR(255),\n          first_name VARCHAR(100),\n          last_name VARCHAR(100),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          is_active BOOLEAN DEFAULT true,\n          role VARCHAR(50) DEFAULT 'user'\n        )\n      `);\n\n      // Create api_keys table if it doesn't exist\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS api_keys (\n          api_key_id SERIAL PRIMARY KEY,\n          user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,\n          provider VARCHAR(50) NOT NULL,\n          encrypted_api_key TEXT NOT NULL,\n          encrypted_secret_key TEXT,\n          salt VARCHAR(255) NOT NULL,\n          description TEXT,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          last_used_at TIMESTAMP,\n          validation_status VARCHAR(50) DEFAULT 'pending',\n          UNIQUE(user_id, provider)\n        )\n      `);\n\n      // Create portfolio table if it doesn't exist\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS portfolio (\n          portfolio_id SERIAL PRIMARY KEY,\n          user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,\n          symbol VARCHAR(10) NOT NULL,\n          quantity DECIMAL(15, 6) NOT NULL,\n          avg_cost DECIMAL(10, 2) NOT NULL,\n          current_price DECIMAL(10, 2),\n          market_value DECIMAL(15, 2),\n          unrealized_pl DECIMAL(15, 2),\n          sector VARCHAR(100),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(user_id, symbol)\n        )\n      `);\n\n      // Create watchlist table if it doesn't exist\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS watchlist (\n          watchlist_id SERIAL PRIMARY KEY,\n          user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,\n          symbol VARCHAR(10) NOT NULL,\n          notes TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(user_id, symbol)\n        )\n      `);\n\n      // Create alerts table if it doesn't exist\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS alerts (\n          alert_id SERIAL PRIMARY KEY,\n          user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,\n          symbol VARCHAR(10) NOT NULL,\n          condition VARCHAR(20) NOT NULL,\n          target_price DECIMAL(10, 2) NOT NULL,\n          alert_type VARCHAR(20) NOT NULL,\n          notes TEXT,\n          is_active BOOLEAN DEFAULT true,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          triggered_at TIMESTAMP\n        )\n      `);\n\n      client.release();\n      console.log('‚úÖ Test tables verified/created');\n\n    } catch (error) {\n      console.error('‚ùå Failed to ensure test tables:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a test user\n   */\n  async createTestUser(userData = {}) {\n    const client = await this.pool.connect();\n    try {\n      const defaultUser = {\n        email: `test-${Date.now()}@example.com`,\n        username: `testuser${Date.now()}`,\n        cognito_user_id: `test-cognito-${Date.now()}`,\n        first_name: 'Test',\n        last_name: 'User',\n        role: 'user'\n      };\n\n      const user = { ...defaultUser, ...userData };\n\n      const result = await client.query(`\n        INSERT INTO users (email, username, cognito_user_id, first_name, last_name, role)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *\n      `, [user.email, user.username, user.cognito_user_id, user.first_name, user.last_name, user.role]);\n\n      const createdUser = result.rows[0];\n      this.testUsers.push(createdUser);\n      \n      console.log('üë§ Created test user:', createdUser.email);\n      return createdUser;\n\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Create test API keys for a user\n   */\n  async createTestApiKeys(userId, apiKeys = {}) {\n    const client = await this.pool.connect();\n    try {\n      const defaultKeys = {\n        alpaca_api_key: 'PKTEST123456789ABCDE',\n        alpaca_secret_key: 'secret12345678901234567890secret12345'\n      };\n\n      const keys = { ...defaultKeys, ...apiKeys };\n      const createdKeys = [];\n\n      // Create Alpaca API key\n      if (keys.alpaca_api_key) {\n        const salt = crypto.randomBytes(32).toString('hex');\n        const cipher = crypto.createCipher('aes-256-cbc', process.env.API_KEY_ENCRYPTION_SECRET + salt);\n        let encryptedKey = cipher.update(keys.alpaca_api_key, 'utf8', 'hex');\n        encryptedKey += cipher.final('hex');\n\n        let encryptedSecret = null;\n        if (keys.alpaca_secret_key) {\n          const secretCipher = crypto.createCipher('aes-256-cbc', process.env.API_KEY_ENCRYPTION_SECRET + salt);\n          encryptedSecret = secretCipher.update(keys.alpaca_secret_key, 'utf8', 'hex');\n          encryptedSecret += secretCipher.final('hex');\n        }\n\n        const result = await client.query(`\n          INSERT INTO api_keys (user_id, provider, encrypted_api_key, encrypted_secret_key, salt, description, validation_status)\n          VALUES ($1, $2, $3, $4, $5, $6, $7)\n          RETURNING *\n        `, [userId, 'alpaca', encryptedKey, encryptedSecret, salt, 'Test Alpaca API Key', 'active']);\n\n        createdKeys.push(result.rows[0]);\n      }\n\n      console.log('üîë Created API keys for user:', userId);\n      return createdKeys;\n\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Create test portfolio for a user\n   */\n  async createTestPortfolio(userId, positions = []) {\n    const client = await this.pool.connect();\n    try {\n      const defaultPositions = [\n        {\n          symbol: 'AAPL',\n          quantity: 100,\n          avg_cost: 150.00,\n          current_price: 155.00,\n          sector: 'Technology'\n        },\n        {\n          symbol: 'MSFT',\n          quantity: 50,\n          avg_cost: 300.00,\n          current_price: 310.00,\n          sector: 'Technology'\n        }\n      ];\n\n      const portfolioPositions = positions.length > 0 ? positions : defaultPositions;\n      const createdPositions = [];\n\n      for (const position of portfolioPositions) {\n        const marketValue = position.quantity * position.current_price;\n        const unrealizedPl = marketValue - (position.quantity * position.avg_cost);\n\n        const result = await client.query(`\n          INSERT INTO portfolio (user_id, symbol, quantity, avg_cost, current_price, market_value, unrealized_pl, sector)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n          RETURNING *\n        `, [userId, position.symbol, position.quantity, position.avg_cost, position.current_price, marketValue, unrealizedPl, position.sector]);\n\n        createdPositions.push(result.rows[0]);\n      }\n\n      console.log('üìä Created portfolio positions for user:', userId);\n      return createdPositions;\n\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Create test transactions\n   */\n  async createTestTransactions(userId, transactions = []) {\n    // This would create transactions in a transactions table\n    // For now, just return the input data since transactions table may not exist\n    console.log('üí∞ Created test transactions for user:', userId);\n    return transactions;\n  }\n\n  /**\n   * Add positions to existing portfolio\n   */\n  async addPositionsToPortfolio(userId, positions = []) {\n    const client = await this.pool.connect();\n    try {\n      const createdPositions = [];\n\n      for (const position of positions) {\n        const marketValue = position.quantity * position.current_price;\n        const unrealizedPl = marketValue - (position.quantity * position.avg_cost);\n\n        const result = await client.query(`\n          INSERT INTO portfolio (user_id, symbol, quantity, avg_cost, current_price, market_value, unrealized_pl, sector)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n          ON CONFLICT (user_id, symbol) \n          DO UPDATE SET\n            quantity = EXCLUDED.quantity,\n            avg_cost = EXCLUDED.avg_cost,\n            current_price = EXCLUDED.current_price,\n            market_value = EXCLUDED.market_value,\n            unrealized_pl = EXCLUDED.unrealized_pl,\n            updated_at = CURRENT_TIMESTAMP\n          RETURNING *\n        `, [userId, position.symbol, position.quantity, position.avg_cost, position.current_price, marketValue, unrealizedPl, position.sector]);\n\n        createdPositions.push(result.rows[0]);\n      }\n\n      return createdPositions;\n\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Clean up test data\n   */\n  async cleanup() {\n    if (!this.pool) return;\n\n    try {\n      const client = await this.pool.connect();\n\n      // Delete test users and their associated data (CASCADE will handle related records)\n      for (const user of this.testUsers) {\n        await client.query('DELETE FROM users WHERE user_id = $1', [user.user_id]);\n      }\n\n      client.release();\n      console.log('üßπ Test data cleaned up');\n\n      // Close the pool\n      await this.pool.end();\n      console.log('üîå Database test connection closed');\n\n    } catch (error) {\n      console.error('‚ùå Cleanup failed:', error.message);\n    }\n  }\n\n  /**\n   * Execute raw SQL query (for advanced test scenarios)\n   */\n  async query(sql, params = []) {\n    const client = await this.pool.connect();\n    try {\n      const result = await client.query(sql, params);\n      return result;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get a database client for transactions\n   */\n  async getClient() {\n    return await this.pool.connect();\n  }\n}\n\n// Export singleton instance\nconst dbTestUtils = new DatabaseTestUtils();\n\n/**\n * Helper function: Create test user\n */\nasync function createTestUser(userPrefix = 'test-user') {\n  return await dbTestUtils.createTestUser(userPrefix);\n}\n\n/**\n * Helper function: Create test API keys\n */\nasync function createTestApiKeys(userId, apiKeys = {}) {\n  return await dbTestUtils.createTestApiKeys(userId, apiKeys);\n}\n\n/**\n * Helper function: Clean up test user\n */\nasync function cleanupTestUser(userId) {\n  if (!dbTestUtils.pool) return;\n\n  try {\n    const client = await dbTestUtils.pool.connect();\n    await client.query('DELETE FROM users WHERE user_id = $1', [userId]);\n    client.release();\n    console.log('üßπ Cleaned up test user:', userId);\n  } catch (error) {\n    console.error('‚ùå Failed to cleanup test user:', error.message);\n  }\n}\n\n/**\n * Helper function: Execute function within a database transaction\n */\nasync function withDatabaseTransaction(callback) {\n  if (!dbTestUtils.pool) {\n    // If no database available, use mock client\n    const mockClient = {\n      query: jest.fn().mockResolvedValue({ rows: [], rowCount: 0 }),\n      release: jest.fn()\n    };\n    return await callback(mockClient);\n  }\n\n  const client = await dbTestUtils.getClient();\n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('ROLLBACK'); // Always rollback in tests\n    return result;\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\nmodule.exports = {\n  dbTestUtils,\n  DatabaseTestUtils,\n  createTestUser,\n  createTestApiKeys,\n  cleanupTestUser,\n  withDatabaseTransaction\n};"],"mappings":"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","ignoreList":[]}