6a00078d1923cb8a8b2171064b3c00de
/* istanbul ignore next */
function cov_10qj01nbpx() {
  var path = "/home/stocks/algo/webapp/lambda/utils/portfolioDataRefresh.js";
  var hash = "b50cc8ff4717dc898a77524d8f75a7e1b2eea64f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/utils/portfolioDataRefresh.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "1": {
        start: {
          line: 5,
          column: 78
        },
        end: {
          line: 5,
          column: 108
        }
      },
      "2": {
        start: {
          line: 6,
          column: 40
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "3": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 39
        }
      },
      "4": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 56
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 47
        }
      },
      "7": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "8": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "9": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 92
        }
      },
      "10": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 75
        }
      },
      "11": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "12": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 44
        }
      },
      "13": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 89
        }
      },
      "14": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 38,
          column: 7
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "16": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 43,
          column: 7
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 79
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 84
        }
      },
      "19": {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 45,
          column: 149
        }
      },
      "20": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 74
        }
      },
      "21": {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 51,
          column: 67
        }
      },
      "22": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 82
        }
      },
      "23": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 59,
          column: 8
        }
      },
      "24": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 62,
          column: 89
        }
      },
      "25": {
        start: {
          line: 63,
          column: 6
        },
        end: {
          line: 67,
          column: 8
        }
      },
      "26": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 47
        }
      },
      "27": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "28": {
        start: {
          line: 78,
          column: 21
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "29": {
        start: {
          line: 87,
          column: 6
        },
        end: {
          line: 87,
          column: 48
        }
      },
      "30": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "31": {
        start: {
          line: 89,
          column: 6
        },
        end: {
          line: 89,
          column: 69
        }
      },
      "32": {
        start: {
          line: 90,
          column: 6
        },
        end: {
          line: 90,
          column: 16
        }
      },
      "33": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "34": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "35": {
        start: {
          line: 106,
          column: 36
        },
        end: {
          line: 106,
          column: 80
        }
      },
      "36": {
        start: {
          line: 108,
          column: 6
        },
        end: {
          line: 112,
          column: 7
        }
      },
      "37": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 33
        }
      },
      "39": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "40": {
        start: {
          line: 114,
          column: 6
        },
        end: {
          line: 114,
          column: 82
        }
      },
      "41": {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 76
        }
      },
      "42": {
        start: {
          line: 119,
          column: 6
        },
        end: {
          line: 119,
          column: 48
        }
      },
      "43": {
        start: {
          line: 122,
          column: 6
        },
        end: {
          line: 122,
          column: 68
        }
      },
      "44": {
        start: {
          line: 124,
          column: 6
        },
        end: {
          line: 124,
          column: 21
        }
      },
      "45": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 127,
          column: 60
        }
      },
      "46": {
        start: {
          line: 128,
          column: 6
        },
        end: {
          line: 128,
          column: 31
        }
      },
      "47": {
        start: {
          line: 129,
          column: 6
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "48": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "49": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "50": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "51": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 71
        }
      },
      "52": {
        start: {
          line: 141,
          column: 49
        },
        end: {
          line: 141,
          column: 60
        }
      },
      "53": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "54": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 150,
          column: 62
        }
      },
      "55": {
        start: {
          line: 150,
          column: 51
        },
        end: {
          line: 150,
          column: 61
        }
      },
      "56": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 151,
          column: 71
        }
      },
      "57": {
        start: {
          line: 151,
          column: 38
        },
        end: {
          line: 151,
          column: 69
        }
      },
      "58": {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 154,
          column: 63
        }
      },
      "59": {
        start: {
          line: 156,
          column: 6
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "60": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "61": {
        start: {
          line: 165,
          column: 6
        },
        end: {
          line: 173,
          column: 44
        }
      },
      "62": {
        start: {
          line: 175,
          column: 6
        },
        end: {
          line: 175,
          column: 77
        }
      },
      "63": {
        start: {
          line: 178,
          column: 6
        },
        end: {
          line: 178,
          column: 94
        }
      },
      "64": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 194,
          column: 5
        }
      },
      "65": {
        start: {
          line: 187,
          column: 6
        },
        end: {
          line: 191,
          column: 19
        }
      },
      "66": {
        start: {
          line: 193,
          column: 6
        },
        end: {
          line: 193,
          column: 75
        }
      },
      "67": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "68": {
        start: {
          line: 202,
          column: 21
        },
        end: {
          line: 212,
          column: 18
        }
      },
      "69": {
        start: {
          line: 214,
          column: 6
        },
        end: {
          line: 216,
          column: 7
        }
      },
      "70": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 72
        }
      },
      "71": {
        start: {
          line: 218,
          column: 22
        },
        end: {
          line: 218,
          column: 36
        }
      },
      "72": {
        start: {
          line: 219,
          column: 6
        },
        end: {
          line: 225,
          column: 8
        }
      },
      "73": {
        start: {
          line: 228,
          column: 6
        },
        end: {
          line: 228,
          column: 60
        }
      },
      "74": {
        start: {
          line: 229,
          column: 6
        },
        end: {
          line: 229,
          column: 55
        }
      },
      "75": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "76": {
        start: {
          line: 238,
          column: 6
        },
        end: {
          line: 238,
          column: 88
        }
      },
      "77": {
        start: {
          line: 241,
          column: 27
        },
        end: {
          line: 241,
          column: 68
        }
      },
      "78": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 246,
          column: 7
        }
      },
      "79": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "80": {
        start: {
          line: 248,
          column: 6
        },
        end: {
          line: 248,
          column: 140
        }
      },
      "81": {
        start: {
          line: 251,
          column: 6
        },
        end: {
          line: 251,
          column: 84
        }
      },
      "82": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 300,
          column: 5
        }
      },
      "83": {
        start: {
          line: 262,
          column: 26
        },
        end: {
          line: 262,
          column: 82
        }
      },
      "84": {
        start: {
          line: 265,
          column: 25
        },
        end: {
          line: 265,
          column: 42
        }
      },
      "85": {
        start: {
          line: 267,
          column: 25
        },
        end: {
          line: 290,
          column: 7
        }
      },
      "86": {
        start: {
          line: 292,
          column: 22
        },
        end: {
          line: 292,
          column: 52
        }
      },
      "87": {
        start: {
          line: 293,
          column: 21
        },
        end: {
          line: 293,
          column: 49
        }
      },
      "88": {
        start: {
          line: 294,
          column: 6
        },
        end: {
          line: 294,
          column: 99
        }
      },
      "89": {
        start: {
          line: 295,
          column: 6
        },
        end: {
          line: 295,
          column: 18
        }
      },
      "90": {
        start: {
          line: 298,
          column: 6
        },
        end: {
          line: 298,
          column: 69
        }
      },
      "91": {
        start: {
          line: 299,
          column: 6
        },
        end: {
          line: 299,
          column: 19
        }
      },
      "92": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 328,
          column: 5
        }
      },
      "93": {
        start: {
          line: 309,
          column: 22
        },
        end: {
          line: 313,
          column: 7
        }
      },
      "94": {
        start: {
          line: 315,
          column: 21
        },
        end: {
          line: 319,
          column: 7
        }
      },
      "95": {
        start: {
          line: 321,
          column: 22
        },
        end: {
          line: 321,
          column: 47
        }
      },
      "96": {
        start: {
          line: 322,
          column: 21
        },
        end: {
          line: 322,
          column: 52
        }
      },
      "97": {
        start: {
          line: 323,
          column: 6
        },
        end: {
          line: 323,
          column: 90
        }
      },
      "98": {
        start: {
          line: 326,
          column: 6
        },
        end: {
          line: 326,
          column: 68
        }
      },
      "99": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 351,
          column: 5
        }
      },
      "100": {
        start: {
          line: 337,
          column: 26
        },
        end: {
          line: 337,
          column: 56
        }
      },
      "101": {
        start: {
          line: 340,
          column: 28
        },
        end: {
          line: 340,
          column: 63
        }
      },
      "102": {
        start: {
          line: 342,
          column: 6
        },
        end: {
          line: 346,
          column: 8
        }
      },
      "103": {
        start: {
          line: 349,
          column: 6
        },
        end: {
          line: 349,
          column: 65
        }
      },
      "104": {
        start: {
          line: 350,
          column: 6
        },
        end: {
          line: 350,
          column: 55
        }
      },
      "105": {
        start: {
          line: 358,
          column: 4
        },
        end: {
          line: 394,
          column: 5
        }
      },
      "106": {
        start: {
          line: 359,
          column: 26
        },
        end: {
          line: 359,
          column: 82
        }
      },
      "107": {
        start: {
          line: 361,
          column: 21
        },
        end: {
          line: 367,
          column: 7
        }
      },
      "108": {
        start: {
          line: 369,
          column: 26
        },
        end: {
          line: 369,
          column: 54
        }
      },
      "109": {
        start: {
          line: 370,
          column: 21
        },
        end: {
          line: 370,
          column: 53
        }
      },
      "110": {
        start: {
          line: 372,
          column: 6
        },
        end: {
          line: 387,
          column: 7
        }
      },
      "111": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 376,
          column: 10
        }
      },
      "112": {
        start: {
          line: 377,
          column: 30
        },
        end: {
          line: 377,
          column: 66
        }
      },
      "113": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 386,
          column: 12
        }
      },
      "114": {
        start: {
          line: 379,
          column: 48
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "115": {
        start: {
          line: 389,
          column: 6
        },
        end: {
          line: 389,
          column: 16
        }
      },
      "116": {
        start: {
          line: 392,
          column: 6
        },
        end: {
          line: 392,
          column: 75
        }
      },
      "117": {
        start: {
          line: 393,
          column: 6
        },
        end: {
          line: 393,
          column: 16
        }
      },
      "118": {
        start: {
          line: 401,
          column: 4
        },
        end: {
          line: 427,
          column: 5
        }
      },
      "119": {
        start: {
          line: 403,
          column: 21
        },
        end: {
          line: 409,
          column: 18
        }
      },
      "120": {
        start: {
          line: 411,
          column: 6
        },
        end: {
          line: 413,
          column: 7
        }
      },
      "121": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 20
        }
      },
      "122": {
        start: {
          line: 415,
          column: 26
        },
        end: {
          line: 415,
          column: 60
        }
      },
      "123": {
        start: {
          line: 416,
          column: 6
        },
        end: {
          line: 418,
          column: 7
        }
      },
      "124": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 20
        }
      },
      "125": {
        start: {
          line: 421,
          column: 32
        },
        end: {
          line: 421,
          column: 87
        }
      },
      "126": {
        start: {
          line: 422,
          column: 6
        },
        end: {
          line: 422,
          column: 35
        }
      },
      "127": {
        start: {
          line: 425,
          column: 6
        },
        end: {
          line: 425,
          column: 59
        }
      },
      "128": {
        start: {
          line: 426,
          column: 6
        },
        end: {
          line: 426,
          column: 18
        }
      },
      "129": {
        start: {
          line: 432,
          column: 36
        },
        end: {
          line: 432,
          column: 69
        }
      },
      "130": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 434,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 3
          }
        },
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 15,
            column: 3
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        loc: {
          start: {
            line: 23,
            column: 68
          },
          end: {
            line: 71,
            column: 3
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 76,
            column: 2
          },
          end: {
            line: 76,
            column: 3
          }
        },
        loc: {
          start: {
            line: 76,
            column: 50
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 76
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 87,
            column: 30
          }
        },
        loc: {
          start: {
            line: 87,
            column: 36
          },
          end: {
            line: 87,
            column: 46
          }
        },
        line: 87
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 97,
            column: 3
          }
        },
        loc: {
          start: {
            line: 97,
            column: 43
          },
          end: {
            line: 131,
            column: 3
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        },
        loc: {
          start: {
            line: 136,
            column: 42
          },
          end: {
            line: 158,
            column: 3
          }
        },
        line: 136
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 141,
            column: 39
          },
          end: {
            line: 141,
            column: 40
          }
        },
        loc: {
          start: {
            line: 141,
            column: 49
          },
          end: {
            line: 141,
            column: 60
          }
        },
        line: 141
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 150,
            column: 45
          }
        },
        loc: {
          start: {
            line: 150,
            column: 51
          },
          end: {
            line: 150,
            column: 61
          }
        },
        line: 150
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 151,
            column: 28
          },
          end: {
            line: 151,
            column: 29
          }
        },
        loc: {
          start: {
            line: 151,
            column: 38
          },
          end: {
            line: 151,
            column: 69
          }
        },
        line: 151
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 163,
            column: 2
          },
          end: {
            line: 163,
            column: 3
          }
        },
        loc: {
          start: {
            line: 163,
            column: 45
          },
          end: {
            line: 180,
            column: 3
          }
        },
        line: 163
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 185,
            column: 2
          },
          end: {
            line: 185,
            column: 3
          }
        },
        loc: {
          start: {
            line: 185,
            column: 58
          },
          end: {
            line: 195,
            column: 3
          }
        },
        line: 185
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 200,
            column: 2
          },
          end: {
            line: 200,
            column: 3
          }
        },
        loc: {
          start: {
            line: 200,
            column: 33
          },
          end: {
            line: 231,
            column: 3
          }
        },
        line: 200
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 236,
            column: 2
          },
          end: {
            line: 236,
            column: 3
          }
        },
        loc: {
          start: {
            line: 236,
            column: 53
          },
          end: {
            line: 254,
            column: 3
          }
        },
        line: 236
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 259,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        },
        loc: {
          start: {
            line: 259,
            column: 39
          },
          end: {
            line: 301,
            column: 3
          }
        },
        line: 259
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 306,
            column: 2
          },
          end: {
            line: 306,
            column: 3
          }
        },
        loc: {
          start: {
            line: 306,
            column: 42
          },
          end: {
            line: 329,
            column: 3
          }
        },
        line: 306
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 334,
            column: 2
          },
          end: {
            line: 334,
            column: 3
          }
        },
        loc: {
          start: {
            line: 334,
            column: 37
          },
          end: {
            line: 352,
            column: 3
          }
        },
        line: 334
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 357,
            column: 2
          },
          end: {
            line: 357,
            column: 3
          }
        },
        loc: {
          start: {
            line: 357,
            column: 28
          },
          end: {
            line: 395,
            column: 3
          }
        },
        line: 357
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 379,
            column: 39
          },
          end: {
            line: 379,
            column: 40
          }
        },
        loc: {
          start: {
            line: 379,
            column: 48
          },
          end: {
            line: 386,
            column: 9
          }
        },
        line: 379
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 400,
            column: 2
          },
          end: {
            line: 400,
            column: 3
          }
        },
        loc: {
          start: {
            line: 400,
            column: 32
          },
          end: {
            line: 428,
            column: 3
          }
        },
        line: 400
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 41
          }
        }, {
          start: {
            line: 12,
            column: 45
          },
          end: {
            line: 12,
            column: 56
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 54
          },
          end: {
            line: 23,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 64
          },
          end: {
            line: 23,
            column: 66
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 38,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 38,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 6
          },
          end: {
            line: 43,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 6
          },
          end: {
            line: 43,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 114
          },
          end: {
            line: 45,
            column: 145
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 135
          },
          end: {
            line: 45,
            column: 140
          }
        }, {
          start: {
            line: 45,
            column: 143
          },
          end: {
            line: 45,
            column: 145
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 112,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 112,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 214,
            column: 6
          },
          end: {
            line: 216,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 6
          },
          end: {
            line: 216,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "9": {
        loc: {
          start: {
            line: 221,
            column: 28
          },
          end: {
            line: 221,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 28
          },
          end: {
            line: 221,
            column: 43
          }
        }, {
          start: {
            line: 221,
            column: 47
          },
          end: {
            line: 221,
            column: 51
          }
        }],
        line: 221
      },
      "10": {
        loc: {
          start: {
            line: 243,
            column: 6
          },
          end: {
            line: 246,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 6
          },
          end: {
            line: 246,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "11": {
        loc: {
          start: {
            line: 248,
            column: 105
          },
          end: {
            line: 248,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 126
          },
          end: {
            line: 248,
            column: 131
          }
        }, {
          start: {
            line: 248,
            column: 134
          },
          end: {
            line: 248,
            column: 136
          }
        }],
        line: 248
      },
      "12": {
        loc: {
          start: {
            line: 262,
            column: 26
          },
          end: {
            line: 262,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 26
          },
          end: {
            line: 262,
            column: 54
          }
        }, {
          start: {
            line: 262,
            column: 58
          },
          end: {
            line: 262,
            column: 82
          }
        }],
        line: 262
      },
      "13": {
        loc: {
          start: {
            line: 274,
            column: 14
          },
          end: {
            line: 274,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 14
          },
          end: {
            line: 274,
            column: 37
          }
        }, {
          start: {
            line: 274,
            column: 41
          },
          end: {
            line: 274,
            column: 55
          }
        }],
        line: 274
      },
      "14": {
        loc: {
          start: {
            line: 275,
            column: 14
          },
          end: {
            line: 275,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 14
          },
          end: {
            line: 275,
            column: 37
          }
        }, {
          start: {
            line: 275,
            column: 41
          },
          end: {
            line: 275,
            column: 55
          }
        }],
        line: 275
      },
      "15": {
        loc: {
          start: {
            line: 277,
            column: 29
          },
          end: {
            line: 277,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 29
          },
          end: {
            line: 277,
            column: 58
          }
        }, {
          start: {
            line: 277,
            column: 62
          },
          end: {
            line: 277,
            column: 72
          }
        }],
        line: 277
      },
      "16": {
        loc: {
          start: {
            line: 359,
            column: 26
          },
          end: {
            line: 359,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 26
          },
          end: {
            line: 359,
            column: 54
          }
        }, {
          start: {
            line: 359,
            column: 58
          },
          end: {
            line: 359,
            column: 82
          }
        }],
        line: 359
      },
      "17": {
        loc: {
          start: {
            line: 372,
            column: 6
          },
          end: {
            line: 387,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 6
          },
          end: {
            line: 387,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "18": {
        loc: {
          start: {
            line: 411,
            column: 6
          },
          end: {
            line: 413,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 6
          },
          end: {
            line: 413,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "19": {
        loc: {
          start: {
            line: 416,
            column: 6
          },
          end: {
            line: 418,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 6
          },
          end: {
            line: 418,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b50cc8ff4717dc898a77524d8f75a7e1b2eea64f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10qj01nbpx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10qj01nbpx();
// Portfolio Data Refresh Service
// Integrates API key system with data loaders to refresh portfolio-relevant data

const {
  query
} =
/* istanbul ignore next */
(cov_10qj01nbpx().s[0]++, require('./database'));
const {
  ECSClient,
  RunTaskCommand,
  ListTasksCommand,
  DescribeTasksCommand
} =
/* istanbul ignore next */
(cov_10qj01nbpx().s[1]++, require('@aws-sdk/client-ecs'));
const {
  LambdaClient,
  InvokeCommand
} =
/* istanbul ignore next */
(cov_10qj01nbpx().s[2]++, require('@aws-sdk/client-lambda'));
class PortfolioDataRefreshService {
  constructor() {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[0]++;
    cov_10qj01nbpx().s[3]++;
    this.refreshInProgress = new Set();
    // Initialize AWS services for triggering data loaders
    const region =
    /* istanbul ignore next */
    (cov_10qj01nbpx().s[4]++,
    /* istanbul ignore next */
    (cov_10qj01nbpx().b[0][0]++, process.env.AWS_REGION) ||
    /* istanbul ignore next */
    (cov_10qj01nbpx().b[0][1]++, 'us-east-1'));
    /* istanbul ignore next */
    cov_10qj01nbpx().s[5]++;
    this.ecs = new ECSClient({
      region
    });
    /* istanbul ignore next */
    cov_10qj01nbpx().s[6]++;
    this.lambda = new LambdaClient({
      region
    });
  }

  /**
   * Trigger data refresh for portfolio-relevant symbols when user adds API keys
   * @param {string} userId - User ID
   * @param {string} provider - Broker provider (alpaca, td_ameritrade, etc.)
   * @param {Array} symbols - Array of symbols from user's portfolio
   */
  async triggerPortfolioDataRefresh(userId, provider, symbols =
  /* istanbul ignore next */
  (cov_10qj01nbpx().b[1][0]++, [])) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[1]++;
    const refreshId =
    /* istanbul ignore next */
    (cov_10qj01nbpx().s[7]++, `${userId}-${provider}`);
    /* istanbul ignore next */
    cov_10qj01nbpx().s[8]++;
    if (this.refreshInProgress.has(refreshId)) {
      /* istanbul ignore next */
      cov_10qj01nbpx().b[2][0]++;
      cov_10qj01nbpx().s[9]++;
      console.log(`⏳ Portfolio data refresh already in progress for ${userId}/${provider}`);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[10]++;
      return {
        status: 'in_progress',
        message: 'Refresh already running'
      };
    } else
    /* istanbul ignore next */
    {
      cov_10qj01nbpx().b[2][1]++;
    }
    cov_10qj01nbpx().s[11]++;
    try {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[12]++;
      this.refreshInProgress.add(refreshId);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[13]++;
      console.log(`🔄 Starting portfolio data refresh for user ${userId} (${provider})`);

      // 1. Get user's portfolio symbols if not provided
      /* istanbul ignore next */
      cov_10qj01nbpx().s[14]++;
      if (symbols.length === 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[3][0]++;
        cov_10qj01nbpx().s[15]++;
        symbols = await this.getUserPortfolioSymbols(userId, provider);
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[3][1]++;
      }
      cov_10qj01nbpx().s[16]++;
      if (symbols.length === 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[4][0]++;
        cov_10qj01nbpx().s[17]++;
        console.log(`ℹ️ No portfolio symbols found for ${userId}/${provider}`);
        /* istanbul ignore next */
        cov_10qj01nbpx().s[18]++;
        return {
          status: 'no_symbols',
          message: 'No portfolio symbols to refresh'
        };
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[4][1]++;
      }
      cov_10qj01nbpx().s[19]++;
      console.log(`📊 Refreshing data for ${symbols.length} portfolio symbols: ${symbols.slice(0, 5).join(', ')}${symbols.length > 5 ?
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[5][0]++, '...') :
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[5][1]++, '')}`);

      // 2. Trigger priority data loading for these symbols
      const refreshResults =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[20]++, await this.refreshSymbolData(symbols, userId));

      // 3. Update portfolio refresh timestamp
      /* istanbul ignore next */
      cov_10qj01nbpx().s[21]++;
      await this.updatePortfolioRefreshTimestamp(userId, provider);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[22]++;
      console.log(`✅ Portfolio data refresh completed for ${userId}/${provider}`);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[23]++;
      return {
        status: 'completed',
        symbolsRefreshed: symbols.length,
        results: refreshResults,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[24]++;
      console.error(`❌ Portfolio data refresh failed for ${userId}/${provider}:`, error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[25]++;
      return {
        status: 'error',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    } finally {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[26]++;
      this.refreshInProgress.delete(refreshId);
    }
  }

  /**
   * Get symbols from user's portfolio holdings
   */
  async getUserPortfolioSymbols(userId, provider) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[2]++;
    cov_10qj01nbpx().s[27]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[28]++, await query(`
        SELECT DISTINCT symbol 
        FROM portfolio_holdings 
        WHERE user_id = $1 
        AND symbol IS NOT NULL 
        AND symbol != ''
        ORDER BY symbol
      `, [userId]));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[29]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_10qj01nbpx().f[3]++;
        cov_10qj01nbpx().s[30]++;
        return row.symbol;
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[31]++;
      console.error('Error fetching user portfolio symbols:', error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[32]++;
      return [];
    }
  }

  /**
   * Refresh data for specific symbols by triggering ECS tasks
   */
  async refreshSymbolData(symbols, userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[4]++;
    const results =
    /* istanbul ignore next */
    (cov_10qj01nbpx().s[33]++, {
      triggered: [],
      failed: [],
      cached: []
    });
    /* istanbul ignore next */
    cov_10qj01nbpx().s[34]++;
    try {
      // Check which symbols need refresh (haven't been updated recently)
      const symbolsNeedingRefresh =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[35]++, await this.getSymbolsNeedingRefresh(symbols));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[36]++;
      if (symbolsNeedingRefresh.length === 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[6][0]++;
        cov_10qj01nbpx().s[37]++;
        console.log('📊 All portfolio symbols have recent data');
        /* istanbul ignore next */
        cov_10qj01nbpx().s[38]++;
        results.cached = symbols;
        /* istanbul ignore next */
        cov_10qj01nbpx().s[39]++;
        return results;
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[6][1]++;
      }
      cov_10qj01nbpx().s[40]++;
      console.log(`🔄 ${symbolsNeedingRefresh.length} symbols need data refresh`);

      // Trigger priority data loading for these symbols
      /* istanbul ignore next */
      cov_10qj01nbpx().s[41]++;
      await this.triggerTechnicalDataLoaders(symbolsNeedingRefresh, userId);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[42]++;
      results.triggered = symbolsNeedingRefresh;

      // Store refresh request for processing by scheduled tasks
      /* istanbul ignore next */
      cov_10qj01nbpx().s[43]++;
      await this.storeRefreshRequest(symbolsNeedingRefresh, userId);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[44]++;
      return results;
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[45]++;
      console.error('Error refreshing symbol data:', error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[46]++;
      results.failed = symbols;
      /* istanbul ignore next */
      cov_10qj01nbpx().s[47]++;
      return results;
    }
  }

  /**
   * Check which symbols need fresh data
   */
  async getSymbolsNeedingRefresh(symbols) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[5]++;
    cov_10qj01nbpx().s[48]++;
    if (symbols.length === 0) {
      /* istanbul ignore next */
      cov_10qj01nbpx().b[7][0]++;
      cov_10qj01nbpx().s[49]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_10qj01nbpx().b[7][1]++;
    }
    cov_10qj01nbpx().s[50]++;
    try {
      // Check when symbols were last updated
      const placeholders =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[51]++, symbols.map((_, i) => {
        /* istanbul ignore next */
        cov_10qj01nbpx().f[6]++;
        cov_10qj01nbpx().s[52]++;
        return `$${i + 1}`;
      }).join(','));
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[53]++, await query(`
        SELECT symbol 
        FROM price_daily 
        WHERE symbol IN (${placeholders})
        AND date >= CURRENT_DATE - INTERVAL '1 day'
        GROUP BY symbol
      `, symbols));
      const recentSymbols =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[54]++, result.rows.map(row => {
        /* istanbul ignore next */
        cov_10qj01nbpx().f[7]++;
        cov_10qj01nbpx().s[55]++;
        return row.symbol;
      }));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[56]++;
      return symbols.filter(symbol => {
        /* istanbul ignore next */
        cov_10qj01nbpx().f[8]++;
        cov_10qj01nbpx().s[57]++;
        return !recentSymbols.includes(symbol);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[58]++;
      console.error('Error checking symbol freshness:', error);
      // If we can't check, assume all need refresh
      /* istanbul ignore next */
      cov_10qj01nbpx().s[59]++;
      return symbols;
    }
  }

  /**
   * Store refresh request for background processing
   */
  async storeRefreshRequest(symbols, userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[9]++;
    cov_10qj01nbpx().s[60]++;
    try {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[61]++;
      await query(`
        INSERT INTO portfolio_data_refresh_requests 
        (user_id, symbols, status, created_at)
        VALUES ($1, $2, 'pending', NOW())
        ON CONFLICT (user_id) DO UPDATE SET
          symbols = EXCLUDED.symbols,
          status = 'pending',
          created_at = NOW()
      `, [userId, JSON.stringify(symbols)]);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[62]++;
      console.log(`💾 Stored refresh request for ${symbols.length} symbols`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[63]++;
      // Table might not exist yet - that's okay
      console.log('⚠️ Could not store refresh request (table may not exist):', error.message);
    }
  }

  /**
   * Update portfolio refresh timestamp
   */
  async updatePortfolioRefreshTimestamp(userId, provider) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[10]++;
    cov_10qj01nbpx().s[64]++;
    try {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[65]++;
      await query(`
        UPDATE portfolio_metadata 
        SET data_last_refreshed = NOW(), updated_at = NOW()
        WHERE user_id = $1
      `, [userId]);
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[66]++;
      console.log('⚠️ Could not update refresh timestamp:', error.message);
    }
  }

  /**
   * Get refresh status for a user
   */
  async getRefreshStatus(userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[11]++;
    cov_10qj01nbpx().s[67]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[68]++, await query(`
        SELECT 
          symbols,
          status,
          created_at,
          completed_at
        FROM portfolio_data_refresh_requests
        WHERE user_id = $1
        ORDER BY created_at DESC
        LIMIT 1
      `, [userId]));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[69]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[8][0]++;
        cov_10qj01nbpx().s[70]++;
        return {
          status: 'none',
          message: 'No refresh requests found'
        };
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[8][1]++;
      }
      const request =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[71]++, result.rows[0]);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[72]++;
      return {
        status: request.status,
        symbols: JSON.parse(
        /* istanbul ignore next */
        (cov_10qj01nbpx().b[9][0]++, request.symbols) ||
        /* istanbul ignore next */
        (cov_10qj01nbpx().b[9][1]++, '[]')),
        requested: request.created_at,
        completed: request.completed_at,
        inProgress: this.refreshInProgress.has(`${userId}-*`)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[73]++;
      console.error('Error getting refresh status:', error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[74]++;
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * Trigger technical data loaders for specific symbols
   */
  async triggerTechnicalDataLoaders(symbols, userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[12]++;
    cov_10qj01nbpx().s[75]++;
    try {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[76]++;
      console.log(`🚀 Triggering technical data loaders for ${symbols.length} symbols`);

      // Method 1: Try ECS task if cluster exists
      const ecsTriggered =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[77]++, await this.triggerECSDataLoaders(symbols));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[78]++;
      if (!ecsTriggered) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[10][0]++;
        cov_10qj01nbpx().s[79]++;
        // Method 2: Fall back to Lambda invocation for smaller symbol sets
        await this.triggerLambdaDataLoaders(symbols);
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[10][1]++;
      }
      cov_10qj01nbpx().s[80]++;
      console.log(`✅ Successfully triggered data loaders for symbols: ${symbols.slice(0, 5).join(', ')}${symbols.length > 5 ?
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[11][0]++, '...') :
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[11][1]++, '')}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[81]++;
      console.warn(`⚠️ Failed to trigger technical data loaders: ${error.message}`);
      // Don't fail the whole process if data loading fails
    }
  }

  /**
   * Trigger ECS tasks for technical data loading
   */
  async triggerECSDataLoaders(symbols) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[13]++;
    cov_10qj01nbpx().s[82]++;
    try {
      // Check if ECS cluster exists (optional - for production deployments)
      const clusterName =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[83]++,
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[12][0]++, process.env.ECS_CLUSTER_NAME) ||
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[12][1]++, 'stocks-data-processing'));

      // For small symbol sets, use environment variable approach
      const symbolList =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[84]++, symbols.join(','));
      const taskParams =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[85]++, {
        cluster: clusterName,
        taskDefinition: 'loadtechnicalsdaily-task',
        // Task definition name
        launchType: 'FARGATE',
        networkConfiguration: {
          awsvpcConfiguration: {
            subnets: [
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[13][0]++, process.env.SUBNET_ID_1) ||
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[13][1]++, 'subnet-12345'),
            // Would be from CloudFormation
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[14][0]++, process.env.SUBNET_ID_2) ||
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[14][1]++, 'subnet-67890')],
            securityGroups: [
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[15][0]++, process.env.SECURITY_GROUP_ID) ||
            /* istanbul ignore next */
            (cov_10qj01nbpx().b[15][1]++, 'sg-12345')],
            assignPublicIp: 'ENABLED'
          }
        },
        overrides: {
          containerOverrides: [{
            name: 'loadtechnicalsdaily',
            environment: [{
              name: 'PRIORITY_SYMBOLS',
              value: symbolList
            }, {
              name: 'TRIGGER_SOURCE',
              value: 'portfolio_refresh'
            }]
          }]
        }
      });
      const command =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[86]++, new RunTaskCommand(taskParams));
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[87]++, await this.ecs.send(command));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[88]++;
      console.log(`🎯 ECS task triggered for technical data loading: ${result.tasks[0]?.taskArn}`);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[89]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[90]++;
      console.log(`⚠️ ECS task triggering failed: ${error.message}`);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[91]++;
      return false; // Fall back to Lambda approach
    }
  }

  /**
   * Trigger Lambda functions for technical data loading (fallback)
   */
  async triggerLambdaDataLoaders(symbols) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[14]++;
    cov_10qj01nbpx().s[92]++;
    try {
      // For smaller symbol sets, can invoke a Lambda that processes them
      const payload =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[93]++, {
        symbols: symbols,
        triggerSource: 'portfolio_refresh',
        priority: true
      });
      const params =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[94]++, {
        FunctionName: 'loadtechnicalsdaily-lambda',
        // Lambda function name
        InvocationType: 'Event',
        // Async invocation
        Payload: JSON.stringify(payload)
      });
      const command =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[95]++, new InvokeCommand(params));
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[96]++, await this.lambda.send(command));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[97]++;
      console.log(`🎯 Lambda triggered for technical data loading: ${result.StatusCode}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[98]++;
      console.warn(`⚠️ Lambda triggering failed: ${error.message}`);
      // This is a fallback, so just log the warning
    }
  }

  /**
   * Get status of data loading jobs for a user
   */
  async getDataLoadingStatus(userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[15]++;
    cov_10qj01nbpx().s[99]++;
    try {
      // Check recent ECS tasks for this user's symbols
      const recentTasks =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[100]++, await this.getRecentECSTasks());

      // Check refresh requests status
      const refreshStatus =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[101]++, await this.getRefreshStatus(userId));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[102]++;
      return {
        ecs_tasks: recentTasks,
        refresh_requests: refreshStatus,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[103]++;
      console.error('Error getting data loading status:', error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[104]++;
      return {
        status: 'error',
        error: error.message
      };
    }
  }

  /**
   * Get recent ECS tasks related to technical data loading
   */
  async getRecentECSTasks() {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[16]++;
    cov_10qj01nbpx().s[105]++;
    try {
      const clusterName =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[106]++,
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[16][0]++, process.env.ECS_CLUSTER_NAME) ||
      /* istanbul ignore next */
      (cov_10qj01nbpx().b[16][1]++, 'stocks-data-processing'));
      const params =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[107]++, {
        cluster: clusterName,
        family: 'loadtechnicalsdaily-task',
        maxResults: 10,
        sort: 'CREATED_AT',
        order: 'DESC'
      });
      const listCommand =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[108]++, new ListTasksCommand(params));
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[109]++, await this.ecs.send(listCommand));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[110]++;
      if (result.taskArns.length > 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[17][0]++;
        const describeCommand =
        /* istanbul ignore next */
        (cov_10qj01nbpx().s[111]++, new DescribeTasksCommand({
          cluster: clusterName,
          tasks: result.taskArns
        }));
        const describeTasks =
        /* istanbul ignore next */
        (cov_10qj01nbpx().s[112]++, await this.ecs.send(describeCommand));
        /* istanbul ignore next */
        cov_10qj01nbpx().s[113]++;
        return describeTasks.tasks.map(task => {
          /* istanbul ignore next */
          cov_10qj01nbpx().f[17]++;
          cov_10qj01nbpx().s[114]++;
          return {
            taskArn: task.taskArn,
            lastStatus: task.lastStatus,
            desiredStatus: task.desiredStatus,
            createdAt: task.createdAt,
            startedAt: task.startedAt,
            stoppedAt: task.stoppedAt
          };
        });
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[17][1]++;
      }
      cov_10qj01nbpx().s[115]++;
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[116]++;
      console.warn(`⚠️ Could not fetch ECS task status: ${error.message}`);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[117]++;
      return [];
    }
  }

  /**
   * Check if data refresh is needed for user's portfolio
   */
  async isRefreshNeeded(userId) {
    /* istanbul ignore next */
    cov_10qj01nbpx().f[18]++;
    cov_10qj01nbpx().s[118]++;
    try {
      // Check when portfolio data was last refreshed
      const result =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[119]++, await query(`
        SELECT data_last_refreshed 
        FROM portfolio_metadata 
        WHERE user_id = $1
        ORDER BY data_last_refreshed DESC
        LIMIT 1
      `, [userId]));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[120]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[18][0]++;
        cov_10qj01nbpx().s[121]++;
        return true; // No metadata = needs refresh
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[18][1]++;
      }
      const lastRefresh =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[122]++, result.rows[0].data_last_refreshed);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[123]++;
      if (!lastRefresh) {
        /* istanbul ignore next */
        cov_10qj01nbpx().b[19][0]++;
        cov_10qj01nbpx().s[124]++;
        return true; // Never refreshed
      } else
      /* istanbul ignore next */
      {
        cov_10qj01nbpx().b[19][1]++;
      }

      // Refresh needed if data is older than 4 hours
      const hoursSinceRefresh =
      /* istanbul ignore next */
      (cov_10qj01nbpx().s[125]++, (new Date() - new Date(lastRefresh)) / (1000 * 60 * 60));
      /* istanbul ignore next */
      cov_10qj01nbpx().s[126]++;
      return hoursSinceRefresh > 4;
    } catch (error) {
      /* istanbul ignore next */
      cov_10qj01nbpx().s[127]++;
      console.error('Error checking refresh need:', error);
      /* istanbul ignore next */
      cov_10qj01nbpx().s[128]++;
      return true; // On error, assume refresh needed
    }
  }
}

// Singleton instance
const portfolioDataRefreshService =
/* istanbul ignore next */
(cov_10qj01nbpx().s[129]++, new PortfolioDataRefreshService());
/* istanbul ignore next */
cov_10qj01nbpx().s[130]++;
module.exports = portfolioDataRefreshService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,