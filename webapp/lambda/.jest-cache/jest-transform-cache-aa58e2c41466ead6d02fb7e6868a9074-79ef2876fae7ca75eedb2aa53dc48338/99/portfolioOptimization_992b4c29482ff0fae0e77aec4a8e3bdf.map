{"version":3,"names":["cov_c5e2sq3yj","actualCoverage","express","s","require","router","Router","PortfolioOptimizationService","portfolioOptimization","post","req","res","f","portfolio","marketData","options","b","body","holdings","status","json","success","error","message","Object","keys","length","optimization","optimizePortfolio","data","timestamp","Date","toISOString","console","targetAllocations","strategy","rebalanceOptions","rebalanceThreshold","maxTurnover","taxOptimization","rebalanceData","recommendations","rebalanceRecommendations","currentMetrics","riskAnalysis","taxOptions","taxRecommendations","filter","rec","reason","includes","taxAnalysis","estimatedTaxImpact","potentialSavings","reduce","sum","estimatedTaxSavings","positions","map","pos","symbol","unrealizedPnL","unrealizedPnLPercent","taxHarvestingOpportunity","holdingPeriod","riskTolerance","metrics","calculatePortfolioMetrics","analyzePortfolioRisk","riskMetrics","diversification","diversificationMetrics","sectorExposure","sectorAllocations","concentrationRisk","concentration","benchmark","attribution","calculatePerformanceAttribution","benchmarkReturn","return","portfolioReturn","totals","totalReturn","activeReturn","performanceData","trackingError","Math","abs","informationRatio","summary","get","strategies","getAvailableStrategies","count","changes","scenarios","simulations","modifiedPortfolio","JSON","parse","stringify","forEach","change","holding","find","h","action","shares","newShares","push","averagePrice","price","scenario","scenarioMultipliers","multiplier","scenarioMarketData","totalValue","name","marketMove","toFixed","originalPortfolio","comparison","bestCase","max","values","worstCase","min","expectedReturn","NEUTRAL","samplePortfolio","cash","sampleMarketData","beta","volatility","sector","services","metricsCalculation","features","sampleResults","portfolioValue","positionCount","riskScore","diversificationScore","module","exports"],"sources":["portfolioOptimization.js"],"sourcesContent":["// Portfolio Optimization Routes\n// API endpoints for automated rebalancing, tax optimization, and analytics\n\nconst express = require('express');\nconst router = express.Router();\nconst PortfolioOptimizationService = require('../services/portfolioOptimizationService');\n\n// Initialize service\nconst portfolioOptimization = new PortfolioOptimizationService();\n\n// Optimize portfolio\nrouter.post('/optimize', async (req, res) => {\n  try {\n    const { portfolio, marketData, options = {} } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    if (!marketData || Object.keys(marketData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid market data',\n        message: 'Market data object required'\n      });\n    }\n    \n    const optimization = await portfolioOptimization.optimizePortfolio(\n      portfolio, \n      marketData, \n      options\n    );\n    \n    res.json({\n      success: true,\n      data: optimization,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Portfolio optimization failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to optimize portfolio',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Generate rebalancing recommendations\nrouter.post('/rebalance', async (req, res) => {\n  try {\n    const { \n      portfolio, \n      marketData, \n      targetAllocations = {},\n      strategy = 'THRESHOLD',\n      options = {}\n    } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    const rebalanceOptions = {\n      strategy,\n      targetAllocations,\n      rebalanceThreshold: options.rebalanceThreshold || 0.05,\n      maxTurnover: options.maxTurnover || 0.25,\n      taxOptimization: options.taxOptimization !== false,\n      ...options\n    };\n    \n    const optimization = await portfolioOptimization.optimizePortfolio(\n      portfolio, \n      marketData, \n      rebalanceOptions\n    );\n    \n    // Extract rebalancing-specific data\n    const rebalanceData = {\n      recommendations: optimization.rebalanceRecommendations,\n      currentMetrics: optimization.currentMetrics,\n      optimization: optimization.optimization,\n      riskAnalysis: optimization.riskAnalysis\n    };\n    \n    res.json({\n      success: true,\n      data: rebalanceData,\n      strategy,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Rebalancing failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate rebalancing recommendations',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Tax-loss harvesting analysis\nrouter.post('/tax-optimization', async (req, res) => {\n  try {\n    const { portfolio, marketData, options = {} } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    // Force tax optimization on\n    const taxOptions = {\n      ...options,\n      taxOptimization: true,\n      strategy: 'THRESHOLD',\n      rebalanceThreshold: 0 // Check all positions for tax opportunities\n    };\n    \n    const optimization = await portfolioOptimization.optimizePortfolio(\n      portfolio, \n      marketData, \n      taxOptions\n    );\n    \n    // Filter for tax-related recommendations\n    const taxRecommendations = optimization.rebalanceRecommendations.filter(\n      rec => rec.taxOptimization || rec.reason.includes('tax') || rec.reason.includes('loss')\n    );\n    \n    const taxAnalysis = {\n      recommendations: taxRecommendations,\n      estimatedTaxImpact: optimization.optimization.estimatedTaxImpact,\n      potentialSavings: taxRecommendations.reduce(\n        (sum, rec) => sum + (rec.estimatedTaxSavings || 0), 0\n      ),\n      positions: optimization.currentMetrics.positions.map(pos => ({\n        symbol: pos.symbol,\n        unrealizedPnL: pos.unrealizedPnL,\n        unrealizedPnLPercent: pos.unrealizedPnLPercent,\n        taxHarvestingOpportunity: pos.unrealizedPnL < -500,\n        holdingPeriod: 'LONG_TERM' // Simplified - would calculate actual holding period\n      }))\n    };\n    \n    res.json({\n      success: true,\n      data: taxAnalysis,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Tax optimization failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze tax optimization opportunities',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio risk analysis\nrouter.post('/risk-analysis', async (req, res) => {\n  try {\n    const { portfolio, marketData, riskTolerance = 'MODERATE' } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    const metrics = portfolioOptimization.calculatePortfolioMetrics(portfolio, marketData);\n    const riskAnalysis = portfolioOptimization.analyzePortfolioRisk(\n      portfolio, \n      marketData, \n      riskTolerance\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        metrics: metrics.riskMetrics,\n        diversification: metrics.diversificationMetrics,\n        riskAnalysis,\n        sectorExposure: metrics.sectorAllocations,\n        concentrationRisk: metrics.riskMetrics.concentration\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Risk analysis failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to analyze portfolio risk',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Performance attribution analysis\nrouter.post('/performance-attribution', async (req, res) => {\n  try {\n    const { portfolio, marketData, benchmark = 'SPY' } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    const attribution = portfolioOptimization.calculatePerformanceAttribution(\n      portfolio, \n      marketData\n    );\n    \n    // Calculate benchmark comparison\n    const benchmarkReturn = marketData[benchmark]?.return || 0;\n    const portfolioReturn = attribution.totals.totalReturn;\n    const activeReturn = portfolioReturn - benchmarkReturn;\n    \n    const performanceData = {\n      attribution,\n      benchmark: {\n        symbol: benchmark,\n        return: benchmarkReturn\n      },\n      activeReturn,\n      trackingError: Math.abs(activeReturn), // Simplified\n      informationRatio: Math.abs(activeReturn) > 0 ? activeReturn / Math.abs(activeReturn) : 0,\n      summary: {\n        portfolioReturn,\n        benchmarkReturn,\n        activeReturn,\n        attribution: attribution.summary\n      }\n    };\n    \n    res.json({\n      success: true,\n      data: performanceData,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Performance attribution failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate performance attribution',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio metrics\nrouter.post('/metrics', async (req, res) => {\n  try {\n    const { portfolio, marketData } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    const metrics = portfolioOptimization.calculatePortfolioMetrics(portfolio, marketData);\n    \n    res.json({\n      success: true,\n      data: metrics,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Portfolio metrics calculation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate portfolio metrics',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get available rebalancing strategies\nrouter.get('/strategies', async (req, res) => {\n  try {\n    const strategies = portfolioOptimization.getAvailableStrategies();\n    \n    res.json({\n      success: true,\n      data: strategies,\n      count: strategies.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Failed to get strategies:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get available strategies',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio simulation\nrouter.post('/simulate', async (req, res) => {\n  try {\n    const { \n      portfolio, \n      marketData, \n      changes = [],\n      scenarios = ['BULL', 'BEAR', 'NEUTRAL']\n    } = req.body;\n    \n    if (!portfolio || !portfolio.holdings) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid portfolio data',\n        message: 'Portfolio with holdings array required'\n      });\n    }\n    \n    const simulations = {};\n    \n    // Apply changes to create modified portfolio\n    let modifiedPortfolio = JSON.parse(JSON.stringify(portfolio));\n    changes.forEach(change => {\n      const holding = modifiedPortfolio.holdings.find(h => h.symbol === change.symbol);\n      if (holding && change.action === 'ADJUST') {\n        holding.shares = change.newShares || holding.shares;\n      } else if (change.action === 'ADD') {\n        modifiedPortfolio.holdings.push({\n          symbol: change.symbol,\n          shares: change.shares,\n          averagePrice: marketData[change.symbol]?.price || 0\n        });\n      } else if (change.action === 'REMOVE' && holding) {\n        modifiedPortfolio.holdings = modifiedPortfolio.holdings.filter(h => h.symbol !== change.symbol);\n      }\n    });\n    \n    // Run simulations for different market scenarios\n    scenarios.forEach(scenario => {\n      const scenarioMultipliers = {\n        'BULL': 1.20,    // 20% market up\n        'BEAR': 0.80,    // 20% market down\n        'NEUTRAL': 1.00  // No change\n      };\n      \n      const multiplier = scenarioMultipliers[scenario] || 1.0;\n      const scenarioMarketData = {};\n      \n      Object.keys(marketData).forEach(symbol => {\n        scenarioMarketData[symbol] = {\n          ...marketData[symbol],\n          price: (marketData[symbol]?.price || 0) * multiplier\n        };\n      });\n      \n      const metrics = portfolioOptimization.calculatePortfolioMetrics(\n        modifiedPortfolio, \n        scenarioMarketData\n      );\n      \n      simulations[scenario] = {\n        totalValue: metrics.totalValue,\n        totalReturn: ((metrics.totalValue - portfolio.totalValue) / portfolio.totalValue) * 100,\n        riskMetrics: metrics.riskMetrics,\n        scenario: {\n          name: scenario,\n          marketMove: ((multiplier - 1) * 100).toFixed(1) + '%'\n        }\n      };\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        originalPortfolio: portfolio,\n        modifiedPortfolio,\n        changes,\n        simulations,\n        comparison: {\n          bestCase: Math.max(...Object.values(simulations).map(s => s.totalReturn)),\n          worstCase: Math.min(...Object.values(simulations).map(s => s.totalReturn)),\n          expectedReturn: simulations.NEUTRAL?.totalReturn || 0\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Portfolio simulation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run portfolio simulation',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check\nrouter.get('/health', async (req, res) => {\n  try {\n    // Test with sample portfolio data\n    const samplePortfolio = {\n      holdings: [\n        { symbol: 'AAPL', shares: 100, averagePrice: 150 },\n        { symbol: 'GOOGL', shares: 50, averagePrice: 2500 },\n        { symbol: 'MSFT', shares: 75, averagePrice: 300 }\n      ],\n      cash: 10000,\n      totalValue: 400000\n    };\n    \n    const sampleMarketData = {\n      'AAPL': { price: 155, beta: 1.2, volatility: 0.25, sector: 'Technology' },\n      'GOOGL': { price: 2600, beta: 1.1, volatility: 0.30, sector: 'Technology' },\n      'MSFT': { price: 310, beta: 0.9, volatility: 0.22, sector: 'Technology' }\n    };\n    \n    // Test metrics calculation\n    const metrics = portfolioOptimization.calculatePortfolioMetrics(\n      samplePortfolio, \n      sampleMarketData\n    );\n    \n    // Test strategy listing\n    const strategies = portfolioOptimization.getAvailableStrategies();\n    \n    res.json({\n      success: true,\n      message: 'Portfolio optimization services operational',\n      services: {\n        optimization: {\n          status: 'operational',\n          strategies: strategies.length,\n          metricsCalculation: metrics ? 'working' : 'error'\n        },\n        riskAnalysis: {\n          status: 'operational',\n          riskMetrics: metrics.riskMetrics ? 'calculated' : 'error'\n        },\n        taxOptimization: {\n          status: 'operational',\n          features: ['tax-loss harvesting', 'execution optimization']\n        }\n      },\n      sampleResults: {\n        portfolioValue: metrics.totalValue,\n        positionCount: metrics.positionCount,\n        riskScore: metrics.riskMetrics.volatility,\n        diversificationScore: metrics.diversificationMetrics.diversificationScore\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Portfolio optimization health check failed:', error);\n    res.status(503).json({\n      success: false,\n      error: 'Portfolio optimization services unhealthy',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ;AACA;;AAEA,MAAME,OAAO;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;AAC/B,MAAMC,4BAA4B;AAAA;AAAA,CAAAP,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0CAA0C,CAAC;;AAExF;AACA,MAAMI,qBAAqB;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAG,IAAII,4BAA4B,CAAC,CAAC;;AAEhE;AAAA;AAAAP,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM;MAAEU,SAAS;MAAEC,UAAU;MAAEC,OAAO;MAAA;MAAA,CAAAf,aAAA,GAAAgB,CAAA,UAAG,CAAC,CAAC;IAAC,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,OAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEzD;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,WAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,UAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAAAhB,aAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,WAACF,UAAU;IAAA;IAAA,CAAAd,aAAA,GAAAgB,CAAA,UAAIQ,MAAM,CAACC,IAAI,CAACX,UAAU,CAAC,CAACY,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA1B,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACvD,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,qBAAqB;QAC5BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAMW,YAAY;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAG,MAAMK,qBAAqB,CAACoB,iBAAiB,CAChEf,SAAS,EACTC,UAAU,EACVC,OACF,CAAC;IAAC;IAAAf,aAAA,GAAAG,CAAA;IAEFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEF,YAAY;MAClBG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IACvDQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,8BAA8B;MACrCC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC5C,IAAI;IACF,MAAM;MACJU,SAAS;MACTC,UAAU;MACVoB,iBAAiB;MAAA;MAAA,CAAAlC,aAAA,GAAAgB,CAAA,UAAG,CAAC,CAAC;MACtBmB,QAAQ;MAAA;MAAA,CAAAnC,aAAA,GAAAgB,CAAA,UAAG,WAAW;MACtBD,OAAO;MAAA;MAAA,CAAAf,aAAA,GAAAgB,CAAA,UAAG,CAAC,CAAC;IACd,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEb;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,WAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,UAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAMoB,gBAAgB;IAAA;IAAA,CAAApC,aAAA,GAAAG,CAAA,QAAG;MACvBgC,QAAQ;MACRD,iBAAiB;MACjBG,kBAAkB;MAAE;MAAA,CAAArC,aAAA,GAAAgB,CAAA,WAAAD,OAAO,CAACsB,kBAAkB;MAAA;MAAA,CAAArC,aAAA,GAAAgB,CAAA,WAAI,IAAI;MACtDsB,WAAW;MAAE;MAAA,CAAAtC,aAAA,GAAAgB,CAAA,WAAAD,OAAO,CAACuB,WAAW;MAAA;MAAA,CAAAtC,aAAA,GAAAgB,CAAA,WAAI,IAAI;MACxCuB,eAAe,EAAExB,OAAO,CAACwB,eAAe,KAAK,KAAK;MAClD,GAAGxB;IACL,CAAC;IAED,MAAMY,YAAY;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAG,MAAMK,qBAAqB,CAACoB,iBAAiB,CAChEf,SAAS,EACTC,UAAU,EACVsB,gBACF,CAAC;;IAED;IACA,MAAMI,aAAa;IAAA;IAAA,CAAAxC,aAAA,GAAAG,CAAA,QAAG;MACpBsC,eAAe,EAAEd,YAAY,CAACe,wBAAwB;MACtDC,cAAc,EAAEhB,YAAY,CAACgB,cAAc;MAC3ChB,YAAY,EAAEA,YAAY,CAACA,YAAY;MACvCiB,YAAY,EAAEjB,YAAY,CAACiB;IAC7B,CAAC;IAAC;IAAA5C,aAAA,GAAAG,CAAA;IAEFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEW,aAAa;MACnBL,QAAQ;MACRL,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAC5CQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,gDAAgD;MACvDC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EACnD,IAAI;IACF,MAAM;MAAEU,SAAS;MAAEC,UAAU;MAAEC,OAAO;MAAA;MAAA,CAAAf,aAAA,GAAAgB,CAAA,WAAG,CAAC,CAAC;IAAC,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEzD;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,YAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,WAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;;IAED;IACA,MAAM6B,UAAU;IAAA;IAAA,CAAA7C,aAAA,GAAAG,CAAA,QAAG;MACjB,GAAGY,OAAO;MACVwB,eAAe,EAAE,IAAI;MACrBJ,QAAQ,EAAE,WAAW;MACrBE,kBAAkB,EAAE,CAAC,CAAC;IACxB,CAAC;IAED,MAAMV,YAAY;IAAA;IAAA,CAAA3B,aAAA,GAAAG,CAAA,QAAG,MAAMK,qBAAqB,CAACoB,iBAAiB,CAChEf,SAAS,EACTC,UAAU,EACV+B,UACF,CAAC;;IAED;IACA,MAAMC,kBAAkB;IAAA;IAAA,CAAA9C,aAAA,GAAAG,CAAA,QAAGwB,YAAY,CAACe,wBAAwB,CAACK,MAAM,CACrEC,GAAG,IAAI;MAAA;MAAAhD,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MAAA,kCAAAH,aAAA,GAAAgB,CAAA,WAAAgC,GAAG,CAACT,eAAe;MAAA;MAAA,CAAAvC,aAAA,GAAAgB,CAAA,WAAIgC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAAC,KAAK,CAAC;MAAA;MAAA,CAAAlD,aAAA,GAAAgB,CAAA,WAAIgC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC;IAAD,CACxF,CAAC;IAED,MAAMC,WAAW;IAAA;IAAA,CAAAnD,aAAA,GAAAG,CAAA,QAAG;MAClBsC,eAAe,EAAEK,kBAAkB;MACnCM,kBAAkB,EAAEzB,YAAY,CAACA,YAAY,CAACyB,kBAAkB;MAChEC,gBAAgB,EAAEP,kBAAkB,CAACQ,MAAM,CACzC,CAACC,GAAG,EAAEP,GAAG,KAAK;QAAA;QAAAhD,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAAA,OAAAoD,GAAG;QAAI;QAAA,CAAAvD,aAAA,GAAAgB,CAAA,WAAAgC,GAAG,CAACQ,mBAAmB;QAAA;QAAA,CAAAxD,aAAA,GAAAgB,CAAA,WAAI,CAAC,EAAC;MAAD,CAAC,EAAE,CACtD,CAAC;MACDyC,SAAS,EAAE9B,YAAY,CAACgB,cAAc,CAACc,SAAS,CAACC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA3D,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAAA;UAC3DyD,MAAM,EAAED,GAAG,CAACC,MAAM;UAClBC,aAAa,EAAEF,GAAG,CAACE,aAAa;UAChCC,oBAAoB,EAAEH,GAAG,CAACG,oBAAoB;UAC9CC,wBAAwB,EAAEJ,GAAG,CAACE,aAAa,GAAG,CAAC,GAAG;UAClDG,aAAa,EAAE,WAAW,CAAC;QAC7B,CAAC;MAAD,CAAE;IACJ,CAAC;IAAC;IAAAhE,aAAA,GAAAG,CAAA;IAEFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEsB,WAAW;MACjBrB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IACjDQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,kDAAkD;MACzDC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAChD,IAAI;IACF,MAAM;MAAEU,SAAS;MAAEC,UAAU;MAAEmD,aAAa;MAAA;MAAA,CAAAjE,aAAA,GAAAgB,CAAA,WAAG,UAAU;IAAC,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEvE;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,YAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,WAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAMkD,OAAO;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,QAAGK,qBAAqB,CAAC2D,yBAAyB,CAACtD,SAAS,EAAEC,UAAU,CAAC;IACtF,MAAM8B,YAAY;IAAA;IAAA,CAAA5C,aAAA,GAAAG,CAAA,QAAGK,qBAAqB,CAAC4D,oBAAoB,CAC7DvD,SAAS,EACTC,UAAU,EACVmD,aACF,CAAC;IAAC;IAAAjE,aAAA,GAAAG,CAAA;IAEFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAE;QACJqC,OAAO,EAAEA,OAAO,CAACG,WAAW;QAC5BC,eAAe,EAAEJ,OAAO,CAACK,sBAAsB;QAC/C3B,YAAY;QACZ4B,cAAc,EAAEN,OAAO,CAACO,iBAAiB;QACzCC,iBAAiB,EAAER,OAAO,CAACG,WAAW,CAACM;MACzC,CAAC;MACD7C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAC9CQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,kCAAkC;MACzCC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,0BAA0B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC1D,IAAI;IACF,MAAM;MAAEU,SAAS;MAAEC,UAAU;MAAE8D,SAAS;MAAA;MAAA,CAAA5E,aAAA,GAAAgB,CAAA,WAAG,KAAK;IAAC,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAE9D;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,YAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,WAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAM6D,WAAW;IAAA;IAAA,CAAA7E,aAAA,GAAAG,CAAA,QAAGK,qBAAqB,CAACsE,+BAA+B,CACvEjE,SAAS,EACTC,UACF,CAAC;;IAED;IACA,MAAMiE,eAAe;IAAA;IAAA,CAAA/E,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAAgB,CAAA,WAAAF,UAAU,CAAC8D,SAAS,CAAC,EAAEI,MAAM;IAAA;IAAA,CAAAhF,aAAA,GAAAgB,CAAA,WAAI,CAAC;IAC1D,MAAMiE,eAAe;IAAA;IAAA,CAAAjF,aAAA,GAAAG,CAAA,QAAG0E,WAAW,CAACK,MAAM,CAACC,WAAW;IACtD,MAAMC,YAAY;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,QAAG8E,eAAe,GAAGF,eAAe;IAEtD,MAAMM,eAAe;IAAA;IAAA,CAAArF,aAAA,GAAAG,CAAA,QAAG;MACtB0E,WAAW;MACXD,SAAS,EAAE;QACThB,MAAM,EAAEgB,SAAS;QACjBI,MAAM,EAAED;MACV,CAAC;MACDK,YAAY;MACZE,aAAa,EAAEC,IAAI,CAACC,GAAG,CAACJ,YAAY,CAAC;MAAE;MACvCK,gBAAgB,EAAEF,IAAI,CAACC,GAAG,CAACJ,YAAY,CAAC,GAAG,CAAC;MAAA;MAAA,CAAApF,aAAA,GAAAgB,CAAA,WAAGoE,YAAY,GAAGG,IAAI,CAACC,GAAG,CAACJ,YAAY,CAAC;MAAA;MAAA,CAAApF,aAAA,GAAAgB,CAAA,WAAG,CAAC;MACxF0E,OAAO,EAAE;QACPT,eAAe;QACfF,eAAe;QACfK,YAAY;QACZP,WAAW,EAAEA,WAAW,CAACa;MAC3B;IACF,CAAC;IAAC;IAAA1F,aAAA,GAAAG,CAAA;IAEFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEwD,eAAe;MACrBvD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IACxDQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,6CAA6C;MACpDC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC1C,IAAI;IACF,MAAM;MAAEU,SAAS;MAAEC;IAAW,CAAC;IAAA;IAAA,CAAAd,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAE3C;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,YAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,WAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAMkD,OAAO;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,QAAGK,qBAAqB,CAAC2D,yBAAyB,CAACtD,SAAS,EAAEC,UAAU,CAAC;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAEvFQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAEqC,OAAO;MACbpC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAC9DQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,uCAAuC;MAC9CC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACsF,GAAG,CAAC,aAAa,EAAE,OAAOjF,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC5C,IAAI;IACF,MAAMyF,UAAU;IAAA;IAAA,CAAA5F,aAAA,GAAAG,CAAA,QAAGK,qBAAqB,CAACqF,sBAAsB,CAAC,CAAC;IAAC;IAAA7F,aAAA,GAAAG,CAAA;IAElEQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAE+D,UAAU;MAChBE,KAAK,EAAEF,UAAU,CAAClE,MAAM;MACxBI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IAClDQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,oCAAoC;MAC3CC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACI,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM;MACJU,SAAS;MACTC,UAAU;MACViF,OAAO;MAAA;MAAA,CAAA/F,aAAA,GAAAgB,CAAA,WAAG,EAAE;MACZgF,SAAS;MAAA;MAAA,CAAAhG,aAAA,GAAAgB,CAAA,WAAG,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC;IACzC,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAGO,GAAG,CAACO,IAAI;IAAC;IAAAjB,aAAA,GAAAG,CAAA;IAEb;IAAI;IAAA,CAAAH,aAAA,GAAAgB,CAAA,YAACH,SAAS;IAAA;IAAA,CAAAb,aAAA,GAAAgB,CAAA,WAAI,CAACH,SAAS,CAACK,QAAQ,GAAE;MAAA;MAAAlB,aAAA,GAAAgB,CAAA;MAAAhB,aAAA,GAAAG,CAAA;MACrC,OAAOQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,wBAAwB;QAC/BC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvB,aAAA,GAAAgB,CAAA;IAAA;IAED,MAAMiF,WAAW;IAAA;IAAA,CAAAjG,aAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;;IAEtB;IACA,IAAI+F,iBAAiB;IAAA;IAAA,CAAAlG,aAAA,GAAAG,CAAA,QAAGgG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACxF,SAAS,CAAC,CAAC;IAAC;IAAAb,aAAA,GAAAG,CAAA;IAC9D4F,OAAO,CAACO,OAAO,CAACC,MAAM,IAAI;MAAA;MAAAvG,aAAA,GAAAY,CAAA;MACxB,MAAM4F,OAAO;MAAA;MAAA,CAAAxG,aAAA,GAAAG,CAAA,QAAG+F,iBAAiB,CAAChF,QAAQ,CAACuF,IAAI,CAACC,CAAC,IAAI;QAAA;QAAA1G,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAAA,OAAAuG,CAAC,CAAC9C,MAAM,KAAK2C,MAAM,CAAC3C,MAAM;MAAD,CAAC,CAAC;MAAC;MAAA5D,aAAA,GAAAG,CAAA;MACjF;MAAI;MAAA,CAAAH,aAAA,GAAAgB,CAAA,WAAAwF,OAAO;MAAA;MAAA,CAAAxG,aAAA,GAAAgB,CAAA,WAAIuF,MAAM,CAACI,MAAM,KAAK,QAAQ,GAAE;QAAA;QAAA3G,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAG,CAAA;QACzCqG,OAAO,CAACI,MAAM;QAAG;QAAA,CAAA5G,aAAA,GAAAgB,CAAA,WAAAuF,MAAM,CAACM,SAAS;QAAA;QAAA,CAAA7G,aAAA,GAAAgB,CAAA,WAAIwF,OAAO,CAACI,MAAM;MACrD,CAAC,MAAM;QAAA;QAAA5G,aAAA,GAAAgB,CAAA;QAAAhB,aAAA,GAAAG,CAAA;QAAA,IAAIoG,MAAM,CAACI,MAAM,KAAK,KAAK,EAAE;UAAA;UAAA3G,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAG,CAAA;UAClC+F,iBAAiB,CAAChF,QAAQ,CAAC4F,IAAI,CAAC;YAC9BlD,MAAM,EAAE2C,MAAM,CAAC3C,MAAM;YACrBgD,MAAM,EAAEL,MAAM,CAACK,MAAM;YACrBG,YAAY;YAAE;YAAA,CAAA/G,aAAA,GAAAgB,CAAA,WAAAF,UAAU,CAACyF,MAAM,CAAC3C,MAAM,CAAC,EAAEoD,KAAK;YAAA;YAAA,CAAAhH,aAAA,GAAAgB,CAAA,WAAI,CAAC;UACrD,CAAC,CAAC;QACJ,CAAC,MAAM;UAAA;UAAAhB,aAAA,GAAAgB,CAAA;UAAAhB,aAAA,GAAAG,CAAA;UAAA;UAAI;UAAA,CAAAH,aAAA,GAAAgB,CAAA,WAAAuF,MAAM,CAACI,MAAM,KAAK,QAAQ;UAAA;UAAA,CAAA3G,aAAA,GAAAgB,CAAA,WAAIwF,OAAO,GAAE;YAAA;YAAAxG,aAAA,GAAAgB,CAAA;YAAAhB,aAAA,GAAAG,CAAA;YAChD+F,iBAAiB,CAAChF,QAAQ,GAAGgF,iBAAiB,CAAChF,QAAQ,CAAC6B,MAAM,CAAC2D,CAAC,IAAI;cAAA;cAAA1G,aAAA,GAAAY,CAAA;cAAAZ,aAAA,GAAAG,CAAA;cAAA,OAAAuG,CAAC,CAAC9C,MAAM,KAAK2C,MAAM,CAAC3C,MAAM;YAAD,CAAC,CAAC;UACjG,CAAC;UAAA;UAAA;YAAA5D,aAAA,GAAAgB,CAAA;UAAA;QAAD;MAAA;IACF,CAAC,CAAC;;IAEF;IAAA;IAAAhB,aAAA,GAAAG,CAAA;IACA6F,SAAS,CAACM,OAAO,CAACW,QAAQ,IAAI;MAAA;MAAAjH,aAAA,GAAAY,CAAA;MAC5B,MAAMsG,mBAAmB;MAAA;MAAA,CAAAlH,aAAA,GAAAG,CAAA,QAAG;QAC1B,MAAM,EAAE,IAAI;QAAK;QACjB,MAAM,EAAE,IAAI;QAAK;QACjB,SAAS,EAAE,IAAI,CAAE;MACnB,CAAC;MAED,MAAMgH,UAAU;MAAA;MAAA,CAAAnH,aAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,aAAA,GAAAgB,CAAA,WAAAkG,mBAAmB,CAACD,QAAQ,CAAC;MAAA;MAAA,CAAAjH,aAAA,GAAAgB,CAAA,WAAI,GAAG;MACvD,MAAMoG,kBAAkB;MAAA;MAAA,CAAApH,aAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;MAAC;MAAAH,aAAA,GAAAG,CAAA;MAE9BqB,MAAM,CAACC,IAAI,CAACX,UAAU,CAAC,CAACwF,OAAO,CAAC1C,MAAM,IAAI;QAAA;QAAA5D,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACxCiH,kBAAkB,CAACxD,MAAM,CAAC,GAAG;UAC3B,GAAG9C,UAAU,CAAC8C,MAAM,CAAC;UACrBoD,KAAK,EAAE;UAAC;UAAA,CAAAhH,aAAA,GAAAgB,CAAA,WAAAF,UAAU,CAAC8C,MAAM,CAAC,EAAEoD,KAAK;UAAA;UAAA,CAAAhH,aAAA,GAAAgB,CAAA,WAAI,CAAC,KAAImG;QAC5C,CAAC;MACH,CAAC,CAAC;MAEF,MAAMjD,OAAO;MAAA;MAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGK,qBAAqB,CAAC2D,yBAAyB,CAC7D+B,iBAAiB,EACjBkB,kBACF,CAAC;MAAC;MAAApH,aAAA,GAAAG,CAAA;MAEF8F,WAAW,CAACgB,QAAQ,CAAC,GAAG;QACtBI,UAAU,EAAEnD,OAAO,CAACmD,UAAU;QAC9BlC,WAAW,EAAG,CAACjB,OAAO,CAACmD,UAAU,GAAGxG,SAAS,CAACwG,UAAU,IAAIxG,SAAS,CAACwG,UAAU,GAAI,GAAG;QACvFhD,WAAW,EAAEH,OAAO,CAACG,WAAW;QAChC4C,QAAQ,EAAE;UACRK,IAAI,EAAEL,QAAQ;UACdM,UAAU,EAAE,CAAC,CAACJ,UAAU,GAAG,CAAC,IAAI,GAAG,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG;QACpD;MACF,CAAC;IACH,CAAC,CAAC;IAAC;IAAAxH,aAAA,GAAAG,CAAA;IAEHQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbQ,IAAI,EAAE;QACJ4F,iBAAiB,EAAE5G,SAAS;QAC5BqF,iBAAiB;QACjBH,OAAO;QACPE,WAAW;QACXyB,UAAU,EAAE;UACVC,QAAQ,EAAEpC,IAAI,CAACqC,GAAG,CAAC,GAAGpG,MAAM,CAACqG,MAAM,CAAC5B,WAAW,CAAC,CAACvC,GAAG,CAACvD,CAAC,IAAI;YAAA;YAAAH,aAAA,GAAAY,CAAA;YAAAZ,aAAA,GAAAG,CAAA;YAAA,OAAAA,CAAC,CAACgF,WAAW;UAAD,CAAC,CAAC,CAAC;UACzE2C,SAAS,EAAEvC,IAAI,CAACwC,GAAG,CAAC,GAAGvG,MAAM,CAACqG,MAAM,CAAC5B,WAAW,CAAC,CAACvC,GAAG,CAACvD,CAAC,IAAI;YAAA;YAAAH,aAAA,GAAAY,CAAA;YAAAZ,aAAA,GAAAG,CAAA;YAAA,OAAAA,CAAC,CAACgF,WAAW;UAAD,CAAC,CAAC,CAAC;UAC1E6C,cAAc;UAAE;UAAA,CAAAhI,aAAA,GAAAgB,CAAA,WAAAiF,WAAW,CAACgC,OAAO,EAAE9C,WAAW;UAAA;UAAA,CAAAnF,aAAA,GAAAgB,CAAA,WAAI,CAAC;QACvD;MACF,CAAC;MACDc,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IACrDQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,oCAAoC;MAC3CC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhC,aAAA,GAAAG,CAAA;AACAE,MAAM,CAACsF,GAAG,CAAC,SAAS,EAAE,OAAOjF,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAX,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAG,CAAA;EACxC,IAAI;IACF;IACA,MAAM+H,eAAe;IAAA;IAAA,CAAAlI,aAAA,GAAAG,CAAA,SAAG;MACtBe,QAAQ,EAAE,CACR;QAAE0C,MAAM,EAAE,MAAM;QAAEgD,MAAM,EAAE,GAAG;QAAEG,YAAY,EAAE;MAAI,CAAC,EAClD;QAAEnD,MAAM,EAAE,OAAO;QAAEgD,MAAM,EAAE,EAAE;QAAEG,YAAY,EAAE;MAAK,CAAC,EACnD;QAAEnD,MAAM,EAAE,MAAM;QAAEgD,MAAM,EAAE,EAAE;QAAEG,YAAY,EAAE;MAAI,CAAC,CAClD;MACDoB,IAAI,EAAE,KAAK;MACXd,UAAU,EAAE;IACd,CAAC;IAED,MAAMe,gBAAgB;IAAA;IAAA,CAAApI,aAAA,GAAAG,CAAA,SAAG;MACvB,MAAM,EAAE;QAAE6G,KAAK,EAAE,GAAG;QAAEqB,IAAI,EAAE,GAAG;QAAEC,UAAU,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAa,CAAC;MACzE,OAAO,EAAE;QAAEvB,KAAK,EAAE,IAAI;QAAEqB,IAAI,EAAE,GAAG;QAAEC,UAAU,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAa,CAAC;MAC3E,MAAM,EAAE;QAAEvB,KAAK,EAAE,GAAG;QAAEqB,IAAI,EAAE,GAAG;QAAEC,UAAU,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAa;IAC1E,CAAC;;IAED;IACA,MAAMrE,OAAO;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,SAAGK,qBAAqB,CAAC2D,yBAAyB,CAC7D+D,eAAe,EACfE,gBACF,CAAC;;IAED;IACA,MAAMxC,UAAU;IAAA;IAAA,CAAA5F,aAAA,GAAAG,CAAA,SAAGK,qBAAqB,CAACqF,sBAAsB,CAAC,CAAC;IAAC;IAAA7F,aAAA,GAAAG,CAAA;IAElEQ,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbE,OAAO,EAAE,6CAA6C;MACtDiH,QAAQ,EAAE;QACR7G,YAAY,EAAE;UACZR,MAAM,EAAE,aAAa;UACrByE,UAAU,EAAEA,UAAU,CAAClE,MAAM;UAC7B+G,kBAAkB,EAAEvE,OAAO;UAAA;UAAA,CAAAlE,aAAA,GAAAgB,CAAA,WAAG,SAAS;UAAA;UAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAG,OAAO;QACnD,CAAC;QACD4B,YAAY,EAAE;UACZzB,MAAM,EAAE,aAAa;UACrBkD,WAAW,EAAEH,OAAO,CAACG,WAAW;UAAA;UAAA,CAAArE,aAAA,GAAAgB,CAAA,WAAG,YAAY;UAAA;UAAA,CAAAhB,aAAA,GAAAgB,CAAA,WAAG,OAAO;QAC3D,CAAC;QACDuB,eAAe,EAAE;UACfpB,MAAM,EAAE,aAAa;UACrBuH,QAAQ,EAAE,CAAC,qBAAqB,EAAE,wBAAwB;QAC5D;MACF,CAAC;MACDC,aAAa,EAAE;QACbC,cAAc,EAAE1E,OAAO,CAACmD,UAAU;QAClCwB,aAAa,EAAE3E,OAAO,CAAC2E,aAAa;QACpCC,SAAS,EAAE5E,OAAO,CAACG,WAAW,CAACiE,UAAU;QACzCS,oBAAoB,EAAE7E,OAAO,CAACK,sBAAsB,CAACwE;MACvD,CAAC;MACDjH,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAAtB,aAAA,GAAAG,CAAA;IACd8B,OAAO,CAACX,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IAAC;IAAAtB,aAAA,GAAAG,CAAA;IACpEQ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,2CAA2C;MAClDC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAAhC,aAAA,GAAAG,CAAA;AAEH6I,MAAM,CAACC,OAAO,GAAG5I,MAAM","ignoreList":[]}