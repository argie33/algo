78977130e8b52a431dc9046bfe1b3dc2
/* istanbul ignore next */
function cov_1s4uaidpqk() {
  var path = "/home/stocks/algo/webapp/lambda/utils/secretsManagerDiagnostic.js";
  var hash = "19e9139db16b97a09e5fbd364a6ac53a3438a18e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/utils/secretsManagerDiagnostic.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 56
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "1": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 11
        }
      },
      "2": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 67
        }
      },
      "3": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 83
        }
      },
      "4": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "5": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 80
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "7": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 78
        }
      },
      "8": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 27,
          column: 78
        }
      },
      "9": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "10": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "11": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 91
        }
      },
      "12": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 54
        }
      },
      "13": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 87
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 95
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 88
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 92
        }
      },
      "18": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 91
        }
      },
      "19": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 77
        }
      },
      "20": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "21": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "22": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 86
        }
      },
      "23": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "24": {
        start: {
          line: 59,
          column: 35
        },
        end: {
          line: 59,
          column: 59
        }
      },
      "25": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 78
        }
      },
      "26": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 89
        }
      },
      "27": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "28": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 97
        }
      },
      "29": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 88
        }
      },
      "30": {
        start: {
          line: 76,
          column: 40
        },
        end: {
          line: 76,
          column: 82
        }
      },
      "31": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 98
        }
      },
      "32": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 98
        }
      },
      "33": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "34": {
        start: {
          line: 81,
          column: 39
        },
        end: {
          line: 81,
          column: 62
        }
      },
      "35": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 97
        }
      },
      "36": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 88,
          column: 26
        }
      },
      "37": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 127
        }
      },
      "38": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 139
        }
      },
      "39": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 113
        }
      },
      "40": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "41": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 93
        }
      },
      "42": {
        start: {
          line: 104,
          column: 37
        },
        end: {
          line: 104,
          column: 88
        }
      },
      "43": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 95
        }
      },
      "44": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 115
        }
      },
      "45": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 119,
          column: 17
        }
      },
      "46": {
        start: {
          line: 109,
          column: 35
        },
        end: {
          line: 109,
          column: 59
        }
      },
      "47": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 115,
          column: 22
        }
      },
      "48": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 110
        }
      },
      "49": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 43
        }
      },
      "50": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 85
        }
      },
      "51": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "52": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "53": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 83
        }
      },
      "54": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 146,
          column: 62
        }
      },
      "55": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "56": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 75
        }
      },
      "57": {
        start: {
          line: 152,
          column: 23
        },
        end: {
          line: 152,
          column: 39
        }
      },
      "58": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 76
        }
      },
      "59": {
        start: {
          line: 156,
          column: 31
        },
        end: {
          line: 156,
          column: 73
        }
      },
      "60": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 76
        }
      },
      "61": {
        start: {
          line: 157,
          column: 61
        },
        end: {
          line: 157,
          column: 75
        }
      },
      "62": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "63": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 93
        }
      },
      "64": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "65": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 178,
          column: 10
        }
      },
      "66": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "67": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "68": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 64
        }
      },
      "69": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 87
        }
      },
      "70": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 28
        }
      },
      "71": {
        start: {
          line: 196,
          column: 0
        },
        end: {
          line: 196,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 40
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 143
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 157,
            column: 52
          },
          end: {
            line: 157,
            column: 53
          }
        },
        loc: {
          start: {
            line: 157,
            column: 61
          },
          end: {
            line: 157,
            column: 75
          }
        },
        line: 157
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 41
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 184
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 185,
            column: 15
          },
          end: {
            line: 185,
            column: 16
          }
        },
        loc: {
          start: {
            line: 185,
            column: 27
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 185
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 49
          }
        }, {
          start: {
            line: 11,
            column: 53
          },
          end: {
            line: 11,
            column: 75
          }
        }, {
          start: {
            line: 11,
            column: 79
          },
          end: {
            line: 11,
            column: 90
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 74
          },
          end: {
            line: 31,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 74
          },
          end: {
            line: 31,
            column: 82
          }
        }, {
          start: {
            line: 31,
            column: 86
          },
          end: {
            line: 31,
            column: 88
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 68
          },
          end: {
            line: 36,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 68
          },
          end: {
            line: 36,
            column: 88
          }
        }, {
          start: {
            line: 36,
            column: 92
          },
          end: {
            line: 36,
            column: 93
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "7": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "8": {
        loc: {
          start: {
            line: 165,
            column: 18
          },
          end: {
            line: 165,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 18
          },
          end: {
            line: 165,
            column: 29
          }
        }, {
          start: {
            line: 165,
            column: 33
          },
          end: {
            line: 165,
            column: 37
          }
        }],
        line: 165
      },
      "9": {
        loc: {
          start: {
            line: 173,
            column: 18
          },
          end: {
            line: 173,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 18
          },
          end: {
            line: 173,
            column: 39
          }
        }, {
          start: {
            line: 173,
            column: 43
          },
          end: {
            line: 173,
            column: 47
          }
        }],
        line: 173
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "19e9139db16b97a09e5fbd364a6ac53a3438a18e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s4uaidpqk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s4uaidpqk();
/**
 * AWS Secrets Manager Diagnostic Tool
 * Comprehensive debugging for JSON parsing errors
 */

const {
  SecretsManagerClient,
  GetSecretValueCommand
} =
/* istanbul ignore next */
(cov_1s4uaidpqk().s[0]++, require('@aws-sdk/client-secrets-manager'));
class SecretsManagerDiagnostic {
  constructor() {
    /* istanbul ignore next */
    cov_1s4uaidpqk().f[0]++;
    cov_1s4uaidpqk().s[1]++;
    this.client = new SecretsManagerClient({
      region:
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[0][0]++, process.env.WEBAPP_AWS_REGION) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[0][1]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[0][2]++, 'us-east-1')
    });
  }

  /**
   * Comprehensive secret retrieval with detailed logging
   */
  async diagnoseSecret(secretArn) {
    /* istanbul ignore next */
    cov_1s4uaidpqk().f[1]++;
    const diagnosisId =
    /* istanbul ignore next */
    (cov_1s4uaidpqk().s[2]++, Math.random().toString(36).substr(2, 9));
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[3]++;
    console.log(`🔍 [${diagnosisId}] Starting AWS Secrets Manager diagnostic`);
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[4]++;
    console.log(`🔍 [${diagnosisId}] Secret ARN: ${secretArn}`);
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[5]++;
    console.log(`🔍 [${diagnosisId}] Region: ${this.client.config.region}`);
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[6]++;
    try {
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[7]++;
      // Step 1: Get the raw secret response
      console.log(`🔍 [${diagnosisId}] Calling AWS Secrets Manager...`);
      const command =
      /* istanbul ignore next */
      (cov_1s4uaidpqk().s[8]++, new GetSecretValueCommand({
        SecretId: secretArn
      }));
      const response =
      /* istanbul ignore next */
      (cov_1s4uaidpqk().s[9]++, await this.client.send(command));
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[10]++;
      console.log(`✅ [${diagnosisId}] Raw response received`);
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[11]++;
      console.log(`🔍 [${diagnosisId}] Response keys:`, Object.keys(
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[1][0]++, response) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[1][1]++, {})));

      // Step 2: Analyze the SecretString property
      const secretString =
      /* istanbul ignore next */
      (cov_1s4uaidpqk().s[12]++, response.SecretString);
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[13]++;
      console.log(`🔍 [${diagnosisId}] SecretString type:`, typeof secretString);
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[14]++;
      console.log(`🔍 [${diagnosisId}] SecretString length:`,
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[2][0]++, secretString?.length) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[2][1]++, 0));
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[15]++;
      console.log(`🔍 [${diagnosisId}] SecretString first 200 chars: [REDACTED]`);

      // Step 3: Check if it's actually an object that needs stringifying
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[16]++;
      if (typeof secretString === 'object') {
        /* istanbul ignore next */
        cov_1s4uaidpqk().b[3][0]++;
        cov_1s4uaidpqk().s[17]++;
        console.log(`⚠️ [${diagnosisId}] SecretString is an object, not a string!`);
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[18]++;
        console.log(`🔍 [${diagnosisId}] Object keys:`, Object.keys(secretString));
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[19]++;
        console.log(`🔍 [${diagnosisId}] Object values: [REDACTED]`);

        // Try to use the object directly
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[20]++;
        return {
          success: true,
          method: 'direct_object',
          config: secretString,
          diagnosticId: diagnosisId
        };
      } else
      /* istanbul ignore next */
      {
        cov_1s4uaidpqk().b[3][1]++;
      }

      // Step 4: Try to parse as JSON
      cov_1s4uaidpqk().s[21]++;
      if (typeof secretString === 'string') {
        /* istanbul ignore next */
        cov_1s4uaidpqk().b[4][0]++;
        cov_1s4uaidpqk().s[22]++;
        console.log(`🔍 [${diagnosisId}] Attempting JSON.parse on string...`);
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[23]++;
        try {
          const parsed =
          /* istanbul ignore next */
          (cov_1s4uaidpqk().s[24]++, JSON.parse(secretString));
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[25]++;
          console.log(`✅ [${diagnosisId}] JSON parsing successful`);
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[26]++;
          console.log(`🔍 [${diagnosisId}] Parsed keys:`, Object.keys(parsed));
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[27]++;
          return {
            success: true,
            method: 'json_parse',
            config: parsed,
            diagnosticId: diagnosisId
          };
        } catch (parseError) {
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[28]++;
          console.error(`❌ [${diagnosisId}] JSON parsing failed:`, parseError.message);

          // Step 5: Try to fix common JSON issues
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[29]++;
          console.log(`🔧 [${diagnosisId}] Attempting to fix JSON issues...`);

          // Remove potential BOM and invisible characters
          const cleanString =
          /* istanbul ignore next */
          (cov_1s4uaidpqk().s[30]++, secretString.replace(/^\uFEFF/, '').trim());
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[31]++;
          console.log(`🔍 [${diagnosisId}] Cleaned string length:`, cleanString.length);
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[32]++;
          console.log(`🔍 [${diagnosisId}] Cleaned string first 200 chars: [REDACTED]`);
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[33]++;
          try {
            const parsed =
            /* istanbul ignore next */
            (cov_1s4uaidpqk().s[34]++, JSON.parse(cleanString));
            /* istanbul ignore next */
            cov_1s4uaidpqk().s[35]++;
            console.log(`✅ [${diagnosisId}] JSON parsing successful after cleaning`);
            /* istanbul ignore next */
            cov_1s4uaidpqk().s[36]++;
            return {
              success: true,
              method: 'json_parse_cleaned',
              config: parsed,
              diagnosticId: diagnosisId
            };
          } catch (cleanParseError) {
            /* istanbul ignore next */
            cov_1s4uaidpqk().s[37]++;
            console.error(`❌ [${diagnosisId}] JSON parsing still failed after cleaning:`, cleanParseError.message);

            // Step 6: Character-by-character analysis
            /* istanbul ignore next */
            cov_1s4uaidpqk().s[38]++;
            console.log(`🔍 [${diagnosisId}] Character analysis: [REDACTED - Logging characters would expose sensitive data]`);
            // Character-by-character analysis removed for security
            /* istanbul ignore next */
            cov_1s4uaidpqk().s[39]++;
            throw new Error(`Unable to parse secret after all attempts: ${cleanParseError.message}`);
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_1s4uaidpqk().b[4][1]++;
      }

      // Step 7: Handle binary secrets
      cov_1s4uaidpqk().s[40]++;
      if (response.SecretBinary) {
        /* istanbul ignore next */
        cov_1s4uaidpqk().b[5][0]++;
        cov_1s4uaidpqk().s[41]++;
        console.log(`🔍 [${diagnosisId}] Secret is binary, attempting to decode...`);
        const binaryString =
        /* istanbul ignore next */
        (cov_1s4uaidpqk().s[42]++, Buffer.from(response.SecretBinary).toString('utf8'));
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[43]++;
        console.log(`🔍 [${diagnosisId}] Binary decoded length:`, binaryString.length);
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[44]++;
        console.log(`🔍 [${diagnosisId}] Binary decoded first 200 chars:`, binaryString.substring(0, 200));
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[45]++;
        try {
          const parsed =
          /* istanbul ignore next */
          (cov_1s4uaidpqk().s[46]++, JSON.parse(binaryString));
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[47]++;
          return {
            success: true,
            method: 'binary_decode',
            config: parsed,
            diagnosticId: diagnosisId
          };
        } catch (binaryParseError) {
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[48]++;
          console.error(`❌ [${diagnosisId}] Binary JSON parsing failed:`, binaryParseError.message);
          /* istanbul ignore next */
          cov_1s4uaidpqk().s[49]++;
          throw binaryParseError;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1s4uaidpqk().b[5][1]++;
      }
      cov_1s4uaidpqk().s[50]++;
      throw new Error('No valid secret found in SecretString or SecretBinary');
    } catch (error) {
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[51]++;
      console.error(`❌ [${diagnosisId}] Secrets Manager diagnostic failed:`, {
        message: error.message,
        code: error.code,
        statusCode: error.$metadata?.httpStatusCode,
        requestId: error.$metadata?.requestId
      });
      /* istanbul ignore next */
      cov_1s4uaidpqk().s[52]++;
      return {
        success: false,
        error: error.message,
        diagnosticId: diagnosisId
      };
    }
  }

  /**
   * Test database configuration from secrets
   */
  async testDatabaseConfig(secretArn) {
    /* istanbul ignore next */
    cov_1s4uaidpqk().f[2]++;
    cov_1s4uaidpqk().s[53]++;
    console.log(`🧪 Testing database configuration from secret: ${secretArn}`);
    const diagnosis =
    /* istanbul ignore next */
    (cov_1s4uaidpqk().s[54]++, await this.diagnoseSecret(secretArn));
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[55]++;
    if (!diagnosis.success) {
      /* istanbul ignore next */
      cov_1s4uaidpqk().b[6][0]++;
      cov_1s4uaidpqk().s[56]++;
      throw new Error(`Secret diagnosis failed: ${diagnosis.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_1s4uaidpqk().b[6][1]++;
    }
    const config =
    /* istanbul ignore next */
    (cov_1s4uaidpqk().s[57]++, diagnosis.config);
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[58]++;
    console.log(`✅ Secret retrieved using method: ${diagnosis.method}`);

    // Validate required database fields
    const requiredFields =
    /* istanbul ignore next */
    (cov_1s4uaidpqk().s[59]++, ['host', 'username', 'password', 'dbname']);
    const missingFields =
    /* istanbul ignore next */
    (cov_1s4uaidpqk().s[60]++, requiredFields.filter(field => {
      /* istanbul ignore next */
      cov_1s4uaidpqk().f[3]++;
      cov_1s4uaidpqk().s[61]++;
      return !config[field];
    }));
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[62]++;
    if (missingFields.length > 0) {
      /* istanbul ignore next */
      cov_1s4uaidpqk().b[7][0]++;
      cov_1s4uaidpqk().s[63]++;
      throw new Error(`Missing required database fields: ${missingFields.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1s4uaidpqk().b[7][1]++;
    }
    cov_1s4uaidpqk().s[64]++;
    console.log(`✅ Database configuration validated:`, {
      host: config.host,
      port:
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[8][0]++, config.port) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[8][1]++, 5432),
      database: config.dbname,
      username: config.username,
      hasPassword: !!config.password
    });
    /* istanbul ignore next */
    cov_1s4uaidpqk().s[65]++;
    return {
      host: config.host,
      port:
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[9][0]++, parseInt(config.port)) ||
      /* istanbul ignore next */
      (cov_1s4uaidpqk().b[9][1]++, 5432),
      database: config.dbname,
      user: config.username,
      password: config.password,
      ssl: false // Match working ECS configuration
    };
  }

  /**
   * Create a fixed database configuration getter
   */
  createFixedDbConfigGetter(secretArn) {
    /* istanbul ignore next */
    cov_1s4uaidpqk().f[4]++;
    cov_1s4uaidpqk().s[66]++;
    return async () => {
      /* istanbul ignore next */
      cov_1s4uaidpqk().f[5]++;
      cov_1s4uaidpqk().s[67]++;
      try {
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[68]++;
        return await this.testDatabaseConfig(secretArn);
      } catch (error) {
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[69]++;
        console.error('❌ Fixed database config getter failed:', error.message);
        /* istanbul ignore next */
        cov_1s4uaidpqk().s[70]++;
        throw error;
      }
    };
  }
}
/* istanbul ignore next */
cov_1s4uaidpqk().s[71]++;
module.exports = SecretsManagerDiagnostic;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,