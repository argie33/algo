{"version":3,"names":["cov_wuvhe5lv0","actualCoverage","RateLimitingMiddleware","constructor","f","s","requestStore","Map","blacklistedIPs","Set","suspiciousIPs","limits","auth","windowMs","maxRequests","blockDuration","api","trading","search","upload","setInterval","cleanup","getClientId","req","ip","b","connection","remoteAddress","headers","userAgent","get","userId","user","id","hashString","str","hash","i","length","char","charCodeAt","Math","abs","toString","isBlacklisted","has","blacklistIP","reason","duration","console","warn","add","setTimeout","delete","log","trackSuspiciousActivity","currentTime","Date","now","set","count","firstSeen","lastSeen","reasons","suspicious","push","timestamp","oneHourAgo","filter","r","rateLimit","category","res","next","status","json","success","error","code","retryAfter","clientId","limit","key","record","resetTime","blockedUntil","remainingTime","ceil","blockDurationSeconds","remaining","setHeader","adaptiveRateLimit","path","includes","method","abuseDetection","abuseKey","abuseRecord","requestTimes","distinctEndpoints","httpMethods","userAgents","suspiciousHeaders","tenMinutesAgo","time","recentRequests","size","distinctMethods","distinctUserAgents","headerCount","header","lastRequest","secondLastRequest","cleanedCount","entries","getStats","stats","totalRecords","activeBlocks","categories","split","unblacklistIP","clearRateLimit","keys","module","exports"],"sources":["rateLimiting.js"],"sourcesContent":["/**\n * Advanced Rate Limiting and Abuse Prevention Middleware\n * Multi-tier rate limiting with intelligent threat detection\n */\n\nclass RateLimitingMiddleware {\n    constructor() {\n        // In-memory store for rate limiting (in production, use Redis)\n        this.requestStore = new Map();\n        this.blacklistedIPs = new Set();\n        this.suspiciousIPs = new Map();\n        \n        // Rate limiting tiers\n        this.limits = {\n            auth: {\n                windowMs: 15 * 60 * 1000, // 15 minutes\n                maxRequests: 5,\n                blockDuration: 60 * 60 * 1000 // 1 hour\n            },\n            api: {\n                windowMs: 60 * 1000, // 1 minute\n                maxRequests: 100,\n                blockDuration: 5 * 60 * 1000 // 5 minutes\n            },\n            trading: {\n                windowMs: 60 * 1000, // 1 minute\n                maxRequests: 30,\n                blockDuration: 10 * 60 * 1000 // 10 minutes\n            },\n            search: {\n                windowMs: 60 * 1000, // 1 minute\n                maxRequests: 50,\n                blockDuration: 2 * 60 * 1000 // 2 minutes\n            },\n            upload: {\n                windowMs: 60 * 1000, // 1 minute\n                maxRequests: 5,\n                blockDuration: 30 * 60 * 1000 // 30 minutes\n            }\n        };\n\n        // Cleanup interval\n        setInterval(() => this.cleanup(), 5 * 60 * 1000); // Every 5 minutes\n    }\n\n    /**\n     * Get client identifier (IP + User-Agent hash for better tracking)\n     */\n    getClientId(req) {\n        const ip = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];\n        const userAgent = req.get('User-Agent') || 'unknown';\n        const userId = req.user?.id || req.userId || 'anonymous';\n        \n        // Create composite identifier\n        return `${ip}:${this.hashString(userAgent)}:${userId}`;\n    }\n\n    /**\n     * Simple string hash function\n     */\n    hashString(str) {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash).toString(36);\n    }\n\n    /**\n     * Check if IP is blacklisted\n     */\n    isBlacklisted(req) {\n        const ip = req.ip || req.connection.remoteAddress;\n        return this.blacklistedIPs.has(ip);\n    }\n\n    /**\n     * Add IP to blacklist\n     */\n    blacklistIP(ip, reason = 'abuse_detected', duration = 24 * 60 * 60 * 1000) {\n        console.warn(`🚨 Blacklisting IP ${ip} for ${reason}`);\n        this.blacklistedIPs.add(ip);\n        \n        // Auto-remove after duration\n        setTimeout(() => {\n            this.blacklistedIPs.delete(ip);\n            console.log(`✅ Removed IP ${ip} from blacklist`);\n        }, duration);\n    }\n\n    /**\n     * Track suspicious activity\n     */\n    trackSuspiciousActivity(req, reason) {\n        const ip = req.ip || req.connection.remoteAddress;\n        const currentTime = Date.now();\n        \n        if (!this.suspiciousIPs.has(ip)) {\n            this.suspiciousIPs.set(ip, {\n                count: 0,\n                firstSeen: currentTime,\n                lastSeen: currentTime,\n                reasons: []\n            });\n        }\n\n        const suspicious = this.suspiciousIPs.get(ip);\n        suspicious.count++;\n        suspicious.lastSeen = currentTime;\n        suspicious.reasons.push({ reason, timestamp: currentTime });\n\n        // Keep only recent reasons (last hour)\n        const oneHourAgo = currentTime - (60 * 60 * 1000);\n        suspicious.reasons = suspicious.reasons.filter(r => r.timestamp > oneHourAgo);\n\n        // Auto-blacklist if too many suspicious activities\n        if (suspicious.count >= 10) {\n            this.blacklistIP(ip, 'repeated_suspicious_activity');\n            this.suspiciousIPs.delete(ip);\n        }\n\n        console.warn(`⚠️ Suspicious activity from ${ip}: ${reason} (count: ${suspicious.count})`);\n    }\n\n    /**\n     * Rate limiting logic\n     */\n    rateLimit(category = 'api') {\n        return (req, res, next) => {\n            // Check blacklist first\n            if (this.isBlacklisted(req)) {\n                console.warn(`🚫 Blocked request from blacklisted IP: ${req.ip}`);\n                return res.status(429).json({\n                    success: false,\n                    error: 'Access denied',\n                    code: 'IP_BLACKLISTED',\n                    retryAfter: 3600\n                });\n            }\n\n            const clientId = this.getClientId(req);\n            const limit = this.limits[category];\n            const currentTime = Date.now();\n            const key = `${category}:${clientId}`;\n\n            // Get or create request record\n            let record = this.requestStore.get(key);\n            if (!record) {\n                record = {\n                    count: 0,\n                    resetTime: currentTime + limit.windowMs,\n                    blockedUntil: 0\n                };\n                this.requestStore.set(key, record);\n            }\n\n            // Check if currently blocked\n            if (record.blockedUntil > currentTime) {\n                const remainingTime = Math.ceil((record.blockedUntil - currentTime) / 1000);\n                console.warn(`🚫 Rate limit block active for ${clientId} in ${category} (${remainingTime}s remaining)`);\n                \n                this.trackSuspiciousActivity(req, 'rate_limit_violation');\n                \n                return res.status(429).json({\n                    success: false,\n                    error: 'Rate limit exceeded',\n                    code: 'RATE_LIMITED',\n                    retryAfter: remainingTime,\n                    category\n                });\n            }\n\n            // Reset window if expired\n            if (currentTime > record.resetTime) {\n                record.count = 0;\n                record.resetTime = currentTime + limit.windowMs;\n            }\n\n            // Increment request count\n            record.count++;\n\n            // Check if limit exceeded\n            if (record.count > limit.maxRequests) {\n                record.blockedUntil = currentTime + limit.blockDuration;\n                const blockDurationSeconds = Math.ceil(limit.blockDuration / 1000);\n                \n                console.warn(`🚨 Rate limit exceeded for ${clientId} in ${category}. Blocked for ${blockDurationSeconds}s`);\n                \n                this.trackSuspiciousActivity(req, 'rate_limit_exceeded');\n\n                return res.status(429).json({\n                    success: false,\n                    error: 'Rate limit exceeded',\n                    code: 'RATE_LIMITED',\n                    retryAfter: blockDurationSeconds,\n                    category\n                });\n            }\n\n            // Add rate limit headers\n            const remaining = limit.maxRequests - record.count;\n            const resetTime = Math.ceil((record.resetTime - currentTime) / 1000);\n\n            res.setHeader('X-RateLimit-Limit', limit.maxRequests);\n            res.setHeader('X-RateLimit-Remaining', remaining);\n            res.setHeader('X-RateLimit-Reset', resetTime);\n            res.setHeader('X-RateLimit-Category', category);\n\n            // Warning when approaching limit\n            if (remaining <= 5) {\n                console.warn(`⚠️ Client ${clientId} approaching rate limit in ${category}: ${remaining} requests remaining`);\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Adaptive rate limiting based on endpoint sensitivity\n     */\n    adaptiveRateLimit() {\n        return (req, res, next) => {\n            // Determine category based on endpoint\n            let category = 'api';\n            \n            if (req.path.includes('/auth') || req.path.includes('/login')) {\n                category = 'auth';\n            } else if (req.path.includes('/trade') || req.path.includes('/order')) {\n                category = 'trading';\n            } else if (req.path.includes('/search')) {\n                category = 'search';\n            } else if (req.method === 'POST' && req.path.includes('/upload')) {\n                category = 'upload';\n            }\n\n            this.rateLimit(category)(req, res, next);\n        };\n    }\n\n    /**\n     * Detect and prevent abuse patterns\n     */\n    abuseDetection() {\n        return (req, res, next) => {\n            const clientId = this.getClientId(req);\n            const currentTime = Date.now();\n            const abuseKey = `abuse:${clientId}`;\n\n            // Track request patterns\n            let abuseRecord = this.requestStore.get(abuseKey);\n            if (!abuseRecord) {\n                abuseRecord = {\n                    requestTimes: [],\n                    distinctEndpoints: new Set(),\n                    httpMethods: new Set(),\n                    userAgents: new Set(),\n                    suspiciousHeaders: 0\n                };\n                this.requestStore.set(abuseKey, abuseRecord);\n            }\n\n            // Add current request\n            abuseRecord.requestTimes.push(currentTime);\n            abuseRecord.distinctEndpoints.add(req.path);\n            abuseRecord.httpMethods.add(req.method);\n            abuseRecord.userAgents.add(req.get('User-Agent') || 'unknown');\n\n            // Keep only recent requests (last 10 minutes)\n            const tenMinutesAgo = currentTime - (10 * 60 * 1000);\n            abuseRecord.requestTimes = abuseRecord.requestTimes.filter(time => time > tenMinutesAgo);\n\n            // Abuse detection patterns\n            const recentRequests = abuseRecord.requestTimes.length;\n            const distinctEndpoints = abuseRecord.distinctEndpoints.size;\n            const distinctMethods = abuseRecord.httpMethods.size;\n            const distinctUserAgents = abuseRecord.userAgents.size;\n\n            // Pattern 1: Too many requests in short time\n            if (recentRequests > 200) {\n                this.trackSuspiciousActivity(req, 'high_request_volume');\n            }\n\n            // Pattern 2: Scanning behavior (many different endpoints)\n            if (distinctEndpoints > 50) {\n                this.trackSuspiciousActivity(req, 'endpoint_scanning');\n            }\n\n            // Pattern 3: Multiple user agents (bot detection)\n            if (distinctUserAgents > 5) {\n                this.trackSuspiciousActivity(req, 'multiple_user_agents');\n            }\n\n            // Pattern 4: Suspicious headers\n            const suspiciousHeaders = [\n                'x-forwarded-for',\n                'x-real-ip',\n                'x-originating-ip',\n                'x-remote-ip'\n            ];\n\n            let headerCount = 0;\n            for (const header of suspiciousHeaders) {\n                if (req.headers[header]) {\n                    headerCount++;\n                }\n            }\n\n            if (headerCount > 2) {\n                this.trackSuspiciousActivity(req, 'suspicious_headers');\n            }\n\n            // Pattern 5: Rapid sequential requests (< 100ms apart)\n            if (abuseRecord.requestTimes.length >= 2) {\n                const lastRequest = abuseRecord.requestTimes[abuseRecord.requestTimes.length - 1];\n                const secondLastRequest = abuseRecord.requestTimes[abuseRecord.requestTimes.length - 2];\n                \n                if (lastRequest - secondLastRequest < 100) {\n                    this.trackSuspiciousActivity(req, 'rapid_requests');\n                }\n            }\n\n            next();\n        };\n    }\n\n    /**\n     * Cleanup old records\n     */\n    cleanup() {\n        const currentTime = Date.now();\n        let cleanedCount = 0;\n\n        for (const [key, record] of this.requestStore.entries()) {\n            // Remove old rate limit records\n            if (record.resetTime && record.resetTime < currentTime - (60 * 60 * 1000)) {\n                this.requestStore.delete(key);\n                cleanedCount++;\n            }\n            // Remove old abuse records\n            else if (record.requestTimes && record.requestTimes.length === 0) {\n                this.requestStore.delete(key);\n                cleanedCount++;\n            }\n        }\n\n        // Clean up old suspicious IP records\n        const oneHourAgo = currentTime - (60 * 60 * 1000);\n        for (const [ip, record] of this.suspiciousIPs.entries()) {\n            if (record.lastSeen < oneHourAgo) {\n                this.suspiciousIPs.delete(ip);\n                cleanedCount++;\n            }\n        }\n\n        if (cleanedCount > 0) {\n            console.log(`🧹 Cleaned up ${cleanedCount} old rate limiting records`);\n        }\n    }\n\n    /**\n     * Get rate limiting statistics\n     */\n    getStats() {\n        const currentTime = Date.now();\n        const stats = {\n            totalRecords: this.requestStore.size,\n            blacklistedIPs: this.blacklistedIPs.size,\n            suspiciousIPs: this.suspiciousIPs.size,\n            activeBlocks: 0,\n            categories: {}\n        };\n\n        // Count active blocks by category\n        for (const [key, record] of this.requestStore.entries()) {\n            if (record.blockedUntil > currentTime) {\n                stats.activeBlocks++;\n                const category = key.split(':')[0];\n                stats.categories[category] = (stats.categories[category] || 0) + 1;\n            }\n        }\n\n        return stats;\n    }\n\n    /**\n     * Manual IP management\n     */\n    unblacklistIP(ip) {\n        this.blacklistedIPs.delete(ip);\n        this.suspiciousIPs.delete(ip);\n        console.log(`✅ Manually removed IP ${ip} from blacklist`);\n    }\n\n    clearRateLimit(clientId, category = null) {\n        if (category) {\n            const key = `${category}:${clientId}`;\n            this.requestStore.delete(key);\n        } else {\n            // Clear all categories for this client\n            for (const key of this.requestStore.keys()) {\n                if (key.includes(clientId)) {\n                    this.requestStore.delete(key);\n                }\n            }\n        }\n        console.log(`✅ Cleared rate limits for client ${clientId} in ${category || 'all categories'}`);\n    }\n}\n\nmodule.exports = RateLimitingMiddleware;"],"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","ignoreList":[]}