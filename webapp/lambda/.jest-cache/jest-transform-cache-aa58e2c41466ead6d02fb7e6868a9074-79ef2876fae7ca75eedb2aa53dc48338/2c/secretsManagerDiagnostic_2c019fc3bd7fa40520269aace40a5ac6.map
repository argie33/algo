{"version":3,"names":["cov_1s4uaidpqk","actualCoverage","SecretsManagerClient","GetSecretValueCommand","s","require","SecretsManagerDiagnostic","constructor","f","client","region","b","process","env","WEBAPP_AWS_REGION","AWS_REGION","diagnoseSecret","secretArn","diagnosisId","Math","random","toString","substr","console","log","config","command","SecretId","response","send","Object","keys","secretString","SecretString","length","success","method","diagnosticId","parsed","JSON","parse","parseError","error","message","cleanString","replace","trim","cleanParseError","Error","SecretBinary","binaryString","Buffer","from","substring","binaryParseError","code","statusCode","$metadata","httpStatusCode","requestId","testDatabaseConfig","diagnosis","requiredFields","missingFields","filter","field","join","host","port","database","dbname","username","hasPassword","password","parseInt","user","ssl","createFixedDbConfigGetter","module","exports"],"sources":["secretsManagerDiagnostic.js"],"sourcesContent":["/**\n * AWS Secrets Manager Diagnostic Tool\n * Comprehensive debugging for JSON parsing errors\n */\n\nconst { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n\nclass SecretsManagerDiagnostic {\n    constructor() {\n        this.client = new SecretsManagerClient({\n            region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n        });\n    }\n\n    /**\n     * Comprehensive secret retrieval with detailed logging\n     */\n    async diagnoseSecret(secretArn) {\n        const diagnosisId = Math.random().toString(36).substr(2, 9);\n        console.log(`üîç [${diagnosisId}] Starting AWS Secrets Manager diagnostic`);\n        console.log(`üîç [${diagnosisId}] Secret ARN: ${secretArn}`);\n        console.log(`üîç [${diagnosisId}] Region: ${this.client.config.region}`);\n\n        try {\n            // Step 1: Get the raw secret response\n            console.log(`üîç [${diagnosisId}] Calling AWS Secrets Manager...`);\n            const command = new GetSecretValueCommand({ SecretId: secretArn });\n            const response = await this.client.send(command);\n            \n            console.log(`‚úÖ [${diagnosisId}] Raw response received`);\n            console.log(`üîç [${diagnosisId}] Response keys:`, Object.keys(response || {}));\n            \n            // Step 2: Analyze the SecretString property\n            const secretString = response.SecretString;\n            console.log(`üîç [${diagnosisId}] SecretString type:`, typeof secretString);\n            console.log(`üîç [${diagnosisId}] SecretString length:`, secretString?.length || 0);\n            console.log(`üîç [${diagnosisId}] SecretString first 200 chars: [REDACTED]`);\n            \n            // Step 3: Check if it's actually an object that needs stringifying\n            if (typeof secretString === 'object') {\n                console.log(`‚ö†Ô∏è [${diagnosisId}] SecretString is an object, not a string!`);\n                console.log(`üîç [${diagnosisId}] Object keys:`, Object.keys(secretString));\n                console.log(`üîç [${diagnosisId}] Object values: [REDACTED]`);\n                \n                // Try to use the object directly\n                return {\n                    success: true,\n                    method: 'direct_object',\n                    config: secretString,\n                    diagnosticId: diagnosisId\n                };\n            }\n            \n            // Step 4: Try to parse as JSON\n            if (typeof secretString === 'string') {\n                console.log(`üîç [${diagnosisId}] Attempting JSON.parse on string...`);\n                \n                try {\n                    const parsed = JSON.parse(secretString);\n                    console.log(`‚úÖ [${diagnosisId}] JSON parsing successful`);\n                    console.log(`üîç [${diagnosisId}] Parsed keys:`, Object.keys(parsed));\n                    \n                    return {\n                        success: true,\n                        method: 'json_parse',\n                        config: parsed,\n                        diagnosticId: diagnosisId\n                    };\n                } catch (parseError) {\n                    console.error(`‚ùå [${diagnosisId}] JSON parsing failed:`, parseError.message);\n                    \n                    // Step 5: Try to fix common JSON issues\n                    console.log(`üîß [${diagnosisId}] Attempting to fix JSON issues...`);\n                    \n                    // Remove potential BOM and invisible characters\n                    const cleanString = secretString.replace(/^\\uFEFF/, '').trim();\n                    console.log(`üîç [${diagnosisId}] Cleaned string length:`, cleanString.length);\n                    console.log(`üîç [${diagnosisId}] Cleaned string first 200 chars: [REDACTED]`);\n                    \n                    try {\n                        const parsed = JSON.parse(cleanString);\n                        console.log(`‚úÖ [${diagnosisId}] JSON parsing successful after cleaning`);\n                        return {\n                            success: true,\n                            method: 'json_parse_cleaned',\n                            config: parsed,\n                            diagnosticId: diagnosisId\n                        };\n                    } catch (cleanParseError) {\n                        console.error(`‚ùå [${diagnosisId}] JSON parsing still failed after cleaning:`, cleanParseError.message);\n                        \n                        // Step 6: Character-by-character analysis\n                        console.log(`üîç [${diagnosisId}] Character analysis: [REDACTED - Logging characters would expose sensitive data]`);\n                        // Character-by-character analysis removed for security\n                        \n                        throw new Error(`Unable to parse secret after all attempts: ${cleanParseError.message}`);\n                    }\n                }\n            }\n            \n            // Step 7: Handle binary secrets\n            if (response.SecretBinary) {\n                console.log(`üîç [${diagnosisId}] Secret is binary, attempting to decode...`);\n                const binaryString = Buffer.from(response.SecretBinary).toString('utf8');\n                console.log(`üîç [${diagnosisId}] Binary decoded length:`, binaryString.length);\n                console.log(`üîç [${diagnosisId}] Binary decoded first 200 chars:`, binaryString.substring(0, 200));\n                \n                try {\n                    const parsed = JSON.parse(binaryString);\n                    return {\n                        success: true,\n                        method: 'binary_decode',\n                        config: parsed,\n                        diagnosticId: diagnosisId\n                    };\n                } catch (binaryParseError) {\n                    console.error(`‚ùå [${diagnosisId}] Binary JSON parsing failed:`, binaryParseError.message);\n                    throw binaryParseError;\n                }\n            }\n            \n            throw new Error('No valid secret found in SecretString or SecretBinary');\n            \n        } catch (error) {\n            console.error(`‚ùå [${diagnosisId}] Secrets Manager diagnostic failed:`, {\n                message: error.message,\n                code: error.code,\n                statusCode: error.$metadata?.httpStatusCode,\n                requestId: error.$metadata?.requestId\n            });\n            \n            return {\n                success: false,\n                error: error.message,\n                diagnosticId: diagnosisId\n            };\n        }\n    }\n\n    /**\n     * Test database configuration from secrets\n     */\n    async testDatabaseConfig(secretArn) {\n        console.log(`üß™ Testing database configuration from secret: ${secretArn}`);\n        \n        const diagnosis = await this.diagnoseSecret(secretArn);\n        \n        if (!diagnosis.success) {\n            throw new Error(`Secret diagnosis failed: ${diagnosis.error}`);\n        }\n        \n        const config = diagnosis.config;\n        console.log(`‚úÖ Secret retrieved using method: ${diagnosis.method}`);\n        \n        // Validate required database fields\n        const requiredFields = ['host', 'username', 'password', 'dbname'];\n        const missingFields = requiredFields.filter(field => !config[field]);\n        \n        if (missingFields.length > 0) {\n            throw new Error(`Missing required database fields: ${missingFields.join(', ')}`);\n        }\n        \n        console.log(`‚úÖ Database configuration validated:`, {\n            host: config.host,\n            port: config.port || 5432,\n            database: config.dbname,\n            username: config.username,\n            hasPassword: !!config.password\n        });\n        \n        return {\n            host: config.host,\n            port: parseInt(config.port) || 5432,\n            database: config.dbname,\n            user: config.username,\n            password: config.password,\n            ssl: false // Match working ECS configuration\n        };\n    }\n\n    /**\n     * Create a fixed database configuration getter\n     */\n    createFixedDbConfigGetter(secretArn) {\n        return async () => {\n            try {\n                return await this.testDatabaseConfig(secretArn);\n            } catch (error) {\n                console.error('‚ùå Fixed database config getter failed:', error.message);\n                throw error;\n            }\n        };\n    }\n}\n\nmodule.exports = SecretsManagerDiagnostic;"],"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","ignoreList":[]}