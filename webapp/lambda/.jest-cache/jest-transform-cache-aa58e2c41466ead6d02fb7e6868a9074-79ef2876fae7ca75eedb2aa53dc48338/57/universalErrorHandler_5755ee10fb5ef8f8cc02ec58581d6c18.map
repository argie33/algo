{"version":3,"names":["cov_1rq7daoyj4","actualCoverage","getLogger","s","loggerModule","require","b","f","info","console","log","warn","error","getCorrelationId","asyncHandler","fn","req","res","next","promise","catch","requestContext","method","path","params","query","userAgent","headers","correlationId","userId","user","sub","timestamp","Date","toISOString","enrichErrorContext","additionalContext","logger","now","name","message","stack","request","origin","id","email","roles","performance","requestStartTime","startTime","duration","category","categorizeError","severity","determineSeverity","recoverable","isRecoverable","toLowerCase","code","status","includes","recoverableCategories","generateUserMessage","userMessages","formatErrorResponse","enrichedContext","statusCode","statusCodeMapping","response","success","process","env","NODE_ENV","details","originalMessage","context","retryAfter","getRetryDelay","recovery","getRecoveryInstructions","retryDelays","instructions","logError","errorHandlerMiddleware","json","handleDatabaseError","operation","fallbackFn","fallbackResult","fallbackError","originalError","handleExternalServiceError","serviceName","retryCount","maxRetries","service","retryableErrors","delay","Math","min","pow","delayMs","Promise","resolve","setTimeout","module","exports"],"sources":["universalErrorHandler.js"],"sourcesContent":["/**\n * Universal Error Handler - Comprehensive Error Handling Strategy\n * Provides consistent error handling across all routes and services\n */\n\n// Import logger with fallback for testing\nlet getLogger;\ntry {\n  const loggerModule = require('../utils/logger');\n  getLogger = loggerModule.getLogger || (() => ({\n    info: console.log,\n    warn: console.warn,\n    error: console.error\n  }));\n} catch (error) {\n  // Fallback logger for testing\n  getLogger = () => ({\n    info: console.log,\n    warn: console.warn,\n    error: console.error,\n    getCorrelationId: () => 'test-correlation-id'\n  });\n}\n\n/**\n * Universal async route wrapper - ensures all async routes have proper error handling\n */\nfunction asyncHandler(fn) {\n  return (req, res, next) => {\n    const promise = fn(req, res, next);\n    \n    if (promise && typeof promise.catch === 'function') {\n      promise.catch((error) => {\n        // Enhance error with request context\n        error.requestContext = {\n          method: req.method,\n          path: req.path,\n          params: req.params,\n          query: req.query,\n          userAgent: req.headers['user-agent'],\n          correlationId: req.correlationId,\n          userId: req.user?.sub,\n          timestamp: new Date().toISOString()\n        };\n        \n        next(error);\n      });\n    }\n    \n    return promise;\n  };\n}\n\n/**\n * Enhanced error context collector\n */\nfunction enrichErrorContext(error, req, additionalContext = {}) {\n  const logger = getLogger();\n  const timestamp = Date.now();\n  \n  return {\n    // Core error information\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    \n    // Request context\n    request: {\n      method: req.method,\n      path: req.path,\n      params: req.params,\n      query: req.query,\n      headers: {\n        'user-agent': req.headers['user-agent'],\n        'content-type': req.headers['content-type'],\n        'origin': req.headers.origin\n      },\n      correlationId: req.correlationId,\n      timestamp: new Date().toISOString()\n    },\n    \n    // User context (if available)\n    user: req.user ? {\n      id: req.user.sub,\n      email: req.user.email,\n      roles: req.user.roles\n    } : null,\n    \n    // Performance context\n    performance: {\n      requestStartTime: req.startTime,\n      duration: req.startTime ? timestamp - req.startTime : null\n    },\n    \n    // Additional context\n    ...additionalContext,\n    \n    // Error categorization\n    category: categorizeError(error),\n    severity: determineSeverity(error),\n    recoverable: isRecoverable(error)\n  };\n}\n\n/**\n * Categorize errors for better handling\n */\nfunction categorizeError(error) {\n  const message = error.message?.toLowerCase() || '';\n  const code = error.code || error.status;\n  \n  // Circuit breaker errors (check first to prioritize over database)\n  if (message.includes('circuit breaker')) {\n    return 'CIRCUIT_BREAKER_ERROR';\n  }\n  \n  // Database errors (check before timeout to prioritize database-specific timeouts)\n  if (error.name === 'DatabaseError' || message.includes('database') || message.includes('postgresql')) {\n    return 'DATABASE_ERROR';\n  }\n  \n  // Timeout errors (more specific patterns)\n  if (error.name === 'TimeoutError' || \n      (message.includes('timeout') && !message.includes('database')) ||\n      message.includes('timed out') ||\n      message.includes('request timeout')) {\n    return 'TIMEOUT_ERROR';\n  }\n  \n  // Authentication errors\n  if (code === 401 || message.includes('unauthorized') || message.includes('token') || message.includes('jwt')) {\n    return 'AUTHENTICATION_ERROR';\n  }\n  \n  // Authorization errors\n  if (code === 403 || message.includes('forbidden') || message.includes('permission')) {\n    return 'AUTHORIZATION_ERROR';\n  }\n  \n  // Validation errors\n  if (code === 400 || message.includes('validation') || message.includes('invalid')) {\n    return 'VALIDATION_ERROR';\n  }\n  \n  // External service errors (more specific patterns)\n  if (message.includes('alpaca') || \n      message.includes('external service') || \n      (message.includes('api') && !message.includes('api key'))) {\n    return 'EXTERNAL_SERVICE_ERROR';\n  }\n  \n  // Rate limiting errors\n  if (code === 429 || message.includes('rate limit') || message.includes('too many')) {\n    return 'RATE_LIMIT_ERROR';\n  }\n  \n  // Business logic errors\n  if (code >= 400 && code < 500) {\n    return 'BUSINESS_LOGIC_ERROR';\n  }\n  \n  // Server errors\n  if (code >= 500) {\n    return 'SERVER_ERROR';\n  }\n  \n  return 'UNKNOWN_ERROR';\n}\n\n/**\n * Determine error severity\n */\nfunction determineSeverity(error) {\n  const category = categorizeError(error);\n  const code = error.code || error.status;\n  \n  // Critical severity\n  if (['DATABASE_ERROR', 'SERVER_ERROR'].includes(category)) {\n    return 'CRITICAL';\n  }\n  \n  // High severity\n  if (['EXTERNAL_SERVICE_ERROR', 'CIRCUIT_BREAKER_ERROR'].includes(category)) {\n    return 'HIGH';\n  }\n  \n  // Medium severity\n  if (['AUTHENTICATION_ERROR', 'AUTHORIZATION_ERROR', 'TIMEOUT_ERROR'].includes(category)) {\n    return 'MEDIUM';\n  }\n  \n  // Low severity\n  if (['VALIDATION_ERROR', 'RATE_LIMIT_ERROR', 'BUSINESS_LOGIC_ERROR'].includes(category)) {\n    return 'LOW';\n  }\n  \n  return 'UNKNOWN';\n}\n\n/**\n * Determine if error is recoverable\n */\nfunction isRecoverable(error) {\n  const category = categorizeError(error);\n  \n  // Recoverable errors\n  const recoverableCategories = [\n    'TIMEOUT_ERROR',\n    'RATE_LIMIT_ERROR', \n    'EXTERNAL_SERVICE_ERROR',\n    'CIRCUIT_BREAKER_ERROR'\n  ];\n  \n  return recoverableCategories.includes(category);\n}\n\n/**\n * Generate user-friendly error messages\n */\nfunction generateUserMessage(error, category) {\n  const userMessages = {\n    'DATABASE_ERROR': 'We\\'re experiencing technical difficulties. Please try again in a few moments.',\n    'AUTHENTICATION_ERROR': 'Your session has expired. Please log in again.',\n    'AUTHORIZATION_ERROR': 'You don\\'t have permission to perform this action.',\n    'VALIDATION_ERROR': 'Please check your input and try again.',\n    'EXTERNAL_SERVICE_ERROR': 'Our trading partner is temporarily unavailable. Please try again shortly.',\n    'RATE_LIMIT_ERROR': 'You\\'ve made too many requests. Please wait a moment before trying again.',\n    'TIMEOUT_ERROR': 'The request took too long to complete. Please try again.',\n    'CIRCUIT_BREAKER_ERROR': 'This service is temporarily unavailable for maintenance.',\n    'BUSINESS_LOGIC_ERROR': error.message || 'Invalid operation.',\n    'SERVER_ERROR': 'We\\'re experiencing technical issues. Our team has been notified.',\n    'UNKNOWN_ERROR': 'An unexpected error occurred. Please try again.'\n  };\n  \n  return userMessages[category] || userMessages['UNKNOWN_ERROR'];\n}\n\n/**\n * Enhanced error response formatter\n */\nfunction formatErrorResponse(error, req, additionalContext = {}) {\n  const enrichedContext = enrichErrorContext(error, req, additionalContext);\n  const category = enrichedContext.category;\n  const severity = enrichedContext.severity;\n  \n  // Determine response status code\n  let statusCode = error.status || error.code || 500;\n  \n  // Override status codes based on category\n  const statusCodeMapping = {\n    'AUTHENTICATION_ERROR': 401,\n    'AUTHORIZATION_ERROR': 403,\n    'VALIDATION_ERROR': 400,\n    'RATE_LIMIT_ERROR': 429,\n    'DATABASE_ERROR': 503,\n    'EXTERNAL_SERVICE_ERROR': 503,\n    'CIRCUIT_BREAKER_ERROR': 503,\n    'TIMEOUT_ERROR': 504,\n    'SERVER_ERROR': 500\n  };\n  \n  statusCode = statusCodeMapping[category] || statusCode;\n  \n  // Generate response\n  const response = {\n    success: false,\n    error: {\n      code: category,\n      message: generateUserMessage(error, category),\n      severity: severity.toLowerCase(),\n      recoverable: enrichedContext.recoverable,\n      correlationId: req.correlationId\n    },\n    timestamp: enrichedContext.request.timestamp\n  };\n  \n  // Add details in development environment\n  if (process.env.NODE_ENV === 'development') {\n    response.error.details = {\n      originalMessage: error.message,\n      stack: error.stack,\n      context: enrichedContext\n    };\n  }\n  \n  // Add retry information for recoverable errors\n  if (enrichedContext.recoverable) {\n    response.error.retryAfter = getRetryDelay(category);\n    response.error.recovery = getRecoveryInstructions(category);\n  }\n  \n  return { statusCode, response };\n}\n\n/**\n * Get retry delay for recoverable errors\n */\nfunction getRetryDelay(category) {\n  const retryDelays = {\n    'TIMEOUT_ERROR': 5000,        // 5 seconds\n    'RATE_LIMIT_ERROR': 60000,    // 1 minute\n    'EXTERNAL_SERVICE_ERROR': 30000, // 30 seconds\n    'CIRCUIT_BREAKER_ERROR': 60000   // 1 minute\n  };\n  \n  return retryDelays[category] || 10000;\n}\n\n/**\n * Get recovery instructions for users\n */\nfunction getRecoveryInstructions(category) {\n  const instructions = {\n    'TIMEOUT_ERROR': 'Try refreshing the page or reducing the data range.',\n    'RATE_LIMIT_ERROR': 'Please wait a moment before making more requests.',\n    'EXTERNAL_SERVICE_ERROR': 'Check our status page for updates on partner services.',\n    'CIRCUIT_BREAKER_ERROR': 'This service will be restored automatically. Please check back soon.'\n  };\n  \n  return instructions[category];\n}\n\n/**\n * Log error with enhanced context\n */\nfunction logError(error, req, additionalContext = {}) {\n  const logger = req.logger || getLogger();\n  const enrichedContext = enrichErrorContext(error, req, additionalContext);\n  \n  // Log based on severity\n  switch (enrichedContext.severity) {\n    case 'CRITICAL':\n      logger.error('Critical error occurred', enrichedContext);\n      break;\n    case 'HIGH':\n      logger.error('High severity error', enrichedContext);\n      break;\n    case 'MEDIUM':\n      logger.warn('Medium severity error', enrichedContext);\n      break;\n    case 'LOW':\n      logger.info('Low severity error', enrichedContext);\n      break;\n    default:\n      logger.error('Unknown severity error', enrichedContext);\n  }\n  \n  // Additional alerting for critical errors\n  if (enrichedContext.severity === 'CRITICAL') {\n    // TODO: Integrate with alerting system (e.g., CloudWatch Alarms, PagerDuty)\n    console.error('🚨 CRITICAL ERROR ALERT:', {\n      correlationId: req.correlationId,\n      error: error.message,\n      user: enrichedContext.user?.id,\n      path: enrichedContext.request.path\n    });\n  }\n}\n\n/**\n * Express middleware for enhanced error handling\n */\nfunction errorHandlerMiddleware(error, req, res, next) {\n  // Log the error with enhanced context\n  logError(error, req);\n  \n  // Format error response\n  const { statusCode, response } = formatErrorResponse(error, req);\n  \n  // Send response\n  res.status(statusCode).json(response);\n}\n\n/**\n * Database error handler with fallback strategies\n */\nasync function handleDatabaseError(error, operation, fallbackFn = null) {\n  const logger = getLogger();\n  \n  logger.error('Database operation failed', {\n    operation,\n    error: error.message,\n    category: categorizeError(error)\n  });\n  \n  // Attempt fallback if provided\n  if (fallbackFn && typeof fallbackFn === 'function') {\n    try {\n      logger.warn('Attempting fallback strategy for database operation', { operation });\n      const fallbackResult = await fallbackFn();\n      logger.info('Fallback strategy succeeded', { operation });\n      return fallbackResult;\n    } catch (fallbackError) {\n      logger.error('Fallback strategy failed', {\n        operation,\n        originalError: error.message,\n        fallbackError: fallbackError.message\n      });\n    }\n  }\n  \n  // Re-throw original error if no fallback or fallback failed\n  throw error;\n}\n\n/**\n * External service error handler with retry logic\n */\nasync function handleExternalServiceError(error, serviceName, operation, retryCount = 0, maxRetries = 3) {\n  const logger = getLogger();\n  \n  logger.error('External service error', {\n    service: serviceName,\n    operation,\n    error: error.message,\n    retryCount,\n    maxRetries\n  });\n  \n  // Check if error is retryable\n  const retryableErrors = ['TIMEOUT_ERROR', 'RATE_LIMIT_ERROR', 'SERVER_ERROR'];\n  const category = categorizeError(error);\n  \n  if (retryableErrors.includes(category) && retryCount < maxRetries) {\n    const delay = Math.min(1000 * Math.pow(2, retryCount), 30000); // Exponential backoff, max 30s\n    \n    logger.warn('Retrying external service call', {\n      service: serviceName,\n      operation,\n      retryCount: retryCount + 1,\n      delayMs: delay\n    });\n    \n    await new Promise(resolve => setTimeout(resolve, delay));\n    throw { ...error, retryCount: retryCount + 1 };\n  }\n  \n  throw error;\n}\n\nmodule.exports = {\n  asyncHandler,\n  enrichErrorContext,\n  categorizeError,\n  determineSeverity,\n  isRecoverable,\n  generateUserMessage,\n  formatErrorResponse,\n  logError,\n  errorHandlerMiddleware,\n  handleDatabaseError,\n  handleExternalServiceError\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}