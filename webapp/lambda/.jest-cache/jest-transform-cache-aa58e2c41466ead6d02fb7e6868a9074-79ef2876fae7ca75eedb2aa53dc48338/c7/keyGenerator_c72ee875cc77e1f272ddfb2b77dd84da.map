{"version":3,"names":["cov_o86whbw9d","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","crypto","require","generateApiEncryptionKey","randomBytes","toString","generateJwtSecret","generateSessionKey","generateUserSalt","validateKeyEntropy","key","minBytes","buffer","Buffer","from","length","error","generateAllKeys","API_KEY_ENCRYPTION_SECRET","JWT_SECRET","SESSION_SECRET","BACKUP_API_KEY_ENCRYPTION_SECRET","timestamp","Date","toISOString","entropy_info","api_encryption_bits","jwt_secret_bits","session_secret_bits","generateEnvFormat","keys","main","module","console","log","validations","valid","forEach","v","allValid","every","process","exit","exports"],"sources":["keyGenerator.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Secure Key Generation Utility\n * Generates cryptographically secure keys for API encryption and JWT signing\n */\n\nconst crypto = require('crypto');\n\n/**\n * Generate a cryptographically secure API encryption key\n * @returns {string} Base64 encoded 256-bit key\n */\nfunction generateApiEncryptionKey() {\n    return crypto.randomBytes(32).toString('base64');\n}\n\n/**\n * Generate a JWT signing secret\n * @returns {string} Base64 encoded 512-bit key\n */\nfunction generateJwtSecret() {\n    return crypto.randomBytes(64).toString('base64');\n}\n\n/**\n * Generate session encryption key\n * @returns {string} Base64 encoded 256-bit key\n */\nfunction generateSessionKey() {\n    return crypto.randomBytes(32).toString('base64');\n}\n\n/**\n * Generate a secure user salt\n * @returns {string} Hex encoded 256-bit salt\n */\nfunction generateUserSalt() {\n    return crypto.randomBytes(32).toString('hex');\n}\n\n/**\n * Validate that a key has sufficient entropy\n * @param {string} key - The key to validate\n * @param {number} minBytes - Minimum bytes of entropy required\n * @returns {boolean} True if key has sufficient entropy\n */\nfunction validateKeyEntropy(key, minBytes = 32) {\n    try {\n        const buffer = Buffer.from(key, 'base64');\n        return buffer.length >= minBytes;\n    } catch (error) {\n        return false;\n    }\n}\n\n/**\n * Generate all required keys for the application\n * @returns {object} Object containing all generated keys\n */\nfunction generateAllKeys() {\n    return {\n        API_KEY_ENCRYPTION_SECRET: generateApiEncryptionKey(),\n        JWT_SECRET: generateJwtSecret(),\n        SESSION_SECRET: generateSessionKey(),\n        BACKUP_API_KEY_ENCRYPTION_SECRET: generateApiEncryptionKey(),\n        timestamp: new Date().toISOString(),\n        entropy_info: {\n            api_encryption_bits: 256,\n            jwt_secret_bits: 512,\n            session_secret_bits: 256\n        }\n    };\n}\n\n/**\n * Generate environment variables format\n * @param {object} keys - Keys object from generateAllKeys()\n * @returns {string} Environment variables format\n */\nfunction generateEnvFormat(keys) {\n    return `# Cryptographic Keys - Generated ${keys.timestamp}\n# Store these securely and never commit to version control\n\n# Primary API key encryption secret (256-bit)\nAPI_KEY_ENCRYPTION_SECRET=\"${keys.API_KEY_ENCRYPTION_SECRET}\"\n\n# JWT signing secret (512-bit) - if using custom JWT implementation\nJWT_SECRET=\"${keys.JWT_SECRET}\"\n\n# Session encryption secret (256-bit)\nSESSION_SECRET=\"${keys.SESSION_SECRET}\"\n\n# Backup API key encryption secret for key rotation\nBACKUP_API_KEY_ENCRYPTION_SECRET=\"${keys.BACKUP_API_KEY_ENCRYPTION_SECRET}\"\n\n# Key rotation date for tracking\nKEY_GENERATION_DATE=\"${keys.timestamp}\"\n`;\n}\n\n// If run directly, generate and display keys\nif (require.main === module) {\n    console.log('üîê Generating cryptographically secure keys...\\n');\n    \n    const keys = generateAllKeys();\n    \n    console.log('‚úÖ Generated keys with the following entropy:');\n    console.log(`   ‚Ä¢ API Encryption Key: ${keys.entropy_info.api_encryption_bits} bits`);\n    console.log(`   ‚Ä¢ JWT Secret: ${keys.entropy_info.jwt_secret_bits} bits`);\n    console.log(`   ‚Ä¢ Session Secret: ${keys.entropy_info.session_secret_bits} bits\\n`);\n    \n    console.log('üìã Environment Variables Format:');\n    console.log('=====================================');\n    console.log(generateEnvFormat(keys));\n    \n    console.log('üîí SECURITY NOTES:');\n    console.log('‚Ä¢ Store these keys in AWS Secrets Manager or secure environment variables');\n    console.log('‚Ä¢ Never commit these keys to version control');\n    console.log('‚Ä¢ Implement key rotation every 90 days');\n    console.log('‚Ä¢ Use the backup key for seamless rotation');\n    console.log('‚Ä¢ Monitor key usage and access patterns\\n');\n    \n    // Validate generated keys\n    const validations = [\n        { name: 'API Encryption', valid: validateKeyEntropy(keys.API_KEY_ENCRYPTION_SECRET, 32) },\n        { name: 'JWT Secret', valid: validateKeyEntropy(keys.JWT_SECRET, 64) },\n        { name: 'Session Secret', valid: validateKeyEntropy(keys.SESSION_SECRET, 32) },\n        { name: 'Backup API Encryption', valid: validateKeyEntropy(keys.BACKUP_API_KEY_ENCRYPTION_SECRET, 32) }\n    ];\n    \n    console.log('üß™ Key Validation:');\n    validations.forEach(v => {\n        console.log(`   ${v.valid ? '‚úÖ' : '‚ùå'} ${v.name}: ${v.valid ? 'Valid' : 'Invalid'}`);\n    });\n    \n    const allValid = validations.every(v => v.valid);\n    console.log(`\\n${allValid ? 'üéâ All keys generated successfully!' : '‚ùå Some keys failed validation!'}`);\n    \n    process.exit(allValid ? 0 : 1);\n}\n\nmodule.exports = {\n    generateApiEncryptionKey,\n    generateJwtSecret,\n    generateSessionKey,\n    generateUserSalt,\n    generateAllKeys,\n    generateEnvFormat,\n    validateKeyEntropy\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;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","ignoreList":[]}