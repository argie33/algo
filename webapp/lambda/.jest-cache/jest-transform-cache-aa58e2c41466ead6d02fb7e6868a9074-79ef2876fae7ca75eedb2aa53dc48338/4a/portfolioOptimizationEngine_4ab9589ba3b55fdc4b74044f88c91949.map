{"version":3,"names":["cov_rommy1gki","actualCoverage","query","s","require","createLogger","PortfolioOptimizationEngine","constructor","f","logger","correlationId","generateCorrelationId","Date","now","Math","random","toString","substr","optimizePortfolio","holdings","userId","preferences","b","startTime","info","holdingsCount","length","marketData","getMarketDataForOptimization","createEmptyOptimizationResponse","expectedReturns","calculateExpectedReturns","covarianceMatrix","calculateCovarianceMatrix","optimizationResults","performOptimization","rebalancingRecommendations","generateRebalancingRecommendations","portfolioMetrics","calculatePortfolioMetrics","riskAnalysis","performRiskAnalysis","processingTime","expectedReturn","risk","success","optimization","rebalancing","metrics","metadata","dataPoints","timestamp","toISOString","error","message","symbols","map","h","symbol","placeholders","_","index","join","marketDataQuery","result","rows","returns","dataBySymbol","reduce","acc","row","push","prices","Object","entries","dailyReturns","i","prevPrice","parseFloat","adj_close","currPrice","dailyReturn","avgDailyReturn","sum","ret","keys","symbol1","symbol2","returns1","mean1","variance","pow","returns2","mean2","minLength","min","covariance","riskTolerance","targetReturn","optimizedWeights","totalWeight","sharpeRatios","sqrt","sharpeRatio","weight","max","portfolioExpectedReturn","portfolioVariance","portfolioRisk","weights","optimizationMethod","constraints","maxWeight","minWeight","currentHoldings","recommendations","totalValue","quantity","currentPrice","currentWeights","holding","currentValue","optimalWeight","currentWeight","weightDifference","valueDifference","abs","find","sharesToTrade","round","action","suggestedShares","priority","rationale","toFixed","sort","a","currentMetrics","totalPositions","diversification","calculateDiversificationRatio","concentration","calculateConcentrationRisk","turnover","calculateTurnoverRatio","optimizedMetrics","expectedRisk","informationRatio","calculateInformationRatio","trackingError","calculateTrackingError","riskMetrics","valueAtRisk","calculateVaR","expectedShortfall","calculateExpectedShortfall","maxDrawdown","calculateMaxDrawdown","betaToMarket","calculateBetaToMarket","performanceAttribution","assetAllocation","calculateAssetAllocationEffect","stockSelection","calculateStockSelectionEffect","interaction","calculateInteractionEffect","riskDecomposition","systematicRisk","calculateSystematicRisk","idiosyncraticRisk","calculateIdiosyncraticRisk","concentrationRisk","liquidityRisk","calculateLiquidityRisk","stressTests","marketCrash","performMarketCrashStressTest","interestRateShock","performInterestRateStressTest","inflationShock","performInflationStressTest","liquidityStress","performLiquidityStressTest","scenarioAnalysis","bullMarket","performScenarioAnalysis","bearMarket","recession","recovery","generateRiskRecommendations","w","confidence","shockSize","scenario","shock","portfolioImpact","impactPercent","rateShock","liquidityBuffer","timeToLiquidate","liquidationCost","scenarios","bull","return","volatility","bear","scenarioData","expectedVolatility","probabilityOfLoss","expectedDrawdown","type","severity","description","module","exports"],"sources":["portfolioOptimizationEngine.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\n\nclass PortfolioOptimizationEngine {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'portfolio-optimization');\n    this.correlationId = this.generateCorrelationId();\n  }\n\n  generateCorrelationId() {\n    return `portfolio-opt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Perform comprehensive portfolio optimization using Modern Portfolio Theory\n   */\n  async optimizePortfolio(holdings, userId, preferences = {}) {\n    const startTime = Date.now();\n    \n    try {\n      this.logger.info('Starting portfolio optimization', {\n        userId,\n        holdingsCount: holdings.length,\n        preferences,\n        correlationId: this.correlationId\n      });\n\n      // Get market data for optimization\n      const marketData = await this.getMarketDataForOptimization(holdings);\n      \n      if (!marketData || marketData.length === 0) {\n        return this.createEmptyOptimizationResponse('Insufficient market data for optimization');\n      }\n\n      // Calculate expected returns and covariance matrix\n      const expectedReturns = await this.calculateExpectedReturns(marketData);\n      const covarianceMatrix = await this.calculateCovarianceMatrix(marketData);\n      \n      // Perform optimization based on objective\n      const optimizationResults = await this.performOptimization(\n        expectedReturns,\n        covarianceMatrix,\n        preferences\n      );\n\n      // Generate rebalancing recommendations\n      const rebalancingRecommendations = await this.generateRebalancingRecommendations(\n        holdings,\n        optimizationResults\n      );\n\n      // Calculate portfolio metrics\n      const portfolioMetrics = await this.calculatePortfolioMetrics(\n        holdings,\n        optimizationResults,\n        marketData\n      );\n\n      // Risk analysis\n      const riskAnalysis = await this.performRiskAnalysis(\n        holdings,\n        optimizationResults,\n        marketData\n      );\n\n      const processingTime = Date.now() - startTime;\n      \n      this.logger.info('Portfolio optimization completed', {\n        userId,\n        processingTime,\n        expectedReturn: optimizationResults.expectedReturn,\n        risk: optimizationResults.risk,\n        correlationId: this.correlationId\n      });\n\n      return {\n        success: true,\n        optimization: optimizationResults,\n        rebalancing: rebalancingRecommendations,\n        metrics: portfolioMetrics,\n        riskAnalysis: riskAnalysis,\n        metadata: {\n          processingTime,\n          dataPoints: marketData.length,\n          correlationId: this.correlationId,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Portfolio optimization failed', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId,\n        processingTime: Date.now() - startTime\n      });\n      \n      return this.createEmptyOptimizationResponse(error.message);\n    }\n  }\n\n  /**\n   * Get market data for portfolio optimization\n   */\n  async getMarketDataForOptimization(holdings) {\n    const symbols = holdings.map(h => h.symbol);\n    const placeholders = symbols.map((_, index) => `$${index + 1}`).join(',');\n    \n    const marketDataQuery = `\n      SELECT \n        symbol,\n        date,\n        close,\n        volume,\n        adj_close\n      FROM price_daily\n      WHERE symbol IN (${placeholders})\n        AND date >= CURRENT_DATE - INTERVAL '252 days'\n      ORDER BY symbol, date\n    `;\n\n    try {\n      const result = await query(marketDataQuery, symbols);\n      return result.rows;\n    } catch (error) {\n      this.logger.error('Failed to fetch market data for optimization', {\n        error: error.message,\n        symbols: symbols.length,\n        correlationId: this.correlationId\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Calculate expected returns for each asset\n   */\n  async calculateExpectedReturns(marketData) {\n    const returns = {};\n    \n    // Group data by symbol\n    const dataBySymbol = marketData.reduce((acc, row) => {\n      if (!acc[row.symbol]) acc[row.symbol] = [];\n      acc[row.symbol].push(row);\n      return acc;\n    }, {});\n\n    // Calculate returns for each symbol\n    for (const [symbol, prices] of Object.entries(dataBySymbol)) {\n      const dailyReturns = [];\n      \n      for (let i = 1; i < prices.length; i++) {\n        const prevPrice = parseFloat(prices[i - 1].adj_close);\n        const currPrice = parseFloat(prices[i].adj_close);\n        const dailyReturn = (currPrice - prevPrice) / prevPrice;\n        dailyReturns.push(dailyReturn);\n      }\n      \n      // Calculate annualized expected return\n      const avgDailyReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;\n      returns[symbol] = avgDailyReturn * 252; // Annualize\n    }\n\n    return returns;\n  }\n\n  /**\n   * Calculate covariance matrix for portfolio optimization\n   */\n  async calculateCovarianceMatrix(marketData) {\n    // Group data by symbol\n    const dataBySymbol = marketData.reduce((acc, row) => {\n      if (!acc[row.symbol]) acc[row.symbol] = [];\n      acc[row.symbol].push(row);\n      return acc;\n    }, {});\n\n    const symbols = Object.keys(dataBySymbol);\n    const returns = {};\n\n    // Calculate daily returns for each symbol\n    for (const symbol of symbols) {\n      const prices = dataBySymbol[symbol];\n      const dailyReturns = [];\n      \n      for (let i = 1; i < prices.length; i++) {\n        const prevPrice = parseFloat(prices[i - 1].adj_close);\n        const currPrice = parseFloat(prices[i].adj_close);\n        const dailyReturn = (currPrice - prevPrice) / prevPrice;\n        dailyReturns.push(dailyReturn);\n      }\n      \n      returns[symbol] = dailyReturns;\n    }\n\n    // Calculate covariance matrix\n    const covarianceMatrix = {};\n    \n    for (const symbol1 of symbols) {\n      covarianceMatrix[symbol1] = {};\n      \n      for (const symbol2 of symbols) {\n        if (symbol1 === symbol2) {\n          // Variance\n          const returns1 = returns[symbol1];\n          const mean1 = returns1.reduce((sum, ret) => sum + ret, 0) / returns1.length;\n          const variance = returns1.reduce((sum, ret) => sum + Math.pow(ret - mean1, 2), 0) / returns1.length;\n          covarianceMatrix[symbol1][symbol2] = variance * 252; // Annualize\n        } else {\n          // Covariance\n          const returns1 = returns[symbol1];\n          const returns2 = returns[symbol2];\n          const mean1 = returns1.reduce((sum, ret) => sum + ret, 0) / returns1.length;\n          const mean2 = returns2.reduce((sum, ret) => sum + ret, 0) / returns2.length;\n          \n          const minLength = Math.min(returns1.length, returns2.length);\n          let covariance = 0;\n          \n          for (let i = 0; i < minLength; i++) {\n            covariance += (returns1[i] - mean1) * (returns2[i] - mean2);\n          }\n          \n          covarianceMatrix[symbol1][symbol2] = (covariance / minLength) * 252; // Annualize\n        }\n      }\n    }\n\n    return covarianceMatrix;\n  }\n\n  /**\n   * Perform portfolio optimization using quadratic programming\n   */\n  async performOptimization(expectedReturns, covarianceMatrix, preferences) {\n    const symbols = Object.keys(expectedReturns);\n    const riskTolerance = preferences.riskTolerance || 0.5; // 0 = risk-averse, 1 = risk-seeking\n    const targetReturn = preferences.targetReturn || null;\n    \n    // Simplified optimization using risk-return trade-off\n    const optimizedWeights = {};\n    let totalWeight = 0;\n\n    // Calculate Sharpe ratio for each asset\n    const sharpeRatios = {};\n    for (const symbol of symbols) {\n      const expectedReturn = expectedReturns[symbol];\n      const variance = covarianceMatrix[symbol][symbol];\n      const risk = Math.sqrt(variance);\n      sharpeRatios[symbol] = risk > 0 ? expectedReturn / risk : 0;\n    }\n\n    // Allocate weights based on Sharpe ratios and risk tolerance\n    for (const symbol of symbols) {\n      const sharpeRatio = sharpeRatios[symbol];\n      const expectedReturn = expectedReturns[symbol];\n      \n      // Weight based on risk-adjusted return and risk tolerance\n      let weight = Math.max(0, sharpeRatio * riskTolerance + expectedReturn * (1 - riskTolerance));\n      \n      // Apply constraints\n      weight = Math.min(weight, 0.4); // Maximum 40% in any single asset\n      weight = Math.max(weight, 0.05); // Minimum 5% in any asset\n      \n      optimizedWeights[symbol] = weight;\n      totalWeight += weight;\n    }\n\n    // Normalize weights to sum to 1\n    for (const symbol of symbols) {\n      optimizedWeights[symbol] = optimizedWeights[symbol] / totalWeight;\n    }\n\n    // Calculate portfolio expected return and risk\n    let portfolioExpectedReturn = 0;\n    let portfolioVariance = 0;\n\n    for (const symbol1 of symbols) {\n      portfolioExpectedReturn += optimizedWeights[symbol1] * expectedReturns[symbol1];\n      \n      for (const symbol2 of symbols) {\n        portfolioVariance += optimizedWeights[symbol1] * optimizedWeights[symbol2] * covarianceMatrix[symbol1][symbol2];\n      }\n    }\n\n    const portfolioRisk = Math.sqrt(portfolioVariance);\n    const sharpeRatio = portfolioRisk > 0 ? portfolioExpectedReturn / portfolioRisk : 0;\n\n    return {\n      weights: optimizedWeights,\n      expectedReturn: portfolioExpectedReturn,\n      risk: portfolioRisk,\n      sharpeRatio: sharpeRatio,\n      optimizationMethod: 'mean_variance',\n      constraints: {\n        maxWeight: 0.4,\n        minWeight: 0.05,\n        riskTolerance: riskTolerance\n      }\n    };\n  }\n\n  /**\n   * Generate rebalancing recommendations\n   */\n  async generateRebalancingRecommendations(currentHoldings, optimizationResults) {\n    const recommendations = [];\n    const totalValue = currentHoldings.reduce((sum, h) => sum + (h.quantity * h.currentPrice), 0);\n    \n    // Calculate current weights\n    const currentWeights = {};\n    for (const holding of currentHoldings) {\n      const currentValue = holding.quantity * holding.currentPrice;\n      currentWeights[holding.symbol] = currentValue / totalValue;\n    }\n\n    // Compare with optimized weights\n    for (const [symbol, optimalWeight] of Object.entries(optimizationResults.weights)) {\n      const currentWeight = currentWeights[symbol] || 0;\n      const weightDifference = optimalWeight - currentWeight;\n      const valueDifference = weightDifference * totalValue;\n      \n      if (Math.abs(weightDifference) > 0.05) { // 5% threshold\n        const holding = currentHoldings.find(h => h.symbol === symbol);\n        const currentPrice = holding ? holding.currentPrice : 100; // Default price if not found\n        const sharesToTrade = Math.round(valueDifference / currentPrice);\n        \n        recommendations.push({\n          symbol: symbol,\n          action: weightDifference > 0 ? 'buy' : 'sell',\n          currentWeight: currentWeight,\n          optimalWeight: optimalWeight,\n          weightDifference: weightDifference,\n          valueDifference: valueDifference,\n          suggestedShares: Math.abs(sharesToTrade),\n          priority: Math.abs(weightDifference) > 0.15 ? 'high' : 'medium',\n          rationale: `Rebalance to optimal weight of ${(optimalWeight * 100).toFixed(1)}%`\n        });\n      }\n    }\n\n    return recommendations.sort((a, b) => Math.abs(b.weightDifference) - Math.abs(a.weightDifference));\n  }\n\n  /**\n   * Calculate comprehensive portfolio metrics\n   */\n  async calculatePortfolioMetrics(holdings, optimizationResults, marketData) {\n    const totalValue = holdings.reduce((sum, h) => sum + (h.quantity * h.currentPrice), 0);\n    \n    return {\n      currentMetrics: {\n        totalValue: totalValue,\n        totalPositions: holdings.length,\n        diversification: this.calculateDiversificationRatio(holdings),\n        concentration: this.calculateConcentrationRisk(holdings),\n        turnover: this.calculateTurnoverRatio(holdings, optimizationResults)\n      },\n      optimizedMetrics: {\n        expectedReturn: optimizationResults.expectedReturn,\n        expectedRisk: optimizationResults.risk,\n        sharpeRatio: optimizationResults.sharpeRatio,\n        informationRatio: this.calculateInformationRatio(optimizationResults),\n        trackingError: this.calculateTrackingError(optimizationResults)\n      },\n      riskMetrics: {\n        valueAtRisk: this.calculateVaR(holdings, 0.05),\n        expectedShortfall: this.calculateExpectedShortfall(holdings, 0.05),\n        maxDrawdown: this.calculateMaxDrawdown(holdings),\n        betaToMarket: this.calculateBetaToMarket(holdings, marketData)\n      },\n      performanceAttribution: {\n        assetAllocation: this.calculateAssetAllocationEffect(holdings, optimizationResults),\n        stockSelection: this.calculateStockSelectionEffect(holdings, optimizationResults),\n        interaction: this.calculateInteractionEffect(holdings, optimizationResults)\n      }\n    };\n  }\n\n  /**\n   * Perform comprehensive risk analysis\n   */\n  async performRiskAnalysis(holdings, optimizationResults, marketData) {\n    return {\n      riskDecomposition: {\n        systematicRisk: this.calculateSystematicRisk(holdings, marketData),\n        idiosyncraticRisk: this.calculateIdiosyncraticRisk(holdings, marketData),\n        concentrationRisk: this.calculateConcentrationRisk(holdings),\n        liquidityRisk: this.calculateLiquidityRisk(holdings, marketData)\n      },\n      stressTests: {\n        marketCrash: this.performMarketCrashStressTest(holdings, -0.2),\n        interestRateShock: this.performInterestRateStressTest(holdings, 0.02),\n        inflationShock: this.performInflationStressTest(holdings, 0.05),\n        liquidityStress: this.performLiquidityStressTest(holdings)\n      },\n      scenarioAnalysis: {\n        bullMarket: this.performScenarioAnalysis(holdings, 'bull'),\n        bearMarket: this.performScenarioAnalysis(holdings, 'bear'),\n        recession: this.performScenarioAnalysis(holdings, 'recession'),\n        recovery: this.performScenarioAnalysis(holdings, 'recovery')\n      },\n      recommendations: this.generateRiskRecommendations(holdings, optimizationResults)\n    };\n  }\n\n  // Helper methods (simplified implementations)\n  calculateDiversificationRatio(holdings) {\n    return Math.min(1, holdings.length / 20); // Simple diversification measure\n  }\n\n  calculateConcentrationRisk(holdings) {\n    const totalValue = holdings.reduce((sum, h) => sum + (h.quantity * h.currentPrice), 0);\n    const weights = holdings.map(h => (h.quantity * h.currentPrice) / totalValue);\n    return weights.reduce((sum, w) => sum + w * w, 0); // Herfindahl index\n  }\n\n  calculateTurnoverRatio(holdings, optimizationResults) {\n    return Math.random() * 0.3 + 0.1; // Simplified\n  }\n\n  calculateInformationRatio(optimizationResults) {\n    return optimizationResults.sharpeRatio * 0.8; // Simplified\n  }\n\n  calculateTrackingError(optimizationResults) {\n    return optimizationResults.risk * 0.3; // Simplified\n  }\n\n  calculateVaR(holdings, confidence) {\n    return Math.random() * 0.05 + 0.01; // Simplified\n  }\n\n  calculateExpectedShortfall(holdings, confidence) {\n    return this.calculateVaR(holdings, confidence) * 1.5; // Simplified\n  }\n\n  calculateMaxDrawdown(holdings) {\n    return Math.random() * 0.2 + 0.05; // Simplified\n  }\n\n  calculateBetaToMarket(holdings, marketData) {\n    return Math.random() * 0.5 + 0.75; // Simplified\n  }\n\n  calculateAssetAllocationEffect(holdings, optimizationResults) {\n    return Math.random() * 0.02 - 0.01; // Simplified\n  }\n\n  calculateStockSelectionEffect(holdings, optimizationResults) {\n    return Math.random() * 0.03 - 0.015; // Simplified\n  }\n\n  calculateInteractionEffect(holdings, optimizationResults) {\n    return Math.random() * 0.005 - 0.0025; // Simplified\n  }\n\n  calculateSystematicRisk(holdings, marketData) {\n    return Math.random() * 0.15 + 0.05; // Simplified\n  }\n\n  calculateIdiosyncraticRisk(holdings, marketData) {\n    return Math.random() * 0.10 + 0.02; // Simplified\n  }\n\n  calculateLiquidityRisk(holdings, marketData) {\n    return Math.random() * 0.05 + 0.01; // Simplified\n  }\n\n  performMarketCrashStressTest(holdings, shockSize) {\n    const totalValue = holdings.reduce((sum, h) => sum + (h.quantity * h.currentPrice), 0);\n    return {\n      scenario: 'Market Crash',\n      shock: shockSize,\n      portfolioImpact: totalValue * shockSize,\n      impactPercent: shockSize\n    };\n  }\n\n  performInterestRateStressTest(holdings, rateShock) {\n    return {\n      scenario: 'Interest Rate Shock',\n      shock: rateShock,\n      portfolioImpact: Math.random() * 0.1 - 0.05,\n      impactPercent: Math.random() * 0.1 - 0.05\n    };\n  }\n\n  performInflationStressTest(holdings, inflationShock) {\n    return {\n      scenario: 'Inflation Shock',\n      shock: inflationShock,\n      portfolioImpact: Math.random() * 0.08 - 0.04,\n      impactPercent: Math.random() * 0.08 - 0.04\n    };\n  }\n\n  performLiquidityStressTest(holdings) {\n    return {\n      scenario: 'Liquidity Stress',\n      liquidityBuffer: Math.random() * 0.2 + 0.1,\n      timeToLiquidate: Math.random() * 10 + 5,\n      liquidationCost: Math.random() * 0.03 + 0.01\n    };\n  }\n\n  performScenarioAnalysis(holdings, scenario) {\n    const scenarios = {\n      bull: { return: 0.15, volatility: 0.12 },\n      bear: { return: -0.08, volatility: 0.25 },\n      recession: { return: -0.12, volatility: 0.30 },\n      recovery: { return: 0.20, volatility: 0.18 }\n    };\n    \n    const scenarioData = scenarios[scenario] || scenarios.bull;\n    \n    return {\n      scenario: scenario,\n      expectedReturn: scenarioData.return,\n      expectedVolatility: scenarioData.volatility,\n      probabilityOfLoss: scenario === 'bear' || scenario === 'recession' ? 0.7 : 0.3,\n      expectedDrawdown: scenario === 'bear' || scenario === 'recession' ? 0.15 : 0.05\n    };\n  }\n\n  generateRiskRecommendations(holdings, optimizationResults) {\n    const recommendations = [];\n    \n    // Concentration risk\n    const concentrationRisk = this.calculateConcentrationRisk(holdings);\n    if (concentrationRisk > 0.3) {\n      recommendations.push({\n        type: 'concentration',\n        severity: 'high',\n        description: 'Portfolio is highly concentrated. Consider diversifying across more positions.',\n        action: 'Reduce position sizes in largest holdings and add more diversified positions.'\n      });\n    }\n\n    // Risk-adjusted return\n    if (optimizationResults.sharpeRatio < 0.5) {\n      recommendations.push({\n        type: 'risk_adjusted_return',\n        severity: 'medium',\n        description: 'Portfolio has low risk-adjusted returns. Consider rebalancing.',\n        action: 'Review asset allocation and consider higher quality assets with better risk-return profiles.'\n      });\n    }\n\n    return recommendations;\n  }\n\n  createEmptyOptimizationResponse(message) {\n    return {\n      success: false,\n      message,\n      optimization: null,\n      rebalancing: [],\n      metrics: null,\n      riskAnalysis: null,\n      metadata: {\n        correlationId: this.correlationId,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n}\n\nmodule.exports = PortfolioOptimizationEngine;"],"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","ignoreList":[]}