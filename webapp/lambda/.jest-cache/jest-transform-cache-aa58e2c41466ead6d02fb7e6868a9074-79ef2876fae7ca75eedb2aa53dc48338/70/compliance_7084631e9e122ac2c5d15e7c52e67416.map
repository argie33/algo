{"version":3,"names":["cov_2eti81vrag","actualCoverage","express","s","require","router","Router","ComplianceService","complianceService","get","req","res","f","framework","params","startDate","endDate","includeDetails","b","query","supportedFrameworks","includes","toUpperCase","status","json","success","error","message","join","options","report","generateComplianceReport","data","timestamp","Date","toISOString","console","post","userId","categories","requestData","body","enhancedRequestData","ipAddress","ip","userAgent","result","handleDataSubjectAccessRequest","requestId","deliveryMethod","expiresAt","reason","handleDataDeletionRequest","deletionPlan","retainedData","consentType","purposes","consentGiven","consentMethod","undefined","consentData","Array","isArray","lawfulBasis","consentRecord","recordConsent","consentId","id","method","withdrawalData","updatedConsent","withdrawConsent","withdrawnAt","withdrawalMethod","withdrawalReason","dataType","purpose","legalBasis","dataSubjects","recipients","retentionPeriod","securityMeasures","transferDetails","automatedDecisionMaking","activity","processingRecord","recordDataProcessing","activityId","type","severity","affectedDataTypes","affectedDataSubjects","cause","containmentMeasures","riskAssessment","breachData","parseInt","breach","reportDataBreach","breachId","detectedAt","notificationRequired","urgent","applyRetentionPolicy","policyApplied","name","cutoffDate","dataMarkedForDeletion","dashboard","getComplianceDashboard","limit","action","logs","auditLogs","filter","log","start","end","sort","a","slice","sanitizedLogs","map","details","count","length","totalLogs","filters","frameworks","Object","entries","complianceFrameworks","code","testAuditLog","logAuditEvent","resource","test","testReport","now","services","auditLogging","eventCount","complianceReporting","keys","gdprCompliance","features","dataRetention","policies","dataRetentionPolicies","size","complianceScore","summary","statistics","auditEvents","consentRecords","retentionPolicies","dataProcessingActivities","breachNotifications","module","exports"],"sources":["compliance.js"],"sourcesContent":["// Compliance Routes\n// API endpoints for compliance monitoring, GDPR requests, and audit logging\n\nconst express = require('express');\nconst router = express.Router();\nconst ComplianceService = require('../services/complianceService');\n\n// Initialize compliance service\nconst complianceService = new ComplianceService();\n\n// Generate compliance report\nrouter.get('/reports/:framework', async (req, res) => {\n  try {\n    const { framework } = req.params;\n    const { startDate, endDate, includeDetails = false } = req.query;\n    \n    const supportedFrameworks = ['GDPR', 'SOX', 'PCI_DSS', 'FINRA', 'SEC'];\n    \n    if (!supportedFrameworks.includes(framework.toUpperCase())) {\n      return res.status(400).json({\n        success: false,\n        error: 'Unsupported compliance framework',\n        message: `Supported frameworks: ${supportedFrameworks.join(', ')}`\n      });\n    }\n    \n    const options = {\n      startDate,\n      endDate,\n      includeDetails: includeDetails === 'true'\n    };\n    \n    const report = complianceService.generateComplianceReport(\n      framework.toUpperCase(), \n      options\n    );\n    \n    res.json({\n      success: true,\n      data: report,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Compliance report generation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate compliance report',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Data subject access request (GDPR Article 15)\nrouter.post('/data-subject/access-request', async (req, res) => {\n  try {\n    const { userId, categories, requestData = {} } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required field',\n        message: 'userId is required'\n      });\n    }\n    \n    const enhancedRequestData = {\n      ...requestData,\n      categories,\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      timestamp: new Date().toISOString()\n    };\n    \n    const result = await complianceService.handleDataSubjectAccessRequest(\n      userId, \n      enhancedRequestData\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        requestId: result.requestId,\n        status: result.status,\n        deliveryMethod: result.deliveryMethod,\n        expiresAt: result.expiresAt,\n        message: 'Data access request processed successfully'\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Data access request failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process data access request',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Data subject deletion request (GDPR Article 17)\nrouter.post('/data-subject/deletion-request', async (req, res) => {\n  try {\n    const { userId, reason, requestData = {} } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required field',\n        message: 'userId is required'\n      });\n    }\n    \n    const enhancedRequestData = {\n      ...requestData,\n      reason,\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      timestamp: new Date().toISOString()\n    };\n    \n    const result = await complianceService.handleDataDeletionRequest(\n      userId, \n      enhancedRequestData\n    );\n    \n    res.json({\n      success: true,\n      data: {\n        requestId: result.requestId,\n        status: result.status,\n        deletionPlan: result.deletionPlan,\n        retainedData: result.retainedData,\n        message: result.status === 'processed' \n          ? 'Data deletion request processed successfully'\n          : `Data deletion request ${result.status}: ${result.reason}`\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Data deletion request failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to process data deletion request',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Record user consent\nrouter.post('/consent', async (req, res) => {\n  try {\n    const { \n      userId, \n      consentType, \n      purposes, \n      consentGiven,\n      consentMethod = 'explicit',\n      expiresAt \n    } = req.body;\n    \n    if (!userId || !consentType || !purposes || consentGiven === undefined) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'userId, consentType, purposes, and consentGiven are required'\n      });\n    }\n    \n    const consentData = {\n      userId,\n      consentType,\n      purposes: Array.isArray(purposes) ? purposes : [purposes],\n      lawfulBasis: 'Consent',\n      consentGiven,\n      consentMethod,\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      expiresAt\n    };\n    \n    const consentRecord = complianceService.recordConsent(consentData);\n    \n    res.json({\n      success: true,\n      data: {\n        consentId: consentRecord.id,\n        userId: '[REDACTED]',\n        consentType: consentRecord.consentType,\n        consentGiven: consentRecord.consentGiven,\n        purposes: consentRecord.purposes,\n        timestamp: consentRecord.timestamp\n      },\n      message: 'Consent recorded successfully',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Consent recording failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to record consent',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Withdraw consent\nrouter.post('/consent/:consentId/withdraw', async (req, res) => {\n  try {\n    const { consentId } = req.params;\n    const { reason, method = 'user_request' } = req.body;\n    \n    const withdrawalData = {\n      reason,\n      method,\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent'),\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedConsent = complianceService.withdrawConsent(consentId, withdrawalData);\n    \n    res.json({\n      success: true,\n      data: {\n        consentId,\n        withdrawnAt: updatedConsent.withdrawnAt,\n        withdrawalMethod: updatedConsent.withdrawalMethod,\n        withdrawalReason: updatedConsent.withdrawalReason\n      },\n      message: 'Consent withdrawn successfully',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Consent withdrawal failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to withdraw consent',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Record data processing activity\nrouter.post('/data-processing', async (req, res) => {\n  try {\n    const {\n      dataType,\n      purpose,\n      legalBasis,\n      dataSubjects,\n      categories,\n      recipients = [],\n      retentionPeriod,\n      securityMeasures = [],\n      transferDetails = null,\n      automatedDecisionMaking = false\n    } = req.body;\n    \n    if (!dataType || !purpose || !legalBasis || !dataSubjects) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'dataType, purpose, legalBasis, and dataSubjects are required'\n      });\n    }\n    \n    const activity = {\n      dataType,\n      purpose,\n      legalBasis,\n      dataSubjects: Array.isArray(dataSubjects) ? dataSubjects : [dataSubjects],\n      categories: Array.isArray(categories) ? categories : [categories],\n      recipients,\n      retentionPeriod,\n      securityMeasures,\n      transferDetails,\n      automatedDecisionMaking\n    };\n    \n    const processingRecord = complianceService.recordDataProcessing(activity);\n    \n    res.json({\n      success: true,\n      data: {\n        activityId: processingRecord.id,\n        dataType: processingRecord.dataType,\n        purpose: processingRecord.purpose,\n        legalBasis: processingRecord.legalBasis,\n        timestamp: processingRecord.timestamp\n      },\n      message: 'Data processing activity recorded successfully',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Data processing recording failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to record data processing activity',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Report data breach (GDPR Article 33)\nrouter.post('/data-breach', async (req, res) => {\n  try {\n    const {\n      type,\n      severity,\n      affectedDataTypes,\n      affectedDataSubjects,\n      cause,\n      containmentMeasures,\n      riskAssessment\n    } = req.body;\n    \n    if (!type || !severity || !affectedDataTypes || !affectedDataSubjects) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'type, severity, affectedDataTypes, and affectedDataSubjects are required'\n      });\n    }\n    \n    const breachData = {\n      type,\n      severity,\n      affectedDataTypes: Array.isArray(affectedDataTypes) ? affectedDataTypes : [affectedDataTypes],\n      affectedDataSubjects: parseInt(affectedDataSubjects),\n      cause,\n      containmentMeasures: Array.isArray(containmentMeasures) ? containmentMeasures : [containmentMeasures],\n      riskAssessment\n    };\n    \n    const breach = complianceService.reportDataBreach(breachData);\n    \n    res.json({\n      success: true,\n      data: {\n        breachId: breach.id,\n        detectedAt: breach.detectedAt,\n        severity: breach.severity,\n        notificationRequired: breach.notificationRequired,\n        affectedDataSubjects: breach.affectedDataSubjects\n      },\n      message: 'Data breach reported successfully',\n      urgent: breach.notificationRequired,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Data breach reporting failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to report data breach',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Apply data retention policy\nrouter.post('/retention/:dataType/apply', async (req, res) => {\n  try {\n    const { dataType } = req.params;\n    \n    const result = complianceService.applyRetentionPolicy(dataType);\n    \n    res.json({\n      success: true,\n      data: {\n        dataType,\n        policyApplied: result.policyApplied.name,\n        cutoffDate: result.cutoffDate,\n        dataMarkedForDeletion: result.dataMarkedForDeletion\n      },\n      message: 'Data retention policy applied successfully',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Retention policy application failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to apply retention policy',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get compliance dashboard\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const dashboard = complianceService.getComplianceDashboard();\n    \n    res.json({\n      success: true,\n      data: dashboard,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Compliance dashboard failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get compliance dashboard',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get audit logs (admin only)\nrouter.get('/audit-logs', async (req, res) => {\n  try {\n    const { limit = 50, userId, action, startDate, endDate } = req.query;\n    \n    let logs = [...complianceService.auditLogs];\n    \n    // Filter by user\n    if (userId) {\n      logs = logs.filter(log => log.userId === userId);\n    }\n    \n    // Filter by action\n    if (action) {\n      logs = logs.filter(log => log.action.includes(action.toUpperCase()));\n    }\n    \n    // Filter by date range\n    if (startDate) {\n      const start = new Date(startDate);\n      logs = logs.filter(log => new Date(log.timestamp) >= start);\n    }\n    \n    if (endDate) {\n      const end = new Date(endDate);\n      logs = logs.filter(log => new Date(log.timestamp) <= end);\n    }\n    \n    // Sort by most recent and limit\n    logs = logs\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\n      .slice(0, parseInt(limit));\n    \n    // Redact sensitive information\n    const sanitizedLogs = logs.map(log => ({\n      ...log,\n      userId: log.userId === 'system' ? 'system' : '[REDACTED]',\n      details: {\n        ...log.details,\n        userId: log.details.userId ? '[REDACTED]' : undefined\n      }\n    }));\n    \n    res.json({\n      success: true,\n      data: {\n        logs: sanitizedLogs,\n        count: sanitizedLogs.length,\n        totalLogs: complianceService.auditLogs.length,\n        filters: { limit, userId: userId ? '[REDACTED]' : undefined, action, startDate, endDate }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Audit logs retrieval failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve audit logs',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get supported compliance frameworks\nrouter.get('/frameworks', async (req, res) => {\n  try {\n    const frameworks = Object.entries(complianceService.complianceFrameworks).map(\n      ([code, name]) => ({ code, name })\n    );\n    \n    res.json({\n      success: true,\n      data: frameworks,\n      count: frameworks.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Frameworks retrieval failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get compliance frameworks',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check\nrouter.get('/health', async (req, res) => {\n  try {\n    // Test core compliance functions\n    const testAuditLog = complianceService.logAuditEvent({\n      action: 'HEALTH_CHECK',\n      resource: 'compliance_service',\n      details: { test: true },\n      userId: 'system'\n    });\n    \n    const testReport = complianceService.generateComplianceReport('GDPR', {\n      startDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      endDate: new Date().toISOString()\n    });\n    \n    const dashboard = complianceService.getComplianceDashboard();\n    \n    res.json({\n      success: true,\n      message: 'Compliance services operational',\n      services: {\n        auditLogging: {\n          status: testAuditLog ? 'operational' : 'error',\n          eventCount: complianceService.auditLogs.length\n        },\n        complianceReporting: {\n          status: testReport ? 'operational' : 'error',\n          frameworks: Object.keys(complianceService.complianceFrameworks).length\n        },\n        gdprCompliance: {\n          status: 'operational',\n          features: ['data access requests', 'data deletion', 'consent management', 'breach reporting']\n        },\n        dataRetention: {\n          status: 'operational',\n          policies: complianceService.dataRetentionPolicies.size\n        },\n        dashboard: {\n          status: dashboard ? 'operational' : 'error',\n          complianceScore: dashboard.summary.complianceScore\n        }\n      },\n      statistics: {\n        auditEvents: complianceService.auditLogs.length,\n        consentRecords: complianceService.consentRecords.size,\n        retentionPolicies: complianceService.dataRetentionPolicies.size,\n        dataProcessingActivities: complianceService.dataProcessingActivities.length,\n        breachNotifications: complianceService.breachNotifications.length\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Compliance health check failed:', error);\n    res.status(503).json({\n      success: false,\n      error: 'Compliance services unhealthy',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}