{"version":3,"names":["cov_1ugyrthvvt","actualCoverage","logError","generateCorrelationId","s","require","errorHandler","err","req","res","next","f","requestId","b","logger","headers","error","url","method","user_id","user","sub","error_type","constructor","name","header","status","message","details","code","response","timestamp","Date","toISOString","path","request_id","process","env","NODE_ENV","type","setHeader","console","log","json","module","exports"],"sources":["errorHandler.js"],"sourcesContent":["const { logError, generateCorrelationId } = require('../utils/logger');\n\nconst errorHandler = (err, req, res, next) => {\n  // Get or generate correlation ID\n  const requestId = req.logger?.requestId || \n                   req.headers['x-request-id'] || \n                   req.headers['x-correlation-id'] || \n                   generateCorrelationId();\n  \n  // Use enhanced logging if available\n  if (req.logger) {\n    req.logger.error('Unhandled error occurred', {\n      error: err,\n      url: req.url,\n      method: req.method,\n      user_id: req.user?.sub,\n      error_type: err.constructor.name\n    });\n  } else {\n    // Fallback to utility function\n    logError(err, {\n      url: req.url,\n      method: req.method,\n      user_id: req.user?.sub,\n      error_type: err.constructor.name\n    }, requestId);\n  }\n\n  // CRITICAL: Set CORS headers immediately to prevent CORS errors\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, X-Session-ID, Accept, Origin, Cache-Control, Pragma');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  res.header('Access-Control-Max-Age', '86400');\n  res.header('Access-Control-Expose-Headers', 'Content-Length, Content-Type, X-Request-ID');\n\n  // Default error response\n  let status = 500;\n  let message = 'Internal Server Error';\n  let details = null;\n\n  // Handle specific error types\n  if (err.name === 'ValidationError') {\n    status = 400;\n    message = 'Validation Error';\n    details = err.message;\n  } else if (err.code === '23505') { // PostgreSQL unique violation\n    status = 409;\n    message = 'Duplicate entry';\n    details = 'A record with this information already exists';\n  } else if (err.code === '23503') { // PostgreSQL foreign key violation\n    status = 400;\n    message = 'Invalid reference';\n    details = 'Referenced record does not exist';\n  } else if (err.code === '42P01') { // PostgreSQL table does not exist\n    status = 500;\n    message = 'Database configuration error';\n    details = 'Required database table not found';\n  } else if (err.message) {\n    // If we have a custom error message, use it\n    if (err.status) status = err.status;\n    message = err.message;\n  }\n\n  const response = {\n    error: {\n      status,\n      message,\n      timestamp: new Date().toISOString(),\n      path: req.url,\n      request_id: requestId\n    }\n  };\n\n  // Add details in development mode\n  if (process.env.NODE_ENV === 'development' && details) {\n    response.error.details = details;\n  }\n  \n  // Add error code and type for better debugging\n  if (err.code) {\n    response.error.code = err.code;\n  }\n  if (err.constructor.name !== 'Error') {\n    response.error.type = err.constructor.name;\n  }\n  \n  // Set correlation ID in response header\n  res.setHeader('X-Correlation-ID', requestId);\n\n  console.log(`ðŸš¨ Error handler sending response with CORS headers: ${status} ${message}`);\n  res.status(status).json(response);\n};\n\nmodule.exports = errorHandler;\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE,QAAQ;EAAEC;AAAsB,CAAC;AAAA;AAAA,CAAAH,cAAA,GAAAI,CAAA,OAAGC,OAAO,CAAC,iBAAiB,CAAC;AAAC;AAAAL,cAAA,GAAAI,CAAA;AAEvE,MAAME,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAV,cAAA,GAAAW,CAAA;EAC5C;EACA,MAAMC,SAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAI,CAAA;EAAG;EAAA,CAAAJ,cAAA,GAAAa,CAAA,UAAAL,GAAG,CAACM,MAAM,EAAEF,SAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAa,CAAA,UACtBL,GAAG,CAACO,OAAO,CAAC,cAAc,CAAC;EAAA;EAAA,CAAAf,cAAA,GAAAa,CAAA,UAC3BL,GAAG,CAACO,OAAO,CAAC,kBAAkB,CAAC;EAAA;EAAA,CAAAf,cAAA,GAAAa,CAAA,UAC/BV,qBAAqB,CAAC,CAAC;;EAExC;EAAA;EAAAH,cAAA,GAAAI,CAAA;EACA,IAAII,GAAG,CAACM,MAAM,EAAE;IAAA;IAAAd,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACdI,GAAG,CAACM,MAAM,CAACE,KAAK,CAAC,0BAA0B,EAAE;MAC3CA,KAAK,EAAET,GAAG;MACVU,GAAG,EAAET,GAAG,CAACS,GAAG;MACZC,MAAM,EAAEV,GAAG,CAACU,MAAM;MAClBC,OAAO,EAAEX,GAAG,CAACY,IAAI,EAAEC,GAAG;MACtBC,UAAU,EAAEf,GAAG,CAACgB,WAAW,CAACC;IAC9B,CAAC,CAAC;EACJ,CAAC,MAAM;IAAA;IAAAxB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACL;IACAF,QAAQ,CAACK,GAAG,EAAE;MACZU,GAAG,EAAET,GAAG,CAACS,GAAG;MACZC,MAAM,EAAEV,GAAG,CAACU,MAAM;MAClBC,OAAO,EAAEX,GAAG,CAACY,IAAI,EAAEC,GAAG;MACtBC,UAAU,EAAEf,GAAG,CAACgB,WAAW,CAACC;IAC9B,CAAC,EAAEZ,SAAS,CAAC;EACf;;EAEA;EAAA;EAAAZ,cAAA,GAAAI,CAAA;EACAK,GAAG,CAACgB,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;EAAC;EAAAzB,cAAA,GAAAI,CAAA;EAC/CK,GAAG,CAACgB,MAAM,CAAC,8BAA8B,EAAE,8CAA8C,CAAC;EAAC;EAAAzB,cAAA,GAAAI,CAAA;EAC3FK,GAAG,CAACgB,MAAM,CAAC,8BAA8B,EAAE,oGAAoG,CAAC;EAAC;EAAAzB,cAAA,GAAAI,CAAA;EACjJK,GAAG,CAACgB,MAAM,CAAC,kCAAkC,EAAE,MAAM,CAAC;EAAC;EAAAzB,cAAA,GAAAI,CAAA;EACvDK,GAAG,CAACgB,MAAM,CAAC,wBAAwB,EAAE,OAAO,CAAC;EAAC;EAAAzB,cAAA,GAAAI,CAAA;EAC9CK,GAAG,CAACgB,MAAM,CAAC,+BAA+B,EAAE,4CAA4C,CAAC;;EAEzF;EACA,IAAIC,MAAM;EAAA;EAAA,CAAA1B,cAAA,GAAAI,CAAA,QAAG,GAAG;EAChB,IAAIuB,OAAO;EAAA;EAAA,CAAA3B,cAAA,GAAAI,CAAA,QAAG,uBAAuB;EACrC,IAAIwB,OAAO;EAAA;EAAA,CAAA5B,cAAA,GAAAI,CAAA,QAAG,IAAI;;EAElB;EAAA;EAAAJ,cAAA,GAAAI,CAAA;EACA,IAAIG,GAAG,CAACiB,IAAI,KAAK,iBAAiB,EAAE;IAAA;IAAAxB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAClCsB,MAAM,GAAG,GAAG;IAAC;IAAA1B,cAAA,GAAAI,CAAA;IACbuB,OAAO,GAAG,kBAAkB;IAAC;IAAA3B,cAAA,GAAAI,CAAA;IAC7BwB,OAAO,GAAGrB,GAAG,CAACoB,OAAO;EACvB,CAAC,MAAM;IAAA;IAAA3B,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAAA,IAAIG,GAAG,CAACsB,IAAI,KAAK,OAAO,EAAE;MAAA;MAAA7B,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAI,CAAA;MAAE;MACjCsB,MAAM,GAAG,GAAG;MAAC;MAAA1B,cAAA,GAAAI,CAAA;MACbuB,OAAO,GAAG,iBAAiB;MAAC;MAAA3B,cAAA,GAAAI,CAAA;MAC5BwB,OAAO,GAAG,+CAA+C;IAC3D,CAAC,MAAM;MAAA;MAAA5B,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAI,CAAA;MAAA,IAAIG,GAAG,CAACsB,IAAI,KAAK,OAAO,EAAE;QAAA;QAAA7B,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAI,CAAA;QAAE;QACjCsB,MAAM,GAAG,GAAG;QAAC;QAAA1B,cAAA,GAAAI,CAAA;QACbuB,OAAO,GAAG,mBAAmB;QAAC;QAAA3B,cAAA,GAAAI,CAAA;QAC9BwB,OAAO,GAAG,kCAAkC;MAC9C,CAAC,MAAM;QAAA;QAAA5B,cAAA,GAAAa,CAAA;QAAAb,cAAA,GAAAI,CAAA;QAAA,IAAIG,GAAG,CAACsB,IAAI,KAAK,OAAO,EAAE;UAAA;UAAA7B,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAI,CAAA;UAAE;UACjCsB,MAAM,GAAG,GAAG;UAAC;UAAA1B,cAAA,GAAAI,CAAA;UACbuB,OAAO,GAAG,8BAA8B;UAAC;UAAA3B,cAAA,GAAAI,CAAA;UACzCwB,OAAO,GAAG,mCAAmC;QAC/C,CAAC,MAAM;UAAA;UAAA5B,cAAA,GAAAa,CAAA;UAAAb,cAAA,GAAAI,CAAA;UAAA,IAAIG,GAAG,CAACoB,OAAO,EAAE;YAAA;YAAA3B,cAAA,GAAAa,CAAA;YAAAb,cAAA,GAAAI,CAAA;YACtB;YACA,IAAIG,GAAG,CAACmB,MAAM,EAAE;cAAA;cAAA1B,cAAA,GAAAa,CAAA;cAAAb,cAAA,GAAAI,CAAA;cAAAsB,MAAM,GAAGnB,GAAG,CAACmB,MAAM;YAAA,CAAC;YAAA;YAAA;cAAA1B,cAAA,GAAAa,CAAA;YAAA;YAAAb,cAAA,GAAAI,CAAA;YACpCuB,OAAO,GAAGpB,GAAG,CAACoB,OAAO;UACvB,CAAC;UAAA;UAAA;YAAA3B,cAAA,GAAAa,CAAA;UAAA;QAAD;MAAA;IAAA;EAAA;EAEA,MAAMiB,QAAQ;EAAA;EAAA,CAAA9B,cAAA,GAAAI,CAAA,QAAG;IACfY,KAAK,EAAE;MACLU,MAAM;MACNC,OAAO;MACPI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,IAAI,EAAE1B,GAAG,CAACS,GAAG;MACbkB,UAAU,EAAEvB;IACd;EACF,CAAC;;EAED;EAAA;EAAAZ,cAAA,GAAAI,CAAA;EACA;EAAI;EAAA,CAAAJ,cAAA,GAAAa,CAAA,UAAAuB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;EAAA;EAAA,CAAAtC,cAAA,GAAAa,CAAA,UAAIe,OAAO,GAAE;IAAA;IAAA5B,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACrD0B,QAAQ,CAACd,KAAK,CAACY,OAAO,GAAGA,OAAO;EAClC,CAAC;EAAA;EAAA;IAAA5B,cAAA,GAAAa,CAAA;EAAA;;EAED;EAAAb,cAAA,GAAAI,CAAA;EACA,IAAIG,GAAG,CAACsB,IAAI,EAAE;IAAA;IAAA7B,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACZ0B,QAAQ,CAACd,KAAK,CAACa,IAAI,GAAGtB,GAAG,CAACsB,IAAI;EAChC,CAAC;EAAA;EAAA;IAAA7B,cAAA,GAAAa,CAAA;EAAA;EAAAb,cAAA,GAAAI,CAAA;EACD,IAAIG,GAAG,CAACgB,WAAW,CAACC,IAAI,KAAK,OAAO,EAAE;IAAA;IAAAxB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACpC0B,QAAQ,CAACd,KAAK,CAACuB,IAAI,GAAGhC,GAAG,CAACgB,WAAW,CAACC,IAAI;EAC5C,CAAC;EAAA;EAAA;IAAAxB,cAAA,GAAAa,CAAA;EAAA;;EAED;EAAAb,cAAA,GAAAI,CAAA;EACAK,GAAG,CAAC+B,SAAS,CAAC,kBAAkB,EAAE5B,SAAS,CAAC;EAAC;EAAAZ,cAAA,GAAAI,CAAA;EAE7CqC,OAAO,CAACC,GAAG,CAAC,wDAAwDhB,MAAM,IAAIC,OAAO,EAAE,CAAC;EAAC;EAAA3B,cAAA,GAAAI,CAAA;EACzFK,GAAG,CAACiB,MAAM,CAACA,MAAM,CAAC,CAACiB,IAAI,CAACb,QAAQ,CAAC;AACnC,CAAC;AAAC;AAAA9B,cAAA,GAAAI,CAAA;AAEFwC,MAAM,CAACC,OAAO,GAAGvC,YAAY","ignoreList":[]}