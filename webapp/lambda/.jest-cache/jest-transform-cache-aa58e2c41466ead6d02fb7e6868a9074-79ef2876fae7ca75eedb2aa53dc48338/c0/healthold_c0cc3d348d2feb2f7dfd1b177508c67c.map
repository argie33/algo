{"version":3,"names":["cov_6e7x3lu8z","actualCoverage","express","s","require","query","initializeDatabase","getPool","healthCheck","router","Router","get","req","res","f","quick","b","json","status","healthy","service","timestamp","Date","toISOString","environment","process","env","ENVIRONMENT","memory","memoryUsage","uptime","note","database","api","version","config","hasDbSecret","DB_SECRET_ARN","hasDbEndpoint","DB_ENDPOINT","hasAwsRegion","AWS_REGION","console","log","initError","dbInitError","error","message","lastAttempt","tables","dbError","dbStart","now","result","AWS_LAMBDA_FUNCTION_NAME","AWS_LAMBDA_VPC_SUBNET_IDS","AWS_LAMBDA_VPC_SECURITY_GROUP_IDS","SecretsManagerClient","GetSecretValueCommand","secretsManager","region","secretResult","send","SecretId","dbConfig","JSON","parse","SecretString","host","port","dbname","username","dns","promisify","lookup","dnsResult","address","family","dnsError","net","testNetworkConnectivity","Promise","resolve","reject","socket","Socket","timeout","setTimeout","destroy","Error","connect","clearTimeout","on","err","netError","secretError","race","_","includes","code","errorCode","networkDiagnostics","lambdaVpcSubnets","lambdaSecurityGroups","dbEndpoint","tableError","stack","dbTime","existingTables","tableExistenceCheck","rows","map","row","table_name","length","listError","priorityTables","tablesToCheck","Set","filter","t","batchSize","i","batch","slice","batchPromises","tableName","SecureQueryBuilder","queryBuilder","allowedTables","has","toLowerCase","countQuery","params","buildSelect","table","columns","limit","count","parseInt","catch","batchResults","all","forEach","successfulTables","Object","entries","k","v","errorTables","total_tables","tables_checked","successful_checks","failed_checks","total_records","reduce","sum","priority_tables_status","undefined","filteredTables","health","NODE_ENV","healthLevel","level","basicHealth","startTime","pool","response_time_ms","connection_pool","total_connections","totalCount","active_connections","idleCount","idle_connections","waiting_clients","waitingCount","connError","criticalHealth","criticalTables","criticalResults","selectQuery","failedCritical","values","r","tables_healthy","tables_failed","results","criticalError","overallHealthy","critical_tables","fullHealth","tableCountResult","fullError","full_analysis","connection","currentTime","current_time","postgresVersion","postgres_version","diagnostics","fatalInitError","WEBAPP_AWS_REGION","IS_LOCAL","RUNTIME","method","details","durationMs","name","schemas","total","withData","list","errors","recommendations","overallStatus","connectionTest","connectStart","connectedAt","db_name","push","step","summary","tablesWithData","concat","hostInfo","e","schema_name","tableStart","tablesResult","warn","countParams","recordCount","record_count","lastUpdate","tsCol","col","column_name","maxQuery","maxParams","tsRes","last_update","ok","post","monitoredTables","category","critical","frequency","createError","healthResults","healthy_tables","stale_tables","empty_tables","error_tables","missing_tables","total_missing_data","rowCount","tableRow","tableStatus","lastUpdated","errorMsg","isStale","countResult","tableData","records","recordQuery","recordParams","recordResult","timestampColumns","foundTimestamp","colCheck","tsQuery","tsParams","tsResult","tsError","expected_update_frequency","expectedInterval","staleThreshold","hoursSinceUpdate","expectedHours","recordError","checkError","updateError","last_updated","overallError","duration","duration_ms","summaryResult","overallSummary","overall","by_category","debugInfo","AWS_LAMBDA_FUNCTION_VERSION","AWS_EXECUTION_ENV","lambda","inLambda","AWS_LAMBDA_RUNTIME_API","vpcEnabled","_LAMBDA_SERVER_PORT","hasSecretArn","hasEndpoint","secretArn","substring","endpoint","networkTest","dbHealth","databaseHealth","networking","lambdaRuntimeApi","vpcConfig","executionEnv","debug","module","exports"],"sources":["health-old.js"],"sourcesContent":["const express = require('express');\nconst { query, initializeDatabase, getPool, healthCheck } = require('../utils/database');\n\nconst router = express.Router();\n\n// Health check endpoint\nrouter.get('/', async (req, res) => {\n  try {\n    // Basic health check without database (for quick status)\n    if (req.query.quick === 'true') {\n      return res.json({\n        status: 'healthy',\n        healthy: true,\n        service: 'Financial Dashboard API',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || 'dev',\n        memory: process.memoryUsage(),\n        uptime: process.uptime(),\n        note: 'Quick health check - database not tested',\n        database: { status: 'not_tested' },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        config: {\n          hasDbSecret: !!process.env.DB_SECRET_ARN,\n          hasDbEndpoint: !!process.env.DB_ENDPOINT,\n          hasAwsRegion: !!process.env.AWS_REGION\n        }\n      });\n    }\n    // Full health check with database\n    console.log('Starting health check with database...');\n    // Initialize database if not already done\n    try {\n      getPool(); // This will throw if not initialized\n    } catch (initError) {\n      console.log('Database not initialized, initializing now...');\n      try {\n        await initializeDatabase();\n      } catch (dbInitError) {\n        console.error('Failed to initialize database:', dbInitError.message);\n        return res.status(503).json({\n          status: 'unhealthy',\n          healthy: false,\n          service: 'Financial Dashboard API',\n          timestamp: new Date().toISOString(),\n          environment: process.env.ENVIRONMENT || 'dev',\n          database: {\n            status: 'initialization_failed',\n            error: dbInitError.message,\n            lastAttempt: new Date().toISOString(),\n            tables: {}\n          },\n          api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n          memory: process.memoryUsage(),\n          uptime: process.uptime()\n        });\n      }\n    }\n    // Check if database error was passed from middleware\n    if (req.dbError) {\n      return res.status(503).json({\n        status: 'unhealthy',\n        healthy: false,\n        service: 'Financial Dashboard API',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: {\n          status: 'unavailable',\n          error: req.dbError.message,\n          lastAttempt: new Date().toISOString(),\n          tables: {}\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    }\n    // Test database connection with timeout and detailed error reporting\n    const dbStart = Date.now();\n    let result;\n    \n    // Enhanced logging for network debugging\n    console.log('🔍 HEALTH CHECK - Lambda Network Diagnostics:');\n    console.log('  Lambda Function:', process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown');\n    console.log('  Lambda Region:', process.env.AWS_REGION || 'unknown');\n    console.log('  VPC Subnets:', process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured');\n    console.log('  Security Groups:', process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured');\n    console.log('  DB Endpoint:', process.env.DB_ENDPOINT || 'not set');\n    console.log('  DB Secret ARN:', process.env.DB_SECRET_ARN ? '[CONFIGURED]' : 'not set');\n    \n    try {\n      // Get database credentials for connectivity logging\n      const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n      const secretsManager = new SecretsManagerClient({ region: process.env.AWS_REGION || 'us-east-1' });\n      \n      if (process.env.DB_SECRET_ARN) {\n        try {\n          const secretResult = await secretsManager.send(new GetSecretValueCommand({ \n            SecretId: process.env.DB_SECRET_ARN \n          }));\n          const dbConfig = JSON.parse(secretResult.SecretString);\n          console.log('🔍 DATABASE CONNECTION TARGET:');\n          console.log('  DB Host:', dbConfig.host || 'unknown');\n          console.log('  DB Port:', dbConfig.port || 'unknown');\n          console.log('  DB Name:', dbConfig.dbname || 'unknown');\n          console.log('  DB User:', dbConfig.username || 'unknown');\n          \n          // Test DNS resolution for network debugging\n          const dns = require('dns');\n          const { promisify } = require('util');\n          const lookup = promisify(dns.lookup);\n          \n          try {\n            const dnsResult = await lookup(dbConfig.host);\n            console.log('🔍 DNS RESOLUTION:');\n            console.log('  Resolved IP:', dnsResult.address);\n            console.log('  IP Family:', dnsResult.family === 4 ? 'IPv4' : 'IPv6');\n          } catch (dnsError) {\n            console.log('❌ DNS RESOLUTION FAILED:', dnsError.message);\n          }\n          \n          // Test basic network connectivity\n          const net = require('net');\n          const testNetworkConnectivity = () => {\n            return new Promise((resolve, reject) => {\n              const socket = new net.Socket();\n              const timeout = setTimeout(() => {\n                socket.destroy();\n                reject(new Error('Network connectivity test timeout (3s)'));\n              }, 3000);\n              \n              socket.connect(dbConfig.port, dbConfig.host, () => {\n                clearTimeout(timeout);\n                socket.destroy();\n                resolve(true);\n              });\n              \n              socket.on('error', (err) => {\n                clearTimeout(timeout);\n                reject(err);\n              });\n            });\n          };\n          \n          try {\n            await testNetworkConnectivity();\n            console.log('✅ NETWORK CONNECTIVITY: Lambda can reach database host:port');\n          } catch (netError) {\n            console.log('❌ NETWORK CONNECTIVITY FAILED:', netError.message);\n            console.log('   This indicates Lambda subnet cannot reach database subnet');\n            console.log('   Check: VPC routing, security groups, NACLs');\n          }\n          \n        } catch (secretError) {\n          console.log('❌ SECRETS MANAGER ACCESS FAILED:', secretError.message);\n        }\n      }\n      \n      result = await Promise.race([\n        query('SELECT 1 as ok'),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Database health check timeout')), 5000))\n      ]);\n      console.log('✅ DATABASE QUERY: Basic query successful');\n      \n    } catch (dbError) {\n      // Enhanced error logging for network debugging\n      console.error('❌ DATABASE HEALTH CHECK FAILED:', dbError.message);\n      console.log('🔍 ERROR ANALYSIS:');\n      \n      if (dbError.message.includes('timeout')) {\n        console.log('  → Database connection timeout - likely network/VPC issue');\n        console.log('  → Check: Lambda VPC config, security groups, routing tables');\n      } else if (dbError.message.includes('ECONNREFUSED')) {\n        console.log('  → Connection refused - database not listening or network blocked');\n        console.log('  → Check: Database status, security group rules, port configuration');\n      } else if (dbError.message.includes('ENOTFOUND') || dbError.message.includes('EHOSTUNREACH')) {\n        console.log('  → Host unreachable - DNS or routing issue');\n        console.log('  → Check: VPC DNS settings, route tables, subnet configuration');\n      } else if (dbError.message.includes('authentication')) {\n        console.log('  → Authentication failed - credential issue');\n        console.log('  → Check: Database user permissions, password correctness');\n      } else {\n        console.log('  → Unexpected error type:', dbError.code || 'unknown');\n      }\n      \n      return res.status(503).json({\n        status: 'unhealthy',\n        healthy: false,\n        service: 'Financial Dashboard API',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: {\n          status: 'disconnected',\n          error: dbError.message,\n          errorCode: dbError.code,\n          lastAttempt: new Date().toISOString(),\n          tables: {},\n          networkDiagnostics: {\n            lambdaVpcSubnets: process.env.AWS_LAMBDA_VPC_SUBNET_IDS || 'not configured',\n            lambdaSecurityGroups: process.env.AWS_LAMBDA_VPC_SECURITY_GROUP_IDS || 'not configured',\n            dbEndpoint: process.env.DB_ENDPOINT || 'not set',\n            hasDbSecret: !!process.env.DB_SECRET_ARN\n          }\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    }\n    // Additional: test a real table if DB connection works\n    try {\n      await query('SELECT COUNT(*) FROM stock_symbols');\n    } catch (tableError) {\n      console.error('Table query failed:', tableError);\n      return res.status(503).json({\n        status: 'unhealthy',\n        healthy: false,\n        service: 'Financial Dashboard API',\n        timestamp: new Date().toISOString(),\n        environment: process.env.ENVIRONMENT || 'dev',\n        database: {\n          status: 'connected_but_table_error',\n          error: tableError.message,\n          stack: tableError.stack,\n          lastAttempt: new Date().toISOString(),\n          tables: {}\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      });\n    }\n    const dbTime = Date.now() - dbStart;\n    // Get table information with individual timeouts for partial results\n    let tables = {};\n    let existingTables = [];\n    \n    // First, try to get list of all tables\n    try {\n      const tableExistenceCheck = await Promise.race([\n        query(`\n          SELECT table_name \n          FROM information_schema.tables \n          WHERE table_schema = 'public' \n          ORDER BY table_name\n        `),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Table list timeout')), 2000))\n      ]);\n      existingTables = tableExistenceCheck.rows.map(row => row.table_name);\n      console.log(`Found ${existingTables.length} tables in database`);\n    } catch (listError) {\n      console.error('Failed to get table list:', listError.message);\n      tables['_error'] = `Failed to list tables: ${listError.message}`;\n    }\n    \n    // Define priority tables to check\n    const priorityTables = [\n      'stock_symbols', 'etf_symbols', 'price_daily', 'price_weekly', \n      'technical_data_daily', 'portfolio_holdings', 'health_status',\n      'company_profile', 'market_data', 'key_metrics', 'annual_income_statement',\n      'quarterly_income_statement', 'fear_greed_index', 'economic_data'\n    ];\n    \n    // Check each table individually to get partial results\n    const tablesToCheck = existingTables.length > 0 ? \n      [...new Set([...priorityTables.filter(t => existingTables.includes(t)), ...existingTables])] :\n      priorityTables;\n    \n    // Process tables in batches to avoid overwhelming the DB\n    const batchSize = 5;\n    for (let i = 0; i < tablesToCheck.length; i += batchSize) {\n      const batch = tablesToCheck.slice(i, i + batchSize);\n      const batchPromises = batch.map(tableName => {\n        return Promise.race([\n          (async () => {\n            // Validate table name against whitelist for security\n            const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n            const queryBuilder = new SecureQueryBuilder();\n            \n            if (!queryBuilder.allowedTables.has(tableName.toLowerCase())) {\n              throw new Error('Unauthorized table access');\n            }\n            \n            // Use secure query builder\n            const { query: countQuery, params } = queryBuilder.buildSelect({\n              table: tableName,\n              columns: ['COUNT(*) as count'],\n              limit: 1\n            });\n            \n            const result = await query(countQuery, params);\n            return {\n              table: tableName,\n              count: parseInt(result.rows[0].count),\n              status: 'success'\n            };\n          })()\n            .catch(err => ({\n              table: tableName,\n              count: null,\n              status: 'error',\n              error: err.message.includes('does not exist') ? 'Table does not exist' : \n                     err.message.includes('Unauthorized') ? 'Unauthorized table access' : err.message\n            })),\n          new Promise((resolve) => setTimeout(() => resolve({\n            table: tableName,\n            count: null,\n            status: 'timeout',\n            error: 'Query timeout (1s)'\n          }), 1000))\n        ]);\n      });\n      \n      const batchResults = await Promise.all(batchPromises);\n      batchResults.forEach(result => {\n        if (result.status === 'success') {\n          tables[result.table] = result.count;\n        } else {\n          tables[result.table] = `${result.status}: ${result.error}`;\n        }\n      });\n    }\n    \n    // Add comprehensive summary\n    const successfulTables = Object.entries(tables).filter(([k, v]) => typeof v === 'number' && k !== '_summary' && k !== '_error');\n    const errorTables = Object.entries(tables).filter(([k, v]) => typeof v === 'string' && k !== '_summary' && k !== '_error');\n    \n    tables['_summary'] = {\n      total_tables: existingTables.length || tablesToCheck.length,\n      tables_checked: tablesToCheck.length,\n      successful_checks: successfulTables.length,\n      failed_checks: errorTables.length,\n      total_records: successfulTables.reduce((sum, [, count]) => sum + count, 0),\n      priority_tables_status: priorityTables.map(t => ({\n        table: t,\n        status: tables[t] !== undefined ? (typeof tables[t] === 'number' ? 'ok' : 'error') : 'not_checked'\n      }))\n    };\n    \n    // Show all tables instead of filtering\n    const filteredTables = tables;\n    \n    const health = {\n      status: 'healthy',\n      healthy: true,\n      timestamp: new Date().toISOString(),\n      database: {\n        status: 'connected',\n        tables: filteredTables\n      },\n      api: {\n        version: '1.0.0',\n        environment: process.env.NODE_ENV || 'development'\n      },\n      memory: process.memoryUsage(),\n      uptime: process.uptime()\n    };\n    res.json(health);\n  } catch (error) {\n    console.error('Health check failed:', error);\n    res.status(503).json({\n      status: 'unhealthy',\n      healthy: false,\n      timestamp: new Date().toISOString(),\n      error: error.message,\n      database: {\n        status: 'disconnected',\n        tables: {}\n      },\n      api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' },\n      memory: process.memoryUsage(),\n      uptime: process.uptime()\n    });\n  }\n});\n\n// Simple database test endpoint \nrouter.get('/database', async (req, res) => {\n  console.log('Received request for /health/database');\n  try {\n    // Multi-tier health check approach\n    const healthLevel = req.query.level || 'basic'; // basic, critical, full\n    \n    // Tier 1: Basic connectivity (always run, <2s)\n    let basicHealth;\n    try {\n      const startTime = Date.now();\n      await Promise.race([\n        query('SELECT current_timestamp as server_time, version() as version'),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Connection timeout')), 2000))\n      ]);\n      \n      // Check connection pool health\n      const pool = getPool();\n      basicHealth = {\n        status: 'connected',\n        response_time_ms: Date.now() - startTime,\n        connection_pool: {\n          total_connections: pool.totalCount,\n          active_connections: pool.totalCount - pool.idleCount,\n          idle_connections: pool.idleCount,\n          waiting_clients: pool.waitingCount\n        }\n      };\n    } catch (connError) {\n      console.error('Database connection failed:', connError.message);\n      return res.status(503).json({\n        status: 'unhealthy',\n        healthy: false,\n        timestamp: new Date().toISOString(),\n        database: {\n          status: 'disconnected',\n          error: connError.message,\n          level: 'basic',\n          response_time_ms: 2000\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n      });\n    }\n    \n    // Return immediately for basic health check\n    if (healthLevel === 'basic') {\n      return res.json({\n        status: 'ok',\n        healthy: true,\n        timestamp: new Date().toISOString(),\n        level: 'basic',\n        database: basicHealth,\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n      });\n    }\n    \n    // Tier 2: Critical tables check (if requested, <5s total)\n    let criticalHealth = {};\n    if (healthLevel === 'critical' || healthLevel === 'full') {\n      const criticalTables = ['stock_symbols', 'price_daily', 'portfolio_holdings'];\n      const criticalResults = {};\n      \n      try {\n        for (const table of criticalTables) {\n          const startTime = Date.now();\n          try {\n            // Fast existence check only\n            // Validate table name for security\n            const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n            const queryBuilder = new SecureQueryBuilder();\n            \n            if (!queryBuilder.allowedTables.has(table.toLowerCase())) {\n              throw new Error('Unauthorized table access');\n            }\n            \n            const { query: selectQuery, params } = queryBuilder.buildSelect({\n              table: table,\n              columns: ['1'],\n              limit: 1\n            });\n            \n            const result = await Promise.race([\n              query(selectQuery, params),\n              new Promise((_, reject) => setTimeout(() => reject(new Error('Table timeout')), 1000))\n            ]);\n            \n            criticalResults[table] = {\n              status: 'accessible',\n              response_time_ms: Date.now() - startTime\n            };\n          } catch (tableError) {\n            criticalResults[table] = {\n              status: 'error',\n              error: tableError.message,\n              response_time_ms: Date.now() - startTime\n            };\n          }\n        }\n        \n        const failedCritical = Object.values(criticalResults).filter(r => r.status === 'error').length;\n        criticalHealth = {\n          tables_checked: criticalTables.length,\n          tables_healthy: criticalTables.length - failedCritical,\n          tables_failed: failedCritical,\n          results: criticalResults\n        };\n        \n      } catch (criticalError) {\n        criticalHealth = { error: criticalError.message };\n      }\n    }\n    \n    // Return critical level health check\n    if (healthLevel === 'critical') {\n      const overallHealthy = criticalHealth.tables_failed === 0;\n      \n      return res.json({\n        status: overallHealthy ? 'ok' : 'degraded',\n        healthy: overallHealthy,\n        timestamp: new Date().toISOString(),\n        level: 'critical',\n        database: {\n          ...basicHealth,\n          critical_tables: criticalHealth\n        },\n        api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n      });\n    }\n    \n    // Tier 3: Full health check (only if explicitly requested)\n    let fullHealth = {};\n    if (healthLevel === 'full') {\n      try {\n        const tableCountResult = await Promise.race([\n          query(`SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'public'`),\n          new Promise((_, reject) => setTimeout(() => reject(new Error('Table count timeout')), 2000))\n        ]);\n        \n        fullHealth = {\n          total_tables: parseInt(tableCountResult.rows[0].count),\n          message: 'Full table analysis available via /health/update-status'\n        };\n        \n      } catch (fullError) {\n        fullHealth = { error: fullError.message };\n      }\n    }\n    \n    // Return full health check\n    const overallHealthy = (criticalHealth.tables_failed || 0) === 0;\n    \n    return res.json({\n      status: overallHealthy ? 'ok' : 'degraded', \n      healthy: overallHealthy,\n      timestamp: new Date().toISOString(),\n      level: healthLevel,\n      database: {\n        ...basicHealth,\n        critical_tables: criticalHealth,\n        full_analysis: fullHealth\n      },\n      api: { version: '1.0.0', environment: process.env.ENVIRONMENT || 'dev' }\n    });\n    \n  } catch (error) {\n    console.error('Error in database health check:', error);\n    res.status(500).json({\n      status: 'error',\n      error: 'Health check failed',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Test database connection\nrouter.get('/test-connection', async (req, res) => {\n  try {\n    const result = await query('SELECT NOW() as current_time, version() as postgres_version');\n    \n    res.json({\n      status: 'ok',\n      connection: 'successful',\n      currentTime: result.rows[0].current_time,\n      postgresVersion: result.rows[0].postgres_version,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error testing database connection:', error);\n    res.status(500).json({ \n      status: 'error',\n      connection: 'failed',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Enhanced comprehensive database diagnostics endpoint\nrouter.get('/database/diagnostics', async (req, res) => {\n  console.log('Received request for /health/database/diagnostics');\n  // Ensure DB pool is initialized (like in /stocks and main health check)\n  try {\n    try {\n      getPool(); // Throws if not initialized\n    } catch (initError) {\n      console.log('Diagnostics: DB not initialized, initializing now...');\n      try {\n        await initializeDatabase();\n      } catch (dbInitError) {\n        console.error('Diagnostics: Failed to initialize database:', dbInitError.message);\n        return res.status(503).json({\n          status: 'error',\n          diagnostics: { connection: { status: 'initialization_failed', error: dbInitError.message } },\n          message: 'Failed to initialize database connection',\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n    // Now proceed with diagnostics as before\n  } catch (fatalInitError) {\n    return res.status(503).json({\n      status: 'error',\n      diagnostics: { connection: { status: 'fatal_init_error', error: fatalInitError.message } },\n      message: 'Fatal error initializing database connection',\n      timestamp: new Date().toISOString()\n    });\n  }\n  const diagnostics = {\n    timestamp: new Date().toISOString(),\n    environment: {\n      NODE_ENV: process.env.NODE_ENV,\n      DB_SECRET_ARN: process.env.DB_SECRET_ARN ? 'SET' : 'NOT_SET',\n      DB_ENDPOINT: process.env.DB_ENDPOINT ? 'SET' : 'NOT_SET',\n      WEBAPP_AWS_REGION: process.env.WEBAPP_AWS_REGION,\n      AWS_REGION: process.env.AWS_REGION,\n      IS_LOCAL: process.env.NODE_ENV === 'development' || !process.env.DB_SECRET_ARN,\n      RUNTIME: 'AWS Lambda Node.js'\n    },\n    connection: {\n      status: 'unknown',\n      method: 'unknown',\n      details: {},\n      durationMs: null\n    },\n    database: {\n      name: 'unknown',\n      version: 'unknown',\n      host: 'unknown',\n      schemas: []\n    },\n    tables: {\n      total: 0,\n      withData: 0,\n      list: [],\n      errors: [],\n      durationMs: null\n    },\n    errors: [],\n    recommendations: []\n  };\n  let overallStatus = 'healthy';\n  try {\n    // Connection step\n    let connectionTest, connectStart = Date.now();\n    try {\n      connectionTest = await query('SELECT NOW() as current_time, version() as postgres_version, current_database() as db_name');\n      diagnostics.connection.durationMs = Date.now() - connectStart;\n      if (connectionTest.rows.length > 0) {\n        const row = connectionTest.rows[0];\n        diagnostics.connection.status = 'connected';\n        diagnostics.connection.method = process.env.DB_SECRET_ARN ? 'AWS Secrets Manager' : 'Environment Variables';\n        diagnostics.connection.details = { connectedAt: row.current_time };\n        diagnostics.database.name = row.db_name;\n        diagnostics.database.version = row.postgres_version;\n      } else {\n        diagnostics.connection.status = 'connected_no_data';\n        diagnostics.connection.details = { error: 'Connected but no data returned' };\n        overallStatus = 'degraded';\n        diagnostics.recommendations.push('Database connection established but no data returned. Check DB user permissions and schema.');\n      }\n    } catch (err) {\n      diagnostics.connection.status = 'failed';\n      diagnostics.connection.details = { error: err.message };\n      diagnostics.errors.push({ step: 'connection', error: err.message });\n      overallStatus = 'unhealthy';\n      diagnostics.recommendations.push('Database connection failed. Check credentials, network, and DB status.');\n      return res.status(500).json({ status: 'error', overallStatus, diagnostics, summary: {\n        environment: diagnostics.environment.NODE_ENV || 'unknown',\n        database: diagnostics.database.name,\n        connection: diagnostics.connection.status,\n        tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n        errors: diagnostics.errors.concat(diagnostics.tables.errors),\n        recommendations: diagnostics.recommendations\n      }});\n    }\n    // Host info\n    try {\n      const hostInfo = await query(\"SELECT inet_server_addr() as host, inet_server_port() as port\");\n      if (hostInfo.rows.length > 0) {\n        diagnostics.database.host = hostInfo.rows[0].host || 'localhost';\n        diagnostics.database.port = hostInfo.rows[0].port || 5432;\n      }\n    } catch (e) {\n      diagnostics.errors.push({ step: 'host', error: e.message });\n    }\n    // Schemas\n    try {\n      const schemas = await query(\"SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT LIKE 'pg_%' AND schema_name != 'information_schema'\");\n      diagnostics.database.schemas = schemas.rows.map(r => r.schema_name);\n    } catch (e) {\n      diagnostics.errors.push({ step: 'schemas', error: e.message });\n    }\n    // Table info and record counts\n    let tables = [], tableStart = Date.now();\n    try {\n      const tablesResult = await query(`\n        SELECT \n          t.table_name,\n          (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as column_count,\n          pg_size_pretty(pg_total_relation_size(c.oid)) as size\n        FROM information_schema.tables t\n        LEFT JOIN pg_class c ON c.relname = t.table_name\n        WHERE t.table_schema = 'public' \n        AND t.table_type = 'BASE TABLE'\n        ORDER BY t.table_name\n      `);\n      tables = tablesResult.rows;\n      diagnostics.tables.total = tables.length;\n      let tablesWithData = 0;\n      for (const table of tables) {\n        try {\n          // Validate table name for security\n          const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n          const queryBuilder = new SecureQueryBuilder();\n          \n          if (!queryBuilder.allowedTables.has(table.table_name.toLowerCase())) {\n            console.warn(`🚨 Unauthorized table access: ${table.table_name}`);\n            continue;\n          }\n          \n          const { query: countQuery, params: countParams } = queryBuilder.buildSelect({\n            table: table.table_name,\n            columns: ['COUNT(*) as count']\n          });\n          const count = await query(countQuery, countParams);\n          const recordCount = parseInt(count.rows[0].count);\n          table.record_count = recordCount;\n          // Try to get last updated timestamp\n          let lastUpdate = null;\n          try {\n            const tsCol = await query(`SELECT column_name FROM information_schema.columns WHERE table_name = $1 AND column_name IN ('fetched_at','updated_at','created_at','date','period_end') LIMIT 1`, [table.table_name]);\n            if (tsCol.rows.length > 0) {\n              const col = tsCol.rows[0].column_name;\n              // Validate column name\n              if (!['fetched_at','updated_at','created_at','date','period_end'].includes(col)) {\n                continue;\n              }\n              const { query: maxQuery, params: maxParams } = queryBuilder.buildSelect({\n                table: table.table_name,\n                columns: [`MAX(${col}) as last_update`]\n              });\n              const tsRes = await query(maxQuery, maxParams);\n              lastUpdate = tsRes.rows[0].last_update;\n            }\n          } catch (e) { /* ignore */ }\n          table.last_update = lastUpdate;\n          if (recordCount > 0) tablesWithData++;\n        } catch (e) {\n          table.record_count = null;\n          diagnostics.tables.errors.push({ table: table.table_name, error: e.message });\n        }\n      }\n      diagnostics.tables.withData = tablesWithData;\n      diagnostics.tables.list = tables;\n      diagnostics.tables.durationMs = Date.now() - tableStart;\n      if (tablesWithData === 0) {\n        overallStatus = 'degraded';\n        diagnostics.recommendations.push('No tables have data. Check ETL/loader jobs and DB population.');\n      } else if (tablesWithData < tables.length) {\n        overallStatus = 'degraded';\n        diagnostics.recommendations.push('Some tables are empty. Review loader jobs and data sources.');\n      }\n    } catch (e) {\n      diagnostics.errors.push({ step: 'tables', error: e.message });\n      overallStatus = 'degraded';\n      diagnostics.recommendations.push('Failed to fetch table info. Check DB permissions and schema.');\n    }\n    // Final summary\n    if (diagnostics.errors.length > 0 || diagnostics.tables.errors.length > 0) {\n      overallStatus = 'degraded';\n    }\n    res.json({\n      status: diagnostics.connection.status === 'connected' ? 'ok' : 'error',\n      overallStatus,\n      diagnostics,\n      summary: {\n        environment: diagnostics.environment.NODE_ENV || 'unknown',\n        database: diagnostics.database.name,\n        connection: diagnostics.connection.status,\n        tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n        errors: diagnostics.errors.concat(diagnostics.tables.errors),\n        recommendations: diagnostics.recommendations\n      }\n    });\n  } catch (error) {\n    diagnostics.errors.push({ step: 'fatal', error: error.message });\n    overallStatus = 'unhealthy';\n    diagnostics.recommendations.push('Fatal error in diagnostics. Check backend logs.');\n    res.status(500).json({ status: 'error', overallStatus, diagnostics, summary: {\n      environment: diagnostics.environment.NODE_ENV || 'unknown',\n      database: diagnostics.database.name,\n      connection: diagnostics.connection.status,\n      tablesWithData: `${diagnostics.tables.withData}/${diagnostics.tables.total}`,\n      errors: diagnostics.errors.concat(diagnostics.tables.errors),\n      recommendations: diagnostics.recommendations\n    }});\n  }\n});\n\n// Minimal DB test endpoint for debugging\nrouter.get('/db-test', async (req, res) => {\n  console.log('Received request for /health/db-test');\n  try {\n    const result = await query('SELECT 1 as ok');\n    res.json({ ok: true, result: result.rows });\n  } catch (e) {\n    res.status(500).json({ ok: false, error: e.message });\n  }\n});\n\n// Update health status for all tables - comprehensive monitoring\nrouter.post('/update-status', async (req, res) => {\n  console.log('Received request for /health/update-status');\n  try {\n    // Ensure database pool is initialized\n    try {\n      getPool();\n    } catch (initError) {\n      console.log('Health update: DB not initialized, initializing now...');\n      try {\n        await initializeDatabase();\n      } catch (dbInitError) {\n        console.error('Health update: Failed to initialize database:', dbInitError.message);\n        return res.status(503).json({\n          status: 'error',\n          message: 'Failed to initialize database connection',\n          error: dbInitError.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n\n    // Check if health_status table exists, create if not\n    try {\n      await query('SELECT 1 FROM health_status LIMIT 1');\n    } catch (tableError) {\n      console.log('Health_status table does not exist, creating it...');\n      try {\n        // Create the comprehensive health_status table\n        await query(`\n          CREATE TABLE IF NOT EXISTS health_status (\n            table_name VARCHAR(255) PRIMARY KEY,\n            status VARCHAR(50) NOT NULL DEFAULT 'unknown',\n            record_count BIGINT DEFAULT 0,\n            missing_data_count BIGINT DEFAULT 0,\n            last_updated TIMESTAMP WITH TIME ZONE,\n            last_checked TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n            is_stale BOOLEAN DEFAULT FALSE,\n            error TEXT,\n            table_category VARCHAR(100),\n            critical_table BOOLEAN DEFAULT FALSE,\n            expected_update_frequency INTERVAL DEFAULT '1 day',\n            size_bytes BIGINT DEFAULT 0,\n            last_vacuum TIMESTAMP WITH TIME ZONE,\n            last_analyze TIMESTAMP WITH TIME ZONE,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n          )\n        `);\n\n        // Insert all monitored tables - comprehensive list\n        const monitoredTables = [\n          // Core Tables (Stock Symbol Management)\n          { name: 'stock_symbols', category: 'symbols', critical: true, frequency: '1 week' },\n          { name: 'etf_symbols', category: 'symbols', critical: true, frequency: '1 week' },\n          { name: 'last_updated', category: 'tracking', critical: true, frequency: '1 hour' },\n          \n          // Price & Market Data Tables\n          { name: 'price_daily', category: 'prices', critical: true, frequency: '1 day' },\n          { name: 'price_weekly', category: 'prices', critical: true, frequency: '1 week' },\n          { name: 'price_monthly', category: 'prices', critical: true, frequency: '1 month' },\n          { name: 'etf_price_daily', category: 'prices', critical: true, frequency: '1 day' },\n          { name: 'etf_price_weekly', category: 'prices', critical: true, frequency: '1 week' },\n          { name: 'etf_price_monthly', category: 'prices', critical: true, frequency: '1 month' },\n          { name: 'price_data_montly', category: 'prices', critical: false, frequency: '1 month' }, // Test table with typo\n          \n          // Technical Analysis Tables (corrected names)\n          { name: 'technical_data_daily', category: 'technicals', critical: true, frequency: '1 day' },\n          { name: 'technical_data_weekly', category: 'technicals', critical: true, frequency: '1 week' },\n          { name: 'technical_data_monthly', category: 'technicals', critical: true, frequency: '1 month' },\n          \n          // Financial Statement Tables (Annual)\n          { name: 'annual_balance_sheet', category: 'financials', critical: false, frequency: '3 months' },\n          { name: 'annual_income_statement', category: 'financials', critical: false, frequency: '3 months' },\n          { name: 'annual_cash_flow', category: 'financials', critical: false, frequency: '3 months' }, // Fixed name\n          \n          // Financial Statement Tables (Quarterly)\n          { name: 'quarterly_balance_sheet', category: 'financials', critical: true, frequency: '3 months' },\n          { name: 'quarterly_income_statement', category: 'financials', critical: true, frequency: '3 months' },\n          { name: 'quarterly_cash_flow', category: 'financials', critical: true, frequency: '3 months' }, // Fixed name\n          \n          // Financial Statement Tables (TTM)\n          { name: 'ttm_income_statement', category: 'financials', critical: false, frequency: '3 months' },\n          { name: 'ttm_cash_flow', category: 'financials', critical: false, frequency: '3 months' }, // Fixed name\n          \n          // Company Information Tables\n          { name: 'company_profile', category: 'company', critical: true, frequency: '1 week' },\n          { name: 'market_data', category: 'company', critical: true, frequency: '1 day' },\n          { name: 'key_metrics', category: 'company', critical: true, frequency: '1 day' },\n          { name: 'analyst_estimates', category: 'company', critical: false, frequency: '1 week' },\n          { name: 'governance_scores', category: 'company', critical: false, frequency: '1 month' },\n          { name: 'leadership_team', category: 'company', critical: false, frequency: '1 month' },\n          \n          // Earnings & Calendar Tables\n          { name: 'earnings_history', category: 'earnings', critical: false, frequency: '1 day' },\n          { name: 'earnings_estimates', category: 'earnings', critical: true, frequency: '1 day' }, // Fixed name\n          { name: 'revenue_estimates', category: 'earnings', critical: false, frequency: '1 day' }, // Fixed name\n          { name: 'calendar_events', category: 'earnings', critical: true, frequency: '1 day' },\n          { name: 'earnings_metrics', category: 'earnings', critical: false, frequency: '1 day' }, // Added missing table\n          \n          // Market Sentiment & Economic Tables\n          { name: 'fear_greed_index', category: 'sentiment', critical: true, frequency: '1 day' },\n          { name: 'aaii_sentiment', category: 'sentiment', critical: false, frequency: '1 week' },\n          { name: 'naaim', category: 'sentiment', critical: false, frequency: '1 week' },\n          { name: 'economic_data', category: 'sentiment', critical: false, frequency: '1 day' },\n          { name: 'analyst_upgrade_downgrade', category: 'sentiment', critical: false, frequency: '1 day' },\n          \n          // Trading & Portfolio Tables\n          { name: 'portfolio_holdings', category: 'trading', critical: false, frequency: '1 hour' },\n          { name: 'portfolio_performance', category: 'trading', critical: false, frequency: '1 hour' },\n          { name: 'trading_alerts', category: 'trading', critical: false, frequency: '1 hour' },\n          { name: 'buy_sell_daily', category: 'trading', critical: true, frequency: '1 day' },\n          { name: 'buy_sell_weekly', category: 'trading', critical: true, frequency: '1 week' },\n          { name: 'buy_sell_monthly', category: 'trading', critical: true, frequency: '1 month' },\n          \n          // News & Additional Data\n          { name: 'stock_news', category: 'news', critical: false, frequency: '1 hour' }, // Fixed name\n          { name: 'stocks', category: 'other', critical: false, frequency: '1 day' },\n          \n          // Quality & Value Metrics Tables\n          { name: 'quality_metrics', category: 'scoring', critical: true, frequency: '1 day' },\n          { name: 'value_metrics', category: 'scoring', critical: true, frequency: '1 day' },\n          { name: 'growth_metrics', category: 'scoring', critical: true, frequency: '1 day' },\n          \n          // Advanced Scoring System Tables\n          { name: 'stock_scores', category: 'scoring', critical: true, frequency: '1 day' },\n          { name: 'earnings_quality_metrics', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'balance_sheet_strength', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'profitability_metrics', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'management_effectiveness', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'valuation_multiples', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'intrinsic_value_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'revenue_growth_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'earnings_growth_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'price_momentum_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'technical_momentum_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'analyst_sentiment_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'social_sentiment_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'institutional_positioning', category: 'scoring', critical: false, frequency: '1 week' },\n          { name: 'insider_trading_analysis', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'score_performance_tracking', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'market_regime', category: 'scoring', critical: false, frequency: '1 day' },\n          { name: 'stock_symbols_enhanced', category: 'scoring', critical: false, frequency: '1 week' },\n          \n          // System Health Monitoring\n          { name: 'health_status', category: 'system', critical: true, frequency: '1 hour' },\n          \n          // Test Tables\n          { name: 'earnings', category: 'test', critical: false, frequency: '1 day' },\n          { name: 'prices', category: 'test', critical: false, frequency: '1 day' }\n        ];\n\n        for (const table of monitoredTables) {\n          await query(`\n            INSERT INTO health_status (table_name, table_category, critical_table, expected_update_frequency)\n            VALUES ($1, $2, $3, $4)\n            ON CONFLICT (table_name) DO NOTHING\n          `, [table.name, table.category, table.critical, table.frequency]);\n        }\n\n        console.log(`Health_status table created and populated with ${monitoredTables.length} tables`);\n      } catch (createError) {\n        console.error('Failed to create health_status table:', createError.message);\n        return res.status(500).json({\n          status: 'error',\n          message: 'Failed to create health_status table',\n          error: createError.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n\n    // Perform comprehensive health check for all tables\n    const startTime = Date.now();\n    const healthResults = [];\n    let summary = {\n      total_tables: 0,\n      healthy_tables: 0,\n      stale_tables: 0,\n      empty_tables: 0,\n      error_tables: 0,\n      missing_tables: 0,\n      total_records: 0,\n      total_missing_data: 0\n    };\n\n    try {\n      // Get list of tables to check\n      const tablesToCheck = await query('SELECT table_name, expected_update_frequency FROM health_status');\n      summary.total_tables = tablesToCheck.rowCount;\n\n      for (const tableRow of tablesToCheck.rows) {\n        const tableName = tableRow.table_name;\n        let tableStatus = 'unknown';\n        let recordCount = 0;\n        let lastUpdated = null;\n        let errorMsg = null;\n        let isStale = false;\n\n        try {\n          // Check if table exists and get record count\n          const countResult = await query(`\n            SELECT COUNT(*) as count FROM information_schema.tables \n            WHERE table_name = $1 AND table_schema = 'public'\n          `, [tableName]);\n\n          if (countResult.rows[0].count === '0') {\n            tableStatus = 'missing';\n            summary.missing_tables++;\n          } else {\n            try {\n              // Get record count\n              // Validate table name for security\n              const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n              const queryBuilder = new SecureQueryBuilder();\n              \n              if (!queryBuilder.allowedTables.has(tableName.toLowerCase())) {\n                console.warn(`🚨 Unauthorized table access: ${tableName}`);\n                tableStatus = 'unauthorized';\n                summary.missing_tables++;\n                tableData[tableName] = { status: tableStatus, records: 0 };\n                continue;\n              }\n              \n              const { query: recordQuery, params: recordParams } = queryBuilder.buildSelect({\n                table: tableName,\n                columns: ['COUNT(*) as count']\n              });\n              const recordResult = await query(recordQuery, recordParams);\n              recordCount = parseInt(recordResult.rows[0].count);\n              summary.total_records += recordCount;\n\n              if (recordCount === 0) {\n                tableStatus = 'empty';\n                summary.empty_tables++;\n              } else {\n                // Try to get last updated timestamp\n                const timestampColumns = ['fetched_at', 'updated_at', 'created_at', 'date', 'period_end', 'timestamp'];\n                let foundTimestamp = false;\n\n                for (const col of timestampColumns) {\n                  try {\n                    const colCheck = await query(`\n                      SELECT column_name FROM information_schema.columns \n                      WHERE table_name = $1 AND column_name = $2\n                    `, [tableName, col]);\n\n                    if (colCheck.rowCount > 0) {\n                      // Validate column name\n                      if (!['fetched_at','updated_at','created_at','date','period_end'].includes(col)) {\n                        continue;\n                      }\n                      const { query: tsQuery, params: tsParams } = queryBuilder.buildSelect({\n                        table: tableName,\n                        columns: [`MAX(${col}) as last_update`]\n                      });\n                      const tsResult = await query(tsQuery, tsParams);\n                      if (tsResult.rows[0].last_update) {\n                        lastUpdated = tsResult.rows[0].last_update;\n                        foundTimestamp = true;\n                        break;\n                      }\n                    }\n                  } catch (tsError) {\n                    // Continue to next column\n                  }\n                }\n\n                // Determine if stale based on expected frequency\n                if (lastUpdated && tableRow.expected_update_frequency) {\n                  const expectedInterval = tableRow.expected_update_frequency;\n                  const staleThreshold = new Date();\n                  \n                  // Simple stale check - if last update is older than 2x expected frequency\n                  const hoursSinceUpdate = (new Date() - new Date(lastUpdated)) / (1000 * 60 * 60);\n                  const expectedHours = expectedInterval.includes('hour') ? 2 : \n                                       expectedInterval.includes('day') ? 48 : \n                                       expectedInterval.includes('week') ? 336 : \n                                       expectedInterval.includes('month') ? 1440 : 48;\n\n                  if (hoursSinceUpdate > expectedHours) {\n                    tableStatus = 'stale';\n                    isStale = true;\n                    summary.stale_tables++;\n                  } else {\n                    tableStatus = 'healthy';\n                    summary.healthy_tables++;\n                  }\n                } else {\n                  tableStatus = 'healthy';\n                  summary.healthy_tables++;\n                }\n              }\n            } catch (recordError) {\n              tableStatus = 'error';\n              errorMsg = recordError.message;\n              summary.error_tables++;\n            }\n          }\n        } catch (checkError) {\n          tableStatus = 'error';\n          errorMsg = checkError.message;\n          summary.error_tables++;\n        }\n\n        // Update health status for this table\n        try {\n          await query(`\n            INSERT INTO health_status (\n              table_name, status, record_count, missing_data_count, \n              last_updated, last_checked, is_stale, error\n            ) VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, $6, $7)\n            ON CONFLICT (table_name) DO UPDATE SET\n              status = EXCLUDED.status,\n              record_count = EXCLUDED.record_count,\n              missing_data_count = EXCLUDED.missing_data_count,\n              last_updated = EXCLUDED.last_updated,\n              last_checked = EXCLUDED.last_checked,\n              is_stale = EXCLUDED.is_stale,\n              error = EXCLUDED.error,\n              updated_at = CURRENT_TIMESTAMP\n          `, [tableName, tableStatus, recordCount, 0, lastUpdated, isStale, errorMsg]);\n        } catch (updateError) {\n          console.error(`Failed to update health status for table ${tableName}:`, updateError.message);\n        }\n\n        healthResults.push({\n          table_name: tableName,\n          status: tableStatus,\n          record_count: recordCount,\n          last_updated: lastUpdated,\n          error: errorMsg\n        });\n      }\n    } catch (overallError) {\n      console.error('Error during comprehensive health check:', overallError.message);\n      return res.status(500).json({\n        status: 'error',\n        message: 'Failed to perform comprehensive health check',\n        error: overallError.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const duration = Date.now() - startTime;\n\n    return res.json({\n      status: 'success',\n      message: 'Health status updated successfully',\n      timestamp: new Date().toISOString(),\n      duration_ms: duration,\n      summary: summary,\n      tables_checked: summary.total_tables,\n      results: healthResults\n    });\n\n  } catch (error) {\n    console.error('Error in health status update:', error);\n    res.status(500).json({\n      status: 'error',\n      message: 'Health status update failed',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get health status summary\nrouter.get('/status-summary', async (req, res) => {\n  try {\n    // Ensure database is initialized\n    try {\n      getPool();\n    } catch (initError) {\n      await initializeDatabase();\n    }\n\n    // Get summary statistics\n    const summaryResult = await query(`\n      SELECT \n        table_category,\n        COUNT(*) as total_tables,\n        COUNT(CASE WHEN status = 'healthy' THEN 1 END) as healthy_tables,\n        COUNT(CASE WHEN status = 'stale' THEN 1 END) as stale_tables,\n        COUNT(CASE WHEN status = 'empty' THEN 1 END) as empty_tables,\n        COUNT(CASE WHEN status = 'error' THEN 1 END) as error_tables,\n        COUNT(CASE WHEN status = 'missing' THEN 1 END) as missing_tables,\n        COUNT(CASE WHEN critical_table = true THEN 1 END) as critical_tables,\n        SUM(record_count) as total_records,\n        SUM(missing_data_count) as total_missing_data,\n        MAX(last_updated) as latest_update,\n        MIN(last_updated) as oldest_update\n      FROM health_status\n      GROUP BY table_category\n      ORDER BY table_category\n    `);\n\n    const overallSummary = await query(`\n      SELECT \n        COUNT(*) as total_tables,\n        COUNT(CASE WHEN status = 'healthy' THEN 1 END) as healthy_tables,\n        COUNT(CASE WHEN status = 'stale' THEN 1 END) as stale_tables,\n        COUNT(CASE WHEN status = 'empty' THEN 1 END) as empty_tables,\n        COUNT(CASE WHEN status = 'error' THEN 1 END) as error_tables,\n        COUNT(CASE WHEN status = 'missing' THEN 1 END) as missing_tables,\n        COUNT(CASE WHEN critical_table = true THEN 1 END) as critical_tables,\n        SUM(record_count) as total_records,\n        SUM(missing_data_count) as total_missing_data,\n        MAX(last_checked) as last_health_check\n      FROM health_status\n    `);\n\n    res.json({\n      status: 'success',\n      timestamp: new Date().toISOString(),\n      overall: overallSummary.rows[0],\n      by_category: summaryResult.rows\n    });\n\n  } catch (error) {\n    console.error('Error getting health status summary:', error);\n    res.status(500).json({\n      status: 'error',\n      message: 'Failed to get health status summary',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Force create all required tables endpoint\nrouter.post('/create-tables', async (req, res) => {\n  console.log('Received request to create tables');\n  try {\n    // Initialize database if needed\n    try {\n      getPool();\n    } catch (initError) {\n      console.log('Database not initialized, initializing now...');\n      await initializeDatabase();\n    }\n\n    // This will trigger the createRequiredTables function in database.js\n    const pool = getPool();\n    \n    res.json({\n      status: 'success',\n      message: 'Table creation completed. Check server logs for details.',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error creating tables:', error);\n    res.status(500).json({\n      status: 'error',\n      message: 'Failed to create tables',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Detailed debug endpoint for troubleshooting Lambda to DB connectivity\nrouter.get('/debug', async (req, res) => {\n  try {\n    console.log('🔍 Starting detailed debug analysis...');\n    \n    const debugInfo = {\n      timestamp: new Date().toISOString(),\n      environment: {\n        NODE_ENV: process.env.NODE_ENV,\n        AWS_REGION: process.env.AWS_REGION,\n        AWS_LAMBDA_FUNCTION_NAME: process.env.AWS_LAMBDA_FUNCTION_NAME,\n        AWS_LAMBDA_FUNCTION_VERSION: process.env.AWS_LAMBDA_FUNCTION_VERSION,\n        AWS_EXECUTION_ENV: process.env.AWS_EXECUTION_ENV\n      },\n      lambda: {\n        inLambda: !!process.env.AWS_LAMBDA_RUNTIME_API,\n        vpcEnabled: !!process.env._LAMBDA_SERVER_PORT,\n        memory: process.memoryUsage(),\n        uptime: process.uptime()\n      },\n      database: {\n        config: {\n          hasSecretArn: !!process.env.DB_SECRET_ARN,\n          hasEndpoint: !!process.env.DB_ENDPOINT,\n          secretArn: process.env.DB_SECRET_ARN ? `${process.env.DB_SECRET_ARN.substring(0, 50)}...` : null,\n          endpoint: process.env.DB_ENDPOINT || null\n        }\n      }\n    };\n    \n    // Test network connectivity\n    console.log('🌐 Testing network connectivity...');\n    try {\n      const networkTest = await testNetworkConnectivity();\n      debugInfo.networkTest = networkTest;\n    } catch (error) {\n      debugInfo.networkTest = { status: 'error', message: error.message };\n    }\n    \n    // Test database connection\n    console.log('💾 Testing database connection...');\n    try {\n      const dbHealth = await healthCheck();\n      debugInfo.databaseHealth = dbHealth;\n    } catch (error) {\n      debugInfo.databaseHealth = { status: 'error', message: error.message };\n    }\n    \n    // Add VPC/networking information if available\n    if (process.env.AWS_LAMBDA_RUNTIME_API) {\n      debugInfo.networking = {\n        lambdaRuntimeApi: !!process.env.AWS_LAMBDA_RUNTIME_API,\n        vpcConfig: !!process.env._LAMBDA_SERVER_PORT,\n        executionEnv: process.env.AWS_EXECUTION_ENV\n      };\n    }\n    \n    console.log('✅ Debug analysis complete');\n    \n    res.json({\n      status: 'success',\n      debug: debugInfo,\n      recommendations: [\n        \"Check that Lambda is in private subnets with route to database\",\n        \"Verify security groups allow Lambda → Database on port 5432\",\n        \"Ensure database security group allows inbound from Lambda security group\",\n        \"Check VPC route tables for proper routing\",\n        \"Verify Secrets Manager permissions are granted to Lambda role\"\n      ]\n    });\n    \n  } catch (error) {\n    console.error('❌ Debug endpoint failed:', error);\n    res.status(500).json({\n      status: 'error',\n      message: 'Debug analysis failed',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}