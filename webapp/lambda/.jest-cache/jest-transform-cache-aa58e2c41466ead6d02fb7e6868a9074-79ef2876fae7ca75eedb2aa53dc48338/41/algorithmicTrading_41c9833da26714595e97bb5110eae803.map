{"version":3,"names":["cov_1fg89owkr8","actualCoverage","express","s","require","router","Router","TechnicalAnalysisService","BacktestingService","technicalAnalysis","backtesting","post","req","res","f","data","indicators","b","body","Array","isArray","status","json","success","error","message","length","results","calculateIndicators","count","timestamp","Date","toISOString","console","signal","generateTradingSignal","strategy","options","availableStrategies","getAvailableStrategies","validStrategy","find","id","map","join","backtestOptions","initialCapital","commission","slippage","maxPositionSize","riskPerTrade","stopLoss","takeProfit","runBacktest","get","strategies","name","description","parameters","period","signals","fastPeriod","slowPeriod","signalPeriod","stdDev","kPeriod","dPeriod","indicatorId","params","result","toUpperCase","indicator","errors","comparison","bestPerformance","bestSharpe","lowestDrawdown","mostProfitable","Object","entries","forEach","totalReturn","metrics","sharpeRatio","maxDrawdown","winRate","keys","sampleData","close","high","low","open","volume","i","push","Math","random","toString","padStart","rsi","services","sampleRSI","RSI","module","exports"],"sources":["algorithmicTrading.js"],"sourcesContent":["// Algorithmic Trading Routes\n// API endpoints for technical analysis and backtesting\n\nconst express = require('express');\nconst router = express.Router();\nconst TechnicalAnalysisService = require('../services/technicalAnalysisService');\nconst BacktestingService = require('../services/backtestingService');\n\n// Initialize services\nconst technicalAnalysis = new TechnicalAnalysisService();\nconst backtesting = new BacktestingService();\n\n// Calculate technical indicators\nrouter.post('/indicators', async (req, res) => {\n  try {\n    const { data, indicators = ['RSI', 'MACD', 'BOLLINGER_BANDS'] } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    if (data.length < 50) {\n      return res.status(400).json({\n        success: false,\n        error: 'Insufficient data',\n        message: 'At least 50 data points required for technical analysis'\n      });\n    }\n    \n    const results = technicalAnalysis.calculateIndicators(data, indicators);\n    \n    res.json({\n      success: true,\n      data: results,\n      count: data.length,\n      indicators: indicators,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Technical indicators calculation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate technical indicators',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Generate trading signal\nrouter.post('/signal', async (req, res) => {\n  try {\n    const { data, indicators = ['RSI', 'MACD', 'BOLLINGER_BANDS'] } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    const signal = technicalAnalysis.generateTradingSignal(data, indicators);\n    \n    res.json({\n      success: true,\n      data: signal,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Trading signal generation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate trading signal',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Run backtest\nrouter.post('/backtest', async (req, res) => {\n  try {\n    const { \n      data, \n      strategy = 'MULTI_INDICATOR',\n      options = {}\n    } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    if (data.length < 100) {\n      return res.status(400).json({\n        success: false,\n        error: 'Insufficient data',\n        message: 'At least 100 data points required for backtesting'\n      });\n    }\n    \n    // Validate strategy\n    const availableStrategies = backtesting.getAvailableStrategies();\n    const validStrategy = availableStrategies.find(s => s.id === strategy);\n    \n    if (!validStrategy) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid strategy',\n        message: `Available strategies: ${availableStrategies.map(s => s.id).join(', ')}`,\n        availableStrategies\n      });\n    }\n    \n    // Set default options\n    const backtestOptions = {\n      initialCapital: 10000,\n      commission: 0.001,\n      slippage: 0.001,\n      maxPositionSize: 1.0,\n      riskPerTrade: 0.02,\n      stopLoss: 0.05,\n      takeProfit: 0.15,\n      ...options\n    };\n    \n    const results = await backtesting.runBacktest(data, strategy, backtestOptions);\n    \n    res.json({\n      success: true,\n      data: results,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Backtesting failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run backtest',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get available strategies\nrouter.get('/strategies', async (req, res) => {\n  try {\n    const strategies = backtesting.getAvailableStrategies();\n    \n    res.json({\n      success: true,\n      data: strategies,\n      count: strategies.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Failed to get strategies:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get available strategies',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get available indicators\nrouter.get('/indicators', async (req, res) => {\n  try {\n    const indicators = [\n      {\n        id: 'RSI',\n        name: 'Relative Strength Index',\n        description: 'Momentum oscillator measuring speed and magnitude of price changes',\n        parameters: { period: 14 },\n        signals: ['OVERBOUGHT', 'OVERSOLD']\n      },\n      {\n        id: 'MACD',\n        name: 'Moving Average Convergence Divergence',\n        description: 'Trend-following momentum indicator',\n        parameters: { fastPeriod: 12, slowPeriod: 26, signalPeriod: 9 },\n        signals: ['BULLISH_CROSSOVER', 'BEARISH_CROSSOVER']\n      },\n      {\n        id: 'BOLLINGER_BANDS',\n        name: 'Bollinger Bands',\n        description: 'Volatility bands around moving average',\n        parameters: { period: 20, stdDev: 2 },\n        signals: ['ABOVE_UPPER', 'BELOW_LOWER', 'SQUEEZE']\n      },\n      {\n        id: 'SMA',\n        name: 'Simple Moving Average',\n        description: 'Average price over specified period',\n        parameters: { period: 20 },\n        signals: ['TREND_UP', 'TREND_DOWN']\n      },\n      {\n        id: 'EMA',\n        name: 'Exponential Moving Average',\n        description: 'Weighted moving average giving more weight to recent prices',\n        parameters: { period: 20 },\n        signals: ['TREND_UP', 'TREND_DOWN']\n      },\n      {\n        id: 'STOCHASTIC',\n        name: 'Stochastic Oscillator',\n        description: 'Momentum indicator comparing closing price to price range',\n        parameters: { kPeriod: 14, dPeriod: 3 },\n        signals: ['OVERBOUGHT', 'OVERSOLD']\n      },\n      {\n        id: 'WILLIAMS_R',\n        name: 'Williams %R',\n        description: 'Momentum indicator measuring overbought/oversold levels',\n        parameters: { period: 14 },\n        signals: ['OVERBOUGHT', 'OVERSOLD']\n      }\n    ];\n    \n    res.json({\n      success: true,\n      data: indicators,\n      count: indicators.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Failed to get indicators:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get available indicators',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Calculate single indicator\nrouter.post('/indicator/:indicatorId', async (req, res) => {\n  try {\n    const { indicatorId } = req.params;\n    const { data, parameters = {} } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    const result = technicalAnalysis.calculateIndicators(data, [indicatorId.toUpperCase()]);\n    \n    if (result[indicatorId.toUpperCase()]?.error) {\n      return res.status(400).json({\n        success: false,\n        error: 'Indicator calculation failed',\n        message: result[indicatorId.toUpperCase()].error\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: result[indicatorId.toUpperCase()],\n      indicator: indicatorId.toUpperCase(),\n      parameters,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error(`${indicatorId} calculation failed:`, error);\n    res.status(500).json({\n      success: false,\n      error: `Failed to calculate ${indicatorId}`,\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Backtest comparison (multiple strategies)\nrouter.post('/backtest/compare', async (req, res) => {\n  try {\n    const { \n      data, \n      strategies = ['RSI_STRATEGY', 'MACD_STRATEGY', 'MULTI_INDICATOR'],\n      options = {}\n    } = req.body;\n    \n    if (!data || !Array.isArray(data)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid data',\n        message: 'Array of historical price data required'\n      });\n    }\n    \n    if (data.length < 100) {\n      return res.status(400).json({\n        success: false,\n        error: 'Insufficient data',\n        message: 'At least 100 data points required for backtesting'\n      });\n    }\n    \n    const results = {};\n    const errors = {};\n    \n    // Run backtests for each strategy\n    for (const strategy of strategies) {\n      try {\n        const result = await backtesting.runBacktest(data, strategy, options);\n        results[strategy] = result;\n      } catch (error) {\n        errors[strategy] = error.message;\n      }\n    }\n    \n    // Calculate comparison metrics\n    const comparison = {\n      bestPerformance: null,\n      bestSharpe: null,\n      lowestDrawdown: null,\n      mostProfitable: null\n    };\n    \n    Object.entries(results).forEach(([strategy, result]) => {\n      if (!comparison.bestPerformance || result.totalReturn > results[comparison.bestPerformance].totalReturn) {\n        comparison.bestPerformance = strategy;\n      }\n      \n      if (!comparison.bestSharpe || result.metrics.sharpeRatio > results[comparison.bestSharpe].metrics.sharpeRatio) {\n        comparison.bestSharpe = strategy;\n      }\n      \n      if (!comparison.lowestDrawdown || result.metrics.maxDrawdown < results[comparison.lowestDrawdown].metrics.maxDrawdown) {\n        comparison.lowestDrawdown = strategy;\n      }\n      \n      if (!comparison.mostProfitable || result.metrics.winRate > results[comparison.mostProfitable].metrics.winRate) {\n        comparison.mostProfitable = strategy;\n      }\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        results,\n        comparison,\n        errors: Object.keys(errors).length > 0 ? errors : null\n      },\n      strategies,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Backtest comparison failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to run backtest comparison',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check\nrouter.get('/health', async (req, res) => {\n  try {\n    // Test services with sample data\n    const sampleData = [\n      { close: 100, high: 102, low: 98, open: 99, volume: 1000, timestamp: '2024-01-01' },\n      { close: 101, high: 103, low: 99, open: 100, volume: 1100, timestamp: '2024-01-02' },\n      { close: 102, high: 104, low: 100, open: 101, volume: 1200, timestamp: '2024-01-03' }\n    ];\n    \n    // Add more sample data\n    for (let i = 4; i <= 100; i++) {\n      sampleData.push({\n        close: 100 + Math.random() * 10 - 5,\n        high: 105 + Math.random() * 5,\n        low: 95 + Math.random() * 5,\n        open: 100 + Math.random() * 5 - 2.5,\n        volume: 1000 + Math.random() * 500,\n        timestamp: `2024-01-${i.toString().padStart(2, '0')}`\n      });\n    }\n    \n    // Test technical analysis\n    const rsi = technicalAnalysis.calculateIndicators(sampleData, ['RSI']);\n    \n    // Test backtesting\n    const strategies = backtesting.getAvailableStrategies();\n    \n    res.json({\n      success: true,\n      message: 'Algorithmic trading services operational',\n      services: {\n        technicalAnalysis: {\n          status: 'operational',\n          indicators: Object.keys(technicalAnalysis.indicators).length,\n          sampleRSI: rsi.RSI ? 'calculated' : 'error'\n        },\n        backtesting: {\n          status: 'operational',\n          strategies: strategies.length,\n          availableStrategies: strategies.map(s => s.id)\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Algorithmic trading health check failed:', error);\n    res.status(503).json({\n      success: false,\n      error: 'Algorithmic trading services unhealthy',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}