{"version":3,"names":["cov_24jso4p25c","actualCoverage","query","s","require","SchemaValidator","constructor","f","tableCache","Map","cacheExpiry","expectedTables","required","category","expectedColumns","description","validateTableExists","tableName","options","b","throwOnMissing","useCache","cacheKey","has","cached","get","Date","now","timestamp","exists","result","parseInt","rows","set","Error","error","console","message","validateTablesExist","tableNames","results","getTableSchema","schema","length","columns","map","row","name","column_name","type","data_type","nullable","is_nullable","default","column_default","maxLength","character_maximum_length","columnNames","validateTableSchema","strict","expectedSchema","valid","missing","extra","actualSchema","expected","filter","col","includes","actual","safeQuery","queryText","params","timeout","validateTables","throwOnMissingTable","extractTableNames","expectedTable","fallbackMessage","warn","Set","patterns","forEach","pattern","match","exec","add","toLowerCase","Array","from","getSchemaValidationReport","includeOptional","report","toISOString","summary","totalTables","requiredTables","existingTables","validSchemas","invalidSchemas","missingRequired","tables","issues","recommendations","tablesToCheck","Object","keys","tableInfo","validation","push","table","severity","recommendation","join","priority","action","clearCache","clear","getCacheStatus","entries","size","key","value","age","expired","module","exports"],"sources":["schemaValidator.js"],"sourcesContent":["/**\n * Database Schema Validator\n * Provides table existence validation and schema checking before executing queries\n */\n\nconst { query } = require('./database');\n\nclass SchemaValidator {\n  constructor() {\n    // Cache for table existence and schema information\n    this.tableCache = new Map();\n    this.cacheExpiry = 5 * 60 * 1000; // 5 minutes\n    \n    // Expected table schemas for the financial application\n    this.expectedTables = {\n      // Core symbol and company data\n      'stock_symbols': {\n        required: true,\n        category: 'core',\n        expectedColumns: ['symbol', 'security_name', 'exchange', 'market_category'],\n        description: 'Master list of tradeable symbols'\n      },\n      'company_profiles': {\n        required: false,\n        category: 'core',\n        expectedColumns: ['symbol', 'company_name', 'description', 'sector', 'industry'],\n        description: 'Company profile information'\n      },\n      'symbols': {\n        required: false,\n        category: 'core',\n        expectedColumns: ['symbol', 'name', 'description'],\n        description: 'Alternative symbols table'\n      },\n      \n      // Price data\n      'price_daily': {\n        required: true,\n        category: 'price',\n        expectedColumns: ['symbol', 'date', 'open', 'high', 'low', 'close', 'volume'],\n        description: 'Daily price data'\n      },\n      'latest_prices': {\n        required: false,\n        category: 'price',\n        expectedColumns: ['symbol', 'price', 'last_updated'],\n        description: 'Latest price information'\n      },\n      \n      // Technical analysis\n      'technicals_daily': {\n        required: false,\n        category: 'technical',\n        expectedColumns: ['symbol', 'date', 'rsi', 'macd', 'sma_20', 'sma_50'],\n        description: 'Daily technical indicators'\n      },\n      'latest_technicals': {\n        required: false,\n        category: 'technical',\n        expectedColumns: ['symbol', 'rsi', 'macd', 'last_updated'],\n        description: 'Latest technical indicators'\n      },\n      \n      // User and portfolio data\n      'user_api_keys': {\n        required: true,\n        category: 'user',\n        expectedColumns: ['user_id', 'provider', 'api_key_encrypted', 'api_secret_encrypted', 'status'],\n        description: 'User API credentials'\n      },\n      'portfolio_holdings': {\n        required: false,\n        category: 'portfolio',\n        expectedColumns: ['user_id', 'symbol', 'quantity', 'avg_cost', 'last_updated'],\n        description: 'User portfolio holdings'\n      },\n      \n      // Trading and analytics\n      'trades': {\n        required: false,\n        category: 'trading',\n        expectedColumns: ['user_id', 'symbol', 'quantity', 'price', 'side', 'executed_at'],\n        description: 'Trade execution records'\n      },\n      'buy_sell_daily': {\n        required: false,\n        category: 'analytics',\n        expectedColumns: ['symbol', 'date', 'buy_signal', 'sell_signal', 'confidence'],\n        description: 'Daily buy/sell signals'\n      },\n      \n      // System tables\n      'health_status': {\n        required: false,\n        category: 'system',\n        expectedColumns: ['table_name', 'record_count', 'status', 'last_updated'],\n        description: 'System health monitoring'\n      },\n      'last_updated': {\n        required: false,\n        category: 'system',\n        expectedColumns: ['table_name', 'last_updated', 'record_count'],\n        description: 'Data freshness tracking'\n      }\n    };\n  }\n\n  /**\n   * Validate table existence before executing a query\n   */\n  async validateTableExists(tableName, options = {}) {\n    const { \n      required = false, \n      throwOnMissing = false,\n      useCache = true \n    } = options;\n\n    const cacheKey = `exists_${tableName}`;\n    \n    // Check cache first\n    if (useCache && this.tableCache.has(cacheKey)) {\n      const cached = this.tableCache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheExpiry) {\n        return cached.exists;\n      }\n    }\n\n    try {\n      const result = await query(`\n        SELECT COUNT(*) as exists \n        FROM information_schema.tables \n        WHERE table_schema = 'public' AND table_name = $1\n      `, [tableName], 3000);\n\n      const exists = parseInt(result.rows[0].exists) > 0;\n      \n      // Cache result\n      this.tableCache.set(cacheKey, {\n        exists,\n        timestamp: Date.now()\n      });\n\n      if (required && !exists && throwOnMissing) {\n        throw new Error(`Required table '${tableName}' does not exist`);\n      }\n\n      return exists;\n    } catch (error) {\n      console.error(`Error checking table existence for '${tableName}':`, error.message);\n      \n      if (throwOnMissing) {\n        throw error;\n      }\n      \n      return false;\n    }\n  }\n\n  /**\n   * Validate multiple tables exist\n   */\n  async validateTablesExist(tableNames, options = {}) {\n    const results = {};\n    \n    for (const tableName of tableNames) {\n      results[tableName] = await this.validateTableExists(tableName, options);\n    }\n    \n    return results;\n  }\n\n  /**\n   * Get table schema information\n   */\n  async getTableSchema(tableName, options = {}) {\n    const { useCache = true } = options;\n    const cacheKey = `schema_${tableName}`;\n    \n    // Check cache first\n    if (useCache && this.tableCache.has(cacheKey)) {\n      const cached = this.tableCache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheExpiry) {\n        return cached.schema;\n      }\n    }\n\n    try {\n      const result = await query(`\n        SELECT \n          column_name,\n          data_type,\n          is_nullable,\n          column_default,\n          character_maximum_length\n        FROM information_schema.columns \n        WHERE table_schema = 'public' AND table_name = $1\n        ORDER BY ordinal_position\n      `, [tableName], 5000);\n\n      const schema = {\n        exists: result.rows.length > 0,\n        columns: result.rows.map(row => ({\n          name: row.column_name,\n          type: row.data_type,\n          nullable: row.is_nullable === 'YES',\n          default: row.column_default,\n          maxLength: row.character_maximum_length\n        })),\n        columnNames: result.rows.map(row => row.column_name)\n      };\n      \n      // Cache result\n      this.tableCache.set(cacheKey, {\n        schema,\n        timestamp: Date.now()\n      });\n\n      return schema;\n    } catch (error) {\n      console.error(`Error getting schema for table '${tableName}':`, error.message);\n      return {\n        exists: false,\n        columns: [],\n        columnNames: [],\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Validate table schema against expected schema\n   */\n  async validateTableSchema(tableName, options = {}) {\n    const { strict = false } = options;\n    \n    const expectedSchema = this.expectedTables[tableName];\n    if (!expectedSchema) {\n      return {\n        valid: true,\n        message: `No expected schema defined for table '${tableName}'`,\n        missing: [],\n        extra: []\n      };\n    }\n\n    const actualSchema = await this.getTableSchema(tableName);\n    \n    if (!actualSchema.exists) {\n      return {\n        valid: false,\n        message: `Table '${tableName}' does not exist`,\n        expected: expectedSchema,\n        missing: expectedSchema.expectedColumns,\n        extra: []\n      };\n    }\n\n    // Check for missing required columns\n    const missing = expectedSchema.expectedColumns.filter(\n      col => !actualSchema.columnNames.includes(col)\n    );\n\n    // Check for extra columns (if strict mode)\n    const extra = strict \n      ? actualSchema.columnNames.filter(\n          col => !expectedSchema.expectedColumns.includes(col)\n        )\n      : [];\n\n    const valid = missing.length === 0 && (strict ? extra.length === 0 : true);\n\n    return {\n      valid,\n      message: valid \n        ? `Table '${tableName}' schema is valid`\n        : `Table '${tableName}' schema validation failed`,\n      expected: expectedSchema,\n      actual: actualSchema,\n      missing,\n      extra\n    };\n  }\n\n  /**\n   * Safe query wrapper that validates table existence first\n   */\n  async safeQuery(queryText, params = [], options = {}) {\n    const {\n      timeout = 5000,\n      validateTables = true,\n      throwOnMissingTable = false\n    } = options;\n\n    if (validateTables) {\n      // Extract table names from query\n      const tableNames = this.extractTableNames(queryText);\n      \n      for (const tableName of tableNames) {\n        const exists = await this.validateTableExists(tableName, {\n          throwOnMissing: throwOnMissingTable\n        });\n        \n        if (!exists) {\n          const expectedTable = this.expectedTables[tableName];\n          const fallbackMessage = expectedTable \n            ? `Table '${tableName}' (${expectedTable.description}) does not exist`\n            : `Table '${tableName}' does not exist`;\n            \n          if (throwOnMissingTable) {\n            throw new Error(fallbackMessage);\n          } else {\n            console.warn(`⚠️ ${fallbackMessage} - query may fail`);\n          }\n        }\n      }\n    }\n\n    // Execute the query with the database utility\n    return await query(queryText, params, timeout);\n  }\n\n  /**\n   * Extract table names from SQL query\n   */\n  extractTableNames(queryText) {\n    const tableNames = new Set();\n    \n    // Simple regex to extract table names - this is basic and may need enhancement\n    const patterns = [\n      /FROM\\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,\n      /UPDATE\\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,\n      /INSERT INTO\\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,\n      /DELETE FROM\\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi,\n      /JOIN\\s+([a-zA-Z_][a-zA-Z0-9_]*)/gi\n    ];\n\n    patterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(queryText)) !== null) {\n        tableNames.add(match[1].toLowerCase());\n      }\n    });\n\n    return Array.from(tableNames);\n  }\n\n  /**\n   * Get comprehensive schema validation report\n   */\n  async getSchemaValidationReport(options = {}) {\n    const { includeOptional = true, strict = false } = options;\n    \n    const report = {\n      timestamp: new Date().toISOString(),\n      summary: {\n        totalTables: 0,\n        requiredTables: 0,\n        existingTables: 0,\n        validSchemas: 0,\n        invalidSchemas: 0,\n        missingRequired: 0\n      },\n      tables: {},\n      issues: [],\n      recommendations: []\n    };\n\n    const tablesToCheck = Object.keys(this.expectedTables).filter(\n      tableName => includeOptional || this.expectedTables[tableName].required\n    );\n\n    report.summary.totalTables = tablesToCheck.length;\n    report.summary.requiredTables = tablesToCheck.filter(\n      name => this.expectedTables[name].required\n    ).length;\n\n    for (const tableName of tablesToCheck) {\n      const tableInfo = this.expectedTables[tableName];\n      const validation = await this.validateTableSchema(tableName, { strict });\n      \n      report.tables[tableName] = {\n        ...tableInfo,\n        validation,\n        exists: validation.actual?.exists || false\n      };\n\n      if (validation.actual?.exists) {\n        report.summary.existingTables++;\n      }\n\n      if (validation.valid) {\n        report.summary.validSchemas++;\n      } else {\n        report.summary.invalidSchemas++;\n        \n        if (tableInfo.required) {\n          report.summary.missingRequired++;\n        }\n\n        // Add issues\n        if (!validation.actual?.exists) {\n          report.issues.push({\n            table: tableName,\n            type: 'missing_table',\n            severity: tableInfo.required ? 'high' : 'medium',\n            message: `Table '${tableName}' does not exist`,\n            recommendation: `Create table '${tableName}' with columns: ${tableInfo.expectedColumns.join(', ')}`\n          });\n        } else if (validation.missing.length > 0) {\n          report.issues.push({\n            table: tableName,\n            type: 'missing_columns',\n            severity: 'medium',\n            message: `Table '${tableName}' is missing columns: ${validation.missing.join(', ')}`,\n            recommendation: `Add missing columns to table '${tableName}'`\n          });\n        }\n      }\n    }\n\n    // Generate recommendations\n    if (report.summary.missingRequired > 0) {\n      report.recommendations.push({\n        priority: 'high',\n        action: 'create_required_tables',\n        message: `${report.summary.missingRequired} required tables are missing. Run database initialization scripts.`\n      });\n    }\n\n    if (report.summary.invalidSchemas > 0) {\n      report.recommendations.push({\n        priority: 'medium',\n        action: 'fix_schemas',\n        message: `${report.summary.invalidSchemas} tables have schema issues. Review and update table structures.`\n      });\n    }\n\n    if (report.issues.length === 0) {\n      report.recommendations.push({\n        priority: 'info',\n        action: 'none',\n        message: 'All validated tables have correct schemas.'\n      });\n    }\n\n    return report;\n  }\n\n  /**\n   * Clear validation cache\n   */\n  clearCache() {\n    this.tableCache.clear();\n  }\n\n  /**\n   * Get cache status\n   */\n  getCacheStatus() {\n    const entries = Array.from(this.tableCache.entries());\n    return {\n      size: this.tableCache.size,\n      entries: entries.map(([key, value]) => ({\n        key,\n        age: Date.now() - value.timestamp,\n        expired: Date.now() - value.timestamp > this.cacheExpiry\n      }))\n    };\n  }\n}\n\n// Export singleton instance\nmodule.exports = new SchemaValidator();"],"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","ignoreList":[]}