{"version":3,"names":["cov_10qj01nbpx","actualCoverage","query","s","require","ECSClient","RunTaskCommand","ListTasksCommand","DescribeTasksCommand","LambdaClient","InvokeCommand","PortfolioDataRefreshService","constructor","f","refreshInProgress","Set","region","b","process","env","AWS_REGION","ecs","lambda","triggerPortfolioDataRefresh","userId","provider","symbols","refreshId","has","console","log","status","message","add","length","getUserPortfolioSymbols","slice","join","refreshResults","refreshSymbolData","updatePortfolioRefreshTimestamp","symbolsRefreshed","results","timestamp","Date","toISOString","error","delete","result","rows","map","row","symbol","triggered","failed","cached","symbolsNeedingRefresh","getSymbolsNeedingRefresh","triggerTechnicalDataLoaders","storeRefreshRequest","placeholders","_","i","recentSymbols","filter","includes","JSON","stringify","getRefreshStatus","request","parse","requested","created_at","completed","completed_at","inProgress","ecsTriggered","triggerECSDataLoaders","triggerLambdaDataLoaders","warn","clusterName","ECS_CLUSTER_NAME","symbolList","taskParams","cluster","taskDefinition","launchType","networkConfiguration","awsvpcConfiguration","subnets","SUBNET_ID_1","SUBNET_ID_2","securityGroups","SECURITY_GROUP_ID","assignPublicIp","overrides","containerOverrides","name","environment","value","command","send","tasks","taskArn","payload","triggerSource","priority","params","FunctionName","InvocationType","Payload","StatusCode","getDataLoadingStatus","recentTasks","getRecentECSTasks","refreshStatus","ecs_tasks","refresh_requests","family","maxResults","sort","order","listCommand","taskArns","describeCommand","describeTasks","task","lastStatus","desiredStatus","createdAt","startedAt","stoppedAt","isRefreshNeeded","lastRefresh","data_last_refreshed","hoursSinceRefresh","portfolioDataRefreshService","module","exports"],"sources":["portfolioDataRefresh.js"],"sourcesContent":["// Portfolio Data Refresh Service\n// Integrates API key system with data loaders to refresh portfolio-relevant data\n\nconst { query } = require('./database');\nconst { ECSClient, RunTaskCommand, ListTasksCommand, DescribeTasksCommand } = require('@aws-sdk/client-ecs');\nconst { LambdaClient, InvokeCommand } = require('@aws-sdk/client-lambda');\n\nclass PortfolioDataRefreshService {\n  constructor() {\n    this.refreshInProgress = new Set();\n    // Initialize AWS services for triggering data loaders\n    const region = process.env.AWS_REGION || 'us-east-1';\n    this.ecs = new ECSClient({ region });\n    this.lambda = new LambdaClient({ region });\n  }\n\n  /**\n   * Trigger data refresh for portfolio-relevant symbols when user adds API keys\n   * @param {string} userId - User ID\n   * @param {string} provider - Broker provider (alpaca, td_ameritrade, etc.)\n   * @param {Array} symbols - Array of symbols from user's portfolio\n   */\n  async triggerPortfolioDataRefresh(userId, provider, symbols = []) {\n    const refreshId = `${userId}-${provider}`;\n    \n    if (this.refreshInProgress.has(refreshId)) {\n      console.log(`‚è≥ Portfolio data refresh already in progress for ${userId}/${provider}`);\n      return { status: 'in_progress', message: 'Refresh already running' };\n    }\n\n    try {\n      this.refreshInProgress.add(refreshId);\n      console.log(`üîÑ Starting portfolio data refresh for user ${userId} (${provider})`);\n\n      // 1. Get user's portfolio symbols if not provided\n      if (symbols.length === 0) {\n        symbols = await this.getUserPortfolioSymbols(userId, provider);\n      }\n\n      if (symbols.length === 0) {\n        console.log(`‚ÑπÔ∏è No portfolio symbols found for ${userId}/${provider}`);\n        return { status: 'no_symbols', message: 'No portfolio symbols to refresh' };\n      }\n\n      console.log(`üìä Refreshing data for ${symbols.length} portfolio symbols: ${symbols.slice(0, 5).join(', ')}${symbols.length > 5 ? '...' : ''}`);\n\n      // 2. Trigger priority data loading for these symbols\n      const refreshResults = await this.refreshSymbolData(symbols, userId);\n\n      // 3. Update portfolio refresh timestamp\n      await this.updatePortfolioRefreshTimestamp(userId, provider);\n\n      console.log(`‚úÖ Portfolio data refresh completed for ${userId}/${provider}`);\n      return {\n        status: 'completed',\n        symbolsRefreshed: symbols.length,\n        results: refreshResults,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error(`‚ùå Portfolio data refresh failed for ${userId}/${provider}:`, error);\n      return {\n        status: 'error',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      };\n    } finally {\n      this.refreshInProgress.delete(refreshId);\n    }\n  }\n\n  /**\n   * Get symbols from user's portfolio holdings\n   */\n  async getUserPortfolioSymbols(userId, provider) {\n    try {\n      const result = await query(`\n        SELECT DISTINCT symbol \n        FROM portfolio_holdings \n        WHERE user_id = $1 \n        AND symbol IS NOT NULL \n        AND symbol != ''\n        ORDER BY symbol\n      `, [userId]);\n\n      return result.rows.map(row => row.symbol);\n    } catch (error) {\n      console.error('Error fetching user portfolio symbols:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Refresh data for specific symbols by triggering ECS tasks\n   */\n  async refreshSymbolData(symbols, userId) {\n    const results = {\n      triggered: [],\n      failed: [],\n      cached: []\n    };\n\n    try {\n      // Check which symbols need refresh (haven't been updated recently)\n      const symbolsNeedingRefresh = await this.getSymbolsNeedingRefresh(symbols);\n      \n      if (symbolsNeedingRefresh.length === 0) {\n        console.log('üìä All portfolio symbols have recent data');\n        results.cached = symbols;\n        return results;\n      }\n\n      console.log(`üîÑ ${symbolsNeedingRefresh.length} symbols need data refresh`);\n\n      // Trigger priority data loading for these symbols\n      await this.triggerTechnicalDataLoaders(symbolsNeedingRefresh, userId);\n\n      results.triggered = symbolsNeedingRefresh;\n      \n      // Store refresh request for processing by scheduled tasks\n      await this.storeRefreshRequest(symbolsNeedingRefresh, userId);\n\n      return results;\n\n    } catch (error) {\n      console.error('Error refreshing symbol data:', error);\n      results.failed = symbols;\n      return results;\n    }\n  }\n\n  /**\n   * Check which symbols need fresh data\n   */\n  async getSymbolsNeedingRefresh(symbols) {\n    if (symbols.length === 0) return [];\n\n    try {\n      // Check when symbols were last updated\n      const placeholders = symbols.map((_, i) => `$${i + 1}`).join(',');\n      const result = await query(`\n        SELECT symbol \n        FROM price_daily \n        WHERE symbol IN (${placeholders})\n        AND date >= CURRENT_DATE - INTERVAL '1 day'\n        GROUP BY symbol\n      `, symbols);\n\n      const recentSymbols = result.rows.map(row => row.symbol);\n      return symbols.filter(symbol => !recentSymbols.includes(symbol));\n\n    } catch (error) {\n      console.error('Error checking symbol freshness:', error);\n      // If we can't check, assume all need refresh\n      return symbols;\n    }\n  }\n\n  /**\n   * Store refresh request for background processing\n   */\n  async storeRefreshRequest(symbols, userId) {\n    try {\n      await query(`\n        INSERT INTO portfolio_data_refresh_requests \n        (user_id, symbols, status, created_at)\n        VALUES ($1, $2, 'pending', NOW())\n        ON CONFLICT (user_id) DO UPDATE SET\n          symbols = EXCLUDED.symbols,\n          status = 'pending',\n          created_at = NOW()\n      `, [userId, JSON.stringify(symbols)]);\n\n      console.log(`üíæ Stored refresh request for ${symbols.length} symbols`);\n    } catch (error) {\n      // Table might not exist yet - that's okay\n      console.log('‚ö†Ô∏è Could not store refresh request (table may not exist):', error.message);\n    }\n  }\n\n  /**\n   * Update portfolio refresh timestamp\n   */\n  async updatePortfolioRefreshTimestamp(userId, provider) {\n    try {\n      await query(`\n        UPDATE portfolio_metadata \n        SET data_last_refreshed = NOW(), updated_at = NOW()\n        WHERE user_id = $1\n      `, [userId]);\n    } catch (error) {\n      console.log('‚ö†Ô∏è Could not update refresh timestamp:', error.message);\n    }\n  }\n\n  /**\n   * Get refresh status for a user\n   */\n  async getRefreshStatus(userId) {\n    try {\n      const result = await query(`\n        SELECT \n          symbols,\n          status,\n          created_at,\n          completed_at\n        FROM portfolio_data_refresh_requests\n        WHERE user_id = $1\n        ORDER BY created_at DESC\n        LIMIT 1\n      `, [userId]);\n\n      if (result.rows.length === 0) {\n        return { status: 'none', message: 'No refresh requests found' };\n      }\n\n      const request = result.rows[0];\n      return {\n        status: request.status,\n        symbols: JSON.parse(request.symbols || '[]'),\n        requested: request.created_at,\n        completed: request.completed_at,\n        inProgress: this.refreshInProgress.has(`${userId}-*`)\n      };\n\n    } catch (error) {\n      console.error('Error getting refresh status:', error);\n      return { status: 'error', error: error.message };\n    }\n  }\n\n  /**\n   * Trigger technical data loaders for specific symbols\n   */\n  async triggerTechnicalDataLoaders(symbols, userId) {\n    try {\n      console.log(`üöÄ Triggering technical data loaders for ${symbols.length} symbols`);\n      \n      // Method 1: Try ECS task if cluster exists\n      const ecsTriggered = await this.triggerECSDataLoaders(symbols);\n      \n      if (!ecsTriggered) {\n        // Method 2: Fall back to Lambda invocation for smaller symbol sets\n        await this.triggerLambdaDataLoaders(symbols);\n      }\n      \n      console.log(`‚úÖ Successfully triggered data loaders for symbols: ${symbols.slice(0, 5).join(', ')}${symbols.length > 5 ? '...' : ''}`);\n      \n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Failed to trigger technical data loaders: ${error.message}`);\n      // Don't fail the whole process if data loading fails\n    }\n  }\n\n  /**\n   * Trigger ECS tasks for technical data loading\n   */\n  async triggerECSDataLoaders(symbols) {\n    try {\n      // Check if ECS cluster exists (optional - for production deployments)\n      const clusterName = process.env.ECS_CLUSTER_NAME || 'stocks-data-processing';\n      \n      // For small symbol sets, use environment variable approach\n      const symbolList = symbols.join(',');\n      \n      const taskParams = {\n        cluster: clusterName,\n        taskDefinition: 'loadtechnicalsdaily-task', // Task definition name\n        launchType: 'FARGATE',\n        networkConfiguration: {\n          awsvpcConfiguration: {\n            subnets: [\n              process.env.SUBNET_ID_1 || 'subnet-12345', // Would be from CloudFormation\n              process.env.SUBNET_ID_2 || 'subnet-67890'\n            ],\n            securityGroups: [process.env.SECURITY_GROUP_ID || 'sg-12345'],\n            assignPublicIp: 'ENABLED'\n          }\n        },\n        overrides: {\n          containerOverrides: [{\n            name: 'loadtechnicalsdaily',\n            environment: [\n              { name: 'PRIORITY_SYMBOLS', value: symbolList },\n              { name: 'TRIGGER_SOURCE', value: 'portfolio_refresh' }\n            ]\n          }]\n        }\n      };\n\n      const command = new RunTaskCommand(taskParams);\n      const result = await this.ecs.send(command);\n      console.log(`üéØ ECS task triggered for technical data loading: ${result.tasks[0]?.taskArn}`);\n      return true;\n      \n    } catch (error) {\n      console.log(`‚ö†Ô∏è ECS task triggering failed: ${error.message}`);\n      return false; // Fall back to Lambda approach\n    }\n  }\n\n  /**\n   * Trigger Lambda functions for technical data loading (fallback)\n   */\n  async triggerLambdaDataLoaders(symbols) {\n    try {\n      // For smaller symbol sets, can invoke a Lambda that processes them\n      const payload = {\n        symbols: symbols,\n        triggerSource: 'portfolio_refresh',\n        priority: true\n      };\n\n      const params = {\n        FunctionName: 'loadtechnicalsdaily-lambda', // Lambda function name\n        InvocationType: 'Event', // Async invocation\n        Payload: JSON.stringify(payload)\n      };\n\n      const command = new InvokeCommand(params);\n      const result = await this.lambda.send(command);\n      console.log(`üéØ Lambda triggered for technical data loading: ${result.StatusCode}`);\n      \n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Lambda triggering failed: ${error.message}`);\n      // This is a fallback, so just log the warning\n    }\n  }\n\n  /**\n   * Get status of data loading jobs for a user\n   */\n  async getDataLoadingStatus(userId) {\n    try {\n      // Check recent ECS tasks for this user's symbols\n      const recentTasks = await this.getRecentECSTasks();\n      \n      // Check refresh requests status\n      const refreshStatus = await this.getRefreshStatus(userId);\n      \n      return {\n        ecs_tasks: recentTasks,\n        refresh_requests: refreshStatus,\n        timestamp: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      console.error('Error getting data loading status:', error);\n      return { status: 'error', error: error.message };\n    }\n  }\n\n  /**\n   * Get recent ECS tasks related to technical data loading\n   */\n  async getRecentECSTasks() {\n    try {\n      const clusterName = process.env.ECS_CLUSTER_NAME || 'stocks-data-processing';\n      \n      const params = {\n        cluster: clusterName,\n        family: 'loadtechnicalsdaily-task',\n        maxResults: 10,\n        sort: 'CREATED_AT',\n        order: 'DESC'\n      };\n\n      const listCommand = new ListTasksCommand(params);\n      const result = await this.ecs.send(listCommand);\n      \n      if (result.taskArns.length > 0) {\n        const describeCommand = new DescribeTasksCommand({\n          cluster: clusterName,\n          tasks: result.taskArns\n        });\n        const describeTasks = await this.ecs.send(describeCommand);\n        \n        return describeTasks.tasks.map(task => ({\n          taskArn: task.taskArn,\n          lastStatus: task.lastStatus,\n          desiredStatus: task.desiredStatus,\n          createdAt: task.createdAt,\n          startedAt: task.startedAt,\n          stoppedAt: task.stoppedAt\n        }));\n      }\n      \n      return [];\n      \n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Could not fetch ECS task status: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Check if data refresh is needed for user's portfolio\n   */\n  async isRefreshNeeded(userId) {\n    try {\n      // Check when portfolio data was last refreshed\n      const result = await query(`\n        SELECT data_last_refreshed \n        FROM portfolio_metadata \n        WHERE user_id = $1\n        ORDER BY data_last_refreshed DESC\n        LIMIT 1\n      `, [userId]);\n\n      if (result.rows.length === 0) {\n        return true; // No metadata = needs refresh\n      }\n\n      const lastRefresh = result.rows[0].data_last_refreshed;\n      if (!lastRefresh) {\n        return true; // Never refreshed\n      }\n\n      // Refresh needed if data is older than 4 hours\n      const hoursSinceRefresh = (new Date() - new Date(lastRefresh)) / (1000 * 60 * 60);\n      return hoursSinceRefresh > 4;\n\n    } catch (error) {\n      console.error('Error checking refresh need:', error);\n      return true; // On error, assume refresh needed\n    }\n  }\n}\n\n// Singleton instance\nconst portfolioDataRefreshService = new PortfolioDataRefreshService();\n\nmodule.exports = portfolioDataRefreshService;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}