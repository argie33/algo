e761d6c70cbb527f505688c6baa6bf25
/* istanbul ignore next */
function cov_1f9hyatgfs() {
  var path = "/home/stocks/algo/webapp/lambda/routes/emergency.js";
  var hash = "5285b71b36b4cdf3b6328855cba34f0d5eef128a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/emergency.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "1": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 31
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 50,
          column: 3
        }
      },
      "3": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 49,
          column: 3
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 65
        }
      },
      "5": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "6": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "7": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 88
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "9": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "10": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "12": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "13": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 78
        }
      },
      "14": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 60
        }
      },
      "15": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 40,
          column: 7
        }
      },
      "16": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 54
        }
      },
      "17": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "18": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 77,
          column: 3
        }
      },
      "19": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 76,
          column: 3
        }
      },
      "20": {
        start: {
          line: 55,
          column: 28
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "21": {
        start: {
          line: 56,
          column: 19
        },
        end: {
          line: 56,
          column: 46
        }
      },
      "22": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 58,
          column: 54
        }
      },
      "23": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 95
        }
      },
      "24": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "25": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 67
        }
      },
      "26": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 75,
          column: 7
        }
      },
      "27": {
        start: {
          line: 80,
          column: 26
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "28": {
        start: {
          line: 82,
          column: 2
        },
        end: {
          line: 88,
          column: 3
        }
      },
      "29": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 87,
          column: 7
        }
      },
      "30": {
        start: {
          line: 90,
          column: 2
        },
        end: {
          line: 96,
          column: 3
        }
      },
      "31": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 95,
          column: 7
        }
      },
      "32": {
        start: {
          line: 98,
          column: 2
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "33": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 103,
          column: 7
        }
      },
      "34": {
        start: {
          line: 106,
          column: 2
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "35": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 111,
          column: 7
        }
      },
      "36": {
        start: {
          line: 114,
          column: 2
        },
        end: {
          line: 114,
          column: 25
        }
      },
      "37": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 117,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 48
          },
          end: {
            line: 8,
            column: 49
          }
        },
        loc: {
          start: {
            line: 8,
            column: 68
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 38
          },
          end: {
            line: 53,
            column: 39
          }
        },
        loc: {
          start: {
            line: 53,
            column: 58
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 53
      },
      "2": {
        name: "generateCircuitBreakerRecommendations",
        decl: {
          start: {
            line: 79,
            column: 9
          },
          end: {
            line: 79,
            column: 46
          }
        },
        loc: {
          start: {
            line: 79,
            column: 55
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 79
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 61
          }
        }, {
          start: {
            line: 59,
            column: 65
          },
          end: {
            line: 59,
            column: 95
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 14
          },
          end: {
            line: 62,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 26
          },
          end: {
            line: 62,
            column: 35
          }
        }, {
          start: {
            line: 62,
            column: 38
          },
          end: {
            line: 62,
            column: 48
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 88,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 88,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 96,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 96,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 2
          },
          end: {
            line: 104,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 2
          },
          end: {
            line: 104,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5285b71b36b4cdf3b6328855cba34f0d5eef128a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1f9hyatgfs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1f9hyatgfs();
/**
 * Emergency Database Recovery Endpoints
 */
const express =
/* istanbul ignore next */
(cov_1f9hyatgfs().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_1f9hyatgfs().s[1]++, express.Router());

// Emergency circuit breaker reset endpoint
/* istanbul ignore next */
cov_1f9hyatgfs().s[2]++;
router.post('/emergency/reset-circuit-breaker', async (req, res) => {
  /* istanbul ignore next */
  cov_1f9hyatgfs().f[0]++;
  cov_1f9hyatgfs().s[3]++;
  try {
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[4]++;
    console.log('🚨 EMERGENCY: Circuit breaker reset requested');
    const databaseManager =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[5]++, require('../utils/databaseConnectionManager'));
    const beforeStatus =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[6]++, databaseManager.getStatus());
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[7]++;
    console.log('📊 Circuit breaker status before reset:', beforeStatus.circuitBreaker);

    // Force reset the circuit breaker and connection
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[8]++;
    await databaseManager.forceReset();
    const afterStatus =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[9]++, databaseManager.getStatus());
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[10]++;
    console.log('📊 Circuit breaker status after reset:', afterStatus.circuitBreaker);

    // Test the connection
    let testResult;
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[11]++;
    try {
      /* istanbul ignore next */
      cov_1f9hyatgfs().s[12]++;
      await databaseManager.query('SELECT 1 as test');
      /* istanbul ignore next */
      cov_1f9hyatgfs().s[13]++;
      testResult = {
        success: true,
        message: 'Database connection restored'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1f9hyatgfs().s[14]++;
      testResult = {
        success: false,
        error: error.message
      };
    }
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[15]++;
    res.json({
      status: 'success',
      message: 'Circuit breaker emergency reset completed',
      beforeStatus: beforeStatus.circuitBreaker,
      afterStatus: afterStatus.circuitBreaker,
      connectionTest: testResult,
      timestamp: new Date().toISOString(),
      warning: 'This is an emergency procedure. Monitor the system closely.'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[16]++;
    console.error('❌ Emergency reset failed:', error);
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[17]++;
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Circuit breaker status monitoring endpoint
/* istanbul ignore next */
cov_1f9hyatgfs().s[18]++;
router.get('/circuit-breaker-status', async (req, res) => {
  /* istanbul ignore next */
  cov_1f9hyatgfs().f[1]++;
  cov_1f9hyatgfs().s[19]++;
  try {
    const databaseManager =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[20]++, require('../utils/databaseConnectionManager'));
    const status =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[21]++, databaseManager.getStatus());
    const circuitBreakerStatus =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[22]++, status.circuitBreaker);
    const isHealthy =
    /* istanbul ignore next */
    (cov_1f9hyatgfs().s[23]++,
    /* istanbul ignore next */
    (cov_1f9hyatgfs().b[0][0]++, circuitBreakerStatus.state === 'closed') &&
    /* istanbul ignore next */
    (cov_1f9hyatgfs().b[0][1]++, circuitBreakerStatus.isHealthy));
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[24]++;
    res.json({
      status: isHealthy ?
      /* istanbul ignore next */
      (cov_1f9hyatgfs().b[1][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1f9hyatgfs().b[1][1]++, 'degraded'),
      circuitBreaker: circuitBreakerStatus,
      pool: status.pool,
      recommendations: generateCircuitBreakerRecommendations(circuitBreakerStatus),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[25]++;
    console.error('❌ Circuit breaker status check failed:', error);
    /* istanbul ignore next */
    cov_1f9hyatgfs().s[26]++;
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});
function generateCircuitBreakerRecommendations(status) {
  /* istanbul ignore next */
  cov_1f9hyatgfs().f[2]++;
  const recommendations =
  /* istanbul ignore next */
  (cov_1f9hyatgfs().s[27]++, []);
  /* istanbul ignore next */
  cov_1f9hyatgfs().s[28]++;
  if (status.state === 'open') {
    /* istanbul ignore next */
    cov_1f9hyatgfs().b[2][0]++;
    cov_1f9hyatgfs().s[29]++;
    recommendations.push({
      level: 'critical',
      message: 'Circuit breaker is OPEN. Database access blocked for ' + Math.ceil(status.timeToRecovery / 1000) + ' more seconds.',
      action: 'Wait for automatic recovery or use emergency reset endpoint: POST /api/health/emergency/reset-circuit-breaker'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1f9hyatgfs().b[2][1]++;
  }
  cov_1f9hyatgfs().s[30]++;
  if (status.state === 'half-open') {
    /* istanbul ignore next */
    cov_1f9hyatgfs().b[3][0]++;
    cov_1f9hyatgfs().s[31]++;
    recommendations.push({
      level: 'warning',
      message: 'Circuit breaker is testing recovery. Avoid heavy database operations.',
      action: 'Monitor closely and allow time for recovery validation'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1f9hyatgfs().b[3][1]++;
  }
  cov_1f9hyatgfs().s[32]++;
  if (status.failures > 7) {
    /* istanbul ignore next */
    cov_1f9hyatgfs().b[4][0]++;
    cov_1f9hyatgfs().s[33]++;
    // 70% of 10 threshold
    recommendations.push({
      level: 'warning',
      message: 'High failure rate detected (' + status.failures + ' failures). Circuit breaker may open soon.',
      action: 'Investigate database connectivity and consider scaling down operations'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1f9hyatgfs().b[4][1]++;
  }
  cov_1f9hyatgfs().s[34]++;
  if (parseFloat(status.successRate) < 80) {
    /* istanbul ignore next */
    cov_1f9hyatgfs().b[5][0]++;
    cov_1f9hyatgfs().s[35]++;
    recommendations.push({
      level: 'warning',
      message: 'Low success rate (' + status.successRate + '). Database performance issues detected.',
      action: 'Check database performance metrics and connection configuration'
    });
  } else
  /* istanbul ignore next */
  {
    cov_1f9hyatgfs().b[5][1]++;
  }
  cov_1f9hyatgfs().s[36]++;
  return recommendations;
}
/* istanbul ignore next */
cov_1f9hyatgfs().s[37]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,