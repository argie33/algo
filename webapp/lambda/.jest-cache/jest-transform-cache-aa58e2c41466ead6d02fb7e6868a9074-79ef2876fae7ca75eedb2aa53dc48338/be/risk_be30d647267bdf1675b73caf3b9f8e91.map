{"version":3,"names":["cov_2ecq37rnm9","actualCoverage","express","s","require","router","Router","authenticateToken","query","RiskEngine","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","use","riskEngine","portfolioId","params","timeframe","b","confidence_level","userId","user","sub","portfolioResult","rows","length","error","riskMetrics","calculatePortfolioRisk","parseFloat","data","console","method","time_horizon","lookback_days","varAnalysis","calculateVaR","parseInt","post","scenarios","shock_magnitude","correlation_adjustment","body","stressTestResults","performStressTest","severity","limit","offset","whereClause","paramIndex","push","result","countResult","alerts","total","put","alertId","alertResult","correlationMatrix","calculateCorrelationMatrix","attribution_type","attribution","calculateRiskAttribution","limitsResult","limits","portfolio_id","metric_name","threshold_value","warning_threshold","threshold_type","is_active","portfolioRiskResult","alertsResult","marketRiskResult","alertCounts","reduce","acc","row","count","high","medium","low","portfolios","alert_counts","market_indicators","summary","total_portfolios","total_alerts","sum","high_risk_portfolios","filter","p","var_95","portfolio_ids","check_interval","monitoringResult","startRealTimeMonitoring","stopRealTimeMonitoring","getMonitoringStatus","module","exports"],"sources":["risk.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\nconst RiskEngine = require('../utils/riskEngine');\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'risk-analysis',\n    timestamp: new Date().toISOString(),\n    message: 'Risk Analysis service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Risk Analysis API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\n\n// Apply authentication to all routes\nrouter.use(authenticateToken);\n\n// Initialize risk engine\nconst riskEngine = new RiskEngine();\n\n// Get portfolio risk metrics\nrouter.get('/portfolio/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { timeframe = '1Y', confidence_level = 0.95 } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const riskMetrics = await riskEngine.calculatePortfolioRisk(\n      portfolioId, \n      timeframe, \n      parseFloat(confidence_level)\n    );\n    \n    res.json({\n      success: true,\n      data: riskMetrics\n    });\n  } catch (error) {\n    console.error('Error calculating portfolio risk:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate portfolio risk',\n      message: error.message\n    });\n  }\n});\n\n// Get Value at Risk (VaR) analysis\nrouter.get('/var/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { \n      method = 'historical', \n      confidence_level = 0.95, \n      time_horizon = 1,\n      lookback_days = 252\n    } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const varAnalysis = await riskEngine.calculateVaR(\n      portfolioId,\n      method,\n      parseFloat(confidence_level),\n      parseInt(time_horizon),\n      parseInt(lookback_days)\n    );\n    \n    res.json({\n      success: true,\n      data: varAnalysis\n    });\n  } catch (error) {\n    console.error('Error calculating VaR:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate VaR',\n      message: error.message\n    });\n  }\n});\n\n// Get stress testing results\nrouter.post('/stress-test/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { \n      scenarios = [],\n      shock_magnitude = 0.1,\n      correlation_adjustment = false\n    } = req.body;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const stressTestResults = await riskEngine.performStressTest(\n      portfolioId,\n      scenarios,\n      shock_magnitude,\n      correlation_adjustment\n    );\n    \n    res.json({\n      success: true,\n      data: stressTestResults\n    });\n  } catch (error) {\n    console.error('Error performing stress test:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to perform stress test',\n      message: error.message\n    });\n  }\n});\n\n// Get risk alerts\nrouter.get('/alerts', async (req, res) => {\n  try {\n    const { \n      severity = 'all',\n      status = 'active',\n      limit = 50,\n      offset = 0\n    } = req.query;\n    const userId = req.user.sub;\n    \n    let whereClause = 'WHERE ra.user_id = $1';\n    const params = [userId];\n    let paramIndex = 2;\n    \n    if (severity !== 'all') {\n      whereClause += ` AND ra.severity = $${paramIndex}`;\n      params.push(severity);\n      paramIndex++;\n    }\n    \n    if (status !== 'all') {\n      whereClause += ` AND ra.status = $${paramIndex}`;\n      params.push(status);\n      paramIndex++;\n    }\n    \n    const result = await query(`\n      SELECT \n        ra.id,\n        ra.alert_type,\n        ra.severity,\n        ra.title,\n        ra.description,\n        ra.metric_name,\n        ra.current_value,\n        ra.threshold_value,\n        ra.portfolio_id,\n        ra.symbol,\n        ra.created_at,\n        ra.updated_at,\n        ra.status,\n        ra.acknowledged_at,\n        p.name as portfolio_name\n      FROM risk_alerts ra\n      LEFT JOIN portfolios p ON ra.portfolio_id = p.id\n      ${whereClause}\n      ORDER BY ra.created_at DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `, [...params, parseInt(limit), parseInt(offset)]);\n    \n    // Get total count\n    const countResult = await query(`\n      SELECT COUNT(*) as total\n      FROM risk_alerts ra\n      ${whereClause}\n    `, params);\n    \n    res.json({\n      success: true,\n      data: {\n        alerts: result.rows,\n        total: parseInt(countResult.rows[0].total),\n        limit: parseInt(limit),\n        offset: parseInt(offset)\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching risk alerts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch risk alerts',\n      message: error.message\n    });\n  }\n});\n\n// Acknowledge risk alert\nrouter.put('/alerts/:alertId/acknowledge', async (req, res) => {\n  try {\n    const { alertId } = req.params;\n    const userId = req.user.sub;\n    \n    // Verify alert ownership\n    const alertResult = await query(`\n      SELECT id FROM risk_alerts \n      WHERE id = $1 AND user_id = $2\n    `, [alertId, userId]);\n    \n    if (alertResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Alert not found'\n      });\n    }\n    \n    await query(`\n      UPDATE risk_alerts \n      SET status = 'acknowledged', acknowledged_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n    `, [alertId]);\n    \n    res.json({\n      success: true,\n      message: 'Alert acknowledged successfully'\n    });\n  } catch (error) {\n    console.error('Error acknowledging alert:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to acknowledge alert',\n      message: error.message\n    });\n  }\n});\n\n// Get correlation matrix\nrouter.get('/correlation/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { lookback_days = 252 } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const correlationMatrix = await riskEngine.calculateCorrelationMatrix(\n      portfolioId,\n      parseInt(lookback_days)\n    );\n    \n    res.json({\n      success: true,\n      data: correlationMatrix\n    });\n  } catch (error) {\n    console.error('Error calculating correlation matrix:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate correlation matrix',\n      message: error.message\n    });\n  }\n});\n\n// Get risk attribution analysis\nrouter.get('/attribution/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { attribution_type = 'factor' } = req.query;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const attribution = await riskEngine.calculateRiskAttribution(\n      portfolioId,\n      attribution_type\n    );\n    \n    res.json({\n      success: true,\n      data: attribution\n    });\n  } catch (error) {\n    console.error('Error calculating risk attribution:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate risk attribution',\n      message: error.message\n    });\n  }\n});\n\n// Get risk limits and thresholds\nrouter.get('/limits/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    const limitsResult = await query(`\n      SELECT \n        id,\n        metric_name,\n        threshold_value,\n        warning_threshold,\n        threshold_type,\n        is_active,\n        created_at,\n        updated_at\n      FROM risk_limits\n      WHERE portfolio_id = $1\n      ORDER BY metric_name\n    `, [portfolioId]);\n    \n    res.json({\n      success: true,\n      data: {\n        limits: limitsResult.rows,\n        portfolio_id: portfolioId\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching risk limits:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch risk limits',\n      message: error.message\n    });\n  }\n});\n\n// Update risk limits\nrouter.put('/limits/:portfolioId', async (req, res) => {\n  try {\n    const { portfolioId } = req.params;\n    const { limits } = req.body;\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    const portfolioResult = await query(`\n      SELECT id FROM portfolios \n      WHERE id = $1 AND user_id = $2\n    `, [portfolioId, userId]);\n    \n    if (portfolioResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Portfolio not found'\n      });\n    }\n    \n    // Update each limit\n    for (const limit of limits) {\n      await query(`\n        INSERT INTO risk_limits (\n          portfolio_id, metric_name, threshold_value, warning_threshold,\n          threshold_type, is_active, updated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)\n        ON CONFLICT (portfolio_id, metric_name) DO UPDATE SET\n          threshold_value = EXCLUDED.threshold_value,\n          warning_threshold = EXCLUDED.warning_threshold,\n          threshold_type = EXCLUDED.threshold_type,\n          is_active = EXCLUDED.is_active,\n          updated_at = CURRENT_TIMESTAMP\n      `, [\n        portfolioId,\n        limit.metric_name,\n        limit.threshold_value,\n        limit.warning_threshold,\n        limit.threshold_type,\n        limit.is_active\n      ]);\n    }\n    \n    res.json({\n      success: true,\n      message: 'Risk limits updated successfully'\n    });\n  } catch (error) {\n    console.error('Error updating risk limits:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update risk limits',\n      message: error.message\n    });\n  }\n});\n\n// Get risk dashboard summary\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    \n    // Get portfolio risk summary\n    const portfolioRiskResult = await query(`\n      SELECT \n        p.id,\n        p.name,\n        p.total_value,\n        prm.var_95,\n        prm.var_99,\n        prm.expected_shortfall,\n        prm.volatility,\n        prm.beta,\n        prm.sharpe_ratio,\n        prm.max_drawdown,\n        prm.calculated_at\n      FROM portfolios p\n      LEFT JOIN portfolio_risk_metrics prm ON p.id = prm.portfolio_id\n      WHERE p.user_id = $1\n      ORDER BY p.created_at DESC\n    `, [userId]);\n    \n    // Get active risk alerts count\n    const alertsResult = await query(`\n      SELECT \n        severity,\n        COUNT(*) as count\n      FROM risk_alerts\n      WHERE user_id = $1 AND status = 'active'\n      GROUP BY severity\n    `, [userId]);\n    \n    // Get market risk indicators\n    const marketRiskResult = await query(`\n      SELECT \n        indicator_name,\n        current_value,\n        risk_level,\n        last_updated\n      FROM market_risk_indicators\n      WHERE last_updated >= CURRENT_DATE\n      ORDER BY risk_level DESC\n    `);\n    \n    const alertCounts = alertsResult.rows.reduce((acc, row) => {\n      acc[row.severity] = parseInt(row.count);\n      return acc;\n    }, { high: 0, medium: 0, low: 0 });\n    \n    res.json({\n      success: true,\n      data: {\n        portfolios: portfolioRiskResult.rows,\n        alert_counts: alertCounts,\n        market_indicators: marketRiskResult.rows,\n        summary: {\n          total_portfolios: portfolioRiskResult.rows.length,\n          total_alerts: alertsResult.rows.reduce((sum, row) => sum + parseInt(row.count), 0),\n          high_risk_portfolios: portfolioRiskResult.rows.filter(p => p.var_95 > 0.05).length\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching risk dashboard:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch risk dashboard',\n      message: error.message\n    });\n  }\n});\n\n// Start real-time risk monitoring\nrouter.post('/monitoring/start', async (req, res) => {\n  try {\n    const { portfolio_ids = [], check_interval = 300000 } = req.body; // 5 minutes default\n    const userId = req.user.sub;\n    \n    // Verify portfolio ownership\n    if (portfolio_ids.length > 0) {\n      const portfolioResult = await query(`\n        SELECT id FROM portfolios \n        WHERE id = ANY($1) AND user_id = $2\n      `, [portfolio_ids, userId]);\n      \n      if (portfolioResult.rows.length !== portfolio_ids.length) {\n        return res.status(400).json({\n          success: false,\n          error: 'One or more portfolios not found'\n        });\n      }\n    }\n    \n    // Start monitoring for user's portfolios\n    const monitoringResult = await riskEngine.startRealTimeMonitoring(\n      userId,\n      portfolio_ids,\n      check_interval\n    );\n    \n    res.json({\n      success: true,\n      data: monitoringResult\n    });\n  } catch (error) {\n    console.error('Error starting risk monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to start risk monitoring',\n      message: error.message\n    });\n  }\n});\n\n// Stop real-time risk monitoring\nrouter.post('/monitoring/stop', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    \n    const result = await riskEngine.stopRealTimeMonitoring(userId);\n    \n    res.json({\n      success: true,\n      data: result\n    });\n  } catch (error) {\n    console.error('Error stopping risk monitoring:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to stop risk monitoring',\n      message: error.message\n    });\n  }\n});\n\n// Get monitoring status\nrouter.get('/monitoring/status', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    \n    const status = await riskEngine.getMonitoringStatus(userId);\n    \n    res.json({\n      success: true,\n      data: status\n    });\n  } catch (error) {\n    console.error('Error fetching monitoring status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch monitoring status',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}