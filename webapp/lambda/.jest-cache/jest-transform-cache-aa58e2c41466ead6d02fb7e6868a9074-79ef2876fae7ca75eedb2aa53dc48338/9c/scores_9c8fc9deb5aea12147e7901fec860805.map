{"version":3,"names":["cov_1ckwcek2g1","actualCoverage","express","s","require","query","authenticateToken","router","Router","use","get","req","res","f","json","status","endpoint","timestamp","Date","toISOString","console","log","page","b","parseInt","limit","Math","min","offset","search","sector","minScore","parseFloat","maxScore","sortBy","sortOrder","whereClause","params","paramCount","push","trim","validSortColumns","safeSort","includes","safeOrder","toLowerCase","stocksQuery","stocksResult","countQuery","countResult","slice","totalStocks","rows","total","stocks","map","row","symbol","companyName","company_name","industry","marketCap","market_cap","currentPrice","current_price","pe","trailing_pe","pb","price_to_book","scores","composite","composite_score","quality","quality_score","value","value_score","growth","growth_score","momentum","momentum_score","sentiment","sentiment_score","positioning","positioning_score","subScores","earningsQuality","earnings_quality_subscore","balanceSheet","balance_sheet_subscore","profitability","profitability_subscore","management","management_subscore","multiples","multiples_subscore","intrinsicValue","intrinsic_value_subscore","relativeValue","relative_value_subscore","metadata","confidence","confidence_score","completeness","data_completeness","sectorAdjusted","sector_adjusted_score","percentileRank","percentile_rank","scoreDate","score_date","lastUpdated","last_updated","pagination","currentPage","totalPages","ceil","totalItems","itemsPerPage","hasNext","hasPrev","filters","summary","averageComposite","length","reduce","sum","toFixed","topScorer","scoreRange","max","error","mockStocks","dataCompleteness","sectorAdjustedScore","success","data","pages","note","toUpperCase","scoresQuery","scoresResult","latestScore","historicalScores","sectorQuery","sectorResult","date","sectorBenchmark","response","currentData","dividendYield","dividend_yield","roe","return_on_equity","roa","return_on_assets","debtToEquity","debt_to_equity","freeCashFlow","free_cash_flow","detailedBreakdown","overall","components","description","revenueGrowth","revenue_growth_subscore","earningsGrowth","earnings_growth_subscore","sustainableGrowth","sustainable_growth_subscore","priceMomentum","price_momentum_subscore","fundamentalMomentum","fundamental_momentum_subscore","technicalMomentum","technical_momentum_subscore","analystSentiment","analyst_sentiment_subscore","socialSentiment","social_sentiment_subscore","newsSentiment","news_sentiment_subscore","institutional","institutional_subscore","insider","insider_subscore","shortInterest","short_interest_subscore","sectorComparison","sectorName","peerCount","peer_count","benchmarks","avg_composite","avg_quality","avg_value","relativeTo","historicalTrend","marketRegime","market_regime","updated_at","interpretation","generateScoreInterpretation","message","sectors","stockCount","stock_count","averageScores","avg_growth","avg_momentum","avg_sentiment","avg_positioning","min_score","max_score","volatility","score_volatility","totalSectors","bestPerforming","mostVolatile","prev","current","category","validCategories","scoreColumn","topStocksQuery","result","topStocks","compositeScore","categoryScore","category_score","count","averageScore","highestScore","lowestScore","scoreData","strengths","concerns","recommendation","module","exports"],"sources":["scores.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Apply authentication to all scoring routes\nrouter.use(authenticateToken);\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'scores',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Get comprehensive scores for all stocks with filtering and pagination\nrouter.get('/', async (req, res) => {\n  try {\n    console.log('Scores endpoint called with params:', req.query);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const minScore = parseFloat(req.query.minScore) || 0;\n    const maxScore = parseFloat(req.query.maxScore) || 100;\n    const sortBy = req.query.sortBy || 'composite_score';\n    const sortOrder = req.query.sortOrder || 'desc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n      params.push(`%${search}%`);\n    }\n\n    // Add sector filter\n    if (sector && sector.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND s.sector = $${paramCount}`;\n      params.push(sector);\n    }\n\n    // Add score range filters\n    if (minScore > 0) {\n      paramCount++;\n      whereClause += ` AND sc.composite_score >= $${paramCount}`;\n      params.push(minScore);\n    }\n\n    if (maxScore < 100) {\n      paramCount++;\n      whereClause += ` AND sc.composite_score <= $${paramCount}`;\n      params.push(maxScore);\n    }\n\n    // Validate sort column to prevent SQL injection\n    const validSortColumns = [\n      'symbol', 'composite_score', 'quality_score', 'value_score', \n      'growth_score', 'momentum_score', 'sentiment_score', 'positioning_score',\n      'market_cap', 'sector'\n    ];\n    \n    const safeSort = validSortColumns.includes(sortBy) ? sortBy : 'composite_score';\n    const safeOrder = sortOrder.toLowerCase() === 'asc' ? 'ASC' : 'DESC';\n    \n    // Main query to get stocks with scores\n    const stocksQuery = `\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        s.sector,\n        s.industry,\n        s.market_cap,\n        s.current_price,\n        s.trailing_pe,\n        s.price_to_book,\n        \n        -- Main Scores\n        sc.composite_score,\n        sc.quality_score,\n        sc.value_score,\n        sc.growth_score,\n        sc.momentum_score,\n        sc.sentiment_score,\n        sc.positioning_score,\n        \n        -- Sub-scores for detailed analysis\n        sc.earnings_quality_subscore,\n        sc.balance_sheet_subscore,\n        sc.profitability_subscore,\n        sc.management_subscore,\n        sc.multiples_subscore,\n        sc.intrinsic_value_subscore,\n        sc.relative_value_subscore,\n        \n        -- Metadata\n        sc.confidence_score,\n        sc.data_completeness,\n        sc.sector_adjusted_score,\n        sc.percentile_rank,\n        sc.created_at as score_date,\n        sc.updated_at as last_updated\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN stock_scores sc ON ss.symbol = sc.symbol \n        AND sc.date = (\n          SELECT MAX(date) \n          FROM stock_scores sc2 \n          WHERE sc2.symbol = ss.symbol\n        )\n      ${whereClause}\n      AND sc.composite_score IS NOT NULL\n      ORDER BY ${safeSort} ${safeOrder}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `;\n\n    params.push(limit, offset);\n\n    const stocksResult = await query(stocksQuery, params);\n\n    // Get total count for pagination\n    const countQuery = `\n      SELECT COUNT(DISTINCT ss.symbol) as total\n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN stock_scores sc ON ss.symbol = sc.symbol \n        AND sc.date = (\n          SELECT MAX(date) \n          FROM stock_scores sc2 \n          WHERE sc2.symbol = ss.symbol\n        )\n      ${whereClause}\n      AND sc.composite_score IS NOT NULL\n    `;\n\n    const countResult = await query(countQuery, params.slice(0, paramCount));\n    const totalStocks = parseInt(countResult.rows[0].total);\n\n    // Format the response\n    const stocks = stocksResult.rows.map(row => ({\n      symbol: row.symbol,\n      companyName: row.company_name,\n      sector: row.sector,\n      industry: row.industry,\n      marketCap: row.market_cap,\n      currentPrice: row.current_price,\n      pe: row.trailing_pe,\n      pb: row.price_to_book,\n      \n      scores: {\n        composite: parseFloat(row.composite_score) || 0,\n        quality: parseFloat(row.quality_score) || 0,\n        value: parseFloat(row.value_score) || 0,\n        growth: parseFloat(row.growth_score) || 0,\n        momentum: parseFloat(row.momentum_score) || 0,\n        sentiment: parseFloat(row.sentiment_score) || 0,\n        positioning: parseFloat(row.positioning_score) || 0\n      },\n      \n      subScores: {\n        quality: {\n          earningsQuality: parseFloat(row.earnings_quality_subscore) || 0,\n          balanceSheet: parseFloat(row.balance_sheet_subscore) || 0,\n          profitability: parseFloat(row.profitability_subscore) || 0,\n          management: parseFloat(row.management_subscore) || 0\n        },\n        value: {\n          multiples: parseFloat(row.multiples_subscore) || 0,\n          intrinsicValue: parseFloat(row.intrinsic_value_subscore) || 0,\n          relativeValue: parseFloat(row.relative_value_subscore) || 0\n        }\n      },\n      \n      metadata: {\n        confidence: parseFloat(row.confidence_score) || 0,\n        completeness: parseFloat(row.data_completeness) || 0,\n        sectorAdjusted: parseFloat(row.sector_adjusted_score) || 0,\n        percentileRank: parseFloat(row.percentile_rank) || 0,\n        scoreDate: row.score_date,\n        lastUpdated: row.last_updated\n      }\n    }));\n\n    res.json({\n      stocks,\n      pagination: {\n        currentPage: page,\n        totalPages: Math.ceil(totalStocks / limit),\n        totalItems: totalStocks,\n        itemsPerPage: limit,\n        hasNext: offset + limit < totalStocks,\n        hasPrev: page > 1\n      },\n      filters: {\n        search,\n        sector,\n        minScore,\n        maxScore,\n        sortBy: safeSort,\n        sortOrder: safeOrder\n      },\n      summary: {\n        averageComposite: stocks.length > 0 ? \n          (stocks.reduce((sum, s) => sum + s.scores.composite, 0) / stocks.length).toFixed(2) : 0,\n        topScorer: stocks.length > 0 ? stocks[0] : null,\n        scoreRange: stocks.length > 0 ? {\n          min: Math.min(...stocks.map(s => s.scores.composite)).toFixed(2),\n          max: Math.max(...stocks.map(s => s.scores.composite)).toFixed(2)\n        } : null\n      }\n    });\n\n  } catch (error) {\n    console.error('Error in scores endpoint:', error);\n    console.log('Returning mock scores data as fallback');\n    \n    // Return mock data when database is unavailable\n    const mockStocks = [\n      {\n        symbol: 'AAPL',\n        companyName: 'Apple Inc.',\n        sector: 'Technology',\n        industry: 'Consumer Electronics',\n        marketCap: 3000000000000,\n        currentPrice: 195.50,\n        pe: 28.5,\n        pb: 5.2,\n        scores: {\n          composite: 85.2,\n          quality: 88.5,\n          value: 72.3,\n          growth: 89.1,\n          momentum: 76.8,\n          sentiment: 82.4,\n          positioning: 79.6\n        },\n        subScores: {\n          quality: {\n            earningsQuality: 91.2,\n            balanceSheet: 94.8,\n            profitability: 89.3,\n            management: 85.7\n          },\n          value: {\n            multiples: 68.4,\n            intrinsicValue: 75.2,\n            relativeValue: 73.4\n          }\n        },\n        confidence: 0.92,\n        dataCompleteness: 0.98,\n        sectorAdjustedScore: 83.7,\n        percentileRank: 88,\n        scoreDate: new Date().toISOString(),\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'MSFT',\n        companyName: 'Microsoft Corporation',\n        sector: 'Technology',\n        industry: 'Software',\n        marketCap: 2800000000000,\n        currentPrice: 420.30,\n        pe: 32.1,\n        pb: 4.8,\n        scores: {\n          composite: 87.6,\n          quality: 91.2,\n          value: 75.8,\n          growth: 86.4,\n          momentum: 83.2,\n          sentiment: 85.1,\n          positioning: 81.3\n        },\n        subScores: {\n          quality: {\n            earningsQuality: 93.5,\n            balanceSheet: 91.8,\n            profitability: 92.1,\n            management: 87.4\n          },\n          value: {\n            multiples: 71.2,\n            intrinsicValue: 78.9,\n            relativeValue: 77.3\n          }\n        },\n        confidence: 0.94,\n        dataCompleteness: 0.99,\n        sectorAdjustedScore: 86.2,\n        percentileRank: 91,\n        scoreDate: new Date().toISOString(),\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n\n    res.json({\n      success: true,\n      data: mockStocks,\n      pagination: {\n        page: 1,\n        limit: mockStocks.length,\n        total: mockStocks.length,\n        pages: 1\n      },\n      note: 'Mock data - database connectivity issue'\n    });\n  }\n});\n\n// Get detailed scores for a specific stock\nrouter.get('/:symbol', async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    console.log(`Getting detailed scores for ${symbol}`);\n\n    // Get latest scores with historical data\n    const scoresQuery = `\n      SELECT \n        sc.*,\n        ss.security_name as company_name,\n        s.sector,\n        s.industry,\n        s.market_cap,\n        s.current_price,\n        s.trailing_pe,\n        s.price_to_book,\n        s.dividend_yield,\n        s.return_on_equity,\n        s.return_on_assets,\n        s.debt_to_equity,\n        s.free_cash_flow\n      FROM stock_scores sc\n      LEFT JOIN stock_symbols ss ON sc.symbol = ss.symbol\n      LEFT JOIN symbols s ON sc.symbol = s.symbol\n      WHERE sc.symbol = $1\n      ORDER BY sc.date DESC\n      LIMIT 12\n    `;\n\n    const scoresResult = await query(scoresQuery, [symbol]);\n\n    if (scoresResult.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Symbol not found or no scores available',\n        symbol,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const latestScore = scoresResult.rows[0];\n    const historicalScores = scoresResult.rows.slice(1);\n\n    // Get sector benchmark data\n    const sectorQuery = `\n      SELECT \n        AVG(composite_score) as avg_composite,\n        AVG(quality_score) as avg_quality,\n        AVG(value_score) as avg_value,\n        COUNT(*) as peer_count\n      FROM stock_scores sc\n      LEFT JOIN symbols s ON sc.symbol = s.symbol\n      WHERE s.sector = $1\n      AND sc.date = $2\n      AND sc.composite_score IS NOT NULL\n    `;\n\n    const sectorResult = await query(sectorQuery, [latestScore.sector, latestScore.date]);\n    const sectorBenchmark = sectorResult.rows[0];\n\n    // Format comprehensive response\n    const response = {\n      symbol,\n      companyName: latestScore.company_name,\n      sector: latestScore.sector,\n      industry: latestScore.industry,\n      \n      currentData: {\n        marketCap: latestScore.market_cap,\n        currentPrice: latestScore.current_price,\n        pe: latestScore.trailing_pe,\n        pb: latestScore.price_to_book,\n        dividendYield: latestScore.dividend_yield,\n        roe: latestScore.return_on_equity,\n        roa: latestScore.return_on_assets,\n        debtToEquity: latestScore.debt_to_equity,\n        freeCashFlow: latestScore.free_cash_flow\n      },\n      \n      scores: {\n        composite: parseFloat(latestScore.composite_score) || 0,\n        quality: parseFloat(latestScore.quality_score) || 0,\n        value: parseFloat(latestScore.value_score) || 0,\n        growth: parseFloat(latestScore.growth_score) || 0,\n        momentum: parseFloat(latestScore.momentum_score) || 0,\n        sentiment: parseFloat(latestScore.sentiment_score) || 0,\n        positioning: parseFloat(latestScore.positioning_score) || 0\n      },\n      \n      detailedBreakdown: {\n        quality: {\n          overall: parseFloat(latestScore.quality_score) || 0,\n          components: {\n            earningsQuality: parseFloat(latestScore.earnings_quality_subscore) || 0,\n            balanceSheet: parseFloat(latestScore.balance_sheet_subscore) || 0,\n            profitability: parseFloat(latestScore.profitability_subscore) || 0,\n            management: parseFloat(latestScore.management_subscore) || 0\n          },\n          description: \"Measures financial statement quality, balance sheet strength, profitability metrics, and management effectiveness\"\n        },\n        \n        value: {\n          overall: parseFloat(latestScore.value_score) || 0,\n          components: {\n            multiples: parseFloat(latestScore.multiples_subscore) || 0,\n            intrinsicValue: parseFloat(latestScore.intrinsic_value_subscore) || 0,\n            relativeValue: parseFloat(latestScore.relative_value_subscore) || 0\n          },\n          description: \"Analyzes P/E, P/B, EV/EBITDA ratios, DCF intrinsic value, and peer comparison\"\n        },\n        \n        growth: {\n          overall: parseFloat(latestScore.growth_score) || 0,\n          components: {\n            revenueGrowth: parseFloat(latestScore.revenue_growth_subscore) || 0,\n            earningsGrowth: parseFloat(latestScore.earnings_growth_subscore) || 0,\n            sustainableGrowth: parseFloat(latestScore.sustainable_growth_subscore) || 0\n          },\n          description: \"Evaluates revenue growth, earnings growth quality, and growth sustainability\"\n        },\n        \n        momentum: {\n          overall: parseFloat(latestScore.momentum_score) || 0,\n          components: {\n            priceMomentum: parseFloat(latestScore.price_momentum_subscore) || 0,\n            fundamentalMomentum: parseFloat(latestScore.fundamental_momentum_subscore) || 0,\n            technicalMomentum: parseFloat(latestScore.technical_momentum_subscore) || 0\n          },\n          description: \"Tracks price trends, earnings revisions, and technical indicators\"\n        },\n        \n        sentiment: {\n          overall: parseFloat(latestScore.sentiment_score) || 0,\n          components: {\n            analystSentiment: parseFloat(latestScore.analyst_sentiment_subscore) || 0,\n            socialSentiment: parseFloat(latestScore.social_sentiment_subscore) || 0,\n            newsSentiment: parseFloat(latestScore.news_sentiment_subscore) || 0\n          },\n          description: \"Aggregates analyst recommendations, social media sentiment, and news sentiment\"\n        },\n        \n        positioning: {\n          overall: parseFloat(latestScore.positioning_score) || 0,\n          components: {\n            institutional: parseFloat(latestScore.institutional_subscore) || 0,\n            insider: parseFloat(latestScore.insider_subscore) || 0,\n            shortInterest: parseFloat(latestScore.short_interest_subscore) || 0\n          },\n          description: \"Monitors institutional ownership, insider trading, and short interest dynamics\"\n        }\n      },\n      \n      sectorComparison: {\n        sectorName: latestScore.sector,\n        peerCount: parseInt(sectorBenchmark.peer_count) || 0,\n        benchmarks: {\n          composite: parseFloat(sectorBenchmark.avg_composite) || 0,\n          quality: parseFloat(sectorBenchmark.avg_quality) || 0,\n          value: parseFloat(sectorBenchmark.avg_value) || 0\n        },\n        relativeTo: {\n          composite: (parseFloat(latestScore.composite_score) || 0) - (parseFloat(sectorBenchmark.avg_composite) || 0),\n          quality: (parseFloat(latestScore.quality_score) || 0) - (parseFloat(sectorBenchmark.avg_quality) || 0),\n          value: (parseFloat(latestScore.value_score) || 0) - (parseFloat(sectorBenchmark.avg_value) || 0)\n        }\n      },\n      \n      historicalTrend: historicalScores.map(row => ({\n        date: row.date,\n        composite: parseFloat(row.composite_score) || 0,\n        quality: parseFloat(row.quality_score) || 0,\n        value: parseFloat(row.value_score) || 0,\n        growth: parseFloat(row.growth_score) || 0,\n        momentum: parseFloat(row.momentum_score) || 0,\n        sentiment: parseFloat(row.sentiment_score) || 0,\n        positioning: parseFloat(row.positioning_score) || 0\n      })),\n      \n      metadata: {\n        scoreDate: latestScore.date,\n        confidence: parseFloat(latestScore.confidence_score) || 0,\n        completeness: parseFloat(latestScore.data_completeness) || 0,\n        sectorAdjusted: parseFloat(latestScore.sector_adjusted_score) || 0,\n        percentileRank: parseFloat(latestScore.percentile_rank) || 0,\n        marketRegime: latestScore.market_regime || 'normal',\n        lastUpdated: latestScore.updated_at\n      },\n      \n      interpretation: generateScoreInterpretation(latestScore),\n      \n      timestamp: new Date().toISOString()\n    };\n\n    res.json(response);\n\n  } catch (error) {\n    console.error('Error getting detailed scores:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch detailed scores',\n      message: error.message,\n      symbol: req.params.symbol,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get sector analysis and rankings\nrouter.get('/sectors/analysis', async (req, res) => {\n  try {\n    console.log('Getting sector analysis');\n\n    const sectorQuery = `\n      SELECT \n        s.sector,\n        COUNT(*) as stock_count,\n        AVG(sc.composite_score) as avg_composite,\n        AVG(sc.quality_score) as avg_quality,\n        AVG(sc.value_score) as avg_value,\n        AVG(sc.growth_score) as avg_growth,\n        AVG(sc.momentum_score) as avg_momentum,\n        AVG(sc.sentiment_score) as avg_sentiment,\n        AVG(sc.positioning_score) as avg_positioning,\n        STDDEV(sc.composite_score) as score_volatility,\n        MAX(sc.composite_score) as max_score,\n        MIN(sc.composite_score) as min_score,\n        MAX(sc.updated_at) as last_updated\n      FROM symbols s\n      INNER JOIN stock_scores sc ON s.symbol = sc.symbol\n      WHERE sc.date = (\n        SELECT MAX(date) FROM stock_scores sc2 WHERE sc2.symbol = s.symbol\n      )\n      AND s.sector IS NOT NULL\n      AND sc.composite_score IS NOT NULL\n      GROUP BY s.sector\n      HAVING COUNT(*) >= 5\n      ORDER BY avg_composite DESC\n    `;\n\n    const sectorResult = await query(sectorQuery);\n\n    const sectors = sectorResult.rows.map(row => ({\n      sector: row.sector,\n      stockCount: parseInt(row.stock_count),\n      averageScores: {\n        composite: parseFloat(row.avg_composite).toFixed(2),\n        quality: parseFloat(row.avg_quality).toFixed(2),\n        value: parseFloat(row.avg_value).toFixed(2),\n        growth: parseFloat(row.avg_growth).toFixed(2),\n        momentum: parseFloat(row.avg_momentum).toFixed(2),\n        sentiment: parseFloat(row.avg_sentiment).toFixed(2),\n        positioning: parseFloat(row.avg_positioning).toFixed(2)\n      },\n      scoreRange: {\n        min: parseFloat(row.min_score).toFixed(2),\n        max: parseFloat(row.max_score).toFixed(2),\n        volatility: parseFloat(row.score_volatility).toFixed(2)\n      },\n      lastUpdated: row.last_updated\n    }));\n\n    res.json({\n      sectors,\n      summary: {\n        totalSectors: sectors.length,\n        bestPerforming: sectors[0],\n        mostVolatile: sectors.reduce((prev, current) => \n          parseFloat(prev.scoreRange.volatility) > parseFloat(current.scoreRange.volatility) ? prev : current\n        ),\n        averageComposite: (sectors.reduce((sum, s) => sum + parseFloat(s.averageScores.composite), 0) / sectors.length).toFixed(2)\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error in sector analysis:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch sector analysis',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get top scoring stocks by category\nrouter.get('/top/:category', async (req, res) => {\n  try {\n    const category = req.params.category.toLowerCase();\n    const limit = Math.min(parseInt(req.query.limit) || 25, 100);\n    \n    const validCategories = ['composite', 'quality', 'value', 'growth', 'momentum', 'sentiment', 'positioning'];\n    if (!validCategories.includes(category)) {\n      return res.status(400).json({\n        error: 'Invalid category',\n        validCategories,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const scoreColumn = category === 'composite' ? 'composite_score' : `${category}_score`;\n\n    const topStocksQuery = `\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        s.sector,\n        s.market_cap,\n        s.current_price,\n        sc.composite_score,\n        sc.${scoreColumn} as category_score,\n        sc.confidence_score,\n        sc.percentile_rank,\n        sc.updated_at\n      FROM stock_scores sc\n      INNER JOIN stock_symbols ss ON sc.symbol = ss.symbol\n      LEFT JOIN symbols s ON sc.symbol = s.symbol\n      WHERE sc.date = (\n        SELECT MAX(date) FROM stock_scores sc2 WHERE sc2.symbol = sc.symbol\n      )\n      AND sc.${scoreColumn} IS NOT NULL\n      AND sc.confidence_score >= 0.7\n      ORDER BY sc.${scoreColumn} DESC\n      LIMIT $1\n    `;\n\n    const result = await query(topStocksQuery, [limit]);\n\n    const topStocks = result.rows.map(row => ({\n      symbol: row.symbol,\n      companyName: row.company_name,\n      sector: row.sector,\n      marketCap: row.market_cap,\n      currentPrice: row.current_price,\n      compositeScore: parseFloat(row.composite_score),\n      categoryScore: parseFloat(row.category_score),\n      confidence: parseFloat(row.confidence_score),\n      percentileRank: parseFloat(row.percentile_rank),\n      lastUpdated: row.updated_at\n    }));\n\n    res.json({\n      category: category.toUpperCase(),\n      topStocks,\n      summary: {\n        count: topStocks.length,\n        averageScore: topStocks.length > 0 ? \n          (topStocks.reduce((sum, s) => sum + s.categoryScore, 0) / topStocks.length).toFixed(2) : 0,\n        highestScore: topStocks.length > 0 ? topStocks[0].categoryScore.toFixed(2) : 0,\n        lowestScore: topStocks.length > 0 ? topStocks[topStocks.length - 1].categoryScore.toFixed(2) : 0\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error getting top stocks:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch top stocks',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nfunction generateScoreInterpretation(scoreData) {\n  const composite = parseFloat(scoreData.composite_score) || 0;\n  const quality = parseFloat(scoreData.quality_score) || 0;\n  const value = parseFloat(scoreData.value_score) || 0;\n  const growth = parseFloat(scoreData.growth_score) || 0;\n  \n  let interpretation = {\n    overall: '',\n    strengths: [],\n    concerns: [],\n    recommendation: ''\n  };\n  \n  // Overall assessment\n  if (composite >= 80) {\n    interpretation.overall = 'Exceptional investment opportunity with strong fundamentals across multiple factors';\n  } else if (composite >= 70) {\n    interpretation.overall = 'Strong investment candidate with solid fundamentals';\n  } else if (composite >= 60) {\n    interpretation.overall = 'Reasonable investment option with mixed signals';\n  } else if (composite >= 50) {\n    interpretation.overall = 'Below-average investment profile with some concerns';\n  } else {\n    interpretation.overall = 'Poor investment profile with significant risks';\n  }\n  \n  // Identify strengths\n  if (quality >= 75) interpretation.strengths.push('High-quality financial statements and management');\n  if (value >= 75) interpretation.strengths.push('Attractive valuation with margin of safety');\n  if (growth >= 75) interpretation.strengths.push('Strong growth prospects and momentum');\n  \n  // Identify concerns\n  if (quality <= 40) interpretation.concerns.push('Weak financial quality and balance sheet concerns');\n  if (value <= 40) interpretation.concerns.push('Overvalued relative to fundamentals');\n  if (growth <= 40) interpretation.concerns.push('Limited growth prospects');\n  \n  // Investment recommendation\n  if (composite >= 80 && quality >= 70) {\n    interpretation.recommendation = 'BUY - Strong fundamentals with attractive risk-adjusted returns';\n  } else if (composite >= 70) {\n    interpretation.recommendation = 'BUY - Solid investment opportunity';\n  } else if (composite >= 60) {\n    interpretation.recommendation = 'HOLD - Monitor for improvements';\n  } else if (composite >= 50) {\n    interpretation.recommendation = 'WEAK HOLD - Consider reducing position';\n  } else {\n    interpretation.recommendation = 'SELL - Poor fundamentals warrant exit';\n  }\n  \n  return interpretation;\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}