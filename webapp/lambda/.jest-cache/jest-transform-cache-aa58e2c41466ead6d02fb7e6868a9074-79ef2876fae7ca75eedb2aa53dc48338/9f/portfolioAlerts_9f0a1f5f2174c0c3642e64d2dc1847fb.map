{"version":3,"names":["cov_eo0t8zg08","actualCoverage","query","s","require","createLogger","PortfolioAlerts","constructor","f","logger","correlationId","generateCorrelationId","alertTypes","ALLOCATION_DRIFT","POSITION_GAIN_LOSS","PORTFOLIO_VALUE_CHANGE","SECTOR_CONCENTRATION","POSITION_SIZE_CHANGE","DIVIDEND_PAYMENT","EARNINGS_ANNOUNCEMENT","BETA_CHANGE","REBALANCE_NEEDED","alertSeverity","LOW","MEDIUM","HIGH","CRITICAL","Date","now","Math","random","toString","substr","createPortfolioAlert","userId","alertConfig","alertType","symbol","b","threshold","condition","isActive","notificationPreferences","expiryDate","message","Error","Object","values","includes","result","JSON","stringify","info","alertId","rows","id","error","getUserPortfolioAlerts","filters","whereClause","params","paramIndex","push","undefined","processUserPortfolioAlerts","alerts","length","processedCount","triggeredCount","portfolioData","getPortfolioData","warn","alert","shouldTrigger","checkAlertCondition","triggerPortfolioAlert","alert_type","checkAllocationDrift","checkPositionGainLoss","checkPortfolioValueChange","checkSectorConcentration","checkPositionSizeChange","checkBetaChange","checkRebalanceNeeded","holdings","targetAllocation","currentAllocation","calculateCurrentAllocation","targetPercent","entries","currentPercent","drift","abs","position","find","h","gainLossPercent","parseFloat","gain_loss_percent","summary","previousSummary","currentValue","totalValue","previousValue","changePercent","sectorAllocation","reduce","sum","market_value","forEach","holding","sector","value","percentage","positionPercent","portfolioBeta","allocation","beta","topPosition","max","topPositionPercent","holdingsResult","summaryResult","previousSummaryResult","recentTrigger","checkRecentTrigger","notification","createPortfolioNotification","updateAlertTriggerCount","user_id","windowMinutes","parseInt","count","severity","calculateAlertSeverity","formatAlertMessage","total_value","toFixed","getPortfolioAlertNotifications","limit","updatePortfolioAlert","updates","deletePortfolioAlert","module","exports"],"sources":["portfolioAlerts.js"],"sourcesContent":["const { query } = require('./database');\nconst { createLogger } = require('./structuredLogger');\n\nclass PortfolioAlerts {\n  constructor() {\n    this.logger = createLogger('financial-platform', 'portfolio-alerts');\n    this.correlationId = this.generateCorrelationId();\n    \n    this.alertTypes = {\n      ALLOCATION_DRIFT: 'allocation_drift',\n      POSITION_GAIN_LOSS: 'position_gain_loss',\n      PORTFOLIO_VALUE_CHANGE: 'portfolio_value_change',\n      SECTOR_CONCENTRATION: 'sector_concentration',\n      POSITION_SIZE_CHANGE: 'position_size_change',\n      DIVIDEND_PAYMENT: 'dividend_payment',\n      EARNINGS_ANNOUNCEMENT: 'earnings_announcement',\n      BETA_CHANGE: 'beta_change',\n      REBALANCE_NEEDED: 'rebalance_needed'\n    };\n    \n    this.alertSeverity = {\n      LOW: 'low',\n      MEDIUM: 'medium',\n      HIGH: 'high',\n      CRITICAL: 'critical'\n    };\n  }\n\n  generateCorrelationId() {\n    return `portfolio-alerts-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Create a portfolio alert\n   */\n  async createPortfolioAlert(userId, alertConfig) {\n    try {\n      const {\n        alertType,\n        symbol = null,\n        threshold,\n        condition,\n        isActive = true,\n        notificationPreferences = {},\n        expiryDate = null,\n        message = null\n      } = alertConfig;\n\n      // Validate alert configuration\n      if (!alertType || !threshold || !condition) {\n        throw new Error('Missing required alert parameters');\n      }\n\n      if (!Object.values(this.alertTypes).includes(alertType)) {\n        throw new Error('Invalid alert type');\n      }\n\n      // Insert alert into database\n      const result = await query(`\n        INSERT INTO portfolio_alerts (\n          user_id, alert_type, symbol, threshold, condition, \n          is_active, notification_preferences, expiry_date, \n          message, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW())\n        RETURNING *\n      `, [\n        userId, alertType, symbol, threshold, condition,\n        isActive, JSON.stringify(notificationPreferences), \n        expiryDate, message\n      ]);\n\n      this.logger.info('Portfolio alert created', {\n        alertId: result.rows[0].id,\n        userId,\n        alertType,\n        symbol,\n        correlationId: this.correlationId\n      });\n\n      return result.rows[0];\n    } catch (error) {\n      this.logger.error('Error creating portfolio alert', {\n        userId,\n        alertType: alertConfig.alertType,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get user's portfolio alerts\n   */\n  async getUserPortfolioAlerts(userId, filters = {}) {\n    try {\n      let whereClause = 'WHERE user_id = $1';\n      const params = [userId];\n      let paramIndex = 2;\n\n      if (filters.alertType) {\n        whereClause += ` AND alert_type = $${paramIndex}`;\n        params.push(filters.alertType);\n        paramIndex++;\n      }\n\n      if (filters.symbol) {\n        whereClause += ` AND symbol = $${paramIndex}`;\n        params.push(filters.symbol);\n        paramIndex++;\n      }\n\n      if (filters.isActive !== undefined) {\n        whereClause += ` AND is_active = $${paramIndex}`;\n        params.push(filters.isActive);\n        paramIndex++;\n      }\n\n      const result = await query(`\n        SELECT \n          pa.*,\n          (\n            SELECT COUNT(*) FROM portfolio_alert_notifications pan \n            WHERE pan.alert_id = pa.id\n          ) as notification_count,\n          (\n            SELECT MAX(created_at) FROM portfolio_alert_notifications pan \n            WHERE pan.alert_id = pa.id\n          ) as last_triggered\n        FROM portfolio_alerts pa\n        ${whereClause}\n        ORDER BY pa.created_at DESC\n      `, params);\n\n      return result.rows;\n    } catch (error) {\n      this.logger.error('Error fetching user portfolio alerts', {\n        userId,\n        filters,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Process portfolio alerts for a user\n   */\n  async processUserPortfolioAlerts(userId) {\n    try {\n      this.logger.info('Processing portfolio alerts for user', {\n        userId,\n        correlationId: this.correlationId\n      });\n\n      // Get user's active alerts\n      const alerts = await this.getUserPortfolioAlerts(userId, { isActive: true });\n\n      if (alerts.length === 0) {\n        return { processedCount: 0, triggeredCount: 0 };\n      }\n\n      // Get current portfolio data\n      const portfolioData = await this.getPortfolioData(userId);\n      \n      if (!portfolioData) {\n        this.logger.warn('No portfolio data found for user', {\n          userId,\n          correlationId: this.correlationId\n        });\n        return { processedCount: 0, triggeredCount: 0 };\n      }\n\n      let triggeredCount = 0;\n\n      // Process each alert\n      for (const alert of alerts) {\n        try {\n          const shouldTrigger = await this.checkAlertCondition(alert, portfolioData);\n          \n          if (shouldTrigger) {\n            await this.triggerPortfolioAlert(alert, portfolioData);\n            triggeredCount++;\n          }\n        } catch (error) {\n          this.logger.error('Error processing portfolio alert', {\n            alertId: alert.id,\n            userId,\n            error: error.message,\n            correlationId: this.correlationId\n          });\n        }\n      }\n\n      return { processedCount: alerts.length, triggeredCount };\n    } catch (error) {\n      this.logger.error('Error processing user portfolio alerts', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Check if alert condition is met\n   */\n  async checkAlertCondition(alert, portfolioData) {\n    const { alert_type, condition, threshold, symbol } = alert;\n\n    switch (alert_type) {\n      case this.alertTypes.ALLOCATION_DRIFT:\n        return this.checkAllocationDrift(portfolioData, threshold, condition);\n      \n      case this.alertTypes.POSITION_GAIN_LOSS:\n        return this.checkPositionGainLoss(portfolioData, symbol, threshold, condition);\n      \n      case this.alertTypes.PORTFOLIO_VALUE_CHANGE:\n        return this.checkPortfolioValueChange(portfolioData, threshold, condition);\n      \n      case this.alertTypes.SECTOR_CONCENTRATION:\n        return this.checkSectorConcentration(portfolioData, threshold, condition);\n      \n      case this.alertTypes.POSITION_SIZE_CHANGE:\n        return this.checkPositionSizeChange(portfolioData, symbol, threshold, condition);\n      \n      case this.alertTypes.BETA_CHANGE:\n        return this.checkBetaChange(portfolioData, threshold, condition);\n      \n      case this.alertTypes.REBALANCE_NEEDED:\n        return this.checkRebalanceNeeded(portfolioData, threshold);\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check allocation drift\n   */\n  checkAllocationDrift(portfolioData, threshold, condition) {\n    const { holdings, targetAllocation } = portfolioData;\n    \n    if (!targetAllocation) return false;\n\n    const currentAllocation = this.calculateCurrentAllocation(holdings);\n    \n    for (const [symbol, targetPercent] of Object.entries(targetAllocation)) {\n      const currentPercent = currentAllocation[symbol] || 0;\n      const drift = Math.abs(currentPercent - targetPercent);\n      \n      if (drift > threshold) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Check position gain/loss\n   */\n  checkPositionGainLoss(portfolioData, symbol, threshold, condition) {\n    const { holdings } = portfolioData;\n    const position = holdings.find(h => h.symbol === symbol);\n    \n    if (!position) return false;\n\n    const gainLossPercent = parseFloat(position.gain_loss_percent || 0);\n    \n    switch (condition) {\n      case 'above':\n        return gainLossPercent > threshold;\n      case 'below':\n        return gainLossPercent < threshold;\n      case 'absolute_above':\n        return Math.abs(gainLossPercent) > threshold;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check portfolio value change\n   */\n  checkPortfolioValueChange(portfolioData, threshold, condition) {\n    const { summary, previousSummary } = portfolioData;\n    \n    if (!previousSummary) return false;\n\n    const currentValue = parseFloat(summary.totalValue || 0);\n    const previousValue = parseFloat(previousSummary.totalValue || 0);\n    \n    if (previousValue === 0) return false;\n\n    const changePercent = ((currentValue - previousValue) / previousValue) * 100;\n    \n    switch (condition) {\n      case 'increase_above':\n        return changePercent > threshold;\n      case 'decrease_below':\n        return changePercent < -threshold;\n      case 'change_above':\n        return Math.abs(changePercent) > threshold;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check sector concentration\n   */\n  checkSectorConcentration(portfolioData, threshold, condition) {\n    const { holdings } = portfolioData;\n    const sectorAllocation = {};\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    \n    if (totalValue === 0) return false;\n\n    // Calculate sector allocations\n    holdings.forEach(holding => {\n      const sector = holding.sector || 'Other';\n      const value = parseFloat(holding.market_value || 0);\n      sectorAllocation[sector] = (sectorAllocation[sector] || 0) + value;\n    });\n\n    // Check if any sector exceeds threshold\n    for (const [sector, value] of Object.entries(sectorAllocation)) {\n      const percentage = (value / totalValue) * 100;\n      if (percentage > threshold) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Check position size change\n   */\n  checkPositionSizeChange(portfolioData, symbol, threshold, condition) {\n    const { holdings } = portfolioData;\n    const position = holdings.find(h => h.symbol === symbol);\n    \n    if (!position) return false;\n\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    const positionPercent = totalValue > 0 ? (parseFloat(position.market_value || 0) / totalValue) * 100 : 0;\n    \n    switch (condition) {\n      case 'above':\n        return positionPercent > threshold;\n      case 'below':\n        return positionPercent < threshold;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check beta change\n   */\n  checkBetaChange(portfolioData, threshold, condition) {\n    const { holdings } = portfolioData;\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    \n    if (totalValue === 0) return false;\n\n    // Calculate weighted portfolio beta\n    const portfolioBeta = holdings.reduce((sum, h) => {\n      const allocation = parseFloat(h.market_value || 0) / totalValue;\n      const beta = parseFloat(h.beta || 1);\n      return sum + (allocation * beta);\n    }, 0);\n\n    switch (condition) {\n      case 'above':\n        return portfolioBeta > threshold;\n      case 'below':\n        return portfolioBeta < threshold;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check if rebalancing is needed\n   */\n  checkRebalanceNeeded(portfolioData, threshold) {\n    // This is a simplified check - in practice, you'd want more sophisticated logic\n    const { holdings } = portfolioData;\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    \n    if (totalValue === 0) return false;\n\n    // Check for concentration risk\n    const topPosition = holdings.reduce((max, h) => {\n      const value = parseFloat(h.market_value || 0);\n      return value > max ? value : max;\n    }, 0);\n\n    const topPositionPercent = (topPosition / totalValue) * 100;\n    \n    return topPositionPercent > threshold;\n  }\n\n  /**\n   * Calculate current allocation\n   */\n  calculateCurrentAllocation(holdings) {\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    const allocation = {};\n    \n    holdings.forEach(holding => {\n      const symbol = holding.symbol;\n      const value = parseFloat(holding.market_value || 0);\n      allocation[symbol] = totalValue > 0 ? (value / totalValue) * 100 : 0;\n    });\n    \n    return allocation;\n  }\n\n  /**\n   * Get portfolio data for alert processing\n   */\n  async getPortfolioData(userId) {\n    try {\n      // Get current holdings\n      const holdingsResult = await query(`\n        SELECT \n          h.symbol,\n          h.shares,\n          h.avg_cost,\n          h.current_price,\n          h.market_value,\n          h.gain_loss,\n          h.gain_loss_percent,\n          h.sector,\n          h.industry,\n          h.beta,\n          h.last_updated\n        FROM portfolio_holdings h\n        WHERE h.user_id = $1 AND h.shares > 0\n        ORDER BY h.market_value DESC\n      `, [userId]);\n\n      const holdings = holdingsResult.rows;\n\n      // Get portfolio summary\n      const summaryResult = await query(`\n        SELECT \n          SUM(market_value) as total_value,\n          SUM(gain_loss) as total_gain_loss,\n          COUNT(*) as positions_count\n        FROM portfolio_holdings\n        WHERE user_id = $1 AND shares > 0\n      `, [userId]);\n\n      const summary = summaryResult.rows[0];\n\n      // Get previous day's summary for comparison\n      const previousSummaryResult = await query(`\n        SELECT \n          total_value,\n          total_gain_loss,\n          positions_count,\n          snapshot_date\n        FROM portfolio_snapshots\n        WHERE user_id = $1 \n        AND snapshot_date < CURRENT_DATE\n        ORDER BY snapshot_date DESC\n        LIMIT 1\n      `, [userId]);\n\n      const previousSummary = previousSummaryResult.rows[0] || null;\n\n      return {\n        holdings,\n        summary,\n        previousSummary,\n        targetAllocation: null // This would come from user's target allocation settings\n      };\n    } catch (error) {\n      this.logger.error('Error fetching portfolio data', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Trigger portfolio alert\n   */\n  async triggerPortfolioAlert(alert, portfolioData) {\n    try {\n      // Check if alert was triggered recently\n      const recentTrigger = await this.checkRecentTrigger(alert.id);\n      if (recentTrigger) {\n        return;\n      }\n\n      // Create notification record\n      const notification = await this.createPortfolioNotification(alert, portfolioData);\n      \n      // Update alert trigger count\n      await this.updateAlertTriggerCount(alert.id);\n      \n      this.logger.info('Portfolio alert triggered', {\n        alertId: alert.id,\n        userId: alert.user_id,\n        alertType: alert.alert_type,\n        symbol: alert.symbol,\n        correlationId: this.correlationId\n      });\n\n      return notification;\n    } catch (error) {\n      this.logger.error('Error triggering portfolio alert', {\n        alertId: alert.id,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Check recent trigger\n   */\n  async checkRecentTrigger(alertId, windowMinutes = 240) { // 4 hours default\n    try {\n      const result = await query(`\n        SELECT COUNT(*) as count\n        FROM portfolio_alert_notifications\n        WHERE alert_id = $1\n        AND created_at > NOW() - INTERVAL '${windowMinutes} minutes'\n      `, [alertId]);\n\n      return parseInt(result.rows[0].count) > 0;\n    } catch (error) {\n      this.logger.error('Error checking recent trigger', {\n        alertId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Create portfolio notification\n   */\n  async createPortfolioNotification(alert, portfolioData) {\n    try {\n      const severity = this.calculateAlertSeverity(alert, portfolioData);\n      const message = this.formatAlertMessage(alert, portfolioData);\n\n      const result = await query(`\n        INSERT INTO portfolio_alert_notifications (\n          alert_id, user_id, alert_type, symbol, \n          severity, message, portfolio_data, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())\n        RETURNING *\n      `, [\n        alert.id,\n        alert.user_id,\n        alert.alert_type,\n        alert.symbol,\n        severity,\n        message,\n        JSON.stringify(portfolioData.summary)\n      ]);\n\n      return result.rows[0];\n    } catch (error) {\n      this.logger.error('Error creating portfolio notification', {\n        alertId: alert.id,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate alert severity\n   */\n  calculateAlertSeverity(alert, portfolioData) {\n    const { alert_type, threshold } = alert;\n\n    switch (alert_type) {\n      case this.alertTypes.ALLOCATION_DRIFT:\n        return threshold > 10 ? this.alertSeverity.HIGH : this.alertSeverity.MEDIUM;\n      \n      case this.alertTypes.POSITION_GAIN_LOSS:\n        return Math.abs(threshold) > 20 ? this.alertSeverity.HIGH : this.alertSeverity.MEDIUM;\n      \n      case this.alertTypes.PORTFOLIO_VALUE_CHANGE:\n        return Math.abs(threshold) > 15 ? this.alertSeverity.HIGH : this.alertSeverity.MEDIUM;\n      \n      case this.alertTypes.SECTOR_CONCENTRATION:\n        return threshold > 40 ? this.alertSeverity.HIGH : this.alertSeverity.MEDIUM;\n      \n      case this.alertTypes.REBALANCE_NEEDED:\n        return this.alertSeverity.HIGH;\n      \n      default:\n        return this.alertSeverity.MEDIUM;\n    }\n  }\n\n  /**\n   * Format alert message\n   */\n  formatAlertMessage(alert, portfolioData) {\n    const { alert_type, symbol, threshold, condition } = alert;\n    const { summary } = portfolioData;\n\n    switch (alert_type) {\n      case this.alertTypes.ALLOCATION_DRIFT:\n        return `Portfolio allocation has drifted beyond ${threshold}% threshold. Consider rebalancing.`;\n      \n      case this.alertTypes.POSITION_GAIN_LOSS:\n        return `Position ${symbol} has ${condition} ${threshold}% gain/loss threshold.`;\n      \n      case this.alertTypes.PORTFOLIO_VALUE_CHANGE:\n        return `Portfolio value has changed by more than ${threshold}%. Current value: $${parseFloat(summary.total_value || 0).toFixed(2)}`;\n      \n      case this.alertTypes.SECTOR_CONCENTRATION:\n        return `Sector concentration exceeds ${threshold}% threshold. Consider diversification.`;\n      \n      case this.alertTypes.POSITION_SIZE_CHANGE:\n        return `Position ${symbol} size has changed beyond ${threshold}% threshold.`;\n      \n      case this.alertTypes.BETA_CHANGE:\n        return `Portfolio beta has ${condition} ${threshold} threshold. Current risk level may need adjustment.`;\n      \n      case this.alertTypes.REBALANCE_NEEDED:\n        return `Portfolio rebalancing recommended. Top position exceeds ${threshold}% concentration.`;\n      \n      default:\n        return `Portfolio alert triggered for ${alert_type}.`;\n    }\n  }\n\n  /**\n   * Update alert trigger count\n   */\n  async updateAlertTriggerCount(alertId) {\n    try {\n      await query(`\n        UPDATE portfolio_alerts \n        SET trigger_count = trigger_count + 1,\n            last_triggered = NOW()\n        WHERE id = $1\n      `, [alertId]);\n    } catch (error) {\n      this.logger.error('Error updating alert trigger count', {\n        alertId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n    }\n  }\n\n  /**\n   * Get portfolio alert notifications\n   */\n  async getPortfolioAlertNotifications(userId, limit = 50) {\n    try {\n      const result = await query(`\n        SELECT \n          pan.*,\n          pa.alert_type,\n          pa.symbol,\n          pa.message as alert_message\n        FROM portfolio_alert_notifications pan\n        JOIN portfolio_alerts pa ON pan.alert_id = pa.id\n        WHERE pan.user_id = $1\n        ORDER BY pan.created_at DESC\n        LIMIT $2\n      `, [userId, limit]);\n\n      return result.rows;\n    } catch (error) {\n      this.logger.error('Error fetching portfolio alert notifications', {\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update alert\n   */\n  async updatePortfolioAlert(alertId, userId, updates) {\n    try {\n      const {\n        threshold,\n        condition,\n        isActive,\n        notificationPreferences,\n        expiryDate,\n        message\n      } = updates;\n\n      const result = await query(`\n        UPDATE portfolio_alerts \n        SET \n          threshold = COALESCE($3, threshold),\n          condition = COALESCE($4, condition),\n          is_active = COALESCE($5, is_active),\n          notification_preferences = COALESCE($6, notification_preferences),\n          expiry_date = COALESCE($7, expiry_date),\n          message = COALESCE($8, message),\n          updated_at = NOW()\n        WHERE id = $1 AND user_id = $2\n        RETURNING *\n      `, [alertId, userId, threshold, condition, isActive, \n          notificationPreferences ? JSON.stringify(notificationPreferences) : null,\n          expiryDate, message]);\n\n      if (result.rows.length === 0) {\n        throw new Error('Portfolio alert not found or access denied');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      this.logger.error('Error updating portfolio alert', {\n        alertId,\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete portfolio alert\n   */\n  async deletePortfolioAlert(alertId, userId) {\n    try {\n      const result = await query(`\n        DELETE FROM portfolio_alerts \n        WHERE id = $1 AND user_id = $2\n        RETURNING *\n      `, [alertId, userId]);\n\n      if (result.rows.length === 0) {\n        throw new Error('Portfolio alert not found or access denied');\n      }\n\n      return result.rows[0];\n    } catch (error) {\n      this.logger.error('Error deleting portfolio alert', {\n        alertId,\n        userId,\n        error: error.message,\n        correlationId: this.correlationId\n      });\n      throw error;\n    }\n  }\n}\n\nmodule.exports = PortfolioAlerts;"],"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","ignoreList":[]}