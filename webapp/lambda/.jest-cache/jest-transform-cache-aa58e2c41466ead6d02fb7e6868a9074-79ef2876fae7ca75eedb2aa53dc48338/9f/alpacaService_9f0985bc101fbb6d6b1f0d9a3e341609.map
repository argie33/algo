{"version":3,"names":["cov_1xq1p2yoek","actualCoverage","axios","s","require","getTimeout","withTradingTimeout","AlpacaService","constructor","apiKey","apiSecret","isPaper","b","f","Error","baseURL","dataURL","wsURL","axiosConfig","timeout","headers","retry","retryDelay","validateStatus","status","api","create","dataApi","setupRetryInterceptors","circuitBreaker","failures","lastFailureTime","isOpen","threshold","halfOpenMaxCalls","rateLimitWindow","maxRequestsPerWindow","requestTimes","adaptiveRateLimit","consecutiveFailures","baseDelay","maxDelay","backoffMultiplier","retryInterceptor","axiosInstance","interceptors","response","use","error","config","__retryCount","Promise","reject","console","log","url","delay","Math","pow","resolve","setTimeout","checkCircuitBreaker","now","Date","recordSuccess","recordFailure","warn","safeApiCall","apiCall","operationName","operationType","checkRateLimit","result","success","message","statusText","data","isTimeout","code","circuitBreakerState","windowStart","filter","time","currentUsage","length","min","toFixed","resetTime","ceil","push","getAccount","get","account","id","accountId","currency","buyingPower","parseFloat","buying_power","cash","portfolioValue","portfolio_value","equity","lastEquity","last_equity","dayTradeCount","parseInt","daytrade_count","dayTradingBuyingPower","daytrading_buying_power","regtBuyingPower","regt_buying_power","initialMargin","initial_margin","maintenanceMargin","maintenance_margin","longMarketValue","long_market_value","shortMarketValue","short_market_value","multiplier","createdAt","created_at","tradingBlocked","trading_blocked","transfersBlocked","transfers_blocked","accountBlocked","account_blocked","patternDayTrader","pattern_day_trader","environment","getPositions","positions","map","position","symbol","assetId","asset_id","exchange","assetClass","asset_class","quantity","qty","side","marketValue","market_value","costBasis","cost_basis","unrealizedPL","unrealized_pl","unrealizedPLPercent","unrealized_plpc","unrealizedIntradayPL","unrealized_intraday_pl","unrealizedIntradayPLPercent","unrealized_intraday_plpc","currentPrice","current_price","lastDayPrice","lastday_price","changeToday","change_today","averageEntryPrice","avg_entry_price","qtyAvailable","qty_available","lastUpdated","toISOString","getPortfolioHistory","period","timeframe","portfolio","timestamp","history","i","date","split","profitLoss","profit_loss","profitLossPercent","profit_loss_pct","baseValue","base_value","sort","a","getMultiQuotes","symbols","symbolsStr","join","quotes","Object","keys","price","ap","bp","bid","ask","bidSize","bs","askSize","as","t","ax","getBars","params","start","end","limit","queryParams","URLSearchParams","toString","append","bars","bar","open","o","high","h","low","l","close","c","volume","v","vwap","vw","getWebSocketConfig","feed","getActivities","activityTypes","pageSize","activity_types","page_size","activities","activity","activityType","activity_type","netAmount","net_amount","description","getMarketCalendar","calendar","day","sessionOpen","session_open","sessionClose","session_close","getMarketStatus","clock","is_open","nextOpen","next_open","nextClose","next_close","timezone","validateCredentials","valid","getAsset","asset","class","name","tradable","marginable","shortable","easyToBorrow","easy_to_borrow","fractionable","placeOrder","orderData","requiredFields","field","validSides","validTypes","validTimeInForce","includes","toLowerCase","type","time_in_force","orderPayload","toUpperCase","limit_price","stop_price","post","order","clientOrderId","client_order_id","filledQty","filled_qty","orderType","order_type","timeInForce","limitPrice","stopPrice","submittedAt","submitted_at","filledAt","filled_at","expiredAt","expired_at","canceledAt","canceled_at","failedAt","failed_at","getOrders","direction","orders","cancelOrder","orderId","delete","getPortfolioSummary","all","totalValue","totalPnL","reduce","sum","pos","totalPnLPercent","dayPnL","dayPnLPercent","sectorAllocation","calculateBasicSectorAllocation","riskMetrics","calculateBasicRiskMetrics","summary","totalCash","positionsCount","performance","slice","sectors","forEach","sector","getSectorFromSymbol","value","weight","techStocks","financialStocks","healthcareStocks","volatility","sharpeRatio","maxDrawdown","beta","returns","dailyReturn","avgReturn","r","variance","sqrt","peak","drawdown","riskFreeRate","excessReturn","averageDailyReturn","annualizedReturn","module","exports"],"sources":["alpacaService.js"],"sourcesContent":["const axios = require('axios');\nconst { getTimeout, withTradingTimeout } = require('./timeoutManager');\n\n/**\n * Alpaca Integration Service\n * \n * This service handles all Alpaca API operations for portfolio management.\n * It supports both paper trading (sandbox) and live trading environments.\n * \n * Security Features:\n * - API keys are never logged\n * - Supports both paper and live trading modes\n * - Rate limiting and error handling\n * - Data validation and sanitization\n */\n\nclass AlpacaService {\n  constructor(apiKey, apiSecret, isPaper = true) {\n    if (!apiKey || !apiSecret) {\n      throw new Error('Alpaca API key and secret are required');\n    }\n\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.isPaper = isPaper;\n    this.baseURL = isPaper \n      ? 'https://paper-api.alpaca.markets'\n      : 'https://api.alpaca.markets';\n    this.dataURL = 'https://data.alpaca.markets';\n    this.wsURL = 'wss://stream.data.alpaca.markets';\n    \n    // Enhanced configuration with standardized timeouts\n    const axiosConfig = {\n      baseURL: this.baseURL,\n      timeout: getTimeout('trading', 'standard'), // Standardized trading timeout\n      headers: {\n        'APCA-API-KEY-ID': this.apiKey,\n        'APCA-API-SECRET-KEY': this.apiSecret\n      },\n      retry: 3,\n      retryDelay: 1000,\n      validateStatus: function (status) {\n        return status >= 200 && status < 300; // Default\n      }\n    };\n\n    this.api = axios.create(axiosConfig);\n    this.dataApi = axios.create({\n      ...axiosConfig,\n      baseURL: this.dataURL\n    });\n\n    // Add retry interceptor for both APIs\n    this.setupRetryInterceptors();\n\n    // Circuit breaker configuration\n    this.circuitBreaker = {\n      failures: 0,\n      lastFailureTime: 0,\n      isOpen: false,\n      threshold: 5, // Open circuit after 5 failures\n      timeout: 60000, // 1 minute circuit breaker timeout\n      halfOpenMaxCalls: 3\n    };\n\n    this.rateLimitWindow = 60000; // 1 minute\n    this.maxRequestsPerWindow = 200;\n    this.requestTimes = [];\n    \n    // Enhanced rate limiting with adaptive throttling\n    this.adaptiveRateLimit = {\n      consecutiveFailures: 0,\n      baseDelay: 100, // Base delay in ms\n      maxDelay: 5000, // Max delay in ms\n      backoffMultiplier: 2\n    };\n  }\n\n  /**\n   * Setup retry interceptors for axios instances\n   */\n  setupRetryInterceptors() {\n    const retryInterceptor = (axiosInstance) => {\n      axiosInstance.interceptors.response.use(\n        (response) => response,\n        async (error) => {\n          const config = error.config;\n          \n          // Don't retry if we've exceeded max retries\n          if (!config || !config.retry || config.__retryCount >= config.retry) {\n            return Promise.reject(error);\n          }\n          \n          // Don't retry on 4xx errors (client errors)\n          if (error.response && error.response.status >= 400 && error.response.status < 500) {\n            return Promise.reject(error);\n          }\n          \n          // Increment retry count\n          config.__retryCount = config.__retryCount || 0;\n          config.__retryCount += 1;\n          \n          console.log(`🔄 Alpaca API retry ${config.__retryCount}/${config.retry} for ${config.url}`);\n          \n          // Wait before retrying with exponential backoff\n          const delay = config.retryDelay * Math.pow(2, config.__retryCount - 1);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          \n          return axiosInstance(config);\n        }\n      );\n    };\n    \n    retryInterceptor(this.api);\n    retryInterceptor(this.dataApi);\n  }\n\n  /**\n   * Circuit breaker check\n   */\n  checkCircuitBreaker() {\n    const now = Date.now();\n    \n    if (this.circuitBreaker.isOpen) {\n      if (now - this.circuitBreaker.lastFailureTime > this.circuitBreaker.timeout) {\n        // Circuit breaker timeout expired, move to half-open state\n        this.circuitBreaker.isOpen = false;\n        this.circuitBreaker.failures = 0;\n        console.log('🟡 Alpaca circuit breaker moved to HALF-OPEN state');\n      } else {\n        throw new Error('Alpaca API circuit breaker is OPEN. Service temporarily unavailable.');\n      }\n    }\n  }\n\n  /**\n   * Record circuit breaker success\n   */\n  recordSuccess() {\n    if (this.circuitBreaker.failures > 0) {\n      console.log('✅ Alpaca API call successful, resetting circuit breaker');\n      this.circuitBreaker.failures = 0;\n      this.circuitBreaker.isOpen = false;\n    }\n    \n    // Reset adaptive rate limiting failures on success\n    if (this.adaptiveRateLimit.consecutiveFailures > 0) {\n      console.log(`🎯 Adaptive rate limiting: Resetting failure count from ${this.adaptiveRateLimit.consecutiveFailures} to 0`);\n      this.adaptiveRateLimit.consecutiveFailures = 0;\n    }\n  }\n\n  /**\n   * Record circuit breaker failure\n   */\n  recordFailure() {\n    this.circuitBreaker.failures++;\n    this.circuitBreaker.lastFailureTime = Date.now();\n    \n    // Track consecutive failures for adaptive rate limiting\n    this.adaptiveRateLimit.consecutiveFailures++;\n    console.log(`⚠️ Adaptive rate limiting: Failure count increased to ${this.adaptiveRateLimit.consecutiveFailures}`);\n    \n    if (this.circuitBreaker.failures >= this.circuitBreaker.threshold) {\n      this.circuitBreaker.isOpen = true;\n      console.error(`🔴 Alpaca circuit breaker OPENED after ${this.circuitBreaker.failures} failures`);\n    } else {\n      console.warn(`⚠️ Alpaca failure ${this.circuitBreaker.failures}/${this.circuitBreaker.threshold}`);\n    }\n  }\n\n  /**\n   * Enhanced API call wrapper with circuit breaker and standardized timeouts\n   */\n  async safeApiCall(apiCall, operationName = 'API call', operationType = 'standard') {\n    try {\n      this.checkCircuitBreaker();\n      await this.checkRateLimit();\n      \n      // Use standardized timeout for trading operations\n      const result = await withTradingTimeout(\n        apiCall, \n        operationType,\n        null // logger will be added later if needed\n      );\n      \n      this.recordSuccess();\n      return result.success ? result.result : result;\n    } catch (error) {\n      this.recordFailure();\n      \n      // Enhanced error logging with timeout information\n      console.error(`❌ Alpaca ${operationName} failed:`, {\n        message: error.message,\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        operationType,\n        isTimeout: error.code === 'TIMEOUT',\n        timeout: error.timeout,\n        circuitBreakerState: this.circuitBreaker.isOpen ? 'OPEN' : 'CLOSED',\n        failures: this.circuitBreaker.failures\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Rate limiting check\n   */\n  checkRateLimit() {\n    const now = Date.now();\n    const windowStart = now - this.rateLimitWindow;\n    \n    // Remove old requests outside the window\n    this.requestTimes = this.requestTimes.filter(time => time > windowStart);\n    \n    // Calculate current usage percentage\n    const currentUsage = this.requestTimes.length / this.maxRequestsPerWindow;\n    \n    // Apply adaptive throttling based on usage and recent failures\n    if (currentUsage > 0.8 || this.adaptiveRateLimit.consecutiveFailures > 0) {\n      const delay = Math.min(\n        this.adaptiveRateLimit.baseDelay * Math.pow(this.adaptiveRateLimit.backoffMultiplier, this.adaptiveRateLimit.consecutiveFailures),\n        this.adaptiveRateLimit.maxDelay\n      );\n      \n      if (delay > 0) {\n        console.log(`🕰️ Adaptive throttling: ${delay}ms delay (usage: ${(currentUsage * 100).toFixed(1)}%, failures: ${this.adaptiveRateLimit.consecutiveFailures})`);\n        return new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    if (this.requestTimes.length >= this.maxRequestsPerWindow) {\n      const resetTime = Math.ceil((this.requestTimes[0] + this.rateLimitWindow - now) / 1000);\n      throw new Error(`Rate limit exceeded. Please try again in ${resetTime} seconds.`);\n    }\n    \n    this.requestTimes.push(now);\n  }\n\n  /**\n   * Get account information with enhanced error handling\n   */\n  async getAccount() {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.get('/v2/account');\n      const account = response.data;\n      \n      return {\n        id: account.id,\n        accountId: account.id,\n        status: account.status,\n        currency: account.currency,\n        buyingPower: parseFloat(account.buying_power || 0),\n        cash: parseFloat(account.cash || 0),\n        portfolioValue: parseFloat(account.portfolio_value || 0),\n        equity: parseFloat(account.equity || 0),\n        lastEquity: parseFloat(account.last_equity || 0),\n        dayTradeCount: parseInt(account.daytrade_count || 0),\n        dayTradingBuyingPower: parseFloat(account.daytrading_buying_power || 0),\n        regtBuyingPower: parseFloat(account.regt_buying_power || 0),\n        initialMargin: parseFloat(account.initial_margin || 0),\n        maintenanceMargin: parseFloat(account.maintenance_margin || 0),\n        longMarketValue: parseFloat(account.long_market_value || 0),\n        shortMarketValue: parseFloat(account.short_market_value || 0),\n        multiplier: parseFloat(account.multiplier || 1),\n        createdAt: account.created_at,\n        tradingBlocked: account.trading_blocked,\n        transfersBlocked: account.transfers_blocked,\n        accountBlocked: account.account_blocked,\n        patternDayTrader: account.pattern_day_trader,\n        environment: this.isPaper ? 'paper' : 'live'\n      };\n    }, 'account fetch', 'account');\n  }\n\n  /**\n   * Get all positions with enhanced error handling\n   */\n  async getPositions() {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.get('/v2/positions');\n      const positions = response.data;\n      \n      return positions.map(position => ({\n        symbol: position.symbol,\n        assetId: position.asset_id,\n        exchange: position.exchange,\n        assetClass: position.asset_class,\n        quantity: parseFloat(position.qty),\n        side: position.side,\n        marketValue: parseFloat(position.market_value),\n        costBasis: parseFloat(position.cost_basis),\n        unrealizedPL: parseFloat(position.unrealized_pl),\n        unrealizedPLPercent: parseFloat(position.unrealized_plpc),\n        unrealizedIntradayPL: parseFloat(position.unrealized_intraday_pl),\n        unrealizedIntradayPLPercent: parseFloat(position.unrealized_intraday_plpc),\n        currentPrice: parseFloat(position.current_price),\n        lastDayPrice: parseFloat(position.lastday_price),\n        changeToday: parseFloat(position.change_today),\n        averageEntryPrice: parseFloat(position.avg_entry_price),\n        qtyAvailable: parseFloat(position.qty_available),\n        lastUpdated: new Date().toISOString()\n      }));\n    }, 'positions fetch', 'positions');\n  }\n\n  /**\n   * Get portfolio history with enhanced error handling\n   */\n  async getPortfolioHistory(period = '1M', timeframe = '1Day') {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.get(`/v2/account/portfolio/history?period=${period}&timeframe=${timeframe}&extended_hours=true`);\n      const portfolio = response.data;\n\n      if (!portfolio.timestamp || !portfolio.equity) {\n        return [];\n      }\n\n      // Convert timestamps and equity values to a usable format\n      const history = [];\n      for (let i = 0; i < portfolio.timestamp.length; i++) {\n        if (portfolio.equity[i] !== null) {\n          history.push({\n            date: new Date(portfolio.timestamp[i] * 1000).toISOString().split('T')[0],\n            equity: parseFloat(portfolio.equity[i]),\n            profitLoss: portfolio.profit_loss ? parseFloat(portfolio.profit_loss[i]) : 0,\n            profitLossPercent: portfolio.profit_loss_pct ? parseFloat(portfolio.profit_loss_pct[i]) : 0,\n            baseValue: portfolio.base_value ? parseFloat(portfolio.base_value) : 0\n          });\n        }\n      }\n\n      return history.sort((a, b) => new Date(a.date) - new Date(b.date));\n    }, 'portfolio history fetch');\n  }\n\n  /**\n   * Get real-time quotes for multiple symbols with enhanced error handling\n   */\n  async getMultiQuotes(symbols) {\n    return await this.safeApiCall(async () => {\n      const symbolsStr = symbols.join(',');\n      const response = await this.dataApi.get(`/v2/stocks/quotes/latest?symbols=${symbolsStr}`);\n      const quotes = response.data.quotes;\n      \n      return Object.keys(quotes).map(symbol => ({\n        symbol: symbol,\n        price: quotes[symbol].ap || quotes[symbol].bp || 0,\n        bid: quotes[symbol].bp || 0,\n        ask: quotes[symbol].ap || 0,\n        bidSize: quotes[symbol].bs || 0,\n        askSize: quotes[symbol].as || 0,\n        timestamp: quotes[symbol].t,\n        timeframe: 'realtime',\n        exchange: quotes[symbol].ax || 'UNKNOWN'\n      }));\n    }, 'multi quotes fetch', 'quotes');\n  }\n\n  /**\n   * Get historical bars for a symbol with enhanced error handling\n   */\n  async getBars(symbol, params = {}) {\n    return await this.safeApiCall(async () => {\n      const { timeframe = '1Day', start, end, limit = 100 } = params;\n      const queryParams = new URLSearchParams({\n        symbols: symbol,\n        timeframe: timeframe,\n        limit: limit.toString()\n      });\n      \n      if (start) queryParams.append('start', start);\n      if (end) queryParams.append('end', end);\n      \n      const response = await this.dataApi.get(`/v2/stocks/bars?${queryParams}`);\n      const bars = response.data.bars[symbol] || [];\n      \n      return bars.map(bar => ({\n        timestamp: bar.t,\n        open: bar.o,\n        high: bar.h,\n        low: bar.l,\n        close: bar.c,\n        volume: bar.v,\n        vwap: bar.vw || null\n      }));\n    }, 'bars fetch');\n  }\n\n  /**\n   * Get websocket connection info for real-time data\n   */\n  getWebSocketConfig() {\n    return {\n      url: this.wsURL,\n      apiKey: this.apiKey,\n      apiSecret: this.apiSecret,\n      feed: 'iex' // IEX feed for basic data, 'sip' for premium\n    };\n  }\n\n  /**\n   * Get recent activities (orders, fills, etc.) with enhanced error handling\n   */\n  async getActivities(activityTypes = null, pageSize = 50) {\n    return await this.safeApiCall(async () => {\n      const params = new URLSearchParams({\n        activity_types: activityTypes || 'FILL',\n        page_size: pageSize\n      });\n      const response = await this.api.get(`/v2/account/activities?${params}`);\n      const activities = response.data;\n\n      return activities.map(activity => ({\n        id: activity.id,\n        activityType: activity.activity_type,\n        date: activity.date,\n        netAmount: parseFloat(activity.net_amount || 0),\n        symbol: activity.symbol,\n        qty: activity.qty ? parseFloat(activity.qty) : null,\n        price: activity.price ? parseFloat(activity.price) : null,\n        side: activity.side,\n        description: activity.description || activity.activity_type\n      }));\n    }, 'activities fetch');\n  }\n\n  /**\n   * Get market calendar with enhanced error handling\n   */\n  async getMarketCalendar(start = null, end = null) {\n    return await this.safeApiCall(async () => {\n      const params = new URLSearchParams();\n      if (start) params.append('start', start);\n      if (end) params.append('end', end);\n      const response = await this.api.get(`/v2/calendar?${params}`);\n      const calendar = response.data;\n\n      return calendar.map(day => ({\n        date: day.date,\n        open: day.open,\n        close: day.close,\n        sessionOpen: day.session_open,\n        sessionClose: day.session_close\n      }));\n    }, 'market calendar fetch');\n  }\n\n  /**\n   * Get current market status with enhanced error handling\n   */\n  async getMarketStatus() {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.get('/v2/clock');\n      const clock = response.data;\n      \n      return {\n        timestamp: clock.timestamp,\n        isOpen: clock.is_open,\n        nextOpen: clock.next_open,\n        nextClose: clock.next_close,\n        timezone: 'America/New_York'\n      };\n    }, 'market status fetch');\n  }\n\n  /**\n   * Validate API credentials with enhanced error handling\n   */\n  async validateCredentials() {\n    try {\n      return await this.safeApiCall(async () => {\n        // Simple test - try to get account info\n        const response = await this.api.get('/v2/account');\n        const account = response.data;\n        \n        return {\n          valid: true,\n          accountId: account.id,\n          status: account.status,\n          environment: this.isPaper ? 'paper' : 'live'\n        };\n      }, 'credential validation');\n    } catch (error) {\n      console.error('Alpaca credential validation error:', error.message);\n      \n      return {\n        valid: false,\n        error: error.message,\n        environment: this.isPaper ? 'paper' : 'live'\n      };\n    }\n  }\n\n  /**\n   * Get asset information for a symbol with enhanced error handling\n   */\n  async getAsset(symbol) {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.get(`/v2/assets/${symbol}`);\n      const asset = response.data;\n      \n      return {\n        id: asset.id,\n        class: asset.class,\n        exchange: asset.exchange,\n        symbol: asset.symbol,\n        name: asset.name,\n        status: asset.status,\n        tradable: asset.tradable,\n        marginable: asset.marginable,\n        shortable: asset.shortable,\n        easyToBorrow: asset.easy_to_borrow,\n        fractionable: asset.fractionable\n      };\n    }, 'asset information fetch');\n  }\n\n  /**\n   * Place an order with enhanced error handling and validation\n   */\n  async placeOrder(orderData) {\n    return await this.safeApiCall(async () => {\n      // Validate order data\n      const requiredFields = ['symbol', 'qty', 'side', 'type', 'time_in_force'];\n      for (const field of requiredFields) {\n        if (!orderData[field]) {\n          throw new Error(`Missing required order field: ${field}`);\n        }\n      }\n\n      // Validate order side and type\n      const validSides = ['buy', 'sell'];\n      const validTypes = ['market', 'limit', 'stop', 'stop_limit'];\n      const validTimeInForce = ['day', 'gtc', 'ioc', 'fok'];\n\n      if (!validSides.includes(orderData.side.toLowerCase())) {\n        throw new Error(`Invalid order side: ${orderData.side}. Must be one of: ${validSides.join(', ')}`);\n      }\n\n      if (!validTypes.includes(orderData.type.toLowerCase())) {\n        throw new Error(`Invalid order type: ${orderData.type}. Must be one of: ${validTypes.join(', ')}`);\n      }\n\n      if (!validTimeInForce.includes(orderData.time_in_force.toLowerCase())) {\n        throw new Error(`Invalid time_in_force: ${orderData.time_in_force}. Must be one of: ${validTimeInForce.join(', ')}`);\n      }\n\n      // Prepare order payload\n      const orderPayload = {\n        symbol: orderData.symbol.toUpperCase(),\n        qty: parseFloat(orderData.qty),\n        side: orderData.side.toLowerCase(),\n        type: orderData.type.toLowerCase(),\n        time_in_force: orderData.time_in_force.toLowerCase()\n      };\n\n      // Add limit price for limit orders\n      if (orderData.type.toLowerCase().includes('limit') && orderData.limit_price) {\n        orderPayload.limit_price = parseFloat(orderData.limit_price);\n      }\n\n      // Add stop price for stop orders\n      if (orderData.type.toLowerCase().includes('stop') && orderData.stop_price) {\n        orderPayload.stop_price = parseFloat(orderData.stop_price);\n      }\n\n      console.log('📤 Placing Alpaca order:', orderPayload);\n      const response = await this.api.post('/v2/orders', orderPayload);\n      const order = response.data;\n\n      return {\n        id: order.id,\n        clientOrderId: order.client_order_id,\n        symbol: order.symbol,\n        assetId: order.asset_id,\n        assetClass: order.asset_class,\n        qty: parseFloat(order.qty),\n        filledQty: parseFloat(order.filled_qty || 0),\n        side: order.side,\n        orderType: order.order_type,\n        timeInForce: order.time_in_force,\n        limitPrice: order.limit_price ? parseFloat(order.limit_price) : null,\n        stopPrice: order.stop_price ? parseFloat(order.stop_price) : null,\n        status: order.status,\n        submittedAt: order.submitted_at,\n        filledAt: order.filled_at,\n        expiredAt: order.expired_at,\n        canceledAt: order.canceled_at,\n        failedAt: order.failed_at,\n        environment: this.isPaper ? 'paper' : 'live'\n      };\n    }, 'order placement');\n  }\n\n  /**\n   * Get orders with enhanced error handling\n   */\n  async getOrders(status = 'all', limit = 50) {\n    return await this.safeApiCall(async () => {\n      const params = new URLSearchParams({\n        status: status,\n        limit: limit.toString(),\n        direction: 'desc'\n      });\n      \n      const response = await this.api.get(`/v2/orders?${params}`);\n      const orders = response.data;\n\n      return orders.map(order => ({\n        id: order.id,\n        clientOrderId: order.client_order_id,\n        symbol: order.symbol,\n        assetId: order.asset_id,\n        qty: parseFloat(order.qty),\n        filledQty: parseFloat(order.filled_qty || 0),\n        side: order.side,\n        orderType: order.order_type,\n        timeInForce: order.time_in_force,\n        limitPrice: order.limit_price ? parseFloat(order.limit_price) : null,\n        stopPrice: order.stop_price ? parseFloat(order.stop_price) : null,\n        status: order.status,\n        submittedAt: order.submitted_at,\n        filledAt: order.filled_at,\n        expiredAt: order.expired_at,\n        canceledAt: order.canceled_at,\n        failedAt: order.failed_at,\n        environment: this.isPaper ? 'paper' : 'live'\n      }));\n    }, 'orders fetch');\n  }\n\n  /**\n   * Cancel an order with enhanced error handling\n   */\n  async cancelOrder(orderId) {\n    return await this.safeApiCall(async () => {\n      const response = await this.api.delete(`/v2/orders/${orderId}`);\n      return response.data;\n    }, 'order cancellation');\n  }\n\n  /**\n   * Get portfolio summary with calculated metrics\n   */\n  async getPortfolioSummary() {\n    try {\n      const [account, positions, history] = await Promise.all([\n        this.getAccount(),\n        this.getPositions(),\n        this.getPortfolioHistory('1M', '1Day')\n      ]);\n\n      // Calculate portfolio metrics\n      const totalValue = account.portfolioValue;\n      const totalPnL = positions.reduce((sum, pos) => sum + pos.unrealizedPL, 0);\n      const totalPnLPercent = totalValue > 0 ? (totalPnL / (totalValue - totalPnL)) * 100 : 0;\n      \n      // Calculate day change\n      const dayPnL = positions.reduce((sum, pos) => sum + pos.unrealizedIntradayPL, 0);\n      const dayPnLPercent = positions.reduce((sum, pos) => sum + pos.unrealizedIntradayPLPercent, 0) / positions.length;\n\n      // Sector allocation (simplified - would need additional data for real sectors)\n      const sectorAllocation = this.calculateBasicSectorAllocation(positions);\n\n      // Risk metrics\n      const riskMetrics = this.calculateBasicRiskMetrics(positions, history);\n\n      return {\n        account: account,\n        summary: {\n          totalValue: totalValue,\n          totalCash: account.cash,\n          totalPnL: totalPnL,\n          totalPnLPercent: totalPnLPercent,\n          dayPnL: dayPnL,\n          dayPnLPercent: dayPnLPercent,\n          positionsCount: positions.length,\n          buyingPower: account.buyingPower\n        },\n        positions: positions,\n        sectorAllocation: sectorAllocation,\n        riskMetrics: riskMetrics,\n        performance: history.slice(-30), // Last 30 days\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Alpaca portfolio summary error:', error.message);\n      throw new Error(`Failed to generate portfolio summary: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate basic sector allocation (simplified)\n   */\n  calculateBasicSectorAllocation(positions) {\n    const sectors = {};\n    const totalValue = positions.reduce((sum, pos) => sum + pos.marketValue, 0);\n\n    positions.forEach(position => {\n      // This is a simplified sector mapping - in production you'd use a more comprehensive service\n      const sector = this.getSectorFromSymbol(position.symbol);\n      \n      if (!sectors[sector]) {\n        sectors[sector] = {\n          value: 0,\n          weight: 0,\n          positions: 0\n        };\n      }\n      \n      sectors[sector].value += position.marketValue;\n      sectors[sector].positions += 1;\n    });\n\n    // Calculate weights\n    Object.keys(sectors).forEach(sector => {\n      sectors[sector].weight = totalValue > 0 ? (sectors[sector].value / totalValue) * 100 : 0;\n    });\n\n    return sectors;\n  }\n\n  /**\n   * Simplified sector mapping (in production, use a proper sector classification service)\n   */\n  getSectorFromSymbol(symbol) {\n    const techStocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'CRM', 'ORCL', 'ADBE'];\n    const financialStocks = ['JPM', 'BAC', 'WFC', 'GS', 'MS', 'C', 'AXP', 'BLK', 'SCHW'];\n    const healthcareStocks = ['JNJ', 'PFE', 'UNH', 'ABBV', 'MRK', 'TMO', 'DHR', 'BMY', 'LLY'];\n    \n    if (techStocks.includes(symbol)) return 'Technology';\n    if (financialStocks.includes(symbol)) return 'Financials';\n    if (healthcareStocks.includes(symbol)) return 'Healthcare';\n    \n    return 'Other';\n  }\n\n  /**\n   * Calculate basic risk metrics\n   */\n  calculateBasicRiskMetrics(positions, history) {\n    if (history.length < 2) {\n      return {\n        volatility: 0,\n        sharpeRatio: 0,\n        maxDrawdown: 0,\n        beta: 1\n      };\n    }\n\n    // Calculate daily returns\n    const returns = [];\n    for (let i = 1; i < history.length; i++) {\n      const dailyReturn = (history[i].equity - history[i-1].equity) / history[i-1].equity;\n      returns.push(dailyReturn);\n    }\n\n    // Calculate volatility (standard deviation of returns)\n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n    const volatility = Math.sqrt(variance) * Math.sqrt(252); // Annualized\n\n    // Calculate max drawdown\n    let maxDrawdown = 0;\n    let peak = history[0].equity;\n    \n    history.forEach(day => {\n      if (day.equity > peak) {\n        peak = day.equity;\n      }\n      const drawdown = (peak - day.equity) / peak;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    });\n\n    // Simplified Sharpe ratio (assuming risk-free rate of 3%)\n    const riskFreeRate = 0.03;\n    const excessReturn = (avgReturn * 252) - riskFreeRate;\n    const sharpeRatio = volatility > 0 ? excessReturn / volatility : 0;\n\n    return {\n      volatility: volatility,\n      sharpeRatio: sharpeRatio,\n      maxDrawdown: maxDrawdown,\n      beta: 1, // Simplified - would need market data for real beta calculation\n      averageDailyReturn: avgReturn,\n      annualizedReturn: avgReturn * 252\n    };\n  }\n}\n\nmodule.exports = AlpacaService;"],"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","ignoreList":[]}