{"version":3,"names":["cov_1yomtkpb2o","actualCoverage","express","s","require","router","Router","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","query","getEnhancedSignals","getActivePositions","getMarketTiming","authenticateToken","createValidationMiddleware","sanitizers","apiKeyService","AlpacaService","RiskCalculator","SignalEngine","use","tradingValidationSchemas","tradeHistory","page","type","sanitizer","value","integer","min","max","defaultValue","validator","b","errorMessage","limit","symbol","test","string","maxLength","toLowerCase","includes","side","positionSizing","required","entryPrice","float","stopLossPrice","riskPercentage","ORDER_TYPES","MARKET","LIMIT","STOP","STOP_LIMIT","BRACKET","OCO","OTO","ORDER_SIDES","BUY","SELL","TIME_IN_FORCE","DAY","GTC","IOC","FOK","POSITION_ACTIONS","OPEN","CLOSE","REDUCE","INCREASE","checkRequiredTables","tableNames","results","tableName","tableExistsResult","rows","exists","error","console","log","requiredTables","tableStatus","recordCounts","Object","entries","countResult","parseInt","count","tables","endpoint","params","path","method","time","timeframe","signal_type","latest_only","pageNum","Math","pageSize","offset","validTimeframes","warn","details","whereClause","queryParams","paramCount","conditions","push","toUpperCase","length","join","sqlQuery","countQuery","result","Promise","all","slice","total","totalPages","ceil","Array","isArray","data","pagination","hasNext","hasPrev","metadata","stack","period","swingQuery","swingResult","ticker","techQuery","days","performanceQuery","period_days","performance","sector","min_strength","dateFilter","parseFloat","current_period","period_description","analyticsQuery","sectorQuery","analyticsResult","sectorResult","analytics","sectorBreakdown","winRate","total_signals","winning_signals","summary","buy_signals","sell_signals","win_rate","avg_winning_performance","avg_losing_performance","best_performance","worst_performance","sectors_covered","unique_symbols","sector_breakdown","map","signal_count","avg_performance","aggregateQuery","signalsResult","signals","aggregate_signal","confidence","score","recommendation","timeframeWeights","daily","weekly","monthly","totalWeight","weightedScore","signalAlignment","forEach","signal","weight","strength","signalScore","finalScore","aggregateSignal","abs","signalTypes","values","alignmentBonus","uniqueSignals","Set","buyCount","filter","sellCount","signalsObj","date","round","alignment_bonus","min_confidence","symbolsQuery","symbolsResult","symbols","row","aggregateSignals","sort","a","filters","queryStringParameters","JSON","parse","body","statusCode","post","userId","user","sub","Error","quantity","orderType","timeInForce","limitPrice","stopPrice","takeProfitPrice","trailAmount","trailPercent","extendedHours","clientOrderId","credentials","getUserApiKey","alpaca","apiKey","apiSecret","isSandbox","account","getAccount","trading_blocked","quote","getQuote","estimatedCost","calculateOrderCost","ask","buying_power","available","orderData","qty","time_in_force","extended_hours","limit_price","stop_price","trail_amount","trail_percent","client_order_id","stop_loss","take_profit","riskCalculator","riskMetrics","calculateOrderRisk","price","approval","approved","reason","riskScore","orderRiskScore","recommendations","requiresManualReview","warnings","orderValue","order","placeOrder","orderRecord","id","potentialLoss","from","to","paramIndex","ordersQuery","ordersResult","orders","recentOrders","created_at","now","liveOrder","getOrder","alpaca_order_id","order_status","filled_qty","filled_avg_price","filled_quantity","filled_price","hasMore","orderId","orderResult","live_status","live_filled_qty","live_filled_avg_price","live_updated_at","updated_at","delete","cancelOrder","positions","getPositions","filteredPositions","pos","enrichedPositions","position","companyResult","currentValue","bid","unrealizedPL","cost_basis","unrealizedPLPercent","company_name","current_price","current_value","unrealized_pl","unrealized_pl_percent","percentage","closePosition","portfolioHistory","getPortfolioHistory","totalValue","equity","dayChange","last_equity","dayChangePercent","total_value","day_change","day_change_percent","portfolio_history","marketHours","getMarketHours","signalResult","company","signalEngine","symbolSignals","generateSignalsForStock","accountValue","totalAccountValue","riskAmount","positionSize","positionValue","riskPerShare","floor","portfolioPercentage","entry_price","stop_loss_price","position_size","position_value","portfolio_percentage","risk_amount","potential_loss","account_value","requestId","randomUUID","split","requestStart","substring","userAgent","headers","ip","startDate","start_date","endDate","end_date","order_type","credentialsStart","credentialsDuration","requestedProvider","impact","error_code","provider","actions","request_info","request_id","environment","keyLength","hasSecret","credentialsError","errorStack","process","env","NODE_ENV","error_duration_ms","serviceInitStart","serviceInitDuration","hasApiKey","serviceError","alpacaParams","page_token","after","until","ordersStart","ordersResponse","race","getOrders","_","reject","setTimeout","ordersDuration","ordersCount","hasNextPage","next_page_token","ordersError","errorCode","code","timeout_duration_ms","executionsStart","executions","executionParams","getAccountActivities","executionsDuration","executionsCount","executionError","note","dbStart","dbTrades","tableExists","dbQuery","dbParams","dbResult","dbDuration","dbTradesCount","hasTable","dbError","processStart","formattedTrades","database_records","unifiedHistory","source","submitted_at","filled_at","execution","transaction_time","execution_id","processDuration","totalDuration","totalRecords","alpacaOrders","alpacaExecutions","databaseRecords","processingDuration","trades","raw_data","alpaca_orders","alpaca_executions","total_records","has_more","account_info","is_sandbox","data_sources","total_duration_ms","errorDuration","buySignals","changePercent","changepercent","sellSignals","cost","module","exports"],"sources":["trading.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'trading',\n    timestamp: new Date().toISOString(),\n    message: 'Trading service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Trading API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\nconst { query } = require('../utils/database');\nconst { getEnhancedSignals, getActivePositions, getMarketTiming } = require('./trading_enhanced');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst AlpacaService = require('../utils/alpacaService');\nconst RiskCalculator = require('../utils/riskCalculator');\nconst SignalEngine = require('../utils/signalEngine');\n\n// Apply authentication to all routes\nrouter.use(authenticateToken);\n\n// Validation schemas for trading endpoints\nconst tradingValidationSchemas = {\n  tradeHistory: {\n    page: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 1000, defaultValue: 1 }),\n      validator: (value) => value >= 1 && value <= 1000,\n      errorMessage: 'Page must be between 1 and 1000'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 200, defaultValue: 50 }),\n      validator: (value) => value >= 1 && value <= 200,\n      errorMessage: 'Limit must be between 1 and 200'\n    },\n    symbol: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.symbol(value),\n      validator: (value) => !value || /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    status: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, toLowerCase: true }),\n      validator: (value) => !value || ['filled', 'canceled', 'pending', 'rejected'].includes(value),\n      errorMessage: 'Status must be filled, canceled, pending, or rejected'\n    },\n    side: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, toLowerCase: true }),\n      validator: (value) => !value || ['buy', 'sell'].includes(value),\n      errorMessage: 'Side must be buy or sell'\n    }\n  },\n  \n  positionSizing: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    entryPrice: {\n      required: true,\n      type: 'number',\n      sanitizer: (value) => sanitizers.float(value, { min: 0.01, max: 100000 }),\n      validator: (value) => value > 0 && value <= 100000,\n      errorMessage: 'Entry price must be between 0.01 and 100000'\n    },\n    stopLossPrice: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.float(value, { min: 0.01, max: 100000 }),\n      validator: (value) => !value || (value > 0 && value <= 100000),\n      errorMessage: 'Stop loss price must be between 0.01 and 100000'\n    },\n    riskPercentage: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.float(value, { min: 0.1, max: 10, defaultValue: 2 }),\n      validator: (value) => value >= 0.1 && value <= 10,\n      errorMessage: 'Risk percentage must be between 0.1 and 10'\n    }\n  }\n};\n\n// Order types\nconst ORDER_TYPES = {\n  MARKET: 'market',\n  LIMIT: 'limit',\n  STOP: 'stop',\n  STOP_LIMIT: 'stop_limit',\n  BRACKET: 'bracket',\n  OCO: 'oco',\n  OTO: 'oto'\n};\n\n// Order sides\nconst ORDER_SIDES = {\n  BUY: 'buy',\n  SELL: 'sell'\n};\n\n// Order time in force\nconst TIME_IN_FORCE = {\n  DAY: 'day',\n  GTC: 'gtc',\n  IOC: 'ioc',\n  FOK: 'fok'\n};\n\n// Position management\nconst POSITION_ACTIONS = {\n  OPEN: 'open',\n  CLOSE: 'close',\n  REDUCE: 'reduce',\n  INCREASE: 'increase'\n};\n\n// Helper function to check if required tables exist\nasync function checkRequiredTables(tableNames) {\n  const results = {};\n  for (const tableName of tableNames) {\n    try {\n      const tableExistsResult = await query(\n        `SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name = $1\n        );`,\n        [tableName]\n      );\n      results[tableName] = tableExistsResult.rows[0].exists;\n    } catch (error) {\n      console.error(`Error checking table ${tableName}:`, error.message);\n      results[tableName] = false;\n    }\n  }\n  return results;\n}\n\n// Debug endpoint to check trading tables status\nrouter.get('/debug', async (req, res) => {\n  console.log('[TRADING] Debug endpoint called');\n  \n  try {\n    // Check all trading tables\n    const requiredTables = [\n      'buy_sell_daily', 'buy_sell_weekly', 'buy_sell_monthly',\n      'market_data', 'company_profile', 'swing_trader'\n    ];\n    \n    const tableStatus = await checkRequiredTables(requiredTables);\n    \n    // Get record counts for existing tables\n    const recordCounts = {};\n    for (const [tableName, exists] of Object.entries(tableStatus)) {\n      if (exists) {\n        try {\n          const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n          recordCounts[tableName] = parseInt(countResult.rows[0].count);\n        } catch (error) {\n          recordCounts[tableName] = { error: error.message };\n        }\n      } else {\n        recordCounts[tableName] = 'Table does not exist';\n      }\n    }\n\n    res.json({\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      tables: tableStatus,\n      recordCounts: recordCounts,\n      endpoint: 'trading'\n    });\n  } catch (error) {\n    console.error('[TRADING] Error in debug endpoint:', error);\n    res.status(500).json({ \n      error: 'Failed to check trading tables', \n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get buy/sell signals by timeframe\nrouter.get('/signals/:timeframe', async (req, res) => {\n  console.log('[TRADING] Received request for /signals/:timeframe', {\n    params: req.params,\n    query: req.query,\n    path: req.path,\n    method: req.method,\n    time: new Date().toISOString()\n  });\n  try {\n    const { timeframe } = req.params;\n    const { limit = 100, page = 1, symbol, signal_type, latest_only } = req.query;\n    const pageNum = Math.max(1, parseInt(page));\n    const pageSize = Math.max(1, parseInt(limit));\n    const offset = (pageNum - 1) * pageSize;\n\n    // Validate timeframe\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      console.warn('[TRADING] Invalid timeframe:', timeframe);\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = `buy_sell_${timeframe}`;\n    \n    // Defensive: Check if table exists before querying\n    const tableExistsResult = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );`,\n      [tableName]\n    );\n    if (!tableExistsResult.rows[0].exists) {\n      console.error(`[TRADING] Table does not exist: ${tableName}`);\n      return res.status(500).json({ \n        error: `Table ${tableName} does not exist in the database.`,\n        details: `Expected table ${tableName} for trading signals. Please check your database schema.`\n      });\n    }\n\n    // Build WHERE clause\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    const conditions = [];\n    \n    if (symbol) {\n      paramCount++;\n      conditions.push(`symbol = $${paramCount}`);\n      queryParams.push(symbol.toUpperCase());\n    }\n    \n    if (signal_type === 'buy') {\n      conditions.push(\"signal = 'Buy'\");\n    } else if (signal_type === 'sell') {\n      conditions.push(\"signal = 'Sell'\");\n    }\n\n    if (conditions.length > 0) {\n      whereClause = 'WHERE ' + conditions.join(' AND ');\n    }\n\n    // Build the main query - handle latest_only with window function\n    let sqlQuery;\n    if (latest_only === 'true') {\n      sqlQuery = `\n        WITH ranked_signals AS (\n          SELECT \n            bs.symbol,\n            bs.date,\n            bs.signal,\n            bs.buylevel as price,\n            bs.stoplevel,\n            bs.inposition,\n            bs.strength,\n            md.current_price,\n            s.short_name as company_name,\n            s.sector,\n            md.market_cap,\n            km.trailing_pe,\n            km.dividend_yield,\n            CASE \n              WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel \n              THEN ((md.regular_market_price - bs.buylevel) / bs.buylevel * 100)\n              WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel \n              THEN ((bs.buylevel - md.regular_market_price) / bs.buylevel * 100)\n              ELSE 0\n            END as performance_percent,\n            ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n          FROM ${tableName} bs\n          LEFT JOIN market_data md ON bs.symbol = md.ticker\n          LEFT JOIN symbols s ON bs.symbol = s.ticker\n          LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n          ${whereClause}\n        )\n        SELECT * FROM ranked_signals \n        WHERE rn = 1\n        ORDER BY date DESC, symbol ASC\n        LIMIT $${queryParams.length + 1} OFFSET $${queryParams.length + 2}\n      `;\n    } else {\n      sqlQuery = `\n        SELECT \n          bs.symbol,\n          bs.date,\n          bs.signal,\n          bs.buylevel as price,\n          bs.stoplevel,\n          bs.inposition,\n          bs.strength,\n          md.current_price,\n          s.short_name as company_name,\n          s.sector,\n          md.market_cap,\n          km.trailing_pe,\n          km.dividend_yield,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel \n            THEN ((md.regular_market_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel \n            THEN ((bs.buylevel - md.regular_market_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n        ${whereClause}\n        ORDER BY bs.date DESC, bs.symbol ASC\n        LIMIT $${queryParams.length + 1} OFFSET $${queryParams.length + 2}\n      `;\n    }\n\n    // Count query for pagination\n    let countQuery;\n    if (latest_only === 'true') {\n      countQuery = `\n        WITH ranked_signals AS (\n          SELECT bs.symbol,\n            ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n          FROM ${tableName} bs\n          ${whereClause}\n        )\n        SELECT COUNT(*) as total\n        FROM ranked_signals \n        WHERE rn = 1\n      `;\n    } else {\n      countQuery = `\n        SELECT COUNT(*) as total\n        FROM ${tableName} bs\n        ${whereClause}\n      `;\n    }\n\n    queryParams.push(pageSize, offset);\n\n    // Security: Don't log SQL queries and params that may contain sensitive trading data\n    console.log('[TRADING] Executing trading data query with', queryParams.length, 'parameters');\n    console.log('[TRADING] Executing count query for pagination');\n\n    const [result, countResult] = await Promise.all([\n      query(sqlQuery, queryParams),\n      query(countQuery, queryParams.slice(0, paramCount))\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / pageSize);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      console.warn('[TRADING] No data found for query:', { timeframe });\n      // Security: Don't log request params which may contain sensitive trading filters\n      return res.status(200).json({ \n        success: true,\n        data: [],\n        timeframe,\n        count: 0,\n        pagination: {\n          page: pageNum,\n          limit: pageSize,\n          total: 0,\n          totalPages: 0,\n          hasNext: false,\n          hasPrev: false\n        },\n        metadata: {\n          signal_type: signal_type || 'all',\n          symbol: symbol || null,\n          message: 'No trading signals found for the specified criteria'\n        }\n      });\n    }\n\n    console.log('[TRADING] Query returned', result.rows.length, 'rows out of', total, 'total');\n\n    res.json({\n      success: true,\n      data: result.rows,\n      timeframe,\n      count: result.rows.length,\n      pagination: {\n        page: pageNum,\n        limit: pageSize,\n        total,\n        totalPages,\n        hasNext: pageNum < totalPages,\n        hasPrev: pageNum > 1\n      },\n      metadata: {\n        signal_type: signal_type || 'all',\n        symbol: symbol || null\n      }\n    });\n\n  } catch (error) {\n    console.error('[TRADING] Error fetching trading signals:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch trading signals',\n      message: error.message,\n      stack: error.stack\n    });\n  }\n});\n\n// Get signals summary\nrouter.get('/summary/:timeframe', async (req, res) => {\n  try {\n    const { timeframe } = req.params;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe' });\n    }\n\n    const tableName = `buy_sell_${timeframe}`;\n      const sqlQuery = `\n      SELECT \n        COUNT(*) as total_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as buy_signals,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as sell_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as strong_buy,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as strong_sell,\n        COUNT(CASE WHEN signal != 'None' AND signal IS NOT NULL THEN 1 END) as active_signals\n      FROM ${tableName}\n      WHERE date >= CURRENT_DATE - INTERVAL '30 days'\n    `;\n\n    const result = await query(sqlQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows[0],\n      timeframe,\n      period: 'last_30_days'\n    });\n\n  } catch (error) {\n    console.error('Error fetching signals summary:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch signals summary',\n      message: error.message \n    });  }\n});\n\n// Get swing trading signals\nrouter.get('/swing-signals', async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 25;\n    const offset = (page - 1) * limit;\n\n    const swingQuery = `\n      SELECT \n        st.symbol,\n        s.short_name as company_name,\n        st.signal,\n        st.entry_price,\n        st.stop_loss,\n        st.target_price,\n        st.risk_reward_ratio,\n        st.date,\n        md.current_price,\n        CASE \n          WHEN st.signal = 'BUY' AND md.current_price >= st.target_price \n          THEN 'TARGET_HIT'\n          WHEN st.signal = 'BUY' AND md.current_price <= st.stop_loss \n          THEN 'STOP_LOSS_HIT'\n          WHEN st.signal = 'SELL' AND md.current_price <= st.target_price \n          THEN 'TARGET_HIT'\n          WHEN st.signal = 'SELL' AND md.current_price >= st.stop_loss \n          THEN 'STOP_LOSS_HIT'\n          ELSE 'ACTIVE'\n        END as status\n      FROM swing_trader st\n      JOIN symbols s ON st.symbol = s.ticker\n      LEFT JOIN market_data md ON st.symbol = md.ticker\n      ORDER BY st.date DESC\n      LIMIT $1 OFFSET $2\n    `;\n\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM swing_trader\n    `;\n\n    const [swingResult, countResult] = await Promise.all([\n      query(swingQuery, [limit, offset]),\n      query(countQuery)\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / limit);\n\n    if (!swingResult || !Array.isArray(swingResult.rows) || swingResult.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: swingResult.rows,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching swing signals:', error);\n    res.status(500).json({ error: 'Failed to fetch swing signals' });\n  }\n});\n\n// Get technical indicators for a stock\nrouter.get('/:ticker/technicals', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const timeframe = req.query.timeframe || 'daily'; // daily, weekly, monthly\n\n    let tableName = 'latest_technicals_daily';\n    if (timeframe === 'weekly') tableName = 'latest_technicals_weekly';\n    if (timeframe === 'monthly') tableName = 'latest_technicals_monthly';\n\n    const techQuery = `\n      SELECT \n        symbol,\n        date,\n        sma_20,\n        sma_50,\n        sma_200,\n        ema_12,\n        ema_26,\n        rsi_14,\n        macd,\n        macd_signal,\n        macd_histogram,\n        bb_upper,\n        bb_middle,\n        bb_lower,\n        volume_sma\n      FROM ${tableName}\n      WHERE symbol = $1\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    const result = await query(techQuery, [ticker.toUpperCase()]);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      ticker: ticker.toUpperCase(),\n      timeframe,\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Error fetching technical indicators:', error);\n    res.status(500).json({ error: 'Failed to fetch technical indicators' });\n  }\n});\n\n// Get performance summary of recent signals\nrouter.get('/performance', async (req, res) => {\n  try {\n    const days = parseInt(req.query.days) || 30;\n\n    const performanceQuery = `\n      SELECT \n        signal,\n        COUNT(*) as total_signals,\n        AVG(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price \n            THEN ((md.current_price - bs.price) / bs.price * 100)\n            WHEN signal = 'SELL' AND md.current_price < bs.price \n            THEN ((bs.price - md.current_price) / bs.price * 100)\n            ELSE 0\n          END\n        ) as avg_performance,\n        COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) as winning_trades,\n        (COUNT(\n          CASE \n            WHEN signal = 'BUY' AND md.current_price > bs.price THEN 1\n            WHEN signal = 'SELL' AND md.current_price < bs.price THEN 1\n          END\n        ) * 100.0 / COUNT(*)) as win_rate\n      FROM buy_sell_daily bs\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      WHERE bs.date >= NOW() - INTERVAL '${days} days'\n      GROUP BY signal\n    `;\n\n    const result = await query(performanceQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      period_days: days,\n      performance: result.rows,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching performance data:', error);\n    res.status(500).json({ error: 'Failed to fetch performance data' });\n  }\n});\n\n// Get current period active signals with enhanced filtering\nrouter.get('/signals/current/:timeframe', async (req, res) => {\n  console.log('[TRADING] Current period signals endpoint called');\n  \n  try {\n    const { timeframe } = req.params;\n    const { limit = 50, page = 1, signal_type, sector, min_strength = 0.4 } = req.query;\n    const pageNum = Math.max(1, parseInt(page));\n    const pageSize = Math.max(1, parseInt(limit));\n    const offset = (pageNum - 1) * pageSize;\n\n    // Validate timeframe\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = `buy_sell_${timeframe}`;\n    \n    // Check if table exists\n    const tableExistsResult = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );`,\n      [tableName]\n    );\n    \n    if (!tableExistsResult.rows[0].exists) {\n      return res.status(500).json({ \n        error: `Table ${tableName} does not exist in the database.`\n      });\n    }\n\n    // Build WHERE clause for current period active signals\n    let whereClause = '';\n    const queryParams = [];\n    let paramCount = 0;\n\n    const conditions = [];\n    \n    // Only get recent signals (last 30 days for daily, 12 weeks for weekly, 6 months for monthly)\n    let dateFilter;\n    if (timeframe === 'daily') {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '30 days'\";\n    } else if (timeframe === 'weekly') {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '12 weeks'\";\n    } else {\n      dateFilter = \"date >= CURRENT_DATE - INTERVAL '6 months'\";\n    }\n    conditions.push(dateFilter);\n    \n    // Only get actual signals (not None or null)\n    conditions.push(\"signal IS NOT NULL\");\n    conditions.push(\"signal != 'None'\");\n    conditions.push(\"signal != ''\");\n    \n    // Filter by signal type if specified\n    if (signal_type === 'buy') {\n      conditions.push(\"signal = 'Buy'\");\n    } else if (signal_type === 'sell') {\n      conditions.push(\"signal = 'Sell'\");\n    }\n    \n    // Filter by sector if specified\n    if (sector && sector !== 'all') {\n      paramCount++;\n      conditions.push(`s.sector = $${paramCount}`);\n      queryParams.push(sector);\n    }\n\n    if (conditions.length > 0) {\n      whereClause = 'WHERE ' + conditions.join(' AND ');\n    }\n\n    // Enhanced query with current period focus and signal strength calculation\n    const sqlQuery = `\n      WITH latest_signals AS (\n        SELECT \n          bs.symbol,\n          bs.date,\n          bs.signal,\n          bs.buylevel as entry_price,\n          bs.stoplevel as stop_loss,\n          bs.inposition,\n          md.current_price,\n          md.regular_market_price,\n          s.short_name as company_name,\n          s.sector,\n          s.industry,\n          md.market_cap,\n          km.trailing_pe,\n          km.dividend_yield,\n          km.beta,\n          -- Calculate signal strength based on price movement and position\n          CASE \n            WHEN bs.signal = 'Buy' THEN \n              LEAST(1.0, GREATEST(0.0, \n                (ABS(CAST(bs.signal AS NUMERIC)) / 100.0) * \n                CASE \n                  WHEN md.current_price > bs.buylevel THEN 1.2\n                  ELSE 0.8\n                END\n              ))\n            WHEN bs.signal = 'Sell' THEN \n              LEAST(1.0, GREATEST(0.0, \n                (ABS(CAST(bs.signal AS NUMERIC)) / 100.0) * \n                CASE \n                  WHEN md.current_price < bs.buylevel THEN 1.2\n                  ELSE 0.8\n                END\n              ))\n            ELSE 0.0\n          END as signal_strength,\n          -- Calculate performance since signal\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n            THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n            THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent,\n          -- Days since signal\n          EXTRACT(DAY FROM (CURRENT_DATE - bs.date)) as days_since_signal,\n          -- Signal status\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel THEN 'WINNING'\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel THEN 'WINNING'\n            WHEN bs.signal = 'Buy' AND bs.stoplevel > 0 AND md.current_price <= bs.stoplevel THEN 'STOPPED'\n            WHEN bs.signal = 'Sell' AND bs.stoplevel > 0 AND md.current_price >= bs.stoplevel THEN 'STOPPED'\n            ELSE 'ACTIVE'\n          END as signal_status,\n          ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n        ${whereClause}\n      )\n      SELECT *\n      FROM latest_signals \n      WHERE rn = 1 \n        AND signal_strength >= $${queryParams.length + 1}\n      ORDER BY \n        signal_strength DESC,\n        ABS(performance_percent) DESC,\n        date DESC\n      LIMIT $${queryParams.length + 2} OFFSET $${queryParams.length + 3}\n    `;\n\n    // Count query for pagination\n    const countQuery = `\n      WITH latest_signals AS (\n        SELECT \n          bs.symbol,\n          CASE \n            WHEN bs.signal = 'Buy' THEN \n              LEAST(1.0, GREATEST(0.0, (ABS(CAST(bs.signal AS NUMERIC)) / 100.0)))\n            WHEN bs.signal = 'Sell' THEN \n              LEAST(1.0, GREATEST(0.0, (ABS(CAST(bs.signal AS NUMERIC)) / 100.0)))\n            ELSE 0.0\n          END as signal_strength,\n          ROW_NUMBER() OVER (PARTITION BY bs.symbol ORDER BY bs.date DESC) as rn\n        FROM ${tableName} bs\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        ${whereClause}\n      )\n      SELECT COUNT(*) as total\n      FROM latest_signals \n      WHERE rn = 1 \n        AND signal_strength >= $${queryParams.length + 1}\n    `;\n\n    queryParams.push(parseFloat(min_strength), pageSize, offset);\n\n    console.log('[TRADING] Executing current period query:', sqlQuery);\n    console.log('[TRADING] Executing query with', queryParams.length, 'parameters');\n    // Security: Don't log query params which may contain sensitive trading data\n\n    const [result, countResult] = await Promise.all([\n      query(sqlQuery, queryParams),\n      query(countQuery, queryParams.slice(0, queryParams.length - 2))\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / pageSize);\n\n    res.json({\n      success: true,\n      data: result.rows,\n      timeframe,\n      current_period: true,\n      count: result.rows.length,\n      pagination: {\n        page: pageNum,\n        limit: pageSize,\n        total,\n        totalPages,\n        hasNext: pageNum < totalPages,\n        hasPrev: pageNum > 1\n      },\n      metadata: {\n        signal_type: signal_type || 'all',\n        sector: sector || 'all',\n        min_strength: parseFloat(min_strength),\n        period_description: timeframe === 'daily' ? 'Last 30 days' : \n                           timeframe === 'weekly' ? 'Last 12 weeks' : 'Last 6 months',\n        message: result.rows.length === 0 ? 'No active signals found for current period' : null\n      }\n    });\n\n  } catch (error) {\n    console.error('[TRADING] Error fetching current period signals:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch current period signals',\n      message: error.message\n    });\n  }\n});\n\n// Get signal analytics and summary for current period\nrouter.get('/analytics/:timeframe', async (req, res) => {\n  try {\n    const { timeframe } = req.params;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({ error: 'Invalid timeframe' });\n    }\n\n    const tableName = `buy_sell_${timeframe}`;\n    \n    // Get comprehensive analytics\n    const analyticsQuery = `\n      WITH signal_analytics AS (\n        SELECT \n          bs.symbol,\n          bs.signal,\n          bs.date,\n          bs.buylevel,\n          md.current_price,\n          s.sector,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n            THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n            THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n            ELSE 0\n          END as performance_percent,\n          CASE \n            WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel THEN 1\n            WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel THEN 1\n            ELSE 0\n          END as is_winning\n        FROM ${tableName} bs\n        LEFT JOIN market_data md ON bs.symbol = md.ticker\n        LEFT JOIN symbols s ON bs.symbol = s.ticker\n        WHERE bs.date >= CURRENT_DATE - INTERVAL '30 days'\n          AND bs.signal IS NOT NULL \n          AND bs.signal != 'None'\n          AND bs.signal != ''\n      )\n      SELECT \n        COUNT(*) as total_signals,\n        COUNT(CASE WHEN signal = 'Buy' THEN 1 END) as buy_signals,\n        COUNT(CASE WHEN signal = 'Sell' THEN 1 END) as sell_signals,\n        COUNT(CASE WHEN is_winning = 1 THEN 1 END) as winning_signals,\n        AVG(CASE WHEN is_winning = 1 THEN performance_percent END) as avg_winning_performance,\n        AVG(CASE WHEN is_winning = 0 THEN performance_percent END) as avg_losing_performance,\n        MAX(performance_percent) as best_performance,\n        MIN(performance_percent) as worst_performance,\n        COUNT(DISTINCT sector) as sectors_covered,\n        COUNT(DISTINCT symbol) as unique_symbols\n      FROM signal_analytics\n    `;\n\n    // Get sector breakdown\n    const sectorQuery = `\n      SELECT \n        s.sector,\n        COUNT(*) as signal_count,\n        AVG(CASE \n          WHEN bs.signal = 'Buy' AND md.current_price > bs.buylevel AND bs.buylevel > 0\n          THEN ((md.current_price - bs.buylevel) / bs.buylevel * 100)\n          WHEN bs.signal = 'Sell' AND md.current_price < bs.buylevel AND bs.buylevel > 0\n          THEN ((bs.buylevel - md.current_price) / bs.buylevel * 100)\n          ELSE 0\n        END) as avg_performance\n      FROM ${tableName} bs\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      LEFT JOIN symbols s ON bs.symbol = s.ticker\n      WHERE bs.date >= CURRENT_DATE - INTERVAL '30 days'\n        AND bs.signal IS NOT NULL \n        AND bs.signal != 'None'\n        AND bs.signal != ''\n        AND s.sector IS NOT NULL\n      GROUP BY s.sector\n      ORDER BY signal_count DESC\n    `;\n\n    const [analyticsResult, sectorResult] = await Promise.all([\n      query(analyticsQuery),\n      query(sectorQuery)\n    ]);\n\n    const analytics = analyticsResult.rows[0];\n    const sectorBreakdown = sectorResult.rows;\n\n    // Calculate win rate\n    const winRate = analytics.total_signals > 0 ? \n      (analytics.winning_signals / analytics.total_signals * 100) : 0;\n\n    res.json({\n      success: true,\n      timeframe,\n      period: 'last_30_days',\n      summary: {\n        total_signals: parseInt(analytics.total_signals),\n        buy_signals: parseInt(analytics.buy_signals),\n        sell_signals: parseInt(analytics.sell_signals),\n        winning_signals: parseInt(analytics.winning_signals),\n        win_rate: winRate,\n        avg_winning_performance: parseFloat(analytics.avg_winning_performance) || 0,\n        avg_losing_performance: parseFloat(analytics.avg_losing_performance) || 0,\n        best_performance: parseFloat(analytics.best_performance) || 0,\n        worst_performance: parseFloat(analytics.worst_performance) || 0,\n        sectors_covered: parseInt(analytics.sectors_covered),\n        unique_symbols: parseInt(analytics.unique_symbols)\n      },\n      sector_breakdown: sectorBreakdown.map(sector => ({\n        sector: sector.sector,\n        signal_count: parseInt(sector.signal_count),\n        avg_performance: parseFloat(sector.avg_performance) || 0\n      })),\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('[TRADING] Error fetching analytics:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch signal analytics',\n      message: error.message \n    });\n  }\n});\n\n// Get aggregate signals across all timeframes for a symbol\nrouter.get('/aggregate/:symbol', async (req, res) => {\n  try {\n    const { symbol } = req.params;\n    \n    // Get latest signals from all timeframes for the symbol\n    const aggregateQuery = `\n      WITH daily_signals AS (\n        SELECT \n          symbol, signal, strength, date, 'daily' as timeframe,\n          ROW_NUMBER() OVER (ORDER BY date DESC) as rn\n        FROM buy_sell_daily \n        WHERE symbol = $1 AND signal != 'None'\n        ORDER BY date DESC\n        LIMIT 1\n      ),\n      weekly_signals AS (\n        SELECT \n          symbol, signal, strength, date, 'weekly' as timeframe,\n          ROW_NUMBER() OVER (ORDER BY date DESC) as rn\n        FROM buy_sell_weekly \n        WHERE symbol = $1 AND signal != 'None'\n        ORDER BY date DESC\n        LIMIT 1\n      ),\n      monthly_signals AS (\n        SELECT \n          symbol, signal, strength, date, 'monthly' as timeframe,\n          ROW_NUMBER() OVER (ORDER BY date DESC) as rn\n        FROM buy_sell_monthly \n        WHERE symbol = $1 AND signal != 'None'\n        ORDER BY date DESC\n        LIMIT 1\n      )\n      SELECT * FROM daily_signals WHERE rn = 1\n      UNION ALL\n      SELECT * FROM weekly_signals WHERE rn = 1\n      UNION ALL\n      SELECT * FROM monthly_signals WHERE rn = 1\n    `;\n\n    const signalsResult = await query(aggregateQuery, [symbol.toUpperCase()]);\n    const signals = signalsResult.rows;\n\n    if (signals.length === 0) {\n      return res.json({\n        symbol: symbol.toUpperCase(),\n        aggregate_signal: 'Hold',\n        confidence: 50.0,\n        score: 0.0,\n        signals: {},\n        recommendation: 'Hold - No recent signals found',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Calculate aggregate signal using weighted approach\n    const timeframeWeights = { daily: 0.50, weekly: 0.30, monthly: 0.20 };\n    let totalWeight = 0;\n    let weightedScore = 0;\n    const signalAlignment = {};\n\n    signals.forEach(signal => {\n      const weight = timeframeWeights[signal.timeframe] || 0;\n      const strength = parseFloat(signal.strength) || 50;\n      \n      let signalScore = 0;\n      if (signal.signal === 'Buy') {\n        signalScore = strength;\n      } else if (signal.signal === 'Sell') {\n        signalScore = -strength;\n      }\n\n      weightedScore += signalScore * weight;\n      totalWeight += weight;\n      signalAlignment[signal.timeframe] = signal.signal;\n    });\n\n    const finalScore = totalWeight > 0 ? weightedScore / totalWeight : 0;\n\n    // Determine aggregate signal\n    let aggregateSignal = 'Hold';\n    let confidence = 50;\n\n    if (finalScore > 20) {\n      aggregateSignal = 'Buy';\n      confidence = Math.min(100, Math.abs(finalScore));\n    } else if (finalScore < -20) {\n      aggregateSignal = 'Sell';\n      confidence = Math.min(100, Math.abs(finalScore));\n    } else {\n      confidence = 50 - Math.abs(finalScore);\n    }\n\n    // Calculate alignment bonus\n    const signalTypes = Object.values(signalAlignment);\n    let alignmentBonus = 0;\n    \n    if (signalTypes.length >= 2) {\n      const uniqueSignals = [...new Set(signalTypes)];\n      if (uniqueSignals.length === 1 && uniqueSignals[0] !== 'None') {\n        alignmentBonus = 15; // All aligned\n      } else {\n        const buyCount = signalTypes.filter(s => s === 'Buy').length;\n        const sellCount = signalTypes.filter(s => s === 'Sell').length;\n        if (buyCount >= 2 || sellCount >= 2) {\n          alignmentBonus = 10; // Majority aligned\n        }\n      }\n    }\n\n    confidence = Math.min(100, confidence + alignmentBonus);\n\n    // Get recommendation\n    let recommendation;\n    if (confidence < 40) {\n      recommendation = \"Watch - Low confidence signal\";\n    } else if (confidence < 60) {\n      recommendation = `Consider ${aggregateSignal} - Moderate confidence`;\n    } else if (confidence < 80) {\n      recommendation = `Strong ${aggregateSignal} signal - High confidence`;\n    } else {\n      recommendation = `Very Strong ${aggregateSignal} signal - Execute trade`;\n    }\n\n    // Format signals object\n    const signalsObj = {};\n    signals.forEach(signal => {\n      signalsObj[signal.timeframe] = {\n        signal: signal.signal,\n        strength: parseFloat(signal.strength),\n        date: signal.date\n      };\n    });\n\n    res.json({\n      symbol: symbol.toUpperCase(),\n      aggregate_signal: aggregateSignal,\n      confidence: Math.round(confidence * 10) / 10,\n      score: Math.round(finalScore * 10) / 10,\n      signals: signalsObj,\n      alignment_bonus: alignmentBonus,\n      recommendation,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('[TRADING] Error fetching aggregate signals:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch aggregate signals',\n      message: error.message \n    });\n  }\n});\n\n// Get aggregate signals summary for all symbols\nrouter.get('/aggregate', async (req, res) => {\n  try {\n    const { limit = 50, min_confidence = 60, signal_type } = req.query;\n    \n    // Get symbols with recent signals\n    const symbolsQuery = `\n      SELECT DISTINCT symbol \n      FROM (\n        SELECT symbol FROM buy_sell_daily WHERE date >= CURRENT_DATE - INTERVAL '30 days' AND signal != 'None'\n        UNION\n        SELECT symbol FROM buy_sell_weekly WHERE date >= CURRENT_DATE - INTERVAL '12 weeks' AND signal != 'None'\n        UNION\n        SELECT symbol FROM buy_sell_monthly WHERE date >= CURRENT_DATE - INTERVAL '6 months' AND signal != 'None'\n      ) symbols\n      LIMIT $1\n    `;\n\n    const symbolsResult = await query(symbolsQuery, [parseInt(limit)]);\n    const symbols = symbolsResult.rows.map(row => row.symbol);\n\n    const aggregateSignals = [];\n\n    // Process each symbol for aggregate signals\n    for (const symbol of symbols) {\n      const aggregateQuery = `\n        WITH daily_signals AS (\n          SELECT signal, strength, date, 'daily' as timeframe\n          FROM buy_sell_daily \n          WHERE symbol = $1 AND signal != 'None'\n          ORDER BY date DESC LIMIT 1\n        ),\n        weekly_signals AS (\n          SELECT signal, strength, date, 'weekly' as timeframe\n          FROM buy_sell_weekly \n          WHERE symbol = $1 AND signal != 'None'\n          ORDER BY date DESC LIMIT 1\n        ),\n        monthly_signals AS (\n          SELECT signal, strength, date, 'monthly' as timeframe\n          FROM buy_sell_monthly \n          WHERE symbol = $1 AND signal != 'None'\n          ORDER BY date DESC LIMIT 1\n        )\n        SELECT * FROM daily_signals\n        UNION ALL\n        SELECT * FROM weekly_signals\n        UNION ALL\n        SELECT * FROM monthly_signals\n      `;\n\n      const signalsResult = await query(aggregateQuery, [symbol]);\n      const signals = signalsResult.rows;\n\n      if (signals.length === 0) continue;\n\n      // Calculate aggregate for this symbol\n      const timeframeWeights = { daily: 0.50, weekly: 0.30, monthly: 0.20 };\n      let totalWeight = 0;\n      let weightedScore = 0;\n\n      signals.forEach(signal => {\n        const weight = timeframeWeights[signal.timeframe] || 0;\n        const strength = parseFloat(signal.strength) || 50;\n        \n        let signalScore = 0;\n        if (signal.signal === 'Buy') {\n          signalScore = strength;\n        } else if (signal.signal === 'Sell') {\n          signalScore = -strength;\n        }\n\n        weightedScore += signalScore * weight;\n        totalWeight += weight;\n      });\n\n      const finalScore = totalWeight > 0 ? weightedScore / totalWeight : 0;\n      let aggregateSignal = 'Hold';\n      let confidence = 50;\n\n      if (finalScore > 20) {\n        aggregateSignal = 'Buy';\n        confidence = Math.min(100, Math.abs(finalScore));\n      } else if (finalScore < -20) {\n        aggregateSignal = 'Sell';\n        confidence = Math.min(100, Math.abs(finalScore));\n      } else {\n        confidence = 50 - Math.abs(finalScore);\n      }\n\n      // Apply filters\n      if (confidence >= parseFloat(min_confidence)) {\n        if (!signal_type || aggregateSignal.toLowerCase() === signal_type.toLowerCase()) {\n          aggregateSignals.push({\n            symbol,\n            aggregate_signal: aggregateSignal,\n            confidence: Math.round(confidence * 10) / 10,\n            score: Math.round(finalScore * 10) / 10,\n            signal_count: signals.length\n          });\n        }\n      }\n    }\n\n    // Sort by confidence descending\n    aggregateSignals.sort((a, b) => b.confidence - a.confidence);\n\n    res.json({\n      success: true,\n      data: aggregateSignals,\n      count: aggregateSignals.length,\n      filters: {\n        min_confidence: parseFloat(min_confidence),\n        signal_type: signal_type || 'all',\n        limit: parseInt(limit)\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('[TRADING] Error fetching aggregate signals summary:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch aggregate signals summary',\n      message: error.message \n    });\n  }\n});\n\n// Enhanced O'Neill methodology endpoints\nrouter.get('/signals/enhanced', async (req, res) => {\n  try {\n    const result = await getEnhancedSignals({ queryStringParameters: req.query });\n    const data = JSON.parse(result.body);\n    \n    if (result.statusCode === 200) {\n      res.json(data);\n    } else {\n      res.status(result.statusCode).json(data);\n    }\n  } catch (error) {\n    console.error('[TRADING] Error in enhanced signals:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch enhanced signals',\n      message: error.message\n    });\n  }\n});\n\nrouter.get('/positions/active', async (req, res) => {\n  try {\n    const result = await getActivePositions({ queryStringParameters: req.query });\n    const data = JSON.parse(result.body);\n    \n    if (result.statusCode === 200) {\n      res.json(data);\n    } else {\n      res.status(result.statusCode).json(data);\n    }\n  } catch (error) {\n    console.error('[TRADING] Error in active positions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch active positions',\n      message: error.message\n    });\n  }\n});\n\nrouter.get('/market-timing', async (req, res) => {\n  try {\n    const result = await getMarketTiming({ queryStringParameters: req.query });\n    const data = JSON.parse(result.body);\n    \n    if (result.statusCode === 200) {\n      res.json(data);\n    } else {\n      res.status(result.statusCode).json(data);\n    }\n  } catch (error) {\n    console.error('[TRADING] Error in market timing:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market timing data',\n      message: error.message\n    });\n  }\n});\n\n// Place order\nrouter.post('/orders', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const {\n      symbol,\n      quantity,\n      side,\n      orderType = ORDER_TYPES.MARKET,\n      timeInForce = TIME_IN_FORCE.DAY,\n      limitPrice,\n      stopPrice,\n      stopLossPrice,\n      takeProfitPrice,\n      trailAmount,\n      trailPercent,\n      extendedHours = false,\n      clientOrderId\n    } = req.body;\n\n    // Validate required fields\n    if (!symbol || !quantity || !side) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields: symbol, quantity, side'\n      });\n    }\n\n    // Validate side\n    if (!Object.values(ORDER_SIDES).includes(side)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid order side. Must be buy or sell'\n      });\n    }\n\n    // Validate order type\n    if (!Object.values(ORDER_TYPES).includes(orderType)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid order type'\n      });\n    }\n\n    // Validate price requirements\n    if (orderType === ORDER_TYPES.LIMIT && !limitPrice) {\n      return res.status(400).json({\n        success: false,\n        error: 'Limit price required for limit orders'\n      });\n    }\n\n    if (orderType === ORDER_TYPES.STOP && !stopPrice) {\n      return res.status(400).json({\n        success: false,\n        error: 'Stop price required for stop orders'\n      });\n    }\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Check account status and buying power\n    const account = await alpaca.getAccount();\n    if (account.trading_blocked) {\n      return res.status(400).json({\n        success: false,\n        error: 'Trading is blocked on this account'\n      });\n    }\n\n    // Get current quote for validation\n    const quote = await alpaca.getQuote(symbol);\n    if (!quote) {\n      return res.status(400).json({\n        success: false,\n        error: 'Unable to get quote for symbol'\n      });\n    }\n\n    // Validate buying power for buy orders\n    if (side === ORDER_SIDES.BUY) {\n      const estimatedCost = calculateOrderCost(quantity, limitPrice || quote.ask, orderType);\n      if (estimatedCost > parseFloat(account.buying_power)) {\n        return res.status(400).json({\n          success: false,\n          error: 'Insufficient buying power',\n          required: estimatedCost,\n          available: parseFloat(account.buying_power)\n        });\n      }\n    }\n\n    // Build order object\n    const orderData = {\n      symbol: symbol.toUpperCase(),\n      qty: quantity,\n      side,\n      type: orderType,\n      time_in_force: timeInForce,\n      extended_hours: extendedHours\n    };\n\n    // Add conditional fields\n    if (limitPrice) orderData.limit_price = limitPrice;\n    if (stopPrice) orderData.stop_price = stopPrice;\n    if (trailAmount) orderData.trail_amount = trailAmount;\n    if (trailPercent) orderData.trail_percent = trailPercent;\n    if (clientOrderId) orderData.client_order_id = clientOrderId;\n\n    // Handle bracket orders\n    if (orderType === ORDER_TYPES.BRACKET) {\n      if (!stopLossPrice && !takeProfitPrice) {\n        return res.status(400).json({\n          success: false,\n          error: 'Stop loss or take profit price required for bracket orders'\n        });\n      }\n      \n      if (stopLossPrice) orderData.stop_loss = { stop_price: stopLossPrice };\n      if (takeProfitPrice) orderData.take_profit = { limit_price: takeProfitPrice };\n    }\n\n    // Calculate risk metrics - CRITICAL for order safety\n    const riskCalculator = new RiskCalculator();\n    const riskMetrics = await riskCalculator.calculateOrderRisk({\n      symbol,\n      quantity,\n      side,\n      price: limitPrice || quote.ask,\n      stopLossPrice,\n      userId\n    });\n\n    // Security: Check risk approval before executing order\n    if (!riskMetrics.approval.approved) {\n      console.warn(`🚫 Order rejected due to risk: ${riskMetrics.approval.reason}`);\n      return res.status(400).json({\n        success: false,\n        error: 'Order rejected due to risk assessment',\n        reason: riskMetrics.approval.reason,\n        riskScore: riskMetrics.orderRiskScore,\n        recommendations: riskMetrics.recommendations,\n        requiresManualReview: riskMetrics.approval.requiresManualReview\n      });\n    }\n\n    // Log risk warnings for high-risk approved orders\n    if (riskMetrics.approval.warnings && riskMetrics.approval.warnings.length > 0) {\n      console.warn(`⚠️ High-risk order approved with warnings:`, riskMetrics.approval.warnings);\n    }\n\n    console.log(`✅ Order risk approved: Score=${riskMetrics.orderRiskScore}, Amount=$${riskMetrics.orderValue}`);\n\n    // Place order only after risk approval\n    const order = await alpaca.placeOrder(orderData);\n    \n    // Store order in database\n    const orderRecord = await query(`\n      INSERT INTO trading_orders (\n        user_id, alpaca_order_id, symbol, quantity, side, order_type,\n        limit_price, stop_price, time_in_force, extended_hours,\n        order_status, risk_amount, created_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NOW())\n      RETURNING *\n    `, [\n      userId,\n      order.id,\n      symbol.toUpperCase(),\n      quantity,\n      side,\n      orderType,\n      limitPrice || null,\n      stopPrice || null,\n      timeInForce,\n      extendedHours,\n      order.status,\n      riskMetrics.potentialLoss || 0\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        order: order,\n        orderRecord: orderRecord.rows[0],\n        riskMetrics: riskMetrics,\n        quote: quote\n      },\n      message: 'Order placed successfully'\n    });\n\n  } catch (error) {\n    console.error('Error placing order:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to place order',\n      message: error.message\n    });\n  }\n});\n\n// Get user's orders\nrouter.get('/orders', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const {\n      status,\n      symbol,\n      limit = 50,\n      offset = 0,\n      from,\n      to\n    } = req.query;\n\n    // Get from database\n    let whereClause = 'WHERE user_id = $1';\n    const params = [userId];\n    let paramIndex = 2;\n\n    if (status) {\n      whereClause += ` AND order_status = $${paramIndex}`;\n      params.push(status);\n      paramIndex++;\n    }\n\n    if (symbol) {\n      whereClause += ` AND symbol = $${paramIndex}`;\n      params.push(symbol.toUpperCase());\n      paramIndex++;\n    }\n\n    if (from) {\n      whereClause += ` AND created_at >= $${paramIndex}`;\n      params.push(from);\n      paramIndex++;\n    }\n\n    if (to) {\n      whereClause += ` AND created_at <= $${paramIndex}`;\n      params.push(to);\n      paramIndex++;\n    }\n\n    const ordersQuery = `\n      SELECT \n        to.*,\n        sse.company_name,\n        sse.sector\n      FROM trading_orders to\n      LEFT JOIN stock_symbols_enhanced sse ON to.symbol = sse.symbol\n      ${whereClause}\n      ORDER BY to.created_at DESC\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    params.push(limit, offset);\n\n    const [ordersResult, countResult] = await Promise.all([\n      query(ordersQuery, params),\n      query(`\n        SELECT COUNT(*) as total\n        FROM trading_orders\n        ${whereClause}\n      `, params.slice(0, -2))\n    ]);\n\n    const orders = ordersResult.rows;\n    const total = parseInt(countResult.rows[0].total);\n\n    // Get live status from Alpaca for recent orders\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (credentials) {\n      const alpaca = new AlpacaService(\n        credentials.apiKey,\n        credentials.apiSecret,\n        credentials.isSandbox\n      );\n\n      // Update status for recent orders\n      const recentOrders = orders.filter(order => \n        new Date(order.created_at) > new Date(Date.now() - 24 * 60 * 60 * 1000)\n      );\n\n      for (const order of recentOrders) {\n        try {\n          const liveOrder = await alpaca.getOrder(order.alpaca_order_id);\n          if (liveOrder && liveOrder.status !== order.order_status) {\n            // Update database\n            await query(`\n              UPDATE trading_orders \n              SET order_status = $1, filled_quantity = $2, filled_price = $3, updated_at = NOW()\n              WHERE alpaca_order_id = $4\n            `, [liveOrder.status, liveOrder.filled_qty, liveOrder.filled_avg_price, order.alpaca_order_id]);\n            \n            // Update local object\n            order.order_status = liveOrder.status;\n            order.filled_quantity = liveOrder.filled_qty;\n            order.filled_price = liveOrder.filled_avg_price;\n          }\n        } catch (error) {\n          console.warn(`Could not update order ${order.alpaca_order_id}:`, error.message);\n        }\n      }\n    }\n\n    res.json({\n      success: true,\n      data: {\n        orders,\n        pagination: {\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          total,\n          hasMore: parseInt(offset) + parseInt(limit) < total\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch orders',\n      message: error.message\n    });\n  }\n});\n\n// Get specific order\nrouter.get('/orders/:orderId', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { orderId } = req.params;\n\n    // Get from database\n    const orderResult = await query(`\n      SELECT \n        to.*,\n        sse.company_name,\n        sse.sector\n      FROM trading_orders to\n      LEFT JOIN stock_symbols_enhanced sse ON to.symbol = sse.symbol\n      WHERE to.alpaca_order_id = $1 AND to.user_id = $2\n    `, [orderId, userId]);\n\n    if (orderResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Order not found'\n      });\n    }\n\n    const order = orderResult.rows[0];\n\n    // Get live status from Alpaca\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (credentials) {\n      const alpaca = new AlpacaService(\n        credentials.apiKey,\n        credentials.apiSecret,\n        credentials.isSandbox\n      );\n\n      try {\n        const liveOrder = await alpaca.getOrder(orderId);\n        if (liveOrder) {\n          order.live_status = liveOrder.status;\n          order.live_filled_qty = liveOrder.filled_qty;\n          order.live_filled_avg_price = liveOrder.filled_avg_price;\n          order.live_updated_at = liveOrder.updated_at;\n        }\n      } catch (error) {\n        console.warn(`Could not get live order status:`, error.message);\n      }\n    }\n\n    res.json({\n      success: true,\n      data: order\n    });\n\n  } catch (error) {\n    console.error('Error fetching order:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch order',\n      message: error.message\n    });\n  }\n});\n\n// Cancel order\nrouter.delete('/orders/:orderId', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { orderId } = req.params;\n\n    // Verify order belongs to user\n    const orderResult = await query(`\n      SELECT * FROM trading_orders\n      WHERE alpaca_order_id = $1 AND user_id = $2\n    `, [orderId, userId]);\n\n    if (orderResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Order not found'\n      });\n    }\n\n    const order = orderResult.rows[0];\n\n    // Check if order can be cancelled\n    if (['filled', 'canceled', 'rejected'].includes(order.order_status)) {\n      return res.status(400).json({\n        success: false,\n        error: `Cannot cancel order with status: ${order.order_status}`\n      });\n    }\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Cancel order\n    await alpaca.cancelOrder(orderId);\n\n    // Update database\n    await query(`\n      UPDATE trading_orders\n      SET order_status = 'canceled', updated_at = NOW()\n      WHERE alpaca_order_id = $1\n    `, [orderId]);\n\n    res.json({\n      success: true,\n      message: 'Order cancelled successfully'\n    });\n\n  } catch (error) {\n    console.error('Error cancelling order:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to cancel order',\n      message: error.message\n    });\n  }\n});\n\n// Get positions\nrouter.get('/positions', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol } = req.query;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get positions from Alpaca\n    const positions = await alpaca.getPositions();\n    \n    // Filter by symbol if provided\n    let filteredPositions = positions;\n    if (symbol) {\n      filteredPositions = positions.filter(pos => pos.symbol === symbol.toUpperCase());\n    }\n\n    // Enrich with additional data\n    const enrichedPositions = await Promise.all(\n      filteredPositions.map(async (position) => {\n        try {\n          // Get company info\n          const companyResult = await query(`\n            SELECT company_name, sector\n            FROM stock_symbols_enhanced\n            WHERE symbol = $1\n          `, [position.symbol]);\n\n          // Get current quote\n          const quote = await alpaca.getQuote(position.symbol);\n\n          // Calculate metrics\n          const currentValue = parseFloat(position.qty) * parseFloat(quote.bid);\n          const unrealizedPL = currentValue - parseFloat(position.cost_basis);\n          const unrealizedPLPercent = (unrealizedPL / parseFloat(position.cost_basis)) * 100;\n\n          return {\n            ...position,\n            company_name: companyResult.rows[0]?.company_name,\n            sector: companyResult.rows[0]?.sector,\n            current_price: parseFloat(quote.bid),\n            current_value: currentValue,\n            unrealized_pl: unrealizedPL,\n            unrealized_pl_percent: unrealizedPLPercent,\n            quote: quote\n          };\n        } catch (error) {\n          console.warn(`Error enriching position for ${position.symbol}:`, error.message);\n          return position;\n        }\n      })\n    );\n\n    res.json({\n      success: true,\n      data: enrichedPositions\n    });\n\n  } catch (error) {\n    console.error('Error fetching positions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch positions',\n      message: error.message\n    });\n  }\n});\n\n// Close position\nrouter.delete('/positions/:symbol', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol } = req.params;\n    const { percentage = 100 } = req.body;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Close position\n    const result = await alpaca.closePosition(symbol.toUpperCase(), percentage);\n\n    // Log the trade\n    await query(`\n      INSERT INTO trading_orders (\n        user_id, alpaca_order_id, symbol, quantity, side, order_type,\n        order_status, created_at\n      ) VALUES ($1, $2, $3, $4, 'sell', 'market', 'submitted', NOW())\n    `, [userId, result.id, symbol.toUpperCase(), result.qty]);\n\n    res.json({\n      success: true,\n      data: result,\n      message: 'Position closed successfully'\n    });\n\n  } catch (error) {\n    console.error('Error closing position:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to close position',\n      message: error.message\n    });\n  }\n});\n\n// Get account info\nrouter.get('/account', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get account info\n    const account = await alpaca.getAccount();\n    \n    // Get portfolio history\n    const portfolioHistory = await alpaca.getPortfolioHistory({ period: '1M' });\n    \n    // Calculate additional metrics\n    const totalValue = parseFloat(account.equity);\n    const dayChange = parseFloat(account.equity) - parseFloat(account.last_equity);\n    const dayChangePercent = (dayChange / parseFloat(account.last_equity)) * 100;\n\n    res.json({\n      success: true,\n      data: {\n        account: {\n          ...account,\n          total_value: totalValue,\n          day_change: dayChange,\n          day_change_percent: dayChangePercent\n        },\n        portfolio_history: portfolioHistory\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching account:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch account info',\n      message: error.message\n    });\n  }\n});\n\n// Get market hours\nrouter.get('/market/hours', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { date } = req.query;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get market hours\n    const marketHours = await alpaca.getMarketHours(date);\n\n    res.json({\n      success: true,\n      data: marketHours\n    });\n\n  } catch (error) {\n    console.error('Error fetching market hours:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market hours',\n      message: error.message\n    });\n  }\n});\n\n// Get real-time quotes\nrouter.get('/quotes/:symbol', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol } = req.params;\n\n    // Get user's API credentials\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(401).json({\n        success: false,\n        error: 'Alpaca API credentials not found',\n        message: 'Please configure your Alpaca API keys in settings'\n      });\n    }\n\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get quote\n    const quote = await alpaca.getQuote(symbol.toUpperCase());\n    \n    // Get additional data\n    const [companyResult, signalResult] = await Promise.all([\n      query(`\n        SELECT company_name, sector\n        FROM stock_symbols_enhanced\n        WHERE symbol = $1\n      `, [symbol.toUpperCase()]),\n      \n      // Get latest signal\n      query(`\n        SELECT signal, date, buylevel, stoplevel\n        FROM buy_sell_daily\n        WHERE symbol = $1\n        ORDER BY date DESC\n        LIMIT 1\n      `, [symbol.toUpperCase()])\n    ]);\n\n    const company = companyResult.rows[0];\n    const signal = signalResult.rows[0];\n\n    res.json({\n      success: true,\n      data: {\n        symbol: symbol.toUpperCase(),\n        quote,\n        company,\n        signal,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching quote:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch quote',\n      message: error.message\n    });\n  }\n});\n\n// Generate trading signals\nrouter.post('/signals/generate', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbols, signalTypes = ['technical', 'fundamental'] } = req.body;\n\n    if (!symbols || symbols.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbols array is required'\n      });\n    }\n\n    const signalEngine = new SignalEngine();\n    const signals = [];\n\n    // Generate signals for each symbol\n    for (const symbol of symbols) {\n      try {\n        const symbolSignals = await signalEngine.generateSignalsForStock(symbol);\n        signals.push({\n          symbol,\n          signals: symbolSignals,\n          timestamp: new Date().toISOString()\n        });\n      } catch (error) {\n        console.warn(`Error generating signals for ${symbol}:`, error.message);\n        signals.push({\n          symbol,\n          error: error.message,\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n\n    res.json({\n      success: true,\n      data: signals\n    });\n\n  } catch (error) {\n    console.error('Error generating signals:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate signals',\n      message: error.message\n    });\n  }\n});\n\n// Calculate position sizing\nrouter.post('/position-sizing', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const {\n      symbol,\n      entryPrice,\n      stopLossPrice,\n      riskPercentage = 2,\n      accountValue\n    } = req.body;\n\n    if (!symbol || !entryPrice) {\n      return res.status(400).json({\n        success: false,\n        error: 'Symbol and entry price are required'\n      });\n    }\n\n    // Get account value if not provided\n    let totalAccountValue = accountValue;\n    if (!totalAccountValue) {\n      const credentials = await getUserApiKey(userId, 'alpaca');\n      if (credentials) {\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n        const account = await alpaca.getAccount();\n        totalAccountValue = parseFloat(account.equity);\n      }\n    }\n\n    if (!totalAccountValue) {\n      return res.status(400).json({\n        success: false,\n        error: 'Account value is required'\n      });\n    }\n\n    // Calculate position size\n    const riskAmount = totalAccountValue * (riskPercentage / 100);\n    let positionSize = 0;\n    let positionValue = 0;\n\n    if (stopLossPrice) {\n      const riskPerShare = Math.abs(entryPrice - stopLossPrice);\n      positionSize = Math.floor(riskAmount / riskPerShare);\n      positionValue = positionSize * entryPrice;\n    } else {\n      // No stop loss - use fixed percentage of account\n      positionValue = totalAccountValue * 0.1; // 10% of account\n      positionSize = Math.floor(positionValue / entryPrice);\n    }\n\n    // Calculate metrics\n    const portfolioPercentage = (positionValue / totalAccountValue) * 100;\n    const potentialLoss = stopLossPrice ? \n      positionSize * Math.abs(entryPrice - stopLossPrice) : 0;\n\n    res.json({\n      success: true,\n      data: {\n        symbol,\n        entry_price: entryPrice,\n        stop_loss_price: stopLossPrice,\n        position_size: positionSize,\n        position_value: positionValue,\n        portfolio_percentage: portfolioPercentage,\n        risk_amount: riskAmount,\n        potential_loss: potentialLoss,\n        account_value: totalAccountValue\n      }\n    });\n\n  } catch (error) {\n    console.error('Error calculating position sizing:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate position sizing',\n      message: error.message\n    });\n  }\n});\n\n// Trade History endpoint with comprehensive logging and error handling\nrouter.get('/history', createValidationMiddleware(tradingValidationSchemas.tradeHistory), async (req, res) => {\n  const requestId = require('crypto').randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    console.log(`🚀 [${requestId}] Trade history request initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    if (!userId) {\n      console.error(`❌ [${requestId}] Authentication failure - no user ID found`);\n      return res.status(401).json({ \n        success: false,\n        error: 'User authentication required',\n        requestId,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Parse query parameters with validation\n    const page = Math.max(1, parseInt(req.query.page) || 1);\n    const limit = Math.min(200, Math.max(1, parseInt(req.query.limit) || 50));\n    const symbol = req.query.symbol?.toUpperCase();\n    const status = req.query.status; // filled, canceled, pending, etc.\n    const startDate = req.query.start_date;\n    const endDate = req.query.end_date;\n    const orderType = req.query.order_type;\n    const side = req.query.side; // buy, sell\n    \n    console.log(`🔍 [${requestId}] Trade history parameters:`, {\n      page,\n      limit,\n      symbol,\n      status,\n      startDate,\n      endDate,\n      orderType,\n      side\n    });\n\n    // Get user's API credentials for Alpaca with comprehensive error handling\n    console.log(`🔑 [${requestId}] Retrieving user API credentials for trade history`);\n    const credentialsStart = Date.now();\n    \n    let credentials;\n    try {\n      credentials = await getUserApiKey(userId, 'alpaca');\n      const credentialsDuration = Date.now() - credentialsStart;\n      \n      if (!credentials) {\n        console.error(`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n          requestedProvider: 'alpaca',\n          userId: `${userId.substring(0, 8)}...`,\n          impact: 'Trade history will not be available from broker',\n          recommendation: 'User needs to configure Alpaca API keys in settings'\n        });\n        \n        return res.status(400).json({\n          success: false,\n          error: 'API credentials not configured',\n          message: 'Please configure your Alpaca API keys in Settings to view your trade history',\n          error_code: 'API_CREDENTIALS_MISSING',\n          provider: 'alpaca',\n          actions: [\n            'Go to Settings > API Keys',\n            'Add your Alpaca API credentials',\n            'Choose the correct environment (Paper Trading or Live Trading)',\n            'Test the connection to verify your credentials'\n          ],\n          request_info: {\n            request_id: requestId,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        keyLength: credentials.apiKey ? credentials.apiKey.length : 0,\n        hasSecret: !!credentials.apiSecret\n      });\n      \n    } catch (credentialsError) {\n      const credentialsDuration = Date.now() - credentialsStart;\n      console.error(`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n        error: credentialsError.message,\n        errorStack: credentialsError.stack,\n        provider: 'alpaca',\n        impact: 'Cannot access trade history from broker',\n        recommendation: 'Check API key configuration and database connectivity'\n      });\n      \n      return res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve API credentials',\n        message: 'There was an error accessing your API credentials. Please try again or contact support.',\n        error_code: 'API_CREDENTIALS_ERROR',\n        details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n        request_info: {\n          request_id: requestId,\n          error_duration_ms: credentialsDuration,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n\n    // Initialize Alpaca service with comprehensive error handling\n    console.log(`🏭 [${requestId}] Initializing Alpaca service for trade history`);\n    const serviceInitStart = Date.now();\n    let alpaca;\n    \n    try {\n      alpaca = new AlpacaService(\n        credentials.apiKey,\n        credentials.apiSecret,\n        credentials.isSandbox\n      );\n      const serviceInitDuration = Date.now() - serviceInitStart;\n      \n      console.log(`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`, {\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        hasApiKey: !!credentials.apiKey,\n        hasSecret: !!credentials.apiSecret\n      });\n      \n    } catch (serviceError) {\n      const serviceInitDuration = Date.now() - serviceInitStart;\n      console.error(`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`, {\n        error: serviceError.message,\n        errorStack: serviceError.stack,\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        impact: 'Cannot access trade history from broker',\n        recommendation: 'Check API key validity and Alpaca service status'\n      });\n      \n      return res.status(500).json({\n        success: false,\n        error: 'Failed to initialize trading service',\n        message: 'Unable to connect to your broker. Please verify your API credentials or try again later.',\n        error_code: 'TRADING_SERVICE_INIT_ERROR',\n        details: process.env.NODE_ENV === 'development' ? serviceError.message : 'Service initialization failed',\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        actions: [\n          'Verify your API credentials are correct',\n          'Check if your API keys have sufficient permissions',\n          'Try switching between Paper Trading and Live Trading modes',\n          'Contact broker support if the issue persists'\n        ],\n        request_info: {\n          request_id: requestId,\n          error_duration_ms: serviceInitDuration,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n\n    // Prepare Alpaca API parameters\n    const alpacaParams = {\n      limit: Math.min(limit, 500), // Alpaca has its own limits\n      page_token: req.query.page_token // For pagination continuation\n    };\n\n    // Add optional filters\n    if (status) alpacaParams.status = status;\n    if (startDate) alpacaParams.after = startDate;\n    if (endDate) alpacaParams.until = endDate;\n    if (symbol) alpacaParams.symbols = symbol;\n    if (side) alpacaParams.side = side;\n    if (orderType) alpacaParams.order_type = orderType;\n\n    // Fetch orders from Alpaca with comprehensive error handling\n    console.log(`📊 [${requestId}] Fetching orders from Alpaca API with parameters:`, alpacaParams);\n    const ordersStart = Date.now();\n    let ordersResponse;\n    \n    try {\n      ordersResponse = await Promise.race([\n        alpaca.getOrders(alpacaParams),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Orders fetch timeout after 15 seconds')), 15000)\n        )\n      ]);\n      \n      const ordersDuration = Date.now() - ordersStart;\n      console.log(`✅ [${requestId}] Orders retrieved from Alpaca in ${ordersDuration}ms`, {\n        ordersCount: ordersResponse?.length || 0,\n        hasNextPage: ordersResponse?.next_page_token ? true : false,\n        environment: credentials.isSandbox ? 'sandbox' : 'live'\n      });\n      \n    } catch (ordersError) {\n      const ordersDuration = Date.now() - ordersStart;\n      console.error(`❌ [${requestId}] Failed to fetch orders after ${ordersDuration}ms:`, {\n        error: ordersError.message,\n        errorStack: ordersError.stack,\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        errorCode: ordersError.code,\n        statusCode: ordersError.status,\n        impact: 'Trade history unavailable from broker',\n        recommendation: 'Check API key permissions and Alpaca service status'\n      });\n      \n      // Check for specific API errors\n      if (ordersError.message?.includes('timeout')) {\n        return res.status(504).json({\n          success: false,\n          error: 'Broker API timeout',\n          message: 'The broker API is taking too long to respond. Please try again.',\n          error_code: 'BROKER_API_TIMEOUT',\n          provider: 'alpaca',\n          environment: credentials.isSandbox ? 'sandbox' : 'live',\n          actions: [\n            'Try refreshing the page',\n            'Check your internet connection',\n            'Try again in a few minutes',\n            'Contact support if the issue persists'\n          ],\n          request_info: {\n            request_id: requestId,\n            timeout_duration_ms: ordersDuration,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      if (ordersError.status === 401 || ordersError.message?.includes('unauthorized')) {\n        return res.status(401).json({\n          success: false,\n          error: 'Invalid API credentials',\n          message: 'Your API credentials appear to be invalid or expired. Please update them in Settings.',\n          error_code: 'BROKER_API_UNAUTHORIZED',\n          provider: 'alpaca',\n          environment: credentials.isSandbox ? 'sandbox' : 'live',\n          actions: [\n            'Go to Settings > API Keys',\n            'Update your Alpaca API credentials',\n            'Ensure you\\'re using the correct environment (Paper vs Live)',\n            'Verify your API keys have trading permissions'\n          ],\n          request_info: {\n            request_id: requestId,\n            error_duration_ms: ordersDuration,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      if (ordersError.status === 403 || ordersError.message?.includes('forbidden')) {\n        return res.status(403).json({\n          success: false,\n          error: 'Insufficient API permissions',\n          message: 'Your API credentials do not have permission to access trade history.',\n          error_code: 'BROKER_API_FORBIDDEN',\n          provider: 'alpaca',\n          environment: credentials.isSandbox ? 'sandbox' : 'live',\n          actions: [\n            'Check your API key permissions in your broker account',\n            'Ensure your API keys have trading read access',\n            'Contact your broker to verify account permissions',\n            'Try regenerating your API keys'\n          ],\n          request_info: {\n            request_id: requestId,\n            error_duration_ms: ordersDuration,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      // Generic API error\n      return res.status(502).json({\n        success: false,\n        error: 'Broker API error',\n        message: 'Unable to retrieve trade history from your broker. Please try again later.',\n        error_code: 'BROKER_API_ERROR',\n        details: process.env.NODE_ENV === 'development' ? ordersError.message : 'External service error',\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        actions: [\n          'Try refreshing the page',\n          'Check broker service status',\n          'Verify your API credentials',\n          'Contact support if the issue persists'\n        ],\n        request_info: {\n          request_id: requestId,\n          error_duration_ms: ordersDuration,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n\n    // Also fetch executions/fills for more detailed trade history with enhanced error handling\n    console.log(`📊 [${requestId}] Fetching trade executions from Alpaca`);\n    const executionsStart = Date.now();\n    let executions = [];\n    \n    try {\n      const executionParams = { ...alpacaParams };\n      delete executionParams.status; // Not applicable for executions\n      \n      executions = await Promise.race([\n        alpaca.getAccountActivities('FILL', executionParams),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Executions fetch timeout after 12 seconds')), 12000)\n        )\n      ]);\n      \n      const executionsDuration = Date.now() - executionsStart;\n      console.log(`✅ [${requestId}] Trade executions retrieved in ${executionsDuration}ms`, {\n        executionsCount: executions?.length || 0,\n        environment: credentials.isSandbox ? 'sandbox' : 'live'\n      });\n      \n    } catch (executionError) {\n      const executionsDuration = Date.now() - executionsStart;\n      console.warn(`⚠️ [${requestId}] Failed to fetch executions after ${executionsDuration}ms:`, {\n        error: executionError.message,\n        errorCode: executionError.code,\n        statusCode: executionError.status,\n        impact: 'Trade execution details will be limited',\n        note: 'Continuing with orders data only'\n      });\n      \n      // Don't fail the entire request for execution errors - just log and continue\n      executions = [];\n    }\n\n    // Check database for any locally stored trade records\n    console.log(`🗄️ [${requestId}] Checking database for local trade records`);\n    const dbStart = Date.now();\n    let dbTrades = [];\n    try {\n      // Check if trading_orders table exists\n      const tableExists = await query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name = 'trading_orders'\n        )\n      `);\n\n      if (tableExists.rows[0].exists) {\n        let dbQuery = `\n          SELECT \n            user_id,\n            alpaca_order_id,\n            symbol,\n            quantity,\n            side,\n            order_type,\n            order_status,\n            filled_price,\n            filled_qty,\n            created_at,\n            updated_at\n          FROM trading_orders \n          WHERE user_id = $1\n        `;\n        \n        const dbParams = [userId];\n        let paramCount = 1;\n\n        // Add filters for database query\n        if (symbol) {\n          paramCount++;\n          dbQuery += ` AND symbol = $${paramCount}`;\n          dbParams.push(symbol);\n        }\n\n        if (status) {\n          paramCount++;\n          dbQuery += ` AND order_status = $${paramCount}`;\n          dbParams.push(status);\n        }\n\n        if (startDate) {\n          paramCount++;\n          dbQuery += ` AND created_at >= $${paramCount}`;\n          dbParams.push(startDate);\n        }\n\n        if (endDate) {\n          paramCount++;\n          dbQuery += ` AND created_at <= $${paramCount}`;\n          dbParams.push(endDate);\n        }\n\n        dbQuery += ` ORDER BY created_at DESC LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`;\n        dbParams.push(limit, (page - 1) * limit);\n\n        const dbResult = await query(dbQuery, dbParams);\n        dbTrades = dbResult.rows;\n        \n        const dbDuration = Date.now() - dbStart;\n        console.log(`✅ [${requestId}] Database trades retrieved in ${dbDuration}ms`, {\n          dbTradesCount: dbTrades.length,\n          hasTable: true\n        });\n      } else {\n        console.warn(`⚠️ [${requestId}] trading_orders table does not exist - skipping database lookup`);\n      }\n    } catch (dbError) {\n      const dbDuration = Date.now() - dbStart;\n      console.error(`❌ [${requestId}] Database query failed after ${dbDuration}ms:`, {\n        error: dbError.message,\n        errorCode: dbError.code,\n        impact: 'Will return only Alpaca API data'\n      });\n    }\n\n    // Combine and format trade history data\n    console.log(`🔄 [${requestId}] Processing and combining trade history data`);\n    const processStart = Date.now();\n    \n    const formattedTrades = {\n      orders: ordersResponse || [],\n      executions: executions || [],\n      database_records: dbTrades || []\n    };\n\n    // Create unified trade history view\n    const unifiedHistory = [];\n    \n    // Process Alpaca orders\n    if (formattedTrades.orders.length > 0) {\n      formattedTrades.orders.forEach(order => {\n        unifiedHistory.push({\n          id: order.id,\n          source: 'alpaca_order',\n          symbol: order.symbol,\n          side: order.side,\n          order_type: order.order_type,\n          quantity: parseFloat(order.qty),\n          filled_quantity: parseFloat(order.filled_qty || 0),\n          price: parseFloat(order.limit_price || order.stop_price || 0),\n          filled_price: parseFloat(order.filled_avg_price || 0),\n          status: order.status,\n          time_in_force: order.time_in_force,\n          created_at: order.created_at,\n          updated_at: order.updated_at,\n          submitted_at: order.submitted_at,\n          filled_at: order.filled_at\n        });\n      });\n    }\n\n    // Process executions\n    if (formattedTrades.executions.length > 0) {\n      formattedTrades.executions.forEach(execution => {\n        unifiedHistory.push({\n          id: execution.id,\n          source: 'alpaca_execution',\n          symbol: execution.symbol,\n          side: execution.side,\n          order_type: execution.order_type || 'unknown',\n          quantity: parseFloat(execution.qty),\n          filled_quantity: parseFloat(execution.qty),\n          price: parseFloat(execution.price),\n          filled_price: parseFloat(execution.price),\n          status: 'filled',\n          created_at: execution.transaction_time,\n          execution_id: execution.id\n        });\n      });\n    }\n\n    // Sort by creation time\n    unifiedHistory.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\n    const processDuration = Date.now() - processStart;\n    const totalDuration = Date.now() - requestStart;\n\n    console.log(`✅ [${requestId}] Trade history request completed in ${totalDuration}ms`, {\n      summary: {\n        totalRecords: unifiedHistory.length,\n        alpacaOrders: formattedTrades.orders.length,\n        alpacaExecutions: formattedTrades.executions.length,\n        databaseRecords: formattedTrades.database_records.length\n      },\n      performance: {\n        totalDuration: `${totalDuration}ms`,\n        credentialsDuration: `${credentialsDuration}ms`,\n        ordersDuration: `${ordersDuration}ms`,\n        processingDuration: `${processDuration}ms`\n      },\n      filters: {\n        symbol,\n        status,\n        startDate,\n        endDate,\n        page,\n        limit\n      },\n      status: 'SUCCESS'\n    });\n\n    // Return comprehensive trade history response\n    res.json({\n      success: true,\n      data: {\n        trades: unifiedHistory.slice(0, limit), // Apply client-side limit\n        raw_data: {\n          alpaca_orders: formattedTrades.orders.length,\n          alpaca_executions: formattedTrades.executions.length,\n          database_records: formattedTrades.database_records.length\n        },\n        pagination: {\n          page,\n          limit,\n          total_records: unifiedHistory.length,\n          has_more: unifiedHistory.length >= limit,\n          next_page_token: ordersResponse?.next_page_token\n        },\n        filters: {\n          symbol,\n          status,\n          start_date: startDate,\n          end_date: endDate,\n          order_type: orderType,\n          side\n        },\n        account_info: {\n          is_sandbox: credentials.isSandbox,\n          data_sources: ['alpaca_api', 'database']\n        },\n        request_info: {\n          request_id: requestId,\n          total_duration_ms: totalDuration,\n          timestamp: new Date().toISOString()\n        }\n      }\n    });\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Trade history request FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack,\n      errorCode: error.code,\n      impact: 'Trade history request failed completely',\n      recommendation: 'Check Alpaca API connectivity and credentials'\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch trade history',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n      request_info: {\n        request_id: requestId,\n        error_duration_ms: errorDuration,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Get buy signals endpoint \nrouter.get('/signals/buy', async (req, res) => {\n  console.log('📈 [TRADING] Fetching buy signals...');\n  try {\n    const { limit = 100, timeframe = 'daily' } = req.query;\n    \n    const tableName = `buy_sell_${timeframe}`;\n    \n    // Check if table exists\n    const tableExistsResult = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );`,\n      [tableName]\n    );\n    \n    if (!tableExistsResult.rows[0].exists) {\n      console.error(`[TRADING] Table does not exist: ${tableName}`);\n      return res.status(404).json({\n        success: false,\n        error: `Trading signals table ${tableName} not found`,\n        message: 'Buy signals data is not available at this time'\n      });\n    }\n\n    const result = await query(`\n      SELECT \n        symbol,\n        signal_date as date,\n        current_price as price,\n        performance_percent as changePercent,\n        signal_type as signal,\n        signal_strength as strength,\n        created_at,\n        updated_at\n      FROM ${tableName}\n      WHERE signal_type = 'Buy'\n      ORDER BY signal_date DESC, signal_strength DESC\n      LIMIT $1\n    `, [parseInt(limit)]);\n\n    const buySignals = result.rows.map(row => ({\n      symbol: row.symbol,\n      signal: row.signal,\n      date: row.date,\n      price: parseFloat(row.price || 0),\n      changePercent: parseFloat(row.changepercent || 0),\n      strength: row.strength || 'Medium'\n    }));\n\n    console.log(`📈 [TRADING] Returning ${buySignals.length} buy signals`);\n    res.json({\n      success: true,\n      data: buySignals,\n      count: buySignals.length,\n      timeframe\n    });\n\n  } catch (error) {\n    console.error('❌ [TRADING] Buy signals error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch buy signals',\n      message: error.message\n    });\n  }\n});\n\n// Get sell signals endpoint\nrouter.get('/signals/sell', async (req, res) => {\n  console.log('📉 [TRADING] Fetching sell signals...');\n  try {\n    const { limit = 100, timeframe = 'daily' } = req.query;\n    \n    const tableName = `buy_sell_${timeframe}`;\n    \n    // Check if table exists\n    const tableExistsResult = await query(\n      `SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );`,\n      [tableName]\n    );\n    \n    if (!tableExistsResult.rows[0].exists) {\n      console.error(`[TRADING] Table does not exist: ${tableName}`);\n      return res.status(404).json({\n        success: false,\n        error: `Trading signals table ${tableName} not found`,\n        message: 'Sell signals data is not available at this time'\n      });\n    }\n\n    const result = await query(`\n      SELECT \n        symbol,\n        signal_date as date,\n        current_price as price,\n        performance_percent as changePercent,\n        signal_type as signal,\n        signal_strength as strength,\n        created_at,\n        updated_at\n      FROM ${tableName}\n      WHERE signal_type = 'Sell'\n      ORDER BY signal_date DESC, signal_strength DESC\n      LIMIT $1\n    `, [parseInt(limit)]);\n\n    const sellSignals = result.rows.map(row => ({\n      symbol: row.symbol,\n      signal: row.signal,\n      date: row.date,\n      price: parseFloat(row.price || 0),\n      changePercent: parseFloat(row.changepercent || 0),\n      strength: row.strength || 'Medium'\n    }));\n\n    console.log(`📉 [TRADING] Returning ${sellSignals.length} sell signals`);\n    res.json({\n      success: true,\n      data: sellSignals,\n      count: sellSignals.length,\n      timeframe\n    });\n\n  } catch (error) {\n    console.error('❌ [TRADING] Sell signals error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch sell signals',\n      message: error.message\n    });\n  }\n});\n\n// Helper function to calculate order cost\nfunction calculateOrderCost(quantity, price, orderType) {\n  let cost = quantity * price;\n  \n  // Add buffer for market orders\n  if (orderType === ORDER_TYPES.MARKET) {\n    cost *= 1.02; // 2% buffer\n  }\n  \n  return cost;\n}\n\nmodule.exports = router;\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACI,MAAM,CAAC,CAAC;;AAE/B;AAAA;AAAAN,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAClCM,GAAG,CAACE,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,aAAa;IACrBC,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC5BM,GAAG,CAACE,IAAI,CAAC;IACPC,OAAO,EAAE,IAAI;IACbM,OAAO,EAAE,qBAAqB;IAC9BH,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCJ,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,MAAM;EAAEM;AAAM,CAAC;AAAA;AAAA,CAAAnB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAM;EAAEgB,kBAAkB;EAAEC,kBAAkB;EAAEC;AAAgB,CAAC;AAAA;AAAA,CAAAtB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AACjG,MAAM;EAAEmB;AAAkB,CAAC;AAAA;AAAA,CAAAvB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAM;EAAEoB,0BAA0B;EAAEC;AAAW,CAAC;AAAA;AAAA,CAAAzB,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AACtF,MAAMsB,aAAa;AAAA;AAAA,CAAA1B,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,8BAA8B,CAAC;AAC7D,MAAMuB,aAAa;AAAA;AAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMwB,cAAc;AAAA;AAAA,CAAA5B,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,yBAAyB,CAAC;AACzD,MAAMyB,YAAY;AAAA;AAAA,CAAA7B,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAErD;AAAA;AAAAJ,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACyB,GAAG,CAACP,iBAAiB,CAAC;;AAE7B;AACA,MAAMQ,wBAAwB;AAAA;AAAA,CAAA/B,cAAA,GAAAG,CAAA,QAAG;EAC/B6B,YAAY,EAAE;IACZC,IAAI,EAAE;MACJC,IAAI,EAAE,SAAS;MACfC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAACY,OAAO,CAACD,KAAK,EAAE;UAAEE,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,IAAI;UAAEC,YAAY,EAAE;QAAE,CAAC,CAAC;MAAD,CAAC;MACvFC,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,UAAAN,KAAK,IAAI,CAAC;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAIN,KAAK,IAAI,IAAI;MAAD,CAAC;MACjDO,YAAY,EAAE;IAChB,CAAC;IACDC,KAAK,EAAE;MACLV,IAAI,EAAE,SAAS;MACfC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAACY,OAAO,CAACD,KAAK,EAAE;UAAEE,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACvFC,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,UAAAN,KAAK,IAAI,CAAC;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAIN,KAAK,IAAI,GAAG;MAAD,CAAC;MAChDO,YAAY,EAAE;IAChB,CAAC;IACDE,MAAM,EAAE;MACNX,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAACoB,MAAM,CAACT,KAAK,CAAC;MAAD,CAAC;MAC9CK,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,WAACN,KAAK;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAI,eAAe,CAACI,IAAI,CAACV,KAAK,CAAC;MAAD,CAAC;MAC3DO,YAAY,EAAE;IAChB,CAAC;IACD9B,MAAM,EAAE;MACNqB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAACsB,MAAM,CAACX,KAAK,EAAE;UAAEY,SAAS,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACpFR,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,WAACN,KAAK;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC,CAACQ,QAAQ,CAACd,KAAK,CAAC;MAAD,CAAC;MAC7FO,YAAY,EAAE;IAChB,CAAC;IACDQ,IAAI,EAAE;MACJjB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAACsB,MAAM,CAACX,KAAK,EAAE;UAAEY,SAAS,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACpFR,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,WAACN,KAAK;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACQ,QAAQ,CAACd,KAAK,CAAC;MAAD,CAAC;MAC/DO,YAAY,EAAE;IAChB;EACF,CAAC;EAEDS,cAAc,EAAE;IACdP,MAAM,EAAE;MACNQ,QAAQ,EAAE,IAAI;MACdnB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAEV,UAAU,CAACoB,MAAM;MAC5BJ,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,sBAAe,CAAC2C,IAAI,CAACV,KAAK,CAAC;MAAD,CAAC;MACjDO,YAAY,EAAE;IAChB,CAAC;IACDW,UAAU,EAAE;MACVD,QAAQ,EAAE,IAAI;MACdnB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAAC8B,KAAK,CAACnB,KAAK,EAAE;UAAEE,GAAG,EAAE,IAAI;UAAEC,GAAG,EAAE;QAAO,CAAC,CAAC;MAAD,CAAC;MACzEE,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,UAAAN,KAAK,GAAG,CAAC;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAIN,KAAK,IAAI,MAAM;MAAD,CAAC;MAClDO,YAAY,EAAE;IAChB,CAAC;IACDa,aAAa,EAAE;MACbtB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAAC8B,KAAK,CAACnB,KAAK,EAAE;UAAEE,GAAG,EAAE,IAAI;UAAEC,GAAG,EAAE;QAAO,CAAC,CAAC;MAAD,CAAC;MACzEE,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,WAACN,KAAK;QAAK;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAAN,KAAK,GAAG,CAAC;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAIN,KAAK,IAAI,MAAM,CAAC;MAAD,CAAC;MAC9DO,YAAY,EAAE;IAChB,CAAC;IACDc,cAAc,EAAE;MACdvB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsB,UAAU,CAAC8B,KAAK,CAACnB,KAAK,EAAE;UAAEE,GAAG,EAAE,GAAG;UAAEC,GAAG,EAAE,EAAE;UAAEC,YAAY,EAAE;QAAE,CAAC,CAAC;MAAD,CAAC;MACrFC,SAAS,EAAGL,KAAK,IAAK;QAAA;QAAApC,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAA0C,CAAA,UAAAN,KAAK,IAAI,GAAG;QAAA;QAAA,CAAApC,cAAA,GAAA0C,CAAA,UAAIN,KAAK,IAAI,EAAE;MAAD,CAAC;MACjDO,YAAY,EAAE;IAChB;EACF;AACF,CAAC;;AAED;AACA,MAAMe,WAAW;AAAA;AAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAG;EAClBwD,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE,YAAY;EACxBC,OAAO,EAAE,SAAS;EAClBC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE;AACP,CAAC;;AAED;AACA,MAAMC,WAAW;AAAA;AAAA,CAAAlE,cAAA,GAAAG,CAAA,QAAG;EAClBgE,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,aAAa;AAAA;AAAA,CAAArE,cAAA,GAAAG,CAAA,QAAG;EACpBmE,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE;AACP,CAAC;;AAED;AACA,MAAMC,gBAAgB;AAAA;AAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAG;EACvBwE,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,eAAeC,mBAAmBA,CAACC,UAAU,EAAE;EAAA;EAAAhF,cAAA,GAAAU,CAAA;EAC7C,MAAMuE,OAAO;EAAA;EAAA,CAAAjF,cAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;EAAC;EAAAH,cAAA,GAAAG,CAAA;EACnB,KAAK,MAAM+E,SAAS,IAAIF,UAAU,EAAE;IAAA;IAAAhF,cAAA,GAAAG,CAAA;IAClC,IAAI;MACF,MAAMgF,iBAAiB;MAAA;MAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG,MAAMgB,KAAK,CACnC;AACR;AACA;AACA;AACA,WAAW,EACH,CAAC+D,SAAS,CACZ,CAAC;MAAC;MAAAlF,cAAA,GAAAG,CAAA;MACF8E,OAAO,CAACC,SAAS,CAAC,GAAGC,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAAtF,cAAA,GAAAG,CAAA;MACdoF,OAAO,CAACD,KAAK,CAAC,wBAAwBJ,SAAS,GAAG,EAAEI,KAAK,CAACpE,OAAO,CAAC;MAAC;MAAAlB,cAAA,GAAAG,CAAA;MACnE8E,OAAO,CAACC,SAAS,CAAC,GAAG,KAAK;IAC5B;EACF;EAAC;EAAAlF,cAAA,GAAAG,CAAA;EACD,OAAO8E,OAAO;AAChB;;AAEA;AAAA;AAAAjF,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACvCoF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAAC;EAAAxF,cAAA,GAAAG,CAAA;EAE/C,IAAI;IACF;IACA,MAAMsF,cAAc;IAAA;IAAA,CAAAzF,cAAA,GAAAG,CAAA,QAAG,CACrB,gBAAgB,EAAE,iBAAiB,EAAE,kBAAkB,EACvD,aAAa,EAAE,iBAAiB,EAAE,cAAc,CACjD;IAED,MAAMuF,WAAW;IAAA;IAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAG,MAAM4E,mBAAmB,CAACU,cAAc,CAAC;;IAE7D;IACA,MAAME,YAAY;IAAA;IAAA,CAAA3F,cAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACxB,KAAK,MAAM,CAAC+E,SAAS,EAAEG,MAAM,CAAC,IAAIO,MAAM,CAACC,OAAO,CAACH,WAAW,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAG,CAAA;MAC7D,IAAIkF,MAAM,EAAE;QAAA;QAAArF,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACV,IAAI;UACF,MAAM2F,WAAW;UAAA;UAAA,CAAA9F,cAAA,GAAAG,CAAA,QAAG,MAAMgB,KAAK,CAAC,iCAAiC+D,SAAS,EAAE,CAAC;UAAC;UAAAlF,cAAA,GAAAG,CAAA;UAC9EwF,YAAY,CAACT,SAAS,CAAC,GAAGa,QAAQ,CAACD,WAAW,CAACV,IAAI,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC;QAC/D,CAAC,CAAC,OAAOV,KAAK,EAAE;UAAA;UAAAtF,cAAA,GAAAG,CAAA;UACdwF,YAAY,CAACT,SAAS,CAAC,GAAG;YAAEI,KAAK,EAAEA,KAAK,CAACpE;UAAQ,CAAC;QACpD;MACF,CAAC,MAAM;QAAA;QAAAlB,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACLwF,YAAY,CAACT,SAAS,CAAC,GAAG,sBAAsB;MAClD;IACF;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPE,MAAM,EAAE,IAAI;MACZE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCgF,MAAM,EAAEP,WAAW;MACnBC,YAAY,EAAEA,YAAY;MAC1BO,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC3DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,gCAAgC;MACvCpE,OAAO,EAAEoE,KAAK,CAACpE,OAAO;MACtBH,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAjB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACpDoF,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAE;IAChEW,MAAM,EAAE3F,GAAG,CAAC2F,MAAM;IAClBhF,KAAK,EAAEX,GAAG,CAACW,KAAK;IAChBiF,IAAI,EAAE5F,GAAG,CAAC4F,IAAI;IACdC,MAAM,EAAE7F,GAAG,CAAC6F,MAAM;IAClBC,IAAI,EAAE,IAAItF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EAC/B,CAAC,CAAC;EAAC;EAAAjB,cAAA,GAAAG,CAAA;EACH,IAAI;IACF,MAAM;MAAEoG;IAAU,CAAC;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,QAAGK,GAAG,CAAC2F,MAAM;IAChC,MAAM;MAAEvD,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,UAAG,GAAG;MAAET,IAAI;MAAA;MAAA,CAAAjC,cAAA,GAAA0C,CAAA,WAAG,CAAC;MAAEG,MAAM;MAAE2D,WAAW;MAAEC;IAAY,CAAC;IAAA;IAAA,CAAAzG,cAAA,GAAAG,CAAA,QAAGK,GAAG,CAACW,KAAK;IAC7E,MAAMuF,OAAO;IAAA;IAAA,CAAA1G,cAAA,GAAAG,CAAA,QAAGwG,IAAI,CAACpE,GAAG,CAAC,CAAC,EAAEwD,QAAQ,CAAC9D,IAAI,CAAC,CAAC;IAC3C,MAAM2E,QAAQ;IAAA;IAAA,CAAA5G,cAAA,GAAAG,CAAA,QAAGwG,IAAI,CAACpE,GAAG,CAAC,CAAC,EAAEwD,QAAQ,CAACnD,KAAK,CAAC,CAAC;IAC7C,MAAMiE,MAAM;IAAA;IAAA,CAAA7G,cAAA,GAAAG,CAAA,QAAG,CAACuG,OAAO,GAAG,CAAC,IAAIE,QAAQ;;IAEvC;IACA,MAAME,eAAe;IAAA;IAAA,CAAA9G,cAAA,GAAAG,CAAA,QAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAAC2G,eAAe,CAAC5D,QAAQ,CAACqD,SAAS,CAAC,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACxCoF,OAAO,CAACwB,IAAI,CAAC,8BAA8B,EAAER,SAAS,CAAC;MAAC;MAAAvG,cAAA,GAAAG,CAAA;MACxD,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAAuD,CAAC,CAAC;IAChG,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMwC,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,QAAG,YAAYoG,SAAS,EAAE;;IAEzC;IACA,MAAMpB,iBAAiB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG,MAAMgB,KAAK,CACnC;AACN;AACA;AACA;AACA,SAAS,EACH,CAAC+D,SAAS,CACZ,CAAC;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IACF,IAAI,CAACgF,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;MAAA;MAAArF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrCoF,OAAO,CAACD,KAAK,CAAC,mCAAmCJ,SAAS,EAAE,CAAC;MAAC;MAAAlF,cAAA,GAAAG,CAAA;MAC9D,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1B2E,KAAK,EAAE,SAASJ,SAAS,kCAAkC;QAC3D8B,OAAO,EAAE,kBAAkB9B,SAAS;MACtC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,IAAIuE,WAAW;IAAA;IAAA,CAAAjH,cAAA,GAAAG,CAAA,QAAG,EAAE;IACpB,MAAM+G,WAAW;IAAA;IAAA,CAAAlH,cAAA,GAAAG,CAAA,QAAG,EAAE;IACtB,IAAIgH,UAAU;IAAA;IAAA,CAAAnH,cAAA,GAAAG,CAAA,QAAG,CAAC;IAElB,MAAMiH,UAAU;IAAA;IAAA,CAAApH,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEtB,IAAI0C,MAAM,EAAE;MAAA;MAAA7C,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACVgH,UAAU,EAAE;MAAC;MAAAnH,cAAA,GAAAG,CAAA;MACbiH,UAAU,CAACC,IAAI,CAAC,aAAaF,UAAU,EAAE,CAAC;MAAC;MAAAnH,cAAA,GAAAG,CAAA;MAC3C+G,WAAW,CAACG,IAAI,CAACxE,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAAA;IAAA;MAAAtH,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAIqG,WAAW,KAAK,KAAK,EAAE;MAAA;MAAAxG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzBiH,UAAU,CAACC,IAAI,CAAC,gBAAgB,CAAC;IACnC,CAAC,MAAM;MAAA;MAAArH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA,IAAIqG,WAAW,KAAK,MAAM,EAAE;QAAA;QAAAxG,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACjCiH,UAAU,CAACC,IAAI,CAAC,iBAAiB,CAAC;MACpC,CAAC;MAAA;MAAA;QAAArH,cAAA,GAAA0C,CAAA;MAAA;IAAD;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAIiH,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzB8G,WAAW,GAAG,QAAQ,GAAGG,UAAU,CAACI,IAAI,CAAC,OAAO,CAAC;IACnD,CAAC;IAAA;IAAA;MAAAxH,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,IAAI+E,QAAQ;IAAC;IAAAzH,cAAA,GAAAG,CAAA;IACb,IAAIsG,WAAW,KAAK,MAAM,EAAE;MAAA;MAAAzG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC1BsH,QAAQ,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBvC,SAAS;AAC1B;AACA;AACA;AACA,YAAY+B,WAAW;AACvB;AACA;AACA;AACA;AACA,iBAAiBC,WAAW,CAACK,MAAM,GAAG,CAAC,YAAYL,WAAW,CAACK,MAAM,GAAG,CAAC;AACzE,OAAO;IACH,CAAC,MAAM;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACLsH,QAAQ,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAevC,SAAS;AACxB;AACA;AACA;AACA,UAAU+B,WAAW;AACrB;AACA,iBAAiBC,WAAW,CAACK,MAAM,GAAG,CAAC,YAAYL,WAAW,CAACK,MAAM,GAAG,CAAC;AACzE,OAAO;IACH;;IAEA;IACA,IAAIG,UAAU;IAAC;IAAA1H,cAAA,GAAAG,CAAA;IACf,IAAIsG,WAAW,KAAK,MAAM,EAAE;MAAA;MAAAzG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC1BuH,UAAU,GAAG;AACnB;AACA;AACA;AACA,iBAAiBxC,SAAS;AAC1B,YAAY+B,WAAW;AACvB;AACA;AACA;AACA;AACA,OAAO;IACH,CAAC,MAAM;MAAA;MAAAjH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACLuH,UAAU,GAAG;AACnB;AACA,eAAexC,SAAS;AACxB,UAAU+B,WAAW;AACrB,OAAO;IACH;IAAC;IAAAjH,cAAA,GAAAG,CAAA;IAED+G,WAAW,CAACG,IAAI,CAACT,QAAQ,EAAEC,MAAM,CAAC;;IAElC;IAAA;IAAA7G,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE0B,WAAW,CAACK,MAAM,EAAE,YAAY,CAAC;IAAC;IAAAvH,cAAA,GAAAG,CAAA;IAC7FoF,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAE7D,MAAM,CAACmC,MAAM,EAAE7B,WAAW,CAAC;IAAA;IAAA,CAAA9F,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CAC9C1G,KAAK,CAACsG,QAAQ,EAAEP,WAAW,CAAC,EAC5B/F,KAAK,CAACuG,UAAU,EAAER,WAAW,CAACY,KAAK,CAAC,CAAC,EAAEX,UAAU,CAAC,CAAC,CACpD,CAAC;IAEF,MAAMY,KAAK;IAAA;IAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG4F,QAAQ,CAACD,WAAW,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC2C,KAAK,CAAC;IACjD,MAAMC,UAAU;IAAA;IAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACsB,IAAI,CAACF,KAAK,GAAGnB,QAAQ,CAAC;IAAC;IAAA5G,cAAA,GAAAG,CAAA;IAE/C;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAACiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAA0C,CAAA,WAAI,CAACwF,KAAK,CAACC,OAAO,CAACR,MAAM,CAACvC,IAAI,CAAC;IAAA;IAAA,CAAApF,cAAA,GAAA0C,CAAA,WAAIiF,MAAM,CAACvC,IAAI,CAACmC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACtEoF,OAAO,CAACwB,IAAI,CAAC,oCAAoC,EAAE;QAAER;MAAU,CAAC,CAAC;MACjE;MAAA;MAAAvG,cAAA,GAAAG,CAAA;MACA,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,IAAI;QACbwH,IAAI,EAAE,EAAE;QACR7B,SAAS;QACTP,KAAK,EAAE,CAAC;QACRqC,UAAU,EAAE;UACVpG,IAAI,EAAEyE,OAAO;UACb9D,KAAK,EAAEgE,QAAQ;UACfmB,KAAK,EAAE,CAAC;UACRC,UAAU,EAAE,CAAC;UACbM,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;QACDC,QAAQ,EAAE;UACRhC,WAAW;UAAE;UAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAA8D,WAAW;UAAA;UAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAI,KAAK;UACjCG,MAAM;UAAE;UAAA,CAAA7C,cAAA,GAAA0C,CAAA,WAAAG,MAAM;UAAA;UAAA,CAAA7C,cAAA,GAAA0C,CAAA,WAAI,IAAI;UACtBxB,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDoF,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEmC,MAAM,CAACvC,IAAI,CAACmC,MAAM,EAAE,aAAa,EAAEQ,KAAK,EAAE,OAAO,CAAC;IAAC;IAAA/H,cAAA,GAAAG,CAAA;IAE3FM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAET,MAAM,CAACvC,IAAI;MACjBmB,SAAS;MACTP,KAAK,EAAE2B,MAAM,CAACvC,IAAI,CAACmC,MAAM;MACzBc,UAAU,EAAE;QACVpG,IAAI,EAAEyE,OAAO;QACb9D,KAAK,EAAEgE,QAAQ;QACfmB,KAAK;QACLC,UAAU;QACVM,OAAO,EAAE5B,OAAO,GAAGsB,UAAU;QAC7BO,OAAO,EAAE7B,OAAO,GAAG;MACrB,CAAC;MACD8B,QAAQ,EAAE;QACRhC,WAAW;QAAE;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAA8D,WAAW;QAAA;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAI,KAAK;QACjCG,MAAM;QAAE;QAAA,CAAA7C,cAAA,GAAA0C,CAAA,WAAAG,MAAM;QAAA;QAAA,CAAA7C,cAAA,GAAA0C,CAAA,WAAI,IAAI;MACxB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO4C,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAClEM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,iCAAiC;MACxCpE,OAAO,EAAEoE,KAAK,CAACpE,OAAO;MACtBuH,KAAK,EAAEnD,KAAK,CAACmD;IACf,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAzI,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM;MAAEoG;IAAU,CAAC;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;IAEhC,MAAMW,eAAe;IAAA;IAAA,CAAA9G,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAAC2G,eAAe,CAAC5D,QAAQ,CAACqD,SAAS,CAAC,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACxC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAAoB,CAAC,CAAC;IAC7D,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMwC,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,YAAYoG,SAAS,EAAE;IACvC,MAAMkB,QAAQ;IAAA;IAAA,CAAAzH,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa+E,SAAS;AACtB;AACA,KAAK;IAED,MAAMyC,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAACsG,QAAQ,CAAC;IAAC;IAAAzH,cAAA,GAAAG,CAAA;IAErC;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAACiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAA0C,CAAA,WAAI,CAACwF,KAAK,CAACC,OAAO,CAACR,MAAM,CAACvC,IAAI,CAAC;IAAA;IAAA,CAAApF,cAAA,GAAA0C,CAAA,WAAIiF,MAAM,CAACvC,IAAI,CAACmC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACtE,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAA+B,CAAC,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAET,MAAM,CAACvC,IAAI,CAAC,CAAC,CAAC;MACpBmB,SAAS;MACTmC,MAAM,EAAE;IACV,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOpD,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACxDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,iCAAiC;MACxCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EAAG;AACT,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC/C,IAAI;IACF,MAAM8B,IAAI;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAqD,QAAQ,CAACvF,GAAG,CAACW,KAAK,CAACc,IAAI,CAAC;IAAA;IAAA,CAAAjC,cAAA,GAAA0C,CAAA,WAAI,CAAC;IAC1C,MAAME,KAAK;IAAA;IAAA,CAAA5C,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAqD,QAAQ,CAACvF,GAAG,CAACW,KAAK,CAACyB,KAAK,CAAC;IAAA;IAAA,CAAA5C,cAAA,GAAA0C,CAAA,WAAI,EAAE;IAC7C,MAAMmE,MAAM;IAAA;IAAA,CAAA7G,cAAA,GAAAG,CAAA,SAAG,CAAC8B,IAAI,GAAG,CAAC,IAAIW,KAAK;IAEjC,MAAM+F,UAAU;IAAA;IAAA,CAAA3I,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMuH,UAAU;IAAA;IAAA,CAAA1H,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA,KAAK;IAED,MAAM,CAACyI,WAAW,EAAE9C,WAAW,CAAC;IAAA;IAAA,CAAA9F,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CACnD1G,KAAK,CAACwH,UAAU,EAAE,CAAC/F,KAAK,EAAEiE,MAAM,CAAC,CAAC,EAClC1F,KAAK,CAACuG,UAAU,CAAC,CAClB,CAAC;IAEF,MAAMK,KAAK;IAAA;IAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG4F,QAAQ,CAACD,WAAW,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC2C,KAAK,CAAC;IACjD,MAAMC,UAAU;IAAA;IAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACsB,IAAI,CAACF,KAAK,GAAGnF,KAAK,CAAC;IAAC;IAAA5C,cAAA,GAAAG,CAAA;IAE5C;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAACkG,WAAW;IAAA;IAAA,CAAA5I,cAAA,GAAA0C,CAAA,WAAI,CAACwF,KAAK,CAACC,OAAO,CAACS,WAAW,CAACxD,IAAI,CAAC;IAAA;IAAA,CAAApF,cAAA,GAAA0C,CAAA,WAAIkG,WAAW,CAACxD,IAAI,CAACmC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrF,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAA+B,CAAC,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPyH,IAAI,EAAEQ,WAAW,CAACxD,IAAI;MACtBiD,UAAU,EAAE;QACVpG,IAAI;QACJW,KAAK;QACLmF,KAAK;QACLC,UAAU;QACVM,OAAO,EAAErG,IAAI,GAAG+F,UAAU;QAC1BO,OAAO,EAAEtG,IAAI,GAAG;MAClB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqD,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACtDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAE2E,KAAK,EAAE;IAAgC,CAAC,CAAC;EAClE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtF,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM;MAAE0I;IAAO,CAAC;IAAA;IAAA,CAAA7I,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;IAC7B,MAAMI,SAAS;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAlC,GAAG,CAACW,KAAK,CAACoF,SAAS;IAAA;IAAA,CAAAvG,cAAA,GAAA0C,CAAA,WAAI,OAAO,GAAC,CAAC;;IAElD,IAAIwC,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,yBAAyB;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAC1C,IAAIoG,SAAS,KAAK,QAAQ,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA+E,SAAS,GAAG,0BAA0B;IAAA,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACnE,IAAIoG,SAAS,KAAK,SAAS,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA+E,SAAS,GAAG,2BAA2B;IAAA,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAA0C,CAAA;IAAA;IAErE,MAAMoG,SAAS;IAAA;IAAA,CAAA9I,cAAA,GAAAG,CAAA,SAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa+E,SAAS;AACtB;AACA;AACA;AACA,KAAK;IAED,MAAMyC,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC2H,SAAS,EAAE,CAACD,MAAM,CAACvB,WAAW,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAtH,cAAA,GAAAG,CAAA;IAE9D;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAACiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAA0C,CAAA,WAAI,CAACwF,KAAK,CAACC,OAAO,CAACR,MAAM,CAACvC,IAAI,CAAC;IAAA;IAAA,CAAApF,cAAA,GAAA0C,CAAA,WAAIiF,MAAM,CAACvC,IAAI,CAACmC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACtE,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAA+B,CAAC,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPkI,MAAM,EAAEA,MAAM,CAACvB,WAAW,CAAC,CAAC;MAC5Bf,SAAS;MACT6B,IAAI,EAAET,MAAM,CAACvC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC7DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAE2E,KAAK,EAAE;IAAuC,CAAC,CAAC;EACzE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtF,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC7C,IAAI;IACF,MAAM4I,IAAI;IAAA;IAAA,CAAA/I,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAqD,QAAQ,CAACvF,GAAG,CAACW,KAAK,CAAC4H,IAAI,CAAC;IAAA;IAAA,CAAA/I,cAAA,GAAA0C,CAAA,WAAI,EAAE;IAE3C,MAAMsG,gBAAgB;IAAA;IAAA,CAAAhJ,cAAA,GAAAG,CAAA,SAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C4I,IAAI;AAC/C;AACA,KAAK;IAED,MAAMpB,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC6H,gBAAgB,CAAC;IAAC;IAAAhJ,cAAA,GAAAG,CAAA;IAE7C;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAACiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAA0C,CAAA,WAAI,CAACwF,KAAK,CAACC,OAAO,CAACR,MAAM,CAACvC,IAAI,CAAC;IAAA;IAAA,CAAApF,cAAA,GAAA0C,CAAA,WAAIiF,MAAM,CAACvC,IAAI,CAACmC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACtE,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAA+B,CAAC,CAAC;IACxE,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPsI,WAAW,EAAEF,IAAI;MACjBG,WAAW,EAAEvB,MAAM,CAACvC,IAAI;MACxBrE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACzDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAE2E,KAAK,EAAE;IAAmC,CAAC,CAAC;EACrE;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtF,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,6BAA6B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC5DoF,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EAAC;EAAAxF,cAAA,GAAAG,CAAA;EAEhE,IAAI;IACF,MAAM;MAAEoG;IAAU,CAAC;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;IAChC,MAAM;MAAEvD,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,WAAG,EAAE;MAAET,IAAI;MAAA;MAAA,CAAAjC,cAAA,GAAA0C,CAAA,WAAG,CAAC;MAAE8D,WAAW;MAAE2C,MAAM;MAAEC,YAAY;MAAA;MAAA,CAAApJ,cAAA,GAAA0C,CAAA,WAAG,GAAG;IAAC,CAAC;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;IACnF,MAAMuF,OAAO;IAAA;IAAA,CAAA1G,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACpE,GAAG,CAAC,CAAC,EAAEwD,QAAQ,CAAC9D,IAAI,CAAC,CAAC;IAC3C,MAAM2E,QAAQ;IAAA;IAAA,CAAA5G,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACpE,GAAG,CAAC,CAAC,EAAEwD,QAAQ,CAACnD,KAAK,CAAC,CAAC;IAC7C,MAAMiE,MAAM;IAAA;IAAA,CAAA7G,cAAA,GAAAG,CAAA,SAAG,CAACuG,OAAO,GAAG,CAAC,IAAIE,QAAQ;;IAEvC;IACA,MAAME,eAAe;IAAA;IAAA,CAAA9G,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAAC2G,eAAe,CAAC5D,QAAQ,CAACqD,SAAS,CAAC,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACxC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAAuD,CAAC,CAAC;IAChG,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMwC,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,YAAYoG,SAAS,EAAE;;IAEzC;IACA,MAAMpB,iBAAiB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CACnC;AACN;AACA;AACA;AACA,SAAS,EACH,CAAC+D,SAAS,CACZ,CAAC;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACgF,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;MAAA;MAAArF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1B2E,KAAK,EAAE,SAASJ,SAAS;MAC3B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,IAAIuE,WAAW;IAAA;IAAA,CAAAjH,cAAA,GAAAG,CAAA,SAAG,EAAE;IACpB,MAAM+G,WAAW;IAAA;IAAA,CAAAlH,cAAA,GAAAG,CAAA,SAAG,EAAE;IACtB,IAAIgH,UAAU;IAAA;IAAA,CAAAnH,cAAA,GAAAG,CAAA,SAAG,CAAC;IAElB,MAAMiH,UAAU;IAAA;IAAA,CAAApH,cAAA,GAAAG,CAAA,SAAG,EAAE;;IAErB;IACA,IAAIkJ,UAAU;IAAC;IAAArJ,cAAA,GAAAG,CAAA;IACf,IAAIoG,SAAS,KAAK,OAAO,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzBkJ,UAAU,GAAG,2CAA2C;IAC1D,CAAC,MAAM;MAAA;MAAArJ,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA,IAAIoG,SAAS,KAAK,QAAQ,EAAE;QAAA;QAAAvG,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACjCkJ,UAAU,GAAG,4CAA4C;MAC3D,CAAC,MAAM;QAAA;QAAArJ,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACLkJ,UAAU,GAAG,4CAA4C;MAC3D;IAAA;IAAC;IAAArJ,cAAA,GAAAG,CAAA;IACDiH,UAAU,CAACC,IAAI,CAACgC,UAAU,CAAC;;IAE3B;IAAA;IAAArJ,cAAA,GAAAG,CAAA;IACAiH,UAAU,CAACC,IAAI,CAAC,oBAAoB,CAAC;IAAC;IAAArH,cAAA,GAAAG,CAAA;IACtCiH,UAAU,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAAC;IAAArH,cAAA,GAAAG,CAAA;IACpCiH,UAAU,CAACC,IAAI,CAAC,cAAc,CAAC;;IAE/B;IAAA;IAAArH,cAAA,GAAAG,CAAA;IACA,IAAIqG,WAAW,KAAK,KAAK,EAAE;MAAA;MAAAxG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzBiH,UAAU,CAACC,IAAI,CAAC,gBAAgB,CAAC;IACnC,CAAC,MAAM;MAAA;MAAArH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA,IAAIqG,WAAW,KAAK,MAAM,EAAE;QAAA;QAAAxG,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACjCiH,UAAU,CAACC,IAAI,CAAC,iBAAiB,CAAC;MACpC,CAAC;MAAA;MAAA;QAAArH,cAAA,GAAA0C,CAAA;MAAA;IAAD;;IAEA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAyG,MAAM;IAAA;IAAA,CAAAnJ,cAAA,GAAA0C,CAAA,WAAIyG,MAAM,KAAK,KAAK,GAAE;MAAA;MAAAnJ,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC9BgH,UAAU,EAAE;MAAC;MAAAnH,cAAA,GAAAG,CAAA;MACbiH,UAAU,CAACC,IAAI,CAAC,eAAeF,UAAU,EAAE,CAAC;MAAC;MAAAnH,cAAA,GAAAG,CAAA;MAC7C+G,WAAW,CAACG,IAAI,CAAC8B,MAAM,CAAC;IAC1B,CAAC;IAAA;IAAA;MAAAnJ,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAIiH,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzB8G,WAAW,GAAG,QAAQ,GAAGG,UAAU,CAACI,IAAI,CAAC,OAAO,CAAC;IACnD,CAAC;IAAA;IAAA;MAAAxH,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAM+E,QAAQ;IAAA;IAAA,CAAAzH,cAAA,GAAAG,CAAA,SAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe+E,SAAS;AACxB;AACA;AACA;AACA,UAAU+B,WAAW;AACrB;AACA;AACA;AACA;AACA,kCAAkCC,WAAW,CAACK,MAAM,GAAG,CAAC;AACxD;AACA;AACA;AACA;AACA,eAAeL,WAAW,CAACK,MAAM,GAAG,CAAC,YAAYL,WAAW,CAACK,MAAM,GAAG,CAAC;AACvE,KAAK;;IAED;IACA,MAAMG,UAAU;IAAA;IAAA,CAAA1H,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe+E,SAAS;AACxB;AACA,UAAU+B,WAAW;AACrB;AACA;AACA;AACA;AACA,kCAAkCC,WAAW,CAACK,MAAM,GAAG,CAAC;AACxD,KAAK;IAAC;IAAAvH,cAAA,GAAAG,CAAA;IAEF+G,WAAW,CAACG,IAAI,CAACiC,UAAU,CAACF,YAAY,CAAC,EAAExC,QAAQ,EAAEC,MAAM,CAAC;IAAC;IAAA7G,cAAA,GAAAG,CAAA;IAE7DoF,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEiC,QAAQ,CAAC;IAAC;IAAAzH,cAAA,GAAAG,CAAA;IACnEoF,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE0B,WAAW,CAACK,MAAM,EAAE,YAAY,CAAC;IAC/E;;IAEA,MAAM,CAACI,MAAM,EAAE7B,WAAW,CAAC;IAAA;IAAA,CAAA9F,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CAC9C1G,KAAK,CAACsG,QAAQ,EAAEP,WAAW,CAAC,EAC5B/F,KAAK,CAACuG,UAAU,EAAER,WAAW,CAACY,KAAK,CAAC,CAAC,EAAEZ,WAAW,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,CAChE,CAAC;IAEF,MAAMQ,KAAK;IAAA;IAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG4F,QAAQ,CAACD,WAAW,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC2C,KAAK,CAAC;IACjD,MAAMC,UAAU;IAAA;IAAA,CAAAhI,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACsB,IAAI,CAACF,KAAK,GAAGnB,QAAQ,CAAC;IAAC;IAAA5G,cAAA,GAAAG,CAAA;IAE/CM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAET,MAAM,CAACvC,IAAI;MACjBmB,SAAS;MACTgD,cAAc,EAAE,IAAI;MACpBvD,KAAK,EAAE2B,MAAM,CAACvC,IAAI,CAACmC,MAAM;MACzBc,UAAU,EAAE;QACVpG,IAAI,EAAEyE,OAAO;QACb9D,KAAK,EAAEgE,QAAQ;QACfmB,KAAK;QACLC,UAAU;QACVM,OAAO,EAAE5B,OAAO,GAAGsB,UAAU;QAC7BO,OAAO,EAAE7B,OAAO,GAAG;MACrB,CAAC;MACD8B,QAAQ,EAAE;QACRhC,WAAW;QAAE;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAA8D,WAAW;QAAA;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAI,KAAK;QACjCyG,MAAM;QAAE;QAAA,CAAAnJ,cAAA,GAAA0C,CAAA,WAAAyG,MAAM;QAAA;QAAA,CAAAnJ,cAAA,GAAA0C,CAAA,WAAI,KAAK;QACvB0G,YAAY,EAAEE,UAAU,CAACF,YAAY,CAAC;QACtCI,kBAAkB,EAAEjD,SAAS,KAAK,OAAO;QAAA;QAAA,CAAAvG,cAAA,GAAA0C,CAAA,WAAG,cAAc;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,WACvC6D,SAAS,KAAK,QAAQ;QAAA;QAAA,CAAAvG,cAAA,GAAA0C,CAAA,WAAG,eAAe;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAAG,eAAe;QAC7ExB,OAAO,EAAEyG,MAAM,CAACvC,IAAI,CAACmC,MAAM,KAAK,CAAC;QAAA;QAAA,CAAAvH,cAAA,GAAA0C,CAAA,WAAG,4CAA4C;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAAG,IAAI;MACzF;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO4C,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACzEM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,wCAAwC;MAC/CpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,uBAAuB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACtD,IAAI;IACF,MAAM;MAAEoG;IAAU,CAAC;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;IAEhC,MAAMW,eAAe;IAAA;IAAA,CAAA9G,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAAC2G,eAAe,CAAC5D,QAAQ,CAACqD,SAAS,CAAC,EAAE;MAAA;MAAAvG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACxC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAE2E,KAAK,EAAE;MAAoB,CAAC,CAAC;IAC7D,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMwC,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,YAAYoG,SAAS,EAAE;;IAEzC;IACA,MAAMkD,cAAc;IAAA;IAAA,CAAAzJ,cAAA,GAAAG,CAAA,SAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe+E,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,MAAMwE,WAAW;IAAA;IAAA,CAAA1J,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa+E,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAM,CAACyE,eAAe,EAAEC,YAAY,CAAC;IAAA;IAAA,CAAA5J,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CACxD1G,KAAK,CAACsI,cAAc,CAAC,EACrBtI,KAAK,CAACuI,WAAW,CAAC,CACnB,CAAC;IAEF,MAAMG,SAAS;IAAA;IAAA,CAAA7J,cAAA,GAAAG,CAAA,SAAGwJ,eAAe,CAACvE,IAAI,CAAC,CAAC,CAAC;IACzC,MAAM0E,eAAe;IAAA;IAAA,CAAA9J,cAAA,GAAAG,CAAA,SAAGyJ,YAAY,CAACxE,IAAI;;IAEzC;IACA,MAAM2E,OAAO;IAAA;IAAA,CAAA/J,cAAA,GAAAG,CAAA,SAAG0J,SAAS,CAACG,aAAa,GAAG,CAAC;IAAA;IAAA,CAAAhK,cAAA,GAAA0C,CAAA,WACxCmH,SAAS,CAACI,eAAe,GAAGJ,SAAS,CAACG,aAAa,GAAG,GAAG;IAAA;IAAA,CAAAhK,cAAA,GAAA0C,CAAA,WAAI,CAAC;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAElEM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACb2F,SAAS;MACTmC,MAAM,EAAE,cAAc;MACtBwB,OAAO,EAAE;QACPF,aAAa,EAAEjE,QAAQ,CAAC8D,SAAS,CAACG,aAAa,CAAC;QAChDG,WAAW,EAAEpE,QAAQ,CAAC8D,SAAS,CAACM,WAAW,CAAC;QAC5CC,YAAY,EAAErE,QAAQ,CAAC8D,SAAS,CAACO,YAAY,CAAC;QAC9CH,eAAe,EAAElE,QAAQ,CAAC8D,SAAS,CAACI,eAAe,CAAC;QACpDI,QAAQ,EAAEN,OAAO;QACjBO,uBAAuB;QAAE;QAAA,CAAAtK,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACO,SAAS,CAACS,uBAAuB,CAAC;QAAA;QAAA,CAAAtK,cAAA,GAAA0C,CAAA,WAAI,CAAC;QAC3E6H,sBAAsB;QAAE;QAAA,CAAAvK,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACO,SAAS,CAACU,sBAAsB,CAAC;QAAA;QAAA,CAAAvK,cAAA,GAAA0C,CAAA,WAAI,CAAC;QACzE8H,gBAAgB;QAAE;QAAA,CAAAxK,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACO,SAAS,CAACW,gBAAgB,CAAC;QAAA;QAAA,CAAAxK,cAAA,GAAA0C,CAAA,WAAI,CAAC;QAC7D+H,iBAAiB;QAAE;QAAA,CAAAzK,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACO,SAAS,CAACY,iBAAiB,CAAC;QAAA;QAAA,CAAAzK,cAAA,GAAA0C,CAAA,WAAI,CAAC;QAC/DgI,eAAe,EAAE3E,QAAQ,CAAC8D,SAAS,CAACa,eAAe,CAAC;QACpDC,cAAc,EAAE5E,QAAQ,CAAC8D,SAAS,CAACc,cAAc;MACnD,CAAC;MACDC,gBAAgB,EAAEd,eAAe,CAACe,GAAG,CAAC1B,MAAM,IAAK;QAAA;QAAAnJ,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA;UAC/CgJ,MAAM,EAAEA,MAAM,CAACA,MAAM;UACrB2B,YAAY,EAAE/E,QAAQ,CAACoD,MAAM,CAAC2B,YAAY,CAAC;UAC3CC,eAAe;UAAE;UAAA,CAAA/K,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACH,MAAM,CAAC4B,eAAe,CAAC;UAAA;UAAA,CAAA/K,cAAA,GAAA0C,CAAA,WAAI,CAAC;QAC1D,CAAC;MAAD,CAAE,CAAC;MACH3B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC5DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,kCAAkC;MACzCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACnD,IAAI;IACF,MAAM;MAAE0C;IAAO,CAAC;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;;IAE7B;IACA,MAAM6E,cAAc;IAAA;IAAA,CAAAhL,cAAA,GAAAG,CAAA,SAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAM8K,aAAa;IAAA;IAAA,CAAAjL,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC6J,cAAc,EAAE,CAACnI,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC,CAAC;IACzE,MAAM4D,OAAO;IAAA;IAAA,CAAAlL,cAAA,GAAAG,CAAA,SAAG8K,aAAa,CAAC7F,IAAI;IAAC;IAAApF,cAAA,GAAAG,CAAA;IAEnC,IAAI+K,OAAO,CAAC3D,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACxB,OAAOM,GAAG,CAACE,IAAI,CAAC;QACdkC,MAAM,EAAEA,MAAM,CAACyE,WAAW,CAAC,CAAC;QAC5B6D,gBAAgB,EAAE,MAAM;QACxBC,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE,GAAG;QACVH,OAAO,EAAE,CAAC,CAAC;QACXI,cAAc,EAAE,gCAAgC;QAChDvK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAM6I,gBAAgB;IAAA;IAAA,CAAAvL,cAAA,GAAAG,CAAA,SAAG;MAAEqL,KAAK,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAK,CAAC;IACrE,IAAIC,WAAW;IAAA;IAAA,CAAA3L,cAAA,GAAAG,CAAA,SAAG,CAAC;IACnB,IAAIyL,aAAa;IAAA;IAAA,CAAA5L,cAAA,GAAAG,CAAA,SAAG,CAAC;IACrB,MAAM0L,eAAe;IAAA;IAAA,CAAA7L,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAE3B+K,OAAO,CAACY,OAAO,CAACC,MAAM,IAAI;MAAA;MAAA/L,cAAA,GAAAU,CAAA;MACxB,MAAMsL,MAAM;MAAA;MAAA,CAAAhM,cAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAA6I,gBAAgB,CAACQ,MAAM,CAACxF,SAAS,CAAC;MAAA;MAAA,CAAAvG,cAAA,GAAA0C,CAAA,WAAI,CAAC;MACtD,MAAMuJ,QAAQ;MAAA;MAAA,CAAAjM,cAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACyC,MAAM,CAACE,QAAQ,CAAC;MAAA;MAAA,CAAAjM,cAAA,GAAA0C,CAAA,WAAI,EAAE;MAElD,IAAIwJ,WAAW;MAAA;MAAA,CAAAlM,cAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACpB,IAAI4L,MAAM,CAACA,MAAM,KAAK,KAAK,EAAE;QAAA;QAAA/L,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC3B+L,WAAW,GAAGD,QAAQ;MACxB,CAAC,MAAM;QAAA;QAAAjM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA,IAAI4L,MAAM,CAACA,MAAM,KAAK,MAAM,EAAE;UAAA;UAAA/L,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACnC+L,WAAW,GAAG,CAACD,QAAQ;QACzB,CAAC;QAAA;QAAA;UAAAjM,cAAA,GAAA0C,CAAA;QAAA;MAAD;MAAC;MAAA1C,cAAA,GAAAG,CAAA;MAEDyL,aAAa,IAAIM,WAAW,GAAGF,MAAM;MAAC;MAAAhM,cAAA,GAAAG,CAAA;MACtCwL,WAAW,IAAIK,MAAM;MAAC;MAAAhM,cAAA,GAAAG,CAAA;MACtB0L,eAAe,CAACE,MAAM,CAACxF,SAAS,CAAC,GAAGwF,MAAM,CAACA,MAAM;IACnD,CAAC,CAAC;IAEF,MAAMI,UAAU;IAAA;IAAA,CAAAnM,cAAA,GAAAG,CAAA,SAAGwL,WAAW,GAAG,CAAC;IAAA;IAAA,CAAA3L,cAAA,GAAA0C,CAAA,WAAGkJ,aAAa,GAAGD,WAAW;IAAA;IAAA,CAAA3L,cAAA,GAAA0C,CAAA,WAAG,CAAC;;IAEpE;IACA,IAAI0J,eAAe;IAAA;IAAA,CAAApM,cAAA,GAAAG,CAAA,SAAG,MAAM;IAC5B,IAAIiL,UAAU;IAAA;IAAA,CAAApL,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEpB,IAAIgM,UAAU,GAAG,EAAE,EAAE;MAAA;MAAAnM,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACnBiM,eAAe,GAAG,KAAK;MAAC;MAAApM,cAAA,GAAAG,CAAA;MACxBiL,UAAU,GAAGzE,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAEqE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC,CAAC;IAClD,CAAC,MAAM;MAAA;MAAAnM,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA,IAAIgM,UAAU,GAAG,CAAC,EAAE,EAAE;QAAA;QAAAnM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC3BiM,eAAe,GAAG,MAAM;QAAC;QAAApM,cAAA,GAAAG,CAAA;QACzBiL,UAAU,GAAGzE,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAEqE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC,CAAC;MAClD,CAAC,MAAM;QAAA;QAAAnM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACLiL,UAAU,GAAG,EAAE,GAAGzE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC;MACxC;IAAA;;IAEA;IACA,MAAMG,WAAW;IAAA;IAAA,CAAAtM,cAAA,GAAAG,CAAA,SAAGyF,MAAM,CAAC2G,MAAM,CAACV,eAAe,CAAC;IAClD,IAAIW,cAAc;IAAA;IAAA,CAAAxM,cAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEvB,IAAImM,WAAW,CAAC/E,MAAM,IAAI,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAC3B,MAAM+J,aAAa;MAAA;MAAA,CAAAzM,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAG,IAAIuM,GAAG,CAACJ,WAAW,CAAC,CAAC;MAAC;MAAAtM,cAAA,GAAAG,CAAA;MAChD;MAAI;MAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAA+J,aAAa,CAAClF,MAAM,KAAK,CAAC;MAAA;MAAA,CAAAvH,cAAA,GAAA0C,CAAA,WAAI+J,aAAa,CAAC,CAAC,CAAC,KAAK,MAAM,GAAE;QAAA;QAAAzM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC7DqM,cAAc,GAAG,EAAE,CAAC,CAAC;MACvB,CAAC,MAAM;QAAA;QAAAxM,cAAA,GAAA0C,CAAA;QACL,MAAMiK,QAAQ;QAAA;QAAA,CAAA3M,cAAA,GAAAG,CAAA,SAAGmM,WAAW,CAACM,MAAM,CAACzM,CAAC,IAAI;UAAA;UAAAH,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,KAAK,KAAK;QAAD,CAAC,CAAC,CAACoH,MAAM;QAC5D,MAAMsF,SAAS;QAAA;QAAA,CAAA7M,cAAA,GAAAG,CAAA,SAAGmM,WAAW,CAACM,MAAM,CAACzM,CAAC,IAAI;UAAA;UAAAH,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAAA,OAAAA,CAAC,KAAK,MAAM;QAAD,CAAC,CAAC,CAACoH,MAAM;QAAC;QAAAvH,cAAA,GAAAG,CAAA;QAC/D;QAAI;QAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAAiK,QAAQ,IAAI,CAAC;QAAA;QAAA,CAAA3M,cAAA,GAAA0C,CAAA,WAAImK,SAAS,IAAI,CAAC,GAAE;UAAA;UAAA7M,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACnCqM,cAAc,GAAG,EAAE,CAAC,CAAC;QACvB,CAAC;QAAA;QAAA;UAAAxM,cAAA,GAAA0C,CAAA;QAAA;MACH;IACF,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDiL,UAAU,GAAGzE,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAE8I,UAAU,GAAGoB,cAAc,CAAC;;IAEvD;IACA,IAAIlB,cAAc;IAAC;IAAAtL,cAAA,GAAAG,CAAA;IACnB,IAAIiL,UAAU,GAAG,EAAE,EAAE;MAAA;MAAApL,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACnBmL,cAAc,GAAG,+BAA+B;IAClD,CAAC,MAAM;MAAA;MAAAtL,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA,IAAIiL,UAAU,GAAG,EAAE,EAAE;QAAA;QAAApL,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC1BmL,cAAc,GAAG,YAAYc,eAAe,wBAAwB;MACtE,CAAC,MAAM;QAAA;QAAApM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA,IAAIiL,UAAU,GAAG,EAAE,EAAE;UAAA;UAAApL,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UAC1BmL,cAAc,GAAG,UAAUc,eAAe,2BAA2B;QACvE,CAAC,MAAM;UAAA;UAAApM,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACLmL,cAAc,GAAG,eAAec,eAAe,yBAAyB;QAC1E;MAAA;IAAA;;IAEA;IACA,MAAMU,UAAU;IAAA;IAAA,CAAA9M,cAAA,GAAAG,CAAA,SAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACtB+K,OAAO,CAACY,OAAO,CAACC,MAAM,IAAI;MAAA;MAAA/L,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MACxB2M,UAAU,CAACf,MAAM,CAACxF,SAAS,CAAC,GAAG;QAC7BwF,MAAM,EAAEA,MAAM,CAACA,MAAM;QACrBE,QAAQ,EAAE3C,UAAU,CAACyC,MAAM,CAACE,QAAQ,CAAC;QACrCc,IAAI,EAAEhB,MAAM,CAACgB;MACf,CAAC;IACH,CAAC,CAAC;IAAC;IAAA/M,cAAA,GAAAG,CAAA;IAEHM,GAAG,CAACE,IAAI,CAAC;MACPkC,MAAM,EAAEA,MAAM,CAACyE,WAAW,CAAC,CAAC;MAC5B6D,gBAAgB,EAAEiB,eAAe;MACjChB,UAAU,EAAEzE,IAAI,CAACqG,KAAK,CAAC5B,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;MAC5CC,KAAK,EAAE1E,IAAI,CAACqG,KAAK,CAACb,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;MACvCjB,OAAO,EAAE4B,UAAU;MACnBG,eAAe,EAAET,cAAc;MAC/BlB,cAAc;MACdvK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACpEM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,mCAAmC;MAC1CpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM;MAAEyC,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,WAAG,EAAE;MAAEwK,cAAc;MAAA;MAAA,CAAAlN,cAAA,GAAA0C,CAAA,WAAG,EAAE;MAAE8D;IAAY,CAAC;IAAA;IAAA,CAAAxG,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;;IAElE;IACA,MAAMgM,YAAY;IAAA;IAAA,CAAAnN,cAAA,GAAAG,CAAA,SAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMiN,aAAa;IAAA;IAAA,CAAApN,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAACgM,YAAY,EAAE,CAACpH,QAAQ,CAACnD,KAAK,CAAC,CAAC,CAAC;IAClE,MAAMyK,OAAO;IAAA;IAAA,CAAArN,cAAA,GAAAG,CAAA,SAAGiN,aAAa,CAAChI,IAAI,CAACyF,GAAG,CAACyC,GAAG,IAAI;MAAA;MAAAtN,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAmN,GAAG,CAACzK,MAAM;IAAD,CAAC,CAAC;IAEzD,MAAM0K,gBAAgB;IAAA;IAAA,CAAAvN,cAAA,GAAAG,CAAA,SAAG,EAAE;;IAE3B;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,KAAK,MAAM0C,MAAM,IAAIwK,OAAO,EAAE;MAC5B,MAAMrC,cAAc;MAAA;MAAA,CAAAhL,cAAA,GAAAG,CAAA,SAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAM8K,aAAa;MAAA;MAAA,CAAAjL,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC6J,cAAc,EAAE,CAACnI,MAAM,CAAC,CAAC;MAC3D,MAAMqI,OAAO;MAAA;MAAA,CAAAlL,cAAA,GAAAG,CAAA,SAAG8K,aAAa,CAAC7F,IAAI;MAAC;MAAApF,cAAA,GAAAG,CAAA;MAEnC,IAAI+K,OAAO,CAAC3D,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAvH,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA;MAAQ,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAA0C,CAAA;MAAA;;MAEnC;MACA,MAAM6I,gBAAgB;MAAA;MAAA,CAAAvL,cAAA,GAAAG,CAAA,SAAG;QAAEqL,KAAK,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAK,CAAC;MACrE,IAAIC,WAAW;MAAA;MAAA,CAAA3L,cAAA,GAAAG,CAAA,SAAG,CAAC;MACnB,IAAIyL,aAAa;MAAA;MAAA,CAAA5L,cAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEtB+K,OAAO,CAACY,OAAO,CAACC,MAAM,IAAI;QAAA;QAAA/L,cAAA,GAAAU,CAAA;QACxB,MAAMsL,MAAM;QAAA;QAAA,CAAAhM,cAAA,GAAAG,CAAA;QAAG;QAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAA6I,gBAAgB,CAACQ,MAAM,CAACxF,SAAS,CAAC;QAAA;QAAA,CAAAvG,cAAA,GAAA0C,CAAA,WAAI,CAAC;QACtD,MAAMuJ,QAAQ;QAAA;QAAA,CAAAjM,cAAA,GAAAG,CAAA;QAAG;QAAA,CAAAH,cAAA,GAAA0C,CAAA,WAAA4G,UAAU,CAACyC,MAAM,CAACE,QAAQ,CAAC;QAAA;QAAA,CAAAjM,cAAA,GAAA0C,CAAA,WAAI,EAAE;QAElD,IAAIwJ,WAAW;QAAA;QAAA,CAAAlM,cAAA,GAAAG,CAAA,SAAG,CAAC;QAAC;QAAAH,cAAA,GAAAG,CAAA;QACpB,IAAI4L,MAAM,CAACA,MAAM,KAAK,KAAK,EAAE;UAAA;UAAA/L,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UAC3B+L,WAAW,GAAGD,QAAQ;QACxB,CAAC,MAAM;UAAA;UAAAjM,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UAAA,IAAI4L,MAAM,CAACA,MAAM,KAAK,MAAM,EAAE;YAAA;YAAA/L,cAAA,GAAA0C,CAAA;YAAA1C,cAAA,GAAAG,CAAA;YACnC+L,WAAW,GAAG,CAACD,QAAQ;UACzB,CAAC;UAAA;UAAA;YAAAjM,cAAA,GAAA0C,CAAA;UAAA;QAAD;QAAC;QAAA1C,cAAA,GAAAG,CAAA;QAEDyL,aAAa,IAAIM,WAAW,GAAGF,MAAM;QAAC;QAAAhM,cAAA,GAAAG,CAAA;QACtCwL,WAAW,IAAIK,MAAM;MACvB,CAAC,CAAC;MAEF,MAAMG,UAAU;MAAA;MAAA,CAAAnM,cAAA,GAAAG,CAAA,SAAGwL,WAAW,GAAG,CAAC;MAAA;MAAA,CAAA3L,cAAA,GAAA0C,CAAA,WAAGkJ,aAAa,GAAGD,WAAW;MAAA;MAAA,CAAA3L,cAAA,GAAA0C,CAAA,WAAG,CAAC;MACpE,IAAI0J,eAAe;MAAA;MAAA,CAAApM,cAAA,GAAAG,CAAA,SAAG,MAAM;MAC5B,IAAIiL,UAAU;MAAA;MAAA,CAAApL,cAAA,GAAAG,CAAA,SAAG,EAAE;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAEpB,IAAIgM,UAAU,GAAG,EAAE,EAAE;QAAA;QAAAnM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACnBiM,eAAe,GAAG,KAAK;QAAC;QAAApM,cAAA,GAAAG,CAAA;QACxBiL,UAAU,GAAGzE,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAEqE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC,CAAC;MAClD,CAAC,MAAM;QAAA;QAAAnM,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA,IAAIgM,UAAU,GAAG,CAAC,EAAE,EAAE;UAAA;UAAAnM,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UAC3BiM,eAAe,GAAG,MAAM;UAAC;UAAApM,cAAA,GAAAG,CAAA;UACzBiL,UAAU,GAAGzE,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAEqE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC,CAAC;QAClD,CAAC,MAAM;UAAA;UAAAnM,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACLiL,UAAU,GAAG,EAAE,GAAGzE,IAAI,CAAC0F,GAAG,CAACF,UAAU,CAAC;QACxC;MAAA;;MAEA;MAAA;MAAAnM,cAAA,GAAAG,CAAA;MACA,IAAIiL,UAAU,IAAI9B,UAAU,CAAC4D,cAAc,CAAC,EAAE;QAAA;QAAAlN,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC5C;QAAI;QAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAC8D,WAAW;QAAA;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAI0J,eAAe,CAACnJ,WAAW,CAAC,CAAC,KAAKuD,WAAW,CAACvD,WAAW,CAAC,CAAC,GAAE;UAAA;UAAAjD,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UAC/EoN,gBAAgB,CAAClG,IAAI,CAAC;YACpBxE,MAAM;YACNsI,gBAAgB,EAAEiB,eAAe;YACjChB,UAAU,EAAEzE,IAAI,CAACqG,KAAK,CAAC5B,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;YAC5CC,KAAK,EAAE1E,IAAI,CAACqG,KAAK,CAACb,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;YACvCrB,YAAY,EAAEI,OAAO,CAAC3D;UACxB,CAAC,CAAC;QACJ,CAAC;QAAA;QAAA;UAAAvH,cAAA,GAAA0C,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAA0C,CAAA;MAAA;IACH;;IAEA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACAoN,gBAAgB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAE/K,CAAC,KAAK;MAAA;MAAA1C,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,OAAAuC,CAAC,CAAC0I,UAAU,GAAGqC,CAAC,CAACrC,UAAU;IAAD,CAAC,CAAC;IAAC;IAAApL,cAAA,GAAAG,CAAA;IAE7DM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAEmF,gBAAgB;MACtBvH,KAAK,EAAEuH,gBAAgB,CAAChG,MAAM;MAC9BmG,OAAO,EAAE;QACPR,cAAc,EAAE5D,UAAU,CAAC4D,cAAc,CAAC;QAC1C1G,WAAW;QAAE;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAA8D,WAAW;QAAA;QAAA,CAAAxG,cAAA,GAAA0C,CAAA,WAAI,KAAK;QACjCE,KAAK,EAAEmD,QAAQ,CAACnD,KAAK;MACvB,CAAC;MACD7B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC5EM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnB2E,KAAK,EAAE,2CAA2C;MAClDpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAClD,IAAI;IACF,MAAMwH,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMiB,kBAAkB,CAAC;MAAEuM,qBAAqB,EAAEnN,GAAG,CAACW;IAAM,CAAC,CAAC;IAC7E,MAAMiH,IAAI;IAAA;IAAA,CAAApI,cAAA,GAAAG,CAAA,SAAGyN,IAAI,CAACC,KAAK,CAAClG,MAAM,CAACmG,IAAI,CAAC;IAAC;IAAA9N,cAAA,GAAAG,CAAA;IAErC,IAAIwH,MAAM,CAACoG,UAAU,KAAK,GAAG,EAAE;MAAA;MAAA/N,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC7BM,GAAG,CAACE,IAAI,CAACyH,IAAI,CAAC;IAChB,CAAC,MAAM;MAAA;MAAApI,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACLM,GAAG,CAACI,MAAM,CAAC8G,MAAM,CAACoG,UAAU,CAAC,CAACpN,IAAI,CAACyH,IAAI,CAAC;IAC1C;EACF,CAAC,CAAC,OAAO9C,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC7DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,kCAAkC;MACzCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAAlB,cAAA,GAAAG,CAAA;AAEHE,MAAM,CAACE,GAAG,CAAC,mBAAmB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAClD,IAAI;IACF,MAAMwH,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMkB,kBAAkB,CAAC;MAAEsM,qBAAqB,EAAEnN,GAAG,CAACW;IAAM,CAAC,CAAC;IAC7E,MAAMiH,IAAI;IAAA;IAAA,CAAApI,cAAA,GAAAG,CAAA,SAAGyN,IAAI,CAACC,KAAK,CAAClG,MAAM,CAACmG,IAAI,CAAC;IAAC;IAAA9N,cAAA,GAAAG,CAAA;IAErC,IAAIwH,MAAM,CAACoG,UAAU,KAAK,GAAG,EAAE;MAAA;MAAA/N,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC7BM,GAAG,CAACE,IAAI,CAACyH,IAAI,CAAC;IAChB,CAAC,MAAM;MAAA;MAAApI,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACLM,GAAG,CAACI,MAAM,CAAC8G,MAAM,CAACoG,UAAU,CAAC,CAACpN,IAAI,CAACyH,IAAI,CAAC;IAC1C;EACF,CAAC,CAAC,OAAO9C,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC7DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,kCAAkC;MACzCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAAlB,cAAA,GAAAG,CAAA;AAEHE,MAAM,CAACE,GAAG,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC/C,IAAI;IACF,MAAMwH,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMmB,eAAe,CAAC;MAAEqM,qBAAqB,EAAEnN,GAAG,CAACW;IAAM,CAAC,CAAC;IAC1E,MAAMiH,IAAI;IAAA;IAAA,CAAApI,cAAA,GAAAG,CAAA,SAAGyN,IAAI,CAACC,KAAK,CAAClG,MAAM,CAACmG,IAAI,CAAC;IAAC;IAAA9N,cAAA,GAAAG,CAAA;IAErC,IAAIwH,MAAM,CAACoG,UAAU,KAAK,GAAG,EAAE;MAAA;MAAA/N,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC7BM,GAAG,CAACE,IAAI,CAACyH,IAAI,CAAC;IAChB,CAAC,MAAM;MAAA;MAAApI,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACLM,GAAG,CAACI,MAAM,CAAC8G,MAAM,CAACoG,UAAU,CAAC,CAACpN,IAAI,CAACyH,IAAI,CAAC;IAC1C;EACF,CAAC,CAAC,OAAO9C,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC1DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,oCAAoC;MAC3CpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC2N,IAAI,CAAC,SAAS,EAAE,OAAOxN,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACzC,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MACJG,MAAM;MACNwL,QAAQ;MACRlL,IAAI;MACJmL,SAAS;MAAA;MAAA,CAAAtO,cAAA,GAAA0C,CAAA,WAAGgB,WAAW,CAACC,MAAM;MAC9B4K,WAAW;MAAA;MAAA,CAAAvO,cAAA,GAAA0C,CAAA,WAAG2B,aAAa,CAACC,GAAG;MAC/BkK,UAAU;MACVC,SAAS;MACTjL,aAAa;MACbkL,eAAe;MACfC,WAAW;MACXC,YAAY;MACZC,aAAa;MAAA;MAAA,CAAA7O,cAAA,GAAA0C,CAAA,YAAG,KAAK;MACrBoM;IACF,CAAC;IAAA;IAAA,CAAA9O,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACsN,IAAI;;IAEZ;IAAA;IAAA9N,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,aAACG,MAAM;IAAA;IAAA,CAAA7C,cAAA,GAAA0C,CAAA,YAAI,CAAC2L,QAAQ;IAAA;IAAA,CAAArO,cAAA,GAAA0C,CAAA,YAAI,CAACS,IAAI,GAAE;MAAA;MAAAnD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACjC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA,IAAI,CAACyF,MAAM,CAAC2G,MAAM,CAACrI,WAAW,CAAC,CAAChB,QAAQ,CAACC,IAAI,CAAC,EAAE;MAAA;MAAAnD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC9C,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA,IAAI,CAACyF,MAAM,CAAC2G,MAAM,CAAC7I,WAAW,CAAC,CAACR,QAAQ,CAACoL,SAAS,CAAC,EAAE;MAAA;MAAAtO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACnD,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAA4L,SAAS,KAAK5K,WAAW,CAACE,KAAK;IAAA;IAAA,CAAA5D,cAAA,GAAA0C,CAAA,YAAI,CAAC8L,UAAU,GAAE;MAAA;MAAAxO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAClD,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAA4L,SAAS,KAAK5K,WAAW,CAACG,IAAI;IAAA;IAAA,CAAA7D,cAAA,GAAA0C,CAAA,YAAI,CAAC+L,SAAS,GAAE;MAAA;MAAAzO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChD,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMqM,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMC,OAAO;IAAA;IAAA,CAAArP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACK,UAAU,CAAC,CAAC;IAAC;IAAAtP,cAAA,GAAAG,CAAA;IAC1C,IAAIkP,OAAO,CAACE,eAAe,EAAE;MAAA;MAAAvP,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC3B,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAM8M,KAAK;IAAA;IAAA,CAAAxP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACQ,QAAQ,CAAC5M,MAAM,CAAC;IAAC;IAAA7C,cAAA,GAAAG,CAAA;IAC5C,IAAI,CAACqP,KAAK,EAAE;MAAA;MAAAxP,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACV,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA,IAAIgD,IAAI,KAAKe,WAAW,CAACC,GAAG,EAAE;MAAA;MAAAnE,cAAA,GAAA0C,CAAA;MAC5B,MAAMgN,aAAa;MAAA;MAAA,CAAA1P,cAAA,GAAAG,CAAA,SAAGwP,kBAAkB,CAACtB,QAAQ;MAAE;MAAA,CAAArO,cAAA,GAAA0C,CAAA,YAAA8L,UAAU;MAAA;MAAA,CAAAxO,cAAA,GAAA0C,CAAA,YAAI8M,KAAK,CAACI,GAAG,GAAEtB,SAAS,CAAC;MAAC;MAAAtO,cAAA,GAAAG,CAAA;MACvF,IAAIuP,aAAa,GAAGpG,UAAU,CAAC+F,OAAO,CAACQ,YAAY,CAAC,EAAE;QAAA;QAAA7P,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACpD,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE,2BAA2B;UAClCjC,QAAQ,EAAEqM,aAAa;UACvBI,SAAS,EAAExG,UAAU,CAAC+F,OAAO,CAACQ,YAAY;QAC5C,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAA7P,cAAA,GAAA0C,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMqN,SAAS;IAAA;IAAA,CAAA/P,cAAA,GAAAG,CAAA,SAAG;MAChB0C,MAAM,EAAEA,MAAM,CAACyE,WAAW,CAAC,CAAC;MAC5B0I,GAAG,EAAE3B,QAAQ;MACblL,IAAI;MACJjB,IAAI,EAAEoM,SAAS;MACf2B,aAAa,EAAE1B,WAAW;MAC1B2B,cAAc,EAAErB;IAClB,CAAC;;IAED;IAAA;IAAA7O,cAAA,GAAAG,CAAA;IACA,IAAIqO,UAAU,EAAE;MAAA;MAAAxO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4P,SAAS,CAACI,WAAW,GAAG3B,UAAU;IAAA,CAAC;IAAA;IAAA;MAAAxO,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACnD,IAAIsO,SAAS,EAAE;MAAA;MAAAzO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4P,SAAS,CAACK,UAAU,GAAG3B,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAzO,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAChD,IAAIwO,WAAW,EAAE;MAAA;MAAA3O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4P,SAAS,CAACM,YAAY,GAAG1B,WAAW;IAAA,CAAC;IAAA;IAAA;MAAA3O,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACtD,IAAIyO,YAAY,EAAE;MAAA;MAAA5O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4P,SAAS,CAACO,aAAa,GAAG1B,YAAY;IAAA,CAAC;IAAA;IAAA;MAAA5O,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACzD,IAAI2O,aAAa,EAAE;MAAA;MAAA9O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4P,SAAS,CAACQ,eAAe,GAAGzB,aAAa;IAAA,CAAC;IAAA;IAAA;MAAA9O,cAAA,GAAA0C,CAAA;IAAA;;IAE7D;IAAA1C,cAAA,GAAAG,CAAA;IACA,IAAImO,SAAS,KAAK5K,WAAW,CAACK,OAAO,EAAE;MAAA;MAAA/D,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrC;MAAI;MAAA,CAAAH,cAAA,GAAA0C,CAAA,aAACc,aAAa;MAAA;MAAA,CAAAxD,cAAA,GAAA0C,CAAA,YAAI,CAACgM,eAAe,GAAE;QAAA;QAAA1O,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACtC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAtF,cAAA,GAAA0C,CAAA;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MAED,IAAIqD,aAAa,EAAE;QAAA;QAAAxD,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA4P,SAAS,CAACS,SAAS,GAAG;UAAEJ,UAAU,EAAE5M;QAAc,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAxD,cAAA,GAAA0C,CAAA;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MACvE,IAAIuO,eAAe,EAAE;QAAA;QAAA1O,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAAA4P,SAAS,CAACU,WAAW,GAAG;UAAEN,WAAW,EAAEzB;QAAgB,CAAC;MAAA,CAAC;MAAA;MAAA;QAAA1O,cAAA,GAAA0C,CAAA;MAAA;IAChF,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMgO,cAAc;IAAA;IAAA,CAAA1Q,cAAA,GAAAG,CAAA,SAAG,IAAIyB,cAAc,CAAC,CAAC;IAC3C,MAAM+O,WAAW;IAAA;IAAA,CAAA3Q,cAAA,GAAAG,CAAA,SAAG,MAAMuQ,cAAc,CAACE,kBAAkB,CAAC;MAC1D/N,MAAM;MACNwL,QAAQ;MACRlL,IAAI;MACJ0N,KAAK;MAAE;MAAA,CAAA7Q,cAAA,GAAA0C,CAAA,YAAA8L,UAAU;MAAA;MAAA,CAAAxO,cAAA,GAAA0C,CAAA,YAAI8M,KAAK,CAACI,GAAG;MAC9BpM,aAAa;MACbyK;IACF,CAAC,CAAC;;IAEF;IAAA;IAAAjO,cAAA,GAAAG,CAAA;IACA,IAAI,CAACwQ,WAAW,CAACG,QAAQ,CAACC,QAAQ,EAAE;MAAA;MAAA/Q,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAClCoF,OAAO,CAACwB,IAAI,CAAC,kCAAkC4J,WAAW,CAACG,QAAQ,CAACE,MAAM,EAAE,CAAC;MAAC;MAAAhR,cAAA,GAAAG,CAAA;MAC9E,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,uCAAuC;QAC9C0L,MAAM,EAAEL,WAAW,CAACG,QAAQ,CAACE,MAAM;QACnCC,SAAS,EAAEN,WAAW,CAACO,cAAc;QACrCC,eAAe,EAAER,WAAW,CAACQ,eAAe;QAC5CC,oBAAoB,EAAET,WAAW,CAACG,QAAQ,CAACM;MAC7C,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApR,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAAiO,WAAW,CAACG,QAAQ,CAACO,QAAQ;IAAA;IAAA,CAAArR,cAAA,GAAA0C,CAAA,YAAIiO,WAAW,CAACG,QAAQ,CAACO,QAAQ,CAAC9J,MAAM,GAAG,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC7EoF,OAAO,CAACwB,IAAI,CAAC,4CAA4C,EAAE4J,WAAW,CAACG,QAAQ,CAACO,QAAQ,CAAC;IAC3F,CAAC;IAAA;IAAA;MAAArR,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDoF,OAAO,CAACC,GAAG,CAAC,gCAAgCmL,WAAW,CAACO,cAAc,aAAaP,WAAW,CAACW,UAAU,EAAE,CAAC;;IAE5G;IACA,MAAMC,KAAK;IAAA;IAAA,CAAAvR,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACuC,UAAU,CAACzB,SAAS,CAAC;;IAEhD;IACA,MAAM0B,WAAW;IAAA;IAAA,CAAAzR,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CACD8M,MAAM,EACNsD,KAAK,CAACG,EAAE,EACR7O,MAAM,CAACyE,WAAW,CAAC,CAAC,EACpB+G,QAAQ,EACRlL,IAAI,EACJmL,SAAS;IACT;IAAA,CAAAtO,cAAA,GAAA0C,CAAA,YAAA8L,UAAU;IAAA;IAAA,CAAAxO,cAAA,GAAA0C,CAAA,YAAI,IAAI;IAClB;IAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAA+L,SAAS;IAAA;IAAA,CAAAzO,cAAA,GAAA0C,CAAA,YAAI,IAAI,GACjB6L,WAAW,EACXM,aAAa,EACb0C,KAAK,CAAC1Q,MAAM;IACZ;IAAA,CAAAb,cAAA,GAAA0C,CAAA,YAAAiO,WAAW,CAACgB,aAAa;IAAA;IAAA,CAAA3R,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAC/B,CAAC;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAEHM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJmJ,KAAK,EAAEA,KAAK;QACZE,WAAW,EAAEA,WAAW,CAACrM,IAAI,CAAC,CAAC,CAAC;QAChCuL,WAAW,EAAEA,WAAW;QACxBnB,KAAK,EAAEA;MACT,CAAC;MACDtO,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOoE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC7CM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,uBAAuB;MAC9BpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACxC,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MACJ7B,MAAM;MACNgC,MAAM;MACND,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,YAAG,EAAE;MACVmE,MAAM;MAAA;MAAA,CAAA7G,cAAA,GAAA0C,CAAA,YAAG,CAAC;MACVkP,IAAI;MACJC;IACF,CAAC;IAAA;IAAA,CAAA7R,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;;IAEb;IACA,IAAI8F,WAAW;IAAA;IAAA,CAAAjH,cAAA,GAAAG,CAAA,SAAG,oBAAoB;IACtC,MAAMgG,MAAM;IAAA;IAAA,CAAAnG,cAAA,GAAAG,CAAA,SAAG,CAAC8N,MAAM,CAAC;IACvB,IAAI6D,UAAU;IAAA;IAAA,CAAA9R,cAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEnB,IAAIU,MAAM,EAAE;MAAA;MAAAb,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACV8G,WAAW,IAAI,wBAAwB6K,UAAU,EAAE;MAAC;MAAA9R,cAAA,GAAAG,CAAA;MACpDgG,MAAM,CAACkB,IAAI,CAACxG,MAAM,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MACpB2R,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAA9R,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAI0C,MAAM,EAAE;MAAA;MAAA7C,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACV8G,WAAW,IAAI,kBAAkB6K,UAAU,EAAE;MAAC;MAAA9R,cAAA,GAAAG,CAAA;MAC9CgG,MAAM,CAACkB,IAAI,CAACxE,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC;MAAC;MAAAtH,cAAA,GAAAG,CAAA;MAClC2R,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAA9R,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAIyR,IAAI,EAAE;MAAA;MAAA5R,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACR8G,WAAW,IAAI,uBAAuB6K,UAAU,EAAE;MAAC;MAAA9R,cAAA,GAAAG,CAAA;MACnDgG,MAAM,CAACkB,IAAI,CAACuK,IAAI,CAAC;MAAC;MAAA5R,cAAA,GAAAG,CAAA;MAClB2R,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAA9R,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAI0R,EAAE,EAAE;MAAA;MAAA7R,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACN8G,WAAW,IAAI,uBAAuB6K,UAAU,EAAE;MAAC;MAAA9R,cAAA,GAAAG,CAAA;MACnDgG,MAAM,CAACkB,IAAI,CAACwK,EAAE,CAAC;MAAC;MAAA7R,cAAA,GAAAG,CAAA;MAChB2R,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAA9R,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMqP,WAAW;IAAA;IAAA,CAAA/R,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ8G,WAAW;AACnB;AACA,eAAe6K,UAAU,YAAYA,UAAU,GAAG,CAAC;AACnD,KAAK;IAAC;IAAA9R,cAAA,GAAAG,CAAA;IAEFgG,MAAM,CAACkB,IAAI,CAACzE,KAAK,EAAEiE,MAAM,CAAC;IAE1B,MAAM,CAACmL,YAAY,EAAElM,WAAW,CAAC;IAAA;IAAA,CAAA9F,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CACpD1G,KAAK,CAAC4Q,WAAW,EAAE5L,MAAM,CAAC,EAC1BhF,KAAK,CAAC;AACZ;AACA;AACA,UAAU8F,WAAW;AACrB,OAAO,EAAEd,MAAM,CAAC2B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACxB,CAAC;IAEF,MAAMmK,MAAM;IAAA;IAAA,CAAAjS,cAAA,GAAAG,CAAA,SAAG6R,YAAY,CAAC5M,IAAI;IAChC,MAAM2C,KAAK;IAAA;IAAA,CAAA/H,cAAA,GAAAG,CAAA,SAAG4F,QAAQ,CAACD,WAAW,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC2C,KAAK,CAAC;;IAEjD;IACA,MAAMgH,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MACf,MAAMuM,MAAM;MAAA;MAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;MAED;MACA,MAAM8C,YAAY;MAAA;MAAA,CAAAlS,cAAA,GAAAG,CAAA,SAAG8R,MAAM,CAACrF,MAAM,CAAC2E,KAAK,IACtC;QAAA;QAAAvR,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,WAAIa,IAAI,CAACuQ,KAAK,CAACY,UAAU,CAAC,GAAG,IAAInR,IAAI,CAACA,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;MAAD,CACxE,CAAC;MAAC;MAAApS,cAAA,GAAAG,CAAA;MAEF,KAAK,MAAMoR,KAAK,IAAIW,YAAY,EAAE;QAAA;QAAAlS,cAAA,GAAAG,CAAA;QAChC,IAAI;UACF,MAAMkS,SAAS;UAAA;UAAA,CAAArS,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACqD,QAAQ,CAACf,KAAK,CAACgB,eAAe,CAAC;UAAC;UAAAvS,cAAA,GAAAG,CAAA;UAC/D;UAAI;UAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAA2P,SAAS;UAAA;UAAA,CAAArS,cAAA,GAAA0C,CAAA,YAAI2P,SAAS,CAACxR,MAAM,KAAK0Q,KAAK,CAACiB,YAAY,GAAE;YAAA;YAAAxS,cAAA,GAAA0C,CAAA;YAAA1C,cAAA,GAAAG,CAAA;YACxD;YACA,MAAMgB,KAAK,CAAC;AACxB;AACA;AACA;AACA,aAAa,EAAE,CAACkR,SAAS,CAACxR,MAAM,EAAEwR,SAAS,CAACI,UAAU,EAAEJ,SAAS,CAACK,gBAAgB,EAAEnB,KAAK,CAACgB,eAAe,CAAC,CAAC;;YAE/F;YAAA;YAAAvS,cAAA,GAAAG,CAAA;YACAoR,KAAK,CAACiB,YAAY,GAAGH,SAAS,CAACxR,MAAM;YAAC;YAAAb,cAAA,GAAAG,CAAA;YACtCoR,KAAK,CAACoB,eAAe,GAAGN,SAAS,CAACI,UAAU;YAAC;YAAAzS,cAAA,GAAAG,CAAA;YAC7CoR,KAAK,CAACqB,YAAY,GAAGP,SAAS,CAACK,gBAAgB;UACjD,CAAC;UAAA;UAAA;YAAA1S,cAAA,GAAA0C,CAAA;UAAA;QACH,CAAC,CAAC,OAAO4C,KAAK,EAAE;UAAA;UAAAtF,cAAA,GAAAG,CAAA;UACdoF,OAAO,CAACwB,IAAI,CAAC,0BAA0BwK,KAAK,CAACgB,eAAe,GAAG,EAAEjN,KAAK,CAACpE,OAAO,CAAC;QACjF;MACF;IACF,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJ6J,MAAM;QACN5J,UAAU,EAAE;UACVzF,KAAK,EAAEmD,QAAQ,CAACnD,KAAK,CAAC;UACtBiE,MAAM,EAAEd,QAAQ,CAACc,MAAM,CAAC;UACxBkB,KAAK;UACL8K,OAAO,EAAE9M,QAAQ,CAACc,MAAM,CAAC,GAAGd,QAAQ,CAACnD,KAAK,CAAC,GAAGmF;QAChD;MACF;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOzC,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC/CM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,wBAAwB;MAC/BpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACjD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEoQ;IAAQ,CAAC;IAAA;IAAA,CAAA9S,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;;IAE9B;IACA,MAAM4M,WAAW;IAAA;IAAA,CAAA/S,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAAC2R,OAAO,EAAE7E,MAAM,CAAC,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAEtB,IAAI4S,WAAW,CAAC3N,IAAI,CAACmC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACjC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAM6O,KAAK;IAAA;IAAA,CAAAvR,cAAA,GAAAG,CAAA,SAAG4S,WAAW,CAAC3N,IAAI,CAAC,CAAC,CAAC;;IAEjC;IACA,MAAM2J,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MACf,MAAMuM,MAAM;MAAA;MAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;MAAC;MAAApP,cAAA,GAAAG,CAAA;MAEF,IAAI;QACF,MAAMkS,SAAS;QAAA;QAAA,CAAArS,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACqD,QAAQ,CAACQ,OAAO,CAAC;QAAC;QAAA9S,cAAA,GAAAG,CAAA;QACjD,IAAIkS,SAAS,EAAE;UAAA;UAAArS,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACboR,KAAK,CAACyB,WAAW,GAAGX,SAAS,CAACxR,MAAM;UAAC;UAAAb,cAAA,GAAAG,CAAA;UACrCoR,KAAK,CAAC0B,eAAe,GAAGZ,SAAS,CAACI,UAAU;UAAC;UAAAzS,cAAA,GAAAG,CAAA;UAC7CoR,KAAK,CAAC2B,qBAAqB,GAAGb,SAAS,CAACK,gBAAgB;UAAC;UAAA1S,cAAA,GAAAG,CAAA;UACzDoR,KAAK,CAAC4B,eAAe,GAAGd,SAAS,CAACe,UAAU;QAC9C,CAAC;QAAA;QAAA;UAAApT,cAAA,GAAA0C,CAAA;QAAA;MACH,CAAC,CAAC,OAAO4C,KAAK,EAAE;QAAA;QAAAtF,cAAA,GAAAG,CAAA;QACdoF,OAAO,CAACwB,IAAI,CAAC,kCAAkC,EAAEzB,KAAK,CAACpE,OAAO,CAAC;MACjE;IACF,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAEmJ;IACR,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOjM,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC9CM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,uBAAuB;MAC9BpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACgT,MAAM,CAAC,kBAAkB,EAAE,OAAO7S,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEoQ;IAAQ,CAAC;IAAA;IAAA,CAAA9S,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;;IAE9B;IACA,MAAM4M,WAAW;IAAA;IAAA,CAAA/S,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AACpC;AACA;AACA,KAAK,EAAE,CAAC2R,OAAO,EAAE7E,MAAM,CAAC,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAEtB,IAAI4S,WAAW,CAAC3N,IAAI,CAACmC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACjC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAM6O,KAAK;IAAA;IAAA,CAAAvR,cAAA,GAAAG,CAAA,SAAG4S,WAAW,CAAC3N,IAAI,CAAC,CAAC,CAAC;;IAEjC;IAAA;IAAApF,cAAA,GAAAG,CAAA;IACA,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC+C,QAAQ,CAACqO,KAAK,CAACiB,YAAY,CAAC,EAAE;MAAA;MAAAxS,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACnE,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,oCAAoCiM,KAAK,CAACiB,YAAY;MAC/D,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAxS,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMqM,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IAAA;IAAApP,cAAA,GAAAG,CAAA;IACA,MAAM8O,MAAM,CAACqE,WAAW,CAACR,OAAO,CAAC;;IAEjC;IAAA;IAAA9S,cAAA,GAAAG,CAAA;IACA,MAAMgB,KAAK,CAAC;AAChB;AACA;AACA;AACA,KAAK,EAAE,CAAC2R,OAAO,CAAC,CAAC;IAAC;IAAA9S,cAAA,GAAAG,CAAA;IAEdM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbM,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOoE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAChDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,wBAAwB;MAC/BpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC3C,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEG;IAAO,CAAC;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;;IAE5B;IACA,MAAM4N,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMmE,SAAS;IAAA;IAAA,CAAAvT,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACuE,YAAY,CAAC,CAAC;;IAE7C;IACA,IAAIC,iBAAiB;IAAA;IAAA,CAAAzT,cAAA,GAAAG,CAAA,SAAGoT,SAAS;IAAC;IAAAvT,cAAA,GAAAG,CAAA;IAClC,IAAI0C,MAAM,EAAE;MAAA;MAAA7C,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACVsT,iBAAiB,GAAGF,SAAS,CAAC3G,MAAM,CAAC8G,GAAG,IAAI;QAAA;QAAA1T,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAuT,GAAG,CAAC7Q,MAAM,KAAKA,MAAM,CAACyE,WAAW,CAAC,CAAC;MAAD,CAAC,CAAC;IAClF,CAAC;IAAA;IAAA;MAAAtH,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMiR,iBAAiB;IAAA;IAAA,CAAA3T,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CACzC4L,iBAAiB,CAAC5I,GAAG,CAAC,MAAO+I,QAAQ,IAAK;MAAA;MAAA5T,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MACxC,IAAI;QACF;QACA,MAAM0T,aAAa;QAAA;QAAA,CAAA7T,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AAC5C;AACA;AACA;AACA,WAAW,EAAE,CAACyS,QAAQ,CAAC/Q,MAAM,CAAC,CAAC;;QAErB;QACA,MAAM2M,KAAK;QAAA;QAAA,CAAAxP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACQ,QAAQ,CAACmE,QAAQ,CAAC/Q,MAAM,CAAC;;QAEpD;QACA,MAAMiR,YAAY;QAAA;QAAA,CAAA9T,cAAA,GAAAG,CAAA,SAAGmJ,UAAU,CAACsK,QAAQ,CAAC5D,GAAG,CAAC,GAAG1G,UAAU,CAACkG,KAAK,CAACuE,GAAG,CAAC;QACrE,MAAMC,YAAY;QAAA;QAAA,CAAAhU,cAAA,GAAAG,CAAA,SAAG2T,YAAY,GAAGxK,UAAU,CAACsK,QAAQ,CAACK,UAAU,CAAC;QACnE,MAAMC,mBAAmB;QAAA;QAAA,CAAAlU,cAAA,GAAAG,CAAA,SAAI6T,YAAY,GAAG1K,UAAU,CAACsK,QAAQ,CAACK,UAAU,CAAC,GAAI,GAAG;QAAC;QAAAjU,cAAA,GAAAG,CAAA;QAEnF,OAAO;UACL,GAAGyT,QAAQ;UACXO,YAAY,EAAEN,aAAa,CAACzO,IAAI,CAAC,CAAC,CAAC,EAAE+O,YAAY;UACjDhL,MAAM,EAAE0K,aAAa,CAACzO,IAAI,CAAC,CAAC,CAAC,EAAE+D,MAAM;UACrCiL,aAAa,EAAE9K,UAAU,CAACkG,KAAK,CAACuE,GAAG,CAAC;UACpCM,aAAa,EAAEP,YAAY;UAC3BQ,aAAa,EAAEN,YAAY;UAC3BO,qBAAqB,EAAEL,mBAAmB;UAC1C1E,KAAK,EAAEA;QACT,CAAC;MACH,CAAC,CAAC,OAAOlK,KAAK,EAAE;QAAA;QAAAtF,cAAA,GAAAG,CAAA;QACdoF,OAAO,CAACwB,IAAI,CAAC,gCAAgC6M,QAAQ,CAAC/Q,MAAM,GAAG,EAAEyC,KAAK,CAACpE,OAAO,CAAC;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QAChF,OAAOyT,QAAQ;MACjB;IACF,CAAC,CACH,CAAC;IAAC;IAAA5T,cAAA,GAAAG,CAAA;IAEFM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAEuL;IACR,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOrO,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAClDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,2BAA2B;MAClCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACgT,MAAM,CAAC,oBAAoB,EAAE,OAAO7S,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACtD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEG;IAAO,CAAC;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;IAC7B,MAAM;MAAEqO,UAAU;MAAA;MAAA,CAAAxU,cAAA,GAAA0C,CAAA,YAAG,GAAG;IAAC,CAAC;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACsN,IAAI;;IAErC;IACA,MAAMiB,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMzH,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACwF,aAAa,CAAC5R,MAAM,CAACyE,WAAW,CAAC,CAAC,EAAEkN,UAAU,CAAC;;IAE3E;IAAA;IAAAxU,cAAA,GAAAG,CAAA;IACA,MAAMgB,KAAK,CAAC;AAChB;AACA;AACA;AACA;AACA,KAAK,EAAE,CAAC8M,MAAM,EAAEtG,MAAM,CAAC+J,EAAE,EAAE7O,MAAM,CAACyE,WAAW,CAAC,CAAC,EAAEK,MAAM,CAACqI,GAAG,CAAC,CAAC;IAAC;IAAAhQ,cAAA,GAAAG,CAAA;IAE1DM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAET,MAAM;MACZzG,OAAO,EAAE;IACX,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOoE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAChDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,0BAA0B;MACjCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACzC,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMqM,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMC,OAAO;IAAA;IAAA,CAAArP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACK,UAAU,CAAC,CAAC;;IAEzC;IACA,MAAMoF,gBAAgB;IAAA;IAAA,CAAA1U,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAAC0F,mBAAmB,CAAC;MAAEjM,MAAM,EAAE;IAAK,CAAC,CAAC;;IAE3E;IACA,MAAMkM,UAAU;IAAA;IAAA,CAAA5U,cAAA,GAAAG,CAAA,SAAGmJ,UAAU,CAAC+F,OAAO,CAACwF,MAAM,CAAC;IAC7C,MAAMC,SAAS;IAAA;IAAA,CAAA9U,cAAA,GAAAG,CAAA,SAAGmJ,UAAU,CAAC+F,OAAO,CAACwF,MAAM,CAAC,GAAGvL,UAAU,CAAC+F,OAAO,CAAC0F,WAAW,CAAC;IAC9E,MAAMC,gBAAgB;IAAA;IAAA,CAAAhV,cAAA,GAAAG,CAAA,SAAI2U,SAAS,GAAGxL,UAAU,CAAC+F,OAAO,CAAC0F,WAAW,CAAC,GAAI,GAAG;IAAC;IAAA/U,cAAA,GAAAG,CAAA;IAE7EM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJiH,OAAO,EAAE;UACP,GAAGA,OAAO;UACV4F,WAAW,EAAEL,UAAU;UACvBM,UAAU,EAAEJ,SAAS;UACrBK,kBAAkB,EAAEH;QACtB,CAAC;QACDI,iBAAiB,EAAEV;MACrB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOpP,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAChDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,8BAA8B;MACrCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC9C,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEqK;IAAK,CAAC;IAAA;IAAA,CAAA/M,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;;IAE1B;IACA,MAAM4N,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMiG,WAAW;IAAA;IAAA,CAAArV,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACqG,cAAc,CAACvI,IAAI,CAAC;IAAC;IAAA/M,cAAA,GAAAG,CAAA;IAEtDM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAEiN;IACR,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO/P,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACrDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,8BAA8B;MACrCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAChD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAEG;IAAO,CAAC;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC2F,MAAM;;IAE7B;IACA,MAAM4I,WAAW;IAAA;IAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAAjO,cAAA,GAAAG,CAAA;IAC1D,IAAI,CAAC4O,WAAW,EAAE;MAAA;MAAA/O,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAChB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kCAAkC;QACzCpE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMuM,MAAM;IAAA;IAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;;IAED;IACA,MAAMI,KAAK;IAAA;IAAA,CAAAxP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACQ,QAAQ,CAAC5M,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC;;IAEzD;IACA,MAAM,CAACuM,aAAa,EAAE0B,YAAY,CAAC;IAAA;IAAA,CAAAvV,cAAA,GAAAG,CAAA,SAAG,MAAMyH,OAAO,CAACC,GAAG,CAAC,CACtD1G,KAAK,CAAC;AACZ;AACA;AACA;AACA,OAAO,EAAE,CAAC0B,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC,CAAC;IAE1B;IACAnG,KAAK,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA,OAAO,EAAE,CAAC0B,MAAM,CAACyE,WAAW,CAAC,CAAC,CAAC,CAAC,CAC3B,CAAC;IAEF,MAAMkO,OAAO;IAAA;IAAA,CAAAxV,cAAA,GAAAG,CAAA,SAAG0T,aAAa,CAACzO,IAAI,CAAC,CAAC,CAAC;IACrC,MAAM2G,MAAM;IAAA;IAAA,CAAA/L,cAAA,GAAAG,CAAA,SAAGoV,YAAY,CAACnQ,IAAI,CAAC,CAAC,CAAC;IAAC;IAAApF,cAAA,GAAAG,CAAA;IAEpCM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJvF,MAAM,EAAEA,MAAM,CAACyE,WAAW,CAAC,CAAC;QAC5BkI,KAAK;QACLgG,OAAO;QACPzJ,MAAM;QACNhL,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC9CM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,uBAAuB;MAC9BpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC2N,IAAI,CAAC,mBAAmB,EAAE,OAAOxN,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EACnD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MAAE2K,OAAO;MAAEf,WAAW;MAAA;MAAA,CAAAtM,cAAA,GAAA0C,CAAA,YAAG,CAAC,WAAW,EAAE,aAAa,CAAC;IAAC,CAAC;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACsN,IAAI;IAAC;IAAA9N,cAAA,GAAAG,CAAA;IAEzE;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,aAAC2K,OAAO;IAAA;IAAA,CAAArN,cAAA,GAAA0C,CAAA,YAAI2K,OAAO,CAAC9F,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACpC,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAM+S,YAAY;IAAA;IAAA,CAAAzV,cAAA,GAAAG,CAAA,SAAG,IAAI0B,YAAY,CAAC,CAAC;IACvC,MAAMqJ,OAAO;IAAA;IAAA,CAAAlL,cAAA,GAAAG,CAAA,SAAG,EAAE;;IAElB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,KAAK,MAAM0C,MAAM,IAAIwK,OAAO,EAAE;MAAA;MAAArN,cAAA,GAAAG,CAAA;MAC5B,IAAI;QACF,MAAMuV,aAAa;QAAA;QAAA,CAAA1V,cAAA,GAAAG,CAAA,SAAG,MAAMsV,YAAY,CAACE,uBAAuB,CAAC9S,MAAM,CAAC;QAAC;QAAA7C,cAAA,GAAAG,CAAA;QACzE+K,OAAO,CAAC7D,IAAI,CAAC;UACXxE,MAAM;UACNqI,OAAO,EAAEwK,aAAa;UACtB3U,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;QAAA;QAAAtF,cAAA,GAAAG,CAAA;QACdoF,OAAO,CAACwB,IAAI,CAAC,gCAAgClE,MAAM,GAAG,EAAEyC,KAAK,CAACpE,OAAO,CAAC;QAAC;QAAAlB,cAAA,GAAAG,CAAA;QACvE+K,OAAO,CAAC7D,IAAI,CAAC;UACXxE,MAAM;UACNyC,KAAK,EAAEA,KAAK,CAACpE,OAAO;UACpBH,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;MACJ;IACF;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEDM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE8C;IACR,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAO5F,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAClDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,4BAA4B;MACnCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAAC2N,IAAI,CAAC,kBAAkB,EAAE,OAAOxN,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAClD,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IACD,MAAM;MACJG,MAAM;MACNS,UAAU;MACVE,aAAa;MACbC,cAAc;MAAA;MAAA,CAAAzD,cAAA,GAAA0C,CAAA,YAAG,CAAC;MAClBkT;IACF,CAAC;IAAA;IAAA,CAAA5V,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACsN,IAAI;IAAC;IAAA9N,cAAA,GAAAG,CAAA;IAEb;IAAI;IAAA,CAAAH,cAAA,GAAA0C,CAAA,aAACG,MAAM;IAAA;IAAA,CAAA7C,cAAA,GAAA0C,CAAA,YAAI,CAACY,UAAU,GAAE;MAAA;MAAAtD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAC1B,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,IAAImT,iBAAiB;IAAA;IAAA,CAAA7V,cAAA,GAAAG,CAAA,SAAGyV,YAAY;IAAC;IAAA5V,cAAA,GAAAG,CAAA;IACrC,IAAI,CAAC0V,iBAAiB,EAAE;MAAA;MAAA7V,cAAA,GAAA0C,CAAA;MACtB,MAAMqM,WAAW;MAAA;MAAA,CAAA/O,cAAA,GAAAG,CAAA,SAAG,MAAM6O,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;MAAC;MAAAjO,cAAA,GAAAG,CAAA;MAC1D,IAAI4O,WAAW,EAAE;QAAA;QAAA/O,cAAA,GAAA0C,CAAA;QACf,MAAMuM,MAAM;QAAA;QAAA,CAAAjP,cAAA,GAAAG,CAAA,SAAG,IAAIwB,aAAa,CAC9BoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;QACD,MAAMC,OAAO;QAAA;QAAA,CAAArP,cAAA,GAAAG,CAAA,SAAG,MAAM8O,MAAM,CAACK,UAAU,CAAC,CAAC;QAAC;QAAAtP,cAAA,GAAAG,CAAA;QAC1C0V,iBAAiB,GAAGvM,UAAU,CAAC+F,OAAO,CAACwF,MAAM,CAAC;MAChD,CAAC;MAAA;MAAA;QAAA7U,cAAA,GAAA0C,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAED,IAAI,CAAC0V,iBAAiB,EAAE;MAAA;MAAA7V,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACtB,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtF,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMoT,UAAU;IAAA;IAAA,CAAA9V,cAAA,GAAAG,CAAA,SAAG0V,iBAAiB,IAAIpS,cAAc,GAAG,GAAG,CAAC;IAC7D,IAAIsS,YAAY;IAAA;IAAA,CAAA/V,cAAA,GAAAG,CAAA,SAAG,CAAC;IACpB,IAAI6V,aAAa;IAAA;IAAA,CAAAhW,cAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEtB,IAAIqD,aAAa,EAAE;MAAA;MAAAxD,cAAA,GAAA0C,CAAA;MACjB,MAAMuT,YAAY;MAAA;MAAA,CAAAjW,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAAC0F,GAAG,CAAC/I,UAAU,GAAGE,aAAa,CAAC;MAAC;MAAAxD,cAAA,GAAAG,CAAA;MAC1D4V,YAAY,GAAGpP,IAAI,CAACuP,KAAK,CAACJ,UAAU,GAAGG,YAAY,CAAC;MAAC;MAAAjW,cAAA,GAAAG,CAAA;MACrD6V,aAAa,GAAGD,YAAY,GAAGzS,UAAU;IAC3C,CAAC,MAAM;MAAA;MAAAtD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACL;MACA6V,aAAa,GAAGH,iBAAiB,GAAG,GAAG,CAAC,CAAC;MAAA;MAAA7V,cAAA,GAAAG,CAAA;MACzC4V,YAAY,GAAGpP,IAAI,CAACuP,KAAK,CAACF,aAAa,GAAG1S,UAAU,CAAC;IACvD;;IAEA;IACA,MAAM6S,mBAAmB;IAAA;IAAA,CAAAnW,cAAA,GAAAG,CAAA,SAAI6V,aAAa,GAAGH,iBAAiB,GAAI,GAAG;IACrE,MAAMlE,aAAa;IAAA;IAAA,CAAA3R,cAAA,GAAAG,CAAA,SAAGqD,aAAa;IAAA;IAAA,CAAAxD,cAAA,GAAA0C,CAAA,YACjCqT,YAAY,GAAGpP,IAAI,CAAC0F,GAAG,CAAC/I,UAAU,GAAGE,aAAa,CAAC;IAAA;IAAA,CAAAxD,cAAA,GAAA0C,CAAA,YAAG,CAAC;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAE1DM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJvF,MAAM;QACNuT,WAAW,EAAE9S,UAAU;QACvB+S,eAAe,EAAE7S,aAAa;QAC9B8S,aAAa,EAAEP,YAAY;QAC3BQ,cAAc,EAAEP,aAAa;QAC7BQ,oBAAoB,EAAEL,mBAAmB;QACzCM,WAAW,EAAEX,UAAU;QACvBY,cAAc,EAAE/E,aAAa;QAC7BgF,aAAa,EAAEd;MACjB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOvQ,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IAC3DM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,qCAAqC;MAC5CpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEiB,0BAA0B,CAACO,wBAAwB,CAACC,YAAY,CAAC,EAAE,OAAOxB,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAC5G,MAAMkW,SAAS;EAAA;EAAA,CAAA5W,cAAA,GAAAG,CAAA,SAAGC,OAAO,CAAC,QAAQ,CAAC,CAACyW,UAAU,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAMC,YAAY;EAAA;EAAA,CAAA/W,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;EAAC;EAAApS,cAAA,GAAAG,CAAA;EAEhC,IAAI;IACF,MAAM8N,MAAM;IAAA;IAAA,CAAAjO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAAC0N,IAAI,EAAEC,GAAG;IAAC;IAAAnO,cAAA,GAAAG,CAAA;IAC7B,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACX,MAAM,IAAIiO,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAApO,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACDoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,mCAAmC,EAAE;MAC/D3I,MAAM,EAAEA,MAAM;MAAA;MAAA,CAAAjO,cAAA,GAAA0C,CAAA,YAAG,GAAGuL,MAAM,CAAC+I,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;MAAA;MAAA,CAAAhX,cAAA,GAAA0C,CAAA,YAAG,WAAW;MAC7DuU,SAAS,EAAEzW,GAAG,CAAC0W,OAAO,CAAC,YAAY,CAAC;MACpCC,EAAE,EAAE3W,GAAG,CAAC2W,EAAE;MACVpW,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEH,IAAI,CAAC8N,MAAM,EAAE;MAAA;MAAAjO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACXoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,6CAA6C,CAAC;MAAC;MAAA5W,cAAA,GAAAG,CAAA;MAC5E,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,8BAA8B;QACrCsR,SAAS;QACT7V,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAA0C,CAAA;IAAA;;IAED;IACA,MAAMT,IAAI;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACpE,GAAG,CAAC,CAAC;IAAE;IAAA,CAAAvC,cAAA,GAAA0C,CAAA,YAAAqD,QAAQ,CAACvF,GAAG,CAACW,KAAK,CAACc,IAAI,CAAC;IAAA;IAAA,CAAAjC,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;IACvD,MAAME,KAAK;IAAA;IAAA,CAAA5C,cAAA,GAAAG,CAAA,SAAGwG,IAAI,CAACrE,GAAG,CAAC,GAAG,EAAEqE,IAAI,CAACpE,GAAG,CAAC,CAAC;IAAE;IAAA,CAAAvC,cAAA,GAAA0C,CAAA,YAAAqD,QAAQ,CAACvF,GAAG,CAACW,KAAK,CAACyB,KAAK,CAAC;IAAA;IAAA,CAAA5C,cAAA,GAAA0C,CAAA,YAAI,EAAE,EAAC,CAAC;IACzE,MAAMG,MAAM;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAAC0B,MAAM,EAAEyE,WAAW,CAAC,CAAC;IAC9C,MAAMzG,MAAM;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAACN,MAAM,EAAC,CAAC;IACjC,MAAMuW,SAAS;IAAA;IAAA,CAAApX,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAACkW,UAAU;IACtC,MAAMC,OAAO;IAAA;IAAA,CAAAtX,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAACoW,QAAQ;IAClC,MAAMjJ,SAAS;IAAA;IAAA,CAAAtO,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAACqW,UAAU;IACtC,MAAMrU,IAAI;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK,CAACgC,IAAI,EAAC,CAAC;IAAA;IAAAnD,cAAA,GAAAG,CAAA;IAE7BoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,6BAA6B,EAAE;MACzD3U,IAAI;MACJW,KAAK;MACLC,MAAM;MACNhC,MAAM;MACNuW,SAAS;MACTE,OAAO;MACPhJ,SAAS;MACTnL;IACF,CAAC,CAAC;;IAEF;IAAA;IAAAnD,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,qDAAqD,CAAC;IAClF,MAAMa,gBAAgB;IAAA;IAAA,CAAAzX,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IAEnC,IAAIrD,WAAW;IAAC;IAAA/O,cAAA,GAAAG,CAAA;IAChB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF4O,WAAW,GAAG,MAAMC,aAAa,CAACf,MAAM,EAAE,QAAQ,CAAC;MACnD,MAAMyJ,mBAAmB;MAAA;MAAA,CAAA1X,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGqF,gBAAgB;MAAC;MAAAzX,cAAA,GAAAG,CAAA;MAE1D,IAAI,CAAC4O,WAAW,EAAE;QAAA;QAAA/O,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAChBoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,oCAAoCc,mBAAmB,IAAI,EAAE;UACxFC,iBAAiB,EAAE,QAAQ;UAC3B1J,MAAM,EAAE,GAAGA,MAAM,CAAC+I,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;UACtCY,MAAM,EAAE,iDAAiD;UACzDtM,cAAc,EAAE;QAClB,CAAC,CAAC;QAAC;QAAAtL,cAAA,GAAAG,CAAA;QAEH,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE,gCAAgC;UACvCpE,OAAO,EAAE,8EAA8E;UACvF2W,UAAU,EAAE,yBAAyB;UACrCC,QAAQ,EAAE,QAAQ;UAClBC,OAAO,EAAE,CACP,2BAA2B,EAC3B,iCAAiC,EACjC,gEAAgE,EAChE,gDAAgD,CACjD;UACDC,YAAY,EAAE;YACZC,UAAU,EAAErB,SAAS;YACrB7V,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAA0C,CAAA;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MAEDoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,kCAAkCc,mBAAmB,IAAI,EAAE;QACpFI,QAAQ,EAAE,QAAQ;QAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDyV,SAAS,EAAEpJ,WAAW,CAACG,MAAM;QAAA;QAAA,CAAAlP,cAAA,GAAA0C,CAAA,YAAGqM,WAAW,CAACG,MAAM,CAAC3H,MAAM;QAAA;QAAA,CAAAvH,cAAA,GAAA0C,CAAA,YAAG,CAAC;QAC7D0V,SAAS,EAAE,CAAC,CAACrJ,WAAW,CAACI;MAC3B,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOkJ,gBAAgB,EAAE;MACzB,MAAMX,mBAAmB;MAAA;MAAA,CAAA1X,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGqF,gBAAgB;MAAC;MAAAzX,cAAA,GAAAG,CAAA;MAC1DoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,8CAA8Cc,mBAAmB,KAAK,EAAE;QACnGpS,KAAK,EAAE+S,gBAAgB,CAACnX,OAAO;QAC/BoX,UAAU,EAAED,gBAAgB,CAAC5P,KAAK;QAClCqP,QAAQ,EAAE,QAAQ;QAClBF,MAAM,EAAE,yCAAyC;QACjDtM,cAAc,EAAE;MAClB,CAAC,CAAC;MAAC;MAAAtL,cAAA,GAAAG,CAAA;MAEH,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,oCAAoC;QAC3CpE,OAAO,EAAE,yFAAyF;QAClG2W,UAAU,EAAE,uBAAuB;QACnC7Q,OAAO,EAAEuR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;QAAA;QAAA,CAAAzY,cAAA,GAAA0C,CAAA,YAAG2V,gBAAgB,CAACnX,OAAO;QAAA;QAAA,CAAAlB,cAAA,GAAA0C,CAAA,YAAG,gBAAgB;QAC7FsV,YAAY,EAAE;UACZC,UAAU,EAAErB,SAAS;UACrB8B,iBAAiB,EAAEhB,mBAAmB;UACtC3W,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC;MACF,CAAC,CAAC;IACJ;;IAEA;IAAA;IAAAjB,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,iDAAiD,CAAC;IAC9E,MAAM+B,gBAAgB;IAAA;IAAA,CAAA3Y,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IACnC,IAAInD,MAAM;IAAC;IAAAjP,cAAA,GAAAG,CAAA;IAEX,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF8O,MAAM,GAAG,IAAItN,aAAa,CACxBoN,WAAW,CAACG,MAAM,EAClBH,WAAW,CAACI,SAAS,EACrBJ,WAAW,CAACK,SACd,CAAC;MACD,MAAMwJ,mBAAmB;MAAA;MAAA,CAAA5Y,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGuG,gBAAgB;MAAC;MAAA3Y,cAAA,GAAAG,CAAA;MAE1DoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,mCAAmCgC,mBAAmB,IAAI,EAAE;QACrFV,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDmW,SAAS,EAAE,CAAC,CAAC9J,WAAW,CAACG,MAAM;QAC/BkJ,SAAS,EAAE,CAAC,CAACrJ,WAAW,CAACI;MAC3B,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO2J,YAAY,EAAE;MACrB,MAAMF,mBAAmB;MAAA;MAAA,CAAA5Y,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGuG,gBAAgB;MAAC;MAAA3Y,cAAA,GAAAG,CAAA;MAC1DoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,gDAAgDgC,mBAAmB,KAAK,EAAE;QACrGtT,KAAK,EAAEwT,YAAY,CAAC5X,OAAO;QAC3BoX,UAAU,EAAEQ,YAAY,CAACrQ,KAAK;QAC9ByP,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDkV,MAAM,EAAE,yCAAyC;QACjDtM,cAAc,EAAE;MAClB,CAAC,CAAC;MAAC;MAAAtL,cAAA,GAAAG,CAAA;MAEH,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,sCAAsC;QAC7CpE,OAAO,EAAE,0FAA0F;QACnG2W,UAAU,EAAE,4BAA4B;QACxC7Q,OAAO,EAAEuR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;QAAA;QAAA,CAAAzY,cAAA,GAAA0C,CAAA,YAAGoW,YAAY,CAAC5X,OAAO;QAAA;QAAA,CAAAlB,cAAA,GAAA0C,CAAA,YAAG,+BAA+B;QACxGoV,QAAQ,EAAE,QAAQ;QAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDqV,OAAO,EAAE,CACP,yCAAyC,EACzC,oDAAoD,EACpD,4DAA4D,EAC5D,8CAA8C,CAC/C;QACDC,YAAY,EAAE;UACZC,UAAU,EAAErB,SAAS;UACrB8B,iBAAiB,EAAEE,mBAAmB;UACtC7X,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAM8X,YAAY;IAAA;IAAA,CAAA/Y,cAAA,GAAAG,CAAA,SAAG;MACnByC,KAAK,EAAE+D,IAAI,CAACrE,GAAG,CAACM,KAAK,EAAE,GAAG,CAAC;MAAE;MAC7BoW,UAAU,EAAExY,GAAG,CAACW,KAAK,CAAC6X,UAAU,CAAC;IACnC,CAAC;;IAED;IAAA;IAAAhZ,cAAA,GAAAG,CAAA;IACA,IAAIU,MAAM,EAAE;MAAA;MAAAb,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAAClY,MAAM,GAAGA,MAAM;IAAA,CAAC;IAAA;IAAA;MAAAb,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACzC,IAAIiX,SAAS,EAAE;MAAA;MAAApX,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAACE,KAAK,GAAG7B,SAAS;IAAA,CAAC;IAAA;IAAA;MAAApX,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAC9C,IAAImX,OAAO,EAAE;MAAA;MAAAtX,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAACG,KAAK,GAAG5B,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAtX,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAC1C,IAAI0C,MAAM,EAAE;MAAA;MAAA7C,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAAC1L,OAAO,GAAGxK,MAAM;IAAA,CAAC;IAAA;IAAA;MAAA7C,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IAC1C,IAAIgD,IAAI,EAAE;MAAA;MAAAnD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAAC5V,IAAI,GAAGA,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAnD,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAG,CAAA;IACnC,IAAImO,SAAS,EAAE;MAAA;MAAAtO,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MAAA4Y,YAAY,CAACvB,UAAU,GAAGlJ,SAAS;IAAA,CAAC;IAAA;IAAA;MAAAtO,cAAA,GAAA0C,CAAA;IAAA;;IAEnD;IAAA1C,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,oDAAoD,EAAEmC,YAAY,CAAC;IAC/F,MAAMI,WAAW;IAAA;IAAA,CAAAnZ,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IAC9B,IAAIgH,cAAc;IAAC;IAAApZ,cAAA,GAAAG,CAAA;IAEnB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFiZ,cAAc,GAAG,MAAMxR,OAAO,CAACyR,IAAI,CAAC,CAClCpK,MAAM,CAACqK,SAAS,CAACP,YAAY,CAAC,EAC9B,IAAInR,OAAO,CAAC,CAAC2R,CAAC,EAAEC,MAAM,KACpB;QAAA;QAAAxZ,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsZ,UAAU,CAAC,MAAM;UAAA;UAAAzZ,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAAA,OAAAqZ,MAAM,CAAC,IAAIpL,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAAD,CAAC,EAAE,KAAK,CAAC;MAAD,CACpF,CAAC,CACF,CAAC;MAEF,MAAMsL,cAAc;MAAA;MAAA,CAAA1Z,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG+G,WAAW;MAAC;MAAAnZ,cAAA,GAAAG,CAAA;MAChDoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,qCAAqC8C,cAAc,IAAI,EAAE;QAClFC,WAAW;QAAE;QAAA,CAAA3Z,cAAA,GAAA0C,CAAA,YAAA0W,cAAc,EAAE7R,MAAM;QAAA;QAAA,CAAAvH,cAAA,GAAA0C,CAAA,YAAI,CAAC;QACxCkX,WAAW,EAAER,cAAc,EAAES,eAAe;QAAA;QAAA,CAAA7Z,cAAA,GAAA0C,CAAA,YAAG,IAAI;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,KAAK;QAC3DwV,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;MACzD,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOoX,WAAW,EAAE;MACpB,MAAMJ,cAAc;MAAA;MAAA,CAAA1Z,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG+G,WAAW;MAAC;MAAAnZ,cAAA,GAAAG,CAAA;MAChDoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,kCAAkC8C,cAAc,KAAK,EAAE;QAClFpU,KAAK,EAAEwU,WAAW,CAAC5Y,OAAO;QAC1BoX,UAAU,EAAEwB,WAAW,CAACrR,KAAK;QAC7ByP,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDqX,SAAS,EAAED,WAAW,CAACE,IAAI;QAC3BjM,UAAU,EAAE+L,WAAW,CAACjZ,MAAM;QAC9B+W,MAAM,EAAE,uCAAuC;QAC/CtM,cAAc,EAAE;MAClB,CAAC,CAAC;;MAEF;MAAA;MAAAtL,cAAA,GAAAG,CAAA;MACA,IAAI2Z,WAAW,CAAC5Y,OAAO,EAAEgC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAAA;QAAAlD,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC5C,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE,oBAAoB;UAC3BpE,OAAO,EAAE,iEAAiE;UAC1E2W,UAAU,EAAE,oBAAoB;UAChCC,QAAQ,EAAE,QAAQ;UAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;UAAA;UAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;UAAA;UAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;UACvDqV,OAAO,EAAE,CACP,yBAAyB,EACzB,gCAAgC,EAChC,4BAA4B,EAC5B,uCAAuC,CACxC;UACDC,YAAY,EAAE;YACZC,UAAU,EAAErB,SAAS;YACrBqD,mBAAmB,EAAEP,cAAc;YACnC3Y,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAA0C,CAAA;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MAED;MAAI;MAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAAoX,WAAW,CAACjZ,MAAM,KAAK,GAAG;MAAA;MAAA,CAAAb,cAAA,GAAA0C,CAAA,YAAIoX,WAAW,CAAC5Y,OAAO,EAAEgC,QAAQ,CAAC,cAAc,CAAC,GAAE;QAAA;QAAAlD,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC/E,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE,yBAAyB;UAChCpE,OAAO,EAAE,uFAAuF;UAChG2W,UAAU,EAAE,yBAAyB;UACrCC,QAAQ,EAAE,QAAQ;UAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;UAAA;UAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;UAAA;UAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;UACvDqV,OAAO,EAAE,CACP,2BAA2B,EAC3B,oCAAoC,EACpC,8DAA8D,EAC9D,+CAA+C,CAChD;UACDC,YAAY,EAAE;YACZC,UAAU,EAAErB,SAAS;YACrB8B,iBAAiB,EAAEgB,cAAc;YACjC3Y,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAA0C,CAAA;MAAA;MAAA1C,cAAA,GAAAG,CAAA;MAED;MAAI;MAAA,CAAAH,cAAA,GAAA0C,CAAA,YAAAoX,WAAW,CAACjZ,MAAM,KAAK,GAAG;MAAA;MAAA,CAAAb,cAAA,GAAA0C,CAAA,YAAIoX,WAAW,CAAC5Y,OAAO,EAAEgC,QAAQ,CAAC,WAAW,CAAC,GAAE;QAAA;QAAAlD,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QAC5E,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;UAC1BC,OAAO,EAAE,KAAK;UACd0E,KAAK,EAAE,8BAA8B;UACrCpE,OAAO,EAAE,sEAAsE;UAC/E2W,UAAU,EAAE,sBAAsB;UAClCC,QAAQ,EAAE,QAAQ;UAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;UAAA;UAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;UAAA;UAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;UACvDqV,OAAO,EAAE,CACP,uDAAuD,EACvD,+CAA+C,EAC/C,mDAAmD,EACnD,gCAAgC,CACjC;UACDC,YAAY,EAAE;YACZC,UAAU,EAAErB,SAAS;YACrB8B,iBAAiB,EAAEgB,cAAc;YACjC3Y,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC;QACF,CAAC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAA0C,CAAA;MAAA;;MAED;MAAA1C,cAAA,GAAAG,CAAA;MACA,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,kBAAkB;QACzBpE,OAAO,EAAE,4EAA4E;QACrF2W,UAAU,EAAE,kBAAkB;QAC9B7Q,OAAO,EAAEuR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;QAAA;QAAA,CAAAzY,cAAA,GAAA0C,CAAA,YAAGoX,WAAW,CAAC5Y,OAAO;QAAA;QAAA,CAAAlB,cAAA,GAAA0C,CAAA,YAAG,wBAAwB;QAChGoV,QAAQ,EAAE,QAAQ;QAClBI,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;QACvDqV,OAAO,EAAE,CACP,yBAAyB,EACzB,6BAA6B,EAC7B,6BAA6B,EAC7B,uCAAuC,CACxC;QACDC,YAAY,EAAE;UACZC,UAAU,EAAErB,SAAS;UACrB8B,iBAAiB,EAAEgB,cAAc;UACjC3Y,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC;MACF,CAAC,CAAC;IACJ;;IAEA;IAAA;IAAAjB,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,yCAAyC,CAAC;IACtE,MAAMsD,eAAe;IAAA;IAAA,CAAAla,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IAClC,IAAI+H,UAAU;IAAA;IAAA,CAAAna,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEpB,IAAI;MACF,MAAMia,eAAe;MAAA;MAAA,CAAApa,cAAA,GAAAG,CAAA,SAAG;QAAE,GAAG4Y;MAAa,CAAC;MAAC;MAAA/Y,cAAA,GAAAG,CAAA;MAC5C,OAAOia,eAAe,CAACvZ,MAAM,CAAC,CAAC;MAAA;MAAAb,cAAA,GAAAG,CAAA;MAE/Bga,UAAU,GAAG,MAAMvS,OAAO,CAACyR,IAAI,CAAC,CAC9BpK,MAAM,CAACoL,oBAAoB,CAAC,MAAM,EAAED,eAAe,CAAC,EACpD,IAAIxS,OAAO,CAAC,CAAC2R,CAAC,EAAEC,MAAM,KACpB;QAAA;QAAAxZ,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAAA,OAAAsZ,UAAU,CAAC,MAAM;UAAA;UAAAzZ,cAAA,GAAAU,CAAA;UAAAV,cAAA,GAAAG,CAAA;UAAA,OAAAqZ,MAAM,CAAC,IAAIpL,KAAK,CAAC,2CAA2C,CAAC,CAAC;QAAD,CAAC,EAAE,KAAK,CAAC;MAAD,CACxF,CAAC,CACF,CAAC;MAEF,MAAMkM,kBAAkB;MAAA;MAAA,CAAAta,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG8H,eAAe;MAAC;MAAAla,cAAA,GAAAG,CAAA;MACxDoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,mCAAmC0D,kBAAkB,IAAI,EAAE;QACpFC,eAAe;QAAE;QAAA,CAAAva,cAAA,GAAA0C,CAAA,YAAAyX,UAAU,EAAE5S,MAAM;QAAA;QAAA,CAAAvH,cAAA,GAAA0C,CAAA,YAAI,CAAC;QACxCwV,WAAW,EAAEnJ,WAAW,CAACK,SAAS;QAAA;QAAA,CAAApP,cAAA,GAAA0C,CAAA,YAAG,SAAS;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,YAAG,MAAM;MACzD,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAO8X,cAAc,EAAE;MACvB,MAAMF,kBAAkB;MAAA;MAAA,CAAAta,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG8H,eAAe;MAAC;MAAAla,cAAA,GAAAG,CAAA;MACxDoF,OAAO,CAACwB,IAAI,CAAC,OAAO6P,SAAS,sCAAsC0D,kBAAkB,KAAK,EAAE;QAC1FhV,KAAK,EAAEkV,cAAc,CAACtZ,OAAO;QAC7B6Y,SAAS,EAAES,cAAc,CAACR,IAAI;QAC9BjM,UAAU,EAAEyM,cAAc,CAAC3Z,MAAM;QACjC+W,MAAM,EAAE,yCAAyC;QACjD6C,IAAI,EAAE;MACR,CAAC,CAAC;;MAEF;MAAA;MAAAza,cAAA,GAAAG,CAAA;MACAga,UAAU,GAAG,EAAE;IACjB;;IAEA;IAAA;IAAAna,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,QAAQoR,SAAS,6CAA6C,CAAC;IAC3E,MAAM8D,OAAO;IAAA;IAAA,CAAA1a,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IAC1B,IAAIuI,QAAQ;IAAA;IAAA,CAAA3a,cAAA,GAAAG,CAAA,SAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAClB,IAAI;MACF;MACA,MAAMya,WAAW;MAAA;MAAA,CAAA5a,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;MAAC;MAAAnB,cAAA,GAAAG,CAAA;MAEH,IAAIya,WAAW,CAACxV,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;QAAA;QAAArF,cAAA,GAAA0C,CAAA;QAC9B,IAAImY,OAAO;QAAA;QAAA,CAAA7a,cAAA,GAAAG,CAAA,SAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;QAED,MAAM2a,QAAQ;QAAA;QAAA,CAAA9a,cAAA,GAAAG,CAAA,SAAG,CAAC8N,MAAM,CAAC;QACzB,IAAI9G,UAAU;QAAA;QAAA,CAAAnH,cAAA,GAAAG,CAAA,SAAG,CAAC;;QAElB;QAAA;QAAAH,cAAA,GAAAG,CAAA;QACA,IAAI0C,MAAM,EAAE;UAAA;UAAA7C,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACVgH,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UACb0a,OAAO,IAAI,kBAAkB1T,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UAC1C2a,QAAQ,CAACzT,IAAI,CAACxE,MAAM,CAAC;QACvB,CAAC;QAAA;QAAA;UAAA7C,cAAA,GAAA0C,CAAA;QAAA;QAAA1C,cAAA,GAAAG,CAAA;QAED,IAAIU,MAAM,EAAE;UAAA;UAAAb,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACVgH,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UACb0a,OAAO,IAAI,wBAAwB1T,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UAChD2a,QAAQ,CAACzT,IAAI,CAACxG,MAAM,CAAC;QACvB,CAAC;QAAA;QAAA;UAAAb,cAAA,GAAA0C,CAAA;QAAA;QAAA1C,cAAA,GAAAG,CAAA;QAED,IAAIiX,SAAS,EAAE;UAAA;UAAApX,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACbgH,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UACb0a,OAAO,IAAI,uBAAuB1T,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UAC/C2a,QAAQ,CAACzT,IAAI,CAAC+P,SAAS,CAAC;QAC1B,CAAC;QAAA;QAAA;UAAApX,cAAA,GAAA0C,CAAA;QAAA;QAAA1C,cAAA,GAAAG,CAAA;QAED,IAAImX,OAAO,EAAE;UAAA;UAAAtX,cAAA,GAAA0C,CAAA;UAAA1C,cAAA,GAAAG,CAAA;UACXgH,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UACb0a,OAAO,IAAI,uBAAuB1T,UAAU,EAAE;UAAC;UAAAnH,cAAA,GAAAG,CAAA;UAC/C2a,QAAQ,CAACzT,IAAI,CAACiQ,OAAO,CAAC;QACxB,CAAC;QAAA;QAAA;UAAAtX,cAAA,GAAA0C,CAAA;QAAA;QAAA1C,cAAA,GAAAG,CAAA;QAED0a,OAAO,IAAI,oCAAoC1T,UAAU,GAAG,CAAC,YAAYA,UAAU,GAAG,CAAC,EAAE;QAAC;QAAAnH,cAAA,GAAAG,CAAA;QAC1F2a,QAAQ,CAACzT,IAAI,CAACzE,KAAK,EAAE,CAACX,IAAI,GAAG,CAAC,IAAIW,KAAK,CAAC;QAExC,MAAMmY,QAAQ;QAAA;QAAA,CAAA/a,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC0Z,OAAO,EAAEC,QAAQ,CAAC;QAAC;QAAA9a,cAAA,GAAAG,CAAA;QAChDwa,QAAQ,GAAGI,QAAQ,CAAC3V,IAAI;QAExB,MAAM4V,UAAU;QAAA;QAAA,CAAAhb,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGsI,OAAO;QAAC;QAAA1a,cAAA,GAAAG,CAAA;QACxCoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,kCAAkCoE,UAAU,IAAI,EAAE;UAC3EC,aAAa,EAAEN,QAAQ,CAACpT,MAAM;UAC9B2T,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QAAA;QAAAlb,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAG,CAAA;QACLoF,OAAO,CAACwB,IAAI,CAAC,OAAO6P,SAAS,kEAAkE,CAAC;MAClG;IACF,CAAC,CAAC,OAAOuE,OAAO,EAAE;MAChB,MAAMH,UAAU;MAAA;MAAA,CAAAhb,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGsI,OAAO;MAAC;MAAA1a,cAAA,GAAAG,CAAA;MACxCoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,iCAAiCoE,UAAU,KAAK,EAAE;QAC7E1V,KAAK,EAAE6V,OAAO,CAACja,OAAO;QACtB6Y,SAAS,EAAEoB,OAAO,CAACnB,IAAI;QACvBpC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;;IAEA;IAAA;IAAA5X,cAAA,GAAAG,CAAA;IACAoF,OAAO,CAACC,GAAG,CAAC,OAAOoR,SAAS,+CAA+C,CAAC;IAC5E,MAAMwE,YAAY;IAAA;IAAA,CAAApb,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC;IAE/B,MAAMiJ,eAAe;IAAA;IAAA,CAAArb,cAAA,GAAAG,CAAA,SAAG;MACtB8R,MAAM;MAAE;MAAA,CAAAjS,cAAA,GAAA0C,CAAA,YAAA0W,cAAc;MAAA;MAAA,CAAApZ,cAAA,GAAA0C,CAAA,YAAI,EAAE;MAC5ByX,UAAU;MAAE;MAAA,CAAAna,cAAA,GAAA0C,CAAA,YAAAyX,UAAU;MAAA;MAAA,CAAAna,cAAA,GAAA0C,CAAA,YAAI,EAAE;MAC5B4Y,gBAAgB;MAAE;MAAA,CAAAtb,cAAA,GAAA0C,CAAA,YAAAiY,QAAQ;MAAA;MAAA,CAAA3a,cAAA,GAAA0C,CAAA,YAAI,EAAE;IAClC,CAAC;;IAED;IACA,MAAM6Y,cAAc;IAAA;IAAA,CAAAvb,cAAA,GAAAG,CAAA,SAAG,EAAE;;IAEzB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,IAAIkb,eAAe,CAACpJ,MAAM,CAAC1K,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrCkb,eAAe,CAACpJ,MAAM,CAACnG,OAAO,CAACyF,KAAK,IAAI;QAAA;QAAAvR,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QACtCob,cAAc,CAAClU,IAAI,CAAC;UAClBqK,EAAE,EAAEH,KAAK,CAACG,EAAE;UACZ8J,MAAM,EAAE,cAAc;UACtB3Y,MAAM,EAAE0O,KAAK,CAAC1O,MAAM;UACpBM,IAAI,EAAEoO,KAAK,CAACpO,IAAI;UAChBqU,UAAU,EAAEjG,KAAK,CAACiG,UAAU;UAC5BnJ,QAAQ,EAAE/E,UAAU,CAACiI,KAAK,CAACvB,GAAG,CAAC;UAC/B2C,eAAe,EAAErJ,UAAU;UAAC;UAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA6O,KAAK,CAACkB,UAAU;UAAA;UAAA,CAAAzS,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;UAClDmO,KAAK,EAAEvH,UAAU;UAAC;UAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA6O,KAAK,CAACpB,WAAW;UAAA;UAAA,CAAAnQ,cAAA,GAAA0C,CAAA,YAAI6O,KAAK,CAACnB,UAAU;UAAA;UAAA,CAAApQ,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;UAC7DkQ,YAAY,EAAEtJ,UAAU;UAAC;UAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA6O,KAAK,CAACmB,gBAAgB;UAAA;UAAA,CAAA1S,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;UACrD7B,MAAM,EAAE0Q,KAAK,CAAC1Q,MAAM;UACpBoP,aAAa,EAAEsB,KAAK,CAACtB,aAAa;UAClCkC,UAAU,EAAEZ,KAAK,CAACY,UAAU;UAC5BiB,UAAU,EAAE7B,KAAK,CAAC6B,UAAU;UAC5BqI,YAAY,EAAElK,KAAK,CAACkK,YAAY;UAChCC,SAAS,EAAEnK,KAAK,CAACmK;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1b,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACA,IAAIkb,eAAe,CAAClB,UAAU,CAAC5S,MAAM,GAAG,CAAC,EAAE;MAAA;MAAAvH,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACzCkb,eAAe,CAAClB,UAAU,CAACrO,OAAO,CAAC6P,SAAS,IAAI;QAAA;QAAA3b,cAAA,GAAAU,CAAA;QAAAV,cAAA,GAAAG,CAAA;QAC9Cob,cAAc,CAAClU,IAAI,CAAC;UAClBqK,EAAE,EAAEiK,SAAS,CAACjK,EAAE;UAChB8J,MAAM,EAAE,kBAAkB;UAC1B3Y,MAAM,EAAE8Y,SAAS,CAAC9Y,MAAM;UACxBM,IAAI,EAAEwY,SAAS,CAACxY,IAAI;UACpBqU,UAAU;UAAE;UAAA,CAAAxX,cAAA,GAAA0C,CAAA,YAAAiZ,SAAS,CAACnE,UAAU;UAAA;UAAA,CAAAxX,cAAA,GAAA0C,CAAA,YAAI,SAAS;UAC7C2L,QAAQ,EAAE/E,UAAU,CAACqS,SAAS,CAAC3L,GAAG,CAAC;UACnC2C,eAAe,EAAErJ,UAAU,CAACqS,SAAS,CAAC3L,GAAG,CAAC;UAC1Ca,KAAK,EAAEvH,UAAU,CAACqS,SAAS,CAAC9K,KAAK,CAAC;UAClC+B,YAAY,EAAEtJ,UAAU,CAACqS,SAAS,CAAC9K,KAAK,CAAC;UACzChQ,MAAM,EAAE,QAAQ;UAChBsR,UAAU,EAAEwJ,SAAS,CAACC,gBAAgB;UACtCC,YAAY,EAAEF,SAAS,CAACjK;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1R,cAAA,GAAA0C,CAAA;IAAA;;IAED;IAAA1C,cAAA,GAAAG,CAAA;IACAob,cAAc,CAAC/N,IAAI,CAAC,CAACC,CAAC,EAAE/K,CAAC,KAAK;MAAA;MAAA1C,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA,WAAIa,IAAI,CAAC0B,CAAC,CAACyP,UAAU,CAAC,GAAG,IAAInR,IAAI,CAACyM,CAAC,CAAC0E,UAAU,CAAC;IAAD,CAAC,CAAC;IAE9E,MAAM2J,eAAe;IAAA;IAAA,CAAA9b,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAGgJ,YAAY;IACjD,MAAMW,aAAa;IAAA;IAAA,CAAA/b,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG2E,YAAY;IAAC;IAAA/W,cAAA,GAAAG,CAAA;IAEhDoF,OAAO,CAACC,GAAG,CAAC,MAAMoR,SAAS,wCAAwCmF,aAAa,IAAI,EAAE;MACpF7R,OAAO,EAAE;QACP8R,YAAY,EAAET,cAAc,CAAChU,MAAM;QACnC0U,YAAY,EAAEZ,eAAe,CAACpJ,MAAM,CAAC1K,MAAM;QAC3C2U,gBAAgB,EAAEb,eAAe,CAAClB,UAAU,CAAC5S,MAAM;QACnD4U,eAAe,EAAEd,eAAe,CAACC,gBAAgB,CAAC/T;MACpD,CAAC;MACD2B,WAAW,EAAE;QACX6S,aAAa,EAAE,GAAGA,aAAa,IAAI;QACnCrE,mBAAmB,EAAE,GAAGA,mBAAmB,IAAI;QAC/CgC,cAAc,EAAE,GAAGA,cAAc,IAAI;QACrC0C,kBAAkB,EAAE,GAAGN,eAAe;MACxC,CAAC;MACDpO,OAAO,EAAE;QACP7K,MAAM;QACNhC,MAAM;QACNuW,SAAS;QACTE,OAAO;QACPrV,IAAI;QACJW;MACF,CAAC;MACD/B,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;IAAA;IAAAb,cAAA,GAAAG,CAAA;IACAM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE;QACJiU,MAAM,EAAEd,cAAc,CAACzT,KAAK,CAAC,CAAC,EAAElF,KAAK,CAAC;QAAE;QACxC0Z,QAAQ,EAAE;UACRC,aAAa,EAAElB,eAAe,CAACpJ,MAAM,CAAC1K,MAAM;UAC5CiV,iBAAiB,EAAEnB,eAAe,CAAClB,UAAU,CAAC5S,MAAM;UACpD+T,gBAAgB,EAAED,eAAe,CAACC,gBAAgB,CAAC/T;QACrD,CAAC;QACDc,UAAU,EAAE;UACVpG,IAAI;UACJW,KAAK;UACL6Z,aAAa,EAAElB,cAAc,CAAChU,MAAM;UACpCmV,QAAQ,EAAEnB,cAAc,CAAChU,MAAM,IAAI3E,KAAK;UACxCiX,eAAe,EAAET,cAAc,EAAES;QACnC,CAAC;QACDnM,OAAO,EAAE;UACP7K,MAAM;UACNhC,MAAM;UACNwW,UAAU,EAAED,SAAS;UACrBG,QAAQ,EAAED,OAAO;UACjBE,UAAU,EAAElJ,SAAS;UACrBnL;QACF,CAAC;QACDwZ,YAAY,EAAE;UACZC,UAAU,EAAE7N,WAAW,CAACK,SAAS;UACjCyN,YAAY,EAAE,CAAC,YAAY,EAAE,UAAU;QACzC,CAAC;QACD7E,YAAY,EAAE;UACZC,UAAU,EAAErB,SAAS;UACrBkG,iBAAiB,EAAEf,aAAa;UAChChb,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC;MACF;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOqE,KAAK,EAAE;IACd,MAAMyX,aAAa;IAAA;IAAA,CAAA/c,cAAA,GAAAG,CAAA,SAAGa,IAAI,CAACoR,GAAG,CAAC,CAAC,GAAG2E,YAAY;IAAC;IAAA/W,cAAA,GAAAG,CAAA;IAChDoF,OAAO,CAACD,KAAK,CAAC,MAAMsR,SAAS,wCAAwCmG,aAAa,KAAK,EAAE;MACvFzX,KAAK,EAAEA,KAAK,CAACpE,OAAO;MACpBoX,UAAU,EAAEhT,KAAK,CAACmD,KAAK;MACvBsR,SAAS,EAAEzU,KAAK,CAAC0U,IAAI;MACrBpC,MAAM,EAAE,yCAAyC;MACjDtM,cAAc,EAAE;IAClB,CAAC,CAAC;IAAC;IAAAtL,cAAA,GAAAG,CAAA;IAEHM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,+BAA+B;MACtC0B,OAAO,EAAEuR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;MAAA;MAAA,CAAAzY,cAAA,GAAA0C,CAAA,YAAG4C,KAAK,CAACpE,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAA0C,CAAA,YAAG,uBAAuB;MACzFsV,YAAY,EAAE;QACZC,UAAU,EAAErB,SAAS;QACrB8B,iBAAiB,EAAEqE,aAAa;QAChChc,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAjB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC7CoF,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EAAC;EAAAxF,cAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM;MAAEyC,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,YAAG,GAAG;MAAE6D,SAAS;MAAA;MAAA,CAAAvG,cAAA,GAAA0C,CAAA,YAAG,OAAO;IAAC,CAAC;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;IAEtD,MAAM+D,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,YAAYoG,SAAS,EAAE;;IAEzC;IACA,MAAMpB,iBAAiB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CACnC;AACN;AACA;AACA;AACA,SAAS,EACH,CAAC+D,SAAS,CACZ,CAAC;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACgF,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;MAAA;MAAArF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrCoF,OAAO,CAACD,KAAK,CAAC,mCAAmCJ,SAAS,EAAE,CAAC;MAAC;MAAAlF,cAAA,GAAAG,CAAA;MAC9D,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,yBAAyBJ,SAAS,YAAY;QACrDhE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa+D,SAAS;AACtB;AACA;AACA;AACA,KAAK,EAAE,CAACa,QAAQ,CAACnD,KAAK,CAAC,CAAC,CAAC;IAErB,MAAMoa,UAAU;IAAA;IAAA,CAAAhd,cAAA,GAAAG,CAAA,SAAGwH,MAAM,CAACvC,IAAI,CAACyF,GAAG,CAACyC,GAAG,IAAK;MAAA;MAAAtN,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA;QACzC0C,MAAM,EAAEyK,GAAG,CAACzK,MAAM;QAClBkJ,MAAM,EAAEuB,GAAG,CAACvB,MAAM;QAClBgB,IAAI,EAAEO,GAAG,CAACP,IAAI;QACd8D,KAAK,EAAEvH,UAAU;QAAC;QAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAACuD,KAAK;QAAA;QAAA,CAAA7Q,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;QACjCua,aAAa,EAAE3T,UAAU;QAAC;QAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAAC4P,aAAa;QAAA;QAAA,CAAAld,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;QACjDuJ,QAAQ;QAAE;QAAA,CAAAjM,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAACrB,QAAQ;QAAA;QAAA,CAAAjM,cAAA,GAAA0C,CAAA,YAAI,QAAQ;MACpC,CAAC;IAAD,CAAE,CAAC;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAEJoF,OAAO,CAACC,GAAG,CAAC,0BAA0BwX,UAAU,CAACzV,MAAM,cAAc,CAAC;IAAC;IAAAvH,cAAA,GAAAG,CAAA;IACvEM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE4U,UAAU;MAChBhX,KAAK,EAAEgX,UAAU,CAACzV,MAAM;MACxBhB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACvDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,6BAA6B;MACpCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlB,cAAA,GAAAG,CAAA;AACAE,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAT,cAAA,GAAAU,CAAA;EAAAV,cAAA,GAAAG,CAAA;EAC9CoF,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;EAAC;EAAAxF,cAAA,GAAAG,CAAA;EACrD,IAAI;IACF,MAAM;MAAEyC,KAAK;MAAA;MAAA,CAAA5C,cAAA,GAAA0C,CAAA,YAAG,GAAG;MAAE6D,SAAS;MAAA;MAAA,CAAAvG,cAAA,GAAA0C,CAAA,YAAG,OAAO;IAAC,CAAC;IAAA;IAAA,CAAA1C,cAAA,GAAAG,CAAA,SAAGK,GAAG,CAACW,KAAK;IAEtD,MAAM+D,SAAS;IAAA;IAAA,CAAAlF,cAAA,GAAAG,CAAA,SAAG,YAAYoG,SAAS,EAAE;;IAEzC;IACA,MAAMpB,iBAAiB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CACnC;AACN;AACA;AACA;AACA,SAAS,EACH,CAAC+D,SAAS,CACZ,CAAC;IAAC;IAAAlF,cAAA,GAAAG,CAAA;IAEF,IAAI,CAACgF,iBAAiB,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;MAAA;MAAArF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAG,CAAA;MACrCoF,OAAO,CAACD,KAAK,CAAC,mCAAmCJ,SAAS,EAAE,CAAC;MAAC;MAAAlF,cAAA,GAAAG,CAAA;MAC9D,OAAOM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACd0E,KAAK,EAAE,yBAAyBJ,SAAS,YAAY;QACrDhE,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMiF,MAAM;IAAA;IAAA,CAAA3H,cAAA,GAAAG,CAAA,SAAG,MAAMgB,KAAK,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa+D,SAAS;AACtB;AACA;AACA;AACA,KAAK,EAAE,CAACa,QAAQ,CAACnD,KAAK,CAAC,CAAC,CAAC;IAErB,MAAMua,WAAW;IAAA;IAAA,CAAAnd,cAAA,GAAAG,CAAA,SAAGwH,MAAM,CAACvC,IAAI,CAACyF,GAAG,CAACyC,GAAG,IAAK;MAAA;MAAAtN,cAAA,GAAAU,CAAA;MAAAV,cAAA,GAAAG,CAAA;MAAA;QAC1C0C,MAAM,EAAEyK,GAAG,CAACzK,MAAM;QAClBkJ,MAAM,EAAEuB,GAAG,CAACvB,MAAM;QAClBgB,IAAI,EAAEO,GAAG,CAACP,IAAI;QACd8D,KAAK,EAAEvH,UAAU;QAAC;QAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAACuD,KAAK;QAAA;QAAA,CAAA7Q,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;QACjCua,aAAa,EAAE3T,UAAU;QAAC;QAAA,CAAAtJ,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAAC4P,aAAa;QAAA;QAAA,CAAAld,cAAA,GAAA0C,CAAA,YAAI,CAAC,EAAC;QACjDuJ,QAAQ;QAAE;QAAA,CAAAjM,cAAA,GAAA0C,CAAA,YAAA4K,GAAG,CAACrB,QAAQ;QAAA;QAAA,CAAAjM,cAAA,GAAA0C,CAAA,YAAI,QAAQ;MACpC,CAAC;IAAD,CAAE,CAAC;IAAC;IAAA1C,cAAA,GAAAG,CAAA;IAEJoF,OAAO,CAACC,GAAG,CAAC,0BAA0B2X,WAAW,CAAC5V,MAAM,eAAe,CAAC;IAAC;IAAAvH,cAAA,GAAAG,CAAA;IACzEM,GAAG,CAACE,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbwH,IAAI,EAAE+U,WAAW;MACjBnX,KAAK,EAAEmX,WAAW,CAAC5V,MAAM;MACzBhB;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IAAA;IAAAtF,cAAA,GAAAG,CAAA;IACdoF,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAtF,cAAA,GAAAG,CAAA;IACxDM,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACd0E,KAAK,EAAE,8BAA8B;MACrCpE,OAAO,EAAEoE,KAAK,CAACpE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,SAASyO,kBAAkBA,CAACtB,QAAQ,EAAEwC,KAAK,EAAEvC,SAAS,EAAE;EAAA;EAAAtO,cAAA,GAAAU,CAAA;EACtD,IAAI0c,IAAI;EAAA;EAAA,CAAApd,cAAA,GAAAG,CAAA,SAAGkO,QAAQ,GAAGwC,KAAK;;EAE3B;EAAA;EAAA7Q,cAAA,GAAAG,CAAA;EACA,IAAImO,SAAS,KAAK5K,WAAW,CAACC,MAAM,EAAE;IAAA;IAAA3D,cAAA,GAAA0C,CAAA;IAAA1C,cAAA,GAAAG,CAAA;IACpCid,IAAI,IAAI,IAAI,CAAC,CAAC;EAChB,CAAC;EAAA;EAAA;IAAApd,cAAA,GAAA0C,CAAA;EAAA;EAAA1C,cAAA,GAAAG,CAAA;EAED,OAAOid,IAAI;AACb;AAAC;AAAApd,cAAA,GAAAG,CAAA;AAEDkd,MAAM,CAACC,OAAO,GAAGjd,MAAM","ignoreList":[]}