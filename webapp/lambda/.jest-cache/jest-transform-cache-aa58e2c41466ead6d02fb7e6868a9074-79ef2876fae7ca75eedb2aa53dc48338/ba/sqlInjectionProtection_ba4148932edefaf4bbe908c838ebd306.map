{"version":3,"names":["cov_1foas09lko","actualCoverage","SQLInjectionProtection","constructor","f","s","dangerousPatterns","allowedUserFields","Set","allowedProviders","allowedSymbolPattern","validateInput","input","fieldName","b","valid","sanitized","pattern","test","console","warn","substring","error","risk","toString","field","replace","trim","validateFieldName","allowedFields","has","validateProvider","provider","toLowerCase","validateSymbol","symbol","toUpperCase","sanitizeEnvVar","varName","value","Error","includes","buildSecureQuery","baseQuery","conditions","params","whereClause","paramIndex","validFields","Object","entries","validation","String","push","finalQuery","length","join","query","middleware","req","res","next","validateRequestParams","sqlSecurity","bind","validateObject","obj","path","key","fullPath","ip","userAgent","headers","keys","body","logSecurityEvent","event","securityLog","timestamp","Date","toISOString","type","severity","details","source","JSON","stringify","module","exports"],"sources":["sqlInjectionProtection.js"],"sourcesContent":["/**\n * SQL Injection Protection Middleware\n * Comprehensive protection against SQL injection attacks\n */\n\nclass SQLInjectionProtection {\n  constructor() {\n    // Dangerous SQL patterns that could indicate injection attempts\n    this.dangerousPatterns = [\n      // Union-based injection\n      /(\\b(union|UNION)\\s+(all\\s+)?(select|SELECT))/i,\n      \n      // Boolean-based blind injection\n      /(\\b(and|AND|or|OR)\\s+[\\d\\w\\s]*=[\\d\\w\\s]*)/i,\n      \n      // Time-based blind injection\n      /(sleep\\s*\\(|waitfor\\s+delay|pg_sleep\\s*\\()/i,\n      \n      // Stacked queries\n      /;\\s*(drop|DROP|delete|DELETE|insert|INSERT|update|UPDATE|create|CREATE)/i,\n      \n      // Information schema queries\n      /(information_schema|INFORMATION_SCHEMA)/i,\n      \n      // Comment-based injection\n      /(\\/\\*|\\*\\/|--|\\#)/,\n      \n      // Function calls that shouldn't be in user input\n      /(char\\s*\\(|ascii\\s*\\(|substring\\s*\\(|mid\\s*\\()/i,\n      \n      // Hex encoding attempts\n      /(0x[0-9a-f]+)/i,\n      \n      // SQL keywords that shouldn't be in user input\n      /\\b(alter|ALTER|exec|EXEC|execute|EXECUTE|cast|CAST|convert|CONVERT)\\b/i\n    ];\n\n    // Allowed field names for dynamic queries (whitelist)\n    this.allowedUserFields = new Set([\n      'first_name',\n      'last_name', \n      'email',\n      'phone',\n      'notification_preferences',\n      'theme_preferences',\n      'timezone',\n      'language',\n      'currency_preference'\n    ]);\n\n    // Allowed API key providers\n    this.allowedProviders = new Set([\n      'alpaca',\n      'polygon', \n      'finnhub',\n      'yahoo',\n      'alpha_vantage'\n    ]);\n\n    // Allowed symbols pattern (alphanumeric + common symbols)\n    this.allowedSymbolPattern = /^[A-Z0-9\\.\\-_]{1,10}$/;\n  }\n\n  /**\n   * Validate input against SQL injection patterns\n   */\n  validateInput(input, fieldName = 'unknown') {\n    if (!input || typeof input !== 'string') {\n      return { valid: true, sanitized: input };\n    }\n\n    // Check against dangerous patterns\n    for (const pattern of this.dangerousPatterns) {\n      if (pattern.test(input)) {\n        console.warn(`ðŸš¨ SQL injection attempt detected in field '${fieldName}': ${input.substring(0, 100)}`);\n        return {\n          valid: false,\n          error: 'Invalid input detected',\n          risk: 'HIGH',\n          pattern: pattern.toString(),\n          field: fieldName\n        };\n      }\n    }\n\n    // Basic sanitization\n    const sanitized = input\n      .replace(/[\\x00-\\x1F\\x7F]/g, '') // Remove control characters\n      .trim();\n\n    return { valid: true, sanitized };\n  }\n\n  /**\n   * Validate field names for dynamic queries\n   */\n  validateFieldName(fieldName, allowedFields = this.allowedUserFields) {\n    if (!fieldName || typeof fieldName !== 'string') {\n      return false;\n    }\n\n    // Must be in whitelist\n    if (!allowedFields.has(fieldName)) {\n      console.warn(`ðŸš¨ Unauthorized field access attempt: ${fieldName}`);\n      return false;\n    }\n\n    // Additional pattern validation\n    if (!/^[a-z_][a-z0-9_]*$/.test(fieldName)) {\n      console.warn(`ðŸš¨ Invalid field name pattern: ${fieldName}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate API provider names\n   */\n  validateProvider(provider) {\n    if (!provider || typeof provider !== 'string') {\n      return false;\n    }\n\n    return this.allowedProviders.has(provider.toLowerCase());\n  }\n\n  /**\n   * Validate stock symbols\n   */\n  validateSymbol(symbol) {\n    if (!symbol || typeof symbol !== 'string') {\n      return false;\n    }\n\n    return this.allowedSymbolPattern.test(symbol.toUpperCase());\n  }\n\n  /**\n   * Sanitize environment variable usage\n   */\n  sanitizeEnvVar(varName, value) {\n    // Validate environment variable name\n    if (!/^[A-Z_][A-Z0-9_]*$/.test(varName)) {\n      throw new Error(`Invalid environment variable name: ${varName}`);\n    }\n\n    // Sanitize value based on expected type\n    if (varName.includes('PASSWORD') || varName.includes('SECRET') || varName.includes('KEY')) {\n      // Never log sensitive values\n      return '[REDACTED]';\n    }\n\n    // Basic sanitization for non-sensitive values\n    if (typeof value === 'string') {\n      return value.replace(/[\\x00-\\x1F\\x7F]/g, '').trim();\n    }\n\n    return value;\n  }\n\n  /**\n   * Create secure parameterized query builder\n   */\n  buildSecureQuery(baseQuery, conditions = {}, allowedFields = null) {\n    const params = [];\n    const whereClause = [];\n    let paramIndex = 1;\n\n    // Use provided allowed fields or default user fields\n    const validFields = allowedFields || this.allowedUserFields;\n\n    for (const [field, value] of Object.entries(conditions)) {\n      // Validate field name\n      if (!this.validateFieldName(field, validFields)) {\n        throw new Error(`Invalid field name: ${field}`);\n      }\n\n      // Validate field value\n      const validation = this.validateInput(String(value), field);\n      if (!validation.valid) {\n        throw new Error(`Invalid value for field ${field}: ${validation.error}`);\n      }\n\n      whereClause.push(`${field} = $${paramIndex}`);\n      params.push(validation.sanitized);\n      paramIndex++;\n    }\n\n    // Construct final query\n    let finalQuery = baseQuery;\n    if (whereClause.length > 0) {\n      if (baseQuery.toLowerCase().includes('where')) {\n        finalQuery += ` AND ${whereClause.join(' AND ')}`;\n      } else {\n        finalQuery += ` WHERE ${whereClause.join(' AND ')}`;\n      }\n    }\n\n    return { query: finalQuery, params };\n  }\n\n  /**\n   * Middleware function for Express\n   */\n  middleware() {\n    return (req, res, next) => {\n      // Validate all request parameters\n      this.validateRequestParams(req);\n      \n      // Add security methods to request\n      req.sqlSecurity = {\n        validateInput: this.validateInput.bind(this),\n        validateFieldName: this.validateFieldName.bind(this),\n        validateProvider: this.validateProvider.bind(this),\n        validateSymbol: this.validateSymbol.bind(this),\n        buildSecureQuery: this.buildSecureQuery.bind(this)\n      };\n\n      next();\n    };\n  }\n\n  /**\n   * Validate all request parameters\n   */\n  validateRequestParams(req) {\n    const validateObject = (obj, path = '') => {\n      for (const [key, value] of Object.entries(obj)) {\n        const fullPath = path ? `${path}.${key}` : key;\n        \n        if (typeof value === 'string') {\n          const validation = this.validateInput(value, fullPath);\n          if (!validation.valid) {\n            // Log security event\n            console.warn(`ðŸš¨ SQL injection attempt in ${fullPath}:`, {\n              ip: req.ip,\n              userAgent: req.headers['user-agent'],\n              path: req.path,\n              field: fullPath,\n              pattern: validation.pattern,\n              risk: validation.risk\n            });\n            \n            throw new Error('Invalid input detected');\n          }\n        } else if (typeof value === 'object' && value !== null) {\n          validateObject(value, fullPath);\n        }\n      }\n    };\n\n    // Validate query parameters\n    if (req.query && Object.keys(req.query).length > 0) {\n      validateObject(req.query, 'query');\n    }\n\n    // Validate body parameters\n    if (req.body && Object.keys(req.body).length > 0) {\n      validateObject(req.body, 'body');\n    }\n\n    // Validate route parameters\n    if (req.params && Object.keys(req.params).length > 0) {\n      validateObject(req.params, 'params');\n    }\n  }\n\n  /**\n   * Log security events\n   */\n  logSecurityEvent(event) {\n    const securityLog = {\n      timestamp: new Date().toISOString(),\n      type: 'SQL_INJECTION_ATTEMPT',\n      severity: event.risk || 'MEDIUM',\n      details: event,\n      source: 'SQLInjectionProtection'\n    };\n\n    console.warn('ðŸš¨ SECURITY EVENT:', JSON.stringify(securityLog));\n    \n    // In production, also send to security monitoring system\n    // securityMonitor.alert(securityLog);\n  }\n}\n\nmodule.exports = SQLInjectionProtection;"],"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","ignoreList":[]}