0f15896c379078b1793a830ede3b0416
/* istanbul ignore next */
function cov_2qy8r0sm7f() {
  var path = "/home/stocks/algo/webapp/lambda/utils/circuitBreakerReset.js";
  var hash = "2fcf596b55d06c9433fd24e39fc3fde55eaaa5c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/utils/circuitBreakerReset.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 48
        }
      },
      "1": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 54
        }
      },
      "2": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "3": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "4": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "5": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "6": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 22,
          column: 19
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "8": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "9": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "10": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 65
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "12": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 91
        }
      },
      "13": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 27
        }
      },
      "14": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "15": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "16": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 32
        }
      },
      "17": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "18": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "19": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "20": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 85
        }
      },
      "21": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 50,
          column: 4
        }
      },
      "22": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 57,
          column: 67
        }
      },
      "23": {
        start: {
          line: 59,
          column: 18
        },
        end: {
          line: 59,
          column: 63
        }
      },
      "24": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 64,
          column: 3
        }
      },
      "25": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 65
        }
      },
      "26": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 40
        }
      },
      "27": {
        start: {
          line: 66,
          column: 19
        },
        end: {
          line: 66,
          column: 32
        }
      },
      "28": {
        start: {
          line: 67,
          column: 22
        },
        end: {
          line: 67,
          column: 38
        }
      },
      "29": {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "30": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 30
        }
      },
      "31": {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 27
        }
      },
      "32": {
        start: {
          line: 72,
          column: 2
        },
        end: {
          line: 72,
          column: 28
        }
      },
      "33": {
        start: {
          line: 74,
          column: 2
        },
        end: {
          line: 74,
          column: 120
        }
      },
      "34": {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 84,
          column: 4
        }
      },
      "35": {
        start: {
          line: 91,
          column: 17
        },
        end: {
          line: 91,
          column: 56
        }
      },
      "36": {
        start: {
          line: 92,
          column: 22
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "37": {
        start: {
          line: 94,
          column: 17
        },
        end: {
          line: 103,
          column: 3
        }
      },
      "38": {
        start: {
          line: 105,
          column: 2
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "39": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "40": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 129,
          column: 5
        }
      },
      "41": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 25
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "43": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "45": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "46": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 26
        }
      },
      "47": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "48": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "49": {
        start: {
          line: 133,
          column: 2
        },
        end: {
          line: 135,
          column: 3
        }
      },
      "50": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 95
        }
      },
      "51": {
        start: {
          line: 137,
          column: 2
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "52": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 84
        }
      },
      "53": {
        start: {
          line: 141,
          column: 2
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "54": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 142,
          column: 68
        }
      },
      "55": {
        start: {
          line: 145,
          column: 2
        },
        end: {
          line: 145,
          column: 16
        }
      },
      "56": {
        start: {
          line: 152,
          column: 2
        },
        end: {
          line: 152,
          column: 85
        }
      },
      "57": {
        start: {
          line: 154,
          column: 2
        },
        end: {
          line: 204,
          column: 3
        }
      },
      "58": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 156,
          column: 42
        }
      },
      "59": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 44
        }
      },
      "60": {
        start: {
          line: 160,
          column: 21
        },
        end: {
          line: 160,
          column: 42
        }
      },
      "61": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 163,
          column: 55
        }
      },
      "62": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 164,
          column: 53
        }
      },
      "63": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "64": {
        start: {
          line: 167,
          column: 6
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "65": {
        start: {
          line: 168,
          column: 6
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "66": {
        start: {
          line: 169,
          column: 6
        },
        end: {
          line: 169,
          column: 54
        }
      },
      "67": {
        start: {
          line: 171,
          column: 6
        },
        end: {
          line: 175,
          column: 8
        }
      },
      "68": {
        start: {
          line: 177,
          column: 6
        },
        end: {
          line: 177,
          column: 75
        }
      },
      "69": {
        start: {
          line: 178,
          column: 6
        },
        end: {
          line: 182,
          column: 8
        }
      },
      "70": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 186,
          column: 72
        }
      },
      "71": {
        start: {
          line: 189,
          column: 19
        },
        end: {
          line: 189,
          column: 44
        }
      },
      "72": {
        start: {
          line: 190,
          column: 23
        },
        end: {
          line: 192,
          column: 5
        }
      },
      "73": {
        start: {
          line: 191,
          column: 6
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "74": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "75": {
        start: {
          line: 195,
          column: 6
        },
        end: {
          line: 195,
          column: 79
        }
      },
      "76": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 203,
          column: 6
        }
      },
      "77": {
        start: {
          line: 211,
          column: 2
        },
        end: {
          line: 211,
          column: 70
        }
      },
      "78": {
        start: {
          line: 213,
          column: 19
        },
        end: {
          line: 217,
          column: 3
        }
      },
      "79": {
        start: {
          line: 219,
          column: 2
        },
        end: {
          line: 295,
          column: 3
        }
      },
      "80": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "81": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 222,
          column: 49
        }
      },
      "82": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 227,
          column: 7
        }
      },
      "83": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 230,
          column: 68
        }
      },
      "84": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "85": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 44
        }
      },
      "86": {
        start: {
          line: 233,
          column: 6
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "87": {
        start: {
          line: 234,
          column: 6
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "88": {
        start: {
          line: 240,
          column: 6
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "89": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 248,
          column: 63
        }
      },
      "90": {
        start: {
          line: 249,
          column: 31
        },
        end: {
          line: 249,
          column: 63
        }
      },
      "91": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 254,
          column: 7
        }
      },
      "92": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "93": {
        start: {
          line: 258,
          column: 6
        },
        end: {
          line: 258,
          column: 67
        }
      },
      "94": {
        start: {
          line: 259,
          column: 6
        },
        end: {
          line: 273,
          column: 7
        }
      },
      "95": {
        start: {
          line: 260,
          column: 25
        },
        end: {
          line: 260,
          column: 46
        }
      },
      "96": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 41
        }
      },
      "97": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "98": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "99": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 66
        }
      },
      "100": {
        start: {
          line: 276,
          column: 52
        },
        end: {
          line: 276,
          column: 64
        }
      },
      "101": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 282,
          column: 5
        }
      },
      "102": {
        start: {
          line: 279,
          column: 6
        },
        end: {
          line: 279,
          column: 74
        }
      },
      "103": {
        start: {
          line: 281,
          column: 6
        },
        end: {
          line: 281,
          column: 75
        }
      },
      "104": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 284,
          column: 20
        }
      },
      "105": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 74
        }
      },
      "106": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 292,
          column: 7
        }
      },
      "107": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 294,
          column: 20
        }
      },
      "108": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 304,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "resetAllCircuitBreakers",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 32
          }
        },
        loc: {
          start: {
            line: 11,
            column: 35
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 25,
            column: 23
          }
        },
        loc: {
          start: {
            line: 25,
            column: 36
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 25
      },
      "2": {
        name: "resetCircuitBreaker",
        decl: {
          start: {
            line: 56,
            column: 9
          },
          end: {
            line: 56,
            column: 28
          }
        },
        loc: {
          start: {
            line: 56,
            column: 41
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 56
      },
      "3": {
        name: "getCircuitBreakerStatus",
        decl: {
          start: {
            line: 90,
            column: 9
          },
          end: {
            line: 90,
            column: 32
          }
        },
        loc: {
          start: {
            line: 90,
            column: 35
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 23
          }
        },
        loc: {
          start: {
            line: 105,
            column: 36
          },
          end: {
            line: 130,
            column: 3
          }
        },
        line: 105
      },
      "5": {
        name: "testDatabaseConnectivity",
        decl: {
          start: {
            line: 151,
            column: 15
          },
          end: {
            line: 151,
            column: 39
          }
        },
        loc: {
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 205,
            column: 1
          }
        },
        line: 151
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 190,
            column: 52
          },
          end: {
            line: 190,
            column: 53
          }
        },
        loc: {
          start: {
            line: 191,
            column: 6
          },
          end: {
            line: 191,
            column: 39
          }
        },
        line: 191
      },
      "7": {
        name: "emergencyDatabaseRecovery",
        decl: {
          start: {
            line: 210,
            column: 15
          },
          end: {
            line: 210,
            column: 40
          }
        },
        loc: {
          start: {
            line: 210,
            column: 43
          },
          end: {
            line: 296,
            column: 1
          }
        },
        line: 210
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 276,
            column: 44
          },
          end: {
            line: 276,
            column: 45
          }
        },
        loc: {
          start: {
            line: 276,
            column: 52
          },
          end: {
            line: 276,
            column: 64
          }
        },
        line: 276
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 15
          }
        }, {
          start: {
            line: 27,
            column: 19
          },
          end: {
            line: 27,
            column: 45
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 64,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 64,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 111,
            column: 14
          }
        }, {
          start: {
            line: 112,
            column: 6
          },
          end: {
            line: 120,
            column: 14
          }
        }, {
          start: {
            line: 121,
            column: 6
          },
          end: {
            line: 128,
            column: 14
          }
        }],
        line: 108
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 2
          },
          end: {
            line: 135,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 2
          },
          end: {
            line: 135,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 2
          },
          end: {
            line: 139,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 2
          },
          end: {
            line: 139,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 2
          },
          end: {
            line: 143,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 2
          },
          end: {
            line: 143,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        }, {
          start: {
            line: 176,
            column: 11
          },
          end: {
            line: 183,
            column: 5
          }
        }],
        line: 166
      },
      "9": {
        loc: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "10": {
        loc: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "11": {
        loc: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        }, {
          start: {
            line: 280,
            column: 11
          },
          end: {
            line: 282,
            column: 5
          }
        }],
        line: 278
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2fcf596b55d06c9433fd24e39fc3fde55eaaa5c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qy8r0sm7f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qy8r0sm7f();
/**
 * Circuit Breaker Reset Utility
 * Provides functionality to reset circuit breakers and emergency database recovery
 */

const timeoutHelper =
/* istanbul ignore next */
(cov_2qy8r0sm7f().s[0]++, require('./timeoutHelper'));

/**
 * Reset all circuit breakers to allow immediate retry after configuration fixes
 */
function resetAllCircuitBreakers() {
  /* istanbul ignore next */
  cov_2qy8r0sm7f().f[0]++;
  cov_2qy8r0sm7f().s[1]++;
  console.log('🔄 Resetting all circuit breakers...');
  const status =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[2]++, timeoutHelper.getCircuitBreakerStatus());
  const serviceKeys =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[3]++, Object.keys(status));
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[4]++;
  if (serviceKeys.length === 0) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().b[0][0]++;
    cov_2qy8r0sm7f().s[5]++;
    console.log('✅ No circuit breakers found to reset');
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[6]++;
    return {
      reset: 0,
      services: []
    };
  } else
  /* istanbul ignore next */
  {
    cov_2qy8r0sm7f().b[0][1]++;
  }
  let resetCount =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[7]++, 0);
  const resetServices =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[8]++, []);
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[9]++;
  serviceKeys.forEach(serviceKey => {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().f[1]++;
    const breaker =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[10]++, timeoutHelper.circuitBreakers.get(serviceKey));
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().b[2][0]++, breaker) &&
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().b[2][1]++, breaker.state !== 'closed')) {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[1][0]++;
      cov_2qy8r0sm7f().s[12]++;
      console.log(`🔄 Resetting circuit breaker for ${serviceKey} (was ${breaker.state})`);
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[13]++;
      breaker.failures = 0;
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[14]++;
      breaker.lastFailureTime = 0;
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[15]++;
      breaker.state = 'closed';
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[16]++;
      breaker.halfOpenCalls = 0;
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[17]++;
      resetCount++;
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[18]++;
      resetServices.push(serviceKey);
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[19]++;
      console.log(`✅ Circuit breaker for ${serviceKey} reset to closed`);
    } else
    /* istanbul ignore next */
    {
      cov_2qy8r0sm7f().b[1][1]++;
    }
  });
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[20]++;
  console.log(`✅ Reset ${resetCount} circuit breakers: ${resetServices.join(', ')}`);
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[21]++;
  return {
    success: true,
    reset: resetCount,
    services: resetServices,
    message: 'Circuit breakers reset successfully',
    timestamp: new Date().toISOString()
  };
}

/**
 * Reset specific circuit breaker
 */
function resetCircuitBreaker(serviceKey) {
  /* istanbul ignore next */
  cov_2qy8r0sm7f().f[2]++;
  cov_2qy8r0sm7f().s[22]++;
  console.log(`🔄 Resetting circuit breaker for ${serviceKey}...`);
  const breaker =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[23]++, timeoutHelper.circuitBreakers.get(serviceKey));
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[24]++;
  if (!breaker) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().b[3][0]++;
    cov_2qy8r0sm7f().s[25]++;
    console.log(`ℹ️ No circuit breaker found for ${serviceKey}`);
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[26]++;
    return {
      found: false,
      serviceKey
    };
  } else
  /* istanbul ignore next */
  {
    cov_2qy8r0sm7f().b[3][1]++;
  }
  const oldState =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[27]++, breaker.state);
  const oldFailures =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[28]++, breaker.failures);
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[29]++;
  breaker.failures = 0;
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[30]++;
  breaker.lastFailureTime = 0;
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[31]++;
  breaker.state = 'closed';
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[32]++;
  breaker.halfOpenCalls = 0;
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[33]++;
  console.log(`✅ Circuit breaker for ${serviceKey} reset: ${oldState} (${oldFailures} failures) → closed (0 failures)`);
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[34]++;
  return {
    success: true,
    found: true,
    serviceKey,
    oldState,
    oldFailures,
    newState: 'closed',
    timestamp: new Date().toISOString()
  };
}

/**
 * Get circuit breaker status with health recommendations
 */
function getCircuitBreakerStatus() {
  /* istanbul ignore next */
  cov_2qy8r0sm7f().f[3]++;
  const status =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[35]++, timeoutHelper.getCircuitBreakerStatus());
  const serviceKeys =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[36]++, Object.keys(status));
  const health =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[37]++, {
    totalBreakers: serviceKeys.length,
    healthy: 0,
    open: 0,
    halfOpen: 0,
    needsAttention: [],
    recommendations: [],
    circuitBreakers: status,
    timestamp: new Date().toISOString()
  });
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[38]++;
  serviceKeys.forEach(serviceKey => {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().f[4]++;
    const breaker =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[39]++, status[serviceKey]);
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[40]++;
    switch (breaker.state) {
      case 'closed':
        /* istanbul ignore next */
        cov_2qy8r0sm7f().b[4][0]++;
        cov_2qy8r0sm7f().s[41]++;
        health.healthy++;
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[42]++;
        break;
      case 'open':
        /* istanbul ignore next */
        cov_2qy8r0sm7f().b[4][1]++;
        cov_2qy8r0sm7f().s[43]++;
        health.open++;
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[44]++;
        health.needsAttention.push({
          service: serviceKey,
          state: 'open',
          failures: breaker.failures,
          openFor: Math.round(breaker.timeSinceLastFailure / 1000) + ' seconds'
        });
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[45]++;
        break;
      case 'half-open':
        /* istanbul ignore next */
        cov_2qy8r0sm7f().b[4][2]++;
        cov_2qy8r0sm7f().s[46]++;
        health.halfOpen++;
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[47]++;
        health.needsAttention.push({
          service: serviceKey,
          state: 'half-open',
          failures: breaker.failures
        });
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[48]++;
        break;
    }
  });

  // Generate recommendations
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[49]++;
  if (health.open > 0) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().b[5][0]++;
    cov_2qy8r0sm7f().s[50]++;
    health.recommendations.push('Reset open circuit breakers to restore service availability');
  } else
  /* istanbul ignore next */
  {
    cov_2qy8r0sm7f().b[5][1]++;
  }
  cov_2qy8r0sm7f().s[51]++;
  if (health.halfOpen > 0) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().b[6][0]++;
    cov_2qy8r0sm7f().s[52]++;
    health.recommendations.push('Monitor half-open circuit breakers for stability');
  } else
  /* istanbul ignore next */
  {
    cov_2qy8r0sm7f().b[6][1]++;
  }
  cov_2qy8r0sm7f().s[53]++;
  if (health.needsAttention.length === 0) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().b[7][0]++;
    cov_2qy8r0sm7f().s[54]++;
    health.recommendations.push('All circuit breakers are healthy');
  } else
  /* istanbul ignore next */
  {
    cov_2qy8r0sm7f().b[7][1]++;
  }
  cov_2qy8r0sm7f().s[55]++;
  return health;
}

/**
 * Test database connectivity with circuit breaker management
 */
async function testDatabaseConnectivity() {
  /* istanbul ignore next */
  cov_2qy8r0sm7f().f[5]++;
  cov_2qy8r0sm7f().s[56]++;
  console.log('🧪 Testing database connectivity with circuit breaker management...');
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[57]++;
  try {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[58]++;
    // Reset database circuit breakers first
    resetCircuitBreaker('database-query');
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[59]++;
    resetCircuitBreaker('database-connect');

    // Import database service
    const database =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[60]++, require('./database'));

    // Test basic connectivity
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[61]++;
    console.log('🔍 Testing database health check...');
    const healthResult =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[62]++, await database.healthCheck());
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[63]++;
    if (healthResult.status === 'healthy') {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[8][0]++;
      cov_2qy8r0sm7f().s[64]++;
      console.log('✅ Database connectivity test passed');
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[65]++;
      console.log('✅ Database:', healthResult.database);
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[66]++;
      console.log('✅ Version:', healthResult.version);
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[67]++;
      return {
        success: true,
        health: healthResult,
        message: 'Database connectivity restored'
      };
    } else {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[8][1]++;
      cov_2qy8r0sm7f().s[68]++;
      console.error('❌ Database health check failed:', healthResult.error);
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[69]++;
      return {
        success: false,
        error: healthResult.error,
        message: 'Database connectivity test failed'
      };
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[70]++;
    console.error('❌ Database connectivity test error:', error.message);

    // Check if it's a circuit breaker issue
    const health =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[71]++, getCircuitBreakerStatus());
    const dbBreakers =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[72]++, health.needsAttention.filter(item => {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().f[6]++;
      cov_2qy8r0sm7f().s[73]++;
      return item.service.includes('database');
    }));
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[74]++;
    if (dbBreakers.length > 0) {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[9][0]++;
      cov_2qy8r0sm7f().s[75]++;
      console.error('❌ Database circuit breakers need attention:', dbBreakers);
    } else
    /* istanbul ignore next */
    {
      cov_2qy8r0sm7f().b[9][1]++;
    }
    cov_2qy8r0sm7f().s[76]++;
    return {
      success: false,
      error: error.message,
      circuitBreakerHealth: health,
      message: 'Database connectivity test failed with errors'
    };
  }
}

/**
 * Emergency database recovery procedure
 */
async function emergencyDatabaseRecovery() {
  /* istanbul ignore next */
  cov_2qy8r0sm7f().f[7]++;
  cov_2qy8r0sm7f().s[77]++;
  console.log('🚨 Starting emergency database recovery procedure...');
  const recovery =
  /* istanbul ignore next */
  (cov_2qy8r0sm7f().s[78]++, {
    steps: [],
    success: false,
    timestamp: new Date().toISOString()
  });
  /* istanbul ignore next */
  cov_2qy8r0sm7f().s[79]++;
  try {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[80]++;
    // Step 1: Reset all circuit breakers
    console.log('🔄 Step 1: Resetting all circuit breakers...');
    const resetResult =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[81]++, resetAllCircuitBreakers());
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[82]++;
    recovery.steps.push({
      step: 'reset_circuit_breakers',
      success: resetResult.success,
      result: resetResult
    });

    // Step 2: Clear database connection cache
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[83]++;
    console.log('🔄 Step 2: Clearing database connection cache...');
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[84]++;
    try {
      const database =
      /* istanbul ignore next */
      (cov_2qy8r0sm7f().s[85]++, require('./database'));
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[86]++;
      await database.closeDatabase();
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[87]++;
      recovery.steps.push({
        step: 'clear_database_cache',
        success: true,
        message: 'Database connections closed'
      });
    } catch (closeError) {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[88]++;
      recovery.steps.push({
        step: 'clear_database_cache',
        success: false,
        error: closeError.message
      });
    }

    // Step 3: Test connectivity
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[89]++;
    console.log('🔄 Step 3: Testing database connectivity...');
    const connectivityResult =
    /* istanbul ignore next */
    (cov_2qy8r0sm7f().s[90]++, await testDatabaseConnectivity());
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[91]++;
    recovery.steps.push({
      step: 'test_connectivity',
      success: connectivityResult.success,
      result: connectivityResult
    });

    // Step 4: Warm up connections if successful
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[92]++;
    if (connectivityResult.success) {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[10][0]++;
      cov_2qy8r0sm7f().s[93]++;
      console.log('🔄 Step 4: Warming up database connections...');
      /* istanbul ignore next */
      cov_2qy8r0sm7f().s[94]++;
      try {
        const database =
        /* istanbul ignore next */
        (cov_2qy8r0sm7f().s[95]++, require('./database'));
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[96]++;
        await database.warmConnections();
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[97]++;
        recovery.steps.push({
          step: 'warm_connections',
          success: true,
          message: 'Database connections warmed'
        });
      } catch (warmError) {
        /* istanbul ignore next */
        cov_2qy8r0sm7f().s[98]++;
        recovery.steps.push({
          step: 'warm_connections',
          success: false,
          error: warmError.message
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_2qy8r0sm7f().b[10][1]++;
    }
    cov_2qy8r0sm7f().s[99]++;
    recovery.success = recovery.steps.every(step => {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().f[8]++;
      cov_2qy8r0sm7f().s[100]++;
      return step.success;
    });
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[101]++;
    if (recovery.success) {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[11][0]++;
      cov_2qy8r0sm7f().s[102]++;
      console.log('✅ Emergency database recovery completed successfully');
    } else {
      /* istanbul ignore next */
      cov_2qy8r0sm7f().b[11][1]++;
      cov_2qy8r0sm7f().s[103]++;
      console.error('❌ Emergency database recovery completed with errors');
    }
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[104]++;
    return recovery;
  } catch (error) {
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[105]++;
    console.error('❌ Emergency database recovery failed:', error.message);
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[106]++;
    recovery.steps.push({
      step: 'recovery_procedure',
      success: false,
      error: error.message
    });
    /* istanbul ignore next */
    cov_2qy8r0sm7f().s[107]++;
    return recovery;
  }
}
/* istanbul ignore next */
cov_2qy8r0sm7f().s[108]++;
module.exports = {
  resetAllCircuitBreakers,
  resetCircuitBreaker,
  getCircuitBreakerStatus,
  testDatabaseConnectivity,
  emergencyDatabaseRecovery
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,