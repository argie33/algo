{"version":3,"names":["cov_2qy8r0sm7f","actualCoverage","timeoutHelper","s","require","resetAllCircuitBreakers","f","console","log","status","getCircuitBreakerStatus","serviceKeys","Object","keys","length","b","reset","services","resetCount","resetServices","forEach","serviceKey","breaker","circuitBreakers","get","state","failures","lastFailureTime","halfOpenCalls","push","join","success","message","timestamp","Date","toISOString","resetCircuitBreaker","found","oldState","oldFailures","newState","health","totalBreakers","healthy","open","halfOpen","needsAttention","recommendations","service","openFor","Math","round","timeSinceLastFailure","testDatabaseConnectivity","database","healthResult","healthCheck","version","error","dbBreakers","filter","item","includes","circuitBreakerHealth","emergencyDatabaseRecovery","recovery","steps","resetResult","step","result","closeDatabase","closeError","connectivityResult","warmConnections","warmError","every","module","exports"],"sources":["circuitBreakerReset.js"],"sourcesContent":["/**\n * Circuit Breaker Reset Utility\n * Provides functionality to reset circuit breakers and emergency database recovery\n */\n\nconst timeoutHelper = require('./timeoutHelper');\n\n/**\n * Reset all circuit breakers to allow immediate retry after configuration fixes\n */\nfunction resetAllCircuitBreakers() {\n  console.log('üîÑ Resetting all circuit breakers...');\n  \n  const status = timeoutHelper.getCircuitBreakerStatus();\n  const serviceKeys = Object.keys(status);\n  \n  if (serviceKeys.length === 0) {\n    console.log('‚úÖ No circuit breakers found to reset');\n    return { reset: 0, services: [] };\n  }\n  \n  let resetCount = 0;\n  const resetServices = [];\n  \n  serviceKeys.forEach(serviceKey => {\n    const breaker = timeoutHelper.circuitBreakers.get(serviceKey);\n    if (breaker && breaker.state !== 'closed') {\n      console.log(`üîÑ Resetting circuit breaker for ${serviceKey} (was ${breaker.state})`);\n      \n      breaker.failures = 0;\n      breaker.lastFailureTime = 0;\n      breaker.state = 'closed';\n      breaker.halfOpenCalls = 0;\n      \n      resetCount++;\n      resetServices.push(serviceKey);\n      \n      console.log(`‚úÖ Circuit breaker for ${serviceKey} reset to closed`);\n    }\n  });\n  \n  console.log(`‚úÖ Reset ${resetCount} circuit breakers: ${resetServices.join(', ')}`);\n  \n  return {\n    success: true,\n    reset: resetCount,\n    services: resetServices,\n    message: 'Circuit breakers reset successfully',\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Reset specific circuit breaker\n */\nfunction resetCircuitBreaker(serviceKey) {\n  console.log(`üîÑ Resetting circuit breaker for ${serviceKey}...`);\n  \n  const breaker = timeoutHelper.circuitBreakers.get(serviceKey);\n  \n  if (!breaker) {\n    console.log(`‚ÑπÔ∏è No circuit breaker found for ${serviceKey}`);\n    return { found: false, serviceKey };\n  }\n  \n  const oldState = breaker.state;\n  const oldFailures = breaker.failures;\n  \n  breaker.failures = 0;\n  breaker.lastFailureTime = 0;\n  breaker.state = 'closed';\n  breaker.halfOpenCalls = 0;\n  \n  console.log(`‚úÖ Circuit breaker for ${serviceKey} reset: ${oldState} (${oldFailures} failures) ‚Üí closed (0 failures)`);\n  \n  return {\n    success: true,\n    found: true,\n    serviceKey,\n    oldState,\n    oldFailures,\n    newState: 'closed',\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Get circuit breaker status with health recommendations\n */\nfunction getCircuitBreakerStatus() {\n  const status = timeoutHelper.getCircuitBreakerStatus();\n  const serviceKeys = Object.keys(status);\n  \n  const health = {\n    totalBreakers: serviceKeys.length,\n    healthy: 0,\n    open: 0,\n    halfOpen: 0,\n    needsAttention: [],\n    recommendations: [],\n    circuitBreakers: status,\n    timestamp: new Date().toISOString()\n  };\n  \n  serviceKeys.forEach(serviceKey => {\n    const breaker = status[serviceKey];\n    \n    switch (breaker.state) {\n      case 'closed':\n        health.healthy++;\n        break;\n      case 'open':\n        health.open++;\n        health.needsAttention.push({\n          service: serviceKey,\n          state: 'open',\n          failures: breaker.failures,\n          openFor: Math.round(breaker.timeSinceLastFailure / 1000) + ' seconds'\n        });\n        break;\n      case 'half-open':\n        health.halfOpen++;\n        health.needsAttention.push({\n          service: serviceKey,\n          state: 'half-open',\n          failures: breaker.failures\n        });\n        break;\n    }\n  });\n  \n  // Generate recommendations\n  if (health.open > 0) {\n    health.recommendations.push('Reset open circuit breakers to restore service availability');\n  }\n  \n  if (health.halfOpen > 0) {\n    health.recommendations.push('Monitor half-open circuit breakers for stability');\n  }\n  \n  if (health.needsAttention.length === 0) {\n    health.recommendations.push('All circuit breakers are healthy');\n  }\n  \n  return health;\n}\n\n/**\n * Test database connectivity with circuit breaker management\n */\nasync function testDatabaseConnectivity() {\n  console.log('üß™ Testing database connectivity with circuit breaker management...');\n  \n  try {\n    // Reset database circuit breakers first\n    resetCircuitBreaker('database-query');\n    resetCircuitBreaker('database-connect');\n    \n    // Import database service\n    const database = require('./database');\n    \n    // Test basic connectivity\n    console.log('üîç Testing database health check...');\n    const healthResult = await database.healthCheck();\n    \n    if (healthResult.status === 'healthy') {\n      console.log('‚úÖ Database connectivity test passed');\n      console.log('‚úÖ Database:', healthResult.database);\n      console.log('‚úÖ Version:', healthResult.version);\n      \n      return {\n        success: true,\n        health: healthResult,\n        message: 'Database connectivity restored'\n      };\n    } else {\n      console.error('‚ùå Database health check failed:', healthResult.error);\n      return {\n        success: false,\n        error: healthResult.error,\n        message: 'Database connectivity test failed'\n      };\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Database connectivity test error:', error.message);\n    \n    // Check if it's a circuit breaker issue\n    const health = getCircuitBreakerStatus();\n    const dbBreakers = health.needsAttention.filter(item => \n      item.service.includes('database')\n    );\n    \n    if (dbBreakers.length > 0) {\n      console.error('‚ùå Database circuit breakers need attention:', dbBreakers);\n    }\n    \n    return {\n      success: false,\n      error: error.message,\n      circuitBreakerHealth: health,\n      message: 'Database connectivity test failed with errors'\n    };\n  }\n}\n\n/**\n * Emergency database recovery procedure\n */\nasync function emergencyDatabaseRecovery() {\n  console.log('üö® Starting emergency database recovery procedure...');\n  \n  const recovery = {\n    steps: [],\n    success: false,\n    timestamp: new Date().toISOString()\n  };\n  \n  try {\n    // Step 1: Reset all circuit breakers\n    console.log('üîÑ Step 1: Resetting all circuit breakers...');\n    const resetResult = resetAllCircuitBreakers();\n    recovery.steps.push({\n      step: 'reset_circuit_breakers',\n      success: resetResult.success,\n      result: resetResult\n    });\n    \n    // Step 2: Clear database connection cache\n    console.log('üîÑ Step 2: Clearing database connection cache...');\n    try {\n      const database = require('./database');\n      await database.closeDatabase();\n      recovery.steps.push({\n        step: 'clear_database_cache',\n        success: true,\n        message: 'Database connections closed'\n      });\n    } catch (closeError) {\n      recovery.steps.push({\n        step: 'clear_database_cache',\n        success: false,\n        error: closeError.message\n      });\n    }\n    \n    // Step 3: Test connectivity\n    console.log('üîÑ Step 3: Testing database connectivity...');\n    const connectivityResult = await testDatabaseConnectivity();\n    recovery.steps.push({\n      step: 'test_connectivity',\n      success: connectivityResult.success,\n      result: connectivityResult\n    });\n    \n    // Step 4: Warm up connections if successful\n    if (connectivityResult.success) {\n      console.log('üîÑ Step 4: Warming up database connections...');\n      try {\n        const database = require('./database');\n        await database.warmConnections();\n        recovery.steps.push({\n          step: 'warm_connections',\n          success: true,\n          message: 'Database connections warmed'\n        });\n      } catch (warmError) {\n        recovery.steps.push({\n          step: 'warm_connections',\n          success: false,\n          error: warmError.message\n        });\n      }\n    }\n    \n    recovery.success = recovery.steps.every(step => step.success);\n    \n    if (recovery.success) {\n      console.log('‚úÖ Emergency database recovery completed successfully');\n    } else {\n      console.error('‚ùå Emergency database recovery completed with errors');\n    }\n    \n    return recovery;\n    \n  } catch (error) {\n    console.error('‚ùå Emergency database recovery failed:', error.message);\n    recovery.steps.push({\n      step: 'recovery_procedure',\n      success: false,\n      error: error.message\n    });\n    \n    return recovery;\n  }\n}\n\nmodule.exports = {\n  resetAllCircuitBreakers,\n  resetCircuitBreaker,\n  getCircuitBreakerStatus,\n  testDatabaseConnectivity,\n  emergencyDatabaseRecovery\n};"],"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","ignoreList":[]}