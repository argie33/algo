{"version":3,"names":["cov_1dtyamtylq","actualCoverage","express","s","require","router","Router","query","StructuredLogger","logger","CryptoSignalsEngine","constructor","f","generateSignals","symbol","timeframe","b","startTime","Date","now","priceData","getPriceData","length","Error","indicators","sma","calculateSMA","ema","calculateEMA","rsi","calculateRSI","macd","calculateMACD","bollinger","calculateBollingerBands","stochastic","calculateStochastic","williams","calculateWilliamsR","volume","calculateVolumeIndicators","atr","calculateATR","signals","trend","analyzeTrend","momentum","analyzeMomentum","volatility","analyzeVolatility","analyzeVolume","support_resistance","identifySupportResistance","patterns","identifyPatterns","overallSignal","calculateOverallSignal","recommendations","generateRecommendations","performance","data_points","timestamp","toISOString","error","limit","result","rows","reverse","generateMockPriceData","periods","basePrice","data","price","i","change","Math","random","high","low","push","open_price","high_price","low_price","close_price","forEach","period","sum","slice","reduce","acc","item","parseFloat","multiplier","close","gains","losses","abs","avgGain","gain","avgLoss","loss","rs","values","current","signal","fastPeriod","slowPeriod","signalPeriod","ema12","ema26","macdLine","minLength","min","macdData","map","value","index","signalLine","histogram","deviation","prices","d","bands","upper","middle","lower","mean","variance","pow","stdDev","sqrt","currentPrice","currentUpper","currentLower","position","bandwidth","smoothK","smoothD","k","highestHigh","max","lowestLow","currentClose","smoothedK","val","williamsR","wr","volumes","volumeSMA","avgVolume","vol","obv","prevOBV","ratio","trueRanges","prevClose","tr1","tr2","tr3","tr","atrValues","percentage","sma20","sma50","sma200","trendScore","type","active","strength","direction","momentumScore","volatilityLevel","level","atr_percentage","bollinger_bandwidth","volumeRatio","obv_trend","highs","lows","recentHigh","recentLow","resistance","support","distance_to_resistance","distance_to_support","isAscending","every","isHeadAndShoulders","ascending_triangle","head_and_shoulders","patterns_detected","bullishSignals","bearishSignals","totalWeight","weights","Object","keys","category","weight","netSignal","signalStrength","confidence","score","action","reason","target_price","stop_loss","suggestion","signalsEngine","get","req","res","correlationId","params","info","correlation_id","signalData","toUpperCase","duration","signal_strength","json","success","metadata","generation_time_ms","duration_ms","status","error_code","symbols","split","trim","signalPromises","catch","message","results","Promise","all","successful","filter","r","failed","successful_count","failed_count","errors","summary","total_requested","module","exports"],"sources":["crypto-signals.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { query } = require('../utils/database');\nconst StructuredLogger = require('../utils/structuredLogger');\nconst logger = new StructuredLogger('crypto-signals');\n\n// Advanced Crypto Trading Signals Engine\nclass CryptoSignalsEngine {\n  constructor() {\n    this.logger = logger;\n  }\n\n  // Generate comprehensive trading signals for a crypto asset\n  async generateSignals(symbol, timeframe = '1h') {\n    const startTime = Date.now();\n    \n    try {\n      // Get historical price data\n      const priceData = await this.getPriceData(symbol, timeframe, 200);\n      \n      if (priceData.length < 50) {\n        throw new Error(`Insufficient price data for ${symbol}`);\n      }\n\n      // Calculate technical indicators\n      const indicators = {\n        sma: this.calculateSMA(priceData, [20, 50, 200]),\n        ema: this.calculateEMA(priceData, [12, 26]),\n        rsi: this.calculateRSI(priceData, 14),\n        macd: this.calculateMACD(priceData),\n        bollinger: this.calculateBollingerBands(priceData, 20, 2),\n        stochastic: this.calculateStochastic(priceData, 14),\n        williams: this.calculateWilliamsR(priceData, 14),\n        volume: this.calculateVolumeIndicators(priceData),\n        atr: this.calculateATR(priceData, 14)\n      };\n\n      // Generate trading signals\n      const signals = {\n        trend: this.analyzeTrend(indicators, priceData),\n        momentum: this.analyzeMomentum(indicators),\n        volatility: this.analyzeVolatility(indicators),\n        volume: this.analyzeVolume(indicators),\n        support_resistance: this.identifySupportResistance(priceData),\n        patterns: this.identifyPatterns(priceData)\n      };\n\n      // Calculate overall signal strength and direction\n      const overallSignal = this.calculateOverallSignal(signals);\n\n      // Generate specific trading recommendations\n      const recommendations = this.generateRecommendations(signals, overallSignal, priceData[priceData.length - 1]);\n\n      this.logger.performance('crypto_signals_generation', Date.now() - startTime, {\n        symbol,\n        timeframe,\n        data_points: priceData.length\n      });\n\n      return {\n        symbol,\n        timeframe,\n        indicators,\n        signals,\n        overallSignal,\n        recommendations,\n        timestamp: new Date().toISOString()\n      };\n\n    } catch (error) {\n      this.logger.error('Signal generation failed', error, { symbol, timeframe });\n      throw error;\n    }\n  }\n\n  // Get historical price data\n  async getPriceData(symbol, timeframe, limit) {\n    try {\n      const result = await query(`\n        SELECT \n          timestamp,\n          open_price,\n          high_price,\n          low_price,\n          close_price,\n          volume\n        FROM crypto_prices\n        WHERE symbol = $1 \n          AND interval_type = $2\n        ORDER BY timestamp DESC\n        LIMIT $3\n      `, [symbol, timeframe, limit]);\n\n      return result.rows.reverse(); // Return in chronological order\n    } catch (error) {\n      this.logger.error('Failed to get price data', error, { symbol, timeframe, limit });\n      \n      // Return mock data for demonstration\n      return this.generateMockPriceData(symbol, limit);\n    }\n  }\n\n  // Generate mock price data for demonstration\n  generateMockPriceData(symbol, periods) {\n    const basePrice = symbol === 'BTC' ? 45000 : symbol === 'ETH' ? 2800 : 100;\n    const data = [];\n    let price = basePrice;\n    \n    for (let i = 0; i < periods; i++) {\n      const change = (Math.random() - 0.5) * 0.05; // Â±2.5% random change\n      price = price * (1 + change);\n      \n      const high = price * (1 + Math.random() * 0.02);\n      const low = price * (1 - Math.random() * 0.02);\n      const volume = Math.random() * 1000000;\n      \n      data.push({\n        timestamp: new Date(Date.now() - (periods - i) * 3600000).toISOString(),\n        open_price: price,\n        high_price: high,\n        low_price: low,\n        close_price: price,\n        volume: volume\n      });\n    }\n    \n    return data;\n  }\n\n  // Technical Indicator Calculations\n\n  calculateSMA(data, periods) {\n    const sma = {};\n    \n    periods.forEach(period => {\n      sma[period] = [];\n      for (let i = period - 1; i < data.length; i++) {\n        const sum = data.slice(i - period + 1, i + 1)\n          .reduce((acc, item) => acc + parseFloat(item.close_price), 0);\n        sma[period].push(sum / period);\n      }\n      sma[period + '_current'] = sma[period][sma[period].length - 1];\n    });\n    \n    return sma;\n  }\n\n  calculateEMA(data, periods) {\n    const ema = {};\n    \n    periods.forEach(period => {\n      const multiplier = 2 / (period + 1);\n      ema[period] = [];\n      \n      // Start with SMA for first value\n      let sum = 0;\n      for (let i = 0; i < period; i++) {\n        sum += parseFloat(data[i].close_price);\n      }\n      ema[period][period - 1] = sum / period;\n      \n      // Calculate EMA for remaining values\n      for (let i = period; i < data.length; i++) {\n        const close = parseFloat(data[i].close_price);\n        ema[period][i] = (close - ema[period][i - 1]) * multiplier + ema[period][i - 1];\n      }\n      \n      ema[period + '_current'] = ema[period][ema[period].length - 1];\n    });\n    \n    return ema;\n  }\n\n  calculateRSI(data, period = 14) {\n    const gains = [];\n    const losses = [];\n    \n    for (let i = 1; i < data.length; i++) {\n      const change = parseFloat(data[i].close_price) - parseFloat(data[i - 1].close_price);\n      gains.push(change > 0 ? change : 0);\n      losses.push(change < 0 ? Math.abs(change) : 0);\n    }\n    \n    // Calculate initial averages\n    let avgGain = gains.slice(0, period).reduce((sum, gain) => sum + gain, 0) / period;\n    let avgLoss = losses.slice(0, period).reduce((sum, loss) => sum + loss, 0) / period;\n    \n    const rsi = [];\n    \n    for (let i = period; i < gains.length; i++) {\n      avgGain = (avgGain * (period - 1) + gains[i]) / period;\n      avgLoss = (avgLoss * (period - 1) + losses[i]) / period;\n      \n      const rs = avgGain / avgLoss;\n      rsi.push(100 - (100 / (1 + rs)));\n    }\n    \n    return {\n      values: rsi,\n      current: rsi[rsi.length - 1],\n      signal: rsi[rsi.length - 1] > 70 ? 'overbought' : rsi[rsi.length - 1] < 30 ? 'oversold' : 'neutral'\n    };\n  }\n\n  calculateMACD(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n    const ema12 = this.calculateEMA(data, [fastPeriod]);\n    const ema26 = this.calculateEMA(data, [slowPeriod]);\n    \n    const macdLine = [];\n    const minLength = Math.min(ema12[fastPeriod].length, ema26[slowPeriod].length);\n    \n    for (let i = 0; i < minLength; i++) {\n      macdLine.push(ema12[fastPeriod][i] - ema26[slowPeriod][i]);\n    }\n    \n    // Calculate signal line (EMA of MACD line)\n    const macdData = macdLine.map((value, index) => ({ close_price: value }));\n    const signalLine = this.calculateEMA(macdData, [signalPeriod]);\n    \n    const histogram = [];\n    for (let i = 0; i < signalLine[signalPeriod].length; i++) {\n      histogram.push(macdLine[i + (macdLine.length - signalLine[signalPeriod].length)] - signalLine[signalPeriod][i]);\n    }\n    \n    return {\n      macd: macdLine[macdLine.length - 1],\n      signal: signalLine[signalPeriod][signalLine[signalPeriod].length - 1],\n      histogram: histogram[histogram.length - 1],\n      trend: histogram[histogram.length - 1] > 0 ? 'bullish' : 'bearish'\n    };\n  }\n\n  calculateBollingerBands(data, period = 20, deviation = 2) {\n    const sma = this.calculateSMA(data, [period]);\n    const prices = data.map(d => parseFloat(d.close_price));\n    \n    const bands = { upper: [], middle: [], lower: [] };\n    \n    for (let i = period - 1; i < data.length; i++) {\n      const slice = prices.slice(i - period + 1, i + 1);\n      const mean = slice.reduce((sum, price) => sum + price, 0) / period;\n      const variance = slice.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / period;\n      const stdDev = Math.sqrt(variance);\n      \n      bands.upper.push(mean + (deviation * stdDev));\n      bands.middle.push(mean);\n      bands.lower.push(mean - (deviation * stdDev));\n    }\n    \n    const currentPrice = parseFloat(data[data.length - 1].close_price);\n    const currentUpper = bands.upper[bands.upper.length - 1];\n    const currentLower = bands.lower[bands.lower.length - 1];\n    \n    return {\n      upper: bands.upper,\n      middle: bands.middle,\n      lower: bands.lower,\n      current: {\n        upper: currentUpper,\n        middle: bands.middle[bands.middle.length - 1],\n        lower: currentLower\n      },\n      position: currentPrice > currentUpper ? 'above_upper' : \n                currentPrice < currentLower ? 'below_lower' : 'within_bands',\n      bandwidth: ((currentUpper - currentLower) / bands.middle[bands.middle.length - 1]) * 100\n    };\n  }\n\n  calculateStochastic(data, period = 14, smoothK = 3, smoothD = 3) {\n    const stochastic = { k: [], d: [] };\n    \n    for (let i = period - 1; i < data.length; i++) {\n      const slice = data.slice(i - period + 1, i + 1);\n      const highestHigh = Math.max(...slice.map(d => parseFloat(d.high_price)));\n      const lowestLow = Math.min(...slice.map(d => parseFloat(d.low_price)));\n      const currentClose = parseFloat(data[i].close_price);\n      \n      const k = ((currentClose - lowestLow) / (highestHigh - lowestLow)) * 100;\n      stochastic.k.push(k);\n    }\n    \n    // Smooth %K and calculate %D\n    for (let i = smoothK - 1; i < stochastic.k.length; i++) {\n      const smoothedK = stochastic.k.slice(i - smoothK + 1, i + 1)\n        .reduce((sum, val) => sum + val, 0) / smoothK;\n      stochastic.d.push(smoothedK);\n    }\n    \n    return {\n      k: stochastic.k[stochastic.k.length - 1],\n      d: stochastic.d[stochastic.d.length - 1],\n      signal: stochastic.k[stochastic.k.length - 1] > 80 ? 'overbought' : \n              stochastic.k[stochastic.k.length - 1] < 20 ? 'oversold' : 'neutral'\n    };\n  }\n\n  calculateWilliamsR(data, period = 14) {\n    const williamsR = [];\n    \n    for (let i = period - 1; i < data.length; i++) {\n      const slice = data.slice(i - period + 1, i + 1);\n      const highestHigh = Math.max(...slice.map(d => parseFloat(d.high_price)));\n      const lowestLow = Math.min(...slice.map(d => parseFloat(d.low_price)));\n      const currentClose = parseFloat(data[i].close_price);\n      \n      const wr = ((highestHigh - currentClose) / (highestHigh - lowestLow)) * -100;\n      williamsR.push(wr);\n    }\n    \n    const current = williamsR[williamsR.length - 1];\n    \n    return {\n      values: williamsR,\n      current: current,\n      signal: current > -20 ? 'overbought' : current < -80 ? 'oversold' : 'neutral'\n    };\n  }\n\n  calculateVolumeIndicators(data) {\n    const volumes = data.map(d => parseFloat(d.volume));\n    const prices = data.map(d => parseFloat(d.close_price));\n    \n    // Volume SMA\n    const volumeSMA = [];\n    const period = 20;\n    \n    for (let i = period - 1; i < volumes.length; i++) {\n      const avgVolume = volumes.slice(i - period + 1, i + 1)\n        .reduce((sum, vol) => sum + vol, 0) / period;\n      volumeSMA.push(avgVolume);\n    }\n    \n    // On-Balance Volume (OBV)\n    const obv = [volumes[0]];\n    for (let i = 1; i < data.length; i++) {\n      const prevOBV = obv[obv.length - 1];\n      if (prices[i] > prices[i - 1]) {\n        obv.push(prevOBV + volumes[i]);\n      } else if (prices[i] < prices[i - 1]) {\n        obv.push(prevOBV - volumes[i]);\n      } else {\n        obv.push(prevOBV);\n      }\n    }\n    \n    return {\n      current: volumes[volumes.length - 1],\n      sma: volumeSMA[volumeSMA.length - 1],\n      obv: obv[obv.length - 1],\n      ratio: volumes[volumes.length - 1] / volumeSMA[volumeSMA.length - 1],\n      trend: obv[obv.length - 1] > obv[obv.length - 5] ? 'increasing' : 'decreasing'\n    };\n  }\n\n  calculateATR(data, period = 14) {\n    const trueRanges = [];\n    \n    for (let i = 1; i < data.length; i++) {\n      const high = parseFloat(data[i].high_price);\n      const low = parseFloat(data[i].low_price);\n      const prevClose = parseFloat(data[i - 1].close_price);\n      \n      const tr1 = high - low;\n      const tr2 = Math.abs(high - prevClose);\n      const tr3 = Math.abs(low - prevClose);\n      \n      trueRanges.push(Math.max(tr1, tr2, tr3));\n    }\n    \n    // Calculate ATR as EMA of true ranges\n    let atr = trueRanges.slice(0, period).reduce((sum, tr) => sum + tr, 0) / period;\n    const atrValues = [atr];\n    \n    for (let i = period; i < trueRanges.length; i++) {\n      atr = (atr * (period - 1) + trueRanges[i]) / period;\n      atrValues.push(atr);\n    }\n    \n    return {\n      current: atrValues[atrValues.length - 1],\n      values: atrValues,\n      percentage: (atrValues[atrValues.length - 1] / parseFloat(data[data.length - 1].close_price)) * 100\n    };\n  }\n\n  // Signal Analysis Methods\n\n  analyzeTrend(indicators, priceData) {\n    const currentPrice = parseFloat(priceData[priceData.length - 1].close_price);\n    const sma20 = indicators.sma['20_current'];\n    const sma50 = indicators.sma['50_current'];\n    const sma200 = indicators.sma['200_current'];\n    \n    let trendScore = 0;\n    let signals = [];\n    \n    // Price vs Moving Averages\n    if (currentPrice > sma20) trendScore += 1;\n    if (currentPrice > sma50) trendScore += 2;\n    if (currentPrice > sma200) trendScore += 3;\n    \n    // Moving Average Alignment\n    if (sma20 > sma50) trendScore += 1;\n    if (sma50 > sma200) trendScore += 1;\n    \n    // MACD trend\n    if (indicators.macd.histogram > 0) trendScore += 1;\n    \n    signals.push({\n      type: 'price_above_sma20',\n      active: currentPrice > sma20,\n      strength: Math.abs(currentPrice - sma20) / sma20 * 100\n    });\n    \n    signals.push({\n      type: 'golden_cross',\n      active: sma20 > sma50 && sma50 > sma200,\n      strength: trendScore / 8 * 100\n    });\n    \n    return {\n      direction: trendScore > 4 ? 'bullish' : trendScore < 3 ? 'bearish' : 'neutral',\n      strength: (trendScore / 8) * 100,\n      signals: signals\n    };\n  }\n\n  analyzeMomentum(indicators) {\n    let momentumScore = 0;\n    let signals = [];\n    \n    // RSI momentum\n    if (indicators.rsi.current > 50) momentumScore += 1;\n    if (indicators.rsi.current > 60) momentumScore += 1;\n    \n    // MACD momentum\n    if (indicators.macd.macd > indicators.macd.signal) momentumScore += 1;\n    if (indicators.macd.histogram > 0) momentumScore += 1;\n    \n    // Stochastic momentum\n    if (indicators.stochastic.k > 50) momentumScore += 1;\n    \n    signals.push({\n      type: 'rsi_momentum',\n      active: indicators.rsi.current > 50,\n      value: indicators.rsi.current,\n      signal: indicators.rsi.signal\n    });\n    \n    signals.push({\n      type: 'macd_crossover',\n      active: indicators.macd.macd > indicators.macd.signal,\n      strength: Math.abs(indicators.macd.histogram)\n    });\n    \n    return {\n      direction: momentumScore > 3 ? 'bullish' : momentumScore < 2 ? 'bearish' : 'neutral',\n      strength: (momentumScore / 5) * 100,\n      signals: signals\n    };\n  }\n\n  analyzeVolatility(indicators) {\n    const atr = indicators.atr.percentage;\n    const bandwidth = indicators.bollinger.bandwidth;\n    \n    let volatilityLevel = 'normal';\n    if (atr > 5 || bandwidth > 10) volatilityLevel = 'high';\n    if (atr < 2 || bandwidth < 5) volatilityLevel = 'low';\n    \n    return {\n      level: volatilityLevel,\n      atr_percentage: atr,\n      bollinger_bandwidth: bandwidth,\n      signals: [\n        {\n          type: 'bollinger_squeeze',\n          active: bandwidth < 5,\n          strength: 5 - bandwidth\n        },\n        {\n          type: 'high_volatility',\n          active: atr > 5,\n          strength: atr\n        }\n      ]\n    };\n  }\n\n  analyzeVolume(indicators) {\n    const volumeRatio = indicators.volume.ratio;\n    \n    return {\n      strength: volumeRatio > 1.5 ? 'high' : volumeRatio < 0.5 ? 'low' : 'normal',\n      ratio: volumeRatio,\n      obv_trend: indicators.volume.trend,\n      signals: [\n        {\n          type: 'volume_breakout',\n          active: volumeRatio > 2.0,\n          strength: volumeRatio\n        },\n        {\n          type: 'obv_trend',\n          active: indicators.volume.trend === 'increasing',\n          direction: indicators.volume.trend\n        }\n      ]\n    };\n  }\n\n  identifySupportResistance(data) {\n    const prices = data.map(d => parseFloat(d.close_price));\n    const highs = data.map(d => parseFloat(d.high_price));\n    const lows = data.map(d => parseFloat(d.low_price));\n    \n    // Simple pivot point calculation\n    const recentHigh = Math.max(...highs.slice(-20));\n    const recentLow = Math.min(...lows.slice(-20));\n    const currentPrice = prices[prices.length - 1];\n    \n    return {\n      resistance: recentHigh,\n      support: recentLow,\n      distance_to_resistance: ((recentHigh - currentPrice) / currentPrice) * 100,\n      distance_to_support: ((currentPrice - recentLow) / currentPrice) * 100\n    };\n  }\n\n  identifyPatterns(data) {\n    // Simplified pattern recognition\n    const prices = data.slice(-10).map(d => parseFloat(d.close_price));\n    \n    // Ascending triangle pattern\n    const isAscending = prices[prices.length - 1] > prices[0] && \n                       prices.every((price, i) => i === 0 || price >= prices[i - 1] * 0.98);\n    \n    // Head and shoulders (very simplified)\n    const isHeadAndShoulders = prices.length >= 5 && \n                              prices[2] > prices[0] && prices[2] > prices[4] &&\n                              prices[1] < prices[2] && prices[3] < prices[2];\n    \n    return {\n      ascending_triangle: isAscending,\n      head_and_shoulders: isHeadAndShoulders,\n      patterns_detected: [\n        ...(isAscending ? ['ascending_triangle'] : []),\n        ...(isHeadAndShoulders ? ['head_and_shoulders'] : [])\n      ]\n    };\n  }\n\n  calculateOverallSignal(signals) {\n    let bullishSignals = 0;\n    let bearishSignals = 0;\n    let totalWeight = 0;\n    \n    // Weight different signal types\n    const weights = {\n      trend: 0.3,\n      momentum: 0.25,\n      volume: 0.2,\n      volatility: 0.15,\n      patterns: 0.1\n    };\n    \n    // Score each signal category\n    Object.keys(signals).forEach(category => {\n      if (weights[category]) {\n        const signal = signals[category];\n        const weight = weights[category];\n        totalWeight += weight;\n        \n        if (signal.direction === 'bullish') {\n          bullishSignals += weight * (signal.strength / 100);\n        } else if (signal.direction === 'bearish') {\n          bearishSignals += weight * (signal.strength / 100);\n        }\n      }\n    });\n    \n    const netSignal = bullishSignals - bearishSignals;\n    const signalStrength = Math.abs(netSignal) / totalWeight * 100;\n    \n    return {\n      direction: netSignal > 0.1 ? 'bullish' : netSignal < -0.1 ? 'bearish' : 'neutral',\n      strength: Math.min(100, signalStrength),\n      confidence: signalStrength > 60 ? 'high' : signalStrength > 30 ? 'medium' : 'low',\n      score: netSignal\n    };\n  }\n\n  generateRecommendations(signals, overallSignal, currentPrice) {\n    const recommendations = [];\n    \n    // Entry/Exit recommendations based on overall signal\n    if (overallSignal.direction === 'bullish' && overallSignal.confidence !== 'low') {\n      recommendations.push({\n        type: 'entry',\n        action: 'buy',\n        confidence: overallSignal.confidence,\n        reason: 'Multiple bullish signals align',\n        target_price: parseFloat(currentPrice.close_price) * 1.05,\n        stop_loss: parseFloat(currentPrice.close_price) * 0.95\n      });\n    } else if (overallSignal.direction === 'bearish' && overallSignal.confidence !== 'low') {\n      recommendations.push({\n        type: 'exit',\n        action: 'sell',\n        confidence: overallSignal.confidence,\n        reason: 'Multiple bearish signals align',\n        target_price: parseFloat(currentPrice.close_price) * 0.95,\n        stop_loss: parseFloat(currentPrice.close_price) * 1.05\n      });\n    }\n    \n    // Risk management recommendations\n    if (signals.volatility.level === 'high') {\n      recommendations.push({\n        type: 'risk_management',\n        action: 'reduce_position',\n        reason: 'High volatility detected',\n        suggestion: 'Consider reducing position size or tightening stop losses'\n      });\n    }\n    \n    // Volume-based recommendations\n    if (signals.volume.strength === 'high' && overallSignal.direction === 'bullish') {\n      recommendations.push({\n        type: 'confirmation',\n        action: 'increase_confidence',\n        reason: 'High volume confirms bullish signals',\n        suggestion: 'Volume supports the bullish trend'\n      });\n    }\n    \n    return recommendations;\n  }\n}\n\n// Initialize signals engine\nconst signalsEngine = new CryptoSignalsEngine();\n\n// GET /crypto-signals/generate/:symbol - Generate trading signals\nrouter.get('/generate/:symbol', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    const { symbol } = req.params;\n    const { timeframe = '1h' } = req.query;\n    \n    logger.info('Crypto signals generation request', {\n      symbol,\n      timeframe,\n      correlation_id: correlationId\n    });\n\n    // Generate comprehensive signals\n    const signalData = await signalsEngine.generateSignals(symbol.toUpperCase(), timeframe);\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('crypto_signals_generation_complete', duration, {\n      symbol,\n      timeframe,\n      correlation_id: correlationId,\n      signal_strength: signalData.overallSignal.strength\n    });\n\n    res.json({\n      success: true,\n      data: signalData,\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Crypto signals generation failed', error, {\n      symbol: req.params.symbol,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate crypto trading signals',\n      error_code: 'CRYPTO_SIGNALS_GENERATION_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\n// GET /crypto-signals/multi/:symbols - Generate signals for multiple symbols\nrouter.get('/multi/:symbols', async (req, res) => {\n  const startTime = Date.now();\n  const correlationId = req.correlationId || 'unknown';\n  \n  try {\n    const symbols = req.params.symbols.split(',').map(s => s.trim().toUpperCase());\n    const { timeframe = '1h' } = req.query;\n    \n    logger.info('Multi-crypto signals generation request', {\n      symbols,\n      timeframe,\n      correlation_id: correlationId\n    });\n\n    // Generate signals for all symbols in parallel\n    const signalPromises = symbols.map(symbol => \n      signalsEngine.generateSignals(symbol, timeframe)\n        .catch(error => ({\n          symbol,\n          error: error.message\n        }))\n    );\n\n    const results = await Promise.all(signalPromises);\n\n    // Separate successful results from errors\n    const successful = results.filter(r => !r.error);\n    const failed = results.filter(r => r.error);\n\n    const duration = Date.now() - startTime;\n    \n    logger.performance('multi_crypto_signals_generation', duration, {\n      symbols,\n      successful_count: successful.length,\n      failed_count: failed.length,\n      correlation_id: correlationId\n    });\n\n    res.json({\n      success: true,\n      data: {\n        signals: successful,\n        errors: failed,\n        summary: {\n          total_requested: symbols.length,\n          successful: successful.length,\n          failed: failed.length\n        }\n      },\n      metadata: {\n        generation_time_ms: duration,\n        correlation_id: correlationId\n      }\n    });\n\n  } catch (error) {\n    const duration = Date.now() - startTime;\n    \n    logger.error('Multi-crypto signals generation failed', error, {\n      symbols: req.params.symbols,\n      correlation_id: correlationId,\n      duration_ms: duration\n    });\n\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate multi-crypto trading signals',\n      error_code: 'MULTI_CRYPTO_SIGNALS_FAILED',\n      correlation_id: correlationId\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}