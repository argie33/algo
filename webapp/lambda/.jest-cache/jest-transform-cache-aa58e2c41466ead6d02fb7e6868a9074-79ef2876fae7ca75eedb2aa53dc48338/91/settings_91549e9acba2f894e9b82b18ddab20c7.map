{"version":3,"names":["cov_21usdrxd5l","actualCoverage","express","s","require","crypto","query","schemaValidator","authenticateToken","createValidationMiddleware","sanitizers","portfolioDataRefreshService","apiKeyService","router","Router","settingsValidationSchemas","apiKey","provider","required","type","sanitizer","value","f","string","maxLength","toLowerCase","validator","includes","errorMessage","trim","b","length","test","apiSecret","isSandbox","boolean","defaultValue","profile","displayName","timezone","notifications","emailAlerts","pushNotifications","theme","darkMode","primaryColor","validateApiKeyFormat","validation","valid","error","details","expectedLength","actualLength","pattern","secretExpectedLength","secretActualLength","secretPattern","keyLength","secretLength","get","req","res","json","success","data","system","version","status","available_endpoints","timestamp","Date","toISOString","use","require2FA","next","userId","user","sub","mfaCode","headers","userResult","rows","dbError","console","warn","message","log","two_factor_enabled","requiresMFA","verified","speakeasy","totp","verify","secret","two_factor_secret","encoding","token","window","verifyError","encryptApiKey","userSalt","Error","tableExists","validateTableExists","structure","getTableSchema","count","safeQuery","validateTables","throwOnMissingTable","recent","table_exists","total_records","total","recent_entries","authorization","isEnabled","apiKeys","setupRequired","guidance","title","description","actions","encryptionEnabled","email","username","role","listApiKeys","formattedApiKeys","map","key","id","isActive","createdAt","created","lastUsed","keyId","note","errorCode","process","env","NODE_ENV","undefined","post","requestId","locals","startTime","now","memoryUsage","body","JSON","stringify","hasApiKey","hasSecret","apiKeyLength","formatValidation","storeStart","storeApiKey","refreshResult","triggerPortfolioDataRefresh","refreshError","code","severity","detail","hint","constraint","table","column","stack","solution","debugInfo","tableName","put","params","result","delete","deleteApiKey","name","getApiKey","substring","slice","secretKey","randomUUID","split","requestStart","credentials","connectionTestStart","connectionResult","AlpacaService","alpaca","account","getAccount","accountInfo","accountId","portfolioValue","parseFloat","portfolio_value","equity","buyingPower","buying_power","environment","accountStatus","connectionTime","alpacaError","connectionTestDuration","totalDuration","connection","metadata","tested_at","connection_duration_ms","request_info","request_id","total_duration_ms","errorDuration","error_duration_ms","validationStatus","lastChecked","providers","results","push","currentValidation","isValid","validationResults","totalKeys","validKeys","filter","r","firstName","lastName","phone","currency","existingColumns","columnCheck","row","column_name","schemaError","exists","tableCheckError","SecureQueryBuilder","queryBuilder","updateData","first_name","last_name","Object","keys","availableColumns","updateQuery","queryParams","buildUpdate","set","where","rowCount","queryError","position","updatedFields","updates","u","rowsAffected","preferences","priceAlerts","portfolioUpdates","marketNews","weeklyReports","chartStyle","layout","QRCode","generateSecret","issuer","qrCodeDataUrl","toDataURL","otpauth_url","base32","qrCodeUrl","manualEntryKey","fallbackError","recoveryCodes","i","randomBytes","toString","toUpperCase","cryptoError","enabled","hasRecoveryCodes","recovery_codes","codes","hashedCodes","createHash","update","digest","transaction","client","fixes","userColumns","col","module","exports"],"sources":["settings.js"],"sourcesContent":["const express = require('express');\nconst crypto = require('crypto');\nconst { query } = require('../utils/database');\nconst schemaValidator = require('../utils/schemaValidator');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst portfolioDataRefreshService = require('../utils/portfolioDataRefresh');\nconst apiKeyService = require('../utils/simpleApiKeyService');\n\nconst router = express.Router();\n\n// Validation schemas for settings endpoints\nconst settingsValidationSchemas = {\n  apiKey: {\n    provider: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, toLowerCase: true }),\n      validator: (value) => ['alpaca', 'polygon', 'iex'].includes(value),\n      errorMessage: 'Provider must be alpaca, polygon, or iex'\n    },\n    apiKey: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 100, trim: true }),\n      validator: (value) => value.length >= 10 && value.length <= 100 && /^[A-Za-z0-9_\\-]+$/.test(value),\n      errorMessage: 'API key must be 10-100 characters, alphanumeric with _ and - allowed'\n    },\n    apiSecret: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 200, trim: true }),\n      validator: (value) => value.length >= 10 && value.length <= 200,\n      errorMessage: 'API secret must be 10-200 characters'\n    },\n    isSandbox: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'isSandbox must be true or false'\n    }\n  },\n  \n  profile: {\n    displayName: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, trim: true }),\n      validator: (value) => !value || (value.length >= 2 && value.length <= 50),\n      errorMessage: 'Display name must be 2-50 characters if provided'\n    },\n    timezone: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50 }),\n      validator: (value) => !value || /^[A-Za-z/_]+$/.test(value),\n      errorMessage: 'Invalid timezone format'\n    }\n  },\n  \n  notifications: {\n    emailAlerts: {\n      type: 'boolean',\n      sanitizer: sanitizers.boolean,\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'emailAlerts must be true or false'\n    },\n    pushNotifications: {\n      type: 'boolean',\n      sanitizer: sanitizers.boolean,\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'pushNotifications must be true or false'\n    }\n  },\n  \n  theme: {\n    darkMode: {\n      type: 'boolean',\n      sanitizer: sanitizers.boolean,\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'darkMode must be true or false'\n    },\n    primaryColor: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 7 }),\n      validator: (value) => !value || /^#[0-9A-Fa-f]{6}$/.test(value),\n      errorMessage: 'Primary color must be a valid hex color (e.g., #FF5733)'\n    }\n  }\n};\n\n// API Key format validation\nfunction validateApiKeyFormat(provider, apiKey, apiSecret) {\n  const validation = { valid: false, error: '', details: {} };\n  \n  switch (provider.toLowerCase()) {\n    case 'alpaca':\n      // Alpaca API keys are typically 20-40 characters, alphanumeric\n      if (!apiKey || apiKey.length < 20 || apiKey.length > 50) {\n        validation.error = 'Alpaca API key should be 20-50 characters long';\n        validation.details.expectedLength = '20-50 characters';\n        validation.details.actualLength = apiKey ? apiKey.length : 0;\n        return validation;\n      }\n      \n      if (!/^[A-Za-z0-9]+$/.test(apiKey)) {\n        validation.error = 'Alpaca API key should contain only alphanumeric characters';\n        validation.details.pattern = 'Alphanumeric only';\n        return validation;\n      }\n      \n      // Alpaca secret keys are typically longer and may contain special characters\n      if (apiSecret && (apiSecret.length < 20 || apiSecret.length > 80)) {\n        validation.error = 'Alpaca API secret should be 20-80 characters long';\n        validation.details.secretExpectedLength = '20-80 characters';\n        validation.details.secretActualLength = apiSecret.length;\n        return validation;\n      }\n      \n      if (apiSecret && !/^[A-Za-z0-9\\/+=]+$/.test(apiSecret)) {\n        validation.error = 'Alpaca API secret contains invalid characters';\n        validation.details.secretPattern = 'Alphanumeric and /+= only';\n        return validation;\n      }\n      break;\n      \n    case 'tdameritrade':\n      // TD Ameritrade consumer keys are typically 32 characters\n      if (!apiKey || apiKey.length !== 32) {\n        validation.error = 'TD Ameritrade consumer key should be exactly 32 characters';\n        validation.details.expectedLength = '32 characters';\n        validation.details.actualLength = apiKey ? apiKey.length : 0;\n        return validation;\n      }\n      \n      if (!/^[A-Za-z0-9]+$/.test(apiKey)) {\n        validation.error = 'TD Ameritrade consumer key should contain only alphanumeric characters';\n        return validation;\n      }\n      break;\n      \n    case 'interactivebrokers':\n    case 'ib':\n      // IB uses various formats, be more lenient\n      if (!apiKey || apiKey.length < 8 || apiKey.length > 100) {\n        validation.error = 'Interactive Brokers API key should be 8-100 characters long';\n        return validation;\n      }\n      break;\n      \n    default:\n      // Generic validation for unknown providers\n      if (!apiKey || apiKey.length < 8 || apiKey.length > 200) {\n        validation.error = `${provider} API key should be 8-200 characters long`;\n        validation.details.expectedLength = '8-200 characters';\n        validation.details.actualLength = apiKey ? apiKey.length : 0;\n        return validation;\n      }\n      \n      // Check for obviously invalid patterns\n      if (/^\\s+$/.test(apiKey) || /password|123456|test/i.test(apiKey)) {\n        validation.error = 'API key appears to be invalid or a placeholder';\n        return validation;\n      }\n  }\n  \n  validation.valid = true;\n  validation.details.provider = provider;\n  validation.details.keyLength = apiKey.length;\n  validation.details.secretLength = apiSecret ? apiSecret.length : 0;\n  \n  return validation;\n}\n\n// Root settings endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'User Settings API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'PUT /settings/api-keys/:keyId - Update API key',\n        'DELETE /settings/api-keys/:keyId - Delete API key',\n        'PUT /settings/profile - Update user profile',\n        'PUT /settings/notifications - Update notification preferences',\n        'PUT /settings/theme - Update theme preferences',\n        'DELETE /settings/delete-account - Delete user account'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Apply authentication middleware to all other settings routes\nrouter.use(authenticateToken);\n\n// 2FA verification middleware for sensitive operations\nconst require2FA = async (req, res, next) => {\n  const userId = req.user.sub;\n  const { mfaCode } = req.headers;\n  \n  try {\n    // Check if user has 2FA enabled - handle missing users table gracefully\n    let user = null;\n    try {\n      const userResult = await query(`\n        SELECT two_factor_enabled, two_factor_secret \n        FROM users \n        WHERE id = $1\n      `, [userId]);\n      \n      if (userResult.rows.length > 0) {\n        user = userResult.rows[0];\n      }\n    } catch (dbError) {\n      console.warn(`⚠️ Users table not available, disabling 2FA checks:`, dbError.message);\n      // If users table doesn't exist, skip 2FA verification\n      console.log(`⚠️ User ${userId} proceeding without 2FA due to missing users table`);\n      return next();\n    }\n    \n    if (!user) {\n      console.warn(`⚠️ User ${userId} not found in users table, proceeding without 2FA`);\n      return next();\n    }\n    \n    // If 2FA is not enabled, allow the request but warn\n    if (!user.two_factor_enabled) {\n      console.warn(`⚠️  User ${userId} accessing sensitive operations without 2FA enabled`);\n      return next();\n    }\n    \n    // If 2FA is enabled, require MFA code\n    if (!mfaCode) {\n      return res.status(401).json({\n        success: false,\n        error: 'MFA verification required',\n        requiresMFA: true,\n        message: 'This operation requires 2FA verification. Please provide your authenticator code.'\n      });\n    }\n    \n    // Verify the MFA code with error handling\n    let verified;\n    try {\n      const speakeasy = require('speakeasy');\n      verified = speakeasy.totp.verify({\n        secret: user.two_factor_secret,\n        encoding: 'base32',\n        token: mfaCode,\n        window: 2\n      });\n    } catch (verifyError) {\n      console.error('❌ MFA verification library error:', verifyError);\n      return res.status(500).json({\n        success: false,\n        error: 'MFA verification service error',\n        message: 'Unable to verify MFA code due to service error',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    if (!verified) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid MFA code',\n        requiresMFA: true,\n        message: 'The provided MFA code is invalid. Please try again.',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    console.log(`🔐 MFA verification successful for user ${userId}`);\n    next();\n    \n  } catch (error) {\n    console.error('❌ Error in 2FA verification middleware:', error);\n    res.status(500).json({\n      success: false,\n      error: 'MFA verification failed',\n      details: error.message\n    });\n  }\n};\n\n// Use apiKeyService for consistent encryption across the application\n// NOTE: apiKeyService is already imported at the top of the file\n\nasync function encryptApiKey(apiKey, userSalt, userId, provider) {\n  try {\n    return await apiKeyService.encryptApiKey(apiKey, userSalt, userId, provider);\n  } catch (error) {\n    console.error('❌ CRITICAL: Encryption failed:', error);\n    throw new Error('Failed to encrypt API key. Check encryption service configuration.');\n  }\n}\n\n// decryptApiKey function removed - now using Parameter Store directly\n\n// Debug endpoint to check API keys table\nrouter.get('/api-keys/debug', async (req, res) => {\n  try {\n    console.log('🔍 [DEBUG] Checking user_api_keys table structure...');\n    \n    // Check if table exists using schema validator\n    const tableExists = await schemaValidator.validateTableExists('user_api_keys');\n    \n    console.log('📋 Table exists:', tableExists);\n    \n    if (tableExists) {\n      // Get table structure using schema validator\n      const structure = await schemaValidator.getTableSchema('user_api_keys');\n      \n      // Get total count with schema validation\n      const count = await schemaValidator.safeQuery(\n        `SELECT COUNT(*) as total FROM user_api_keys`,\n        [],\n        { validateTables: true, throwOnMissingTable: false }\n      );\n      \n      // Get recent entries (without sensitive data)\n      const recent = await query(`\n        SELECT id, user_id, provider, description, is_active, created_at \n        FROM user_api_keys \n        ORDER BY created_at DESC \n        LIMIT 5\n      `);\n      \n      res.json({\n        success: true,\n        table_exists: true,\n        structure: structure.rows,\n        total_records: count.rows[0].total,\n        recent_entries: recent.rows,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      res.json({\n        success: true,\n        table_exists: false,\n        message: 'user_api_keys table does not exist',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n  } catch (error) {\n    console.error('❌ [DEBUG] Error checking API keys table:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to check API keys table',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get all API keys for authenticated user\nrouter.get('/api-keys', async (req, res) => {\n  console.log('🔍 API Keys fetch requested');\n  console.log('📋 Request headers:', {\n    authorization: req.headers.authorization ? 'Present' : 'Missing',\n    'content-type': req.headers['content-type'],\n    'user-agent': req.headers['user-agent']\n  });\n  \n  // Check if encryption service is available\n  if (!apiKeyService.isEnabled) {\n    console.warn('⚠️  API Key encryption service is disabled - returning setup guidance');\n    return res.json({\n      success: true,\n      apiKeys: [],\n      setupRequired: true,\n      message: 'API key service is initializing. You can still use demo data while we configure the encryption service.',\n      guidance: {\n        status: 'setup_required',\n        title: 'API Key Service Setup Required',\n        description: 'The API key encryption service needs to be configured by the administrator.',\n        actions: [\n          'Use demo data for now',\n          'Contact administrator to configure encryption service',\n          'Check back in a few minutes'\n        ]\n      },\n      encryptionEnabled: false\n    });\n  }\n  \n  // Check if user is authenticated\n  if (!req.user) {\n    console.error('❌ No user object in request - authentication failed');\n    return res.status(401).json({\n      success: false,\n      error: 'Authentication required',\n      message: 'User not authenticated'\n    });\n  }\n  \n  const userId = req.user.sub;\n  console.log('👤 User ID:', userId);\n  console.log('🔐 User details:', {\n    sub: req.user.sub,\n    email: req.user.email,\n    username: req.user.username,\n    role: req.user.role\n  });\n  \n  if (!userId) {\n    console.error('❌ No user ID found in authentication token');\n    return res.status(401).json({\n      success: false,\n      error: 'Invalid authentication token',\n      message: 'User ID not found in token'\n    });\n  }\n  \n  try {\n    console.log('🔄 Fetching API keys from Parameter Store...');\n    \n    // Use the new simple API key service\n    const apiKeys = await apiKeyService.listApiKeys(userId);\n    \n    console.log('✅ API keys fetched successfully');\n    console.log('📊 Found API keys for user', userId, ':', apiKeys.length);\n    \n    // Format for frontend compatibility\n    const formattedApiKeys = apiKeys.map(key => ({\n      id: `${key.provider}-${userId}`, // Generate consistent ID\n      provider: key.provider,\n      description: `${key.provider} API Key`,\n      isSandbox: true, // Default for now\n      isActive: true,\n      createdAt: key.created,\n      lastUsed: null,\n      apiKey: key.keyId // Already masked by service\n    }));\n\n    console.log('🎯 Returning API keys response');\n    res.json({ \n      success: true, \n      apiKeys: formattedApiKeys\n    });\n  } catch (error) {\n    console.error('❌ API Key service error:', error);\n    \n    // Return fallback empty list for better UX\n    console.log('🔄 API Key service failed, returning empty list as fallback');\n    res.json({ \n      success: true, \n      apiKeys: [],\n      note: 'API key service temporarily unavailable',\n      errorCode: 'SERVICE_UNAVAILABLE',\n      details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Add new API key\nrouter.post('/api-keys', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  console.log(`🔐 [${requestId}] POST /api-keys - Starting API key creation`);\n  console.log(`🔐 [${requestId}] Memory at start:`, process.memoryUsage());\n  \n  // Simple service is always enabled (no complex encryption setup needed)\n  if (!apiKeyService.isEnabled) {\n    console.error(`❌ [${requestId}] API Key service is disabled`);\n    return res.status(503).json({\n      success: false,\n      error: 'API key service unavailable',\n      message: 'API key storage is currently unavailable.'\n    });\n  }\n  \n  const userId = req.user?.sub;\n  const { provider, apiKey, apiSecret, isSandbox = true, description } = req.body;\n  \n  console.log(`🔐 [${requestId}] User ID:`, userId);\n  console.log(`🔐 [${requestId}] User object:`, JSON.stringify(req.user, null, 2));\n  console.log(`🔐 [${requestId}] Request body:`, JSON.stringify({ \n    provider, \n    isSandbox, \n    description, \n    hasApiKey: !!apiKey, \n    hasSecret: !!apiSecret,\n    apiKeyLength: apiKey?.length,\n    secretLength: apiSecret?.length\n  }, null, 2));\n\n  // Check if user is properly authenticated\n  if (!userId) {\n    console.error(`❌ [${requestId}] No user ID found in request after ${Date.now() - startTime}ms`);\n    return res.status(401).json({\n      success: false,\n      error: 'User not authenticated',\n      message: 'User ID not found in authentication token'\n    });\n  }\n\n  if (!provider || !apiKey) {\n    console.error(`❌ [${requestId}] Missing required fields: provider=${!!provider}, apiKey=${!!apiKey} after ${Date.now() - startTime}ms`);\n    return res.status(400).json({\n      success: false,\n      error: 'Provider and API key are required'\n    });\n  }\n\n  // Validate API key format based on provider\n  const formatValidation = validateApiKeyFormat(provider, apiKey, apiSecret);\n  if (!formatValidation.valid) {\n    console.error(`❌ [${requestId}] Invalid API key format for ${provider}: ${formatValidation.error}`);\n    return res.status(400).json({\n      success: false,\n      error: formatValidation.error,\n      details: formatValidation.details\n    });\n  }\n\n  try {\n    console.log(`🔐 [${requestId}] Storing API key using Parameter Store after ${Date.now() - startTime}ms...`);\n    \n    // Store API key using simple Parameter Store service\n    const storeStart = Date.now();\n    await apiKeyService.storeApiKey(userId, provider, apiKey, apiSecret);\n    console.log(`✅ [${requestId}] API key stored successfully after ${Date.now() - storeStart}ms`);\n    \n    // Trigger portfolio data refresh for this user's portfolio symbols\n    console.log(`🔄 [${requestId}] Triggering portfolio data refresh after ${Date.now() - startTime}ms...`);\n    try {\n      const refreshResult = await portfolioDataRefreshService.triggerPortfolioDataRefresh(userId, provider);\n      console.log(`✅ [${requestId}] Portfolio data refresh result:`, refreshResult.status);\n    } catch (refreshError) {\n      console.warn(`⚠️ [${requestId}] Portfolio data refresh failed (non-critical):`, refreshError.message);\n      // Don't fail the API key creation if refresh fails\n    }\n    \n    console.log(`✅ [${requestId}] Total request time: ${Date.now() - startTime}ms`);\n\n    res.json({\n      success: true,\n      message: 'API key added successfully',\n      apiKey: {\n        provider,\n        description: description || `${provider} API key`,\n        isSandbox,\n        createdAt: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error(`❌ [${requestId}] Error after ${Date.now() - startTime}ms:`, error.message);\n    console.error('❌ Error adding API key:', error.message);\n    console.error('🔍 Full error details:', {\n      message: error.message,\n      code: error.code,\n      severity: error.severity,\n      detail: error.detail,\n      hint: error.hint,\n      constraint: error.constraint,\n      table: error.table,\n      column: error.column,\n      stack: error.stack\n    });\n    \n    if (error.code === '23505') { // Unique constraint violation\n      res.status(400).json({\n        success: false,\n        error: 'API key for this provider already exists'\n      });\n    } else if (error.code === '42P01') { // Table doesn't exist\n      // Return error indicating table creation is needed\n      res.status(500).json({\n        success: false,\n        error: 'Database table not found - user_api_keys table needs to be created',\n        message: 'The API keys table has not been created. Please run the database initialization script.',\n        details: error.message,\n        errorCode: error.code,\n        solution: 'Run init_database.py script to create required tables',\n        debugInfo: process.env.NODE_ENV === 'development' ? {\n          errorCode: error.code,\n          errorMessage: error.message,\n          userId: req.user?.sub,\n          provider: provider,\n          tableName: 'user_api_keys'\n        } : undefined\n      });\n    } else {\n      // Log the actual error details for debugging\n      console.error('❌ Unexpected database error details:', {\n        message: error.message,\n        code: error.code,\n        severity: error.severity,\n        detail: error.detail,\n        hint: error.hint,\n        constraint: error.constraint,\n        table: error.table,\n        column: error.column\n      });\n      \n      // Return error with clear message about database issue\n      res.status(500).json({\n        success: false,\n        error: 'Database connectivity issue - API key not saved',\n        message: 'Failed to save API key to database. Please check database connectivity.',\n        details: error.message,\n        errorCode: error.code,\n        debugInfo: process.env.NODE_ENV === 'development' ? {\n          errorCode: error.code,\n          errorMessage: error.message,\n          userId: req.user?.sub,\n          provider: provider\n        } : undefined\n      });\n    }\n  }\n});\n\n// Update API key\nrouter.put('/api-keys/:keyId', createValidationMiddleware(settingsValidationSchemas.apiKey), async (req, res) => {\n  const userId = req.user.sub;\n  const { keyId } = req.params;\n  const { description, isSandbox } = req.body;\n\n  try {\n    const result = await query(`\n      UPDATE user_api_keys \n      SET \n        description = COALESCE($3, description),\n        is_sandbox = COALESCE($4, is_sandbox),\n        updated_at = NOW()\n      WHERE id = $1 AND user_id = $2\n      RETURNING id, provider, description, is_sandbox as \"isSandbox\"\n    `, [keyId, userId, description, isSandbox]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'API key updated successfully',\n      apiKey: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error updating API key:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update API key'\n    });\n  }\n});\n\n// Delete API key\nrouter.delete('/api-keys/:provider', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    // Delete from Parameter Store\n    await apiKeyService.deleteApiKey(userId, provider);\n\n    res.json({\n      success: true,\n      message: 'API key deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting API key:', error);\n    if (error.name === 'ParameterNotFound') {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found'\n      });\n    }\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete API key',\n      message: error.message\n    });\n  }\n});\n\n// Get API key (without exposing the secret)\nrouter.get('/api-keys/:provider', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    const apiKey = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!apiKey) {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      apiKey: {\n        provider: apiKey.provider,\n        keyId: apiKey.keyId.substring(0, 4) + '***' + apiKey.keyId.slice(-4),\n        hasSecret: !!apiKey.secretKey,\n        created: apiKey.created,\n        version: apiKey.version\n      }\n    });\n  } catch (error) {\n    console.error('Error retrieving API key:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve API key',\n      message: error.message\n    });\n  }\n});\n\n// Test API key connection\nrouter.post('/test-connection/:provider', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    console.log(`🚀 [${requestId}] API key connection test initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      provider,\n      timestamp: new Date().toISOString()\n    });\n\n    if (!provider || !['alpaca', 'polygon', 'finnhub', 'iex'].includes(provider.toLowerCase())) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid provider. Must be alpaca, polygon, finnhub, or iex',\n        requestId,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Get API key from Parameter Store\n    console.log(`🔍 [${requestId}] Retrieving API key from Parameter Store`);\n    const credentials = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!credentials) {\n      return res.status(404).json({\n        success: false,\n        error: 'API key not found',\n        requestId,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    console.log(`✅ [${requestId}] API key found for provider: ${provider}`);\n    \n    // Test connection based on provider\n    console.log(`📡 [${requestId}] Testing connection to ${provider} API`);\n    const connectionTestStart = Date.now();\n    let connectionResult = { valid: false, error: 'Provider not supported' };\n    \n    if (provider === 'alpaca') {\n      const AlpacaService = require('../utils/alpacaService');\n      \n      try {\n        const alpaca = new AlpacaService(credentials.keyId, credentials.secretKey, false);\n        const account = await alpaca.getAccount();\n        \n        if (account) {\n          connectionResult = {\n            valid: true,\n            accountInfo: {\n              accountId: account.id,\n              portfolioValue: parseFloat(account.portfolio_value || account.equity || 0),\n              buyingPower: parseFloat(account.buying_power || 0),\n              environment: 'live',\n              accountStatus: account.status\n            },\n            connectionTime: Date.now() - connectionTestStart\n          };\n          \n          console.log(`✅ [${requestId}] Alpaca connection test SUCCESSFUL`);\n        } else {\n          connectionResult = {\n            valid: false,\n            error: 'No account data returned from Alpaca API'\n          };\n        }\n        \n      } catch (alpacaError) {\n        console.error(`❌ [${requestId}] Alpaca connection test FAILED:`, alpacaError.message);\n        connectionResult = {\n          valid: false,\n          error: alpacaError.message,\n          errorCode: alpacaError.code\n        };\n      }\n    }\n\n    const connectionTestDuration = Date.now() - connectionTestStart;\n    const totalDuration = Date.now() - requestStart;\n\n    res.json({\n      success: true,\n      connection: connectionResult,\n      metadata: {\n        provider: provider,\n        tested_at: new Date().toISOString(),\n        connection_duration_ms: connectionTestDuration\n      },\n      request_info: {\n        request_id: requestId,\n        total_duration_ms: totalDuration,\n        timestamp: new Date().toISOString()\n      }\n    });\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] API key connection test FAILED:`, error.message);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Failed to test API key connection',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n      request_info: {\n        request_id: requestId,\n        error_duration_ms: errorDuration,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Real-time API key validation status endpoint\nrouter.get('/api-keys/validation-status', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.query;\n\n  try {\n    const credentials = await apiKeyService.getApiKey(userId, provider);\n    \n    res.json({\n      success: true,\n      data: {\n        validationStatus: {\n          valid: !!credentials,\n          provider: provider,\n          hasApiKey: !!credentials?.keyId,\n          hasSecret: !!credentials?.secretKey,\n          created: credentials?.created || null\n        },\n        lastChecked: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('Error getting validation status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get validation status',\n      details: error.message\n    });\n  }\n});\n\n// Real-time API key validation endpoint\nrouter.post('/api-keys/:provider/validate', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    const credentials = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!credentials) {\n      return res.json({\n        success: true,\n        data: {\n          valid: false,\n          error: 'API key not found',\n          provider: provider\n        }\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        valid: true,\n        provider: credentials.provider,\n        hasApiKey: !!credentials.keyId,\n        hasSecret: !!credentials.secretKey,\n        created: credentials.created,\n        version: credentials.version\n      }\n    });\n  } catch (error) {\n    console.error('Error validating API key:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to validate API key',\n      details: error.message\n    });\n  }\n});\n\n// Validate all user API keys endpoint\nrouter.post('/api-keys/validate-all', async (req, res) => {\n  const userId = req.user.sub;\n\n  try {\n    const providers = ['alpaca', 'polygon', 'finnhub', 'iex'];\n    const results = [];\n    \n    for (const provider of providers) {\n      try {\n        const credentials = await apiKeyService.getApiKey(userId, provider);\n        if (credentials) {\n          results.push({\n            provider: provider,\n            currentValidation: {\n              isValid: true,\n              hasApiKey: !!credentials.keyId,\n              hasSecret: !!credentials.secretKey,\n              created: credentials.created,\n              version: credentials.version\n            }\n          });\n        }\n      } catch (error) {\n        console.warn(`Failed to validate ${provider} API key:`, error.message);\n      }\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        validationResults: results,\n        totalKeys: results.length,\n        validKeys: results.filter(r => r.currentValidation.isValid).length,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('Error validating all API keys:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to validate all API keys',\n      details: error.message\n    });\n  }\n});\n\n// Get decrypted API credentials for a provider (for real-time services)\nrouter.get('/api-keys/:provider/credentials', async (req, res) => {\n  const userId = req.user.sub;\n  const { provider } = req.params;\n\n  try {\n    // Get API key from Parameter Store\n    const credentials = await apiKeyService.getApiKey(userId, provider);\n    \n    if (!credentials) {\n      return res.status(404).json({\n        success: false,\n        error: `No active ${provider} API key found`,\n        provider: provider\n      });\n    }\n\n    console.log(`🔓 Credentials retrieved successfully for ${provider}`);\n    \n    res.json({\n      success: true,\n      credentials: {\n        provider: credentials.provider,\n        apiKey: credentials.keyId,\n        apiSecret: credentials.secretKey,\n        isSandbox: false, // Parameter Store doesn't store sandbox flag, defaulting to false\n        description: `${provider} API key`\n      }\n    });\n  } catch (error) {\n    console.error('Error getting API credentials:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get API credentials',\n      details: error.message\n    });\n  }\n});\n\n// User profile management\nrouter.get('/profile', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    const result = await query(`\n      SELECT \n        first_name as \"firstName\",\n        last_name as \"lastName\", \n        email,\n        phone,\n        timezone,\n        currency,\n        created_at as \"createdAt\",\n        updated_at as \"updatedAt\"\n      FROM users \n      WHERE id = $1\n    `, [userId]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found'\n      });\n    }\n\n    res.json({\n      success: true,\n      user: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch user profile'\n    });\n  }\n});\n\n// Update user profile\nrouter.put('/profile', createValidationMiddleware(settingsValidationSchemas.profile), async (req, res) => {\n  const userId = req.user.sub;\n  const { firstName, lastName, email, phone, timezone, currency } = req.body;\n\n  console.log('🔄 Profile update request for user:', userId);\n  console.log('📝 Update data:', { firstName, lastName, email, phone, timezone, currency });\n\n  try {\n    // Test database connectivity first\n    console.log('🔍 Testing database connectivity...');\n    try {\n      await query('SELECT 1 as test', [], 3000);\n      console.log('✅ Database connection successful');\n    } catch (dbError) {\n      console.error('❌ Database connection failed:', dbError.message);\n      return res.status(503).json({\n        success: false,\n        error: 'Database temporarily unavailable',\n        message: 'Please try again in a few moments',\n        details: dbError.message\n      });\n    }\n\n    // Check what columns actually exist in the users table\n    console.log('🔍 Checking users table schema...');\n    let existingColumns = [];\n    try {\n      const columnCheck = await query(`\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_schema = 'public' AND table_name = 'users'\n      `, [], 5000);\n      \n      existingColumns = columnCheck.rows.map(row => row.column_name);\n      console.log('📋 Available columns in users table:', existingColumns);\n    } catch (schemaError) {\n      console.error('❌ Schema check failed:', schemaError.message);\n      \n      // Check if the users table exists at all\n      try {\n        const tableExists = await query(`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' AND table_name = 'users'\n          )\n        `, [], 3000);\n        \n        if (!tableExists.rows[0].exists) {\n          return res.status(503).json({\n            success: false,\n            error: 'Database schema not initialized',\n            message: 'The users table does not exist. Database needs to be initialized.',\n            details: 'Contact administrator to run database initialization script'\n          });\n        }\n      } catch (tableCheckError) {\n        console.error('❌ Table existence check failed:', tableCheckError.message);\n        return res.status(503).json({\n          success: false,\n          error: 'Database schema check failed',\n          message: 'Unable to verify database structure',\n          details: tableCheckError.message\n        });\n      }\n      \n      // If table exists but column check failed, assume basic columns\n      existingColumns = ['id', 'email', 'username'];\n      console.log('⚠️ Using fallback column list:', existingColumns);\n    }\n    \n    // Use secure query builder to prevent SQL injection\n    const SecureQueryBuilder = require('../utils/secureQueryBuilder');\n    const queryBuilder = new SecureQueryBuilder();\n    \n    // Build secure update data object\n    const updateData = {};\n    \n    // Only include fields that exist in database and are provided\n    if (existingColumns.includes('first_name') && firstName !== undefined) {\n      updateData.first_name = firstName;\n    }\n    \n    if (existingColumns.includes('last_name') && lastName !== undefined) {\n      updateData.last_name = lastName;\n    }\n    \n    if (existingColumns.includes('email') && email !== undefined) {\n      updateData.email = email;\n    }\n    \n    if (existingColumns.includes('phone') && phone !== undefined) {\n      updateData.phone = phone;\n    }\n    \n    if (existingColumns.includes('timezone') && timezone !== undefined) {\n      updateData.timezone = timezone;\n    }\n    \n    if (existingColumns.includes('currency') && currency !== undefined) {\n      updateData.currency = currency;\n    }\n    \n    // Note: updated_at will be handled by the secure query builder\n    \n    if (Object.keys(updateData).length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No valid fields to update',\n        availableColumns: existingColumns,\n        note: 'Database schema may need updating to support profile fields'\n      });\n    }\n    \n    // Build secure query using the query builder\n    const { query: updateQuery, params: queryParams } = queryBuilder.buildUpdate({\n      table: 'users',\n      set: updateData,\n      where: { id: userId }\n    });\n    \n    console.log('🔒 Executing secure query (parameters hidden for security)');\n    console.log('📊 Query parameter count:', queryParams.length);\n    \n    let result;\n    try {\n      result = await query(updateQuery, queryParams, 10000); // 10 second timeout\n      console.log('✅ Query executed successfully, rows affected:', result.rowCount);\n    } catch (queryError) {\n      console.error('❌ Query execution failed:', queryError.message);\n      console.error('🔍 Query error details:', {\n        message: queryError.message,\n        code: queryError.code,\n        detail: queryError.detail,\n        hint: queryError.hint,\n        position: queryError.position,\n        query: updateQuery.substring(0, 200) + '...'\n      });\n      \n      // Handle specific database errors\n      if (queryError.code === '42703') { // Column doesn't exist\n        return res.status(503).json({\n          success: false,\n          error: 'Database schema missing required columns',\n          message: 'The database schema needs to be updated to support profile fields',\n          details: `Column referenced in query does not exist: ${queryError.message}`,\n          solution: 'Use the schema fix endpoint: PUT /api/settings/debug/fix-schema'\n        });\n      } else if (queryError.code === '42P01') { // Table doesn't exist\n        return res.status(503).json({\n          success: false,\n          error: 'Users table does not exist',\n          message: 'The database schema needs to be initialized',\n          details: 'The users table is missing from the database',\n          solution: 'Contact administrator to run database initialization script'\n        });\n      } else if (queryError.code === '23502') { // NOT NULL violation\n        return res.status(400).json({\n          success: false,\n          error: 'Required field missing',\n          message: 'A required database field is null',\n          details: queryError.detail || queryError.message\n        });\n      } else if (queryError.code === '23505') { // Unique constraint violation\n        return res.status(400).json({\n          success: false,\n          error: 'Duplicate value',\n          message: 'The provided value already exists',\n          details: queryError.detail || queryError.message\n        });\n      } else {\n        // Generic database error\n        return res.status(503).json({\n          success: false,\n          error: 'Database operation failed',\n          message: 'An error occurred while updating the profile',\n          details: queryError.message,\n          errorCode: queryError.code,\n          solution: 'Please try again or contact support if the problem persists'\n        });\n      }\n    }\n\n    if (!result || result.rows.length === 0) {\n      console.warn('⚠️ No rows affected by update query');\n      return res.status(404).json({\n        success: false,\n        error: 'User not found',\n        message: 'No user exists with the provided ID',\n        userId: userId,\n        note: 'The user may not exist in the database or the ID format is incorrect'\n      });\n    }\n\n    console.log('✅ Profile update successful');\n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      user: result.rows[0],\n      updatedFields: updates.filter(u => !u.includes('updated_at')),\n      availableColumns: existingColumns,\n      rowsAffected: result.rowCount\n    });\n  } catch (error) {\n    console.error('❌ Unexpected error updating user profile:', error);\n    console.error('🔍 Error details:', {\n      message: error.message,\n      code: error.code,\n      detail: error.detail,\n      hint: error.hint,\n      stack: error.stack?.substring(0, 500)\n    });\n    \n    // Final catch-all error handling\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n      message: 'An unexpected error occurred while updating the profile',\n      details: error.message,\n      errorCode: error.code,\n      timestamp: new Date().toISOString(),\n      note: 'This is an unexpected error. Please contact support.'\n    });\n  }\n});\n\n// Get notification preferences\nrouter.get('/notifications', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    const result = await query(`\n      SELECT \n        email_notifications as email,\n        push_notifications as push,\n        price_alerts as \"priceAlerts\",\n        portfolio_updates as \"portfolioUpdates\",\n        market_news as \"marketNews\",\n        weekly_reports as \"weeklyReports\"\n      FROM user_notification_preferences \n      WHERE user_id = $1\n    `, [userId]);\n\n    // If no preferences exist, return defaults\n    const preferences = result.rows.length > 0 ? result.rows[0] : {\n      email: true,\n      push: true,\n      priceAlerts: true,\n      portfolioUpdates: true,\n      marketNews: false,\n      weeklyReports: true\n    };\n\n    res.json({\n      success: true,\n      preferences\n    });\n  } catch (error) {\n    console.error('Error fetching notification preferences:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch notification preferences'\n    });\n  }\n});\n\n// Update notification preferences\nrouter.put('/notifications', createValidationMiddleware(settingsValidationSchemas.notifications), async (req, res) => {\n  const userId = req.user.sub;\n  const { email, push, priceAlerts, portfolioUpdates, marketNews, weeklyReports } = req.body;\n\n  try {\n    // Use UPSERT to create or update preferences\n    const result = await query(`\n      INSERT INTO user_notification_preferences (\n        user_id, \n        email_notifications, \n        push_notifications, \n        price_alerts, \n        portfolio_updates, \n        market_news, \n        weekly_reports,\n        updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())\n      ON CONFLICT (user_id) \n      DO UPDATE SET\n        email_notifications = EXCLUDED.email_notifications,\n        push_notifications = EXCLUDED.push_notifications,\n        price_alerts = EXCLUDED.price_alerts,\n        portfolio_updates = EXCLUDED.portfolio_updates,\n        market_news = EXCLUDED.market_news,\n        weekly_reports = EXCLUDED.weekly_reports,\n        updated_at = NOW()\n      RETURNING \n        email_notifications as email,\n        push_notifications as push,\n        price_alerts as \"priceAlerts\",\n        portfolio_updates as \"portfolioUpdates\",\n        market_news as \"marketNews\",\n        weekly_reports as \"weeklyReports\"\n    `, [userId, email, push, priceAlerts, portfolioUpdates, marketNews, weeklyReports]);\n\n    res.json({\n      success: true,\n      message: 'Notification preferences updated successfully',\n      preferences: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error updating notification preferences:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update notification preferences'\n    });\n  }\n});\n\n// Get theme preferences\nrouter.get('/theme', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    const result = await query(`\n      SELECT \n        dark_mode as \"darkMode\",\n        primary_color as \"primaryColor\",\n        chart_style as \"chartStyle\",\n        layout\n      FROM user_theme_preferences \n      WHERE user_id = $1\n    `, [userId]);\n\n    // If no preferences exist, return defaults\n    const preferences = result.rows.length > 0 ? result.rows[0] : {\n      darkMode: false,\n      primaryColor: '#1976d2',\n      chartStyle: 'candlestick',\n      layout: 'standard'\n    };\n\n    res.json({\n      success: true,\n      preferences\n    });\n  } catch (error) {\n    console.error('Error fetching theme preferences:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch theme preferences'\n    });\n  }\n});\n\n// Update theme preferences\nrouter.put('/theme', createValidationMiddleware(settingsValidationSchemas.theme), async (req, res) => {\n  const userId = req.user.sub;\n  const { darkMode, primaryColor, chartStyle, layout } = req.body;\n\n  try {\n    // Use UPSERT to create or update preferences\n    const result = await query(`\n      INSERT INTO user_theme_preferences (\n        user_id, \n        dark_mode, \n        primary_color, \n        chart_style, \n        layout,\n        updated_at\n      ) VALUES ($1, $2, $3, $4, $5, NOW())\n      ON CONFLICT (user_id) \n      DO UPDATE SET\n        dark_mode = EXCLUDED.dark_mode,\n        primary_color = EXCLUDED.primary_color,\n        chart_style = EXCLUDED.chart_style,\n        layout = EXCLUDED.layout,\n        updated_at = NOW()\n      RETURNING \n        dark_mode as \"darkMode\",\n        primary_color as \"primaryColor\",\n        chart_style as \"chartStyle\",\n        layout\n    `, [userId, darkMode, primaryColor, chartStyle, layout]);\n\n    res.json({\n      success: true,\n      message: 'Theme preferences updated successfully',\n      preferences: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error updating theme preferences:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to update theme preferences'\n    });\n  }\n});\n\n// Security endpoints\nrouter.post('/two-factor/enable', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    console.log('🔐 Enabling 2FA for user:', userId);\n    \n    // Generate a secret for 2FA setup\n    const speakeasy = require('speakeasy');\n    const QRCode = require('qrcode');\n    \n    const secret = speakeasy.generateSecret({\n      name: `Financial Platform (${req.user.email || req.user.username})`,\n      account: req.user.email || req.user.username,\n      issuer: 'Financial Platform',\n      length: 32\n    });\n\n    console.log('🔑 Generated 2FA secret for user');\n\n    // Generate QR code as data URL\n    const qrCodeDataUrl = await QRCode.toDataURL(secret.otpauth_url);\n\n    // Store the secret temporarily (user needs to verify setup)\n    try {\n      await query(`\n        UPDATE users \n        SET \n          two_factor_secret = $2,\n          two_factor_enabled = false,\n          updated_at = NOW()\n        WHERE id = $1\n      `, [userId, secret.base32]);\n      console.log('✅ 2FA secret stored in database, awaiting verification');\n    } catch (dbError) {\n      console.log('⚠️ Database storage failed, using in-memory 2FA setup:', dbError.message);\n      // Continue with 2FA setup even if database fails\n    }\n\n    res.json({\n      success: true,\n      qrCodeUrl: qrCodeDataUrl,\n      manualEntryKey: secret.base32,\n      message: 'Scan the QR code with your authenticator app, then verify with a code to complete setup',\n      note: 'Database storage may be limited - 2FA setup available for this session'\n    });\n  } catch (error) {\n    console.error('❌ Error enabling two-factor auth:', error);\n    \n    // Don't return 500 - provide fallback 2FA setup\n    try {\n      const speakeasy = require('speakeasy');\n      const QRCode = require('qrcode');\n      \n      const secret = speakeasy.generateSecret({\n        name: `Financial Platform (${req.user.email || req.user.username})`,\n        account: req.user.email || req.user.username,\n        issuer: 'Financial Platform',\n        length: 32\n      });\n\n      const qrCodeDataUrl = await QRCode.toDataURL(secret.otpauth_url);\n\n      res.json({\n        success: true,\n        qrCodeUrl: qrCodeDataUrl,\n        manualEntryKey: secret.base32,\n        message: 'Scan the QR code with your authenticator app, then verify with a code to complete setup',\n        note: 'Session-based 2FA setup - database connectivity issue'\n      });\n    } catch (fallbackError) {\n      console.error('❌ Fallback 2FA setup also failed:', fallbackError);\n      res.status(500).json({\n        success: false,\n        error: 'Two-factor authentication setup temporarily unavailable',\n        details: 'Please try again later'\n      });\n    }\n  }\n});\n\n// Verify 2FA setup\nrouter.post('/two-factor/verify', async (req, res) => {\n  const userId = req.user.sub;\n  const { code } = req.body;\n  \n  try {\n    console.log('🔐 Verifying 2FA setup for user:', userId);\n    \n    if (!code) {\n      return res.status(400).json({\n        success: false,\n        error: 'Verification code is required'\n      });\n    }\n    \n    // Get user's 2FA secret\n    const userResult = await query(`\n      SELECT two_factor_secret \n      FROM users \n      WHERE id = $1\n    `, [userId]);\n    \n    if (userResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found'\n      });\n    }\n    \n    const secret = userResult.rows[0].two_factor_secret;\n    if (!secret) {\n      return res.status(400).json({\n        success: false,\n        error: '2FA setup not initiated. Please enable 2FA first.'\n      });\n    }\n    \n    // Verify the code\n    const speakeasy = require('speakeasy');\n    const verified = speakeasy.totp.verify({\n      secret: secret,\n      encoding: 'base32',\n      token: code,\n      window: 2 // Allow some time drift\n    });\n    \n    if (!verified) {\n      console.log('❌ Invalid 2FA code provided');\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid verification code. Please try again.'\n      });\n    }\n    \n    // Generate recovery codes with error handling\n    const crypto = require('crypto');\n    let recoveryCodes = [];\n    try {\n      for (let i = 0; i < 10; i++) {\n        recoveryCodes.push(crypto.randomBytes(4).toString('hex').toUpperCase());\n      }\n    } catch (cryptoError) {\n      console.error('❌ Failed to generate recovery codes:', cryptoError);\n      return res.status(500).json({\n        success: false,\n        error: 'Failed to generate recovery codes',\n        message: 'Unable to generate secure recovery codes',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Enable 2FA and store recovery codes\n    await query(`\n      UPDATE users \n      SET \n        two_factor_enabled = true,\n        recovery_codes = $2,\n        updated_at = NOW()\n      WHERE id = $1\n    `, [userId, JSON.stringify(recoveryCodes)]);\n    \n    console.log('✅ 2FA enabled successfully for user');\n    \n    res.json({\n      success: true,\n      message: '2FA enabled successfully',\n      recoveryCodes: recoveryCodes\n    });\n    \n  } catch (error) {\n    console.error('❌ Error verifying 2FA setup:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to verify 2FA setup',\n      details: error.message\n    });\n  }\n});\n\nrouter.post('/two-factor/disable', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    await query(`\n      UPDATE users \n      SET \n        two_factor_enabled = false,\n        two_factor_secret = NULL,\n        updated_at = NOW()\n      WHERE id = $1\n    `, [userId]);\n\n    res.json({\n      success: true,\n      message: 'Two-factor authentication disabled successfully'\n    });\n  } catch (error) {\n    console.error('Error disabling two-factor auth:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to disable two-factor authentication'\n    });\n  }\n});\n\n// Get 2FA status\nrouter.get('/two-factor/status', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    const result = await query(`\n      SELECT two_factor_enabled, recovery_codes\n      FROM users \n      WHERE id = $1\n    `, [userId]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found'\n      });\n    }\n    \n    const user = result.rows[0];\n    \n    res.json({\n      success: true,\n      enabled: user.two_factor_enabled,\n      hasRecoveryCodes: user.recovery_codes ? true : false\n    });\n  } catch (error) {\n    console.error('Error getting 2FA status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get 2FA status'\n    });\n  }\n});\n\nrouter.get('/recovery-codes', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    // Generate recovery codes with error handling\n    let codes = [];\n    try {\n      for (let i = 0; i < 10; i++) {\n        codes.push(crypto.randomBytes(4).toString('hex').toUpperCase());\n      }\n    } catch (cryptoError) {\n      console.error('❌ Failed to generate new recovery codes:', cryptoError);\n      return res.status(500).json({\n        success: false,\n        error: 'Failed to generate recovery codes',\n        message: 'Unable to generate secure recovery codes',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Hash and store recovery codes\n    const hashedCodes = codes.map(code => crypto.createHash('sha256').update(code).digest('hex'));\n    \n    await query(`\n      UPDATE users \n      SET \n        recovery_codes = $2,\n        updated_at = NOW()\n      WHERE id = $1\n    `, [userId, JSON.stringify(hashedCodes)]);\n\n    res.json({\n      success: true,\n      codes\n    });\n  } catch (error) {\n    console.error('Error generating recovery codes:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to generate recovery codes'\n    });\n  }\n});\n\nrouter.delete('/delete-account', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    // Soft delete - mark account as deleted rather than actually deleting\n    await query(`\n      UPDATE users \n      SET \n        deleted_at = NOW(),\n        email = CONCAT(email, '_deleted_', EXTRACT(EPOCH FROM NOW())),\n        updated_at = NOW()\n      WHERE id = $1\n    `, [userId]);\n\n    res.json({\n      success: true,\n      message: 'Account deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting account:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete account'\n    });\n  }\n});\n\nrouter.post('/revoke-sessions', async (req, res) => {\n  const userId = req.user.sub;\n  \n  try {\n    // In a real implementation, you'd invalidate all JWT tokens except the current one\n    // For now, we'll just return success\n    res.json({\n      success: true,\n      message: 'All other sessions have been revoked'\n    });\n  } catch (error) {\n    console.error('Error revoking sessions:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to revoke sessions'\n    });\n  }\n});\n\n// Debug/admin endpoint to add missing database columns\nrouter.post('/debug/fix-schema', async (req, res) => {\n  console.log('🔧 Database schema fix requested');\n  \n  try {\n    const { transaction } = require('../utils/database');\n    \n    const result = await transaction(async (client) => {\n      const fixes = [];\n      \n      // Add missing columns to users table\n      const userColumns = [\n        { name: 'first_name', type: 'VARCHAR(100)' },\n        { name: 'last_name', type: 'VARCHAR(100)' },\n        { name: 'phone', type: 'VARCHAR(20)' },\n        { name: 'timezone', type: \"VARCHAR(50) DEFAULT 'America/New_York'\" },\n        { name: 'currency', type: \"VARCHAR(3) DEFAULT 'USD'\" },\n        { name: 'two_factor_enabled', type: 'BOOLEAN DEFAULT FALSE' },\n        { name: 'two_factor_secret', type: 'VARCHAR(255)' },\n        { name: 'recovery_codes', type: 'TEXT' },\n        { name: 'deleted_at', type: 'TIMESTAMP' }\n      ];\n      \n      for (const col of userColumns) {\n        try {\n          await client.query(`\n            ALTER TABLE users \n            ADD COLUMN IF NOT EXISTS ${col.name} ${col.type}\n          `);\n          fixes.push(`Added ${col.name} to users table`);\n        } catch (error) {\n          fixes.push(`Failed to add ${col.name}: ${error.message}`);\n        }\n      }\n      \n      // Create user preference tables\n      try {\n        await client.query(`\n          CREATE TABLE IF NOT EXISTS user_notification_preferences (\n            user_id VARCHAR(255) PRIMARY KEY,\n            email_notifications BOOLEAN DEFAULT TRUE,\n            push_notifications BOOLEAN DEFAULT TRUE,\n            price_alerts BOOLEAN DEFAULT TRUE,\n            portfolio_updates BOOLEAN DEFAULT TRUE,\n            market_news BOOLEAN DEFAULT FALSE,\n            weekly_reports BOOLEAN DEFAULT TRUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n          )\n        `);\n        fixes.push('Created user_notification_preferences table');\n      } catch (error) {\n        fixes.push(`Failed to create user_notification_preferences: ${error.message}`);\n      }\n      \n      try {\n        await client.query(`\n          CREATE TABLE IF NOT EXISTS user_theme_preferences (\n            user_id VARCHAR(255) PRIMARY KEY,\n            dark_mode BOOLEAN DEFAULT FALSE,\n            primary_color VARCHAR(20) DEFAULT '#1976d2',\n            chart_style VARCHAR(20) DEFAULT 'candlestick',\n            layout VARCHAR(20) DEFAULT 'standard',\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n          )\n        `);\n        fixes.push('Created user_theme_preferences table');\n      } catch (error) {\n        fixes.push(`Failed to create user_theme_preferences: ${error.message}`);\n      }\n      \n      return fixes;\n    });\n    \n    console.log('✅ Schema fixes applied:', result);\n    res.json({\n      success: true,\n      message: 'Database schema fixes applied',\n      fixes: result,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ Schema fix failed:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to apply schema fixes',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}