{"version":3,"names":["cov_385im1pa8","actualCoverage","logger","s","require","query","RiskManager","constructor","f","riskModels","Map","positionLimits","correlationMatrix","volatilityCache","portfolioRiskMetrics","calculatePositionSize","params","startTime","Date","now","userId","symbol","signal","portfolioValue","riskPerTrade","b","maxPositionSize","volatilityAdjustment","correlationAdjustment","info","substring","signalConfidence","confidence","Error","portfolioComposition","getPortfolioComposition","basePositionSize","calculateBasePositionSize","volatilityAdjustedSize","applyVolatilityAdjustment","correlationAdjustedSize","applyCorrelationAdjustment","concentrationAdjustedSize","applyConcentrationLimits","sectorAdjustedSize","applySectorLimits","finalPositionSize","Math","max","positionValue","riskAmount","riskAssessment","assessPositionRisk","positionSize","result","recommendedSize","maxLoss","adjustments","baseSize","volatilityAdjusted","correlationAdjusted","concentrationAdjusted","sectorAdjusted","riskMetrics","portfolioRisk","positionRisk","concentrationRisk","correlationRisk","overallRiskScore","limits","sectorLimit","getSectorLimit","concentrationLimit","recommendation","generateRiskRecommendation","processingTime","riskScore","error","message","errorStack","stack","confidenceMultiplier","min","strength","strengthMultipliers","volatility","getSymbolVolatility","sqrt","warn","currentSize","calculateCorrelationRisk","currentHolding","proposedHolding","proposedConcentration","maxAllowedHolding","maxAdditionalHolding","maxAdditionalSize","originalSize","adjustedSize","sector","getSymbolSector","currentSectorExposure","calculateSectorExposure","proposedSectorExposure","proposedSectorConcentration","maxAllowedSectorHolding","maxAdditionalSectorHolding","calculatePortfolioRisk","calculatePositionRisk","calculateConcentrationRisk","riskLevel","categorizeRiskLevel","riskFactors","identifyRiskFactors","actions","keyRiskFactors","slice","composition","rows","forEach","row","market_value","cached","get","timestamp","length","prices","map","close","returns","i","dailyReturn","push","meanReturn","reduce","sum","r","variance","pow","set","sectorLimits","positionCount","Object","keys","diversificationScore","totalValue","values","value","symbolValue","concentration","sectorExposure","factors","calculateStopLossTakeProfit","entryPrice","direction","symbolVolatility","atrMultiplier","stopLossDistance","stopLoss","riskRewardRatio","takeProfitDistance","takeProfit","parseFloat","toFixed","maxRiskAmount","defaultStop","defaultTarget","module","exports"],"sources":["riskManager.js"],"sourcesContent":["const logger = require('./logger');\nconst { query } = require('./database');\n\n/**\n * Institutional-Grade Risk Management and Position Sizing System\n * Implements sophisticated risk management algorithms for trading strategies\n */\nclass RiskManager {\n  constructor() {\n    this.riskModels = new Map();\n    this.positionLimits = new Map();\n    this.correlationMatrix = new Map();\n    this.volatilityCache = new Map();\n    this.portfolioRiskMetrics = new Map();\n  }\n\n  /**\n   * Calculate position size based on risk management rules\n   * @param {Object} params - Position sizing parameters\n   * @returns {Object} Position sizing recommendation\n   */\n  async calculatePositionSize(params) {\n    const startTime = Date.now();\n    \n    try {\n      const {\n        userId,\n        symbol,\n        signal,\n        portfolioValue,\n        riskPerTrade = 0.02,\n        maxPositionSize = 0.1,\n        volatilityAdjustment = true,\n        correlationAdjustment = true\n      } = params;\n\n      logger.info('🎯 Calculating position size', {\n        userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n        symbol: symbol,\n        portfolioValue: portfolioValue,\n        riskPerTrade: riskPerTrade,\n        maxPositionSize: maxPositionSize,\n        signalConfidence: signal?.confidence || 'unknown'\n      });\n\n      // Validate inputs\n      if (!userId || !symbol || !portfolioValue || portfolioValue <= 0) {\n        throw new Error('Invalid position sizing parameters');\n      }\n\n      // Get current portfolio composition\n      const portfolioComposition = await this.getPortfolioComposition(userId);\n      \n      // Calculate base position size\n      const basePositionSize = await this.calculateBasePositionSize({\n        portfolioValue,\n        riskPerTrade,\n        maxPositionSize,\n        signal\n      });\n\n      // Apply volatility adjustment\n      const volatilityAdjustedSize = volatilityAdjustment ? \n        await this.applyVolatilityAdjustment(symbol, basePositionSize) : \n        basePositionSize;\n\n      // Apply correlation adjustment\n      const correlationAdjustedSize = correlationAdjustment ? \n        await this.applyCorrelationAdjustment(symbol, portfolioComposition, volatilityAdjustedSize) : \n        volatilityAdjustedSize;\n\n      // Apply concentration limits\n      const concentrationAdjustedSize = await this.applyConcentrationLimits(\n        symbol, \n        portfolioComposition, \n        correlationAdjustedSize, \n        portfolioValue\n      );\n\n      // Apply sector limits\n      const sectorAdjustedSize = await this.applySectorLimits(\n        symbol, \n        portfolioComposition, \n        concentrationAdjustedSize, \n        portfolioValue\n      );\n\n      // Calculate final position metrics\n      const finalPositionSize = Math.max(0, sectorAdjustedSize);\n      const positionValue = finalPositionSize * portfolioValue;\n      const riskAmount = positionValue * riskPerTrade;\n\n      // Generate risk assessment\n      const riskAssessment = await this.assessPositionRisk({\n        symbol,\n        positionSize: finalPositionSize,\n        portfolioValue,\n        portfolioComposition,\n        signal\n      });\n\n      const result = {\n        symbol: symbol,\n        recommendedSize: finalPositionSize,\n        positionValue: positionValue,\n        riskAmount: riskAmount,\n        maxLoss: riskAmount,\n        adjustments: {\n          baseSize: basePositionSize,\n          volatilityAdjusted: volatilityAdjustedSize,\n          correlationAdjusted: correlationAdjustedSize,\n          concentrationAdjusted: concentrationAdjustedSize,\n          sectorAdjusted: sectorAdjustedSize\n        },\n        riskMetrics: {\n          portfolioRisk: riskAssessment.portfolioRisk,\n          positionRisk: riskAssessment.positionRisk,\n          concentrationRisk: riskAssessment.concentrationRisk,\n          correlationRisk: riskAssessment.correlationRisk,\n          overallRiskScore: riskAssessment.overallRiskScore\n        },\n        limits: {\n          maxPositionSize: maxPositionSize,\n          riskPerTrade: riskPerTrade,\n          sectorLimit: await this.getSectorLimit(symbol),\n          concentrationLimit: 0.15 // 15% max concentration\n        },\n        recommendation: this.generateRiskRecommendation(riskAssessment, finalPositionSize),\n        processingTime: Date.now() - startTime\n      };\n\n      logger.info('✅ Position size calculated', {\n        symbol: symbol,\n        recommendedSize: finalPositionSize,\n        positionValue: positionValue,\n        riskScore: riskAssessment.overallRiskScore,\n        processingTime: result.processingTime\n      });\n\n      return result;\n\n    } catch (error) {\n      logger.error('❌ Position size calculation failed', {\n        symbol: params.symbol,\n        error: error.message,\n        errorStack: error.stack,\n        processingTime: Date.now() - startTime\n      });\n      \n      throw new Error(`Position sizing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calculate base position size before adjustments\n   * @param {Object} params - Base calculation parameters\n   * @returns {number} Base position size\n   */\n  async calculateBasePositionSize({ portfolioValue, riskPerTrade, maxPositionSize, signal }) {\n    // Start with risk-based position size\n    let baseSize = riskPerTrade;\n\n    // Adjust for signal confidence\n    if (signal && signal.confidence) {\n      const confidenceMultiplier = Math.min(signal.confidence * 1.5, 1.0);\n      baseSize *= confidenceMultiplier;\n    }\n\n    // Adjust for signal strength\n    if (signal && signal.strength) {\n      const strengthMultipliers = {\n        'weak': 0.5,\n        'moderate': 1.0,\n        'strong': 1.3\n      };\n      baseSize *= strengthMultipliers[signal.strength] || 1.0;\n    }\n\n    // Apply maximum position size limit\n    return Math.min(baseSize, maxPositionSize);\n  }\n\n  /**\n   * Apply volatility adjustment to position size\n   * @param {string} symbol - Stock symbol\n   * @param {number} baseSize - Base position size\n   * @returns {number} Volatility-adjusted position size\n   */\n  async applyVolatilityAdjustment(symbol, baseSize) {\n    try {\n      const volatility = await this.getSymbolVolatility(symbol);\n      \n      // Adjust position size inversely to volatility\n      // Higher volatility = smaller position size\n      const volatilityAdjustment = Math.max(0.3, Math.min(1.5, 1.0 / Math.sqrt(volatility)));\n      \n      return baseSize * volatilityAdjustment;\n      \n    } catch (error) {\n      logger.warn('⚠️ Volatility adjustment failed, using base size', {\n        symbol: symbol,\n        error: error.message\n      });\n      return baseSize;\n    }\n  }\n\n  /**\n   * Apply correlation adjustment to position size\n   * @param {string} symbol - Stock symbol\n   * @param {Object} portfolioComposition - Current portfolio\n   * @param {number} currentSize - Current position size\n   * @returns {number} Correlation-adjusted position size\n   */\n  async applyCorrelationAdjustment(symbol, portfolioComposition, currentSize) {\n    try {\n      const correlationRisk = await this.calculateCorrelationRisk(symbol, portfolioComposition);\n      \n      // Reduce position size if highly correlated with existing positions\n      const correlationAdjustment = Math.max(0.5, 1.0 - (correlationRisk * 0.5));\n      \n      return currentSize * correlationAdjustment;\n      \n    } catch (error) {\n      logger.warn('⚠️ Correlation adjustment failed, using current size', {\n        symbol: symbol,\n        error: error.message\n      });\n      return currentSize;\n    }\n  }\n\n  /**\n   * Apply concentration limits to position size\n   * @param {string} symbol - Stock symbol\n   * @param {Object} portfolioComposition - Current portfolio\n   * @param {number} currentSize - Current position size\n   * @param {number} portfolioValue - Total portfolio value\n   * @returns {number} Concentration-adjusted position size\n   */\n  async applyConcentrationLimits(symbol, portfolioComposition, currentSize, portfolioValue) {\n    const concentrationLimit = 0.15; // 15% maximum concentration\n    \n    // Check if position would exceed concentration limit\n    const currentHolding = portfolioComposition[symbol] || 0;\n    const proposedHolding = currentHolding + (currentSize * portfolioValue);\n    const proposedConcentration = proposedHolding / portfolioValue;\n    \n    if (proposedConcentration > concentrationLimit) {\n      const maxAllowedHolding = portfolioValue * concentrationLimit;\n      const maxAdditionalHolding = maxAllowedHolding - currentHolding;\n      const maxAdditionalSize = Math.max(0, maxAdditionalHolding / portfolioValue);\n      \n      logger.info('⚠️ Concentration limit applied', {\n        symbol: symbol,\n        originalSize: currentSize,\n        adjustedSize: maxAdditionalSize,\n        concentrationLimit: concentrationLimit,\n        proposedConcentration: proposedConcentration\n      });\n      \n      return maxAdditionalSize;\n    }\n    \n    return currentSize;\n  }\n\n  /**\n   * Apply sector limits to position size\n   * @param {string} symbol - Stock symbol\n   * @param {Object} portfolioComposition - Current portfolio\n   * @param {number} currentSize - Current position size\n   * @param {number} portfolioValue - Total portfolio value\n   * @returns {number} Sector-adjusted position size\n   */\n  async applySectorLimits(symbol, portfolioComposition, currentSize, portfolioValue) {\n    try {\n      const sector = await this.getSymbolSector(symbol);\n      const sectorLimit = await this.getSectorLimit(symbol);\n      \n      // Calculate current sector exposure\n      const currentSectorExposure = await this.calculateSectorExposure(sector, portfolioComposition);\n      const proposedSectorExposure = currentSectorExposure + (currentSize * portfolioValue);\n      const proposedSectorConcentration = proposedSectorExposure / portfolioValue;\n      \n      if (proposedSectorConcentration > sectorLimit) {\n        const maxAllowedSectorHolding = portfolioValue * sectorLimit;\n        const maxAdditionalSectorHolding = maxAllowedSectorHolding - currentSectorExposure;\n        const maxAdditionalSize = Math.max(0, maxAdditionalSectorHolding / portfolioValue);\n        \n        logger.info('⚠️ Sector limit applied', {\n          symbol: symbol,\n          sector: sector,\n          originalSize: currentSize,\n          adjustedSize: maxAdditionalSize,\n          sectorLimit: sectorLimit,\n          proposedSectorConcentration: proposedSectorConcentration\n        });\n        \n        return maxAdditionalSize;\n      }\n      \n      return currentSize;\n      \n    } catch (error) {\n      logger.warn('⚠️ Sector limit adjustment failed, using current size', {\n        symbol: symbol,\n        error: error.message\n      });\n      return currentSize;\n    }\n  }\n\n  /**\n   * Assess overall position risk\n   * @param {Object} params - Risk assessment parameters\n   * @returns {Object} Risk assessment\n   */\n  async assessPositionRisk({ symbol, positionSize, portfolioValue, portfolioComposition, signal }) {\n    try {\n      const portfolioRisk = await this.calculatePortfolioRisk(portfolioComposition);\n      const positionRisk = await this.calculatePositionRisk(symbol, positionSize);\n      const concentrationRisk = await this.calculateConcentrationRisk(symbol, portfolioComposition);\n      const correlationRisk = await this.calculateCorrelationRisk(symbol, portfolioComposition);\n      \n      // Calculate overall risk score (0-1, higher is riskier)\n      const overallRiskScore = Math.min(1.0, \n        (portfolioRisk * 0.3) + \n        (positionRisk * 0.3) + \n        (concentrationRisk * 0.2) + \n        (correlationRisk * 0.2)\n      );\n      \n      return {\n        portfolioRisk,\n        positionRisk,\n        concentrationRisk,\n        correlationRisk,\n        overallRiskScore,\n        riskLevel: this.categorizeRiskLevel(overallRiskScore),\n        riskFactors: this.identifyRiskFactors({\n          portfolioRisk,\n          positionRisk,\n          concentrationRisk,\n          correlationRisk\n        })\n      };\n      \n    } catch (error) {\n      logger.error('❌ Risk assessment failed', {\n        symbol: symbol,\n        error: error.message\n      });\n      \n      // Return conservative risk assessment\n      return {\n        portfolioRisk: 0.8,\n        positionRisk: 0.8,\n        concentrationRisk: 0.8,\n        correlationRisk: 0.8,\n        overallRiskScore: 0.8,\n        riskLevel: 'high',\n        riskFactors: ['risk_calculation_error']\n      };\n    }\n  }\n\n  /**\n   * Generate risk recommendation based on assessment\n   * @param {Object} riskAssessment - Risk assessment results\n   * @param {number} positionSize - Recommended position size\n   * @returns {Object} Risk recommendation\n   */\n  generateRiskRecommendation(riskAssessment, positionSize) {\n    const { overallRiskScore, riskLevel, riskFactors } = riskAssessment;\n    \n    let recommendation = 'proceed';\n    let message = 'Position size is within acceptable risk limits';\n    let actions = [];\n    \n    if (overallRiskScore > 0.8) {\n      recommendation = 'reject';\n      message = 'Position exceeds risk tolerance - consider reducing size or avoiding trade';\n      actions = ['reduce_position_size', 'wait_for_better_entry', 'diversify_portfolio'];\n    } else if (overallRiskScore > 0.6) {\n      recommendation = 'caution';\n      message = 'Position has elevated risk - proceed with caution';\n      actions = ['monitor_closely', 'consider_stop_loss', 'review_correlation'];\n    } else if (positionSize === 0) {\n      recommendation = 'reject';\n      message = 'Position size reduced to zero due to risk limits';\n      actions = ['improve_diversification', 'wait_for_better_opportunity'];\n    }\n    \n    return {\n      recommendation,\n      message,\n      actions,\n      riskLevel,\n      riskScore: overallRiskScore,\n      keyRiskFactors: riskFactors.slice(0, 3)\n    };\n  }\n\n  // Helper methods for risk calculations\n  \n  async getPortfolioComposition(userId) {\n    try {\n      const result = await query(`\n        SELECT symbol, market_value, sector\n        FROM portfolio_holdings ph\n        LEFT JOIN symbols s ON ph.symbol = s.symbol\n        WHERE ph.user_id = $1\n      `, [userId]);\n      \n      const composition = {};\n      result.rows.forEach(row => {\n        composition[row.symbol] = row.market_value || 0;\n      });\n      \n      return composition;\n      \n    } catch (error) {\n      logger.error('❌ Failed to get portfolio composition', {\n        userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n        error: error.message\n      });\n      return {};\n    }\n  }\n\n  async getSymbolVolatility(symbol) {\n    try {\n      // Try to get from cache first\n      const cached = this.volatilityCache.get(symbol);\n      if (cached && (Date.now() - cached.timestamp) < 3600000) { // 1 hour cache\n        return cached.volatility;\n      }\n      \n      // Calculate volatility from recent price data\n      const result = await query(`\n        SELECT close, date \n        FROM price_daily \n        WHERE symbol = $1 \n        ORDER BY date DESC \n        LIMIT 30\n      `, [symbol]);\n      \n      if (result.rows.length < 20) {\n        return 0.2; // Default volatility\n      }\n      \n      const prices = result.rows.map(row => row.close);\n      const returns = [];\n      \n      for (let i = 1; i < prices.length; i++) {\n        const dailyReturn = (prices[i] - prices[i-1]) / prices[i-1];\n        returns.push(dailyReturn);\n      }\n      \n      const meanReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n      const variance = returns.reduce((sum, r) => sum + Math.pow(r - meanReturn, 2), 0) / returns.length;\n      const volatility = Math.sqrt(variance * 252); // Annualized volatility\n      \n      // Cache the result\n      this.volatilityCache.set(symbol, {\n        volatility: volatility,\n        timestamp: Date.now()\n      });\n      \n      return volatility;\n      \n    } catch (error) {\n      logger.warn('⚠️ Volatility calculation failed, using default', {\n        symbol: symbol,\n        error: error.message\n      });\n      return 0.2; // Default volatility\n    }\n  }\n\n  async getSymbolSector(symbol) {\n    try {\n      const result = await query(`\n        SELECT sector \n        FROM symbols \n        WHERE symbol = $1\n      `, [symbol]);\n      \n      return result.rows[0]?.sector || 'Other';\n      \n    } catch (error) {\n      logger.warn('⚠️ Sector lookup failed', {\n        symbol: symbol,\n        error: error.message\n      });\n      return 'Other';\n    }\n  }\n\n  async getSectorLimit(symbol) {\n    const sector = await this.getSymbolSector(symbol);\n    \n    // Sector-specific limits\n    const sectorLimits = {\n      'Technology': 0.30,\n      'Healthcare': 0.25,\n      'Financial Services': 0.20,\n      'Consumer Discretionary': 0.20,\n      'Industrials': 0.15,\n      'Energy': 0.10,\n      'Materials': 0.10,\n      'Real Estate': 0.10,\n      'Utilities': 0.10,\n      'Consumer Staples': 0.15,\n      'Communication Services': 0.15,\n      'Other': 0.05\n    };\n    \n    return sectorLimits[sector] || 0.05;\n  }\n\n  async calculateSectorExposure(sector, portfolioComposition) {\n    // This would need to be implemented with sector data\n    // For now, return simplified calculation\n    return 0;\n  }\n\n  async calculatePortfolioRisk(portfolioComposition) {\n    // Simplified portfolio risk calculation\n    const positionCount = Object.keys(portfolioComposition).length;\n    const diversificationScore = Math.min(1.0, positionCount / 20); // 20 positions = well diversified\n    \n    return Math.max(0.1, 1.0 - diversificationScore);\n  }\n\n  async calculatePositionRisk(symbol, positionSize) {\n    const volatility = await this.getSymbolVolatility(symbol);\n    return Math.min(1.0, (positionSize * volatility) / 0.1); // Risk increases with position size and volatility\n  }\n\n  async calculateConcentrationRisk(symbol, portfolioComposition) {\n    const totalValue = Object.values(portfolioComposition).reduce((sum, value) => sum + value, 0);\n    const symbolValue = portfolioComposition[symbol] || 0;\n    const concentration = totalValue > 0 ? symbolValue / totalValue : 0;\n    \n    return Math.min(1.0, concentration / 0.05); // Risk increases with concentration\n  }\n\n  async calculateCorrelationRisk(symbol, portfolioComposition) {\n    // Simplified correlation risk - would need correlation matrix in production\n    const sector = await this.getSymbolSector(symbol);\n    const sectorExposure = await this.calculateSectorExposure(sector, portfolioComposition);\n    \n    return Math.min(1.0, sectorExposure / 0.3); // Risk increases with sector concentration\n  }\n\n  categorizeRiskLevel(riskScore) {\n    if (riskScore < 0.3) return 'low';\n    if (riskScore < 0.6) return 'moderate';\n    if (riskScore < 0.8) return 'high';\n    return 'extreme';\n  }\n\n  identifyRiskFactors({ portfolioRisk, positionRisk, concentrationRisk, correlationRisk }) {\n    const factors = [];\n    \n    if (portfolioRisk > 0.6) factors.push('insufficient_diversification');\n    if (positionRisk > 0.6) factors.push('high_position_volatility');\n    if (concentrationRisk > 0.6) factors.push('position_concentration');\n    if (correlationRisk > 0.6) factors.push('sector_correlation');\n    \n    return factors;\n  }\n\n  /**\n   * Calculate stop loss and take profit levels\n   * @param {Object} params - Stop loss calculation parameters\n   * @returns {Object} Stop loss and take profit levels\n   */\n  async calculateStopLossTakeProfit(params) {\n    const {\n      symbol,\n      entryPrice,\n      direction, // 'long' or 'short'\n      volatility,\n      signal,\n      riskPerTrade = 0.02\n    } = params;\n\n    try {\n      const symbolVolatility = volatility || await this.getSymbolVolatility(symbol);\n      \n      // Calculate ATR-based stop loss\n      const atrMultiplier = signal?.strength === 'strong' ? 1.5 : 2.0;\n      const stopLossDistance = symbolVolatility * atrMultiplier;\n      \n      // Calculate stop loss levels\n      const stopLoss = direction === 'long' ? \n        entryPrice * (1 - stopLossDistance) : \n        entryPrice * (1 + stopLossDistance);\n      \n      // Calculate take profit (risk-reward ratio)\n      const riskRewardRatio = signal?.confidence > 0.8 ? 2.5 : 2.0;\n      const takeProfitDistance = stopLossDistance * riskRewardRatio;\n      \n      const takeProfit = direction === 'long' ? \n        entryPrice * (1 + takeProfitDistance) : \n        entryPrice * (1 - takeProfitDistance);\n      \n      return {\n        stopLoss: parseFloat(stopLoss.toFixed(4)),\n        takeProfit: parseFloat(takeProfit.toFixed(4)),\n        stopLossDistance: parseFloat(stopLossDistance.toFixed(4)),\n        takeProfitDistance: parseFloat(takeProfitDistance.toFixed(4)),\n        riskRewardRatio: riskRewardRatio,\n        maxRiskAmount: entryPrice * riskPerTrade\n      };\n      \n    } catch (error) {\n      logger.error('❌ Stop loss/take profit calculation failed', {\n        symbol: symbol,\n        error: error.message\n      });\n      \n      // Return conservative levels\n      const defaultStop = direction === 'long' ? \n        entryPrice * 0.95 : \n        entryPrice * 1.05;\n      \n      const defaultTarget = direction === 'long' ? \n        entryPrice * 1.10 : \n        entryPrice * 0.90;\n      \n      return {\n        stopLoss: parseFloat(defaultStop.toFixed(4)),\n        takeProfit: parseFloat(defaultTarget.toFixed(4)),\n        stopLossDistance: 0.05,\n        takeProfitDistance: 0.10,\n        riskRewardRatio: 2.0,\n        maxRiskAmount: entryPrice * riskPerTrade\n      };\n    }\n  }\n}\n\nmodule.exports = RiskManager;"],"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","ignoreList":[]}