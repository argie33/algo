b7cda90d3eb386a6f1de16fffccc9246
/* istanbul ignore next */
function cov_z9f6ej9kb() {
  var path = "/home/stocks/algo/webapp/lambda/routes/realTimeData.js";
  var hash = "8d3f4bc3d56173763a0ecc2a7e30402e1e677ec8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/realTimeData.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "1": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 31
        }
      },
      "2": {
        start: {
          line: 6,
          column: 34
        },
        end: {
          line: 6,
          column: 82
        }
      },
      "3": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "4": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "5": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "8": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 74
        }
      },
      "10": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 65
        }
      },
      "11": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 80
        }
      },
      "12": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 18
        }
      },
      "13": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "14": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 71,
          column: 3
        }
      },
      "15": {
        start: {
          line: 38,
          column: 2
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "16": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "17": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "18": {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "19": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "20": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 64
        }
      },
      "21": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 77
        }
      },
      "22": {
        start: {
          line: 52,
          column: 60
        },
        end: {
          line: 52,
          column: 69
        }
      },
      "23": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "24": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 60,
          column: 7
        }
      },
      "25": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 53
        }
      },
      "26": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "27": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "28": {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "29": {
        start: {
          line: 76,
          column: 35
        },
        end: {
          line: 76,
          column: 43
        }
      },
      "30": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "31": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "32": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 40
        }
      },
      "33": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 57
        }
      },
      "34": {
        start: {
          line: 89,
          column: 25
        },
        end: {
          line: 89,
          column: 77
        }
      },
      "35": {
        start: {
          line: 89,
          column: 60
        },
        end: {
          line: 89,
          column: 69
        }
      },
      "36": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 96,
          column: 7
        }
      },
      "37": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 55
        }
      },
      "38": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 105,
          column: 7
        }
      },
      "39": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 140,
          column: 3
        }
      },
      "40": {
        start: {
          line: 111,
          column: 2
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "41": {
        start: {
          line: 112,
          column: 35
        },
        end: {
          line: 112,
          column: 43
        }
      },
      "42": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "43": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "44": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 40
        }
      },
      "45": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 44
        }
      },
      "46": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "47": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "48": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 138,
          column: 7
        }
      },
      "49": {
        start: {
          line: 143,
          column: 0
        },
        end: {
          line: 181,
          column: 3
        }
      },
      "50": {
        start: {
          line: 144,
          column: 2
        },
        end: {
          line: 180,
          column: 3
        }
      },
      "51": {
        start: {
          line: 145,
          column: 23
        },
        end: {
          line: 145,
          column: 33
        }
      },
      "52": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 36
        }
      },
      "53": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 40
        }
      },
      "54": {
        start: {
          line: 149,
          column: 21
        },
        end: {
          line: 149,
          column: 62
        }
      },
      "55": {
        start: {
          line: 150,
          column: 23
        },
        end: {
          line: 150,
          column: 83
        }
      },
      "56": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "57": {
        start: {
          line: 153,
          column: 6
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "58": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 170,
          column: 7
        }
      },
      "59": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 56
        }
      },
      "60": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 179,
          column: 7
        }
      },
      "61": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 204,
          column: 3
        }
      },
      "62": {
        start: {
          line: 185,
          column: 2
        },
        end: {
          line: 203,
          column: 3
        }
      },
      "63": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 40
        }
      },
      "64": {
        start: {
          line: 187,
          column: 19
        },
        end: {
          line: 187,
          column: 48
        }
      },
      "65": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 193,
          column: 7
        }
      },
      "66": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 196,
          column: 52
        }
      },
      "67": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 202,
          column: 7
        }
      },
      "68": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 227,
          column: 3
        }
      },
      "69": {
        start: {
          line: 208,
          column: 2
        },
        end: {
          line: 226,
          column: 3
        }
      },
      "70": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 40
        }
      },
      "71": {
        start: {
          line: 210,
          column: 26
        },
        end: {
          line: 210,
          column: 52
        }
      },
      "72": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 216,
          column: 7
        }
      },
      "73": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 219,
          column: 59
        }
      },
      "74": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 225,
          column: 7
        }
      },
      "75": {
        start: {
          line: 230,
          column: 0
        },
        end: {
          line: 257,
          column: 3
        }
      },
      "76": {
        start: {
          line: 231,
          column: 2
        },
        end: {
          line: 256,
          column: 3
        }
      },
      "77": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 40
        }
      },
      "78": {
        start: {
          line: 233,
          column: 19
        },
        end: {
          line: 233,
          column: 46
        }
      },
      "79": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "80": {
        start: {
          line: 236,
          column: 6
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "81": {
        start: {
          line: 241,
          column: 6
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "82": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 248,
          column: 58
        }
      },
      "83": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 255,
          column: 7
        }
      },
      "84": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 280,
          column: 3
        }
      },
      "85": {
        start: {
          line: 261,
          column: 2
        },
        end: {
          line: 279,
          column: 3
        }
      },
      "86": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 40
        }
      },
      "87": {
        start: {
          line: 263,
          column: 4
        },
        end: {
          line: 263,
          column: 25
        }
      },
      "88": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 269,
          column: 7
        }
      },
      "89": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 272,
          column: 56
        }
      },
      "90": {
        start: {
          line: 273,
          column: 4
        },
        end: {
          line: 278,
          column: 7
        }
      },
      "91": {
        start: {
          line: 282,
          column: 0
        },
        end: {
          line: 282,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 12,
            column: 28
          }
        },
        loc: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 34
          }
        },
        loc: {
          start: {
            line: 22,
            column: 43
          },
          end: {
            line: 25,
            column: 7
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 25
          }
        },
        loc: {
          start: {
            line: 37,
            column: 44
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 55
          },
          end: {
            line: 52,
            column: 56
          }
        },
        loc: {
          start: {
            line: 52,
            column: 60
          },
          end: {
            line: 52,
            column: 69
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 26
          },
          end: {
            line: 74,
            column: 27
          }
        },
        loc: {
          start: {
            line: 74,
            column: 46
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 89,
            column: 55
          },
          end: {
            line: 89,
            column: 56
          }
        },
        loc: {
          start: {
            line: 89,
            column: 60
          },
          end: {
            line: 89,
            column: 69
          }
        },
        line: 89
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 110,
            column: 28
          },
          end: {
            line: 110,
            column: 29
          }
        },
        loc: {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 110
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 143,
            column: 28
          },
          end: {
            line: 143,
            column: 29
          }
        },
        loc: {
          start: {
            line: 143,
            column: 48
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 143
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 184,
            column: 22
          },
          end: {
            line: 184,
            column: 23
          }
        },
        loc: {
          start: {
            line: 184,
            column: 42
          },
          end: {
            line: 204,
            column: 1
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 207,
            column: 30
          }
        },
        loc: {
          start: {
            line: 207,
            column: 49
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 207
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 230,
            column: 22
          },
          end: {
            line: 230,
            column: 23
          }
        },
        loc: {
          start: {
            line: 230,
            column: 42
          },
          end: {
            line: 257,
            column: 1
          }
        },
        line: 230
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 28
          }
        },
        loc: {
          start: {
            line: 260,
            column: 47
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 260
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 18
          }
        }, {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 41,
            column: 51
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 16
          }
        }, {
          start: {
            line: 78,
            column: 20
          },
          end: {
            line: 78,
            column: 43
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 16
          }
        }, {
          start: {
            line: 114,
            column: 20
          },
          end: {
            line: 114,
            column: 43
          }
        }],
        line: 114
      },
      "7": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 22
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 146,
            column: 22
          }
        }],
        line: 146
      },
      "8": {
        loc: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 152,
            column: 44
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        }, {
          start: {
            line: 240,
            column: 11
          },
          end: {
            line: 245,
            column: 5
          }
        }],
        line: 235
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8d3f4bc3d56173763a0ecc2a7e30402e1e677ec8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z9f6ej9kb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z9f6ej9kb();
// Real-Time Data API Routes
// Provides WebSocket management and real-time market data streaming

const express =
/* istanbul ignore next */
(cov_z9f6ej9kb().s[0]++, require('express'));
const router =
/* istanbul ignore next */
(cov_z9f6ej9kb().s[1]++, express.Router());
const RealTimeMarketDataService =
/* istanbul ignore next */
(cov_z9f6ej9kb().s[2]++, require('../services/realTimeMarketDataService'));

// Global real-time service instance
let realTimeService =
/* istanbul ignore next */
(cov_z9f6ej9kb().s[3]++, null);

// Initialize real-time service with lazy loading
/* istanbul ignore next */
cov_z9f6ej9kb().s[4]++;
const getRealTimeService = () => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[0]++;
  cov_z9f6ej9kb().s[5]++;
  if (!realTimeService) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().b[0][0]++;
    cov_z9f6ej9kb().s[6]++;
    try {
      /* istanbul ignore next */
      cov_z9f6ej9kb().s[7]++;
      realTimeService = new RealTimeMarketDataService({
        enabledProviders: ['alpaca', 'polygon', 'finnhub'],
        primaryProvider: 'alpaca',
        fallbackProviders: ['polygon', 'finnhub']
      });

      // Setup global event handlers
      /* istanbul ignore next */
      cov_z9f6ej9kb().s[8]++;
      realTimeService.on('data', data => {
        /* istanbul ignore next */
        cov_z9f6ej9kb().f[1]++;
        cov_z9f6ej9kb().s[9]++;
        // Could emit to WebSocket clients here
        console.log(`📊 Real-time data: ${data.type} for ${data.symbol}`);
      });
      /* istanbul ignore next */
      cov_z9f6ej9kb().s[10]++;
      console.log('✅ Real-time market data service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().s[11]++;
      console.error('❌ Failed to initialize real-time service:', error.message);
      /* istanbul ignore next */
      cov_z9f6ej9kb().s[12]++;
      throw error;
    }
  } else
  /* istanbul ignore next */
  {
    cov_z9f6ej9kb().b[0][1]++;
  }
  cov_z9f6ej9kb().s[13]++;
  return realTimeService;
};

// Connect to providers
/* istanbul ignore next */
cov_z9f6ej9kb().s[14]++;
router.post('/connect', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[2]++;
  cov_z9f6ej9kb().s[15]++;
  try {
    const {
      providers
    } =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[16]++, req.body);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[2][0]++, !providers) ||
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[2][1]++, typeof providers !== 'object')) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[1][0]++;
      cov_z9f6ej9kb().s[18]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid providers configuration',
        message: 'Providers object with API keys required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_z9f6ej9kb().b[1][1]++;
    }
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[19]++, getRealTimeService());
    const results =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[20]++, await service.connectAllProviders(providers));
    const successCount =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[21]++, Object.values(results).filter(r => {
      /* istanbul ignore next */
      cov_z9f6ej9kb().f[3]++;
      cov_z9f6ej9kb().s[22]++;
      return r.success;
    }).length);
    const totalCount =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[23]++, Object.keys(results).length);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[24]++;
    res.json({
      success: successCount > 0,
      message: `Connected to ${successCount}/${totalCount} providers`,
      results,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[25]++;
    console.error('Real-time connect error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[26]++;
    res.status(500).json({
      success: false,
      error: 'Failed to connect to real-time providers',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Subscribe to symbols
/* istanbul ignore next */
cov_z9f6ej9kb().s[27]++;
router.post('/subscribe', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[4]++;
  cov_z9f6ej9kb().s[28]++;
  try {
    const {
      symbols,
      providers
    } =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[29]++, req.body);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[4][0]++, !symbols) ||
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[4][1]++, !Array.isArray(symbols))) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[3][0]++;
      cov_z9f6ej9kb().s[31]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid symbols',
        message: 'Array of symbols required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_z9f6ej9kb().b[3][1]++;
    }
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[32]++, getRealTimeService());
    const results =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[33]++, service.subscribe(symbols, providers));
    const successCount =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[34]++, Object.values(results).filter(r => {
      /* istanbul ignore next */
      cov_z9f6ej9kb().f[5]++;
      cov_z9f6ej9kb().s[35]++;
      return r.success;
    }).length);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[36]++;
    res.json({
      success: successCount > 0,
      message: `Subscribed to ${successCount}/${symbols.length} symbols`,
      results,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[37]++;
    console.error('Real-time subscribe error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[38]++;
    res.status(500).json({
      success: false,
      error: 'Failed to subscribe to symbols',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Unsubscribe from symbols
/* istanbul ignore next */
cov_z9f6ej9kb().s[39]++;
router.post('/unsubscribe', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[6]++;
  cov_z9f6ej9kb().s[40]++;
  try {
    const {
      symbols,
      providers
    } =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[41]++, req.body);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[6][0]++, !symbols) ||
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[6][1]++, !Array.isArray(symbols))) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[5][0]++;
      cov_z9f6ej9kb().s[43]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid symbols',
        message: 'Array of symbols required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_z9f6ej9kb().b[5][1]++;
    }
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[44]++, getRealTimeService());
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[45]++;
    service.unsubscribe(symbols, providers);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[46]++;
    res.json({
      success: true,
      message: `Unsubscribed from ${symbols.length} symbols`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[47]++;
    console.error('Real-time unsubscribe error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[48]++;
    res.status(500).json({
      success: false,
      error: 'Failed to unsubscribe from symbols',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Get last data for symbol
/* istanbul ignore next */
cov_z9f6ej9kb().s[49]++;
router.get('/data/:symbol', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[7]++;
  cov_z9f6ej9kb().s[50]++;
  try {
    const {
      symbol
    } =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[51]++, req.params);
    const {
      count =
      /* istanbul ignore next */
      (cov_z9f6ej9kb().b[7][0]++, 50)
    } =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[52]++, req.query);
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[53]++, getRealTimeService());
    const lastData =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[54]++, service.getLastData(symbol.toUpperCase()));
    const recentData =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[55]++, service.getRecentData(symbol.toUpperCase(), parseInt(count)));
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[9][0]++, !lastData) &&
    /* istanbul ignore next */
    (cov_z9f6ej9kb().b[9][1]++, recentData.length === 0)) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[8][0]++;
      cov_z9f6ej9kb().s[57]++;
      return res.status(404).json({
        success: false,
        error: 'No data available',
        message: `No real-time data found for ${symbol}`,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_z9f6ej9kb().b[8][1]++;
    }
    cov_z9f6ej9kb().s[58]++;
    res.json({
      success: true,
      data: {
        symbol: symbol.toUpperCase(),
        lastData,
        recentData,
        count: recentData.length
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[59]++;
    console.error('Real-time data fetch error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[60]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch real-time data',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Get connection status
/* istanbul ignore next */
cov_z9f6ej9kb().s[61]++;
router.get('/status', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[8]++;
  cov_z9f6ej9kb().s[62]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[63]++, getRealTimeService());
    const status =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[64]++, service.getConnectionStatus());
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[65]++;
    res.json({
      success: true,
      data: status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[66]++;
    console.error('Real-time status error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[67]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get connection status',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Get subscriptions
/* istanbul ignore next */
cov_z9f6ej9kb().s[68]++;
router.get('/subscriptions', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[9]++;
  cov_z9f6ej9kb().s[69]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[70]++, getRealTimeService());
    const subscriptions =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[71]++, service.getSubscriptions());
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[72]++;
    res.json({
      success: true,
      data: subscriptions,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[73]++;
    console.error('Real-time subscriptions error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[74]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get subscriptions',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Health check
/* istanbul ignore next */
cov_z9f6ej9kb().s[75]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[10]++;
  cov_z9f6ej9kb().s[76]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[77]++, getRealTimeService());
    const health =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[78]++, await service.healthCheck());
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[79]++;
    if (health.healthy) {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[10][0]++;
      cov_z9f6ej9kb().s[80]++;
      res.json({
        success: true,
        ...health
      });
    } else {
      /* istanbul ignore next */
      cov_z9f6ej9kb().b[10][1]++;
      cov_z9f6ej9kb().s[81]++;
      res.status(503).json({
        success: false,
        ...health
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[82]++;
    console.error('Real-time health check error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[83]++;
    res.status(503).json({
      success: false,
      healthy: false,
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Disconnect all providers
/* istanbul ignore next */
cov_z9f6ej9kb().s[84]++;
router.post('/disconnect', async (req, res) => {
  /* istanbul ignore next */
  cov_z9f6ej9kb().f[11]++;
  cov_z9f6ej9kb().s[85]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_z9f6ej9kb().s[86]++, getRealTimeService());
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[87]++;
    service.disconnect();
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[88]++;
    res.json({
      success: true,
      message: 'Disconnected from all real-time providers',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[89]++;
    console.error('Real-time disconnect error:', error);
    /* istanbul ignore next */
    cov_z9f6ej9kb().s[90]++;
    res.status(500).json({
      success: false,
      error: 'Failed to disconnect from providers',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});
/* istanbul ignore next */
cov_z9f6ej9kb().s[91]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,