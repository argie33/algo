{"version":3,"names":["cov_z9f6ej9kb","actualCoverage","express","s","require","router","Router","RealTimeMarketDataService","realTimeService","getRealTimeService","f","b","enabledProviders","primaryProvider","fallbackProviders","on","data","console","log","type","symbol","error","message","post","req","res","providers","body","status","json","success","service","results","connectAllProviders","successCount","Object","values","filter","r","length","totalCount","keys","timestamp","Date","toISOString","symbols","Array","isArray","subscribe","unsubscribe","get","params","count","query","lastData","getLastData","toUpperCase","recentData","getRecentData","parseInt","getConnectionStatus","subscriptions","getSubscriptions","health","healthCheck","healthy","disconnect","module","exports"],"sources":["realTimeData.js"],"sourcesContent":["// Real-Time Data API Routes\n// Provides WebSocket management and real-time market data streaming\n\nconst express = require('express');\nconst router = express.Router();\nconst RealTimeMarketDataService = require('../services/realTimeMarketDataService');\n\n// Global real-time service instance\nlet realTimeService = null;\n\n// Initialize real-time service with lazy loading\nconst getRealTimeService = () => {\n  if (!realTimeService) {\n    try {\n      realTimeService = new RealTimeMarketDataService({\n        enabledProviders: ['alpaca', 'polygon', 'finnhub'],\n        primaryProvider: 'alpaca',\n        fallbackProviders: ['polygon', 'finnhub']\n      });\n      \n      // Setup global event handlers\n      realTimeService.on('data', (data) => {\n        // Could emit to WebSocket clients here\n        console.log(`📊 Real-time data: ${data.type} for ${data.symbol}`);\n      });\n      \n      console.log('✅ Real-time market data service initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize real-time service:', error.message);\n      throw error;\n    }\n  }\n  return realTimeService;\n};\n\n// Connect to providers\nrouter.post('/connect', async (req, res) => {\n  try {\n    const { providers } = req.body;\n    \n    if (!providers || typeof providers !== 'object') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid providers configuration',\n        message: 'Providers object with API keys required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    const results = await service.connectAllProviders(providers);\n    \n    const successCount = Object.values(results).filter(r => r.success).length;\n    const totalCount = Object.keys(results).length;\n    \n    res.json({\n      success: successCount > 0,\n      message: `Connected to ${successCount}/${totalCount} providers`,\n      results,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time connect error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to connect to real-time providers',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Subscribe to symbols\nrouter.post('/subscribe', async (req, res) => {\n  try {\n    const { symbols, providers } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid symbols',\n        message: 'Array of symbols required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    const results = service.subscribe(symbols, providers);\n    \n    const successCount = Object.values(results).filter(r => r.success).length;\n    \n    res.json({\n      success: successCount > 0,\n      message: `Subscribed to ${successCount}/${symbols.length} symbols`,\n      results,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time subscribe error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to subscribe to symbols',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Unsubscribe from symbols\nrouter.post('/unsubscribe', async (req, res) => {\n  try {\n    const { symbols, providers } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid symbols',\n        message: 'Array of symbols required'\n      });\n    }\n    \n    const service = getRealTimeService();\n    service.unsubscribe(symbols, providers);\n    \n    res.json({\n      success: true,\n      message: `Unsubscribed from ${symbols.length} symbols`,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time unsubscribe error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to unsubscribe from symbols',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get last data for symbol\nrouter.get('/data/:symbol', async (req, res) => {\n  try {\n    const { symbol } = req.params;\n    const { count = 50 } = req.query;\n    \n    const service = getRealTimeService();\n    const lastData = service.getLastData(symbol.toUpperCase());\n    const recentData = service.getRecentData(symbol.toUpperCase(), parseInt(count));\n    \n    if (!lastData && recentData.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No data available',\n        message: `No real-time data found for ${symbol}`,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        symbol: symbol.toUpperCase(),\n        lastData,\n        recentData,\n        count: recentData.length\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time data fetch error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch real-time data',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get connection status\nrouter.get('/status', async (req, res) => {\n  try {\n    const service = getRealTimeService();\n    const status = service.getConnectionStatus();\n    \n    res.json({\n      success: true,\n      data: status,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time status error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get connection status',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get subscriptions\nrouter.get('/subscriptions', async (req, res) => {\n  try {\n    const service = getRealTimeService();\n    const subscriptions = service.getSubscriptions();\n    \n    res.json({\n      success: true,\n      data: subscriptions,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time subscriptions error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get subscriptions',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check\nrouter.get('/health', async (req, res) => {\n  try {\n    const service = getRealTimeService();\n    const health = await service.healthCheck();\n    \n    if (health.healthy) {\n      res.json({\n        success: true,\n        ...health\n      });\n    } else {\n      res.status(503).json({\n        success: false,\n        ...health\n      });\n    }\n    \n  } catch (error) {\n    console.error('Real-time health check error:', error);\n    res.status(503).json({\n      success: false,\n      healthy: false,\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Disconnect all providers\nrouter.post('/disconnect', async (req, res) => {\n  try {\n    const service = getRealTimeService();\n    service.disconnect();\n    \n    res.json({\n      success: true,\n      message: 'Disconnected from all real-time providers',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Real-time disconnect error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to disconnect from providers',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}