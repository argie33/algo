{"version":3,"names":["cov_2eurzxz80y","actualCoverage","express","s","require","success","error","jwt","apiKeyService","alpacaService","validationMiddleware","validation","createValidationMiddleware","loadError","console","warn","message","router","Router","createErrorResponse","details","b","f","timestamp","Date","toISOString","get","req","res","json","status","service","type","activeUsers","cachedSymbols","serverTime","uptime","process","websocketValidationSchemas","stream","symbols","required","sanitizer","value","split","map","trim","toUpperCase","replace","filter","length","slice","join","validator","every","test","errorMessage","activeConnections","Map","userSubscriptions","streamingData","STREAM_INTERVAL","CONNECTION_TIMEOUT","ws","connectionId","randomUUID","connectionStart","now","log","set","userId","subscriptions","Set","lastSeen","authenticated","on","data","JSON","parse","handleWebSocketMessage","send","stringify","delete","connection","handleAuthentication","handleSubscription","handleUnsubscription","token","Error","verifier","CognitoJwtVerifier","create","userPoolId","env","COGNITO_USER_POOL_ID","tokenUse","clientId","COGNITO_CLIENT_ID","payload","verify","sub","substring","Array","isArray","has","userSymbols","forEach","symbol","add","startStreamingForConnection","credentials","getDecryptedApiKey","userAlpacaService","AlpacaService","apiKey","apiSecret","isSandbox","streamData","from","quotes","quote","getLatestQuote","bidPrice","askPrice","bidSize","askSize","Object","keys","streamingInterval","setInterval","clear","clearInterval","size","requestId","requestStart","params","userAgent","headers","ip","hasAuth","authorization","authHeader","response","startsWith","tokenLength","tokenPrefix","verifyStart","verifyDuration","tokenType","token_use","client_id","issuer","iss","jwtError","errorType","name","impact","recommendation","originalSymbols","filteredSymbols","validSymbols","symbolCount","credentialsStart","credentialsDuration","requestedProvider","error_code","provider","actions","request_info","request_id","environment","keyLength","hasSecret","credentialsError","errorStack","stack","NODE_ENV","error_duration_ms","alpacaInitStart","alpacaInitDuration","hasApiKey","alpacaError","previousSubscriptions","newSubscriptions","marketData","dataFetchStart","successfulFetches","failedSymbols","symbolFetchStart","cacheKey","cachedData","realtimeDataCache","lastUpdate","lastUpdateTime","dataAge","CACHE_TTL","cached","age","ttl","alpacaFetchStart","Promise","race","_","reject","setTimeout","alpacaFetchDuration","formattedQuote","fetchTime","spread","symbolDuration","errorCode","code","statusCode","includes","dataFetchDuration","totalDuration","summary","totalSymbols","successRate","Math","round","performance","avgPerSymbol","cache","totalCachedSymbols","hitRate","responseData","updateInterval","UPDATE_INTERVAL","cacheStatus","cacheHitRate","cacheTTL","statistics","successful","failed","total","total_duration_ms","data_fetch_duration_ms","streamError","errorDuration","tradeData","trade","getLatestTrade","price","conditions","timeframe","query","barsData","bars","getBars","start","limit","post","dataTypes","body","subscribed","streamEndpoints","trades","count","remainingSubscriptions","connectionStats","authenticatedUsers","values","c","totalSubscriptions","reduce","sum","streamingSymbols","streamInterval","connectionTimeout","streamingDetails","entries","connectionDetails","conn","fromEntries","inactiveConnections","push","activeSymbols","module","exports"],"sources":["websocket.js"],"sourcesContent":["const express = require('express');\nconst { success, error } = require('../utils/responseFormatter');\n\n// Import dependencies with error handling\nlet jwt, apiKeyService, alpacaService, validationMiddleware;\ntry {\n  jwt = require('aws-jwt-verify');\n  apiKeyService = require('../utils/simpleApiKeyService');\n  alpacaService = require('../utils/alpacaService');\n  const validation = require('../middleware/validation');\n  validationMiddleware = validation.createValidationMiddleware;\n} catch (loadError) {\n  console.warn('Some websocket dependencies not available:', loadError.message);\n}\n\nconst router = express.Router();\n\n// Simple error response helper\nconst createErrorResponse = (message, details = {}) => ({\n  success: false,\n  error: message,\n  ...details,\n  timestamp: new Date().toISOString()\n});\n\n// Basic health endpoint for websocket service\nrouter.get('/health', (req, res) => {\n  res.json(success({\n    status: 'operational',\n    service: 'websocket',\n    timestamp: new Date().toISOString(),\n    message: 'WebSocket service is running',\n    type: 'http_polling_realtime_data'\n  }));\n});\n\n// Basic status endpoint\nrouter.get('/status', (req, res) => {\n  res.json(success({\n    activeUsers: 0,\n    cachedSymbols: 0,\n    service: 'websocket',\n    serverTime: new Date().toISOString(),\n    uptime: process.uptime()\n  }));\n});\n\n// Validation schemas for websocket endpoints\nconst websocketValidationSchemas = {\n  stream: {\n    symbols: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => {\n        if (typeof value !== 'string') return '';\n        // Split by comma, clean each symbol, and rejoin\n        return value.split(',')\n          .map(s => s.trim().toUpperCase().replace(/[^A-Z0-9]/g, ''))\n          .filter(s => s.length > 0)\n          .slice(0, 20) // Limit to 20 symbols max for real-time\n          .join(',');\n      },\n      validator: (value) => {\n        if (!value) return false;\n        const symbols = value.split(',');\n        return symbols.length > 0 && \n               symbols.length <= 20 && \n               symbols.every(s => /^[A-Z]{1,10}$/.test(s.trim()));\n      },\n      errorMessage: 'Symbols must be a comma-separated list of 1-20 valid stock symbols'\n    }\n  }\n};\n\n// Real-time data endpoints for authenticated Alpaca data\n// WebSocket streaming for true real-time market data\n\n// WebSocket connection management for real-time streaming\nconst activeConnections = new Map(); // connectionId -> WebSocket\nconst userSubscriptions = new Map(); // userId -> Set of symbols\nconst streamingData = new Map(); // symbol -> latest streaming data\n\n// Real-time streaming settings\nconst STREAM_INTERVAL = 1000; // 1 second for real-time updates\nconst CONNECTION_TIMEOUT = 30000; // 30 seconds\n\n/**\n * WebSocket connection handler for real-time streaming\n * Establishes and manages WebSocket connections for live market data\n */\nrouter.ws('/stream', (ws, req) => {\n  const connectionId = require('crypto').randomUUID();\n  const connectionStart = Date.now();\n  \n  console.log(`üîå [${connectionId}] WebSocket connection established`);\n  \n  // Store connection\n  activeConnections.set(connectionId, {\n    ws,\n    userId: null,\n    subscriptions: new Set(),\n    lastSeen: Date.now(),\n    authenticated: false\n  });\n  \n  // Handle messages\n  ws.on('message', async (message) => {\n    try {\n      const data = JSON.parse(message);\n      await handleWebSocketMessage(connectionId, data);\n    } catch (error) {\n      console.error(`‚ùå [${connectionId}] Message handling error:`, error);\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Invalid message format'\n      }));\n    }\n  });\n  \n  // Handle connection close\n  ws.on('close', () => {\n    console.log(`üîå [${connectionId}] WebSocket connection closed`);\n    activeConnections.delete(connectionId);\n  });\n  \n  // Handle errors\n  ws.on('error', (error) => {\n    console.error(`‚ùå [${connectionId}] WebSocket error:`, error);\n    activeConnections.delete(connectionId);\n  });\n  \n  // Send welcome message\n  ws.send(JSON.stringify({\n    type: 'connected',\n    connectionId,\n    timestamp: new Date().toISOString(),\n    message: 'WebSocket connection established'\n  }));\n});\n\n/**\n * Handle WebSocket messages for authentication and subscription management\n */\nasync function handleWebSocketMessage(connectionId, data) {\n  const connection = activeConnections.get(connectionId);\n  if (!connection) return;\n  \n  const { ws } = connection;\n  \n  switch (data.type) {\n    case 'authenticate':\n      await handleAuthentication(connectionId, data);\n      break;\n      \n    case 'subscribe':\n      await handleSubscription(connectionId, data);\n      break;\n      \n    case 'unsubscribe':\n      await handleUnsubscription(connectionId, data);\n      break;\n      \n    case 'ping':\n      ws.send(JSON.stringify({\n        type: 'pong',\n        timestamp: new Date().toISOString()\n      }));\n      break;\n      \n    default:\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Unknown message type'\n      }));\n  }\n}\n\n/**\n * Handle WebSocket authentication\n */\nasync function handleAuthentication(connectionId, data) {\n  const connection = activeConnections.get(connectionId);\n  if (!connection) return;\n  \n  const { ws } = connection;\n  \n  try {\n    if (!data.token) {\n      throw new Error('Authentication token required');\n    }\n    \n    // Verify JWT token\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n    \n    const payload = await verifier.verify(data.token);\n    \n    // Update connection with authenticated user\n    connection.userId = payload.sub;\n    connection.authenticated = true;\n    connection.lastSeen = Date.now();\n    \n    console.log(`‚úÖ [${connectionId}] User authenticated: ${payload.sub.substring(0, 8)}...`);\n    \n    ws.send(JSON.stringify({\n      type: 'authenticated',\n      userId: payload.sub,\n      timestamp: new Date().toISOString()\n    }));\n    \n  } catch (error) {\n    console.error(`‚ùå [${connectionId}] Authentication failed:`, error);\n    ws.send(JSON.stringify({\n      type: 'auth_error',\n      message: 'Authentication failed'\n    }));\n  }\n}\n\n/**\n * Handle subscription requests\n */\nasync function handleSubscription(connectionId, data) {\n  const connection = activeConnections.get(connectionId);\n  if (!connection || !connection.authenticated) {\n    connection.ws.send(JSON.stringify({\n      type: 'error',\n      message: 'Authentication required'\n    }));\n    return;\n  }\n  \n  const { ws, userId } = connection;\n  \n  try {\n    const symbols = data.symbols || [];\n    if (!Array.isArray(symbols) || symbols.length === 0) {\n      throw new Error('Valid symbols array required');\n    }\n    \n    // Add to user subscriptions\n    if (!userSubscriptions.has(userId)) {\n      userSubscriptions.set(userId, new Set());\n    }\n    \n    const userSymbols = userSubscriptions.get(userId);\n    symbols.forEach(symbol => {\n      userSymbols.add(symbol.toUpperCase());\n      connection.subscriptions.add(symbol.toUpperCase());\n    });\n    \n    console.log(`üìä [${connectionId}] Subscribed to:`, symbols);\n    \n    ws.send(JSON.stringify({\n      type: 'subscribed',\n      symbols: symbols,\n      timestamp: new Date().toISOString()\n    }));\n    \n    // Start streaming for this connection\n    startStreamingForConnection(connectionId);\n    \n  } catch (error) {\n    console.error(`‚ùå [${connectionId}] Subscription failed:`, error);\n    ws.send(JSON.stringify({\n      type: 'subscription_error',\n      message: error.message\n    }));\n  }\n}\n\n/**\n * Start real-time streaming for a connection\n */\nasync function startStreamingForConnection(connectionId) {\n  const connection = activeConnections.get(connectionId);\n  if (!connection || !connection.authenticated) return;\n  \n  const { ws, userId, subscriptions } = connection;\n  \n  try {\n    // Get user's API credentials\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    if (!credentials) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'API credentials not configured'\n      }));\n      return;\n    }\n    \n    // Initialize Alpaca service\n    const userAlpacaService = new alpacaService.AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n    \n    // Stream live data\n    const streamData = async () => {\n      if (!activeConnections.has(connectionId)) return;\n      \n      const symbols = Array.from(subscriptions);\n      if (symbols.length === 0) return;\n      \n      try {\n        const quotes = {};\n        \n        for (const symbol of symbols) {\n          const quote = await userAlpacaService.getLatestQuote(symbol);\n          if (quote) {\n            quotes[symbol] = {\n              symbol,\n              bidPrice: quote.bidPrice,\n              askPrice: quote.askPrice,\n              bidSize: quote.bidSize,\n              askSize: quote.askSize,\n              timestamp: quote.timestamp || Date.now()\n            };\n            \n            // Cache the data\n            streamingData.set(symbol, quotes[symbol]);\n          }\n        }\n        \n        // Send to WebSocket\n        if (Object.keys(quotes).length > 0) {\n          ws.send(JSON.stringify({\n            type: 'market_data',\n            data: quotes,\n            timestamp: new Date().toISOString()\n          }));\n        }\n        \n      } catch (error) {\n        console.error(`‚ùå [${connectionId}] Streaming error:`, error);\n        ws.send(JSON.stringify({\n          type: 'streaming_error',\n          message: 'Error fetching market data'\n        }));\n      }\n    };\n    \n    // Start streaming loop\n    const streamingInterval = setInterval(streamData, STREAM_INTERVAL);\n    \n    // Store interval for cleanup\n    connection.streamingInterval = streamingInterval;\n    \n    // Initial data fetch\n    streamData();\n    \n  } catch (error) {\n    console.error(`‚ùå [${connectionId}] Failed to start streaming:`, error);\n    ws.send(JSON.stringify({\n      type: 'error',\n      message: 'Failed to start streaming'\n    }));\n  }\n}\n\n/**\n * Handle unsubscription requests\n */\nasync function handleUnsubscription(connectionId, data) {\n  const connection = activeConnections.get(connectionId);\n  if (!connection || !connection.authenticated) {\n    connection.ws.send(JSON.stringify({\n      type: 'error',\n      message: 'Authentication required'\n    }));\n    return;\n  }\n  \n  const { ws, userId } = connection;\n  \n  try {\n    const symbols = data.symbols || [];\n    \n    if (symbols.length === 0) {\n      // Unsubscribe from all symbols\n      connection.subscriptions.clear();\n      userSubscriptions.delete(userId);\n      \n      // Clear streaming interval\n      if (connection.streamingInterval) {\n        clearInterval(connection.streamingInterval);\n        connection.streamingInterval = null;\n      }\n      \n      ws.send(JSON.stringify({\n        type: 'unsubscribed',\n        message: 'Unsubscribed from all symbols',\n        timestamp: new Date().toISOString()\n      }));\n      \n    } else {\n      // Unsubscribe from specific symbols\n      const userSymbols = userSubscriptions.get(userId);\n      if (userSymbols) {\n        symbols.forEach(symbol => {\n          userSymbols.delete(symbol.toUpperCase());\n          connection.subscriptions.delete(symbol.toUpperCase());\n        });\n        \n        if (userSymbols.size === 0) {\n          userSubscriptions.delete(userId);\n        }\n      }\n      \n      ws.send(JSON.stringify({\n        type: 'unsubscribed',\n        symbols: symbols,\n        timestamp: new Date().toISOString()\n      }));\n    }\n    \n    console.log(`üìä [${connectionId}] Unsubscribed from:`, symbols.length > 0 ? symbols : 'all symbols');\n    \n  } catch (error) {\n    console.error(`‚ùå [${connectionId}] Unsubscription failed:`, error);\n    ws.send(JSON.stringify({\n      type: 'unsubscription_error',\n      message: error.message\n    }));\n  }\n}\n\n/**\n * HTTP endpoint for WebSocket connection info (fallback)\n */\nrouter.get('/stream/:symbols', async (req, res) => {\n  const requestId = require('crypto').randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    console.log(`üöÄ [${requestId}] Live data stream request initiated`, {\n      symbols: req.params.symbols,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      hasAuth: !!req.headers.authorization,\n      timestamp: new Date().toISOString()\n    });\n\n    // Verify authentication with detailed logging\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      console.error(`‚ùå [${requestId}] Authentication failure - no authorization header provided`);\n      return res.status(401).json(error(\n        'No authorization token provided',\n        401,\n        { requestId, timestamp: new Date().toISOString() }\n      ).response);\n    }\n\n    if (!authHeader.startsWith('Bearer ')) {\n      console.error(`‚ùå [${requestId}] Authentication failure - invalid authorization header format`);\n      return res.status(401).json(error(\n        'Invalid authorization header format',\n        401,\n        { requestId, timestamp: new Date().toISOString() }\n      ).response);\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    console.log(`üîç [${requestId}] Verifying JWT token`, {\n      tokenLength: token.length,\n      tokenPrefix: token.substring(0, 20) + '...'\n    });\n    \n    // Verify JWT token with comprehensive error handling\n    const verifyStart = Date.now();\n    let payload, userId;\n    try {\n      const verifier = jwt.CognitoJwtVerifier.create({\n        userPoolId: process.env.COGNITO_USER_POOL_ID,\n        tokenUse: 'access',\n        clientId: process.env.COGNITO_CLIENT_ID\n      });\n\n      payload = await verifier.verify(token);\n      userId = payload.sub;\n      const verifyDuration = Date.now() - verifyStart;\n      \n      console.log(`‚úÖ [${requestId}] JWT token verified successfully in ${verifyDuration}ms`, {\n        userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n        tokenType: payload.token_use,\n        clientId: payload.client_id,\n        issuer: payload.iss\n      });\n      \n    } catch (jwtError) {\n      const verifyDuration = Date.now() - verifyStart;\n      console.error(`‚ùå [${requestId}] JWT verification FAILED after ${verifyDuration}ms:`, {\n        error: jwtError.message,\n        errorType: jwtError.name,\n        tokenLength: token.length,\n        impact: 'Live data access denied',\n        recommendation: 'User needs to re-authenticate'\n      });\n      \n      return res.status(401).json(error(\n        'Invalid or expired authentication token',\n        401,\n        { \n          requestId, \n          error: 'Authentication failed',\n          timestamp: new Date().toISOString() \n        }\n      ).response);\n    }\n\n    // Parse and validate symbols\n    console.log(`üîç [${requestId}] Parsing requested symbols: ${req.params.symbols}`);\n    const symbols = req.params.symbols.split(',')\n      .map(s => s.trim().toUpperCase())\n      .filter(s => s.length > 0 && s.length <= 10 && /^[A-Z]+$/.test(s));\n    \n    if (symbols.length === 0) {\n      console.error(`‚ùå [${requestId}] Invalid symbols provided:`, {\n        originalSymbols: req.params.symbols,\n        filteredSymbols: symbols,\n        impact: 'No valid symbols to stream'\n      });\n      return res.status(400).json(error(\n        'No valid symbols provided',\n        400,\n        { requestId, timestamp: new Date().toISOString() }\n      ).response);\n    }\n    \n    console.log(`‚úÖ [${requestId}] Symbols validated:`, {\n      validSymbols: symbols,\n      symbolCount: symbols.length\n    });\n    \n    // Get user's Alpaca credentials with comprehensive error handling\n    console.log(`üîë [${requestId}] Retrieving user API credentials for live data access`);\n    const credentialsStart = Date.now();\n    \n    let credentials;\n    try {\n      credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      const credentialsDuration = Date.now() - credentialsStart;\n      \n      if (!credentials) {\n        console.error(`‚ùå [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n          requestedProvider: 'alpaca',\n          userId: `${userId.substring(0, 8)}...`,\n          impact: 'Live market data will not be available',\n          recommendation: 'User needs to configure Alpaca API keys in settings'\n        });\n        \n        return res.status(400).json({\n          success: false,\n          error: 'API credentials not configured',\n          message: 'Please configure your Alpaca API keys in Settings to access live market data',\n          error_code: 'API_CREDENTIALS_MISSING',\n          provider: 'alpaca',\n          actions: [\n            'Go to Settings > API Keys',\n            'Add your Alpaca API credentials',\n            'Choose the correct environment (Paper Trading or Live Trading)',\n            'Test the connection to verify your credentials'\n          ],\n          request_info: {\n            request_id: requestId,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      console.log(`‚úÖ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        keyLength: credentials.apiKey ? credentials.apiKey.length : 0,\n        hasSecret: !!credentials.apiSecret\n      });\n      \n    } catch (credentialsError) {\n      const credentialsDuration = Date.now() - credentialsStart;\n      console.error(`‚ùå [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n        error: credentialsError.message,\n        errorStack: credentialsError.stack,\n        provider: 'alpaca',\n        impact: 'Cannot access live market data',\n        recommendation: 'Check API key configuration and database connectivity'\n      });\n      \n      return res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve API credentials',\n        message: 'There was an error accessing your API credentials. Please try again or contact support.',\n        error_code: 'API_CREDENTIALS_ERROR',\n        details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n        request_info: {\n          request_id: requestId,\n          error_duration_ms: credentialsDuration,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n\n\n    // Initialize Alpaca service for this user with comprehensive error handling\n    console.log(`üè≠ [${requestId}] Initializing Alpaca service for live data`);\n    const alpacaInitStart = Date.now();\n    let userAlpacaService;\n    \n    try {\n      userAlpacaService = new alpacaService.AlpacaService(\n        credentials.apiKey, \n        credentials.apiSecret, \n        credentials.isSandbox\n      );\n      const alpacaInitDuration = Date.now() - alpacaInitStart;\n      \n      console.log(`‚úÖ [${requestId}] Alpaca service initialized in ${alpacaInitDuration}ms`, {\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        hasApiKey: !!credentials.apiKey,\n        hasSecret: !!credentials.apiSecret\n      });\n      \n    } catch (alpacaError) {\n      const alpacaInitDuration = Date.now() - alpacaInitStart;\n      console.error(`‚ùå [${requestId}] Alpaca service initialization FAILED after ${alpacaInitDuration}ms:`, {\n        error: alpacaError.message,\n        errorStack: alpacaError.stack,\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        impact: 'Cannot initialize live data service',\n        recommendation: 'Check API key validity and Alpaca service status'\n      });\n      \n      return res.status(500).json({\n        success: false,\n        error: 'Failed to initialize live data service',\n        message: 'Unable to connect to your broker for live data. Please verify your API credentials or try again later.',\n        error_code: 'LIVE_DATA_SERVICE_INIT_ERROR',\n        details: process.env.NODE_ENV === 'development' ? alpacaError.message : 'Service initialization failed',\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        actions: [\n          'Verify your API credentials are correct',\n          'Check if your API keys have market data permissions',\n          'Try switching between Paper Trading and Live Trading modes',\n          'Contact broker support if the issue persists'\n        ],\n        request_info: {\n          request_id: requestId,\n          error_duration_ms: alpacaInitDuration,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n\n    // Update user subscriptions with logging\n    console.log(`üìù [${requestId}] Updating user subscriptions`, {\n      previousSubscriptions: Array.from(userSubscriptions.get(userId) || []),\n      newSubscriptions: symbols\n    });\n    userSubscriptions.set(userId, new Set(symbols));\n\n    // Get latest quotes for requested symbols with comprehensive error handling\n    console.log(`üìä [${requestId}] Fetching market data for ${symbols.length} symbols`);\n    const marketData = {};\n    const now = Date.now();\n    const dataFetchStart = Date.now();\n\n    let successfulFetches = 0;\n    let cachedSymbols = 0;\n    let failedSymbols = 0;\n\n    for (const symbol of symbols) {\n      const symbolFetchStart = Date.now();\n      try {\n        console.log(`üìä [${requestId}] Processing symbol: ${symbol}`);\n        \n        // Check if we have fresh cached data\n        const cacheKey = `quote:${symbol}`;\n        const cachedData = realtimeDataCache.get(cacheKey);\n        const lastUpdate = lastUpdateTime.get(symbol) || 0;\n        const dataAge = now - lastUpdate;\n\n        if (cachedData && dataAge < CACHE_TTL) {\n          marketData[symbol] = {\n            ...cachedData,\n            cached: true,\n            age: dataAge\n          };\n          cachedSymbols++;\n          console.log(`üìã [${requestId}] Using cached data for ${symbol}`, {\n            age: `${dataAge}ms`,\n            ttl: `${CACHE_TTL}ms`\n          });\n        } else {\n          // Fetch fresh data from Alpaca with timeout protection\n          console.log(`üì° [${requestId}] Fetching fresh data for ${symbol} from Alpaca`);\n          const alpacaFetchStart = Date.now();\n          \n          const quote = await Promise.race([\n            userAlpacaService.getLatestQuote(symbol),\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error(`Quote fetch timeout for ${symbol} after 8 seconds`)), 8000)\n            )\n          ]);\n          \n          const alpacaFetchDuration = Date.now() - alpacaFetchStart;\n          \n          if (quote) {\n            const formattedQuote = {\n              symbol: symbol,\n              bidPrice: quote.bidPrice,\n              askPrice: quote.askPrice,\n              bidSize: quote.bidSize,\n              askSize: quote.askSize,\n              timestamp: quote.timestamp || now,\n              cached: false,\n              age: 0,\n              fetchTime: alpacaFetchDuration\n            };\n\n            // Cache the data\n            realtimeDataCache.set(cacheKey, formattedQuote);\n            lastUpdateTime.set(symbol, now);\n            marketData[symbol] = formattedQuote;\n            successfulFetches++;\n            \n            console.log(`‚úÖ [${requestId}] Fresh data fetched for ${symbol} in ${alpacaFetchDuration}ms`, {\n              bidPrice: quote.bidPrice,\n              askPrice: quote.askPrice,\n              spread: quote.askPrice - quote.bidPrice\n            });\n          } else {\n            console.warn(`‚ö†Ô∏è [${requestId}] No quote data returned for ${symbol}`);\n            marketData[symbol] = {\n              symbol: symbol,\n              error: 'Quote data unavailable',\n              timestamp: now,\n              cached: false\n            };\n            failedSymbols++;\n          }\n        }\n        \n        const symbolDuration = Date.now() - symbolFetchStart;\n        console.log(`‚úÖ [${requestId}] Symbol ${symbol} processed in ${symbolDuration}ms`);\n        \n      } catch (error) {\n        const symbolDuration = Date.now() - symbolFetchStart;\n        console.error(`‚ùå [${requestId}] Failed to get quote for ${symbol} after ${symbolDuration}ms:`, {\n          error: error.message,\n          errorStack: error.stack,\n          errorCode: error.code,\n          statusCode: error.status,\n          impact: 'Symbol will show error status'\n        });\n        \n        // Determine error type for better user messaging\n        let errorMessage = 'Quote unavailable';\n        let errorCode = 'QUOTE_ERROR';\n        \n        if (error.message?.includes('timeout')) {\n          errorMessage = 'Request timeout';\n          errorCode = 'QUOTE_TIMEOUT';\n        } else if (error.status === 401 || error.message?.includes('unauthorized')) {\n          errorMessage = 'API credentials invalid';\n          errorCode = 'QUOTE_UNAUTHORIZED';\n        } else if (error.status === 403 || error.message?.includes('forbidden')) {\n          errorMessage = 'Insufficient permissions';\n          errorCode = 'QUOTE_FORBIDDEN';\n        } else if (error.status === 429 || error.message?.includes('rate limit')) {\n          errorMessage = 'Rate limit exceeded';\n          errorCode = 'QUOTE_RATE_LIMITED';\n        }\n        \n        marketData[symbol] = {\n          symbol: symbol,\n          error: errorMessage,\n          error_code: errorCode,\n          errorMessage: error.message,\n          timestamp: now,\n          cached: false\n        };\n        failedSymbols++;\n      }\n    }\n\n    const dataFetchDuration = Date.now() - dataFetchStart;\n    const totalDuration = Date.now() - requestStart;\n\n    console.log(`‚úÖ [${requestId}] Live data stream completed in ${totalDuration}ms`, {\n      summary: {\n        totalSymbols: symbols.length,\n        successfulFetches,\n        cachedSymbols,\n        failedSymbols,\n        successRate: `${Math.round((successfulFetches + cachedSymbols) / symbols.length * 100)}%`\n      },\n      performance: {\n        totalDuration: `${totalDuration}ms`,\n        dataFetchDuration: `${dataFetchDuration}ms`,\n        avgPerSymbol: `${Math.round(dataFetchDuration / symbols.length)}ms`\n      },\n      cache: {\n        totalCachedSymbols: realtimeDataCache.size,\n        hitRate: `${Math.round(cachedSymbols / symbols.length * 100)}%`\n      },\n      status: 'SUCCESS'\n    });\n\n    const responseData = {\n      symbols: symbols,\n      data: marketData,\n      updateInterval: UPDATE_INTERVAL,\n      cacheStatus: {\n        totalCachedSymbols: realtimeDataCache.size,\n        userSubscriptions: Array.from(userSubscriptions.get(userId) || []),\n        cacheHitRate: Math.round(cachedSymbols / symbols.length * 100),\n        cacheTTL: CACHE_TTL\n      },\n      statistics: {\n        successful: successfulFetches,\n        cached: cachedSymbols,\n        failed: failedSymbols,\n        total: symbols.length\n      },\n      request_info: {\n        request_id: requestId,\n        total_duration_ms: totalDuration,\n        data_fetch_duration_ms: dataFetchDuration,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    res.json(success(responseData));\n\n  } catch (streamError) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`‚ùå [${requestId}] Live data stream FAILED after ${errorDuration}ms:`, {\n      error: streamError.message,\n      errorStack: streamError.stack,\n      errorCode: streamError.code,\n      symbols: req.params.symbols,\n      impact: 'Live data stream request failed completely',\n      recommendation: 'Check authentication, API credentials, and Alpaca service status'\n    });\n    \n    res.status(500).json(createErrorResponse(\n      'Failed to stream market data',\n      {\n        requestId,\n        error_duration_ms: errorDuration,\n        details: process.env.NODE_ENV === 'development' ? streamError.message : 'Internal server error'\n      }\n    ));\n  }\n});\n\n/**\n * Get latest trade data for symbols\n */\nrouter.get('/trades/:symbols', async (req, res) => {\n  try {\n    // Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json(createErrorResponse('No authorization token provided'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    // Parse symbols\n    const symbols = req.params.symbols.split(',').map(s => s.trim().toUpperCase());\n    \n    // Get user's Alpaca credentials\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(403).json(createErrorResponse('No Alpaca API key configured'));\n    }\n\n    // Initialize Alpaca service\n    const userAlpacaService = new alpacaService.AlpacaService(\n      credentials.apiKey, \n      credentials.apiSecret, \n      credentials.isSandbox\n    );\n\n    // Get latest trades\n    const tradeData = {};\n    for (const symbol of symbols) {\n      try {\n        const trade = await userAlpacaService.getLatestTrade(symbol);\n        tradeData[symbol] = trade ? {\n          symbol: symbol,\n          price: trade.price,\n          size: trade.size,\n          timestamp: trade.timestamp,\n          conditions: trade.conditions\n        } : { symbol: symbol, error: 'Trade data unavailable' };\n      } catch (error) {\n        tradeData[symbol] = { symbol: symbol, error: error.message };\n      }\n    }\n\n    res.json(success(tradeData));\n\n  } catch (error) {\n    console.error('Trades endpoint error:', error);\n    res.status(500).json(createErrorResponse('Failed to get trade data'));\n  }\n});\n\n/**\n * Get bars/OHLCV data for symbols\n */\nrouter.get('/bars/:symbols', async (req, res) => {\n  try {\n    // Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json(createErrorResponse('No authorization token provided'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    // Parse symbols and timeframe\n    const symbols = req.params.symbols.split(',').map(s => s.trim().toUpperCase());\n    const timeframe = req.query.timeframe || '1Min';\n    \n    // Get user's Alpaca credentials\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    if (!credentials) {\n      return res.status(403).json(createErrorResponse('No Alpaca API key configured'));\n    }\n\n    // Initialize Alpaca service\n    const userAlpacaService = new alpacaService.AlpacaService(\n      credentials.apiKey, \n      credentials.apiSecret, \n      credentials.isSandbox\n    );\n\n    // Get bars data\n    const barsData = {};\n    for (const symbol of symbols) {\n      try {\n        const bars = await userAlpacaService.getBars(symbol, {\n          timeframe: timeframe,\n          start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // Last 24 hours\n          limit: 100\n        });\n        barsData[symbol] = bars || { symbol: symbol, error: 'Bars data unavailable' };\n      } catch (error) {\n        barsData[symbol] = { symbol: symbol, error: error.message };\n      }\n    }\n\n    res.json(success(barsData));\n\n  } catch (error) {\n    console.error('Bars endpoint error:', error);\n    res.status(500).json(createErrorResponse('Failed to get bars data'));\n  }\n});\n\n/**\n * Subscribe to symbols (for tracking user interest)\n */\nrouter.post('/subscribe', async (req, res) => {\n  try {\n    // Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json(createErrorResponse('No authorization token provided'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    const { symbols, dataTypes } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json(createErrorResponse('Invalid symbols array'));\n    }\n\n    // Update user subscriptions\n    const userSymbols = symbols.map(s => s.toUpperCase());\n    userSubscriptions.set(userId, new Set(userSymbols));\n\n    res.json(success({\n      subscribed: userSymbols,\n      dataTypes: dataTypes || ['quotes'],\n      message: `Subscribed to ${userSymbols.length} symbols`,\n      streamEndpoints: {\n        quotes: `/api/websocket/stream/${userSymbols.join(',')}`,\n        trades: `/api/websocket/trades/${userSymbols.join(',')}`,\n        bars: `/api/websocket/bars/${userSymbols.join(',')}`\n      }\n    }));\n\n  } catch (error) {\n    console.error('Subscribe endpoint error:', error);\n    res.status(500).json(createErrorResponse('Failed to subscribe'));\n  }\n});\n\n/**\n * Get user's current subscriptions\n */\nrouter.get('/subscriptions', async (req, res) => {\n  try {\n    // Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json(createErrorResponse('No authorization token provided'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    const subscriptions = Array.from(userSubscriptions.get(userId) || []);\n\n    res.json(success({\n      symbols: subscriptions,\n      count: subscriptions.length,\n      streamEndpoints: subscriptions.length > 0 ? {\n        quotes: `/api/websocket/stream/${subscriptions.join(',')}`,\n        trades: `/api/websocket/trades/${subscriptions.join(',')}`,\n        bars: `/api/websocket/bars/${subscriptions.join(',')}`\n      } : null\n    }));\n\n  } catch (error) {\n    console.error('Subscriptions endpoint error:', error);\n    res.status(500).json(createErrorResponse('Failed to get subscriptions'));\n  }\n});\n\n/**\n * Unsubscribe from symbols\n */\nrouter.delete('/subscribe', async (req, res) => {\n  try {\n    // Verify authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json(createErrorResponse('No authorization token provided'));\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    const userId = payload.sub;\n\n    const { symbols } = req.body;\n    \n    if (symbols && Array.isArray(symbols)) {\n      // Remove specific symbols\n      const userSymbols = userSubscriptions.get(userId) || new Set();\n      symbols.forEach(symbol => userSymbols.delete(symbol.toUpperCase()));\n      userSubscriptions.set(userId, userSymbols);\n    } else {\n      // Remove all subscriptions\n      userSubscriptions.delete(userId);\n    }\n\n    res.json(success({\n      message: 'Unsubscribed successfully',\n      remainingSubscriptions: Array.from(userSubscriptions.get(userId) || [])\n    }));\n\n  } catch (error) {\n    console.error('Unsubscribe endpoint error:', error);\n    res.status(500).json(createErrorResponse('Failed to unsubscribe'));\n  }\n});\n\n// Health check endpoint\nrouter.get('/health', (req, res) => {\n  const connectionStats = {\n    activeConnections: activeConnections.size,\n    authenticatedUsers: Array.from(activeConnections.values()).filter(c => c.authenticated).length,\n    totalSubscriptions: Array.from(userSubscriptions.values()).reduce((sum, set) => sum + set.size, 0),\n    streamingSymbols: streamingData.size\n  };\n  \n  res.json(success({\n    status: 'operational',\n    type: 'websocket_realtime_streaming',\n    streamInterval: STREAM_INTERVAL,\n    connectionTimeout: CONNECTION_TIMEOUT,\n    ...connectionStats\n  }));\n});\n\n// Status endpoint with detailed metrics\nrouter.get('/status', (req, res) => {\n  const now = Date.now();\n  const streamingDetails = {};\n  \n  for (const [symbol, data] of streamingData.entries()) {\n    streamingDetails[symbol] = {\n      lastUpdate: new Date(data.timestamp).toISOString(),\n      age: now - data.timestamp,\n      bidPrice: data.bidPrice,\n      askPrice: data.askPrice\n    };\n  }\n\n  const connectionDetails = Array.from(activeConnections.entries()).map(([connectionId, conn]) => ({\n    connectionId: connectionId.substring(0, 8) + '...',\n    authenticated: conn.authenticated,\n    userId: conn.userId ? conn.userId.substring(0, 8) + '...' : null,\n    subscriptions: Array.from(conn.subscriptions),\n    lastSeen: new Date(conn.lastSeen).toISOString()\n  }));\n\n  res.json(success({\n    activeConnections: activeConnections.size,\n    authenticatedUsers: Array.from(activeConnections.values()).filter(c => c.authenticated).length,\n    streamingSymbols: streamingData.size,\n    streamingDetails,\n    connectionDetails,\n    userSubscriptions: Object.fromEntries(\n      Array.from(userSubscriptions.entries()).map(([userId, symbols]) => [\n        userId.substring(0, 8) + '...', \n        Array.from(symbols)\n      ])\n    ),\n    serverTime: new Date().toISOString(),\n    uptime: process.uptime()\n  }));\n});\n\n// Cleanup inactive connections periodically\nsetInterval(() => {\n  const now = Date.now();\n  const inactiveConnections = [];\n  \n  for (const [connectionId, connection] of activeConnections.entries()) {\n    if (now - connection.lastSeen > CONNECTION_TIMEOUT) {\n      inactiveConnections.push(connectionId);\n      \n      // Clear streaming interval\n      if (connection.streamingInterval) {\n        clearInterval(connection.streamingInterval);\n      }\n    }\n  }\n  \n  inactiveConnections.forEach(connectionId => {\n    activeConnections.delete(connectionId);\n    console.log(`üßπ Cleaned up inactive connection: ${connectionId}`);\n  });\n  \n  // Clean up streaming data for symbols with no active subscriptions\n  const activeSymbols = new Set();\n  for (const connection of activeConnections.values()) {\n    if (connection.authenticated) {\n      connection.subscriptions.forEach(symbol => activeSymbols.add(symbol));\n    }\n  }\n  \n  for (const symbol of streamingData.keys()) {\n    if (!activeSymbols.has(symbol)) {\n      streamingData.delete(symbol);\n    }\n  }\n  \n}, CONNECTION_TIMEOUT / 2);\n\nmodule.exports = router;"],"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","ignoreList":[]}