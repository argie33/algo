{"version":3,"names":["cov_1huves6rjc","actualCoverage","express","s","require","success","error","router","Router","get","req","res","f","diagnosticId","Math","random","toString","substr","console","log","securityService","app","locals","b","json","message","dashboard","getSecurityDashboard","threatLevel","operation","metrics","getMetrics","recentEventCount","startTime","Date","now","endTime","eventType","severity","sourceIP","limit","offset","query","allEvents","securityEvents","filter","event","timestamp","parseInt","sort","a","paginatedEvents","slice","response","timeRange","filters","pagination","total","length","hasMore","events","map","id","userAgent","userId","details","post","body","provided","includes","validSeverities","eventId","logSecurityEvent","format","validFormats","exportData","exportSecurityEvents","setHeader","send","delete","olderThan","removedCount","clearOldEvents","currentTime","lastHour","recentEvents","threatAssessment","currentLevel","lastAssessment","lastThreatAssessment","recentActivity","totalEvents","criticalEvents","e","warningEvents","uniqueIPs","Set","size","trends","increasing","stable","decreasing","rateLimitingMiddleware","authMiddleware","status","services","eventCount","rateLimiting","stats","getStats","authentication","overall","activeServices","Object","values","totalServices","keys","module","exports"],"sources":["security.js"],"sourcesContent":["/**\n * Security Management Routes\n * Security dashboard, event monitoring, and threat management\n */\n\nconst express = require('express');\nconst { success, error } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n/**\n * GET /api/security/dashboard\n * Security dashboard with real-time threat monitoring\n */\nrouter.get('/dashboard', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`🛡️ [${diagnosticId}] Security dashboard requested...`);\n    \n    try {\n        // Get security service instance (lazy loaded from main app)\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId,\n                message: 'Security monitoring service is not initialized'\n            }));\n        }\n\n        const dashboard = securityService.getSecurityDashboard();\n        \n        console.log(`🛡️ [${diagnosticId}] Security dashboard generated: ${dashboard.threatLevel} threat level`);\n        \n        res.json(success({\n            ...dashboard,\n            diagnosticId,\n            message: 'Security dashboard retrieved successfully'\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security dashboard failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'security-dashboard' }));\n    }\n});\n\n/**\n * GET /api/security/metrics\n * Security metrics and statistics\n */\nrouter.get('/metrics', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`📊 [${diagnosticId}] Security metrics requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId,\n                message: 'Security monitoring service is not initialized'\n            }));\n        }\n\n        const metrics = securityService.getMetrics();\n        \n        console.log(`📊 [${diagnosticId}] Security metrics retrieved: ${metrics.recentEventCount} recent events`);\n        \n        res.json(success({\n            ...metrics,\n            diagnosticId,\n            message: 'Security metrics retrieved successfully'\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security metrics failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'security-metrics' }));\n    }\n});\n\n/**\n * GET /api/security/events\n * Security events with filtering and pagination\n */\nrouter.get('/events', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`📋 [${diagnosticId}] Security events requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId\n            }));\n        }\n\n        // Parse query parameters\n        const {\n            startTime = Date.now() - (24 * 60 * 60 * 1000), // Last 24 hours default\n            endTime = Date.now(),\n            eventType,\n            severity,\n            sourceIP,\n            limit = 100,\n            offset = 0\n        } = req.query;\n\n        // Get all events in time range\n        const allEvents = securityService.securityEvents.filter(event => {\n            if (event.timestamp < parseInt(startTime) || event.timestamp > parseInt(endTime)) {\n                return false;\n            }\n            if (eventType && event.eventType !== eventType) {\n                return false;\n            }\n            if (severity && event.severity !== severity) {\n                return false;\n            }\n            if (sourceIP && event.sourceIP !== sourceIP) {\n                return false;\n            }\n            return true;\n        });\n\n        // Sort by timestamp (newest first)\n        allEvents.sort((a, b) => b.timestamp - a.timestamp);\n\n        // Apply pagination\n        const paginatedEvents = allEvents.slice(parseInt(offset), parseInt(offset) + parseInt(limit));\n\n        const response = {\n            diagnosticId,\n            timeRange: { startTime: parseInt(startTime), endTime: parseInt(endTime) },\n            filters: { eventType, severity, sourceIP },\n            pagination: {\n                total: allEvents.length,\n                limit: parseInt(limit),\n                offset: parseInt(offset),\n                hasMore: parseInt(offset) + parseInt(limit) < allEvents.length\n            },\n            events: paginatedEvents.map(event => ({\n                id: event.id,\n                timestamp: event.timestamp,\n                eventType: event.eventType,\n                severity: event.severity,\n                sourceIP: event.sourceIP,\n                userAgent: event.userAgent,\n                userId: event.userId,\n                details: event.details\n            }))\n        };\n\n        console.log(`📋 [${diagnosticId}] Security events retrieved: ${paginatedEvents.length}/${allEvents.length} events`);\n        \n        res.json(success(response));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security events failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'security-events' }));\n    }\n});\n\n/**\n * POST /api/security/event\n * Log a security event\n */\nrouter.post('/event', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`📝 [${diagnosticId}] Security event logging requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId\n            }));\n        }\n\n        const { eventType, severity, details } = req.body;\n\n        // Validate required fields\n        if (!eventType || !severity) {\n            return res.json(error('Missing required fields: eventType, severity', {\n                diagnosticId,\n                provided: { eventType: !!eventType, severity: !!severity }\n            }));\n        }\n\n        // Validate severity\n        if (!['info', 'warning', 'critical'].includes(severity)) {\n            return res.json(error('Invalid severity level', {\n                diagnosticId,\n                validSeverities: ['info', 'warning', 'critical'],\n                provided: severity\n            }));\n        }\n\n        const eventId = securityService.logSecurityEvent(eventType, severity, details, req);\n        \n        console.log(`📝 [${diagnosticId}] Security event logged: ${eventId}`);\n        \n        res.json(success({\n            eventId,\n            diagnosticId,\n            message: 'Security event logged successfully'\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security event logging failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'log-security-event' }));\n    }\n});\n\n/**\n * GET /api/security/export\n * Export security events for analysis\n */\nrouter.get('/export', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`📤 [${diagnosticId}] Security events export requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId\n            }));\n        }\n\n        const {\n            startTime = Date.now() - (7 * 24 * 60 * 60 * 1000), // Last 7 days default\n            endTime = Date.now(),\n            format = 'json'\n        } = req.query;\n\n        if (!['json', 'csv'].includes(format)) {\n            return res.json(error('Invalid export format', {\n                diagnosticId,\n                validFormats: ['json', 'csv'],\n                provided: format\n            }));\n        }\n\n        const exportData = securityService.exportSecurityEvents(\n            parseInt(startTime),\n            parseInt(endTime),\n            format\n        );\n\n        if (format === 'csv') {\n            res.setHeader('Content-Type', 'text/csv');\n            res.setHeader('Content-Disposition', `attachment; filename=\"security-events-${Date.now()}.csv\"`);\n            res.send(exportData);\n        } else {\n            res.json(success({\n                ...exportData,\n                diagnosticId,\n                message: 'Security events exported successfully'\n            }));\n        }\n        \n        console.log(`📤 [${diagnosticId}] Security events exported: ${format} format`);\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security events export failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'export-security-events' }));\n    }\n});\n\n/**\n * DELETE /api/security/events/cleanup\n * Clean up old security events\n */\nrouter.delete('/events/cleanup', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`🧹 [${diagnosticId}] Security events cleanup requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId\n            }));\n        }\n\n        const { olderThan = 7 * 24 * 60 * 60 * 1000 } = req.body; // 7 days default\n\n        const removedCount = securityService.clearOldEvents(parseInt(olderThan));\n        \n        console.log(`🧹 [${diagnosticId}] Security events cleanup completed: ${removedCount} events removed`);\n        \n        res.json(success({\n            removedCount,\n            olderThan: parseInt(olderThan),\n            diagnosticId,\n            message: `Cleaned up ${removedCount} old security events`\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security events cleanup failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'cleanup-security-events' }));\n    }\n});\n\n/**\n * GET /api/security/threat-level\n * Current threat level assessment\n */\nrouter.get('/threat-level', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`🎯 [${diagnosticId}] Threat level assessment requested...`);\n    \n    try {\n        const securityService = req.app.locals.securityService;\n        \n        if (!securityService) {\n            return res.json(error('Security service not available', {\n                diagnosticId\n            }));\n        }\n\n        const currentTime = Date.now();\n        const lastHour = currentTime - (60 * 60 * 1000);\n        \n        const recentEvents = securityService.securityEvents.filter(\n            event => event.timestamp > lastHour\n        );\n\n        const threatAssessment = {\n            currentLevel: securityService.threatLevel,\n            lastAssessment: securityService.metrics.lastThreatAssessment,\n            recentActivity: {\n                totalEvents: recentEvents.length,\n                criticalEvents: recentEvents.filter(e => e.severity === 'critical').length,\n                warningEvents: recentEvents.filter(e => e.severity === 'warning').length,\n                uniqueIPs: new Set(recentEvents.map(e => e.sourceIP)).size\n            },\n            trends: {\n                increasing: recentEvents.length > 20,\n                stable: recentEvents.length >= 5 && recentEvents.length <= 20,\n                decreasing: recentEvents.length < 5\n            }\n        };\n\n        console.log(`🎯 [${diagnosticId}] Threat level assessment: ${threatAssessment.currentLevel}`);\n        \n        res.json(success({\n            ...threatAssessment,\n            diagnosticId,\n            message: 'Threat level assessment retrieved successfully'\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Threat level assessment failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'threat-level-assessment' }));\n    }\n});\n\n/**\n * GET /api/security/status\n * Overall security system status\n */\nrouter.get('/status', async (req, res) => {\n    const diagnosticId = Math.random().toString(36).substr(2, 9);\n    \n    console.log(`🔍 [${diagnosticId}] Security system status requested...`);\n    \n    try {\n        // Check for security middleware availability\n        const securityService = req.app.locals.securityService;\n        const rateLimitingMiddleware = req.app.locals.rateLimitingMiddleware;\n        const authMiddleware = req.app.locals.authMiddleware;\n\n        const status = {\n            timestamp: Date.now(),\n            diagnosticId,\n            services: {\n                securityService: {\n                    status: securityService ? 'active' : 'inactive',\n                    threatLevel: securityService?.threatLevel || 'unknown',\n                    eventCount: securityService?.securityEvents?.length || 0\n                },\n                rateLimiting: {\n                    status: rateLimitingMiddleware ? 'active' : 'inactive',\n                    stats: rateLimitingMiddleware?.getStats() || null\n                },\n                authentication: {\n                    status: authMiddleware ? 'active' : 'inactive',\n                    stats: authMiddleware?.getStats() || null\n                }\n            },\n            overall: 'unknown'\n        };\n\n        // Calculate overall status\n        const activeServices = Object.values(status.services).filter(s => s.status === 'active').length;\n        const totalServices = Object.keys(status.services).length;\n        \n        if (activeServices === totalServices) {\n            status.overall = 'healthy';\n        } else if (activeServices > totalServices / 2) {\n            status.overall = 'degraded';\n        } else {\n            status.overall = 'critical';\n        }\n\n        console.log(`🔍 [${diagnosticId}] Security system status: ${status.overall}`);\n        \n        res.json(success({\n            ...status,\n            message: 'Security system status retrieved successfully'\n        }));\n        \n    } catch (error) {\n        console.error(`❌ [${diagnosticId}] Security system status failed:`, error.message);\n        res.json(error(error.message, { diagnosticId, operation: 'security-system-status' }));\n    }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}