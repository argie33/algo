25859dde768d12b2a7f071ac786994bf
/* istanbul ignore next */
function cov_7d5zky34s() {
  var path = "/home/stocks/algo/webapp/lambda/utils/secrets.js";
  var hash = "ed0c794c2c4b4b54f5ba2235c589df7208464dec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/utils/secrets.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 15
        },
        end: {
          line: 1,
          column: 32
        }
      },
      "1": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "2": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 86
        }
      },
      "3": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 60
        }
      },
      "4": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "5": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "6": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 53
        }
      },
      "7": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 65
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "9": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 21
        }
      },
      "10": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "11": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 49
        }
      },
      "12": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 72,
          column: 3
        }
      },
      "13": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 86
        }
      },
      "14": {
        start: {
          line: 50,
          column: 15
        },
        end: {
          line: 50,
          column: 37
        }
      },
      "15": {
        start: {
          line: 53,
          column: 19
        },
        end: {
          line: 53,
          column: 56
        }
      },
      "16": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 23
        }
      },
      "17": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 21
        }
      },
      "18": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 54
        }
      },
      "19": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 37
        }
      },
      "20": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 39
        }
      },
      "21": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 68,
          column: 6
        }
      },
      "22": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "23": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 49
        }
      },
      "24": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 80,
          column: 48
        }
      },
      "25": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 87,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "decrypt",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 16
          }
        },
        loc: {
          start: {
            line: 16,
            column: 51
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "encrypt",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 16
          }
        },
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 44
      },
      "2": {
        name: "generateSalt",
        decl: {
          start: {
            line: 79,
            column: 9
          },
          end: {
            line: 79,
            column: 21
          }
        },
        loc: {
          start: {
            line: 79,
            column: 24
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 79
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ed0c794c2c4b4b54f5ba2235c589df7208464dec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7d5zky34s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7d5zky34s();
const crypto =
/* istanbul ignore next */
(cov_7d5zky34s().s[0]++, require('crypto'));

/**
 * Encryption/Decryption utilities for API keys
 * Used to securely store and retrieve user API keys
 */

/**
 * Decrypt an encrypted value
 * @param {string} encryptedText - The encrypted text (hex)
 * @param {string} iv - The initialization vector (hex)
 * @param {string} authTag - The authentication tag (hex)
 * @param {string} salt - The user's salt (hex)
 * @returns {string} The decrypted text
 */
function decrypt(encryptedText, iv, authTag, salt) {
  /* istanbul ignore next */
  cov_7d5zky34s().f[0]++;
  cov_7d5zky34s().s[1]++;
  try {
    // Derive key from salt (same as used in encryption)
    const key =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[2]++, crypto.pbkdf2Sync(salt, Buffer.from(salt, 'hex'), 10000, 32, 'sha256'));

    // Create decipher
    const decipher =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[3]++, crypto.createDecipherGCM('aes-256-gcm'));
    /* istanbul ignore next */
    cov_7d5zky34s().s[4]++;
    decipher.setKey(key);
    /* istanbul ignore next */
    cov_7d5zky34s().s[5]++;
    decipher.setIV(Buffer.from(iv, 'hex'));
    /* istanbul ignore next */
    cov_7d5zky34s().s[6]++;
    decipher.setAuthTag(Buffer.from(authTag, 'hex'));

    // Decrypt
    let decrypted =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[7]++, decipher.update(encryptedText, 'hex', 'utf8'));
    /* istanbul ignore next */
    cov_7d5zky34s().s[8]++;
    decrypted += decipher.final('utf8');
    /* istanbul ignore next */
    cov_7d5zky34s().s[9]++;
    return decrypted;
  } catch (error) {
    /* istanbul ignore next */
    cov_7d5zky34s().s[10]++;
    console.error('Decryption error:', error);
    /* istanbul ignore next */
    cov_7d5zky34s().s[11]++;
    throw new Error('Failed to decrypt API key');
  }
}

/**
 * Encrypt a value
 * @param {string} text - The text to encrypt
 * @param {string} salt - The user's salt (hex)
 * @returns {object} Object containing encrypted text, iv, and authTag
 */
function encrypt(text, salt) {
  /* istanbul ignore next */
  cov_7d5zky34s().f[1]++;
  cov_7d5zky34s().s[12]++;
  try {
    // Derive key from salt
    const key =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[13]++, crypto.pbkdf2Sync(salt, Buffer.from(salt, 'hex'), 10000, 32, 'sha256'));

    // Generate IV
    const iv =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[14]++, crypto.randomBytes(16));

    // Create cipher
    const cipher =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[15]++, crypto.createCipherGCM('aes-256-gcm'));
    /* istanbul ignore next */
    cov_7d5zky34s().s[16]++;
    cipher.setKey(key);
    /* istanbul ignore next */
    cov_7d5zky34s().s[17]++;
    cipher.setIV(iv);

    // Encrypt
    let encrypted =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[18]++, cipher.update(text, 'utf8', 'hex'));
    /* istanbul ignore next */
    cov_7d5zky34s().s[19]++;
    encrypted += cipher.final('hex');

    // Get auth tag
    const authTag =
    /* istanbul ignore next */
    (cov_7d5zky34s().s[20]++, cipher.getAuthTag());
    /* istanbul ignore next */
    cov_7d5zky34s().s[21]++;
    return {
      encrypted: encrypted,
      iv: iv.toString('hex'),
      authTag: authTag.toString('hex')
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_7d5zky34s().s[22]++;
    console.error('Encryption error:', error);
    /* istanbul ignore next */
    cov_7d5zky34s().s[23]++;
    throw new Error('Failed to encrypt API key');
  }
}

/**
 * Generate a random salt
 * @returns {string} Random salt as hex string
 */
function generateSalt() {
  /* istanbul ignore next */
  cov_7d5zky34s().f[2]++;
  cov_7d5zky34s().s[24]++;
  return crypto.randomBytes(32).toString('hex');
}
/* istanbul ignore next */
cov_7d5zky34s().s[25]++;
module.exports = {
  decrypt,
  encrypt,
  generateSalt
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,