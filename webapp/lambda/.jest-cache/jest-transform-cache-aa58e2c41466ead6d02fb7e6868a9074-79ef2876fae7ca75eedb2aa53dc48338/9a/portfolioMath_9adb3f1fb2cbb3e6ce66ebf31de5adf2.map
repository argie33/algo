{"version":3,"names":["cov_54op3l3r1","actualCoverage","Matrix","s","require","PortfolioMath","calculateCovarianceMatrix","returns","f","b","length","Error","matrix","numAssets","columns","numPeriods","rows","means","j","assetReturns","getColumn","mean","reduce","sum","val","push","covMatrix","zeros","i","covariance","t","returnI","get","returnJ","set","calculateCorrelationMatrix","corrMatrix","cov","stdI","Math","sqrt","stdJ","correlation","calculateExpectedReturns","method","options","halfLife","marketReturns","riskFreeRate","historicalMeanReturns","exponentiallyWeightedReturns","capmExpectedReturns","expectedReturns","alpha","exp","log","ewma","marketMean","marketVariance","pow","assetMean","beta","expectedReturn","meanVarianceOptimization","constraints","targetReturn","objective","maxWeight","minWeight","allowShorts","maxSharpeOptimization","minVarianceOptimization","equalWeightOptimization","riskParityOptimization","excessReturns","map","r","invCovMatrix","inverse","excessReturnsVector","transpose","numerator","mmul","denominatorSum","weights","w","portfolioReturn","calculatePortfolioReturn","portfolioVariance","calculatePortfolioVariance","portfolioStd","sharpeRatio","volatility","error","console","ones","Array","fill","volatilities","invVolWeights","vol","sumInvVol","weight","weightsMatrix","result","generateEfficientFrontier","numPoints","minReturnPort","maxReturnPort","max","indexOf","frontierPoints","minReturn","maxReturn","calculateRiskMetrics","benchmarkReturns","metrics","variance","portfolioWeightedBeta","calculateVaR","confidenceLevel","timeHorizon","zScore","inverseNormalCDF","dailyVaR","p","calculateFactorExposures","factorData","factors","exposures","forEach","factor","assetExposure","module","exports"],"sources":["portfolioMath.js"],"sourcesContent":["const { Matrix } = require('ml-matrix');\n\n/**\n * Portfolio Mathematics and Optimization Utilities\n * Implementation of Modern Portfolio Theory algorithms\n */\n\nclass PortfolioMath {\n  \n  /**\n   * Calculate covariance matrix from price returns\n   * @param {Array<Array<number>>} returns - Matrix of returns [time x assets]\n   * @returns {Matrix} - Covariance matrix\n   */\n  static calculateCovarianceMatrix(returns) {\n    if (!returns || returns.length === 0) {\n      throw new Error('Returns data is required');\n    }\n\n    const matrix = new Matrix(returns);\n    const numAssets = matrix.columns;\n    const numPeriods = matrix.rows;\n    \n    // Calculate mean returns for each asset\n    const means = [];\n    for (let j = 0; j < numAssets; j++) {\n      const assetReturns = matrix.getColumn(j);\n      const mean = assetReturns.reduce((sum, val) => sum + val, 0) / numPeriods;\n      means.push(mean);\n    }\n    \n    // Calculate covariance matrix\n    const covMatrix = Matrix.zeros(numAssets, numAssets);\n    \n    for (let i = 0; i < numAssets; i++) {\n      for (let j = 0; j < numAssets; j++) {\n        let covariance = 0;\n        \n        for (let t = 0; t < numPeriods; t++) {\n          const returnI = matrix.get(t, i) - means[i];\n          const returnJ = matrix.get(t, j) - means[j];\n          covariance += returnI * returnJ;\n        }\n        \n        // Annualize the covariance (assuming daily returns)\n        covariance = (covariance / (numPeriods - 1)) * 252;\n        covMatrix.set(i, j, covariance);\n      }\n    }\n    \n    return covMatrix;\n  }\n\n  /**\n   * Calculate correlation matrix from covariance matrix\n   * @param {Matrix} covMatrix - Covariance matrix\n   * @returns {Matrix} - Correlation matrix\n   */\n  static calculateCorrelationMatrix(covMatrix) {\n    const numAssets = covMatrix.rows;\n    const corrMatrix = Matrix.zeros(numAssets, numAssets);\n    \n    for (let i = 0; i < numAssets; i++) {\n      for (let j = 0; j < numAssets; j++) {\n        const cov = covMatrix.get(i, j);\n        const stdI = Math.sqrt(covMatrix.get(i, i));\n        const stdJ = Math.sqrt(covMatrix.get(j, j));\n        \n        const correlation = cov / (stdI * stdJ);\n        corrMatrix.set(i, j, correlation);\n      }\n    }\n    \n    return corrMatrix;\n  }\n\n  /**\n   * Calculate expected returns using various methods\n   * @param {Array<Array<number>>} returns - Historical returns\n   * @param {string} method - 'historical', 'ewma', 'capm'\n   * @param {Object} options - Additional options\n   * @returns {Array<number>} - Expected returns vector\n   */\n  static calculateExpectedReturns(returns, method = 'historical', options = {}) {\n    const matrix = new Matrix(returns);\n    const { halfLife = 60, marketReturns = null, riskFreeRate = 0.02 } = options;\n    \n    switch (method) {\n      case 'historical':\n        return this.historicalMeanReturns(matrix);\n      \n      case 'ewma':\n        return this.exponentiallyWeightedReturns(matrix, halfLife);\n      \n      case 'capm':\n        if (!marketReturns) {\n          throw new Error('Market returns required for CAPM method');\n        }\n        return this.capmExpectedReturns(matrix, marketReturns, riskFreeRate);\n      \n      default:\n        return this.historicalMeanReturns(matrix);\n    }\n  }\n\n  /**\n   * Historical mean returns\n   */\n  static historicalMeanReturns(matrix) {\n    const numAssets = matrix.columns;\n    const numPeriods = matrix.rows;\n    const expectedReturns = [];\n    \n    for (let j = 0; j < numAssets; j++) {\n      const assetReturns = matrix.getColumn(j);\n      const mean = assetReturns.reduce((sum, val) => sum + val, 0) / numPeriods;\n      // Annualize the return (assuming daily returns)\n      expectedReturns.push(mean * 252);\n    }\n    \n    return expectedReturns;\n  }\n\n  /**\n   * Exponentially weighted moving average returns\n   */\n  static exponentiallyWeightedReturns(matrix, halfLife) {\n    const numAssets = matrix.columns;\n    const numPeriods = matrix.rows;\n    const alpha = 1 - Math.exp(-Math.log(2) / halfLife);\n    \n    const expectedReturns = [];\n    \n    for (let j = 0; j < numAssets; j++) {\n      const assetReturns = matrix.getColumn(j);\n      let ewma = assetReturns[0];\n      \n      for (let i = 1; i < numPeriods; i++) {\n        ewma = alpha * assetReturns[i] + (1 - alpha) * ewma;\n      }\n      \n      // Annualize the return\n      expectedReturns.push(ewma * 252);\n    }\n    \n    return expectedReturns;\n  }\n\n  /**\n   * CAPM expected returns\n   */\n  static capmExpectedReturns(matrix, marketReturns, riskFreeRate) {\n    const numAssets = matrix.columns;\n    const expectedReturns = [];\n    \n    // Calculate market variance\n    const marketMean = marketReturns.reduce((sum, val) => sum + val, 0) / marketReturns.length;\n    const marketVariance = marketReturns.reduce((sum, val) => sum + Math.pow(val - marketMean, 2), 0) / (marketReturns.length - 1);\n    \n    for (let j = 0; j < numAssets; j++) {\n      const assetReturns = matrix.getColumn(j);\n      const assetMean = assetReturns.reduce((sum, val) => sum + val, 0) / assetReturns.length;\n      \n      // Calculate beta\n      let covariance = 0;\n      for (let i = 0; i < assetReturns.length; i++) {\n        covariance += (assetReturns[i] - assetMean) * (marketReturns[i] - marketMean);\n      }\n      covariance /= (assetReturns.length - 1);\n      \n      const beta = covariance / marketVariance;\n      \n      // CAPM formula: E(R) = Rf + β(E(Rm) - Rf)\n      const expectedReturn = riskFreeRate + beta * (marketMean * 252 - riskFreeRate);\n      expectedReturns.push(expectedReturn);\n    }\n    \n    return expectedReturns;\n  }\n\n  /**\n   * Mean-Variance Optimization (Markowitz)\n   * @param {Array<number>} expectedReturns - Expected returns vector\n   * @param {Matrix} covMatrix - Covariance matrix\n   * @param {Object} constraints - Optimization constraints\n   * @returns {Object} - Optimal weights and metrics\n   */\n  static meanVarianceOptimization(expectedReturns, covMatrix, constraints = {}) {\n    const {\n      targetReturn = null,\n      riskFreeRate = 0.02,\n      objective = 'maxSharpe', // 'maxSharpe', 'minRisk', 'maxReturn', 'targetReturn'\n      maxWeight = 1.0,\n      minWeight = 0.0,\n      allowShorts = false\n    } = constraints;\n\n    const numAssets = expectedReturns.length;\n\n    // For simplicity, using analytical solution for unconstrained case\n    // In production, would use quadratic programming solver\n    \n    if (objective === 'maxSharpe') {\n      return this.maxSharpeOptimization(expectedReturns, covMatrix, riskFreeRate);\n    } else if (objective === 'minRisk') {\n      return this.minVarianceOptimization(expectedReturns, covMatrix);\n    } else if (objective === 'equalWeight') {\n      return this.equalWeightOptimization(expectedReturns, covMatrix);\n    } else if (objective === 'riskParity') {\n      return this.riskParityOptimization(expectedReturns, covMatrix);\n    }\n    \n    // Default to max Sharpe\n    return this.maxSharpeOptimization(expectedReturns, covMatrix, riskFreeRate);\n  }\n\n  /**\n   * Maximum Sharpe Ratio optimization\n   */\n  static maxSharpeOptimization(expectedReturns, covMatrix, riskFreeRate) {\n    try {\n      // Calculate excess returns\n      const excessReturns = expectedReturns.map(r => r - riskFreeRate);\n      \n      // Invert covariance matrix\n      const invCovMatrix = Matrix.inverse(covMatrix);\n      \n      // Calculate optimal weights: w = (Σ^-1 * μ) / (1^T * Σ^-1 * μ)\n      const excessReturnsVector = new Matrix([excessReturns]).transpose();\n      const numerator = invCovMatrix.mmul(excessReturnsVector);\n      \n      // Sum of numerator\n      const denominatorSum = numerator.getColumn(0).reduce((sum, val) => sum + val, 0);\n      \n      // Normalize weights\n      const weights = numerator.getColumn(0).map(w => w / denominatorSum);\n      \n      // Calculate portfolio metrics\n      const portfolioReturn = this.calculatePortfolioReturn(weights, expectedReturns);\n      const portfolioVariance = this.calculatePortfolioVariance(weights, covMatrix);\n      const portfolioStd = Math.sqrt(portfolioVariance);\n      const sharpeRatio = (portfolioReturn - riskFreeRate) / portfolioStd;\n      \n      return {\n        weights: weights,\n        expectedReturn: portfolioReturn,\n        volatility: portfolioStd,\n        sharpeRatio: sharpeRatio,\n        objective: 'maxSharpe'\n      };\n    } catch (error) {\n      console.error('Max Sharpe optimization failed:', error);\n      // Fallback to equal weight\n      return this.equalWeightOptimization(expectedReturns, covMatrix);\n    }\n  }\n\n  /**\n   * Minimum variance optimization\n   */\n  static minVarianceOptimization(expectedReturns, covMatrix) {\n    try {\n      // Invert covariance matrix\n      const invCovMatrix = Matrix.inverse(covMatrix);\n      \n      // Calculate minimum variance weights: w = (Σ^-1 * 1) / (1^T * Σ^-1 * 1)\n      const ones = Matrix.ones(expectedReturns.length, 1);\n      const numerator = invCovMatrix.mmul(ones);\n      \n      // Sum for normalization\n      const denominatorSum = numerator.getColumn(0).reduce((sum, val) => sum + val, 0);\n      \n      // Normalize weights\n      const weights = numerator.getColumn(0).map(w => w / denominatorSum);\n      \n      // Calculate portfolio metrics\n      const portfolioReturn = this.calculatePortfolioReturn(weights, expectedReturns);\n      const portfolioVariance = this.calculatePortfolioVariance(weights, covMatrix);\n      const portfolioStd = Math.sqrt(portfolioVariance);\n      \n      return {\n        weights: weights,\n        expectedReturn: portfolioReturn,\n        volatility: portfolioStd,\n        sharpeRatio: portfolioReturn / portfolioStd,\n        objective: 'minRisk'\n      };\n    } catch (error) {\n      console.error('Min variance optimization failed:', error);\n      return this.equalWeightOptimization(expectedReturns, covMatrix);\n    }\n  }\n\n  /**\n   * Equal weight optimization (1/N portfolio)\n   */\n  static equalWeightOptimization(expectedReturns, covMatrix) {\n    const numAssets = expectedReturns.length;\n    const weights = new Array(numAssets).fill(1 / numAssets);\n    \n    const portfolioReturn = this.calculatePortfolioReturn(weights, expectedReturns);\n    const portfolioVariance = this.calculatePortfolioVariance(weights, covMatrix);\n    const portfolioStd = Math.sqrt(portfolioVariance);\n    \n    return {\n      weights: weights,\n      expectedReturn: portfolioReturn,\n      volatility: portfolioStd,\n      sharpeRatio: portfolioReturn / portfolioStd,\n      objective: 'equalWeight'\n    };\n  }\n\n  /**\n   * Risk parity optimization (equal risk contribution)\n   */\n  static riskParityOptimization(expectedReturns, covMatrix) {\n    const numAssets = expectedReturns.length;\n    \n    // Simplified risk parity: inverse volatility weighting\n    const volatilities = [];\n    for (let i = 0; i < numAssets; i++) {\n      volatilities.push(Math.sqrt(covMatrix.get(i, i)));\n    }\n    \n    // Inverse volatility weights\n    const invVolWeights = volatilities.map(vol => 1 / vol);\n    const sumInvVol = invVolWeights.reduce((sum, w) => sum + w, 0);\n    const weights = invVolWeights.map(w => w / sumInvVol);\n    \n    const portfolioReturn = this.calculatePortfolioReturn(weights, expectedReturns);\n    const portfolioVariance = this.calculatePortfolioVariance(weights, covMatrix);\n    const portfolioStd = Math.sqrt(portfolioVariance);\n    \n    return {\n      weights: weights,\n      expectedReturn: portfolioReturn,\n      volatility: portfolioStd,\n      sharpeRatio: portfolioReturn / portfolioStd,\n      objective: 'riskParity'\n    };\n  }\n\n  /**\n   * Calculate portfolio expected return\n   */\n  static calculatePortfolioReturn(weights, expectedReturns) {\n    return weights.reduce((sum, weight, i) => sum + weight * expectedReturns[i], 0);\n  }\n\n  /**\n   * Calculate portfolio variance\n   */\n  static calculatePortfolioVariance(weights, covMatrix) {\n    const weightsMatrix = new Matrix([weights]);\n    const result = weightsMatrix.mmul(covMatrix).mmul(weightsMatrix.transpose());\n    return result.get(0, 0);\n  }\n\n  /**\n   * Generate efficient frontier points\n   * @param {Array<number>} expectedReturns - Expected returns vector\n   * @param {Matrix} covMatrix - Covariance matrix\n   * @param {number} numPoints - Number of frontier points\n   * @returns {Array<Object>} - Efficient frontier data points\n   */\n  static generateEfficientFrontier(expectedReturns, covMatrix, numPoints = 20) {\n    const minReturnPort = this.minVarianceOptimization(expectedReturns, covMatrix);\n    const maxReturnPort = { \n      expectedReturn: Math.max(...expectedReturns),\n      volatility: Math.sqrt(covMatrix.get(expectedReturns.indexOf(Math.max(...expectedReturns)), expectedReturns.indexOf(Math.max(...expectedReturns))))\n    };\n    \n    const frontierPoints = [];\n    const minReturn = minReturnPort.expectedReturn;\n    const maxReturn = maxReturnPort.expectedReturn;\n    \n    for (let i = 0; i < numPoints; i++) {\n      const targetReturn = minReturn + (maxReturn - minReturn) * (i / (numPoints - 1));\n      \n      // For simplicity, using approximation\n      // In production, would solve constrained optimization for each target return\n      const alpha = (targetReturn - minReturn) / (maxReturn - minReturn);\n      const volatility = Math.sqrt(\n        Math.pow(minReturnPort.volatility, 2) * Math.pow(1 - alpha, 2) +\n        Math.pow(maxReturnPort.volatility, 2) * Math.pow(alpha, 2) +\n        2 * alpha * (1 - alpha) * minReturnPort.volatility * maxReturnPort.volatility * 0.5\n      );\n      \n      frontierPoints.push({\n        expectedReturn: targetReturn,\n        volatility: volatility,\n        sharpeRatio: targetReturn / volatility\n      });\n    }\n    \n    return frontierPoints;\n  }\n\n  /**\n   * Calculate portfolio risk metrics\n   * @param {Array<number>} weights - Portfolio weights\n   * @param {Array<number>} expectedReturns - Expected returns\n   * @param {Matrix} covMatrix - Covariance matrix\n   * @param {Array<number>} benchmarkReturns - Benchmark returns for beta calculation\n   * @returns {Object} - Risk metrics\n   */\n  static calculateRiskMetrics(weights, expectedReturns, covMatrix, benchmarkReturns = null) {\n    const portfolioReturn = this.calculatePortfolioReturn(weights, expectedReturns);\n    const portfolioVariance = this.calculatePortfolioVariance(weights, covMatrix);\n    const portfolioStd = Math.sqrt(portfolioVariance);\n    \n    const metrics = {\n      expectedReturn: portfolioReturn,\n      volatility: portfolioStd,\n      variance: portfolioVariance,\n      sharpeRatio: portfolioReturn / portfolioStd,\n    };\n    \n    // Calculate beta if benchmark provided\n    if (benchmarkReturns) {\n      // This would require historical portfolio returns for proper beta calculation\n      // For now, using simplified approach\n      const portfolioWeightedBeta = weights.reduce((sum, weight, i) => {\n        // Approximate beta as 1.0 for individual stocks\n        return sum + weight * 1.0;\n      }, 0);\n      \n      metrics.beta = portfolioWeightedBeta;\n      metrics.alpha = portfolioReturn - 0.02 - portfolioWeightedBeta * 0.08; // Simplified alpha\n    }\n    \n    return metrics;\n  }\n\n  /**\n   * Calculate Value at Risk (VaR)\n   * @param {Array<number>} weights - Portfolio weights\n   * @param {Matrix} covMatrix - Covariance matrix\n   * @param {number} confidenceLevel - Confidence level (e.g., 0.95 for 95% VaR)\n   * @param {number} timeHorizon - Time horizon in days\n   * @returns {number} - VaR value\n   */\n  static calculateVaR(weights, covMatrix, confidenceLevel = 0.95, timeHorizon = 1) {\n    const portfolioStd = Math.sqrt(this.calculatePortfolioVariance(weights, covMatrix));\n    \n    // Assuming normal distribution\n    const zScore = this.inverseNormalCDF(confidenceLevel);\n    const dailyVaR = zScore * portfolioStd / Math.sqrt(252); // Convert annual to daily\n    \n    return dailyVaR * Math.sqrt(timeHorizon);\n  }\n\n  /**\n   * Simple inverse normal CDF approximation\n   */\n  static inverseNormalCDF(p) {\n    // Simplified approximation for normal distribution\n    // In production, would use more accurate implementation\n    if (p === 0.95) return 1.645;\n    if (p === 0.99) return 2.326;\n    if (p === 0.975) return 1.96;\n    if (p === 0.90) return 1.282;\n    \n    // Default approximation\n    return Math.sqrt(-2 * Math.log(1 - p));\n  }\n\n  /**\n   * Calculate factor exposures (simplified)\n   * @param {Array<number>} weights - Portfolio weights\n   * @param {Object} factorData - Factor exposure data for each asset\n   * @returns {Object} - Portfolio factor exposures\n   */\n  static calculateFactorExposures(weights, factorData) {\n    const factors = ['market', 'size', 'value', 'momentum', 'quality'];\n    const exposures = {};\n    \n    factors.forEach(factor => {\n      exposures[factor] = weights.reduce((sum, weight, i) => {\n        const assetExposure = factorData[i] && factorData[i][factor] || 1.0;\n        return sum + weight * assetExposure;\n      }, 0);\n    });\n    \n    return exposures;\n  }\n}\n\nmodule.exports = PortfolioMath;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}