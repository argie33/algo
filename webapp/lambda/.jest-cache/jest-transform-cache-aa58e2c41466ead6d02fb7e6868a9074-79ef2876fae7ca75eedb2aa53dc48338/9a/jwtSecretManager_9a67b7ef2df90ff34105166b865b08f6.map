{"version":3,"names":["cov_vq5sls836","actualCoverage","crypto","s","require","SecretsManagerClient","GetSecretValueCommand","CreateSecretCommand","UpdateSecretCommand","JwtSecretManager","constructor","f","secretsManager","region","b","process","env","WEBAPP_AWS_REGION","AWS_REGION","jwtSecret","jwtSecretCache","initPromise","initialize","_loadOrCreateJwtSecret","console","log","JWT_SECRET","secretArn","JWT_SECRET_ARN","secret","_loadSecretFromSecretsManager","defaultSecretName","NODE_ENV","existingSecret","newSecret","_createNewJwtSecret","error","message","warn","tempSecret","randomBytes","toString","Error","secretId","command","SecretId","response","send","SecretString","secretData","JSON","parse","value","parseError","name","secretName","created_at","Date","toISOString","purpose","algorithm","key_length","length","createCommand","Name","Description","stringify","Tags","Key","Value","ARN","getJwtSecret","rotateJwtSecret","rotated_at","previous_secret_hash","createHash","update","digest","substring","updateCommand","validateSecretStrength","valid","reason","recommendations","warnings","strength","uniqueChars","Set","size","entropyRatio","entropy","getSecretInfo","validation","available","source","lastInitialized","clearCache","jwtSecretManager","module","exports"],"sources":["jwtSecretManager.js"],"sourcesContent":["/**\n * JWT Secret Management Service\n * Manages JWT secrets for API key service token generation and validation\n */\n\nconst crypto = require('crypto');\nconst { SecretsManagerClient, GetSecretValueCommand, CreateSecretCommand, UpdateSecretCommand } = require('@aws-sdk/client-secrets-manager');\n\nclass JwtSecretManager {\n    constructor() {\n        this.secretsManager = new SecretsManagerClient({\n            region: process.env.WEBAPP_AWS_REGION || process.env.AWS_REGION || 'us-east-1'\n        });\n        \n        this.jwtSecret = null;\n        this.jwtSecretCache = null;\n        this.initPromise = null;\n    }\n\n    /**\n     * Initialize JWT secret management\n     */\n    async initialize() {\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        this.initPromise = this._loadOrCreateJwtSecret();\n        return this.initPromise;\n    }\n\n    /**\n     * Load existing JWT secret or create a new one\n     */\n    async _loadOrCreateJwtSecret() {\n        try {\n            console.log('üîê Initializing JWT secret management...');\n\n            // First try to load from environment (for local development)\n            if (process.env.JWT_SECRET) {\n                console.log('üîß Using JWT secret from environment variable');\n                this.jwtSecret = process.env.JWT_SECRET;\n                this.jwtSecretCache = this.jwtSecret;\n                return this.jwtSecret;\n            }\n\n            // Try to load from AWS Secrets Manager\n            const secretArn = process.env.JWT_SECRET_ARN;\n            if (secretArn) {\n                console.log('üì° Loading JWT secret from AWS Secrets Manager...');\n                const secret = await this._loadSecretFromSecretsManager(secretArn);\n                if (secret) {\n                    this.jwtSecret = secret;\n                    this.jwtSecretCache = secret;\n                    console.log('‚úÖ JWT secret loaded from Secrets Manager');\n                    return secret;\n                }\n            }\n\n            // If no ARN provided, try default secret name\n            const defaultSecretName = `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n            console.log(`üîç Attempting to load JWT secret with default name: ${defaultSecretName}`);\n            \n            const existingSecret = await this._loadSecretFromSecretsManager(defaultSecretName);\n            if (existingSecret) {\n                this.jwtSecret = existingSecret;\n                this.jwtSecretCache = existingSecret;\n                console.log('‚úÖ JWT secret loaded from default secret name');\n                return existingSecret;\n            }\n\n            // Create new JWT secret if none exists\n            console.log('üÜï No existing JWT secret found, creating new one...');\n            const newSecret = await this._createNewJwtSecret(defaultSecretName);\n            \n            this.jwtSecret = newSecret;\n            this.jwtSecretCache = newSecret;\n            console.log('‚úÖ New JWT secret created and cached');\n            \n            return newSecret;\n\n        } catch (error) {\n            console.error('‚ùå Failed to initialize JWT secret:', error.message);\n            \n            // Fallback for development: generate temporary secret\n            if (process.env.NODE_ENV !== 'production') {\n                console.warn('‚ö†Ô∏è Using temporary JWT secret for development');\n                const tempSecret = crypto.randomBytes(64).toString('hex');\n                this.jwtSecret = tempSecret;\n                this.jwtSecretCache = tempSecret;\n                return tempSecret;\n            }\n            \n            throw new Error(`JWT secret initialization failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Load secret from AWS Secrets Manager\n     */\n    async _loadSecretFromSecretsManager(secretId) {\n        try {\n            const command = new GetSecretValueCommand({ SecretId: secretId });\n            const response = await this.secretsManager.send(command);\n            \n            if (!response.SecretString) {\n                throw new Error('Secret value is empty');\n            }\n\n            // Try to parse as JSON first\n            try {\n                const secretData = JSON.parse(response.SecretString);\n                return secretData.JWT_SECRET || secretData.secret || secretData.value;\n            } catch (parseError) {\n                // If not JSON, use as plain string\n                return response.SecretString;\n            }\n\n        } catch (error) {\n            if (error.name === 'ResourceNotFoundException') {\n                console.log(`üìù Secret not found: ${secretId}`);\n                return null;\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * Create new JWT secret in AWS Secrets Manager\n     */\n    async _createNewJwtSecret(secretName) {\n        try {\n            // Generate cryptographically secure secret\n            const jwtSecret = crypto.randomBytes(64).toString('hex');\n            \n            const secretData = {\n                JWT_SECRET: jwtSecret,\n                created_at: new Date().toISOString(),\n                purpose: 'API key service JWT token signing',\n                algorithm: 'HS256',\n                key_length: jwtSecret.length\n            };\n\n            const createCommand = new CreateSecretCommand({\n                Name: secretName,\n                Description: `JWT secret for stocks app API key service (${process.env.NODE_ENV || 'dev'})`,\n                SecretString: JSON.stringify(secretData),\n                Tags: [\n                    { Key: 'Application', Value: 'stocks-app' },\n                    { Key: 'Component', Value: 'api-key-service' },\n                    { Key: 'Environment', Value: process.env.NODE_ENV || 'dev' },\n                    { Key: 'Purpose', Value: 'jwt-signing' }\n                ]\n            });\n\n            const response = await this.secretsManager.send(createCommand);\n            console.log(`‚úÖ Created new JWT secret: ${response.ARN}`);\n            \n            // Set environment variable for future use\n            if (!process.env.JWT_SECRET_ARN) {\n                console.log(`üí° Consider setting JWT_SECRET_ARN=${response.ARN} in your environment`);\n            }\n\n            return jwtSecret;\n\n        } catch (error) {\n            console.error('‚ùå Failed to create JWT secret:', error.message);\n            throw error;\n        }\n    }\n\n    /**\n     * Get JWT secret (cached)\n     */\n    async getJwtSecret() {\n        if (!this.jwtSecretCache) {\n            await this.initialize();\n        }\n        \n        if (!this.jwtSecretCache) {\n            throw new Error('JWT secret not available');\n        }\n        \n        return this.jwtSecretCache;\n    }\n\n    /**\n     * Rotate JWT secret (creates new secret and updates Secrets Manager)\n     */\n    async rotateJwtSecret() {\n        try {\n            console.log('üîÑ Starting JWT secret rotation...');\n            \n            const newSecret = crypto.randomBytes(64).toString('hex');\n            const secretName = process.env.JWT_SECRET_ARN || `stocks-app-jwt-secret-${process.env.NODE_ENV || 'dev'}`;\n            \n            const secretData = {\n                JWT_SECRET: newSecret,\n                rotated_at: new Date().toISOString(),\n                previous_secret_hash: crypto.createHash('sha256').update(this.jwtSecretCache || '').digest('hex').substring(0, 16),\n                purpose: 'API key service JWT token signing',\n                algorithm: 'HS256',\n                key_length: newSecret.length\n            };\n\n            const updateCommand = new UpdateSecretCommand({\n                SecretId: secretName,\n                SecretString: JSON.stringify(secretData)\n            });\n\n            await this.secretsManager.send(updateCommand);\n            \n            // Update cache\n            this.jwtSecretCache = newSecret;\n            this.jwtSecret = newSecret;\n            \n            console.log('‚úÖ JWT secret rotated successfully');\n            return newSecret;\n\n        } catch (error) {\n            console.error('‚ùå JWT secret rotation failed:', error.message);\n            throw error;\n        }\n    }\n\n    /**\n     * Validate JWT secret strength\n     */\n    validateSecretStrength(secret) {\n        if (!secret || typeof secret !== 'string') {\n            return {\n                valid: false,\n                reason: 'Secret is empty or not a string',\n                recommendations: ['Provide a valid string secret']\n            };\n        }\n\n        if (secret.length < 32) {\n            return {\n                valid: false,\n                reason: 'Secret is too short (minimum 32 characters)',\n                recommendations: ['Use at least 32 characters for security', 'Consider using 64+ characters for production']\n            };\n        }\n\n        if (secret.length < 64) {\n            return {\n                valid: true,\n                warnings: ['Consider using 64+ characters for enhanced security'],\n                strength: 'adequate'\n            };\n        }\n\n        // Check for entropy (not just repeated characters)\n        const uniqueChars = new Set(secret).size;\n        const entropyRatio = uniqueChars / secret.length;\n        \n        if (entropyRatio < 0.5) {\n            return {\n                valid: true,\n                warnings: ['Secret has low entropy (many repeated characters)', 'Consider using crypto.randomBytes() for generation'],\n                strength: 'low_entropy'\n            };\n        }\n\n        return {\n            valid: true,\n            strength: 'strong',\n            entropy: entropyRatio,\n            length: secret.length\n        };\n    }\n\n    /**\n     * Get JWT secret information (without revealing the secret)\n     */\n    async getSecretInfo() {\n        try {\n            await this.initialize();\n            \n            const validation = this.validateSecretStrength(this.jwtSecretCache);\n            \n            return {\n                available: !!this.jwtSecretCache,\n                source: process.env.JWT_SECRET ? 'environment' : 'secrets_manager',\n                length: this.jwtSecretCache ? this.jwtSecretCache.length : 0,\n                validation: validation,\n                lastInitialized: new Date().toISOString()\n            };\n\n        } catch (error) {\n            return {\n                available: false,\n                error: error.message,\n                source: 'unknown'\n            };\n        }\n    }\n\n    /**\n     * Clear cached secret (force reload on next access)\n     */\n    clearCache() {\n        this.jwtSecretCache = null;\n        this.jwtSecret = null;\n        this.initPromise = null;\n        console.log('üßπ JWT secret cache cleared');\n    }\n}\n\n// Export singleton instance\nconst jwtSecretManager = new JwtSecretManager();\n\nmodule.exports = jwtSecretManager;"],"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","ignoreList":[]}