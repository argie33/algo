{"version":3,"names":["cov_1zpjqbfxvm","actualCoverage","express","s","require","query","router","Router","checkRequiredTables","tableNames","f","results","tableName","tableExistsResult","rows","exists","error","console","message","get","req","res","json","status","endpoint","available_routes","timestamp","Date","toISOString","log","requiredTables","tableStatus","recordCounts","Object","entries","b","countResult","parseInt","count","tables","healthCheck","checks","database_connection","duration_ms","required_tables","missing","data_availability","api_endpoints","working","failing","summary","tables_with_data","tables_missing","total_records","last_data_update","dbStart","now","dbError","tableResults","missingTables","tableCheck","push","length","tablesWithData","totalRecords","dataAvailability","record_count","timestampCols","col","lastUpdate","last_update","e","workingEndpoints","failingEndpoints","day","getDay","hour","getHours","minute","getMinutes","currentTime","isWeekday","isMarketHours","isOpen","session","nextChange","daysToMonday","indices","indicesQuery","indicesResult","map","row","symbol","name","price","parseFloat","current_price","change","price_change","changePercent","percent_change","warn","success","data","timezone","marketHours","open","close","marketOverview","sentiment","sectors","market_breadth","market_status","data_sources","indicesMap","forEach","key","toLowerCase","value","change_percent","keys","Error","fearGreedQuery","fearGreedResult","fg","fear_greed","value_text","date","breadthQuery","breadthResult","breadth","advancing","declining","total_stocks","unchanged","advance_decline_ratio","toFixed","average_change_percent","avg_change","sectorsQuery","sectorsResult","sector_name","dataAvailable","values","filter","source","days","fearGreedData","fearGreedError","naaimQuery","naaimData","naaimError","naaimResult","fear_greed_history","naaim_history","aaii_history","period_days","errors","naaim","aaii","data_source","diagnostic","fear_greed_available","naaim_available","aaii_available","troubleshooting","details","issue","potential_causes","system_checks","query_attempted","tables_required","fallback_data","tableExists","fallbackSectors","sector","stock_count","total_volume","avg_market_cap","sectorQuery","result","Array","isArray","strong_advancing","strong_declining","avg_volume","fallbackIndicators","unit","total_points","economicQuery","indicators","indicator_name","reduce","sum","arr","limit","fallbackData","i","Math","min","setDate","getDate","exposure_index","floor","random","long_exposure","short_exposure","classifications","classification","lastUpdated","volatilityQuery","marketVolatilityQuery","volatilityResult","vix","market_volatility","avg_absolute_change","economic_calendar","calendarData","event","time","importance","currency","category","forecast","previous","country","whereClause","queryParams","paramCount","calendarQuery","event_id","event_name","event_date","event_time","forecast_value","previous_value","actual","actual_value","frequency","description","is_revised","created_at","updated_at","filters","indicatorsQuery","sentimentQuery","sentimentResult","fearGreed","currentDate","currentYear","getFullYear","currentMonth","getMonth","currentDay","dayOfYear","currentYearReturn","yearStart","spyQuery","spyResult","split","yearStartQuery","yearStartResult","currentPrice","close_price","yearStartPrice","electionYear","currentCyclePosition","presidentialCycle","currentPosition","year","label","avgReturn","isCurrent","monthlySeasonality","month","m","quarterlySeasonality","quarter","months","q","ceil","intradayPatterns","marketOpen","pattern","morningSession","lunchTime","afternoonSession","powerHour","marketClose","dowEffects","d","toLocaleDateString","weekday","sectorSeasonality","bestMonths","worstMonths","rationale","holidayEffects","holiday","dates","effect","seasonalAnomalies","period","strength","monthlyTrend","quarterlyTrend","activePeriods","getActiveSeasonalPeriods","nextMajorEvent","getNextSeasonalEvent","seasonalScore","calculateSeasonalScore","dayOfWeekEffects","favorableFactors","getFavorableFactors","unfavorableFactors","getUnfavorableFactors","overallSeasonalBias","getOverallBias","confidence","recommendation","getSeasonalRecommendation","active","events","daysAway","eventDate","nextYearEvent","nextEventDate","score","monthlyScores","cyclePosition","cycleAdjustments","max","round","factors","includes","today","thirtyDaysAgo","getTime","oneYearAgo","vixData","current","thirtyDayAvg","interpretation","level","color","putCallRatio","tenDayAvg","signal","momentumIndicators","advanceDeclineRatio","newHighsNewLows","newHighs","newLows","ratio","McClellanOscillator","sectorRotation","momentum","flow","performance","marketInternals","volume","twentyDayAvg","trend","advancingStocks","decliningStocks","unchangedStocks","institutionalFlow","smartMoney","retailSentiment","darkPoolActivity","economicCalendar","expected","impact","technicalLevels","support","resistance","rsi","macd","volatility","vixAverage","vixInterpretation","putCallAverage","putCallInterpretation","overallSentiment","marketRegime","keyRisks","keyOpportunities","timeHorizon","dataFreshness","FREDService","fredService","getLatestIndicators","fredError","mockData","generateMockData","note","post","updateAllCoreSeries","searchText","searchSeries","search_text","module","exports"],"sources":["market.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\n// v2.0 - Production ready market routes with SSL fix and cleaned endpoints\n\nconst router = express.Router();\n\n// Helper function to check if required tables exist\nasync function checkRequiredTables(tableNames) {\n  const results = {};\n  for (const tableName of tableNames) {\n    try {\n      const tableExistsResult = await query(\n        `SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name = $1\n        );`,\n        [tableName]\n      );\n      results[tableName] = tableExistsResult.rows[0].exists;\n    } catch (error) {\n      console.error(`Error checking table ${tableName}:`, error.message);\n      results[tableName] = false;\n    }\n  }\n  return results;\n}\n\n// Root endpoint for testing\nrouter.get('/', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'market',\n    available_routes: [\n      '/overview',\n      '/sentiment/history',\n      '/sectors/performance',\n      '/breadth',\n      '/economic',\n      '/naaim',\n      '/fear-greed',\n      '/indices',\n      '/sectors',\n      '/volatility',\n      '/calendar',\n      '/indicators',\n      '/sentiment'\n    ],\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Debug endpoint to check market tables status\nrouter.get('/debug', async (req, res) => {\n  console.log('[MARKET] Debug endpoint called');\n  \n  try {\n    // Check all market-related tables\n    const requiredTables = [\n      'market_data', 'economic_data', 'fear_greed_index', 'naaim', \n      'symbols', 'aaii_sentiment'\n    ];\n    \n    const tableStatus = await checkRequiredTables(requiredTables);\n    \n    // Get record counts for existing tables\n    const recordCounts = {};\n    for (const [tableName, exists] of Object.entries(tableStatus)) {\n      if (exists) {\n        try {\n          const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n          recordCounts[tableName] = parseInt(countResult.rows[0].count);\n        } catch (error) {\n          recordCounts[tableName] = { error: error.message };\n        }\n      } else {\n        recordCounts[tableName] = 'Table does not exist';\n      }\n    }\n\n    res.json({\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      tables: tableStatus,\n      recordCounts: recordCounts,\n      endpoint: 'market'\n    });\n  } catch (error) {\n    console.error('[MARKET] Error in debug endpoint:', error);\n    res.status(500).json({ \n      error: 'Failed to check market tables', \n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n\n\n\n\n// Comprehensive health check endpoint\nrouter.get('/health', async (req, res) => {\n  console.log('[MARKET] Health check endpoint called');\n  \n  const healthCheck = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    checks: {\n      database_connection: { status: 'unknown', message: '', duration_ms: 0 },\n      required_tables: { status: 'unknown', tables: {}, missing: [] },\n      data_availability: { status: 'unknown', tables: {} },\n      api_endpoints: { status: 'unknown', working: [], failing: [] }\n    },\n    summary: {\n      tables_with_data: 0,\n      tables_missing: 0,\n      total_records: 0,\n      last_data_update: null\n    }\n  };\n\n  try {\n    // 1. Test database connection\n    const dbStart = Date.now();\n    try {\n      await query('SELECT 1 as test');\n      healthCheck.checks.database_connection = {\n        status: 'healthy',\n        message: 'Database connection successful',\n        duration_ms: Date.now() - dbStart\n      };\n    } catch (dbError) {\n      healthCheck.checks.database_connection = {\n        status: 'unhealthy',\n        message: `Database connection failed: ${dbError.message}`,\n        duration_ms: Date.now() - dbStart\n      };\n      healthCheck.status = 'unhealthy';\n    }\n\n    // 2. Check required tables\n    const requiredTables = [\n      'market_data', 'economic_data', 'fear_greed_index', \n      'naaim', 'aaii_sentiment', 'symbols'\n    ];\n    \n    const tableResults = {};\n    const missingTables = [];\n    \n    for (const tableName of requiredTables) {\n      try {\n        const tableCheck = await query(`\n          SELECT EXISTS (\n            SELECT FROM information_schema.tables \n            WHERE table_schema = 'public' AND table_name = $1\n          ) as exists\n        `, [tableName]);\n        \n        const exists = tableCheck.rows[0].exists;\n        tableResults[tableName] = exists;\n        \n        if (!exists) {\n          missingTables.push(tableName);\n        }\n      } catch (error) {\n        tableResults[tableName] = false;\n        missingTables.push(tableName);\n      }\n    }\n    \n    healthCheck.checks.required_tables = {\n      status: missingTables.length === 0 ? 'healthy' : 'degraded',\n      tables: tableResults,\n      missing: missingTables\n    };\n\n    // 3. Check data availability in existing tables\n    let tablesWithData = 0;\n    let totalRecords = 0;\n    const dataAvailability = {};\n    \n    for (const [tableName, exists] of Object.entries(tableResults)) {\n      if (exists) {\n        try {\n          const countResult = await query(`SELECT COUNT(*) as count FROM ${tableName}`);\n          const count = parseInt(countResult.rows[0].count);\n          dataAvailability[tableName] = {\n            record_count: count,\n            status: count > 0 ? 'has_data' : 'empty'\n          };\n          \n          if (count > 0) {\n            tablesWithData++;\n            totalRecords += count;\n            \n            // Try to get last update timestamp\n            try {\n              const timestampCols = ['date', 'timestamp', 'updated_at', 'created_at'];\n              for (const col of timestampCols) {\n                try {\n                  const lastUpdate = await query(`\n                    SELECT ${col} FROM ${tableName} \n                    ORDER BY ${col} DESC LIMIT 1\n                  `);\n                  if (lastUpdate.rows.length > 0) {\n                    dataAvailability[tableName].last_update = lastUpdate.rows[0][col];\n                    break;\n                  }\n                } catch (e) {\n                  // Try next column\n                }\n              }\n            } catch (e) {\n              // No timestamp data available\n            }\n          }\n        } catch (error) {\n          dataAvailability[tableName] = {\n            status: 'error',\n            error: error.message\n          };\n        }\n      } else {\n        dataAvailability[tableName] = {\n          status: 'table_missing'\n        };\n      }\n    }\n    \n    healthCheck.checks.data_availability = {\n      status: tablesWithData > 0 ? 'healthy' : 'unhealthy',\n      tables: dataAvailability\n    };\n    \n    healthCheck.summary = {\n      tables_with_data: tablesWithData,\n      tables_missing: missingTables.length,\n      total_records: totalRecords,\n      last_data_update: null // Could compute from timestamps\n    };\n\n    // 4. Test key API endpoints (simplified)\n    const workingEndpoints = [];\n    const failingEndpoints = [];\n    \n    // Test if we can generate basic responses\n    try {\n      // Test fear & greed endpoint logic\n      if (tableResults['fear_greed_index']) {\n        workingEndpoints.push('/market/fear-greed');\n      } else {\n        failingEndpoints.push('/market/fear-greed (table missing)');\n      }\n      \n      // Test economic endpoint logic  \n      if (tableResults['economic_data']) {\n        workingEndpoints.push('/market/economic');\n      } else {\n        failingEndpoints.push('/market/economic (table missing)');\n      }\n      \n      // Test overview endpoint logic\n      if (tableResults['market_data']) {\n        workingEndpoints.push('/market/overview');\n      } else {\n        failingEndpoints.push('/market/overview (market_data missing)');\n      }\n      \n    } catch (error) {\n      failingEndpoints.push(`endpoint_test_error: ${error.message}`);\n    }\n    \n    healthCheck.checks.api_endpoints = {\n      status: workingEndpoints.length > 0 ? 'healthy' : 'degraded',\n      working: workingEndpoints,\n      failing: failingEndpoints\n    };\n\n    // Overall status determination\n    if (healthCheck.checks.database_connection.status === 'unhealthy') {\n      healthCheck.status = 'unhealthy';\n    } else if (missingTables.length > 2 || tablesWithData === 0) {\n      healthCheck.status = 'degraded';\n    } else if (failingEndpoints.length > workingEndpoints.length) {\n      healthCheck.status = 'degraded';\n    }\n\n    res.json(healthCheck);\n    \n  } catch (error) {\n    console.error('[MARKET] Health check failed:', error);\n    res.status(500).json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: 'Health check failed',\n      message: error.message,\n      checks: healthCheck.checks\n    });\n  }\n});\n\n// Market status endpoint for real-time market state\nrouter.get('/status', async (req, res) => {\n  console.log('[MARKET] Market status endpoint called');\n  \n  try {\n    // Calculate market status based on current time\n    const now = new Date();\n    const day = now.getDay(); // 0 = Sunday, 6 = Saturday\n    const hour = now.getHours();\n    const minute = now.getMinutes();\n    const currentTime = hour + minute / 60;\n    \n    // Market hours: Monday-Friday 9:30 AM - 4:00 PM ET\n    const isWeekday = day > 0 && day < 6;\n    const isMarketHours = currentTime >= 9.5 && currentTime < 16;\n    const isOpen = isWeekday && isMarketHours;\n    \n    // Determine session and next change\n    let session = 'Closed';\n    let nextChange = null;\n    \n    if (isWeekday) {\n      if (currentTime < 9.5) {\n        session = 'Pre-Market';\n        nextChange = 'Market opens at 9:30 AM ET';\n      } else if (currentTime < 16) {\n        session = 'Market Open';\n        nextChange = 'Market closes at 4:00 PM ET';\n      } else if (currentTime < 20) {\n        session = 'After Hours';\n        nextChange = 'Market opens tomorrow at 9:30 AM ET';\n      } else {\n        session = 'Closed';\n        nextChange = 'Market opens tomorrow at 9:30 AM ET';\n      }\n    } else {\n      session = 'Weekend';\n      const daysToMonday = day === 0 ? 1 : 8 - day; // Days until next Monday\n      nextChange = `Market opens ${daysToMonday === 1 ? 'Monday' : `in ${daysToMonday} days`} at 9:30 AM ET`;\n    }\n    \n    // Get current major indices data\n    let indices = [];\n    try {\n      const indicesQuery = `\n        SELECT \n          symbol,\n          COALESCE(price, close, current_price) as current_price,\n          COALESCE(change, price_change) as price_change,\n          COALESCE(change_percent, percent_change) as percent_change\n        FROM market_data \n        WHERE symbol IN ('SPY', 'QQQ', 'DIA', 'IWM')\n          AND date = (SELECT MAX(date) FROM market_data)\n        ORDER BY symbol\n      `;\n      \n      const indicesResult = await query(indicesQuery);\n      \n      indices = indicesResult.rows.map(row => ({\n        symbol: row.symbol,\n        name: row.symbol === 'SPY' ? 'S&P 500' : \n              row.symbol === 'QQQ' ? 'NASDAQ' : \n              row.symbol === 'DIA' ? 'Dow Jones' : \n              row.symbol === 'IWM' ? 'Russell 2000' : row.symbol,\n        price: parseFloat(row.current_price) || 0,\n        change: parseFloat(row.price_change) || 0,\n        changePercent: parseFloat(row.percent_change) || 0\n      }));\n      \n    } catch (error) {\n      console.warn('[MARKET] Unable to fetch indices data:', error.message);\n      // Provide basic fallback data\n      indices = [\n        { symbol: 'SPY', name: 'S&P 500', price: 0, change: 0, changePercent: 0 },\n        { symbol: 'QQQ', name: 'NASDAQ', price: 0, change: 0, changePercent: 0 },\n        { symbol: 'DIA', name: 'Dow Jones', price: 0, change: 0, changePercent: 0 }\n      ];\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        isOpen,\n        session,\n        nextChange,\n        indices,\n        timezone: 'ET',\n        currentTime: now.toISOString(),\n        marketHours: {\n          open: '9:30 AM',\n          close: '4:00 PM',\n          timezone: 'ET'\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('[MARKET] Error fetching market status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market status',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get comprehensive market overview with sentiment indicators\nrouter.get('/overview', async (req, res) => {\n  console.log('Market overview endpoint called');\n  \n  try {\n    // Test database connection first\n    await query('SELECT 1');\n    \n    // Initialize response structure\n    const marketOverview = {\n      indices: {},\n      sentiment: {},\n      sectors: [],\n      market_breadth: {},\n      market_status: 'unknown',\n      timestamp: new Date().toISOString(),\n      data_sources: {\n        indices: 'database',\n        sentiment: 'database',\n        sectors: 'database',\n        market_breadth: 'database'\n      }\n    };\n\n    // Get real market indices data\n    try {\n      const indicesQuery = `\n        SELECT \n          symbol,\n          COALESCE(price, close, current_price) as current_price,\n          COALESCE(change, price_change) as price_change,\n          COALESCE(change_percent, percent_change) as percent_change\n        FROM market_data \n        WHERE symbol IN ('SPY', 'QQQ', 'DIA', 'IWM')\n          AND date = (SELECT MAX(date) FROM market_data)\n        ORDER BY symbol\n      `;\n      \n      const indicesResult = await query(indicesQuery);\n      const indicesMap = {};\n      \n      indicesResult.rows.forEach(row => {\n        const key = row.symbol === 'SPY' ? 'sp500' : \n                   row.symbol === 'QQQ' ? 'nasdaq' : \n                   row.symbol === 'DIA' ? 'dow' : \n                   row.symbol === 'IWM' ? 'russell2000' : row.symbol.toLowerCase();\n        \n        indicesMap[key] = {\n          value: parseFloat(row.current_price) || 0,\n          change: parseFloat(row.price_change) || 0,\n          change_percent: parseFloat(row.percent_change) || 0\n        };\n      });\n      \n      marketOverview.indices = indicesMap;\n      \n      if (Object.keys(indicesMap).length === 0) {\n        throw new Error('No indices data found');\n      }\n      \n    } catch (e) {\n      console.error('Indices data error:', e.message);\n      marketOverview.data_sources.indices = 'unavailable';\n      marketOverview.indices = { error: 'Market indices data unavailable' };\n    }\n\n    // Get real Fear & Greed sentiment data\n    try {\n      const fearGreedQuery = `\n        SELECT \n          COALESCE(index_value, fear_greed_value, value) as value,\n          COALESCE(index_text, value_text, classification, rating) as value_text,\n          COALESCE(timestamp, date, created_at) as date\n        FROM fear_greed_index \n        ORDER BY COALESCE(timestamp, date, created_at) DESC \n        LIMIT 1\n      `;\n      \n      const fearGreedResult = await query(fearGreedQuery);\n      \n      if (fearGreedResult.rows.length > 0) {\n        const fg = fearGreedResult.rows[0];\n        marketOverview.sentiment.fear_greed = {\n          value: parseInt(fg.value) || 0,\n          value_text: fg.value_text || 'Unknown',\n          timestamp: fg.date || new Date().toISOString()\n        };\n      } else {\n        throw new Error('No Fear & Greed data found');\n      }\n      \n    } catch (e) {\n      console.error('Fear & Greed data error:', e.message);\n      marketOverview.data_sources.sentiment = 'unavailable';\n      marketOverview.sentiment.fear_greed = { error: 'Fear & Greed data unavailable' };\n    }\n\n    // Get real market breadth data\n    try {\n      const breadthQuery = `\n        SELECT \n          COUNT(*) as total_stocks,\n          COUNT(CASE WHEN COALESCE(change_percent, percent_change) > 0 THEN 1 END) as advancing,\n          COUNT(CASE WHEN COALESCE(change_percent, percent_change) < 0 THEN 1 END) as declining,\n          COUNT(CASE WHEN COALESCE(change_percent, percent_change) = 0 THEN 1 END) as unchanged,\n          AVG(COALESCE(change_percent, percent_change)) as avg_change\n        FROM market_data\n        WHERE date = (SELECT MAX(date) FROM market_data)\n          AND COALESCE(change_percent, percent_change) IS NOT NULL\n      `;\n      \n      const breadthResult = await query(breadthQuery);\n      \n      if (breadthResult.rows.length > 0) {\n        const breadth = breadthResult.rows[0];\n        const advancing = parseInt(breadth.advancing) || 0;\n        const declining = parseInt(breadth.declining) || 0;\n        \n        marketOverview.market_breadth = {\n          total_stocks: parseInt(breadth.total_stocks) || 0,\n          advancing: advancing,\n          declining: declining,\n          unchanged: parseInt(breadth.unchanged) || 0,\n          advance_decline_ratio: declining > 0 ? (advancing / declining).toFixed(2) : 'N/A',\n          average_change_percent: breadth.avg_change ? parseFloat(breadth.avg_change).toFixed(2) : '0.00'\n        };\n      } else {\n        throw new Error('No market breadth data found');\n      }\n      \n    } catch (e) {\n      console.error('Market breadth data error:', e.message);\n      marketOverview.data_sources.market_breadth = 'unavailable';\n      marketOverview.market_breadth = { error: 'Market breadth data unavailable' };\n    }\n\n    // Get real sector performance data\n    try {\n      const sectorsQuery = `\n        SELECT \n          COALESCE(sector, industry) as sector_name,\n          AVG(COALESCE(change_percent, percent_change)) as avg_change\n        FROM market_data\n        WHERE date = (SELECT MAX(date) FROM market_data)\n          AND COALESCE(sector, industry) IS NOT NULL\n          AND COALESCE(change_percent, percent_change) IS NOT NULL\n        GROUP BY COALESCE(sector, industry)\n        ORDER BY avg_change DESC\n        LIMIT 10\n      `;\n      \n      const sectorsResult = await query(sectorsQuery);\n      \n      if (sectorsResult.rows.length > 0) {\n        marketOverview.sectors = sectorsResult.rows.map(row => ({\n          name: row.sector_name,\n          change_percent: parseFloat(row.avg_change).toFixed(2)\n        }));\n      } else {\n        throw new Error('No sector data found');\n      }\n      \n    } catch (e) {\n      console.error('Sector data error:', e.message);\n      marketOverview.data_sources.sectors = 'unavailable';\n      marketOverview.sectors = [{ error: 'Sector data unavailable' }];\n    }\n\n    // Determine market status based on data availability\n    const dataAvailable = Object.values(marketOverview.data_sources).filter(source => source === 'database').length;\n    marketOverview.market_status = dataAvailable > 0 ? 'open' : 'data_unavailable';\n\n    return res.success(marketOverview);\n\n  } catch (error) {\n    console.error('Database connection failed in market overview:', error.message);\n    return res.error('Database connection failed', {\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get sentiment history over time\n\n// Get sentiment history over time\nrouter.get('/sentiment/history', async (req, res) => {\n  const { days = 30 } = req.query;\n  \n  console.log(`Sentiment history endpoint called for ${days} days`);\n  \n  try {\n    // Get fear & greed data\n    const fearGreedQuery = `\n      SELECT \n        date,\n        value,\n        classification\n      FROM fear_greed_index\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC\n      LIMIT 100\n    `;\n\n    let fearGreedData = [];\n    let fearGreedError = null;\n    try {\n      const fearGreedResult = await query(fearGreedQuery);\n      fearGreedData = fearGreedResult.rows;\n      console.log(`✅ Retrieved ${fearGreedData.length} fear & greed records from database`);\n    } catch (e) {\n      console.error('❌ Fear & greed table not available:', e.message);\n      fearGreedError = `Fear & greed data unavailable: ${e.message}`;\n      // NO FALLBACK DATA - return error information instead\n    }\n\n    // Get NAAIM data\n    const naaimQuery = `\n      SELECT \n        date,\n        exposure_index,\n        long_exposure,\n        short_exposure\n      FROM naaim\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC\n      LIMIT 100\n    `;\n\n    let naaimData = [];\n    let naaimError = null;\n    try {\n      const naaimResult = await query(naaimQuery);\n      naaimData = naaimResult.rows;\n      console.log(`✅ Retrieved ${naaimData.length} NAAIM records from database`);\n    } catch (e) {\n      console.error('❌ NAAIM table not available:', e.message);\n      naaimError = `NAAIM data unavailable: ${e.message}`;\n      // NO FALLBACK DATA - return error information instead\n    }\n\n    res.json({\n      data: {\n        fear_greed_history: fearGreedData,\n        naaim_history: naaimData,\n        aaii_history: [] // AAII data implementation pending - requires table creation\n      },\n      count: fearGreedData.length + naaimData.length,\n      period_days: days,\n      errors: {\n        fear_greed: fearGreedError,\n        naaim: naaimError,\n        aaii: 'AAII historical data not yet implemented - table structure needed'\n      },\n      data_source: 'database_query',\n      diagnostic: {\n        fear_greed_available: fearGreedData.length > 0,\n        naaim_available: naaimData.length > 0,\n        aaii_available: false,\n        troubleshooting: fearGreedError || naaimError ? \n          'Database connectivity or missing tables. Check data loading processes.' : \n          'All available data sources functioning normally'\n      }\n    });\n  } catch (error) {\n    console.error('❌ Critical error fetching sentiment history:', error);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Sentiment history data unavailable',\n      details: error.message,\n      data: {\n        fear_greed_history: [],\n        naaim_history: [],\n        aaii_history: []\n      },\n      diagnostic: {\n        issue: 'Database query execution failed',\n        potential_causes: [\n          'Database connection timeout',\n          'Missing required tables (fear_greed_index, naaim)',\n          'Database authentication failure',\n          'SQL query syntax error'\n        ],\n        troubleshooting: [\n          'Check database connectivity',\n          'Verify table existence: fear_greed_index, naaim',\n          'Review data loading processes',\n          'Check AWS RDS security groups and VPC configuration'\n        ],\n        system_checks: {\n          query_attempted: true,\n          tables_required: ['fear_greed_index', 'naaim', 'aaii'],\n          fallback_data: false\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get sector performance aggregates (market-level view)\nrouter.get('/sectors/performance', async (req, res) => {\n  console.log('Sector performance endpoint called');\n  \n  try {\n    // Check if market_data table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'market_data'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log('Market data table not found, returning fallback sector data');\n      // Return fallback sector data\n      const fallbackSectors = [\n        { sector: 'Technology', stock_count: 150, avg_change: 2.5, total_volume: 5000000000, avg_market_cap: 50000000000 },\n        { sector: 'Healthcare', stock_count: 120, avg_change: 1.8, total_volume: 3000000000, avg_market_cap: 40000000000 },\n        { sector: 'Financial', stock_count: 100, avg_change: 0.9, total_volume: 2500000000, avg_market_cap: 35000000000 },\n        { sector: 'Consumer Discretionary', stock_count: 80, avg_change: 1.2, total_volume: 2000000000, avg_market_cap: 30000000000 },\n        { sector: 'Industrial', stock_count: 90, avg_change: 0.7, total_volume: 1800000000, avg_market_cap: 25000000000 }\n      ];\n      \n      return res.json({\n        data: fallbackSectors,\n        count: fallbackSectors.length,\n        message: 'Using fallback data - market_data table not available'\n      });\n    }\n\n    // Get sector performance data\n    const sectorQuery = `\n      SELECT \n        sector,\n        COUNT(*) as stock_count,\n        AVG(COALESCE(change_percent, percent_change, pct_change, daily_change)) as avg_change,\n        SUM(volume) as total_volume,\n        AVG(market_cap) as avg_market_cap\n      FROM market_data\n      WHERE date = (SELECT MAX(date) FROM market_data)\n        AND sector IS NOT NULL\n        AND sector != ''\n      GROUP BY sector\n      ORDER BY avg_change DESC\n      LIMIT 20\n    `;\n\n    const result = await query(sectorQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      console.log('No sector data found in query, using realistic fallback');\n      const fallbackSectors = [\n        { sector: 'Technology', stock_count: 150, avg_change: 2.5, total_volume: 5000000000, avg_market_cap: 50000000000 },\n        { sector: 'Healthcare', stock_count: 120, avg_change: 1.8, total_volume: 3000000000, avg_market_cap: 40000000000 },\n        { sector: 'Financial Services', stock_count: 100, avg_change: 0.9, total_volume: 2500000000, avg_market_cap: 35000000000 },\n        { sector: 'Consumer Discretionary', stock_count: 80, avg_change: 1.2, total_volume: 2000000000, avg_market_cap: 30000000000 },\n        { sector: 'Industrials', stock_count: 90, avg_change: 0.7, total_volume: 1800000000, avg_market_cap: 25000000000 },\n        { sector: 'Consumer Staples', stock_count: 60, avg_change: 0.4, total_volume: 1200000000, avg_market_cap: 35000000000 },\n        { sector: 'Energy', stock_count: 40, avg_change: -0.5, total_volume: 1500000000, avg_market_cap: 20000000000 },\n        { sector: 'Utilities', stock_count: 30, avg_change: 0.1, total_volume: 800000000, avg_market_cap: 25000000000 }\n      ];\n      \n      return res.json({\n        data: fallbackSectors,\n        count: fallbackSectors.length,\n        message: 'Using realistic fallback sector data - no current market data'\n      });\n    }\n\n    res.json({\n      data: result.rows,\n      count: result.rows.length\n    });\n  } catch (error) {\n    console.error('Error fetching sector performance:', error);\n    // Return fallback data on error\n    const fallbackSectors = [\n      { sector: 'Technology', stock_count: 150, avg_change: 2.5, total_volume: 5000000000, avg_market_cap: 50000000000 },\n      { sector: 'Healthcare', stock_count: 120, avg_change: 1.8, total_volume: 3000000000, avg_market_cap: 40000000000 },\n      { sector: 'Financial Services', stock_count: 100, avg_change: 0.9, total_volume: 2500000000, avg_market_cap: 35000000000 },\n      { sector: 'Consumer Discretionary', stock_count: 80, avg_change: 1.2, total_volume: 2000000000, avg_market_cap: 30000000000 },\n      { sector: 'Industrials', stock_count: 90, avg_change: 0.7, total_volume: 1800000000, avg_market_cap: 25000000000 }\n    ];\n    \n    res.json({\n      data: fallbackSectors,\n      count: fallbackSectors.length,\n      error: 'Database error, using fallback data',\n      details: error.message\n    });\n  }\n});\n\n// Get market breadth indicators\nrouter.get('/breadth', async (req, res) => {\n  console.log('Market breadth endpoint called');\n  \n  try {\n    // Check if market_data table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'market_data'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log('Market data table not found, returning fallback breadth data');\n      // Return fallback breadth data\n      return res.json({\n        total_stocks: 5000,\n        advancing: 2800,\n        declining: 2000,\n        unchanged: 200,\n        strong_advancing: 450,\n        strong_declining: 320,\n        advance_decline_ratio: '1.40',\n        avg_change: '0.85',\n        avg_volume: 2500000,\n        message: 'Using fallback data - market_data table not available'\n      });\n    }\n\n    // Get market breadth data\n    const breadthQuery = `\n      SELECT \n        COUNT(*) as total_stocks,\n        COUNT(CASE WHEN COALESCE(change_percent, percent_change, pct_change, daily_change) > 0 THEN 1 END) as advancing,\n        COUNT(CASE WHEN COALESCE(change_percent, percent_change, pct_change, daily_change) < 0 THEN 1 END) as declining,\n        COUNT(CASE WHEN COALESCE(change_percent, percent_change, pct_change, daily_change) = 0 THEN 1 END) as unchanged,\n        COUNT(CASE WHEN COALESCE(change_percent, percent_change, pct_change, daily_change) > 5 THEN 1 END) as strong_advancing,\n        COUNT(CASE WHEN COALESCE(change_percent, percent_change, pct_change, daily_change) < -5 THEN 1 END) as strong_declining,\n        AVG(COALESCE(change_percent, percent_change, pct_change, daily_change)) as avg_change,\n        AVG(volume) as avg_volume\n      FROM market_data\n      WHERE date = (SELECT MAX(date) FROM market_data)\n    `;\n\n    const result = await query(breadthQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0 || !result.rows[0].total_stocks || result.rows[0].total_stocks == 0) {\n      console.log('No breadth data found, using realistic fallback');\n      return res.json({\n        total_stocks: 4800,\n        advancing: 2650,\n        declining: 1920,\n        unchanged: 230,\n        strong_advancing: 450,\n        strong_declining: 320,\n        advance_decline_ratio: '1.38',\n        avg_change: '0.45',\n        avg_volume: 2500000,\n        message: 'Using realistic fallback breadth data'\n      });\n    }\n\n    const breadth = result.rows[0];\n\n    res.json({\n      total_stocks: parseInt(breadth.total_stocks),\n      advancing: parseInt(breadth.advancing),\n      declining: parseInt(breadth.declining),\n      unchanged: parseInt(breadth.unchanged),\n      strong_advancing: parseInt(breadth.strong_advancing),\n      strong_declining: parseInt(breadth.strong_declining),\n      advance_decline_ratio: breadth.declining > 0 ? (breadth.advancing / breadth.declining).toFixed(2) : 'N/A',\n      avg_change: parseFloat(breadth.avg_change).toFixed(2),\n      avg_volume: parseInt(breadth.avg_volume)\n    });\n  } catch (error) {\n    console.error('Error fetching market breadth:', error);\n    // Return fallback data on error\n    res.json({\n      total_stocks: 5000,\n      advancing: 2800,\n      declining: 2000,\n      unchanged: 200,\n      strong_advancing: 450,\n      strong_declining: 320,\n      advance_decline_ratio: '1.40',\n      avg_change: '0.85',\n      avg_volume: 2500000,\n      error: 'Database error, using fallback data',\n      details: error.message\n    });\n  }\n});\n\n// Get economic indicators\nrouter.get('/economic', async (req, res) => {\n  const { days = 90 } = req.query;\n  \n  console.log(`Economic indicators endpoint called for ${days} days`);\n  \n  try {\n    // Check if economic_data table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'economic_data'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log('Economic data table does not exist, returning fallback data');\n      // Return fallback economic data\n      const fallbackIndicators = {\n        'GDP Growth Rate': [\n          { date: new Date().toISOString(), value: 2.1, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 1.9, unit: '%' }\n        ],\n        'Unemployment Rate': [\n          { date: new Date().toISOString(), value: 3.7, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 3.8, unit: '%' }\n        ],\n        'Inflation Rate': [\n          { date: new Date().toISOString(), value: 3.2, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 3.4, unit: '%' }\n        ],\n        'Federal Funds Rate': [\n          { date: new Date().toISOString(), value: 5.25, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 5.00, unit: '%' }\n        ]\n      };\n      \n      return res.json({\n        data: fallbackIndicators,\n        count: Object.keys(fallbackIndicators).length,\n        total_points: 8,\n        message: 'Using fallback data - economic_data table not available'\n      });\n    }\n\n    // Get economic indicators\n    const economicQuery = `\n      SELECT \n        date,\n        indicator_name,\n        value,\n        unit,\n        frequency\n      FROM economic_data\n      WHERE date >= NOW() - INTERVAL '${days} days'\n      ORDER BY date DESC, indicator_name\n      LIMIT 500\n    `;\n\n    const result = await query(economicQuery);\n    console.log(`Found ${result.rows.length} economic data points`);\n\n    // Group by indicator\n    const indicators = {};\n    result.rows.forEach(row => {\n      if (!indicators[row.indicator_name]) {\n        indicators[row.indicator_name] = [];\n      }\n      indicators[row.indicator_name].push({\n        date: row.date,\n        value: row.value,\n        unit: row.unit\n      });\n    });\n\n    console.log(`Processed ${Object.keys(indicators).length} economic indicators`);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      console.log('No economic data found, using realistic fallback');\n      const fallbackIndicators = {\n        'GDP Growth Rate': [\n          { date: new Date().toISOString(), value: 2.4, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 2.1, unit: '%' }\n        ],\n        'Unemployment Rate': [\n          { date: new Date().toISOString(), value: 3.7, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 3.8, unit: '%' }\n        ],\n        'Inflation Rate (CPI)': [\n          { date: new Date().toISOString(), value: 3.2, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 3.4, unit: '%' }\n        ],\n        'Federal Funds Rate': [\n          { date: new Date().toISOString(), value: 5.25, unit: '%' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 5.00, unit: '%' }\n        ],\n        'Consumer Confidence': [\n          { date: new Date().toISOString(), value: 102.3, unit: 'Index' },\n          { date: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), value: 98.7, unit: 'Index' }\n        ]\n      };\n      \n      return res.json({\n        data: fallbackIndicators,\n        count: Object.keys(fallbackIndicators).length,\n        total_points: Object.values(fallbackIndicators).reduce((sum, arr) => sum + arr.length, 0),\n        message: 'Using realistic fallback economic data'\n      });\n    }\n\n    res.json({\n      data: indicators,\n      count: Object.keys(indicators).length,\n      total_points: result.rows.length\n    });\n  } catch (error) {\n    console.error('Error fetching economic indicators:', error);\n    // Return fallback data on error\n    const fallbackIndicators = {\n      'GDP Growth Rate': [\n        { date: new Date().toISOString(), value: 2.1, unit: '%' }\n      ],\n      'Unemployment Rate': [\n        { date: new Date().toISOString(), value: 3.7, unit: '%' }\n      ],\n      'Inflation Rate': [\n        { date: new Date().toISOString(), value: 3.2, unit: '%' }\n      ]\n    };\n    \n    res.json({\n      data: fallbackIndicators,\n      count: Object.keys(fallbackIndicators).length,\n      total_points: 3,\n      error: 'Database error, using fallback data',\n      details: error.message\n    });\n  }\n});\n\n// Get NAAIM data (for DataValidation page)\nrouter.get('/naaim', async (req, res) => {\n  const { limit = 30 } = req.query;\n  \n  console.log(`NAAIM data endpoint called with limit: ${limit}`);\n  \n  try {\n    const naaimQuery = `\n      SELECT \n        date,\n        naaim_number_mean as exposure_index,\n        bullish as long_exposure,\n        bearish as short_exposure\n      FROM naaim\n      ORDER BY date DESC\n      LIMIT $1\n    `;\n\n    const result = await query(naaimQuery, [parseInt(limit)]);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: result.rows,\n      count: result.rows.length\n    });\n  } catch (error) {\n    console.error('Error fetching NAAIM data:', error);\n    // Return fallback data on error\n    const fallbackData = [];\n    for (let i = 0; i < Math.min(limit, 30); i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      fallbackData.push({\n        date: date.toISOString(),\n        exposure_index: Math.floor(Math.random() * 100),\n        long_exposure: Math.floor(Math.random() * 100),\n        short_exposure: Math.floor(Math.random() * 50)\n      });\n    }\n    \n    res.json({\n      data: fallbackData,\n      count: fallbackData.length,\n      error: 'Database error, using fallback data',\n      details: error.message\n    });\n  }\n});\n\n// Get fear & greed data (for DataValidation page)\nrouter.get('/fear-greed', async (req, res) => {\n  const { limit = 30 } = req.query;\n  \n  console.log(`Fear & Greed data endpoint called with limit: ${limit}`);\n  \n  try {\n    const fearGreedQuery = `\n      SELECT \n        date,\n        value,\n        classification\n      FROM fear_greed_index\n      ORDER BY date DESC\n      LIMIT $1\n    `;\n\n    const result = await query(fearGreedQuery, [parseInt(limit)]);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      console.log('No fear & greed data found, using realistic fallback');\n      const fallbackData = [];\n      const classifications = ['Extreme Fear', 'Fear', 'Neutral', 'Greed', 'Extreme Greed'];\n      for (let i = 0; i < Math.min(limit, 30); i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        fallbackData.push({\n          date: date.toISOString(),\n          value: Math.floor(Math.random() * 60) + 20, // 20-80 range\n          classification: classifications[Math.floor(Math.random() * classifications.length)]\n        });\n      }\n      \n      return res.json({\n        data: fallbackData,\n        count: fallbackData.length,\n        message: 'Using realistic fallback fear & greed data'\n      });\n    }\n\n    res.json({\n      data: result.rows,\n      count: result.rows.length\n    });\n  } catch (error) {\n    console.error('Error fetching fear & greed data:', error);\n    // Return fallback data on error\n    const fallbackData = [];\n    const classifications = ['Extreme Fear', 'Fear', 'Neutral', 'Greed', 'Extreme Greed'];\n    for (let i = 0; i < Math.min(limit, 30); i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      fallbackData.push({\n        date: date.toISOString(),\n        value: Math.floor(Math.random() * 100),\n        classification: classifications[Math.floor(Math.random() * classifications.length)]\n      });\n    }\n    \n    res.json({\n      data: fallbackData,\n      count: fallbackData.length,\n      error: 'Database error, using fallback data',\n      details: error.message\n    });\n  }\n});\n\n// Get market indices\nrouter.get('/indices', async (req, res) => {\n  try {\n    // Get major market indices\n    const indicesQuery = `\n      SELECT \n        symbol,\n        current_price,\n        previous_close,\n        COALESCE(change_percent, percent_change, pct_change, daily_change) as change_percent,\n        volume,\n        market_cap,\n        date\n      FROM market_data\n      WHERE symbol IN ('^GSPC', '^DJI', '^IXIC', '^RUT', '^VIX')\n        AND date = (SELECT MAX(date) FROM market_data)\n      ORDER BY symbol\n    `;\n\n    const result = await query(indicesQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: result.rows,\n      count: result.rows.length,\n      lastUpdated: result.rows.length > 0 ? result.rows[0].date : null\n    });\n  } catch (error) {\n    console.error('Error fetching market indices:', error);\n    res.status(500).json({ error: 'Failed to fetch market indices' });\n  }\n});\n\n// Get sector performance (alias for sectors/performance)\nrouter.get('/sectors', async (req, res) => {\n  try {\n    // Get sector performance data\n    const sectorQuery = `\n      SELECT \n        sector,\n        COUNT(*) as stock_count,\n        AVG(COALESCE(change_percent, percent_change, pct_change, daily_change)) as avg_change,\n        SUM(volume) as total_volume,\n        AVG(market_cap) as avg_market_cap\n      FROM market_data\n      WHERE date = (SELECT MAX(date) FROM market_data)\n        AND sector IS NOT NULL\n        AND sector != ''\n      GROUP BY sector\n      ORDER BY avg_change DESC\n      LIMIT 20\n    `;\n\n    const result = await query(sectorQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      console.log('No sectors data found, using realistic fallback');\n      const fallbackSectors = [\n        { sector: 'Technology', stock_count: 150, avg_change: 2.5, total_volume: 5000000000, avg_market_cap: 50000000000 },\n        { sector: 'Healthcare', stock_count: 120, avg_change: 1.8, total_volume: 3000000000, avg_market_cap: 40000000000 },\n        { sector: 'Financial Services', stock_count: 100, avg_change: 0.9, total_volume: 2500000000, avg_market_cap: 35000000000 },\n        { sector: 'Consumer Discretionary', stock_count: 80, avg_change: 1.2, total_volume: 2000000000, avg_market_cap: 30000000000 },\n        { sector: 'Industrials', stock_count: 90, avg_change: 0.7, total_volume: 1800000000, avg_market_cap: 25000000000 }\n      ];\n      \n      return res.json({\n        data: fallbackSectors,\n        count: fallbackSectors.length,\n        message: 'Using realistic fallback sectors data'\n      });\n    }\n\n    res.json({\n      data: result.rows,\n      count: result.rows.length\n    });\n  } catch (error) {\n    console.error('Error fetching sector performance:', error);\n    res.status(500).json({ error: 'Failed to fetch sector performance' });\n  }\n});\n\n// Get market volatility\nrouter.get('/volatility', async (req, res) => {\n  try {\n    // Get VIX and volatility data\n    const volatilityQuery = `\n      SELECT \n        symbol,\n        current_price,\n        previous_close,\n        COALESCE(change_percent, percent_change, pct_change, daily_change) as change_percent,\n        date\n      FROM market_data\n      WHERE symbol = '^VIX'\n        AND date = (SELECT MAX(date) FROM market_data)\n    `;\n\n    const result = await query(volatilityQuery);\n\n    // Calculate market volatility from all stocks\n    const marketVolatilityQuery = `\n      SELECT \n        STDDEV(COALESCE(change_percent, percent_change, pct_change, daily_change)) as market_volatility,\n        AVG(ABS(COALESCE(change_percent, percent_change, pct_change, daily_change))) as avg_absolute_change\n      FROM market_data\n      WHERE date = (SELECT MAX(date) FROM market_data)\n        AND COALESCE(change_percent, percent_change, pct_change, daily_change) IS NOT NULL\n    `;\n\n    const volatilityResult = await query(marketVolatilityQuery);\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: {\n        vix: result.rows[0] || null,\n        market_volatility: volatilityResult.rows[0]?.market_volatility || 0,\n        avg_absolute_change: volatilityResult.rows[0]?.avg_absolute_change || 0\n      },\n      lastUpdated: result.rows.length > 0 ? result.rows[0].date : null\n    });\n  } catch (error) {\n    console.error('Error fetching market volatility:', error);\n    res.status(500).json({ error: 'Failed to fetch market volatility' });\n  }\n});\n\n// Get economic calendar\nrouter.get('/calendar', async (req, res) => {\n  try {\n    console.log('📅 Economic calendar endpoint called');\n    \n    // Check if economic_calendar table exists\n    const tableExists = await checkRequiredTables(['economic_calendar']);\n    \n    if (!tableExists.economic_calendar) {\n      console.log('⚠️ Economic calendar table not found, returning mock data');\n      \n      // Mock economic calendar data for fallback\n      const calendarData = [\n        {\n          event: 'FOMC Rate Decision',\n          date: new Date(Date.now() + 4 * 24 * 60 * 60 * 1000).toISOString(),\n          time: '14:00',\n          importance: 'High',\n          currency: 'USD',\n          category: 'monetary_policy',\n          forecast: '5.00-5.25%',\n          previous: '5.25-5.50%',\n          country: 'US',\n          source: 'Federal Reserve'\n        },\n        {\n          event: 'Nonfarm Payrolls',\n          date: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),\n          time: '08:30',\n          importance: 'High',\n          currency: 'USD',\n          category: 'employment',\n          forecast: '160K',\n          previous: '227K',\n          country: 'US',\n          source: 'Bureau of Labor Statistics'\n        },\n        {\n          event: 'Consumer Price Index',\n          date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n          time: '08:30',\n          importance: 'High',\n          currency: 'USD',\n          category: 'inflation',\n          forecast: '2.4% Y/Y',\n          previous: '2.6% Y/Y',\n          country: 'US',\n          source: 'Bureau of Labor Statistics'\n        }\n      ];\n\n      return res.json({\n        data: calendarData,\n        count: calendarData.length,\n        source: 'mock'\n      });\n    }\n\n    // Get upcoming events from database\n    const days = parseInt(req.query.days) || 30;\n    const importance = req.query.importance;\n    const category = req.query.category;\n    \n    let whereClause = 'WHERE event_date >= CURRENT_DATE';\n    let queryParams = [days];\n    let paramCount = 1;\n\n    if (importance) {\n      whereClause += ` AND importance = $${++paramCount}`;\n      queryParams.push(importance);\n    }\n\n    if (category) {\n      whereClause += ` AND category = $${++paramCount}`;\n      queryParams.push(category);\n    }\n\n    const calendarQuery = `\n      SELECT \n        event_id,\n        event_name,\n        country,\n        category,\n        importance,\n        currency,\n        event_date,\n        event_time,\n        timezone,\n        actual_value,\n        forecast_value,\n        previous_value,\n        unit,\n        frequency,\n        source,\n        description,\n        is_revised,\n        created_at,\n        updated_at\n      FROM economic_calendar\n      ${whereClause}\n      AND event_date <= CURRENT_DATE + INTERVAL '$1 days'\n      ORDER BY event_date ASC, event_time ASC\n      LIMIT 100\n    `;\n\n    const result = await query(calendarQuery, queryParams);\n    \n    // Format the results\n    const calendarData = result.rows.map(row => ({\n      event_id: row.event_id,\n      event: row.event_name,\n      date: row.event_date,\n      time: row.event_time,\n      importance: row.importance,\n      currency: row.currency,\n      category: row.category,\n      country: row.country,\n      forecast: row.forecast_value,\n      previous: row.previous_value,\n      actual: row.actual_value,\n      unit: row.unit,\n      frequency: row.frequency,\n      source: row.source,\n      description: row.description,\n      is_revised: row.is_revised,\n      timezone: row.timezone,\n      created_at: row.created_at,\n      updated_at: row.updated_at\n    }));\n\n    console.log(`✅ Retrieved ${calendarData.length} economic calendar events`);\n\n    res.json({\n      data: calendarData,\n      count: calendarData.length,\n      source: 'database',\n      filters: {\n        days,\n        importance,\n        category\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching economic calendar:', error);\n    res.status(500).json({ error: 'Failed to fetch economic calendar' });\n  }\n});\n\n// Get market indicators\nrouter.get('/indicators', async (req, res) => {\n  console.log('📊 Market indicators endpoint called');\n  \n  try {\n    // Get market indicators data\n    const indicatorsQuery = `\n      SELECT \n        symbol,\n        current_price,\n        previous_close,\n        COALESCE(change_percent, percent_change, pct_change, daily_change) as change_percent,\n        volume,\n        market_cap,\n        sector,\n        date\n      FROM market_data\n      WHERE symbol IN ('^GSPC', '^DJI', '^IXIC', '^RUT', '^VIX', 'SPY', 'QQQ', 'IWM', 'DIA')\n        AND date = (SELECT MAX(date) FROM market_data)\n      ORDER BY symbol\n    `;\n\n    const result = await query(indicatorsQuery);\n\n    // Get market breadth\n    const breadthQuery = `\n      SELECT \n        COUNT(*) as total_stocks,\n        COUNT(CASE WHEN change_percent > 0 THEN 1 END) as advancing,\n        COUNT(CASE WHEN change_percent < 0 THEN 1 END) as declining,\n        AVG(change_percent) as avg_change\n      FROM market_data\n      WHERE date = (SELECT MAX(date) FROM market_data)\n    `;\n\n    const breadthResult = await query(breadthQuery);\n    const breadth = breadthResult.rows[0];\n\n    // Get latest sentiment data\n    const sentimentQuery = `\n      SELECT \n        value,\n        classification,\n        date\n      FROM fear_greed_index\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    let sentiment = null;\n    try {\n      const sentimentResult = await query(sentimentQuery);\n      sentiment = sentimentResult.rows[0] || null;\n    } catch (e) {\n      // Sentiment table might not exist\n    }\n\n    if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        indices: result.rows,\n        breadth: {\n          total_stocks: parseInt(breadth.total_stocks),\n          advancing: parseInt(breadth.advancing),\n          declining: parseInt(breadth.declining),\n          advance_decline_ratio: breadth.declining > 0 ? (breadth.advancing / breadth.declining).toFixed(2) : 'N/A',\n          avg_change: parseFloat(breadth.avg_change).toFixed(2)\n        },\n        sentiment: sentiment\n      },\n      count: result.rows.length,\n      lastUpdated: result.rows.length > 0 ? result.rows[0].date : null\n    });\n  } catch (error) {\n    console.error('Error fetching market indicators:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market indicators',\n      details: error.message\n    });\n  }\n});\n\n// Get market sentiment\nrouter.get('/sentiment', async (req, res) => {\n  console.log('😊 Market sentiment endpoint called');\n  \n  try {\n    // Get latest fear & greed data\n    const fearGreedQuery = `\n      SELECT \n        value,\n        classification,\n        date\n      FROM fear_greed_index\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    let fearGreed = null;\n    try {\n      const fearGreedResult = await query(fearGreedQuery);\n      fearGreed = fearGreedResult.rows[0] || null;\n    } catch (e) {\n      // Table might not exist\n    }\n\n    // Get latest NAAIM data\n    const naaimQuery = `\n      SELECT \n        exposure_index,\n        long_exposure,\n        short_exposure,\n        date\n      FROM naaim\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    let naaim = null;\n    try {\n      const naaimResult = await query(naaimQuery);\n      naaim = naaimResult.rows[0] || null;\n    } catch (e) {\n      // Table might not exist\n    }\n\n    if (!fearGreed || !naaim) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        fear_greed: fearGreed,\n        naaim: naaim\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching market sentiment:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market sentiment',\n      details: error.message\n    });\n  }\n});\n\n// Market seasonality endpoint\nrouter.get('/seasonality', async (req, res) => {\n  console.log('📅 Market seasonality endpoint called');\n  \n  try {\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth() + 1; // 1-12\n    const currentDay = currentDate.getDate();\n    const dayOfYear = Math.floor((currentDate - new Date(currentYear, 0, 0)) / (1000 * 60 * 60 * 24));\n    \n    // Get current year S&P 500 performance\n    let currentYearReturn = 8.5; // Default fallback\n    try {\n      const yearStart = new Date(currentYear, 0, 1);\n      const spyQuery = `\n        SELECT close_price, date\n        FROM market_data \n        WHERE symbol = 'SPY' AND date >= $1\n        ORDER BY date DESC LIMIT 1\n      `;\n      const spyResult = await query(spyQuery, [yearStart.toISOString().split('T')[0]]);\n      \n      if (spyResult.rows.length > 0) {\n        const yearStartQuery = `\n          SELECT close_price FROM market_data \n          WHERE symbol = 'SPY' AND date >= $1\n          ORDER BY date ASC LIMIT 1\n        `;\n        const yearStartResult = await query(yearStartQuery, [yearStart.toISOString().split('T')[0]]);\n        \n        if (yearStartResult.rows.length > 0) {\n          const currentPrice = parseFloat(spyResult.rows[0].close_price);\n          const yearStartPrice = parseFloat(yearStartResult.rows[0].close_price);\n          currentYearReturn = ((currentPrice - yearStartPrice) / yearStartPrice) * 100;\n        }\n      }\n    } catch (e) {\n      console.log('Could not fetch SPY data:', e.message);\n    }\n\n    // 1. PRESIDENTIAL CYCLE (4-Year Pattern)\n    const electionYear = Math.floor((currentYear - 1792) / 4) * 4 + 1792;\n    const currentCyclePosition = ((currentYear - electionYear) % 4) + 1;\n    const presidentialCycle = {\n      currentPosition: currentCyclePosition,\n      data: [\n        { year: 1, label: 'Post-Election', avgReturn: 6.5, isCurrent: currentCyclePosition === 1 },\n        { year: 2, label: 'Mid-Term', avgReturn: 7.0, isCurrent: currentCyclePosition === 2 },\n        { year: 3, label: 'Pre-Election', avgReturn: 16.4, isCurrent: currentCyclePosition === 3 },\n        { year: 4, label: 'Election Year', avgReturn: 6.6, isCurrent: currentCyclePosition === 4 }\n      ]\n    };\n\n    // 2. MONTHLY SEASONALITY\n    const monthlySeasonality = [\n      { month: 1, name: 'January', avgReturn: 1.2, description: 'January Effect - small cap outperformance' },\n      { month: 2, name: 'February', avgReturn: 0.4, description: 'Typically weak month' },\n      { month: 3, name: 'March', avgReturn: 1.1, description: 'End of Q1 rebalancing' },\n      { month: 4, name: 'April', avgReturn: 1.6, description: 'Strong historical performance' },\n      { month: 5, name: 'May', avgReturn: 0.2, description: 'Sell in May and go away begins' },\n      { month: 6, name: 'June', avgReturn: 0.1, description: 'FOMC meeting impacts' },\n      { month: 7, name: 'July', avgReturn: 1.2, description: 'Summer rally potential' },\n      { month: 8, name: 'August', avgReturn: -0.1, description: 'Vacation month - low volume' },\n      { month: 9, name: 'September', avgReturn: -0.7, description: 'Historically worst month' },\n      { month: 10, name: 'October', avgReturn: 0.8, description: 'Volatility and opportunity' },\n      { month: 11, name: 'November', avgReturn: 1.8, description: 'Holiday rally begins' },\n      { month: 12, name: 'December', avgReturn: 1.6, description: 'Santa Claus rally' }\n    ].map(m => ({ ...m, isCurrent: m.month === currentMonth }));\n\n    // 3. QUARTERLY PATTERNS\n    const quarterlySeasonality = [\n      { quarter: 1, name: 'Q1', months: 'Jan-Mar', avgReturn: 2.7, description: 'New year optimism, earnings season' },\n      { quarter: 2, name: 'Q2', months: 'Apr-Jun', avgReturn: 1.9, description: 'Spring rally, then summer doldrums' },\n      { quarter: 3, name: 'Q3', months: 'Jul-Sep', avgReturn: 0.4, description: 'Summer volatility, September weakness' },\n      { quarter: 4, name: 'Q4', months: 'Oct-Dec', avgReturn: 4.2, description: 'Holiday rally, year-end positioning' }\n    ].map(q => ({ ...q, isCurrent: Math.ceil(currentMonth / 3) === q.quarter }));\n\n    // 4. INTRADAY PATTERNS\n    const intradayPatterns = {\n      marketOpen: { time: '9:30 AM', pattern: 'High volatility, gap analysis' },\n      morningSession: { time: '10:00-11:30 AM', pattern: 'Trend establishment' },\n      lunchTime: { time: '11:30 AM-1:30 PM', pattern: 'Lower volume, consolidation' },\n      afternoonSession: { time: '1:30-3:00 PM', pattern: 'Institutional activity' },\n      powerHour: { time: '3:00-4:00 PM', pattern: 'High volume, day trader exits' },\n      marketClose: { time: '4:00 PM', pattern: 'Final positioning, after-hours news' }\n    };\n\n    // 5. DAY OF WEEK EFFECTS\n    const dowEffects = [\n      { day: 'Monday', avgReturn: -0.18, description: 'Monday Blues - weekend news impact' },\n      { day: 'Tuesday', avgReturn: 0.04, description: 'Neutral performance' },\n      { day: 'Wednesday', avgReturn: 0.02, description: 'Mid-week stability' },\n      { day: 'Thursday', avgReturn: 0.03, description: 'Slight positive bias' },\n      { day: 'Friday', avgReturn: 0.08, description: 'TGIF effect - short covering' }\n    ].map(d => ({ ...d, isCurrent: d.day === currentDate.toLocaleDateString('en-US', { weekday: 'long' }) }));\n\n    // 6. SECTOR ROTATION CALENDAR\n    const sectorSeasonality = [\n      { sector: 'Technology', bestMonths: [4, 10, 11], worstMonths: [8, 9], rationale: 'Earnings cycles, back-to-school' },\n      { sector: 'Energy', bestMonths: [5, 6, 7], worstMonths: [11, 12, 1], rationale: 'Driving season demand' },\n      { sector: 'Retail/Consumer', bestMonths: [10, 11, 12], worstMonths: [2, 3], rationale: 'Holiday shopping season' },\n      { sector: 'Healthcare', bestMonths: [1, 2, 3], worstMonths: [7, 8], rationale: 'Defensive play, budget cycles' },\n      { sector: 'Financials', bestMonths: [12, 1, 6], worstMonths: [8, 9], rationale: 'Rate environment, year-end' },\n      { sector: 'Utilities', bestMonths: [8, 9, 10], worstMonths: [4, 5], rationale: 'Defensive rotation periods' }\n    ];\n\n    // 7. HOLIDAY EFFECTS\n    const holidayEffects = [\n      { holiday: 'New Year', dates: 'Dec 31 - Jan 2', effect: '+0.4%', description: 'Year-end positioning, January effect' },\n      { holiday: 'Presidents Day', dates: 'Third Monday Feb', effect: '+0.2%', description: 'Long weekend rally' },\n      { holiday: 'Good Friday', dates: 'Friday before Easter', effect: '+0.1%', description: 'Shortened trading week' },\n      { holiday: 'Memorial Day', dates: 'Last Monday May', effect: '+0.3%', description: 'Summer season kickoff' },\n      { holiday: 'Independence Day', dates: 'July 4th week', effect: '+0.2%', description: 'Patriotic premium' },\n      { holiday: 'Labor Day', dates: 'First Monday Sep', effect: '-0.1%', description: 'End of summer doldrums' },\n      { holiday: 'Thanksgiving', dates: 'Fourth Thursday Nov', effect: '+0.5%', description: 'Black Friday optimism' },\n      { holiday: 'Christmas', dates: 'Dec 24-26', effect: '+0.6%', description: 'Santa Claus rally' }\n    ];\n\n    // 8. ANOMALY CALENDAR\n    const seasonalAnomalies = [\n      { name: 'January Effect', period: 'First 5 trading days', description: 'Small-cap outperformance', strength: 'Strong' },\n      { name: 'Sell in May', period: 'May 1 - Oct 31', description: 'Summer underperformance', strength: 'Moderate' },\n      { name: 'Halloween Indicator', period: 'Oct 31 - May 1', description: 'Best 6 months', strength: 'Strong' },\n      { name: 'Santa Claus Rally', period: 'Last 5 + First 2 days', description: 'Year-end rally', strength: 'Moderate' },\n      { name: 'September Effect', period: 'September', description: 'Worst performing month', strength: 'Strong' },\n      { name: 'Triple Witching', period: 'Third Friday quarterly', description: 'Options/futures expiry volatility', strength: 'Moderate' },\n      { name: 'Turn of Month', period: 'Last 3 + First 2 days', description: 'Portfolio rebalancing', strength: 'Weak' },\n      { name: 'FOMC Effect', period: 'Fed meeting days', description: 'Pre-meeting rally, post-meeting volatility', strength: 'Strong' }\n    ];\n\n    // 9. CURRENT SEASONAL POSITION\n    const currentPosition = {\n      presidentialCycle: `Year ${currentCyclePosition} of 4`,\n      monthlyTrend: monthlySeasonality[currentMonth - 1].description,\n      quarterlyTrend: quarterlySeasonality[Math.ceil(currentMonth / 3) - 1].description,\n      activePeriods: getActiveSeasonalPeriods(currentDate),\n      nextMajorEvent: getNextSeasonalEvent(currentDate),\n      seasonalScore: calculateSeasonalScore(currentDate)\n    };\n\n    res.json({\n      success: true,\n      data: {\n        currentYear,\n        currentYearReturn,\n        currentPosition,\n        presidentialCycle,\n        monthlySeasonality,\n        quarterlySeasonality,\n        intradayPatterns,\n        dayOfWeekEffects: dowEffects,\n        sectorSeasonality,\n        holidayEffects,\n        seasonalAnomalies,\n        summary: {\n          favorableFactors: getFavorableFactors(currentDate),\n          unfavorableFactors: getUnfavorableFactors(currentDate),\n          overallSeasonalBias: getOverallBias(currentDate),\n          confidence: 'Moderate', // Based on historical data strength\n          recommendation: getSeasonalRecommendation(currentDate)\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching seasonality data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch seasonality data',\n      details: error.message\n    });\n  }\n});\n\n// Helper functions for seasonality analysis\nfunction getActiveSeasonalPeriods(date) {\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const active = [];\n  \n  // Check for active seasonal periods\n  if (month >= 5 && month <= 10) {\n    active.push('Sell in May Period');\n  }\n  if (month >= 11 || month <= 4) {\n    active.push('Halloween Indicator Period');\n  }\n  if (month === 12 && day >= 24) {\n    active.push('Santa Claus Rally');\n  }\n  if (month === 1 && day <= 5) {\n    active.push('January Effect');\n  }\n  if (month === 9) {\n    active.push('September Effect');\n  }\n  \n  return active.length > 0 ? active : ['Standard Trading Period'];\n}\n\nfunction getNextSeasonalEvent(date) {\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  \n  // Define seasonal events chronologically\n  const events = [\n    { month: 1, day: 1, name: 'January Effect Begin', daysAway: null },\n    { month: 5, day: 1, name: 'Sell in May Begin', daysAway: null },\n    { month: 9, day: 1, name: 'September Effect', daysAway: null },\n    { month: 10, day: 31, name: 'Halloween Indicator Begin', daysAway: null },\n    { month: 12, day: 24, name: 'Santa Claus Rally', daysAway: null }\n  ];\n  \n  // Find next event\n  for (const event of events) {\n    const eventDate = new Date(date.getFullYear(), event.month - 1, event.day);\n    if (eventDate > date) {\n      const daysAway = Math.ceil((eventDate - date) / (1000 * 60 * 60 * 24));\n      return { ...event, daysAway };\n    }\n  }\n  \n  // If no events this year, return first event of next year\n  const nextYearEvent = events[0];\n  const nextEventDate = new Date(date.getFullYear() + 1, nextYearEvent.month - 1, nextYearEvent.day);\n  const daysAway = Math.ceil((nextEventDate - date) / (1000 * 60 * 60 * 24));\n  return { ...nextYearEvent, daysAway };\n}\n\nfunction calculateSeasonalScore(date) {\n  const month = date.getMonth() + 1;\n  let score = 50; // Neutral baseline\n  \n  // Monthly adjustments\n  const monthlyScores = {\n    1: 65, 2: 45, 3: 60, 4: 70, 5: 35, 6: 35,\n    7: 60, 8: 30, 9: 15, 10: 55, 11: 75, 12: 70\n  };\n  \n  score = monthlyScores[month] || 50;\n  \n  // Presidential cycle adjustment\n  const year = date.getFullYear();\n  const electionYear = Math.floor((year - 1792) / 4) * 4 + 1792;\n  const cyclePosition = ((year - electionYear) % 4) + 1;\n  \n  const cycleAdjustments = { 1: -5, 2: -3, 3: +15, 4: -3 };\n  score += cycleAdjustments[cyclePosition] || 0;\n  \n  return Math.max(0, Math.min(100, Math.round(score)));\n}\n\nfunction getFavorableFactors(date) {\n  const month = date.getMonth() + 1;\n  const factors = [];\n  \n  if ([1, 4, 11, 12].includes(month)) {\n    factors.push('Historically strong month');\n  }\n  if (month >= 11 || month <= 4) {\n    factors.push('Halloween Indicator period');\n  }\n  if (month === 12) {\n    factors.push('Holiday rally season');\n  }\n  if (month === 1) {\n    factors.push('January Effect potential');\n  }\n  \n  return factors.length > 0 ? factors : ['Limited seasonal tailwinds'];\n}\n\nfunction getUnfavorableFactors(date) {\n  const month = date.getMonth() + 1;\n  const factors = [];\n  \n  if (month === 9) {\n    factors.push('September Effect - historically worst month');\n  }\n  if ([5, 6, 7, 8].includes(month)) {\n    factors.push('Summer doldrums period');\n  }\n  if (month >= 5 && month <= 10) {\n    factors.push('Sell in May period active');\n  }\n  \n  return factors.length > 0 ? factors : ['Limited seasonal headwinds'];\n}\n\nfunction getOverallBias(date) {\n  const score = calculateSeasonalScore(date);\n  \n  if (score >= 70) return 'Strongly Bullish';\n  if (score >= 60) return 'Bullish';\n  if (score >= 40) return 'Neutral';\n  if (score >= 30) return 'Bearish';\n  return 'Strongly Bearish';\n}\n\nfunction getSeasonalRecommendation(date) {\n  const month = date.getMonth() + 1;\n  const score = calculateSeasonalScore(date);\n  \n  if (score >= 70) {\n    return 'Strong seasonal tailwinds suggest overweight equity positions';\n  } else if (score >= 60) {\n    return 'Moderate seasonal support for risk-on positioning';\n  } else if (score >= 40) {\n    return 'Mixed seasonal signals suggest balanced approach';\n  } else if (score >= 30) {\n    return 'Seasonal headwinds suggest defensive positioning';\n  } else {\n    return 'Strong seasonal headwinds suggest risk-off approach';\n  }\n}\n\n// Market research indicators endpoint\nrouter.get('/research-indicators', async (req, res) => {\n  console.log('🔬 Market research indicators endpoint called');\n  \n  try {\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const oneYearAgo = new Date(today.getTime() - 365 * 24 * 60 * 60 * 1000);\n    \n    // VIX levels (volatility indicator)\n    const vixData = {\n      current: 18.5 + Math.random() * 10, // Simulated VIX data\n      thirtyDayAvg: 20.2 + Math.random() * 8,\n      interpretation: function() {\n        if (this.current < 12) return { level: 'Low', sentiment: 'Complacent', color: 'success' };\n        if (this.current < 20) return { level: 'Normal', sentiment: 'Neutral', color: 'info' };\n        if (this.current < 30) return { level: 'Elevated', sentiment: 'Concerned', color: 'warning' };\n        return { level: 'High', sentiment: 'Fearful', color: 'error' };\n      }\n    };\n    \n    // Put/Call ratio\n    const putCallRatio = {\n      current: 0.8 + Math.random() * 0.6,\n      tenDayAvg: 0.9 + Math.random() * 0.4,\n      interpretation: function() {\n        if (this.current < 0.7) return { sentiment: 'Bullish', signal: 'Low fear', color: 'success' };\n        if (this.current < 1.0) return { sentiment: 'Neutral', signal: 'Balanced', color: 'info' };\n        if (this.current < 1.2) return { sentiment: 'Cautious', signal: 'Some fear', color: 'warning' };\n        return { sentiment: 'Bearish', signal: 'High fear', color: 'error' };\n      }\n    };\n    \n    // Market momentum indicators\n    const momentumIndicators = {\n      advanceDeclineRatio: 1.2 + Math.random() * 0.8,\n      newHighsNewLows: {\n        newHighs: Math.floor(Math.random() * 200) + 50,\n        newLows: Math.floor(Math.random() * 100) + 20,\n        ratio: function() { return this.newHighs / this.newLows; }\n      },\n      McClellanOscillator: -20 + Math.random() * 40\n    };\n    \n    // Sector rotation analysis\n    const sectorRotation = [\n      { sector: 'Technology', momentum: 'Strong', flow: 'Inflow', performance: 12.5 },\n      { sector: 'Healthcare', momentum: 'Moderate', flow: 'Inflow', performance: 8.2 },\n      { sector: 'Financials', momentum: 'Weak', flow: 'Outflow', performance: -2.1 },\n      { sector: 'Energy', momentum: 'Strong', flow: 'Inflow', performance: 15.3 },\n      { sector: 'Utilities', momentum: 'Weak', flow: 'Outflow', performance: -4.2 },\n      { sector: 'Consumer Discretionary', momentum: 'Moderate', flow: 'Neutral', performance: 5.7 },\n      { sector: 'Materials', momentum: 'Strong', flow: 'Inflow', performance: 9.8 },\n      { sector: 'Industrials', momentum: 'Moderate', flow: 'Inflow', performance: 6.4 }\n    ];\n    \n    // Market internals\n    const marketInternals = {\n      volume: {\n        current: 3.2e9 + Math.random() * 1e9,\n        twentyDayAvg: 3.5e9,\n        trend: 'Below Average'\n      },\n      breadth: {\n        advancingStocks: Math.floor(Math.random() * 2000) + 1500,\n        decliningStocks: Math.floor(Math.random() * 1500) + 1000,\n        unchangedStocks: Math.floor(Math.random() * 500) + 200\n      },\n      institutionalFlow: {\n        smartMoney: 'Buying',\n        retailSentiment: 'Neutral',\n        darkPoolActivity: 'Elevated'\n      }\n    };\n    \n    // Economic calendar highlights\n    const economicCalendar = [\n      {\n        date: new Date(today.getTime() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        event: 'Fed Interest Rate Decision',\n        importance: 'High',\n        expected: '5.25%',\n        impact: 'Market Moving'\n      },\n      {\n        date: new Date(today.getTime() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        event: 'Non-Farm Payrolls',\n        importance: 'High',\n        expected: '+200K',\n        impact: 'Market Moving'\n      },\n      {\n        date: new Date(today.getTime() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        event: 'CPI Inflation Report',\n        importance: 'High',\n        expected: '3.2%',\n        impact: 'Market Moving'\n      }\n    ];\n    \n    // Technical levels for major indices\n    const technicalLevels = {\n      'S&P 500': {\n        current: 4200 + Math.random() * 400,\n        support: [4150, 4050, 3950],\n        resistance: [4350, 4450, 4550],\n        trend: 'Bullish',\n        rsi: 45 + Math.random() * 30,\n        macd: 'Bullish Crossover'\n      },\n      'NASDAQ': {\n        current: 13000 + Math.random() * 2000,\n        support: [12800, 12500, 12000],\n        resistance: [14200, 14800, 15500],\n        trend: 'Bullish',\n        rsi: 50 + Math.random() * 25,\n        macd: 'Neutral'\n      },\n      'Dow Jones': {\n        current: 33000 + Math.random() * 3000,\n        support: [32500, 32000, 31500],\n        resistance: [35000, 35500, 36000],\n        trend: 'Sideways',\n        rsi: 40 + Math.random() * 40,\n        macd: 'Bearish Divergence'\n      }\n    };\n    \n    res.json({\n      success: true,\n      data: {\n        volatility: {\n          vix: vixData.current,\n          vixAverage: vixData.thirtyDayAvg,\n          vixInterpretation: vixData.interpretation()\n        },\n        sentiment: {\n          putCallRatio: putCallRatio.current,\n          putCallAverage: putCallRatio.tenDayAvg,\n          putCallInterpretation: putCallRatio.interpretation()\n        },\n        momentum: momentumIndicators,\n        sectorRotation: sectorRotation,\n        marketInternals: marketInternals,\n        economicCalendar: economicCalendar,\n        technicalLevels: technicalLevels,\n        summary: {\n          overallSentiment: 'Cautiously Optimistic',\n          marketRegime: 'Transitional',\n          keyRisks: ['Federal Reserve Policy', 'Geopolitical Tensions', 'Inflation Persistence'],\n          keyOpportunities: ['Tech Sector Recovery', 'Energy Sector Strength', 'International Diversification'],\n          timeHorizon: 'Short to Medium Term',\n          recommendation: 'Selective Stock Picking with Hedging'\n        }\n      },\n      timestamp: new Date().toISOString(),\n      dataFreshness: 'Real-time simulation with historical patterns'\n    });\n    \n  } catch (error) {\n    console.error('Error fetching market research indicators:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market research indicators',\n      details: error.message\n    });\n  }\n});\n\n// FRED Economic Data endpoints\nrouter.get('/economic/fred', async (req, res) => {\n  console.log('[MARKET] FRED economic data endpoint called');\n  \n  try {\n    const FREDService = require('../services/fredService');\n    const fredService = new FREDService();\n    \n    // Try to get real FRED data first\n    try {\n      const data = await fredService.getLatestIndicators();\n      \n      res.json({\n        status: 'ok',\n        data: data,\n        source: 'fred_api',\n        timestamp: new Date().toISOString()\n      });\n    } catch (fredError) {\n      console.log('FRED API unavailable, using mock data:', fredError.message);\n      \n      // Fallback to mock data\n      const mockData = FREDService.generateMockData();\n      \n      res.json({\n        status: 'ok',\n        data: mockData,\n        source: 'mock_data',\n        note: 'FRED API unavailable, using mock data',\n        timestamp: new Date().toISOString()\n      });\n    }\n  } catch (error) {\n    console.error('[MARKET] Error in FRED endpoint:', error);\n    res.status(500).json({\n      error: 'Failed to fetch economic data',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Update FRED data endpoint (for admin/maintenance)\nrouter.post('/economic/fred/update', async (req, res) => {\n  console.log('[MARKET] FRED data update endpoint called');\n  \n  try {\n    const FREDService = require('../services/fredService');\n    const fredService = new FREDService();\n    \n    const result = await fredService.updateAllCoreSeries();\n    \n    res.json({\n      status: 'ok',\n      message: 'FRED data update completed',\n      ...result,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('[MARKET] Error updating FRED data:', error);\n    res.status(500).json({\n      error: 'Failed to update FRED data',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Search FRED series\nrouter.get('/economic/fred/search', async (req, res) => {\n  const { q: searchText = '', limit = 20 } = req.query;\n  console.log(`[MARKET] FRED search endpoint called for: \"${searchText}\"`);\n  \n  try {\n    const FREDService = require('../services/fredService');\n    const fredService = new FREDService();\n    \n    const results = await fredService.searchSeries(searchText, parseInt(limit));\n    \n    res.json({\n      status: 'ok',\n      data: {\n        search_text: searchText,\n        results: results,\n        count: results.length\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('[MARKET] Error searching FRED series:', error);\n    res.status(500).json({\n      error: 'Failed to search FRED series',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;\n"],"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","ignoreList":[]}