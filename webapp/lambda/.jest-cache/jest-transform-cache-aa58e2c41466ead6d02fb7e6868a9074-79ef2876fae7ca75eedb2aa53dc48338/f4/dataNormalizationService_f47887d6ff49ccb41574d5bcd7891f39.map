{"version":3,"names":["DataNormalizationService","constructor","dataValidators","trade","validateTrade","bind","quote","validateQuote","bar","validateBar","qualityMetrics","totalMessages","validMessages","invalidMessages","providerStats","Map","lastUpdate","Date","now","normalizeMessage","provider","rawData","has","set","total","valid","invalid","types","get","normalizedData","normalizeAlpacaData","normalizePolygonData","normalizeFinnhubData","Error","validateNormalizedData","type","error","console","warn","message","data","T","symbol","S","price","parseFloat","p","size","parseInt","s","timestamp","t","conditions","c","exchange","x","id","i","raw","bid","bp","ask","ap","bidSize","bs","askSize","as","bidExchange","bx","askExchange","ax","open","o","high","h","low","l","close","volume","v","period","status","msg","ev","sym","trades","map","Array","isArray","every","item","validateSingleItem","validator","isNaN","getTime","toStandardFormat","convertSingleItem","base","toISOString","spread","Number","toFixed","midpoint","change","changePercent","aggregateBySymbol","normalizedDataArray","timeWindow","aggregated","forEach","processItemForAggregation","Object","fromEntries","timeDiff","quotes","bars","providers","Set","symbolData","add","push","from","getQualityMetrics","metrics","successRate","stats","resetMetrics","module","exports"],"sources":["dataNormalizationService.js"],"sourcesContent":["// Data Normalization Service - Real-time Market Data\n// Normalizes data from multiple providers into consistent format\n\nclass DataNormalizationService {\n  constructor() {\n    this.dataValidators = {\n      trade: this.validateTrade.bind(this),\n      quote: this.validateQuote.bind(this),\n      bar: this.validateBar.bind(this)\n    };\n    \n    // Quality metrics tracking\n    this.qualityMetrics = {\n      totalMessages: 0,\n      validMessages: 0,\n      invalidMessages: 0,\n      providerStats: new Map(),\n      lastUpdate: Date.now()\n    };\n  }\n  \n  normalizeMessage(provider, rawData) {\n    this.qualityMetrics.totalMessages++;\n    \n    if (!this.qualityMetrics.providerStats.has(provider)) {\n      this.qualityMetrics.providerStats.set(provider, {\n        total: 0,\n        valid: 0,\n        invalid: 0,\n        types: new Map()\n      });\n    }\n    \n    const providerStats = this.qualityMetrics.providerStats.get(provider);\n    providerStats.total++;\n    \n    try {\n      let normalizedData;\n      \n      switch (provider) {\n        case 'alpaca':\n          normalizedData = this.normalizeAlpacaData(rawData);\n          break;\n        case 'polygon':\n          normalizedData = this.normalizePolygonData(rawData);\n          break;\n        case 'finnhub':\n          normalizedData = this.normalizeFinnhubData(rawData);\n          break;\n        default:\n          throw new Error(`Unknown provider: ${provider}`);\n      }\n      \n      // Validate normalized data\n      if (this.validateNormalizedData(normalizedData)) {\n        this.qualityMetrics.validMessages++;\n        providerStats.valid++;\n        \n        // Track message types\n        const type = normalizedData.type;\n        if (!providerStats.types.has(type)) {\n          providerStats.types.set(type, 0);\n        }\n        providerStats.types.set(type, providerStats.types.get(type) + 1);\n        \n        return normalizedData;\n      } else {\n        throw new Error('Data validation failed');\n      }\n      \n    } catch (error) {\n      this.qualityMetrics.invalidMessages++;\n      providerStats.invalid++;\n      \n      console.warn(`Failed to normalize data from ${provider}:`, error.message, rawData);\n      return null;\n    }\n  }\n  \n  normalizeAlpacaData(data) {\n    switch (data.T) {\n      case 't': // Trade\n        return {\n          type: 'trade',\n          provider: 'alpaca',\n          symbol: data.S,\n          price: parseFloat(data.p),\n          size: parseInt(data.s),\n          timestamp: new Date(data.t),\n          conditions: data.c || [],\n          exchange: data.x,\n          id: data.i,\n          raw: data\n        };\n        \n      case 'q': // Quote\n        return {\n          type: 'quote',\n          provider: 'alpaca',\n          symbol: data.S,\n          bid: parseFloat(data.bp),\n          ask: parseFloat(data.ap),\n          bidSize: parseInt(data.bs),\n          askSize: parseInt(data.as),\n          timestamp: new Date(data.t),\n          bidExchange: data.bx,\n          askExchange: data.ax,\n          raw: data\n        };\n        \n      case 'b': // Bar (minute bar)\n        return {\n          type: 'bar',\n          provider: 'alpaca',\n          symbol: data.S,\n          open: parseFloat(data.o),\n          high: parseFloat(data.h),\n          low: parseFloat(data.l),\n          close: parseFloat(data.c),\n          volume: parseInt(data.v),\n          timestamp: new Date(data.t),\n          period: '1min',\n          raw: data\n        };\n        \n      default:\n        if (data.T === 'success') {\n          return {\n            type: 'status',\n            provider: 'alpaca',\n            status: 'authenticated',\n            message: data.msg,\n            timestamp: new Date()\n          };\n        }\n        throw new Error(`Unknown Alpaca message type: ${data.T}`);\n    }\n  }\n  \n  normalizePolygonData(data) {\n    switch (data.ev) {\n      case 'T': // Trade\n        return {\n          type: 'trade',\n          provider: 'polygon',\n          symbol: data.sym,\n          price: parseFloat(data.p),\n          size: parseInt(data.s),\n          timestamp: new Date(data.t),\n          conditions: data.c || [],\n          exchange: data.x,\n          id: data.i,\n          raw: data\n        };\n        \n      case 'Q': // Quote\n        return {\n          type: 'quote',\n          provider: 'polygon',\n          symbol: data.sym,\n          bid: parseFloat(data.bp),\n          ask: parseFloat(data.ap),\n          bidSize: parseInt(data.bs),\n          askSize: parseInt(data.as),\n          timestamp: new Date(data.t),\n          bidExchange: data.bx,\n          askExchange: data.ax,\n          raw: data\n        };\n        \n      case 'A': // Aggregate (bar)\n        return {\n          type: 'bar',\n          provider: 'polygon',\n          symbol: data.sym,\n          open: parseFloat(data.o),\n          high: parseFloat(data.h),\n          low: parseFloat(data.l),\n          close: parseFloat(data.c),\n          volume: parseInt(data.v),\n          timestamp: new Date(data.s), // start time\n          period: '1min',\n          raw: data\n        };\n        \n      default:\n        if (data.status === 'auth_success') {\n          return {\n            type: 'status',\n            provider: 'polygon',\n            status: 'authenticated',\n            message: data.message,\n            timestamp: new Date()\n          };\n        }\n        throw new Error(`Unknown Polygon message type: ${data.ev}`);\n    }\n  }\n  \n  normalizeFinnhubData(data) {\n    if (data.type === 'trade') {\n      // Finnhub sends arrays of trades\n      const trades = data.data || [];\n      return trades.map(trade => ({\n        type: 'trade',\n        provider: 'finnhub',\n        symbol: trade.s,\n        price: parseFloat(trade.p),\n        size: parseInt(trade.v),\n        timestamp: new Date(trade.t),\n        conditions: trade.c || [],\n        raw: trade\n      }));\n    } else if (data.type === 'ping') {\n      return {\n        type: 'status',\n        provider: 'finnhub',\n        status: 'ping',\n        timestamp: new Date()\n      };\n    } else {\n      throw new Error(`Unknown Finnhub message type: ${data.type}`);\n    }\n  }\n  \n  validateNormalizedData(data) {\n    if (Array.isArray(data)) {\n      return data.every(item => this.validateSingleItem(item));\n    } else {\n      return this.validateSingleItem(data);\n    }\n  }\n  \n  validateSingleItem(data) {\n    if (!data || typeof data !== 'object') {\n      return false;\n    }\n    \n    const validator = this.dataValidators[data.type];\n    if (!validator) {\n      // For unknown types (like status), just check basic structure\n      return !!(data.type && data.provider && data.timestamp);\n    }\n    \n    return validator(data);\n  }\n  \n  validateTrade(trade) {\n    return !!(\n      trade.symbol &&\n      typeof trade.price === 'number' &&\n      trade.price > 0 &&\n      typeof trade.size === 'number' &&\n      trade.size > 0 &&\n      trade.timestamp instanceof Date &&\n      !isNaN(trade.timestamp.getTime())\n    );\n  }\n  \n  validateQuote(quote) {\n    return !!(\n      quote.symbol &&\n      typeof quote.bid === 'number' &&\n      typeof quote.ask === 'number' &&\n      quote.bid > 0 &&\n      quote.ask > 0 &&\n      quote.ask >= quote.bid &&\n      typeof quote.bidSize === 'number' &&\n      typeof quote.askSize === 'number' &&\n      quote.bidSize > 0 &&\n      quote.askSize > 0 &&\n      quote.timestamp instanceof Date &&\n      !isNaN(quote.timestamp.getTime())\n    );\n  }\n  \n  validateBar(bar) {\n    return !!(\n      bar.symbol &&\n      typeof bar.open === 'number' &&\n      typeof bar.high === 'number' &&\n      typeof bar.low === 'number' &&\n      typeof bar.close === 'number' &&\n      typeof bar.volume === 'number' &&\n      bar.open > 0 &&\n      bar.high > 0 &&\n      bar.low > 0 &&\n      bar.close > 0 &&\n      bar.volume >= 0 &&\n      bar.high >= bar.low &&\n      bar.high >= bar.open &&\n      bar.high >= bar.close &&\n      bar.low <= bar.open &&\n      bar.low <= bar.close &&\n      bar.timestamp instanceof Date &&\n      !isNaN(bar.timestamp.getTime())\n    );\n  }\n  \n  // Convert normalized data to different output formats\n  toStandardFormat(normalizedData) {\n    if (Array.isArray(normalizedData)) {\n      return normalizedData.map(item => this.convertSingleItem(item));\n    } else {\n      return this.convertSingleItem(normalizedData);\n    }\n  }\n  \n  convertSingleItem(data) {\n    const base = {\n      type: data.type,\n      provider: data.provider,\n      symbol: data.symbol,\n      timestamp: data.timestamp.toISOString()\n    };\n    \n    switch (data.type) {\n      case 'trade':\n        return {\n          ...base,\n          price: data.price,\n          size: data.size,\n          conditions: data.conditions,\n          exchange: data.exchange\n        };\n        \n      case 'quote':\n        return {\n          ...base,\n          bid: data.bid,\n          ask: data.ask,\n          bidSize: data.bidSize,\n          askSize: data.askSize,\n          spread: Number((data.ask - data.bid).toFixed(4)),\n          midpoint: Number(((data.ask + data.bid) / 2).toFixed(4))\n        };\n        \n      case 'bar':\n        return {\n          ...base,\n          open: data.open,\n          high: data.high,\n          low: data.low,\n          close: data.close,\n          volume: data.volume,\n          period: data.period,\n          change: Number((data.close - data.open).toFixed(4)),\n          changePercent: Number(((data.close - data.open) / data.open * 100).toFixed(2))\n        };\n        \n      default:\n        return base;\n    }\n  }\n  \n  // Aggregate data for analytics\n  aggregateBySymbol(normalizedDataArray, timeWindow = 60000) { // 1 minute default\n    const aggregated = new Map();\n    const now = Date.now();\n    \n    normalizedDataArray.forEach(data => {\n      if (Array.isArray(data)) {\n        data.forEach(item => this.processItemForAggregation(item, aggregated, now, timeWindow));\n      } else {\n        this.processItemForAggregation(data, aggregated, now, timeWindow);\n      }\n    });\n    \n    return Object.fromEntries(aggregated);\n  }\n  \n  processItemForAggregation(item, aggregated, now, timeWindow) {\n    const timeDiff = now - item.timestamp.getTime();\n    if (timeDiff > timeWindow) {\n      return; // Too old\n    }\n    \n    const symbol = item.symbol;\n    if (!aggregated.has(symbol)) {\n      aggregated.set(symbol, {\n        symbol,\n        trades: [],\n        quotes: [],\n        bars: [],\n        lastUpdate: item.timestamp,\n        providers: new Set()\n      });\n    }\n    \n    const symbolData = aggregated.get(symbol);\n    symbolData.providers.add(item.provider);\n    \n    if (item.timestamp > symbolData.lastUpdate) {\n      symbolData.lastUpdate = item.timestamp;\n    }\n    \n    switch (item.type) {\n      case 'trade':\n        symbolData.trades.push(item);\n        break;\n      case 'quote':\n        symbolData.quotes.push(item);\n        break;\n      case 'bar':\n        symbolData.bars.push(item);\n        break;\n    }\n    \n    // Convert Set to Array for JSON serialization\n    symbolData.providers = Array.from(symbolData.providers);\n  }\n  \n  getQualityMetrics() {\n    const metrics = {\n      ...this.qualityMetrics,\n      successRate: this.qualityMetrics.totalMessages > 0 \n        ? (this.qualityMetrics.validMessages / this.qualityMetrics.totalMessages * 100).toFixed(2)\n        : 0,\n      providerStats: {}\n    };\n    \n    this.qualityMetrics.providerStats.forEach((stats, provider) => {\n      metrics.providerStats[provider] = {\n        ...stats,\n        successRate: stats.total > 0 ? (stats.valid / stats.total * 100).toFixed(2) : 0,\n        types: Object.fromEntries(stats.types)\n      };\n    });\n    \n    return metrics;\n  }\n  \n  resetMetrics() {\n    this.qualityMetrics = {\n      totalMessages: 0,\n      validMessages: 0,\n      invalidMessages: 0,\n      providerStats: new Map(),\n      lastUpdate: Date.now()\n    };\n  }\n}\n\nmodule.exports = DataNormalizationService;"],"mappings":"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","ignoreList":[]}