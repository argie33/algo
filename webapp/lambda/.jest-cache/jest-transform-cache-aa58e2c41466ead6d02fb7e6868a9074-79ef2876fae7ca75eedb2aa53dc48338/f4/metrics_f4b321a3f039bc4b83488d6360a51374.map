{"version":3,"names":["cov_odqscbq1e","actualCoverage","express","s","require","query","authenticateToken","router","Router","use","get","req","res","f","json","status","endpoint","timestamp","Date","toISOString","console","log","user","sub","totalStocks","totalAlerts","activeSymbols","portfolioValue","dailyChange","lastUpdate","errors","stockResult","parseInt","b","rows","total","error","message","stocks","portfolioResult","parseFloat","total_value","daily_change","total_positions","portfolio","alertResult","alerts","updateResult","last_update","success","data","activeAlerts","lastPriceUpdate","marketStatus","getMarketStatus","dataFreshness","prices","calculateDataAge","symbols","Object","keys","length","data_source","diagnostic","queries_executed","database_connectivity","user_id","troubleshooting","details","issue","potential_causes","system_checks","authentication","database_attempted","fallback_data","now","hour","getHours","day","getDay","getMinutes","diffHours","requestId","locals","startTime","JSON","stringify","process","memoryUsage","dbAvailable","dbStart","dbError","duration","page","limit","Math","min","offset","search","sector","minMetric","maxMetric","sortBy","sortOrder","whereClause","params","paramCount","push","trim","validSortColumns","safeSort","includes","safeOrder","toLowerCase","stocksQuery","stocksResult","countQuery","countResult","slice","code","detail","substring","errorCode","debugInfo","table_missing","permission_denied","connection_failed","map","row","symbol","companyName","company_name","industry","marketCap","market_cap","currentPrice","current_price","pe","trailing_pe","pb","price_to_book","metrics","composite","composite_metric","quality","quality_metric","value","value_metric","growth","growth_composite_score","qualityBreakdown","overall","earningsQuality","earnings_quality_metric","balanceSheet","balance_sheet_metric","profitability","profitability_metric","management","management_metric","piotrosiScore","piotroski_f_score","altmanZScore","altman_z_score","valueBreakdown","multiples","multiples_metric","intrinsicValue","intrinsic_value_metric","relativeValue","relative_value_metric","dcfValue","dcf_intrinsic_value","marginOfSafety","dcf_margin_of_safety","growthBreakdown","revenue","revenue_growth_score","earnings","earnings_growth_score","fundamental","fundamental_growth_score","marketExpansion","market_expansion_score","percentileRank","growth_percentile_rank","metadata","confidence","quality_confidence","metricDate","metric_date","lastUpdated","last_updated","pagination","currentPage","totalPages","ceil","totalItems","itemsPerPage","hasNext","hasPrev","filters","summary","averageComposite","reduce","sum","toFixed","topPerformer","metricRange","max","dataSource","total_records","has_quality_metrics","has_value_metrics","has_growth_metrics","note","mockMetrics","qualityMetric","valueMetric","compositeMetric","pages","toUpperCase","metricsQuery","metricsResult","latestMetric","historicalMetrics","sectorQuery","sectorResult","date","sectorBenchmark","response","currentData","dividendYield","dividend_yield","roe","return_on_equity","roa","return_on_assets","debtToEquity","debt_to_equity","freeCashFlow","free_cash_flow","detailedBreakdown","components","scores","accrualRatio","accruals_ratio","cashConversionRatio","cash_conversion_ratio","shareholderYield","shareholder_yield","description","valuations","ddmValue","ddm_value","rimValue","rim_value","currentPE","current_pe","currentPB","current_pb","currentEVEBITDA","current_ev_ebitda","sectorComparison","sectorName","peerCount","peer_count","benchmarks","avg_quality","avg_value","relativeTo","historicalTrend","confidence_score","completeness","data_completeness","marketCapTier","market_cap_tier","updated_at","interpretation","generateMetricInterpretation","sectors","stockCount","stock_count","averageMetrics","avg_composite","min_quality","max_quality","volatility","quality_volatility","totalSectors","bestPerforming","mostVolatile","prev","current","averageQuality","category","validCategories","topStocksQuery","result","topStocks","categoryMetric","category_metric","confidenceScore","has_metrics_tables","metricData","strengths","concerns","recommendation","getMockMetricsData","queryParams","mockStocks","i","floor","security_name","random","pe_ratio","profit_margin","revenue_growth","eps_growth","analyst_rating","analyst_target_price","module","exports"],"sources":["metrics.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Apply authentication to all metrics routes\nrouter.use(authenticateToken);\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'metrics',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Simple dashboard metrics endpoint\nrouter.get('/dashboard', async (req, res) => {\n  try {\n    console.log('Dashboard metrics endpoint called');\n    \n    console.log('üìä Dashboard metrics: Fetching real data from database for user:', req.user.sub);\n    \n    // Get real metrics from database\n    let totalStocks = null;\n    let totalAlerts = null;\n    let activeSymbols = null;\n    let portfolioValue = null;\n    let dailyChange = null;\n    let lastUpdate = null;\n    let errors = {};\n    \n    // Get stock count\n    try {\n      const stockResult = await query('SELECT COUNT(*) as total FROM stocks WHERE current_price IS NOT NULL', [], 5000);\n      totalStocks = parseInt(stockResult.rows[0]?.total || 0);\n      console.log(`‚úÖ Stock count: ${totalStocks}`);\n    } catch (error) {\n      console.error('‚ùå Stock count query failed:', error.message);\n      errors.stocks = `Stock data unavailable: ${error.message}`;\n    }\n    \n    // Get user's portfolio metrics\n    try {\n      const portfolioResult = await query(`\n        SELECT \n          SUM(market_value) as total_value,\n          SUM(unrealized_pl) as daily_change,\n          COUNT(*) as total_positions\n        FROM portfolio_holdings \n        WHERE user_id = $1\n      `, [req.user.sub], 5000);\n      \n      if (portfolioResult.rows[0]) {\n        portfolioValue = parseFloat(portfolioResult.rows[0].total_value || 0);\n        dailyChange = parseFloat(portfolioResult.rows[0].daily_change || 0);\n        activeSymbols = parseInt(portfolioResult.rows[0].total_positions || 0);\n        console.log(`‚úÖ Portfolio value: $${portfolioValue}, change: $${dailyChange}, positions: ${activeSymbols}`);\n      }\n    } catch (error) {\n      console.error('‚ùå Portfolio query failed:', error.message);\n      errors.portfolio = `Portfolio data unavailable: ${error.message}`;\n    }\n    \n    // Get alerts count\n    try {\n      const alertResult = await query(`\n        SELECT COUNT(*) as total \n        FROM alerts \n        WHERE user_id = $1 AND is_active = true\n      `, [req.user.sub], 5000);\n      totalAlerts = parseInt(alertResult.rows[0]?.total || 0);\n      console.log(`‚úÖ Active alerts: ${totalAlerts}`);\n    } catch (error) {\n      console.error('‚ùå Alerts query failed:', error.message);\n      errors.alerts = `Alerts data unavailable: ${error.message}`;\n    }\n    \n    // Get last price update\n    try {\n      const updateResult = await query('SELECT MAX(updated_at) as last_update FROM stocks', [], 5000);\n      lastUpdate = updateResult.rows[0]?.last_update || new Date();\n      console.log(`‚úÖ Last price update: ${lastUpdate}`);\n    } catch (error) {\n      console.error('‚ùå Last update query failed:', error.message);\n      errors.lastUpdate = `Update time unavailable: ${error.message}`;\n      lastUpdate = null;\n    }\n    \n    res.json({\n      success: true,\n      data: {\n        totalStocks: totalStocks,\n        activeAlerts: totalAlerts,\n        activeSymbols: activeSymbols,\n        portfolioValue: portfolioValue,\n        dailyChange: dailyChange,\n        lastPriceUpdate: lastUpdate,\n        marketStatus: getMarketStatus(),\n        dataFreshness: {\n          prices: lastUpdate ? calculateDataAge(lastUpdate) : 'unknown',\n          alerts: errors.alerts ? 'unavailable' : 'current',\n          symbols: errors.stocks ? 'unavailable' : 'current'\n        }\n      },\n      errors: Object.keys(errors).length > 0 ? errors : null,\n      data_source: 'real_database',\n      diagnostic: {\n        queries_executed: 4,\n        database_connectivity: Object.keys(errors).length === 0 ? 'healthy' : 'partial',\n        user_id: req.user.sub,\n        troubleshooting: Object.keys(errors).length > 0 ? \n          'Some data sources unavailable. Check database connectivity and table existence.' : \n          'All data sources functioning normally'\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('‚ùå Critical error in dashboard metrics:', error);\n    \n    res.status(500).json({\n      success: false,\n      error: 'Dashboard metrics unavailable',\n      details: error.message,\n      data: {\n        totalStocks: null,\n        activeAlerts: null,\n        activeSymbols: null,\n        portfolioValue: null,\n        dailyChange: null,\n        lastPriceUpdate: null,\n        marketStatus: getMarketStatus(),\n        dataFreshness: {\n          prices: 'unavailable',\n          alerts: 'unavailable',\n          symbols: 'unavailable'\n        }\n      },\n      diagnostic: {\n        issue: 'Critical system error during metrics collection',\n        potential_causes: [\n          'Database connection failure',\n          'Authentication token invalid',\n          'Missing required tables (stocks, portfolio_holdings, alerts)',\n          'Query timeout or resource limits'\n        ],\n        troubleshooting: [\n          'Check database connectivity and authentication',\n          'Verify required tables exist and are accessible',\n          'Review AWS Lambda memory and timeout settings',\n          'Check VPC and security group configurations'\n        ],\n        system_checks: {\n          authentication: 'completed',\n          database_attempted: true,\n          fallback_data: false\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nfunction getMarketStatus() {\n  const now = new Date();\n  const hour = now.getHours();\n  const day = now.getDay();\n  \n  // Simple market hours check (9:30 AM - 4:00 PM ET, Mon-Fri)\n  if (day === 0 || day === 6) return 'closed'; // Weekend\n  if (hour < 9 || hour >= 16) return 'closed';\n  if (hour === 9 && now.getMinutes() < 30) return 'pre-market';\n  return 'open';\n}\n\nfunction calculateDataAge(lastUpdate) {\n  const now = new Date();\n  const diffHours = (now - new Date(lastUpdate)) / (1000 * 60 * 60);\n  \n  if (diffHours < 1) return 'current';\n  if (diffHours < 24) return 'recent';\n  if (diffHours < 72) return 'stale';\n  return 'outdated';\n}\n\n// Get comprehensive metrics for all stocks with filtering and pagination\nrouter.get('/', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    console.log(`üìä [${requestId}] Metrics endpoint called with params:`, JSON.stringify(req.query, null, 2));\n    console.log(`üìä [${requestId}] Memory at start:`, process.memoryUsage());\n    \n    // Check database availability immediately to prevent timeouts\n    console.log(`üîç [${requestId}] Testing database connectivity for metrics...`);\n    let dbAvailable = false;\n    try {\n      const dbStart = Date.now();\n      await query('SELECT 1', [], 3000); // 3 second timeout\n      dbAvailable = true;\n      console.log(`‚úÖ [${requestId}] Database available after ${Date.now() - dbStart}ms`);\n    } catch (dbError) {\n      console.error(`‚ùå [${requestId}] Database unavailable for metrics endpoint after ${Date.now() - startTime}ms:`, dbError.message);\n      return res.status(503).json({\n        success: false,\n        error: 'Database temporarily unavailable',\n        message: 'Metrics data requires database connectivity',\n        details: {\n          endpoint: 'GET /metrics',\n          duration: Date.now() - startTime,\n          dbError: dbError.message\n        },\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 50, 200);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const minMetric = parseFloat(req.query.minMetric) || 0;\n    const maxMetric = parseFloat(req.query.maxMetric) || 1;\n    const sortBy = req.query.sortBy || 'composite_metric';\n    const sortOrder = req.query.sortOrder || 'desc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n      params.push(`%${search}%`);\n    }\n\n    // Add sector filter\n    if (sector && sector.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND s.sector = $${paramCount}`;\n      params.push(sector);\n    }\n\n    // Add metric range filters (assuming 0-1 scale for metrics)\n    if (minMetric > 0) {\n      paramCount++;\n      whereClause += ` AND COALESCE(qm.quality_metric, 0) >= $${paramCount}`;\n      params.push(minMetric);\n    }\n\n    if (maxMetric < 1) {\n      paramCount++;\n      whereClause += ` AND COALESCE(qm.quality_metric, 0) <= $${paramCount}`;\n      params.push(maxMetric);\n    }\n\n    // Validate sort column to prevent SQL injection\n    const validSortColumns = [\n      'symbol', 'quality_metric', 'value_metric', 'composite_metric',\n      'market_cap', 'sector'\n    ];\n    \n    const safeSort = validSortColumns.includes(sortBy) ? sortBy : 'quality_metric';\n    const safeOrder = sortOrder.toLowerCase() === 'asc' ? 'ASC' : 'DESC';\n    \n    // Try to query actual tables with comprehensive error logging\n    console.log(`üîç [METRICS] Executing metrics query with params:`, { page, limit, search, sector, sortBy, sortOrder });\n    \n    // Main query to get stocks with metrics - fallback gracefully if tables don't exist\n    const stocksQuery = `\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        COALESCE(s.sector, 'Unknown') as sector,\n        COALESCE(s.industry, 'Unknown') as industry,\n        COALESCE(s.market_cap, 0) as market_cap,\n        COALESCE(s.current_price, 0) as current_price,\n        COALESCE(s.trailing_pe, 0) as trailing_pe,\n        COALESCE(s.price_to_book, 0) as price_to_book,\n        \n        -- Try to get quality metrics if table exists, otherwise null\n        NULL as quality_metric,\n        NULL as earnings_quality_metric,\n        NULL as balance_sheet_metric,\n        NULL as profitability_metric,\n        NULL as management_metric,\n        NULL as piotroski_f_score,\n        NULL as altman_z_score,\n        NULL as quality_confidence,\n        \n        -- Try to get value metrics if table exists, otherwise null\n        NULL as value_metric,\n        NULL as multiples_metric,\n        NULL as intrinsic_value_metric,\n        NULL as relative_value_metric,\n        NULL as dcf_intrinsic_value,\n        NULL as dcf_margin_of_safety,\n        \n        -- Try to get growth metrics if table exists, otherwise null\n        NULL as growth_composite_score,\n        NULL as revenue_growth_score,\n        NULL as earnings_growth_score,\n        NULL as fundamental_growth_score,\n        NULL as market_expansion_score,\n        NULL as growth_percentile_rank,\n        \n        -- Calculate composite metric placeholder\n        0.5 as composite_metric,\n        \n        -- Metadata\n        NOW() as metric_date,\n        NOW() as last_updated\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      ${whereClause}\n      ORDER BY ss.symbol ${safeOrder}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `;\n\n    params.push(limit, offset);\n\n    let stocksResult;\n    let totalStocks = 0;\n    \n    try {\n      console.log(`üîç [METRICS] Attempting to execute main stocks query...`);\n      stocksResult = await query(stocksQuery, params);\n      console.log(`‚úÖ [METRICS] Query successful, got ${stocksResult.rows.length} rows`);\n      \n      // Get total count for pagination\n      const countQuery = `\n        SELECT COUNT(DISTINCT ss.symbol) as total\n        FROM stock_symbols ss\n        LEFT JOIN symbols s ON ss.symbol = s.symbol\n        ${whereClause}\n      `;\n      \n      const countResult = await query(countQuery, params.slice(0, paramCount));\n      totalStocks = parseInt(countResult.rows[0].total);\n      console.log(`üìä [METRICS] Total stocks available: ${totalStocks}`);\n      \n    } catch (dbError) {\n      console.error(`‚ùå [METRICS] Database query failed:`, {\n        error: dbError.message,\n        code: dbError.code,\n        detail: dbError.detail,\n        query: stocksQuery.substring(0, 200) + '...'\n      });\n      \n      // Return error response with detailed logging\n      return res.status(500).json({\n        success: false,\n        error: 'Database query failed',\n        details: dbError.message,\n        errorCode: dbError.code,\n        timestamp: new Date().toISOString(),\n        debugInfo: {\n          table_missing: dbError.code === '42P01',\n          permission_denied: dbError.code === '42501',\n          connection_failed: dbError.code === '08006'\n        }\n      });\n    }\n\n    // Format the response with actual database results\n    console.log(`üìä [METRICS] Formatting ${stocksResult.rows.length} stocks for response`);\n    \n    const stocks = stocksResult.rows.map(row => {\n      console.log(`üîç [METRICS] Processing stock: ${row.symbol}`);\n      \n      return {\n        symbol: row.symbol,\n        companyName: row.company_name,\n        sector: row.sector,\n        industry: row.industry,\n        marketCap: parseFloat(row.market_cap) || 0,\n        currentPrice: parseFloat(row.current_price) || 0,\n        pe: parseFloat(row.trailing_pe) || 0,\n        pb: parseFloat(row.price_to_book) || 0,\n        \n        metrics: {\n          composite: parseFloat(row.composite_metric) || 0,\n          quality: parseFloat(row.quality_metric) || 0,\n          value: parseFloat(row.value_metric) || 0,\n          growth: parseFloat(row.growth_composite_score) || 0\n        },\n        \n        qualityBreakdown: {\n          overall: parseFloat(row.quality_metric) || 0,\n          earningsQuality: parseFloat(row.earnings_quality_metric) || 0,\n          balanceSheet: parseFloat(row.balance_sheet_metric) || 0,\n          profitability: parseFloat(row.profitability_metric) || 0,\n          management: parseFloat(row.management_metric) || 0,\n          piotrosiScore: parseInt(row.piotroski_f_score) || 0,\n          altmanZScore: parseFloat(row.altman_z_score) || 0\n        },\n        \n        valueBreakdown: {\n          overall: parseFloat(row.value_metric) || 0,\n          multiples: parseFloat(row.multiples_metric) || 0,\n          intrinsicValue: parseFloat(row.intrinsic_value_metric) || 0,\n          relativeValue: parseFloat(row.relative_value_metric) || 0,\n          dcfValue: parseFloat(row.dcf_intrinsic_value) || 0,\n          marginOfSafety: parseFloat(row.dcf_margin_of_safety) || 0\n        },\n        \n        growthBreakdown: {\n          overall: parseFloat(row.growth_composite_score) || 0,\n          revenue: parseFloat(row.revenue_growth_score) || 0,\n          earnings: parseFloat(row.earnings_growth_score) || 0,\n          fundamental: parseFloat(row.fundamental_growth_score) || 0,\n          marketExpansion: parseFloat(row.market_expansion_score) || 0,\n          percentileRank: parseInt(row.growth_percentile_rank) || 0\n        },\n        \n        metadata: {\n          confidence: parseFloat(row.quality_confidence) || 0,\n          metricDate: row.metric_date,\n          lastUpdated: row.last_updated\n        }\n      };\n    });\n\n    res.json({\n      stocks,\n      pagination: {\n        currentPage: page,\n        totalPages: Math.ceil(totalStocks / limit),\n        totalItems: totalStocks,\n        itemsPerPage: limit,\n        hasNext: offset + limit < totalStocks,\n        hasPrev: page > 1\n      },\n      filters: {\n        search,\n        sector,\n        minMetric,\n        maxMetric,\n        sortBy: safeSort,\n        sortOrder: safeOrder\n      },\n      summary: {\n        averageComposite: stocks.length > 0 ? \n          (stocks.reduce((sum, s) => sum + s.metrics.composite, 0) / stocks.length).toFixed(4) : 0,\n        topPerformer: stocks.length > 0 ? stocks[0] : null,\n        metricRange: stocks.length > 0 ? {\n          min: Math.min(...stocks.map(s => s.metrics.composite)).toFixed(4),\n          max: Math.max(...stocks.map(s => s.metrics.composite)).toFixed(4)\n        } : null\n      },\n      timestamp: new Date().toISOString(),\n      dataSource: {\n        total_records: totalStocks,\n        has_quality_metrics: false,\n        has_value_metrics: false,\n        has_growth_metrics: false,\n        note: 'Metrics tables not yet populated - showing base stock data'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error in metrics endpoint:', error);\n    console.log('Returning mock metrics data as fallback');\n    \n    // Return mock data when database is unavailable\n    const mockMetrics = [\n      {\n        symbol: 'AAPL',\n        companyName: 'Apple Inc.',\n        sector: 'Technology',\n        marketCap: 3000000000000,\n        qualityMetric: 0.89,\n        valueMetric: 0.73,\n        compositeMetric: 0.82,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'MSFT',\n        companyName: 'Microsoft Corporation',\n        sector: 'Technology',\n        marketCap: 2800000000000,\n        qualityMetric: 0.92,\n        valueMetric: 0.76,\n        compositeMetric: 0.85,\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n\n    res.json({\n      success: true,\n      data: mockMetrics,\n      pagination: {\n        page: 1,\n        limit: mockMetrics.length,\n        total: mockMetrics.length,\n        pages: 1\n      },\n      note: 'Mock data - database connectivity issue'\n    });\n  }\n});\n\n// Get detailed metrics for a specific stock\nrouter.get('/:symbol', async (req, res) => {\n  try {\n    const symbol = req.params.symbol.toUpperCase();\n    console.log(`Getting detailed metrics for ${symbol}`);\n\n    // Get latest metrics with historical data\n    const metricsQuery = `\n      SELECT \n        qm.*,\n        vm.value_metric,\n        vm.multiples_metric,\n        vm.intrinsic_value_metric,\n        vm.relative_value_metric,\n        vm.dcf_intrinsic_value,\n        vm.dcf_margin_of_safety,\n        vm.ddm_value,\n        vm.rim_value,\n        vm.current_pe,\n        vm.current_pb,\n        vm.current_ev_ebitda,\n        ss.security_name as company_name,\n        s.sector,\n        s.industry,\n        s.market_cap,\n        s.current_price,\n        s.trailing_pe,\n        s.price_to_book,\n        s.dividend_yield,\n        s.return_on_equity,\n        s.return_on_assets,\n        s.debt_to_equity,\n        s.free_cash_flow\n      FROM quality_metrics qm\n      LEFT JOIN value_metrics vm ON qm.symbol = vm.symbol AND qm.date = vm.date\n      LEFT JOIN stock_symbols ss ON qm.symbol = ss.symbol\n      LEFT JOIN symbols s ON qm.symbol = s.symbol\n      WHERE qm.symbol = $1\n      ORDER BY qm.date DESC\n      LIMIT 12\n    `;\n\n    const metricsResult = await query(metricsQuery, [symbol]);\n\n    if (metricsResult.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Symbol not found or no metrics available',\n        symbol,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const latestMetric = metricsResult.rows[0];\n    const historicalMetrics = metricsResult.rows.slice(1);\n\n    // Get sector benchmark data\n    const sectorQuery = `\n      SELECT \n        AVG(qm.quality_metric) as avg_quality,\n        AVG(vm.value_metric) as avg_value,\n        COUNT(*) as peer_count\n      FROM quality_metrics qm\n      LEFT JOIN value_metrics vm ON qm.symbol = vm.symbol AND qm.date = vm.date\n      LEFT JOIN symbols s ON qm.symbol = s.symbol\n      WHERE s.sector = $1\n      AND qm.date = $2\n      AND qm.quality_metric IS NOT NULL\n    `;\n\n    const sectorResult = await query(sectorQuery, [latestMetric.sector, latestMetric.date]);\n    const sectorBenchmark = sectorResult.rows[0];\n\n    // Format comprehensive response\n    const response = {\n      symbol,\n      companyName: latestMetric.company_name,\n      sector: latestMetric.sector,\n      industry: latestMetric.industry,\n      \n      currentData: {\n        marketCap: latestMetric.market_cap,\n        currentPrice: latestMetric.current_price,\n        pe: latestMetric.trailing_pe,\n        pb: latestMetric.price_to_book,\n        dividendYield: latestMetric.dividend_yield,\n        roe: latestMetric.return_on_equity,\n        roa: latestMetric.return_on_assets,\n        debtToEquity: latestMetric.debt_to_equity,\n        freeCashFlow: latestMetric.free_cash_flow\n      },\n      \n      metrics: {\n        composite: ((parseFloat(latestMetric.quality_metric) || 0) * 0.6 + (parseFloat(latestMetric.value_metric) || 0) * 0.4),\n        quality: parseFloat(latestMetric.quality_metric) || 0,\n        value: parseFloat(latestMetric.value_metric) || 0\n      },\n      \n      detailedBreakdown: {\n        quality: {\n          overall: parseFloat(latestMetric.quality_metric) || 0,\n          components: {\n            earningsQuality: parseFloat(latestMetric.earnings_quality_metric) || 0,\n            balanceSheet: parseFloat(latestMetric.balance_sheet_metric) || 0,\n            profitability: parseFloat(latestMetric.profitability_metric) || 0,\n            management: parseFloat(latestMetric.management_metric) || 0\n          },\n          scores: {\n            piotrosiScore: parseInt(latestMetric.piotroski_f_score) || 0,\n            altmanZScore: parseFloat(latestMetric.altman_z_score) || 0,\n            accrualRatio: parseFloat(latestMetric.accruals_ratio) || 0,\n            cashConversionRatio: parseFloat(latestMetric.cash_conversion_ratio) || 0,\n            shareholderYield: parseFloat(latestMetric.shareholder_yield) || 0\n          },\n          description: \"Measures financial statement quality, balance sheet strength, profitability metrics, and management effectiveness using academic research models (Piotroski F-Score, Altman Z-Score)\"\n        },\n        \n        value: {\n          overall: parseFloat(latestMetric.value_metric) || 0,\n          components: {\n            multiples: parseFloat(latestMetric.multiples_metric) || 0,\n            intrinsicValue: parseFloat(latestMetric.intrinsic_value_metric) || 0,\n            relativeValue: parseFloat(latestMetric.relative_value_metric) || 0\n          },\n          valuations: {\n            dcfValue: parseFloat(latestMetric.dcf_intrinsic_value) || 0,\n            marginOfSafety: parseFloat(latestMetric.dcf_margin_of_safety) || 0,\n            ddmValue: parseFloat(latestMetric.ddm_value) || 0,\n            rimValue: parseFloat(latestMetric.rim_value) || 0,\n            currentPE: parseFloat(latestMetric.current_pe) || 0,\n            currentPB: parseFloat(latestMetric.current_pb) || 0,\n            currentEVEBITDA: parseFloat(latestMetric.current_ev_ebitda) || 0\n          },\n          description: \"Analyzes traditional multiples (P/E, P/B, EV/EBITDA), DCF intrinsic value analysis, and peer group relative valuation\"\n        }\n      },\n      \n      sectorComparison: {\n        sectorName: latestMetric.sector,\n        peerCount: parseInt(sectorBenchmark.peer_count) || 0,\n        benchmarks: {\n          quality: parseFloat(sectorBenchmark.avg_quality) || 0,\n          value: parseFloat(sectorBenchmark.avg_value) || 0\n        },\n        relativeTo: {\n          quality: (parseFloat(latestMetric.quality_metric) || 0) - (parseFloat(sectorBenchmark.avg_quality) || 0),\n          value: (parseFloat(latestMetric.value_metric) || 0) - (parseFloat(sectorBenchmark.avg_value) || 0)\n        }\n      },\n      \n      historicalTrend: historicalMetrics.map(row => ({\n        date: row.date,\n        composite: ((parseFloat(row.quality_metric) || 0) * 0.6 + (parseFloat(row.value_metric) || 0) * 0.4),\n        quality: parseFloat(row.quality_metric) || 0,\n        value: parseFloat(row.value_metric) || 0\n      })),\n      \n      metadata: {\n        metricDate: latestMetric.date,\n        confidence: parseFloat(latestMetric.confidence_score) || 0,\n        completeness: parseFloat(latestMetric.data_completeness) || 0,\n        marketCapTier: latestMetric.market_cap_tier || 'unknown',\n        lastUpdated: latestMetric.updated_at\n      },\n      \n      interpretation: generateMetricInterpretation(latestMetric),\n      \n      timestamp: new Date().toISOString()\n    };\n\n    res.json(response);\n\n  } catch (error) {\n    console.error('Error getting detailed metrics:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch detailed metrics',\n      message: error.message,\n      symbol: req.params.symbol,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get sector analysis and rankings\nrouter.get('/sectors/analysis', async (req, res) => {\n  try {\n    console.log('Getting sector analysis for metrics');\n\n    const sectorQuery = `\n      SELECT \n        s.sector,\n        COUNT(DISTINCT qm.symbol) as stock_count,\n        AVG(qm.quality_metric) as avg_quality,\n        AVG(vm.value_metric) as avg_value,\n        AVG((qm.quality_metric * 0.6 + vm.value_metric * 0.4)) as avg_composite,\n        STDDEV(qm.quality_metric) as quality_volatility,\n        MAX(qm.quality_metric) as max_quality,\n        MIN(qm.quality_metric) as min_quality,\n        MAX(qm.updated_at) as last_updated\n      FROM symbols s\n      INNER JOIN quality_metrics qm ON s.symbol = qm.symbol\n      LEFT JOIN value_metrics vm ON qm.symbol = vm.symbol AND qm.date = vm.date\n      WHERE qm.date = (\n        SELECT MAX(date) FROM quality_metrics qm2 WHERE qm2.symbol = s.symbol\n      )\n      AND s.sector IS NOT NULL\n      AND qm.quality_metric IS NOT NULL\n      GROUP BY s.sector\n      HAVING COUNT(DISTINCT qm.symbol) >= 5\n      ORDER BY avg_quality DESC\n    `;\n\n    const sectorResult = await query(sectorQuery);\n\n    const sectors = sectorResult.rows.map(row => ({\n      sector: row.sector,\n      stockCount: parseInt(row.stock_count),\n      averageMetrics: {\n        composite: parseFloat(row.avg_composite || 0).toFixed(4),\n        quality: parseFloat(row.avg_quality).toFixed(4),\n        value: parseFloat(row.avg_value || 0).toFixed(4)\n      },\n      metricRange: {\n        min: parseFloat(row.min_quality).toFixed(4),\n        max: parseFloat(row.max_quality).toFixed(4),\n        volatility: parseFloat(row.quality_volatility).toFixed(4)\n      },\n      lastUpdated: row.last_updated\n    }));\n\n    res.json({\n      sectors,\n      summary: {\n        totalSectors: sectors.length,\n        bestPerforming: sectors[0],\n        mostVolatile: sectors.reduce((prev, current) => \n          parseFloat(prev.metricRange.volatility) > parseFloat(current.metricRange.volatility) ? prev : current\n        ),\n        averageQuality: (sectors.reduce((sum, s) => sum + parseFloat(s.averageMetrics.quality), 0) / sectors.length).toFixed(4)\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error in sector analysis:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch sector analysis',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get top performing stocks by metric category\nrouter.get('/top/:category', async (req, res) => {\n  try {\n    const category = req.params.category.toLowerCase();\n    const limit = Math.min(parseInt(req.query.limit) || 25, 100);\n    \n    const validCategories = ['composite', 'quality', 'value'];\n    if (!validCategories.includes(category)) {\n      return res.status(400).json({\n        error: 'Invalid category',\n        validCategories,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Query actual database tables with comprehensive error logging\n    console.log(`üîç [TOP-${category.toUpperCase()}] Executing query for category: ${category}, limit: ${limit}`);\n    \n    const topStocksQuery = `\n      SELECT \n        ss.symbol,\n        ss.security_name as company_name,\n        COALESCE(s.sector, 'Unknown') as sector,\n        COALESCE(s.market_cap, 0) as market_cap,\n        COALESCE(s.current_price, 0) as current_price,\n        0 as quality_metric,\n        0 as value_metric,\n        0 as category_metric,\n        0.5 as confidence_score,\n        NOW() as updated_at\n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      WHERE ss.is_active = true\n      ORDER BY ss.symbol\n      LIMIT $1\n    `;\n\n    try {\n      console.log(`üîç [TOP-${category.toUpperCase()}] Executing top stocks query...`);\n      const result = await query(topStocksQuery, [limit]);\n      console.log(`‚úÖ [TOP-${category.toUpperCase()}] Query successful, got ${result.rows.length} rows`);\n\n      const topStocks = result.rows.map(row => {\n        console.log(`üîç [TOP-${category.toUpperCase()}] Processing stock: ${row.symbol}`);\n        \n        return {\n          symbol: row.symbol,\n          companyName: row.company_name,\n          sector: row.sector,\n          marketCap: parseFloat(row.market_cap) || 0,\n          currentPrice: parseFloat(row.current_price) || 0,\n          categoryMetric: parseFloat(row.category_metric) || 0,\n          qualityMetric: parseFloat(row.quality_metric) || 0,\n          valueMetric: parseFloat(row.value_metric) || 0,\n          compositeMetric: parseFloat(row.category_metric) || 0,\n          confidenceScore: parseFloat(row.confidence_score) || 0,\n          lastUpdated: row.updated_at\n        };\n      });\n\n      res.json({\n        success: true,\n        data: topStocks,\n        pagination: {\n          page: 1,\n          limit: limit,\n          total: topStocks.length,\n          hasNext: false,\n          hasPrev: false\n        },\n        category: category,\n        timestamp: new Date().toISOString(),\n        dataSource: {\n          has_metrics_tables: false,\n          note: 'Metrics tables not yet populated - showing base stock data'\n        }\n      });\n      \n    } catch (dbError) {\n      console.error(`‚ùå [TOP-${category.toUpperCase()}] Database query failed:`, {\n        error: dbError.message,\n        code: dbError.code,\n        detail: dbError.detail\n      });\n      \n      return res.status(500).json({\n        success: false,\n        error: 'Failed to fetch top stocks',\n        details: dbError.message,\n        errorCode: dbError.code,\n        timestamp: new Date().toISOString(),\n        debugInfo: {\n          table_missing: dbError.code === '42P01',\n          permission_denied: dbError.code === '42501',\n          connection_failed: dbError.code === '08006'\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('Error getting top stocks:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch top stocks',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nfunction generateMetricInterpretation(metricData) {\n  const quality = parseFloat(metricData.quality_metric) || 0;\n  const value = parseFloat(metricData.value_metric) || 0;\n  const composite = (quality * 0.6 + value * 0.4);\n  \n  let interpretation = {\n    overall: '',\n    strengths: [],\n    concerns: [],\n    recommendation: ''\n  };\n  \n  // Overall assessment (0-1 scale)\n  if (composite >= 0.8) {\n    interpretation.overall = 'Exceptional investment opportunity with strong fundamentals across multiple factors';\n  } else if (composite >= 0.7) {\n    interpretation.overall = 'Strong investment candidate with solid fundamentals';\n  } else if (composite >= 0.6) {\n    interpretation.overall = 'Reasonable investment option with mixed signals';\n  } else if (composite >= 0.5) {\n    interpretation.overall = 'Below-average investment profile with some concerns';\n  } else {\n    interpretation.overall = 'Poor investment profile with significant risks';\n  }\n  \n  // Identify strengths\n  if (quality >= 0.75) interpretation.strengths.push('High-quality financial statements and management');\n  if (value >= 0.75) interpretation.strengths.push('Attractive valuation with margin of safety');\n  if (metricData.piotroski_f_score >= 7) interpretation.strengths.push('Strong Piotroski F-Score indicating financial strength');\n  if (metricData.altman_z_score >= 3.0) interpretation.strengths.push('Low bankruptcy risk per Altman Z-Score');\n  \n  // Identify concerns\n  if (quality <= 0.40) interpretation.concerns.push('Weak financial quality and balance sheet concerns');\n  if (value <= 0.40) interpretation.concerns.push('Overvalued relative to fundamentals');\n  if (metricData.piotroski_f_score <= 3) interpretation.concerns.push('Low Piotroski F-Score indicates financial weakness');\n  if (metricData.altman_z_score <= 1.8) interpretation.concerns.push('High bankruptcy risk per Altman Z-Score');\n  \n  // Investment recommendation\n  if (composite >= 0.8 && quality >= 0.7) {\n    interpretation.recommendation = 'BUY - Strong fundamentals with attractive risk-adjusted returns';\n  } else if (composite >= 0.7) {\n    interpretation.recommendation = 'BUY - Solid investment opportunity';\n  } else if (composite >= 0.6) {\n    interpretation.recommendation = 'HOLD - Monitor for improvements';\n  } else if (composite >= 0.5) {\n    interpretation.recommendation = 'WEAK HOLD - Consider reducing position';\n  } else {\n    interpretation.recommendation = 'SELL - Poor fundamentals warrant exit';\n  }\n  \n  return interpretation;\n}\n\n// Mock metrics data function for when database is unavailable\nfunction getMockMetricsData(queryParams) {\n  const limit = Math.min(parseInt(queryParams.limit) || 50, 200);\n  const mockStocks = [];\n  \n  const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX', 'CRM', 'ADBE'];\n  const sectors = ['Technology', 'Consumer Discretionary', 'Communication Services', 'Healthcare', 'Financials'];\n  \n  for (let i = 0; i < limit; i++) {\n    const symbol = symbols[i % symbols.length] + (i > 9 ? Math.floor(i/10) : '');\n    mockStocks.push({\n      symbol: symbol,\n      security_name: `${symbol} Inc.`,\n      sector: sectors[i % sectors.length],\n      market_cap: Math.random() * 1000000000000,\n      quality_metric: Math.random() * 0.5 + 0.5, // 0.5-1.0\n      value_metric: Math.random() * 0.4 + 0.3, // 0.3-0.7\n      composite_metric: Math.random() * 0.3 + 0.6, // 0.6-0.9\n      pe_ratio: Math.random() * 30 + 10,\n      price_to_book: Math.random() * 5 + 0.5,\n      debt_to_equity: Math.random() * 2,\n      roe: Math.random() * 0.3 + 0.05,\n      roa: Math.random() * 0.15 + 0.02,\n      profit_margin: Math.random() * 0.25 + 0.05,\n      revenue_growth: Math.random() * 0.4 - 0.1,\n      eps_growth: Math.random() * 0.6 - 0.2,\n      analyst_rating: Math.random() * 5 + 1,\n      analyst_target_price: Math.random() * 500 + 50,\n      current_price: Math.random() * 400 + 30,\n      updated_at: new Date().toISOString()\n    });\n  }\n  \n  return mockStocks;\n}\n\nmodule.exports = router;"],"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","ignoreList":[]}