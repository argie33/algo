{"version":3,"names":["cov_2el5dg9mz4","actualCoverage","query","s","require","EventEmitter","RealTimeDataFeed","constructor","f","connections","Map","subscriptions","dataUpdateInterval","isRunning","updateFrequency","dataTypes","MARKET_OVERVIEW","PORTFOLIO","WATCHLIST","ALERTS","ECONOMIC","PATTERNS","SENTIMENT","RISK_METRICS","LIVE_QUOTES","LIVE_TRADES","alpacaConnections","liveDataCache","streamingActive","start","b","console","log","setInterval","updateAllDataFeeds","emit","stop","clearInterval","clear","addConnection","connectionId","userId","ws","set","Set","lastSeen","Date","now","sendInitialData","removeConnection","connection","get","forEach","dataType","unsubscribe","delete","subscribe","filters","add","has","lastUpdate","sendDataUpdate","subscribers","size","updateDataType","error","data","fetchDataForType","subscription","sendDataToConnection","fetchMarketOverview","fetchPortfolioData","fetchWatchlistData","fetchAlertsData","fetchEconomicData","fetchPatternsData","fetchSentimentData","fetchRiskMetrics","result","indices","rows","row","symbol","price","parseFloat","volume","parseInt","change_percent","market_cap","updated_at","sectorResult","sectors","map","sector","avg_change","stock_count","timestamp","toISOString","total_value","day_change","day_change_percent","positions","value","change","watchlist","company_name","recent_alerts","id","alert_type","trigger_value","message","created_at","recent_indicators","indicator_id","name","indicator_name","date","category","recent_patterns","pattern_type","confidence","confidence_score","detected_at","status","sentiment_updates","sentiment_score","sentiment_label","portfolio_var","market_var","correlation_risk","sector_concentration","volatility_regime","risk_alerts","type","level","filteredData","applyFilters","data_type","readyState","send","JSON","stringify","Object","keys","length","symbols","Array","isArray","filter","item","includes","min_change","Math","abs","welcomeMessage","connection_id","available_data_types","values","broadcast","getStats","total_connections","active_subscriptions","from","entries","reduce","acc","subs","is_running","update_frequency","module","exports"],"sources":["realTimeDataFeed.js"],"sourcesContent":["const { query } = require('./database');\nconst EventEmitter = require('events');\n\nclass RealTimeDataFeed extends EventEmitter {\n  constructor() {\n    super();\n    this.connections = new Map();\n    this.subscriptions = new Map();\n    this.dataUpdateInterval = null;\n    this.isRunning = false;\n    this.updateFrequency = 1000; // 1 second for real-time streaming\n    this.dataTypes = {\n      MARKET_OVERVIEW: 'market_overview',\n      PORTFOLIO: 'portfolio',\n      WATCHLIST: 'watchlist',\n      ALERTS: 'alerts',\n      ECONOMIC: 'economic',\n      PATTERNS: 'patterns',\n      SENTIMENT: 'sentiment',\n      RISK_METRICS: 'risk_metrics',\n      LIVE_QUOTES: 'live_quotes',\n      LIVE_TRADES: 'live_trades'\n    };\n    \n    // Enhanced real-time capabilities\n    this.alpacaConnections = new Map(); // userId -> AlpacaService\n    this.liveDataCache = new Map(); // symbol -> latest data\n    this.streamingActive = false;\n  }\n\n  start() {\n    if (this.isRunning) return;\n    \n    this.isRunning = true;\n    console.log('ðŸ”´ Starting real-time data feed...');\n    \n    // Start data update cycle\n    this.dataUpdateInterval = setInterval(() => {\n      this.updateAllDataFeeds();\n    }, this.updateFrequency);\n    \n    // Emit startup event\n    this.emit('started');\n  }\n\n  stop() {\n    if (!this.isRunning) return;\n    \n    this.isRunning = false;\n    console.log('ðŸŸ¡ Stopping real-time data feed...');\n    \n    if (this.dataUpdateInterval) {\n      clearInterval(this.dataUpdateInterval);\n      this.dataUpdateInterval = null;\n    }\n    \n    // Clean up connections\n    this.connections.clear();\n    this.subscriptions.clear();\n    \n    this.emit('stopped');\n  }\n\n  addConnection(connectionId, userId, ws) {\n    this.connections.set(connectionId, {\n      userId,\n      ws,\n      subscriptions: new Set(),\n      lastSeen: Date.now()\n    });\n    \n    console.log(`âž• Added connection ${connectionId} for user ${userId}`);\n    \n    // Send initial data\n    this.sendInitialData(connectionId);\n  }\n\n  removeConnection(connectionId) {\n    const connection = this.connections.get(connectionId);\n    if (connection) {\n      // Remove from subscriptions\n      connection.subscriptions.forEach(dataType => {\n        this.unsubscribe(connectionId, dataType);\n      });\n      \n      this.connections.delete(connectionId);\n      console.log(`âž– Removed connection ${connectionId}`);\n    }\n  }\n\n  subscribe(connectionId, dataType, filters = {}) {\n    const connection = this.connections.get(connectionId);\n    if (!connection) return false;\n    \n    connection.subscriptions.add(dataType);\n    \n    // Add to global subscriptions\n    if (!this.subscriptions.has(dataType)) {\n      this.subscriptions.set(dataType, new Map());\n    }\n    \n    this.subscriptions.get(dataType).set(connectionId, {\n      userId: connection.userId,\n      filters,\n      lastUpdate: 0\n    });\n    \n    console.log(`ðŸ“¡ Subscribed connection ${connectionId} to ${dataType}`);\n    \n    // Send initial data for this subscription\n    this.sendDataUpdate(connectionId, dataType);\n    \n    return true;\n  }\n\n  unsubscribe(connectionId, dataType) {\n    const connection = this.connections.get(connectionId);\n    if (connection) {\n      connection.subscriptions.delete(dataType);\n    }\n    \n    if (this.subscriptions.has(dataType)) {\n      this.subscriptions.get(dataType).delete(connectionId);\n    }\n    \n    console.log(`ðŸ“¡ Unsubscribed connection ${connectionId} from ${dataType}`);\n  }\n\n  async updateAllDataFeeds() {\n    if (!this.isRunning) return;\n    \n    try {\n      // Update each data type\n      for (const [dataType, subscribers] of this.subscriptions) {\n        if (subscribers.size > 0) {\n          await this.updateDataType(dataType);\n        }\n      }\n    } catch (error) {\n      console.error('Error updating data feeds:', error);\n    }\n  }\n\n  async updateDataType(dataType) {\n    try {\n      const subscribers = this.subscriptions.get(dataType);\n      if (!subscribers || subscribers.size === 0) return;\n      \n      const data = await this.fetchDataForType(dataType);\n      \n      // Send to all subscribers\n      for (const [connectionId, subscription] of subscribers) {\n        this.sendDataToConnection(connectionId, dataType, data, subscription.filters);\n      }\n    } catch (error) {\n      console.error(`Error updating ${dataType}:`, error);\n    }\n  }\n\n  async fetchDataForType(dataType) {\n    switch (dataType) {\n      case this.dataTypes.MARKET_OVERVIEW:\n        return await this.fetchMarketOverview();\n      case this.dataTypes.PORTFOLIO:\n        return await this.fetchPortfolioData();\n      case this.dataTypes.WATCHLIST:\n        return await this.fetchWatchlistData();\n      case this.dataTypes.ALERTS:\n        return await this.fetchAlertsData();\n      case this.dataTypes.ECONOMIC:\n        return await this.fetchEconomicData();\n      case this.dataTypes.PATTERNS:\n        return await this.fetchPatternsData();\n      case this.dataTypes.SENTIMENT:\n        return await this.fetchSentimentData();\n      case this.dataTypes.RISK_METRICS:\n        return await this.fetchRiskMetrics();\n      default:\n        return null;\n    }\n  }\n\n  async fetchMarketOverview() {\n    try {\n      const result = await query(`\n        SELECT \n          symbol,\n          close as price,\n          volume,\n          change_percent,\n          market_cap,\n          updated_at\n        FROM stock_data sd\n        WHERE symbol IN ('SPY', 'QQQ', 'IWM', 'VIX')\n        AND date = (SELECT MAX(date) FROM stock_data WHERE symbol = sd.symbol)\n      `);\n\n      const indices = {};\n      result.rows.forEach(row => {\n        indices[row.symbol] = {\n          price: parseFloat(row.price),\n          volume: parseInt(row.volume),\n          change_percent: parseFloat(row.change_percent),\n          market_cap: row.market_cap,\n          updated_at: row.updated_at\n        };\n      });\n\n      // Get sector performance\n      const sectorResult = await query(`\n        SELECT \n          sse.sector,\n          AVG(sd.change_percent) as avg_change,\n          COUNT(*) as stock_count\n        FROM stock_data sd\n        JOIN stock_symbols_enhanced sse ON sd.symbol = sse.symbol\n        WHERE sd.date = CURRENT_DATE\n        GROUP BY sse.sector\n        ORDER BY avg_change DESC\n      `);\n\n      const sectors = sectorResult.rows.map(row => ({\n        sector: row.sector,\n        avg_change: parseFloat(row.avg_change),\n        stock_count: parseInt(row.stock_count)\n      }));\n\n      return {\n        indices,\n        sectors,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching market overview:', error);\n      return null;\n    }\n  }\n\n  async fetchPortfolioData() {\n    try {\n      // This would fetch real portfolio data based on user's holdings\n      // For now, return mock data structure\n      return {\n        total_value: 125000,\n        day_change: 2500,\n        day_change_percent: 2.04,\n        positions: [\n          { symbol: 'AAPL', value: 25000, change: 500, change_percent: 2.0 },\n          { symbol: 'MSFT', value: 20000, change: 400, change_percent: 2.0 },\n          { symbol: 'GOOGL', value: 15000, change: 300, change_percent: 2.0 }\n        ],\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching portfolio data:', error);\n      return null;\n    }\n  }\n\n  async fetchWatchlistData() {\n    try {\n      const result = await query(`\n        SELECT \n          sd.symbol,\n          sd.close as price,\n          sd.change_percent,\n          sd.volume,\n          sse.company_name,\n          sse.sector\n        FROM stock_data sd\n        JOIN stock_symbols_enhanced sse ON sd.symbol = sse.symbol\n        WHERE sd.date = CURRENT_DATE\n        AND sd.symbol IN (\n          SELECT DISTINCT symbol \n          FROM watchlist_items \n          WHERE is_active = true\n        )\n        ORDER BY sd.change_percent DESC\n      `);\n\n      return {\n        watchlist: result.rows.map(row => ({\n          symbol: row.symbol,\n          company_name: row.company_name,\n          sector: row.sector,\n          price: parseFloat(row.price),\n          change_percent: parseFloat(row.change_percent),\n          volume: parseInt(row.volume)\n        })),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching watchlist data:', error);\n      return null;\n    }\n  }\n\n  async fetchAlertsData() {\n    try {\n      const result = await query(`\n        SELECT \n          an.id,\n          an.symbol,\n          an.alert_type,\n          an.trigger_value,\n          an.created_at,\n          wa.message\n        FROM alert_notifications an\n        JOIN watchlist_alerts wa ON an.alert_id = wa.id\n        WHERE an.created_at >= NOW() - INTERVAL '1 hour'\n        AND an.is_read = false\n        ORDER BY an.created_at DESC\n      `);\n\n      return {\n        recent_alerts: result.rows.map(row => ({\n          id: row.id,\n          symbol: row.symbol,\n          alert_type: row.alert_type,\n          trigger_value: parseFloat(row.trigger_value),\n          message: row.message,\n          created_at: row.created_at\n        })),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching alerts data:', error);\n      return null;\n    }\n  }\n\n  async fetchEconomicData() {\n    try {\n      const result = await query(`\n        SELECT \n          indicator_id,\n          indicator_name,\n          value,\n          date,\n          category\n        FROM economic_indicators\n        WHERE date >= CURRENT_DATE - INTERVAL '1 day'\n        ORDER BY date DESC\n        LIMIT 20\n      `);\n\n      return {\n        recent_indicators: result.rows.map(row => ({\n          id: row.indicator_id,\n          name: row.indicator_name,\n          value: parseFloat(row.value),\n          date: row.date,\n          category: row.category\n        })),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching economic data:', error);\n      return null;\n    }\n  }\n\n  async fetchPatternsData() {\n    try {\n      const result = await query(`\n        SELECT \n          symbol,\n          pattern_type,\n          confidence_score,\n          detected_at,\n          status\n        FROM pattern_detections\n        WHERE detected_at >= NOW() - INTERVAL '1 hour'\n        AND status = 'active'\n        ORDER BY confidence_score DESC\n        LIMIT 10\n      `);\n\n      return {\n        recent_patterns: result.rows.map(row => ({\n          symbol: row.symbol,\n          pattern_type: row.pattern_type,\n          confidence: parseFloat(row.confidence_score),\n          detected_at: row.detected_at,\n          status: row.status\n        })),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching patterns data:', error);\n      return null;\n    }\n  }\n\n  async fetchSentimentData() {\n    try {\n      const result = await query(`\n        SELECT \n          symbol,\n          sentiment_score,\n          sentiment_label,\n          volume,\n          date\n        FROM sentiment_analysis\n        WHERE date >= CURRENT_DATE - INTERVAL '1 day'\n        ORDER BY date DESC\n        LIMIT 20\n      `);\n\n      return {\n        sentiment_updates: result.rows.map(row => ({\n          symbol: row.symbol,\n          sentiment_score: parseFloat(row.sentiment_score),\n          sentiment_label: row.sentiment_label,\n          volume: parseInt(row.volume),\n          date: row.date\n        })),\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching sentiment data:', error);\n      return null;\n    }\n  }\n\n  async fetchRiskMetrics() {\n    try {\n      // Mock risk metrics data\n      return {\n        portfolio_var: 0.025,\n        market_var: 0.035,\n        correlation_risk: 0.15,\n        sector_concentration: 0.28,\n        volatility_regime: 'normal',\n        risk_alerts: [\n          { type: 'concentration', level: 'medium', message: 'High tech sector exposure' },\n          { type: 'volatility', level: 'low', message: 'VIX below 20' }\n        ],\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching risk metrics:', error);\n      return null;\n    }\n  }\n\n  sendDataToConnection(connectionId, dataType, data, filters) {\n    const connection = this.connections.get(connectionId);\n    if (!connection || !connection.ws) return;\n\n    try {\n      // Apply filters if any\n      const filteredData = this.applyFilters(data, filters);\n      \n      const message = {\n        type: 'data_update',\n        data_type: dataType,\n        data: filteredData,\n        timestamp: new Date().toISOString()\n      };\n\n      if (connection.ws.readyState === 1) { // WebSocket.OPEN\n        connection.ws.send(JSON.stringify(message));\n      }\n    } catch (error) {\n      console.error(`Error sending data to connection ${connectionId}:`, error);\n      this.removeConnection(connectionId);\n    }\n  }\n\n  applyFilters(data, filters) {\n    if (!filters || Object.keys(filters).length === 0) return data;\n    \n    // Apply various filters based on data type\n    let filteredData = data;\n    \n    if (filters.symbols && Array.isArray(filters.symbols)) {\n      // Filter by specific symbols\n      if (data.watchlist) {\n        filteredData.watchlist = data.watchlist.filter(item => \n          filters.symbols.includes(item.symbol)\n        );\n      }\n    }\n    \n    if (filters.sectors && Array.isArray(filters.sectors)) {\n      // Filter by sectors\n      if (data.sectors) {\n        filteredData.sectors = data.sectors.filter(sector => \n          filters.sectors.includes(sector.sector)\n        );\n      }\n    }\n    \n    if (filters.min_change && data.watchlist) {\n      // Filter by minimum change threshold\n      filteredData.watchlist = data.watchlist.filter(item => \n        Math.abs(item.change_percent) >= filters.min_change\n      );\n    }\n    \n    return filteredData;\n  }\n\n  sendInitialData(connectionId) {\n    const connection = this.connections.get(connectionId);\n    if (!connection || !connection.ws) return;\n\n    try {\n      const welcomeMessage = {\n        type: 'connection_established',\n        connection_id: connectionId,\n        available_data_types: Object.values(this.dataTypes),\n        timestamp: new Date().toISOString()\n      };\n\n      if (connection.ws.readyState === 1) {\n        connection.ws.send(JSON.stringify(welcomeMessage));\n      }\n    } catch (error) {\n      console.error(`Error sending initial data to connection ${connectionId}:`, error);\n    }\n  }\n\n  sendDataUpdate(connectionId, dataType) {\n    // Force immediate update for this data type\n    this.updateDataType(dataType);\n  }\n\n  broadcast(message) {\n    // Send message to all connections\n    for (const [connectionId, connection] of this.connections) {\n      if (connection.ws && connection.ws.readyState === 1) {\n        try {\n          connection.ws.send(JSON.stringify(message));\n        } catch (error) {\n          console.error(`Error broadcasting to connection ${connectionId}:`, error);\n          this.removeConnection(connectionId);\n        }\n      }\n    }\n  }\n\n  getStats() {\n    return {\n      total_connections: this.connections.size,\n      active_subscriptions: Array.from(this.subscriptions.entries()).reduce((acc, [dataType, subs]) => {\n        acc[dataType] = subs.size;\n        return acc;\n      }, {}),\n      is_running: this.isRunning,\n      update_frequency: this.updateFrequency\n    };\n  }\n}\n\nmodule.exports = RealTimeDataFeed;"],"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","ignoreList":[]}