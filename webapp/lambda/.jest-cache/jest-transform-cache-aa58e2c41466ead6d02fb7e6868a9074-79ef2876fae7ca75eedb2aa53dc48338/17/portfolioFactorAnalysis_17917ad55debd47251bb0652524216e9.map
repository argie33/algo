{"version":3,"names":["cov_n2nqdjjnd","actualCoverage","calculateFactorLoadings","returns","factorReturns","f","s","b","length","factors","Object","keys","loadings","forEach","factor","factorData","loading","calculateBeta","correlation","calculateCorrelation","rSquared","tStatistic","calculateTStatistic","significance","Math","abs","y","x","yMean","reduce","sum","val","xMean","covariance","variance","i","numerator","xVariance","yVariance","xDiff","yDiff","denominator","sqrt","beta","n","residualSumSquares","predicted","residual","degreesOfFreedom","standardError","performFactorAnalysis","holdings","performanceHistory","factorExposures","styleAnalysis","riskAttribution","activeExposures","totalValue","h","marketValue","calculateHoldingsFactorExposures","calculateStyleAnalysis","calculateRiskAttribution","calculateActiveExposures","analysisDate","Date","toISOString","exposures","quality","growth","value","momentum","size","volatility","dividend","profitability","holding","weight","sector","marketCap","includes","recentReturn","unrealizedPLPercent","growthExposure","valueExposure","largeCapExposure","midCapExposure","smallCapExposure","styleBox","growthLarge","growthMid","growthSmall","valueLarge","valueMid","valueSmall","riskContribution","contribution","totalRisk","values","risk","sectorRiskContribution","totalPortfolioRisk","riskDiversification","calculateRiskDiversification","diversificationRatio","effectivePositions","weightedAvgRisk","sumSquaredWeights","avgCorrelation","portfolioRisk","benchmarkExposures","portfolioExposure","benchmarkExposure","module","exports"],"sources":["portfolioFactorAnalysis.js"],"sourcesContent":["/**\n * Institutional-Grade Portfolio Factor Analysis\n * Provides sophisticated factor exposure analysis for institutional portfolios\n */\n\n/**\n * Calculate factor loadings using regression analysis\n * @param {Array} returns - Portfolio returns\n * @param {Object} factorReturns - Factor returns by factor name\n * @returns {Object} Factor loadings and R-squared\n */\nfunction calculateFactorLoadings(returns, factorReturns) {\n  if (!returns || !factorReturns || returns.length === 0) {\n    return {};\n  }\n\n  const factors = Object.keys(factorReturns);\n  const loadings = {};\n  \n  factors.forEach(factor => {\n    const factorData = factorReturns[factor];\n    if (factorData && factorData.length === returns.length) {\n      const loading = calculateBeta(returns, factorData);\n      const correlation = calculateCorrelation(returns, factorData);\n      const rSquared = correlation * correlation;\n      \n      loadings[factor] = {\n        loading: loading,\n        correlation: correlation,\n        rSquared: rSquared,\n        tStatistic: calculateTStatistic(loading, returns, factorData),\n        significance: Math.abs(calculateTStatistic(loading, returns, factorData)) > 2\n      };\n    }\n  });\n  \n  return loadings;\n}\n\n/**\n * Calculate beta coefficient\n * @param {Array} y - Dependent variable (portfolio returns)\n * @param {Array} x - Independent variable (factor returns)\n * @returns {number} Beta coefficient\n */\nfunction calculateBeta(y, x) {\n  if (y.length !== x.length || y.length === 0) return 0;\n  \n  const yMean = y.reduce((sum, val) => sum + val, 0) / y.length;\n  const xMean = x.reduce((sum, val) => sum + val, 0) / x.length;\n  \n  let covariance = 0;\n  let variance = 0;\n  \n  for (let i = 0; i < y.length; i++) {\n    covariance += (y[i] - yMean) * (x[i] - xMean);\n    variance += (x[i] - xMean) * (x[i] - xMean);\n  }\n  \n  return variance === 0 ? 0 : covariance / variance;\n}\n\n/**\n * Calculate correlation coefficient\n * @param {Array} x - First dataset\n * @param {Array} y - Second dataset\n * @returns {number} Correlation coefficient\n */\nfunction calculateCorrelation(x, y) {\n  if (x.length !== y.length || x.length === 0) return 0;\n  \n  const xMean = x.reduce((sum, val) => sum + val, 0) / x.length;\n  const yMean = y.reduce((sum, val) => sum + val, 0) / y.length;\n  \n  let numerator = 0;\n  let xVariance = 0;\n  let yVariance = 0;\n  \n  for (let i = 0; i < x.length; i++) {\n    const xDiff = x[i] - xMean;\n    const yDiff = y[i] - yMean;\n    \n    numerator += xDiff * yDiff;\n    xVariance += xDiff * xDiff;\n    yVariance += yDiff * yDiff;\n  }\n  \n  const denominator = Math.sqrt(xVariance * yVariance);\n  return denominator === 0 ? 0 : numerator / denominator;\n}\n\n/**\n * Calculate t-statistic for significance testing\n * @param {number} beta - Beta coefficient\n * @param {Array} y - Dependent variable\n * @param {Array} x - Independent variable\n * @returns {number} T-statistic\n */\nfunction calculateTStatistic(beta, y, x) {\n  if (y.length !== x.length || y.length < 3) return 0;\n  \n  const n = y.length;\n  const yMean = y.reduce((sum, val) => sum + val, 0) / n;\n  const xMean = x.reduce((sum, val) => sum + val, 0) / n;\n  \n  // Calculate residuals\n  let residualSumSquares = 0;\n  let xVariance = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const predicted = beta * x[i];\n    const residual = y[i] - predicted;\n    residualSumSquares += residual * residual;\n    \n    const xDiff = x[i] - xMean;\n    xVariance += xDiff * xDiff;\n  }\n  \n  const degreesOfFreedom = n - 2;\n  const standardError = Math.sqrt(residualSumSquares / degreesOfFreedom / xVariance);\n  \n  return standardError === 0 ? 0 : beta / standardError;\n}\n\n/**\n * Perform comprehensive factor analysis on portfolio holdings\n * @param {Array} holdings - Portfolio holdings with sector and market cap data\n * @param {Array} performanceHistory - Historical performance data\n * @returns {Object} Comprehensive factor analysis\n */\nfunction performFactorAnalysis(holdings, performanceHistory = []) {\n  if (!holdings || holdings.length === 0) {\n    return {\n      factorExposures: {},\n      styleAnalysis: {},\n      riskAttribution: {},\n      activeExposures: {}\n    };\n  }\n\n  const totalValue = holdings.reduce((sum, h) => sum + (h.marketValue || 0), 0);\n  \n  // Calculate factor exposures based on holdings\n  const factorExposures = calculateHoldingsFactorExposures(holdings, totalValue);\n  \n  // Style analysis\n  const styleAnalysis = calculateStyleAnalysis(holdings, totalValue);\n  \n  // Risk attribution\n  const riskAttribution = calculateRiskAttribution(holdings, totalValue);\n  \n  // Active exposures vs benchmark\n  const activeExposures = calculateActiveExposures(factorExposures);\n  \n  return {\n    factorExposures,\n    styleAnalysis,\n    riskAttribution,\n    activeExposures,\n    totalValue,\n    analysisDate: new Date().toISOString()\n  };\n}\n\n/**\n * Calculate factor exposures based on holdings\n * @param {Array} holdings - Portfolio holdings\n * @param {number} totalValue - Total portfolio value\n * @returns {Object} Factor exposures\n */\nfunction calculateHoldingsFactorExposures(holdings, totalValue) {\n  const exposures = {\n    quality: 0,\n    growth: 0,\n    value: 0,\n    momentum: 0,\n    size: 0,\n    volatility: 0,\n    dividend: 0,\n    profitability: 0\n  };\n  \n  holdings.forEach(holding => {\n    const weight = totalValue > 0 ? (holding.marketValue || 0) / totalValue : 0;\n    const sector = holding.sector || 'Other';\n    const marketCap = holding.marketCap || 'large';\n    \n    // Quality factor (based on sector and financial health)\n    if (['Technology', 'Healthcare', 'Consumer Staples'].includes(sector)) {\n      exposures.quality += weight * 0.8;\n    } else if (['Utilities', 'Telecommunications'].includes(sector)) {\n      exposures.quality += weight * 0.6;\n    } else {\n      exposures.quality += weight * 0.4;\n    }\n    \n    // Growth factor\n    if (['Technology', 'Consumer Discretionary'].includes(sector)) {\n      exposures.growth += weight * 0.9;\n    } else if (['Healthcare', 'Industrials'].includes(sector)) {\n      exposures.growth += weight * 0.6;\n    } else {\n      exposures.growth += weight * 0.3;\n    }\n    \n    // Value factor\n    if (['Financials', 'Energy', 'Materials'].includes(sector)) {\n      exposures.value += weight * 0.8;\n    } else if (['Utilities', 'Real Estate'].includes(sector)) {\n      exposures.value += weight * 0.6;\n    } else {\n      exposures.value += weight * 0.2;\n    }\n    \n    // Momentum factor (based on recent performance)\n    const recentReturn = holding.unrealizedPLPercent || 0;\n    if (recentReturn > 10) {\n      exposures.momentum += weight * 0.8;\n    } else if (recentReturn > 0) {\n      exposures.momentum += weight * 0.5;\n    } else {\n      exposures.momentum += weight * 0.2;\n    }\n    \n    // Size factor\n    if (marketCap === 'small') {\n      exposures.size += weight * 0.9;\n    } else if (marketCap === 'mid') {\n      exposures.size += weight * 0.6;\n    } else {\n      exposures.size += weight * 0.3;\n    }\n    \n    // Volatility factor (based on sector volatility)\n    if (['Technology', 'Biotechnology'].includes(sector)) {\n      exposures.volatility += weight * 0.9;\n    } else if (['Energy', 'Materials'].includes(sector)) {\n      exposures.volatility += weight * 0.7;\n    } else {\n      exposures.volatility += weight * 0.4;\n    }\n    \n    // Dividend factor\n    if (['Utilities', 'Real Estate', 'Consumer Staples'].includes(sector)) {\n      exposures.dividend += weight * 0.8;\n    } else if (['Financials', 'Telecommunications'].includes(sector)) {\n      exposures.dividend += weight * 0.6;\n    } else {\n      exposures.dividend += weight * 0.2;\n    }\n    \n    // Profitability factor\n    if (['Technology', 'Healthcare', 'Consumer Staples'].includes(sector)) {\n      exposures.profitability += weight * 0.8;\n    } else if (['Financials', 'Industrials'].includes(sector)) {\n      exposures.profitability += weight * 0.6;\n    } else {\n      exposures.profitability += weight * 0.4;\n    }\n  });\n  \n  return exposures;\n}\n\n/**\n * Calculate style analysis (Growth vs Value, Large vs Small Cap)\n * @param {Array} holdings - Portfolio holdings\n * @param {number} totalValue - Total portfolio value\n * @returns {Object} Style analysis\n */\nfunction calculateStyleAnalysis(holdings, totalValue) {\n  let growthExposure = 0;\n  let valueExposure = 0;\n  let largeCapExposure = 0;\n  let midCapExposure = 0;\n  let smallCapExposure = 0;\n  \n  holdings.forEach(holding => {\n    const weight = totalValue > 0 ? (holding.marketValue || 0) / totalValue : 0;\n    const sector = holding.sector || 'Other';\n    const marketCap = holding.marketCap || 'large';\n    \n    // Growth vs Value\n    if (['Technology', 'Consumer Discretionary', 'Communication Services'].includes(sector)) {\n      growthExposure += weight;\n    } else if (['Financials', 'Energy', 'Materials', 'Utilities'].includes(sector)) {\n      valueExposure += weight;\n    } else {\n      // Neutral sectors\n      growthExposure += weight * 0.5;\n      valueExposure += weight * 0.5;\n    }\n    \n    // Market Cap\n    if (marketCap === 'large') {\n      largeCapExposure += weight;\n    } else if (marketCap === 'mid') {\n      midCapExposure += weight;\n    } else {\n      smallCapExposure += weight;\n    }\n  });\n  \n  return {\n    growthExposure,\n    valueExposure,\n    largeCapExposure,\n    midCapExposure,\n    smallCapExposure,\n    styleBox: {\n      growthLarge: growthExposure * largeCapExposure,\n      growthMid: growthExposure * midCapExposure,\n      growthSmall: growthExposure * smallCapExposure,\n      valueLarge: valueExposure * largeCapExposure,\n      valueMid: valueExposure * midCapExposure,\n      valueSmall: valueExposure * smallCapExposure\n    }\n  };\n}\n\n/**\n * Calculate risk attribution by factor\n * @param {Array} holdings - Portfolio holdings\n * @param {number} totalValue - Total portfolio value\n * @returns {Object} Risk attribution\n */\nfunction calculateRiskAttribution(holdings, totalValue) {\n  const riskContribution = {};\n  \n  holdings.forEach(holding => {\n    const weight = totalValue > 0 ? (holding.marketValue || 0) / totalValue : 0;\n    const volatility = holding.volatility || 0.2; // Default 20% volatility\n    const contribution = weight * weight * volatility * volatility;\n    \n    const sector = holding.sector || 'Other';\n    riskContribution[sector] = (riskContribution[sector] || 0) + contribution;\n  });\n  \n  const totalRisk = Object.values(riskContribution).reduce((sum, risk) => sum + risk, 0);\n  \n  // Normalize to percentages\n  Object.keys(riskContribution).forEach(sector => {\n    riskContribution[sector] = totalRisk > 0 ? (riskContribution[sector] / totalRisk) * 100 : 0;\n  });\n  \n  return {\n    sectorRiskContribution: riskContribution,\n    totalPortfolioRisk: Math.sqrt(totalRisk) * 100,\n    riskDiversification: calculateRiskDiversification(holdings, totalValue)\n  };\n}\n\n/**\n * Calculate risk diversification benefits\n * @param {Array} holdings - Portfolio holdings\n * @param {number} totalValue - Total portfolio value\n * @returns {Object} Risk diversification metrics\n */\nfunction calculateRiskDiversification(holdings, totalValue) {\n  if (holdings.length === 0) return { diversificationRatio: 0, effectivePositions: 0 };\n  \n  // Calculate weighted average individual risk\n  let weightedAvgRisk = 0;\n  let sumSquaredWeights = 0;\n  \n  holdings.forEach(holding => {\n    const weight = totalValue > 0 ? (holding.marketValue || 0) / totalValue : 0;\n    const volatility = holding.volatility || 0.2;\n    \n    weightedAvgRisk += weight * volatility;\n    sumSquaredWeights += weight * weight;\n  });\n  \n  // Effective number of positions (inverse of sum of squared weights)\n  const effectivePositions = sumSquaredWeights > 0 ? 1 / sumSquaredWeights : 0;\n  \n  // Portfolio risk (simplified - assumes average correlation of 0.3)\n  const avgCorrelation = 0.3;\n  const portfolioRisk = Math.sqrt(sumSquaredWeights + (1 - sumSquaredWeights) * avgCorrelation) * weightedAvgRisk;\n  \n  // Diversification ratio\n  const diversificationRatio = portfolioRisk > 0 ? weightedAvgRisk / portfolioRisk : 0;\n  \n  return {\n    diversificationRatio,\n    effectivePositions,\n    portfolioRisk: portfolioRisk * 100,\n    weightedAvgRisk: weightedAvgRisk * 100\n  };\n}\n\n/**\n * Calculate active exposures vs benchmark\n * @param {Object} factorExposures - Portfolio factor exposures\n * @returns {Object} Active exposures\n */\nfunction calculateActiveExposures(factorExposures) {\n  // Benchmark factor exposures (e.g., S&P 500)\n  const benchmarkExposures = {\n    quality: 0.6,\n    growth: 0.5,\n    value: 0.5,\n    momentum: 0.5,\n    size: 0.3,\n    volatility: 0.4,\n    dividend: 0.4,\n    profitability: 0.6\n  };\n  \n  const activeExposures = {};\n  \n  Object.keys(factorExposures).forEach(factor => {\n    const portfolioExposure = factorExposures[factor] || 0;\n    const benchmarkExposure = benchmarkExposures[factor] || 0;\n    activeExposures[factor] = portfolioExposure - benchmarkExposure;\n  });\n  \n  return activeExposures;\n}\n\nmodule.exports = {\n  performFactorAnalysis,\n  calculateFactorLoadings,\n  calculateBeta,\n  calculateCorrelation,\n  calculateTStatistic,\n  calculateHoldingsFactorExposures,\n  calculateStyleAnalysis,\n  calculateRiskAttribution,\n  calculateActiveExposures\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}