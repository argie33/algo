{"version":3,"names":["cov_24o63bnsq","actualCoverage","query","safeQuery","transaction","s","require","createRequestLogger","getTimeout","AlpacaService","crypto","PortfolioSyncService","constructor","options","b","f","syncInterval","conflictResolutionStrategy","batchSize","maxRetries","timeoutMs","enablePerformanceTracking","logger","syncStatus","Map","syncMetrics","totalSyncs","successfulSyncs","failedSyncs","conflictsResolved","recordsProcessed","avgSyncDuration","info","syncUserPortfolio","userId","apiKeyService","syncId","Date","now","syncStart","substring","set","status","startTime","stage","credentials","getUserCredentials","Error","alpacaService","apiKey","apiSecret","isSandbox","syncResult","executeSyncStages","syncDuration","updateSyncMetrics","endTime","duration","result","summary","success","error","message","getDecryptedApiKey","stages","stageResults","totalRecordsProcessed","totalConflictsResolved","updateSyncStage","stageResult","executeSyncStage","isCriticalStage","successfulStages","Object","values","filter","r","length","failedStages","syncAccountData","syncPositionsData","syncOrdersData","syncPortfolioHistory","updatePortfolioMetadata","stageStart","accountData","getAccount","updateResult","updateAccountInDatabase","equity","buyingPower","cash","portfolioValue","positions","getPositions","Array","isArray","i","batch","slice","batchResult","processPositionsBatch","cleanupResult","cleanupClosedPositions","positionsCount","client","position","existingPosition","getExistingPosition","symbol","conflictResult","resolvePositionConflict","conflictResolved","insertNewPosition","rows","apiPosition","conflicts","detectPositionConflicts","map","c","field","resolvedData","applyConflictResolution","updatePositionWithResolution","dbPosition","tolerance","Math","abs","parseFloat","quantity","push","dbValue","apiValue","severity","market_value","marketValue","cost_basis","costBasis","unrealized_pl","unrealizedPL","forEach","conflict","mapApiFieldToDb","dbTimestamp","updated_at","getTime","apiTimestamp","lastUpdated","apiField","mapping","updateFields","updateValues","paramIndex","dbField","JSON","stringify","updateQuery","join","unrealizedPLPercent","currentPrice","averageEntryPrice","side","apiPositions","apiSymbols","Set","p","dbPositions","has","reason","existingMetadata","environment","currentStatus","get","criticalStages","includes","getSyncStatus","getMetrics","successRate","toFixed","avgSyncDurationFormatted","activeSyncs","from","module","exports"],"sources":["portfolioSyncService.js"],"sourcesContent":["/**\n * Portfolio Data Synchronization Service\n * Provides robust synchronization between database and broker APIs with conflict resolution\n */\n\nconst { query, safeQuery, transaction } = require('./database');\nconst { createRequestLogger } = require('./logger');\nconst { getTimeout } = require('./timeoutManager');\nconst AlpacaService = require('./alpacaService');\nconst crypto = require('crypto');\n\nclass PortfolioSyncService {\n  constructor(options = {}) {\n    this.options = {\n      syncInterval: options.syncInterval || 300000, // 5 minutes default\n      conflictResolutionStrategy: options.conflictResolutionStrategy || 'broker_priority',\n      batchSize: options.batchSize || 100,\n      maxRetries: options.maxRetries || 3,\n      timeoutMs: options.timeoutMs || 30000,\n      enablePerformanceTracking: options.enablePerformanceTracking || true,\n      ...options\n    };\n\n    this.logger = createRequestLogger('portfolio-sync');\n    this.syncStatus = new Map(); // userId -> sync status\n    this.syncMetrics = {\n      totalSyncs: 0,\n      successfulSyncs: 0,\n      failedSyncs: 0,\n      conflictsResolved: 0,\n      recordsProcessed: 0,\n      avgSyncDuration: 0\n    };\n\n    this.logger.info('🚀 Portfolio Sync Service initialized', this.options);\n  }\n\n  /**\n   * Sync portfolio data for a specific user\n   */\n  async syncUserPortfolio(userId, apiKeyService, options = {}) {\n    const syncId = `sync_${userId}_${Date.now()}`;\n    const syncStart = Date.now();\n\n    try {\n      this.logger.info('🔄 Starting portfolio sync', {\n        syncId,\n        userId: `${userId.substring(0, 8)}...`,\n        options\n      });\n\n      // Update sync status\n      this.syncStatus.set(userId, {\n        status: 'in_progress',\n        syncId,\n        startTime: syncStart,\n        stage: 'initializing'\n      });\n\n      // Get user's API credentials\n      const credentials = await this.getUserCredentials(userId, apiKeyService);\n      if (!credentials) {\n        throw new Error('API credentials not found for user');\n      }\n\n      // Initialize Alpaca service\n      const alpacaService = new AlpacaService(\n        credentials.apiKey,\n        credentials.apiSecret,\n        credentials.isSandbox\n      );\n\n      // Execute sync stages\n      const syncResult = await this.executeSyncStages(userId, alpacaService, syncId);\n\n      // Update metrics\n      const syncDuration = Date.now() - syncStart;\n      this.updateSyncMetrics(true, syncDuration, syncResult);\n\n      // Update sync status\n      this.syncStatus.set(userId, {\n        status: 'completed',\n        syncId,\n        startTime: syncStart,\n        endTime: Date.now(),\n        duration: syncDuration,\n        result: syncResult\n      });\n\n      this.logger.info('✅ Portfolio sync completed successfully', {\n        syncId,\n        duration: `${syncDuration}ms`,\n        result: syncResult.summary\n      });\n\n      return {\n        success: true,\n        syncId,\n        duration: syncDuration,\n        result: syncResult\n      };\n\n    } catch (error) {\n      const syncDuration = Date.now() - syncStart;\n      this.updateSyncMetrics(false, syncDuration);\n\n      this.syncStatus.set(userId, {\n        status: 'failed',\n        syncId,\n        startTime: syncStart,\n        endTime: Date.now(),\n        duration: syncDuration,\n        error: error.message\n      });\n\n      this.logger.error('❌ Portfolio sync failed', {\n        syncId,\n        error: error.message,\n        duration: `${syncDuration}ms`\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get user credentials with error handling\n   */\n  async getUserCredentials(userId, apiKeyService) {\n    try {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (!credentials || !credentials.apiKey || !credentials.apiSecret) {\n        return null;\n      }\n\n      return credentials;\n    } catch (error) {\n      this.logger.error('Error retrieving user credentials', {\n        userId: `${userId.substring(0, 8)}...`,\n        error: error.message\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Execute all sync stages\n   */\n  async executeSyncStages(userId, alpacaService, syncId) {\n    const stages = [\n      'account_sync',\n      'positions_sync',\n      'orders_sync',\n      'portfolio_history_sync',\n      'metadata_update'\n    ];\n\n    const stageResults = {};\n    let totalRecordsProcessed = 0;\n    let totalConflictsResolved = 0;\n\n    for (const stage of stages) {\n      try {\n        this.updateSyncStage(userId, stage);\n        \n        this.logger.info(`📊 Executing sync stage: ${stage}`, { syncId });\n        \n        const stageResult = await this.executeSyncStage(\n          stage, \n          userId, \n          alpacaService, \n          syncId\n        );\n\n        stageResults[stage] = {\n          success: true,\n          ...stageResult\n        };\n\n        totalRecordsProcessed += stageResult.recordsProcessed || 0;\n        totalConflictsResolved += stageResult.conflictsResolved || 0;\n\n        this.logger.info(`✅ Stage ${stage} completed`, {\n          syncId,\n          recordsProcessed: stageResult.recordsProcessed,\n          conflictsResolved: stageResult.conflictsResolved\n        });\n\n      } catch (error) {\n        stageResults[stage] = {\n          success: false,\n          error: error.message\n        };\n\n        this.logger.error(`❌ Stage ${stage} failed`, {\n          syncId,\n          error: error.message\n        });\n\n        // Continue with other stages unless it's a critical failure\n        if (this.isCriticalStage(stage)) {\n          throw error;\n        }\n      }\n    }\n\n    return {\n      stages: stageResults,\n      summary: {\n        totalRecordsProcessed,\n        totalConflictsResolved,\n        successfulStages: Object.values(stageResults).filter(r => r.success).length,\n        failedStages: Object.values(stageResults).filter(r => !r.success).length\n      }\n    };\n  }\n\n  /**\n   * Execute a specific sync stage\n   */\n  async executeSyncStage(stage, userId, alpacaService, syncId) {\n    switch (stage) {\n      case 'account_sync':\n        return await this.syncAccountData(userId, alpacaService, syncId);\n      \n      case 'positions_sync':\n        return await this.syncPositionsData(userId, alpacaService, syncId);\n      \n      case 'orders_sync':\n        return await this.syncOrdersData(userId, alpacaService, syncId);\n      \n      case 'portfolio_history_sync':\n        return await this.syncPortfolioHistory(userId, alpacaService, syncId);\n      \n      case 'metadata_update':\n        return await this.updatePortfolioMetadata(userId, syncId);\n      \n      default:\n        throw new Error(`Unknown sync stage: ${stage}`);\n    }\n  }\n\n  /**\n   * Sync account data\n   */\n  async syncAccountData(userId, alpacaService, syncId) {\n    const stageStart = Date.now();\n    \n    try {\n      // Fetch account data from Alpaca\n      const accountData = await alpacaService.getAccount();\n      \n      if (!accountData) {\n        throw new Error('No account data received from Alpaca');\n      }\n\n      // Update database with account data\n      const updateResult = await this.updateAccountInDatabase(userId, accountData, syncId);\n\n      return {\n        recordsProcessed: 1,\n        conflictsResolved: updateResult.conflictsResolved,\n        duration: Date.now() - stageStart,\n        accountData: {\n          equity: accountData.equity,\n          buyingPower: accountData.buyingPower,\n          cash: accountData.cash,\n          portfolioValue: accountData.portfolioValue\n        }\n      };\n\n    } catch (error) {\n      this.logger.error('Account sync failed', {\n        syncId,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Sync positions data\n   */\n  async syncPositionsData(userId, alpacaService, syncId) {\n    const stageStart = Date.now();\n    \n    try {\n      // Fetch positions from Alpaca\n      const positions = await alpacaService.getPositions();\n      \n      if (!Array.isArray(positions)) {\n        throw new Error('Invalid positions data received from Alpaca');\n      }\n\n      // Process positions in batches\n      let totalRecordsProcessed = 0;\n      let totalConflictsResolved = 0;\n      \n      for (let i = 0; i < positions.length; i += this.options.batchSize) {\n        const batch = positions.slice(i, i + this.options.batchSize);\n        \n        const batchResult = await this.processPositionsBatch(userId, batch, syncId);\n        totalRecordsProcessed += batchResult.recordsProcessed;\n        totalConflictsResolved += batchResult.conflictsResolved;\n      }\n\n      // Clean up closed positions in database\n      const cleanupResult = await this.cleanupClosedPositions(userId, positions, syncId);\n      totalRecordsProcessed += cleanupResult.recordsProcessed;\n\n      return {\n        recordsProcessed: totalRecordsProcessed,\n        conflictsResolved: totalConflictsResolved,\n        duration: Date.now() - stageStart,\n        positionsCount: positions.length\n      };\n\n    } catch (error) {\n      this.logger.error('Positions sync failed', {\n        syncId,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Process a batch of positions\n   */\n  async processPositionsBatch(userId, positions, syncId) {\n    return await transaction(async (client) => {\n      let recordsProcessed = 0;\n      let conflictsResolved = 0;\n\n      for (const position of positions) {\n        try {\n          // Check for existing position in database\n          const existingPosition = await this.getExistingPosition(\n            client, \n            userId, \n            position.symbol\n          );\n\n          if (existingPosition) {\n            // Resolve conflicts and update\n            const conflictResult = await this.resolvePositionConflict(\n              client,\n              existingPosition,\n              position,\n              userId,\n              syncId\n            );\n            \n            if (conflictResult.conflictResolved) {\n              conflictsResolved++;\n            }\n          } else {\n            // Insert new position\n            await this.insertNewPosition(client, userId, position, syncId);\n          }\n\n          recordsProcessed++;\n\n        } catch (error) {\n          this.logger.error('Error processing position', {\n            syncId,\n            symbol: position.symbol,\n            error: error.message\n          });\n          // Continue with other positions\n        }\n      }\n\n      return { recordsProcessed, conflictsResolved };\n    });\n  }\n\n  /**\n   * Get existing position from database\n   */\n  async getExistingPosition(client, userId, symbol) {\n    const result = await client.query(`\n      SELECT * FROM portfolio_holdings \n      WHERE user_id = $1 AND symbol = $2\n    `, [userId, symbol]);\n\n    return result.rows[0] || null;\n  }\n\n  /**\n   * Resolve position conflict between database and API data\n   */\n  async resolvePositionConflict(client, existingPosition, apiPosition, userId, syncId) {\n    const conflicts = this.detectPositionConflicts(existingPosition, apiPosition);\n    \n    if (conflicts.length === 0) {\n      // No conflicts, just update timestamp\n      await client.query(`\n        UPDATE portfolio_holdings \n        SET updated_at = NOW()\n        WHERE user_id = $1 AND symbol = $2\n      `, [userId, apiPosition.symbol]);\n\n      return { conflictResolved: false };\n    }\n\n    this.logger.info('Position conflicts detected', {\n      syncId,\n      symbol: apiPosition.symbol,\n      conflicts: conflicts.map(c => c.field)\n    });\n\n    // Apply conflict resolution strategy\n    const resolvedData = this.applyConflictResolution(\n      existingPosition,\n      apiPosition,\n      conflicts\n    );\n\n    // Update position with resolved data\n    await this.updatePositionWithResolution(\n      client,\n      userId,\n      apiPosition.symbol,\n      resolvedData,\n      conflicts\n    );\n\n    return { conflictResolved: true, conflicts };\n  }\n\n  /**\n   * Detect conflicts between database and API position data\n   */\n  detectPositionConflicts(dbPosition, apiPosition) {\n    const conflicts = [];\n    const tolerance = 0.01; // 1 cent tolerance for price comparisons\n\n    // Check quantity conflicts\n    if (Math.abs(parseFloat(dbPosition.quantity || 0) - parseFloat(apiPosition.quantity || 0)) > 0.0001) {\n      conflicts.push({\n        field: 'quantity',\n        dbValue: dbPosition.quantity,\n        apiValue: apiPosition.quantity,\n        severity: 'high'\n      });\n    }\n\n    // Check market value conflicts\n    if (Math.abs(parseFloat(dbPosition.market_value || 0) - parseFloat(apiPosition.marketValue || 0)) > tolerance) {\n      conflicts.push({\n        field: 'market_value',\n        dbValue: dbPosition.market_value,\n        apiValue: apiPosition.marketValue,\n        severity: 'medium'\n      });\n    }\n\n    // Check cost basis conflicts\n    if (Math.abs(parseFloat(dbPosition.cost_basis || 0) - parseFloat(apiPosition.costBasis || 0)) > tolerance) {\n      conflicts.push({\n        field: 'cost_basis',\n        dbValue: dbPosition.cost_basis,\n        apiValue: apiPosition.costBasis,\n        severity: 'medium'\n      });\n    }\n\n    // Check unrealized P&L conflicts\n    if (Math.abs(parseFloat(dbPosition.unrealized_pl || 0) - parseFloat(apiPosition.unrealizedPL || 0)) > tolerance) {\n      conflicts.push({\n        field: 'unrealized_pl',\n        dbValue: dbPosition.unrealized_pl,\n        apiValue: apiPosition.unrealizedPL,\n        severity: 'low'\n      });\n    }\n\n    return conflicts;\n  }\n\n  /**\n   * Apply conflict resolution strategy\n   */\n  applyConflictResolution(dbPosition, apiPosition, conflicts) {\n    const resolvedData = { ...dbPosition };\n\n    conflicts.forEach(conflict => {\n      switch (this.options.conflictResolutionStrategy) {\n        case 'broker_priority':\n          // Always prefer broker/API data\n          resolvedData[this.mapApiFieldToDb(conflict.field)] = conflict.apiValue;\n          break;\n\n        case 'database_priority':\n          // Keep database data (no change needed)\n          break;\n\n        case 'latest_timestamp':\n          // Use data with latest timestamp\n          const dbTimestamp = new Date(dbPosition.updated_at || 0).getTime();\n          const apiTimestamp = new Date(apiPosition.lastUpdated || Date.now()).getTime();\n          \n          if (apiTimestamp > dbTimestamp) {\n            resolvedData[this.mapApiFieldToDb(conflict.field)] = conflict.apiValue;\n          }\n          break;\n\n        case 'severity_based':\n          // Prefer API data for high severity conflicts, database for low\n          if (conflict.severity === 'high') {\n            resolvedData[this.mapApiFieldToDb(conflict.field)] = conflict.apiValue;\n          }\n          break;\n\n        default:\n          // Default to broker priority\n          resolvedData[this.mapApiFieldToDb(conflict.field)] = conflict.apiValue;\n      }\n    });\n\n    return resolvedData;\n  }\n\n  /**\n   * Map API field names to database field names\n   */\n  mapApiFieldToDb(apiField) {\n    const mapping = {\n      'quantity': 'quantity',\n      'market_value': 'market_value',\n      'cost_basis': 'cost_basis',\n      'unrealized_pl': 'unrealized_pl'\n    };\n\n    return mapping[apiField] || apiField;\n  }\n\n  /**\n   * Update position with conflict resolution\n   */\n  async updatePositionWithResolution(client, userId, symbol, resolvedData, conflicts) {\n    // Build dynamic update query based on resolved data\n    const updateFields = [];\n    const updateValues = [];\n    let paramIndex = 3; // Start after userId and symbol\n\n    conflicts.forEach(conflict => {\n      const dbField = this.mapApiFieldToDb(conflict.field);\n      updateFields.push(`${dbField} = $${paramIndex}`);\n      updateValues.push(resolvedData[dbField]);\n      paramIndex++;\n    });\n\n    // Always update the timestamp and conflict resolution info\n    updateFields.push('updated_at = NOW()');\n    updateFields.push(`last_sync_conflicts = $${paramIndex}`);\n    updateValues.push(JSON.stringify(conflicts.map(c => c.field)));\n\n    const updateQuery = `\n      UPDATE portfolio_holdings \n      SET ${updateFields.join(', ')}\n      WHERE user_id = $1 AND symbol = $2\n    `;\n\n    await client.query(updateQuery, [userId, symbol, ...updateValues]);\n  }\n\n  /**\n   * Insert new position\n   */\n  async insertNewPosition(client, userId, position, syncId) {\n    await client.query(`\n      INSERT INTO portfolio_holdings (\n        user_id, symbol, quantity, market_value, cost_basis, \n        unrealized_pl, unrealized_plpc, current_price, \n        average_entry_price, side, created_at, updated_at,\n        sync_id\n      ) VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW(), $11\n      ) ON CONFLICT (user_id, symbol) DO UPDATE SET\n        quantity = EXCLUDED.quantity,\n        market_value = EXCLUDED.market_value,\n        cost_basis = EXCLUDED.cost_basis,\n        unrealized_pl = EXCLUDED.unrealized_pl,\n        unrealized_plpc = EXCLUDED.unrealized_plpc,\n        current_price = EXCLUDED.current_price,\n        average_entry_price = EXCLUDED.average_entry_price,\n        updated_at = NOW(),\n        sync_id = EXCLUDED.sync_id\n    `, [\n      userId,\n      position.symbol,\n      position.quantity,\n      position.marketValue,\n      position.costBasis,\n      position.unrealizedPL,\n      position.unrealizedPLPercent,\n      position.currentPrice,\n      position.averageEntryPrice,\n      position.side,\n      syncId\n    ]);\n  }\n\n  /**\n   * Clean up positions that are closed in the broker but still in database\n   */\n  async cleanupClosedPositions(userId, apiPositions, syncId) {\n    const apiSymbols = new Set(apiPositions.map(p => p.symbol));\n    \n    // Get all positions from database\n    const dbPositions = await safeQuery(`\n      SELECT symbol FROM portfolio_holdings WHERE user_id = $1\n    `, [userId]);\n\n    let recordsProcessed = 0;\n\n    for (const dbPosition of dbPositions.rows) {\n      if (!apiSymbols.has(dbPosition.symbol)) {\n        // Position exists in database but not in API - mark as closed\n        await safeQuery(`\n          UPDATE portfolio_holdings \n          SET quantity = 0, market_value = 0, unrealized_pl = 0,\n              status = 'closed', updated_at = NOW(), sync_id = $3\n          WHERE user_id = $1 AND symbol = $2\n        `, [userId, dbPosition.symbol, syncId]);\n\n        recordsProcessed++;\n\n        this.logger.info('Position marked as closed', {\n          syncId,\n          symbol: dbPosition.symbol,\n          reason: 'not_in_broker_api'\n        });\n      }\n    }\n\n    return { recordsProcessed };\n  }\n\n  /**\n   * Sync orders data (placeholder - similar pattern to positions)\n   */\n  async syncOrdersData(userId, alpacaService, syncId) {\n    // Similar implementation to positions sync\n    return {\n      recordsProcessed: 0,\n      conflictsResolved: 0,\n      duration: 0\n    };\n  }\n\n  /**\n   * Sync portfolio history (placeholder)\n   */\n  async syncPortfolioHistory(userId, alpacaService, syncId) {\n    // Implementation for syncing portfolio performance history\n    return {\n      recordsProcessed: 0,\n      conflictsResolved: 0,\n      duration: 0\n    };\n  }\n\n  /**\n   * Update portfolio metadata\n   */\n  async updatePortfolioMetadata(userId, syncId) {\n    const stageStart = Date.now();\n\n    try {\n      await safeQuery(`\n        UPDATE portfolio_metadata \n        SET last_sync = NOW(), last_sync_id = $2, updated_at = NOW()\n        WHERE user_id = $1\n      `, [userId, syncId]);\n\n      return {\n        recordsProcessed: 1,\n        conflictsResolved: 0,\n        duration: Date.now() - stageStart\n      };\n\n    } catch (error) {\n      this.logger.error('Metadata update failed', {\n        syncId,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Update account data in database\n   */\n  async updateAccountInDatabase(userId, accountData, syncId) {\n    return await transaction(async (client) => {\n      // Check for existing metadata record\n      const existingMetadata = await client.query(`\n        SELECT * FROM portfolio_metadata WHERE user_id = $1\n      `, [userId]);\n\n      if (existingMetadata.rows.length > 0) {\n        // Update existing record\n        await client.query(`\n          UPDATE portfolio_metadata \n          SET total_equity = $2, buying_power = $3, cash = $4,\n              account_status = $5, last_sync = NOW(), \n              last_sync_id = $6, updated_at = NOW()\n          WHERE user_id = $1\n        `, [\n          userId,\n          accountData.equity,\n          accountData.buyingPower,\n          accountData.cash,\n          accountData.status,\n          syncId\n        ]);\n      } else {\n        // Insert new record\n        await client.query(`\n          INSERT INTO portfolio_metadata (\n            user_id, total_equity, buying_power, cash, \n            account_status, account_type, last_sync, \n            last_sync_id, created_at, updated_at\n          ) VALUES ($1, $2, $3, $4, $5, $6, NOW(), $7, NOW(), NOW())\n        `, [\n          userId,\n          accountData.equity,\n          accountData.buyingPower,\n          accountData.cash,\n          accountData.status,\n          accountData.environment || 'paper',\n          syncId\n        ]);\n      }\n\n      return { conflictsResolved: 0 };\n    });\n  }\n\n  /**\n   * Update sync stage\n   */\n  updateSyncStage(userId, stage) {\n    const currentStatus = this.syncStatus.get(userId);\n    if (currentStatus) {\n      currentStatus.stage = stage;\n      this.syncStatus.set(userId, currentStatus);\n    }\n  }\n\n  /**\n   * Check if stage is critical\n   */\n  isCriticalStage(stage) {\n    const criticalStages = ['account_sync', 'positions_sync'];\n    return criticalStages.includes(stage);\n  }\n\n  /**\n   * Update sync metrics\n   */\n  updateSyncMetrics(success, duration, result = null) {\n    this.syncMetrics.totalSyncs++;\n    \n    if (success) {\n      this.syncMetrics.successfulSyncs++;\n      if (result && result.summary) {\n        this.syncMetrics.recordsProcessed += result.summary.totalRecordsProcessed || 0;\n        this.syncMetrics.conflictsResolved += result.summary.totalConflictsResolved || 0;\n      }\n    } else {\n      this.syncMetrics.failedSyncs++;\n    }\n\n    // Update average duration\n    if (this.syncMetrics.avgSyncDuration === 0) {\n      this.syncMetrics.avgSyncDuration = duration;\n    } else {\n      this.syncMetrics.avgSyncDuration = \n        (this.syncMetrics.avgSyncDuration + duration) / 2;\n    }\n  }\n\n  /**\n   * Get sync status for user\n   */\n  getSyncStatus(userId) {\n    return this.syncStatus.get(userId) || null;\n  }\n\n  /**\n   * Get service metrics\n   */\n  getMetrics() {\n    const successRate = this.syncMetrics.totalSyncs > 0 \n      ? (this.syncMetrics.successfulSyncs / this.syncMetrics.totalSyncs) * 100 \n      : 0;\n\n    return {\n      ...this.syncMetrics,\n      successRate: successRate.toFixed(2),\n      avgSyncDurationFormatted: `${this.syncMetrics.avgSyncDuration}ms`,\n      activeSyncs: Array.from(this.syncStatus.values()).filter(\n        status => status.status === 'in_progress'\n      ).length\n    };\n  }\n}\n\nmodule.exports = { PortfolioSyncService };"],"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","ignoreList":[]}