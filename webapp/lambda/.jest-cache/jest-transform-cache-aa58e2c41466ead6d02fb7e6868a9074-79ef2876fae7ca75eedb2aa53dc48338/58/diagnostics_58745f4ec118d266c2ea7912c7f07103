b59134407134f42a56e97b640c4d9cfc
/* istanbul ignore next */
function cov_23c13hl0eo() {
  var path = "/home/stocks/algo/webapp/lambda/routes/diagnostics.js";
  var hash = "5d998dbb5ade034df53c85b0e83751573d22c625";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/diagnostics.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 64
        }
      },
      "2": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 67
        }
      },
      "3": {
        start: {
          line: 9,
          column: 33
        },
        end: {
          line: 9,
          column: 77
        }
      },
      "4": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 63
        }
      },
      "5": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "6": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 113,
          column: 3
        }
      },
      "7": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "8": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 64
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 79
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 79
        }
      },
      "13": {
        start: {
          line: 34,
          column: 37
        },
        end: {
          line: 34,
          column: 82
        }
      },
      "14": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 57
        }
      },
      "18": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 57
        }
      },
      "19": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 48,
          column: 14
        }
      },
      "20": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 14
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 75
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "23": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "25": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 65
        }
      },
      "26": {
        start: {
          line: 62,
          column: 35
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "27": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 67,
          column: 18
        }
      },
      "28": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 72,
          column: 18
        }
      },
      "29": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "30": {
        start: {
          line: 82,
          column: 28
        },
        end: {
          line: 82,
          column: 83
        }
      },
      "31": {
        start: {
          line: 82,
          column: 70
        },
        end: {
          line: 82,
          column: 82
        }
      },
      "32": {
        start: {
          line: 83,
          column: 25
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "33": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 62
        }
      },
      "34": {
        start: {
          line: 85,
          column: 28
        },
        end: {
          line: 85,
          column: 60
        }
      },
      "35": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "36": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 36
        }
      },
      "37": {
        start: {
          line: 89,
          column: 15
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "38": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 40
        }
      },
      "39": {
        start: {
          line: 91,
          column: 15
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "40": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 39
        }
      },
      "41": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 38
        }
      },
      "42": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 49
        }
      },
      "43": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 109
        }
      },
      "44": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 34
        }
      },
      "45": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 104,
          column: 47
        }
      },
      "46": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 101
        }
      },
      "47": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 111,
          column: 12
        }
      },
      "48": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "49": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 120,
          column: 64
        }
      },
      "50": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 122,
          column: 82
        }
      },
      "51": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "52": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 68
        }
      },
      "53": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 107
        }
      },
      "54": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 133,
          column: 12
        }
      },
      "55": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 90
        }
      },
      "56": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 94
        }
      },
      "57": {
        start: {
          line: 145,
          column: 0
        },
        end: {
          line: 172,
          column: 3
        }
      },
      "58": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 64
        }
      },
      "59": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 87
        }
      },
      "60": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 171,
          column: 5
        }
      },
      "61": {
        start: {
          line: 151,
          column: 23
        },
        end: {
          line: 151,
          column: 75
        }
      },
      "62": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 110
        }
      },
      "63": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "64": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 160,
          column: 16
        }
      },
      "65": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 165,
          column: 16
        }
      },
      "66": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 82
        }
      },
      "67": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 85
        }
      },
      "68": {
        start: {
          line: 178,
          column: 0
        },
        end: {
          line: 205,
          column: 3
        }
      },
      "69": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 179,
          column: 64
        }
      },
      "70": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 81
        }
      },
      "71": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 204,
          column: 5
        }
      },
      "72": {
        start: {
          line: 184,
          column: 23
        },
        end: {
          line: 184,
          column: 76
        }
      },
      "73": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 116
        }
      },
      "74": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "75": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 193,
          column: 16
        }
      },
      "76": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 198,
          column: 16
        }
      },
      "77": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 87
        }
      },
      "78": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 90
        }
      },
      "79": {
        start: {
          line: 211,
          column: 0
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "80": {
        start: {
          line: 212,
          column: 25
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "81": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 214,
          column: 80
        }
      },
      "82": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "83": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 51
        }
      },
      "84": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "85": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 223,
          column: 16
        }
      },
      "86": {
        start: {
          line: 226,
          column: 27
        },
        end: {
          line: 226,
          column: 57
        }
      },
      "87": {
        start: {
          line: 227,
          column: 23
        },
        end: {
          line: 227,
          column: 65
        }
      },
      "88": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 117
        }
      },
      "89": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "90": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "91": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 245,
          column: 16
        }
      },
      "92": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 59
        }
      },
      "93": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 89
        }
      },
      "94": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 92
        }
      },
      "95": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 279,
          column: 3
        }
      },
      "96": {
        start: {
          line: 258,
          column: 21
        },
        end: {
          line: 276,
          column: 3
        }
      },
      "97": {
        start: {
          line: 278,
          column: 2
        },
        end: {
          line: 278,
          column: 32
        }
      },
      "98": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 311,
          column: 3
        }
      },
      "99": {
        start: {
          line: 286,
          column: 25
        },
        end: {
          line: 286,
          column: 64
        }
      },
      "100": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 288,
          column: 79
        }
      },
      "101": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 310,
          column: 5
        }
      },
      "102": {
        start: {
          line: 291,
          column: 28
        },
        end: {
          line: 291,
          column: 51
        }
      },
      "103": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 39
        }
      },
      "104": {
        start: {
          line: 294,
          column: 23
        },
        end: {
          line: 294,
          column: 63
        }
      },
      "105": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 114
        }
      },
      "106": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "107": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 16
        }
      },
      "108": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 76
        }
      },
      "109": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 81
        }
      },
      "110": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 84
        }
      },
      "111": {
        start: {
          line: 317,
          column: 0
        },
        end: {
          line: 414,
          column: 3
        }
      },
      "112": {
        start: {
          line: 318,
          column: 25
        },
        end: {
          line: 318,
          column: 64
        }
      },
      "113": {
        start: {
          line: 320,
          column: 4
        },
        end: {
          line: 320,
          column: 84
        }
      },
      "114": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 413,
          column: 5
        }
      },
      "115": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "116": {
        start: {
          line: 333,
          column: 26
        },
        end: {
          line: 333,
          column: 51
        }
      },
      "117": {
        start: {
          line: 334,
          column: 23
        },
        end: {
          line: 334,
          column: 27
        }
      },
      "118": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "119": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "120": {
        start: {
          line: 338,
          column: 35
        },
        end: {
          line: 338,
          column: 65
        }
      },
      "121": {
        start: {
          line: 339,
          column: 31
        },
        end: {
          line: 339,
          column: 73
        }
      },
      "122": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 348,
          column: 17
        }
      },
      "123": {
        start: {
          line: 341,
          column: 20
        },
        end: {
          line: 347,
          column: 22
        }
      },
      "124": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 50
        }
      },
      "125": {
        start: {
          line: 355,
          column: 30
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "126": {
        start: {
          line: 380,
          column: 27
        },
        end: {
          line: 387,
          column: 9
        }
      },
      "127": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "128": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 120
        }
      },
      "129": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "130": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 109
        }
      },
      "131": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "132": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 95
        }
      },
      "133": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "134": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 95
        }
      },
      "135": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 76
        }
      },
      "136": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 38
        }
      },
      "137": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 90
        }
      },
      "138": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 93
        }
      },
      "139": {
        start: {
          line: 417,
          column: 0
        },
        end: {
          line: 428,
          column: 3
        }
      },
      "140": {
        start: {
          line: 419,
          column: 22
        },
        end: {
          line: 425,
          column: 3
        }
      },
      "141": {
        start: {
          line: 427,
          column: 2
        },
        end: {
          line: 427,
          column: 33
        }
      },
      "142": {
        start: {
          line: 430,
          column: 0
        },
        end: {
          line: 430,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 23
          }
        },
        loc: {
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 82,
            column: 61
          },
          end: {
            line: 82,
            column: 62
          }
        },
        loc: {
          start: {
            line: 82,
            column: 70
          },
          end: {
            line: 82,
            column: 82
          }
        },
        line: 82
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 119,
            column: 39
          },
          end: {
            line: 119,
            column: 40
          }
        },
        loc: {
          start: {
            line: 119,
            column: 59
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 119
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 145,
            column: 30
          },
          end: {
            line: 145,
            column: 31
          }
        },
        loc: {
          start: {
            line: 145,
            column: 50
          },
          end: {
            line: 172,
            column: 1
          }
        },
        line: 145
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 178,
            column: 35
          },
          end: {
            line: 178,
            column: 36
          }
        },
        loc: {
          start: {
            line: 178,
            column: 55
          },
          end: {
            line: 205,
            column: 1
          }
        },
        line: 178
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 211,
            column: 31
          },
          end: {
            line: 211,
            column: 32
          }
        },
        loc: {
          start: {
            line: 211,
            column: 51
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 211
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 257,
            column: 22
          },
          end: {
            line: 257,
            column: 23
          }
        },
        loc: {
          start: {
            line: 257,
            column: 36
          },
          end: {
            line: 279,
            column: 1
          }
        },
        line: 257
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 285,
            column: 29
          },
          end: {
            line: 285,
            column: 30
          }
        },
        loc: {
          start: {
            line: 285,
            column: 49
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 285
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 317,
            column: 37
          },
          end: {
            line: 317,
            column: 38
          }
        },
        loc: {
          start: {
            line: 317,
            column: 57
          },
          end: {
            line: 414,
            column: 1
          }
        },
        line: 317
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 417,
            column: 22
          },
          end: {
            line: 417,
            column: 23
          }
        },
        loc: {
          start: {
            line: 417,
            column: 36
          },
          end: {
            line: 428,
            column: 1
          }
        },
        line: 417
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 54
          },
          end: {
            line: 36,
            column: 63
          }
        }, {
          start: {
            line: 36,
            column: 66
          },
          end: {
            line: 36,
            column: 76
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 56
          },
          end: {
            line: 46,
            column: 65
          }
        }, {
          start: {
            line: 46,
            column: 68
          },
          end: {
            line: 46,
            column: 79
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: 68,
            column: 19
          },
          end: {
            line: 73,
            column: 13
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 28
          },
          end: {
            line: 64,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 49
          },
          end: {
            line: 64,
            column: 58
          }
        }, {
          start: {
            line: 64,
            column: 61
          },
          end: {
            line: 64,
            column: 72
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: 89,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 89,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        }],
        line: 89
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: 93,
            column: 15
          },
          end: {
            line: 95,
            column: 9
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 153,
            column: 69
          },
          end: {
            line: 153,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 153,
            column: 86
          },
          end: {
            line: 153,
            column: 95
          }
        }, {
          start: {
            line: 153,
            column: 98
          },
          end: {
            line: 153,
            column: 106
          }
        }],
        line: 153
      },
      "8": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: 161,
            column: 15
          },
          end: {
            line: 166,
            column: 9
          }
        }],
        line: 155
      },
      "9": {
        loc: {
          start: {
            line: 186,
            column: 74
          },
          end: {
            line: 186,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 91
          },
          end: {
            line: 186,
            column: 100
          }
        }, {
          start: {
            line: 186,
            column: 103
          },
          end: {
            line: 186,
            column: 112
          }
        }],
        line: 186
      },
      "10": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: 194,
            column: 15
          },
          end: {
            line: 199,
            column: 9
          }
        }],
        line: 188
      },
      "11": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "12": {
        loc: {
          start: {
            line: 229,
            column: 76
          },
          end: {
            line: 229,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 93
          },
          end: {
            line: 229,
            column: 102
          }
        }, {
          start: {
            line: 229,
            column: 105
          },
          end: {
            line: 229,
            column: 113
          }
        }],
        line: 229
      },
      "13": {
        loc: {
          start: {
            line: 237,
            column: 24
          },
          end: {
            line: 237,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 40
          },
          end: {
            line: 237,
            column: 66
          }
        }, {
          start: {
            line: 237,
            column: 69
          },
          end: {
            line: 237,
            column: 71
          }
        }],
        line: 237
      },
      "14": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: 246,
            column: 15
          },
          end: {
            line: 248,
            column: 9
          }
        }],
        line: 241
      },
      "15": {
        loc: {
          start: {
            line: 263,
            column: 17
          },
          end: {
            line: 263,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 17
          },
          end: {
            line: 263,
            column: 37
          }
        }, {
          start: {
            line: 263,
            column: 41
          },
          end: {
            line: 263,
            column: 54
          }
        }],
        line: 263
      },
      "16": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 56
          }
        }, {
          start: {
            line: 265,
            column: 60
          },
          end: {
            line: 265,
            column: 67
          }
        }],
        line: 265
      },
      "17": {
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 62
          }
        }, {
          start: {
            line: 266,
            column: 66
          },
          end: {
            line: 266,
            column: 73
          }
        }],
        line: 266
      },
      "18": {
        loc: {
          start: {
            line: 267,
            column: 18
          },
          end: {
            line: 267,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 18
          },
          end: {
            line: 267,
            column: 61
          }
        }, {
          start: {
            line: 267,
            column: 65
          },
          end: {
            line: 267,
            column: 74
          }
        }],
        line: 267
      },
      "19": {
        loc: {
          start: {
            line: 268,
            column: 14
          },
          end: {
            line: 268,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 14
          },
          end: {
            line: 268,
            column: 36
          }
        }, {
          start: {
            line: 268,
            column: 40
          },
          end: {
            line: 268,
            column: 49
          }
        }],
        line: 268
      },
      "20": {
        loc: {
          start: {
            line: 273,
            column: 17
          },
          end: {
            line: 273,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 17
          },
          end: {
            line: 273,
            column: 40
          }
        }, {
          start: {
            line: 273,
            column: 44
          },
          end: {
            line: 273,
            column: 53
          }
        }],
        line: 273
      },
      "21": {
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 274,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 274,
            column: 54
          }
        }, {
          start: {
            line: 274,
            column: 58
          },
          end: {
            line: 274,
            column: 67
          }
        }],
        line: 274
      },
      "22": {
        loc: {
          start: {
            line: 296,
            column: 68
          },
          end: {
            line: 296,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 68
          },
          end: {
            line: 296,
            column: 97
          }
        }, {
          start: {
            line: 296,
            column: 101
          },
          end: {
            line: 296,
            column: 110
          }
        }],
        line: 296
      },
      "23": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: 303,
            column: 15
          },
          end: {
            line: 305,
            column: 9
          }
        }],
        line: 298
      },
      "24": {
        loc: {
          start: {
            line: 326,
            column: 20
          },
          end: {
            line: 326,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 20
          },
          end: {
            line: 326,
            column: 42
          }
        }, {
          start: {
            line: 326,
            column: 46
          },
          end: {
            line: 326,
            column: 75
          }
        }, {
          start: {
            line: 326,
            column: 79
          },
          end: {
            line: 326,
            column: 88
          }
        }],
        line: 326
      },
      "25": {
        loc: {
          start: {
            line: 327,
            column: 26
          },
          end: {
            line: 327,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 26
          },
          end: {
            line: 327,
            column: 62
          }
        }, {
          start: {
            line: 327,
            column: 66
          },
          end: {
            line: 327,
            column: 73
          }
        }],
        line: 327
      },
      "26": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "27": {
        loc: {
          start: {
            line: 340,
            column: 16
          },
          end: {
            line: 348,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 16
          },
          end: {
            line: 348,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "28": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "29": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "30": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 400,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "31": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d998dbb5ade034df53c85b0e83751573d22c625"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23c13hl0eo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23c13hl0eo();
/**
 * Database and System Diagnostics Routes
 * Comprehensive testing and recovery endpoints
 */

const express =
/* istanbul ignore next */
(cov_23c13hl0eo().s[0]++, require('express'));
const {
  success,
  error
} =
/* istanbul ignore next */
(cov_23c13hl0eo().s[1]++, require('../utils/responseFormatter'));
const circuitBreakerReset =
/* istanbul ignore next */
(cov_23c13hl0eo().s[2]++, require('../utils/circuitBreakerReset'));
const SecretsManagerDiagnostic =
/* istanbul ignore next */
(cov_23c13hl0eo().s[3]++, require('../utils/secretsManagerDiagnostic'));
const NetworkDiagnostic =
/* istanbul ignore next */
(cov_23c13hl0eo().s[4]++, require('../utils/networkDiagnostic'));
const router =
/* istanbul ignore next */
(cov_23c13hl0eo().s[5]++, express.Router());

/**
 * GET /api/diagnostics/health
 * Comprehensive system health check with circuit breaker status
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[6]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[0]++;
  const startTime =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[7]++, Date.now());
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[8]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[9]++;
  console.log(`🏥 [${diagnosticId}] Starting comprehensive health check...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[10]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[11]++, {
      status: 'checking',
      timestamp: new Date().toISOString(),
      diagnosticId,
      checks: {}
    });

    // Circuit breaker health
    /* istanbul ignore next */
    cov_23c13hl0eo().s[12]++;
    console.log(`🏥 [${diagnosticId}] Checking circuit breaker health...`);
    const circuitBreakerHealth =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[13]++, circuitBreakerReset.getCircuitBreakerStatus());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[14]++;
    health.checks.circuitBreakers = {
      status: circuitBreakerHealth.open === 0 ?
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[0][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[0][1]++, 'degraded'),
      ...circuitBreakerHealth
    };

    // Database connectivity
    /* istanbul ignore next */
    cov_23c13hl0eo().s[15]++;
    console.log(`🏥 [${diagnosticId}] Testing database connectivity...`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[16]++;
    try {
      const database =
      /* istanbul ignore next */
      (cov_23c13hl0eo().s[17]++, require('../utils/database'));
      const dbHealth =
      /* istanbul ignore next */
      (cov_23c13hl0eo().s[18]++, await database.healthCheck());
      /* istanbul ignore next */
      cov_23c13hl0eo().s[19]++;
      health.checks.database = {
        status: dbHealth.status === 'healthy' ?
        /* istanbul ignore next */
        (cov_23c13hl0eo().b[1][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_23c13hl0eo().b[1][1]++, 'unhealthy'),
        ...dbHealth
      };
    } catch (dbError) {
      /* istanbul ignore next */
      cov_23c13hl0eo().s[20]++;
      health.checks.database = {
        status: 'error',
        error: dbError.message
      };
    }

    // AWS Secrets Manager
    /* istanbul ignore next */
    cov_23c13hl0eo().s[21]++;
    console.log(`🏥 [${diagnosticId}] Testing AWS Secrets Manager...`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[22]++;
    try {
      const secretArn =
      /* istanbul ignore next */
      (cov_23c13hl0eo().s[23]++, process.env.DB_SECRET_ARN);
      /* istanbul ignore next */
      cov_23c13hl0eo().s[24]++;
      if (secretArn) {
        /* istanbul ignore next */
        cov_23c13hl0eo().b[2][0]++;
        const diagnostic =
        /* istanbul ignore next */
        (cov_23c13hl0eo().s[25]++, new SecretsManagerDiagnostic());
        const secretTest =
        /* istanbul ignore next */
        (cov_23c13hl0eo().s[26]++, await diagnostic.diagnoseSecret(secretArn));
        /* istanbul ignore next */
        cov_23c13hl0eo().s[27]++;
        health.checks.secretsManager = {
          status: secretTest.success ?
          /* istanbul ignore next */
          (cov_23c13hl0eo().b[3][0]++, 'healthy') :
          /* istanbul ignore next */
          (cov_23c13hl0eo().b[3][1]++, 'unhealthy'),
          method: secretTest.method,
          hasConfig: !!secretTest.config
        };
      } else {
        /* istanbul ignore next */
        cov_23c13hl0eo().b[2][1]++;
        cov_23c13hl0eo().s[28]++;
        health.checks.secretsManager = {
          status: 'error',
          error: 'DB_SECRET_ARN not configured'
        };
      }
    } catch (secretError) {
      /* istanbul ignore next */
      cov_23c13hl0eo().s[29]++;
      health.checks.secretsManager = {
        status: 'error',
        error: secretError.message
      };
    }

    // Overall status
    const allStatuses =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[30]++, Object.values(health.checks).map(check => {
      /* istanbul ignore next */
      cov_23c13hl0eo().f[1]++;
      cov_23c13hl0eo().s[31]++;
      return check.status;
    }));
    const hasError =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[32]++, allStatuses.includes('error'));
    const hasUnhealthy =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[33]++, allStatuses.includes('unhealthy'));
    const hasDegraded =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[34]++, allStatuses.includes('degraded'));
    /* istanbul ignore next */
    cov_23c13hl0eo().s[35]++;
    if (hasError) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[4][0]++;
      cov_23c13hl0eo().s[36]++;
      health.status = 'error';
    } else {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[4][1]++;
      cov_23c13hl0eo().s[37]++;
      if (hasUnhealthy) {
        /* istanbul ignore next */
        cov_23c13hl0eo().b[5][0]++;
        cov_23c13hl0eo().s[38]++;
        health.status = 'unhealthy';
      } else {
        /* istanbul ignore next */
        cov_23c13hl0eo().b[5][1]++;
        cov_23c13hl0eo().s[39]++;
        if (hasDegraded) {
          /* istanbul ignore next */
          cov_23c13hl0eo().b[6][0]++;
          cov_23c13hl0eo().s[40]++;
          health.status = 'degraded';
        } else {
          /* istanbul ignore next */
          cov_23c13hl0eo().b[6][1]++;
          cov_23c13hl0eo().s[41]++;
          health.status = 'healthy';
        }
      }
    }
    /* istanbul ignore next */
    cov_23c13hl0eo().s[42]++;
    health.duration = Date.now() - startTime;
    /* istanbul ignore next */
    cov_23c13hl0eo().s[43]++;
    console.log(`🏥 [${diagnosticId}] Health check completed in ${health.duration}ms: ${health.status}`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[44]++;
    res.json(success(health));
  } catch (error) {
    const duration =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[45]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[46]++;
    console.error(`❌ [${diagnosticId}] Health check failed after ${duration}ms:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[47]++;
    res.json(error(error.message, {
      diagnosticId,
      duration,
      error: 'Health check failed'
    }));
  }
});

/**
 * POST /api/diagnostics/reset-circuit-breakers
 * Reset all circuit breakers to allow immediate retry
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[48]++;
router.post('/reset-circuit-breakers', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[2]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[49]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[50]++;
  console.log(`🔄 [${diagnosticId}] Manual circuit breaker reset requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[51]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[52]++, circuitBreakerReset.resetAllCircuitBreakers());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[53]++;
    console.log(`✅ [${diagnosticId}] Circuit breaker reset completed: ${result.reset} breakers reset`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[54]++;
    res.json(success({
      ...result,
      diagnosticId,
      message: `Successfully reset ${result.reset} circuit breakers`
    }));
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[55]++;
    console.error(`❌ [${diagnosticId}] Circuit breaker reset failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[56]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'reset-circuit-breakers'
    }));
  }
});

/**
 * POST /api/diagnostics/test-database
 * Test database connectivity with circuit breaker management
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[57]++;
router.post('/test-database', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[3]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[58]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[59]++;
  console.log(`🧪 [${diagnosticId}] Manual database connectivity test requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[60]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[61]++, await circuitBreakerReset.testDatabaseConnectivity());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[62]++;
    console.log(`🧪 [${diagnosticId}] Database test completed: ${result.success ?
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[7][0]++, 'SUCCESS') :
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[7][1]++, 'FAILED')}`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[63]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[8][0]++;
      cov_23c13hl0eo().s[64]++;
      res.json(success({
        ...result,
        diagnosticId,
        message: 'Database connectivity test passed'
      }));
    } else {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[8][1]++;
      cov_23c13hl0eo().s[65]++;
      res.json(error(result.message, {
        ...result,
        diagnosticId
      }));
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[66]++;
    console.error(`❌ [${diagnosticId}] Database test failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[67]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'test-database'
    }));
  }
});

/**
 * POST /api/diagnostics/emergency-recovery
 * Emergency database recovery procedure
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[68]++;
router.post('/emergency-recovery', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[4]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[69]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[70]++;
  console.log(`🚨 [${diagnosticId}] Emergency database recovery requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[71]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[72]++, await circuitBreakerReset.emergencyDatabaseRecovery());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[73]++;
    console.log(`🚨 [${diagnosticId}] Emergency recovery completed: ${result.success ?
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[9][0]++, 'SUCCESS') :
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[9][1]++, 'PARTIAL')}`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[74]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[10][0]++;
      cov_23c13hl0eo().s[75]++;
      res.json(success({
        ...result,
        diagnosticId,
        message: 'Emergency database recovery completed successfully'
      }));
    } else {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[10][1]++;
      cov_23c13hl0eo().s[76]++;
      res.json(error('Emergency recovery completed with errors', {
        ...result,
        diagnosticId
      }));
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[77]++;
    console.error(`❌ [${diagnosticId}] Emergency recovery failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[78]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'emergency-recovery'
    }));
  }
});

/**
 * GET /api/diagnostics/secrets-manager
 * Test AWS Secrets Manager configuration
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[79]++;
router.get('/secrets-manager', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[5]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[80]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[81]++;
  console.log(`🔑 [${diagnosticId}] Secrets Manager diagnostic requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[82]++;
  try {
    const secretArn =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[83]++, process.env.DB_SECRET_ARN);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[84]++;
    if (!secretArn) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[11][0]++;
      cov_23c13hl0eo().s[85]++;
      return res.json(error('DB_SECRET_ARN environment variable not set', {
        diagnosticId,
        operation: 'secrets-manager-test'
      }));
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[11][1]++;
    }
    const diagnostic =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[86]++, new SecretsManagerDiagnostic());
    const result =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[87]++, await diagnostic.diagnoseSecret(secretArn));
    /* istanbul ignore next */
    cov_23c13hl0eo().s[88]++;
    console.log(`🔑 [${diagnosticId}] Secrets Manager test completed: ${result.success ?
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[12][0]++, 'SUCCESS') :
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[12][1]++, 'FAILED')}`);

    // Sanitize response - don't expose actual secrets
    const sanitizedResult =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[89]++, {
      success: result.success,
      method: result.method,
      diagnosticId: result.diagnosticId,
      hasConfig: !!result.config,
      configKeys: result.config ?
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[13][0]++, Object.keys(result.config)) :
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[13][1]++, []),
      error: result.error
    });
    /* istanbul ignore next */
    cov_23c13hl0eo().s[90]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[14][0]++;
      cov_23c13hl0eo().s[91]++;
      res.json(success({
        ...sanitizedResult,
        message: `Secrets Manager test passed using method: ${result.method}`
      }));
    } else {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[14][1]++;
      cov_23c13hl0eo().s[92]++;
      res.json(error(result.error, sanitizedResult));
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[93]++;
    console.error(`❌ [${diagnosticId}] Secrets Manager test failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[94]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'secrets-manager-test'
    }));
  }
});

// System diagnostics endpoint
/* istanbul ignore next */
cov_23c13hl0eo().s[95]++;
router.get('/system', (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[6]++;
  const systemInfo =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[96]++, {
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    platform: process.platform,
    nodeVersion: process.version,
    environment:
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[15][0]++, process.env.NODE_ENV) ||
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[15][1]++, 'development'),
    lambda: {
      functionName:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[16][0]++, process.env.AWS_LAMBDA_FUNCTION_NAME) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[16][1]++, 'local'),
      functionVersion:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[17][0]++, process.env.AWS_LAMBDA_FUNCTION_VERSION) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[17][1]++, 'local'),
      memorySize:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[18][0]++, process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[18][1]++, 'unknown'),
      region:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[19][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[19][1]++, 'unknown')
    },
    configuration: {
      hasDbSecretArn: !!process.env.DB_SECRET_ARN,
      hasApiKeySecret: !!process.env.API_KEY_ENCRYPTION_SECRET_ARN,
      dbPoolMax:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[20][0]++, process.env.DB_POOL_MAX) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[20][1]++, 'default'),
      dbConnectTimeout:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[21][0]++, process.env.DB_CONNECT_TIMEOUT) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[21][1]++, 'default')
    }
  });
  /* istanbul ignore next */
  cov_23c13hl0eo().s[97]++;
  res.json(success(systemInfo));
});

/**
 * POST /api/diagnostics/network-test
 * Comprehensive network connectivity testing
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[98]++;
router.post('/network-test', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[7]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[99]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[100]++;
  console.log(`🌐 [${diagnosticId}] Network connectivity test requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[101]++;
  try {
    const networkDiag =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[102]++, new NetworkDiagnostic());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[103]++;
    await networkDiag.initialize();
    const result =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[104]++, await networkDiag.runComprehensiveTest());
    /* istanbul ignore next */
    cov_23c13hl0eo().s[105]++;
    console.log(`🌐 [${diagnosticId}] Network test completed: ${
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[22][0]++, result.summary?.overallStatus) ||
    /* istanbul ignore next */
    (cov_23c13hl0eo().b[22][1]++, 'unknown')}`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[106]++;
    if (result.summary?.overallStatus === 'healthy') {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[23][0]++;
      cov_23c13hl0eo().s[107]++;
      res.json(success({
        ...result,
        message: 'Network connectivity test passed'
      }));
    } else {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[23][1]++;
      cov_23c13hl0eo().s[108]++;
      res.json(error('Network connectivity issues detected', result));
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[109]++;
    console.error(`❌ [${diagnosticId}] Network test failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[110]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'network-test'
    }));
  }
});

/**
 * GET /api/diagnostics/connection-comparison
 * Compare working vs failing ECS task configurations
 */
/* istanbul ignore next */
cov_23c13hl0eo().s[111]++;
router.get('/connection-comparison', async (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[8]++;
  const diagnosticId =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[112]++, Math.random().toString(36).substr(2, 9));
  /* istanbul ignore next */
  cov_23c13hl0eo().s[113]++;
  console.log(`⚖️ [${diagnosticId}] Connection comparison analysis requested...`);
  /* istanbul ignore next */
  cov_23c13hl0eo().s[114]++;
  try {
    // Get current environment information
    const environment =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[115]++, {
      isLambda: !!process.env.AWS_LAMBDA_FUNCTION_NAME,
      region:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[24][0]++, process.env.AWS_REGION) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[24][1]++, process.env.WEBAPP_AWS_REGION) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[24][2]++, 'unknown'),
      functionName:
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[25][0]++, process.env.AWS_LAMBDA_FUNCTION_NAME) ||
      /* istanbul ignore next */
      (cov_23c13hl0eo().b[25][1]++, 'local'),
      platform: process.platform,
      nodeVersion: process.version
    });

    // Get database configuration for comparison
    const secretArn =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[116]++, process.env.DB_SECRET_ARN);
    let dbConfig =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[117]++, null);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[118]++;
    if (secretArn) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[26][0]++;
      cov_23c13hl0eo().s[119]++;
      try {
        const diagnostic =
        /* istanbul ignore next */
        (cov_23c13hl0eo().s[120]++, new SecretsManagerDiagnostic());
        const result =
        /* istanbul ignore next */
        (cov_23c13hl0eo().s[121]++, await diagnostic.diagnoseSecret(secretArn));
        /* istanbul ignore next */
        cov_23c13hl0eo().s[122]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_23c13hl0eo().b[27][0]++;
          cov_23c13hl0eo().s[123]++;
          dbConfig = {
            host: result.config.host,
            port: result.config.port,
            database: result.config.dbname,
            hasPassword: !!result.config.password,
            hasUsername: !!result.config.username
          };
        } else
        /* istanbul ignore next */
        {
          cov_23c13hl0eo().b[27][1]++;
        }
      } catch (err) {
        /* istanbul ignore next */
        cov_23c13hl0eo().s[124]++;
        dbConfig = {
          error: err.message
        };
      }
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[26][1]++;
    }

    // Working configuration template (from successful ECS tasks)
    const workingConfig =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[125]++, {
      connectionString: {
        sslmode: 'require',
        ssl: false,
        // Note: This might seem contradictory but matches working config
        connectionTimeout: '15000ms',
        queryTimeout: '30000ms'
      },
      poolSettings: {
        max: 3,
        min: 1,
        idleTimeoutMillis: 30000,
        acquireTimeoutMillis: 8000
      },
      networkRequirements: {
        securityGroups: 'Allow PostgreSQL 5432 outbound',
        subnets: 'Private subnets with NAT gateway access',
        dns: 'VPC DNS resolution enabled'
      },
      environment: {
        DB_SECRET_ARN: 'Required - points to RDS credentials',
        AWS_REGION: 'Required - for Secrets Manager access',
        NODE_ENV: 'production'
      }
    });
    const comparison =
    /* istanbul ignore next */
    (cov_23c13hl0eo().s[126]++, {
      diagnosticId,
      timestamp: new Date().toISOString(),
      currentEnvironment: environment,
      currentDbConfig: dbConfig,
      workingConfigTemplate: workingConfig,
      recommendations: []
    });

    // Generate recommendations based on comparison
    /* istanbul ignore next */
    cov_23c13hl0eo().s[127]++;
    if (environment.isLambda) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[28][0]++;
      cov_23c13hl0eo().s[128]++;
      comparison.recommendations.push('Lambda environment detected - ensure VPC configuration allows RDS access');
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[28][1]++;
    }
    cov_23c13hl0eo().s[129]++;
    if (!secretArn) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[29][0]++;
      cov_23c13hl0eo().s[130]++;
      comparison.recommendations.push('DB_SECRET_ARN not configured - database connections will fail');
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[29][1]++;
    }
    cov_23c13hl0eo().s[131]++;
    if (dbConfig?.error) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[30][0]++;
      cov_23c13hl0eo().s[132]++;
      comparison.recommendations.push(`Database configuration error: ${dbConfig.error}`);
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[30][1]++;
    }
    cov_23c13hl0eo().s[133]++;
    if (comparison.recommendations.length === 0) {
      /* istanbul ignore next */
      cov_23c13hl0eo().b[31][0]++;
      cov_23c13hl0eo().s[134]++;
      comparison.recommendations.push('Configuration appears to match working template');
    } else
    /* istanbul ignore next */
    {
      cov_23c13hl0eo().b[31][1]++;
    }
    cov_23c13hl0eo().s[135]++;
    console.log(`⚖️ [${diagnosticId}] Connection comparison completed`);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[136]++;
    res.json(success(comparison));
  } catch (error) {
    /* istanbul ignore next */
    cov_23c13hl0eo().s[137]++;
    console.error(`❌ [${diagnosticId}] Connection comparison failed:`, error.message);
    /* istanbul ignore next */
    cov_23c13hl0eo().s[138]++;
    res.json(error(error.message, {
      diagnosticId,
      operation: 'connection-comparison'
    }));
  }
});

// Route diagnostics endpoint
/* istanbul ignore next */
cov_23c13hl0eo().s[139]++;
router.get('/routes', (req, res) => {
  /* istanbul ignore next */
  cov_23c13hl0eo().f[9]++;
  // This would be populated with actual route health data
  const routeHealth =
  /* istanbul ignore next */
  (cov_23c13hl0eo().s[140]++, {
    total: 26,
    healthy: 15,
    unhealthy: 11,
    status: 'partial',
    lastCheck: new Date().toISOString()
  });
  /* istanbul ignore next */
  cov_23c13hl0eo().s[141]++;
  res.json(success(routeHealth));
});
/* istanbul ignore next */
cov_23c13hl0eo().s[142]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,