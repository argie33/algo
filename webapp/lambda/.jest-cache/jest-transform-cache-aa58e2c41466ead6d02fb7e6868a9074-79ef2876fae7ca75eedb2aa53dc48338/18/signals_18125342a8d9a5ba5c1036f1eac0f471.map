{"version":3,"names":["cov_1tv38rcg0k","actualCoverage","express","s","require","query","safeQuery","tablesExist","authenticateToken","createValidationMiddleware","sanitizers","SignalProcessor","AdvancedSignalProcessor","AITradingSignalsEngine","AlpacaService","apiKeyService","logger","responseFormatter","router","Router","use","signalProcessor","advancedSignalProcessor","aiSignalsEngine","signalValidationSchemas","analyze","symbol","required","type","sanitizer","value","f","string","maxLength","trim","validator","test","errorMessage","timeframe","b","includes","patterns","lookback","integer","min","max","defaultValue","post","req","res","requestId","locals","startTime","Date","now","userId","user","sub","validated","info","substring","credentials","getDecryptedApiKey","response","error","status","json","alpacaService","apiKey","apiSecret","isSandbox","priceData","getHistoricalBars","length","signalAnalysis","processSignals","success","responseData","dataPoints","analysis","primary","confidence","strength","recommendation","signals","slice","indicators","trend","momentum","volatility","recommendations","metadata","processingTime","timestamp","primarySignal","patternsFound","signalsGenerated","totalTime","message","errorStack","stack","details","get","signalTypes","volume","candlestick","chart","harmonic","trend_following","mean_reversion","breakout","pattern","timeframes","strengths","riskLevels","summary","total_signals","buy_signals","sell_signals","strong_buy","strong_sell","last_updated","toISOString","console","limit","parseInt","page","offset","validTimeframes","tableName","requiredTables","optionalTables","tableStatus","log","tableCheckError","buySignalsQuery","countQuery","signalsResult","countResult","Promise","all","total","rows","totalPages","Math","ceil","Array","isArray","data","signal_type","pagination","hasNext","hasPrev","sellSignalsQuery","advancedAnalysis","generateAdvancedSignals","direction","signal","consensus","technical","find","riskAssessment","maxDrawdown","sharpeRatio","valueAtRisk","riskRewardRatio","correlationId","aiAnalysis","generateAISignals","score","technicalScore","scores","sentiment","compositeScore","breakdown","news","averageSentiment","social","analyst","averageRating","patternScore","detected","volumeScore","metrics","volatilityScore","machineLearning","ml","predictions","riskScore","positionSizing","recommendedSize","maxSize","volatilityAdjustedSize","stopLoss","takeProfit","riskMetrics","expectedShortfall","backtesting","validation","winRate","averageReturn","profitFactor","version","engine","aiSignal","backtestValidation","performanceData","overall","totalSignals","successfulSignals","lastUpdated","byTimeframe","avgReturn","bySignalType","count","monthlyPerformance","month","modelPerformance","neuralNetwork","accuracy","precision","recall","randomForest","gradientBoosting","ensemble","avgVolatility","avgMaxDrawdown","avgSharpeRatio","avgValueAtRisk","riskAdjustedReturn","symbols","body","symbolCount","analysisPromises","map","results","bulkAnalysis","totalSymbols","successfulAnalysis","filter","r","failedAnalysis","strongBuySignals","buySignals","holdSignals","sellSignals","strongSellSignals","avgConfidence","reduce","sum","avgStrength","result","index","topOpportunities","sort","a","successful","failed","module","exports"],"sources":["signals.js"],"sourcesContent":["const express = require('express');\nconst { query, safeQuery, tablesExist } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst SignalProcessor = require('../utils/signalProcessor');\nconst AdvancedSignalProcessor = require('../utils/advancedSignalProcessor');\nconst AITradingSignalsEngine = require('../utils/aiTradingSignalsEngine');\nconst AlpacaService = require('../utils/alpacaService');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst logger = require('../utils/logger');\nconst { responseFormatter } = require('../utils/responseFormatter');\n\nconst router = express.Router();\n\n// Apply authentication to all trading signals routes\nrouter.use(authenticateToken);\n\n// Initialize signal processors\nconst signalProcessor = new SignalProcessor();\nconst advancedSignalProcessor = new AdvancedSignalProcessor();\nconst aiSignalsEngine = new AITradingSignalsEngine();\n\n// Validation schemas for signal endpoints\nconst signalValidationSchemas = {\n  analyze: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    timeframe: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, trim: true }),\n      validator: (value) => !value || ['1m', '5m', '15m', '30m', '1h', '4h', '1d'].includes(value),\n      errorMessage: 'Timeframe must be one of: 1m, 5m, 15m, 30m, 1h, 4h, 1d'\n    },\n    patterns: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 50, trim: true }),\n      validator: (value) => !value || ['all', 'candlestick', 'chart', 'harmonic', 'volume'].includes(value),\n      errorMessage: 'Patterns must be one of: all, candlestick, chart, harmonic, volume'\n    },\n    lookback: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 50, max: 500, defaultValue: 100 }),\n      validator: (value) => value >= 50 && value <= 500,\n      errorMessage: 'Lookback period must be between 50 and 500'\n    }\n  }\n};\n\n// Advanced signal analysis endpoint\nrouter.post('/analyze', createValidationMiddleware(signalValidationSchemas.analyze), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbol, timeframe = '1d', patterns = 'all', lookback = 100 } = req.validated;\n    \n    logger.info(`📊 [${requestId}] Analyzing signals for symbol`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbol: symbol,\n      timeframe: timeframe,\n      patterns: patterns,\n      lookback: lookback\n    });\n\n    // Get user's API credentials\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    if (!credentials) {\n      const response = responseFormatter.error('API credentials required for signal analysis', 400);\n      return res.status(400).json(response);\n    }\n\n    // Initialize Alpaca service\n    const alpacaService = new AlpacaService(credentials.apiKey, credentials.apiSecret, credentials.isSandbox);\n\n    // Get historical price data\n    const priceData = await alpacaService.getHistoricalBars(symbol, timeframe, lookback);\n    \n    if (!priceData || priceData.length < 50) {\n      const response = responseFormatter.error('Insufficient price data for signal analysis', 400);\n      return res.status(400).json(response);\n    }\n\n    // Process signals using SignalProcessor\n    const signalAnalysis = await signalProcessor.processSignals(priceData, symbol, {\n      timeframe: timeframe,\n      patterns: patterns\n    });\n\n    if (!signalAnalysis.success) {\n      const response = responseFormatter.error('Signal processing failed', 500);\n      return res.status(500).json(response);\n    }\n\n    // Prepare response data\n    const responseData = {\n      symbol: symbol,\n      timeframe: timeframe,\n      dataPoints: priceData.length,\n      analysis: {\n        primary: signalAnalysis.analysis.primary,\n        confidence: signalAnalysis.analysis.confidence,\n        strength: signalAnalysis.analysis.strength,\n        recommendation: signalAnalysis.analysis.recommendation\n      },\n      signals: signalAnalysis.signals.slice(0, 10),\n      patterns: signalAnalysis.patterns.slice(0, 10),\n      indicators: {\n        trend: signalAnalysis.indicators.trend,\n        momentum: signalAnalysis.indicators.momentum,\n        volatility: signalAnalysis.indicators.volatility\n      },\n      recommendations: signalAnalysis.recommendations,\n      metadata: {\n        processingTime: signalAnalysis.processingTime,\n        timestamp: signalAnalysis.timestamp\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'Signal analysis completed successfully');\n    \n    logger.info(`✅ [${requestId}] Signal analysis completed`, {\n      symbol: symbol,\n      primarySignal: signalAnalysis.analysis.primary?.type,\n      confidence: signalAnalysis.analysis.confidence,\n      patternsFound: signalAnalysis.patterns.length,\n      signalsGenerated: signalAnalysis.signals.length,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] Signal analysis failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to analyze signals',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get available signal types and patterns\nrouter.get('/types', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  \n  try {\n    logger.info(`📋 [${requestId}] Fetching available signal types`);\n    \n    const signalTypes = {\n      indicators: {\n        trend: ['sma', 'ema', 'bollinger_bands', 'trend_direction'],\n        momentum: ['rsi', 'macd', 'stochastic', 'williams_r'],\n        volatility: ['atr', 'volatility_ratio', 'price_volatility'],\n        volume: ['volume_sma', 'volume_ratio', 'obv']\n      },\n      patterns: {\n        candlestick: ['doji', 'hammer', 'engulfing', 'star', 'harami'],\n        chart: ['head_shoulders', 'double_top', 'double_bottom', 'triangles', 'flags'],\n        harmonic: ['gartley', 'butterfly', 'bat', 'crab'],\n        volume: ['volume_breakout', 'volume_climax', 'volume_dry_up']\n      },\n      signals: {\n        trend_following: ['moving_average_cross', 'trend_breakout', 'trend_continuation'],\n        momentum: ['rsi_divergence', 'macd_cross', 'momentum_surge'],\n        mean_reversion: ['bollinger_squeeze', 'oversold_bounce', 'overbought_decline'],\n        breakout: ['resistance_break', 'support_break', 'volume_breakout'],\n        pattern: ['pattern_completion', 'pattern_reversal', 'pattern_continuation']\n      },\n      timeframes: ['1m', '5m', '15m', '30m', '1h', '4h', '1d'],\n      recommendations: ['buy', 'sell', 'hold'],\n      strengths: ['weak', 'moderate', 'strong'],\n      riskLevels: ['low', 'medium', 'high']\n    };\n    \n    const response = responseFormatter.success(signalTypes, 'Signal types retrieved successfully');\n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] Error retrieving signal types`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve signal types',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// Get signals summary for health checks\nrouter.get('/summary', async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      summary: {\n        total_signals: 45,\n        buy_signals: 28,\n        sell_signals: 17,\n        strong_buy: 12,\n        strong_sell: 5,\n        last_updated: new Date().toISOString()\n      },\n      status: 'operational',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching signals summary:', error);\n    res.status(500).json({ \n      success: false,\n      error: 'Failed to fetch signals summary' \n    });\n  }\n});\n\n// Get buy signals\nrouter.get('/buy', async (req, res) => {\n  try {\n    const timeframe = req.query.timeframe || 'daily';\n    const limit = parseInt(req.query.limit) || 25;\n    const page = parseInt(req.query.page) || 1;\n    const offset = (page - 1) * limit;\n\n    // Validate timeframe with safe table name mapping\n    const validTimeframes = {\n      'daily': 'buy_sell_daily',\n      'weekly': 'buy_sell_weekly', \n      'monthly': 'buy_sell_monthly'\n    };\n    \n    if (!validTimeframes[timeframe]) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = validTimeframes[timeframe];\n    \n    // Check if required tables exist before querying\n    const requiredTables = [tableName, 'symbols'];\n    const optionalTables = ['market_data', 'key_metrics'];\n    \n    try {\n      const tableStatus = await tablesExist([...requiredTables, ...optionalTables]);\n      \n      if (!tableStatus[tableName]) {\n        return res.status(404).json({\n          error: 'Data not available',\n          message: `${timeframe} signals data is not currently available`,\n          details: `Table ${tableName} not found`\n        });\n      }\n      \n      console.log(`📊 Table availability for ${timeframe} signals:`, tableStatus);\n    } catch (tableCheckError) {\n      console.error('Error checking table availability:', tableCheckError);\n      return res.status(500).json({\n        error: 'Database configuration error',\n        message: 'Unable to verify data availability'\n      });\n    }\n    \n    const buySignalsQuery = `\n      SELECT \n        bs.symbol,\n        s.short_name as company_name,\n        s.sector,\n        bs.signal,\n        bs.date,\n        md.current_price,\n        md.market_cap,\n        km.trailing_pe,\n        km.dividend_yield\n      FROM ${tableName} bs\n      LEFT JOIN symbols s ON bs.symbol = s.symbol\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Buy', 'Strong Buy', 'BUY', 'STRONG_BUY', '1', '2')\n      ORDER BY bs.symbol ASC, bs.signal DESC, bs.date DESC\n      LIMIT $1 OFFSET $2\n    `;\n\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM ${tableName} bs\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Buy', 'Strong Buy', 'BUY', 'STRONG_BUY', '1', '2')\n    `;\n\n    const [signalsResult, countResult] = await Promise.all([\n      query(buySignalsQuery, [limit, offset]),\n      query(countQuery)\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / limit);\n\n    if (!signalsResult || !Array.isArray(signalsResult.rows) || signalsResult.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: signalsResult.rows,\n      timeframe,\n      signal_type: 'buy',\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching buy signals:', error);\n    return res.status(500).json({ error: 'Database error', details: error.message });\n  }\n});\n\n// Get sell signals\nrouter.get('/sell', async (req, res) => {\n  try {\n    const timeframe = req.query.timeframe || 'daily';\n    const limit = parseInt(req.query.limit) || 25;\n    const page = parseInt(req.query.page) || 1;\n    const offset = (page - 1) * limit;\n\n    // Validate timeframe with safe table name mapping\n    const validTimeframes = {\n      'daily': 'buy_sell_daily',\n      'weekly': 'buy_sell_weekly', \n      'monthly': 'buy_sell_monthly'\n    };\n    \n    if (!validTimeframes[timeframe]) {\n      return res.status(400).json({ error: 'Invalid timeframe. Must be daily, weekly, or monthly' });\n    }\n\n    const tableName = validTimeframes[timeframe];\n    \n    const sellSignalsQuery = `\n      SELECT \n        bs.symbol,\n        s.short_name as company_name,\n        s.sector,\n        bs.signal,\n        bs.date,\n        md.current_price,\n        md.market_cap,\n        km.trailing_pe,\n        km.dividend_yield\n      FROM ${tableName} bs\n      LEFT JOIN symbols s ON bs.symbol = s.symbol\n      LEFT JOIN market_data md ON bs.symbol = md.ticker\n      LEFT JOIN key_metrics km ON bs.symbol = km.ticker\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Sell', 'Strong Sell', 'SELL', 'STRONG_SELL', '-1', '-2')\n      ORDER BY bs.symbol ASC, bs.signal ASC, bs.date DESC\n      LIMIT $1 OFFSET $2\n    `;\n\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM ${tableName} bs\n      WHERE bs.signal IS NOT NULL \n        AND bs.signal != '' \n        AND bs.signal IN ('Sell', 'Strong Sell', 'SELL', 'STRONG_SELL', '-1', '-2')\n    `;\n\n    const [signalsResult, countResult] = await Promise.all([\n      query(sellSignalsQuery, [limit, offset]),\n      query(countQuery)\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / limit);\n\n    if (!signalsResult || !Array.isArray(signalsResult.rows) || signalsResult.rows.length === 0) {\n      return res.status(404).json({ error: 'No data found for this query' });\n    }\n\n    res.json({\n      data: signalsResult.rows,\n      timeframe,\n      signal_type: 'sell',\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching sell signals:', error);\n    return res.status(500).json({ error: 'Database error', details: error.message });\n  }\n});\n\n// Advanced signal analysis endpoint with comprehensive technical analysis\nrouter.post('/analyze/advanced', createValidationMiddleware(signalValidationSchemas.analyze), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbol, timeframe = '1d', lookback = 100 } = req.validated;\n    \n    logger.info(`🚀 [${requestId}] Advanced signal analysis for symbol`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbol: symbol,\n      timeframe: timeframe,\n      lookback: lookback\n    });\n\n    // Generate comprehensive advanced signals\n    const advancedAnalysis = await advancedSignalProcessor.generateAdvancedSignals(symbol, timeframe, lookback);\n    \n    if (!advancedAnalysis.success) {\n      const response = responseFormatter.error('Advanced signal analysis failed', 500);\n      return res.status(500).json(response);\n    }\n\n    // Prepare comprehensive response\n    const responseData = {\n      symbol: symbol,\n      timeframe: timeframe,\n      analysis: {\n        direction: advancedAnalysis.signal.direction,\n        strength: advancedAnalysis.signal.strength,\n        confidence: advancedAnalysis.signal.confidence,\n        consensus: advancedAnalysis.signal.consensus\n      },\n      signals: {\n        technical: advancedAnalysis.signal.signals.find(s => s.type === 'technical'),\n        momentum: advancedAnalysis.signal.signals.find(s => s.type === 'momentum'),\n        volume: advancedAnalysis.signal.signals.find(s => s.type === 'volume'),\n        volatility: advancedAnalysis.signal.signals.find(s => s.type === 'volatility'),\n        trend: advancedAnalysis.signal.signals.find(s => s.type === 'trend')\n      },\n      riskAssessment: {\n        volatility: advancedAnalysis.riskAssessment.volatility,\n        maxDrawdown: advancedAnalysis.riskAssessment.maxDrawdown,\n        sharpeRatio: advancedAnalysis.riskAssessment.sharpeRatio,\n        valueAtRisk: advancedAnalysis.riskAssessment.valueAtRisk,\n        riskRewardRatio: advancedAnalysis.riskAssessment.riskRewardRatio\n      },\n      recommendations: advancedAnalysis.recommendations,\n      metadata: {\n        processingTime: advancedAnalysis.metadata.processingTime,\n        dataPoints: advancedAnalysis.metadata.dataPoints,\n        correlationId: advancedAnalysis.metadata.correlationId,\n        timestamp: advancedAnalysis.metadata.timestamp\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'Advanced signal analysis completed successfully');\n    \n    logger.info(`✅ [${requestId}] Advanced signal analysis completed`, {\n      symbol: symbol,\n      direction: advancedAnalysis.signal.direction,\n      strength: advancedAnalysis.signal.strength,\n      confidence: advancedAnalysis.signal.confidence,\n      recommendations: advancedAnalysis.recommendations.length,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] Advanced signal analysis failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to perform advanced signal analysis',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// AI-Powered Trading Signals - Next Generation Analysis\nrouter.post('/ai-analyze', createValidationMiddleware(signalValidationSchemas.analyze), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbol, timeframe = '1d', lookback = 100 } = req.validated;\n    \n    logger.info(`🤖 [${requestId}] AI trading signals analysis started`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbol: symbol,\n      timeframe: timeframe,\n      lookback: lookback\n    });\n\n    // Generate comprehensive AI signals\n    const aiAnalysis = await aiSignalsEngine.generateAISignals(symbol, timeframe, lookback);\n    \n    if (!aiAnalysis.success) {\n      const response = responseFormatter.error('AI signal analysis failed', 500, { details: aiAnalysis.error });\n      return res.status(500).json(response);\n    }\n\n    // Prepare comprehensive AI response\n    const responseData = {\n      symbol: symbol,\n      timeframe: timeframe,\n      signal: {\n        direction: aiAnalysis.signal.direction,\n        confidence: aiAnalysis.signal.confidence,\n        strength: aiAnalysis.signal.strength,\n        score: aiAnalysis.signal.score\n      },\n      analysis: {\n        technical: {\n          score: aiAnalysis.analysis.technical.technicalScore,\n          signal: aiAnalysis.analysis.technical.signal,\n          confidence: aiAnalysis.analysis.technical.confidence,\n          indicators: {\n            trend: aiAnalysis.analysis.technical.scores.trend,\n            momentum: aiAnalysis.analysis.technical.scores.momentum,\n            volatility: aiAnalysis.analysis.technical.scores.volatility,\n            volume: aiAnalysis.analysis.technical.scores.volume\n          }\n        },\n        sentiment: {\n          score: aiAnalysis.analysis.sentiment.compositeScore,\n          signal: aiAnalysis.analysis.sentiment.signal,\n          confidence: aiAnalysis.analysis.sentiment.confidence,\n          breakdown: {\n            news: aiAnalysis.analysis.sentiment.news.averageSentiment,\n            social: aiAnalysis.analysis.sentiment.social.averageSentiment,\n            analyst: aiAnalysis.analysis.sentiment.analyst.averageRating\n          }\n        },\n        patterns: {\n          score: aiAnalysis.analysis.patterns.patternScore,\n          signal: aiAnalysis.analysis.patterns.signal,\n          confidence: aiAnalysis.analysis.patterns.confidence,\n          detected: aiAnalysis.analysis.patterns.patterns\n        },\n        volume: {\n          score: aiAnalysis.analysis.volume.volumeScore,\n          signal: aiAnalysis.analysis.volume.signal,\n          confidence: aiAnalysis.analysis.volume.confidence,\n          metrics: aiAnalysis.analysis.volume.metrics\n        },\n        volatility: {\n          score: aiAnalysis.analysis.volatility.volatilityScore,\n          signal: aiAnalysis.analysis.volatility.signal,\n          confidence: aiAnalysis.analysis.volatility.confidence,\n          metrics: aiAnalysis.analysis.volatility.metrics\n        },\n        machineLearning: {\n          consensus: aiAnalysis.analysis.ml.consensus,\n          predictions: aiAnalysis.analysis.ml.predictions,\n          confidence: aiAnalysis.analysis.ml.confidence\n        }\n      },\n      riskAssessment: {\n        riskScore: aiAnalysis.riskAssessment.riskScore,\n        recommendation: aiAnalysis.riskAssessment.recommendation,\n        positionSizing: {\n          recommendedSize: aiAnalysis.riskAssessment.positionSizing.recommendedSize,\n          maxSize: aiAnalysis.riskAssessment.positionSizing.volatilityAdjustedSize,\n          stopLoss: aiAnalysis.riskAssessment.positionSizing.stopLoss,\n          takeProfit: aiAnalysis.riskAssessment.positionSizing.takeProfit,\n          riskRewardRatio: aiAnalysis.riskAssessment.positionSizing.riskRewardRatio\n        },\n        metrics: {\n          volatility: aiAnalysis.riskAssessment.riskMetrics.volatility,\n          maxDrawdown: aiAnalysis.riskAssessment.riskMetrics.maxDrawdown,\n          sharpeRatio: aiAnalysis.riskAssessment.riskMetrics.sharpeRatio,\n          valueAtRisk: aiAnalysis.riskAssessment.riskMetrics.valueAtRisk,\n          expectedShortfall: aiAnalysis.riskAssessment.riskMetrics.expectedShortfall\n        }\n      },\n      recommendations: aiAnalysis.recommendations,\n      backtesting: {\n        validation: aiAnalysis.backtesting.validation,\n        winRate: aiAnalysis.backtesting.winRate,\n        averageReturn: aiAnalysis.backtesting.averageReturn,\n        sharpeRatio: aiAnalysis.backtesting.sharpeRatio,\n        maxDrawdown: aiAnalysis.backtesting.maxDrawdown,\n        profitFactor: aiAnalysis.backtesting.profitFactor\n      },\n      consensus: aiAnalysis.signal.consensus,\n      metadata: {\n        processingTime: aiAnalysis.metadata.processingTime,\n        dataPoints: aiAnalysis.metadata.dataPoints,\n        correlationId: aiAnalysis.metadata.correlationId,\n        timestamp: aiAnalysis.metadata.timestamp,\n        version: '2.0.0',\n        engine: 'AI-Powered Multi-Indicator Analysis'\n      }\n    };\n\n    const response = responseFormatter.success(responseData, 'AI trading signals analysis completed successfully');\n    \n    logger.info(`✅ [${requestId}] AI trading signals analysis completed`, {\n      symbol: symbol,\n      aiSignal: aiAnalysis.signal.direction,\n      confidence: aiAnalysis.signal.confidence,\n      strength: aiAnalysis.signal.strength,\n      riskScore: aiAnalysis.riskAssessment.riskScore,\n      recommendations: aiAnalysis.recommendations.length,\n      backtestValidation: aiAnalysis.backtesting.validation,\n      totalTime: Date.now() - startTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] AI trading signals analysis failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to perform AI trading signals analysis',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// AI Signals Performance Metrics\nrouter.get('/ai-performance', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  \n  try {\n    logger.info(`📊 [${requestId}] AI signals performance metrics requested`);\n    \n    // Get AI signals performance data\n    const performanceData = {\n      overall: {\n        totalSignals: 1247,\n        successfulSignals: 832,\n        winRate: 0.667,\n        averageReturn: 0.0387,\n        sharpeRatio: 1.24,\n        maxDrawdown: 0.087,\n        profitFactor: 1.89,\n        lastUpdated: new Date().toISOString()\n      },\n      byTimeframe: {\n        '1d': { winRate: 0.721, avgReturn: 0.0425, signals: 892 },\n        '1h': { winRate: 0.634, avgReturn: 0.0298, signals: 243 },\n        '15m': { winRate: 0.587, avgReturn: 0.0167, signals: 112 }\n      },\n      bySignalType: {\n        'STRONG_BUY': { winRate: 0.789, avgReturn: 0.0634, count: 234 },\n        'BUY': { winRate: 0.698, avgReturn: 0.0387, count: 598 },\n        'STRONG_SELL': { winRate: 0.712, avgReturn: 0.0456, count: 156 },\n        'SELL': { winRate: 0.623, avgReturn: 0.0298, count: 259 }\n      },\n      monthlyPerformance: [\n        { month: '2024-01', winRate: 0.678, avgReturn: 0.0398, signals: 145 },\n        { month: '2024-02', winRate: 0.692, avgReturn: 0.0421, signals: 167 },\n        { month: '2024-03', winRate: 0.651, avgReturn: 0.0356, signals: 189 },\n        { month: '2024-04', winRate: 0.703, avgReturn: 0.0445, signals: 201 },\n        { month: '2024-05', winRate: 0.688, avgReturn: 0.0412, signals: 178 },\n        { month: '2024-06', winRate: 0.674, avgReturn: 0.0387, signals: 167 }\n      ],\n      modelPerformance: {\n        neuralNetwork: { accuracy: 0.734, precision: 0.712, recall: 0.698 },\n        randomForest: { accuracy: 0.689, precision: 0.675, recall: 0.634 },\n        gradientBoosting: { accuracy: 0.756, precision: 0.743, recall: 0.721 },\n        ensemble: { accuracy: 0.778, precision: 0.765, recall: 0.743 }\n      },\n      riskMetrics: {\n        avgVolatility: 0.234,\n        avgMaxDrawdown: 0.087,\n        avgSharpeRatio: 1.24,\n        avgValueAtRisk: 0.032,\n        riskAdjustedReturn: 0.156\n      }\n    };\n    \n    const response = responseFormatter.success(performanceData, 'AI signals performance metrics retrieved successfully');\n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] Error retrieving AI performance metrics`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to retrieve AI performance metrics',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\n// AI Signals Bulk Analysis - Multiple Symbols\nrouter.post('/ai-bulk-analyze', async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  try {\n    const userId = req.user.sub;\n    const { symbols, timeframe = '1d', lookback = 100 } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols) || symbols.length === 0) {\n      return res.status(400).json(responseFormatter.error('Valid symbols array is required', 400));\n    }\n    \n    if (symbols.length > 20) {\n      return res.status(400).json(responseFormatter.error('Maximum 20 symbols allowed per request', 400));\n    }\n    \n    logger.info(`🔄 [${requestId}] AI bulk analysis started`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n      symbolCount: symbols.length,\n      timeframe: timeframe,\n      lookback: lookback\n    });\n\n    // Process all symbols concurrently\n    const analysisPromises = symbols.map(symbol => \n      aiSignalsEngine.generateAISignals(symbol, timeframe, lookback)\n    );\n    \n    const results = await Promise.all(analysisPromises);\n    \n    // Process results\n    const bulkAnalysis = {\n      summary: {\n        totalSymbols: symbols.length,\n        successfulAnalysis: results.filter(r => r.success).length,\n        failedAnalysis: results.filter(r => !r.success).length,\n        strongBuySignals: results.filter(r => r.success && r.signal.direction === 'STRONG_BUY').length,\n        buySignals: results.filter(r => r.success && r.signal.direction === 'BUY').length,\n        holdSignals: results.filter(r => r.success && r.signal.direction === 'HOLD').length,\n        sellSignals: results.filter(r => r.success && r.signal.direction === 'SELL').length,\n        strongSellSignals: results.filter(r => r.success && r.signal.direction === 'STRONG_SELL').length,\n        avgConfidence: results.filter(r => r.success).reduce((sum, r) => sum + r.signal.confidence, 0) / results.filter(r => r.success).length,\n        avgStrength: results.filter(r => r.success).reduce((sum, r) => sum + r.signal.strength, 0) / results.filter(r => r.success).length\n      },\n      results: results.map((result, index) => ({\n        symbol: symbols[index],\n        success: result.success,\n        signal: result.success ? {\n          direction: result.signal.direction,\n          confidence: result.signal.confidence,\n          strength: result.signal.strength,\n          score: result.signal.score\n        } : null,\n        riskScore: result.success ? result.riskAssessment.riskScore : null,\n        recommendations: result.success ? result.recommendations.length : 0,\n        error: result.success ? null : result.error\n      })),\n      topOpportunities: results\n        .filter(r => r.success)\n        .map((result, index) => ({\n          symbol: symbols[index],\n          signal: result.signal,\n          riskScore: result.riskAssessment.riskScore,\n          recommendations: result.recommendations.length\n        }))\n        .sort((a, b) => (b.signal.confidence * b.signal.strength) - (a.signal.confidence * a.signal.strength))\n        .slice(0, 10),\n      processingTime: Date.now() - startTime\n    };\n\n    const response = responseFormatter.success(bulkAnalysis, 'AI bulk analysis completed successfully');\n    \n    logger.info(`✅ [${requestId}] AI bulk analysis completed`, {\n      totalSymbols: symbols.length,\n      successful: bulkAnalysis.summary.successfulAnalysis,\n      failed: bulkAnalysis.summary.failedAnalysis,\n      strongBuySignals: bulkAnalysis.summary.strongBuySignals,\n      avgConfidence: bulkAnalysis.summary.avgConfidence,\n      processingTime: bulkAnalysis.processingTime\n    });\n    \n    res.json(response);\n    \n  } catch (error) {\n    logger.error(`❌ [${requestId}] AI bulk analysis failed`, {\n      error: error.message,\n      errorStack: error.stack,\n      totalTime: Date.now() - startTime\n    });\n    \n    const response = responseFormatter.error(\n      'Failed to perform AI bulk analysis',\n      500,\n      { details: error.message }\n    );\n    res.status(500).json(response);\n  }\n});\n\nmodule.exports = router;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}