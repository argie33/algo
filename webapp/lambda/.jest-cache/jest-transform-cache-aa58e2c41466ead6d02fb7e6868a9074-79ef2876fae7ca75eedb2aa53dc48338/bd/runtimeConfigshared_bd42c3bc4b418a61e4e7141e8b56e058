47f8bacfdd31bd7d007081a36777a92e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRuntimeConfig = void 0;
const core_1 = require("@aws-sdk/core");
const smithy_client_1 = require("@smithy/smithy-client");
const url_parser_1 = require("@smithy/url-parser");
const util_base64_1 = require("@smithy/util-base64");
const util_utf8_1 = require("@smithy/util-utf8");
const httpAuthSchemeProvider_1 = require("./auth/httpAuthSchemeProvider");
const endpointResolver_1 = require("./endpoint/endpointResolver");
const getRuntimeConfig = config => {
  return {
    apiVersion: "2014-11-06",
    base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
    base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
    extensions: config?.extensions ?? [],
    httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSMHttpAuthSchemeProvider,
    httpAuthSchemes: config?.httpAuthSchemes ?? [{
      schemeId: "aws.auth#sigv4",
      identityProvider: ipc => ipc.getIdentityProvider("aws.auth#sigv4"),
      signer: new core_1.AwsSdkSigV4Signer()
    }],
    logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
    serviceId: config?.serviceId ?? "SSM",
    urlParser: config?.urlParser ?? url_parser_1.parseUrl,
    utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
    utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
  };
};
exports.getRuntimeConfig = getRuntimeConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFJ1bnRpbWVDb25maWciLCJjb3JlXzEiLCJyZXF1aXJlIiwic21pdGh5X2NsaWVudF8xIiwidXJsX3BhcnNlcl8xIiwidXRpbF9iYXNlNjRfMSIsInV0aWxfdXRmOF8xIiwiaHR0cEF1dGhTY2hlbWVQcm92aWRlcl8xIiwiZW5kcG9pbnRSZXNvbHZlcl8xIiwiY29uZmlnIiwiYXBpVmVyc2lvbiIsImJhc2U2NERlY29kZXIiLCJmcm9tQmFzZTY0IiwiYmFzZTY0RW5jb2RlciIsInRvQmFzZTY0IiwiZGlzYWJsZUhvc3RQcmVmaXgiLCJlbmRwb2ludFByb3ZpZGVyIiwiZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIiLCJleHRlbnNpb25zIiwiaHR0cEF1dGhTY2hlbWVQcm92aWRlciIsImRlZmF1bHRTU01IdHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiaHR0cEF1dGhTY2hlbWVzIiwic2NoZW1lSWQiLCJpZGVudGl0eVByb3ZpZGVyIiwiaXBjIiwiZ2V0SWRlbnRpdHlQcm92aWRlciIsInNpZ25lciIsIkF3c1Nka1NpZ1Y0U2lnbmVyIiwibG9nZ2VyIiwiTm9PcExvZ2dlciIsInNlcnZpY2VJZCIsInVybFBhcnNlciIsInBhcnNlVXJsIiwidXRmOERlY29kZXIiLCJmcm9tVXRmOCIsInV0ZjhFbmNvZGVyIiwidG9VdGY4Il0sInNvdXJjZXMiOlsicnVudGltZUNvbmZpZy5zaGFyZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFJ1bnRpbWVDb25maWcgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvY29yZVwiKTtcbmNvbnN0IHNtaXRoeV9jbGllbnRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIik7XG5jb25zdCB1cmxfcGFyc2VyXzEgPSByZXF1aXJlKFwiQHNtaXRoeS91cmwtcGFyc2VyXCIpO1xuY29uc3QgdXRpbF9iYXNlNjRfMSA9IHJlcXVpcmUoXCJAc21pdGh5L3V0aWwtYmFzZTY0XCIpO1xuY29uc3QgdXRpbF91dGY4XzEgPSByZXF1aXJlKFwiQHNtaXRoeS91dGlsLXV0ZjhcIik7XG5jb25zdCBodHRwQXV0aFNjaGVtZVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIik7XG5jb25zdCBlbmRwb2ludFJlc29sdmVyXzEgPSByZXF1aXJlKFwiLi9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyXCIpO1xuY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlWZXJzaW9uOiBcIjIwMTQtMTEtMDZcIixcbiAgICAgICAgYmFzZTY0RGVjb2RlcjogY29uZmlnPy5iYXNlNjREZWNvZGVyID8/IHV0aWxfYmFzZTY0XzEuZnJvbUJhc2U2NCxcbiAgICAgICAgYmFzZTY0RW5jb2RlcjogY29uZmlnPy5iYXNlNjRFbmNvZGVyID8/IHV0aWxfYmFzZTY0XzEudG9CYXNlNjQsXG4gICAgICAgIGRpc2FibGVIb3N0UHJlZml4OiBjb25maWc/LmRpc2FibGVIb3N0UHJlZml4ID8/IGZhbHNlLFxuICAgICAgICBlbmRwb2ludFByb3ZpZGVyOiBjb25maWc/LmVuZHBvaW50UHJvdmlkZXIgPz8gZW5kcG9pbnRSZXNvbHZlcl8xLmRlZmF1bHRFbmRwb2ludFJlc29sdmVyLFxuICAgICAgICBleHRlbnNpb25zOiBjb25maWc/LmV4dGVuc2lvbnMgPz8gW10sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVQcm92aWRlciA/PyBodHRwQXV0aFNjaGVtZVByb3ZpZGVyXzEuZGVmYXVsdFNTTUh0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBjb3JlXzEuQXdzU2RrU2lnVjRTaWduZXIoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGxvZ2dlcjogY29uZmlnPy5sb2dnZXIgPz8gbmV3IHNtaXRoeV9jbGllbnRfMS5Ob09wTG9nZ2VyKCksXG4gICAgICAgIHNlcnZpY2VJZDogY29uZmlnPy5zZXJ2aWNlSWQgPz8gXCJTU01cIixcbiAgICAgICAgdXJsUGFyc2VyOiBjb25maWc/LnVybFBhcnNlciA/PyB1cmxfcGFyc2VyXzEucGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IHV0aWxfdXRmOF8xLmZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB1dGlsX3V0ZjhfMS50b1V0ZjgsXG4gICAgfTtcbn07XG5leHBvcnRzLmdldFJ1bnRpbWVDb25maWcgPSBnZXRSdW50aW1lQ29uZmlnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUN2QyxNQUFNQyxlQUFlLEdBQUdELE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUN4RCxNQUFNRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNsRCxNQUFNRyxhQUFhLEdBQUdILE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUNwRCxNQUFNSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUNoRCxNQUFNSyx3QkFBd0IsR0FBR0wsT0FBTyxDQUFDLCtCQUErQixDQUFDO0FBQ3pFLE1BQU1NLGtCQUFrQixHQUFHTixPQUFPLENBQUMsNkJBQTZCLENBQUM7QUFDakUsTUFBTUYsZ0JBQWdCLEdBQUlTLE1BQU0sSUFBSztFQUNqQyxPQUFPO0lBQ0hDLFVBQVUsRUFBRSxZQUFZO0lBQ3hCQyxhQUFhLEVBQUVGLE1BQU0sRUFBRUUsYUFBYSxJQUFJTixhQUFhLENBQUNPLFVBQVU7SUFDaEVDLGFBQWEsRUFBRUosTUFBTSxFQUFFSSxhQUFhLElBQUlSLGFBQWEsQ0FBQ1MsUUFBUTtJQUM5REMsaUJBQWlCLEVBQUVOLE1BQU0sRUFBRU0saUJBQWlCLElBQUksS0FBSztJQUNyREMsZ0JBQWdCLEVBQUVQLE1BQU0sRUFBRU8sZ0JBQWdCLElBQUlSLGtCQUFrQixDQUFDUyx1QkFBdUI7SUFDeEZDLFVBQVUsRUFBRVQsTUFBTSxFQUFFUyxVQUFVLElBQUksRUFBRTtJQUNwQ0Msc0JBQXNCLEVBQUVWLE1BQU0sRUFBRVUsc0JBQXNCLElBQUlaLHdCQUF3QixDQUFDYSxnQ0FBZ0M7SUFDbkhDLGVBQWUsRUFBRVosTUFBTSxFQUFFWSxlQUFlLElBQUksQ0FDeEM7TUFDSUMsUUFBUSxFQUFFLGdCQUFnQjtNQUMxQkMsZ0JBQWdCLEVBQUdDLEdBQUcsSUFBS0EsR0FBRyxDQUFDQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQztNQUNwRUMsTUFBTSxFQUFFLElBQUl6QixNQUFNLENBQUMwQixpQkFBaUIsQ0FBQztJQUN6QyxDQUFDLENBQ0o7SUFDREMsTUFBTSxFQUFFbkIsTUFBTSxFQUFFbUIsTUFBTSxJQUFJLElBQUl6QixlQUFlLENBQUMwQixVQUFVLENBQUMsQ0FBQztJQUMxREMsU0FBUyxFQUFFckIsTUFBTSxFQUFFcUIsU0FBUyxJQUFJLEtBQUs7SUFDckNDLFNBQVMsRUFBRXRCLE1BQU0sRUFBRXNCLFNBQVMsSUFBSTNCLFlBQVksQ0FBQzRCLFFBQVE7SUFDckRDLFdBQVcsRUFBRXhCLE1BQU0sRUFBRXdCLFdBQVcsSUFBSTNCLFdBQVcsQ0FBQzRCLFFBQVE7SUFDeERDLFdBQVcsRUFBRTFCLE1BQU0sRUFBRTBCLFdBQVcsSUFBSTdCLFdBQVcsQ0FBQzhCO0VBQ3BELENBQUM7QUFDTCxDQUFDO0FBQ0R0QyxPQUFPLENBQUNFLGdCQUFnQixHQUFHQSxnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=