{"version":3,"names":["cov_1rozt51sdu","actualCoverage","Pool","s","require","DatabaseCircuitBreaker","DatabaseConnectionManager","constructor","f","pool","circuitBreaker","isInitialized","config","lastHealthCheck","healthCheckInterval","initialize","b","console","log","getDbConfig","max","min","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","createRetryIntervalMillis","keepAlive","keepAliveInitialDelayMillis","testConnection","error","process","env","DB_HOST","DB_USER","DB_PASSWORD","host","port","parseInt","DB_PORT","database","DB_NAME","user","password","ssl","DB_SSL","rejectUnauthorized","DB_SECRET_ARN","SecretsManagerClient","GetSecretValueCommand","client","region","AWS_REGION","response","send","SecretId","secret","JSON","parse","SecretString","parseError","length","substring","Error","message","dbname","username","execute","connect","query","release","text","params","now","Date","warn","result","getStatus","initialized","totalCount","idleCount","waitingCount","forceReset","end","module","exports"],"sources":["databaseConnectionManager.js"],"sourcesContent":["/**\n * Database Connection Manager with Circuit Breaker Integration\n */\nconst { Pool } = require('pg');\nconst DatabaseCircuitBreaker = require('./databaseCircuitBreaker');\n\nclass DatabaseConnectionManager {\n  constructor() {\n    this.pool = null;\n    this.circuitBreaker = new DatabaseCircuitBreaker();\n    this.isInitialized = false;\n    this.config = null;\n    this.lastHealthCheck = 0;\n    this.healthCheckInterval = 30000; // 30 seconds\n  }\n  \n  async initialize() {\n    if (this.isInitialized && this.pool) {\n      return this.pool;\n    }\n    \n    try {\n      console.log('🔄 Initializing database connection with circuit breaker...');\n      \n      // Get database configuration\n      this.config = await this.getDbConfig();\n      \n      // Create connection pool\n      this.pool = new Pool({\n        ...this.config,\n        // Lambda-optimized settings\n        max: 10, // Maximum connections\n        min: 1,  // Minimum connections\n        acquireTimeoutMillis: 15000, // 15 seconds\n        createTimeoutMillis: 20000,  // 20 seconds\n        destroyTimeoutMillis: 5000,  // 5 seconds\n        idleTimeoutMillis: 30000,    // 30 seconds\n        reapIntervalMillis: 1000,    // 1 second\n        createRetryIntervalMillis: 200, // 200ms\n        keepAlive: true,\n        keepAliveInitialDelayMillis: 10000\n      });\n      \n      // Test initial connection\n      await this.testConnection();\n      \n      this.isInitialized = true;\n      console.log('✅ Database connection initialized successfully');\n      \n      return this.pool;\n    } catch (error) {\n      console.error('❌ Database initialization failed:', error);\n      this.pool = null;\n      this.isInitialized = false;\n      throw error;\n    }\n  }\n  \n  async getDbConfig() {\n    // Try environment variables first\n    if (process.env.DB_HOST && process.env.DB_USER && process.env.DB_PASSWORD) {\n      console.log('🔧 Using direct environment variables');\n      return {\n        host: process.env.DB_HOST,\n        port: parseInt(process.env.DB_PORT) || 5432,\n        database: process.env.DB_NAME || 'stocks',\n        user: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false\n      };\n    }\n    \n    // Fallback to AWS Secrets Manager\n    if (process.env.DB_SECRET_ARN) {\n      console.log('🔧 Using AWS Secrets Manager fallback');\n      const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');\n      \n      const client = new SecretsManagerClient({\n        region: process.env.AWS_REGION || 'us-east-1'\n      });\n      \n      try {\n        const response = await client.send(new GetSecretValueCommand({\n          SecretId: process.env.DB_SECRET_ARN\n        }));\n        \n        // Enhanced JSON parsing with error handling\n        let secret;\n        try {\n          secret = JSON.parse(response.SecretString);\n        } catch (parseError) {\n          console.error('❌ JSON parsing error for secret:', parseError);\n          console.error('Secret string length:', response.SecretString?.length);\n          console.error('Secret string preview:', response.SecretString?.substring(0, 100));\n          throw new Error('Failed to parse database secret JSON: ' + parseError.message);\n        }\n        \n        return {\n          host: secret.host || process.env.DB_HOST,\n          port: secret.port || parseInt(process.env.DB_PORT) || 5432,\n          database: secret.dbname || secret.database || 'stocks',\n          user: secret.username || secret.user,\n          password: secret.password,\n          ssl: false // Public subnet RDS typically doesn't use SSL\n        };\n      } catch (error) {\n        console.error('❌ Failed to get secret from AWS Secrets Manager:', error);\n        throw error;\n      }\n    }\n    \n    throw new Error('No database configuration found (no env vars or secret ARN)');\n  }\n  \n  async testConnection() {\n    return this.circuitBreaker.execute(async () => {\n      const client = await this.pool.connect();\n      try {\n        await client.query('SELECT 1');\n        return true;\n      } finally {\n        client.release();\n      }\n    }, 'connection-test');\n  }\n  \n  async query(text, params = []) {\n    // Initialize if needed\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    \n    // Periodic health check\n    const now = Date.now();\n    if (now - this.lastHealthCheck > this.healthCheckInterval) {\n      try {\n        await this.testConnection();\n        this.lastHealthCheck = now;\n      } catch (error) {\n        console.warn('⚠️ Health check failed:', error.message);\n      }\n    }\n    \n    // Execute query through circuit breaker\n    return this.circuitBreaker.execute(async () => {\n      const client = await this.pool.connect();\n      try {\n        const result = await client.query(text, params);\n        return result;\n      } finally {\n        client.release();\n      }\n    }, 'database-query');\n  }\n  \n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      pool: this.pool ? {\n        totalCount: this.pool.totalCount,\n        idleCount: this.pool.idleCount,\n        waitingCount: this.pool.waitingCount\n      } : null,\n      circuitBreaker: this.circuitBreaker.getStatus()\n    };\n  }\n  \n  // Emergency recovery methods\n  async forceReset() {\n    console.log('🚨 EMERGENCY: Force resetting database connection...');\n    this.circuitBreaker.forceReset();\n    \n    if (this.pool) {\n      await this.pool.end();\n      this.pool = null;\n    }\n    \n    this.isInitialized = false;\n    await this.initialize();\n    console.log('✅ Database connection force reset completed');\n  }\n}\n\n// Export singleton instance\nmodule.exports = new DatabaseConnectionManager();"],"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","ignoreList":[]}