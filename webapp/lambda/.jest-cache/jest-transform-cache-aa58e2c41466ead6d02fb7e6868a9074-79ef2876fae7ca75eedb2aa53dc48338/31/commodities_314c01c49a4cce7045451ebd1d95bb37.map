{"version":3,"names":["cov_1fffco9ayj","actualCoverage","express","s","require","router","Router","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","data","system","version","available_endpoints","categories","id","name","description","commodities","weight","performance","metadata","totalCategories","length","lastUpdated","priceDate","error","console","details","category","query","symbol","price","change","changePercent","unit","currency","volume","b","filter","c","filters","totalCount","summary","overview","totalMarketCap","totalVolume","activeContracts","tradingSession","gainers","losers","unchanged","topGainer","topLoser","sectors","correlations","period","matrix","module","exports"],"sources":["commodities.js"],"sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'commodities',\n    timestamp: new Date().toISOString(),\n    message: 'Commodities service is running'\n  });\n});\n\n// Root commodities endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'Commodities API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'GET /commodities/categories - Commodity categories',\n        'GET /commodities/prices - Current commodity prices',\n        'GET /commodities/market-summary - Market overview',\n        'GET /commodities/correlations - Price correlations',\n        'GET /commodities/news - Latest commodity news'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Get commodity categories\nrouter.get('/categories', (req, res) => {\n  try {\n    const categories = [\n      {\n        id: 'energy',\n        name: 'Energy',\n        description: 'Oil, gas, and energy commodities',\n        commodities: ['crude-oil', 'natural-gas', 'heating-oil', 'gasoline'],\n        weight: 0.35,\n        performance: {\n          '1d': 0.5,\n          '1w': -2.1,\n          '1m': 4.3,\n          '3m': -8.7,\n          '1y': 12.4\n        }\n      },\n      {\n        id: 'precious-metals',\n        name: 'Precious Metals',\n        description: 'Gold, silver, platinum, and palladium',\n        commodities: ['gold', 'silver', 'platinum', 'palladium'],\n        weight: 0.25,\n        performance: {\n          '1d': -0.3,\n          '1w': 1.8,\n          '1m': -1.2,\n          '3m': 5.6,\n          '1y': 8.9\n        }\n      },\n      {\n        id: 'base-metals',\n        name: 'Base Metals',\n        description: 'Copper, aluminum, zinc, and industrial metals',\n        commodities: ['copper', 'aluminum', 'zinc', 'nickel', 'lead'],\n        weight: 0.20,\n        performance: {\n          '1d': 1.2,\n          '1w': 3.4,\n          '1m': 2.8,\n          '3m': -4.2,\n          '1y': 15.7\n        }\n      },\n      {\n        id: 'agriculture',\n        name: 'Agriculture',\n        description: 'Grains, livestock, and soft commodities',\n        commodities: ['wheat', 'corn', 'soybeans', 'coffee', 'sugar', 'cotton'],\n        weight: 0.15,\n        performance: {\n          '1d': -0.8,\n          '1w': -1.5,\n          '1m': 6.2,\n          '3m': 12.1,\n          '1y': -3.4\n        }\n      },\n      {\n        id: 'livestock',\n        name: 'Livestock',\n        description: 'Cattle, hogs, and feeder cattle',\n        commodities: ['live-cattle', 'feeder-cattle', 'lean-hogs'],\n        weight: 0.05,\n        performance: {\n          '1d': 0.2,\n          '1w': 2.1,\n          '1m': -1.8,\n          '3m': 7.3,\n          '1y': 11.2\n        }\n      }\n    ];\n\n    res.json({\n      success: true,\n      data: categories,\n      metadata: {\n        totalCategories: categories.length,\n        lastUpdated: new Date().toISOString(),\n        priceDate: new Date().toISOString()\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching commodity categories:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch commodity categories',\n      details: error.message\n    });\n  }\n});\n\n// Get commodity prices\nrouter.get('/prices', (req, res) => {\n  try {\n    const category = req.query.category;\n    const symbol = req.query.symbol;\n\n    let commodities = [\n      {\n        symbol: 'CL',\n        name: 'Crude Oil',\n        category: 'energy',\n        price: 78.45,\n        change: 0.67,\n        changePercent: 0.86,\n        unit: 'per barrel',\n        currency: 'USD',\n        volume: 245678,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'GC',\n        name: 'Gold',\n        category: 'precious-metals',\n        price: 2034.20,\n        change: -5.30,\n        changePercent: -0.26,\n        unit: 'per ounce',\n        currency: 'USD',\n        volume: 89432,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'SI',\n        name: 'Silver',\n        category: 'precious-metals',\n        price: 24.67,\n        change: 0.23,\n        changePercent: 0.94,\n        unit: 'per ounce',\n        currency: 'USD',\n        volume: 34567,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'HG',\n        name: 'Copper',\n        category: 'base-metals',\n        price: 3.89,\n        change: 0.045,\n        changePercent: 1.17,\n        unit: 'per pound',\n        currency: 'USD',\n        volume: 67890,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'NG',\n        name: 'Natural Gas',\n        category: 'energy',\n        price: 2.87,\n        change: -0.12,\n        changePercent: -4.02,\n        unit: 'per MMBtu',\n        currency: 'USD',\n        volume: 123456,\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        symbol: 'ZW',\n        name: 'Wheat',\n        category: 'agriculture',\n        price: 6.45,\n        change: -0.08,\n        changePercent: -1.22,\n        unit: 'per bushel',\n        currency: 'USD',\n        volume: 45678,\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n\n    // Filter by category if specified\n    if (category) {\n      commodities = commodities.filter(c => c.category === category);\n    }\n\n    // Filter by symbol if specified\n    if (symbol) {\n      commodities = commodities.filter(c => c.symbol === symbol);\n    }\n\n    res.json({\n      success: true,\n      data: commodities,\n      filters: {\n        category: category || null,\n        symbol: symbol || null\n      },\n      metadata: {\n        totalCount: commodities.length,\n        priceDate: new Date().toISOString()\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching commodity prices:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch commodity prices',\n      details: error.message\n    });\n  }\n});\n\n// Get market summary\nrouter.get('/market-summary', (req, res) => {\n  try {\n    const summary = {\n      overview: {\n        totalMarketCap: 4.2e12,\n        totalVolume: 1.8e9,\n        activeContracts: 125847,\n        tradingSession: 'open'\n      },\n      performance: {\n        '1d': {\n          gainers: 18,\n          losers: 12,\n          unchanged: 3,\n          topGainer: { symbol: 'HG', name: 'Copper', change: 1.17 },\n          topLoser: { symbol: 'NG', name: 'Natural Gas', change: -4.02 }\n        }\n      },\n      sectors: [\n        {\n          name: 'Energy',\n          weight: 0.35,\n          change: 0.62,\n          volume: 8.9e8\n        },\n        {\n          name: 'Precious Metals',\n          weight: 0.25,\n          change: -0.15,\n          volume: 3.2e8\n        }\n      ]\n    };\n\n    res.json({\n      success: true,\n      data: summary,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching market summary:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch market summary',\n      details: error.message\n    });\n  }\n});\n\n// Get correlations\nrouter.get('/correlations', (req, res) => {\n  try {\n    const correlations = {\n      overview: {\n        description: 'Correlation matrix for major commodity sectors',\n        period: '90d',\n        lastUpdated: new Date().toISOString()\n      },\n      matrix: {\n        'energy': {\n          'energy': 1.00,\n          'precious-metals': -0.23,\n          'base-metals': 0.47,\n          'agriculture': 0.12,\n          'livestock': 0.08\n        },\n        'precious-metals': {\n          'energy': -0.23,\n          'precious-metals': 1.00,\n          'base-metals': 0.18,\n          'agriculture': -0.05,\n          'livestock': -0.02\n        }\n      }\n    };\n\n    res.json({\n      success: true,\n      data: correlations,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching correlations:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch correlations',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}