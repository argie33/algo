{"version":3,"names":["cov_17x0qp79r5","actualCoverage","express","s","require","query","authenticateToken","router","Router","get","req","res","f","json","success","status","service","timestamp","Date","toISOString","message","authRouter","use","endpoint","symbol","params","timeframe","b","console","error","detailed_diagnostics","attempted_operations","potential_causes","troubleshooting_steps","system_checks","emptySocialData","reddit","mentions","subredditBreakdown","topPosts","googleTrends","searchVolume","relatedQueries","geographicDistribution","socialMetrics","overall","totalMentions","sentimentScore","engagementRate","viralityIndex","influencerMentions","platforms","data","limit","emptyTrendingStocks","trending","parseInt","post","symbols","body","Array","isArray","emptyBatchData","map","engagement","trend","marketSentiment","sentiment","activeDiscussions","sentiment24hChange","sectors","name","change","activeUsers","module","exports"],"sources":["sentiment.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Health endpoint (no auth required)\nrouter.get('/health', (req, res) => {\n  res.json({\n    success: true,\n    status: 'operational',\n    service: 'sentiment',\n    timestamp: new Date().toISOString(),\n    message: 'Sentiment analysis service is running'\n  });\n});\n\n// Basic root endpoint (public)\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: 'Sentiment API - Ready',\n    timestamp: new Date().toISOString(),\n    status: 'operational'\n  });\n});\n\n// Apply authentication to protected routes only\nconst authRouter = express.Router();\nauthRouter.use(authenticateToken);\n\n// Basic ping endpoint (public)\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'sentiment',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Get social media sentiment data for a specific symbol\nrouter.get('/social/:symbol', async (req, res) => {\n  try {\n    const { symbol } = req.params;\n    const { timeframe = '7d' } = req.query;\n    \n    // Return empty sentiment data with comprehensive diagnostics\n    console.error('❌ Social media sentiment data unavailable - comprehensive diagnosis needed', {\n      symbol,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['social_media_api_call', 'sentiment_analysis_query'],\n        potential_causes: [\n          'Social media API keys not configured',\n          'Sentiment analysis service unavailable',\n          'Rate limiting on social media APIs',\n          'Data processing pipeline failure',\n          'External API authentication issues'\n        ],\n        troubleshooting_steps: [\n          'Check social media API key configuration',\n          'Verify sentiment analysis service status',\n          'Review API rate limits and quotas',\n          'Check data processing pipeline health',\n          'Validate external API authentication'\n        ],\n        system_checks: [\n          'Reddit API connectivity',\n          'Twitter API availability',\n          'Google Trends API status',\n          'Sentiment analysis service health'\n        ]\n      }\n    });\n\n    const emptySocialData = {\n      reddit: {\n        mentions: [],\n        subredditBreakdown: [],\n        topPosts: []\n      },\n      googleTrends: {\n        searchVolume: [],\n        relatedQueries: [],\n        geographicDistribution: []\n      },\n      socialMetrics: {\n        overall: {\n          totalMentions: 0,\n          sentimentScore: 0,\n          engagementRate: 0,\n          viralityIndex: 0,\n          influencerMentions: 0\n        },\n        platforms: []\n      }\n    };\n\n    res.json({\n      symbol,\n      timeframe,\n      data: emptySocialData,\n      message: 'No social media sentiment data available - configure social media API keys',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching social sentiment data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch social sentiment data',\n      message: error.message\n    });\n  }\n});\n\n// Get trending stocks by social media mentions\nrouter.get('/trending', async (req, res) => {\n  try {\n    const { limit = 20, timeframe = '24h' } = req.query;\n    \n    // Return empty trending stocks with comprehensive diagnostics\n    console.error('❌ Trending stocks sentiment data unavailable - comprehensive diagnosis needed', {\n      limit,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['trending_stocks_query', 'social_media_mentions_aggregation'],\n        potential_causes: [\n          'Social media API unavailable',\n          'Trending analysis service down',\n          'Data aggregation pipeline failure',\n          'Database connection issues',\n          'External API rate limiting'\n        ],\n        troubleshooting_steps: [\n          'Check social media API connectivity',\n          'Verify trending analysis service status',\n          'Review data aggregation pipeline health',\n          'Check database connectivity',\n          'Monitor external API rate limits'\n        ],\n        system_checks: [\n          'Social media service availability',\n          'Trending analysis capacity',\n          'Data pipeline health',\n          'Database connection status'\n        ]\n      }\n    });\n\n    const emptyTrendingStocks = [];\n\n    res.json({\n      trending: emptyTrendingStocks,\n      timeframe,\n      limit: parseInt(limit),\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching trending stocks:', error);\n    res.status(500).json({\n      error: 'Failed to fetch trending stocks',\n      message: error.message\n    });\n  }\n});\n\n// Get sentiment analysis for multiple symbols\nrouter.post('/batch', async (req, res) => {\n  try {\n    const { symbols, timeframe = '7d' } = req.body;\n    \n    if (!symbols || !Array.isArray(symbols)) {\n      return res.status(400).json({\n        error: 'Invalid request',\n        message: 'symbols array is required'\n      });\n    }\n\n    // Return empty batch sentiment data with comprehensive diagnostics\n    console.error('❌ Batch sentiment data unavailable - comprehensive diagnosis needed', {\n      symbols,\n      timeframe,\n      detailed_diagnostics: {\n        attempted_operations: ['batch_sentiment_analysis', 'multi_symbol_query'],\n        potential_causes: [\n          'Sentiment analysis service unavailable',\n          'Batch processing pipeline failure',\n          'External API rate limiting',\n          'Database connection issues',\n          'Data processing timeout'\n        ],\n        troubleshooting_steps: [\n          'Check sentiment analysis service status',\n          'Verify batch processing pipeline health',\n          'Review external API rate limits',\n          'Check database connectivity',\n          'Monitor data processing timeouts'\n        ],\n        system_checks: [\n          'Sentiment service availability',\n          'Batch processing capacity',\n          'External API health',\n          'Database connection pool status'\n        ]\n      }\n    });\n\n    const emptyBatchData = symbols.map(symbol => ({\n      symbol,\n      sentimentScore: 0,\n      mentions: 0,\n      engagement: 0,\n      trend: 'unknown'\n    }));\n\n    res.json({\n      data: emptyBatchData,\n      timeframe,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching batch sentiment data:', error);\n    res.status(500).json({\n      error: 'Failed to fetch batch sentiment data',\n      message: error.message\n    });\n  }\n});\n\n// Get sentiment summary for market overview\nrouter.get('/market-summary', async (req, res) => {\n  try {\n    const marketSentiment = {\n      overall: {\n        sentiment: 0.68,\n        mentions: 15234,\n        activeDiscussions: 892,\n        sentiment24hChange: 0.05\n      },\n      sectors: [\n        { name: 'Technology', sentiment: 0.72, mentions: 4567, change: 0.08 },\n        { name: 'Healthcare', sentiment: 0.65, mentions: 2134, change: -0.02 },\n        { name: 'Financial', sentiment: 0.61, mentions: 1987, change: 0.03 },\n        { name: 'Energy', sentiment: 0.58, mentions: 1456, change: -0.12 },\n        { name: 'Consumer', sentiment: 0.71, mentions: 1789, change: 0.15 }\n      ],\n      platforms: [\n        { name: 'Reddit', activeUsers: 45678, sentiment: 0.69 },\n        { name: 'Twitter', activeUsers: 78901, sentiment: 0.65 },\n        { name: 'StockTwits', activeUsers: 12345, sentiment: 0.74 },\n        { name: 'Discord', activeUsers: 6789, sentiment: 0.71 }\n      ]\n    };\n\n    res.json({\n      marketSentiment,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Error fetching market sentiment summary:', error);\n    res.status(500).json({\n      error: 'Failed to fetch market sentiment summary',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}