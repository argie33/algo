{"version":3,"names":["cov_1gfzkvig5h","actualCoverage","express","s","require","query","safeQuery","tablesExist","authenticateToken","createValidationMiddleware","rateLimitConfigs","sqlInjectionPrevention","xssPrevention","sanitizers","validator","router","Router","use","technicalValidationSchemas","technicalData","timeframe","required","type","sanitizer","value","f","string","maxLength","alphaNumOnly","includes","errorMessage","page","integer","min","max","defaultValue","b","limit","symbol","test","start_date","isDate","format","end_date","rsi_min","number","rsi_max","macd_min","macd_max","sma_min","sma_max","api","get","req","res","json","status","endpoint","timestamp","Date","toISOString","validated","offset","console","log","whereClause","params","paramIndex","trim","push","toUpperCase","undefined","tableName","tableStatusCheck","success","data","pagination","total","totalPages","hasNext","hasPrev","metadata","filters","message","countQuery","countResult","parseInt","rows","dataQuery","finalParams","dataResult","Math","ceil","Array","isArray","length","maxLimit","error","tableExists","exists","summaryQuery","summaryResult","summary","topSymbolsQuery","topSymbolsResult","totalRecords","total_records","uniqueSymbols","unique_symbols","dateRange","earliest","earliest_date","latest","latest_date","averages","rsi","avg_rsi","parseFloat","toFixed","macd","avg_macd","sma20","avg_sma_20","volume","avg_volume","topSymbols","map","row","recordCount","record_count","details","validTimeframes","join","latestQuery","result","count","indicatorsQuery","days","historyQuery","period_days","recentData","slice","highs","d","high","filter","h","lows","low","l","resistance","support","current_price","close","support_levels","level","strength","bbands_lower","sma_200","resistance_levels","bbands_upper","sma_50","last_updated","date","startDate","endDate","sortBy","sortOrder","validSortFields","safeSortBy","safeSortOrder","toLowerCase","sorting","module","exports"],"sources":["technical.js"],"sourcesContent":["const express = require('express');\nconst { query, safeQuery, tablesExist } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { \n  createValidationMiddleware, \n  rateLimitConfigs, \n  sqlInjectionPrevention, \n  xssPrevention,\n  sanitizers\n} = require('../middleware/validation');\nconst validator = require('validator');\n\nconst router = express.Router();\n\n// Apply authentication to all technical analysis routes\nrouter.use(authenticateToken);\n\n// Technical analysis validation schemas\nconst technicalValidationSchemas = {\n  technicalData: {\n    timeframe: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, alphaNumOnly: true }),\n      validator: (value) => ['daily', 'weekly', 'monthly'].includes(value),\n      errorMessage: 'Timeframe must be one of: daily, weekly, monthly'\n    },\n    page: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 10000, defaultValue: 1 }),\n      validator: (value) => value >= 1 && value <= 10000,\n      errorMessage: 'Page must be between 1 and 10,000'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 200, defaultValue: 50 }),\n      validator: (value) => value >= 1 && value <= 200,\n      errorMessage: 'Limit must be between 1 and 200'\n    },\n    symbol: {\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => !value || /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    start_date: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'Start date must be in YYYY-MM-DD format'\n    },\n    end_date: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'End date must be in YYYY-MM-DD format'\n    },\n    rsi_min: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 100 }),\n      validator: (value) => !value || (value >= 0 && value <= 100),\n      errorMessage: 'RSI minimum must be between 0 and 100'\n    },\n    rsi_max: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 100 }),\n      validator: (value) => !value || (value >= 0 && value <= 100),\n      errorMessage: 'RSI maximum must be between 0 and 100'\n    },\n    macd_min: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: -1000, max: 1000 }),\n      validator: (value) => !value || (value >= -1000 && value <= 1000),\n      errorMessage: 'MACD minimum must be between -1000 and 1000'\n    },\n    macd_max: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: -1000, max: 1000 }),\n      validator: (value) => !value || (value >= -1000 && value <= 1000),\n      errorMessage: 'MACD maximum must be between -1000 and 1000'\n    },\n    sma_min: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 100000 }),\n      validator: (value) => !value || (value >= 0 && value <= 100000),\n      errorMessage: 'SMA minimum must be between 0 and 100,000'\n    },\n    sma_max: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, max: 100000 }),\n      validator: (value) => !value || (value >= 0 && value <= 100000),\n      errorMessage: 'SMA maximum must be between 0 and 100,000'\n    }\n  }\n};\n\n// Apply security middleware to all technical routes\nrouter.use(sqlInjectionPrevention);\nrouter.use(xssPrevention);\nrouter.use(rateLimitConfigs.api);\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'technical',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Main technical data endpoint - timeframe-based (daily, weekly, monthly)\nrouter.get('/:timeframe', createValidationMiddleware(technicalValidationSchemas.technicalData), async (req, res) => {\n  try {\n    const { timeframe, page, limit, symbol, start_date, end_date, rsi_min, rsi_max, macd_min, macd_max, sma_min, sma_max } = req.validated;\n    \n    const offset = (page - 1) * limit;\n    console.log(`📊 Technical data request: ${timeframe}, page ${page}, limit ${limit}`);\n\n    // Build WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter\n    if (symbol && symbol.trim()) {\n      whereClause += ` AND symbol = $${paramIndex}`;\n      params.push(symbol.toUpperCase());\n      paramIndex++;\n    }\n\n    // Date filters\n    if (start_date) {\n      whereClause += ` AND date >= $${paramIndex}`;\n      params.push(start_date);\n      paramIndex++;\n    }\n\n    if (end_date) {\n      whereClause += ` AND date <= $${paramIndex}`;\n      params.push(end_date);\n      paramIndex++;\n    }\n\n    // Technical indicator filters (using validated and sanitized values)\n    if (rsi_min !== undefined && rsi_min !== null) {\n      whereClause += ` AND rsi >= $${paramIndex}`;\n      params.push(rsi_min);\n      paramIndex++;\n    }\n\n    if (rsi_max !== undefined && rsi_max !== null) {\n      whereClause += ` AND rsi <= $${paramIndex}`;\n      params.push(rsi_max);\n      paramIndex++;\n    }\n\n    if (macd_min !== undefined && macd_min !== null) {\n      whereClause += ` AND macd >= $${paramIndex}`;\n      params.push(macd_min);\n      paramIndex++;\n    }\n\n    if (macd_max !== undefined && macd_max !== null) {\n      whereClause += ` AND macd <= $${paramIndex}`;\n      params.push(macd_max);\n      paramIndex++;\n    }\n\n    if (sma_min !== undefined && sma_min !== null) {\n      whereClause += ` AND sma_20 >= $${paramIndex}`;\n      params.push(sma_min);\n      paramIndex++;\n    }\n\n    if (sma_max !== undefined && sma_max !== null) {\n      whereClause += ` AND sma_20 <= $${paramIndex}`;\n      params.push(sma_max);\n      paramIndex++;\n    }\n\n    // Determine table name based on timeframe\n    const tableName = `technical_data_${timeframe}`;\n\n    // Check if table exists using enhanced table checking\n    const tableStatusCheck = await tablesExist([tableName]);\n    \n    if (!tableStatusCheck[tableName]) {\n      console.log(`Technical data table for ${timeframe} timeframe not found, returning empty data`);\n      return res.json({\n        success: true,\n        data: [],\n        pagination: {\n          page: page,\n          limit: limit,\n          total: 0,\n          totalPages: 0,\n          hasNext: false,\n          hasPrev: false\n        },\n        metadata: {\n          timeframe,\n          filters: {\n            symbol: symbol || null,\n            start_date: start_date || null,\n            end_date: end_date || null,\n            rsi_min: rsi_min || null,\n            rsi_max: rsi_max || null,\n            macd_min: macd_min || null,\n            macd_max: macd_max || null,\n            sma_min: sma_min || null,\n            sma_max: sma_max || null\n          },\n          message: `No ${timeframe} technical data available`\n        }\n      });\n    }\n\n    // Get total count\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM ${tableName}\n      ${whereClause}\n    `;\n    const countResult = await query(countQuery, params);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Get technical data - updated to match actual table structure\n    const dataQuery = `\n      SELECT \n        symbol,\n        date,\n        rsi,\n        macd,\n        macd_signal,\n        macd_hist,\n        mom,\n        roc,\n        adx,\n        plus_di,\n        minus_di,\n        atr,\n        ad,\n        cmf,\n        mfi,\n        td_sequential,\n        td_combo,\n        marketwatch,\n        dm,\n        sma_10,\n        sma_20,\n        sma_50,\n        sma_150,\n        sma_200,\n        ema_4,\n        ema_9,\n        ema_21,\n        bbands_lower,\n        bbands_middle,\n        bbands_upper,\n        pivot_high,\n        pivot_low,\n        pivot_high_triggered,\n        pivot_low_triggered,\n        fetched_at\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY date DESC, symbol\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    const finalParams = [...params, limit, offset];\n    const dataResult = await query(dataQuery, finalParams);\n\n    const totalPages = Math.ceil(total / limit);\n\n    if (!dataResult || !Array.isArray(dataResult.rows) || dataResult.rows.length === 0) {\n      return res.json({\n        success: true,\n        data: [],\n        pagination: {\n          page: parseInt(page),\n          limit: maxLimit,\n          total: 0,\n          totalPages: 0,\n          hasNext: false,\n          hasPrev: false\n        },\n        metadata: {\n          timeframe,\n          filters: {\n            symbol: symbol || null,\n            start_date: start_date || null,\n            end_date: end_date || null,\n            rsi_min: rsi_min || null,\n            rsi_max: rsi_max || null,\n            macd_min: macd_min || null,\n            macd_max: macd_max || null,\n            sma_min: sma_min || null,\n            sma_max: sma_max || null\n          }\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      data: dataResult.rows,\n      pagination: {\n        page: parseInt(page),\n        limit: maxLimit,\n        total,\n        totalPages,\n        hasNext: parseInt(page) < totalPages,\n        hasPrev: parseInt(page) > 1\n      },\n      metadata: {\n        timeframe,\n        filters: {\n          symbol: symbol || null,\n          start_date: start_date || null,\n          end_date: end_date || null,\n          rsi_min: rsi_min || null,\n          rsi_max: rsi_max || null,\n          macd_min: macd_min || null,\n          macd_max: macd_max || null,\n          sma_min: sma_min || null,\n          sma_max: sma_max || null\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Technical data error:', error);\n    return res.json({\n      success: false,\n      data: [],\n      pagination: {\n        page: parseInt(page) || 1,\n        limit: parseInt(limit) || 50,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false\n      },\n      metadata: {\n        timeframe,\n        error: error.message\n      }\n    });\n  }\n});\n\n// Technical summary endpoint\nrouter.get('/:timeframe/summary', async (req, res) => {\n  const { timeframe } = req.params;\n  \n  // console.log(`Technical summary endpoint called for timeframe: ${timeframe}`);\n\n  try {\n    const tableName = `technical_data_${timeframe}`;\n\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );\n    `, [tableName]);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table for ${timeframe} timeframe not found`);\n      return res.status(404).json({\n        success: false,\n        error: `Technical data table for ${timeframe} timeframe not available`,\n        message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`\n      });\n    }\n\n    // Get summary statistics\n    const summaryQuery = `\n      SELECT \n        COUNT(*) as total_records,\n        COUNT(DISTINCT symbol) as unique_symbols,\n        MIN(date) as earliest_date,\n        MAX(date) as latest_date,\n        AVG(rsi) as avg_rsi,\n        AVG(macd) as avg_macd,\n        AVG(sma_20) as avg_sma_20,\n        AVG(volume) as avg_volume\n      FROM ${tableName}\n      WHERE rsi IS NOT NULL OR macd IS NOT NULL\n    `;\n\n    const summaryResult = await query(summaryQuery);\n    const summary = summaryResult.rows[0];\n\n    // Get top symbols by record count\n    const topSymbolsQuery = `\n      SELECT symbol, COUNT(*) as record_count\n      FROM ${tableName}\n      GROUP BY symbol\n      ORDER BY record_count DESC\n      LIMIT 10\n    `;\n\n    const topSymbolsResult = await query(topSymbolsQuery);\n\n    res.json({\n      timeframe,\n      summary: {\n        totalRecords: parseInt(summary.total_records),\n        uniqueSymbols: parseInt(summary.unique_symbols),\n        dateRange: {\n          earliest: summary.earliest_date,\n          latest: summary.latest_date\n        },\n        averages: {\n          rsi: summary.avg_rsi ? parseFloat(summary.avg_rsi).toFixed(2) : null,\n          macd: summary.avg_macd ? parseFloat(summary.avg_macd).toFixed(4) : null,\n          sma20: summary.avg_sma_20 ? parseFloat(summary.avg_sma_20).toFixed(2) : null,\n          volume: summary.avg_volume ? parseInt(summary.avg_volume) : null\n        }\n      },\n      topSymbols: topSymbolsResult.rows.map(row => ({\n        symbol: row.symbol,\n        recordCount: parseInt(row.record_count)\n      }))\n    });\n  } catch (error) {\n    console.error('Error fetching technical summary:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical summary',\n      details: error.message,\n      timeframe\n    });\n  }\n});\n\n// Root technical endpoint - defaults to daily data\nrouter.get('/', async (req, res) => {\n  try {\n    // Only fetch the latest technicals for each symbol (overview)\n    const timeframe = req.query.timeframe || 'daily';\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({\n        error: 'Unsupported timeframe',\n        message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n      });\n    }\n    const tableName = `technical_data_${timeframe}`;\n    \n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );\n    `, [tableName]);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table for ${timeframe} timeframe not found`);\n      return res.status(404).json({\n        success: false,\n        error: `Technical data table for ${timeframe} timeframe not available`,\n        message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`,\n        timeframe\n      });\n    }\n    \n    // Subquery to get latest date per symbol\n    const latestQuery = `\n      SELECT t1.* FROM ${tableName} t1\n      INNER JOIN (\n        SELECT symbol, MAX(date) AS max_date\n        FROM ${tableName}\n        GROUP BY symbol\n      ) t2 ON t1.symbol = t2.symbol AND t1.date = t2.max_date\n      LEFT JOIN stock_symbols ss ON t1.symbol = ss.symbol\n      ORDER BY t1.symbol ASC\n      LIMIT 500\n    `;\n    const result = await query(latestQuery);\n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      metadata: {\n        timeframe,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('Error in technical overview endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical overview',\n      details: error.message,\n      timeframe: req.query.timeframe || 'daily'\n    });\n  }\n});\n\n// Get technical data for a specific symbol\nrouter.get('/data/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`📊 [TECHNICAL] Fetching technical data for ${symbol}`);\n  \n  try {\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'technical_data_daily'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table not found for ${symbol}`);\n      return res.status(404).json({\n        success: false,\n        error: 'Technical data table not available',\n        message: 'Technical data table does not exist. Please ensure technical data has been loaded.',\n        symbol: symbol.toUpperCase()\n      });\n    }\n\n    // Get latest technical data for the symbol\n    const dataQuery = `\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        rsi,\n        macd,\n        macd_signal,\n        macd_histogram,\n        sma_20,\n        sma_50,\n        ema_12,\n        ema_26,\n        bollinger_upper,\n        bollinger_lower,\n        bollinger_middle,\n        stochastic_k,\n        stochastic_d,\n        williams_r,\n        cci,\n        adx,\n        atr,\n        obv,\n        mfi,\n        roc,\n        momentum\n      FROM technical_data_daily\n      WHERE symbol = $1\n      ORDER BY date DESC\n      LIMIT 1\n    `;\n\n    const result = await query(dataQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No technical data found for symbol ${symbol}`\n      });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows[0],\n      symbol: symbol.toUpperCase()\n    });\n  } catch (error) {\n    console.error(`❌ [TECHNICAL] Error fetching technical data for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical data',\n      details: error.message,\n      symbol: symbol.toUpperCase()\n    });\n  }\n});\n\n// Get technical indicators for a specific symbol\nrouter.get('/indicators/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  console.log(`📈 [TECHNICAL] Fetching technical indicators for ${symbol}`);\n  \n  try {\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'technical_data_daily'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table not found for ${symbol}`);\n      return res.status(404).json({\n        success: false,\n        error: 'Technical data table not available',\n        message: 'Technical data table does not exist. Please ensure technical data has been loaded.',\n        symbol: symbol.toUpperCase()\n      });\n    }\n\n    // Get latest technical indicators for the symbol\n    const indicatorsQuery = `\n      SELECT \n        symbol,\n        date,\n        rsi,\n        macd,\n        macd_signal,\n        macd_histogram,\n        sma_20,\n        sma_50,\n        ema_12,\n        ema_26,\n        bollinger_upper,\n        bollinger_lower,\n        bollinger_middle,\n        stochastic_k,\n        stochastic_d,\n        williams_r,\n        cci,\n        adx,\n        atr,\n        obv,\n        mfi,\n        roc,\n        momentum\n      FROM technical_data_daily\n      WHERE symbol = $1\n      ORDER BY date DESC\n      LIMIT 30\n    `;\n\n    const result = await query(indicatorsQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No technical indicators found for symbol ${symbol}`\n      });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      symbol: symbol.toUpperCase()\n    });\n  } catch (error) {\n    console.error(`❌ [TECHNICAL] Error fetching technical indicators for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical indicators',\n      details: error.message,\n      symbol: symbol.toUpperCase()\n    });\n  }\n});\n\n// Get technical history for a specific symbol\nrouter.get('/history/:symbol', async (req, res) => {\n  const { symbol } = req.params;\n  const { days = 90 } = req.query;\n  console.log(`📊 [TECHNICAL] Fetching technical history for ${symbol} (${days} days)`);\n  \n  try {\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = 'technical_data_daily'\n      );\n    `, []);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table not found for ${symbol}`);\n      return res.status(404).json({\n        success: false,\n        error: 'Technical data table not available',\n        message: 'Technical data table does not exist. Please ensure technical data has been loaded.',\n        symbol: symbol.toUpperCase()\n      });\n    }\n\n    // Get technical history for the symbol\n    const historyQuery = `\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        rsi,\n        macd,\n        macd_signal,\n        macd_histogram,\n        sma_20,\n        sma_50,\n        ema_12,\n        ema_26,\n        bollinger_upper,\n        bollinger_lower,\n        bollinger_middle,\n        stochastic_k,\n        stochastic_d,\n        williams_r,\n        cci,\n        adx,\n        atr,\n        obv,\n        mfi,\n        roc,\n        momentum\n      FROM technical_data_daily\n      WHERE symbol = $1\n        AND date >= CURRENT_DATE - INTERVAL '${days} days'\n      ORDER BY date ASC\n    `;\n\n    const result = await query(historyQuery, [symbol.toUpperCase()]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: `No technical history found for symbol ${symbol}`\n      });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      symbol: symbol.toUpperCase(),\n      period_days: days\n    });\n  } catch (error) {\n    console.error(`❌ [TECHNICAL] Error fetching technical history for ${symbol}:`, error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical history',\n      details: error.message,\n      symbol: symbol.toUpperCase()\n    });\n  }\n});\n\n// Get support and resistance levels for a symbol\nrouter.get('/support-resistance/:symbol', async (req, res) => {\n  try {\n    const { symbol } = req.params;\n    const { timeframe = 'daily' } = req.query;\n    \n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({\n        error: 'Unsupported timeframe',\n        message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n      });\n    }\n    \n    const tableName = `technical_data_${timeframe}`;\n    \n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );\n    `, [tableName]);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table for ${timeframe} timeframe not found for ${symbol}`);\n      return res.status(404).json({\n        success: false,\n        error: `Technical data table for ${timeframe} timeframe not available`,\n        message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`,\n        symbol: symbol.toUpperCase(),\n        timeframe\n      });\n    }\n    \n    // Get recent price data and pivot points\n    const query = `\n      SELECT \n        symbol,\n        date,\n        high,\n        low,\n        close,\n        pivot_high,\n        pivot_low,\n        bbands_upper,\n        bbands_lower,\n        sma_20,\n        sma_50,\n        sma_200\n      FROM ${tableName}\n      WHERE symbol = $1\n      ORDER BY date DESC\n      LIMIT 50\n    `;\n    \n    const result = await query(query, [symbol.toUpperCase()]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'No technical data found for symbol' });\n    }\n    \n    // Calculate support and resistance levels\n    const latest = result.rows[0];\n    const recentData = result.rows.slice(0, 20); // Last 20 periods\n    \n    const highs = recentData.map(d => d.high).filter(h => h !== null);\n    const lows = recentData.map(d => d.low).filter(l => l !== null);\n    \n    const resistance = Math.max(...highs);\n    const support = Math.min(...lows);\n    \n    res.json({\n      symbol: symbol.toUpperCase(),\n      timeframe,\n      current_price: latest.close,\n      support_levels: [\n        { level: support, type: 'dynamic', strength: 'strong' },\n        { level: latest.bbands_lower, type: 'bollinger', strength: 'medium' },\n        { level: latest.sma_200, type: 'moving_average', strength: 'strong' }\n      ],\n      resistance_levels: [\n        { level: resistance, type: 'dynamic', strength: 'strong' },\n        { level: latest.bbands_upper, type: 'bollinger', strength: 'medium' },\n        { level: latest.sma_50, type: 'moving_average', strength: 'medium' }\n      ],\n      last_updated: latest.date\n    });\n  } catch (error) {\n    console.error('Error fetching support resistance levels:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch support resistance levels',\n      details: error.message,\n      symbol: req.params.symbol.toUpperCase(),\n      timeframe: req.query.timeframe || 'daily'\n    });\n  }\n});\n\n// Get technical data with filtering and pagination\nrouter.get('/data', async (req, res) => {\n  const { \n    symbol,\n    timeframe = 'daily',\n    limit = 25,\n    page = 1,\n    startDate,\n    endDate,\n    sortBy = 'date',\n    sortOrder = 'desc'\n  } = req.query;\n\n  console.log(`📊 [TECHNICAL] Fetching technical data with params:`, {\n    symbol, timeframe, limit, page, startDate, endDate, sortBy, sortOrder\n  });\n\n  try {\n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    const maxLimit = Math.min(parseInt(limit), 200);\n\n    // Build WHERE clause\n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramIndex = 1;\n\n    // Symbol filter\n    if (symbol && symbol.trim()) {\n      whereClause += ` AND symbol = $${paramIndex}`;\n      params.push(symbol.toUpperCase());\n      paramIndex++;\n    }\n\n    // Date filters\n    if (startDate) {\n      whereClause += ` AND date >= $${paramIndex}`;\n      params.push(startDate);\n      paramIndex++;\n    }\n\n    if (endDate) {\n      whereClause += ` AND date <= $${paramIndex}`;\n      params.push(endDate);\n      paramIndex++;\n    }\n\n    // Determine table name based on timeframe\n    const validTimeframes = ['daily', 'weekly', 'monthly'];\n    if (!validTimeframes.includes(timeframe)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid timeframe',\n        message: `Supported timeframes: ${validTimeframes.join(', ')}, got: ${timeframe}`\n      });\n    }\n\n    const tableName = `technical_data_${timeframe}`;\n\n    // Check if table exists\n    const tableExists = await query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_schema = 'public' \n        AND table_name = $1\n      );\n    `, [tableName]);\n\n    if (!tableExists.rows[0].exists) {\n      console.log(`Technical data table for ${timeframe} timeframe not found`);\n      return res.status(404).json({\n        success: false,\n        error: `Technical data table for ${timeframe} timeframe not available`,\n        message: `Table ${tableName} does not exist. Please ensure technical data has been loaded.`,\n        timeframe\n      });\n    }\n\n    // Get total count\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM ${tableName}\n      ${whereClause}\n    `;\n    const countResult = await query(countQuery, params);\n    const total = parseInt(countResult.rows[0].total);\n\n    // Validate sortBy field\n    const validSortFields = [\n      'date', 'symbol', 'open', 'high', 'low', 'close', 'volume',\n      'rsi', 'macd', 'macd_signal', 'macd_histogram', 'sma_20', 'sma_50',\n      'ema_12', 'ema_26', 'bollinger_upper', 'bollinger_lower', 'bollinger_middle'\n    ];\n    const safeSortBy = validSortFields.includes(sortBy) ? sortBy : 'date';\n    const safeSortOrder = sortOrder.toLowerCase() === 'asc' ? 'ASC' : 'DESC';\n\n    // Get technical data\n    const dataQuery = `\n      SELECT \n        symbol,\n        date,\n        open,\n        high,\n        low,\n        close,\n        volume,\n        rsi,\n        macd,\n        macd_signal,\n        macd_histogram,\n        sma_10,\n        sma_20,\n        sma_50,\n        sma_150,\n        sma_200,\n        ema_4,\n        ema_9,\n        ema_21,\n        ema_12,\n        ema_26,\n        bollinger_upper,\n        bollinger_lower,\n        bollinger_middle,\n        stochastic_k,\n        stochastic_d,\n        williams_r,\n        cci,\n        adx,\n        atr,\n        obv,\n        mfi,\n        roc,\n        momentum,\n        ad,\n        cmf,\n        td_sequential,\n        td_combo,\n        marketwatch,\n        dm,\n        pivot_high,\n        pivot_low,\n        pivot_high_triggered,\n        pivot_low_triggered\n      FROM ${tableName}\n      ${whereClause}\n      ORDER BY ${safeSortBy} ${safeSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n\n    const finalParams = [...params, maxLimit, offset];\n    const dataResult = await query(dataQuery, finalParams);\n\n    const totalPages = Math.ceil(total / maxLimit);\n\n    console.log(`✅ [TECHNICAL] Data query completed: ${dataResult.rows.length} results, total: ${total}`);\n\n    if (!dataResult || !Array.isArray(dataResult.rows) || dataResult.rows.length === 0) {\n      return res.json({\n        success: true,\n        data: [],\n        total: 0,\n        pagination: {\n          page: parseInt(page),\n          limit: maxLimit,\n          total: 0,\n          totalPages: 0,\n          hasNext: false,\n          hasPrev: false\n        },\n        filters: {\n          symbol: symbol || null,\n          timeframe,\n          startDate: startDate || null,\n          endDate: endDate || null\n        },\n        sorting: {\n          sortBy: safeSortBy,\n          sortOrder: safeSortOrder\n        }\n      });\n    }\n\n    res.json({\n      success: true,\n      data: dataResult.rows,\n      total: total,\n      pagination: {\n        page: parseInt(page),\n        limit: maxLimit,\n        total,\n        totalPages,\n        hasNext: parseInt(page) < totalPages,\n        hasPrev: parseInt(page) > 1\n      },\n      filters: {\n        symbol: symbol || null,\n        timeframe,\n        startDate: startDate || null,\n        endDate: endDate || null\n      },\n      sorting: {\n        sortBy: safeSortBy,\n        sortOrder: safeSortOrder\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ [TECHNICAL] Technical data error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch technical data',\n      details: error.message,\n      timeframe\n    });\n  }\n});\n\nmodule.exports = router;\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAY,CAAC;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtE,MAAM;EAAEI;AAAkB,CAAC;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAM;EACJK,0BAA0B;EAC1BC,gBAAgB;EAChBC,sBAAsB;EACtBC,aAAa;EACbC;AACF,CAAC;AAAA;AAAA,CAAAb,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AACvC,MAAMU,SAAS;AAAA;AAAA,CAAAd,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,WAAW,CAAC;AAEtC,MAAMW,MAAM;AAAA;AAAA,CAAAf,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACc,MAAM,CAAC,CAAC;;AAE/B;AAAA;AAAAhB,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACE,GAAG,CAACT,iBAAiB,CAAC;;AAE7B;AACA,MAAMU,0BAA0B;AAAA;AAAA,CAAAlB,cAAA,GAAAG,CAAA,OAAG;EACjCgB,aAAa,EAAE;IACbC,SAAS,EAAE;MACTC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACa,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE,EAAE;UAAEC,YAAY,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACrFd,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,QAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC0B,QAAQ,CAACL,KAAK,CAAC;MAAD,CAAC;MACpEM,YAAY,EAAE;IAChB,CAAC;IACDC,IAAI,EAAE;MACJT,IAAI,EAAE,SAAS;MACfC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACmB,OAAO,CAACR,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,KAAK;UAAEC,YAAY,EAAE;QAAE,CAAC,CAAC;MAAD,CAAC;MACxFrB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,KAAK;MAAD,CAAC;MAClDM,YAAY,EAAE;IAChB,CAAC;IACDO,KAAK,EAAE;MACLf,IAAI,EAAE,SAAS;MACfC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACmB,OAAO,CAACR,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,GAAG;UAAEC,YAAY,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACvFrB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,GAAG;MAAD,CAAC;MAChDM,YAAY,EAAE;IAChB,CAAC;IACDQ,MAAM,EAAE;MACNhB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAEV,UAAU,CAACyB,MAAM;MAC5BxB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAI,eAAe,CAACG,IAAI,CAACf,KAAK,CAAC;MAAD,CAAC;MAC3DM,YAAY,EAAE;IAChB,CAAC;IACDU,UAAU,EAAE;MACVlB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACa,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACjEb,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAItB,SAAS,CAAC2B,MAAM,CAACjB,KAAK,EAAE;UAAEkB,MAAM,EAAE;QAAa,CAAC,CAAC;MAAD,CAAC;MACjFZ,YAAY,EAAE;IAChB,CAAC;IACDa,QAAQ,EAAE;MACRrB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACa,MAAM,CAACF,KAAK,EAAE;UAAEG,SAAS,EAAE;QAAG,CAAC,CAAC;MAAD,CAAC;MACjEb,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAItB,SAAS,CAAC2B,MAAM,CAACjB,KAAK,EAAE;UAAEkB,MAAM,EAAE;QAAa,CAAC,CAAC;MAAD,CAAC;MACjFZ,YAAY,EAAE;IAChB,CAAC;IACDc,OAAO,EAAE;MACPtB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAI,CAAC,CAAC;MAAD,CAAC;MACpEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,GAAG,CAAC;MAAD,CAAC;MAC5DM,YAAY,EAAE;IAChB,CAAC;IACDgB,OAAO,EAAE;MACPxB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAI,CAAC,CAAC;MAAD,CAAC;MACpEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,GAAG,CAAC;MAAD,CAAC;MAC5DM,YAAY,EAAE;IAChB,CAAC;IACDiB,QAAQ,EAAE;MACRzB,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC,IAAI;UAAEC,GAAG,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACzEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC,IAAI;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,IAAI,CAAC;MAAD,CAAC;MACjEM,YAAY,EAAE;IAChB,CAAC;IACDkB,QAAQ,EAAE;MACR1B,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC,IAAI;UAAEC,GAAG,EAAE;QAAK,CAAC,CAAC;MAAD,CAAC;MACzEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC,IAAI;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,IAAI,CAAC;MAAD,CAAC;MACjEM,YAAY,EAAE;IAChB,CAAC;IACDmB,OAAO,EAAE;MACP3B,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAO,CAAC,CAAC;MAAD,CAAC;MACvEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,WAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,UAAIZ,KAAK,IAAI,MAAM,CAAC;MAAD,CAAC;MAC/DM,YAAY,EAAE;IAChB,CAAC;IACDoB,OAAO,EAAE;MACP5B,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAGC,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,OAAAU,UAAU,CAACgC,MAAM,CAACrB,KAAK,EAAE;UAAES,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAO,CAAC,CAAC;MAAD,CAAC;MACvEpB,SAAS,EAAGU,KAAK,IAAK;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA,kCAAAH,cAAA,GAAAoC,CAAA,YAACZ,KAAK;QAAK;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,WAAAZ,KAAK,IAAI,CAAC;QAAA;QAAA,CAAAxB,cAAA,GAAAoC,CAAA,WAAIZ,KAAK,IAAI,MAAM,CAAC;MAAD,CAAC;MAC/DM,YAAY,EAAE;IAChB;EACF;AACF,CAAC;;AAED;AAAA;AAAA9B,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACE,GAAG,CAACN,sBAAsB,CAAC;AAAC;AAAAX,cAAA,GAAAG,CAAA;AACnCY,MAAM,CAACE,GAAG,CAACL,aAAa,CAAC;AAAC;AAAAZ,cAAA,GAAAG,CAAA;AAC1BY,MAAM,CAACE,GAAG,CAACP,gBAAgB,CAACyC,GAAG,CAAC;;AAEhC;AAAA;AAAAnD,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,OAAO,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EAAAzB,cAAA,GAAAG,CAAA;EAChCmD,GAAG,CAACC,IAAI,CAAC;IACPC,MAAM,EAAE,IAAI;IACZC,QAAQ,EAAE,WAAW;IACrBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AAAA;AAAA5D,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,aAAa,EAAE3C,0BAA0B,CAACS,0BAA0B,CAACC,aAAa,CAAC,EAAE,OAAOkC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EAAAzB,cAAA,GAAAG,CAAA;EAClH,IAAI;IACF,MAAM;MAAEiB,SAAS;MAAEW,IAAI;MAAEM,KAAK;MAAEC,MAAM;MAAEE,UAAU;MAAEG,QAAQ;MAAEC,OAAO;MAAEE,OAAO;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,OAAO;MAAEC;IAAQ,CAAC;IAAA;IAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAGkD,GAAG,CAACQ,SAAS;IAEtI,MAAMC,MAAM;IAAA;IAAA,CAAA9D,cAAA,GAAAG,CAAA,QAAG,CAAC4B,IAAI,GAAG,CAAC,IAAIM,KAAK;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAClC4D,OAAO,CAACC,GAAG,CAAC,8BAA8B5C,SAAS,UAAUW,IAAI,WAAWM,KAAK,EAAE,CAAC;;IAEpF;IACA,IAAI4B,WAAW;IAAA;IAAA,CAAAjE,cAAA,GAAAG,CAAA,QAAG,WAAW;IAC7B,MAAM+D,MAAM;IAAA;IAAA,CAAAlE,cAAA,GAAAG,CAAA,QAAG,EAAE;IACjB,IAAIgE,UAAU;IAAA;IAAA,CAAAnE,cAAA,GAAAG,CAAA,QAAG,CAAC;;IAElB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAE,MAAM;IAAA;IAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAIE,MAAM,CAAC8B,IAAI,CAAC,CAAC,GAAE;MAAA;MAAApE,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC3B8D,WAAW,IAAI,kBAAkBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC9C+D,MAAM,CAACG,IAAI,CAAC/B,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC;MAAC;MAAAtE,cAAA,GAAAG,CAAA;MAClCgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IAAApC,cAAA,GAAAG,CAAA;IACA,IAAIqC,UAAU,EAAE;MAAA;MAAAxC,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACd8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAAC7B,UAAU,CAAC;MAAC;MAAAxC,cAAA,GAAAG,CAAA;MACxBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED,IAAIwC,QAAQ,EAAE;MAAA;MAAA3C,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACZ8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAAC1B,QAAQ,CAAC;MAAC;MAAA3C,cAAA,GAAAG,CAAA;MACtBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IAAApC,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAQ,OAAO,KAAK2B,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIQ,OAAO,KAAK,IAAI,GAAE;MAAA;MAAA5C,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC7C8D,WAAW,IAAI,gBAAgBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC5C+D,MAAM,CAACG,IAAI,CAACzB,OAAO,CAAC;MAAC;MAAA5C,cAAA,GAAAG,CAAA;MACrBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAU,OAAO,KAAKyB,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIU,OAAO,KAAK,IAAI,GAAE;MAAA;MAAA9C,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC7C8D,WAAW,IAAI,gBAAgBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC5C+D,MAAM,CAACG,IAAI,CAACvB,OAAO,CAAC;MAAC;MAAA9C,cAAA,GAAAG,CAAA;MACrBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAW,QAAQ,KAAKwB,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIW,QAAQ,KAAK,IAAI,GAAE;MAAA;MAAA/C,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/C8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAACtB,QAAQ,CAAC;MAAC;MAAA/C,cAAA,GAAAG,CAAA;MACtBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAY,QAAQ,KAAKuB,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIY,QAAQ,KAAK,IAAI,GAAE;MAAA;MAAAhD,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/C8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAACrB,QAAQ,CAAC;MAAC;MAAAhD,cAAA,GAAAG,CAAA;MACtBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAa,OAAO,KAAKsB,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIa,OAAO,KAAK,IAAI,GAAE;MAAA;MAAAjD,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC7C8D,WAAW,IAAI,mBAAmBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC/C+D,MAAM,CAACG,IAAI,CAACpB,OAAO,CAAC;MAAC;MAAAjD,cAAA,GAAAG,CAAA;MACrBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAc,OAAO,KAAKqB,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoC,CAAA,WAAIc,OAAO,KAAK,IAAI,GAAE;MAAA;MAAAlD,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC7C8D,WAAW,IAAI,mBAAmBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC/C+D,MAAM,CAACG,IAAI,CAACnB,OAAO,CAAC;MAAC;MAAAlD,cAAA,GAAAG,CAAA;MACrBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMoC,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,QAAG,kBAAkBiB,SAAS,EAAE;;IAE/C;IACA,MAAMqD,gBAAgB;IAAA;IAAA,CAAAzE,cAAA,GAAAG,CAAA,QAAG,MAAMI,WAAW,CAAC,CAACiE,SAAS,CAAC,CAAC;IAAC;IAAAxE,cAAA,GAAAG,CAAA;IAExD,IAAI,CAACsE,gBAAgB,CAACD,SAAS,CAAC,EAAE;MAAA;MAAAxE,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAChC4D,OAAO,CAACC,GAAG,CAAC,4BAA4B5C,SAAS,4CAA4C,CAAC;MAAC;MAAApB,cAAA,GAAAG,CAAA;MAC/F,OAAOmD,GAAG,CAACC,IAAI,CAAC;QACdmB,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACV7C,IAAI,EAAEA,IAAI;UACVM,KAAK,EAAEA,KAAK;UACZwC,KAAK,EAAE,CAAC;UACRC,UAAU,EAAE,CAAC;UACbC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;QACDC,QAAQ,EAAE;UACR7D,SAAS;UACT8D,OAAO,EAAE;YACP5C,MAAM;YAAE;YAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAAE,MAAM;YAAA;YAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACtBI,UAAU;YAAE;YAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAAI,UAAU;YAAA;YAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC9BO,QAAQ;YAAE;YAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAAO,QAAQ;YAAA;YAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1BQ,OAAO;YAAE;YAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAAQ,OAAO;YAAA;YAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBU,OAAO;YAAE;YAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAAU,OAAO;YAAA;YAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBW,QAAQ;YAAE;YAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAAW,QAAQ;YAAA;YAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1BY,QAAQ;YAAE;YAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAAY,QAAQ;YAAA;YAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1Ba,OAAO;YAAE;YAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAAa,OAAO;YAAA;YAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBc,OAAO;YAAE;YAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAAc,OAAO;YAAA;YAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC1B,CAAC;UACD+C,OAAO,EAAE,MAAM/D,SAAS;QAC1B;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMgD,UAAU;IAAA;IAAA,CAAApF,cAAA,GAAAG,CAAA,QAAG;AACvB;AACA,aAAaqE,SAAS;AACtB,QAAQP,WAAW;AACnB,KAAK;IACD,MAAMoB,WAAW;IAAA;IAAA,CAAArF,cAAA,GAAAG,CAAA,QAAG,MAAME,KAAK,CAAC+E,UAAU,EAAElB,MAAM,CAAC;IACnD,MAAMW,KAAK;IAAA;IAAA,CAAA7E,cAAA,GAAAG,CAAA,QAAGmF,QAAQ,CAACD,WAAW,CAACE,IAAI,CAAC,CAAC,CAAC,CAACV,KAAK,CAAC;;IAEjD;IACA,MAAMW,SAAS;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,QAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaqE,SAAS;AACtB,QAAQP,WAAW;AACnB;AACA,eAAeE,UAAU,YAAYA,UAAU,GAAG,CAAC;AACnD,KAAK;IAED,MAAMsB,WAAW;IAAA;IAAA,CAAAzF,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAG+D,MAAM,EAAE7B,KAAK,EAAEyB,MAAM,CAAC;IAC9C,MAAM4B,UAAU;IAAA;IAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAG,MAAME,KAAK,CAACmF,SAAS,EAAEC,WAAW,CAAC;IAEtD,MAAMX,UAAU;IAAA;IAAA,CAAA9E,cAAA,GAAAG,CAAA,QAAGwF,IAAI,CAACC,IAAI,CAACf,KAAK,GAAGxC,KAAK,CAAC;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAE5C;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,YAACsD,UAAU;IAAA;IAAA,CAAA1F,cAAA,GAAAoC,CAAA,WAAI,CAACyD,KAAK,CAACC,OAAO,CAACJ,UAAU,CAACH,IAAI,CAAC;IAAA;IAAA,CAAAvF,cAAA,GAAAoC,CAAA,WAAIsD,UAAU,CAACH,IAAI,CAACQ,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAClF,OAAOmD,GAAG,CAACC,IAAI,CAAC;QACdmB,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE;UACV7C,IAAI,EAAEuD,QAAQ,CAACvD,IAAI,CAAC;UACpBM,KAAK,EAAE2D,QAAQ;UACfnB,KAAK,EAAE,CAAC;UACRC,UAAU,EAAE,CAAC;UACbC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;QACDC,QAAQ,EAAE;UACR7D,SAAS;UACT8D,OAAO,EAAE;YACP5C,MAAM;YAAE;YAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAAE,MAAM;YAAA;YAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACtBI,UAAU;YAAE;YAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAAI,UAAU;YAAA;YAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC9BO,QAAQ;YAAE;YAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAAO,QAAQ;YAAA;YAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1BQ,OAAO;YAAE;YAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAAQ,OAAO;YAAA;YAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBU,OAAO;YAAE;YAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAAU,OAAO;YAAA;YAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBW,QAAQ;YAAE;YAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAAW,QAAQ;YAAA;YAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1BY,QAAQ;YAAE;YAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAAY,QAAQ;YAAA;YAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAI,IAAI;YAC1Ba,OAAO;YAAE;YAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAAa,OAAO;YAAA;YAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAI,IAAI;YACxBc,OAAO;YAAE;YAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAAc,OAAO;YAAA;YAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC1B;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApC,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEe,UAAU,CAACH,IAAI;MACrBX,UAAU,EAAE;QACV7C,IAAI,EAAEuD,QAAQ,CAACvD,IAAI,CAAC;QACpBM,KAAK,EAAE2D,QAAQ;QACfnB,KAAK;QACLC,UAAU;QACVC,OAAO,EAAEO,QAAQ,CAACvD,IAAI,CAAC,GAAG+C,UAAU;QACpCE,OAAO,EAAEM,QAAQ,CAACvD,IAAI,CAAC,GAAG;MAC5B,CAAC;MACDkD,QAAQ,EAAE;QACR7D,SAAS;QACT8D,OAAO,EAAE;UACP5C,MAAM;UAAE;UAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAAE,MAAM;UAAA;UAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAI,IAAI;UACtBI,UAAU;UAAE;UAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAAI,UAAU;UAAA;UAAA,CAAAxC,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC9BO,QAAQ;UAAE;UAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAAO,QAAQ;UAAA;UAAA,CAAA3C,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC1BQ,OAAO;UAAE;UAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAAQ,OAAO;UAAA;UAAA,CAAA5C,cAAA,GAAAoC,CAAA,WAAI,IAAI;UACxBU,OAAO;UAAE;UAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAAU,OAAO;UAAA;UAAA,CAAA9C,cAAA,GAAAoC,CAAA,WAAI,IAAI;UACxBW,QAAQ;UAAE;UAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAAW,QAAQ;UAAA;UAAA,CAAA/C,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC1BY,QAAQ;UAAE;UAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAAY,QAAQ;UAAA;UAAA,CAAAhD,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC1Ba,OAAO;UAAE;UAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAAa,OAAO;UAAA;UAAA,CAAAjD,cAAA,GAAAoC,CAAA,WAAI,IAAI;UACxBc,OAAO;UAAE;UAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAAc,OAAO;UAAA;UAAA,CAAAlD,cAAA,GAAAoC,CAAA,WAAI,IAAI;QAC1B;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO6D,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IAC9C,OAAOmD,GAAG,CAACC,IAAI,CAAC;MACdmB,OAAO,EAAE,KAAK;MACdC,IAAI,EAAE,EAAE;MACRC,UAAU,EAAE;QACV7C,IAAI;QAAE;QAAA,CAAA/B,cAAA,GAAAoC,CAAA,WAAAkD,QAAQ,CAACvD,IAAI,CAAC;QAAA;QAAA,CAAA/B,cAAA,GAAAoC,CAAA,WAAI,CAAC;QACzBC,KAAK;QAAE;QAAA,CAAArC,cAAA,GAAAoC,CAAA,WAAAkD,QAAQ,CAACjD,KAAK,CAAC;QAAA;QAAA,CAAArC,cAAA,GAAAoC,CAAA,WAAI,EAAE;QAC5ByC,KAAK,EAAE,CAAC;QACRC,UAAU,EAAE,CAAC;QACbC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE;QACR7D,SAAS;QACT6E,KAAK,EAAEA,KAAK,CAACd;MACf;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAnF,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EACpD,MAAM;IAAEL;EAAU,CAAC;EAAA;EAAA,CAAApB,cAAA,GAAAG,CAAA,QAAGkD,GAAG,CAACa,MAAM;;EAEhC;EAAA;EAAAlE,cAAA,GAAAG,CAAA;EAEA,IAAI;IACF,MAAMqE,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,SAAG,kBAAkBiB,SAAS,EAAE;;IAE/C;IACA,MAAM8E,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACmE,SAAS,CAAC,CAAC;IAAC;IAAAxE,cAAA,GAAAG,CAAA;IAEhB,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,4BAA4B5C,SAAS,sBAAsB,CAAC;MAAC;MAAApB,cAAA,GAAAG,CAAA;MACzE,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,4BAA4B7E,SAAS,0BAA0B;QACtE+D,OAAO,EAAE,SAASX,SAAS;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAxE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMgE,YAAY;IAAA;IAAA,CAAApG,cAAA,GAAAG,CAAA,SAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaqE,SAAS;AACtB;AACA,KAAK;IAED,MAAM6B,aAAa;IAAA;IAAA,CAAArG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC+F,YAAY,CAAC;IAC/C,MAAME,OAAO;IAAA;IAAA,CAAAtG,cAAA,GAAAG,CAAA,SAAGkG,aAAa,CAACd,IAAI,CAAC,CAAC,CAAC;;IAErC;IACA,MAAMgB,eAAe;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAG;AAC5B;AACA,aAAaqE,SAAS;AACtB;AACA;AACA;AACA,KAAK;IAED,MAAMgC,gBAAgB;IAAA;IAAA,CAAAxG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACkG,eAAe,CAAC;IAAC;IAAAvG,cAAA,GAAAG,CAAA;IAEtDmD,GAAG,CAACC,IAAI,CAAC;MACPnC,SAAS;MACTkF,OAAO,EAAE;QACPG,YAAY,EAAEnB,QAAQ,CAACgB,OAAO,CAACI,aAAa,CAAC;QAC7CC,aAAa,EAAErB,QAAQ,CAACgB,OAAO,CAACM,cAAc,CAAC;QAC/CC,SAAS,EAAE;UACTC,QAAQ,EAAER,OAAO,CAACS,aAAa;UAC/BC,MAAM,EAAEV,OAAO,CAACW;QAClB,CAAC;QACDC,QAAQ,EAAE;UACRC,GAAG,EAAEb,OAAO,CAACc,OAAO;UAAA;UAAA,CAAApH,cAAA,GAAAoC,CAAA,WAAGiF,UAAU,CAACf,OAAO,CAACc,OAAO,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAtH,cAAA,GAAAoC,CAAA,WAAG,IAAI;UACpEmF,IAAI,EAAEjB,OAAO,CAACkB,QAAQ;UAAA;UAAA,CAAAxH,cAAA,GAAAoC,CAAA,WAAGiF,UAAU,CAACf,OAAO,CAACkB,QAAQ,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAtH,cAAA,GAAAoC,CAAA,WAAG,IAAI;UACvEqF,KAAK,EAAEnB,OAAO,CAACoB,UAAU;UAAA;UAAA,CAAA1H,cAAA,GAAAoC,CAAA,WAAGiF,UAAU,CAACf,OAAO,CAACoB,UAAU,CAAC,CAACJ,OAAO,CAAC,CAAC,CAAC;UAAA;UAAA,CAAAtH,cAAA,GAAAoC,CAAA,WAAG,IAAI;UAC5EuF,MAAM,EAAErB,OAAO,CAACsB,UAAU;UAAA;UAAA,CAAA5H,cAAA,GAAAoC,CAAA,WAAGkD,QAAQ,CAACgB,OAAO,CAACsB,UAAU,CAAC;UAAA;UAAA,CAAA5H,cAAA,GAAAoC,CAAA,WAAG,IAAI;QAClE;MACF,CAAC;MACDyF,UAAU,EAAErB,gBAAgB,CAACjB,IAAI,CAACuC,GAAG,CAACC,GAAG,IAAK;QAAA;QAAA/H,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QAAA;UAC5CmC,MAAM,EAAEyF,GAAG,CAACzF,MAAM;UAClB0F,WAAW,EAAE1C,QAAQ,CAACyC,GAAG,CAACE,YAAY;QACxC,CAAC;MAAD,CAAE;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IAC1DmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,mCAAmC;MAC1CiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB/D;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApB,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EAAAzB,cAAA,GAAAG,CAAA;EAClC,IAAI;IACF;IACA,MAAMiB,SAAS;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAiB,GAAG,CAAChD,KAAK,CAACe,SAAS;IAAA;IAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAI,OAAO;IAChD,MAAM+F,eAAe;IAAA;IAAA,CAAAnI,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAACgI,eAAe,CAACtG,QAAQ,CAACT,SAAS,CAAC,EAAE;MAAA;MAAApB,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACxC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1B0C,KAAK,EAAE,uBAAuB;QAC9Bd,OAAO,EAAE,yBAAyBgD,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,UAAUhH,SAAS;MACjF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;IACD,MAAMoC,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,SAAG,kBAAkBiB,SAAS,EAAE;;IAE/C;IACA,MAAM8E,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACmE,SAAS,CAAC,CAAC;IAAC;IAAAxE,cAAA,GAAAG,CAAA;IAEhB,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,4BAA4B5C,SAAS,sBAAsB,CAAC;MAAC;MAAApB,cAAA,GAAAG,CAAA;MACzE,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,4BAA4B7E,SAAS,0BAA0B;QACtE+D,OAAO,EAAE,SAASX,SAAS,gEAAgE;QAC3FpD;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMiG,WAAW;IAAA;IAAA,CAAArI,cAAA,GAAAG,CAAA,SAAG;AACxB,yBAAyBqE,SAAS;AAClC;AACA;AACA,eAAeA,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;IACD,MAAM8D,MAAM;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACgI,WAAW,CAAC;IAAC;IAAArI,cAAA,GAAAG,CAAA;IACxCmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE2D,MAAM,CAAC/C,IAAI;MACjBgD,KAAK,EAAED,MAAM,CAAC/C,IAAI,CAACQ,MAAM;MACzBd,QAAQ,EAAE;QACR7D,SAAS;QACTsC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOqC,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IAC9DmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,oCAAoC;MAC3CiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB/D,SAAS;MAAE;MAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAAiB,GAAG,CAAChD,KAAK,CAACe,SAAS;MAAA;MAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAI,OAAO;IAC3C,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApC,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EAC9C,MAAM;IAAEa;EAAO,CAAC;EAAA;EAAA,CAAAtC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAACa,MAAM;EAAC;EAAAlE,cAAA,GAAAG,CAAA;EAC9B4D,OAAO,CAACC,GAAG,CAAC,8CAA8C1B,MAAM,EAAE,CAAC;EAAC;EAAAtC,cAAA,GAAAG,CAAA;EAEpE,IAAI;IACF;IACA,MAAM+F,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,EAAE,CAAC;IAAC;IAAAL,cAAA,GAAAG,CAAA;IAEP,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,sCAAsC1B,MAAM,EAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MAC5D,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,oCAAoC;QAC3Cd,OAAO,EAAE,oFAAoF;QAC7F7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMoD,SAAS;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,SAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMmI,MAAM;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACmF,SAAS,EAAE,CAAClD,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAE9D,IAAImI,MAAM,CAAC/C,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC5B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,sCAAsC3D,MAAM;MACrD,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE2D,MAAM,CAAC/C,IAAI,CAAC,CAAC,CAAC;MACpBjD,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO2B,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,mDAAmD3D,MAAM,GAAG,EAAE2D,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IACnFmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,gCAAgC;MACvCiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtE,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EACpD,MAAM;IAAEa;EAAO,CAAC;EAAA;EAAA,CAAAtC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAACa,MAAM;EAAC;EAAAlE,cAAA,GAAAG,CAAA;EAC9B4D,OAAO,CAACC,GAAG,CAAC,oDAAoD1B,MAAM,EAAE,CAAC;EAAC;EAAAtC,cAAA,GAAAG,CAAA;EAE1E,IAAI;IACF;IACA,MAAM+F,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,EAAE,CAAC;IAAC;IAAAL,cAAA,GAAAG,CAAA;IAEP,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,sCAAsC1B,MAAM,EAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MAC5D,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,oCAAoC;QAC3Cd,OAAO,EAAE,oFAAoF;QAC7F7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMoG,eAAe;IAAA;IAAA,CAAAxI,cAAA,GAAAG,CAAA,SAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMmI,MAAM;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACmI,eAAe,EAAE,CAAClG,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAEpE,IAAImI,MAAM,CAAC/C,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC5B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,4CAA4C3D,MAAM;MAC3D,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE2D,MAAM,CAAC/C,IAAI;MACjBgD,KAAK,EAAED,MAAM,CAAC/C,IAAI,CAACQ,MAAM;MACzBzD,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO2B,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,yDAAyD3D,MAAM,GAAG,EAAE2D,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IACzFmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,sCAAsC;MAC7CiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtE,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EACjD,MAAM;IAAEa;EAAO,CAAC;EAAA;EAAA,CAAAtC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAACa,MAAM;EAC7B,MAAM;IAAEuE,IAAI;IAAA;IAAA,CAAAzI,cAAA,GAAAoC,CAAA,WAAG,EAAE;EAAC,CAAC;EAAA;EAAA,CAAApC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAAChD,KAAK;EAAC;EAAAL,cAAA,GAAAG,CAAA;EAChC4D,OAAO,CAACC,GAAG,CAAC,iDAAiD1B,MAAM,KAAKmG,IAAI,QAAQ,CAAC;EAAC;EAAAzI,cAAA,GAAAG,CAAA;EAEtF,IAAI;IACF;IACA,MAAM+F,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,EAAE,CAAC;IAAC;IAAAL,cAAA,GAAAG,CAAA;IAEP,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,sCAAsC1B,MAAM,EAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MAC5D,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,oCAAoC;QAC3Cd,OAAO,EAAE,oFAAoF;QAC7F7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMsG,YAAY;IAAA;IAAA,CAAA1I,cAAA,GAAAG,CAAA,SAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+CsI,IAAI;AACnD;AACA,KAAK;IAED,MAAMH,MAAM;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACqI,YAAY,EAAE,CAACpG,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAEjE,IAAImI,MAAM,CAAC/C,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC5B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,yCAAyC3D,MAAM;MACxD,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE2D,MAAM,CAAC/C,IAAI;MACjBgD,KAAK,EAAED,MAAM,CAAC/C,IAAI,CAACQ,MAAM;MACzBzD,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC,CAAC;MAC5BqE,WAAW,EAAEF;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOxC,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,sDAAsD3D,MAAM,GAAG,EAAE2D,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IACtFmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,mCAAmC;MAC1CiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB7C,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAtE,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,6BAA6B,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EAAAzB,cAAA,GAAAG,CAAA;EAC5D,IAAI;IACF,MAAM;MAAEmC;IAAO,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAACa,MAAM;IAC7B,MAAM;MAAE9C,SAAS;MAAA;MAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAG,OAAO;IAAC,CAAC;IAAA;IAAA,CAAApC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAAChD,KAAK;IAEzC,MAAM8H,eAAe;IAAA;IAAA,CAAAnI,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAACgI,eAAe,CAACtG,QAAQ,CAACT,SAAS,CAAC,EAAE;MAAA;MAAApB,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACxC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1B0C,KAAK,EAAE,uBAAuB;QAC9Bd,OAAO,EAAE,yBAAyBgD,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,UAAUhH,SAAS;MACjF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;IAED,MAAMoC,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,SAAG,kBAAkBiB,SAAS,EAAE;;IAE/C;IACA,MAAM8E,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACmE,SAAS,CAAC,CAAC;IAAC;IAAAxE,cAAA,GAAAG,CAAA;IAEhB,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,4BAA4B5C,SAAS,4BAA4BkB,MAAM,EAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAG,CAAA;MACvF,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,4BAA4B7E,SAAS,0BAA0B;QACtE+D,OAAO,EAAE,SAASX,SAAS,gEAAgE;QAC3FlC,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC,CAAC;QAC5BlD;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAM/B,KAAK;IAAA;IAAA,CAAAL,cAAA,GAAAG,CAAA,SAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaqE,SAAS;AACtB;AACA;AACA;AACA,KAAK;IAED,MAAM8D,MAAM;IAAA;IAAA,CAAAtI,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACA,KAAK,EAAE,CAACiC,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAE1D,IAAImI,MAAM,CAAC/C,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC5B,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAAE0C,KAAK,EAAE;MAAqC,CAAC,CAAC;IAC9E,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAM4E,MAAM;IAAA;IAAA,CAAAhH,cAAA,GAAAG,CAAA,SAAGmI,MAAM,CAAC/C,IAAI,CAAC,CAAC,CAAC;IAC7B,MAAMqD,UAAU;IAAA;IAAA,CAAA5I,cAAA,GAAAG,CAAA,SAAGmI,MAAM,CAAC/C,IAAI,CAACsD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC,CAAC;;IAE7C,MAAMC,KAAK;IAAA;IAAA,CAAA9I,cAAA,GAAAG,CAAA,SAAGyI,UAAU,CAACd,GAAG,CAACiB,CAAC,IAAI;MAAA;MAAA/I,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAG,CAAA;MAAA,OAAA4I,CAAC,CAACC,IAAI;IAAD,CAAC,CAAC,CAACC,MAAM,CAACC,CAAC,IAAI;MAAA;MAAAlJ,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAG,CAAA;MAAA,OAAA+I,CAAC,KAAK,IAAI;IAAD,CAAC,CAAC;IACjE,MAAMC,IAAI;IAAA;IAAA,CAAAnJ,cAAA,GAAAG,CAAA,SAAGyI,UAAU,CAACd,GAAG,CAACiB,CAAC,IAAI;MAAA;MAAA/I,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAG,CAAA;MAAA,OAAA4I,CAAC,CAACK,GAAG;IAAD,CAAC,CAAC,CAACH,MAAM,CAACI,CAAC,IAAI;MAAA;MAAArJ,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAG,CAAA;MAAA,OAAAkJ,CAAC,KAAK,IAAI;IAAD,CAAC,CAAC;IAE/D,MAAMC,UAAU;IAAA;IAAA,CAAAtJ,cAAA,GAAAG,CAAA,SAAGwF,IAAI,CAACzD,GAAG,CAAC,GAAG4G,KAAK,CAAC;IACrC,MAAMS,OAAO;IAAA;IAAA,CAAAvJ,cAAA,GAAAG,CAAA,SAAGwF,IAAI,CAAC1D,GAAG,CAAC,GAAGkH,IAAI,CAAC;IAAC;IAAAnJ,cAAA,GAAAG,CAAA;IAElCmD,GAAG,CAACC,IAAI,CAAC;MACPjB,MAAM,EAAEA,MAAM,CAACgC,WAAW,CAAC,CAAC;MAC5BlD,SAAS;MACToI,aAAa,EAAExC,MAAM,CAACyC,KAAK;MAC3BC,cAAc,EAAE,CACd;QAAEC,KAAK,EAAEJ,OAAO;QAAEjI,IAAI,EAAE,SAAS;QAAEsI,QAAQ,EAAE;MAAS,CAAC,EACvD;QAAED,KAAK,EAAE3C,MAAM,CAAC6C,YAAY;QAAEvI,IAAI,EAAE,WAAW;QAAEsI,QAAQ,EAAE;MAAS,CAAC,EACrE;QAAED,KAAK,EAAE3C,MAAM,CAAC8C,OAAO;QAAExI,IAAI,EAAE,gBAAgB;QAAEsI,QAAQ,EAAE;MAAS,CAAC,CACtE;MACDG,iBAAiB,EAAE,CACjB;QAAEJ,KAAK,EAAEL,UAAU;QAAEhI,IAAI,EAAE,SAAS;QAAEsI,QAAQ,EAAE;MAAS,CAAC,EAC1D;QAAED,KAAK,EAAE3C,MAAM,CAACgD,YAAY;QAAE1I,IAAI,EAAE,WAAW;QAAEsI,QAAQ,EAAE;MAAS,CAAC,EACrE;QAAED,KAAK,EAAE3C,MAAM,CAACiD,MAAM;QAAE3I,IAAI,EAAE,gBAAgB;QAAEsI,QAAQ,EAAE;MAAS,CAAC,CACrE;MACDM,YAAY,EAAElD,MAAM,CAACmD;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOlE,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IAClEmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,2CAA2C;MAClDiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB7C,MAAM,EAAEe,GAAG,CAACa,MAAM,CAAC5B,MAAM,CAACgC,WAAW,CAAC,CAAC;MACvClD,SAAS;MAAE;MAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAAiB,GAAG,CAAChD,KAAK,CAACe,SAAS;MAAA;MAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAI,OAAO;IAC3C,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAApC,cAAA,GAAAG,CAAA;AACAY,MAAM,CAACqC,GAAG,CAAC,OAAO,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAtD,cAAA,GAAAyB,CAAA;EACtC,MAAM;IACJa,MAAM;IACNlB,SAAS;IAAA;IAAA,CAAApB,cAAA,GAAAoC,CAAA,WAAG,OAAO;IACnBC,KAAK;IAAA;IAAA,CAAArC,cAAA,GAAAoC,CAAA,WAAG,EAAE;IACVL,IAAI;IAAA;IAAA,CAAA/B,cAAA,GAAAoC,CAAA,WAAG,CAAC;IACRgI,SAAS;IACTC,OAAO;IACPC,MAAM;IAAA;IAAA,CAAAtK,cAAA,GAAAoC,CAAA,WAAG,MAAM;IACfmI,SAAS;IAAA;IAAA,CAAAvK,cAAA,GAAAoC,CAAA,WAAG,MAAM;EACpB,CAAC;EAAA;EAAA,CAAApC,cAAA,GAAAG,CAAA,SAAGkD,GAAG,CAAChD,KAAK;EAAC;EAAAL,cAAA,GAAAG,CAAA;EAEd4D,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE;IACjE1B,MAAM;IAAElB,SAAS;IAAEiB,KAAK;IAAEN,IAAI;IAAEqI,SAAS;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAC9D,CAAC,CAAC;EAAC;EAAAvK,cAAA,GAAAG,CAAA;EAEH,IAAI;IACF,MAAM2D,MAAM;IAAA;IAAA,CAAA9D,cAAA,GAAAG,CAAA,SAAG,CAACmF,QAAQ,CAACvD,IAAI,CAAC,GAAG,CAAC,IAAIuD,QAAQ,CAACjD,KAAK,CAAC;IACrD,MAAM2D,QAAQ;IAAA;IAAA,CAAAhG,cAAA,GAAAG,CAAA,SAAGwF,IAAI,CAAC1D,GAAG,CAACqD,QAAQ,CAACjD,KAAK,CAAC,EAAE,GAAG,CAAC;;IAE/C;IACA,IAAI4B,WAAW;IAAA;IAAA,CAAAjE,cAAA,GAAAG,CAAA,SAAG,WAAW;IAC7B,MAAM+D,MAAM;IAAA;IAAA,CAAAlE,cAAA,GAAAG,CAAA,SAAG,EAAE;IACjB,IAAIgE,UAAU;IAAA;IAAA,CAAAnE,cAAA,GAAAG,CAAA,SAAG,CAAC;;IAElB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,WAAAE,MAAM;IAAA;IAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAIE,MAAM,CAAC8B,IAAI,CAAC,CAAC,GAAE;MAAA;MAAApE,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC3B8D,WAAW,IAAI,kBAAkBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC9C+D,MAAM,CAACG,IAAI,CAAC/B,MAAM,CAACgC,WAAW,CAAC,CAAC,CAAC;MAAC;MAAAtE,cAAA,GAAAG,CAAA;MAClCgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IAAApC,cAAA,GAAAG,CAAA;IACA,IAAIiK,SAAS,EAAE;MAAA;MAAApK,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACb8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAAC+F,SAAS,CAAC;MAAC;MAAApK,cAAA,GAAAG,CAAA;MACvBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAED,IAAIkK,OAAO,EAAE;MAAA;MAAArK,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACX8D,WAAW,IAAI,iBAAiBE,UAAU,EAAE;MAAC;MAAAnE,cAAA,GAAAG,CAAA;MAC7C+D,MAAM,CAACG,IAAI,CAACgG,OAAO,CAAC;MAAC;MAAArK,cAAA,GAAAG,CAAA;MACrBgE,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAnE,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAM+F,eAAe;IAAA;IAAA,CAAAnI,cAAA,GAAAG,CAAA,SAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACvD,IAAI,CAACgI,eAAe,CAACtG,QAAQ,CAACT,SAAS,CAAC,EAAE;MAAA;MAAApB,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MACxC,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,mBAAmB;QAC1Bd,OAAO,EAAE,yBAAyBgD,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,UAAUhH,SAAS;MACjF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;IAED,MAAMoC,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAAG,CAAA,SAAG,kBAAkBiB,SAAS,EAAE;;IAE/C;IACA,MAAM8E,WAAW;IAAA;IAAA,CAAAlG,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,CAACmE,SAAS,CAAC,CAAC;IAAC;IAAAxE,cAAA,GAAAG,CAAA;IAEhB,IAAI,CAAC+F,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,EAAE;MAAA;MAAAnG,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAC/B4D,OAAO,CAACC,GAAG,CAAC,4BAA4B5C,SAAS,sBAAsB,CAAC;MAAC;MAAApB,cAAA,GAAAG,CAAA;MACzE,OAAOmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAC1BmB,OAAO,EAAE,KAAK;QACduB,KAAK,EAAE,4BAA4B7E,SAAS,0BAA0B;QACtE+D,OAAO,EAAE,SAASX,SAAS,gEAAgE;QAC3FpD;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAoC,CAAA;IAAA;;IAED;IACA,MAAMgD,UAAU;IAAA;IAAA,CAAApF,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA,aAAaqE,SAAS;AACtB,QAAQP,WAAW;AACnB,KAAK;IACD,MAAMoB,WAAW;IAAA;IAAA,CAAArF,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC+E,UAAU,EAAElB,MAAM,CAAC;IACnD,MAAMW,KAAK;IAAA;IAAA,CAAA7E,cAAA,GAAAG,CAAA,SAAGmF,QAAQ,CAACD,WAAW,CAACE,IAAI,CAAC,CAAC,CAAC,CAACV,KAAK,CAAC;;IAEjD;IACA,MAAM2F,eAAe;IAAA;IAAA,CAAAxK,cAAA,GAAAG,CAAA,SAAG,CACtB,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAC1D,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,EAClE,QAAQ,EAAE,QAAQ,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAC7E;IACD,MAAMsK,UAAU;IAAA;IAAA,CAAAzK,cAAA,GAAAG,CAAA,SAAGqK,eAAe,CAAC3I,QAAQ,CAACyI,MAAM,CAAC;IAAA;IAAA,CAAAtK,cAAA,GAAAoC,CAAA,WAAGkI,MAAM;IAAA;IAAA,CAAAtK,cAAA,GAAAoC,CAAA,WAAG,MAAM;IACrE,MAAMsI,aAAa;IAAA;IAAA,CAAA1K,cAAA,GAAAG,CAAA,SAAGoK,SAAS,CAACI,WAAW,CAAC,CAAC,KAAK,KAAK;IAAA;IAAA,CAAA3K,cAAA,GAAAoC,CAAA,WAAG,KAAK;IAAA;IAAA,CAAApC,cAAA,GAAAoC,CAAA,WAAG,MAAM;;IAExE;IACA,MAAMoD,SAAS;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,SAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaqE,SAAS;AACtB,QAAQP,WAAW;AACnB,iBAAiBwG,UAAU,IAAIC,aAAa;AAC5C,eAAevG,UAAU,YAAYA,UAAU,GAAG,CAAC;AACnD,KAAK;IAED,MAAMsB,WAAW;IAAA;IAAA,CAAAzF,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAG+D,MAAM,EAAE8B,QAAQ,EAAElC,MAAM,CAAC;IACjD,MAAM4B,UAAU;IAAA;IAAA,CAAA1F,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACmF,SAAS,EAAEC,WAAW,CAAC;IAEtD,MAAMX,UAAU;IAAA;IAAA,CAAA9E,cAAA,GAAAG,CAAA,SAAGwF,IAAI,CAACC,IAAI,CAACf,KAAK,GAAGmB,QAAQ,CAAC;IAAC;IAAAhG,cAAA,GAAAG,CAAA;IAE/C4D,OAAO,CAACC,GAAG,CAAC,uCAAuC0B,UAAU,CAACH,IAAI,CAACQ,MAAM,oBAAoBlB,KAAK,EAAE,CAAC;IAAC;IAAA7E,cAAA,GAAAG,CAAA;IAEtG;IAAI;IAAA,CAAAH,cAAA,GAAAoC,CAAA,YAACsD,UAAU;IAAA;IAAA,CAAA1F,cAAA,GAAAoC,CAAA,WAAI,CAACyD,KAAK,CAACC,OAAO,CAACJ,UAAU,CAACH,IAAI,CAAC;IAAA;IAAA,CAAAvF,cAAA,GAAAoC,CAAA,WAAIsD,UAAU,CAACH,IAAI,CAACQ,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA/F,cAAA,GAAAoC,CAAA;MAAApC,cAAA,GAAAG,CAAA;MAClF,OAAOmD,GAAG,CAACC,IAAI,CAAC;QACdmB,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE,EAAE;QACRE,KAAK,EAAE,CAAC;QACRD,UAAU,EAAE;UACV7C,IAAI,EAAEuD,QAAQ,CAACvD,IAAI,CAAC;UACpBM,KAAK,EAAE2D,QAAQ;UACfnB,KAAK,EAAE,CAAC;UACRC,UAAU,EAAE,CAAC;UACbC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;QACDE,OAAO,EAAE;UACP5C,MAAM;UAAE;UAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAAE,MAAM;UAAA;UAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAI,IAAI;UACtBhB,SAAS;UACTgJ,SAAS;UAAE;UAAA,CAAApK,cAAA,GAAAoC,CAAA,WAAAgI,SAAS;UAAA;UAAA,CAAApK,cAAA,GAAAoC,CAAA,WAAI,IAAI;UAC5BiI,OAAO;UAAE;UAAA,CAAArK,cAAA,GAAAoC,CAAA,WAAAiI,OAAO;UAAA;UAAA,CAAArK,cAAA,GAAAoC,CAAA,WAAI,IAAI;QAC1B,CAAC;QACDwI,OAAO,EAAE;UACPN,MAAM,EAAEG,UAAU;UAClBF,SAAS,EAAEG;QACb;MACF,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA1K,cAAA,GAAAoC,CAAA;IAAA;IAAApC,cAAA,GAAAG,CAAA;IAEDmD,GAAG,CAACC,IAAI,CAAC;MACPmB,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEe,UAAU,CAACH,IAAI;MACrBV,KAAK,EAAEA,KAAK;MACZD,UAAU,EAAE;QACV7C,IAAI,EAAEuD,QAAQ,CAACvD,IAAI,CAAC;QACpBM,KAAK,EAAE2D,QAAQ;QACfnB,KAAK;QACLC,UAAU;QACVC,OAAO,EAAEO,QAAQ,CAACvD,IAAI,CAAC,GAAG+C,UAAU;QACpCE,OAAO,EAAEM,QAAQ,CAACvD,IAAI,CAAC,GAAG;MAC5B,CAAC;MACDmD,OAAO,EAAE;QACP5C,MAAM;QAAE;QAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAAE,MAAM;QAAA;QAAA,CAAAtC,cAAA,GAAAoC,CAAA,WAAI,IAAI;QACtBhB,SAAS;QACTgJ,SAAS;QAAE;QAAA,CAAApK,cAAA,GAAAoC,CAAA,WAAAgI,SAAS;QAAA;QAAA,CAAApK,cAAA,GAAAoC,CAAA,WAAI,IAAI;QAC5BiI,OAAO;QAAE;QAAA,CAAArK,cAAA,GAAAoC,CAAA,YAAAiI,OAAO;QAAA;QAAA,CAAArK,cAAA,GAAAoC,CAAA,YAAI,IAAI;MAC1B,CAAC;MACDwI,OAAO,EAAE;QACPN,MAAM,EAAEG,UAAU;QAClBF,SAAS,EAAEG;MACb;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOzE,KAAK,EAAE;IAAA;IAAAjG,cAAA,GAAAG,CAAA;IACd4D,OAAO,CAACkC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAAC;IAAAjG,cAAA,GAAAG,CAAA;IAC5DmD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;MACnBmB,OAAO,EAAE,KAAK;MACduB,KAAK,EAAE,gCAAgC;MACvCiC,OAAO,EAAEjC,KAAK,CAACd,OAAO;MACtB/D;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAApB,cAAA,GAAAG,CAAA;AAEH0K,MAAM,CAACC,OAAO,GAAG/J,MAAM","ignoreList":[]}