{"version":3,"names":["cov_18kwjgo68n","actualCoverage","body","param","query","validationResult","s","require","logError","formatErrorResponse","handleValidationResult","req","res","next","f","errors","isEmpty","b","validationError","Error","name","status","validationErrors","formatValidationErrors","array","requestBody","requestParams","params","requestQuery","businessRule","statusCode","response","error","validation","code","json","map","field","path","message","msg","value","location","financialValidation","email","isEmail","normalizeEmail","withMessage","custom","disposableDomains","domain","split","includes","password","isLength","min","matches","commonPasswords","toLowerCase","amount","options","isFloat","gt","maxAmount","minAmount","allowRoundNumbers","quantity","isInt","maxQuantity","requireEvenLots","symbol","reservedSymbols","length","portfolioName","max","trim","userId","user","sub","misleadingTerms","some","term","orderValidation","isIn","orderType","side","limitPrice","stopPrice","riskTolerance","userAge","age","apiKey","provider","test","process","env","NODE_ENV","dateRange","startField","endField","isISO8601","start","Date","end","now","maxDaysBack","daysDiff","requestedDays","businessValidationBundles","register","escape","birthDate","getTime","createPortfolio","optional","undefined","balance","parseFloat","placeOrder","hour","getHours","isWeekend","getDay","extendedHours","updateSettings","isObject","maxDailyLoss","maxLoss","updateApiKeys","getHistoricalData","addToWatchlist","requireUserId","isUUID","requirePortfolioId","createFinancialBusinessValidator","validatorFn","errorMessage","businessRuleCode","isValid","details","validationDetails","requestData","module","exports"],"sources":["businessValidation.js"],"sourcesContent":["/**\n * Business Validation Middleware\n * Provides financial business rule validation with standardized error responses\n */\n\nconst { body, param, query, validationResult } = require('express-validator');\nconst { logError, formatErrorResponse } = require('./universalErrorHandler');\n\n/**\n * Enhanced validation result handler that integrates with universal error handling\n */\nfunction handleValidationResult(req, res, next) {\n  const errors = validationResult(req);\n  \n  if (!errors.isEmpty()) {\n    const validationError = new Error('Business validation failed');\n    validationError.name = 'BusinessValidationError';\n    validationError.status = 400;\n    validationError.validationErrors = formatValidationErrors(errors.array());\n    \n    // Log validation error with enhanced context\n    logError(validationError, req, {\n      validationErrors: validationError.validationErrors,\n      requestBody: req.body,\n      requestParams: req.params,\n      requestQuery: req.query,\n      businessRule: 'INPUT_VALIDATION'\n    });\n    \n    // Format comprehensive error response\n    const { statusCode, response } = formatErrorResponse(validationError, req);\n    \n    // Add validation-specific details\n    response.error.validation = validationError.validationErrors;\n    response.error.code = 'BUSINESS_VALIDATION_ERROR';\n    \n    return res.status(statusCode).json(response);\n  }\n  \n  next();\n}\n\n/**\n * Format validation errors with business context\n */\nfunction formatValidationErrors(errors) {\n  return errors.map(error => ({\n    field: error.param || error.path,\n    message: error.msg,\n    value: error.value,\n    location: error.location,\n    businessRule: error.businessRule || 'FIELD_VALIDATION'\n  }));\n}\n\n/**\n * Financial business validation schemas\n */\nconst financialValidation = {\n  // Email validation for financial services\n  email: body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email address is required for account verification')\n    .custom(async (value, { req }) => {\n      // Business rule: Check for disposable email domains\n      const disposableDomains = ['tempmail.org', '10minutemail.com', 'guerrillamail.com'];\n      const domain = value.split('@')[1];\n      if (disposableDomains.includes(domain)) {\n        throw new Error('Disposable email addresses are not allowed for financial accounts');\n      }\n      return true;\n    }),\n\n  // Password validation for financial security requirements\n  password: body('password')\n    .isLength({ min: 12 })\n    .withMessage('Password must be at least 12 characters for financial account security')\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain uppercase, lowercase, number, and special character')\n    .custom(async (value, { req }) => {\n      // Business rule: Check against common financial passwords\n      const commonPasswords = ['password123', 'trading123', 'finance123'];\n      if (commonPasswords.includes(value.toLowerCase())) {\n        throw new Error('Password is too common for financial account security');\n      }\n      return true;\n    }),\n\n  // Financial amount validation with business rules\n  amount: (field = 'amount', options = {}) => body(field)\n    .isFloat({ gt: 0 })\n    .withMessage(`${field} must be a positive number`)\n    .custom(async (value, { req }) => {\n      // Business rule: Check maximum transaction limits\n      const maxAmount = options.maxAmount || 100000;\n      if (value > maxAmount) {\n        const error = new Error(`${field} exceeds maximum allowed transaction amount of $${maxAmount}`);\n        error.businessRule = 'TRANSACTION_LIMIT';\n        throw error;\n      }\n      \n      // Business rule: Check minimum meaningful amounts\n      const minAmount = options.minAmount || 0.01;\n      if (value < minAmount) {\n        const error = new Error(`${field} below minimum meaningful amount of $${minAmount}`);\n        error.businessRule = 'MINIMUM_AMOUNT';\n        throw error;\n      }\n      \n      // Business rule: Check for suspicious round numbers (potential testing)\n      if (value >= 1000 && value % 1000 === 0 && !options.allowRoundNumbers) {\n        const error = new Error(`${field} appears to be a test amount - please use actual transaction amount`);\n        error.businessRule = 'SUSPICIOUS_AMOUNT';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // Stock quantity validation with position limits\n  quantity: (field = 'quantity', options = {}) => body(field)\n    .isInt({ gt: 0 })\n    .withMessage(`${field} must be a positive integer`)\n    .custom(async (value, { req }) => {\n      // Business rule: Check position limits\n      const maxQuantity = options.maxQuantity || 10000;\n      if (value > maxQuantity) {\n        const error = new Error(`${field} exceeds maximum position limit of ${maxQuantity} shares`);\n        error.businessRule = 'POSITION_LIMIT';\n        throw error;\n      }\n      \n      // Business rule: Check for odd lots in certain contexts\n      if (options.requireEvenLots && value % 100 !== 0) {\n        const error = new Error(`${field} must be in round lots (multiples of 100 shares)`);\n        error.businessRule = 'ODD_LOT_RESTRICTION';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // Stock symbol validation with exchange rules\n  symbol: (field = 'symbol') => body(field)\n    .matches(/^[A-Z]{1,5}$/)\n    .withMessage('Stock symbol must be 1-5 uppercase letters')\n    .custom(async (value, { req }) => {\n      // Business rule: Check against reserved symbols\n      const reservedSymbols = ['TEST', 'FAKE', 'NULL'];\n      if (reservedSymbols.includes(value)) {\n        const error = new Error(`Symbol ${value} is reserved and cannot be traded`);\n        error.businessRule = 'RESERVED_SYMBOL';\n        throw error;\n      }\n      \n      // Business rule: Symbol format validation for different exchanges\n      if (value.length === 1 && !['A', 'T', 'F', 'X'].includes(value)) {\n        const error = new Error(`Single-letter symbol ${value} is not valid for retail trading`);\n        error.businessRule = 'INVALID_SYMBOL_FORMAT';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // Portfolio name with business requirements\n  portfolioName: body('name')\n    .isLength({ min: 1, max: 100 })\n    .trim()\n    .withMessage('Portfolio name must be 1-100 characters')\n    .custom(async (value, { req }) => {\n      // Business rule: Check for duplicate portfolio names for user\n      const userId = req.user?.sub;\n      if (userId) {\n        // TODO: Check database for existing portfolio names\n        // This would involve a database query to check for duplicates\n      }\n      \n      // Business rule: Prevent misleading portfolio names\n      const misleadingTerms = ['test', 'demo', 'fake', 'sample'];\n      if (misleadingTerms.some(term => value.toLowerCase().includes(term))) {\n        const error = new Error('Portfolio name cannot contain test or demo terminology');\n        error.businessRule = 'MISLEADING_NAME';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // Trading order validation with market rules\n  orderValidation: [\n    body('orderType')\n      .isIn(['market', 'limit', 'stop', 'stop_limit'])\n      .withMessage('Invalid order type'),\n    \n    body('side')\n      .isIn(['buy', 'sell'])\n      .withMessage('Order side must be buy or sell'),\n    \n    body('timeInForce')\n      .isIn(['day', 'gtc', 'ioc', 'fok'])\n      .withMessage('Invalid time in force value'),\n    \n    body().custom(async (value, { req }) => {\n      const { orderType, side, quantity, limitPrice, stopPrice } = req.body;\n      \n      // Business rule: Limit orders must have limit price\n      if (orderType === 'limit' && !limitPrice) {\n        const error = new Error('Limit orders must specify a limit price');\n        error.businessRule = 'MISSING_LIMIT_PRICE';\n        throw error;\n      }\n      \n      // Business rule: Stop orders must have stop price\n      if ((orderType === 'stop' || orderType === 'stop_limit') && !stopPrice) {\n        const error = new Error('Stop orders must specify a stop price');\n        error.businessRule = 'MISSING_STOP_PRICE';\n        throw error;\n      }\n      \n      // Business rule: Stop limit orders need both prices\n      if (orderType === 'stop_limit' && (!stopPrice || !limitPrice)) {\n        const error = new Error('Stop limit orders must specify both stop and limit prices');\n        error.businessRule = 'MISSING_STOP_LIMIT_PRICES';\n        throw error;\n      }\n      \n      // Business rule: Price relationship validation\n      if (orderType === 'stop_limit' && side === 'buy' && stopPrice > limitPrice) {\n        const error = new Error('For buy stop limit orders, stop price must be less than or equal to limit price');\n        error.businessRule = 'INVALID_PRICE_RELATIONSHIP';\n        throw error;\n      }\n      \n      if (orderType === 'stop_limit' && side === 'sell' && stopPrice < limitPrice) {\n        const error = new Error('For sell stop limit orders, stop price must be greater than or equal to limit price');\n        error.businessRule = 'INVALID_PRICE_RELATIONSHIP';\n        throw error;\n      }\n      \n      return true;\n    })\n  ],\n\n  // Risk tolerance validation\n  riskTolerance: body('riskTolerance')\n    .isIn(['conservative', 'moderate', 'aggressive'])\n    .withMessage('Risk tolerance must be conservative, moderate, or aggressive')\n    .custom(async (value, { req }) => {\n      // Business rule: Age-based risk tolerance validation\n      const userAge = req.body.age || req.user?.age;\n      if (userAge && userAge > 65 && value === 'aggressive') {\n        const error = new Error('Aggressive risk tolerance may not be suitable for investors over 65');\n        error.businessRule = 'AGE_RISK_MISMATCH';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // API key validation with security requirements\n  apiKey: (provider = 'alpaca') => body(`${provider}Key`)\n    .isLength({ min: 20, max: 200 })\n    .withMessage(`${provider} API key format is invalid`)\n    .custom(async (value, { req }) => {\n      // Business rule: API key format validation by provider\n      if (provider === 'alpaca' && !/^[A-Z0-9]{20,40}$/.test(value)) {\n        const error = new Error('Alpaca API key must be 20-40 uppercase alphanumeric characters');\n        error.businessRule = 'INVALID_API_KEY_FORMAT';\n        throw error;\n      }\n      \n      // Business rule: Prevent test API keys in production\n      if (process.env.NODE_ENV === 'production' && value.includes('test')) {\n        const error = new Error('Test API keys cannot be used in production environment');\n        error.businessRule = 'TEST_KEY_IN_PRODUCTION';\n        throw error;\n      }\n      \n      return true;\n    }),\n\n  // Date range validation for financial data\n  dateRange: (startField = 'startDate', endField = 'endDate') => [\n    body(startField).isISO8601().withMessage(`${startField} must be a valid date`),\n    body(endField).isISO8601().withMessage(`${endField} must be a valid date`),\n    body().custom(async (value, { req }) => {\n      const start = new Date(req.body[startField]);\n      const end = new Date(req.body[endField]);\n      const now = new Date();\n      \n      // Business rule: Start date must be before end date\n      if (start >= end) {\n        const error = new Error(`${startField} must be before ${endField}`);\n        error.businessRule = 'INVALID_DATE_ORDER';\n        throw error;\n      }\n      \n      // Business rule: Cannot request future data\n      if (start > now || end > now) {\n        const error = new Error('Cannot request data from future dates');\n        error.businessRule = 'FUTURE_DATE_REQUEST';\n        throw error;\n      }\n      \n      // Business rule: Limit historical data range\n      const maxDaysBack = 365 * 5; // 5 years\n      const daysDiff = (now - start) / (1000 * 60 * 60 * 24);\n      if (daysDiff > maxDaysBack) {\n        const error = new Error(`Historical data limited to ${maxDaysBack} days`);\n        error.businessRule = 'EXCESSIVE_HISTORICAL_RANGE';\n        throw error;\n      }\n      \n      // Business rule: Prevent excessive date ranges that could impact performance\n      const requestedDays = (end - start) / (1000 * 60 * 60 * 24);\n      if (requestedDays > 365) {\n        const error = new Error('Date range cannot exceed 365 days');\n        error.businessRule = 'EXCESSIVE_DATE_RANGE';\n        throw error;\n      }\n      \n      return true;\n    })\n  ]\n};\n\n/**\n * Route-specific validation bundles with business rules\n */\nconst businessValidationBundles = {\n  // User registration with financial compliance\n  register: [\n    financialValidation.email,\n    financialValidation.password,\n    body('firstName').isLength({ min: 1, max: 50 }).trim().escape()\n      .custom(async (value) => {\n        // Business rule: Name validation for compliance\n        if (value.toLowerCase() === 'test' || value.toLowerCase() === 'demo') {\n          throw new Error('Test names are not allowed for financial accounts');\n        }\n        return true;\n      }),\n    body('lastName').isLength({ min: 1, max: 50 }).trim().escape(),\n    body('dateOfBirth').isISO8601().withMessage('Valid date of birth required')\n      .custom(async (value) => {\n        const birthDate = new Date(value);\n        const age = (Date.now() - birthDate.getTime()) / (1000 * 60 * 60 * 24 * 365);\n        \n        // Business rule: Age verification for financial services\n        if (age < 18) {\n          const error = new Error('Must be 18 or older to open a financial account');\n          error.businessRule = 'AGE_RESTRICTION';\n          throw error;\n        }\n        \n        if (age > 120) {\n          const error = new Error('Invalid date of birth');\n          error.businessRule = 'INVALID_AGE';\n          throw error;\n        }\n        \n        return true;\n      }),\n    handleValidationResult\n  ],\n\n  // Portfolio creation with business rules\n  createPortfolio: [\n    financialValidation.portfolioName,\n    financialValidation.riskTolerance,\n    body('description').optional().isLength({ max: 500 }).trim().escape(),\n    body('initialBalance').optional().custom(async (value) => {\n      if (value !== undefined) {\n        const balance = parseFloat(value);\n        if (balance < 100) {\n          const error = new Error('Initial portfolio balance must be at least $100');\n          error.businessRule = 'MINIMUM_PORTFOLIO_BALANCE';\n          throw error;\n        }\n      }\n      return true;\n    }),\n    handleValidationResult\n  ],\n\n  // Trading order placement with comprehensive business rules\n  placeOrder: [\n    financialValidation.symbol(),\n    financialValidation.quantity('quantity', { maxQuantity: 10000 }),\n    ...financialValidation.orderValidation,\n    body().custom(async (value, { req }) => {\n      // Business rule: Market hours validation\n      const now = new Date();\n      const hour = now.getHours();\n      const isWeekend = now.getDay() === 0 || now.getDay() === 6;\n      \n      // Extended hours trading requires special handling\n      if (isWeekend) {\n        const error = new Error('Trading is not allowed on weekends');\n        error.businessRule = 'WEEKEND_TRADING_RESTRICTION';\n        throw error;\n      }\n      \n      // Regular market hours: 9:30 AM - 4:00 PM ET\n      if (hour < 9 || hour >= 16) {\n        // Allow but warn for extended hours\n        req.extendedHours = true;\n      }\n      \n      return true;\n    }),\n    handleValidationResult\n  ],\n\n  // Settings update with security validations\n  updateSettings: [\n    body('notifications').optional().isObject(),\n    body('preferences').optional().isObject(),\n    body('riskSettings').optional().isObject()\n      .custom(async (value) => {\n        if (value && value.maxDailyLoss) {\n          const maxLoss = parseFloat(value.maxDailyLoss);\n          if (maxLoss <= 0 || maxLoss > 100000) {\n            const error = new Error('Daily loss limit must be between $1 and $100,000');\n            error.businessRule = 'INVALID_RISK_LIMIT';\n            throw error;\n          }\n        }\n        return true;\n      }),\n    handleValidationResult\n  ],\n\n  // API key updates with validation\n  updateApiKeys: [\n    financialValidation.apiKey('alpaca'),\n    body('alpacaSecret').optional().custom(value => {\n      if (value && !/^[A-Za-z0-9\\/\\+]{40,}$/.test(value)) {\n        const error = new Error('Invalid Alpaca secret key format');\n        error.businessRule = 'INVALID_SECRET_FORMAT';\n        throw error;\n      }\n      return true;\n    }),\n    handleValidationResult\n  ],\n\n  // Historical data requests with business limits\n  getHistoricalData: [\n    financialValidation.symbol(),\n    ...financialValidation.dateRange(),\n    query('timeframe')\n      .optional()\n      .isIn(['1min', '5min', '15min', '30min', '1hour', '1day', '1week', '1month'])\n      .withMessage('Invalid timeframe'),\n    handleValidationResult\n  ],\n\n  // Watchlist operations\n  addToWatchlist: [\n    financialValidation.symbol(),\n    body('notes').optional().isLength({ max: 200 }).trim().escape(),\n    body().custom(async (value, { req }) => {\n      // Business rule: Watchlist size limits\n      const userId = req.user?.sub;\n      if (userId) {\n        // TODO: Check current watchlist size from database\n        // Limit to reasonable number like 100 symbols\n      }\n      return true;\n    }),\n    handleValidationResult\n  ],\n\n  // Generic validations\n  requireUserId: [\n    param('userId').isUUID().withMessage('Invalid user ID format'),\n    handleValidationResult\n  ],\n  \n  requirePortfolioId: [\n    param('portfolioId').isUUID().withMessage('Invalid portfolio ID format'),\n    handleValidationResult\n  ]\n};\n\n/**\n * Advanced business rule validator for complex financial logic\n */\nfunction createFinancialBusinessValidator(validatorFn, errorMessage, businessRuleCode) {\n  return async (req, res, next) => {\n    try {\n      const validation = await validatorFn(req);\n      \n      if (!validation.isValid) {\n        const error = new Error(errorMessage);\n        error.name = 'FinancialBusinessRuleError';\n        error.status = 400;\n        error.businessRule = businessRuleCode;\n        error.details = validation.details;\n        \n        logError(error, req, {\n          businessRule: businessRuleCode,\n          validationDetails: validation.details,\n          requestData: {\n            body: req.body,\n            params: req.params,\n            query: req.query,\n            user: req.user?.sub\n          }\n        });\n        \n        const { statusCode, response } = formatErrorResponse(error, req);\n        response.error.businessRule = businessRuleCode;\n        response.error.details = validation.details;\n        \n        return res.status(statusCode).json(response);\n      }\n      \n      next();\n    } catch (error) {\n      next(error);\n    }\n  };\n}\n\nmodule.exports = {\n  financialValidation,\n  businessValidationBundles,\n  handleValidationResult,\n  createFinancialBusinessValidator,\n  formatValidationErrors\n};"],"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","ignoreList":[]}