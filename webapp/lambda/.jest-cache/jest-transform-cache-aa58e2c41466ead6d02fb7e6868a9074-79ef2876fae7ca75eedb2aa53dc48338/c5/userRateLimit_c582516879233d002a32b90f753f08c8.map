{"version":3,"names":["cov_w4e7pw6v3","actualCoverage","jwt","s","require","userRateLimits","Map","userRequestHistory","suspiciousActivity","RATE_LIMIT_CONFIGS","free","api","windowMs","maxRequests","trading","market_data","portfolio","premium","professional","SUSPICIOUS_THRESHOLDS","rapidRequests","errorRate","uniqueEndpoints","createUserRateLimit","category","b","f","req","res","next","userId","getUserIdFromRequest","applyAnonymousRateLimit","userTier","getUserTier","rateLimitResult","applyUserRateLimit","allowed","status","json","success","error","message","retryAfter","limits","usage","timestamp","Date","toISOString","trackUserActivity","set","remaining","resetTime","console","authHeader","headers","authorization","startsWith","token","substring","verifier","CognitoJwtVerifier","create","userPoolId","process","env","COGNITO_USER_POOL_ID","tokenUse","clientId","COGNITO_CLIENT_ID","payload","verify","sub","now","config","key","has","requests","firstRequest","lastRequest","totalRequests","blockedRequests","userLimit","get","filter","time","length","oldestRequest","Math","min","ceil","current","total","blocked","push","clientIP","ip","connection","remoteAddress","endpoints","Set","errors","lastActivity","history","endpoint","path","method","userAgent","add","tenMinutesAgo","r","oneHourAgo","lastEndpointReset","clear","detectSuspiciousActivity","tenSecondsAgo","oneMinuteAgo","recentRequests","markSuspiciousActivity","count","threshold","recentEndpoints","map","size","type","details","activities","a","warn","getRateLimitStats","activeUsers","blockedUsers","totalBlocked","data","entries","split","blockRate","suspiciousUsers","getUserRateLimitStatus","userLimits","userHistory","suspicious","currentRequests","activity","recentRequestCount","types","setInterval","delete","log","module","exports"],"sources":["userRateLimit.js"],"sourcesContent":["/**\n * User-Specific Rate Limiting Middleware\n * \n * Implements sophisticated rate limiting per authenticated user to prevent abuse\n * while allowing legitimate high-frequency trading operations.\n */\n\nconst jwt = require('aws-jwt-verify');\n\n// In-memory store for rate limiting (suitable for Lambda)\n// In production, consider Redis for multi-instance deployments\nconst userRateLimits = new Map();\nconst userRequestHistory = new Map();\nconst suspiciousActivity = new Map();\n\n// Rate limit configurations per user type and endpoint category\nconst RATE_LIMIT_CONFIGS = {\n  // Different user tiers with different limits\n  free: {\n    api: { windowMs: 60 * 1000, maxRequests: 50 },\n    trading: { windowMs: 60 * 1000, maxRequests: 20 },\n    market_data: { windowMs: 60 * 1000, maxRequests: 100 },\n    portfolio: { windowMs: 60 * 1000, maxRequests: 30 }\n  },\n  premium: {\n    api: { windowMs: 60 * 1000, maxRequests: 200 },\n    trading: { windowMs: 60 * 1000, maxRequests: 100 },\n    market_data: { windowMs: 60 * 1000, maxRequests: 500 },\n    portfolio: { windowMs: 60 * 1000, maxRequests: 150 }\n  },\n  professional: {\n    api: { windowMs: 60 * 1000, maxRequests: 1000 },\n    trading: { windowMs: 60 * 1000, maxRequests: 500 },\n    market_data: { windowMs: 60 * 1000, maxRequests: 2000 },\n    portfolio: { windowMs: 60 * 1000, maxRequests: 500 }\n  }\n};\n\n// Suspicious activity thresholds\nconst SUSPICIOUS_THRESHOLDS = {\n  rapidRequests: 50, // More than 50 requests in 10 seconds\n  errorRate: 0.5, // More than 50% error rate\n  uniqueEndpoints: 20 // Accessing more than 20 different endpoints in 1 minute\n};\n\n/**\n * Create user-specific rate limiting middleware\n */\nfunction createUserRateLimit(category = 'api') {\n  return async (req, res, next) => {\n    try {\n      // Extract user ID from JWT token\n      const userId = await getUserIdFromRequest(req);\n      \n      if (!userId) {\n        // If no user ID, apply stricter anonymous rate limiting\n        return applyAnonymousRateLimit(req, res, next, category);\n      }\n\n      // Get user tier (default to free if not specified)\n      const userTier = await getUserTier(userId);\n      \n      // Apply user-specific rate limiting\n      const rateLimitResult = await applyUserRateLimit(userId, userTier, category, req);\n      \n      if (!rateLimitResult.allowed) {\n        return res.status(429).json({\n          success: false,\n          error: 'Rate limit exceeded',\n          message: rateLimitResult.message,\n          retryAfter: rateLimitResult.retryAfter,\n          limits: rateLimitResult.limits,\n          usage: rateLimitResult.usage,\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Track request for suspicious activity detection\n      trackUserActivity(userId, req, rateLimitResult);\n\n      // Add rate limit headers\n      res.set({\n        'X-RateLimit-Limit': rateLimitResult.limits.maxRequests,\n        'X-RateLimit-Remaining': rateLimitResult.limits.remaining,\n        'X-RateLimit-Reset': rateLimitResult.limits.resetTime,\n        'X-RateLimit-Category': category,\n        'X-User-Tier': userTier\n      });\n\n      next();\n\n    } catch (error) {\n      console.error('User rate limiting error:', error);\n      // Don't fail the request due to rate limiting errors\n      next();\n    }\n  };\n}\n\n/**\n * Extract user ID from JWT token in request\n */\nasync function getUserIdFromRequest(req) {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return null;\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Verify JWT token\n    const verifier = jwt.CognitoJwtVerifier.create({\n      userPoolId: process.env.COGNITO_USER_POOL_ID,\n      tokenUse: 'access',\n      clientId: process.env.COGNITO_CLIENT_ID\n    });\n\n    const payload = await verifier.verify(token);\n    return payload.sub; // User ID\n\n  } catch (error) {\n    // Invalid or expired token\n    return null;\n  }\n}\n\n/**\n * Get user tier from user ID (could be from database or user attributes)\n */\nasync function getUserTier(userId) {\n  // For now, return 'free' as default\n  // In production, this would query user's subscription tier from database\n  return 'free';\n}\n\n/**\n * Apply rate limiting for authenticated users\n */\nasync function applyUserRateLimit(userId, userTier, category, req) {\n  const now = Date.now();\n  const config = RATE_LIMIT_CONFIGS[userTier]?.[category] || RATE_LIMIT_CONFIGS.free[category];\n  \n  if (!config) {\n    // No rate limiting for unknown categories\n    return { allowed: true, limits: {}, usage: {} };\n  }\n\n  const windowMs = config.windowMs;\n  const maxRequests = config.maxRequests;\n  const key = `${userId}:${category}`;\n\n  // Initialize user rate limit data if not exists\n  if (!userRateLimits.has(key)) {\n    userRateLimits.set(key, {\n      requests: [],\n      firstRequest: now,\n      lastRequest: now,\n      totalRequests: 0,\n      blockedRequests: 0\n    });\n  }\n\n  const userLimit = userRateLimits.get(key);\n  \n  // Clean old requests outside the current window\n  userLimit.requests = userLimit.requests.filter(time => now - time < windowMs);\n  \n  // Check if rate limit exceeded\n  if (userLimit.requests.length >= maxRequests) {\n    userLimit.blockedRequests++;\n    \n    const oldestRequest = Math.min(...userLimit.requests);\n    const retryAfter = Math.ceil((oldestRequest + windowMs - now) / 1000);\n\n    return {\n      allowed: false,\n      message: `Rate limit exceeded for ${category} endpoints. You've made ${userLimit.requests.length} requests in the last ${windowMs/1000} seconds (limit: ${maxRequests}).`,\n      retryAfter,\n      limits: {\n        maxRequests,\n        windowMs,\n        resetTime: new Date(oldestRequest + windowMs).toISOString()\n      },\n      usage: {\n        current: userLimit.requests.length,\n        total: userLimit.totalRequests,\n        blocked: userLimit.blockedRequests\n      }\n    };\n  }\n\n  // Allow request and record it\n  userLimit.requests.push(now);\n  userLimit.lastRequest = now;\n  userLimit.totalRequests++;\n\n  return {\n    allowed: true,\n    limits: {\n      maxRequests,\n      remaining: maxRequests - userLimit.requests.length,\n      resetTime: new Date(now + windowMs).toISOString()\n    },\n    usage: {\n      current: userLimit.requests.length,\n      total: userLimit.totalRequests,\n      blocked: userLimit.blockedRequests\n    }\n  };\n}\n\n/**\n * Apply rate limiting for anonymous users (stricter limits)\n */\nfunction applyAnonymousRateLimit(req, res, next, category) {\n  const clientIP = req.ip || req.connection.remoteAddress;\n  const now = Date.now();\n  const key = `anonymous:${clientIP}:${category}`;\n  \n  // Strict limits for anonymous users\n  const maxRequests = 10; // Very limited for anonymous\n  const windowMs = 60 * 1000; // 1 minute\n\n  if (!userRateLimits.has(key)) {\n    userRateLimits.set(key, { requests: [], blockedRequests: 0 });\n  }\n\n  const userLimit = userRateLimits.get(key);\n  userLimit.requests = userLimit.requests.filter(time => now - time < windowMs);\n\n  if (userLimit.requests.length >= maxRequests) {\n    userLimit.blockedRequests++;\n    \n    return res.status(429).json({\n      success: false,\n      error: 'Rate limit exceeded',\n      message: 'Please authenticate to access higher rate limits',\n      retryAfter: 60,\n      limits: { maxRequests, current: userLimit.requests.length }\n    });\n  }\n\n  userLimit.requests.push(now);\n  \n  res.set({\n    'X-RateLimit-Limit': maxRequests,\n    'X-RateLimit-Remaining': maxRequests - userLimit.requests.length,\n    'X-User-Tier': 'anonymous'\n  });\n\n  next();\n}\n\n/**\n * Track user activity for suspicious behavior detection\n */\nfunction trackUserActivity(userId, req, rateLimitResult) {\n  const now = Date.now();\n  const key = userId;\n\n  if (!userRequestHistory.has(key)) {\n    userRequestHistory.set(key, {\n      requests: [],\n      endpoints: new Set(),\n      errors: 0,\n      lastActivity: now\n    });\n  }\n\n  const history = userRequestHistory.get(key);\n  \n  // Track request\n  history.requests.push({\n    timestamp: now,\n    endpoint: req.path,\n    method: req.method,\n    userAgent: req.headers['user-agent'] || 'unknown'\n  });\n\n  // Track unique endpoints\n  history.endpoints.add(`${req.method} ${req.path}`);\n  history.lastActivity = now;\n\n  // Clean old history (keep last 10 minutes)\n  const tenMinutesAgo = now - (10 * 60 * 1000);\n  history.requests = history.requests.filter(r => r.timestamp > tenMinutesAgo);\n\n  // Clean old endpoints (reset every hour)\n  const oneHourAgo = now - (60 * 60 * 1000);\n  if (history.lastEndpointReset && now - history.lastEndpointReset > oneHourAgo) {\n    history.endpoints.clear();\n    history.lastEndpointReset = now;\n  }\n\n  // Check for suspicious activity\n  detectSuspiciousActivity(userId, history);\n}\n\n/**\n * Detect suspicious user activity patterns\n */\nfunction detectSuspiciousActivity(userId, history) {\n  const now = Date.now();\n  const tenSecondsAgo = now - (10 * 1000);\n  const oneMinuteAgo = now - (60 * 1000);\n\n  // Check for rapid requests\n  const recentRequests = history.requests.filter(r => r.timestamp > tenSecondsAgo);\n  if (recentRequests.length > SUSPICIOUS_THRESHOLDS.rapidRequests) {\n    markSuspiciousActivity(userId, 'rapid_requests', {\n      count: recentRequests.length,\n      threshold: SUSPICIOUS_THRESHOLDS.rapidRequests\n    });\n  }\n\n  // Check for accessing too many unique endpoints\n  const recentEndpoints = new Set(\n    history.requests\n      .filter(r => r.timestamp > oneMinuteAgo)\n      .map(r => r.endpoint)\n  );\n  \n  if (recentEndpoints.size > SUSPICIOUS_THRESHOLDS.uniqueEndpoints) {\n    markSuspiciousActivity(userId, 'endpoint_scanning', {\n      count: recentEndpoints.size,\n      threshold: SUSPICIOUS_THRESHOLDS.uniqueEndpoints\n    });\n  }\n}\n\n/**\n * Mark suspicious activity for a user\n */\nfunction markSuspiciousActivity(userId, type, details) {\n  const now = Date.now();\n  \n  if (!suspiciousActivity.has(userId)) {\n    suspiciousActivity.set(userId, []);\n  }\n\n  const activities = suspiciousActivity.get(userId);\n  activities.push({\n    type,\n    details,\n    timestamp: now\n  });\n\n  // Keep only recent suspicious activities (last hour)\n  const oneHourAgo = now - (60 * 60 * 1000);\n  suspiciousActivity.set(userId, activities.filter(a => a.timestamp > oneHourAgo));\n\n  console.warn(`🚨 Suspicious activity detected for user ${userId.substring(0, 8)}...: ${type}`, details);\n}\n\n/**\n * Get rate limiting statistics for monitoring\n */\nfunction getRateLimitStats() {\n  const now = Date.now();\n  const activeUsers = new Set();\n  const blockedUsers = new Set();\n  let totalRequests = 0;\n  let totalBlocked = 0;\n\n  for (const [key, data] of userRateLimits.entries()) {\n    const [userId] = key.split(':');\n    activeUsers.add(userId);\n    totalRequests += data.totalRequests || 0;\n    totalBlocked += data.blockedRequests || 0;\n    \n    if (data.blockedRequests > 0) {\n      blockedUsers.add(userId);\n    }\n  }\n\n  return {\n    activeUsers: activeUsers.size,\n    blockedUsers: blockedUsers.size,\n    totalRequests,\n    totalBlocked,\n    blockRate: totalRequests > 0 ? totalBlocked / totalRequests : 0,\n    suspiciousUsers: suspiciousActivity.size,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Get user-specific rate limit status\n */\nfunction getUserRateLimitStatus(userId) {\n  const userLimits = {};\n  const userHistory = userRequestHistory.get(userId);\n  const suspicious = suspiciousActivity.get(userId) || [];\n\n  // Collect all rate limits for this user\n  for (const [key, data] of userRateLimits.entries()) {\n    if (key.startsWith(userId + ':')) {\n      const category = key.split(':')[1];\n      userLimits[category] = {\n        totalRequests: data.totalRequests,\n        blockedRequests: data.blockedRequests,\n        currentRequests: data.requests.length,\n        lastRequest: new Date(data.lastRequest).toISOString()\n      };\n    }\n  }\n\n  return {\n    userId: userId.substring(0, 8) + '...', // Masked for privacy\n    limits: userLimits,\n    activity: userHistory ? {\n      recentRequestCount: userHistory.requests.length,\n      uniqueEndpoints: userHistory.endpoints.size,\n      lastActivity: new Date(userHistory.lastActivity).toISOString()\n    } : null,\n    suspicious: suspicious.length > 0 ? {\n      count: suspicious.length,\n      types: [...new Set(suspicious.map(s => s.type))]\n    } : null\n  };\n}\n\n// Periodic cleanup of old data\nsetInterval(() => {\n  const now = Date.now();\n  const oneHourAgo = now - (60 * 60 * 1000);\n  \n  // Clean up old rate limit data\n  for (const [key, data] of userRateLimits.entries()) {\n    if (data.lastRequest && data.lastRequest < oneHourAgo) {\n      userRateLimits.delete(key);\n    }\n  }\n  \n  // Clean up old request history\n  for (const [key, data] of userRequestHistory.entries()) {\n    if (data.lastActivity < oneHourAgo) {\n      userRequestHistory.delete(key);\n    }\n  }\n  \n  console.log(`🧹 Rate limit cleanup: ${userRateLimits.size} active limits, ${userRequestHistory.size} active users`);\n}, 10 * 60 * 1000); // Every 10 minutes\n\nmodule.exports = {\n  createUserRateLimit,\n  getRateLimitStats,\n  getUserRateLimitStatus\n};"],"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","ignoreList":[]}