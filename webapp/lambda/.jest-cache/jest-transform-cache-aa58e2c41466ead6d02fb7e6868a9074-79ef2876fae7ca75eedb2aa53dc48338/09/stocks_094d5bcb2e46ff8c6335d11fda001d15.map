{"version":3,"names":["cov_2fdwmtfaoh","actualCoverage","express","s","require","query","authenticateToken","schemaValidator","createValidationMiddleware","validationSchemas","sanitizers","router","Router","get","req","res","f","console","log","sectorsQuery","result","rows","length","dbError","error","query_type","error_message","message","detailed_diagnostics","attempted_operations","potential_causes","troubleshooting_steps","system_checks","sectors","map","row","sector","count","parseInt","avg_market_cap","b","parseFloat","avg_pe_ratio","json","success","data","timestamp","Date","toISOString","database_query_failed","emptySectors","limit","stocksQuery","endpoint","status","use","stocksListValidation","pagination","search","type","sanitizer","value","string","maxLength","escapeHTML","validator","errorMessage","alphaNumOnly","test","exchange","toUpperCase","sortBy","includes","sortOrder","toLowerCase","page","validated","offset","whereClause","params","paramCount","push","trim","validSortColumns","sortColumn","sortDirection","countQuery","stocksResult","countResult","Promise","all","safeQuery","validateTables","throwOnMissingTable","timeout","slice","total","totalPages","Math","ceil","formattedStocks","stock","ticker","symbol","name","security_name","fullName","long_name","shortName","short_name","displayName","display_name","fullExchangeName","full_exchange_name","marketCategory","market_category","market","sectorDisplay","sector_disp","industry","industryDisplay","industry_disp","businessSummary","business_summary","employeeCount","employee_count","website","website_url","investorRelationsWebsite","ir_website_url","address","street","address1","city","state","postalCode","postal_code","country","phoneNumber","phone_number","currency","quoteType","quote_type","price","current","current_price","previousClose","previous_close","open","open_price","dayLow","day_low","dayHigh","day_high","fiftyTwoWeekLow","fifty_two_week_low","fiftyTwoWeekHigh","fifty_two_week_high","fiftyDayAverage","fifty_day_avg","twoHundredDayAverage","two_hundred_day_avg","bid","bid_price","ask","ask_price","marketState","market_state","volume","averageVolume","average_volume","marketCap","market_cap","financialMetrics","trailingPE","trailing_pe","forwardPE","forward_pe","priceToSales","price_to_sales_ttm","priceToBook","price_to_book","pegRatio","peg_ratio","bookValue","book_value","enterpriseValue","enterprise_value","evToRevenue","ev_to_revenue","evToEbitda","ev_to_ebitda","totalRevenue","total_revenue","netIncome","net_income","ebitda","grossProfit","gross_profit","epsTrailing","eps_trailing","epsForward","eps_forward","epsCurrent","eps_current_year","priceEpsCurrent","price_eps_current_year","earningsGrowthQuarterly","earnings_q_growth_pct","revenueGrowth","revenue_growth_pct","earningsGrowth","earnings_growth_pct","totalCash","total_cash","cashPerShare","cash_per_share","operatingCashflow","operating_cashflow","freeCashflow","free_cashflow","totalDebt","total_debt","debtToEquity","debt_to_equity","quickRatio","quick_ratio","currentRatio","current_ratio","profitMargin","profit_margin_pct","grossMargin","gross_margin_pct","ebitdaMargin","ebitda_margin_pct","operatingMargin","operating_margin_pct","returnOnAssets","return_on_assets_pct","returnOnEquity","return_on_equity_pct","dividendRate","dividend_rate","dividendYield","dividend_yield","fiveYearAvgDividendYield","five_year_avg_dividend_yield","payoutRatio","payout_ratio","analystData","targetPrices","high","target_high_price","low","target_low_price","mean","target_mean_price","median","target_median_price","recommendation","key","recommendation_key","recommendation_mean","rating","average_analyst_rating","analystCount","analyst_opinion_count","governance","auditRisk","audit_risk","boardRisk","board_risk","compensationRisk","compensation_risk","shareholderRightsRisk","shareholder_rights_risk","overallRisk","overall_risk","leadership","executiveCount","leadership_count","hasLeadershipData","detailsAvailable","cqsSymbol","cqs_symbol","secondarySymbol","secondary_symbol","financialStatus","financial_status","isEtf","etf","testIssue","test_issue","roundLotSize","round_lot_size","hasData","dataSource","hasCompanyProfile","hasMarketData","hasFinancialMetrics","hasAnalystData","hasGovernanceData","displayData","primaryExchange","category","tradeable","keyMetrics","pe","revenue","analystRating","targetPrice","riskProfile","overall","hasHighRisk","hasModerateRisk","hasLowRisk","performance","hasNext","hasPrev","filters","metadata","totalStocks","currentPage","showingRecords","dataFields","dataSources","comprehensiveData","includesCompanyProfiles","includesMarketData","includesFinancialMetrics","includesAnalystEstimates","includesGovernanceScores","includesLeadershipTeam","endpoints","leadershipDetails","leadershipSummary","fallbackQuery","fallbackCountQuery","concat","note","fallbackError","details","priceRange","whereConditions","queryParams","paramIndex","min","max","split","v","minPrice","maxPrice","minVolume","join","safeSortBy","safeSortOrder","stocks","data_source","query_performance","execution_time_ms","now","conditions_applied","total_matching_stocks","tickerUpper","stockQuery","response","companyInfo","isETF","currentPrice","close","date","latest_date","adjClose","adj_close","requestedSymbol","resolvedSymbol","dataAvailability","basicInfo","priceData","technicalIndicators","fundamentals","priceCache","Map","CACHE_TTL","MAX_CACHE_SIZE","getCacheKey","timeframe","cleanCache","entry","entries","delete","startTime","cacheKey","cached","cacheAge","size","tableMap","daily","weekly","monthly","tableName","pricesQuery","queryPromise","timeoutPromise","_","reject","setTimeout","Error","race","table_existence_check_needed","data_loading_status_unknown","query_attempted","dataPoints","summary","latestPrice","latestDate","periodReturn","latestVolume","queryTime","prices","priceChange","price_change","priceChangePct","price_change_pct","latest","oldest","volume30Day","reduce","sum","p","high52Week","low52Week","responseData","toFixed","avgVolume30Day","round","set","stale","fallback","suggestion","period","historicalQuery","historicalData","pricesWithChange","idx","prev","post","createTableSQL","createIndexSQL","sampleData","insertedCount","insertSQL","insertError","warn","totalRows","tableCreated","indexCreated","sampleDataInserted","statsQuery","stats","total_stocks","ranges","min_market_cap","max_market_cap","pe_ratio","min_pe_ratio","max_pe_ratio","min_pb_ratio","max_pb_ratio","roe","min_roe","max_roe","revenue_growth","min_revenue_growth","max_revenue_growth","analyst_rating","min_analyst_rating","max_analyst_rating","createIndexes","indexSQL","verifyQuery","columns","indexesCreated","col","column_name","data_type","nullable","is_nullable","security","encryption","keyDerivation","userSaltBased","noPlaintextLogging","module","exports"],"sources":["stocks.js"],"sourcesContent":["const express = require('express');\nconst { query } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst schemaValidator = require('../utils/schemaValidator');\nconst { createValidationMiddleware, validationSchemas, sanitizers } = require('../middleware/validation');\n\nconst router = express.Router();\n\n// Public endpoints (no authentication required)\n// Get available sectors for filtering - public endpoint for general market data\nrouter.get('/sectors', async (req, res) => {\n  try {\n    console.log('Sectors endpoint called (public)');\n    \n    // Use robust query with proper error handling instead of fallback chains\n    const sectorsQuery = `\n      SELECT \n        COALESCE(s.sector, 'Unknown') as sector, \n        COUNT(*) as count,\n        AVG(CASE WHEN s.market_cap > 0 THEN s.market_cap END) as avg_market_cap,\n        AVG(CASE WHEN s.pe_ratio > 0 THEN s.pe_ratio END) as avg_pe_ratio\n      FROM stock_symbols s\n      WHERE s.is_active = TRUE AND s.sector IS NOT NULL AND s.sector != 'Unknown'\n      GROUP BY s.sector\n      ORDER BY count DESC\n    `;\n    \n    let result;\n    try {\n      result = await query(sectorsQuery);\n      console.log(`✅ Sectors query successful: ${result.rows.length} sectors found`);\n    } catch (dbError) {\n      console.error('❌ Sectors query failed - comprehensive diagnosis needed', {\n        query_type: 'sectors_aggregation',\n        error_message: dbError.message,\n        detailed_diagnostics: {\n          attempted_operations: ['stock_symbols_query', 'sector_aggregation'],\n          potential_causes: [\n            'stock_symbols table missing',\n            'Database connection failure',\n            'Schema validation error',\n            'Data type mismatch',\n            'Insufficient database permissions',\n            'Query timeout'\n          ],\n          troubleshooting_steps: [\n            'Check if stock_symbols table exists',\n            'Verify database connection health',\n            'Validate table schema structure',\n            'Check database permissions',\n            'Review query syntax and data types',\n            'Monitor database performance'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Schema integrity check',\n            'Connection pool availability'\n          ]\n        }\n      });\n      throw dbError; // Re-throw to trigger proper error handling\n    }\n    \n    const sectors = result.rows.map(row => ({\n      sector: row.sector,\n      count: parseInt(row.count),\n      avg_market_cap: parseFloat(row.avg_market_cap) || 0,\n      avg_pe_ratio: parseFloat(row.avg_pe_ratio) || null\n    }));\n    \n    res.json({\n      success: true,\n      data: sectors,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching sectors, using fallback data:', error);\n    \n    // Return empty sectors with comprehensive diagnostics\n    console.error('❌ Sectors data unavailable - comprehensive diagnosis needed', {\n      database_query_failed: true,\n      detailed_diagnostics: {\n        attempted_operations: ['stock_symbols_enhanced_query', 'stock_symbols_basic_query'],\n        potential_causes: [\n          'Database connection failure',\n          'stock_symbols table missing',\n          'stock_symbols_enhanced table missing',\n          'valuation_multiples table missing',\n          'Data loading scripts not executed',\n          'Database tables corrupted or empty'\n        ],\n        troubleshooting_steps: [\n          'Check database connectivity',\n          'Verify stock_symbols table exists',\n          'Verify stock_symbols_enhanced table exists',\n          'Check data loading process status',\n          'Review table structure and data integrity'\n        ],\n        system_checks: [\n          'Database health status',\n          'Table existence validation',\n          'Data freshness assessment',\n          'Schema validation'\n        ]\n      }\n    });\n    \n    const emptySectors = [];\n    \n    res.json({\n      success: true,\n      data: emptySectors,\n      message: 'No sectors data available - check data loading process',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Public endpoint for monitoring purposes - basic stock data without authentication\nrouter.get('/public/sample', async (req, res) => {\n  try {\n    console.log('Public stocks sample endpoint called for monitoring');\n    \n    const limit = parseInt(req.query.limit) || 5;\n    \n    // Use robust query with proper error handling instead of fallback chains\n    const stocksQuery = `\n      SELECT symbol, name as company_name, sector, exchange, market_cap\n      FROM stock_symbols\n      WHERE is_active = TRUE\n      ORDER BY market_cap DESC NULLS LAST\n      LIMIT $1\n    `;\n    \n    let result;\n    try {\n      result = await query(stocksQuery, [limit]);\n      console.log(`✅ Public stocks sample query successful: ${result.rows.length} stocks found`);\n    } catch (dbError) {\n      console.error('❌ Public stocks sample query failed - comprehensive diagnosis needed', {\n        query_type: 'public_stocks_sample',\n        limit,\n        error_message: dbError.message,\n        detailed_diagnostics: {\n          attempted_operations: ['stock_symbols_query', 'market_cap_ordering'],\n          potential_causes: [\n            'stock_symbols table missing',\n            'Database connection failure',\n            'Schema validation error',\n            'Data type mismatch in market_cap column',\n            'Insufficient database permissions',\n            'Query timeout'\n          ],\n          troubleshooting_steps: [\n            'Check if stock_symbols table exists',\n            'Verify database connection health',\n            'Validate table schema structure',\n            'Check market_cap column data types',\n            'Review database permissions',\n            'Monitor query execution time'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Schema integrity check',\n            'Connection pool availability'\n          ]\n        }\n      });\n      throw dbError; // Re-throw to trigger proper error handling\n    }\n    \n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      endpoint: 'public-sample',\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error in public stocks sample endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch stock data',\n      endpoint: 'public-sample',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Apply authentication to all other stock routes\nrouter.use(authenticateToken);\n\n// Basic ping endpoint\nrouter.get('/ping', (req, res) => {\n  res.json({\n    status: 'ok',\n    endpoint: 'stocks',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Validation schema for stocks list endpoint\nconst stocksListValidation = createValidationMiddleware({\n  ...validationSchemas.pagination,\n  search: {\n    type: 'string',\n    sanitizer: (value) => sanitizers.string(value, { maxLength: 100, escapeHTML: true }),\n    validator: (value) => !value || value.length <= 100,\n    errorMessage: 'Search query must be 100 characters or less'\n  },\n  sector: {\n    type: 'string',\n    sanitizer: (value) => sanitizers.string(value, { maxLength: 50, alphaNumOnly: false }),\n    validator: (value) => !value || /^[a-zA-Z\\s&-]{1,50}$/.test(value),\n    errorMessage: 'Sector must be valid sector name'\n  },\n  exchange: {\n    type: 'string',\n    sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }).toUpperCase(),\n    validator: (value) => !value || /^[A-Z]{1,10}$/.test(value),\n    errorMessage: 'Exchange must be valid exchange code'\n  },\n  sortBy: {\n    type: 'string',\n    sanitizer: (value) => sanitizers.string(value, { maxLength: 20, alphaNumOnly: false }),\n    validator: (value) => !value || ['symbol', 'ticker', 'name', 'exchange', 'market_category'].includes(value),\n    errorMessage: 'Invalid sort field'\n  },\n  sortOrder: {\n    type: 'string',\n    sanitizer: (value) => sanitizers.string(value, { maxLength: 4 }).toLowerCase(),\n    validator: (value) => !value || ['asc', 'desc'].includes(value),\n    errorMessage: 'Sort order must be asc or desc'\n  }\n});\n\n// OPTIMIZED: Main stocks endpoint with fast queries and all data visible\nrouter.get('/', stocksListValidation, async (req, res) => {\n  try {\n    console.log('OPTIMIZED Stocks main endpoint called with params:', req.query);\n    console.log('Triggering workflow deploy');\n    \n    // Use validated and sanitized parameters from validation middleware\n    const page = req.validated.page || 1;\n    const limit = req.validated.limit || 50;\n    const offset = (page - 1) * limit;\n    const search = req.validated.search || '';\n    const sector = req.validated.sector || '';\n    const exchange = req.validated.exchange || '';\n    const sortBy = req.validated.sortBy || 'symbol';\n    const sortOrder = req.validated.sortOrder || 'asc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n      params.push(`%${search}%`);\n    }\n\n    // Add sector filter (on s.sector)\n    if (sector && sector.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND s.sector = $${paramCount}`;\n      params.push(sector);\n    }\n\n    // Add exchange filter (on ss.exchange)\n    if (exchange && exchange.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND ss.exchange = $${paramCount}`;\n      params.push(exchange);\n    }\n\n    // FAST sort columns\n    const validSortColumns = {\n      'ticker': 'ss.symbol',\n      'symbol': 'ss.symbol', \n      'name': 'ss.security_name',\n      'exchange': 'ss.exchange',\n      'market_category': 'ss.market_category'\n    };\n\n    const sortColumn = validSortColumns[sortBy] || 'ss.symbol';\n    const sortDirection = sortOrder.toLowerCase() === 'desc' ? 'DESC' : 'ASC';\n\n    console.log('OPTIMIZED query params:', { whereClause, params, limit, offset });\n\n    // COMPREHENSIVE QUERY: Include ALL data from loadinfo script\n    const stocksQuery = `\n      SELECT \n        -- Stock symbols data\n        ss.symbol,\n        ss.security_name,\n        ss.exchange,\n        ss.market_category,\n        ss.cqs_symbol,\n        ss.financial_status,\n        ss.round_lot_size,\n        ss.etf,\n        ss.secondary_symbol,\n        ss.test_issue,\n        \n        -- Symbols data from loadinfo\n        s.short_name,\n        s.long_name,\n        s.display_name,\n        s.quote_type,\n        s.sector,\n        s.sector_disp,\n        s.industry,\n        s.industry_disp,\n        s.business_summary,\n        s.employee_count,\n        s.website_url,\n        s.ir_website_url,\n        s.address1,\n        s.city,\n        s.state,\n        s.postal_code,\n        s.country,\n        s.phone_number,\n        s.currency,\n        s.market,\n        s.full_exchange_name,\n        \n        -- Market data from loadinfo\n        md.current_price,\n        md.previous_close,\n        md.open_price,\n        md.day_low,\n        md.day_high,\n        md.volume,\n        md.average_volume,\n        md.market_cap,\n        md.fifty_two_week_low,\n        md.fifty_two_week_high,\n        md.fifty_day_avg,\n        md.two_hundred_day_avg,\n        md.bid_price,\n        md.ask_price,\n        md.market_state,\n        \n        -- Key financial metrics from loadinfo\n        km.trailing_pe,\n        km.forward_pe,\n        km.price_to_sales_ttm,\n        km.price_to_book,\n        km.book_value,\n        km.peg_ratio,\n        km.enterprise_value,\n        km.ev_to_revenue,\n        km.ev_to_ebitda,\n        km.total_revenue,\n        km.net_income,\n        km.ebitda,\n        km.gross_profit,\n        km.eps_trailing,\n        km.eps_forward,\n        km.eps_current_year,\n        km.price_eps_current_year,\n        km.earnings_q_growth_pct,\n        km.total_cash,\n        km.cash_per_share,\n        km.operating_cashflow,\n        km.free_cashflow,\n        km.total_debt,\n        km.debt_to_equity,\n        km.quick_ratio,\n        km.current_ratio,\n        km.profit_margin_pct,\n        km.gross_margin_pct,\n        km.ebitda_margin_pct,\n        km.operating_margin_pct,\n        km.return_on_assets_pct,\n        km.return_on_equity_pct,\n        km.revenue_growth_pct,\n        km.earnings_growth_pct,\n        km.dividend_rate,\n        km.dividend_yield,\n        km.five_year_avg_dividend_yield,\n        km.payout_ratio,\n        \n        -- Analyst estimates from loadinfo\n        ae.target_high_price,\n        ae.target_low_price,\n        ae.target_mean_price,\n        ae.target_median_price,\n        ae.recommendation_key,\n        ae.recommendation_mean,\n        ae.analyst_opinion_count,\n        ae.average_analyst_rating,\n        \n        -- Governance scores from loadinfo\n        gs.audit_risk,\n        gs.board_risk,\n        gs.compensation_risk,\n        gs.shareholder_rights_risk,\n        gs.overall_risk,\n        \n        -- Leadership team count (subquery)\n        COALESCE(lt_count.executive_count, 0) as leadership_count\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN market_data md ON ss.symbol = md.ticker\n      LEFT JOIN key_metrics km ON ss.symbol = km.ticker\n      LEFT JOIN analyst_estimates ae ON ss.symbol = ae.ticker\n      LEFT JOIN governance_scores gs ON ss.symbol = gs.ticker\n      LEFT JOIN (\n        SELECT ticker, COUNT(*) as executive_count \n        FROM leadership_team \n        GROUP BY ticker\n      ) lt_count ON ss.symbol = lt_count.ticker\n      ${whereClause}\n      ORDER BY ${sortColumn} ${sortDirection}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `;\n\n    params.push(limit, offset);\n\n    // Count query - also fast\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM stock_symbols ss\n      ${whereClause}\n    `;\n\n    console.log('Executing FAST queries with schema validation...');\n\n    // Execute queries with schema validation\n    const [stocksResult, countResult] = await Promise.all([\n      schemaValidator.safeQuery(stocksQuery, params, {\n        validateTables: true,\n        throwOnMissingTable: false,\n        timeout: 10000\n      }),\n      schemaValidator.safeQuery(countQuery, params.slice(0, -2), {\n        validateTables: true,\n        throwOnMissingTable: false,\n        timeout: 5000\n      })\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / limit);\n\n    console.log(`FAST query results: ${stocksResult.rows.length} stocks, ${total} total`);\n\n    // Professional formatting with ALL comprehensive data from loadinfo\n    const formattedStocks = stocksResult.rows.map(stock => ({\n      // Core identification\n      ticker: stock.symbol,\n      symbol: stock.symbol,\n      name: stock.security_name,\n      fullName: stock.long_name || stock.security_name,\n      shortName: stock.short_name,\n      displayName: stock.display_name,\n      \n      // Exchange & categorization \n      exchange: stock.exchange,\n      fullExchangeName: stock.full_exchange_name,\n      marketCategory: stock.market_category,\n      market: stock.market,\n      \n      // Business information\n      sector: stock.sector,\n      sectorDisplay: stock.sector_disp,\n      industry: stock.industry,\n      industryDisplay: stock.industry_disp,\n      businessSummary: stock.business_summary,\n      employeeCount: stock.employee_count,\n      \n      // Contact information\n      website: stock.website_url,\n      investorRelationsWebsite: stock.ir_website_url,\n      address: {\n        street: stock.address1,\n        city: stock.city,\n        state: stock.state,\n        postalCode: stock.postal_code,\n        country: stock.country\n      },\n      phoneNumber: stock.phone_number,\n      \n      // Financial details\n      currency: stock.currency,\n      quoteType: stock.quote_type,\n      \n      // Current market data\n      price: {\n        current: stock.current_price,\n        previousClose: stock.previous_close,\n        open: stock.open_price,\n        dayLow: stock.day_low,\n        dayHigh: stock.day_high,\n        fiftyTwoWeekLow: stock.fifty_two_week_low,\n        fiftyTwoWeekHigh: stock.fifty_two_week_high,\n        fiftyDayAverage: stock.fifty_day_avg,\n        twoHundredDayAverage: stock.two_hundred_day_avg,\n        bid: stock.bid_price,\n        ask: stock.ask_price,\n        marketState: stock.market_state\n      },\n      \n      // Volume data\n      volume: stock.volume,\n      averageVolume: stock.average_volume,\n      marketCap: stock.market_cap,\n      \n      // Comprehensive financial metrics\n      financialMetrics: {\n        // Valuation ratios\n        trailingPE: stock.trailing_pe,\n        forwardPE: stock.forward_pe,\n        priceToSales: stock.price_to_sales_ttm,\n        priceToBook: stock.price_to_book,\n        pegRatio: stock.peg_ratio,\n        bookValue: stock.book_value,\n        \n        // Enterprise metrics\n        enterpriseValue: stock.enterprise_value,\n        evToRevenue: stock.ev_to_revenue,\n        evToEbitda: stock.ev_to_ebitda,\n        \n        // Financial results\n        totalRevenue: stock.total_revenue,\n        netIncome: stock.net_income,\n        ebitda: stock.ebitda,\n        grossProfit: stock.gross_profit,\n        \n        // Earnings per share\n        epsTrailing: stock.eps_trailing,\n        epsForward: stock.eps_forward,\n        epsCurrent: stock.eps_current_year,\n        priceEpsCurrent: stock.price_eps_current_year,\n        \n        // Growth metrics\n        earningsGrowthQuarterly: stock.earnings_q_growth_pct,\n        revenueGrowth: stock.revenue_growth_pct,\n        earningsGrowth: stock.earnings_growth_pct,\n        \n        // Cash & debt\n        totalCash: stock.total_cash,\n        cashPerShare: stock.cash_per_share,\n        operatingCashflow: stock.operating_cashflow,\n        freeCashflow: stock.free_cashflow,\n        totalDebt: stock.total_debt,\n        debtToEquity: stock.debt_to_equity,\n        \n        // Liquidity ratios\n        quickRatio: stock.quick_ratio,\n        currentRatio: stock.current_ratio,\n        \n        // Profitability margins\n        profitMargin: stock.profit_margin_pct,\n        grossMargin: stock.gross_margin_pct,\n        ebitdaMargin: stock.ebitda_margin_pct,\n        operatingMargin: stock.operating_margin_pct,\n        \n        // Return metrics\n        returnOnAssets: stock.return_on_assets_pct,\n        returnOnEquity: stock.return_on_equity_pct,\n        \n        // Dividend information\n        dividendRate: stock.dividend_rate,\n        dividendYield: stock.dividend_yield,\n        fiveYearAvgDividendYield: stock.five_year_avg_dividend_yield,\n        payoutRatio: stock.payout_ratio\n      },\n      \n      // Analyst estimates and recommendations\n      analystData: {\n        targetPrices: {\n          high: stock.target_high_price,\n          low: stock.target_low_price,\n          mean: stock.target_mean_price,\n          median: stock.target_median_price\n        },\n        recommendation: {\n          key: stock.recommendation_key,\n          mean: stock.recommendation_mean,\n          rating: stock.average_analyst_rating\n        },\n        analystCount: stock.analyst_opinion_count\n      },\n      \n      // Governance data\n      governance: {\n        auditRisk: stock.audit_risk,\n        boardRisk: stock.board_risk,\n        compensationRisk: stock.compensation_risk,\n        shareholderRightsRisk: stock.shareholder_rights_risk,\n        overallRisk: stock.overall_risk\n      },\n      \n      // Leadership team summary\n      leadership: {\n        executiveCount: stock.leadership_count,\n        hasLeadershipData: stock.leadership_count > 0,\n        // Full leadership data available via /leadership/:ticker endpoint\n        detailsAvailable: true\n      },\n      \n      // Additional identifiers\n      cqsSymbol: stock.cqs_symbol,\n      secondarySymbol: stock.secondary_symbol,\n      \n      // Status & type\n      financialStatus: stock.financial_status,\n      isEtf: stock.etf === 'Y',\n      testIssue: stock.test_issue === 'Y',\n      roundLotSize: stock.round_lot_size,\n      \n      // Comprehensive data availability indicators\n      hasData: true,\n      dataSource: 'comprehensive_loadinfo_query',\n      hasCompanyProfile: !!stock.long_name,\n      hasMarketData: !!stock.current_price,\n      hasFinancialMetrics: !!stock.trailing_pe || !!stock.total_revenue,\n      hasAnalystData: !!stock.target_mean_price || !!stock.recommendation_key,\n      hasGovernanceData: !!stock.overall_risk,\n      hasLeadershipData: stock.leadership_count > 0,\n      \n      // Professional presentation with rich data\n      displayData: {\n        primaryExchange: stock.full_exchange_name || stock.exchange || 'Unknown',\n        category: stock.market_category || 'Standard',\n        type: stock.etf === 'Y' ? 'ETF' : 'Stock',\n        tradeable: stock.financial_status !== 'D' && stock.test_issue !== 'Y',\n        sector: stock.sector_disp || stock.sector || 'Unknown',\n        industry: stock.industry_disp || stock.industry || 'Unknown',\n        \n        // Key financial highlights for quick view\n        keyMetrics: {\n          pe: stock.trailing_pe,\n          marketCap: stock.market_cap,\n          revenue: stock.total_revenue,\n          profitMargin: stock.profit_margin_pct,\n          dividendYield: stock.dividend_yield,\n          analystRating: stock.recommendation_key,\n          targetPrice: stock.target_mean_price\n        },\n        \n        // Risk summary\n        riskProfile: {\n          overall: stock.overall_risk,\n          hasHighRisk: (stock.overall_risk && stock.overall_risk >= 8),\n          hasModerateRisk: (stock.overall_risk && stock.overall_risk >= 5 && stock.overall_risk < 8),\n          hasLowRisk: (stock.overall_risk && stock.overall_risk < 5)\n        }\n      }\n    }));\n\n    res.json({\n      success: true,\n      performance: 'COMPREHENSIVE LOADINFO DATA - All company profiles, market data, financial metrics, analyst estimates, and governance scores from loadinfo tables',\n      data: formattedStocks,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      },\n      filters: {\n        search: search || null,\n        exchange: exchange || null,\n        sortBy,\n        sortOrder\n      },\n      metadata: {\n        totalStocks: total,\n        currentPage: page,\n        showingRecords: stocksResult.rows.length,\n        dataFields: [\n          // Basic stock symbol data\n          'symbol', 'security_name', 'exchange', 'market_category',\n          'cqs_symbol', 'financial_status', 'etf', 'round_lot_size', \n          'test_issue', 'secondary_symbol',\n          \n          // Company profile data\n          'short_name', 'long_name', 'display_name', 'quote_type',\n          'sector', 'sector_disp', 'industry', 'industry_disp',\n          'business_summary', 'employee_count', 'website_url', \n          'ir_website_url', 'address1', 'city', 'state', 'postal_code',\n          'country', 'phone_number', 'currency', 'market', 'full_exchange_name',\n          \n          // Market data\n          'current_price', 'previous_close', 'open_price', 'day_low', 'day_high',\n          'volume', 'average_volume', 'market_cap', 'fifty_two_week_low',\n          'fifty_two_week_high', 'fifty_day_avg', 'two_hundred_day_avg',\n          'bid_price', 'ask_price', 'market_state',\n          \n          // Financial metrics\n          'trailing_pe', 'forward_pe', 'price_to_sales_ttm', 'price_to_book',\n          'book_value', 'peg_ratio', 'enterprise_value', 'ev_to_revenue',\n          'ev_to_ebitda', 'total_revenue', 'net_income', 'ebitda', 'gross_profit',\n          'eps_trailing', 'eps_forward', 'eps_current_year', 'earnings_q_growth_pct',\n          'total_cash', 'cash_per_share', 'operating_cashflow', 'free_cashflow',\n          'total_debt', 'debt_to_equity', 'quick_ratio', 'current_ratio',\n          'profit_margin_pct', 'gross_margin_pct', 'ebitda_margin_pct',\n          'operating_margin_pct', 'return_on_assets_pct', 'return_on_equity_pct',\n          'revenue_growth_pct', 'earnings_growth_pct', 'dividend_rate',\n          'dividend_yield', 'five_year_avg_dividend_yield', 'payout_ratio',\n          \n          // Analyst estimates\n          'target_high_price', 'target_low_price', 'target_mean_price',\n          'target_median_price', 'recommendation_key', 'recommendation_mean',\n          'analyst_opinion_count', 'average_analyst_rating',\n          \n          // Governance data\n          'audit_risk', 'board_risk', 'compensation_risk', 'shareholder_rights_risk',\n          'overall_risk'\n        ],\n        dataSources: [\n          'stock_symbols', 'symbols', 'market_data', 'key_metrics',\n          'analyst_estimates', 'governance_scores', 'leadership_team'\n        ],\n        comprehensiveData: {\n          includesCompanyProfiles: true,\n          includesMarketData: true,\n          includesFinancialMetrics: true,\n          includesAnalystEstimates: true,\n          includesGovernanceScores: true,\n          includesLeadershipTeam: true // Count included, details via /leadership/:ticker\n        },\n        endpoints: {\n          leadershipDetails: '/api/stocks/leadership/:ticker',\n          leadershipSummary: '/api/stocks/leadership'\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('OPTIMIZED endpoint error:', error);\n    \n    // If symbols table doesn't exist, fallback to stock_symbols only\n    if (error.message && error.message.includes('does not exist')) {\n      console.log('Symbols table missing, using fallback query with stock_symbols only');\n      try {\n        const fallbackQuery = `\n          SELECT \n            ss.symbol,\n            ss.security_name,\n            ss.exchange,\n            ss.market_category,\n            ss.cqs_symbol,\n            ss.financial_status,\n            ss.round_lot_size,\n            ss.etf,\n            ss.secondary_symbol,\n            ss.test_issue,\n            NULL as short_name,\n            NULL as long_name,\n            NULL as sector,\n            NULL as industry,\n            NULL as market_cap,\n            NULL as current_price\n          FROM stock_symbols ss\n          ${whereClause}\n          ORDER BY ${sortColumn} ${sortDirection}\n          LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n        `;\n        \n        const fallbackCountQuery = `\n          SELECT COUNT(*) as total\n          FROM stock_symbols ss\n          ${whereClause}\n        `;\n        \n        params.push(limit, offset);\n        \n        const [stocksResult, countResult] = await Promise.all([\n          query(fallbackQuery, params.slice(0, -2).concat([limit, offset])),\n          query(fallbackCountQuery, params.slice(0, -2))\n        ]);\n        \n        return res.json({\n          success: true,\n          data: stocksResult.rows,\n          pagination: {\n            page,\n            limit,\n            total: parseInt(countResult.rows[0].total),\n            totalPages: Math.ceil(parseInt(countResult.rows[0].total) / limit)\n          },\n          note: 'Using basic stock symbols data. Run stock-symbols loader to enable enhanced data.',\n          timestamp: new Date().toISOString()\n        });\n      } catch (fallbackError) {\n        console.error('Fallback query failed:', fallbackError);\n      }\n    }\n    \n    res.status(500).json({ \n      error: 'Optimized query failed',\n      details: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Screen endpoint - MUST come before /:ticker to avoid route collision\nrouter.get('/screen', async (req, res) => {\n  try {\n    console.log('🔍 Stock screening endpoint called with params:', req.query);\n    \n    const {\n      sector,\n      marketCap,\n      priceRange,\n      volume,\n      sortBy = 'market_cap',\n      sortOrder = 'DESC',\n      page = 1,\n      limit = 25\n    } = req.query;\n    \n    const offset = (parseInt(page) - 1) * parseInt(limit);\n    \n    // Build dynamic query based on screening criteria\n    let whereConditions = ['current_price IS NOT NULL', 'market_cap IS NOT NULL'];\n    let queryParams = [];\n    let paramIndex = 1;\n    \n    // Sector filter\n    if (sector && sector !== 'all') {\n      whereConditions.push(`sector = $${paramIndex}`);\n      queryParams.push(sector);\n      paramIndex++;\n    }\n    \n    // Market cap filter\n    if (marketCap) {\n      const [min, max] = marketCap.split('-').map(v => parseFloat(v) * 1000000000); // Convert billions to actual value\n      if (min) {\n        whereConditions.push(`market_cap >= $${paramIndex}`);\n        queryParams.push(min);\n        paramIndex++;\n      }\n      if (max && max > 0) {\n        whereConditions.push(`market_cap <= $${paramIndex}`);\n        queryParams.push(max);\n        paramIndex++;\n      }\n    }\n    \n    // Price range filter\n    if (priceRange) {\n      const [minPrice, maxPrice] = priceRange.split('-').map(v => parseFloat(v));\n      if (minPrice) {\n        whereConditions.push(`current_price >= $${paramIndex}`);\n        queryParams.push(minPrice);\n        paramIndex++;\n      }\n      if (maxPrice && maxPrice > 0) {\n        whereConditions.push(`current_price <= $${paramIndex}`);\n        queryParams.push(maxPrice);\n        paramIndex++;\n      }\n    }\n    \n    // Volume filter\n    if (volume) {\n      const minVolume = parseInt(volume) * 1000000; // Convert millions to actual volume\n      whereConditions.push(`volume >= $${paramIndex}`);\n      queryParams.push(minVolume);\n      paramIndex++;\n    }\n    \n    const whereClause = whereConditions.join(' AND ');\n    const validSortColumns = ['market_cap', 'current_price', 'change_percent', 'volume', 'symbol'];\n    const safeSortBy = validSortColumns.includes(sortBy) ? sortBy : 'market_cap';\n    const safeSortOrder = ['ASC', 'DESC'].includes(sortOrder.toUpperCase()) ? sortOrder.toUpperCase() : 'DESC';\n    \n    console.log(`📊 Screening with conditions: ${whereClause}`);\n    console.log(`📊 Query parameters:`, queryParams);\n    \n    // Get total count for pagination\n    const countQuery = `\n      SELECT COUNT(*) as total \n      FROM stocks \n      WHERE ${whereClause}\n    `;\n    \n    const countResult = await query(countQuery, queryParams);\n    const totalStocks = parseInt(countResult.rows[0]?.total || 0);\n    \n    // Get the actual stocks\n    const stocksQuery = `\n      SELECT \n        symbol,\n        company_name,\n        sector,\n        current_price,\n        change_percent,\n        volume,\n        market_cap,\n        pe_ratio,\n        dividend_yield,\n        beta\n      FROM stocks \n      WHERE ${whereClause}\n      ORDER BY ${safeSortBy} ${safeSortOrder}\n      LIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n    `;\n    \n    queryParams.push(parseInt(limit), offset);\n    \n    const stocksResult = await query(stocksQuery, queryParams, 10000); // 10 second timeout for complex screening\n    \n    console.log(`✅ Retrieved ${stocksResult.rows.length} stocks out of ${totalStocks} total matching criteria`);\n    \n    res.json({\n      success: true,\n      data: {\n        stocks: stocksResult.rows,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total: totalStocks,\n          totalPages: Math.ceil(totalStocks / parseInt(limit))\n        },\n        filters: {\n          sector: sector || 'all',\n          marketCap: marketCap || 'all',\n          priceRange: priceRange || 'all',\n          volume: volume || 'all',\n          sortBy: safeSortBy,\n          sortOrder: safeSortOrder\n        }\n      },\n      data_source: 'real_database',\n      query_performance: {\n        execution_time_ms: Date.now() - Date.now(),\n        conditions_applied: whereConditions.length,\n        total_matching_stocks: totalStocks\n      },\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Screen endpoint error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to screen stocks',\n      message: error.message\n    });\n  }\n});\n\n// SIMPLIFIED Individual Stock Endpoint - Fast and reliable\nrouter.get('/:ticker', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const tickerUpper = ticker.toUpperCase();\n    \n    console.log(`SIMPLIFIED stock endpoint called for: ${tickerUpper}`);\n    \n    // SINGLE OPTIMIZED QUERY - Get everything we need in one go\n    const stockQuery = `\n      SELECT \n        ss.symbol,\n        ss.security_name,\n        ss.exchange,\n        ss.market_category,\n        ss.financial_status,\n        ss.etf,\n        pd.date as latest_date,\n        pd.open,\n        pd.high,\n        pd.low,\n        pd.close,\n        pd.volume,\n        pd.adj_close\n      FROM stock_symbols ss\n      LEFT JOIN (\n        SELECT DISTINCT ON (symbol) \n          symbol, date, open, high, low, close, volume, adj_close\n        FROM price_daily\n        WHERE symbol = $1\n        ORDER BY symbol, date DESC\n      ) pd ON ss.symbol = pd.symbol\n      WHERE ss.symbol = $1\n    `;\n    \n    const result = await query(stockQuery, [tickerUpper]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Stock not found',\n        symbol: tickerUpper,\n        message: `Symbol '${tickerUpper}' not found in database`,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const stock = result.rows[0];\n    \n    // SIMPLE RESPONSE - Just the essential data\n    const response = {\n      symbol: tickerUpper,\n      ticker: tickerUpper,\n      companyInfo: {\n        name: stock.security_name,\n        exchange: stock.exchange,\n        marketCategory: stock.market_category,\n        financialStatus: stock.financial_status,\n        isETF: stock.etf === 't' || stock.etf === true\n      },\n      currentPrice: stock.close ? {\n        date: stock.latest_date,\n        open: parseFloat(stock.open || 0),\n        high: parseFloat(stock.high || 0),\n        low: parseFloat(stock.low || 0),\n        close: parseFloat(stock.close || 0),\n        adjClose: parseFloat(stock.adj_close || stock.close || 0),\n        volume: parseInt(stock.volume || 0)\n      } : null,\n      metadata: {\n        requestedSymbol: ticker,\n        resolvedSymbol: tickerUpper,\n        dataAvailability: {\n          basicInfo: true,\n          priceData: stock.close !== null,\n          technicalIndicators: false, // Disabled for speed\n          fundamentals: false // Disabled for speed\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n    \n    console.log(`✅ SIMPLIFIED: Successfully returned basic data for ${tickerUpper}`);\n    \n    res.json(response);\n    \n  } catch (error) {\n    console.error('Error in simplified stock endpoint:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch stock data', \n      symbol: req.params.ticker,\n      message: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get stock price history \n// In-memory cache for frequently requested price data\nconst priceCache = new Map();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\nconst MAX_CACHE_SIZE = 1000; // Limit cache size\n\n// Helper function to get cache key\nconst getCacheKey = (symbol, timeframe, limit) => `${symbol}_${timeframe}_${limit}`;\n\n// Helper function to clean expired cache entries\nconst cleanCache = () => {\n  const now = Date.now();\n  for (const [key, entry] of priceCache.entries()) {\n    if (now - entry.timestamp > CACHE_TTL) {\n      priceCache.delete(key);\n    }\n  }\n};\n\n// Optimized prices endpoint with caching and performance improvements\nrouter.get('/:ticker/prices', async (req, res) => {\n  const startTime = Date.now();\n  const { ticker } = req.params;\n  const timeframe = req.query.timeframe || 'daily';\n  const limit = Math.min(parseInt(req.query.limit) || 30, 365); // Increased max to 1 year\n  \n  const symbol = ticker.toUpperCase();\n  const cacheKey = getCacheKey(symbol, timeframe, limit);\n  \n  console.log(`🚀 OPTIMIZED prices endpoint: ${symbol}, timeframe: ${timeframe}, limit: ${limit}`);\n  \n  try {\n    // Check cache first\n    const cached = priceCache.get(cacheKey);\n    if (cached && (Date.now() - cached.timestamp < CACHE_TTL)) {\n      console.log(`📦 Cache hit for ${symbol} (${Date.now() - cached.timestamp}ms old)`);\n      return res.json({\n        ...cached.data,\n        cached: true,\n        cacheAge: Date.now() - cached.timestamp\n      });\n    }\n\n    // Clean cache periodically\n    if (priceCache.size > MAX_CACHE_SIZE) {\n      cleanCache();\n    }\n\n    // Determine table and optimize query based on timeframe\n    const tableMap = {\n      daily: 'price_daily',\n      weekly: 'price_weekly', \n      monthly: 'price_monthly'\n    };\n    \n    const tableName = tableMap[timeframe] || 'price_daily';\n    \n    // Optimized query - database-level calculations and proper indexing\n    const pricesQuery = `\n      WITH price_data AS (\n        SELECT \n          date,\n          open::DECIMAL(12,4) as open,\n          high::DECIMAL(12,4) as high,\n          low::DECIMAL(12,4) as low,\n          close::DECIMAL(12,4) as close,\n          adj_close::DECIMAL(12,4) as adj_close,\n          volume::BIGINT as volume,\n          LAG(close) OVER (ORDER BY date DESC) as prev_close\n        FROM ${tableName}\n        WHERE symbol = $1 \n          AND date >= CURRENT_DATE - INTERVAL '2 years'\n          AND close IS NOT NULL\n        ORDER BY date DESC\n        LIMIT $2\n      )\n      SELECT \n        date,\n        open,\n        high, \n        low,\n        close,\n        adj_close,\n        volume,\n        CASE \n          WHEN prev_close IS NOT NULL AND prev_close > 0 \n          THEN ROUND((close - prev_close)::DECIMAL, 4)\n          ELSE NULL \n        END as price_change,\n        CASE \n          WHEN prev_close IS NOT NULL AND prev_close > 0\n          THEN ROUND(((close - prev_close) / prev_close * 100)::DECIMAL, 4)\n          ELSE NULL \n        END as price_change_pct\n      FROM price_data\n      ORDER BY date DESC;\n    `;\n\n    // Execute query with timeout protection\n    const queryPromise = query(pricesQuery, [symbol, limit]);\n    const timeoutPromise = new Promise((_, reject) => \n      setTimeout(() => reject(new Error('Query timeout - database taking too long')), 15000)\n    );\n\n    const result = await Promise.race([queryPromise, timeoutPromise]);\n    \n    if (!result.rows || result.rows.length === 0) {\n      // Return structured empty response with comprehensive diagnostics\n      console.error(`❌ No historical data found for ${symbol} - comprehensive diagnosis needed`, {\n        symbol,\n        database_query_failed: true,\n        table_existence_check_needed: true,\n        data_loading_status_unknown: true,\n        detailed_diagnostics: {\n          query_attempted: 'historical_price_data_query',\n          potential_causes: [\n            'Symbol not found in price_daily table',\n            'Data loading scripts not executed for this symbol',\n            'Database tables missing or corrupted',\n            'Stock symbol delisted or invalid',\n            'Data sync process failed for historical data'\n          ],\n          troubleshooting_steps: [\n            'Check if symbol exists in stock_symbols table',\n            'Verify price_daily table has data for this symbol',\n            'Check data loading script execution logs',\n            'Validate external data provider connectivity',\n            'Review data sync process status'\n          ],\n          system_checks: [\n            'Database connectivity',\n            'Table existence validation',\n            'Data freshness assessment',\n            'External API availability',\n            'Data loading process health'\n          ]\n        }\n      });\n      \n      return res.status(404).json({\n        success: false,\n        error: 'Historical data not available',\n        ticker: symbol,\n        dataPoints: 0,\n        data: [],\n        summary: {\n          latestPrice: null,\n          latestDate: null,\n          periodReturn: null,\n          latestVolume: null\n        },\n        data_source: 'empty',\n        message: 'No historical data available for this symbol',\n        timestamp: new Date().toISOString(),\n        queryTime: Date.now() - startTime\n      });\n    }\n\n    // Process results efficiently\n    const prices = result.rows.map(row => ({\n      date: row.date,\n      open: parseFloat(row.open),\n      high: parseFloat(row.high),\n      low: parseFloat(row.low),\n      close: parseFloat(row.close),\n      adjClose: parseFloat(row.adj_close),\n      volume: parseInt(row.volume) || 0,\n      priceChange: row.price_change ? parseFloat(row.price_change) : null,\n      priceChangePct: row.price_change_pct ? parseFloat(row.price_change_pct) : null\n    }));\n\n    const latest = prices[0];\n    const oldest = prices[prices.length - 1];\n    const periodReturn = oldest?.close > 0 ? \n      ((latest.close - oldest.close) / oldest.close * 100) : 0;\n\n    // Calculate additional metrics\n    const volume30Day = prices.slice(0, 30).reduce((sum, p) => sum + p.volume, 0) / Math.min(30, prices.length);\n    const high52Week = Math.max(...prices.slice(0, Math.min(252, prices.length)).map(p => p.high));\n    const low52Week = Math.min(...prices.slice(0, Math.min(252, prices.length)).map(p => p.low));\n\n    const responseData = {\n      success: true,\n      ticker: symbol,\n      timeframe,\n      dataPoints: prices.length,\n      data: prices,\n      summary: {\n        latestPrice: latest.close,\n        latestDate: latest.date,\n        periodReturn: parseFloat(periodReturn.toFixed(4)),\n        latestVolume: latest.volume,\n        avgVolume30Day: Math.round(volume30Day),\n        high52Week: parseFloat(high52Week.toFixed(4)),\n        low52Week: parseFloat(low52Week.toFixed(4)),\n        priceRange: `${low52Week.toFixed(2)} - ${high52Week.toFixed(2)}`\n      },\n      cached: false,\n      queryTime: Date.now() - startTime,\n      timestamp: new Date().toISOString()\n    };\n\n    // Cache the response\n    priceCache.set(cacheKey, {\n      data: responseData,\n      timestamp: Date.now()\n    });\n\n    console.log(`✅ ${symbol} prices fetched: ${prices.length} records in ${Date.now() - startTime}ms`);\n    res.json(responseData);\n    \n  } catch (error) {\n    console.error(`❌ Error fetching ${symbol} prices:`, error);\n    \n    // Graceful fallback - try to return cached data even if expired\n    const cached = priceCache.get(cacheKey);\n    if (cached) {\n      console.log(`🔄 Returning stale cache for ${symbol} due to error`);\n      return res.json({\n        ...cached.data,\n        cached: true,\n        stale: true,\n        cacheAge: Date.now() - cached.timestamp,\n        error: 'Live data unavailable, showing cached data'\n      });\n    }\n\n    // Final fallback with helpful error response\n    res.status(500).json({ \n      success: false,\n      error: 'Failed to fetch stock prices', \n      details: error.message.includes('timeout') ? 'Database query timed out' : 'Database error',\n      ticker: symbol,\n      data: [],\n      queryTime: Date.now() - startTime,\n      timestamp: new Date().toISOString(),\n      fallback: true,\n      suggestion: 'Try again with a smaller limit or different timeframe'\n    });\n  }\n});\n\n// Historical stock data endpoint for chart components\nrouter.get('/:ticker/historical', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const period = parseInt(req.query.period) || 30; // Default 30 days\n    const symbol = ticker.toUpperCase();\n    \n    console.log(`📊 [STOCKS] Historical data endpoint called for ${symbol}, period: ${period} days`);\n    \n    // Query historical price data\n    const historicalQuery = `\n      SELECT \n        date,\n        open::DECIMAL(12,4) as open,\n        high::DECIMAL(12,4) as high,\n        low::DECIMAL(12,4) as low,\n        close::DECIMAL(12,4) as close,\n        adj_close::DECIMAL(12,4) as adj_close,\n        volume::BIGINT as volume\n      FROM price_daily \n      WHERE UPPER(symbol) = UPPER($1)\n        AND date >= CURRENT_DATE - INTERVAL '${period} days'\n        AND close IS NOT NULL\n      ORDER BY date ASC\n      LIMIT 1000\n    `;\n    \n    const result = await query(historicalQuery, [symbol]);\n    \n    if (result.rows.length === 0) {\n      console.log(`📊 [STOCKS] No historical data found for ${symbol}`);\n      return res.status(404).json({\n        success: false,\n        error: 'No historical data found',\n        symbol: symbol,\n        message: `Historical data not available for ${symbol}`,\n        data: [],\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Format data for chart component\n    const historicalData = result.rows.map(row => ({\n      date: row.date,\n      open: parseFloat(row.open),\n      high: parseFloat(row.high),\n      low: parseFloat(row.low),\n      close: parseFloat(row.close),\n      volume: parseInt(row.volume) || 0\n    }));\n    \n    console.log(`📊 [STOCKS] Successfully returning ${historicalData.length} historical data points for ${symbol}`);\n    \n    res.json({\n      success: true,\n      data: historicalData,\n      symbol: symbol,\n      period: period,\n      dataPoints: historicalData.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ [STOCKS] Error fetching historical data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch historical data',\n      details: error.message,\n      symbol: req.params.ticker,\n      data: [],\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get recent stock price history (alias for /prices with recent in the path)\nrouter.get('/:ticker/prices/recent', async (req, res) => {\n  try {\n    const { ticker } = req.params;\n    const limit = Math.min(parseInt(req.query.limit) || 30, 90); // Max 90 days for performance\n    \n    console.log(`📊 [STOCKS] Recent prices endpoint called for ticker: ${ticker}, limit: ${limit}`);\n    \n    const pricesQuery = `\n      SELECT date, open, high, low, close, adj_close, volume\n      FROM price_daily\n      WHERE UPPER(symbol) = UPPER($1)\n      ORDER BY date DESC\n      LIMIT $2\n    `;\n    \n    const result = await query(pricesQuery, [ticker, limit]);\n    \n    if (result.rows.length === 0) {\n      console.log(`📊 [STOCKS] No price data found for ${ticker}`);\n      return res.status(404).json({\n        success: false,\n        error: 'No price data found',\n        ticker: ticker.toUpperCase(),\n        message: 'Price data not available for this symbol',\n        data: [],\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Process the data\n    const prices = result.rows;\n    const latest = prices[0];\n    const oldest = prices[prices.length - 1];\n\n    const periodReturn = oldest.close > 0 ? \n      ((latest.close - oldest.close) / oldest.close * 100) : 0;\n\n    // Format data for frontend\n    const pricesWithChange = prices.map((price, idx) => {\n      let priceChange = null, priceChangePct = null;\n      if (idx < prices.length - 1) {\n        const prev = prices[idx + 1];\n        priceChange = price.close - prev.close;\n        priceChangePct = prev.close !== 0 ? priceChange / prev.close : null;\n      }\n      return {\n        date: price.date,\n        open: parseFloat(price.open),\n        high: parseFloat(price.high),\n        low: parseFloat(price.low),\n        close: parseFloat(price.close),\n        adjClose: parseFloat(price.adj_close),\n        volume: parseInt(price.volume) || 0,\n        priceChange,\n        priceChangePct\n      };\n    });\n\n    console.log(`📊 [STOCKS] Successfully returning ${pricesWithChange.length} price records for ${ticker}`);\n\n    res.json({\n      success: true,\n      ticker: ticker.toUpperCase(),\n      dataPoints: result.rows.length,\n      data: pricesWithChange,\n      summary: {\n        latestPrice: parseFloat(latest.close),\n        latestDate: latest.date,\n        periodReturn: parseFloat(periodReturn.toFixed(2)),\n        latestVolume: parseInt(latest.volume) || 0\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ [STOCKS] Error fetching recent stock prices:', error);\n    res.status(500).json({ \n      success: false,\n      error: 'Failed to fetch recent stock prices', \n      details: error.message,\n      data: [], // Always return data as an array for frontend safety\n      ticker: req.params.ticker,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get available filters - exchanges instead of sectors\nrouter.get('/filters/sectors', async (req, res) => {\n  try {\n    console.log('Stock filters/sectors (exchanges) endpoint called');\n    \n    const sectorsQuery = `\n      SELECT exchange, COUNT(*) as count\n      FROM stock_symbols\n      WHERE exchange IS NOT NULL\n      GROUP BY exchange\n      ORDER BY count DESC, exchange ASC\n    `;\n    \n    const result = await query(sectorsQuery);\n    \n    res.json({\n      data: result.rows.map(row => ({\n        name: row.exchange,\n        value: row.exchange,\n        count: parseInt(row.count)\n      })),\n      total: result.rows.length,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching stock exchanges:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch stock exchanges', \n      details: error.message,\n      data: [], // Always return data as an array for frontend safety\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Screen stocks with advanced filtering - DISABLED: Moved to line 520 to fix route collision\n// router.get('/screen', async (req, res) => {\n/*  try {\n    console.log('🔍 Screen endpoint HIT! Method:', req.method, 'URL:', req.url);\n    console.log('🔍 Screen endpoint called with params:', req.query);\n    console.log('🔍 Request headers:', req.headers);\n    \n    const page = parseInt(req.query.page) || 1;\n    const limit = Math.min(parseInt(req.query.limit) || 25, 100);\n    const offset = (page - 1) * limit;\n    const search = req.query.search || '';\n    const sector = req.query.sector || '';\n    const exchange = req.query.exchange || '';\n    const sortBy = req.query.sortBy || 'symbol';\n    const sortOrder = req.query.sortOrder || 'asc';\n    \n    let whereClause = 'WHERE 1=1';\n    const params = [];\n    let paramCount = 0;\n\n    // Add search filter\n    if (search) {\n      paramCount++;\n      whereClause += ` AND (ss.symbol ILIKE $${paramCount} OR ss.security_name ILIKE $${paramCount})`;\n      params.push(`%${search}%`);\n    }\n\n    // Add sector filter (on s.sector)\n    if (sector && sector.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND s.sector = $${paramCount}`;\n      params.push(sector);\n    }\n\n    // Add exchange filter (on ss.exchange)\n    if (exchange && exchange.trim() !== '') {\n      paramCount++;\n      whereClause += ` AND ss.exchange = $${paramCount}`;\n      params.push(exchange);\n    }\n\n    // FAST sort columns\n    const validSortColumns = {\n      'ticker': 'ss.symbol',\n      'symbol': 'ss.symbol', \n      'name': 'ss.security_name',\n      'exchange': 'ss.exchange',\n      'market_category': 'ss.market_category'\n    };\n\n    const sortColumn = validSortColumns[sortBy] || 'ss.symbol';\n    const sortDirection = sortOrder.toLowerCase() === 'desc' ? 'DESC' : 'ASC';\n\n    console.log('Screen query params:', { whereClause, params, limit, offset });\n\n    // Use the same comprehensive query as the main endpoint but for screening\n    const stocksQuery = `\n      SELECT \n        -- Stock symbols data\n        ss.symbol,\n        ss.security_name,\n        ss.exchange,\n        ss.market_category,\n        ss.cqs_symbol,\n        ss.financial_status,\n        ss.round_lot_size,\n        ss.etf,\n        ss.secondary_symbol,\n        ss.test_issue,\n        \n        -- Symbols data from loadinfo\n        s.short_name,\n        s.long_name,\n        s.display_name,\n        s.quote_type,\n        s.sector,\n        s.sector_disp,\n        s.industry,\n        s.industry_disp,\n        s.business_summary,\n        s.employee_count,\n        s.website_url,\n        s.ir_website_url,\n        s.address1,\n        s.city,\n        s.state,\n        s.postal_code,\n        s.country,\n        s.phone_number,\n        s.currency,\n        s.market,\n        s.full_exchange_name,\n        \n        -- Market data from loadinfo\n        md.current_price,\n        md.previous_close,\n        md.open_price,\n        md.day_low,\n        md.day_high,\n        md.volume,\n        md.average_volume,\n        md.market_cap,\n        md.fifty_two_week_low,\n        md.fifty_two_week_high,\n        md.fifty_day_avg,\n        md.two_hundred_day_avg,\n        md.bid_price,\n        md.ask_price,\n        md.market_state,\n        \n        -- Key financial metrics from loadinfo\n        km.trailing_pe,\n        km.forward_pe,\n        km.price_to_sales_ttm,\n        km.price_to_book,\n        km.book_value,\n        km.peg_ratio,\n        km.enterprise_value,\n        km.ev_to_revenue,\n        km.ev_to_ebitda,\n        km.total_revenue,\n        km.net_income,\n        km.ebitda,\n        km.gross_profit,\n        km.eps_trailing,\n        km.eps_forward,\n        km.eps_current_year,\n        km.price_eps_current_year,\n        km.earnings_q_growth_pct,\n        km.total_cash,\n        km.cash_per_share,\n        km.operating_cashflow,\n        km.free_cashflow,\n        km.total_debt,\n        km.debt_to_equity,\n        km.quick_ratio,\n        km.current_ratio,\n        km.profit_margin_pct,\n        km.gross_margin_pct,\n        km.ebitda_margin_pct,\n        km.operating_margin_pct,\n        km.return_on_assets_pct,\n        km.return_on_equity_pct,\n        km.revenue_growth_pct,\n        km.earnings_growth_pct,\n        km.dividend_rate,\n        km.dividend_yield,\n        km.five_year_avg_dividend_yield,\n        km.payout_ratio,\n        \n        -- Analyst estimates from loadinfo\n        ae.target_high_price,\n        ae.target_low_price,\n        ae.target_mean_price,\n        ae.target_median_price,\n        ae.recommendation_key,\n        ae.recommendation_mean,\n        ae.analyst_opinion_count,\n        ae.average_analyst_rating,\n        \n        -- Governance scores from loadinfo\n        gs.audit_risk,\n        gs.board_risk,\n        gs.compensation_risk,\n        gs.shareholder_rights_risk,\n        gs.overall_risk,\n        \n        -- Leadership team count (subquery)\n        COALESCE(lt_count.executive_count, 0) as leadership_count\n        \n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      LEFT JOIN market_data md ON ss.symbol = md.ticker\n      LEFT JOIN key_metrics km ON ss.symbol = km.ticker\n      LEFT JOIN analyst_estimates ae ON ss.symbol = ae.ticker\n      LEFT JOIN governance_scores gs ON ss.symbol = gs.ticker\n      LEFT JOIN (\n        SELECT ticker, COUNT(*) as executive_count \n        FROM leadership_team \n        GROUP BY ticker\n      ) lt_count ON ss.symbol = lt_count.ticker\n      ${whereClause}\n      ORDER BY ${sortColumn} ${sortDirection}\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `;\n\n    params.push(limit, offset);\n\n    // Count query\n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM stock_symbols ss\n      LEFT JOIN symbols s ON ss.symbol = s.symbol\n      ${whereClause}\n    `;\n\n    console.log('Executing screen queries...');\n\n    const [stocksResult, countResult] = await Promise.all([\n      query(stocksQuery, params),\n      query(countQuery, params.slice(0, -2))\n    ]);\n\n    const total = parseInt(countResult.rows[0].total);\n    const totalPages = Math.ceil(total / limit);\n\n    console.log(`Screen query results: ${stocksResult.rows.length} stocks, ${total} total`);\n\n    // Use the same formatting as the main endpoint\n    const formattedStocks = stocksResult.rows.map(stock => ({\n      // Core identification\n      ticker: stock.symbol,\n      symbol: stock.symbol,\n      name: stock.security_name,\n      fullName: stock.long_name || stock.security_name,\n      shortName: stock.short_name,\n      displayName: stock.display_name,\n      \n      // Exchange & categorization \n      exchange: stock.exchange,\n      fullExchangeName: stock.full_exchange_name,\n      marketCategory: stock.market_category,\n      market: stock.market,\n      \n      // Business information\n      sector: stock.sector,\n      sectorDisplay: stock.sector_disp,\n      industry: stock.industry,\n      industryDisplay: stock.industry_disp,\n      businessSummary: stock.business_summary,\n      employeeCount: stock.employee_count,\n      \n      // Contact information\n      website: stock.website_url,\n      investorRelationsWebsite: stock.ir_website_url,\n      address: {\n        street: stock.address1,\n        city: stock.city,\n        state: stock.state,\n        postalCode: stock.postal_code,\n        country: stock.country\n      },\n      phoneNumber: stock.phone_number,\n      \n      // Financial details\n      currency: stock.currency,\n      quoteType: stock.quote_type,\n      \n      // Current market data\n      price: {\n        current: stock.current_price,\n        previousClose: stock.previous_close,\n        open: stock.open_price,\n        dayLow: stock.day_low,\n        dayHigh: stock.day_high,\n        fiftyTwoWeekLow: stock.fifty_two_week_low,\n        fiftyTwoWeekHigh: stock.fifty_two_week_high,\n        fiftyDayAverage: stock.fifty_day_avg,\n        twoHundredDayAverage: stock.two_hundred_day_avg,\n        bid: stock.bid_price,\n        ask: stock.ask_price,\n        marketState: stock.market_state\n      },\n      \n      // Volume data\n      volume: stock.volume,\n      averageVolume: stock.average_volume,\n      marketCap: stock.market_cap,\n      \n      // Comprehensive financial metrics\n      financialMetrics: {\n        // Valuation ratios\n        trailingPE: stock.trailing_pe,\n        forwardPE: stock.forward_pe,\n        priceToSales: stock.price_to_sales_ttm,\n        priceToBook: stock.price_to_book,\n        pegRatio: stock.peg_ratio,\n        bookValue: stock.book_value,\n        \n        // Enterprise metrics\n        enterpriseValue: stock.enterprise_value,\n        evToRevenue: stock.ev_to_revenue,\n        evToEbitda: stock.ev_to_ebitda,\n        \n        // Financial results\n        totalRevenue: stock.total_revenue,\n        netIncome: stock.net_income,\n        ebitda: stock.ebitda,\n        grossProfit: stock.gross_profit,\n        \n        // Earnings per share\n        epsTrailing: stock.eps_trailing,\n        epsForward: stock.eps_forward,\n        epsCurrent: stock.eps_current_year,\n        priceEpsCurrent: stock.price_eps_current_year,\n        \n        // Growth metrics\n        earningsGrowthQuarterly: stock.earnings_q_growth_pct,\n        revenueGrowth: stock.revenue_growth_pct,\n        earningsGrowth: stock.earnings_growth_pct,\n        \n        // Cash & debt\n        totalCash: stock.total_cash,\n        cashPerShare: stock.cash_per_share,\n        operatingCashflow: stock.operating_cashflow,\n        freeCashflow: stock.free_cashflow,\n        totalDebt: stock.total_debt,\n        debtToEquity: stock.debt_to_equity,\n        \n        // Liquidity ratios\n        quickRatio: stock.quick_ratio,\n        currentRatio: stock.current_ratio,\n        \n        // Profitability margins\n        profitMargin: stock.profit_margin_pct,\n        grossMargin: stock.gross_margin_pct,\n        ebitdaMargin: stock.ebitda_margin_pct,\n        operatingMargin: stock.operating_margin_pct,\n        \n        // Return metrics\n        returnOnAssets: stock.return_on_assets_pct,\n        returnOnEquity: stock.return_on_equity_pct,\n        \n        // Dividend information\n        dividendRate: stock.dividend_rate,\n        dividendYield: stock.dividend_yield,\n        fiveYearAvgDividendYield: stock.five_year_avg_dividend_yield,\n        payoutRatio: stock.payout_ratio\n      },\n      \n      // Analyst estimates and recommendations\n      analystData: {\n        targetPrices: {\n          high: stock.target_high_price,\n          low: stock.target_low_price,\n          mean: stock.target_mean_price,\n          median: stock.target_median_price\n        },\n        recommendation: {\n          key: stock.recommendation_key,\n          mean: stock.recommendation_mean,\n          rating: stock.average_analyst_rating\n        },\n        analystCount: stock.analyst_opinion_count\n      },\n      \n      // Governance data\n      governance: {\n        auditRisk: stock.audit_risk,\n        boardRisk: stock.board_risk,\n        compensationRisk: stock.compensation_risk,\n        shareholderRightsRisk: stock.shareholder_rights_risk,\n        overallRisk: stock.overall_risk\n      },\n      \n      // Leadership team summary\n      leadership: {\n        executiveCount: stock.leadership_count,\n        hasLeadershipData: stock.leadership_count > 0,\n        detailsAvailable: true\n      },\n      \n      // Additional identifiers\n      cqsSymbol: stock.cqs_symbol,\n      secondarySymbol: stock.secondary_symbol,\n      \n      // Status & type\n      financialStatus: stock.financial_status,\n      isEtf: stock.etf === 'Y',\n      testIssue: stock.test_issue === 'Y',\n      roundLotSize: stock.round_lot_size,\n      \n      // Comprehensive data availability indicators\n      hasData: true,\n      dataSource: 'comprehensive_loadinfo_query',\n      hasCompanyProfile: !!stock.long_name,\n      hasMarketData: !!stock.current_price,\n      hasFinancialMetrics: !!stock.trailing_pe || !!stock.total_revenue,\n      hasAnalystData: !!stock.target_mean_price || !!stock.recommendation_key,\n      hasGovernanceData: !!stock.overall_risk,\n      hasLeadershipData: stock.leadership_count > 0,\n      \n      // Professional presentation with rich data\n      displayData: {\n        primaryExchange: stock.full_exchange_name || stock.exchange || 'Unknown',\n        category: stock.market_category || 'Standard',\n        type: stock.etf === 'Y' ? 'ETF' : 'Stock',\n        tradeable: stock.financial_status !== 'D' && stock.test_issue !== 'Y',\n        sector: stock.sector_disp || stock.sector || 'Unknown',\n        industry: stock.industry_disp || stock.industry || 'Unknown',\n        \n        // Key financial highlights for quick view\n        keyMetrics: {\n          pe: stock.trailing_pe,\n          marketCap: stock.market_cap,\n          revenue: stock.total_revenue,\n          profitMargin: stock.profit_margin_pct,\n          dividendYield: stock.dividend_yield,\n          analystRating: stock.recommendation_key,\n          targetPrice: stock.target_mean_price\n        },\n        \n        // Risk summary\n        riskProfile: {\n          overall: stock.overall_risk,\n          hasHighRisk: (stock.overall_risk && stock.overall_risk >= 8),\n          hasModerateRisk: (stock.overall_risk && stock.overall_risk >= 5 && stock.overall_risk < 8),\n          hasLowRisk: (stock.overall_risk && stock.overall_risk < 5)\n        }\n      }\n    }));\n\n    res.json({\n      success: true,\n      data: formattedStocks,\n      total: total,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      },\n      filters: {\n        search: search || null,\n        sector: sector || null,\n        exchange: exchange || null,\n        sortBy,\n        sortOrder\n      },\n      metadata: {\n        totalStocks: total,\n        currentPage: page,\n        showingRecords: stocksResult.rows.length\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('❌ Screen endpoint error:', error.message);\n    console.error('🔍 Full error details:', {\n      message: error.message,\n      code: error.code,\n      severity: error.severity,\n      detail: error.detail,\n      hint: error.hint,\n      table: error.table,\n      constraint: error.constraint,\n      stack: error.stack\n    });\n    \n    // Handle specific database errors\n    if (error.code === '42P01') { // Table doesn't exist\n      res.status(503).json({ \n        success: false,\n        error: 'Database tables not ready',\n        message: 'Required tables (stock_symbols, symbols) have not been created yet. Please run the data loading workflows.',\n        details: error.message,\n        data: [], \n        errorCode: error.code,\n        solution: 'Run deploy-app-stocks workflow to create stock_symbols table',\n        timestamp: new Date().toISOString()\n      });\n    } else if (error.code === '42703') { // Column doesn't exist\n      res.status(503).json({ \n        success: false,\n        error: 'Database schema mismatch',\n        message: 'Required database columns are missing. The database schema may be outdated.',\n        details: error.message,\n        data: [], \n        errorCode: error.code,\n        solution: 'Run database migration or recreate tables with updated schema',\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      res.status(500).json({ \n        success: false,\n        error: 'Screen query failed',\n        message: 'An unexpected error occurred while screening stocks',\n        details: error.message,\n        data: [], \n        errorCode: error.code,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n*/\n//});\n\n// Database initialization endpoint for price_daily table\nrouter.post('/init-price-data', async (req, res) => {\n  try {\n    console.log('Initializing price_daily table...');\n    \n    // Create price_daily table\n    const createTableSQL = `\n      CREATE TABLE IF NOT EXISTS price_daily (\n        id SERIAL PRIMARY KEY,\n        symbol VARCHAR(10) NOT NULL,\n        date DATE NOT NULL,\n        open DECIMAL(12,4),\n        high DECIMAL(12,4),\n        low DECIMAL(12,4),\n        close DECIMAL(12,4),\n        adj_close DECIMAL(12,4),\n        volume BIGINT,\n        dividends DECIMAL(12,4) DEFAULT 0,\n        stock_splits DECIMAL(12,4) DEFAULT 0,\n        fetched_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(symbol, date)\n      )\n    `;\n    \n    await query(createTableSQL);\n    console.log('price_daily table created successfully');\n    \n    // Create index for performance\n    const createIndexSQL = `\n      CREATE INDEX IF NOT EXISTS idx_price_daily_symbol_date \n      ON price_daily(symbol, date DESC)\n    `;\n    \n    await query(createIndexSQL);\n    console.log('price_daily index created successfully');\n    \n    // Sample data for testing\n    const sampleData = [\n      // AAPL last 30 days\n      ['AAPL', '2025-07-02', 190.50, 192.80, 189.20, 191.45, 191.45, 45230000],\n      ['AAPL', '2025-07-01', 188.90, 191.20, 188.40, 190.30, 190.30, 38450000],\n      ['AAPL', '2025-06-30', 189.80, 190.50, 187.60, 189.25, 189.25, 42100000],\n      ['AAPL', '2025-06-29', 187.30, 190.20, 186.80, 189.90, 189.90, 39200000],\n      ['AAPL', '2025-06-28', 185.60, 188.40, 185.10, 187.80, 187.80, 41800000],\n      ['AAPL', '2025-06-27', 186.90, 188.20, 184.70, 186.50, 186.50, 44300000],\n      ['AAPL', '2025-06-26', 184.20, 187.50, 183.90, 186.80, 186.80, 37600000],\n      ['AAPL', '2025-06-25', 182.80, 185.30, 182.40, 184.90, 184.90, 36700000],\n      ['AAPL', '2025-06-24', 181.50, 183.60, 180.90, 182.70, 182.70, 38900000],\n      ['AAPL', '2025-06-23', 180.30, 182.80, 179.80, 181.20, 181.20, 35400000],\n      \n      // MSFT sample data\n      ['MSFT', '2025-07-02', 335.20, 338.40, 334.50, 337.80, 337.80, 18750000],\n      ['MSFT', '2025-07-01', 332.60, 336.20, 331.90, 334.90, 334.90, 20100000],\n      ['MSFT', '2025-06-30', 330.80, 333.70, 329.40, 332.50, 332.50, 19200000],\n      ['MSFT', '2025-06-29', 328.90, 331.60, 327.80, 330.40, 330.40, 21400000],\n      ['MSFT', '2025-06-28', 326.40, 329.80, 325.70, 328.60, 328.60, 22300000],\n      \n      // GOOGL sample data\n      ['GOOGL', '2025-07-02', 142.30, 144.70, 141.80, 143.90, 143.90, 23400000],\n      ['GOOGL', '2025-07-01', 140.80, 143.20, 140.40, 142.10, 142.10, 25600000],\n      ['GOOGL', '2025-06-30', 139.60, 141.50, 138.90, 140.70, 140.70, 27800000],\n      ['GOOGL', '2025-06-29', 137.20, 140.30, 136.80, 139.40, 139.40, 29200000],\n      ['GOOGL', '2025-06-28', 135.90, 138.40, 135.20, 137.60, 137.60, 26700000],\n      \n      // TSLA sample data\n      ['TSLA', '2025-07-02', 248.90, 252.40, 246.30, 250.80, 250.80, 35600000],\n      ['TSLA', '2025-07-01', 245.60, 249.70, 244.20, 248.30, 248.30, 38900000],\n      ['TSLA', '2025-06-30', 242.80, 246.90, 241.50, 245.20, 245.20, 41200000],\n      ['TSLA', '2025-06-29', 240.30, 244.60, 239.10, 242.50, 242.50, 43800000],\n      ['TSLA', '2025-06-28', 237.90, 241.80, 236.70, 240.10, 240.10, 42100000],\n      \n      // NVDA sample data\n      ['NVDA', '2025-07-02', 485.20, 492.80, 483.60, 489.40, 489.40, 55600000],\n      ['NVDA', '2025-07-01', 478.90, 487.30, 477.20, 484.70, 484.70, 58200000],\n      ['NVDA', '2025-06-30', 472.40, 480.60, 471.80, 478.30, 478.30, 62100000],\n      ['NVDA', '2025-06-29', 465.80, 474.20, 464.30, 472.90, 472.90, 67300000],\n      ['NVDA', '2025-06-28', 459.60, 467.50, 458.40, 465.20, 465.20, 59800000]\n    ];\n    \n    // Insert sample data\n    let insertedCount = 0;\n    for (const row of sampleData) {\n      try {\n        const insertSQL = `\n          INSERT INTO price_daily (symbol, date, open, high, low, close, adj_close, volume)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n          ON CONFLICT (symbol, date) DO UPDATE SET\n            open = EXCLUDED.open,\n            high = EXCLUDED.high,\n            low = EXCLUDED.low,\n            close = EXCLUDED.close,\n            adj_close = EXCLUDED.adj_close,\n            volume = EXCLUDED.volume\n        `;\n        \n        await query(insertSQL, row);\n        insertedCount++;\n      } catch (insertError) {\n        console.warn(`Failed to insert row for ${row[0]} ${row[1]}:`, insertError.message);\n      }\n    }\n    \n    console.log(`Sample data inserted: ${insertedCount} rows`);\n    \n    // Verify data exists\n    const countResult = await query('SELECT COUNT(*) as count FROM price_daily');\n    const totalRows = countResult.rows[0].count;\n    \n    res.json({\n      success: true,\n      message: 'price_daily table initialized successfully',\n      details: {\n        tableCreated: true,\n        indexCreated: true,\n        sampleDataInserted: insertedCount,\n        totalRows: parseInt(totalRows)\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error initializing price_daily table:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to initialize price_daily table',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n\n\n// Get screening statistics and ranges\nrouter.get('/screen/stats', async (req, res) => {\n  try {\n    console.log('Screen stats endpoint called');\n    \n    // Use robust query with proper error handling instead of fallback chains\n    const statsQuery = `\n      SELECT \n        COUNT(*) as total_stocks,\n        MIN(s.market_cap) as min_market_cap,\n        MAX(s.market_cap) as max_market_cap,\n        MIN(s.trailing_pe) as min_pe_ratio,\n        MAX(s.trailing_pe) as max_pe_ratio,\n        MIN(s.price_to_book) as min_pb_ratio,\n        MAX(s.price_to_book) as max_pb_ratio,\n        MIN(s.return_on_equity) as min_roe,\n        MAX(s.return_on_equity) as max_roe,\n        MIN(s.revenue_growth) as min_revenue_growth,\n        MAX(s.revenue_growth) as max_revenue_growth,\n        MIN(s.analyst_rating) as min_analyst_rating,\n        MAX(s.analyst_rating) as max_analyst_rating\n      FROM stock_symbols s\n      WHERE s.is_active = TRUE\n    `;\n    \n    let result;\n    try {\n      result = await query(statsQuery);\n      console.log(`✅ Screen stats query successful: ${result.rows.length} stats found`);\n    } catch (dbError) {\n      console.error('❌ Screen stats query failed - comprehensive diagnosis needed', {\n        query_type: 'screen_stats',\n        error_message: dbError.message,\n        detailed_diagnostics: {\n          attempted_operations: ['stock_symbols_query', 'statistical_aggregation'],\n          potential_causes: [\n            'stock_symbols table missing',\n            'Database connection failure',\n            'Schema validation error',\n            'Data type mismatch in numeric columns',\n            'Insufficient database permissions',\n            'Statistical function errors',\n            'Query timeout'\n          ],\n          troubleshooting_steps: [\n            'Check if stock_symbols table exists',\n            'Verify database connection health',\n            'Validate table schema structure',\n            'Check numeric column data types',\n            'Review database permissions',\n            'Monitor statistical function execution',\n            'Check query execution time'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Schema integrity check',\n            'Connection pool availability'\n          ]\n        }\n      });\n      throw dbError; // Re-throw to trigger proper error handling\n    }\n    \n    if (result && result.rows.length > 0) {\n      const stats = result.rows[0];\n      \n      res.json({\n        success: true,\n        data: {\n          total_stocks: parseInt(stats.total_stocks) || 8500,\n          ranges: {\n            market_cap: {\n              min: parseInt(stats.min_market_cap) || 50000000,\n              max: parseInt(stats.max_market_cap) || 3000000000000\n            },\n            pe_ratio: {\n              min: parseFloat(stats.min_pe_ratio) || 5,\n              max: Math.min(parseFloat(stats.max_pe_ratio) || 100, 100)\n            },\n            price_to_book: {\n              min: parseFloat(stats.min_pb_ratio) || 0.1,\n              max: Math.min(parseFloat(stats.max_pb_ratio) || 20, 20)\n            },\n            roe: {\n              min: parseFloat(stats.min_roe) || -50,\n              max: Math.min(parseFloat(stats.max_roe) || 100, 100)\n            },\n            revenue_growth: {\n              min: parseFloat(stats.min_revenue_growth) || -50,\n              max: Math.min(parseFloat(stats.max_revenue_growth) || 200, 200)\n            },\n            analyst_rating: {\n              min: parseFloat(stats.min_analyst_rating) || 1,\n              max: parseFloat(stats.max_analyst_rating) || 5\n            }\n          }\n        },\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      // Return error response with comprehensive diagnostics instead of fallback data\n      console.error(`❌ Database query failed for screener stats - comprehensive diagnosis needed`, {\n        error: error.message,\n        detailed_diagnostics: {\n          query_attempted: 'screener_statistics_query',\n          potential_causes: [\n            'Database connection failure',\n            'Missing required tables for screener functionality',\n            'Database schema corruption',\n            'Data loading scripts not executed',\n            'SQL query syntax errors'\n          ],\n          troubleshooting_steps: [\n            'Check database connectivity',\n            'Verify all screener tables exist',\n            'Validate database schema integrity',\n            'Check data loading script execution',\n            'Review SQL query syntax'\n          ],\n          system_checks: [\n            'Database health status',\n            'Table existence validation',\n            'Schema validation',\n            'Data freshness assessment'\n          ]\n        }\n      });\n      \n      return res.status(503).json({\n        success: false,\n        error: 'Screener statistics unavailable',\n        message: 'Unable to retrieve screener statistics due to database issues',\n        timestamp: new Date().toISOString(),\n        data_source: 'error'\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error in screen stats endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve screener statistics',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Initialize API keys table for secure portfolio import\nrouter.post('/init-api-keys-table', async (req, res) => {\n  try {\n    console.log('Initializing user_api_keys table...');\n    \n    // Create user_api_keys table for secure API key storage\n    const createTableSQL = `\n      CREATE TABLE IF NOT EXISTS user_api_keys (\n        id SERIAL PRIMARY KEY,\n        user_id VARCHAR(255) NOT NULL,\n        broker_name VARCHAR(50) NOT NULL,\n        encrypted_api_key TEXT NOT NULL,\n        encrypted_api_secret TEXT,\n        key_iv VARCHAR(32) NOT NULL,\n        key_auth_tag VARCHAR(32) NOT NULL,\n        secret_iv VARCHAR(32),\n        secret_auth_tag VARCHAR(32),\n        is_sandbox BOOLEAN DEFAULT true,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n        last_used TIMESTAMP WITH TIME ZONE,\n        UNIQUE(user_id, broker_name)\n      )\n    `;\n    \n    await query(createTableSQL);\n    console.log('user_api_keys table created successfully');\n    \n    // Create indexes for performance and security\n    const createIndexes = [\n      'CREATE INDEX IF NOT EXISTS idx_user_api_keys_user_id ON user_api_keys(user_id)',\n      'CREATE INDEX IF NOT EXISTS idx_user_api_keys_broker ON user_api_keys(broker_name)',\n      'CREATE INDEX IF NOT EXISTS idx_user_api_keys_last_used ON user_api_keys(last_used DESC)'\n    ];\n    \n    for (const indexSQL of createIndexes) {\n      await query(indexSQL);\n    }\n    \n    console.log('user_api_keys indexes created successfully');\n    \n    // Verify table exists\n    const verifyQuery = `\n      SELECT column_name, data_type, is_nullable\n      FROM information_schema.columns \n      WHERE table_name = 'user_api_keys'\n      ORDER BY ordinal_position\n    `;\n    \n    const columns = await query(verifyQuery);\n    \n    res.json({\n      success: true,\n      message: 'user_api_keys table initialized successfully',\n      details: {\n        tableCreated: true,\n        indexesCreated: true,\n        columns: columns.rows.map(col => ({\n          name: col.column_name,\n          type: col.data_type,\n          nullable: col.is_nullable === 'YES'\n        }))\n      },\n      security: {\n        encryption: 'AES-256-GCM',\n        keyDerivation: 'scrypt',\n        userSaltBased: true,\n        noPlaintextLogging: true\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error initializing user_api_keys table:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to initialize API keys table',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,OAAO;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAM,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAM;EAAEE;AAAkB,CAAC;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAMG,eAAe;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAM;EAAEI,0BAA0B;EAAEC,iBAAiB;EAAEC;AAAW,CAAC;AAAA;AAAA,CAAAV,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,0BAA0B,CAAC;AAEzG,MAAMO,MAAM;AAAA;AAAA,CAAAX,cAAA,GAAAG,CAAA,OAAGD,OAAO,CAACU,MAAM,CAAC,CAAC;;AAE/B;AACA;AAAA;AAAAZ,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACzC,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,MAAMC,YAAY;IAAA;IAAA,CAAAnB,cAAA,GAAAG,CAAA,OAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAIiB,MAAM;IAAC;IAAApB,cAAA,GAAAG,CAAA;IACX,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFiB,MAAM,GAAG,MAAMf,KAAK,CAACc,YAAY,CAAC;MAAC;MAAAnB,cAAA,GAAAG,CAAA;MACnCc,OAAO,CAACC,GAAG,CAAC,+BAA+BE,MAAM,CAACC,IAAI,CAACC,MAAM,gBAAgB,CAAC;IAChF,CAAC,CAAC,OAAOC,OAAO,EAAE;MAAA;MAAAvB,cAAA,GAAAG,CAAA;MAChBc,OAAO,CAACO,KAAK,CAAC,yDAAyD,EAAE;QACvEC,UAAU,EAAE,qBAAqB;QACjCC,aAAa,EAAEH,OAAO,CAACI,OAAO;QAC9BC,oBAAoB,EAAE;UACpBC,oBAAoB,EAAE,CAAC,qBAAqB,EAAE,oBAAoB,CAAC;UACnEC,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,6BAA6B,EAC7B,yBAAyB,EACzB,oBAAoB,EACpB,mCAAmC,EACnC,eAAe,CAChB;UACDC,qBAAqB,EAAE,CACrB,qCAAqC,EACrC,mCAAmC,EACnC,iCAAiC,EACjC,4BAA4B,EAC5B,oCAAoC,EACpC,8BAA8B,CAC/B;UACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,wBAAwB,EACxB,8BAA8B;QAElC;MACF,CAAC,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MACH,MAAMoB,OAAO,CAAC,CAAC;IACjB;IAEA,MAAMU,OAAO;IAAA;IAAA,CAAAjC,cAAA,GAAAG,CAAA,QAAGiB,MAAM,CAACC,IAAI,CAACa,GAAG,CAACC,GAAG,IAAK;MAAA;MAAAnC,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA;QACtCiC,MAAM,EAAED,GAAG,CAACC,MAAM;QAClBC,KAAK,EAAEC,QAAQ,CAACH,GAAG,CAACE,KAAK,CAAC;QAC1BE,cAAc;QAAE;QAAA,CAAAvC,cAAA,GAAAwC,CAAA,UAAAC,UAAU,CAACN,GAAG,CAACI,cAAc,CAAC;QAAA;QAAA,CAAAvC,cAAA,GAAAwC,CAAA,UAAI,CAAC;QACnDE,YAAY;QAAE;QAAA,CAAA1C,cAAA,GAAAwC,CAAA,UAAAC,UAAU,CAACN,GAAG,CAACO,YAAY,CAAC;QAAA;QAAA,CAAA1C,cAAA,GAAAwC,CAAA,UAAI,IAAI;MACpD,CAAC;IAAD,CAAE,CAAC;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAEJY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEZ,OAAO;MACba,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;;IAEpE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACAc,OAAO,CAACO,KAAK,CAAC,6DAA6D,EAAE;MAC3EyB,qBAAqB,EAAE,IAAI;MAC3BrB,oBAAoB,EAAE;QACpBC,oBAAoB,EAAE,CAAC,8BAA8B,EAAE,2BAA2B,CAAC;QACnFC,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,6BAA6B,EAC7B,sCAAsC,EACtC,mCAAmC,EACnC,mCAAmC,EACnC,oCAAoC,CACrC;QACDC,qBAAqB,EAAE,CACrB,6BAA6B,EAC7B,mCAAmC,EACnC,4CAA4C,EAC5C,mCAAmC,EACnC,2CAA2C,CAC5C;QACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,2BAA2B,EAC3B,mBAAmB;MAEvB;IACF,CAAC,CAAC;IAEF,MAAMkB,YAAY;IAAA;IAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAExBY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEK,YAAY;MAClBvB,OAAO,EAAE,wDAAwD;MACjEmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EAC/C,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAElE,MAAMiC,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,UAAAF,QAAQ,CAACxB,GAAG,CAACT,KAAK,CAAC8C,KAAK,CAAC;IAAA;IAAA,CAAAnD,cAAA,GAAAwC,CAAA,UAAI,CAAC;;IAE5C;IACA,MAAMY,WAAW;IAAA;IAAA,CAAApD,cAAA,GAAAG,CAAA,QAAG;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAIiB,MAAM;IAAC;IAAApB,cAAA,GAAAG,CAAA;IACX,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFiB,MAAM,GAAG,MAAMf,KAAK,CAAC+C,WAAW,EAAE,CAACD,KAAK,CAAC,CAAC;MAAC;MAAAnD,cAAA,GAAAG,CAAA;MAC3Cc,OAAO,CAACC,GAAG,CAAC,4CAA4CE,MAAM,CAACC,IAAI,CAACC,MAAM,eAAe,CAAC;IAC5F,CAAC,CAAC,OAAOC,OAAO,EAAE;MAAA;MAAAvB,cAAA,GAAAG,CAAA;MAChBc,OAAO,CAACO,KAAK,CAAC,sEAAsE,EAAE;QACpFC,UAAU,EAAE,sBAAsB;QAClC0B,KAAK;QACLzB,aAAa,EAAEH,OAAO,CAACI,OAAO;QAC9BC,oBAAoB,EAAE;UACpBC,oBAAoB,EAAE,CAAC,qBAAqB,EAAE,qBAAqB,CAAC;UACpEC,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,6BAA6B,EAC7B,yBAAyB,EACzB,yCAAyC,EACzC,mCAAmC,EACnC,eAAe,CAChB;UACDC,qBAAqB,EAAE,CACrB,qCAAqC,EACrC,mCAAmC,EACnC,iCAAiC,EACjC,oCAAoC,EACpC,6BAA6B,EAC7B,8BAA8B,CAC/B;UACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,wBAAwB,EACxB,8BAA8B;QAElC;MACF,CAAC,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MACH,MAAMoB,OAAO,CAAC,CAAC;IACjB;IAAC;IAAAvB,cAAA,GAAAG,CAAA;IAEDY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEzB,MAAM,CAACC,IAAI;MACjBgB,KAAK,EAAEjB,MAAM,CAACC,IAAI,CAACC,MAAM;MACzB+B,QAAQ,EAAE,eAAe;MACzBP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAChEY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,4BAA4B;MACnC6B,QAAQ,EAAE,eAAe;MACzBP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAAC4C,GAAG,CAACjD,iBAAiB,CAAC;;AAE7B;AAAA;AAAAN,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,OAAO,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EAChCY,GAAG,CAAC4B,IAAI,CAAC;IACPW,MAAM,EAAE,IAAI;IACZD,QAAQ,EAAE,QAAQ;IAClBP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMQ,oBAAoB;AAAA;AAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAGK,0BAA0B,CAAC;EACtD,GAAGC,iBAAiB,CAACgD,UAAU;EAC/BC,MAAM,EAAE;IACNC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAGC,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAO,UAAU,CAACoD,MAAM,CAACD,KAAK,EAAE;QAAEE,SAAS,EAAE,GAAG;QAAEC,UAAU,EAAE;MAAK,CAAC,CAAC;IAAD,CAAC;IACpFC,SAAS,EAAGJ,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAwC,CAAA,WAACqB,KAAK;MAAA;MAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAIqB,KAAK,CAACvC,MAAM,IAAI,GAAG;IAAD,CAAC;IACnD4C,YAAY,EAAE;EAChB,CAAC;EACD9B,MAAM,EAAE;IACNuB,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAGC,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAO,UAAU,CAACoD,MAAM,CAACD,KAAK,EAAE;QAAEE,SAAS,EAAE,EAAE;QAAEI,YAAY,EAAE;MAAM,CAAC,CAAC;IAAD,CAAC;IACtFF,SAAS,EAAGJ,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAwC,CAAA,WAACqB,KAAK;MAAA;MAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAI,sBAAsB,CAAC4B,IAAI,CAACP,KAAK,CAAC;IAAD,CAAC;IAClEK,YAAY,EAAE;EAChB,CAAC;EACDG,QAAQ,EAAE;IACRV,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAGC,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAO,UAAU,CAACoD,MAAM,CAACD,KAAK,EAAE;QAAEE,SAAS,EAAE;MAAG,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;IAAD,CAAC;IAC/EL,SAAS,EAAGJ,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAwC,CAAA,WAACqB,KAAK;MAAA;MAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAI,eAAe,CAAC4B,IAAI,CAACP,KAAK,CAAC;IAAD,CAAC;IAC3DK,YAAY,EAAE;EAChB,CAAC;EACDK,MAAM,EAAE;IACNZ,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAGC,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAO,UAAU,CAACoD,MAAM,CAACD,KAAK,EAAE;QAAEE,SAAS,EAAE,EAAE;QAAEI,YAAY,EAAE;MAAM,CAAC,CAAC;IAAD,CAAC;IACtFF,SAAS,EAAGJ,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAwC,CAAA,WAACqB,KAAK;MAAA;MAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAACgC,QAAQ,CAACX,KAAK,CAAC;IAAD,CAAC;IAC3GK,YAAY,EAAE;EAChB,CAAC;EACDO,SAAS,EAAE;IACTd,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAGC,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAO,UAAU,CAACoD,MAAM,CAACD,KAAK,EAAE;QAAEE,SAAS,EAAE;MAAE,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;IAAD,CAAC;IAC9ET,SAAS,EAAGJ,KAAK,IAAK;MAAA;MAAA7D,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAwC,CAAA,WAACqB,KAAK;MAAA;MAAA,CAAA7D,cAAA,GAAAwC,CAAA,UAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACgC,QAAQ,CAACX,KAAK,CAAC;IAAD,CAAC;IAC/DK,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAlE,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE2C,oBAAoB,EAAE,OAAO1C,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACxD,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEJ,GAAG,CAACT,KAAK,CAAC;IAAC;IAAAL,cAAA,GAAAG,CAAA;IAC7Ec,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,MAAMyD,IAAI;IAAA;IAAA,CAAA3E,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,UAAA1B,GAAG,CAAC8D,SAAS,CAACD,IAAI;IAAA;IAAA,CAAA3E,cAAA,GAAAwC,CAAA,UAAI,CAAC;IACpC,MAAMW,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,UAAA1B,GAAG,CAAC8D,SAAS,CAACzB,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAwC,CAAA,UAAI,EAAE;IACvC,MAAMqC,MAAM;IAAA;IAAA,CAAA7E,cAAA,GAAAG,CAAA,QAAG,CAACwE,IAAI,GAAG,CAAC,IAAIxB,KAAK;IACjC,MAAMO,MAAM;IAAA;IAAA,CAAA1D,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAAC8D,SAAS,CAAClB,MAAM;IAAA;IAAA,CAAA1D,cAAA,GAAAwC,CAAA,WAAI,EAAE;IACzC,MAAMJ,MAAM;IAAA;IAAA,CAAApC,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAAC8D,SAAS,CAACxC,MAAM;IAAA;IAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAI,EAAE;IACzC,MAAM6B,QAAQ;IAAA;IAAA,CAAArE,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAAC8D,SAAS,CAACP,QAAQ;IAAA;IAAA,CAAArE,cAAA,GAAAwC,CAAA,WAAI,EAAE;IAC7C,MAAM+B,MAAM;IAAA;IAAA,CAAAvE,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAAC8D,SAAS,CAACL,MAAM;IAAA;IAAA,CAAAvE,cAAA,GAAAwC,CAAA,WAAI,QAAQ;IAC/C,MAAMiC,SAAS;IAAA;IAAA,CAAAzE,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAAC8D,SAAS,CAACH,SAAS;IAAA;IAAA,CAAAzE,cAAA,GAAAwC,CAAA,WAAI,KAAK;IAElD,IAAIsC,WAAW;IAAA;IAAA,CAAA9E,cAAA,GAAAG,CAAA,QAAG,WAAW;IAC7B,MAAM4E,MAAM;IAAA;IAAA,CAAA/E,cAAA,GAAAG,CAAA,QAAG,EAAE;IACjB,IAAI6E,UAAU;IAAA;IAAA,CAAAhF,cAAA,GAAAG,CAAA,QAAG,CAAC;;IAElB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA,IAAIuD,MAAM,EAAE;MAAA;MAAA1D,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACV6E,UAAU,EAAE;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MACb2E,WAAW,IAAI,0BAA0BE,UAAU,+BAA+BA,UAAU,GAAG;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MAChG4E,MAAM,CAACE,IAAI,CAAC,IAAIvB,MAAM,GAAG,CAAC;IAC5B,CAAC;IAAA;IAAA;MAAA1D,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAJ,MAAM;IAAA;IAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAIJ,MAAM,CAAC8C,IAAI,CAAC,CAAC,KAAK,EAAE,GAAE;MAAA;MAAAlF,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAClC6E,UAAU,EAAE;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MACb2E,WAAW,IAAI,oBAAoBE,UAAU,EAAE;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MAChD4E,MAAM,CAACE,IAAI,CAAC7C,MAAM,CAAC;IACrB,CAAC;IAAA;IAAA;MAAApC,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA6B,QAAQ;IAAA;IAAA,CAAArE,cAAA,GAAAwC,CAAA,WAAI6B,QAAQ,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,GAAE;MAAA;MAAAlF,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACtC6E,UAAU,EAAE;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MACb2E,WAAW,IAAI,uBAAuBE,UAAU,EAAE;MAAC;MAAAhF,cAAA,GAAAG,CAAA;MACnD4E,MAAM,CAACE,IAAI,CAACZ,QAAQ,CAAC;IACvB,CAAC;IAAA;IAAA;MAAArE,cAAA,GAAAwC,CAAA;IAAA;;IAED;IACA,MAAM2C,gBAAgB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,QAAG;MACvB,QAAQ,EAAE,WAAW;MACrB,QAAQ,EAAE,WAAW;MACrB,MAAM,EAAE,kBAAkB;MAC1B,UAAU,EAAE,aAAa;MACzB,iBAAiB,EAAE;IACrB,CAAC;IAED,MAAMiF,UAAU;IAAA;IAAA,CAAApF,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA2C,gBAAgB,CAACZ,MAAM,CAAC;IAAA;IAAA,CAAAvE,cAAA,GAAAwC,CAAA,WAAI,WAAW;IAC1D,MAAM6C,aAAa;IAAA;IAAA,CAAArF,cAAA,GAAAG,CAAA,QAAGsE,SAAS,CAACC,WAAW,CAAC,CAAC,KAAK,MAAM;IAAA;IAAA,CAAA1E,cAAA,GAAAwC,CAAA,WAAG,MAAM;IAAA;IAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,KAAK;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAE1Ec,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;MAAE4D,WAAW;MAAEC,MAAM;MAAE5B,KAAK;MAAE0B;IAAO,CAAC,CAAC;;IAE9E;IACA,MAAMzB,WAAW;IAAA;IAAA,CAAApD,cAAA,GAAAG,CAAA,QAAG;AACxnB,iBAAiBM,UAAU,IAAIC,aAAa;AAC5C,eAAeL,UAAU,GAAG,CAAC,YAAYA,UAAU,GAAG,CAAC;AACvD,KAAK;IAAC;IAAAhF,cAAA,GAAAG,CAAA;IAEF4E,MAAM,CAACE,IAAI,CAAC9B,KAAK,EAAE0B,MAAM,CAAC;;IAE1B;IACA,MAAMS,UAAU;IAAA;IAAA,CAAAtF,cAAA,GAAAG,CAAA,QAAG;AACvB;AACA;AACA,QAAQ2E,WAAW;AACnB,KAAK;IAAC;IAAA9E,cAAA,GAAAG,CAAA;IAEFc,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;;IAE/D;IACA,MAAM,CAACqE,YAAY,EAAEC,WAAW,CAAC;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,QAAG,MAAMsF,OAAO,CAACC,GAAG,CAAC,CACpDnF,eAAe,CAACoF,SAAS,CAACvC,WAAW,EAAE2B,MAAM,EAAE;MAC7Ca,cAAc,EAAE,IAAI;MACpBC,mBAAmB,EAAE,KAAK;MAC1BC,OAAO,EAAE;IACX,CAAC,CAAC,EACFvF,eAAe,CAACoF,SAAS,CAACL,UAAU,EAAEP,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MACzDH,cAAc,EAAE,IAAI;MACpBC,mBAAmB,EAAE,KAAK;MAC1BC,OAAO,EAAE;IACX,CAAC,CAAC,CACH,CAAC;IAEF,MAAME,KAAK;IAAA;IAAA,CAAAhG,cAAA,GAAAG,CAAA,QAAGmC,QAAQ,CAACkD,WAAW,CAACnE,IAAI,CAAC,CAAC,CAAC,CAAC2E,KAAK,CAAC;IACjD,MAAMC,UAAU;IAAA;IAAA,CAAAjG,cAAA,GAAAG,CAAA,QAAG+F,IAAI,CAACC,IAAI,CAACH,KAAK,GAAG7C,KAAK,CAAC;IAAC;IAAAnD,cAAA,GAAAG,CAAA;IAE5Cc,OAAO,CAACC,GAAG,CAAC,uBAAuBqE,YAAY,CAAClE,IAAI,CAACC,MAAM,YAAY0E,KAAK,QAAQ,CAAC;;IAErF;IACA,MAAMI,eAAe;IAAA;IAAA,CAAApG,cAAA,GAAAG,CAAA,QAAGoF,YAAY,CAAClE,IAAI,CAACa,GAAG,CAACmE,KAAK,IAAK;MAAA;MAAArG,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA;QACtD;QACAmG,MAAM,EAAED,KAAK,CAACE,MAAM;QACpBA,MAAM,EAAEF,KAAK,CAACE,MAAM;QACpBC,IAAI,EAAEH,KAAK,CAACI,aAAa;QACzBC,QAAQ;QAAE;QAAA,CAAA1G,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACM,SAAS;QAAA;QAAA,CAAA3G,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACI,aAAa;QAChDG,SAAS,EAAEP,KAAK,CAACQ,UAAU;QAC3BC,WAAW,EAAET,KAAK,CAACU,YAAY;QAE/B;QACA1C,QAAQ,EAAEgC,KAAK,CAAChC,QAAQ;QACxB2C,gBAAgB,EAAEX,KAAK,CAACY,kBAAkB;QAC1CC,cAAc,EAAEb,KAAK,CAACc,eAAe;QACrCC,MAAM,EAAEf,KAAK,CAACe,MAAM;QAEpB;QACAhF,MAAM,EAAEiE,KAAK,CAACjE,MAAM;QACpBiF,aAAa,EAAEhB,KAAK,CAACiB,WAAW;QAChCC,QAAQ,EAAElB,KAAK,CAACkB,QAAQ;QACxBC,eAAe,EAAEnB,KAAK,CAACoB,aAAa;QACpCC,eAAe,EAAErB,KAAK,CAACsB,gBAAgB;QACvCC,aAAa,EAAEvB,KAAK,CAACwB,cAAc;QAEnC;QACAC,OAAO,EAAEzB,KAAK,CAAC0B,WAAW;QAC1BC,wBAAwB,EAAE3B,KAAK,CAAC4B,cAAc;QAC9CC,OAAO,EAAE;UACPC,MAAM,EAAE9B,KAAK,CAAC+B,QAAQ;UACtBC,IAAI,EAAEhC,KAAK,CAACgC,IAAI;UAChBC,KAAK,EAAEjC,KAAK,CAACiC,KAAK;UAClBC,UAAU,EAAElC,KAAK,CAACmC,WAAW;UAC7BC,OAAO,EAAEpC,KAAK,CAACoC;QACjB,CAAC;QACDC,WAAW,EAAErC,KAAK,CAACsC,YAAY;QAE/B;QACAC,QAAQ,EAAEvC,KAAK,CAACuC,QAAQ;QACxBC,SAAS,EAAExC,KAAK,CAACyC,UAAU;QAE3B;QACAC,KAAK,EAAE;UACLC,OAAO,EAAE3C,KAAK,CAAC4C,aAAa;UAC5BC,aAAa,EAAE7C,KAAK,CAAC8C,cAAc;UACnCC,IAAI,EAAE/C,KAAK,CAACgD,UAAU;UACtBC,MAAM,EAAEjD,KAAK,CAACkD,OAAO;UACrBC,OAAO,EAAEnD,KAAK,CAACoD,QAAQ;UACvBC,eAAe,EAAErD,KAAK,CAACsD,kBAAkB;UACzCC,gBAAgB,EAAEvD,KAAK,CAACwD,mBAAmB;UAC3CC,eAAe,EAAEzD,KAAK,CAAC0D,aAAa;UACpCC,oBAAoB,EAAE3D,KAAK,CAAC4D,mBAAmB;UAC/CC,GAAG,EAAE7D,KAAK,CAAC8D,SAAS;UACpBC,GAAG,EAAE/D,KAAK,CAACgE,SAAS;UACpBC,WAAW,EAAEjE,KAAK,CAACkE;QACrB,CAAC;QAED;QACAC,MAAM,EAAEnE,KAAK,CAACmE,MAAM;QACpBC,aAAa,EAAEpE,KAAK,CAACqE,cAAc;QACnCC,SAAS,EAAEtE,KAAK,CAACuE,UAAU;QAE3B;QACAC,gBAAgB,EAAE;UAChB;UACAC,UAAU,EAAEzE,KAAK,CAAC0E,WAAW;UAC7BC,SAAS,EAAE3E,KAAK,CAAC4E,UAAU;UAC3BC,YAAY,EAAE7E,KAAK,CAAC8E,kBAAkB;UACtCC,WAAW,EAAE/E,KAAK,CAACgF,aAAa;UAChCC,QAAQ,EAAEjF,KAAK,CAACkF,SAAS;UACzBC,SAAS,EAAEnF,KAAK,CAACoF,UAAU;UAE3B;UACAC,eAAe,EAAErF,KAAK,CAACsF,gBAAgB;UACvCC,WAAW,EAAEvF,KAAK,CAACwF,aAAa;UAChCC,UAAU,EAAEzF,KAAK,CAAC0F,YAAY;UAE9B;UACAC,YAAY,EAAE3F,KAAK,CAAC4F,aAAa;UACjCC,SAAS,EAAE7F,KAAK,CAAC8F,UAAU;UAC3BC,MAAM,EAAE/F,KAAK,CAAC+F,MAAM;UACpBC,WAAW,EAAEhG,KAAK,CAACiG,YAAY;UAE/B;UACAC,WAAW,EAAElG,KAAK,CAACmG,YAAY;UAC/BC,UAAU,EAAEpG,KAAK,CAACqG,WAAW;UAC7BC,UAAU,EAAEtG,KAAK,CAACuG,gBAAgB;UAClCC,eAAe,EAAExG,KAAK,CAACyG,sBAAsB;UAE7C;UACAC,uBAAuB,EAAE1G,KAAK,CAAC2G,qBAAqB;UACpDC,aAAa,EAAE5G,KAAK,CAAC6G,kBAAkB;UACvCC,cAAc,EAAE9G,KAAK,CAAC+G,mBAAmB;UAEzC;UACAC,SAAS,EAAEhH,KAAK,CAACiH,UAAU;UAC3BC,YAAY,EAAElH,KAAK,CAACmH,cAAc;UAClCC,iBAAiB,EAAEpH,KAAK,CAACqH,kBAAkB;UAC3CC,YAAY,EAAEtH,KAAK,CAACuH,aAAa;UACjCC,SAAS,EAAExH,KAAK,CAACyH,UAAU;UAC3BC,YAAY,EAAE1H,KAAK,CAAC2H,cAAc;UAElC;UACAC,UAAU,EAAE5H,KAAK,CAAC6H,WAAW;UAC7BC,YAAY,EAAE9H,KAAK,CAAC+H,aAAa;UAEjC;UACAC,YAAY,EAAEhI,KAAK,CAACiI,iBAAiB;UACrCC,WAAW,EAAElI,KAAK,CAACmI,gBAAgB;UACnCC,YAAY,EAAEpI,KAAK,CAACqI,iBAAiB;UACrCC,eAAe,EAAEtI,KAAK,CAACuI,oBAAoB;UAE3C;UACAC,cAAc,EAAExI,KAAK,CAACyI,oBAAoB;UAC1CC,cAAc,EAAE1I,KAAK,CAAC2I,oBAAoB;UAE1C;UACAC,YAAY,EAAE5I,KAAK,CAAC6I,aAAa;UACjCC,aAAa,EAAE9I,KAAK,CAAC+I,cAAc;UACnCC,wBAAwB,EAAEhJ,KAAK,CAACiJ,4BAA4B;UAC5DC,WAAW,EAAElJ,KAAK,CAACmJ;QACrB,CAAC;QAED;QACAC,WAAW,EAAE;UACXC,YAAY,EAAE;YACZC,IAAI,EAAEtJ,KAAK,CAACuJ,iBAAiB;YAC7BC,GAAG,EAAExJ,KAAK,CAACyJ,gBAAgB;YAC3BC,IAAI,EAAE1J,KAAK,CAAC2J,iBAAiB;YAC7BC,MAAM,EAAE5J,KAAK,CAAC6J;UAChB,CAAC;UACDC,cAAc,EAAE;YACdC,GAAG,EAAE/J,KAAK,CAACgK,kBAAkB;YAC7BN,IAAI,EAAE1J,KAAK,CAACiK,mBAAmB;YAC/BC,MAAM,EAAElK,KAAK,CAACmK;UAChB,CAAC;UACDC,YAAY,EAAEpK,KAAK,CAACqK;QACtB,CAAC;QAED;QACAC,UAAU,EAAE;UACVC,SAAS,EAAEvK,KAAK,CAACwK,UAAU;UAC3BC,SAAS,EAAEzK,KAAK,CAAC0K,UAAU;UAC3BC,gBAAgB,EAAE3K,KAAK,CAAC4K,iBAAiB;UACzCC,qBAAqB,EAAE7K,KAAK,CAAC8K,uBAAuB;UACpDC,WAAW,EAAE/K,KAAK,CAACgL;QACrB,CAAC;QAED;QACAC,UAAU,EAAE;UACVC,cAAc,EAAElL,KAAK,CAACmL,gBAAgB;UACtCC,iBAAiB,EAAEpL,KAAK,CAACmL,gBAAgB,GAAG,CAAC;UAC7C;UACAE,gBAAgB,EAAE;QACpB,CAAC;QAED;QACAC,SAAS,EAAEtL,KAAK,CAACuL,UAAU;QAC3BC,eAAe,EAAExL,KAAK,CAACyL,gBAAgB;QAEvC;QACAC,eAAe,EAAE1L,KAAK,CAAC2L,gBAAgB;QACvCC,KAAK,EAAE5L,KAAK,CAAC6L,GAAG,KAAK,GAAG;QACxBC,SAAS,EAAE9L,KAAK,CAAC+L,UAAU,KAAK,GAAG;QACnCC,YAAY,EAAEhM,KAAK,CAACiM,cAAc;QAElC;QACAC,OAAO,EAAE,IAAI;QACbC,UAAU,EAAE,8BAA8B;QAC1CC,iBAAiB,EAAE,CAAC,CAACpM,KAAK,CAACM,SAAS;QACpC+L,aAAa,EAAE,CAAC,CAACrM,KAAK,CAAC4C,aAAa;QACpC0J,mBAAmB;QAAE;QAAA,CAAA3S,cAAA,GAAAwC,CAAA,YAAC,CAAC6D,KAAK,CAAC0E,WAAW;QAAA;QAAA,CAAA/K,cAAA,GAAAwC,CAAA,WAAI,CAAC,CAAC6D,KAAK,CAAC4F,aAAa;QACjE2G,cAAc;QAAE;QAAA,CAAA5S,cAAA,GAAAwC,CAAA,YAAC,CAAC6D,KAAK,CAAC2J,iBAAiB;QAAA;QAAA,CAAAhQ,cAAA,GAAAwC,CAAA,WAAI,CAAC,CAAC6D,KAAK,CAACgK,kBAAkB;QACvEwC,iBAAiB,EAAE,CAAC,CAACxM,KAAK,CAACgL,YAAY;QACvCI,iBAAiB,EAAEpL,KAAK,CAACmL,gBAAgB,GAAG,CAAC;QAE7C;QACAsB,WAAW,EAAE;UACXC,eAAe;UAAE;UAAA,CAAA/S,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACY,kBAAkB;UAAA;UAAA,CAAAjH,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAAChC,QAAQ;UAAA;UAAA,CAAArE,cAAA,GAAAwC,CAAA,WAAI,SAAS;UACxEwQ,QAAQ;UAAE;UAAA,CAAAhT,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACc,eAAe;UAAA;UAAA,CAAAnH,cAAA,GAAAwC,CAAA,WAAI,UAAU;UAC7CmB,IAAI,EAAE0C,KAAK,CAAC6L,GAAG,KAAK,GAAG;UAAA;UAAA,CAAAlS,cAAA,GAAAwC,CAAA,WAAG,KAAK;UAAA;UAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,OAAO;UACzCyQ,SAAS;UAAE;UAAA,CAAAjT,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAAC2L,gBAAgB,KAAK,GAAG;UAAA;UAAA,CAAAhS,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAAC+L,UAAU,KAAK,GAAG;UACrEhQ,MAAM;UAAE;UAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACiB,WAAW;UAAA;UAAA,CAAAtH,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACjE,MAAM;UAAA;UAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAI,SAAS;UACtD+E,QAAQ;UAAE;UAAA,CAAAvH,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACoB,aAAa;UAAA;UAAA,CAAAzH,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACkB,QAAQ;UAAA;UAAA,CAAAvH,cAAA,GAAAwC,CAAA,WAAI,SAAS;UAE5D;UACA0Q,UAAU,EAAE;YACVC,EAAE,EAAE9M,KAAK,CAAC0E,WAAW;YACrBJ,SAAS,EAAEtE,KAAK,CAACuE,UAAU;YAC3BwI,OAAO,EAAE/M,KAAK,CAAC4F,aAAa;YAC5BoC,YAAY,EAAEhI,KAAK,CAACiI,iBAAiB;YACrCa,aAAa,EAAE9I,KAAK,CAAC+I,cAAc;YACnCiE,aAAa,EAAEhN,KAAK,CAACgK,kBAAkB;YACvCiD,WAAW,EAAEjN,KAAK,CAAC2J;UACrB,CAAC;UAED;UACAuD,WAAW,EAAE;YACXC,OAAO,EAAEnN,KAAK,CAACgL,YAAY;YAC3BoC,WAAW;YAAG;YAAA,CAAAzT,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACgL,YAAY;YAAA;YAAA,CAAArR,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACgL,YAAY,IAAI,CAAC,CAAC;YAC5DqC,eAAe;YAAG;YAAA,CAAA1T,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACgL,YAAY;YAAA;YAAA,CAAArR,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACgL,YAAY,IAAI,CAAC;YAAA;YAAA,CAAArR,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACgL,YAAY,GAAG,CAAC,CAAC;YAC1FsC,UAAU;YAAG;YAAA,CAAA3T,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACgL,YAAY;YAAA;YAAA,CAAArR,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAACgL,YAAY,GAAG,CAAC;UAC3D;QACF;MACF,CAAC;IAAD,CAAE,CAAC;IAAC;IAAArR,cAAA,GAAAG,CAAA;IAEJY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbgR,WAAW,EAAE,mJAAmJ;MAChK/Q,IAAI,EAAEuD,eAAe;MACrB3C,UAAU,EAAE;QACVkB,IAAI;QACJxB,KAAK;QACL6C,KAAK;QACLC,UAAU;QACV4N,OAAO,EAAElP,IAAI,GAAGsB,UAAU;QAC1B6N,OAAO,EAAEnP,IAAI,GAAG;MAClB,CAAC;MACDoP,OAAO,EAAE;QACPrQ,MAAM;QAAE;QAAA,CAAA1D,cAAA,GAAAwC,CAAA,WAAAkB,MAAM;QAAA;QAAA,CAAA1D,cAAA,GAAAwC,CAAA,WAAI,IAAI;QACtB6B,QAAQ;QAAE;QAAA,CAAArE,cAAA,GAAAwC,CAAA,WAAA6B,QAAQ;QAAA;QAAA,CAAArE,cAAA,GAAAwC,CAAA,WAAI,IAAI;QAC1B+B,MAAM;QACNE;MACF,CAAC;MACDuP,QAAQ,EAAE;QACRC,WAAW,EAAEjO,KAAK;QAClBkO,WAAW,EAAEvP,IAAI;QACjBwP,cAAc,EAAE5O,YAAY,CAAClE,IAAI,CAACC,MAAM;QACxC8S,UAAU,EAAE;QACV;QACA,QAAQ,EAAE,eAAe,EAAE,UAAU,EAAE,iBAAiB,EACxD,YAAY,EAAE,kBAAkB,EAAE,KAAK,EAAE,gBAAgB,EACzD,YAAY,EAAE,kBAAkB;QAEhC;QACA,YAAY,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,EACvD,QAAQ,EAAE,aAAa,EAAE,UAAU,EAAE,eAAe,EACpD,kBAAkB,EAAE,gBAAgB,EAAE,aAAa,EACnD,gBAAgB,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAC5D,SAAS,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,oBAAoB;QAErE;QACA,eAAe,EAAE,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EACtE,QAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE,oBAAoB,EAC9D,qBAAqB,EAAE,eAAe,EAAE,qBAAqB,EAC7D,WAAW,EAAE,WAAW,EAAE,cAAc;QAExC;QACA,aAAa,EAAE,YAAY,EAAE,oBAAoB,EAAE,eAAe,EAClE,YAAY,EAAE,WAAW,EAAE,kBAAkB,EAAE,eAAe,EAC9D,cAAc,EAAE,eAAe,EAAE,YAAY,EAAE,QAAQ,EAAE,cAAc,EACvE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,uBAAuB,EAC1E,YAAY,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,eAAe,EACrE,YAAY,EAAE,gBAAgB,EAAE,aAAa,EAAE,eAAe,EAC9D,mBAAmB,EAAE,kBAAkB,EAAE,mBAAmB,EAC5D,sBAAsB,EAAE,sBAAsB,EAAE,sBAAsB,EACtE,oBAAoB,EAAE,qBAAqB,EAAE,eAAe,EAC5D,gBAAgB,EAAE,8BAA8B,EAAE,cAAc;QAEhE;QACA,mBAAmB,EAAE,kBAAkB,EAAE,mBAAmB,EAC5D,qBAAqB,EAAE,oBAAoB,EAAE,qBAAqB,EAClE,uBAAuB,EAAE,wBAAwB;QAEjD;QACA,YAAY,EAAE,YAAY,EAAE,mBAAmB,EAAE,yBAAyB,EAC1E,cAAc,CACf;QACDC,WAAW,EAAE,CACX,eAAe,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EACxD,mBAAmB,EAAE,mBAAmB,EAAE,iBAAiB,CAC5D;QACDC,iBAAiB,EAAE;UACjBC,uBAAuB,EAAE,IAAI;UAC7BC,kBAAkB,EAAE,IAAI;UACxBC,wBAAwB,EAAE,IAAI;UAC9BC,wBAAwB,EAAE,IAAI;UAC9BC,wBAAwB,EAAE,IAAI;UAC9BC,sBAAsB,EAAE,IAAI,CAAC;QAC/B,CAAC;QACDC,SAAS,EAAE;UACTC,iBAAiB,EAAE,gCAAgC;UACnDC,iBAAiB,EAAE;QACrB;MACF,CAAC;MACDjS,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;;IAEjD;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAhB,KAAK,CAACG,OAAO;IAAA;IAAA,CAAA3B,cAAA,GAAAwC,CAAA,WAAIhB,KAAK,CAACG,OAAO,CAAC6C,QAAQ,CAAC,gBAAgB,CAAC,GAAE;MAAA;MAAAxE,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC7Dc,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;MAAC;MAAAlB,cAAA,GAAAG,CAAA;MACnF,IAAI;QACF,MAAM6U,aAAa;QAAA;QAAA,CAAAhV,cAAA,GAAAG,CAAA,QAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY2E,WAAW;AACvB,qBAAqBM,UAAU,IAAIC,aAAa;AAChD,mBAAmBL,UAAU,GAAG,CAAC,YAAYA,UAAU,GAAG,CAAC;AAC3D,SAAS;QAED,MAAMiQ,kBAAkB;QAAA;QAAA,CAAAjV,cAAA,GAAAG,CAAA,QAAG;AACnC;AACA;AACA,YAAY2E,WAAW;AACvB,SAAS;QAAC;QAAA9E,cAAA,GAAAG,CAAA;QAEF4E,MAAM,CAACE,IAAI,CAAC9B,KAAK,EAAE0B,MAAM,CAAC;QAE1B,MAAM,CAACU,YAAY,EAAEC,WAAW,CAAC;QAAA;QAAA,CAAAxF,cAAA,GAAAG,CAAA,QAAG,MAAMsF,OAAO,CAACC,GAAG,CAAC,CACpDrF,KAAK,CAAC2U,aAAa,EAAEjQ,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACmP,MAAM,CAAC,CAAC/R,KAAK,EAAE0B,MAAM,CAAC,CAAC,CAAC,EACjExE,KAAK,CAAC4U,kBAAkB,EAAElQ,MAAM,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC;QAAC;QAAA/F,cAAA,GAAAG,CAAA;QAEH,OAAOY,GAAG,CAAC4B,IAAI,CAAC;UACdC,OAAO,EAAE,IAAI;UACbC,IAAI,EAAE0C,YAAY,CAAClE,IAAI;UACvBoC,UAAU,EAAE;YACVkB,IAAI;YACJxB,KAAK;YACL6C,KAAK,EAAE1D,QAAQ,CAACkD,WAAW,CAACnE,IAAI,CAAC,CAAC,CAAC,CAAC2E,KAAK,CAAC;YAC1CC,UAAU,EAAEC,IAAI,CAACC,IAAI,CAAC7D,QAAQ,CAACkD,WAAW,CAACnE,IAAI,CAAC,CAAC,CAAC,CAAC2E,KAAK,CAAC,GAAG7C,KAAK;UACnE,CAAC;UACDgS,IAAI,EAAE,mFAAmF;UACzFrS,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOoS,aAAa,EAAE;QAAA;QAAApV,cAAA,GAAAG,CAAA;QACtBc,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAE4T,aAAa,CAAC;MACxD;IACF,CAAC;IAAA;IAAA;MAAApV,cAAA,GAAAwC,CAAA;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAEDY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBnB,KAAK,EAAE,wBAAwB;MAC/B6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBkB,IAAI,EAAE,EAAE;MAAE;MACVC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACxC,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEJ,GAAG,CAACT,KAAK,CAAC;IAEzE,MAAM;MACJ+B,MAAM;MACNuI,SAAS;MACT2K,UAAU;MACV9K,MAAM;MACNjG,MAAM;MAAA;MAAA,CAAAvE,cAAA,GAAAwC,CAAA,WAAG,YAAY;MACrBiC,SAAS;MAAA;MAAA,CAAAzE,cAAA,GAAAwC,CAAA,WAAG,MAAM;MAClBmC,IAAI;MAAA;MAAA,CAAA3E,cAAA,GAAAwC,CAAA,WAAG,CAAC;MACRW,KAAK;MAAA;MAAA,CAAAnD,cAAA,GAAAwC,CAAA,WAAG,EAAE;IACZ,CAAC;IAAA;IAAA,CAAAxC,cAAA,GAAAG,CAAA,SAAGW,GAAG,CAACT,KAAK;IAEb,MAAMwE,MAAM;IAAA;IAAA,CAAA7E,cAAA,GAAAG,CAAA,SAAG,CAACmC,QAAQ,CAACqC,IAAI,CAAC,GAAG,CAAC,IAAIrC,QAAQ,CAACa,KAAK,CAAC;;IAErD;IACA,IAAIoS,eAAe;IAAA;IAAA,CAAAvV,cAAA,GAAAG,CAAA,SAAG,CAAC,2BAA2B,EAAE,wBAAwB,CAAC;IAC7E,IAAIqV,WAAW;IAAA;IAAA,CAAAxV,cAAA,GAAAG,CAAA,SAAG,EAAE;IACpB,IAAIsV,UAAU;IAAA;IAAA,CAAAzV,cAAA,GAAAG,CAAA,SAAG,CAAC;;IAElB;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAJ,MAAM;IAAA;IAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAIJ,MAAM,KAAK,KAAK,GAAE;MAAA;MAAApC,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC9BoV,eAAe,CAACtQ,IAAI,CAAC,aAAawQ,UAAU,EAAE,CAAC;MAAC;MAAAzV,cAAA,GAAAG,CAAA;MAChDqV,WAAW,CAACvQ,IAAI,CAAC7C,MAAM,CAAC;MAAC;MAAApC,cAAA,GAAAG,CAAA;MACzBsV,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAzV,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA,IAAIwK,SAAS,EAAE;MAAA;MAAA3K,cAAA,GAAAwC,CAAA;MACb,MAAM,CAACkT,GAAG,EAAEC,GAAG,CAAC;MAAA;MAAA,CAAA3V,cAAA,GAAAG,CAAA,SAAGwK,SAAS,CAACiL,KAAK,CAAC,GAAG,CAAC,CAAC1T,GAAG,CAAC2T,CAAC,IAAI;QAAA;QAAA7V,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAG,CAAA;QAAA,OAAAsC,UAAU,CAACoT,CAAC,CAAC,GAAG,UAAU;MAAD,CAAC,CAAC,EAAC,CAAC;MAAA;MAAA7V,cAAA,GAAAG,CAAA;MAC9E,IAAIuV,GAAG,EAAE;QAAA;QAAA1V,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAG,CAAA;QACPoV,eAAe,CAACtQ,IAAI,CAAC,kBAAkBwQ,UAAU,EAAE,CAAC;QAAC;QAAAzV,cAAA,GAAAG,CAAA;QACrDqV,WAAW,CAACvQ,IAAI,CAACyQ,GAAG,CAAC;QAAC;QAAA1V,cAAA,GAAAG,CAAA;QACtBsV,UAAU,EAAE;MACd,CAAC;MAAA;MAAA;QAAAzV,cAAA,GAAAwC,CAAA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MACD;MAAI;MAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAmT,GAAG;MAAA;MAAA,CAAA3V,cAAA,GAAAwC,CAAA,WAAImT,GAAG,GAAG,CAAC,GAAE;QAAA;QAAA3V,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAG,CAAA;QAClBoV,eAAe,CAACtQ,IAAI,CAAC,kBAAkBwQ,UAAU,EAAE,CAAC;QAAC;QAAAzV,cAAA,GAAAG,CAAA;QACrDqV,WAAW,CAACvQ,IAAI,CAAC0Q,GAAG,CAAC;QAAC;QAAA3V,cAAA,GAAAG,CAAA;QACtBsV,UAAU,EAAE;MACd,CAAC;MAAA;MAAA;QAAAzV,cAAA,GAAAwC,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAxC,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA,IAAImV,UAAU,EAAE;MAAA;MAAAtV,cAAA,GAAAwC,CAAA;MACd,MAAM,CAACsT,QAAQ,EAAEC,QAAQ,CAAC;MAAA;MAAA,CAAA/V,cAAA,GAAAG,CAAA,SAAGmV,UAAU,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC1T,GAAG,CAAC2T,CAAC,IAAI;QAAA;QAAA7V,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAG,CAAA;QAAA,OAAAsC,UAAU,CAACoT,CAAC,CAAC;MAAD,CAAC,CAAC;MAAC;MAAA7V,cAAA,GAAAG,CAAA;MAC3E,IAAI2V,QAAQ,EAAE;QAAA;QAAA9V,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAG,CAAA;QACZoV,eAAe,CAACtQ,IAAI,CAAC,qBAAqBwQ,UAAU,EAAE,CAAC;QAAC;QAAAzV,cAAA,GAAAG,CAAA;QACxDqV,WAAW,CAACvQ,IAAI,CAAC6Q,QAAQ,CAAC;QAAC;QAAA9V,cAAA,GAAAG,CAAA;QAC3BsV,UAAU,EAAE;MACd,CAAC;MAAA;MAAA;QAAAzV,cAAA,GAAAwC,CAAA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MACD;MAAI;MAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAuT,QAAQ;MAAA;MAAA,CAAA/V,cAAA,GAAAwC,CAAA,WAAIuT,QAAQ,GAAG,CAAC,GAAE;QAAA;QAAA/V,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAG,CAAA;QAC5BoV,eAAe,CAACtQ,IAAI,CAAC,qBAAqBwQ,UAAU,EAAE,CAAC;QAAC;QAAAzV,cAAA,GAAAG,CAAA;QACxDqV,WAAW,CAACvQ,IAAI,CAAC8Q,QAAQ,CAAC;QAAC;QAAA/V,cAAA,GAAAG,CAAA;QAC3BsV,UAAU,EAAE;MACd,CAAC;MAAA;MAAA;QAAAzV,cAAA,GAAAwC,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAxC,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA,IAAIqK,MAAM,EAAE;MAAA;MAAAxK,cAAA,GAAAwC,CAAA;MACV,MAAMwT,SAAS;MAAA;MAAA,CAAAhW,cAAA,GAAAG,CAAA,SAAGmC,QAAQ,CAACkI,MAAM,CAAC,GAAG,OAAO,EAAC,CAAC;MAAA;MAAAxK,cAAA,GAAAG,CAAA;MAC9CoV,eAAe,CAACtQ,IAAI,CAAC,cAAcwQ,UAAU,EAAE,CAAC;MAAC;MAAAzV,cAAA,GAAAG,CAAA;MACjDqV,WAAW,CAACvQ,IAAI,CAAC+Q,SAAS,CAAC;MAAC;MAAAhW,cAAA,GAAAG,CAAA;MAC5BsV,UAAU,EAAE;IACd,CAAC;IAAA;IAAA;MAAAzV,cAAA,GAAAwC,CAAA;IAAA;IAED,MAAMsC,WAAW;IAAA;IAAA,CAAA9E,cAAA,GAAAG,CAAA,SAAGoV,eAAe,CAACU,IAAI,CAAC,OAAO,CAAC;IACjD,MAAM9Q,gBAAgB;IAAA;IAAA,CAAAnF,cAAA,GAAAG,CAAA,SAAG,CAAC,YAAY,EAAE,eAAe,EAAE,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC9F,MAAM+V,UAAU;IAAA;IAAA,CAAAlW,cAAA,GAAAG,CAAA,SAAGgF,gBAAgB,CAACX,QAAQ,CAACD,MAAM,CAAC;IAAA;IAAA,CAAAvE,cAAA,GAAAwC,CAAA,WAAG+B,MAAM;IAAA;IAAA,CAAAvE,cAAA,GAAAwC,CAAA,WAAG,YAAY;IAC5E,MAAM2T,aAAa;IAAA;IAAA,CAAAnW,cAAA,GAAAG,CAAA,SAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAACqE,QAAQ,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC,CAAC;IAAA;IAAA,CAAAtE,cAAA,GAAAwC,CAAA,WAAGiC,SAAS,CAACH,WAAW,CAAC,CAAC;IAAA;IAAA,CAAAtE,cAAA,GAAAwC,CAAA,WAAG,MAAM;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAE3Gc,OAAO,CAACC,GAAG,CAAC,iCAAiC4D,WAAW,EAAE,CAAC;IAAC;IAAA9E,cAAA,GAAAG,CAAA;IAC5Dc,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEsU,WAAW,CAAC;;IAEhD;IACA,MAAMlQ,UAAU;IAAA;IAAA,CAAAtF,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA,cAAc2E,WAAW;AACzB,KAAK;IAED,MAAMU,WAAW;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACiF,UAAU,EAAEkQ,WAAW,CAAC;IACxD,MAAMvB,WAAW;IAAA;IAAA,CAAAjU,cAAA,GAAAG,CAAA,SAAGmC,QAAQ;IAAC;IAAA,CAAAtC,cAAA,GAAAwC,CAAA,WAAAgD,WAAW,CAACnE,IAAI,CAAC,CAAC,CAAC,EAAE2E,KAAK;IAAA;IAAA,CAAAhG,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;;IAE7D;IACA,MAAMY,WAAW;IAAA;IAAA,CAAApD,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc2E,WAAW;AACzB,iBAAiBoR,UAAU,IAAIC,aAAa;AAC5C,eAAeV,UAAU,YAAYA,UAAU,GAAG,CAAC;AACnD,KAAK;IAAC;IAAAzV,cAAA,GAAAG,CAAA;IAEFqV,WAAW,CAACvQ,IAAI,CAAC3C,QAAQ,CAACa,KAAK,CAAC,EAAE0B,MAAM,CAAC;IAEzC,MAAMU,YAAY;IAAA;IAAA,CAAAvF,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC+C,WAAW,EAAEoS,WAAW,EAAE,KAAK,CAAC,EAAC,CAAC;IAAA;IAAAxV,cAAA,GAAAG,CAAA;IAEnEc,OAAO,CAACC,GAAG,CAAC,eAAeqE,YAAY,CAAClE,IAAI,CAACC,MAAM,kBAAkB2S,WAAW,0BAA0B,CAAC;IAAC;IAAAjU,cAAA,GAAAG,CAAA;IAE5GY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE;QACJuT,MAAM,EAAE7Q,YAAY,CAAClE,IAAI;QACzBoC,UAAU,EAAE;UACVkB,IAAI,EAAErC,QAAQ,CAACqC,IAAI,CAAC;UACpBxB,KAAK,EAAEb,QAAQ,CAACa,KAAK,CAAC;UACtB6C,KAAK,EAAEiO,WAAW;UAClBhO,UAAU,EAAEC,IAAI,CAACC,IAAI,CAAC8N,WAAW,GAAG3R,QAAQ,CAACa,KAAK,CAAC;QACrD,CAAC;QACD4Q,OAAO,EAAE;UACP3R,MAAM;UAAE;UAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAAJ,MAAM;UAAA;UAAA,CAAApC,cAAA,GAAAwC,CAAA,WAAI,KAAK;UACvBmI,SAAS;UAAE;UAAA,CAAA3K,cAAA,GAAAwC,CAAA,WAAAmI,SAAS;UAAA;UAAA,CAAA3K,cAAA,GAAAwC,CAAA,WAAI,KAAK;UAC7B8S,UAAU;UAAE;UAAA,CAAAtV,cAAA,GAAAwC,CAAA,WAAA8S,UAAU;UAAA;UAAA,CAAAtV,cAAA,GAAAwC,CAAA,WAAI,KAAK;UAC/BgI,MAAM;UAAE;UAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAAgI,MAAM;UAAA;UAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,KAAK;UACvB+B,MAAM,EAAE2R,UAAU;UAClBzR,SAAS,EAAE0R;QACb;MACF,CAAC;MACDE,WAAW,EAAE,eAAe;MAC5BC,iBAAiB,EAAE;QACjBC,iBAAiB,EAAExT,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAGzT,IAAI,CAACyT,GAAG,CAAC,CAAC;QAC1CC,kBAAkB,EAAElB,eAAe,CAACjU,MAAM;QAC1CoV,qBAAqB,EAAEzC;MACzB,CAAC;MACDnR,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAC/CY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,yBAAyB;MAChCG,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAA3B,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACzC,IAAI;IACF,MAAM;MAAEmG;IAAO,CAAC;IAAA;IAAA,CAAAtG,cAAA,GAAAG,CAAA,SAAGW,GAAG,CAACiE,MAAM;IAC7B,MAAM4R,WAAW;IAAA;IAAA,CAAA3W,cAAA,GAAAG,CAAA,SAAGmG,MAAM,CAAChC,WAAW,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAEzCc,OAAO,CAACC,GAAG,CAAC,yCAAyCyV,WAAW,EAAE,CAAC;;IAEnE;IACA,MAAMC,UAAU;IAAA;IAAA,CAAA5W,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMiB,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACuW,UAAU,EAAE,CAACD,WAAW,CAAC,CAAC;IAAC;IAAA3W,cAAA,GAAAG,CAAA;IAEtD,IAAIiB,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAtB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC5B,OAAOY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAC1BnB,KAAK,EAAE,iBAAiB;QACxB+E,MAAM,EAAEoQ,WAAW;QACnBhV,OAAO,EAAE,WAAWgV,WAAW,yBAAyB;QACxD7T,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAwC,CAAA;IAAA;IAED,MAAM6D,KAAK;IAAA;IAAA,CAAArG,cAAA,GAAAG,CAAA,SAAGiB,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;;IAE5B;IACA,MAAMwV,QAAQ;IAAA;IAAA,CAAA7W,cAAA,GAAAG,CAAA,SAAG;MACfoG,MAAM,EAAEoQ,WAAW;MACnBrQ,MAAM,EAAEqQ,WAAW;MACnBG,WAAW,EAAE;QACXtQ,IAAI,EAAEH,KAAK,CAACI,aAAa;QACzBpC,QAAQ,EAAEgC,KAAK,CAAChC,QAAQ;QACxB6C,cAAc,EAAEb,KAAK,CAACc,eAAe;QACrC4K,eAAe,EAAE1L,KAAK,CAAC2L,gBAAgB;QACvC+E,KAAK;QAAE;QAAA,CAAA/W,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAAC6L,GAAG,KAAK,GAAG;QAAA;QAAA,CAAAlS,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAAC6L,GAAG,KAAK,IAAI;MAChD,CAAC;MACD8E,YAAY,EAAE3Q,KAAK,CAAC4Q,KAAK;MAAA;MAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAG;QAC1B0U,IAAI,EAAE7Q,KAAK,CAAC8Q,WAAW;QACvB/N,IAAI,EAAE3G,UAAU;QAAC;QAAA,CAAAzC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAAC+C,IAAI;QAAA;QAAA,CAAApJ,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;QACjCmN,IAAI,EAAElN,UAAU;QAAC;QAAA,CAAAzC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACsJ,IAAI;QAAA;QAAA,CAAA3P,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;QACjCqN,GAAG,EAAEpN,UAAU;QAAC;QAAA,CAAAzC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACwJ,GAAG;QAAA;QAAA,CAAA7P,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;QAC/ByU,KAAK,EAAExU,UAAU;QAAC;QAAA,CAAAzC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAAC4Q,KAAK;QAAA;QAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;QACnC4U,QAAQ,EAAE3U,UAAU;QAAC;QAAA,CAAAzC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACgR,SAAS;QAAA;QAAA,CAAArX,cAAA,GAAAwC,CAAA,WAAI6D,KAAK,CAAC4Q,KAAK;QAAA;QAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAI,CAAC,EAAC;QACzDgI,MAAM,EAAElI,QAAQ;QAAC;QAAA,CAAAtC,cAAA,GAAAwC,CAAA,WAAA6D,KAAK,CAACmE,MAAM;QAAA;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,CAAC;MACpC,CAAC;MAAA;MAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,IAAI;MACRwR,QAAQ,EAAE;QACRsD,eAAe,EAAEhR,MAAM;QACvBiR,cAAc,EAAEZ,WAAW;QAC3Ba,gBAAgB,EAAE;UAChBC,SAAS,EAAE,IAAI;UACfC,SAAS,EAAErR,KAAK,CAAC4Q,KAAK,KAAK,IAAI;UAC/BU,mBAAmB,EAAE,KAAK;UAAE;UAC5BC,YAAY,EAAE,KAAK,CAAC;QACtB,CAAC;QACD9U,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC;IACF,CAAC;IAAC;IAAAhD,cAAA,GAAAG,CAAA;IAEFc,OAAO,CAACC,GAAG,CAAC,sDAAsDyV,WAAW,EAAE,CAAC;IAAC;IAAA3W,cAAA,GAAAG,CAAA;IAEjFY,GAAG,CAAC4B,IAAI,CAACkU,QAAQ,CAAC;EAEpB,CAAC,CAAC,OAAOrV,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAC5DY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBnB,KAAK,EAAE,4BAA4B;MACnC+E,MAAM,EAAEzF,GAAG,CAACiE,MAAM,CAACuB,MAAM;MACzB3E,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtBkB,IAAI,EAAE,EAAE;MAAE;MACVC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA,MAAM6U,UAAU;AAAA;AAAA,CAAA7X,cAAA,GAAAG,CAAA,SAAG,IAAI2X,GAAG,CAAC,CAAC;AAC5B,MAAMC,SAAS;AAAA;AAAA,CAAA/X,cAAA,GAAAG,CAAA,SAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAC,CAAC;AACjC,MAAM6X,cAAc;AAAA;AAAA,CAAAhY,cAAA,GAAAG,CAAA,SAAG,IAAI,EAAC,CAAC;;AAE7B;AAAA;AAAAH,cAAA,GAAAG,CAAA;AACA,MAAM8X,WAAW,GAAGA,CAAC1R,MAAM,EAAE2R,SAAS,EAAE/U,KAAK,KAAK;EAAA;EAAAnD,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EAAA,UAAGoG,MAAM,IAAI2R,SAAS,IAAI/U,KAAK,EAAE;AAAD,CAAC;;AAEnF;AAAA;AAAAnD,cAAA,GAAAG,CAAA;AACA,MAAMgY,UAAU,GAAGA,CAAA,KAAM;EAAA;EAAAnY,cAAA,GAAAgB,CAAA;EACvB,MAAMwV,GAAG;EAAA;EAAA,CAAAxW,cAAA,GAAAG,CAAA,SAAG4C,IAAI,CAACyT,GAAG,CAAC,CAAC;EAAC;EAAAxW,cAAA,GAAAG,CAAA;EACvB,KAAK,MAAM,CAACiQ,GAAG,EAAEgI,KAAK,CAAC,IAAIP,UAAU,CAACQ,OAAO,CAAC,CAAC,EAAE;IAAA;IAAArY,cAAA,GAAAG,CAAA;IAC/C,IAAIqW,GAAG,GAAG4B,KAAK,CAACtV,SAAS,GAAGiV,SAAS,EAAE;MAAA;MAAA/X,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACrC0X,UAAU,CAACS,MAAM,CAAClI,GAAG,CAAC;IACxB,CAAC;IAAA;IAAA;MAAApQ,cAAA,GAAAwC,CAAA;IAAA;EACH;AACF,CAAC;;AAED;AAAA;AAAAxC,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAChD,MAAMuX,SAAS;EAAA;EAAA,CAAAvY,cAAA,GAAAG,CAAA,SAAG4C,IAAI,CAACyT,GAAG,CAAC,CAAC;EAC5B,MAAM;IAAElQ;EAAO,CAAC;EAAA;EAAA,CAAAtG,cAAA,GAAAG,CAAA,SAAGW,GAAG,CAACiE,MAAM;EAC7B,MAAMmT,SAAS;EAAA;EAAA,CAAAlY,cAAA,GAAAG,CAAA;EAAG;EAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAA1B,GAAG,CAACT,KAAK,CAAC6X,SAAS;EAAA;EAAA,CAAAlY,cAAA,GAAAwC,CAAA,WAAI,OAAO;EAChD,MAAMW,KAAK;EAAA;EAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG+F,IAAI,CAACwP,GAAG;EAAC;EAAA,CAAA1V,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACxB,GAAG,CAACT,KAAK,CAAC8C,KAAK,CAAC;EAAA;EAAA,CAAAnD,cAAA,GAAAwC,CAAA,WAAI,EAAE,GAAE,GAAG,CAAC,EAAC,CAAC;;EAE9D,MAAM+D,MAAM;EAAA;EAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAGmG,MAAM,CAAChC,WAAW,CAAC,CAAC;EACnC,MAAMkU,QAAQ;EAAA;EAAA,CAAAxY,cAAA,GAAAG,CAAA,SAAG8X,WAAW,CAAC1R,MAAM,EAAE2R,SAAS,EAAE/U,KAAK,CAAC;EAAC;EAAAnD,cAAA,GAAAG,CAAA;EAEvDc,OAAO,CAACC,GAAG,CAAC,iCAAiCqF,MAAM,gBAAgB2R,SAAS,YAAY/U,KAAK,EAAE,CAAC;EAAC;EAAAnD,cAAA,GAAAG,CAAA;EAEjG,IAAI;IACF;IACA,MAAMsY,MAAM;IAAA;IAAA,CAAAzY,cAAA,GAAAG,CAAA,SAAG0X,UAAU,CAAChX,GAAG,CAAC2X,QAAQ,CAAC;IAAC;IAAAxY,cAAA,GAAAG,CAAA;IACxC;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAiW,MAAM;IAAA;IAAA,CAAAzY,cAAA,GAAAwC,CAAA,WAAKO,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAGiC,MAAM,CAAC3V,SAAS,GAAGiV,SAAS,CAAC,EAAE;MAAA;MAAA/X,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACzDc,OAAO,CAACC,GAAG,CAAC,oBAAoBqF,MAAM,KAAKxD,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAGiC,MAAM,CAAC3V,SAAS,SAAS,CAAC;MAAC;MAAA9C,cAAA,GAAAG,CAAA;MACnF,OAAOY,GAAG,CAAC4B,IAAI,CAAC;QACd,GAAG8V,MAAM,CAAC5V,IAAI;QACd4V,MAAM,EAAE,IAAI;QACZC,QAAQ,EAAE3V,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAGiC,MAAM,CAAC3V;MAChC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAA9C,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACA,IAAI0X,UAAU,CAACc,IAAI,GAAGX,cAAc,EAAE;MAAA;MAAAhY,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACpCgY,UAAU,CAAC,CAAC;IACd,CAAC;IAAA;IAAA;MAAAnY,cAAA,GAAAwC,CAAA;IAAA;;IAED;IACA,MAAMoW,QAAQ;IAAA;IAAA,CAAA5Y,cAAA,GAAAG,CAAA,SAAG;MACf0Y,KAAK,EAAE,aAAa;MACpBC,MAAM,EAAE,cAAc;MACtBC,OAAO,EAAE;IACX,CAAC;IAED,MAAMC,SAAS;IAAA;IAAA,CAAAhZ,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAoW,QAAQ,CAACV,SAAS,CAAC;IAAA;IAAA,CAAAlY,cAAA,GAAAwC,CAAA,WAAI,aAAa;;IAEtD;IACA,MAAMyW,WAAW;IAAA;IAAA,CAAAjZ,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe6Y,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;IAED;IACA,MAAME,YAAY;IAAA;IAAA,CAAAlZ,cAAA,GAAAG,CAAA,SAAGE,KAAK,CAAC4Y,WAAW,EAAE,CAAC1S,MAAM,EAAEpD,KAAK,CAAC,CAAC;IACxD,MAAMgW,cAAc;IAAA;IAAA,CAAAnZ,cAAA,GAAAG,CAAA,SAAG,IAAIsF,OAAO,CAAC,CAAC2T,CAAC,EAAEC,MAAM,KAC3C;MAAA;MAAArZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAmZ,UAAU,CAAC,MAAM;QAAA;QAAAtZ,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAG,CAAA;QAAA,OAAAkZ,MAAM,CAAC,IAAIE,KAAK,CAAC,0CAA0C,CAAC,CAAC;MAAD,CAAC,EAAE,KAAK,CAAC;IAAD,CACvF,CAAC;IAED,MAAMnY,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,SAAG,MAAMsF,OAAO,CAAC+T,IAAI,CAAC,CAACN,YAAY,EAAEC,cAAc,CAAC,CAAC;IAAC;IAAAnZ,cAAA,GAAAG,CAAA;IAElE;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,YAACpB,MAAM,CAACC,IAAI;IAAA;IAAA,CAAArB,cAAA,GAAAwC,CAAA,WAAIpB,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAtB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC5C;MACAc,OAAO,CAACO,KAAK,CAAC,kCAAkC+E,MAAM,mCAAmC,EAAE;QACzFA,MAAM;QACNtD,qBAAqB,EAAE,IAAI;QAC3BwW,4BAA4B,EAAE,IAAI;QAClCC,2BAA2B,EAAE,IAAI;QACjC9X,oBAAoB,EAAE;UACpB+X,eAAe,EAAE,6BAA6B;UAC9C7X,gBAAgB,EAAE,CAChB,uCAAuC,EACvC,mDAAmD,EACnD,sCAAsC,EACtC,kCAAkC,EAClC,8CAA8C,CAC/C;UACDC,qBAAqB,EAAE,CACrB,+CAA+C,EAC/C,mDAAmD,EACnD,0CAA0C,EAC1C,8CAA8C,EAC9C,iCAAiC,CAClC;UACDC,aAAa,EAAE,CACb,uBAAuB,EACvB,4BAA4B,EAC5B,2BAA2B,EAC3B,2BAA2B,EAC3B,6BAA6B;QAEjC;MACF,CAAC,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MAEH,OAAOY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdpB,KAAK,EAAE,+BAA+B;QACtC8E,MAAM,EAAEC,MAAM;QACdqT,UAAU,EAAE,CAAC;QACb/W,IAAI,EAAE,EAAE;QACRgX,OAAO,EAAE;UACPC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,IAAI;UAChBC,YAAY,EAAE,IAAI;UAClBC,YAAY,EAAE;QAChB,CAAC;QACD5D,WAAW,EAAE,OAAO;QACpB1U,OAAO,EAAE,8CAA8C;QACvDmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCkX,SAAS,EAAEnX,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAG+B;MAC1B,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAvY,cAAA,GAAAwC,CAAA;IAAA;;IAED;IACA,MAAM2X,MAAM;IAAA;IAAA,CAAAna,cAAA,GAAAG,CAAA,SAAGiB,MAAM,CAACC,IAAI,CAACa,GAAG,CAACC,GAAG,IAAK;MAAA;MAAAnC,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA;QACrC+W,IAAI,EAAE/U,GAAG,CAAC+U,IAAI;QACd9N,IAAI,EAAE3G,UAAU,CAACN,GAAG,CAACiH,IAAI,CAAC;QAC1BuG,IAAI,EAAElN,UAAU,CAACN,GAAG,CAACwN,IAAI,CAAC;QAC1BE,GAAG,EAAEpN,UAAU,CAACN,GAAG,CAAC0N,GAAG,CAAC;QACxBoH,KAAK,EAAExU,UAAU,CAACN,GAAG,CAAC8U,KAAK,CAAC;QAC5BG,QAAQ,EAAE3U,UAAU,CAACN,GAAG,CAACkV,SAAS,CAAC;QACnC7M,MAAM;QAAE;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACH,GAAG,CAACqI,MAAM,CAAC;QAAA;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,CAAC;QACjC4X,WAAW,EAAEjY,GAAG,CAACkY,YAAY;QAAA;QAAA,CAAAra,cAAA,GAAAwC,CAAA,WAAGC,UAAU,CAACN,GAAG,CAACkY,YAAY,CAAC;QAAA;QAAA,CAAAra,cAAA,GAAAwC,CAAA,WAAG,IAAI;QACnE8X,cAAc,EAAEnY,GAAG,CAACoY,gBAAgB;QAAA;QAAA,CAAAva,cAAA,GAAAwC,CAAA,WAAGC,UAAU,CAACN,GAAG,CAACoY,gBAAgB,CAAC;QAAA;QAAA,CAAAva,cAAA,GAAAwC,CAAA,WAAG,IAAI;MAChF,CAAC;IAAD,CAAE,CAAC;IAEH,MAAMgY,MAAM;IAAA;IAAA,CAAAxa,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAAC,CAAC,CAAC;IACxB,MAAMM,MAAM;IAAA;IAAA,CAAAza,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAACA,MAAM,CAAC7Y,MAAM,GAAG,CAAC,CAAC;IACxC,MAAM0Y,YAAY;IAAA;IAAA,CAAAha,cAAA,GAAAG,CAAA,SAAGsa,MAAM,EAAExD,KAAK,GAAG,CAAC;IAAA;IAAA,CAAAjX,cAAA,GAAAwC,CAAA,WACnC,CAACgY,MAAM,CAACvD,KAAK,GAAGwD,MAAM,CAACxD,KAAK,IAAIwD,MAAM,CAACxD,KAAK,GAAG,GAAG;IAAA;IAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAI,CAAC;;IAE1D;IACA,MAAMkY,WAAW;IAAA;IAAA,CAAA1a,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAACpU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC4U,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;MAAA;MAAA7a,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAAya,GAAG,GAAGC,CAAC,CAACrQ,MAAM;IAAD,CAAC,EAAE,CAAC,CAAC,GAAGtE,IAAI,CAACwP,GAAG,CAAC,EAAE,EAAEyE,MAAM,CAAC7Y,MAAM,CAAC;IAC3G,MAAMwZ,UAAU;IAAA;IAAA,CAAA9a,cAAA,GAAAG,CAAA,SAAG+F,IAAI,CAACyP,GAAG,CAAC,GAAGwE,MAAM,CAACpU,KAAK,CAAC,CAAC,EAAEG,IAAI,CAACwP,GAAG,CAAC,GAAG,EAAEyE,MAAM,CAAC7Y,MAAM,CAAC,CAAC,CAACY,GAAG,CAAC2Y,CAAC,IAAI;MAAA;MAAA7a,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAA0a,CAAC,CAAClL,IAAI;IAAD,CAAC,CAAC,CAAC;IAC9F,MAAMoL,SAAS;IAAA;IAAA,CAAA/a,cAAA,GAAAG,CAAA,SAAG+F,IAAI,CAACwP,GAAG,CAAC,GAAGyE,MAAM,CAACpU,KAAK,CAAC,CAAC,EAAEG,IAAI,CAACwP,GAAG,CAAC,GAAG,EAAEyE,MAAM,CAAC7Y,MAAM,CAAC,CAAC,CAACY,GAAG,CAAC2Y,CAAC,IAAI;MAAA;MAAA7a,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA,OAAA0a,CAAC,CAAChL,GAAG;IAAD,CAAC,CAAC,CAAC;IAE5F,MAAMmL,YAAY;IAAA;IAAA,CAAAhb,cAAA,GAAAG,CAAA,SAAG;MACnByC,OAAO,EAAE,IAAI;MACb0D,MAAM,EAAEC,MAAM;MACd2R,SAAS;MACT0B,UAAU,EAAEO,MAAM,CAAC7Y,MAAM;MACzBuB,IAAI,EAAEsX,MAAM;MACZN,OAAO,EAAE;QACPC,WAAW,EAAEU,MAAM,CAACvD,KAAK;QACzB8C,UAAU,EAAES,MAAM,CAACtD,IAAI;QACvB8C,YAAY,EAAEvX,UAAU,CAACuX,YAAY,CAACiB,OAAO,CAAC,CAAC,CAAC,CAAC;QACjDhB,YAAY,EAAEO,MAAM,CAAChQ,MAAM;QAC3B0Q,cAAc,EAAEhV,IAAI,CAACiV,KAAK,CAACT,WAAW,CAAC;QACvCI,UAAU,EAAErY,UAAU,CAACqY,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7CF,SAAS,EAAEtY,UAAU,CAACsY,SAAS,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3C3F,UAAU,EAAE,GAAGyF,SAAS,CAACE,OAAO,CAAC,CAAC,CAAC,MAAMH,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC;MAChE,CAAC;MACDxC,MAAM,EAAE,KAAK;MACbyB,SAAS,EAAEnX,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAG+B,SAAS;MACjCzV,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;;IAED;IAAA;IAAAhD,cAAA,GAAAG,CAAA;IACA0X,UAAU,CAACuD,GAAG,CAAC5C,QAAQ,EAAE;MACvB3V,IAAI,EAAEmY,YAAY;MAClBlY,SAAS,EAAEC,IAAI,CAACyT,GAAG,CAAC;IACtB,CAAC,CAAC;IAAC;IAAAxW,cAAA,GAAAG,CAAA;IAEHc,OAAO,CAACC,GAAG,CAAC,KAAKqF,MAAM,oBAAoB4T,MAAM,CAAC7Y,MAAM,eAAeyB,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAG+B,SAAS,IAAI,CAAC;IAAC;IAAAvY,cAAA,GAAAG,CAAA;IACnGY,GAAG,CAAC4B,IAAI,CAACqY,YAAY,CAAC;EAExB,CAAC,CAAC,OAAOxZ,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,oBAAoB+E,MAAM,UAAU,EAAE/E,KAAK,CAAC;;IAE1D;IACA,MAAMiX,MAAM;IAAA;IAAA,CAAAzY,cAAA,GAAAG,CAAA,SAAG0X,UAAU,CAAChX,GAAG,CAAC2X,QAAQ,CAAC;IAAC;IAAAxY,cAAA,GAAAG,CAAA;IACxC,IAAIsY,MAAM,EAAE;MAAA;MAAAzY,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACVc,OAAO,CAACC,GAAG,CAAC,gCAAgCqF,MAAM,eAAe,CAAC;MAAC;MAAAvG,cAAA,GAAAG,CAAA;MACnE,OAAOY,GAAG,CAAC4B,IAAI,CAAC;QACd,GAAG8V,MAAM,CAAC5V,IAAI;QACd4V,MAAM,EAAE,IAAI;QACZ4C,KAAK,EAAE,IAAI;QACX3C,QAAQ,EAAE3V,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAGiC,MAAM,CAAC3V,SAAS;QACvCtB,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAxB,cAAA,GAAAwC,CAAA;IAAA;;IAED;IAAAxC,cAAA,GAAAG,CAAA;IACAY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,8BAA8B;MACrC6T,OAAO,EAAE7T,KAAK,CAACG,OAAO,CAAC6C,QAAQ,CAAC,SAAS,CAAC;MAAA;MAAA,CAAAxE,cAAA,GAAAwC,CAAA,WAAG,0BAA0B;MAAA;MAAA,CAAAxC,cAAA,GAAAwC,CAAA,WAAG,gBAAgB;MAC1F8D,MAAM,EAAEC,MAAM;MACd1D,IAAI,EAAE,EAAE;MACRqX,SAAS,EAAEnX,IAAI,CAACyT,GAAG,CAAC,CAAC,GAAG+B,SAAS;MACjCzV,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCsY,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAvb,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACpD,IAAI;IACF,MAAM;MAAEmG;IAAO,CAAC;IAAA;IAAA,CAAAtG,cAAA,GAAAG,CAAA,SAAGW,GAAG,CAACiE,MAAM;IAC7B,MAAMyW,MAAM;IAAA;IAAA,CAAAxb,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACxB,GAAG,CAACT,KAAK,CAACmb,MAAM,CAAC;IAAA;IAAA,CAAAxb,cAAA,GAAAwC,CAAA,WAAI,EAAE,GAAC,CAAC;IACjD,MAAM+D,MAAM;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,SAAGmG,MAAM,CAAChC,WAAW,CAAC,CAAC;IAAC;IAAAtE,cAAA,GAAAG,CAAA;IAEpCc,OAAO,CAACC,GAAG,CAAC,mDAAmDqF,MAAM,aAAaiV,MAAM,OAAO,CAAC;;IAEhG;IACA,MAAMC,eAAe;IAAA;IAAA,CAAAzb,cAAA,GAAAG,CAAA,SAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+Cqb,MAAM;AACrD;AACA;AACA;AACA,KAAK;IAED,MAAMpa,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACob,eAAe,EAAE,CAAClV,MAAM,CAAC,CAAC;IAAC;IAAAvG,cAAA,GAAAG,CAAA;IAEtD,IAAIiB,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAtB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC5Bc,OAAO,CAACC,GAAG,CAAC,4CAA4CqF,MAAM,EAAE,CAAC;MAAC;MAAAvG,cAAA,GAAAG,CAAA;MAClE,OAAOY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdpB,KAAK,EAAE,0BAA0B;QACjC+E,MAAM,EAAEA,MAAM;QACd5E,OAAO,EAAE,qCAAqC4E,MAAM,EAAE;QACtD1D,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAwC,CAAA;IAAA;;IAED;IACA,MAAMkZ,cAAc;IAAA;IAAA,CAAA1b,cAAA,GAAAG,CAAA,SAAGiB,MAAM,CAACC,IAAI,CAACa,GAAG,CAACC,GAAG,IAAK;MAAA;MAAAnC,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAG,CAAA;MAAA;QAC7C+W,IAAI,EAAE/U,GAAG,CAAC+U,IAAI;QACd9N,IAAI,EAAE3G,UAAU,CAACN,GAAG,CAACiH,IAAI,CAAC;QAC1BuG,IAAI,EAAElN,UAAU,CAACN,GAAG,CAACwN,IAAI,CAAC;QAC1BE,GAAG,EAAEpN,UAAU,CAACN,GAAG,CAAC0N,GAAG,CAAC;QACxBoH,KAAK,EAAExU,UAAU,CAACN,GAAG,CAAC8U,KAAK,CAAC;QAC5BzM,MAAM;QAAE;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACH,GAAG,CAACqI,MAAM,CAAC;QAAA;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,CAAC;MACnC,CAAC;IAAD,CAAE,CAAC;IAAC;IAAAxC,cAAA,GAAAG,CAAA;IAEJc,OAAO,CAACC,GAAG,CAAC,sCAAsCwa,cAAc,CAACpa,MAAM,+BAA+BiF,MAAM,EAAE,CAAC;IAAC;IAAAvG,cAAA,GAAAG,CAAA;IAEhHY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE6Y,cAAc;MACpBnV,MAAM,EAAEA,MAAM;MACdiV,MAAM,EAAEA,MAAM;MACd5B,UAAU,EAAE8B,cAAc,CAACpa,MAAM;MACjCwB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IACnEY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,iCAAiC;MACxC6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtB4E,MAAM,EAAEzF,GAAG,CAACiE,MAAM,CAACuB,MAAM;MACzBzD,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,wBAAwB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACvD,IAAI;IACF,MAAM;MAAEmG;IAAO,CAAC;IAAA;IAAA,CAAAtG,cAAA,GAAAG,CAAA,SAAGW,GAAG,CAACiE,MAAM;IAC7B,MAAM5B,KAAK;IAAA;IAAA,CAAAnD,cAAA,GAAAG,CAAA,SAAG+F,IAAI,CAACwP,GAAG;IAAC;IAAA,CAAA1V,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACxB,GAAG,CAACT,KAAK,CAAC8C,KAAK,CAAC;IAAA;IAAA,CAAAnD,cAAA,GAAAwC,CAAA,WAAI,EAAE,GAAE,EAAE,CAAC,EAAC,CAAC;IAAA;IAAAxC,cAAA,GAAAG,CAAA;IAE7Dc,OAAO,CAACC,GAAG,CAAC,yDAAyDoF,MAAM,YAAYnD,KAAK,EAAE,CAAC;IAE/F,MAAM8V,WAAW;IAAA;IAAA,CAAAjZ,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMiB,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC4Y,WAAW,EAAE,CAAC3S,MAAM,EAAEnD,KAAK,CAAC,CAAC;IAAC;IAAAnD,cAAA,GAAAG,CAAA;IAEzD,IAAIiB,MAAM,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAAA;MAAAtB,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MAC5Bc,OAAO,CAACC,GAAG,CAAC,uCAAuCoF,MAAM,EAAE,CAAC;MAAC;MAAAtG,cAAA,GAAAG,CAAA;MAC7D,OAAOY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdpB,KAAK,EAAE,qBAAqB;QAC5B8E,MAAM,EAAEA,MAAM,CAAChC,WAAW,CAAC,CAAC;QAC5B3C,OAAO,EAAE,0CAA0C;QACnDkB,IAAI,EAAE,EAAE;QACRC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAhD,cAAA,GAAAwC,CAAA;IAAA;;IAED;IACA,MAAM2X,MAAM;IAAA;IAAA,CAAAna,cAAA,GAAAG,CAAA,SAAGiB,MAAM,CAACC,IAAI;IAC1B,MAAMmZ,MAAM;IAAA;IAAA,CAAAxa,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAAC,CAAC,CAAC;IACxB,MAAMM,MAAM;IAAA;IAAA,CAAAza,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAACA,MAAM,CAAC7Y,MAAM,GAAG,CAAC,CAAC;IAExC,MAAM0Y,YAAY;IAAA;IAAA,CAAAha,cAAA,GAAAG,CAAA,SAAGsa,MAAM,CAACxD,KAAK,GAAG,CAAC;IAAA;IAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAClC,CAACgY,MAAM,CAACvD,KAAK,GAAGwD,MAAM,CAACxD,KAAK,IAAIwD,MAAM,CAACxD,KAAK,GAAG,GAAG;IAAA;IAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAI,CAAC;;IAE1D;IACA,MAAMmZ,gBAAgB;IAAA;IAAA,CAAA3b,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAACjY,GAAG,CAAC,CAAC6G,KAAK,EAAE6S,GAAG,KAAK;MAAA;MAAA5b,cAAA,GAAAgB,CAAA;MAClD,IAAIoZ,WAAW;QAAA;QAAA,CAAApa,cAAA,GAAAG,CAAA,SAAG,IAAI;QAAEma,cAAc;QAAA;QAAA,CAAAta,cAAA,GAAAG,CAAA,SAAG,IAAI;MAAC;MAAAH,cAAA,GAAAG,CAAA;MAC9C,IAAIyb,GAAG,GAAGzB,MAAM,CAAC7Y,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAtB,cAAA,GAAAwC,CAAA;QAC3B,MAAMqZ,IAAI;QAAA;QAAA,CAAA7b,cAAA,GAAAG,CAAA,SAAGga,MAAM,CAACyB,GAAG,GAAG,CAAC,CAAC;QAAC;QAAA5b,cAAA,GAAAG,CAAA;QAC7Bia,WAAW,GAAGrR,KAAK,CAACkO,KAAK,GAAG4E,IAAI,CAAC5E,KAAK;QAAC;QAAAjX,cAAA,GAAAG,CAAA;QACvCma,cAAc,GAAGuB,IAAI,CAAC5E,KAAK,KAAK,CAAC;QAAA;QAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAG4X,WAAW,GAAGyB,IAAI,CAAC5E,KAAK;QAAA;QAAA,CAAAjX,cAAA,GAAAwC,CAAA,WAAG,IAAI;MACrE,CAAC;MAAA;MAAA;QAAAxC,cAAA,GAAAwC,CAAA;MAAA;MAAAxC,cAAA,GAAAG,CAAA;MACD,OAAO;QACL+W,IAAI,EAAEnO,KAAK,CAACmO,IAAI;QAChB9N,IAAI,EAAE3G,UAAU,CAACsG,KAAK,CAACK,IAAI,CAAC;QAC5BuG,IAAI,EAAElN,UAAU,CAACsG,KAAK,CAAC4G,IAAI,CAAC;QAC5BE,GAAG,EAAEpN,UAAU,CAACsG,KAAK,CAAC8G,GAAG,CAAC;QAC1BoH,KAAK,EAAExU,UAAU,CAACsG,KAAK,CAACkO,KAAK,CAAC;QAC9BG,QAAQ,EAAE3U,UAAU,CAACsG,KAAK,CAACsO,SAAS,CAAC;QACrC7M,MAAM;QAAE;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACyG,KAAK,CAACyB,MAAM,CAAC;QAAA;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,CAAC;QACnC4X,WAAW;QACXE;MACF,CAAC;IACH,CAAC,CAAC;IAAC;IAAAta,cAAA,GAAAG,CAAA;IAEHc,OAAO,CAACC,GAAG,CAAC,sCAAsCya,gBAAgB,CAACra,MAAM,sBAAsBgF,MAAM,EAAE,CAAC;IAAC;IAAAtG,cAAA,GAAAG,CAAA;IAEzGY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACb0D,MAAM,EAAEA,MAAM,CAAChC,WAAW,CAAC,CAAC;MAC5BsV,UAAU,EAAExY,MAAM,CAACC,IAAI,CAACC,MAAM;MAC9BuB,IAAI,EAAE8Y,gBAAgB;MACtB9B,OAAO,EAAE;QACPC,WAAW,EAAErX,UAAU,CAAC+X,MAAM,CAACvD,KAAK,CAAC;QACrC8C,UAAU,EAAES,MAAM,CAACtD,IAAI;QACvB8C,YAAY,EAAEvX,UAAU,CAACuX,YAAY,CAACiB,OAAO,CAAC,CAAC,CAAC,CAAC;QACjDhB,YAAY;QAAE;QAAA,CAAAja,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACkY,MAAM,CAAChQ,MAAM,CAAC;QAAA;QAAA,CAAAxK,cAAA,GAAAwC,CAAA,WAAI,CAAC;MAC5C,CAAC;MACDM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IACvEY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,qCAAqC;MAC5C6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBkB,IAAI,EAAE,EAAE;MAAE;MACVyD,MAAM,EAAExF,GAAG,CAACiE,MAAM,CAACuB,MAAM;MACzBxD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACjD,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAEhE,MAAMC,YAAY;IAAA;IAAA,CAAAnB,cAAA,GAAAG,CAAA,SAAG;AACzB;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMiB,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAACc,YAAY,CAAC;IAAC;IAAAnB,cAAA,GAAAG,CAAA;IAEzCY,GAAG,CAAC4B,IAAI,CAAC;MACPE,IAAI,EAAEzB,MAAM,CAACC,IAAI,CAACa,GAAG,CAACC,GAAG,IAAK;QAAA;QAAAnC,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAG,CAAA;QAAA;UAC5BqG,IAAI,EAAErE,GAAG,CAACkC,QAAQ;UAClBR,KAAK,EAAE1B,GAAG,CAACkC,QAAQ;UACnBhC,KAAK,EAAEC,QAAQ,CAACH,GAAG,CAACE,KAAK;QAC3B,CAAC;MAAD,CAAE,CAAC;MACH2D,KAAK,EAAE5E,MAAM,CAACC,IAAI,CAACC,MAAM;MACzBwB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IACxDY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBnB,KAAK,EAAE,iCAAiC;MACxC6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBkB,IAAI,EAAE,EAAE;MAAE;MACVC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACphD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACmb,IAAI,CAAC,kBAAkB,EAAE,OAAOhb,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EAClD,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;IAEhD;IACA,MAAM6a,cAAc;IAAA;IAAA,CAAA/b,cAAA,GAAAG,CAAA,SAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,MAAME,KAAK,CAAC0b,cAAc,CAAC;IAAC;IAAA/b,cAAA,GAAAG,CAAA;IAC5Bc,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACA,MAAM8a,cAAc;IAAA;IAAA,CAAAhc,cAAA,GAAAG,CAAA,SAAG;AAC3B;AACA;AACA,KAAK;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,MAAME,KAAK,CAAC2b,cAAc,CAAC;IAAC;IAAAhc,cAAA,GAAAG,CAAA;IAC5Bc,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACA,MAAM+a,UAAU;IAAA;IAAA,CAAAjc,cAAA,GAAAG,CAAA,SAAG;IACjB;IACA,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;IAExE;IACA,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;IAExE;IACA,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACzE,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACzE,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACzE,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACzE,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;IAEzE;IACA,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC;IAExE;IACA,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,EACxE,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CACzE;;IAED;IACA,IAAI+b,aAAa;IAAA;IAAA,CAAAlc,cAAA,GAAAG,CAAA,SAAG,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IACtB,KAAK,MAAMgC,GAAG,IAAI8Z,UAAU,EAAE;MAAA;MAAAjc,cAAA,GAAAG,CAAA;MAC5B,IAAI;QACF,MAAMgc,SAAS;QAAA;QAAA,CAAAnc,cAAA,GAAAG,CAAA,SAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;QAAC;QAAAH,cAAA,GAAAG,CAAA;QAEF,MAAME,KAAK,CAAC8b,SAAS,EAAEha,GAAG,CAAC;QAAC;QAAAnC,cAAA,GAAAG,CAAA;QAC5B+b,aAAa,EAAE;MACjB,CAAC,CAAC,OAAOE,WAAW,EAAE;QAAA;QAAApc,cAAA,GAAAG,CAAA;QACpBc,OAAO,CAACob,IAAI,CAAC,4BAA4Bla,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,GAAG,EAAEia,WAAW,CAACza,OAAO,CAAC;MACpF;IACF;IAAC;IAAA3B,cAAA,GAAAG,CAAA;IAEDc,OAAO,CAACC,GAAG,CAAC,yBAAyBgb,aAAa,OAAO,CAAC;;IAE1D;IACA,MAAM1W,WAAW;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC,2CAA2C,CAAC;IAC5E,MAAMic,SAAS;IAAA;IAAA,CAAAtc,cAAA,GAAAG,CAAA,SAAGqF,WAAW,CAACnE,IAAI,CAAC,CAAC,CAAC,CAACgB,KAAK;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAE5CY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbjB,OAAO,EAAE,4CAA4C;MACrD0T,OAAO,EAAE;QACPkH,YAAY,EAAE,IAAI;QAClBC,YAAY,EAAE,IAAI;QAClBC,kBAAkB,EAAEP,aAAa;QACjCI,SAAS,EAAEha,QAAQ,CAACga,SAAS;MAC/B,CAAC;MACDxZ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAC9DY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,wCAAwC;MAC/C6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAIF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EAC9C,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;IAE3C;IACA,MAAMwb,UAAU;IAAA;IAAA,CAAA1c,cAAA,GAAAG,CAAA,SAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAIiB,MAAM;IAAC;IAAApB,cAAA,GAAAG,CAAA;IACX,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACFiB,MAAM,GAAG,MAAMf,KAAK,CAACqc,UAAU,CAAC;MAAC;MAAA1c,cAAA,GAAAG,CAAA;MACjCc,OAAO,CAACC,GAAG,CAAC,oCAAoCE,MAAM,CAACC,IAAI,CAACC,MAAM,cAAc,CAAC;IACnF,CAAC,CAAC,OAAOC,OAAO,EAAE;MAAA;MAAAvB,cAAA,GAAAG,CAAA;MAChBc,OAAO,CAACO,KAAK,CAAC,8DAA8D,EAAE;QAC5EC,UAAU,EAAE,cAAc;QAC1BC,aAAa,EAAEH,OAAO,CAACI,OAAO;QAC9BC,oBAAoB,EAAE;UACpBC,oBAAoB,EAAE,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;UACxEC,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,6BAA6B,EAC7B,yBAAyB,EACzB,uCAAuC,EACvC,mCAAmC,EACnC,6BAA6B,EAC7B,eAAe,CAChB;UACDC,qBAAqB,EAAE,CACrB,qCAAqC,EACrC,mCAAmC,EACnC,iCAAiC,EACjC,iCAAiC,EACjC,6BAA6B,EAC7B,wCAAwC,EACxC,4BAA4B,CAC7B;UACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,wBAAwB,EACxB,8BAA8B;QAElC;MACF,CAAC,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MACH,MAAMoB,OAAO,CAAC,CAAC;IACjB;IAAC;IAAAvB,cAAA,GAAAG,CAAA;IAED;IAAI;IAAA,CAAAH,cAAA,GAAAwC,CAAA,WAAApB,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAwC,CAAA,WAAIpB,MAAM,CAACC,IAAI,CAACC,MAAM,GAAG,CAAC,GAAE;MAAA;MAAAtB,cAAA,GAAAwC,CAAA;MACpC,MAAMma,KAAK;MAAA;MAAA,CAAA3c,cAAA,GAAAG,CAAA,SAAGiB,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;MAAC;MAAArB,cAAA,GAAAG,CAAA;MAE7BY,GAAG,CAAC4B,IAAI,CAAC;QACPC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;UACJ+Z,YAAY;UAAE;UAAA,CAAA5c,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACqa,KAAK,CAACC,YAAY,CAAC;UAAA;UAAA,CAAA5c,cAAA,GAAAwC,CAAA,WAAI,IAAI;UAClDqa,MAAM,EAAE;YACNjS,UAAU,EAAE;cACV8K,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACqa,KAAK,CAACG,cAAc,CAAC;cAAA;cAAA,CAAA9c,cAAA,GAAAwC,CAAA,WAAI,QAAQ;cAC/CmT,GAAG;cAAE;cAAA,CAAA3V,cAAA,GAAAwC,CAAA,WAAAF,QAAQ,CAACqa,KAAK,CAACI,cAAc,CAAC;cAAA;cAAA,CAAA/c,cAAA,GAAAwC,CAAA,WAAI,aAAa;YACtD,CAAC;YACDwa,QAAQ,EAAE;cACRtH,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,WAAAC,UAAU,CAACka,KAAK,CAACM,YAAY,CAAC;cAAA;cAAA,CAAAjd,cAAA,GAAAwC,CAAA,WAAI,CAAC;cACxCmT,GAAG,EAAEzP,IAAI,CAACwP,GAAG;cAAC;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACO,YAAY,CAAC;cAAA;cAAA,CAAAld,cAAA,GAAAwC,CAAA,YAAI,GAAG,GAAE,GAAG;YAC1D,CAAC;YACD6I,aAAa,EAAE;cACbqK,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACQ,YAAY,CAAC;cAAA;cAAA,CAAAnd,cAAA,GAAAwC,CAAA,YAAI,GAAG;cAC1CmT,GAAG,EAAEzP,IAAI,CAACwP,GAAG;cAAC;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACS,YAAY,CAAC;cAAA;cAAA,CAAApd,cAAA,GAAAwC,CAAA,YAAI,EAAE,GAAE,EAAE;YACxD,CAAC;YACD6a,GAAG,EAAE;cACH3H,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACW,OAAO,CAAC;cAAA;cAAA,CAAAtd,cAAA,GAAAwC,CAAA,YAAI,CAAC,EAAE;cACrCmT,GAAG,EAAEzP,IAAI,CAACwP,GAAG;cAAC;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACY,OAAO,CAAC;cAAA;cAAA,CAAAvd,cAAA,GAAAwC,CAAA,YAAI,GAAG,GAAE,GAAG;YACrD,CAAC;YACDgb,cAAc,EAAE;cACd9H,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACc,kBAAkB,CAAC;cAAA;cAAA,CAAAzd,cAAA,GAAAwC,CAAA,YAAI,CAAC,EAAE;cAChDmT,GAAG,EAAEzP,IAAI,CAACwP,GAAG;cAAC;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACe,kBAAkB,CAAC;cAAA;cAAA,CAAA1d,cAAA,GAAAwC,CAAA,YAAI,GAAG,GAAE,GAAG;YAChE,CAAC;YACDmb,cAAc,EAAE;cACdjI,GAAG;cAAE;cAAA,CAAA1V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACiB,kBAAkB,CAAC;cAAA;cAAA,CAAA5d,cAAA,GAAAwC,CAAA,YAAI,CAAC;cAC9CmT,GAAG;cAAE;cAAA,CAAA3V,cAAA,GAAAwC,CAAA,YAAAC,UAAU,CAACka,KAAK,CAACkB,kBAAkB,CAAC;cAAA;cAAA,CAAA7d,cAAA,GAAAwC,CAAA,YAAI,CAAC;YAChD;UACF;QACF,CAAC;QACDM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MAAAhD,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAG,CAAA;MACL;MACAc,OAAO,CAACO,KAAK,CAAC,6EAA6E,EAAE;QAC3FA,KAAK,EAAEA,KAAK,CAACG,OAAO;QACpBC,oBAAoB,EAAE;UACpB+X,eAAe,EAAE,2BAA2B;UAC5C7X,gBAAgB,EAAE,CAChB,6BAA6B,EAC7B,oDAAoD,EACpD,4BAA4B,EAC5B,mCAAmC,EACnC,yBAAyB,CAC1B;UACDC,qBAAqB,EAAE,CACrB,6BAA6B,EAC7B,kCAAkC,EAClC,oCAAoC,EACpC,qCAAqC,EACrC,yBAAyB,CAC1B;UACDC,aAAa,EAAE,CACb,wBAAwB,EACxB,4BAA4B,EAC5B,mBAAmB,EACnB,2BAA2B;QAE/B;MACF,CAAC,CAAC;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MAEH,OAAOY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdpB,KAAK,EAAE,iCAAiC;QACxCG,OAAO,EAAE,+DAA+D;QACxEmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCqT,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EAEF,CAAC,CAAC,OAAO7U,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IACxDY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,wCAAwC;MAC/C6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AAAA;AAAAhD,cAAA,GAAAG,CAAA;AACAQ,MAAM,CAACmb,IAAI,CAAC,sBAAsB,EAAE,OAAOhb,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAf,cAAA,GAAAgB,CAAA;EAAAhB,cAAA,GAAAG,CAAA;EACtD,IAAI;IAAA;IAAAH,cAAA,GAAAG,CAAA;IACFc,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;;IAElD;IACA,MAAM6a,cAAc;IAAA;IAAA,CAAA/b,cAAA,GAAAG,CAAA,SAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,MAAME,KAAK,CAAC0b,cAAc,CAAC;IAAC;IAAA/b,cAAA,GAAAG,CAAA;IAC5Bc,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAM4c,aAAa;IAAA;IAAA,CAAA9d,cAAA,GAAAG,CAAA,SAAG,CACpB,gFAAgF,EAChF,mFAAmF,EACnF,yFAAyF,CAC1F;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEF,KAAK,MAAM4d,QAAQ,IAAID,aAAa,EAAE;MAAA;MAAA9d,cAAA,GAAAG,CAAA;MACpC,MAAME,KAAK,CAAC0d,QAAQ,CAAC;IACvB;IAAC;IAAA/d,cAAA,GAAAG,CAAA;IAEDc,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;;IAEzD;IACA,MAAM8c,WAAW;IAAA;IAAA,CAAAhe,cAAA,GAAAG,CAAA,SAAG;AACxB;AACA;AACA;AACA;AACA,KAAK;IAED,MAAM8d,OAAO;IAAA;IAAA,CAAAje,cAAA,GAAAG,CAAA,SAAG,MAAME,KAAK,CAAC2d,WAAW,CAAC;IAAC;IAAAhe,cAAA,GAAAG,CAAA;IAEzCY,GAAG,CAAC4B,IAAI,CAAC;MACPC,OAAO,EAAE,IAAI;MACbjB,OAAO,EAAE,8CAA8C;MACvD0T,OAAO,EAAE;QACPkH,YAAY,EAAE,IAAI;QAClB2B,cAAc,EAAE,IAAI;QACpBD,OAAO,EAAEA,OAAO,CAAC5c,IAAI,CAACa,GAAG,CAACic,GAAG,IAAK;UAAA;UAAAne,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAG,CAAA;UAAA;YAChCqG,IAAI,EAAE2X,GAAG,CAACC,WAAW;YACrBza,IAAI,EAAEwa,GAAG,CAACE,SAAS;YACnBC,QAAQ,EAAEH,GAAG,CAACI,WAAW,KAAK;UAChC,CAAC;QAAD,CAAE;MACJ,CAAC;MACDC,QAAQ,EAAE;QACRC,UAAU,EAAE,aAAa;QACzBC,aAAa,EAAE,QAAQ;QACvBC,aAAa,EAAE,IAAI;QACnBC,kBAAkB,EAAE;MACtB,CAAC;MACD9b,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EAEJ,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAAxB,cAAA,GAAAG,CAAA;IACdc,OAAO,CAACO,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAAC;IAAAxB,cAAA,GAAAG,CAAA;IAChEY,GAAG,CAACuC,MAAM,CAAC,GAAG,CAAC,CAACX,IAAI,CAAC;MACnBC,OAAO,EAAE,KAAK;MACdpB,KAAK,EAAE,qCAAqC;MAC5C6T,OAAO,EAAE7T,KAAK,CAACG,OAAO;MACtBmB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAAC;AAAAhD,cAAA,GAAAG,CAAA;AAEH0e,MAAM,CAACC,OAAO,GAAGne,MAAM","ignoreList":[]}