{"version":3,"names":["cov_tf3i30wl1","actualCoverage","rateLimit","s","require","slowDown","helmet","validator","crypto","path","purify","DOMPurify","JSDOM","window","error","console","warn","sanitize","html","f","escape","logSecurityEvent","type","details","containsMaliciousPatterns","input","patterns","some","pattern","test","detectMaliciousPatterns","detectedPatterns","Object","entries","forEach","typePatterns","b","push","sanitizers","string","value","options","sanitized","trim","replace","substring","timestamp","Date","toISOString","Error","allowHTML","ALLOWED_TAGS","allowedTags","ALLOWED_ATTR","allowedAttributes","FORBID_SCRIPTS","FORBID_TAGS","STRIP_COMMENTS","escapeHTML","alphaNumOnly","financialDataOnly","maxLength","slice","email","normalizeEmail","number","num","parseFloat","isNaN","defaultValue","min","undefined","max","integer","parseInt","symbol","toUpperCase","length","fileName","url","URL","allowedProtocols","includes","protocol","blockedDomains","domain","hostname","toString","message","boolean","toLowerCase","Boolean","rateLimitConfigs","auth","windowMs","retryAfter","securityEvent","standardHeaders","legacyHeaders","skip","req","process","env","NODE_ENV","handler","res","ip","userAgent","get","status","json","success","securityNotice","api","trading","heavy","advancedInjectionPrevention","next","checkForInjection","fieldPath","safe","injectionChecks","sql","severity","nosql","xss","command","ldap","xml","check","matches","filter","field","sample","checkObject","obj","key","currentPath","result","Array","isArray","i","nestedResult","sources","data","query","name","body","params","headers","source","suspiciousInput","code","csrfProtection","tokenStore","Map","tokenExpiry","generateToken","sessionId","sessionID","token","randomBytes","now","set","used","delete","csrfToken","validateToken","method","_csrfToken","tokenData","tokenProvided","tokenExists","tokenUsed","sessionMatch","fileUploadSecurity","allowedMimeTypes","maxFileSize","allowedExtensions","files","keys","fieldName","file","size","maxSize","mimetype","mimeType","allowedTypes","fileExtension","extname","extension","safeName","requestSizeLimit","limit","contentLength","maxRequests","maxRequestsPerMinute","clientIP","connection","remoteAddress","sizeInBytes","limitInBytes","percentage","module","exports"],"sources":["enhancedValidation.js"],"sourcesContent":["/**\n * Enhanced Input Validation and Sanitization Middleware\n * Provides comprehensive input validation and security protection for API endpoints\n * \n * Features:\n * - Advanced XSS protection with HTML/JavaScript sanitization\n * - SQL injection prevention with pattern detection\n * - CSRF protection with token validation\n * - File upload security validation\n * - Advanced rate limiting with user-tier support\n * - NoSQL injection protection\n * - Command injection detection\n * - Data leakage prevention\n */\n\nconst rateLimit = require('express-rate-limit');\nconst slowDown = require('express-slow-down');\nconst helmet = require('helmet');\nconst validator = require('validator');\nconst crypto = require('crypto');\nconst path = require('path');\n\n// Initialize DOMPurify for server-side HTML sanitization (fallback without JSDOM for Lambda)\nlet purify = null;\ntry {\n    const DOMPurify = require('dompurify');\n    const { JSDOM } = require('jsdom');\n    const window = new JSDOM('').window;\n    purify = DOMPurify(window);\n} catch (error) {\n    console.warn('DOMPurify not available, using basic HTML escaping');\n    purify = {\n        sanitize: (html) => validator.escape(html)\n    };\n}\n\n/**\n * Enhanced security event logging\n */\nfunction logSecurityEvent(type, details) {\n    console.warn(`[SECURITY EVENT] ${type}:`, details);\n    // In production, this would integrate with security monitoring systems\n    // like AWS CloudWatch, Splunk, or dedicated SIEM solutions\n}\n\n/**\n * Advanced malicious pattern detection\n */\nfunction containsMaliciousPatterns(input) {\n    const patterns = [\n        // XSS patterns\n        /<script[^>]*>.*?<\\/script>/gi,\n        /javascript:/gi,\n        /on\\w+\\s*=/gi,\n        /vbscript:/gi,\n        /data:text\\/html/gi,\n        \n        // SQL injection patterns\n        /(union\\s+select|select\\s+.*\\s+from|insert\\s+into|update\\s+.*\\s+set|delete\\s+from)/gi,\n        /(drop\\s+table|alter\\s+table|create\\s+table)/gi,\n        /(exec\\s*\\(|execute\\s*\\(|sp_|xp_)/gi,\n        /('\\s*(or|and)\\s*'|'\\s*(or|and)\\s*\\d)/gi,\n        \n        // NoSQL injection patterns\n        /(\\$where|\\$regex|\\$ne|\\$gt|\\$lt|\\$gte|\\$lte|\\$in|\\$nin)/gi,\n        \n        // Command injection patterns\n        /(;\\s*(cat|ls|pwd|whoami|id|uname)|\\|\\s*(cat|ls|pwd|whoami|id|uname))/gi,\n        /(&&\\s*(cat|ls|pwd|whoami|id|uname)|\\|\\|\\s*(cat|ls|pwd|whoami|id|uname))/gi,\n        \n        // Path traversal patterns\n        /(\\.\\.\\/|\\.\\.\\\\|%2e%2e%2f|%2e%2e%5c)/gi,\n        \n        // Protocol smuggling\n        /(file:\\/\\/|ftp:\\/\\/|gopher:\\/\\/|ldap:\\/\\/)/gi\n    ];\n    \n    return patterns.some(pattern => pattern.test(input));\n}\n\nfunction detectMaliciousPatterns(input) {\n    const detectedPatterns = [];\n    const patterns = {\n        'XSS': [/<script[^>]*>.*?<\\/script>/gi, /javascript:/gi, /on\\w+\\s*=/gi],\n        'SQL_INJECTION': [/(union\\s+select|select\\s+.*\\s+from)/gi, /(drop\\s+table|alter\\s+table)/gi],\n        'NOSQL_INJECTION': [/(\\$where|\\$regex|\\$ne)/gi],\n        'COMMAND_INJECTION': [/(;\\s*(cat|ls|pwd)|\\|\\s*(cat|ls|pwd))/gi],\n        'PATH_TRAVERSAL': [/(\\.\\.\\/|\\.\\.\\\\)/gi]\n    };\n    \n    Object.entries(patterns).forEach(([type, typePatterns]) => {\n        if (typePatterns.some(pattern => pattern.test(input))) {\n            detectedPatterns.push(type);\n        }\n    });\n    \n    return detectedPatterns;\n}\n\n/**\n * Enhanced input sanitization functions with comprehensive security checks\n */\nconst sanitizers = {\n    // Enhanced string sanitization with XSS and injection protection\n    string: (value, options = {}) => {\n        if (typeof value !== 'string') return '';\n        \n        let sanitized = value.trim();\n        \n        // Remove null bytes and control characters\n        sanitized = sanitized.replace(/[\\0\\x00-\\x1f\\x7f-\\x9f]/g, '');\n        \n        // Detect and prevent various injection attempts\n        if (containsMaliciousPatterns(sanitized)) {\n            logSecurityEvent('MALICIOUS_INPUT_DETECTED', {\n                input: sanitized.substring(0, 100),\n                patterns: detectMaliciousPatterns(sanitized),\n                timestamp: new Date().toISOString()\n            });\n            throw new Error('Potentially malicious input detected');\n        }\n        \n        // Advanced HTML sanitization\n        if (options.allowHTML) {\n            sanitized = purify.sanitize(sanitized, {\n                ALLOWED_TAGS: options.allowedTags || ['b', 'i', 'em', 'strong'],\n                ALLOWED_ATTR: options.allowedAttributes || [],\n                FORBID_SCRIPTS: true,\n                FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input'],\n                STRIP_COMMENTS: true\n            });\n        } else if (options.escapeHTML) {\n            sanitized = validator.escape(sanitized);\n        }\n        \n        // Enhanced character filtering\n        if (options.alphaNumOnly) {\n            sanitized = sanitized.replace(/[^a-zA-Z0-9\\s]/g, '');\n        } else if (options.financialDataOnly) {\n            // Allow financial symbols and decimal numbers\n            sanitized = sanitized.replace(/[^a-zA-Z0-9\\.\\-\\s]/g, '');\n        }\n        \n        // Advanced length and content validation\n        if (options.maxLength) {\n            sanitized = sanitized.slice(0, options.maxLength);\n        }\n        \n        // Normalize whitespace\n        sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n        \n        return sanitized;\n    },\n\n    // Sanitize email input\n    email: (value) => {\n        if (!value || typeof value !== 'string') return '';\n        return validator.normalizeEmail(value.trim()) || '';\n    },\n\n    // Sanitize numeric input\n    number: (value, options = {}) => {\n        const num = parseFloat(value);\n        if (isNaN(num)) return options.defaultValue || 0;\n        \n        if (options.min !== undefined && num < options.min) return options.min;\n        if (options.max !== undefined && num > options.max) return options.max;\n        \n        return num;\n    },\n\n    // Sanitize integer input\n    integer: (value, options = {}) => {\n        const num = parseInt(value);\n        if (isNaN(num)) return options.defaultValue || 0;\n        \n        if (options.min !== undefined && num < options.min) return options.min;\n        if (options.max !== undefined && num > options.max) return options.max;\n        \n        return num;\n    },\n\n    // Enhanced stock symbol sanitization with validation\n    symbol: (value) => {\n        if (!value || typeof value !== 'string') return '';\n        let sanitized = value.trim().toUpperCase().replace(/[^A-Z0-9]/g, '').slice(0, 10);\n        \n        // Validate against known stock symbol patterns\n        if (sanitized.length < 1 || sanitized.length > 10) {\n            throw new Error('Invalid stock symbol length');\n        }\n        \n        // Check for suspicious patterns that might indicate injection attempts\n        if (/^(SELECT|INSERT|UPDATE|DELETE|DROP|UNION|SCRIPT)/i.test(sanitized)) {\n            logSecurityEvent('SUSPICIOUS_SYMBOL_INPUT', {\n                input: sanitized,\n                timestamp: new Date().toISOString()\n            });\n            throw new Error('Invalid stock symbol format');\n        }\n        \n        return sanitized;\n    },\n    \n    // Enhanced file name sanitization\n    fileName: (value) => {\n        if (!value || typeof value !== 'string') return '';\n        let sanitized = value.trim();\n        \n        // Remove path traversal attempts\n        sanitized = sanitized.replace(/\\.\\.\\//g, '').replace(/\\.\\.\\\\/g, '');\n        \n        // Remove dangerous characters\n        sanitized = sanitized.replace(/[<>:\"|?*\\x00-\\x1f]/g, '');\n        \n        // Limit to safe characters for file names\n        sanitized = sanitized.replace(/[^a-zA-Z0-9._-]/g, '_');\n        \n        return sanitized.slice(0, 255); // Limit file name length\n    },\n    \n    // Enhanced URL sanitization\n    url: (value, options = {}) => {\n        if (!value || typeof value !== 'string') return '';\n        \n        try {\n            const url = new URL(value);\n            \n            // Check against allowed protocols\n            const allowedProtocols = options.allowedProtocols || ['http:', 'https:'];\n            if (!allowedProtocols.includes(url.protocol)) {\n                throw new Error('Protocol not allowed');\n            }\n            \n            // Check against blocked domains\n            const blockedDomains = options.blockedDomains || [];\n            if (blockedDomains.some(domain => url.hostname.includes(domain))) {\n                throw new Error('Domain not allowed');\n            }\n            \n            return url.toString();\n        } catch (error) {\n            logSecurityEvent('INVALID_URL_INPUT', {\n                input: value.substring(0, 100),\n                error: error.message,\n                timestamp: new Date().toISOString()\n            });\n            throw new Error('Invalid URL format');\n        }\n    },\n\n    // Sanitize boolean input\n    boolean: (value) => {\n        if (typeof value === 'boolean') return value;\n        if (typeof value === 'string') {\n            return ['true', '1', 'yes', 'on'].includes(value.toLowerCase());\n        }\n        return Boolean(value);\n    }\n};\n\n/**\n * Enhanced rate limiting configurations with user-tier support\n */\nconst rateLimitConfigs = {\n    // Strict rate limiting for authentication endpoints\n    auth: rateLimit({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 5, // 5 attempts per window\n        message: {\n            error: 'Too many authentication attempts, please try again later',\n            retryAfter: 15 * 60, // 15 minutes in seconds\n            securityEvent: 'EXCESSIVE_AUTH_ATTEMPTS'\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            // Skip rate limiting in development mode\n            return process.env.NODE_ENV === 'development';\n        },\n        handler: (req, res) => {\n            // Log security event\n            logSecurityEvent('EXCESSIVE_AUTH_ATTEMPTS', {\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                timestamp: new Date().toISOString()\n            });\n            res.status(429).json({\n                success: false,\n                error: 'Too many authentication attempts',\n                message: 'Your IP has been temporarily blocked due to excessive failed login attempts',\n                retryAfter: 15 * 60,\n                securityNotice: 'This incident has been logged for security monitoring'\n            });\n        }\n    }),\n\n    // Moderate rate limiting for API endpoints\n    api: rateLimit({\n        windowMs: 60 * 1000, // 1 minute\n        max: 100, // 100 requests per minute\n        message: {\n            error: 'Too many API requests, please slow down',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    // Lenient rate limiting for trading endpoints (higher frequency needed)\n    trading: rateLimit({\n        windowMs: 60 * 1000, // 1 minute\n        max: 200, // 200 requests per minute\n        message: {\n            error: 'Trading API rate limit exceeded',\n            retryAfter: 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        skip: (req) => {\n            return process.env.NODE_ENV === 'development';\n        }\n    }),\n\n    // Very strict rate limiting for resource-intensive endpoints\n    heavy: rateLimit({\n        windowMs: 5 * 60 * 1000, // 5 minutes\n        max: 10, // 10 requests per 5 minutes\n        message: {\n            error: 'Rate limit exceeded for resource-intensive operation',\n            retryAfter: 5 * 60\n        },\n        standardHeaders: true,\n        legacyHeaders: false\n    })\n};\n\n/**\n * Advanced injection prevention middleware with comprehensive protection\n */\nconst advancedInjectionPrevention = (req, res, next) => {\n    const checkForInjection = (value, fieldPath = '') => {\n        if (typeof value !== 'string') return { safe: true };\n        \n        // Enhanced injection patterns with specific detection\n        const injectionChecks = {\n            sql: {\n                patterns: [\n                    /(\\s|^)(select|insert|update|delete|drop|create|alter|exec|execute|sp_|xp_)/i,\n                    /(union\\s+select|or\\s+1\\s*=\\s*1|and\\s+1\\s*=\\s*1)/i,\n                    /('|\";|--(\\/\\*|\\*\\/))/,\n                    /(waitfor\\s+delay|benchmark\\s*\\(|sleep\\s*\\()/i\n                ],\n                severity: 'HIGH'\n            },\n            nosql: {\n                patterns: [\n                    /(\\$where|\\$regex|\\$ne|\\$gt|\\$lt|\\$gte|\\$lte|\\$in|\\$nin|\\$or|\\$and)/i,\n                    /(this\\.|constructor|prototype)/i\n                ],\n                severity: 'HIGH'\n            },\n            xss: {\n                patterns: [\n                    /<script[^>]*>.*?<\\/script>/gi,\n                    /(javascript:|vbscript:|data:text\\/html)/i,\n                    /(on\\w+\\s*=|style\\s*=.*expression)/i,\n                    /(<iframe|<object|<embed|<form)/i\n                ],\n                severity: 'HIGH'\n            },\n            command: {\n                patterns: [\n                    /(;\\s*(cat|ls|pwd|whoami|id|uname|rm|mv|cp)|\\|\\s*(cat|ls|pwd|whoami|id|uname|rm|mv|cp))/i,\n                    /(&&\\s*(cat|ls|pwd|whoami|id|uname|rm|mv|cp)|\\|\\|\\s*(cat|ls|pwd|whoami|id|uname|rm|mv|cp))/i,\n                    /(`|\\$\\(|\\$\\{)/\n                ],\n                severity: 'CRITICAL'\n            },\n            ldap: {\n                patterns: [\n                    /(\\*\\)|\\(\\|\\(|\\)\\(|\\(\\&\\()/,\n                    /(objectClass=|cn=|uid=|ou=)/i\n                ],\n                severity: 'MEDIUM'\n            },\n            xml: {\n                patterns: [\n                    /(<\\?xml|<!\\[CDATA\\[|<!DOCTYPE)/i,\n                    /(&lt;|&gt;|&quot;|&#)/\n                ],\n                severity: 'MEDIUM'\n            }\n        };\n        \n        for (const [type, check] of Object.entries(injectionChecks)) {\n            const matches = check.patterns.filter(pattern => pattern.test(value));\n            if (matches.length > 0) {\n                return {\n                    safe: false,\n                    type,\n                    severity: check.severity,\n                    field: fieldPath,\n                    matches: matches.length,\n                    sample: value.substring(0, 100)\n                };\n            }\n        }\n        \n        return { safe: true };\n    };\n\n    const checkObject = (obj, path = '') => {\n        for (const [key, value] of Object.entries(obj)) {\n            const currentPath = path ? `${path}.${key}` : key;\n            \n            if (typeof value === 'string') {\n                const result = checkForInjection(value, currentPath);\n                if (!result.safe) {\n                    return result;\n                }\n            } else if (Array.isArray(value)) {\n                for (let i = 0; i < value.length; i++) {\n                    if (typeof value[i] === 'string') {\n                        const result = checkForInjection(value[i], `${currentPath}[${i}]`);\n                        if (!result.safe) {\n                            return result;\n                        }\n                    } else if (typeof value[i] === 'object' && value[i] !== null) {\n                        const nestedResult = checkObject(value[i], `${currentPath}[${i}]`);\n                        if (nestedResult && !nestedResult.safe) {\n                            return nestedResult;\n                        }\n                    }\n                }\n            } else if (typeof value === 'object' && value !== null) {\n                const nestedResult = checkObject(value, currentPath);\n                if (nestedResult && !nestedResult.safe) {\n                    return nestedResult;\n                }\n            }\n        }\n        return null;\n    };\n\n    // Check all input sources\n    const sources = [\n        { data: req.query, name: 'query' },\n        { data: req.body, name: 'body' },\n        { data: req.params, name: 'params' },\n        { data: req.headers, name: 'headers' }\n    ].filter(source => source.data && typeof source.data === 'object');\n    \n    for (const source of sources) {\n        const suspiciousInput = checkObject(source.data, source.name);\n        if (suspiciousInput) {\n            // Log detailed security event\n            logSecurityEvent('INJECTION_ATTEMPT_DETECTED', {\n                type: suspiciousInput.type,\n                severity: suspiciousInput.severity,\n                field: suspiciousInput.field,\n                source: source.name,\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                sample: suspiciousInput.sample,\n                matches: suspiciousInput.matches,\n                timestamp: new Date().toISOString()\n            });\n            \n            // Block the request with detailed error for high severity\n            if (suspiciousInput.severity === 'CRITICAL' || suspiciousInput.severity === 'HIGH') {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Security violation detected',\n                    message: `Potentially malicious ${suspiciousInput.type.toUpperCase()} injection detected in ${suspiciousInput.field}`,\n                    code: 'INJECTION_DETECTED',\n                    severity: suspiciousInput.severity,\n                    field: suspiciousInput.field,\n                    securityNotice: 'This incident has been logged and monitored'\n                });\n            }\n        }\n    }\n\n    next();\n};\n\n/**\n * CSRF protection middleware with enhanced token management\n */\nconst csrfProtection = (options = {}) => {\n    const tokenStore = new Map(); // In production, use Redis or database\n    const tokenExpiry = options.tokenExpiry || 3600000; // 1 hour\n    \n    return {\n        generateToken: (req, res, next) => {\n            const sessionId = req.sessionID || req.headers['x-session-id'] || 'anonymous';\n            const token = crypto.randomBytes(32).toString('hex');\n            const timestamp = Date.now();\n            \n            tokenStore.set(token, {\n                sessionId,\n                timestamp,\n                used: false,\n                ip: req.ip\n            });\n            \n            // Clean expired tokens\n            for (const [key, value] of tokenStore.entries()) {\n                if (timestamp - value.timestamp > tokenExpiry) {\n                    tokenStore.delete(key);\n                }\n            }\n            \n            req.csrfToken = token;\n            res.set('X-CSRF-Token', token);\n            next();\n        },\n        \n        validateToken: (req, res, next) => {\n            if (req.method === 'GET' || req.method === 'HEAD' || req.method === 'OPTIONS') {\n                return next();\n            }\n            \n            const token = req.headers['x-csrf-token'] || req.body._csrfToken;\n            const sessionId = req.sessionID || req.headers['x-session-id'] || 'anonymous';\n            \n            if (!token) {\n                logSecurityEvent('MISSING_CSRF_TOKEN', {\n                    ip: req.ip,\n                    method: req.method,\n                    path: req.path,\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(403).json({\n                    success: false,\n                    error: 'CSRF token required',\n                    message: 'Cross-site request forgery protection requires a valid token',\n                    code: 'CSRF_TOKEN_MISSING'\n                });\n            }\n            \n            const tokenData = tokenStore.get(token);\n            if (!tokenData || tokenData.used || tokenData.sessionId !== sessionId) {\n                logSecurityEvent('INVALID_CSRF_TOKEN', {\n                    ip: req.ip,\n                    sessionId,\n                    tokenProvided: !!token,\n                    tokenExists: !!tokenData,\n                    tokenUsed: tokenData?.used,\n                    sessionMatch: tokenData?.sessionId === sessionId,\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(403).json({\n                    success: false,\n                    error: 'Invalid CSRF token',\n                    message: 'The provided CSRF token is invalid or has been used',\n                    code: 'CSRF_TOKEN_INVALID'\n                });\n            }\n            \n            // Check token expiry\n            if (Date.now() - tokenData.timestamp > tokenExpiry) {\n                tokenStore.delete(token);\n                \n                return res.status(403).json({\n                    success: false,\n                    error: 'CSRF token expired',\n                    message: 'The CSRF token has expired, please refresh and try again',\n                    code: 'CSRF_TOKEN_EXPIRED'\n                });\n            }\n            \n            // Mark token as used (one-time use)\n            tokenData.used = true;\n            next();\n        }\n    };\n};\n\n/**\n * File upload security validation\n */\nconst fileUploadSecurity = (options = {}) => {\n    const allowedMimeTypes = options.allowedMimeTypes || [\n        'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n        'application/pdf', 'text/csv', 'application/json'\n    ];\n    const maxFileSize = options.maxFileSize || 10 * 1024 * 1024; // 10MB\n    const allowedExtensions = options.allowedExtensions || ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.csv', '.json'];\n    \n    return (req, res, next) => {\n        if (!req.files || Object.keys(req.files).length === 0) {\n            return next();\n        }\n        \n        for (const [fieldName, file] of Object.entries(req.files)) {\n            // Check file size\n            if (file.size > maxFileSize) {\n                logSecurityEvent('OVERSIZED_FILE_UPLOAD', {\n                    fileName: file.name,\n                    size: file.size,\n                    maxSize: maxFileSize,\n                    ip: req.ip,\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(413).json({\n                    success: false,\n                    error: 'File too large',\n                    message: `File ${file.name} exceeds maximum size of ${maxFileSize} bytes`,\n                    field: fieldName\n                });\n            }\n            \n            // Check MIME type\n            if (!allowedMimeTypes.includes(file.mimetype)) {\n                logSecurityEvent('INVALID_FILE_TYPE', {\n                    fileName: file.name,\n                    mimeType: file.mimetype,\n                    allowedTypes: allowedMimeTypes,\n                    ip: req.ip,\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid file type',\n                    message: `File type ${file.mimetype} not allowed`,\n                    allowedTypes: allowedMimeTypes,\n                    field: fieldName\n                });\n            }\n            \n            // Check file extension\n            const fileExtension = path.extname(file.name).toLowerCase();\n            if (!allowedExtensions.includes(fileExtension)) {\n                logSecurityEvent('INVALID_FILE_EXTENSION', {\n                    fileName: file.name,\n                    extension: fileExtension,\n                    allowedExtensions,\n                    ip: req.ip,\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(400).json({\n                    success: false,\n                    error: 'Invalid file extension',\n                    message: `File extension ${fileExtension} not allowed`,\n                    allowedExtensions,\n                    field: fieldName\n                });\n            }\n            \n            // Sanitize filename\n            file.safeName = sanitizers.fileName(file.name);\n        }\n        \n        next();\n    };\n};\n\n/**\n * Enhanced request size limiting with security monitoring\n */\nconst requestSizeLimit = (limit = '1mb', options = {}) => {\n    return (req, res, next) => {\n        const contentLength = req.get('content-length');\n        const maxRequests = options.maxRequestsPerMinute || 60;\n        \n        // Track request sizes per IP for anomaly detection\n        const clientIP = req.ip || req.connection.remoteAddress;\n        \n        if (contentLength) {\n            const sizeInBytes = parseInt(contentLength);\n            const limitInBytes = limit.includes('mb') ? \n                parseInt(limit) * 1024 * 1024 : \n                parseInt(limit);\n            \n            if (sizeInBytes > limitInBytes) {\n                logSecurityEvent('OVERSIZED_REQUEST', {\n                    ip: clientIP,\n                    size: sizeInBytes,\n                    limit: limitInBytes,\n                    userAgent: req.get('User-Agent'),\n                    timestamp: new Date().toISOString()\n                });\n                \n                return res.status(413).json({\n                    success: false,\n                    error: 'Request too large',\n                    message: `Request size ${sizeInBytes} bytes exceeds limit of ${limitInBytes} bytes`,\n                    maxSize: limit,\n                    code: 'PAYLOAD_TOO_LARGE'\n                });\n            }\n            \n            // Monitor for suspiciously large requests from same IP\n            if (sizeInBytes > limitInBytes * 0.8) { // 80% of limit\n                logSecurityEvent('LARGE_REQUEST_WARNING', {\n                    ip: clientIP,\n                    size: sizeInBytes,\n                    percentage: (sizeInBytes / limitInBytes) * 100,\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        \n        next();\n    };\n};\n\nmodule.exports = {\n    rateLimitConfigs,\n    sanitizers,\n    requestSizeLimit,\n    advancedInjectionPrevention,\n    csrfProtection,\n    fileUploadSecurity,\n    logSecurityEvent,\n    containsMaliciousPatterns,\n    detectMaliciousPatterns\n};"],"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","ignoreList":[]}