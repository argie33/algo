{"version":3,"names":["cov_11ohg0qblo","actualCoverage","DatabaseCircuitBreaker","constructor","f","s","state","failures","lastFailureTime","successCount","lastSuccessTime","Date","now","failureThreshold","recoveryTimeout","halfOpenMaxCalls","halfOpenSuccessThreshold","totalRequests","totalSuccesses","totalFailures","requestHistory","execute","operation","operationName","b","timeSinceLastFailure","remainingTime","Math","ceil","Error","toISOString","console","log","startTime","result","duration","recordSuccess","error","recordFailure","addToHistory","max","message","warn","type","push","timestamp","length","slice","getStatus","timeSinceLastSuccess","successRate","toFixed","timeToRecovery","isHealthy","recentHistory","forceReset","module","exports"],"sources":["databaseCircuitBreaker.js"],"sourcesContent":["/**\n * Enhanced Database Circuit Breaker for Lambda Environment\n */\nclass DatabaseCircuitBreaker {\n  constructor() {\n    this.state = 'closed'; // 'closed', 'open', 'half-open'\n    this.failures = 0;\n    this.lastFailureTime = 0;\n    this.successCount = 0;\n    this.lastSuccessTime = Date.now();\n    \n    // PRODUCTION FIX: More resilient thresholds  \n    this.failureThreshold = 20; // PRODUCTION FIX: Increased from 10 to 20\n    this.recoveryTimeout = 10000; // PRODUCTION FIX: Reduced from 30s to 10s\n    this.halfOpenMaxCalls = 10; // PRODUCTION FIX: Increased from 5 to 10\n    this.halfOpenSuccessThreshold = 3; // Keep 3 successes to close\n    \n    // Health tracking\n    this.totalRequests = 0;\n    this.totalSuccesses = 0;\n    this.totalFailures = 0;\n    this.requestHistory = [];\n  }\n  \n  async execute(operation, operationName = 'database-operation') {\n    this.totalRequests++;\n    \n    // Check if circuit is open\n    if (this.state === 'open') {\n      const timeSinceLastFailure = Date.now() - this.lastFailureTime;\n      if (timeSinceLastFailure < this.recoveryTimeout) {\n        const remainingTime = Math.ceil((this.recoveryTimeout - timeSinceLastFailure) / 1000);\n        throw new Error('Circuit breaker is OPEN. Database unavailable for ' + remainingTime + ' more seconds. Reason: Too many connection failures (' + this.failures + ' failures). Last failure: ' + new Date(this.lastFailureTime).toISOString());\n      } else {\n        // Transition to half-open for testing\n        this.state = 'half-open';\n        this.successCount = 0;\n        console.log('🔄 Circuit breaker transitioning to HALF-OPEN for testing...');\n      }\n    }\n    \n    try {\n      const startTime = Date.now();\n      const result = await operation();\n      const duration = Date.now() - startTime;\n      \n      // Record success\n      this.recordSuccess(operationName, duration);\n      \n      return result;\n    } catch (error) {\n      // Record failure\n      this.recordFailure(operationName, error);\n      throw error;\n    }\n  }\n  \n  recordSuccess(operationName, duration) {\n    this.totalSuccesses++;\n    this.lastSuccessTime = Date.now();\n    \n    this.addToHistory('success', operationName, duration);\n    \n    if (this.state === 'half-open') {\n      this.successCount++;\n      console.log('✅ Circuit breaker half-open success ' + this.successCount + '/' + this.halfOpenSuccessThreshold + ' for ' + operationName);\n      \n      if (this.successCount >= this.halfOpenSuccessThreshold) {\n        this.state = 'closed';\n        this.failures = 0;\n        this.successCount = 0;\n        console.log('🔓 Circuit breaker CLOSED - database access restored');\n      }\n    } else if (this.state === 'closed') {\n      // Reset failure count on successful operations\n      this.failures = Math.max(0, this.failures - 1);\n    }\n  }\n  \n  recordFailure(operationName, error) {\n    this.totalFailures++;\n    this.failures++;\n    this.lastFailureTime = Date.now();\n    \n    this.addToHistory('failure', operationName, 0, error.message);\n    \n    console.warn('⚠️ Database operation failed: ' + operationName + ' - ' + error.message + ' (failure ' + this.failures + '/' + this.failureThreshold + ')');\n    \n    // Special handling for half-open state: immediate transition to open on any failure\n    if (this.state === 'half-open') {\n      this.state = 'open';\n      this.successCount = 0;\n      console.error('🚨 Circuit breaker REOPENED from half-open state due to failure. Database access blocked for ' + (this.recoveryTimeout/1000) + ' seconds.');\n    } else if (this.failures >= this.failureThreshold) {\n      this.state = 'open';\n      console.error('🚨 Circuit breaker OPENED due to ' + this.failures + ' consecutive failures. Database access blocked for ' + (this.recoveryTimeout/1000) + ' seconds.');\n    }\n  }\n  \n  addToHistory(type, operation, duration, error = null) {\n    this.requestHistory.push({\n      timestamp: Date.now(),\n      type,\n      operation,\n      duration,\n      error\n    });\n    \n    // Keep only last 100 records\n    if (this.requestHistory.length > 100) {\n      this.requestHistory = this.requestHistory.slice(-100);\n    }\n  }\n  \n  getStatus() {\n    const now = Date.now();\n    const timeSinceLastFailure = now - this.lastFailureTime;\n    const timeSinceLastSuccess = now - this.lastSuccessTime;\n    \n    return {\n      state: this.state,\n      failures: this.failures,\n      successCount: this.successCount,\n      lastFailureTime: this.lastFailureTime,\n      lastSuccessTime: this.lastSuccessTime,\n      timeSinceLastFailure,\n      timeSinceLastSuccess,\n      totalRequests: this.totalRequests,\n      totalSuccesses: this.totalSuccesses,\n      totalFailures: this.totalFailures,\n      successRate: this.totalRequests > 0 ? (this.totalSuccesses / this.totalRequests * 100).toFixed(2) + '%' : '0%',\n      timeToRecovery: this.state === 'open' ? Math.max(0, this.recoveryTimeout - timeSinceLastFailure) : 0,\n      isHealthy: this.state === 'closed' && this.failures < this.failureThreshold * 0.5,\n      recentHistory: this.requestHistory.slice(-10)\n    };\n  }\n  \n  // Force reset circuit breaker (emergency use only)\n  forceReset() {\n    console.log('🔧 EMERGENCY: Force resetting circuit breaker...');\n    this.state = 'closed';\n    this.failures = 0;\n    this.successCount = 0;\n    this.lastFailureTime = 0;\n    console.log('✅ Circuit breaker force reset completed');\n  }\n}\n\nmodule.exports = DatabaseCircuitBreaker;"],"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","ignoreList":[]}