d69da7bad3ad6bc33b3ac63d59a4098b
/* istanbul ignore next */
function cov_25g1vxrezn() {
  var path = "/home/stocks/algo/webapp/lambda/routes/dashboard.js";
  var hash = "a382b0296c7b9b440951260640ae0edb727fa2d4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/stocks/algo/webapp/lambda/routes/dashboard.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 34
        }
      },
      "1": {
        start: {
          line: 2,
          column: 27
        },
        end: {
          line: 2,
          column: 64
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 31
        }
      },
      "3": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "4": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "5": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "6": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "7": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "8": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 48,
          column: 3
        }
      },
      "9": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "10": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 29
        }
      },
      "11": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 157,
          column: 3
        }
      },
      "12": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 61
        }
      },
      "13": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 156,
          column: 3
        }
      },
      "14": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "15": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "16": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "17": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 93
        }
      },
      "18": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "19": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 96,
          column: 6
        }
      },
      "20": {
        start: {
          line: 98,
          column: 29
        },
        end: {
          line: 112,
          column: 6
        }
      },
      "21": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 115,
          column: 26
        }
      },
      "22": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "23": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "24": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 136,
          column: 8
        }
      },
      "25": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 137,
          column: 42
        }
      },
      "26": {
        start: {
          line: 140,
          column: 21
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "27": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 191
        }
      },
      "28": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 32
        }
      },
      "29": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 66
        }
      },
      "30": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "31": {
        start: {
          line: 159,
          column: 0
        },
        end: {
          line: 159,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 7,
            column: 23
          }
        },
        loc: {
          start: {
            line: 7,
            column: 36
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 17,
            column: 25
          }
        },
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 39,
            column: 24
          }
        },
        loc: {
          start: {
            line: 39,
            column: 37
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 33
          }
        },
        loc: {
          start: {
            line: 51,
            column: 52
          },
          end: {
            line: 157,
            column: 1
          }
        },
        line: 51
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "1": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a382b0296c7b9b440951260640ae0edb727fa2d4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25g1vxrezn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25g1vxrezn();
const express =
/* istanbul ignore next */
(cov_25g1vxrezn().s[0]++, require('express'));
const {
  success,
  error
} =
/* istanbul ignore next */
(cov_25g1vxrezn().s[1]++, require('../utils/responseFormatter'));
const router =
/* istanbul ignore next */
(cov_25g1vxrezn().s[2]++, express.Router());

// Basic health endpoint for dashboard service
/* istanbul ignore next */
cov_25g1vxrezn().s[3]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_25g1vxrezn().f[0]++;
  cov_25g1vxrezn().s[4]++;
  res.json(success({
    status: 'operational',
    service: 'dashboard',
    timestamp: new Date().toISOString(),
    message: 'Dashboard service is running'
  }));
});

// Dashboard overview endpoint
/* istanbul ignore next */
cov_25g1vxrezn().s[5]++;
router.get('/overview', (req, res) => {
  /* istanbul ignore next */
  cov_25g1vxrezn().f[1]++;
  const dashboardData =
  /* istanbul ignore next */
  (cov_25g1vxrezn().s[6]++, {
    summary: {
      totalValue: 125000,
      dayChange: 2.34,
      dayChangePercent: 1.87,
      totalGainLoss: 15000,
      totalGainLossPercent: 13.6
    },
    quickStats: {
      positions: 12,
      watchlistItems: 25,
      alerts: 3,
      lastUpdate: new Date().toISOString()
    },
    status: 'operational'
  });
  /* istanbul ignore next */
  cov_25g1vxrezn().s[7]++;
  res.json(success(dashboardData));
});

// Dashboard widgets endpoint
/* istanbul ignore next */
cov_25g1vxrezn().s[8]++;
router.get('/widgets', (req, res) => {
  /* istanbul ignore next */
  cov_25g1vxrezn().f[2]++;
  const widgets =
  /* istanbul ignore next */
  (cov_25g1vxrezn().s[9]++, [{
    id: 'portfolio',
    type: 'portfolio-summary',
    enabled: true
  }, {
    id: 'watchlist',
    type: 'watchlist-preview',
    enabled: true
  }, {
    id: 'news',
    type: 'market-news',
    enabled: true
  }, {
    id: 'performance',
    type: 'performance-chart',
    enabled: true
  }]);
  /* istanbul ignore next */
  cov_25g1vxrezn().s[10]++;
  res.json(success(widgets));
});

// Dashboard analyst insights endpoint
/* istanbul ignore next */
cov_25g1vxrezn().s[11]++;
router.get('/analyst-insights', async (req, res) => {
  /* istanbul ignore next */
  cov_25g1vxrezn().f[3]++;
  cov_25g1vxrezn().s[12]++;
  console.log('🧠 [DASHBOARD] Fetching analyst insights...');
  /* istanbul ignore next */
  cov_25g1vxrezn().s[13]++;
  try {
    const {
      query
    } =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[14]++, require('../utils/database'));

    // Check if analyst_ratings table exists
    const tableExistsResult =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[15]++, await query(`SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'analyst_ratings'
      );`));
    /* istanbul ignore next */
    cov_25g1vxrezn().s[16]++;
    if (!tableExistsResult.rows[0].exists) {
      /* istanbul ignore next */
      cov_25g1vxrezn().b[0][0]++;
      cov_25g1vxrezn().s[17]++;
      console.warn('[DASHBOARD] analyst_ratings table does not exist, creating sample data');
      /* istanbul ignore next */
      cov_25g1vxrezn().s[18]++;
      return res.json(success({
        upgrades: [{
          symbol: 'AAPL',
          analyst: 'Goldman Sachs',
          action: 'Upgrade',
          from: 'Neutral',
          to: 'Buy',
          price_target: 175
        }, {
          symbol: 'MSFT',
          analyst: 'Morgan Stanley',
          action: 'Upgrade',
          from: 'Equal Weight',
          to: 'Overweight',
          price_target: 350
        }],
        downgrades: [{
          symbol: 'TSLA',
          analyst: 'JP Morgan',
          action: 'Downgrade',
          from: 'Overweight',
          to: 'Neutral',
          price_target: 800
        }],
        earnings_beats: [{
          symbol: 'NVDA',
          eps_actual: 4.25,
          eps_estimate: 4.10,
          beat_amount: 0.15
        }]
      }));
    } else
    /* istanbul ignore next */
    {
      cov_25g1vxrezn().b[0][1]++;
    }

    // Fetch recent analyst upgrades and downgrades
    const upgradesResult =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[19]++, await query(`
      SELECT 
        symbol,
        analyst_firm as analyst,
        action,
        previous_rating as "from",
        new_rating as "to",
        price_target,
        rating_date
      FROM analyst_ratings 
      WHERE action = 'Upgrade' 
      AND rating_date >= CURRENT_DATE - INTERVAL '7 days'
      ORDER BY rating_date DESC
      LIMIT 10
    `));
    const downgradesResult =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[20]++, await query(`
      SELECT 
        symbol,
        analyst_firm as analyst,
        action,
        previous_rating as "from",
        new_rating as "to", 
        price_target,
        rating_date
      FROM analyst_ratings 
      WHERE action = 'Downgrade'
      AND rating_date >= CURRENT_DATE - INTERVAL '7 days'
      ORDER BY rating_date DESC
      LIMIT 10
    `));

    // Check for earnings beats in earnings table if it exists
    let earningsBeats =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[21]++, []);
    const earningsTableExists =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[22]++, await query(`SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'earnings_calendar'
      );`));
    /* istanbul ignore next */
    cov_25g1vxrezn().s[23]++;
    if (earningsTableExists.rows[0].exists) {
      /* istanbul ignore next */
      cov_25g1vxrezn().b[1][0]++;
      const earningsResult =
      /* istanbul ignore next */
      (cov_25g1vxrezn().s[24]++, await query(`
        SELECT 
          symbol,
          eps_actual,
          eps_estimate,
          (eps_actual - eps_estimate) as beat_amount
        FROM earnings_calendar 
        WHERE earnings_date >= CURRENT_DATE - INTERVAL '7 days'
        AND eps_actual > eps_estimate
        ORDER BY earnings_date DESC
        LIMIT 5
      `));
      /* istanbul ignore next */
      cov_25g1vxrezn().s[25]++;
      earningsBeats = earningsResult.rows;
    } else
    /* istanbul ignore next */
    {
      cov_25g1vxrezn().b[1][1]++;
    }
    const insights =
    /* istanbul ignore next */
    (cov_25g1vxrezn().s[26]++, {
      upgrades: upgradesResult.rows,
      downgrades: downgradesResult.rows,
      earnings_beats: earningsBeats
    });
    /* istanbul ignore next */
    cov_25g1vxrezn().s[27]++;
    console.log(`🧠 [DASHBOARD] Returning analyst insights: ${insights.upgrades.length} upgrades, ${insights.downgrades.length} downgrades, ${insights.earnings_beats.length} earnings beats`);
    /* istanbul ignore next */
    cov_25g1vxrezn().s[28]++;
    res.json(success(insights));
  } catch (error) {
    /* istanbul ignore next */
    cov_25g1vxrezn().s[29]++;
    console.error('❌ [DASHBOARD] Analyst insights error:', error);
    /* istanbul ignore next */
    cov_25g1vxrezn().s[30]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch analyst insights',
      message: error.message
    });
  }
});
/* istanbul ignore next */
cov_25g1vxrezn().s[31]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,