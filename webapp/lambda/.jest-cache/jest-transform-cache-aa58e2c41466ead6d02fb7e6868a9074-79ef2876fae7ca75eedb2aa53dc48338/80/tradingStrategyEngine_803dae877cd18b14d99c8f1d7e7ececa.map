{"version":3,"names":["cov_29u8ah9tnj","actualCoverage","AlpacaService","s","require","apiKeyService","SignalProcessor","RiskManager","query","logger","TradingStrategyEngine","constructor","f","activeStrategies","Map","executionQueue","processingQueue","performanceMetrics","signalProcessor","riskManager","registerStrategy","userId","strategyConfig","strategyId","Date","now","Math","random","toString","substr","info","b","substring","strategyType","type","symbols","active","validationResult","validateStrategyConfig","isValid","Error","error","credentials","getDecryptedApiKey","provider","strategy","id","config","alpacaService","apiKey","apiSecret","isSandbox","status","createdAt","toISOString","lastExecuted","executionCount","performance","totalTrades","successfulTrades","totalReturn","totalFees","winRate","avgReturn","maxDrawdown","sharpeRatio","JSON","stringify","set","message","errorStack","stack","executeStrategy","signal","get","executionId","executionResult","executeMomentumStrategy","executeMeanReversionStrategy","executeBreakoutStrategy","executePatternStrategy","updatePerformanceMetrics","orders","ordersPlaced","length","totalValue","success","parameters","symbol","priceData","getRecentPrices","lookbackPeriod","momentum","calculateMomentum","rsi","calculateRSI","macd","calculateMACD","shouldBuy","momentumThreshold","rsiOverbought","shouldSell","rsiOversold","position","calculatePositionSize","quantity","order","placeOrder","qty","side","time_in_force","push","close","orderId","currentPosition","getPosition","timestamp","sma","calculateSMA","smaLength","currentPrice","deviation","bollinger","calculateBollingerBands","buyThreshold","lowerBand","sellThreshold","upperBand","limit_price","resistance","max","slice","breakoutPeriod","map","p","high","support","min","low","volume","avgVolume","reduce","sum","volumeMultiplier","stop_price","confidenceThreshold","signalAnalysis","processSignals","timeframe","patterns","warn","analysis","recommendations","patternsFound","primarySignal","primary","confidence","recommendation","action","stopLoss","takeProfit","pattern","strongestPattern","current","previous","period","gains","losses","i","change","abs","avgGain","avgLoss","rs","histogram","ema12","calculateEMA","ema26","macdLine","signalLine","acc","multiplier","ema","stdDev","prices","variance","price","pow","standardDeviation","sqrt","middleBand","riskPerTrade","maxPositionSize","riskManagement","account","getAccount","accountValue","parseFloat","portfolio_value","availableCash","buying_power","riskParams","portfolioValue","volatilityAdjustment","correlationAdjustment","positionSizing","recommendedValue","positionValue","floor","maxQuantityByCash","finalQuantity","stopLossLevels","calculateStopLossTakeProfit","entryPrice","direction","estimatedValue","riskAmount","maxPositionValue","recommendedSize","riskScore","riskMetrics","overallRiskScore","riskLevel","riskRewardRatio","adjustments","limits","Array","from","_","open","detectPatterns","patternTypes","detected_at","required","supportedTypes","field","includes","isArray","getStrategyPerformance","result","rows","getUserStrategies","deactivateStrategy","delete","module","exports"],"sources":["tradingStrategyEngine.js"],"sourcesContent":["const AlpacaService = require('./alpacaService');\nconst apiKeyService = require('./apiKeyService');\nconst SignalProcessor = require('./signalProcessor');\nconst RiskManager = require('./riskManager');\nconst { query } = require('./database');\nconst logger = require('./logger');\n\nclass TradingStrategyEngine {\n  constructor() {\n    this.activeStrategies = new Map();\n    this.executionQueue = [];\n    this.processingQueue = false;\n    this.performanceMetrics = new Map();\n    this.signalProcessor = new SignalProcessor();\n    this.riskManager = new RiskManager();\n  }\n\n  // Register a trading strategy\n  async registerStrategy(userId, strategyConfig) {\n    const strategyId = `strategy-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      logger.info(`üìä Registering trading strategy`, {\n        strategyId,\n        userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n        strategyType: strategyConfig.type,\n        symbols: strategyConfig.symbols,\n        active: strategyConfig.active\n      });\n\n      // Validate strategy configuration\n      const validationResult = this.validateStrategyConfig(strategyConfig);\n      if (!validationResult.isValid) {\n        throw new Error(`Invalid strategy configuration: ${validationResult.error}`);\n      }\n\n      // Get user's API credentials\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, strategyConfig.provider || 'alpaca');\n      if (!credentials) {\n        throw new Error('No API credentials available for trading');\n      }\n\n      // Create strategy instance\n      const strategy = {\n        id: strategyId,\n        userId,\n        config: strategyConfig,\n        credentials,\n        alpacaService: new AlpacaService(credentials.apiKey, credentials.apiSecret, credentials.isSandbox),\n        status: 'registered',\n        createdAt: new Date().toISOString(),\n        lastExecuted: null,\n        executionCount: 0,\n        performance: {\n          totalTrades: 0,\n          successfulTrades: 0,\n          totalReturn: 0,\n          totalFees: 0,\n          winRate: 0,\n          avgReturn: 0,\n          maxDrawdown: 0,\n          sharpeRatio: 0\n        }\n      };\n\n      // Store strategy in database\n      await query(`\n        INSERT INTO trading_strategies (\n          id, user_id, strategy_type, configuration, \n          provider, is_active, created_at, status\n        ) VALUES ($1, $2, $3, $4, $5, $6, NOW(), $7)\n      `, [\n        strategyId,\n        userId,\n        strategyConfig.type,\n        JSON.stringify(strategyConfig),\n        strategyConfig.provider || 'alpaca',\n        strategyConfig.active || false,\n        'registered'\n      ]);\n\n      // Add to active strategies if enabled\n      if (strategyConfig.active) {\n        this.activeStrategies.set(strategyId, strategy);\n        logger.info(`‚úÖ Strategy registered and activated`, {\n          strategyId,\n          strategyType: strategyConfig.type\n        });\n      }\n\n      return {\n        strategyId,\n        status: 'registered',\n        active: strategyConfig.active,\n        message: 'Strategy registered successfully'\n      };\n    } catch (error) {\n      logger.error(`‚ùå Failed to register strategy`, {\n        error: error.message,\n        errorStack: error.stack,\n        userId: userId ? `${userId.substring(0, 8)}...` : 'unknown',\n        strategyType: strategyConfig.type\n      });\n      throw error;\n    }\n  }\n\n  // Execute a trading strategy\n  async executeStrategy(strategyId, signal = null) {\n    const strategy = this.activeStrategies.get(strategyId);\n    if (!strategy) {\n      throw new Error(`Strategy ${strategyId} not found or not active`);\n    }\n\n    const executionId = `exec-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      logger.info(`üöÄ Executing trading strategy`, {\n        strategyId,\n        executionId,\n        strategyType: strategy.config.type,\n        symbols: strategy.config.symbols,\n        signal: signal ? signal.type : 'scheduled'\n      });\n\n      // Update strategy status\n      strategy.status = 'executing';\n      strategy.lastExecuted = new Date().toISOString();\n      strategy.executionCount++;\n\n      // Execute based on strategy type\n      let executionResult;\n      switch (strategy.config.type) {\n        case 'momentum':\n          executionResult = await this.executeMomentumStrategy(strategy, signal);\n          break;\n        case 'mean_reversion':\n          executionResult = await this.executeMeanReversionStrategy(strategy, signal);\n          break;\n        case 'breakout':\n          executionResult = await this.executeBreakoutStrategy(strategy, signal);\n          break;\n        case 'pattern_recognition':\n          executionResult = await this.executePatternStrategy(strategy, signal);\n          break;\n        default:\n          throw new Error(`Unsupported strategy type: ${strategy.config.type}`);\n      }\n\n      // Update performance metrics\n      await this.updatePerformanceMetrics(strategyId, executionResult);\n\n      // Log execution to database\n      await query(`\n        INSERT INTO strategy_executions (\n          id, strategy_id, execution_type, signal_data, \n          orders_placed, execution_result, executed_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, NOW())\n      `, [\n        executionId,\n        strategyId,\n        signal ? signal.type : 'scheduled',\n        JSON.stringify(signal || {}),\n        JSON.stringify(executionResult.orders || []),\n        JSON.stringify(executionResult)\n      ]);\n\n      strategy.status = 'idle';\n      \n      logger.info(`‚úÖ Strategy execution completed`, {\n        strategyId,\n        executionId,\n        ordersPlaced: executionResult.orders?.length || 0,\n        totalValue: executionResult.totalValue || 0,\n        success: executionResult.success\n      });\n\n      return executionResult;\n    } catch (error) {\n      strategy.status = 'error';\n      \n      logger.error(`‚ùå Strategy execution failed`, {\n        strategyId,\n        executionId,\n        error: error.message,\n        errorStack: error.stack\n      });\n\n      // Log error to database\n      await query(`\n        INSERT INTO strategy_executions (\n          id, strategy_id, execution_type, signal_data, \n          orders_placed, execution_result, executed_at, error_message\n        ) VALUES ($1, $2, $3, $4, $5, $6, NOW(), $7)\n      `, [\n        executionId,\n        strategyId,\n        'error',\n        JSON.stringify(signal || {}),\n        JSON.stringify([]),\n        JSON.stringify({ success: false, error: error.message }),\n        error.message\n      ]);\n\n      throw error;\n    }\n  }\n\n  // Momentum trading strategy\n  async executeMomentumStrategy(strategy, signal) {\n    const { symbols, parameters } = strategy.config;\n    const orders = [];\n    let totalValue = 0;\n\n    for (const symbol of symbols) {\n      try {\n        // Get recent price data\n        const priceData = await this.getRecentPrices(symbol, parameters.lookbackPeriod || 20);\n        \n        // Calculate momentum indicators\n        const momentum = this.calculateMomentum(priceData);\n        const rsi = this.calculateRSI(priceData);\n        const macd = this.calculateMACD(priceData);\n\n        // Generate trading signal\n        const shouldBuy = momentum > (parameters.momentumThreshold || 0.02) && \n                         rsi < (parameters.rsiOverbought || 70) && \n                         macd.signal === 'bullish';\n\n        const shouldSell = momentum < (parameters.momentumThreshold || -0.02) && \n                          rsi > (parameters.rsiOversold || 30) && \n                          macd.signal === 'bearish';\n\n        if (shouldBuy) {\n          const position = await this.calculatePositionSize(strategy, symbol, 'buy');\n          if (position.quantity > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: position.quantity,\n              side: 'buy',\n              type: 'market',\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += position.quantity * priceData[priceData.length - 1].close;\n            \n            logger.info(`üìà Momentum BUY order placed`, {\n              symbol,\n              quantity: position.quantity,\n              momentum,\n              rsi,\n              orderId: order.id\n            });\n          }\n        } else if (shouldSell) {\n          const currentPosition = await strategy.alpacaService.getPosition(symbol);\n          if (currentPosition && currentPosition.qty > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: currentPosition.qty,\n              side: 'sell',\n              type: 'market',\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += currentPosition.qty * priceData[priceData.length - 1].close;\n            \n            logger.info(`üìâ Momentum SELL order placed`, {\n              symbol,\n              quantity: currentPosition.qty,\n              momentum,\n              rsi,\n              orderId: order.id\n            });\n          }\n        }\n      } catch (error) {\n        logger.error(`‚ùå Error processing momentum strategy for ${symbol}`, {\n          error: error.message,\n          symbol\n        });\n      }\n    }\n\n    return {\n      success: true,\n      strategyType: 'momentum',\n      orders,\n      totalValue,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Mean reversion strategy\n  async executeMeanReversionStrategy(strategy, signal) {\n    const { symbols, parameters } = strategy.config;\n    const orders = [];\n    let totalValue = 0;\n\n    for (const symbol of symbols) {\n      try {\n        // Get recent price data\n        const priceData = await this.getRecentPrices(symbol, parameters.lookbackPeriod || 20);\n        \n        // Calculate mean reversion indicators\n        const sma = this.calculateSMA(priceData, parameters.smaLength || 20);\n        const currentPrice = priceData[priceData.length - 1].close;\n        const deviation = (currentPrice - sma) / sma;\n        const bollinger = this.calculateBollingerBands(priceData);\n\n        // Generate trading signal\n        const shouldBuy = deviation < (parameters.buyThreshold || -0.02) && \n                         currentPrice < bollinger.lowerBand;\n\n        const shouldSell = deviation > (parameters.sellThreshold || 0.02) && \n                          currentPrice > bollinger.upperBand;\n\n        if (shouldBuy) {\n          const position = await this.calculatePositionSize(strategy, symbol, 'buy');\n          if (position.quantity > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: position.quantity,\n              side: 'buy',\n              type: 'limit',\n              limit_price: currentPrice * 0.999, // Slight discount\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += position.quantity * currentPrice;\n            \n            logger.info(`üìà Mean reversion BUY order placed`, {\n              symbol,\n              quantity: position.quantity,\n              deviation,\n              currentPrice,\n              orderId: order.id\n            });\n          }\n        } else if (shouldSell) {\n          const currentPosition = await strategy.alpacaService.getPosition(symbol);\n          if (currentPosition && currentPosition.qty > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: currentPosition.qty,\n              side: 'sell',\n              type: 'limit',\n              limit_price: currentPrice * 1.001, // Slight premium\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += currentPosition.qty * currentPrice;\n            \n            logger.info(`üìâ Mean reversion SELL order placed`, {\n              symbol,\n              quantity: currentPosition.qty,\n              deviation,\n              currentPrice,\n              orderId: order.id\n            });\n          }\n        }\n      } catch (error) {\n        logger.error(`‚ùå Error processing mean reversion strategy for ${symbol}`, {\n          error: error.message,\n          symbol\n        });\n      }\n    }\n\n    return {\n      success: true,\n      strategyType: 'mean_reversion',\n      orders,\n      totalValue,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Breakout strategy\n  async executeBreakoutStrategy(strategy, signal) {\n    const { symbols, parameters } = strategy.config;\n    const orders = [];\n    let totalValue = 0;\n\n    for (const symbol of symbols) {\n      try {\n        // Get recent price data\n        const priceData = await this.getRecentPrices(symbol, parameters.lookbackPeriod || 50);\n        \n        // Calculate breakout levels\n        const resistance = Math.max(...priceData.slice(-parameters.breakoutPeriod || 20).map(p => p.high));\n        const support = Math.min(...priceData.slice(-parameters.breakoutPeriod || 20).map(p => p.low));\n        const currentPrice = priceData[priceData.length - 1].close;\n        const volume = priceData[priceData.length - 1].volume;\n        const avgVolume = priceData.slice(-10).reduce((sum, p) => sum + p.volume, 0) / 10;\n\n        // Generate trading signal\n        const shouldBuy = currentPrice > resistance && \n                         volume > avgVolume * (parameters.volumeMultiplier || 1.5);\n\n        const shouldSell = currentPrice < support && \n                          volume > avgVolume * (parameters.volumeMultiplier || 1.5);\n\n        if (shouldBuy) {\n          const position = await this.calculatePositionSize(strategy, symbol, 'buy');\n          if (position.quantity > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: position.quantity,\n              side: 'buy',\n              type: 'stop_limit',\n              stop_price: resistance,\n              limit_price: resistance * 1.005,\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += position.quantity * currentPrice;\n            \n            logger.info(`üìà Breakout BUY order placed`, {\n              symbol,\n              quantity: position.quantity,\n              resistance,\n              currentPrice,\n              volume,\n              orderId: order.id\n            });\n          }\n        } else if (shouldSell) {\n          const currentPosition = await strategy.alpacaService.getPosition(symbol);\n          if (currentPosition && currentPosition.qty > 0) {\n            const order = await strategy.alpacaService.placeOrder({\n              symbol,\n              qty: currentPosition.qty,\n              side: 'sell',\n              type: 'stop_limit',\n              stop_price: support,\n              limit_price: support * 0.995,\n              time_in_force: 'day'\n            });\n            \n            orders.push(order);\n            totalValue += currentPosition.qty * currentPrice;\n            \n            logger.info(`üìâ Breakout SELL order placed`, {\n              symbol,\n              quantity: currentPosition.qty,\n              support,\n              currentPrice,\n              volume,\n              orderId: order.id\n            });\n          }\n        }\n      } catch (error) {\n        logger.error(`‚ùå Error processing breakout strategy for ${symbol}`, {\n          error: error.message,\n          symbol\n        });\n      }\n    }\n\n    return {\n      success: true,\n      strategyType: 'breakout',\n      orders,\n      totalValue,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Pattern recognition strategy - Enhanced with SignalProcessor\n  async executePatternStrategy(strategy, signal) {\n    const { symbols, parameters } = strategy.config;\n    const orders = [];\n    let totalValue = 0;\n\n    for (const symbol of symbols) {\n      try {\n        logger.info(`üîç Executing pattern strategy for ${symbol}`, {\n          strategyId: strategy.id,\n          symbol: symbol,\n          lookbackPeriod: parameters.lookbackPeriod || 100,\n          confidenceThreshold: parameters.confidenceThreshold || 0.7\n        });\n\n        // Get recent price data\n        const priceData = await this.getRecentPrices(symbol, parameters.lookbackPeriod || 100);\n        \n        // Use SignalProcessor for comprehensive pattern analysis\n        const signalAnalysis = await this.signalProcessor.processSignals(priceData, symbol, {\n          timeframe: parameters.timeframe || '1D',\n          patterns: parameters.patterns || 'all'\n        });\n\n        if (!signalAnalysis.success) {\n          logger.warn(`‚ö†Ô∏è Signal processing failed for ${symbol}`, {\n            strategyId: strategy.id,\n            symbol: symbol\n          });\n          continue;\n        }\n\n        const { patterns, analysis, recommendations } = signalAnalysis;\n        \n        logger.info(`üìä Pattern analysis completed for ${symbol}`, {\n          strategyId: strategy.id,\n          symbol: symbol,\n          patternsFound: patterns.length,\n          primarySignal: analysis.primary?.type,\n          confidence: analysis.confidence,\n          recommendation: recommendations.action\n        });\n\n        // Execute trades based on comprehensive signal analysis\n        const currentPrice = priceData[priceData.length - 1].close;\n        const confidenceThreshold = parameters.confidenceThreshold || 0.7;\n        \n        if (analysis.primary && analysis.confidence > confidenceThreshold) {\n          if (analysis.primary.type === 'bullish' && recommendations.action === 'buy') {\n            const position = await this.calculatePositionSize(strategy, symbol, 'buy');\n            if (position.quantity > 0) {\n              const order = await strategy.alpacaService.placeOrder({\n                symbol,\n                qty: position.quantity,\n                side: 'buy',\n                type: 'market',\n                time_in_force: 'day'\n              });\n              \n              orders.push(order);\n              totalValue += position.quantity * currentPrice;\n              \n              logger.info(`üìà Pattern BUY order placed`, {\n                symbol,\n                quantity: position.quantity,\n                confidence: analysis.confidence,\n                patterns: patterns.slice(0, 3).map(p => p.type),\n                orderId: order.id,\n                stopLoss: recommendations.stopLoss,\n                takeProfit: recommendations.takeProfit\n              });\n            }\n          } else if (analysis.primary.type === 'bearish' && recommendations.action === 'sell') {\n            const currentPosition = await strategy.alpacaService.getPosition(symbol);\n            if (currentPosition && currentPosition.qty > 0) {\n              const order = await strategy.alpacaService.placeOrder({\n                symbol,\n                qty: currentPosition.qty,\n                side: 'sell',\n                type: 'market',\n                time_in_force: 'day'\n              });\n              \n              orders.push(order);\n              totalValue += currentPosition.qty * currentPrice;\n              \n              logger.info(`üìâ Pattern SELL order placed`, {\n                symbol,\n                quantity: currentPosition.qty,\n                pattern: strongestPattern.type,\n                confidence: strongestPattern.confidence,\n                orderId: order.id\n              });\n            }\n          }\n        }\n      } catch (error) {\n        logger.error(`‚ùå Error processing pattern strategy for ${symbol}`, {\n          error: error.message,\n          symbol\n        });\n      }\n    }\n\n    return {\n      success: true,\n      strategyType: 'pattern_recognition',\n      orders,\n      totalValue,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Helper methods for technical analysis\n  calculateMomentum(priceData) {\n    if (priceData.length < 2) return 0;\n    const current = priceData[priceData.length - 1].close;\n    const previous = priceData[priceData.length - 2].close;\n    return (current - previous) / previous;\n  }\n\n  calculateRSI(priceData, period = 14) {\n    if (priceData.length < period + 1) return 50;\n    \n    let gains = 0;\n    let losses = 0;\n    \n    for (let i = priceData.length - period; i < priceData.length; i++) {\n      const change = priceData[i].close - priceData[i - 1].close;\n      if (change > 0) gains += change;\n      else losses += Math.abs(change);\n    }\n    \n    const avgGain = gains / period;\n    const avgLoss = losses / period;\n    \n    if (avgLoss === 0) return 100;\n    \n    const rs = avgGain / avgLoss;\n    return 100 - (100 / (1 + rs));\n  }\n\n  calculateMACD(priceData) {\n    if (priceData.length < 26) return { signal: 'neutral', histogram: 0 };\n    \n    const ema12 = this.calculateEMA(priceData, 12);\n    const ema26 = this.calculateEMA(priceData, 26);\n    const macdLine = ema12 - ema26;\n    \n    // Signal line is 9-period EMA of MACD line\n    const signalLine = this.calculateEMA(priceData.slice(-9), 9);\n    const histogram = macdLine - signalLine;\n    \n    return {\n      macd: macdLine,\n      signal: histogram > 0 ? 'bullish' : 'bearish',\n      histogram\n    };\n  }\n\n  calculateSMA(priceData, period) {\n    if (priceData.length < period) return 0;\n    const sum = priceData.slice(-period).reduce((acc, p) => acc + p.close, 0);\n    return sum / period;\n  }\n\n  calculateEMA(priceData, period) {\n    if (priceData.length < period) return 0;\n    \n    const multiplier = 2 / (period + 1);\n    let ema = priceData[0].close;\n    \n    for (let i = 1; i < priceData.length; i++) {\n      ema = (priceData[i].close * multiplier) + (ema * (1 - multiplier));\n    }\n    \n    return ema;\n  }\n\n  calculateBollingerBands(priceData, period = 20, stdDev = 2) {\n    const sma = this.calculateSMA(priceData, period);\n    const prices = priceData.slice(-period).map(p => p.close);\n    const variance = prices.reduce((acc, price) => acc + Math.pow(price - sma, 2), 0) / period;\n    const standardDeviation = Math.sqrt(variance);\n    \n    return {\n      upperBand: sma + (standardDeviation * stdDev),\n      middleBand: sma,\n      lowerBand: sma - (standardDeviation * stdDev)\n    };\n  }\n\n  // Position sizing with risk management\n  async calculatePositionSize(strategy, symbol, side, signal = null) {\n    try {\n      const { riskPerTrade = 0.02, maxPositionSize = 0.1 } = strategy.config.riskManagement || {};\n      \n      // Get account information\n      const account = await strategy.alpacaService.getAccount();\n      const accountValue = parseFloat(account.portfolio_value);\n      const availableCash = parseFloat(account.buying_power);\n      \n      // Get current price\n      const priceData = await this.getRecentPrices(symbol, 1);\n      const currentPrice = priceData[0].close;\n      \n      // Use advanced risk management for position sizing\n      const riskParams = {\n        userId: strategy.userId,\n        symbol: symbol,\n        signal: signal,\n        portfolioValue: accountValue,\n        riskPerTrade: riskPerTrade,\n        maxPositionSize: maxPositionSize,\n        volatilityAdjustment: true,\n        correlationAdjustment: true\n      };\n      \n      const positionSizing = await this.riskManager.calculatePositionSize(riskParams);\n      \n      // Calculate quantity based on risk manager recommendations\n      const recommendedValue = positionSizing.positionValue;\n      const quantity = Math.floor(recommendedValue / currentPrice);\n      \n      // Ensure we don't exceed available cash\n      const maxQuantityByCash = Math.floor(availableCash / currentPrice);\n      const finalQuantity = Math.min(quantity, maxQuantityByCash);\n      \n      // Calculate stop loss and take profit levels\n      const stopLossLevels = await this.riskManager.calculateStopLossTakeProfit({\n        symbol: symbol,\n        entryPrice: currentPrice,\n        direction: side === 'buy' ? 'long' : 'short',\n        signal: signal,\n        riskPerTrade: riskPerTrade\n      });\n      \n      return {\n        quantity: Math.max(0, finalQuantity),\n        estimatedValue: finalQuantity * currentPrice,\n        riskAmount: positionSizing.riskAmount,\n        maxPositionValue: positionSizing.positionValue,\n        currentPrice: currentPrice,\n        riskManagement: {\n          recommendedSize: positionSizing.recommendedSize,\n          riskScore: positionSizing.riskMetrics.overallRiskScore,\n          riskLevel: positionSizing.riskMetrics.overallRiskScore > 0.6 ? 'high' : 'moderate',\n          stopLoss: stopLossLevels.stopLoss,\n          takeProfit: stopLossLevels.takeProfit,\n          riskRewardRatio: stopLossLevels.riskRewardRatio,\n          recommendation: positionSizing.recommendation\n        },\n        adjustments: positionSizing.adjustments,\n        limits: positionSizing.limits\n      };\n    } catch (error) {\n      logger.error(`‚ùå Error calculating position size for ${symbol}`, {\n        error: error.message,\n        symbol,\n        side\n      });\n      return { quantity: 0, estimatedValue: 0, riskAmount: 0, maxPositionValue: 0, currentPrice: 0 };\n    }\n  }\n\n  // Get recent price data (placeholder - should integrate with market data service)\n  async getRecentPrices(symbol, period) {\n    // This would typically fetch from market data service\n    // For now, return sample data structure\n    return Array.from({ length: period }, (_, i) => ({\n      timestamp: new Date(Date.now() - (period - i) * 24 * 60 * 60 * 1000).toISOString(),\n      open: 100 + Math.random() * 10,\n      high: 105 + Math.random() * 10,\n      low: 95 + Math.random() * 10,\n      close: 100 + Math.random() * 10,\n      volume: Math.floor(Math.random() * 1000000)\n    }));\n  }\n\n  // Pattern detection (placeholder - should integrate with pattern recognition service)\n  async detectPatterns(priceData, patternTypes) {\n    // This would integrate with pattern recognition algorithms\n    // For now, return sample pattern data\n    return [\n      {\n        type: 'double_bottom',\n        signal: 'bullish',\n        confidence: 0.8,\n        timeframe: '1D',\n        detected_at: new Date().toISOString()\n      }\n    ];\n  }\n\n  // Validate strategy configuration\n  validateStrategyConfig(config) {\n    const required = ['type', 'symbols', 'parameters'];\n    const supportedTypes = ['momentum', 'mean_reversion', 'breakout', 'pattern_recognition'];\n    \n    for (const field of required) {\n      if (!config[field]) {\n        return { isValid: false, error: `Missing required field: ${field}` };\n      }\n    }\n    \n    if (!supportedTypes.includes(config.type)) {\n      return { isValid: false, error: `Unsupported strategy type: ${config.type}` };\n    }\n    \n    if (!Array.isArray(config.symbols) || config.symbols.length === 0) {\n      return { isValid: false, error: 'Symbols must be a non-empty array' };\n    }\n    \n    return { isValid: true };\n  }\n\n  // Update performance metrics\n  async updatePerformanceMetrics(strategyId, executionResult) {\n    // This would calculate and update performance metrics\n    // Integration with performance tracking service\n    logger.info(`üìä Updating performance metrics for strategy ${strategyId}`, {\n      ordersPlaced: executionResult.orders?.length || 0,\n      totalValue: executionResult.totalValue || 0\n    });\n  }\n\n  // Get strategy performance\n  async getStrategyPerformance(strategyId) {\n    try {\n      const result = await query(`\n        SELECT \n          s.*,\n          COUNT(e.id) as execution_count,\n          AVG(CASE WHEN e.execution_result->>'success' = 'true' THEN 1 ELSE 0 END) as success_rate\n        FROM trading_strategies s\n        LEFT JOIN strategy_executions e ON s.id = e.strategy_id\n        WHERE s.id = $1\n        GROUP BY s.id\n      `, [strategyId]);\n      \n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error(`‚ùå Error getting strategy performance`, {\n        error: error.message,\n        strategyId\n      });\n      return null;\n    }\n  }\n\n  // Get all user strategies\n  async getUserStrategies(userId) {\n    try {\n      const result = await query(`\n        SELECT \n          s.*,\n          COUNT(e.id) as execution_count,\n          MAX(e.executed_at) as last_execution,\n          AVG(CASE WHEN e.execution_result->>'success' = 'true' THEN 1 ELSE 0 END) as success_rate\n        FROM trading_strategies s\n        LEFT JOIN strategy_executions e ON s.id = e.strategy_id\n        WHERE s.user_id = $1\n        GROUP BY s.id\n        ORDER BY s.created_at DESC\n      `, [userId]);\n      \n      return result.rows;\n    } catch (error) {\n      logger.error(`‚ùå Error getting user strategies`, {\n        error: error.message,\n        userId: userId ? `${userId.substring(0, 8)}...` : 'unknown'\n      });\n      return [];\n    }\n  }\n\n  // Deactivate strategy\n  async deactivateStrategy(strategyId) {\n    try {\n      await query(`\n        UPDATE trading_strategies \n        SET is_active = false, updated_at = NOW()\n        WHERE id = $1\n      `, [strategyId]);\n      \n      this.activeStrategies.delete(strategyId);\n      \n      logger.info(`üõë Strategy deactivated`, { strategyId });\n      return true;\n    } catch (error) {\n      logger.error(`‚ùå Error deactivating strategy`, {\n        error: error.message,\n        strategyId\n      });\n      return false;\n    }\n  }\n}\n\nmodule.exports = new TradingStrategyEngine();"],"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","ignoreList":[]}