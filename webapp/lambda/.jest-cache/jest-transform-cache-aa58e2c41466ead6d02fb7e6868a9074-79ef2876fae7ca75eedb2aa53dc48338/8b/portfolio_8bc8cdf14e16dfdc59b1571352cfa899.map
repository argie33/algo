{"version":3,"names":["cov_aj5g330h5","actualCoverage","express","s","require","query","healthCheck","initializeDatabase","tablesExist","safeQuery","transaction","authenticateToken","createValidationMiddleware","sanitizers","apiKeyService","AlpacaService","portfolioDataRefreshService","logger","portfolioAnalytics","crypto","LOG_LEVEL","b","process","env","shouldLog","level","f","levels","DEBUG","INFO","WARN","ERROR","router","Router","use","portfolioValidationSchemas","holdings","includeMetadata","type","sanitizer","value","boolean","defaultValue","validator","errorMessage","refresh","limit","number","min","max","Number","isInteger","offset","performance","period","string","maxLength","toUpperCase","includes","timeframe","positions","symbol","test","includeClosedPositions","forceRefresh","syncMetadata","analytics","includeBenchmark","PORTFOLIO_TABLES","required","optional","checkPortfolioTableDependencies","requestId","checkStart","Date","now","console","log","allTables","length","join","tableCheckStart","tableStatus","tableCheckDuration","missingRequired","filter","table","missingOptional","availableRequired","availableOptional","summary","totalTables","requiredAvailable","requiredMissing","optionalAvailable","optionalMissing","available","missing","checkDuration","error","missingTables","impact","recommendation","tablesNeeded","warn","hasRequiredTables","totalDuration","result","databaseOperationsEnabled","timestamp","toISOString","errorDuration","message","errorCode","code","errorStack","stack","get","req","res","randomUUID","split","requestStart","userId","user","sub","substring","userAgent","headers","ip","unauthorized","tableDeps","total_positions","total_market_value","total_unrealized_pl","avg_unrealized_plpc","metadata","account_type","last_sync","total_equity","holdingsQueryStart","holdingsQuery","metadataQuery","queryStart","holdingsResult","metadataResult","Promise","all","queryDuration","holdingsRows","rows","metadataRows","holdingsData","metadataData","totalPositions","totalMarketValue","totalUnrealizedPL","avgUnrealizedPLPC","accountType","lastSync","totalEquity","dbError","sqlState","availableTables","parseInt","credentialsStart","credentials","getUserApiKey","credentialsDuration","provider","isSandbox","keyLength","apiKey","secretLength","apiSecret","alpacaStart","alpaca","account","getAccount","alpacaDuration","portfolioValue","equity","buyingPower","accountStatus","status","daytradeCount","detailed_diagnostics","user_id","credentials_check","database_connection","secrets_manager_access","potential_causes","apiError","apiErrorDuration","api_call_duration","error_type","name","error_code","underlying_issues","troubleshooting_steps","dataSource","responseData","portfolio_summary","parseFloat","account_info","is_connected","database_status","tables_available","missing_tables","available_tables","data_source","check_duration_ms","available_endpoints","request_info","request_id","total_duration_ms","isConnected","success","duration","requestDuration","serverError","originalError","NODE_ENV","undefined","fetchAlpacaPortfolio","quantity","avgCost","currentPrice","totalValue","totalPnL","totalPnLPercent","fetchTDAmeritradePortfolio","storePortfolioData","apiKeyId","portfolioData","Error","client","batchSize","i","batch","slice","values","params","paramIndex","forEach","position","push","averageEntryPrice","marketValue","unrealizedPL","unrealizedPLPercent","side","Math","floor","rawAccountType","allowedAccountTypes","totalCount","storedHoldings","reduce","sum","h","market_value","totalGainLoss","unrealized_pl","formattedHoldings","map","company","shares","avg_cost","current_price","gainLoss","gainLossPercent","unrealized_plpc","sector","allocation","lastUpdated","updated_at","total","portfolioSuccess","totalGainLossPercent","numPositions","pagination","hasMore","requestedProvider","badRequest","actions","environment","hasSecret","credentialsError","json","details","error_duration_ms","serviceInitStart","serviceInitDuration","hasApiKey","serviceError","positionsStart","race","getPositions","_","reject","setTimeout","positionsDuration","positionCount","positionsError","statusCode","timeout_duration_ms","p","data","requestedType","availableType","configured_type","requested_type","symbolsTable","symbols","stock_symbols","requiredTables","gain_loss","gain_loss_percent","industry","sectorMap","acc","holding","sectorAllocation","Object","entries","sort","a","symbols_table_used","emptyHoldings","accountData","dayChange","balance","dayChangePercent","cash","pendingDeposits","patternDayTrader","tradingBlocked","accountBlocked","createdAt","attempted_operations","system_checks","accountId","availableBalance","maintenance","currency","getDecryptedApiKey","availableAccounts","description","isActive","portfolioSummary","getPortfolioSummary","totalReturn","totalReturnPercent","sharpeRatio","riskMetrics","volatility","beta","maxDrawdown","riskScore","pos","cost_basis","costBasis","pnl","pnl_percent","weight","last_updated","topSector","concentration","fromEntries","annualizedReturn","winRate","numTrades","avgWin","avgLoss","profitFactor","dataPoints","benchmarkComparison","portfolioReturn","spyReturn","alpha","rSquared","totalCost","simpleSectorAllocation","note","severity","detail","constraint","column","dbHealth","tableCheck","database","post","getDataLoadingStatus","body","triggerPortfolioDataRefresh","locals","startTime","memoryUsage","DB_SECRET_ARN","AWS_REGION","dbTestStart","livePerformanceData","portfolioHistory","getPortfolioHistory","index","date","dailyReturn","performanceData","portfolioQuery","row","portfolio_value","total_pnl","calculatePortfolioAnalytics","sectorAnalysis","calculateSectorAnalysis","metrics","informationRatio","calmarRatio","abs","sortinoRatio","var95","averageWin","averageLoss","diversificationScore","concentrationRisk","queryError","mockBenchmarkData","generateMockBenchmarkData","generateMockPerformanceData","getDataPointsForTimeframe","startDate","setDate","getDate","baseValue","growth","random","benchmarkValue","benchmark","return","broker","keyId","keys","isEnabled","debug","debugResult","k","id","is_active","specificKeyCheck","key","totalKeysResult","userAlpacaKeys","debugError","specificKeyResult","keyData","decryptApiKey","encrypted","encrypted_api_key","iv","key_iv","authTag","key_auth_tag","user_salt","encrypted_api_secret","secret_iv","secret_auth_tag","is_sandbox","keyError","toLowerCase","initError","activities","getActivities","actError","dataError","cashBalance","buying_power","qty","avg_entry_price","lastday_price","lastTradeTime","lastday_price_timeframe","trading_blocked","transfersBlocked","transfers_blocked","account_blocked","created_at","pattern_day_trader","daytrade_count","lastEquity","last_equity","activity","activityType","activity_type","price","netAmount","net_amount","successResponse","imported","unrealizedPLPC","recentActivities","statistics","longPositions","shortPositions","topGainer","Infinity","topLoser","errorType","constructor","endpoint","method","path","emptyConnectionResult","connection","valid","accountInfo","permissions","rateLimit","remaining","resetTime","apiKeys","lastUsed","objective","constraints","includeAssets","excludeAssets","lookbackDays","OptimizationEngine","moduleError","mockResult","optimization","expectedReturn","weights","rebalancing","insights","title","universeSize","analysisDate","optimizer","runOptimization","currentPortfolio","optimizedWeights","riskAnalysis","sectorExposure","technology","healthcare","finance","consumer","toFixed","recommendations","primaryRecommendation","find","round","expectedImprovement","volatilityReduction","returnIncrease","topActions","timeToRebalance","fullOptimization","trades","confirmationToken","Array","isArray","executionResults","trade","executionPrice","action","marketPrice","executionTime","fees","tradeValue","orderId","toString","substr","totalTrades","totalVolume","totalFees","executionSummary","tradeResults","nextRebalanceDate","timeHorizon","confidenceLevel","history","catch","e","returns","meanReturn","r","variance","pow","sqrt","sortedReturns","var95Index","var99Index","var99","peak","drawdown","correlationWithMarket","techWeight","riskFactors","sectorConcentration","sectorWeights","factor","exposure","contribution","portfolioRisk","stressTesting","marketCrash2020","portfolioLoss","marketLoss","dotComBubble","financialCrisis2008","hasHistoricalData","hasCurrentPositions","force","PortfolioSyncService","syncService","conflictResolutionStrategy","enablePerformanceTracking","currentSyncStatus","getSyncStatus","currentSyncId","syncId","stage","syncResult","syncUserPortfolio","recordsProcessed","totalRecordsProcessed","conflictsResolved","totalConflictsResolved","stages","syncDuration","syncStatus","serviceMetrics","getMetrics","userSync","performanceQuery","performanceResult","portfolioAnalyticsResult","factorAnalysisResult","portfolioFactorAnalysis","performFactorAnalysis","positionAnalysis","unrealizedReturn","riskContribution","portfolioVaR","expectedShortfall","diversificationBenefit","maxPositionWeight","activePositions","riskBudgetUtilization","performanceAttribution","sectorContribution","topContributors","topDetractors","rebalancingRecommendations","overweightPositions","priority","affectedPositions","overweightSectors","affectedSectors","response","factorAnalysis","calculatedAt","PortfolioOptimizationEngine","positionsCount","preferences","riskTolerance","maxPositionSize","maxPosition","minPositionSize","minPosition","rebalanceThreshold","threshold","optimizationResults","optimizePortfolio","currentAllocation","targetAllocation","expectedVolatility","currentPortfolioValue","rebalanceNeeded","estimatedTradingCost","dryRun","alpacaService","totalEstimatedCost","estimatedPrice","estimatedCost","order","createOrder","time_in_force","timeInForce","filledPrice","filled_avg_price","filledQuantity","filled_qty","tradeError","successfulTrades","failedTrades","analysis","industryAllocation","marketCapAllocation","large","mid","small","marketCap","market_cap","portfolioBeta","avgPE","pe","pe_ratio","avgDividendYield","dividend","dividend_yield","suggestions","topPositions","top5Concentration","maxSectorAllocation","allocations","percentage","csvHeaders","csvRows","company_name","purchase_date","volume","csvContent","cell","filename","setHeader","send","summaryResult","total_value","sectorBreakdown","exportData","exportDate","exportType","total_gain_loss","companyName","purchaseDate","peRatio","dividendYield","positions_count","averageGainLoss","csvData","importMode","lines","trim","replace","dataLines","requiredColumns","missingColumns","col","importedHoldings","errors","line","v","header","parsedHolding","parseError","insertedCount","updatedCount","existingResult","totalRows","validRows","errorCount","companyResult","companyError","positionError","importSource","sandbox","PortfolioAlerts","portfolioAlerts","filters","alertType","alerts","getUserPortfolioAlerts","count","condition","notificationPreferences","expiryDate","alertConfig","newAlert","createPortfolioAlert","put","alertId","updates","updatedAlert","updatePortfolioAlert","delete","deletedAlert","deletePortfolioAlert","notifications","getPortfolioAlertNotifications","processUserPortfolioAlerts","processedCount","triggeredCount","alertTypes","alertTypeDefinitions","ALLOCATION_DRIFT","conditions","thresholdType","requiresSymbol","example","POSITION_GAIN_LOSS","PORTFOLIO_VALUE_CHANGE","SECTOR_CONCENTRATION","POSITION_SIZE_CHANGE","BETA_CHANGE","REBALANCE_NEEDED","module","exports"],"sources":["portfolio.js"],"sourcesContent":["const express = require('express');\nconst { query, healthCheck, initializeDatabase, tablesExist, safeQuery, transaction } = require('../utils/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst AlpacaService = require('../utils/alpacaService');\nconst portfolioDataRefreshService = require('../utils/portfolioDataRefresh');\nconst logger = require('../utils/logger');\nconst portfolioAnalytics = require('../utils/portfolioAnalytics');\nconst crypto = require('crypto');\n\n// Conditional logging configuration\nconst LOG_LEVEL = process.env.LOG_LEVEL || 'INFO';\nconst shouldLog = (level) => {\n  const levels = { DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3 };\n  return levels[level] >= levels[LOG_LEVEL];\n};\n\nconst router = express.Router();\n\n// Apply authentication middleware to ALL portfolio routes\nrouter.use(authenticateToken);\n\n// Validation schemas for portfolio endpoints\nconst portfolioValidationSchemas = {\n  holdings: {\n    includeMetadata: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeMetadata must be true or false'\n    },\n    refresh: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'refresh must be true or false'\n    },\n    limit: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 1, max: 1000, defaultValue: 100 }),\n      validator: (value) => Number.isInteger(value) && value >= 1 && value <= 1000,\n      errorMessage: 'limit must be an integer between 1 and 1000'\n    },\n    offset: {\n      type: 'number',\n      sanitizer: (value) => sanitizers.number(value, { min: 0, defaultValue: 0 }),\n      validator: (value) => Number.isInteger(value) && value >= 0,\n      errorMessage: 'offset must be a non-negative integer'\n    }\n  },\n  \n  performance: {\n    period: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, toUpperCase: true, defaultValue: '1M' }),\n      validator: (value) => ['1D', '1W', '1M', '3M', '6M', '1Y', 'YTD', 'ALL'].includes(value),\n      errorMessage: 'Period must be one of: 1D, 1W, 1M, 3M, 6M, 1Y, YTD, ALL'\n    },\n    timeframe: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, defaultValue: '1Day' }),\n      validator: (value) => ['1Min', '5Min', '15Min', '1Hour', '1Day'].includes(value),\n      errorMessage: 'Timeframe must be one of: 1Min, 5Min, 15Min, 1Hour, 1Day'\n    }\n  },\n  \n  positions: {\n    symbol: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.symbol(value),\n      validator: (value) => !value || /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    includeClosedPositions: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeClosedPositions must be true or false'\n    }\n  },\n  \n  refresh: {\n    forceRefresh: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'forceRefresh must be true or false'\n    },\n    syncMetadata: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'syncMetadata must be true or false'\n    }\n  },\n  \n  analytics: {\n    includeBenchmark: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeBenchmark must be true or false'\n    },\n    period: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10, toUpperCase: true, defaultValue: '1Y' }),\n      validator: (value) => ['1M', '3M', '6M', '1Y', '2Y', '5Y', 'ALL'].includes(value),\n      errorMessage: 'Period must be one of: 1M, 3M, 6M, 1Y, 2Y, 5Y, ALL'\n    }\n  }\n};\n\n// Portfolio table dependencies and fallback handling\nconst PORTFOLIO_TABLES = {\n  required: ['portfolio_holdings', 'portfolio_metadata', 'user_api_keys'],\n  optional: ['symbols', 'stock_symbols', 'market_data', 'key_metrics']\n};\n\n/**\n * Check portfolio table availability with comprehensive logging and error identification\n */\nasync function checkPortfolioTableDependencies(requestId = 'unknown') {\n  const checkStart = Date.now();\n  if (shouldLog('DEBUG')) console.log(`🔍 [${requestId}] Starting portfolio table dependency check`);\n  \n  try {\n    // Initialize database if not already done\n    await initializeDatabase();\n    console.log(`✅ [${requestId}] Database initialized for table check`);\n    \n    const allTables = [...PORTFOLIO_TABLES.required, ...PORTFOLIO_TABLES.optional];\n    console.log(`🔍 [${requestId}] Checking ${allTables.length} tables: ${allTables.join(', ')}`);\n    \n    const tableCheckStart = Date.now();\n    const tableStatus = await tablesExist(allTables);\n    const tableCheckDuration = Date.now() - tableCheckStart;\n    \n    console.log(`✅ [${requestId}] Table existence check completed in ${tableCheckDuration}ms`);\n    \n    const missingRequired = PORTFOLIO_TABLES.required.filter(table => !tableStatus[table]);\n    const missingOptional = PORTFOLIO_TABLES.optional.filter(table => !tableStatus[table]);\n    const availableRequired = PORTFOLIO_TABLES.required.filter(table => tableStatus[table]);\n    const availableOptional = PORTFOLIO_TABLES.optional.filter(table => tableStatus[table]);\n    \n    // Detailed logging of table status\n    console.log(`📊 [${requestId}] Portfolio table status analysis:`, {\n      summary: {\n        totalTables: allTables.length,\n        requiredAvailable: availableRequired.length,\n        requiredMissing: missingRequired.length,\n        optionalAvailable: availableOptional.length,\n        optionalMissing: missingOptional.length\n      },\n      required: {\n        available: availableRequired,\n        missing: missingRequired\n      },\n      optional: {\n        available: availableOptional,\n        missing: missingOptional\n      },\n      checkDuration: `${tableCheckDuration}ms`\n    });\n    \n    // Log critical issues\n    if (missingRequired.length > 0) {\n      console.error(`❌ [${requestId}] CRITICAL: Missing required portfolio tables:`, {\n        missingTables: missingRequired,\n        impact: 'Portfolio database operations will fail',\n        recommendation: 'Run database initialization scripts',\n        tablesNeeded: missingRequired\n      });\n    }\n    \n    if (missingOptional.length > 0) {\n      console.warn(`⚠️ [${requestId}] WARNING: Missing optional portfolio tables:`, {\n        missingTables: missingOptional,\n        impact: 'Some portfolio features may be limited',\n        recommendation: 'Consider running optional table creation scripts'\n      });\n    }\n    \n    const hasRequiredTables = missingRequired.length === 0;\n    const totalDuration = Date.now() - checkStart;\n    \n    console.log(`✅ [${requestId}] Portfolio table dependency check completed in ${totalDuration}ms`, {\n      result: hasRequiredTables ? 'SUCCESS - All required tables available' : 'FAILURE - Missing required tables',\n      databaseOperationsEnabled: hasRequiredTables\n    });\n    \n    return {\n      hasRequiredTables,\n      missingRequired,\n      missingOptional,\n      availableRequired,\n      availableOptional,\n      tableStatus,\n      checkDuration: totalDuration,\n      requestId,\n      timestamp: new Date().toISOString()\n    };\n    \n  } catch (error) {\n    const errorDuration = Date.now() - checkStart;\n    console.error(`❌ [${requestId}] Portfolio table dependency check FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorCode: error.code,\n      errorStack: error.stack,\n      impact: 'Cannot determine table availability - assuming tables missing',\n      recommendation: 'Check database connectivity and permissions'\n    });\n    \n    return {\n      hasRequiredTables: false,\n      missingRequired: PORTFOLIO_TABLES.required,\n      missingOptional: PORTFOLIO_TABLES.optional,\n      availableRequired: [],\n      availableOptional: [],\n      tableStatus: {},\n      checkDuration: errorDuration,\n      error: error.message,\n      requestId,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n// Portfolio overview endpoint (root) - requires authentication and provides portfolio summary\nrouter.get('/', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    const userId = req.user?.sub;\n    console.log(`🚀 [${requestId}] Portfolio overview request initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    if (!userId) {\n      console.error(`❌ [${requestId}] Authentication failure - no user ID found`);\n      return res.unauthorized('User authentication required', { requestId });\n    }\n\n    // Check table dependencies before attempting queries with detailed logging\n    console.log(`🔍 [${requestId}] Checking portfolio table dependencies`);\n    const tableDeps = await checkPortfolioTableDependencies(requestId);\n    \n    let summary = {\n      total_positions: 0,\n      total_market_value: 0,\n      total_unrealized_pl: 0,\n      avg_unrealized_plpc: 0\n    };\n    \n    let metadata = {\n      account_type: 'not_connected',\n      last_sync: null,\n      total_equity: 0\n    };\n\n    if (tableDeps.hasRequiredTables) {\n      console.log(`✅ [${requestId}] All required tables available - proceeding with database queries`);\n      \n      try {\n        // Get user's portfolio summary from database with detailed logging\n        console.log(`📊 [${requestId}] Executing portfolio holdings query`);\n        const holdingsQueryStart = Date.now();\n        \n        const holdingsQuery = `\n          SELECT \n            COUNT(*) as total_positions,\n            COALESCE(SUM(market_value), 0) as total_market_value,\n            COALESCE(SUM(unrealized_pl), 0) as total_unrealized_pl,\n            COALESCE(AVG(unrealized_plpc), 0) as avg_unrealized_plpc\n          FROM portfolio_holdings \n          WHERE user_id = $1\n        `;\n        \n        console.log(`📊 [${requestId}] Executing portfolio metadata query`);\n        const metadataQuery = `\n          SELECT \n            account_type,\n            last_sync,\n            COALESCE(total_equity, 0) as total_equity\n          FROM portfolio_metadata \n          WHERE user_id = $1\n          ORDER BY last_sync DESC\n          LIMIT 1\n        `;\n\n        const queryStart = Date.now();\n        const [holdingsResult, metadataResult] = await Promise.all([\n          safeQuery(holdingsQuery, [userId], ['portfolio_holdings']),\n          safeQuery(metadataQuery, [userId], ['portfolio_metadata'])\n        ]);\n        const queryDuration = Date.now() - queryStart;\n        \n        console.log(`✅ [${requestId}] Portfolio database queries completed in ${queryDuration}ms`, {\n          holdingsRows: holdingsResult.rows.length,\n          metadataRows: metadataResult.rows.length,\n          holdingsData: holdingsResult.rows[0],\n          metadataData: metadataResult.rows[0]\n        });\n\n        if (holdingsResult.rows.length > 0) {\n          summary = holdingsResult.rows[0];\n          console.log(`✅ [${requestId}] Portfolio holdings data retrieved:`, {\n            totalPositions: summary.total_positions,\n            totalMarketValue: summary.total_market_value,\n            totalUnrealizedPL: summary.total_unrealized_pl,\n            avgUnrealizedPLPC: summary.avg_unrealized_plpc\n          });\n        } else {\n          console.warn(`⚠️ [${requestId}] No portfolio holdings found for user - using default values`);\n        }\n        \n        if (metadataResult.rows.length > 0) {\n          metadata = metadataResult.rows[0];\n          console.log(`✅ [${requestId}] Portfolio metadata retrieved:`, {\n            accountType: metadata.account_type,\n            lastSync: metadata.last_sync,\n            totalEquity: metadata.total_equity\n          });\n        } else {\n          console.warn(`⚠️ [${requestId}] No portfolio metadata found for user - using default values`);\n        }\n        \n      } catch (dbError) {\n        const errorDuration = Date.now() - queryStart;\n        console.error(`❌ [${requestId}] Portfolio database query FAILED after ${errorDuration}ms:`, {\n          error: dbError.message,\n          errorCode: dbError.code,\n          errorStack: dbError.stack,\n          sqlState: dbError.sqlState,\n          impact: 'Using default portfolio values',\n          recommendation: 'Check database connectivity and table structure'\n        });\n        // Continue with default values\n      }\n    } else {\n      console.error(`❌ [${requestId}] Required portfolio tables missing - cannot query database:`, {\n        missingTables: tableDeps.missingRequired,\n        availableTables: tableDeps.availableRequired,\n        impact: 'Portfolio data will be retrieved from API or default values',\n        recommendation: 'Run database initialization to create missing tables'\n      });\n    }\n\n    // Try to get fresh data from broker API if no database data with comprehensive logging\n    if (parseInt(summary.total_positions) === 0) {\n      console.log(`🔄 [${requestId}] No portfolio positions found in database - attempting API fallback`);\n      \n      try {\n        console.log(`🔑 [${requestId}] Retrieving user API credentials for Alpaca`);\n        const credentialsStart = Date.now();\n        const credentials = await getUserApiKey(userId, 'alpaca');\n        const credentialsDuration = Date.now() - credentialsStart;\n        \n        if (credentials) {\n          console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n            provider: 'alpaca',\n            isSandbox: credentials.isSandbox,\n            keyLength: credentials.apiKey ? credentials.apiKey.length : 0,\n            secretLength: credentials.apiSecret ? credentials.apiSecret.length : 0\n          });\n          \n          console.log(`📡 [${requestId}] Initializing Alpaca API service`);\n          const alpacaStart = Date.now();\n          const alpaca = new AlpacaService(\n            credentials.apiKey,\n            credentials.apiSecret,\n            credentials.isSandbox\n          );\n          \n          console.log(`📊 [${requestId}] Fetching account data from Alpaca API`);\n          const account = await alpaca.getAccount();\n          const alpacaDuration = Date.now() - alpacaStart;\n          \n          if (account) {\n            console.log(`✅ [${requestId}] Alpaca account data retrieved in ${alpacaDuration}ms:`, {\n              portfolioValue: account.portfolioValue,\n              equity: account.equity,\n              buyingPower: account.buyingPower,\n              accountStatus: account.status,\n              daytradeCount: account.daytradeCount\n            });\n            \n            summary.total_market_value = account.portfolioValue || 0;\n            summary.total_equity = account.equity || 0;\n            metadata.account_type = credentials.isSandbox ? 'paper' : 'live';\n            metadata.last_sync = new Date().toISOString();\n            \n            console.log(`✅ [${requestId}] Portfolio data updated from Alpaca API:`, {\n              totalMarketValue: summary.total_market_value,\n              totalEquity: summary.total_equity,\n              accountType: metadata.account_type,\n              lastSync: metadata.last_sync\n            });\n          } else {\n            console.warn(`⚠️ [${requestId}] Alpaca API returned empty account data`);\n          }\n        } else {\n          console.warn(`⚠️ [${requestId}] No Alpaca API credentials found for user - cannot fetch live data`, {\n            impact: 'Portfolio will show default/empty values',\n            recommendation: 'User needs to configure Alpaca API keys in settings',\n            detailed_diagnostics: {\n              user_id: userId,\n              credentials_check: 'failed',\n              database_connection: 'available',\n              secrets_manager_access: 'unknown',\n              potential_causes: [\n                'User has not configured API keys in settings',\n                'API keys failed validation during storage',\n                'Database connection issue during key retrieval',\n                'Secrets Manager access issues',\n                'API key service initialization failure'\n              ]\n            }\n          });\n        }\n      } catch (apiError) {\n        const apiErrorDuration = Date.now() - credentialsStart || 0;\n        console.error(`❌ [${requestId}] Alpaca API fallback FAILED after ${apiErrorDuration}ms:`, {\n          error: apiError.message,\n          errorStack: apiError.stack,\n          errorCode: apiError.code,\n          impact: 'Portfolio will show database values or defaults',\n          recommendation: 'Check API credentials and Alpaca service status',\n          detailed_diagnostics: {\n            user_id: userId,\n            api_call_duration: apiErrorDuration,\n            error_type: apiError.name,\n            error_code: apiError.code,\n            underlying_issues: [\n              'API key authentication failed',\n              'Network connectivity issues',\n              'Alpaca service rate limiting',\n              'Invalid API credentials format',\n              'Expired or revoked API keys',\n              'Service circuit breaker triggered'\n            ],\n            troubleshooting_steps: [\n              'Verify API key configuration in settings',\n              'Check API key permissions on Alpaca',\n              'Test network connectivity to Alpaca',\n              'Review rate limiting status',\n              'Check service health status'\n            ]\n          }\n        });\n        // Continue with existing values\n      }\n    } else {\n      console.log(`✅ [${requestId}] Portfolio data available from database - skipping API fallback`, {\n        totalPositions: summary.total_positions,\n        dataSource: 'database'\n      });\n    }\n\n    // Prepare final response with comprehensive logging\n    const totalDuration = Date.now() - requestStart;\n    const responseData = {\n      user_id: userId,\n      portfolio_summary: {\n        total_positions: parseInt(summary.total_positions) || 0,\n        total_market_value: parseFloat(summary.total_market_value) || 0,\n        total_unrealized_pl: parseFloat(summary.total_unrealized_pl) || 0,\n        avg_unrealized_plpc: parseFloat(summary.avg_unrealized_plpc) || 0,\n        total_equity: parseFloat(metadata.total_equity) || parseFloat(summary.total_market_value) || 0\n      },\n      account_info: {\n        account_type: metadata.account_type,\n        last_sync: metadata.last_sync,\n        is_connected: metadata.account_type !== 'not_connected'\n      },\n      database_status: {\n        tables_available: tableDeps.hasRequiredTables,\n        missing_tables: tableDeps.missingRequired,\n        available_tables: tableDeps.availableRequired,\n        data_source: tableDeps.hasRequiredTables ? 'database' : 'api_fallback',\n        check_duration_ms: tableDeps.checkDuration\n      },\n      available_endpoints: [\n        '/portfolio/holdings - Portfolio holdings data',\n        '/portfolio/performance - Performance metrics and charts',\n        '/portfolio/analytics - Advanced portfolio analytics',\n        '/portfolio/allocations - Asset allocation breakdown',\n        '/portfolio/import - Import portfolio data from brokers'\n      ],\n      request_info: {\n        request_id: requestId,\n        total_duration_ms: totalDuration,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.log(`✅ [${requestId}] Portfolio overview completed successfully in ${totalDuration}ms`, {\n      summary: {\n        totalPositions: responseData.portfolio_summary.total_positions,\n        totalMarketValue: responseData.portfolio_summary.total_market_value,\n        accountType: responseData.account_info.account_type,\n        dataSource: responseData.database_status.data_source,\n        isConnected: responseData.account_info.is_connected\n      },\n      performance: {\n        totalDuration: `${totalDuration}ms`,\n        tableCheckDuration: `${tableDeps.checkDuration}ms`\n      },\n      status: 'SUCCESS'\n    });\n\n    res.success(responseData, {\n      requestId,\n      duration: `${totalDuration}ms`\n    });\n    \n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Portfolio overview FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack,\n      errorCode: error.code,\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      requestDuration: `${errorDuration}ms`,\n      impact: 'Portfolio overview request failed completely',\n      recommendation: 'Check logs for specific failure point'\n    });\n    \n    res.serverError('Failed to fetch portfolio overview', {\n      requestId,\n      duration: `${errorDuration}ms`,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Using standardized getUserApiKey from userApiKeyHelper instead\n\n// Using standardized getUserApiKey from userApiKeyHelper for decryption\n\n// Broker API integration functions\nasync function fetchAlpacaPortfolio(apiKey, isSandbox) {\n  console.log(`📡 Fetching Alpaca portfolio (sandbox: ${isSandbox})`);\n  \n  // This is where you'd integrate with the actual Alpaca API\n  // For now, return mock data that simulates a successful API call\n  return {\n    positions: [\n      { symbol: 'AAPL', quantity: 100, avgCost: 150.25, currentPrice: 165.50 },\n      { symbol: 'MSFT', quantity: 50, avgCost: 250.75, currentPrice: 280.25 },\n      { symbol: 'GOOGL', quantity: 25, avgCost: 2500.00, currentPrice: 2650.75 }\n    ],\n    totalValue: 191743.75,\n    totalPnL: 19468.58,\n    totalPnLPercent: 11.3\n  };\n}\n\nasync function fetchTDAmeritradePortfolio(apiKey, isSandbox) {\n  console.log(`📡 Fetching TD Ameritrade portfolio (sandbox: ${isSandbox})`);\n  \n  // This is where you'd integrate with the actual TD Ameritrade API\n  // For now, return mock data that simulates a successful API call\n  return {\n    positions: [\n      { symbol: 'TSLA', quantity: 75, avgCost: 200.50, currentPrice: 220.25 },\n      { symbol: 'NVDA', quantity: 40, avgCost: 450.00, currentPrice: 480.50 }\n    ],\n    totalValue: 135720.00,\n    totalPnL: 12850.00,\n    totalPnLPercent: 9.5\n  };\n}\n\n// Store portfolio data in database with transaction for data integrity\nasync function storePortfolioData(userId, apiKeyId, portfolioData, accountType) {\n  console.log(`💾 Storing portfolio data with transaction for data integrity`);\n  // Security: Don't log user IDs in portfolio operations\n  \n  try {\n    // Check if required tables exist before attempting to store data\n    const tableDeps = await checkPortfolioTableDependencies();\n    \n    if (!tableDeps.hasRequiredTables) {\n      console.warn('⚠️ Cannot store portfolio data - required tables missing:', tableDeps.missingRequired);\n      throw new Error(`Required database tables not available: ${tableDeps.missingRequired.join(', ')}`);\n    }\n    \n    // Execute all portfolio operations in a single transaction\n    await transaction(async (client) => {\n      console.log('🔄 Starting portfolio data transaction');\n      \n      // Clear existing portfolio data for this user and API key\n      await client.query(`\n        DELETE FROM portfolio_holdings \n        WHERE user_id = $1 AND api_key_id = $2\n      `, [userId, apiKeyId]);\n      \n      console.log(`🗑️ Cleared existing portfolio holdings`);\n      \n      // Insert new portfolio holdings in efficient batch\n      if (portfolioData.positions.length > 0) {\n        const batchSize = 100; // Process in chunks to avoid memory issues\n        for (let i = 0; i < portfolioData.positions.length; i += batchSize) {\n          const batch = portfolioData.positions.slice(i, i + batchSize);\n          \n          // Build VALUES clause for batch insert\n          const values = [];\n          const params = [];\n          let paramIndex = 1;\n          \n          batch.forEach(position => {\n            values.push(`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW(), NOW())`);\n            params.push(\n              userId,\n              apiKeyId,\n              position.symbol,\n              position.quantity,\n              position.avgCost || position.averageEntryPrice,\n              position.currentPrice,\n              position.marketValue || (position.quantity * position.currentPrice),\n              position.unrealizedPL || ((position.currentPrice - (position.avgCost || position.averageEntryPrice)) * position.quantity),\n              position.unrealizedPLPercent || (((position.currentPrice - (position.avgCost || position.averageEntryPrice)) / (position.avgCost || position.averageEntryPrice)) * 100),\n              position.side || 'long',\n              accountType,\n              'alpaca'\n            );\n          });\n          \n          await client.query(`\n            INSERT INTO portfolio_holdings (\n              user_id, api_key_id, symbol, quantity, avg_cost, \n              current_price, market_value, unrealized_pl, unrealized_plpc, \n              side, account_type, broker, created_at, updated_at\n            ) VALUES ${values.join(', ')}\n          `, params);\n          \n          console.log(`📈 Inserted batch ${Math.floor(i/batchSize) + 1}: ${batch.length} holdings`);\n        }\n      }\n      console.log(`📈 Inserted ${portfolioData.positions.length} portfolio holdings`);\n      \n      // Update portfolio metadata\n      await client.query(`\n        INSERT INTO portfolio_metadata (\n          user_id, api_key_id, total_equity, total_market_value, \n          total_unrealized_pl, total_unrealized_plpc, account_type, \n          broker, last_sync, created_at, updated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW(), NOW())\n        ON CONFLICT (user_id, api_key_id) DO UPDATE SET\n          total_equity = EXCLUDED.total_equity,\n          total_market_value = EXCLUDED.total_market_value,\n          total_unrealized_pl = EXCLUDED.total_unrealized_pl,\n          total_unrealized_plpc = EXCLUDED.total_unrealized_plpc,\n          account_type = EXCLUDED.account_type,\n          broker = EXCLUDED.broker,\n          last_sync = NOW(),\n          updated_at = NOW()\n      `, [\n        userId,\n        apiKeyId,\n        portfolioData.totalValue,\n        portfolioData.totalValue,\n        portfolioData.totalPnL,\n        portfolioData.totalPnLPercent,\n        accountType,\n        'alpaca'\n      ]);\n      \n      console.log(`📊 Updated portfolio metadata`);\n      return { success: true, positions: portfolioData.positions.length };\n    });\n    \n    console.log(`✅ Portfolio data transaction completed successfully`);\n  } catch (error) {\n    console.error('❌ Failed to store portfolio data:', error.message);\n    throw error;\n  }\n}\n\n// Portfolio holdings endpoint - uses real data from broker APIs with comprehensive API key error handling\nrouter.get('/holdings', createValidationMiddleware(portfolioValidationSchemas.holdings), async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    // Security: Validate and sanitize query parameters\n    const rawAccountType = req.query.accountType || 'paper';\n    const allowedAccountTypes = ['paper', 'live'];\n    const accountType = allowedAccountTypes.includes(rawAccountType) ? rawAccountType : 'paper';\n    \n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    \n    console.log(`🚀 [${requestId}] Portfolio holdings request initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      accountType,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    console.log(`📊 [${requestId}] Account type requested: ${accountType}`);\n    \n    // Check table dependencies first\n    const tableDeps = await checkPortfolioTableDependencies();\n    \n    // Try to get real data from database first, filtered by account type\n    try {\n      console.log(`🔍 [HOLDINGS] Looking for stored portfolio data, account type: ${accountType}`);\n      // Security: Don't log user IDs in portfolio operations\n      \n      if (!tableDeps.hasRequiredTables) {\n        console.warn('⚠️ [HOLDINGS] Required portfolio tables missing, skipping database query:', tableDeps.missingRequired);\n        throw new Error('Database tables not available');\n      }\n      \n      // Get user's API keys filtered by account type (sandbox for paper, live for live)\n      const isSandbox = accountType === 'paper';\n      const limit = req.query.limit || 100;\n      const offset = req.query.offset || 0;\n      \n      // Get total count for pagination metadata\n      const totalCount = await safeQuery(`\n        SELECT COUNT(*) as total\n        FROM portfolio_holdings ph\n        JOIN user_api_keys uak ON ph.api_key_id = uak.id\n        WHERE ph.user_id = $1 AND uak.is_sandbox = $2 AND uak.is_active = true\n      `, [userId, isSandbox], ['portfolio_holdings', 'user_api_keys']);\n      \n      const storedHoldings = await safeQuery(`\n        SELECT ph.symbol, ph.quantity, ph.avg_cost, ph.current_price, \n               ph.market_value, ph.unrealized_pl, ph.unrealized_plpc, \n               ph.side, ph.account_type, ph.broker, ph.updated_at,\n               uak.provider, uak.is_sandbox\n        FROM portfolio_holdings ph\n        JOIN user_api_keys uak ON ph.api_key_id = uak.id\n        WHERE ph.user_id = $1 AND uak.is_sandbox = $2 AND uak.is_active = true\n        ORDER BY ph.market_value DESC\n        LIMIT $3 OFFSET $4\n      `, [userId, isSandbox, limit, offset], ['portfolio_holdings', 'user_api_keys']);\n      \n      if (storedHoldings.rows.length > 0) {\n        console.log(`✅ [HOLDINGS] Found ${storedHoldings.rows.length} stored holdings for ${accountType} account`);\n        \n        const holdings = storedHoldings.rows;\n        const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n        const totalGainLoss = holdings.reduce((sum, h) => sum + parseFloat(h.unrealized_pl || 0), 0);\n\n        const formattedHoldings = holdings.map(h => ({\n          symbol: h.symbol,\n          company: h.symbol + ' Inc.', // Would need company lookup\n          shares: parseFloat(h.quantity || 0),\n          avgCost: parseFloat(h.avg_cost || 0),\n          currentPrice: parseFloat(h.current_price || 0),\n          marketValue: parseFloat(h.market_value || 0),\n          gainLoss: parseFloat(h.unrealized_pl || 0),\n          gainLossPercent: parseFloat(h.unrealized_plpc || 0),\n          sector: 'Technology', // Would need sector lookup\n          allocation: totalValue > 0 ? (parseFloat(h.market_value || 0) / totalValue) * 100 : 0,\n          lastUpdated: h.updated_at\n        }));\n\n        const total = parseInt(totalCount.rows[0]?.total || 0);\n        \n        return res.portfolioSuccess({\n          holdings: formattedHoldings,\n          summary: {\n            totalValue: totalValue,\n            totalGainLoss: totalGainLoss,\n            totalGainLossPercent: totalValue > totalGainLoss ? (totalGainLoss / (totalValue - totalGainLoss)) * 100 : 0,\n            numPositions: holdings.length,\n            accountType: accountType,\n            dataSource: 'database'\n          },\n          pagination: {\n            total: total,\n            limit: parseInt(limit),\n            offset: parseInt(offset),\n            hasMore: (parseInt(offset) + parseInt(limit)) < total\n          }\n        }, accountType, null, { requestId });\n      }\n      \n      // If no stored data, try to get fresh data from broker API with comprehensive error handling\n      console.log(`📡 [${requestId}] No stored data found, attempting to fetch fresh data from broker API`);\n      const credentialsStart = Date.now();\n      \n      let credentials;\n      try {\n        credentials = await getUserApiKey(userId, 'alpaca');\n        const credentialsDuration = Date.now() - credentialsStart;\n        \n        if (!credentials) {\n          console.error(`❌ [${requestId}] No API credentials found after ${credentialsDuration}ms`, {\n            requestedProvider: 'alpaca',\n            accountType,\n            userId: `${userId.substring(0, 8)}...`,\n            impact: 'Portfolio holdings will not be available',\n            recommendation: 'User needs to configure Alpaca API keys in settings'\n          });\n          \n          return res.badRequest('API credentials not configured', {\n            requestId,\n            message: 'Please configure your Alpaca API keys in Settings to view portfolio holdings',\n            errorCode: 'API_CREDENTIALS_MISSING',\n            accountType: accountType,\n            provider: 'alpaca',\n            actions: [\n              'Go to Settings > API Keys',\n              'Add your Alpaca API credentials',\n              'Choose the correct environment (Paper Trading or Live Trading)',\n              'Test the connection to verify your credentials'\n            ]\n          });\n        }\n        \n        console.log(`✅ [${requestId}] API credentials retrieved in ${credentialsDuration}ms`, {\n          provider: 'alpaca',\n          environment: credentials.isSandbox ? 'sandbox' : 'live',\n          keyLength: credentials.apiKey ? credentials.apiKey.length : 0,\n          hasSecret: !!credentials.apiSecret\n        });\n        \n      } catch (credentialsError) {\n        const credentialsDuration = Date.now() - credentialsStart;\n        console.error(`❌ [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`, {\n          error: credentialsError.message,\n          errorStack: credentialsError.stack,\n          provider: 'alpaca',\n          impact: 'Cannot access portfolio data from broker',\n          recommendation: 'Check API key configuration and database connectivity'\n        });\n        \n        return res.status(500).json({\n          success: false,\n          error: 'Failed to retrieve API credentials',\n          message: 'There was an error accessing your API credentials. Please try again or contact support.',\n          error_code: 'API_CREDENTIALS_ERROR',\n          details: process.env.NODE_ENV === 'development' ? credentialsError.message : 'Internal error',\n          request_info: {\n            request_id: requestId,\n            error_duration_ms: credentialsDuration,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n      \n      console.log(`🔑 [HOLDINGS] Found credentials: account_type=${credentials.isSandbox ? 'sandbox' : 'live'}, requested=${isSandbox ? 'sandbox' : 'live'}`);\n      \n      if (credentials.isSandbox === isSandbox) {\n        console.log(`🔑 [${requestId}] Using API key: alpaca (${credentials.isSandbox ? 'sandbox' : 'live'})`);\n        \n        // Initialize Alpaca service with comprehensive error handling\n        console.log(`🏭 [${requestId}] Initializing Alpaca service`);\n        const serviceInitStart = Date.now();\n        let alpaca;\n        \n        try {\n          alpaca = new AlpacaService(\n            credentials.apiKey,\n            credentials.apiSecret,\n            credentials.isSandbox\n          );\n          const serviceInitDuration = Date.now() - serviceInitStart;\n          \n          console.log(`✅ [${requestId}] Alpaca service initialized in ${serviceInitDuration}ms`, {\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            hasApiKey: !!credentials.apiKey,\n            hasSecret: !!credentials.apiSecret\n          });\n          \n        } catch (serviceError) {\n          const serviceInitDuration = Date.now() - serviceInitStart;\n          console.error(`❌ [${requestId}] Alpaca service initialization FAILED after ${serviceInitDuration}ms:`, {\n            error: serviceError.message,\n            errorStack: serviceError.stack,\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            impact: 'Cannot access live portfolio data from broker',\n            recommendation: 'Check API key validity and Alpaca service status'\n          });\n          \n          return res.status(500).json({\n            success: false,\n            error: 'Failed to initialize trading service',\n            message: 'Unable to connect to your broker. Please verify your API credentials or try again later.',\n            error_code: 'TRADING_SERVICE_INIT_ERROR',\n            details: process.env.NODE_ENV === 'development' ? serviceError.message : 'Service initialization failed',\n            provider: 'alpaca',\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            actions: [\n              'Verify your API credentials are correct',\n              'Check if your API keys have sufficient permissions',\n              'Try switching between Paper Trading and Live Trading modes',\n              'Contact broker support if the issue persists'\n            ],\n            request_info: {\n              request_id: requestId,\n              error_duration_ms: serviceInitDuration,\n              timestamp: new Date().toISOString()\n            }\n          });\n        }\n        \n        // Fetch positions with comprehensive error handling\n        console.log(`📊 [${requestId}] Fetching portfolio positions from Alpaca API`);\n        const positionsStart = Date.now();\n        let positions;\n        \n        try {\n          positions = await Promise.race([\n            alpaca.getPositions(),\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error('Positions fetch timeout after 15 seconds')), 15000)\n            )\n          ]);\n          \n          const positionsDuration = Date.now() - positionsStart;\n          console.log(`✅ [${requestId}] Portfolio positions fetched in ${positionsDuration}ms`, {\n            positionCount: positions?.length || 0,\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            dataSource: 'alpaca_api'\n          });\n          \n        } catch (positionsError) {\n          const positionsDuration = Date.now() - positionsStart;\n          console.error(`❌ [${requestId}] Failed to fetch positions after ${positionsDuration}ms:`, {\n            error: positionsError.message,\n            errorStack: positionsError.stack,\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            errorCode: positionsError.code,\n            statusCode: positionsError.status,\n            impact: 'Live portfolio data unavailable',\n            recommendation: 'Check API key permissions and Alpaca service status'\n          });\n          \n          // Check for specific API errors\n          if (positionsError.message?.includes('timeout')) {\n            return res.status(504).json({\n              success: false,\n              error: 'Broker API timeout',\n              message: 'The broker API is taking too long to respond. Please try again.',\n              error_code: 'BROKER_API_TIMEOUT',\n              provider: 'alpaca',\n              environment: credentials.isSandbox ? 'sandbox' : 'live',\n              actions: [\n                'Try refreshing the page',\n                'Check your internet connection',\n                'Try again in a few minutes',\n                'Contact support if the issue persists'\n              ],\n              request_info: {\n                request_id: requestId,\n                timeout_duration_ms: positionsDuration,\n                timestamp: new Date().toISOString()\n              }\n            });\n          }\n          \n          if (positionsError.status === 401 || positionsError.message?.includes('unauthorized')) {\n            return res.status(401).json({\n              success: false,\n              error: 'Invalid API credentials',\n              message: 'Your API credentials appear to be invalid or expired. Please update them in Settings.',\n              error_code: 'BROKER_API_UNAUTHORIZED',\n              provider: 'alpaca',\n              environment: credentials.isSandbox ? 'sandbox' : 'live',\n              actions: [\n                'Go to Settings > API Keys',\n                'Update your Alpaca API credentials',\n                'Ensure you\\'re using the correct environment (Paper vs Live)',\n                'Verify your API keys have trading permissions'\n              ],\n              request_info: {\n                request_id: requestId,\n                error_duration_ms: positionsDuration,\n                timestamp: new Date().toISOString()\n              }\n            });\n          }\n          \n          if (positionsError.status === 403 || positionsError.message?.includes('forbidden')) {\n            return res.status(403).json({\n              success: false,\n              error: 'Insufficient API permissions',\n              message: 'Your API credentials do not have permission to access portfolio data.',\n              error_code: 'BROKER_API_FORBIDDEN',\n              provider: 'alpaca',\n              environment: credentials.isSandbox ? 'sandbox' : 'live',\n              actions: [\n                'Check your API key permissions in your broker account',\n                'Ensure your API keys have portfolio read access',\n                'Contact your broker to verify account permissions',\n                'Try regenerating your API keys'\n              ],\n              request_info: {\n                request_id: requestId,\n                error_duration_ms: positionsDuration,\n                timestamp: new Date().toISOString()\n              }\n            });\n          }\n          \n          // Generic API error\n          return res.status(502).json({\n            success: false,\n            error: 'Broker API error',\n            message: 'Unable to retrieve portfolio data from your broker. Please try again later.',\n            error_code: 'BROKER_API_ERROR',\n            details: process.env.NODE_ENV === 'development' ? positionsError.message : 'External service error',\n            provider: 'alpaca',\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            actions: [\n              'Try refreshing the page',\n              'Check broker service status',\n              'Verify your API credentials',\n              'Contact support if the issue persists'\n            ],\n            request_info: {\n              request_id: requestId,\n              error_duration_ms: positionsDuration,\n              timestamp: new Date().toISOString()\n            }\n          });\n        }\n        \n        // Process positions data with validation\n        if (positions && positions.length > 0) {\n          console.log(`📈 [${requestId}] Processing ${positions.length} portfolio positions`);\n          const totalValue = positions.reduce((sum, p) => sum + p.marketValue, 0);\n          const totalGainLoss = positions.reduce((sum, p) => sum + p.unrealizedPL, 0);\n\n          const formattedHoldings = positions.map(p => ({\n            symbol: p.symbol,\n            company: p.symbol + ' Inc.', // Would need company lookup\n            shares: p.quantity,\n            avgCost: p.averageEntryPrice,\n            currentPrice: p.currentPrice,\n            marketValue: p.marketValue,\n            gainLoss: p.unrealizedPL,\n            gainLossPercent: p.unrealizedPLPercent,\n            sector: 'Technology', // Would need sector lookup\n            allocation: totalValue > 0 ? (p.marketValue / totalValue) * 100 : 0\n          }));\n\n          const totalDuration = Date.now() - requestStart;\n          console.log(`✅ [${requestId}] Portfolio holdings successfully retrieved and processed in ${totalDuration}ms`, {\n            positionCount: positions.length,\n            totalValue,\n            totalGainLoss,\n            dataSource: 'alpaca_api',\n            environment: credentials.isSandbox ? 'sandbox' : 'live'\n          });\n          \n          return res.json({\n            success: true,\n            data: {\n              holdings: formattedHoldings,\n              summary: {\n                totalValue: totalValue,\n                totalGainLoss: totalGainLoss,\n                totalGainLossPercent: totalValue > totalGainLoss ? (totalGainLoss / (totalValue - totalGainLoss)) * 100 : 0,\n                numPositions: positions.length,\n                accountType: credentials.isSandbox ? 'paper' : 'live'\n              }\n            },\n            timestamp: new Date().toISOString(),\n            dataSource: 'alpaca_api',\n            provider: 'alpaca',\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            request_info: {\n              request_id: requestId,\n              total_duration_ms: totalDuration\n            }\n          });\n        } else {\n          const totalDuration = Date.now() - requestStart;\n          console.log(`📊 [${requestId}] No positions found in portfolio after ${totalDuration}ms`, {\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            dataSource: 'alpaca_api',\n            positionCount: 0\n          });\n          \n          // Return empty portfolio with proper structure\n          return res.json({\n            success: true,\n            data: {\n              holdings: [],\n              summary: {\n                totalValue: 0,\n                totalGainLoss: 0,\n                totalGainLossPercent: 0,\n                numPositions: 0,\n                accountType: credentials.isSandbox ? 'paper' : 'live'\n              }\n            },\n            message: 'No positions found in your portfolio',\n            timestamp: new Date().toISOString(),\n            dataSource: 'alpaca_api',\n            provider: 'alpaca',\n            environment: credentials.isSandbox ? 'sandbox' : 'live',\n            request_info: {\n              request_id: requestId,\n              total_duration_ms: totalDuration\n            }\n          });\n        }\n      } else {\n        console.warn(`⚠️ [${requestId}] Account type mismatch`, {\n          requestedType: isSandbox ? 'sandbox' : 'live',\n          availableType: credentials.isSandbox ? 'sandbox' : 'live',\n          impact: 'Cannot use API credentials for requested account type'\n        });\n        \n        return res.status(400).json({\n          success: false,\n          error: 'Account type mismatch',\n          message: `Your configured API credentials are for ${credentials.isSandbox ? 'Paper Trading' : 'Live Trading'}, but you requested ${isSandbox ? 'Paper Trading' : 'Live Trading'} data.`,\n          error_code: 'ACCOUNT_TYPE_MISMATCH',\n          configured_type: credentials.isSandbox ? 'paper' : 'live',\n          requested_type: isSandbox ? 'paper' : 'live',\n          actions: [\n            'Go to Settings > API Keys',\n            `Configure API credentials for ${isSandbox ? 'Paper Trading' : 'Live Trading'}`,\n            `Or switch to ${credentials.isSandbox ? 'Paper Trading' : 'Live Trading'} mode`,\n            'Verify you have the correct API keys for the desired environment'\n          ],\n          request_info: {\n            request_id: requestId,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    } catch (error) {\n      const errorDuration = Date.now() - requestStart;\n      console.error(`❌ [${requestId}] Unexpected error in Alpaca API integration after ${errorDuration}ms:`, {\n        error: error.message,\n        errorStack: error.stack,\n        impact: 'Portfolio data retrieval failed unexpectedly',\n        recommendation: 'Check application logs and Alpaca service status'\n      });\n      \n      // Fall through to database or mock data\n      console.log(`🔄 [${requestId}] Falling back to database query due to API error`);\n    }\n\n    // Fallback to database query (if tables are available and no API data was fetched)\n    if (userId && tableDeps.hasRequiredTables) {\n      try {\n          // Query real portfolio holdings with symbols data\n          // Use stock_symbols table if symbols table is not available\n          const symbolsTable = tableDeps.tableStatus.symbols ? 'symbols' : \n                               (tableDeps.tableStatus.stock_symbols ? 'stock_symbols' : null);\n          \n          const holdingsQuery = symbolsTable ? `\n            SELECT \n              ph.symbol,\n              ph.quantity as shares,\n              ph.avg_cost,\n              ph.current_price,\n              ph.market_value,\n              ph.unrealized_pl as gain_loss,\n              ph.unrealized_plpc as gain_loss_percent,\n              ph.side,\n              ph.updated_at,\n              COALESCE(s.security_name, s.name, ph.symbol || ' Inc.') as company,\n              COALESCE(s.sector, 'Technology') as sector,\n              COALESCE(ph.exchange, 'NASDAQ') as exchange,\n              COALESCE(s.industry, 'Technology') as industry\n            FROM portfolio_holdings ph\n            LEFT JOIN ${symbolsTable} s ON ph.symbol = s.symbol  \n            WHERE ph.user_id = $1 AND ph.quantity > 0\n            ORDER BY ph.market_value DESC\n          ` : `\n            SELECT \n              ph.symbol,\n              ph.quantity as shares,\n              ph.avg_cost,\n              ph.current_price,\n              ph.market_value,\n              ph.unrealized_pl as gain_loss,\n              ph.unrealized_plpc as gain_loss_percent,\n              ph.side,\n              ph.updated_at,\n              ph.symbol || ' Inc.' as company,\n              COALESCE(ph.sector, 'Technology') as sector,\n              COALESCE(ph.exchange, 'NASDAQ') as exchange,\n              'Technology' as industry\n            FROM portfolio_holdings ph\n            WHERE ph.user_id = $1 AND ph.quantity > 0\n            ORDER BY ph.market_value DESC\n          `;\n\n          const requiredTables = symbolsTable ? ['portfolio_holdings', symbolsTable] : ['portfolio_holdings'];\n          const holdingsResult = await safeQuery(holdingsQuery, [userId], requiredTables);\n          \n          if (holdingsResult.rows.length > 0) {\n            const holdings = holdingsResult.rows;\n            const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n            const totalGainLoss = holdings.reduce((sum, h) => sum + parseFloat(h.gain_loss || 0), 0);\n\n            // Structure data exactly like mock data\n            const formattedHoldings = holdings.map(h => ({\n              symbol: h.symbol,\n              company: h.company,\n              shares: parseFloat(h.shares || 0),\n              avgCost: parseFloat(h.avg_cost || 0),\n              currentPrice: parseFloat(h.current_price || 0),\n              marketValue: parseFloat(h.market_value || 0),\n              gainLoss: parseFloat(h.gain_loss || 0),\n              gainLossPercent: parseFloat(h.gain_loss_percent || 0),\n              sector: h.sector,\n              industry: h.industry,\n              allocation: totalValue > 0 ? (parseFloat(h.market_value) / totalValue) * 100 : 0\n            }));\n\n            // Calculate sector allocation from real holdings data using reduce for better performance\n            const sectorMap = formattedHoldings.reduce((acc, holding) => {\n              const sector = holding.sector || 'Other';\n              acc[sector] = acc[sector] || { value: 0, allocation: 0 };\n              acc[sector].value += holding.marketValue;\n              return acc;\n            }, {});\n\n            const sectorAllocation = Object.entries(sectorMap).map(([sector, data]) => ({\n              sector,\n              value: data.value,\n              allocation: totalValue > 0 ? (data.value / totalValue) * 100 : 0\n            })).sort((a, b) => b.value - a.value);\n\n            return res.json({\n              success: true,\n              data: {\n                holdings: formattedHoldings,\n                sectorAllocation: sectorAllocation,\n                summary: {\n                  totalValue: totalValue,\n                  totalGainLoss: totalGainLoss,\n                  totalGainLossPercent: totalValue > totalGainLoss ? (totalGainLoss / (totalValue - totalGainLoss)) * 100 : 0,\n                  numPositions: holdings.length,\n                  accountType: accountType\n                }\n              },\n              database_status: {\n                tables_available: tableDeps.hasRequiredTables,\n                missing_tables: tableDeps.missingRequired,\n                symbols_table_used: symbolsTable || 'none'\n              },\n              timestamp: new Date().toISOString(),\n              dataSource: 'database'\n            });\n          }\n      } catch (error) {\n        console.error('Database query failed:', error);\n        // Fall through to mock data\n      }\n    }\n\n    // If not authenticated OR no data found OR database error, return structured empty data\n    console.log('Returning structured empty portfolio data');\n    \n    const emptyHoldings = [];\n\n    const totalValue = 0;\n    const totalGainLoss = 0;\n\n    return res.json({\n      success: true,\n      data: {\n        holdings: emptyHoldings,\n        summary: {\n          totalValue: totalValue,\n          totalGainLoss: totalGainLoss,\n          totalGainLossPercent: totalValue > totalGainLoss ? (totalGainLoss / (totalValue - totalGainLoss)) * 100 : 0,\n          numPositions: 0,\n          accountType: accountType\n        }\n      },\n      database_status: {\n        tables_available: tableDeps ? tableDeps.hasRequiredTables : false,\n        missing_tables: tableDeps ? tableDeps.missingRequired : PORTFOLIO_TABLES.required,\n        status: 'No portfolio data available - connect your broker to import holdings'\n      },\n      timestamp: new Date().toISOString(),\n      dataSource: 'empty'\n    });\n\n  } catch (error) {\n    console.error('Error in portfolio holdings endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch portfolio holdings',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Account info endpoint - uses real data, structured like mock data\nrouter.get('/account', async (req, res) => {\n  try {\n    const { accountType = 'paper' } = req.query;\n    console.log(`Portfolio account info endpoint called for account type: ${accountType}`);\n    \n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    console.log(`👤 User ID: ${userId}`);\n\n    // If authenticated, try to get real data\n    if (userId) {\n      try {\n        // Check if database is available (don't fail on health check)\n        if (!req.dbError) {\n          \n          // Query real account metadata\n          const metadataQuery = `\n            SELECT \n              total_equity,\n              total_market_value,\n              total_unrealized_pl,\n              total_unrealized_plpc,\n              account_type,\n              last_sync\n            FROM portfolio_metadata\n            WHERE user_id = $1\n            ORDER BY last_sync DESC\n            LIMIT 1\n          `;\n\n          const metadataResult = await query(metadataQuery, [userId]);\n          \n          if (metadataResult.rows.length > 0) {\n            const accountData = metadataResult.rows[0];\n\n            // Calculate additional fields based on available data\n            const equity = parseFloat(accountData.total_equity || 0);\n            const portfolioValue = parseFloat(accountData.total_market_value || 0);\n            const dayChange = parseFloat(accountData.total_unrealized_pl || 0) * 0.1; // Approximate\n            \n            return res.json({\n              success: true,\n              data: {\n                accountType: accountData.account_type || accountType,\n                balance: equity + (equity * 0.5), // Estimate total balance\n                equity: equity,\n                dayChange: dayChange,\n                dayChangePercent: equity > 0 ? (dayChange / equity) * 100 : 0,\n                buyingPower: equity * 0.5, // Estimate buying power\n                portfolioValue: portfolioValue,\n                cash: equity - portfolioValue,\n                pendingDeposits: 0,\n                patternDayTrader: false,\n                tradingBlocked: false,\n                accountBlocked: false,\n                createdAt: accountData.last_sync || new Date().toISOString()\n              },\n              timestamp: new Date().toISOString(),\n              dataSource: 'database'\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Database query failed:', error);\n        // Fall through to error response\n      }\n    }\n\n    // Return empty account data with comprehensive diagnostics\n    console.error('❌ Account data unavailable - comprehensive diagnosis needed', {\n      accountType,\n      detailed_diagnostics: {\n        attempted_operations: ['api_key_retrieval', 'broker_api_call', 'database_query'],\n        potential_causes: [\n          'API keys not configured',\n          'Broker API unavailable',\n          'Database connection failure',\n          'Authentication failure',\n          'External API rate limiting'\n        ],\n        troubleshooting_steps: [\n          'Check API key configuration',\n          'Verify broker API status',\n          'Check database connectivity',\n          'Review authentication flow',\n          'Monitor external API limits'\n        ],\n        system_checks: [\n          'API key service availability',\n          'Broker API connectivity',\n          'Database connection pool status',\n          'Authentication system health'\n        ]\n      }\n    });\n    \n    return res.json({\n      success: true,\n      data: {\n        account: {\n          accountId: null,\n          accountType: accountType,\n          balance: 0,\n          availableBalance: 0,\n          totalValue: 0,\n          dayChange: 0,\n          dayChangePercent: 0,\n          buyingPower: 0,\n          maintenance: 0,\n          currency: 'USD',\n          lastUpdated: new Date().toISOString()\n        }\n      },\n      message: 'No account data available - configure your broker API keys',\n      timestamp: new Date().toISOString(),\n      dataSource: 'empty'\n    });\n\n  } catch (error) {\n    console.error('Error in account info endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch account info',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Available accounts endpoint - returns account types user can access\nrouter.get('/accounts', authenticateToken, async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    console.log(`🏦 Available accounts endpoint called for user: ${userId}`);\n    \n    // Get user's API keys to determine available account types\n    const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n    \n    const availableAccounts = [];\n    \n    if (credentials) {\n      // If user has Alpaca API keys, they can access both paper and live accounts\n      availableAccounts.push({\n        type: 'paper',\n        name: 'Paper Trading Account',\n        description: 'Virtual trading account for testing strategies',\n        provider: 'alpaca',\n        isActive: true\n      });\n      \n      if (!credentials.isSandbox) {\n        availableAccounts.push({\n          type: 'live',\n          name: 'Live Trading Account', \n          description: 'Real money trading account',\n          provider: 'alpaca',\n          isActive: true\n        });\n      }\n    } else {\n      // If no API keys, only mock account is available\n      availableAccounts.push({\n        type: 'mock',\n        name: 'Demo Account',\n        description: 'Demonstration account with sample data',\n        provider: 'demo',\n        isActive: true\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: availableAccounts,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Error fetching available accounts:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch available accounts',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Apply authentication middleware to remaining routes\nrouter.use(authenticateToken);\n\n// Portfolio analytics endpoint for authenticated users\nrouter.get('/analytics', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      return res.status(401).json({\n        success: false,\n        error: 'Authentication required',\n        message: 'User must be authenticated to access portfolio analytics'\n      });\n    }\n    \n    const { timeframe = '1y' } = req.query;\n  \n    console.log(`Portfolio analytics endpoint called for authenticated user: ${userId}, timeframe: ${timeframe}`);\n  \n    // Main analytics logic try block\n    // First, try to get real-time data from broker API\n    try {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (credentials) {\n        console.log('📡 Fetching analytics from Alpaca API...');\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n\n        const portfolioSummary = await alpaca.getPortfolioSummary();\n        \n        if (portfolioSummary.positions.length > 0) {\n          const positions = portfolioSummary.positions;\n          const totalValue = portfolioSummary.summary.totalValue;\n          \n          // Calculate analytics from real-time data\n          const analytics = {\n            totalReturn: portfolioSummary.summary.totalPnL,\n            totalReturnPercent: portfolioSummary.summary.totalPnLPercent,\n            sharpeRatio: portfolioSummary.riskMetrics.sharpeRatio,\n            volatility: portfolioSummary.riskMetrics.volatility * 100, // Convert to percentage\n            beta: portfolioSummary.riskMetrics.beta,\n            maxDrawdown: portfolioSummary.riskMetrics.maxDrawdown * 100, // Convert to percentage\n            riskScore: Math.min(10, Math.max(1, portfolioSummary.riskMetrics.volatility * 10)) // 1-10 scale\n          };\n\n          return res.json({\n            success: true,\n            data: {\n              holdings: positions.map(pos => ({\n                symbol: pos.symbol,\n                quantity: pos.quantity,\n                market_value: pos.marketValue,\n                cost_basis: pos.costBasis,\n                pnl: pos.unrealizedPL,\n                pnl_percent: pos.unrealizedPLPercent,\n                weight: totalValue > 0 ? (pos.marketValue / totalValue) : 0,\n                sector: portfolioSummary.sectorAllocation[pos.symbol] || 'Technology',\n                last_updated: new Date().toISOString()\n              })),\n              analytics: analytics,\n              summary: {\n                totalValue: totalValue,\n                totalPnL: analytics.totalReturn,\n                numPositions: positions.length,\n                topSector: Object.entries(portfolioSummary.sectorAllocation)\n                  .sort((a, b) => b[1].weight - a[1].weight)[0]?.[0] || 'Technology',\n                concentration: positions.length > 0 ? \n                  (Math.max(...positions.map(p => p.marketValue)) / totalValue) : 0,\n                riskScore: analytics.riskScore\n              },\n              sectorAllocation: Object.fromEntries(\n                Object.entries(portfolioSummary.sectorAllocation)\n                  .map(([sector, data]) => [sector, data.weight])\n              )\n            },\n            timestamp: new Date().toISOString(),\n            dataSource: 'alpaca_api',\n            provider: 'alpaca',\n            environment: credentials.isSandbox ? 'sandbox' : 'live'\n          });\n        }\n      }\n    } catch (apiError) {\n      console.error('⚠️ Alpaca API error, falling back to database:', apiError.message);\n      // Continue to database fallback\n    }\n\n    // Fallback to database data if API integration fails\n    console.log('📊 Falling back to database analytics...');\n    \n    // Check if database is available\n    if (req.dbError) {\n      console.log('📋 Database unavailable, returning mock analytics...');\n      return res.json({\n        success: true,\n        data: {\n          performance: {\n            totalReturn: 15.3,\n            totalReturnPercent: 15.3,\n            annualizedReturn: 12.1,\n            volatility: 18.7,\n            sharpeRatio: 1.2,\n            maxDrawdown: -8.4,\n            winRate: 65.2,\n            numTrades: 0,\n            avgWin: 0,\n            avgLoss: 0,\n            profitFactor: 0\n          },\n          timeframe: timeframe,\n          dataPoints: [],\n          benchmarkComparison: {\n            portfolioReturn: 15.3,\n            spyReturn: 12.8,\n            alpha: 2.5,\n            beta: 1.1,\n            rSquared: 0.85\n          }\n        },\n        timestamp: new Date().toISOString(),\n        dataSource: 'mock'\n      });\n    }\n\n    // Get portfolio holdings - use a safer query that doesn't depend on stocks table structure\n    const holdingsQuery = `\n      SELECT \n        ph.symbol,\n        ph.quantity,\n        ph.market_value,\n        ph.unrealized_pl as pnl,\n        ph.unrealized_plpc as pnl_percent,\n        ph.avg_cost as cost_basis,\n        ph.updated_at as last_updated\n      FROM portfolio_holdings ph\n      WHERE ph.user_id = $1 AND ph.quantity > 0\n      ORDER BY ph.market_value DESC\n    `;\n    \n    const holdingsResult = await query(holdingsQuery, [userId]);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No portfolio data found',\n        message: 'Import portfolio holdings first from your broker or add holdings manually'\n      });\n    }\n\n    const holdings = holdingsResult.rows;\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    \n    // Calculate analytics similar to mock data structure\n    const analytics = {\n      totalReturn: holdings.reduce((sum, h) => sum + parseFloat(h.pnl || 0), 0),\n      totalReturnPercent: 0,\n      sharpeRatio: 1.24, // Would calculate from historical data\n      volatility: 18.5,  // Would calculate from historical data\n      beta: 1.12,        // Would calculate from historical data\n      maxDrawdown: -12.3, // Would calculate from historical data\n      riskScore: 6.2     // Would calculate based on portfolio composition\n    };\n\n    // Calculate return percentage\n    const totalCost = holdings.reduce((sum, h) => sum + parseFloat(h.cost_basis || 0) * parseFloat(h.quantity || 0), 0);\n    if (totalCost > 0) {\n      analytics.totalReturnPercent = (analytics.totalReturn / totalCost) * 100;\n    }\n\n    // Simplified sector allocation since we don't have reliable sector data\n    const simpleSectorAllocation = {\n      'Technology': 45.0,\n      'Financials': 25.0,\n      'Healthcare': 15.0,\n      'Consumer Discretionary': 10.0,\n      'Other': 5.0\n    };\n\n    res.json({\n      success: true,\n      data: {\n        holdings: holdings.map(h => ({\n          symbol: h.symbol,\n          quantity: parseFloat(h.quantity || 0),\n          market_value: parseFloat(h.market_value || 0),\n          cost_basis: parseFloat(h.cost_basis || 0) * parseFloat(h.quantity || 0),\n          pnl: parseFloat(h.pnl || 0),\n          pnl_percent: parseFloat(h.pnl_percent || 0),\n          weight: totalValue > 0 ? (parseFloat(h.market_value) / totalValue) : 0,\n          sector: 'Technology', // Default sector since we can't reliably get this from DB\n          last_updated: h.last_updated\n        })),\n        analytics: analytics,\n        summary: {\n          totalValue: totalValue,\n          totalPnL: analytics.totalReturn,\n          numPositions: holdings.length,\n          topSector: 'Technology',\n          concentration: holdings.length > 0 ? (parseFloat(holdings[0].market_value) / totalValue) : 0,\n          riskScore: analytics.riskScore\n        },\n        sectorAllocation: simpleSectorAllocation\n      },\n      timestamp: new Date().toISOString(),\n      dataSource: 'database',\n      note: 'Database analytics with simplified sector allocation. Connect broker API for enhanced analytics.'\n    });\n    \n  } catch (error) {\n    console.error('❌ Error fetching portfolio analytics:', error);\n    console.error('🔍 Error details:', {\n      message: error.message,\n      code: error.code,\n      severity: error.severity,\n      detail: error.detail,\n      constraint: error.constraint,\n      table: error.table,\n      column: error.column,\n      userId: req.user?.sub,\n      timeframe: req.query.timeframe\n    });\n\n    // Return empty data structure instead of error\n    console.warn('⚠️ No portfolio data available, returning empty structure');\n    return res.status(200).json({\n      success: true,\n      data: {\n        holdings: [],\n        analytics: {\n          totalReturn: 0,\n          totalReturnPercent: 0,\n          sharpeRatio: 0,\n          volatility: 0,\n          beta: 1,\n          maxDrawdown: 0,\n          riskScore: 5\n        },\n        sectorAllocation: [],\n        riskMetrics: {\n          volatility: 0,\n          sharpeRatio: 0,\n          maxDrawdown: 0,\n          beta: 1\n        },\n        dataSource: 'none'\n      },\n      message: 'No portfolio data found. Please import your portfolio data from your broker first.',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Health check endpoint\nrouter.get('/health', async (req, res) => {\n  try {\n    const dbHealth = await healthCheck();\n    \n    // Check if required tables exist\n    let tablesExist = false;\n    if (dbHealth.status === 'healthy') {\n      try {\n        const tableCheck = await query(`\n          SELECT table_name \n          FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name IN ('portfolio_holdings', 'portfolio_metadata', 'user_api_keys')\n        `);\n        tablesExist = tableCheck.rows.length === 3;\n      } catch (error) {\n        console.error('Table check failed:', error.message);\n      }\n    }\n\n    res.json({\n      success: true,\n      status: dbHealth.status === 'healthy' && tablesExist ? 'ready' : 'configuration_required',\n      database: dbHealth,\n      tablesExist: tablesExist,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Health check error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Health check failed',\n      details: error.message\n    });\n  }\n});\n\n// Setup endpoint to create tables if needed\nrouter.post('/setup', async (req, res) => {\n  try {\n    console.log('Setting up portfolio database tables...');\n    await initializeDatabase();\n    \n    res.json({\n      success: true,\n      message: 'Portfolio database tables created successfully',\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Database setup error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create portfolio database tables',\n      details: error.message\n    });\n  }\n});\n\n// Portfolio data loading status endpoint\nrouter.get('/data-loading-status', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    \n    if (!userId) {\n      return res.status(401).json({\n        success: false,\n        error: 'User authentication required'\n      });\n    }\n\n    console.log(`🔄 Data loading status request for user: ${userId}`);\n    \n    // Get comprehensive data loading status\n    const status = await portfolioDataRefreshService.getDataLoadingStatus(userId);\n    \n    res.json({\n      success: true,\n      data: status,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error getting data loading status:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get data loading status',\n      details: error.message\n    });\n  }\n});\n\n// Manual trigger for portfolio data refresh\nrouter.post('/trigger-data-refresh', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    \n    if (!userId) {\n      return res.status(401).json({\n        success: false,\n        error: 'User authentication required'\n      });\n    }\n\n    const { provider, symbols } = req.body;\n    console.log(`🚀 Manual data refresh trigger for user: ${userId}`);\n    \n    // Trigger portfolio data refresh\n    const result = await portfolioDataRefreshService.triggerPortfolioDataRefresh(\n      userId, \n      provider || 'manual', \n      symbols || []\n    );\n    \n    res.json({\n      success: true,\n      data: result,\n      message: 'Portfolio data refresh triggered successfully',\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error triggering data refresh:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to trigger data refresh',\n      details: error.message\n    });\n  }\n});\n\n// Portfolio performance endpoint - WITH DETAILED DIAGNOSTIC LOGGING\nrouter.get('/performance', createValidationMiddleware(portfolioValidationSchemas.performance), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  console.log(`📈 [${requestId}] =====PORTFOLIO PERFORMANCE ENDPOINT START=====`);\n  console.log(`📈 [${requestId}] Memory at start:`, process.memoryUsage());\n  console.log(`📈 [${requestId}] Environment check:`, {\n    DB_SECRET_ARN: !!process.env.DB_SECRET_ARN,\n    AWS_REGION: process.env.AWS_REGION,\n    NODE_ENV: process.env.NODE_ENV\n  });\n\n  try {\n    const { timeframe = '1Y' } = req.query;\n    console.log(`📈 [${requestId}] Timeframe requested: ${timeframe}`);\n    \n    // Validate user authentication\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    console.log(`👤 [${requestId}] User ID: ${userId}`);\n\n    // Test database with minimal query first\n    console.log(`🔍 [${requestId}] Testing database with SELECT 1...`);\n    try {\n      const dbTestStart = Date.now();\n      await query('SELECT 1 as test', [], 5000); // 5 second timeout\n      console.log(`✅ [${requestId}] Database test passed in ${Date.now() - dbTestStart}ms`);\n    } catch (dbError) {\n      console.error(`❌ [${requestId}] Database test failed:`, dbError.message);\n      return res.status(503).json({\n        success: false,\n        error: 'Database connectivity issue',\n        message: dbError.message,\n        duration: Date.now() - startTime,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // If user authenticated, try live API data first, then fallback to database\n    if (userId) {\n      console.log(`📊 [${requestId}] Getting portfolio performance for user: ${userId}`);\n      \n      try {\n        // Try to get live performance data from broker API\n        let livePerformanceData = null;\n        try {\n          const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n          \n          if (credentials) {\n            console.log(`📡 [${requestId}] Fetching live performance data from Alpaca...`);\n            const alpaca = new AlpacaService(\n              credentials.apiKey,\n              credentials.apiSecret,\n              credentials.isSandbox\n            );\n            \n            // Get portfolio history for performance calculation\n            const account = await alpaca.getAccount();\n            const portfolioHistory = await alpaca.getPortfolioHistory({\n              period: timeframe,\n              timeframe: '1Day'\n            });\n            \n            if (portfolioHistory && portfolioHistory.equity) {\n              livePerformanceData = portfolioHistory.equity.map((equity, index) => ({\n                date: portfolioHistory.timestamp[index] ? \n                  new Date(portfolioHistory.timestamp[index] * 1000).toISOString().split('T')[0] : \n                  new Date().toISOString().split('T')[0],\n                portfolioValue: parseFloat(equity || 0),\n                totalPnL: index > 0 ? \n                  parseFloat(equity - portfolioHistory.equity[0]) : 0,\n                dailyReturn: index > 0 ? \n                  ((equity - portfolioHistory.equity[index - 1]) / portfolioHistory.equity[index - 1]) * 100 : 0\n              }));\n              \n              console.log(`✅ [${requestId}] Retrieved ${livePerformanceData.length} days of live performance data`);\n            }\n          }\n        } catch (apiError) {\n          console.warn(`⚠️ [${requestId}] API performance fetch failed:`, apiError.message);\n        }\n        \n        // Use live data if available, otherwise query database\n        let performanceData = livePerformanceData;\n        if (!performanceData) {\n          console.log(`📊 [${requestId}] Falling back to database query...`);\n          try {\n            const portfolioQuery = `\n              SELECT \n                DATE(updated_at) as date,\n                SUM(market_value) as portfolio_value,\n                SUM(unrealized_pl) as total_pnl\n              FROM portfolio_holdings \n              WHERE user_id = $1 AND quantity > 0\n              GROUP BY DATE(updated_at)\n              ORDER BY DATE(updated_at) DESC\n              LIMIT 50\n            `;\n            \n            const result = await query(portfolioQuery, [userId], 8000);\n            console.log(`✅ [${requestId}] Portfolio query completed, found ${result.rows.length} records`);\n            \n            if (result.rows.length > 0) {\n              performanceData = result.rows.map(row => ({\n                date: row.date,\n                portfolioValue: parseFloat(row.portfolio_value || 0),\n                totalPnL: parseFloat(row.total_pnl || 0),\n                dailyReturn: 0\n              }));\n            }\n          } catch (dbError) {\n            console.error(`❌ [${requestId}] Database query failed:`, dbError.message);\n          }\n        }\n        \n        if (performanceData && performanceData.length > 0) {\n            \n            // Calculate advanced portfolio analytics\n            const analytics = portfolioAnalytics.calculatePortfolioAnalytics(performanceData);\n            \n            // Get current portfolio holdings for sector analysis\n            let sectorAnalysis = {};\n            try {\n              const holdingsQuery = `\n                SELECT symbol, market_value, sector, quantity\n                FROM portfolio_holdings \n                WHERE user_id = $1 AND quantity > 0\n              `;\n              const holdingsResult = await query(holdingsQuery, [userId], 5000);\n              \n              if (holdingsResult.rows.length > 0) {\n                sectorAnalysis = portfolioAnalytics.calculateSectorAnalysis(holdingsResult.rows);\n              }\n            } catch (error) {\n              if (shouldLog('WARN')) console.warn(`⚠️ [${requestId}] Failed to get sector analysis:`, error.message);\n            }\n            \n            const metrics = {\n              totalReturn: analytics.totalReturn,\n              totalReturnPercent: analytics.totalReturn,\n              annualizedReturn: analytics.annualizedReturn,\n              volatility: analytics.volatility,\n              sharpeRatio: analytics.sharpeRatio,\n              maxDrawdown: analytics.maxDrawdown,\n              beta: analytics.beta,\n              alpha: analytics.annualizedReturn - (analytics.beta * 2.0), // Assuming 2% market return\n              informationRatio: analytics.informationRatio,\n              calmarRatio: analytics.annualizedReturn !== 0 ? analytics.annualizedReturn / Math.abs(analytics.maxDrawdown) : 0,\n              sortinoRatio: analytics.sharpeRatio * 1.4, // Approximation\n              var95: analytics.var95,\n              winRate: analytics.winRate,\n              averageWin: analytics.averageWin,\n              averageLoss: analytics.averageLoss,\n              profitFactor: analytics.profitFactor,\n              diversificationScore: sectorAnalysis.diversificationScore || 0,\n              concentrationRisk: sectorAnalysis.concentrationRisk || 0\n            };\n            \n            if (shouldLog('INFO')) console.log(`✅ [${requestId}] Returning advanced analytics after ${Date.now() - startTime}ms`);\n            return res.json({\n              success: true,\n              data: { \n                performance: performanceData, \n                metrics: metrics,\n                sectorAnalysis: sectorAnalysis.sectorAllocation || []\n              },\n              timestamp: new Date().toISOString(),\n              dataSource: 'database',\n              duration: Date.now() - startTime\n            });\n          } else {\n            console.log(`⚠️ [${requestId}] No portfolio data found for user`);\n            return res.status(404).json({\n              success: false,\n              error: 'No portfolio data found',\n              message: 'No portfolio holdings found for this user.',\n              duration: Date.now() - startTime,\n              timestamp: new Date().toISOString()\n            });\n          }\n      } catch (queryError) {\n        console.error(`❌ [${requestId}] Portfolio query failed:`, queryError.message);\n        return res.status(500).json({\n          success: false,\n          error: 'Database query failed',\n          message: queryError.message,\n          duration: Date.now() - startTime,\n          timestamp: new Date().toISOString()\n        });\n      }\n    } else {\n      console.log(`⚠️ [${requestId}] No authenticated user`);\n      return res.status(401).json({\n        success: false,\n        error: 'Authentication required',\n        message: 'Please log in to view portfolio performance data',\n        duration: Date.now() - startTime,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n  } catch (error) {\n    console.error(`❌ [${requestId}] Unexpected error:`, error);\n    \n    return res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n      message: error.message,\n      duration: Date.now() - startTime,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio benchmark endpoint\nrouter.get('/benchmark', async (req, res) => {\n  try {\n    const { timeframe = '1Y' } = req.query;\n    console.log(`Portfolio benchmark endpoint called for timeframe: ${timeframe}`);\n    \n    // Generate mock benchmark data for now\n    const mockBenchmarkData = generateMockBenchmarkData(timeframe);\n    \n    res.json({\n      success: true,\n      data: mockBenchmarkData,\n      timestamp: new Date().toISOString(),\n      dataSource: 'mock'\n    });\n\n  } catch (error) {\n    console.error('Error in portfolio benchmark endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch benchmark data',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Helper function to generate mock performance data\nfunction generateMockPerformanceData(timeframe) {\n  const dataPoints = getDataPointsForTimeframe(timeframe);\n  const startDate = new Date();\n  const performance = [];\n  \n  for (let i = 0; i < dataPoints; i++) {\n    const date = new Date(startDate);\n    date.setDate(date.getDate() - (dataPoints - i));\n    \n    const baseValue = 100000;\n    const growth = Math.random() * 0.15 + 0.05; // 5-20% growth\n    const volatility = Math.random() * 0.02 - 0.01; // ±1% daily volatility\n    \n    const portfolioValue = baseValue * (1 + growth * (i / dataPoints)) * (1 + volatility);\n    const benchmarkValue = baseValue * (1 + 0.10 * (i / dataPoints)) * (1 + volatility * 0.8);\n    \n    performance.push({\n      date: date.toISOString().split('T')[0],\n      portfolioValue: portfolioValue,\n      benchmarkValue: benchmarkValue,\n      dailyReturn: i > 0 ? (portfolioValue / performance[i-1].portfolioValue - 1) * 100 : 0\n    });\n  }\n  \n  return {\n    performance,\n    metrics: {\n      totalReturn: 12.5,\n      annualizedReturn: 11.2,\n      volatility: 16.8,\n      sharpeRatio: 0.89,\n      maxDrawdown: -8.3,\n      beta: 1.05,\n      alpha: 2.1,\n      informationRatio: 0.45,\n      calmarRatio: 1.35,\n      sortinoRatio: 1.24\n    }\n  };\n}\n\n// Helper function to generate mock benchmark data\nfunction generateMockBenchmarkData(timeframe) {\n  const dataPoints = getDataPointsForTimeframe(timeframe);\n  const startDate = new Date();\n  const benchmark = [];\n  \n  for (let i = 0; i < dataPoints; i++) {\n    const date = new Date(startDate);\n    date.setDate(date.getDate() - (dataPoints - i));\n    \n    const baseValue = 100000;\n    const growth = 0.10; // 10% annual growth for S&P 500\n    const volatility = Math.random() * 0.015 - 0.0075; // ±0.75% daily volatility\n    \n    const value = baseValue * (1 + growth * (i / dataPoints)) * (1 + volatility);\n    \n    benchmark.push({\n      date: date.toISOString().split('T')[0],\n      value: value,\n      return: i > 0 ? (value / benchmark[i-1].value - 1) * 100 : 0\n    });\n  }\n  \n  return {\n    benchmark,\n    name: 'S&P 500',\n    symbol: 'SPY',\n    metrics: {\n      totalReturn: 10.0,\n      annualizedReturn: 9.5,\n      volatility: 15.2,\n      sharpeRatio: 0.72,\n      maxDrawdown: -12.1\n    }\n  };\n}\n\n// Helper function to get data points based on timeframe\nfunction getDataPointsForTimeframe(timeframe) {\n  switch (timeframe) {\n    case '1M': return 30;\n    case '3M': return 90;\n    case '6M': return 180;\n    case '1Y': return 365;\n    case '2Y': return 730;\n    case '3Y': return 1095;\n    case '5Y': return 1825;\n    case 'MAX': return 2555; // ~7 years\n    default: return 365;\n  }\n}\n\n// Portfolio import endpoint\nrouter.post('/import/:broker', async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    const { broker } = req.params;\n    const { accountType = 'paper', keyId } = req.query; // accountType for logging, keyId for specific API key selection\n    const userId = req.user?.sub;\n    \n    console.log(`🔄 [IMPORT START] Portfolio import requested for broker: ${broker}, account: ${accountType}, keyId: ${keyId || 'auto-select'}`);\n    console.log(`🔄 [IMPORT] Request headers:`, Object.keys(req.headers));\n    console.log(`🔄 [IMPORT] Memory usage:`, process.memoryUsage());\n    \n    // Validate required parameters\n    if (!broker) {\n      console.error(`❌ [IMPORT] Missing broker parameter`);\n      return res.status(400).json({\n        success: false,\n        error: 'Missing broker parameter',\n        message: 'Broker parameter is required for portfolio import'\n      });\n    }\n    \n    if (!userId) {\n      console.error(`❌ [IMPORT] Missing user ID - authentication may have failed`);\n      return res.status(401).json({\n        success: false,\n        error: 'Authentication required',\n        message: 'User must be authenticated to import portfolio data'\n      });\n    }\n    \n    // Step 1: Get the user's API key for this broker with robust error handling\n    console.log(`🔑 [IMPORT] Step 1: Fetching API keys for ${broker}...`);\n    console.log(`🔑 [IMPORT] User ID: ${userId}, Broker: ${broker}`);\n    let credentials;\n    try {\n      // Check if API key service is enabled\n      console.log(`🔑 [IMPORT] API key service enabled: ${apiKeyService.isEnabled}`);\n      \n      if (!apiKeyService.isEnabled) {\n        console.error(`❌ [IMPORT] API key service is disabled. Cannot retrieve API keys.`);\n        return res.status(500).json({\n          success: false,\n          error: 'API key service disabled',\n          message: 'API key encryption service is not properly configured. Please contact support.',\n          debug: {\n            userId: userId,\n            broker: broker,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n        console.log(`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`);\n        console.log(`🔑 [IMPORT] API Key Service enabled: ${apiKeyService.isEnabled}`);\n        \n        // Enhanced debug: Check if user has any API keys at all\n        try {\n          const debugResult = await query(`SELECT id, provider, user_id, is_active, created_at FROM user_api_keys WHERE user_id = $1`, [userId]);\n          console.log(`🔍 [IMPORT DEBUG] User has ${debugResult.rows.length} API keys:`, debugResult.rows.map(k => `ID:${k.id} ${k.provider}(${k.is_active ? 'active' : 'inactive'})`));\n          \n          // If specific keyId requested, check if it exists\n          if (keyId) {\n            const specificKeyCheck = await query(`SELECT id, provider, user_id, is_active FROM user_api_keys WHERE id = $1`, [keyId]);\n            console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} check: found=${specificKeyCheck.rows.length > 0}`);\n            if (specificKeyCheck.rows.length > 0) {\n              const key = specificKeyCheck.rows[0];\n              console.log(`🔍 [IMPORT DEBUG] KeyId ${keyId} details: user_id=${key.user_id}, provider=${key.provider}, active=${key.is_active}`);\n              console.log(`🔍 [IMPORT DEBUG] User ID match: ${key.user_id === userId} (${key.user_id} vs ${userId})`);\n              console.log(`🔍 [IMPORT DEBUG] Provider match: ${key.provider === broker} (${key.provider} vs ${broker})`);\n            } else {\n              console.log(`❌ [IMPORT DEBUG] KeyId ${keyId} does not exist in database`);\n            }\n          }\n          \n          // Only use API keys that belong to the exact authenticated user ID\n          if (debugResult.rows.length === 0) {\n            console.log(`🔍 [IMPORT DEBUG] No API keys found for user. User must add API key in Settings.`);\n            \n            // Check if there are ANY API keys in the system\n            const totalKeysResult = await query(`SELECT COUNT(*) as total FROM user_api_keys`);\n            console.log(`🔍 [IMPORT DEBUG] Total API keys in system: ${totalKeysResult.rows[0]?.total || 0}`);\n          } else {\n            // Check for alpaca keys specifically for this user\n            const userAlpacaKeys = debugResult.rows.filter(k => k.provider === broker);\n            console.log(`🔍 [IMPORT DEBUG] User has ${userAlpacaKeys.length} ${broker} keys:`, userAlpacaKeys.map(k => `ID:${k.id}(${k.is_active ? 'active' : 'inactive'})`));\n          }\n        } catch (debugError) {\n          console.log(`🔍 [IMPORT DEBUG] Failed to query user API keys:`, debugError.message);\n        }\n        \n        // Use API key service only - no fallbacks\n        console.log(`🔑 [IMPORT] Calling apiKeyService.getDecryptedApiKey with userId=${userId}, broker=${broker}...`);\n        \n        // If specific key ID is provided, get that specific key\n        if (keyId) {\n          console.log(`🔑 [IMPORT] Fetching specific API key with ID: ${keyId}`);\n          try {\n            const specificKeyResult = await query(`\n                  SELECT \n                    id,\n                    provider,\n                    encrypted_api_key,\n                    key_iv,\n                    key_auth_tag,\n                    encrypted_api_secret,\n                    secret_iv,\n                    secret_auth_tag,\n                    user_salt,\n                    is_sandbox,\n                    is_active\n                  FROM user_api_keys \n                  WHERE id = $1 AND user_id = $2 AND provider = $3 AND is_active = true\n                `, [keyId, userId, broker]);\n                \n                if (specificKeyResult.rows.length > 0) {\n                  const keyData = specificKeyResult.rows[0];\n                  \n                  // Decrypt the API credentials using the apiKeyService\n                  const apiKey = await apiKeyService.decryptApiKey({\n                    encrypted: keyData.encrypted_api_key,\n                    iv: keyData.key_iv,\n                    authTag: keyData.key_auth_tag\n                  }, keyData.user_salt);\n                  \n                  const apiSecret = keyData.encrypted_api_secret ? await apiKeyService.decryptApiKey({\n                    encrypted: keyData.encrypted_api_secret,\n                    iv: keyData.secret_iv,\n                    authTag: keyData.secret_auth_tag\n                  }, keyData.user_salt) : null;\n                  \n                  credentials = {\n                    id: keyData.id,\n                    provider: keyData.provider,\n                    apiKey: apiKey,\n                    apiSecret: apiSecret,\n                    isSandbox: keyData.is_sandbox,\n                    isActive: keyData.is_active\n                  };\n                  console.log(`✅ [IMPORT] Retrieved specific key ${keyId}: ${credentials.provider} (${credentials.isSandbox ? 'sandbox' : 'live'})`);\n                } else {\n                  console.error(`❌ [IMPORT] Specific key ${keyId} not found for user ${userId}`);\n                }\n              } catch (keyError) {\n                console.error(`❌ [IMPORT] Error fetching specific key ${keyId}:`, keyError.message);\n              }\n        } else {\n          // Default behavior - get any available key for the broker\n          credentials = await apiKeyService.getDecryptedApiKey(userId, broker);\n          console.log(`🔑 [IMPORT] API key service returned credentials:`, !!credentials);\n          if (credentials) {\n            console.log(`🔑 [IMPORT] Credentials provider: ${credentials.provider}, sandbox: ${credentials.isSandbox}`);\n          }\n        }\n    } catch (error) {\n      console.error(`❌ [IMPORT] Error fetching API key for ${broker}:`, error.message);\n      console.error(`❌ [IMPORT] Error stack:`, error.stack);\n      return res.status(500).json({\n        success: false,\n        error: 'API key service error',\n        message: `Unable to access API keys: ${error.message}. Please check your API key configuration in Settings.`,\n        duration: Date.now() - startTime\n      });\n    }\n    \n    if (!credentials) {\n      console.log(`❌ No API key found for broker ${broker}`);\n      console.log(`❌ Debug info: userId=${userId}, broker=${broker}`);\n      console.log(`❌ Recommended action: Check that user has saved API keys in Settings and they are active`);\n      return res.status(400).json({\n        success: false,\n        error: 'API key not found',\n        message: `No API key configured for ${broker}. Please add your API key in Settings.`,\n        debug: {\n          userId: userId,\n          broker: broker,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n    \n    console.log(`✅ Found API key for ${broker} (sandbox: ${credentials.isSandbox})`);\n    console.log(`📊 [IMPORT] API key setting is authoritative - using ${credentials.isSandbox ? 'PAPER' : 'LIVE'} account`);\n    \n    // Step 2: Connect to the broker's API and fetch portfolio data\n    console.log(`📡 [IMPORT] Step 2: Connecting to ${broker} API...`);\n    console.log(`📡 [IMPORT] API endpoint will be: ${credentials.isSandbox ? 'paper-api.alpaca.markets' : 'api.alpaca.markets'}`);\n    \n    let portfolioData;\n    try {\n      if (broker.toLowerCase() === 'alpaca') {\n        console.log(`🔗 [IMPORT] Initializing AlpacaService...`);\n        let alpaca;\n        try {\n          alpaca = new AlpacaService(\n            credentials.apiKey,\n            credentials.apiSecret,\n            credentials.isSandbox // Use API key setting as authoritative source\n          );\n          console.log(`✅ [IMPORT] AlpacaService initialized successfully`);\n        } catch (initError) {\n          console.error(`❌ [IMPORT] Failed to initialize AlpacaService:`, initError.message);\n          throw new Error(`Alpaca service initialization failed: ${initError.message}`);\n        }\n        \n        console.log(`📊 [IMPORT] Fetching portfolio data from Alpaca...`);\n        \n        // Get comprehensive portfolio data including positions, account info, and activities\n        let positions, account, activities;\n        try {\n          console.log(`📊 [IMPORT] Fetching account info...`);\n          account = await alpaca.getAccount();\n          console.log(`✅ [IMPORT] Account fetched successfully`);\n          \n          console.log(`📊 [IMPORT] Fetching positions...`);\n          positions = await alpaca.getPositions();\n          console.log(`✅ [IMPORT] ${positions.length} positions fetched`);\n          \n          console.log(`📊 [IMPORT] Fetching activities...`);\n          try {\n            activities = await alpaca.getActivities();\n            console.log(`✅ [IMPORT] ${activities.length} activities fetched`);\n          } catch (actError) {\n            console.warn(`⚠️ [IMPORT] Failed to fetch activities:`, actError.message);\n            activities = [];\n          }\n        } catch (dataError) {\n          console.error(`❌ [IMPORT] Failed to fetch portfolio data:`, dataError.message);\n          throw new Error(`Failed to fetch data from Alpaca: ${dataError.message}`);\n        }\n        \n        // Process and structure the portfolio data\n        portfolioData = {\n          summary: {\n            totalValue: parseFloat(account.portfolio_value || account.equity || 0),\n            totalPnL: parseFloat(account.unrealized_pl || 0),\n            totalPnLPercent: parseFloat(account.unrealized_plpc || 0) * 100,\n            cashBalance: parseFloat(account.cash || account.buying_power || 0),\n            dayChange: parseFloat(account.unrealized_pl || 0),\n            dayChangePercent: parseFloat(account.unrealized_plpc || 0) * 100\n          },\n          positions: positions.map(pos => ({\n            symbol: pos.symbol,\n            quantity: parseFloat(pos.qty),\n            side: pos.side,\n            marketValue: parseFloat(pos.market_value || 0),\n            averageEntryPrice: parseFloat(pos.avg_entry_price || 0),\n            currentPrice: parseFloat(pos.current_price || pos.lastday_price || 0),\n            unrealizedPL: parseFloat(pos.unrealized_pl || 0),\n            unrealizedPLPercent: parseFloat(pos.unrealized_plpc || 0) * 100,\n            costBasis: parseFloat(pos.cost_basis || 0),\n            lastTradeTime: pos.lastday_price_timeframe || new Date().toISOString()\n          })),\n          account: {\n            accountId: account.id,\n            status: account.status,\n            tradingBlocked: account.trading_blocked,\n            transfersBlocked: account.transfers_blocked,\n            accountBlocked: account.account_blocked,\n            createdAt: account.created_at,\n            currency: account.currency || 'USD',\n            patternDayTrader: account.pattern_day_trader,\n            daytradeCount: account.daytrade_count,\n            lastEquity: parseFloat(account.last_equity || 0)\n          },\n          activities: activities.slice(0, 50).map(activity => ({\n            id: activity.id,\n            activityType: activity.activity_type,\n            date: activity.date,\n            symbol: activity.symbol,\n            side: activity.side,\n            qty: parseFloat(activity.qty || 0),\n            price: parseFloat(activity.price || 0),\n            netAmount: parseFloat(activity.net_amount || 0)\n          }))\n        };\n        \n      } else if (broker.toLowerCase() === 'td_ameritrade') {\n        // TD Ameritrade integration would go here\n        throw new Error(`TD Ameritrade integration not yet implemented`);\n      } else {\n        throw new Error(`Unsupported broker: ${broker}`);\n      }\n    } catch (error) {\n      console.error(`❌ Failed to fetch portfolio from ${broker}:`, error);\n      return res.status(500).json({\n        success: false,\n        error: 'Broker API error',\n        message: `Failed to fetch portfolio from ${broker}. Please check your API key and try again. Error: ${error.message}`\n      });\n    }\n    \n    // Step 3: Store the portfolio data in the database with enhanced error handling\n    console.log(`💾 Storing portfolio data in database...`);\n    \n    try {\n      await storePortfolioData(userId, credentials.id, portfolioData, accountType);\n      console.log(`✅ Portfolio data stored successfully`);\n      \n      // Also store individual positions\n      // Batch UPSERT operations for better performance\n      if (portfolioData.positions.length > 0) {\n        const batchSize = 100;\n        for (let i = 0; i < portfolioData.positions.length; i += batchSize) {\n          const batch = portfolioData.positions.slice(i, i + batchSize);\n          \n          const values = [];\n          const params = [];\n          let paramIndex = 1;\n          \n          batch.forEach(position => {\n            values.push(`($${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, $${paramIndex++}, NOW())`);\n            params.push(\n              userId, credentials.id, position.symbol, position.quantity,\n              position.averageEntryPrice, position.currentPrice, position.marketValue,\n              position.unrealizedPL, position.unrealizedPLPercent, position.side\n            );\n          });\n          \n          await query(`\n            INSERT INTO portfolio_holdings (\n              user_id, api_key_id, symbol, quantity, avg_cost, current_price, \n              market_value, unrealized_pl, unrealized_plpc, side, updated_at\n            ) VALUES ${values.join(', ')}\n            ON CONFLICT (user_id, api_key_id, symbol) DO UPDATE SET\n              quantity = EXCLUDED.quantity,\n              avg_cost = EXCLUDED.avg_cost,\n              current_price = EXCLUDED.current_price,\n              market_value = EXCLUDED.market_value,\n              unrealized_pl = EXCLUDED.unrealized_pl,\n              unrealized_plpc = EXCLUDED.unrealized_plpc,\n              side = EXCLUDED.side,\n              updated_at = NOW()\n          `, params);\n          \n          console.log(`📈 Processed batch ${Math.floor(i/batchSize) + 1}: ${batch.length} positions`);\n        }\n      }\n      \n      // Individual processing replaced with batch processing above\n      console.log(`✅ Completed batch UPSERT for ${portfolioData.positions.length} positions`);\n      \n    } catch (error) {\n      console.error('❌ Failed to store portfolio data:', error);\n      // Don't fail the import if database storage fails - the user still gets the data\n      console.warn('Continuing without database storage...');\n    }\n    \n    // Return comprehensive success response with all portfolio data\n    const successResponse = {\n      success: true,\n      data: {\n        imported: new Date().toISOString(),\n        broker: broker,\n        accountType: accountType,\n        summary: portfolioData.summary,\n        holdings: portfolioData.positions.map(pos => ({\n          symbol: pos.symbol,\n          quantity: pos.quantity,\n          marketValue: pos.marketValue,\n          unrealizedPL: pos.unrealizedPL,\n          unrealizedPLPC: pos.unrealizedPLPercent,\n          avgCost: pos.averageEntryPrice,\n          currentPrice: pos.currentPrice,\n          side: pos.side\n        })),\n        account: portfolioData.account,\n        recentActivities: portfolioData.activities,\n        statistics: {\n          totalPositions: portfolioData.positions.length,\n          longPositions: portfolioData.positions.filter(p => p.side === 'long').length,\n          shortPositions: portfolioData.positions.filter(p => p.side === 'short').length,\n          topGainer: portfolioData.positions.reduce((max, pos) => \n            pos.unrealizedPLPercent > (max?.unrealizedPLPercent || -Infinity) ? pos : max, null),\n          topLoser: portfolioData.positions.reduce((min, pos) => \n            pos.unrealizedPLPercent < (min?.unrealizedPLPercent || Infinity) ? pos : min, null)\n        }\n      },\n      provider: broker,\n      environment: credentials.isSandbox ? 'sandbox' : 'live',\n      timestamp: new Date().toISOString(),\n      dataSource: 'live_api'\n    };\n    \n    res.json(successResponse);\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    console.error(`❌ [IMPORT] Fatal error after ${duration}ms:`, error.message);\n    console.error(`❌ [IMPORT] Error stack:`, error.stack);\n    console.error(`❌ [IMPORT] Memory usage:`, process.memoryUsage());\n    \n    // Return detailed error information for debugging\n    res.status(500).json({\n      success: false,\n      error: 'Failed to import portfolio',\n      message: error.message,\n      details: {\n        errorType: error.constructor.name,\n        duration: duration,\n        endpoint: `${req.method} ${req.path}`,\n        broker: req.params?.broker,\n        accountType: req.query?.accountType,\n        userId: req.user?.sub ? 'present' : 'missing',\n        hasApiKey: !!req.user?.sub,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Test connection endpoint\nrouter.post('/test-connection/:broker', async (req, res) => {\n  const { broker } = req.params;\n  const userId = req.user?.sub || 'dev-user';\n  \n  try {\n    console.log(`Testing connection for broker: ${broker}, user: ${userId}`);\n    \n    // Return empty connection test result with comprehensive diagnostics\n    console.error('❌ Connection test unavailable - comprehensive diagnosis needed', {\n      broker,\n      userId,\n      detailed_diagnostics: {\n        attempted_operations: ['api_key_retrieval', 'broker_connection_test'],\n        potential_causes: [\n          'API keys not configured',\n          'Broker API unavailable',\n          'Invalid broker credentials',\n          'Network connectivity issues',\n          'External API rate limiting'\n        ],\n        troubleshooting_steps: [\n          'Check API key configuration',\n          'Verify broker API status',\n          'Test network connectivity',\n          'Review broker credential validity',\n          'Monitor external API limits'\n        ],\n        system_checks: [\n          'API key service availability',\n          'Broker API connectivity',\n          'Network health status',\n          'Authentication system health'\n        ]\n      }\n    });\n\n    const emptyConnectionResult = {\n      success: false,\n      connection: {\n        valid: false,\n        accountInfo: null,\n        permissions: [],\n        rateLimit: {\n          remaining: 0,\n          limit: 0,\n          resetTime: null\n        }\n      },\n      message: `Connection test failed for ${broker} API - configure your API keys`,\n      provider: broker,\n      dataSource: 'empty'\n    };\n    \n    res.json(emptyConnectionResult);\n    \n  } catch (error) {\n    console.error('Error testing connection:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to test connection',\n      details: error.message\n    });\n  }\n});\n\n// API Keys management for portfolio connections\nrouter.get('/api-keys', async (req, res) => {\n  const userId = req.user?.sub || 'dev-user';\n  \n  try {\n    const result = await query(`\n      SELECT \n        id,\n        provider,\n        description,\n        is_sandbox as \"isSandbox\",\n        is_active as \"isActive\",\n        created_at as \"createdAt\",\n        last_used as \"lastUsed\"\n      FROM user_api_keys \n      WHERE user_id = $1 \n      ORDER BY created_at DESC\n    `, [userId]);\n\n    // Don't return the actual encrypted keys for security\n    const apiKeys = result.rows.map(row => ({\n      id: row.id,\n      provider: row.provider,\n      description: row.description,\n      isSandbox: row.isSandbox,\n      isActive: row.isActive,\n      createdAt: row.createdAt,\n      lastUsed: row.lastUsed,\n      apiKey: '****' // Masked for security\n    }));\n\n    res.json({ \n      success: true, \n      apiKeys \n    });\n  } catch (error) {\n    console.error('Error fetching API keys:', error);\n    res.json({ \n      success: true, \n      apiKeys: [] // Return empty array for development\n    });\n  }\n});\n\n// Portfolio Optimization endpoints\nrouter.post('/optimization/run', async (req, res) => {\n  const userId = req.user?.sub || 'demo-user';\n  const { \n    objective = 'maxSharpe',\n    constraints = {},\n    includeAssets = [],\n    excludeAssets = [],\n    lookbackDays = 252\n  } = req.body;\n\n  try {\n    console.log(`Running portfolio optimization for user ${userId}`);\n    \n    // Check if optimization service is available\n    let OptimizationEngine;\n    try {\n      OptimizationEngine = require('../services/optimizationEngine');\n    } catch (moduleError) {\n      console.warn('OptimizationEngine service not available, returning mock optimization result');\n      \n      // Return mock optimization result\n      const mockResult = {\n        optimization: {\n          expectedReturn: 0.12,\n          volatility: 0.18,\n          sharpeRatio: 0.67,\n          weights: {}\n        },\n        rebalancing: [],\n        insights: [\n          {\n            type: 'info',\n            title: 'Optimization Service Unavailable',\n            message: 'Portfolio optimization service is currently being set up. Mock results shown.',\n            impact: 'Please try again later for detailed optimization recommendations.'\n          }\n        ],\n        metadata: {\n          universeSize: 10,\n          analysisDate: new Date().toISOString()\n        }\n      };\n      \n      return res.json({\n        success: true,\n        data: mockResult,\n        timestamp: new Date().toISOString(),\n        note: 'Optimization service temporarily unavailable - showing mock results'\n      });\n    }\n    \n    const optimizer = new OptimizationEngine();\n    \n    const result = await optimizer.runOptimization({\n      userId,\n      objective,\n      constraints,\n      includeAssets,\n      excludeAssets,\n      lookbackDays\n    });\n\n    res.json({\n      success: true,\n      data: result,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Portfolio optimization error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Portfolio optimization failed',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio optimization endpoint - returns optimization analysis\nrouter.get('/optimization', async (req, res) => {\n  const userId = req.user?.sub || 'demo-user';\n  \n  try {\n    console.log(`Getting portfolio optimization data for user ${userId}`);\n    \n    // Get current portfolio from live API\n    let currentPortfolio = null;\n    try {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (credentials) {\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n        \n        const positions = await alpaca.getPositions();\n        currentPortfolio = positions.map(p => ({\n          symbol: p.symbol,\n          quantity: p.quantity,\n          marketValue: p.marketValue,\n          weight: 0 // Will be calculated below\n        }));\n        \n        // Calculate weights\n        const totalValue = positions.reduce((sum, p) => sum + p.marketValue, 0);\n        if (totalValue > 0) {\n          currentPortfolio.forEach(p => {\n            p.weight = p.marketValue / totalValue;\n          });\n        }\n      }\n    } catch (apiError) {\n      console.warn(`API fetch failed for optimization: ${apiError.message}`);\n    }\n    \n    // Return optimization data (mock for now, could be enhanced with real optimization engine)\n    res.json({\n      success: true,\n      data: {\n        currentPortfolio: currentPortfolio || [\n          { symbol: 'AAPL', weight: 0.25, marketValue: 50000 },\n          { symbol: 'GOOGL', weight: 0.20, marketValue: 40000 },\n          { symbol: 'MSFT', weight: 0.15, marketValue: 30000 },\n          { symbol: 'TSLA', weight: 0.10, marketValue: 20000 },\n          { symbol: 'NVDA', weight: 0.30, marketValue: 60000 }\n        ],\n        optimizedWeights: [0.2, 0.18, 0.17, 0.15, 0.12, 0.08, 0.05, 0.03, 0.02],\n        metrics: {\n          expectedReturn: 0.125,\n          volatility: 0.165,\n          sharpeRatio: 0.76,\n          maxDrawdown: 0.18\n        },\n        riskAnalysis: {\n          concentrationRisk: 'medium',\n          sectorExposure: {\n            technology: 0.65,\n            healthcare: 0.15,\n            finance: 0.10,\n            consumer: 0.10\n          }\n        }\n      },\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Portfolio optimization error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get portfolio optimization data',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get optimization recommendations (quick analysis)\nrouter.get('/optimization/recommendations', async (req, res) => {\n  const userId = req.user?.sub || 'demo-user';\n  \n  try {\n    console.log(`Getting optimization recommendations for user ${userId}`);\n    \n    // Get current portfolio from live API to base recommendations on\n    let currentPortfolio = null;\n    try {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (credentials) {\n        console.log('📡 Fetching current portfolio for optimization analysis...');\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n        \n        const [positions, account] = await Promise.all([\n          alpaca.getPositions(),\n          alpaca.getAccount()\n        ]);\n        \n        currentPortfolio = {\n          totalValue: parseFloat(account.portfolio_value || account.equity || 0),\n          cashBalance: parseFloat(account.cash || account.buying_power || 0),\n          positions: positions.map(pos => ({\n            symbol: pos.symbol,\n            quantity: parseFloat(pos.qty),\n            marketValue: parseFloat(pos.market_value || 0),\n            weight: 0, // Will calculate below\n            unrealizedPL: parseFloat(pos.unrealized_pl || 0),\n            unrealizedPLPercent: parseFloat(pos.unrealized_plpc || 0) * 100\n          }))\n        };\n        \n        // Calculate position weights\n        if (currentPortfolio.totalValue > 0) {\n          currentPortfolio.positions.forEach(pos => {\n            pos.weight = (pos.marketValue / currentPortfolio.totalValue) * 100;\n          });\n        }\n        \n        console.log(`✅ Retrieved portfolio: $${currentPortfolio.totalValue.toFixed(2)} with ${currentPortfolio.positions.length} positions`);\n      }\n    } catch (apiError) {\n      console.warn('Failed to fetch live portfolio for optimization:', apiError.message);\n      // Fall back to database\n      try {\n        const result = await query(`\n          SELECT symbol, quantity, market_value, unrealized_pl, unrealized_plpc\n          FROM portfolio_holdings \n          WHERE user_id = $1 AND quantity > 0\n        `, [userId]);\n        \n        if (result.rows.length > 0) {\n          const totalValue = result.rows.reduce((sum, row) => sum + parseFloat(row.market_value || 0), 0);\n          currentPortfolio = {\n            totalValue: totalValue,\n            cashBalance: 0, // Unknown from holdings\n            positions: result.rows.map(row => ({\n              symbol: row.symbol,\n              quantity: parseFloat(row.quantity || 0),\n              marketValue: parseFloat(row.market_value || 0),\n              weight: totalValue > 0 ? (parseFloat(row.market_value) / totalValue) * 100 : 0,\n              unrealizedPL: parseFloat(row.unrealized_pl || 0),\n              unrealizedPLPercent: parseFloat(row.unrealized_plpc || 0)\n            }))\n          };\n        }\n      } catch (dbError) {\n        console.warn('Database fallback also failed:', dbError.message);\n      }\n    }\n    \n    // Check if optimization service is available\n    let OptimizationEngine;\n    try {\n      OptimizationEngine = require('../services/optimizationEngine');\n    } catch (moduleError) {\n      console.error('❌ OptimizationEngine service not available:', moduleError.message);\n      \n      return res.status(503).json({\n        success: false,\n        error: 'Optimization service unavailable',\n        message: 'Portfolio optimization service is currently not available. Please try again later.',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const optimizer = new OptimizationEngine();\n    \n    // Run quick optimization with default parameters\n    const result = await optimizer.runOptimization({\n      userId,\n      objective: 'maxSharpe',\n      lookbackDays: 126 // 6 months for faster analysis\n    });\n\n    // Extract key recommendations\n    const recommendations = {\n      primaryRecommendation: result.insights.find(i => i.type === 'warning') || result.insights[0],\n      riskScore: Math.round((1 - result.optimization.volatility / 0.3) * 100), // Scale volatility to 0-100\n      diversificationScore: Math.min(100, (result.metadata.universeSize / 15) * 100),\n      expectedImprovement: {\n        sharpeRatio: Math.max(0, result.optimization.sharpeRatio - 0.5),\n        volatilityReduction: Math.max(0, 0.2 - result.optimization.volatility),\n        returnIncrease: Math.max(0, result.optimization.expectedReturn - 0.08)\n      },\n      topActions: result.rebalancing.slice(0, 3),\n      timeToRebalance: result.rebalancing.length > 0 ? 'Recommended' : 'Not Needed'\n    };\n\n    res.json({\n      success: true,\n      data: recommendations,\n      fullOptimization: result,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Optimization recommendations error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get optimization recommendations',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Execute rebalancing trades\nrouter.post('/rebalance/execute', async (req, res) => {\n  const userId = req.user?.sub || 'demo-user';\n  const { trades, confirmationToken } = req.body;\n\n  try {\n    console.log(`Executing rebalancing trades for user ${userId}`);\n    \n    // Validate trades\n    if (!trades || !Array.isArray(trades) || trades.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid trades data'\n      });\n    }\n\n    // For now, simulate trade execution\n    // In production, would integrate with actual broker APIs\n    const executionResults = trades.map(trade => ({\n      ...trade,\n      status: 'executed',\n      executionPrice: trade.action === 'BUY' ? trade.marketPrice * 1.001 : trade.marketPrice * 0.999,\n      executionTime: new Date().toISOString(),\n      fees: Math.abs(trade.tradeValue) * 0.0005, // 0.05% fee\n      orderId: 'ORDER_' + Math.random().toString(36).substr(2, 9)\n    }));\n\n    // Calculate execution summary\n    const totalTrades = executionResults.length;\n    const totalVolume = executionResults.reduce((sum, trade) => sum + Math.abs(trade.tradeValue), 0);\n    const totalFees = executionResults.reduce((sum, trade) => sum + trade.fees, 0);\n\n    res.json({\n      success: true,\n      data: {\n        executionSummary: {\n          totalTrades,\n          totalVolume,\n          totalFees,\n          executionTime: new Date().toISOString(),\n          status: 'completed'\n        },\n        tradeResults: executionResults,\n        nextRebalanceDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString() // 3 months\n      },\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Rebalancing execution error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to execute rebalancing trades',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Get risk analysis\nrouter.get('/risk-analysis', async (req, res) => {\n  const userId = req.user?.sub || 'demo-user';\n  const { timeHorizon = 1, confidenceLevel = 0.95 } = req.query;\n\n  try {\n    console.log(`Getting risk analysis for user ${userId}`);\n    \n    // Get live portfolio data for risk analysis\n    let portfolioData = null;\n    let portfolioHistory = null;\n    \n    try {\n      const credentials = await apiKeyService.getDecryptedApiKey(userId, 'alpaca');\n      \n      if (credentials) {\n        console.log('📡 Fetching live portfolio data for risk analysis...');\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n        \n        const [positions, account, history] = await Promise.all([\n          alpaca.getPositions(),\n          alpaca.getAccount(),\n          alpaca.getPortfolioHistory({\n            period: '1Y',\n            timeframe: '1Day'\n          }).catch(e => {\n            console.warn('Portfolio history unavailable:', e.message);\n            return null;\n          })\n        ]);\n        \n        portfolioData = {\n          totalValue: parseFloat(account.portfolio_value || account.equity || 0),\n          positions: positions.map(pos => ({\n            symbol: pos.symbol,\n            marketValue: parseFloat(pos.market_value || 0),\n            unrealizedPL: parseFloat(pos.unrealized_pl || 0),\n            unrealizedPLPercent: parseFloat(pos.unrealized_plpc || 0) * 100,\n            weight: 0 // Calculate below\n          }))\n        };\n        \n        // Calculate position weights\n        if (portfolioData.totalValue > 0) {\n          portfolioData.positions.forEach(pos => {\n            pos.weight = (pos.marketValue / portfolioData.totalValue);\n          });\n        }\n        \n        portfolioHistory = history;\n        console.log(`✅ Retrieved portfolio data for risk analysis: $${portfolioData.totalValue.toFixed(2)}`);\n      }\n    } catch (apiError) {\n      console.warn('Failed to fetch live data for risk analysis:', apiError.message);\n    }\n    \n    // Calculate risk metrics from live data or use realistic defaults\n    let riskMetrics;\n    \n    if (portfolioHistory && portfolioHistory.equity && portfolioHistory.equity.length > 30) {\n      // Calculate actual risk metrics from portfolio history\n      const returns = [];\n      for (let i = 1; i < portfolioHistory.equity.length; i++) {\n        const dailyReturn = (portfolioHistory.equity[i] - portfolioHistory.equity[i-1]) / portfolioHistory.equity[i-1];\n        returns.push(dailyReturn);\n      }\n      \n      // Calculate volatility (standard deviation of returns)\n      const meanReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n      const variance = returns.reduce((sum, r) => sum + Math.pow(r - meanReturn, 2), 0) / returns.length;\n      const volatility = Math.sqrt(variance * 252); // Annualized\n      \n      // Calculate VaR\n      const sortedReturns = returns.slice().sort((a, b) => a - b);\n      const var95Index = Math.floor(returns.length * 0.05);\n      const var99Index = Math.floor(returns.length * 0.01);\n      const var95 = sortedReturns[var95Index] || -0.025;\n      const var99 = sortedReturns[var99Index] || -0.042;\n      \n      // Calculate max drawdown\n      let maxDrawdown = 0;\n      let peak = portfolioHistory.equity[0];\n      for (const value of portfolioHistory.equity) {\n        if (value > peak) peak = value;\n        const drawdown = (peak - value) / peak;\n        if (drawdown > maxDrawdown) maxDrawdown = drawdown;\n      }\n      \n      riskMetrics = {\n        volatility: volatility,\n        var95: var95,\n        var99: var99,\n        maxDrawdown: -maxDrawdown,\n        beta: 1.0, // Would need market data to calculate\n        correlationWithMarket: 0.8 // Would need market data\n      };\n      \n      console.log(`📊 Calculated risk metrics from ${returns.length} days of data`);\n    } else {\n      // Use reasonable defaults based on portfolio composition if available\n      const techWeight = portfolioData ? \n        portfolioData.positions.filter(p => ['AAPL', 'MSFT', 'GOOGL', 'NVDA', 'TSLA'].includes(p.symbol))\n          .reduce((sum, p) => sum + p.weight, 0) : 0.5;\n      \n      riskMetrics = {\n        volatility: 0.15 + (techWeight * 0.1), // Higher vol for tech-heavy portfolios\n        var95: -0.02 - (techWeight * 0.01),\n        var99: -0.035 - (techWeight * 0.015),\n        maxDrawdown: -0.08 - (techWeight * 0.05),\n        beta: 0.9 + (techWeight * 0.3),\n        correlationWithMarket: 0.75 + (techWeight * 0.15)\n      };\n    }\n    \n    // Build risk factors based on actual portfolio composition\n    const riskFactors = [];\n    let sectorConcentration = 0;\n    \n    if (portfolioData && portfolioData.positions.length > 0) {\n      // Calculate sector concentration risk\n      const sectorWeights = {};\n      portfolioData.positions.forEach(pos => {\n        // Simple sector mapping - would be enhanced with real sector data\n        let sector = 'Other';\n        if (['AAPL', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'META'].includes(pos.symbol)) sector = 'Technology';\n        else if (['JPM', 'BAC', 'WFC', 'C'].includes(pos.symbol)) sector = 'Financial';\n        else if (['JNJ', 'PFE', 'UNH', 'ABBV'].includes(pos.symbol)) sector = 'Healthcare';\n        \n        sectorWeights[sector] = (sectorWeights[sector] || 0) + pos.weight;\n      });\n      \n      sectorConcentration = Math.max(...Object.values(sectorWeights));\n      \n      riskFactors.push(\n        { factor: 'Market Risk', exposure: 0.75, contribution: 0.65 },\n        { factor: 'Sector Concentration', exposure: sectorConcentration, contribution: sectorConcentration * 0.4 },\n        { factor: 'Currency Risk', exposure: 0.15, contribution: 0.08 },\n        { factor: 'Liquidity Risk', exposure: 0.25, contribution: 0.07 }\n      );\n    } else {\n      // Default risk factors\n      riskFactors.push(\n        { factor: 'Market Risk', exposure: 0.75, contribution: 0.65 },\n        { factor: 'Sector Concentration', exposure: 0.45, contribution: 0.20 },\n        { factor: 'Currency Risk', exposure: 0.15, contribution: 0.08 },\n        { factor: 'Liquidity Risk', exposure: 0.25, contribution: 0.07 }\n      );\n    }\n    \n    // Generate portfolio-specific recommendations\n    const recommendations = [];\n    if (sectorConcentration > 0.5) {\n      recommendations.push({\n        type: 'warning',\n        title: 'High Sector Concentration',\n        message: `${(sectorConcentration * 100).toFixed(1)}% concentration in single sector increases risk`,\n        impact: 'Consider diversifying across sectors'\n      });\n    }\n    \n    if (portfolioData && portfolioData.positions.length < 5) {\n      recommendations.push({\n        type: 'info',\n        title: 'Limited Diversification',\n        message: 'Portfolio has fewer than 5 positions, increasing concentration risk',\n        impact: 'Consider adding more positions for better diversification'\n      });\n    }\n    \n    if (!recommendations.length) {\n      recommendations.push({\n        type: 'info',\n        title: 'Diversification Opportunity',\n        message: 'Consider adding international exposure to reduce market concentration',\n        impact: 'Could reduce volatility by 2-3%'\n      });\n    }\n\n    const riskAnalysis = {\n      portfolioRisk: {\n        volatility: riskMetrics.volatility,\n        var95: riskMetrics.var95,\n        var99: riskMetrics.var99,\n        beta: riskMetrics.beta,\n        correlationWithMarket: riskMetrics.correlationWithMarket,\n        maxDrawdown: riskMetrics.maxDrawdown\n      },\n      riskFactors: riskFactors,\n      stressTesting: {\n        marketCrash2020: { \n          portfolioLoss: riskMetrics.maxDrawdown * 1.2, \n          marketLoss: -0.35, \n          beta: riskMetrics.beta \n        },\n        dotComBubble: { \n          portfolioLoss: riskMetrics.maxDrawdown * 1.8, \n          marketLoss: -0.49, \n          beta: riskMetrics.beta * 0.95 \n        },\n        financialCrisis2008: { \n          portfolioLoss: riskMetrics.maxDrawdown * 1.5, \n          marketLoss: -0.42, \n          beta: riskMetrics.beta * 0.9 \n        }\n      },\n      recommendations: recommendations,\n      dataSource: portfolioHistory ? 'live_api' : (portfolioData ? 'live_positions' : 'estimated'),\n      metadata: {\n        hasHistoricalData: !!portfolioHistory,\n        hasCurrentPositions: !!(portfolioData && portfolioData.positions.length > 0),\n        analysisDate: new Date().toISOString(),\n        portfolioValue: portfolioData ? portfolioData.totalValue : null,\n        positionCount: portfolioData ? portfolioData.positions.length : 0\n      }\n    };\n\n    res.json({\n      success: true,\n      data: riskAnalysis,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Risk analysis error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get risk analysis',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Portfolio data synchronization endpoint\nrouter.post('/sync', createValidationMiddleware({\n  force: {\n    type: 'boolean',\n    sanitizer: (value) => sanitizers.boolean(value, { defaultValue: false }),\n    validator: (value) => typeof value === 'boolean',\n    errorMessage: 'force must be true or false'\n  }\n}), async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { force = false } = req.body;\n    \n    console.log(`🔄 [${requestId}] Portfolio sync request initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      force,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    // Import sync service\n    const { PortfolioSyncService } = require('../utils/portfolioSyncService');\n    // API key service already imported at top of file\n    \n    // Initialize sync service\n    const syncService = new PortfolioSyncService({\n      conflictResolutionStrategy: 'broker_priority',\n      enablePerformanceTracking: true\n    });\n\n    // Check if sync is already in progress\n    const currentSyncStatus = syncService.getSyncStatus(userId);\n    if (currentSyncStatus && currentSyncStatus.status === 'in_progress' && !force) {\n      return res.badRequest('Sync already in progress', {\n        requestId,\n        currentSyncId: currentSyncStatus.syncId,\n        stage: currentSyncStatus.stage,\n        startTime: currentSyncStatus.startTime\n      });\n    }\n\n    // Execute synchronization\n    const syncResult = await syncService.syncUserPortfolio(userId, apiKeyService, {\n      force,\n      requestId\n    });\n\n    const totalDuration = Date.now() - requestStart;\n    \n    console.log(`✅ [${requestId}] Portfolio sync completed successfully in ${totalDuration}ms`, {\n      syncId: syncResult.syncId,\n      recordsProcessed: syncResult.result.summary.totalRecordsProcessed,\n      conflictsResolved: syncResult.result.summary.totalConflictsResolved\n    });\n\n    res.success({\n      syncId: syncResult.syncId,\n      duration: totalDuration,\n      summary: syncResult.result.summary,\n      stages: Object.keys(syncResult.result.stages).map(stage => ({\n        stage,\n        success: syncResult.result.stages[stage].success,\n        recordsProcessed: syncResult.result.stages[stage].recordsProcessed || 0,\n        conflictsResolved: syncResult.result.stages[stage].conflictsResolved || 0\n      }))\n    }, {\n      requestId,\n      syncDuration: `${syncResult.duration}ms`\n    });\n    \n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Portfolio sync FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack,\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n      impact: 'Portfolio synchronization failed'\n    });\n    \n    res.serverError('Portfolio synchronization failed', {\n      requestId,\n      duration: `${errorDuration}ms`,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Portfolio sync status endpoint\nrouter.get('/sync/status', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  \n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    \n    // Import sync service\n    const { PortfolioSyncService } = require('../utils/portfolioSyncService');\n    \n    // Create temporary instance to get status\n    const syncService = new PortfolioSyncService();\n    const syncStatus = syncService.getSyncStatus(userId);\n    const serviceMetrics = syncService.getMetrics();\n    \n    res.success({\n      userSync: syncStatus || {\n        status: 'none',\n        message: 'No sync has been performed for this user'\n      },\n      serviceMetrics\n    }, {\n      requestId\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio sync status request failed:`, {\n      error: error.message,\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'\n    });\n    \n    res.serverError('Failed to get sync status', {\n      requestId,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n// Advanced Portfolio Analytics endpoint\nrouter.get('/analytics', createValidationMiddleware(portfolioValidationSchemas.analytics), async (req, res) => {\n  const requestId = res.locals.requestId || 'unknown';\n  const startTime = Date.now();\n  \n  if (shouldLog('INFO')) console.log(`📊 [${requestId}] Advanced portfolio analytics request`);\n  \n  try {\n    const { period = '1Y', includeBenchmark = false } = req.query;\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    \n    // Get portfolio holdings\n    const holdingsQuery = `\n      SELECT symbol, market_value, sector, quantity, avg_cost, current_price,\n             unrealized_pl, unrealized_plpc, updated_at\n      FROM portfolio_holdings \n      WHERE user_id = $1 AND quantity > 0\n      ORDER BY market_value DESC\n    `;\n    \n    const holdingsResult = await query(holdingsQuery, [userId], 8000);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No portfolio holdings found',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const holdings = holdingsResult.rows;\n    \n    // Get historical performance data\n    const performanceQuery = `\n      SELECT \n        DATE(updated_at) as date,\n        SUM(market_value) as portfolio_value,\n        SUM(unrealized_pl) as total_pnl\n      FROM portfolio_holdings \n      WHERE user_id = $1 AND quantity > 0\n      GROUP BY DATE(updated_at)\n      ORDER BY DATE(updated_at) DESC\n      LIMIT 252\n    `;\n    \n    const performanceResult = await query(performanceQuery, [userId], 8000);\n    const performanceData = performanceResult.rows.map(row => ({\n      date: row.date,\n      portfolioValue: parseFloat(row.portfolio_value || 0),\n      totalPnL: parseFloat(row.total_pnl || 0)\n    }));\n    \n    // Calculate comprehensive analytics\n    const portfolioAnalyticsResult = portfolioAnalytics.calculatePortfolioAnalytics(performanceData);\n    const sectorAnalysis = portfolioAnalytics.calculateSectorAnalysis(holdings);\n    \n    // Calculate institutional-grade factor analysis\n    const factorAnalysisResult = portfolioFactorAnalysis.performFactorAnalysis(holdings, performanceData);\n    \n    // Calculate position-level risk metrics\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    const positionAnalysis = holdings.map(holding => {\n      const weight = totalValue > 0 ? (parseFloat(holding.market_value) / totalValue) * 100 : 0;\n      const unrealizedReturn = parseFloat(holding.unrealized_plpc || 0);\n      \n      return {\n        symbol: holding.symbol,\n        sector: holding.sector || 'Other',\n        weight: weight,\n        marketValue: parseFloat(holding.market_value || 0),\n        unrealizedReturn: unrealizedReturn,\n        riskContribution: weight * Math.abs(unrealizedReturn) / 100,\n        avgCost: parseFloat(holding.avg_cost || 0),\n        currentPrice: parseFloat(holding.current_price || 0)\n      };\n    });\n    \n    // Calculate risk metrics\n    const riskMetrics = {\n      portfolioVaR: portfolioAnalyticsResult.var95,\n      expectedShortfall: portfolioAnalyticsResult.var95 * 1.3, // Approximation\n      concentrationRisk: sectorAnalysis.concentrationRisk,\n      diversificationBenefit: sectorAnalysis.diversificationScore,\n      maxPositionWeight: Math.max(...positionAnalysis.map(p => p.weight)),\n      activePositions: holdings.length,\n      riskBudgetUtilization: Math.min(100, sectorAnalysis.concentrationRisk * 1.2)\n    };\n    \n    // Performance attribution\n    const performanceAttribution = {\n      sectorContribution: sectorAnalysis.sectorAllocation.map(sector => ({\n        sector: sector.sector,\n        allocation: sector.allocation,\n        contribution: sector.allocation * 0.1 // Simplified calculation\n      })),\n      topContributors: positionAnalysis\n        .filter(p => p.unrealizedReturn > 0)\n        .sort((a, b) => b.unrealizedReturn - a.unrealizedReturn)\n        .slice(0, 5),\n      topDetractors: positionAnalysis\n        .filter(p => p.unrealizedReturn < 0)\n        .sort((a, b) => a.unrealizedReturn - b.unrealizedReturn)\n        .slice(0, 5)\n    };\n    \n    // Rebalancing recommendations\n    const rebalancingRecommendations = [];\n    \n    // Check for overconcentration\n    const overweightPositions = positionAnalysis.filter(p => p.weight > 10);\n    if (overweightPositions.length > 0) {\n      rebalancingRecommendations.push({\n        type: 'REDUCE_CONCENTRATION',\n        priority: 'HIGH',\n        message: `Consider reducing positions over 10% of portfolio`,\n        affectedPositions: overweightPositions.map(p => p.symbol)\n      });\n    }\n    \n    // Check for sector concentration\n    const overweightSectors = sectorAnalysis.sectorAllocation.filter(s => s.allocation > 30);\n    if (overweightSectors.length > 0) {\n      rebalancingRecommendations.push({\n        type: 'SECTOR_DIVERSIFICATION',\n        priority: 'MEDIUM',\n        message: `Consider diversifying across sectors`,\n        affectedSectors: overweightSectors.map(s => s.sector)\n      });\n    }\n    \n    // Check for low diversification\n    if (sectorAnalysis.diversificationScore < 50) {\n      rebalancingRecommendations.push({\n        type: 'INCREASE_DIVERSIFICATION',\n        priority: 'HIGH',\n        message: `Portfolio lacks diversification (score: ${sectorAnalysis.diversificationScore.toFixed(1)})`\n      });\n    }\n    \n    const response = {\n      success: true,\n      data: {\n        analytics: portfolioAnalyticsResult,\n        sectorAnalysis: sectorAnalysis,\n        factorAnalysis: factorAnalysisResult,\n        riskMetrics: riskMetrics,\n        performanceAttribution: performanceAttribution,\n        rebalancingRecommendations: rebalancingRecommendations,\n        positionAnalysis: positionAnalysis.slice(0, 10) // Top 10 positions\n      },\n      metadata: {\n        period: period,\n        includeBenchmark: includeBenchmark,\n        dataPoints: performanceData.length,\n        activePositions: holdings.length,\n        totalValue: totalValue,\n        calculatedAt: new Date().toISOString(),\n        duration: Date.now() - startTime\n      }\n    };\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Advanced analytics completed in ${Date.now() - startTime}ms`);\n    return res.json(response);\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Advanced analytics failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to calculate advanced analytics',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n// Portfolio rebalancing and optimization endpoints\nconst PortfolioOptimizationEngine = require('../utils/portfolioOptimizationEngine');\n\n/**\n * GET /portfolio/rebalance/recommendations\n * Get portfolio rebalancing recommendations\n */\nrouter.get('/rebalance/recommendations', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio rebalancing recommendations requested for user: ${userId.substring(0, 8)}...`);\n    \n    // Get current portfolio holdings\n    const holdingsResult = await query(`\n      SELECT \n        h.symbol,\n        h.shares,\n        h.avg_cost,\n        h.current_price,\n        h.market_value,\n        h.gain_loss,\n        h.gain_loss_percent,\n        h.sector,\n        h.industry,\n        h.last_updated\n      FROM portfolio_holdings h\n      WHERE h.user_id = $1 AND h.shares > 0\n      ORDER BY h.market_value DESC\n    `, [userId]);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.json({\n        success: true,\n        data: {\n          recommendations: [],\n          summary: {\n            message: 'No portfolio holdings found. Add positions to get rebalancing recommendations.',\n            totalValue: 0,\n            positionsCount: 0\n          }\n        },\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - startTime\n      });\n    }\n    \n    const holdings = holdingsResult.rows;\n    const optimizer = new PortfolioOptimizationEngine();\n    \n    // Get user preferences or use defaults\n    const preferences = {\n      riskTolerance: req.query.riskTolerance || 'moderate',\n      objective: req.query.objective || 'balanced',\n      maxPositionSize: parseFloat(req.query.maxPosition) || 0.25,\n      minPositionSize: parseFloat(req.query.minPosition) || 0.05,\n      rebalanceThreshold: parseFloat(req.query.threshold) || 0.05\n    };\n    \n    // Generate rebalancing recommendations\n    const optimizationResults = await optimizer.optimizePortfolio(holdings, userId, preferences);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Rebalancing recommendations generated in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        recommendations: optimizationResults.rebalancingRecommendations,\n        currentAllocation: optimizationResults.currentAllocation,\n        targetAllocation: optimizationResults.targetAllocation,\n        optimization: {\n          expectedReturn: optimizationResults.expectedReturn,\n          expectedVolatility: optimizationResults.expectedVolatility,\n          sharpeRatio: optimizationResults.sharpeRatio,\n          objective: preferences.objective\n        },\n        summary: {\n          totalValue: optimizationResults.currentPortfolioValue,\n          positionsCount: holdings.length,\n          rebalanceNeeded: optimizationResults.rebalanceNeeded,\n          estimatedTradingCost: optimizationResults.estimatedTradingCost\n        }\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio rebalancing recommendations failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to generate rebalancing recommendations',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * POST /portfolio/rebalance/execute\n * Execute portfolio rebalancing trades\n */\nrouter.post('/rebalance/execute', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔄 [${requestId}] Portfolio rebalancing execution requested for user: ${userId.substring(0, 8)}...`);\n    \n    const { trades, dryRun = true } = req.body;\n    \n    if (!trades || !Array.isArray(trades) || trades.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid trades data',\n        message: 'Trades array is required and must contain at least one trade',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Get user's API credentials for trading\n    const apiKey = await getUserApiKey(userId, 'alpaca');\n    if (!apiKey) {\n      return res.status(400).json({\n        success: false,\n        error: 'Alpaca API key required',\n        message: 'Please configure your Alpaca API key in settings to execute trades',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const alpacaService = new AlpacaService(apiKey.apiKey, apiKey.apiSecret, apiKey.isSandbox);\n    \n    // Execute trades (or simulate if dry run)\n    const executionResults = [];\n    let totalEstimatedCost = 0;\n    \n    for (const trade of trades) {\n      try {\n        const result = {\n          symbol: trade.symbol,\n          action: trade.action,\n          quantity: trade.quantity,\n          type: trade.type || 'market',\n          status: 'pending'\n        };\n        \n        if (dryRun) {\n          // Simulate trade execution\n          result.status = 'simulated';\n          result.estimatedPrice = trade.estimatedPrice;\n          result.estimatedCost = trade.quantity * trade.estimatedPrice;\n          totalEstimatedCost += result.estimatedCost;\n        } else {\n          // Execute actual trade\n          const order = await alpacaService.createOrder({\n            symbol: trade.symbol,\n            qty: trade.quantity,\n            side: trade.action,\n            type: trade.type || 'market',\n            time_in_force: trade.timeInForce || 'day'\n          });\n          \n          result.status = 'executed';\n          result.orderId = order.id;\n          result.filledPrice = order.filled_avg_price;\n          result.filledQuantity = order.filled_qty;\n        }\n        \n        executionResults.push(result);\n        \n      } catch (tradeError) {\n        console.error(`❌ [${requestId}] Trade execution failed for ${trade.symbol}:`, tradeError.message);\n        executionResults.push({\n          symbol: trade.symbol,\n          action: trade.action,\n          quantity: trade.quantity,\n          status: 'failed',\n          error: tradeError.message\n        });\n      }\n    }\n    \n    // Update portfolio holdings if not dry run\n    if (!dryRun) {\n      // This would typically update the portfolio_holdings table\n      // For now, we'll let the next sync update the holdings\n      if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio holdings will be updated on next sync`);\n    }\n    \n    const successfulTrades = executionResults.filter(r => r.status === 'executed' || r.status === 'simulated');\n    const failedTrades = executionResults.filter(r => r.status === 'failed');\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Rebalancing execution completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        executionResults,\n        summary: {\n          totalTrades: trades.length,\n          successfulTrades: successfulTrades.length,\n          failedTrades: failedTrades.length,\n          totalEstimatedCost,\n          dryRun,\n          executionTime: Date.now() - startTime\n        }\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio rebalancing execution failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to execute rebalancing trades',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * GET /portfolio/allocation/analysis\n * Get portfolio allocation analysis and optimization suggestions\n */\nrouter.get('/allocation/analysis', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio allocation analysis requested for user: ${userId.substring(0, 8)}...`);\n    \n    // Get current portfolio holdings with extended data\n    const holdingsResult = await query(`\n      SELECT \n        h.symbol,\n        h.shares,\n        h.avg_cost,\n        h.current_price,\n        h.market_value,\n        h.gain_loss,\n        h.gain_loss_percent,\n        h.sector,\n        h.industry,\n        h.last_updated,\n        p.market_cap,\n        p.beta,\n        p.pe_ratio,\n        p.dividend_yield\n      FROM portfolio_holdings h\n      LEFT JOIN latest_prices p ON h.symbol = p.symbol\n      WHERE h.user_id = $1 AND h.shares > 0\n      ORDER BY h.market_value DESC\n    `, [userId]);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.json({\n        success: true,\n        data: {\n          analysis: {\n            message: 'No portfolio holdings found for analysis',\n            totalValue: 0,\n            positionsCount: 0\n          }\n        },\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - startTime\n      });\n    }\n    \n    const holdings = holdingsResult.rows;\n    const totalValue = holdings.reduce((sum, h) => sum + parseFloat(h.market_value || 0), 0);\n    \n    // Calculate allocation breakdowns\n    const sectorAllocation = {};\n    const industryAllocation = {};\n    const marketCapAllocation = { large: 0, mid: 0, small: 0 };\n    \n    holdings.forEach(holding => {\n      const value = parseFloat(holding.market_value || 0);\n      const allocation = totalValue > 0 ? (value / totalValue) * 100 : 0;\n      \n      // Sector allocation\n      const sector = holding.sector || 'Other';\n      sectorAllocation[sector] = (sectorAllocation[sector] || 0) + allocation;\n      \n      // Industry allocation\n      const industry = holding.industry || 'Other';\n      industryAllocation[industry] = (industryAllocation[industry] || 0) + allocation;\n      \n      // Market cap allocation\n      const marketCap = parseFloat(holding.market_cap || 0);\n      if (marketCap > 10000000000) { // > $10B\n        marketCapAllocation.large += allocation;\n      } else if (marketCap > 2000000000) { // > $2B\n        marketCapAllocation.mid += allocation;\n      } else {\n        marketCapAllocation.small += allocation;\n      }\n    });\n    \n    // Calculate risk metrics\n    const portfolioBeta = holdings.reduce((sum, h) => {\n      const allocation = parseFloat(h.market_value || 0) / totalValue;\n      const beta = parseFloat(h.beta || 1);\n      return sum + (allocation * beta);\n    }, 0);\n    \n    const avgPE = holdings.reduce((sum, h) => {\n      const allocation = parseFloat(h.market_value || 0) / totalValue;\n      const pe = parseFloat(h.pe_ratio || 0);\n      return sum + (allocation * pe);\n    }, 0);\n    \n    const avgDividendYield = holdings.reduce((sum, h) => {\n      const allocation = parseFloat(h.market_value || 0) / totalValue;\n      const dividend = parseFloat(h.dividend_yield || 0);\n      return sum + (allocation * dividend);\n    }, 0);\n    \n    // Generate optimization suggestions\n    const suggestions = [];\n    \n    // Concentration risk check\n    const topPositions = holdings.slice(0, 5);\n    const top5Concentration = topPositions.reduce((sum, h) => sum + (parseFloat(h.market_value) / totalValue) * 100, 0);\n    \n    if (top5Concentration > 70) {\n      suggestions.push({\n        type: 'concentration_risk',\n        severity: 'high',\n        message: `Top 5 positions represent ${top5Concentration.toFixed(1)}% of portfolio. Consider reducing concentration risk.`,\n        recommendation: 'Diversify holdings across more positions or sectors'\n      });\n    }\n    \n    // Sector concentration check\n    const maxSectorAllocation = Math.max(...Object.values(sectorAllocation));\n    if (maxSectorAllocation > 40) {\n      suggestions.push({\n        type: 'sector_concentration',\n        severity: 'medium',\n        message: `High sector concentration detected (${maxSectorAllocation.toFixed(1)}%).`,\n        recommendation: 'Consider diversifying across different sectors'\n      });\n    }\n    \n    // Risk level assessment\n    if (portfolioBeta > 1.5) {\n      suggestions.push({\n        type: 'high_beta',\n        severity: 'medium',\n        message: `Portfolio beta is ${portfolioBeta.toFixed(2)}, indicating higher volatility than market.`,\n        recommendation: 'Consider adding some defensive stocks or bonds to reduce risk'\n      });\n    }\n    \n    if (suggestions.length === 0) {\n      suggestions.push({\n        type: 'well_diversified',\n        severity: 'info',\n        message: 'Portfolio appears well-diversified with good risk management.',\n        recommendation: 'Continue monitoring and periodic rebalancing'\n      });\n    }\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio allocation analysis completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        analysis: {\n          totalValue,\n          positionsCount: holdings.length,\n          allocations: {\n            sector: Object.entries(sectorAllocation).map(([name, percentage]) => ({\n              name,\n              percentage: parseFloat(percentage.toFixed(2))\n            })).sort((a, b) => b.percentage - a.percentage),\n            industry: Object.entries(industryAllocation).map(([name, percentage]) => ({\n              name,\n              percentage: parseFloat(percentage.toFixed(2))\n            })).sort((a, b) => b.percentage - a.percentage),\n            marketCap: [\n              { name: 'Large Cap', percentage: parseFloat(marketCapAllocation.large.toFixed(2)) },\n              { name: 'Mid Cap', percentage: parseFloat(marketCapAllocation.mid.toFixed(2)) },\n              { name: 'Small Cap', percentage: parseFloat(marketCapAllocation.small.toFixed(2)) }\n            ]\n          },\n          riskMetrics: {\n            portfolioBeta: parseFloat(portfolioBeta.toFixed(2)),\n            avgPE: parseFloat(avgPE.toFixed(2)),\n            avgDividendYield: parseFloat(avgDividendYield.toFixed(2)),\n            top5Concentration: parseFloat(top5Concentration.toFixed(2))\n          },\n          suggestions\n        }\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio allocation analysis failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to analyze portfolio allocation',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * GET /portfolio/export/csv\n * Export portfolio holdings to CSV format\n */\nrouter.get('/export/csv', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio CSV export requested for user: ${userId.substring(0, 8)}...`);\n    \n    // Get portfolio holdings with all relevant data\n    const holdingsResult = await query(`\n      SELECT \n        h.symbol,\n        h.shares,\n        h.avg_cost,\n        h.current_price,\n        h.market_value,\n        h.gain_loss,\n        h.gain_loss_percent,\n        h.sector,\n        h.industry,\n        h.last_updated,\n        h.purchase_date,\n        p.company_name,\n        p.market_cap,\n        p.beta,\n        p.pe_ratio,\n        p.dividend_yield,\n        p.volume\n      FROM portfolio_holdings h\n      LEFT JOIN company_profiles p ON h.symbol = p.symbol\n      WHERE h.user_id = $1 AND h.shares > 0\n      ORDER BY h.market_value DESC\n    `, [userId]);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No portfolio holdings found',\n        message: 'Cannot export empty portfolio',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const holdings = holdingsResult.rows;\n    \n    // Generate CSV content\n    const csvHeaders = [\n      'Symbol',\n      'Company Name',\n      'Shares',\n      'Avg Cost',\n      'Current Price',\n      'Market Value',\n      'Gain/Loss',\n      'Gain/Loss %',\n      'Sector',\n      'Industry',\n      'Purchase Date',\n      'Market Cap',\n      'Beta',\n      'P/E Ratio',\n      'Dividend Yield',\n      'Volume',\n      'Last Updated'\n    ];\n    \n    const csvRows = holdings.map(holding => [\n      holding.symbol,\n      holding.company_name || '',\n      holding.shares,\n      holding.avg_cost,\n      holding.current_price,\n      holding.market_value,\n      holding.gain_loss,\n      holding.gain_loss_percent,\n      holding.sector || '',\n      holding.industry || '',\n      holding.purchase_date ? new Date(holding.purchase_date).toISOString().split('T')[0] : '',\n      holding.market_cap || '',\n      holding.beta || '',\n      holding.pe_ratio || '',\n      holding.dividend_yield || '',\n      holding.volume || '',\n      holding.last_updated ? new Date(holding.last_updated).toISOString() : ''\n    ]);\n    \n    // Create CSV content\n    const csvContent = [csvHeaders, ...csvRows]\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n    \n    // Generate filename with timestamp\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `portfolio_export_${timestamp}.csv`;\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio CSV export completed in ${Date.now() - startTime}ms`);\n    \n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=${filename}`);\n    res.send(csvContent);\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio CSV export failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to export portfolio to CSV',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * GET /portfolio/export/json\n * Export portfolio holdings to JSON format\n */\nrouter.get('/export/json', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📊 [${requestId}] Portfolio JSON export requested for user: ${userId.substring(0, 8)}...`);\n    \n    // Get comprehensive portfolio data\n    const [holdingsResult, summaryResult] = await Promise.all([\n      query(`\n        SELECT \n          h.symbol,\n          h.shares,\n          h.avg_cost,\n          h.current_price,\n          h.market_value,\n          h.gain_loss,\n          h.gain_loss_percent,\n          h.sector,\n          h.industry,\n          h.last_updated,\n          h.purchase_date,\n          p.company_name,\n          p.market_cap,\n          p.beta,\n          p.pe_ratio,\n          p.dividend_yield\n        FROM portfolio_holdings h\n        LEFT JOIN company_profiles p ON h.symbol = p.symbol\n        WHERE h.user_id = $1 AND h.shares > 0\n        ORDER BY h.market_value DESC\n      `, [userId]),\n      query(`\n        SELECT \n          SUM(market_value) as total_value,\n          SUM(gain_loss) as total_gain_loss,\n          COUNT(*) as positions_count\n        FROM portfolio_holdings\n        WHERE user_id = $1 AND shares > 0\n      `, [userId])\n    ]);\n    \n    if (holdingsResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No portfolio holdings found',\n        message: 'Cannot export empty portfolio',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const holdings = holdingsResult.rows;\n    const summary = summaryResult.rows[0];\n    \n    // Calculate sector allocation\n    const totalValue = parseFloat(summary.total_value || 0);\n    const sectorAllocation = {};\n    \n    holdings.forEach(holding => {\n      const sector = holding.sector || 'Other';\n      const value = parseFloat(holding.market_value || 0);\n      sectorAllocation[sector] = (sectorAllocation[sector] || 0) + value;\n    });\n    \n    // Convert to percentages\n    const sectorBreakdown = Object.entries(sectorAllocation).map(([sector, value]) => ({\n      sector,\n      value: parseFloat(value.toFixed(2)),\n      percentage: totalValue > 0 ? parseFloat(((value / totalValue) * 100).toFixed(2)) : 0\n    })).sort((a, b) => b.value - a.value);\n    \n    const exportData = {\n      metadata: {\n        exportDate: new Date().toISOString(),\n        exportType: 'portfolio_holdings',\n        userId: userId.substring(0, 8) + '...',\n        totalPositions: holdings.length,\n        totalValue: parseFloat(summary.total_value || 0),\n        totalGainLoss: parseFloat(summary.total_gain_loss || 0),\n        totalGainLossPercent: totalValue > 0 ? parseFloat(((summary.total_gain_loss / (totalValue - summary.total_gain_loss)) * 100).toFixed(2)) : 0\n      },\n      holdings: holdings.map(holding => ({\n        symbol: holding.symbol,\n        companyName: holding.company_name,\n        shares: parseFloat(holding.shares),\n        avgCost: parseFloat(holding.avg_cost),\n        currentPrice: parseFloat(holding.current_price),\n        marketValue: parseFloat(holding.market_value),\n        gainLoss: parseFloat(holding.gain_loss),\n        gainLossPercent: parseFloat(holding.gain_loss_percent),\n        sector: holding.sector,\n        industry: holding.industry,\n        purchaseDate: holding.purchase_date,\n        marketCap: holding.market_cap,\n        beta: holding.beta,\n        peRatio: holding.pe_ratio,\n        dividendYield: holding.dividend_yield,\n        lastUpdated: holding.last_updated\n      })),\n      sectorBreakdown,\n      summary: {\n        totalValue: parseFloat(summary.total_value || 0),\n        totalGainLoss: parseFloat(summary.total_gain_loss || 0),\n        positionsCount: parseInt(summary.positions_count || 0),\n        averageGainLoss: holdings.length > 0 ? parseFloat((summary.total_gain_loss / holdings.length).toFixed(2)) : 0\n      }\n    };\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio JSON export completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: exportData,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio JSON export failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to export portfolio to JSON',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * POST /portfolio/import/csv\n * Import portfolio holdings from CSV file\n */\nrouter.post('/import/csv', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio CSV import requested for user: ${userId.substring(0, 8)}...`);\n    \n    const { csvData, importMode = 'append' } = req.body;\n    \n    if (!csvData || typeof csvData !== 'string') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid CSV data',\n        message: 'CSV data is required as a string',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Parse CSV data\n    const lines = csvData.trim().split('\\n');\n    if (lines.length < 2) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid CSV format',\n        message: 'CSV must contain at least a header and one data row',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const headers = lines[0].split(',').map(h => h.replace(/\"/g, '').trim().toLowerCase());\n    const dataLines = lines.slice(1);\n    \n    // Validate required columns\n    const requiredColumns = ['symbol', 'shares', 'avg_cost'];\n    const missingColumns = requiredColumns.filter(col => !headers.includes(col));\n    \n    if (missingColumns.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required columns',\n        message: `Required columns: ${missingColumns.join(', ')}`,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // Parse holdings data\n    const importedHoldings = [];\n    const errors = [];\n    \n    for (let i = 0; i < dataLines.length; i++) {\n      const line = dataLines[i];\n      const values = line.split(',').map(v => v.replace(/\"/g, '').trim());\n      \n      if (values.length !== headers.length) {\n        errors.push(`Line ${i + 2}: Column count mismatch`);\n        continue;\n      }\n      \n      const holding = {};\n      headers.forEach((header, index) => {\n        holding[header] = values[index];\n      });\n      \n      // Validate and convert data types\n      try {\n        const parsedHolding = {\n          symbol: holding.symbol.toUpperCase(),\n          shares: parseFloat(holding.shares),\n          avg_cost: parseFloat(holding.avg_cost),\n          current_price: holding.current_price ? parseFloat(holding.current_price) : null,\n          sector: holding.sector || null,\n          industry: holding.industry || null,\n          purchase_date: holding.purchase_date || null\n        };\n        \n        if (!parsedHolding.symbol || parsedHolding.shares <= 0 || parsedHolding.avg_cost <= 0) {\n          errors.push(`Line ${i + 2}: Invalid symbol, shares, or avg_cost`);\n          continue;\n        }\n        \n        importedHoldings.push(parsedHolding);\n      } catch (parseError) {\n        errors.push(`Line ${i + 2}: ${parseError.message}`);\n      }\n    }\n    \n    if (importedHoldings.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No valid holdings to import',\n        message: 'All rows contained errors',\n        errors,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    // If replace mode, clear existing holdings\n    if (importMode === 'replace') {\n      await query('DELETE FROM portfolio_holdings WHERE user_id = $1', [userId]);\n    }\n    \n    // Insert or update holdings\n    let insertedCount = 0;\n    let updatedCount = 0;\n    \n    for (const holding of importedHoldings) {\n      try {\n        const existingResult = await query(\n          'SELECT id FROM portfolio_holdings WHERE user_id = $1 AND symbol = $2',\n          [userId, holding.symbol]\n        );\n        \n        if (existingResult.rows.length > 0) {\n          // Update existing holding\n          await query(`\n            UPDATE portfolio_holdings \n            SET shares = $1, avg_cost = $2, current_price = $3, \n                sector = $4, industry = $5, purchase_date = $6, \n                market_value = $1 * COALESCE($3, avg_cost),\n                gain_loss = ($1 * COALESCE($3, avg_cost)) - ($1 * $2),\n                gain_loss_percent = CASE \n                  WHEN $2 > 0 THEN (((COALESCE($3, avg_cost) - $2) / $2) * 100)\n                  ELSE 0 \n                END,\n                last_updated = NOW()\n            WHERE user_id = $7 AND symbol = $8\n          `, [\n            holding.shares, holding.avg_cost, holding.current_price,\n            holding.sector, holding.industry, holding.purchase_date,\n            userId, holding.symbol\n          ]);\n          updatedCount++;\n        } else {\n          // Insert new holding\n          await query(`\n            INSERT INTO portfolio_holdings (\n              user_id, symbol, shares, avg_cost, current_price, \n              sector, industry, purchase_date, market_value, \n              gain_loss, gain_loss_percent, last_updated\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, \n              $3 * COALESCE($5, $4),\n              ($3 * COALESCE($5, $4)) - ($3 * $4),\n              CASE \n                WHEN $4 > 0 THEN (((COALESCE($5, $4) - $4) / $4) * 100)\n                ELSE 0 \n              END,\n              NOW()\n            )\n          `, [\n            userId, holding.symbol, holding.shares, holding.avg_cost,\n            holding.current_price, holding.sector, holding.industry,\n            holding.purchase_date\n          ]);\n          insertedCount++;\n        }\n      } catch (dbError) {\n        errors.push(`${holding.symbol}: ${dbError.message}`);\n      }\n    }\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio CSV import completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        summary: {\n          totalRows: dataLines.length,\n          validRows: importedHoldings.length,\n          insertedCount,\n          updatedCount,\n          errorCount: errors.length,\n          importMode\n        },\n        errors: errors.length > 0 ? errors : undefined\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio CSV import failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to import portfolio from CSV',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * POST /portfolio/import/alpaca\n * Import portfolio holdings from Alpaca API\n */\nrouter.post('/import/alpaca', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`📥 [${requestId}] Portfolio Alpaca import requested for user: ${userId.substring(0, 8)}...`);\n    \n    const { forceRefresh = false } = req.body;\n    \n    // Get user's Alpaca API credentials\n    const apiKey = await getUserApiKey(userId, 'alpaca');\n    if (!apiKey) {\n      return res.status(400).json({\n        success: false,\n        error: 'Alpaca API key required',\n        message: 'Please configure your Alpaca API key in settings to import portfolio',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const alpacaService = new AlpacaService(apiKey.apiKey, apiKey.apiSecret, apiKey.isSandbox);\n    \n    // Get positions from Alpaca\n    const positions = await alpacaService.getPositions();\n    \n    if (!positions || positions.length === 0) {\n      return res.json({\n        success: true,\n        data: {\n          summary: {\n            totalPositions: 0,\n            insertedCount: 0,\n            updatedCount: 0,\n            message: 'No positions found in Alpaca account'\n          }\n        },\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - startTime\n      });\n    }\n    \n    // Process positions and update database\n    let insertedCount = 0;\n    let updatedCount = 0;\n    const errors = [];\n    \n    for (const position of positions) {\n      try {\n        const symbol = position.symbol;\n        const shares = parseFloat(position.qty);\n        const avgCost = parseFloat(position.avg_cost);\n        const currentPrice = parseFloat(position.market_value) / shares;\n        const marketValue = parseFloat(position.market_value);\n        const gainLoss = parseFloat(position.unrealized_pl);\n        const gainLossPercent = parseFloat(position.unrealized_plpc) * 100;\n        \n        // Check if position already exists\n        const existingResult = await query(\n          'SELECT id FROM portfolio_holdings WHERE user_id = $1 AND symbol = $2',\n          [userId, symbol]\n        );\n        \n        if (existingResult.rows.length > 0) {\n          // Update existing position\n          await query(`\n            UPDATE portfolio_holdings \n            SET shares = $1, avg_cost = $2, current_price = $3, \n                market_value = $4, gain_loss = $5, gain_loss_percent = $6,\n                last_updated = NOW()\n            WHERE user_id = $7 AND symbol = $8\n          `, [shares, avgCost, currentPrice, marketValue, gainLoss, gainLossPercent, userId, symbol]);\n          updatedCount++;\n        } else {\n          // Insert new position\n          await query(`\n            INSERT INTO portfolio_holdings (\n              user_id, symbol, shares, avg_cost, current_price, \n              market_value, gain_loss, gain_loss_percent, last_updated\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())\n          `, [userId, symbol, shares, avgCost, currentPrice, marketValue, gainLoss, gainLossPercent]);\n          insertedCount++;\n        }\n        \n        // Get additional company info if available\n        try {\n          const companyResult = await query(\n            'SELECT sector, industry FROM company_profiles WHERE symbol = $1',\n            [symbol]\n          );\n          \n          if (companyResult.rows.length > 0) {\n            const company = companyResult.rows[0];\n            await query(`\n              UPDATE portfolio_holdings \n              SET sector = $1, industry = $2\n              WHERE user_id = $3 AND symbol = $4\n            `, [company.sector, company.industry, userId, symbol]);\n          }\n        } catch (companyError) {\n          // Non-critical error, continue processing\n          if (shouldLog('DEBUG')) console.log(`Company info not found for ${symbol}`);\n        }\n        \n      } catch (positionError) {\n        errors.push(`${position.symbol}: ${positionError.message}`);\n      }\n    }\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio Alpaca import completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        summary: {\n          totalPositions: positions.length,\n          insertedCount,\n          updatedCount,\n          errorCount: errors.length,\n          importSource: 'alpaca',\n          sandbox: apiKey.isSandbox\n        },\n        errors: errors.length > 0 ? errors : undefined\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio Alpaca import failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to import portfolio from Alpaca',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n// Portfolio alerts endpoints\nconst PortfolioAlerts = require('../utils/portfolioAlerts');\n\n/**\n * GET /portfolio/alerts\n * Get user's portfolio alerts\n */\nrouter.get('/alerts', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alerts requested for user: ${userId.substring(0, 8)}...`);\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const filters = {\n      alertType: req.query.alertType,\n      symbol: req.query.symbol,\n      isActive: req.query.isActive !== undefined ? req.query.isActive === 'true' : undefined\n    };\n    \n    const alerts = await portfolioAlerts.getUserPortfolioAlerts(userId, filters);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alerts retrieved in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        alerts,\n        count: alerts.length,\n        filters\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alerts retrieval failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve portfolio alerts',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * POST /portfolio/alerts\n * Create a new portfolio alert\n */\nrouter.post('/alerts', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert creation requested for user: ${userId.substring(0, 8)}...`);\n    \n    const {\n      alertType,\n      symbol,\n      threshold,\n      condition,\n      isActive = true,\n      notificationPreferences = {},\n      expiryDate,\n      message\n    } = req.body;\n    \n    // Validate required fields\n    if (!alertType || !threshold || !condition) {\n      return res.status(400).json({\n        success: false,\n        error: 'Missing required fields',\n        message: 'alertType, threshold, and condition are required',\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const alertConfig = {\n      alertType,\n      symbol,\n      threshold,\n      condition,\n      isActive,\n      notificationPreferences,\n      expiryDate,\n      message\n    };\n    \n    const newAlert = await portfolioAlerts.createPortfolioAlert(userId, alertConfig);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert created in ${Date.now() - startTime}ms`);\n    \n    res.status(201).json({\n      success: true,\n      data: newAlert,\n      message: 'Portfolio alert created successfully',\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert creation failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to create portfolio alert',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * PUT /portfolio/alerts/:alertId\n * Update a portfolio alert\n */\nrouter.put('/alerts/:alertId', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  const alertId = req.params.alertId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert update requested for alert: ${alertId}`);\n    \n    const {\n      threshold,\n      condition,\n      isActive,\n      notificationPreferences,\n      expiryDate,\n      message\n    } = req.body;\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const updates = {\n      threshold,\n      condition,\n      isActive,\n      notificationPreferences,\n      expiryDate,\n      message\n    };\n    \n    const updatedAlert = await portfolioAlerts.updatePortfolioAlert(alertId, userId, updates);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert updated in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: updatedAlert,\n      message: 'Portfolio alert updated successfully',\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert update failed:`, error.message);\n    \n    const statusCode = error.message.includes('not found') ? 404 : 500;\n    return res.status(statusCode).json({\n      success: false,\n      error: 'Failed to update portfolio alert',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * DELETE /portfolio/alerts/:alertId\n * Delete a portfolio alert\n */\nrouter.delete('/alerts/:alertId', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  const alertId = req.params.alertId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert deletion requested for alert: ${alertId}`);\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const deletedAlert = await portfolioAlerts.deletePortfolioAlert(alertId, userId);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert deleted in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: deletedAlert,\n      message: 'Portfolio alert deleted successfully',\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert deletion failed:`, error.message);\n    \n    const statusCode = error.message.includes('not found') ? 404 : 500;\n    return res.status(statusCode).json({\n      success: false,\n      error: 'Failed to delete portfolio alert',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * GET /portfolio/alerts/notifications\n * Get portfolio alert notifications\n */\nrouter.get('/alerts/notifications', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert notifications requested for user: ${userId.substring(0, 8)}...`);\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const limit = parseInt(req.query.limit) || 50;\n    \n    const notifications = await portfolioAlerts.getPortfolioAlertNotifications(userId, limit);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert notifications retrieved in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        notifications,\n        count: notifications.length,\n        limit\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert notifications retrieval failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve portfolio alert notifications',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * POST /portfolio/alerts/process\n * Process portfolio alerts for current user\n */\nrouter.post('/alerts/process', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  const userId = req.user.userId;\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert processing requested for user: ${userId.substring(0, 8)}...`);\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const result = await portfolioAlerts.processUserPortfolioAlerts(userId);\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert processing completed in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        processedCount: result.processedCount,\n        triggeredCount: result.triggeredCount,\n        message: `Processed ${result.processedCount} alerts, triggered ${result.triggeredCount} notifications`\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert processing failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to process portfolio alerts',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\n/**\n * GET /portfolio/alerts/types\n * Get available portfolio alert types\n */\nrouter.get('/alerts/types', async (req, res) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID().split('-')[0];\n  \n  try {\n    if (shouldLog('INFO')) console.log(`🔔 [${requestId}] Portfolio alert types requested`);\n    \n    const portfolioAlerts = new PortfolioAlerts();\n    const alertTypes = portfolioAlerts.alertTypes;\n    \n    const alertTypeDefinitions = {\n      [alertTypes.ALLOCATION_DRIFT]: {\n        name: 'Allocation Drift',\n        description: 'Alert when portfolio allocation drifts from target percentages',\n        conditions: ['above'],\n        thresholdType: 'percentage',\n        requiresSymbol: false,\n        example: { threshold: 5, condition: 'above', description: 'Alert when any position drifts more than 5% from target' }\n      },\n      [alertTypes.POSITION_GAIN_LOSS]: {\n        name: 'Position Gain/Loss',\n        description: 'Alert when a position gains or loses beyond threshold',\n        conditions: ['above', 'below', 'absolute_above'],\n        thresholdType: 'percentage',\n        requiresSymbol: true,\n        example: { threshold: 20, condition: 'above', description: 'Alert when position gains more than 20%' }\n      },\n      [alertTypes.PORTFOLIO_VALUE_CHANGE]: {\n        name: 'Portfolio Value Change',\n        description: 'Alert when total portfolio value changes significantly',\n        conditions: ['increase_above', 'decrease_below', 'change_above'],\n        thresholdType: 'percentage',\n        requiresSymbol: false,\n        example: { threshold: 10, condition: 'change_above', description: 'Alert when portfolio value changes more than 10%' }\n      },\n      [alertTypes.SECTOR_CONCENTRATION]: {\n        name: 'Sector Concentration',\n        description: 'Alert when sector allocation exceeds threshold',\n        conditions: ['above'],\n        thresholdType: 'percentage',\n        requiresSymbol: false,\n        example: { threshold: 40, condition: 'above', description: 'Alert when any sector exceeds 40% allocation' }\n      },\n      [alertTypes.POSITION_SIZE_CHANGE]: {\n        name: 'Position Size Change',\n        description: 'Alert when position size changes beyond threshold',\n        conditions: ['above', 'below'],\n        thresholdType: 'percentage',\n        requiresSymbol: true,\n        example: { threshold: 25, condition: 'above', description: 'Alert when position exceeds 25% of portfolio' }\n      },\n      [alertTypes.BETA_CHANGE]: {\n        name: 'Beta Change',\n        description: 'Alert when portfolio beta exceeds threshold',\n        conditions: ['above', 'below'],\n        thresholdType: 'value',\n        requiresSymbol: false,\n        example: { threshold: 1.5, condition: 'above', description: 'Alert when portfolio beta exceeds 1.5' }\n      },\n      [alertTypes.REBALANCE_NEEDED]: {\n        name: 'Rebalance Needed',\n        description: 'Alert when portfolio needs rebalancing',\n        conditions: ['above'],\n        thresholdType: 'percentage',\n        requiresSymbol: false,\n        example: { threshold: 30, condition: 'above', description: 'Alert when top position exceeds 30% of portfolio' }\n      }\n    };\n    \n    if (shouldLog('INFO')) console.log(`✅ [${requestId}] Portfolio alert types retrieved in ${Date.now() - startTime}ms`);\n    \n    res.json({\n      success: true,\n      data: {\n        alertTypes: alertTypeDefinitions,\n        count: Object.keys(alertTypeDefinitions).length\n      },\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n    \n  } catch (error) {\n    console.error(`❌ [${requestId}] Portfolio alert types retrieval failed:`, error.message);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to retrieve portfolio alert types',\n      message: error.message,\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - startTime\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}