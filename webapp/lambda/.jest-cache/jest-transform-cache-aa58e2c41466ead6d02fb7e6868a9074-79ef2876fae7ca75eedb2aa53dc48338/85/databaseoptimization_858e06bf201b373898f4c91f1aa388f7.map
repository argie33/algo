{"version":3,"names":["cov_1bkwy6jtfw","actualCoverage","express","s","require","authenticateToken","createValidationMiddleware","sanitizers","DatabaseOptimizer","crypto","router","Router","use","optimizationValidationSchemas","analysis","includeSlowQueries","type","sanitizer","value","f","boolean","defaultValue","validator","errorMessage","includeIndexAnalysis","includeTableStats","optimize","dryRun","maxIndexes","integer","min","max","b","applyRecommendations","Array","isArray","every","id","post","req","res","requestId","randomUUID","split","requestStart","Date","now","body","console","log","userId","user","sub","substring","options","userAgent","headers","ip","optimizer","slowQueryThreshold","enableAutoIndexing","maxAnalysisQueries","analyzePerformance","slowQueries","missingIndexes","tableStatistics","tableStats","tableSizes","indexUsage","recommendations","map","rec","index","analysisId","totalDuration","length","success","timestamp","summary","slowQueriesFound","missingIndexesFound","recommendationsGenerated","highPriorityRecommendations","filter","r","priority","slice","performance","analysisDuration","error","errorDuration","message","errorStack","stack","serverError","duration","originalError","process","env","NODE_ENV","undefined","recommendationsToApply","badRequest","requestedRecommendations","recId","indexOf","includes","availableRecommendations","optimizationResults","applyOptimizations","applied","failed","skipped","optimization","results","details","warnings","optimizationDuration","get","performanceMetrics","calculatePerformanceMetrics","optimizerStatus","getStatus","metrics","toISOString","validateDatabaseSchema","schemaValidation","schema","valid","healthPercentage","totalRequired","totalExisting","criticalMissing","healthCheck","healthResult","healthStatus","database","cacheHitRatio","parseFloat","connectionCount","connectionStates","reduce","sum","state","count","databaseSize","status","module","exports"],"sources":["database-optimization.js"],"sourcesContent":["/**\n * Database Optimization API Routes\n * Provides endpoints for database performance analysis and optimization\n */\n\nconst express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { createValidationMiddleware, sanitizers } = require('../middleware/validation');\nconst { DatabaseOptimizer } = require('../utils/databaseOptimizer');\nconst crypto = require('crypto');\n\nconst router = express.Router();\n\n// Apply authentication to all routes (admin-level functionality)\nrouter.use(authenticateToken);\n\n// Validation schemas\nconst optimizationValidationSchemas = {\n  analysis: {\n    includeSlowQueries: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeSlowQueries must be true or false'\n    },\n    includeIndexAnalysis: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeIndexAnalysis must be true or false'\n    },\n    includeTableStats: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'includeTableStats must be true or false'\n    }\n  },\n\n  optimize: {\n    dryRun: {\n      type: 'boolean',\n      sanitizer: (value) => sanitizers.boolean(value, { defaultValue: true }),\n      validator: (value) => typeof value === 'boolean',\n      errorMessage: 'dryRun must be true or false'\n    },\n    maxIndexes: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 20, defaultValue: 5 }),\n      validator: (value) => value >= 1 && value <= 20,\n      errorMessage: 'maxIndexes must be between 1 and 20'\n    },\n    applyRecommendations: {\n      type: 'array',\n      validator: (value) => Array.isArray(value) && value.every(id => typeof id === 'string'),\n      errorMessage: 'applyRecommendations must be an array of recommendation IDs'\n    }\n  }\n};\n\n/**\n * Analyze database performance\n */\nrouter.post('/analyze', createValidationMiddleware(optimizationValidationSchemas.analysis), async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n\n  try {\n    const { includeSlowQueries, includeIndexAnalysis, includeTableStats } = req.body;\n\n    console.log(`🔍 [${requestId}] Database performance analysis initiated`, {\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n      options: { includeSlowQueries, includeIndexAnalysis, includeTableStats },\n      userAgent: req.headers['user-agent'],\n      ip: req.ip\n    });\n\n    // Initialize optimizer\n    const optimizer = new DatabaseOptimizer({\n      slowQueryThreshold: 1000,\n      enableAutoIndexing: false,\n      maxAnalysisQueries: 50\n    });\n\n    // Perform analysis\n    const analysis = await optimizer.analyzePerformance();\n\n    // Filter results based on request options\n    if (!includeSlowQueries) {\n      analysis.slowQueries = [];\n    }\n    if (!includeIndexAnalysis) {\n      analysis.missingIndexes = [];\n    }\n    if (!includeTableStats) {\n      analysis.tableStatistics = { tableStats: [], tableSizes: [], indexUsage: [] };\n    }\n\n    // Add recommendation IDs for tracking\n    analysis.recommendations = analysis.recommendations.map((rec, index) => ({\n      ...rec,\n      id: `rec_${analysis.id}_${index}`,\n      analysisId: analysis.id\n    }));\n\n    const totalDuration = Date.now() - requestStart;\n\n    console.log(`✅ [${requestId}] Database analysis completed in ${totalDuration}ms`, {\n      analysisId: analysis.id,\n      slowQueries: analysis.slowQueries.length,\n      missingIndexes: analysis.missingIndexes.length,\n      recommendations: analysis.recommendations.length\n    });\n\n    res.success({\n      analysis: {\n        id: analysis.id,\n        timestamp: analysis.timestamp,\n        summary: {\n          slowQueriesFound: analysis.slowQueries.length,\n          missingIndexesFound: analysis.missingIndexes.length,\n          recommendationsGenerated: analysis.recommendations.length,\n          highPriorityRecommendations: analysis.recommendations.filter(r => r.priority === 'high').length\n        },\n        slowQueries: analysis.slowQueries.slice(0, 20), // Limit for response size\n        missingIndexes: analysis.missingIndexes,\n        recommendations: analysis.recommendations,\n        performance: analysis.performance\n      }\n    }, {\n      requestId,\n      analysisDuration: `${totalDuration}ms`\n    });\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Database analysis FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n\n    res.serverError('Database performance analysis failed', {\n      requestId,\n      duration: `${errorDuration}ms`,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n/**\n * Apply database optimizations\n */\nrouter.post('/optimize', createValidationMiddleware(optimizationValidationSchemas.optimize), async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n  const requestStart = Date.now();\n\n  try {\n    const { dryRun, maxIndexes, applyRecommendations } = req.body;\n\n    console.log(`🔧 [${requestId}] Database optimization initiated`, {\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined',\n      dryRun,\n      maxIndexes,\n      recommendationsToApply: applyRecommendations?.length || 0\n    });\n\n    // For production safety, always require explicit recommendations\n    if (!applyRecommendations || applyRecommendations.length === 0) {\n      return res.badRequest('No recommendations specified for optimization', {\n        requestId,\n        message: 'You must specify which recommendations to apply for safety'\n      });\n    }\n\n    // Initialize optimizer\n    const optimizer = new DatabaseOptimizer({\n      enableAutoIndexing: !dryRun,\n      maxAnalysisQueries: 50\n    });\n\n    // Get fresh analysis to ensure recommendations are current\n    const analysis = await optimizer.analyzePerformance();\n\n    // Filter recommendations to only those requested\n    const requestedRecommendations = analysis.recommendations.filter(rec => {\n      const recId = `rec_${analysis.id}_${analysis.recommendations.indexOf(rec)}`;\n      return applyRecommendations.includes(recId);\n    });\n\n    if (requestedRecommendations.length === 0) {\n      return res.badRequest('No valid recommendations found to apply', {\n        requestId,\n        availableRecommendations: analysis.recommendations.length\n      });\n    }\n\n    // Apply optimizations\n    const optimizationResults = await optimizer.applyOptimizations(requestedRecommendations, {\n      dryRun,\n      maxIndexes\n    });\n\n    const totalDuration = Date.now() - requestStart;\n\n    console.log(`✅ [${requestId}] Database optimization completed in ${totalDuration}ms`, {\n      dryRun,\n      applied: optimizationResults.applied.length,\n      failed: optimizationResults.failed.length,\n      skipped: optimizationResults.skipped.length\n    });\n\n    res.success({\n      optimization: {\n        dryRun,\n        requestedRecommendations: requestedRecommendations.length,\n        results: {\n          applied: optimizationResults.applied.length,\n          failed: optimizationResults.failed.length,\n          skipped: optimizationResults.skipped.length\n        },\n        details: optimizationResults,\n        warnings: dryRun ? ['This was a dry run - no actual changes were made'] : []\n      }\n    }, {\n      requestId,\n      optimizationDuration: `${totalDuration}ms`\n    });\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`❌ [${requestId}] Database optimization FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack\n    });\n\n    res.serverError('Database optimization failed', {\n      requestId,\n      duration: `${errorDuration}ms`,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n/**\n * Get database performance metrics and status\n */\nrouter.get('/metrics', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n\n  try {\n    console.log(`📊 [${requestId}] Database metrics request`, {\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'\n    });\n\n    const optimizer = new DatabaseOptimizer();\n    const performanceMetrics = await optimizer.calculatePerformanceMetrics();\n    const optimizerStatus = optimizer.getStatus();\n\n    res.success({\n      metrics: performanceMetrics,\n      optimizer: optimizerStatus,\n      timestamp: new Date().toISOString()\n    }, {\n      requestId\n    });\n\n  } catch (error) {\n    console.error(`❌ [${requestId}] Database metrics request failed:`, {\n      error: error.message\n    });\n\n    res.serverError('Failed to get database metrics', {\n      requestId,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n/**\n * Get current database schema information\n */\nrouter.get('/schema', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n\n  try {\n    console.log(`📋 [${requestId}] Database schema request`, {\n      userId: req.user?.sub ? `${req.user.sub.substring(0, 8)}...` : 'undefined'\n    });\n\n    // Import database utility\n    const { validateDatabaseSchema } = require('../utils/database');\n    \n    // Get comprehensive schema validation\n    const schemaValidation = await validateDatabaseSchema(requestId);\n\n    res.success({\n      schema: schemaValidation,\n      summary: {\n        valid: schemaValidation.valid,\n        healthPercentage: schemaValidation.healthPercentage,\n        totalRequired: schemaValidation.totalRequired,\n        totalExisting: schemaValidation.totalExisting,\n        criticalMissing: schemaValidation.criticalMissing?.length || 0\n      }\n    }, {\n      requestId\n    });\n\n  } catch (error) {\n    console.error(`❌ [${requestId}] Database schema request failed:`, {\n      error: error.message\n    });\n\n    res.serverError('Failed to get database schema information', {\n      requestId,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\n/**\n * Database health check with performance indicators\n */\nrouter.get('/health', async (req, res) => {\n  const requestId = crypto.randomUUID().split('-')[0];\n\n  try {\n    const { healthCheck } = require('../utils/database');\n    \n    const healthResult = await healthCheck();\n    const optimizer = new DatabaseOptimizer();\n    const metrics = await optimizer.calculatePerformanceMetrics();\n\n    const healthStatus = {\n      database: healthResult,\n      performance: {\n        cacheHitRatio: parseFloat(metrics.cacheHitRatio),\n        connectionCount: metrics.connectionStates?.reduce((sum, state) => sum + state.count, 0) || 0,\n        databaseSize: metrics.databaseSize\n      },\n      status: healthResult.status === 'healthy' && \n              parseFloat(metrics.cacheHitRatio) > 90 ? 'healthy' : 'degraded',\n      timestamp: new Date().toISOString()\n    };\n\n    res.success(healthStatus, { requestId });\n\n  } catch (error) {\n    console.error(`❌ [${requestId}] Database health check failed:`, {\n      error: error.message\n    });\n\n    res.serverError('Database health check failed', {\n      requestId,\n      originalError: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}