{"version":3,"names":["cov_2erqkwbfze","actualCoverage","express","s","require","authenticateToken","apiKeyService","AlpacaService","createValidationMiddleware","rateLimitConfigs","sqlInjectionPrevention","xssPrevention","sanitizers","validator","router","Router","marketDataValidationSchemas","quotes","symbols","required","type","sanitizer","value","f","b","split","map","symbol","trim","filter","length","slice","join","every","test","errorMessage","bars","timeframe","string","maxLength","alphaNumOnly","includes","start","isISO8601","end","limit","integer","min","max","defaultValue","trades","calendar","isDate","format","use","api","get","req","res","success","system","version","status","available_endpoints","requestId","randomUUID","requestStart","Date","now","userId","user","sub","Error","console","log","substring","userAgent","headers","ip","timestamp","toISOString","credentialsStart","credentials","getUserApiKey","credentialsDuration","healthResult","overall_status","request_id","api_key_status","external_services","functionality_tests","performance","credential_check_ms","error","impact","recommendation","provider","isSandbox","keyLength","apiKey","secretLength","apiSecret","environment","key_length","has_secret","alpacaTestStart","alpaca","accountTestStart","account","Promise","race","getAccount","_","reject","setTimeout","accountTestDuration","accountId","id","portfolioValue","portfolio_value","equity","account_id","account_status","response_time_ms","quoteTestStart","testQuote","getLatestQuote","quoteTestDuration","bidPrice","askPrice","hasData","market_data","test_symbol","data_available","sample_data","bid","ask","quoteError","warn","message","calendarTestStart","marketCalendar","getMarketCalendar","calendarTestDuration","market_calendar","calendarError","alpacaTestDuration","alpaca_tests_ms","alpacaError","errorStack","stack","api_key_retrieval","service_initialization","market_data_access","totalDuration","total_duration_ms","overallStatus","apiKeyStatus","externalServices","Object","keys","passedTests","values","t","totalTests","statusCode","json","data","errorDuration","details","process","env","NODE_ENV","request_info","error_duration_ms","validated","notFound","symbolsArray","getMultiQuotes","financialSuccess","symbolCount","externalApiError","params","parseInt","getBars","toUpperCase","dataPoints","query","getTrades","tradeCount","getCalendar","dateRange","calendarDays","unauthorized","getClock","apiError","serverError","asset","getAsset","asset_class","assets","getAssets","wsConfig","getWebSocketConfig","module","exports"],"sources":["market-data.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst apiKeyService = require('../utils/simpleApiKeyService');\nconst AlpacaService = require('../utils/alpacaService');\nconst { \n  createValidationMiddleware, \n  rateLimitConfigs, \n  sqlInjectionPrevention, \n  xssPrevention,\n  sanitizers\n} = require('../middleware/validation');\nconst validator = require('validator');\n\nconst router = express.Router();\n\n// Market data validation schemas\nconst marketDataValidationSchemas = {\n  quotes: {\n    symbols: {\n      required: true,\n      type: 'string',\n      sanitizer: (value) => {\n        if (typeof value !== 'string') return '';\n        // Split by comma, clean each symbol, and rejoin\n        return value.split(',')\n          .map(s => sanitizers.symbol(s.trim()))\n          .filter(s => s.length > 0)\n          .slice(0, 50) // Limit to 50 symbols max\n          .join(',');\n      },\n      validator: (value) => {\n        if (!value) return false;\n        const symbols = value.split(',');\n        return symbols.length > 0 && \n               symbols.length <= 50 && \n               symbols.every(s => /^[A-Z]{1,10}$/.test(s.trim()));\n      },\n      errorMessage: 'Symbols must be a comma-separated list of 1-50 valid stock symbols'\n    }\n  },\n\n  bars: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    timeframe: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20, alphaNumOnly: false }),\n      validator: (value) => !value || ['1Min', '5Min', '15Min', '30Min', '1Hour', '1Day', '1Week', '1Month'].includes(value),\n      errorMessage: 'Timeframe must be one of: 1Min, 5Min, 15Min, 30Min, 1Hour, 1Day, 1Week, 1Month'\n    },\n    start: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20 }),\n      validator: (value) => !value || validator.isISO8601(value),\n      errorMessage: 'Start date must be in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)'\n    },\n    end: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20 }),\n      validator: (value) => !value || validator.isISO8601(value),\n      errorMessage: 'End date must be in ISO8601 format (YYYY-MM-DDTHH:mm:ssZ)'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 1000, defaultValue: 100 }),\n      validator: (value) => !value || (value >= 1 && value <= 1000),\n      errorMessage: 'Limit must be between 1 and 1000'\n    }\n  },\n\n  trades: {\n    symbol: {\n      required: true,\n      type: 'string',\n      sanitizer: sanitizers.symbol,\n      validator: (value) => /^[A-Z]{1,10}$/.test(value),\n      errorMessage: 'Symbol must be 1-10 uppercase letters'\n    },\n    start: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20 }),\n      validator: (value) => !value || validator.isISO8601(value),\n      errorMessage: 'Start date must be in ISO8601 format'\n    },\n    end: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 20 }),\n      validator: (value) => !value || validator.isISO8601(value),\n      errorMessage: 'End date must be in ISO8601 format'\n    },\n    limit: {\n      type: 'integer',\n      sanitizer: (value) => sanitizers.integer(value, { min: 1, max: 1000, defaultValue: 100 }),\n      validator: (value) => !value || (value >= 1 && value <= 1000),\n      errorMessage: 'Limit must be between 1 and 1000'\n    }\n  },\n\n  calendar: {\n    start: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'Start date must be in YYYY-MM-DD format'\n    },\n    end: {\n      type: 'string',\n      sanitizer: (value) => sanitizers.string(value, { maxLength: 10 }),\n      validator: (value) => !value || validator.isDate(value, { format: 'YYYY-MM-DD' }),\n      errorMessage: 'End date must be in YYYY-MM-DD format'\n    }\n  }\n};\n\n// Apply security middleware to authenticated routes\nrouter.use('/quotes', sqlInjectionPrevention, xssPrevention, rateLimitConfigs.api);\nrouter.use('/bars', sqlInjectionPrevention, xssPrevention, rateLimitConfigs.api);\nrouter.use('/trades', sqlInjectionPrevention, xssPrevention, rateLimitConfigs.api);\nrouter.use('/calendar', sqlInjectionPrevention, xssPrevention, rateLimitConfigs.api);\n\n// Root market-data endpoint for health checks (no auth required)\nrouter.get('/', (req, res) => {\n  res.success({\n    system: 'Market Data API',\n    version: '1.0.0',\n    status: 'operational',\n    available_endpoints: [\n      'GET /market-data/status - Market status and trading hours',\n      'GET /market-data/quotes - Real-time quotes for symbols',\n      'GET /market-data/bars/:symbol - Historical price bars',\n      'GET /market-data/trades/:symbol - Latest trades',\n      'GET /market-data/calendar - Market calendar',\n      'GET /market-data/assets - Tradeable assets'\n    ]\n  });\n});\n\n// Market Data Service Health Check - Tests API key functionality and external service connectivity\nrouter.get('/health', authenticateToken, async (req, res) => {\n  const requestId = require('crypto').randomUUID().split('-')[0];\n  const requestStart = Date.now();\n  \n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    console.log(`üöÄ [${requestId}] Market data health check initiated`, {\n      userId: userId ? `${userId.substring(0, 8)}...` : 'undefined',\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      timestamp: new Date().toISOString()\n    });\n\n    // Test API key availability and functionality\n    console.log(`üîë [${requestId}] Testing API key availability for market data access`);\n    const credentialsStart = Date.now();\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    const credentialsDuration = Date.now() - credentialsStart;\n    \n    const healthResult = {\n      overall_status: 'healthy',\n      timestamp: new Date().toISOString(),\n      request_id: requestId,\n      api_key_status: {},\n      external_services: {},\n      functionality_tests: {},\n      performance: {\n        credential_check_ms: credentialsDuration\n      }\n    };\n\n    // API Key Health Check\n    if (!credentials) {\n      console.error(`‚ùå [${requestId}] No API credentials found for market data access`, {\n        userId: `${userId.substring(0, 8)}...`,\n        impact: 'Market data functionality will not work',\n        recommendation: 'User needs to configure Alpaca API keys'\n      });\n      \n      healthResult.overall_status = 'degraded';\n      healthResult.api_key_status = {\n        status: 'missing',\n        error: 'No Alpaca API credentials configured',\n        impact: 'Market data services unavailable',\n        recommendation: 'Configure Alpaca API keys in Settings'\n      };\n    } else {\n      console.log(`‚úÖ [${requestId}] API credentials found`, {\n        provider: 'alpaca',\n        isSandbox: credentials.isSandbox,\n        keyLength: credentials.apiKey ? credentials.apiKey.length : 0,\n        secretLength: credentials.apiSecret ? credentials.apiSecret.length : 0\n      });\n      \n      healthResult.api_key_status = {\n        status: 'configured',\n        provider: 'alpaca',\n        environment: credentials.isSandbox ? 'sandbox' : 'live',\n        key_length: credentials.apiKey ? credentials.apiKey.length : 0,\n        has_secret: !!credentials.apiSecret\n      };\n\n      // Test external service connectivity\n      console.log(`üì° [${requestId}] Testing Alpaca service connectivity`);\n      const alpacaTestStart = Date.now();\n      \n      try {\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n\n        // Test 1: Account connectivity\n        console.log(`üß™ [${requestId}] Testing account connectivity`);\n        const accountTestStart = Date.now();\n        const account = await Promise.race([\n          alpaca.getAccount(),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Account test timeout')), 10000)\n          )\n        ]);\n        const accountTestDuration = Date.now() - accountTestStart;\n        \n        if (account) {\n          console.log(`‚úÖ [${requestId}] Account connectivity test PASSED in ${accountTestDuration}ms`, {\n            accountId: account.id,\n            status: account.status,\n            portfolioValue: account.portfolio_value || account.equity\n          });\n          \n          healthResult.external_services.account = {\n            status: 'connected',\n            account_id: account.id,\n            account_status: account.status,\n            response_time_ms: accountTestDuration,\n            environment: credentials.isSandbox ? 'sandbox' : 'live'\n          };\n        }\n\n        // Test 2: Market data connectivity (basic quote)\n        console.log(`üß™ [${requestId}] Testing market data connectivity`);\n        const quoteTestStart = Date.now();\n        \n        try {\n          const testQuote = await Promise.race([\n            alpaca.getLatestQuote('AAPL'),\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error('Quote test timeout')), 8000)\n            )\n          ]);\n          const quoteTestDuration = Date.now() - quoteTestStart;\n          \n          if (testQuote) {\n            console.log(`‚úÖ [${requestId}] Market data connectivity test PASSED in ${quoteTestDuration}ms`, {\n              symbol: 'AAPL',\n              bidPrice: testQuote.bidPrice,\n              askPrice: testQuote.askPrice,\n              hasData: !!testQuote.bidPrice\n            });\n            \n            healthResult.external_services.market_data = {\n              status: 'connected',\n              test_symbol: 'AAPL',\n              response_time_ms: quoteTestDuration,\n              data_available: !!testQuote.bidPrice,\n              sample_data: {\n                bid: testQuote.bidPrice,\n                ask: testQuote.askPrice,\n                timestamp: testQuote.timestamp\n              }\n            };\n          }\n        } catch (quoteError) {\n          const quoteTestDuration = Date.now() - quoteTestStart;\n          console.warn(`‚ö†Ô∏è [${requestId}] Market data connectivity test FAILED after ${quoteTestDuration}ms:`, {\n            error: quoteError.message,\n            impact: 'Real-time quotes may not be available'\n          });\n          \n          healthResult.external_services.market_data = {\n            status: 'error',\n            error: quoteError.message,\n            response_time_ms: quoteTestDuration,\n            impact: 'Real-time market data may be limited'\n          };\n          \n          if (healthResult.overall_status === 'healthy') {\n            healthResult.overall_status = 'degraded';\n          }\n        }\n\n        // Test 3: Market status/calendar\n        console.log(`üß™ [${requestId}] Testing market calendar connectivity`);\n        const calendarTestStart = Date.now();\n        \n        try {\n          const marketCalendar = await Promise.race([\n            alpaca.getMarketCalendar(),\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error('Calendar test timeout')), 5000)\n            )\n          ]);\n          const calendarTestDuration = Date.now() - calendarTestStart;\n          \n          console.log(`‚úÖ [${requestId}] Market calendar connectivity test PASSED in ${calendarTestDuration}ms`);\n          \n          healthResult.external_services.market_calendar = {\n            status: 'connected',\n            response_time_ms: calendarTestDuration,\n            data_available: !!marketCalendar\n          };\n        } catch (calendarError) {\n          const calendarTestDuration = Date.now() - calendarTestStart;\n          console.warn(`‚ö†Ô∏è [${requestId}] Market calendar test FAILED after ${calendarTestDuration}ms:`, {\n            error: calendarError.message\n          });\n          \n          healthResult.external_services.market_calendar = {\n            status: 'error',\n            error: calendarError.message,\n            response_time_ms: calendarTestDuration\n          };\n        }\n\n        const alpacaTestDuration = Date.now() - alpacaTestStart;\n        healthResult.performance.alpaca_tests_ms = alpacaTestDuration;\n        \n      } catch (alpacaError) {\n        const alpacaTestDuration = Date.now() - alpacaTestStart;\n        console.error(`‚ùå [${requestId}] Alpaca service connectivity FAILED after ${alpacaTestDuration}ms:`, {\n          error: alpacaError.message,\n          errorStack: alpacaError.stack,\n          impact: 'All market data functionality will be unavailable'\n        });\n        \n        healthResult.overall_status = 'unhealthy';\n        healthResult.external_services.alpaca = {\n          status: 'error',\n          error: alpacaError.message,\n          response_time_ms: alpacaTestDuration,\n          impact: 'Market data services unavailable'\n        };\n      }\n    }\n\n    // Functionality tests\n    healthResult.functionality_tests = {\n      api_key_retrieval: credentials ? 'pass' : 'fail',\n      service_initialization: healthResult.external_services.account?.status === 'connected' ? 'pass' : 'fail',\n      market_data_access: healthResult.external_services.market_data?.status === 'connected' ? 'pass' : 'fail'\n    };\n\n    const totalDuration = Date.now() - requestStart;\n    healthResult.performance.total_duration_ms = totalDuration;\n\n    console.log(`‚úÖ [${requestId}] Market data health check completed in ${totalDuration}ms`, {\n      overallStatus: healthResult.overall_status,\n      apiKeyStatus: healthResult.api_key_status.status,\n      externalServices: Object.keys(healthResult.external_services).length,\n      passedTests: Object.values(healthResult.functionality_tests).filter(t => t === 'pass').length,\n      totalTests: Object.keys(healthResult.functionality_tests).length\n    });\n\n    // Set appropriate HTTP status\n    let statusCode = 200;\n    if (healthResult.overall_status === 'unhealthy') {\n      statusCode = 503;\n    } else if (healthResult.overall_status === 'degraded') {\n      statusCode = 206;\n    }\n\n    res.status(statusCode).json({\n      success: true,\n      data: healthResult\n    });\n\n  } catch (error) {\n    const errorDuration = Date.now() - requestStart;\n    console.error(`‚ùå [${requestId}] Market data health check FAILED after ${errorDuration}ms:`, {\n      error: error.message,\n      errorStack: error.stack,\n      impact: 'Cannot determine market data service health'\n    });\n    \n    res.status(500).json({\n      success: false,\n      error: 'Market data health check failed',\n      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',\n      request_info: {\n        request_id: requestId,\n        error_duration_ms: errorDuration,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n});\n\n// Apply authentication middleware to all other routes\nrouter.use(authenticateToken);\n\n// Get real-time quotes for multiple symbols\nrouter.get('/quotes', createValidationMiddleware(marketDataValidationSchemas.quotes), async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbols } = req.validated;\n    \n    console.log(`üìä [MARKET-DATA] Quotes request for user ${userId}, symbols: ${symbols}`);\n\n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get quotes for symbols (already validated and sanitized)\n    const symbolsArray = symbols.split(',');\n    const quotes = await alpaca.getMultiQuotes(symbolsArray);\n\n    res.financialSuccess(quotes, 'api', 'alpaca', {\n      environment: credentials.isSandbox ? 'sandbox' : 'live',\n      symbolCount: symbolsArray.length\n    });\n  } catch (error) {\n    console.error('Market data quotes error:', error);\n    res.externalApiError(error, 'Alpaca API', 'fetching quotes');\n  }\n});\n\n// Get historical bars for a symbol\nrouter.get('/bars/:symbol', createValidationMiddleware(marketDataValidationSchemas.bars), async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol, timeframe, start, end, limit } = req.validated;\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get historical bars\n    const params = {\n      timeframe,\n      limit: parseInt(limit)\n    };\n    \n    if (start) params.start = start;\n    if (end) params.end = end;\n\n    const bars = await alpaca.getBars(symbol.toUpperCase(), params);\n\n    res.financialSuccess(bars, 'api', 'alpaca', {\n      environment: credentials.isSandbox ? 'sandbox' : 'live',\n      symbol: symbol.toUpperCase(),\n      timeframe: timeframe || '1Day',\n      dataPoints: bars?.length || 0\n    });\n  } catch (error) {\n    console.error('Market data bars error:', error);\n    res.externalApiError(error, 'Alpaca API', 'fetching bars');\n  }\n});\n\n// Get latest trade for a symbol\nrouter.get('/trades/:symbol', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol } = req.params;\n    const { limit = 10 } = req.query;\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get trades\n    const trades = await alpaca.getTrades(symbol.toUpperCase(), { limit: parseInt(limit) });\n\n    res.financialSuccess(trades, 'api', 'alpaca', {\n      environment: credentials.isSandbox ? 'sandbox' : 'live',\n      symbol: symbol.toUpperCase(),\n      tradeCount: trades?.length || 0\n    });\n  } catch (error) {\n    console.error('Market data trades error:', error);\n    res.externalApiError(error, 'Alpaca API', 'fetching trades');\n  }\n});\n\n// Get market calendar\nrouter.get('/calendar', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { start, end } = req.query;\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get market calendar\n    const calendar = await alpaca.getCalendar(start, end);\n\n    res.financialSuccess(calendar, 'api', 'alpaca', {\n      environment: credentials.isSandbox ? 'sandbox' : 'live',\n      dateRange: { start, end },\n      calendarDays: calendar?.length || 0\n    });\n  } catch (error) {\n    console.error('Market calendar error:', error);\n    res.externalApiError(error, 'Alpaca API', 'fetching calendar');\n  }\n});\n\n// Get market status\nrouter.get('/status', async (req, res) => {\n  try {\n    console.log('üìà Market status endpoint called for user:', req.user?.sub);\n    const userId = req.user?.sub;\n    \n    if (!userId) {\n      return res.unauthorized('User authentication required');\n    }\n    \n    try {\n      // Try to get user's API key\n      const credentials = await getUserApiKey(userId, 'alpaca');\n      \n      if (credentials && credentials.apiKey && credentials.apiSecret) {\n        console.log('‚úÖ Valid API credentials found, fetching real market status...');\n        \n        // Initialize Alpaca service\n        const alpaca = new AlpacaService(\n          credentials.apiKey,\n          credentials.apiSecret,\n          credentials.isSandbox\n        );\n\n        // Get market status from Alpaca\n        const status = await alpaca.getClock();\n\n        return res.financialSuccess(status, 'api', 'alpaca', {\n          environment: credentials.isSandbox ? 'sandbox' : 'live'\n        });\n      }\n    } catch (apiError) {\n      console.error('‚ùå API credentials failed:', apiError.message);\n      throw new Error('Market status unavailable - API credentials required');\n    }\n    \n    // No fallback - require proper API credentials\n    throw new Error('Market status unavailable - please configure API credentials');\n\n  } catch (error) {\n    console.error('‚ùå Market status error:', error);\n    res.serverError('Failed to fetch market status', error.message);\n  }\n});\n\n// Get asset information\nrouter.get('/assets/:symbol', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { symbol } = req.params;\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get asset information\n    const asset = await alpaca.getAsset(symbol.toUpperCase());\n\n    res.json({\n      success: true,\n      data: asset,\n      provider: 'alpaca',\n      environment: credentials.isSandbox ? 'sandbox' : 'live'\n    });\n  } catch (error) {\n    console.error('Asset information error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch asset information',\n      details: error.message\n    });\n  }\n});\n\n// Get all tradeable assets\nrouter.get('/assets', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    const { status = 'active', asset_class = 'us_equity' } = req.query;\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      credentials.isSandbox\n    );\n\n    // Get assets\n    const assets = await alpaca.getAssets({\n      status,\n      asset_class\n    });\n\n    res.json({\n      success: true,\n      data: assets,\n      provider: 'alpaca',\n      environment: credentials.isSandbox ? 'sandbox' : 'live'\n    });\n  } catch (error) {\n    console.error('Assets error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch assets',\n      details: error.message\n    });\n  }\n});\n\n// Get websocket configuration for real-time data\nrouter.get('/websocket-config', async (req, res) => {\n  try {\n    const userId = req.user?.sub;\n    if (!userId) {\n      throw new Error('User authentication required');\n    }\n    \n    // Get user's API key\n    const credentials = await getUserApiKey(userId, 'alpaca');\n    \n    if (!credentials) {\n      return res.notFound('API credentials', 'Please add your API credentials in Settings > API Keys');\n    }\n\n    // Initialize Alpaca service\n    const alpaca = new AlpacaService(\n      credentials.apiKey,\n      credentials.apiSecret,\n      false // Always use live for data feed\n    );\n\n    // Get websocket config\n    const wsConfig = alpaca.getWebSocketConfig();\n\n    res.json({\n      success: true,\n      data: wsConfig,\n      provider: 'alpaca',\n      environment: 'live' // Data feed always uses live\n    });\n  } catch (error) {\n    console.error('Websocket config error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to get websocket configuration',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}