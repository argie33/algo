{"version":3,"names":["cov_1f9hyatgfs","actualCoverage","express","s","require","router","Router","post","req","res","f","console","log","databaseManager","beforeStatus","getStatus","circuitBreaker","forceReset","afterStatus","testResult","query","success","message","error","json","status","connectionTest","timestamp","Date","toISOString","warning","get","circuitBreakerStatus","isHealthy","b","state","pool","recommendations","generateCircuitBreakerRecommendations","push","level","Math","ceil","timeToRecovery","action","failures","parseFloat","successRate","module","exports"],"sources":["emergency.js"],"sourcesContent":["/**\n * Emergency Database Recovery Endpoints\n */\nconst express = require('express');\nconst router = express.Router();\n\n// Emergency circuit breaker reset endpoint\nrouter.post('/emergency/reset-circuit-breaker', async (req, res) => {\n  try {\n    console.log('🚨 EMERGENCY: Circuit breaker reset requested');\n    \n    const databaseManager = require('../utils/databaseConnectionManager');\n    const beforeStatus = databaseManager.getStatus();\n    \n    console.log('📊 Circuit breaker status before reset:', beforeStatus.circuitBreaker);\n    \n    // Force reset the circuit breaker and connection\n    await databaseManager.forceReset();\n    \n    const afterStatus = databaseManager.getStatus();\n    console.log('📊 Circuit breaker status after reset:', afterStatus.circuitBreaker);\n    \n    // Test the connection\n    let testResult;\n    try {\n      await databaseManager.query('SELECT 1 as test');\n      testResult = { success: true, message: 'Database connection restored' };\n    } catch (error) {\n      testResult = { success: false, error: error.message };\n    }\n    \n    res.json({\n      status: 'success',\n      message: 'Circuit breaker emergency reset completed',\n      beforeStatus: beforeStatus.circuitBreaker,\n      afterStatus: afterStatus.circuitBreaker,\n      connectionTest: testResult,\n      timestamp: new Date().toISOString(),\n      warning: 'This is an emergency procedure. Monitor the system closely.'\n    });\n    \n  } catch (error) {\n    console.error('❌ Emergency reset failed:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Circuit breaker status monitoring endpoint\nrouter.get('/circuit-breaker-status', async (req, res) => {\n  try {\n    const databaseManager = require('../utils/databaseConnectionManager');\n    const status = databaseManager.getStatus();\n    \n    const circuitBreakerStatus = status.circuitBreaker;\n    const isHealthy = circuitBreakerStatus.state === 'closed' && circuitBreakerStatus.isHealthy;\n    \n    res.json({\n      status: isHealthy ? 'healthy' : 'degraded',\n      circuitBreaker: circuitBreakerStatus,\n      pool: status.pool,\n      recommendations: generateCircuitBreakerRecommendations(circuitBreakerStatus),\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('❌ Circuit breaker status check failed:', error);\n    res.status(500).json({\n      status: 'error',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nfunction generateCircuitBreakerRecommendations(status) {\n  const recommendations = [];\n  \n  if (status.state === 'open') {\n    recommendations.push({\n      level: 'critical',\n      message: 'Circuit breaker is OPEN. Database access blocked for ' + Math.ceil(status.timeToRecovery/1000) + ' more seconds.',\n      action: 'Wait for automatic recovery or use emergency reset endpoint: POST /api/health/emergency/reset-circuit-breaker'\n    });\n  }\n  \n  if (status.state === 'half-open') {\n    recommendations.push({\n      level: 'warning',\n      message: 'Circuit breaker is testing recovery. Avoid heavy database operations.',\n      action: 'Monitor closely and allow time for recovery validation'\n    });\n  }\n  \n  if (status.failures > 7) { // 70% of 10 threshold\n    recommendations.push({\n      level: 'warning',\n      message: 'High failure rate detected (' + status.failures + ' failures). Circuit breaker may open soon.',\n      action: 'Investigate database connectivity and consider scaling down operations'\n    });\n  }\n  \n  if (parseFloat(status.successRate) < 80) {\n    recommendations.push({\n      level: 'warning',\n      message: 'Low success rate (' + status.successRate + '). Database performance issues detected.',\n      action: 'Check database performance metrics and connection configuration'\n    });\n  }\n  \n  return recommendations;\n}\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]}