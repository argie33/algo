7a9308ca37b484c219a0b5bbb6e85a85
"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", {
  value,
  configurable: true
});
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
  }
  return to;
};
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: true
}), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  getHostHeaderPlugin: () => getHostHeaderPlugin,
  hostHeaderMiddleware: () => hostHeaderMiddleware,
  hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
  resolveHostHeaderConfig: () => resolveHostHeaderConfig
});
module.exports = __toCommonJS(index_exports);
var import_protocol_http = require("@smithy/protocol-http");
function resolveHostHeaderConfig(input) {
  return input;
}
__name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
var hostHeaderMiddleware = /* @__PURE__ */__name(options => next => async args => {
  if (!import_protocol_http.HttpRequest.isInstance(args.request)) return next(args);
  const {
    request
  } = args;
  const {
    handlerProtocol = ""
  } = options.requestHandler.metadata || {};
  if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
    delete request.headers["host"];
    request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
  } else if (!request.headers["host"]) {
    let host = request.hostname;
    if (request.port != null) host += `:${request.port}`;
    request.headers["host"] = host;
  }
  return next(args);
}, "hostHeaderMiddleware");
var hostHeaderMiddlewareOptions = {
  name: "hostHeaderMiddleware",
  step: "build",
  priority: "low",
  tags: ["HOST"],
  override: true
};
var getHostHeaderPlugin = /* @__PURE__ */__name(options => ({
  applyToStack: /* @__PURE__ */__name(clientStack => {
    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
  }, "applyToStack")
}), "getHostHeaderPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  hostHeaderMiddleware,
  hostHeaderMiddlewareOptions,
  getHostHeaderPlugin,
  resolveHostHeaderConfig
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fbmFtZSIsInRhcmdldCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJpbmRleF9leHBvcnRzIiwiZ2V0SG9zdEhlYWRlclBsdWdpbiIsImhvc3RIZWFkZXJNaWRkbGV3YXJlIiwiaG9zdEhlYWRlck1pZGRsZXdhcmVPcHRpb25zIiwicmVzb2x2ZUhvc3RIZWFkZXJDb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3Byb3RvY29sX2h0dHAiLCJyZXF1aXJlIiwiaW5wdXQiLCJvcHRpb25zIiwibmV4dCIsImFyZ3MiLCJIdHRwUmVxdWVzdCIsImlzSW5zdGFuY2UiLCJyZXF1ZXN0IiwiaGFuZGxlclByb3RvY29sIiwicmVxdWVzdEhhbmRsZXIiLCJtZXRhZGF0YSIsImluZGV4T2YiLCJoZWFkZXJzIiwiaG9zdG5hbWUiLCJwb3J0IiwiaG9zdCIsInN0ZXAiLCJwcmlvcml0eSIsInRhZ3MiLCJvdmVycmlkZSIsImFwcGx5VG9TdGFjayIsImNsaWVudFN0YWNrIiwiYWRkIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gIGdldEhvc3RIZWFkZXJQbHVnaW46ICgpID0+IGdldEhvc3RIZWFkZXJQbHVnaW4sXG4gIGhvc3RIZWFkZXJNaWRkbGV3YXJlOiAoKSA9PiBob3N0SGVhZGVyTWlkZGxld2FyZSxcbiAgaG9zdEhlYWRlck1pZGRsZXdhcmVPcHRpb25zOiAoKSA9PiBob3N0SGVhZGVyTWlkZGxld2FyZU9wdGlvbnMsXG4gIHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnOiAoKSA9PiByZXNvbHZlSG9zdEhlYWRlckNvbmZpZ1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTtcbnZhciBpbXBvcnRfcHJvdG9jb2xfaHR0cCA9IHJlcXVpcmUoXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIik7XG5mdW5jdGlvbiByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQ7XG59XG5fX25hbWUocmVzb2x2ZUhvc3RIZWFkZXJDb25maWcsIFwicmVzb2x2ZUhvc3RIZWFkZXJDb25maWdcIik7XG52YXIgaG9zdEhlYWRlck1pZGRsZXdhcmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiAobmV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgaWYgKCFpbXBvcnRfcHJvdG9jb2xfaHR0cC5IdHRwUmVxdWVzdC5pc0luc3RhbmNlKGFyZ3MucmVxdWVzdCkpIHJldHVybiBuZXh0KGFyZ3MpO1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gIGNvbnN0IHsgaGFuZGxlclByb3RvY29sID0gXCJcIiB9ID0gb3B0aW9ucy5yZXF1ZXN0SGFuZGxlci5tZXRhZGF0YSB8fCB7fTtcbiAgaWYgKGhhbmRsZXJQcm90b2NvbC5pbmRleE9mKFwiaDJcIikgPj0gMCAmJiAhcmVxdWVzdC5oZWFkZXJzW1wiOmF1dGhvcml0eVwiXSkge1xuICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdO1xuICAgIHJlcXVlc3QuaGVhZGVyc1tcIjphdXRob3JpdHlcIl0gPSByZXF1ZXN0Lmhvc3RuYW1lICsgKHJlcXVlc3QucG9ydCA/IFwiOlwiICsgcmVxdWVzdC5wb3J0IDogXCJcIik7XG4gIH0gZWxzZSBpZiAoIXJlcXVlc3QuaGVhZGVyc1tcImhvc3RcIl0pIHtcbiAgICBsZXQgaG9zdCA9IHJlcXVlc3QuaG9zdG5hbWU7XG4gICAgaWYgKHJlcXVlc3QucG9ydCAhPSBudWxsKSBob3N0ICs9IGA6JHtyZXF1ZXN0LnBvcnR9YDtcbiAgICByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdID0gaG9zdDtcbiAgfVxuICByZXR1cm4gbmV4dChhcmdzKTtcbn0sIFwiaG9zdEhlYWRlck1pZGRsZXdhcmVcIik7XG52YXIgaG9zdEhlYWRlck1pZGRsZXdhcmVPcHRpb25zID0ge1xuICBuYW1lOiBcImhvc3RIZWFkZXJNaWRkbGV3YXJlXCIsXG4gIHN0ZXA6IFwiYnVpbGRcIixcbiAgcHJpb3JpdHk6IFwibG93XCIsXG4gIHRhZ3M6IFtcIkhPU1RcIl0sXG4gIG92ZXJyaWRlOiB0cnVlXG59O1xudmFyIGdldEhvc3RIZWFkZXJQbHVnaW4gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvcHRpb25zKSA9PiAoe1xuICBhcHBseVRvU3RhY2s6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKGhvc3RIZWFkZXJNaWRkbGV3YXJlKG9wdGlvbnMpLCBob3N0SGVhZGVyTWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LCBcImFwcGx5VG9TdGFja1wiKVxufSksIFwiZ2V0SG9zdEhlYWRlclBsdWdpblwiKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcblxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhvc3RIZWFkZXJNaWRkbGV3YXJlLFxuICBob3N0SGVhZGVyTWlkZGxld2FyZU9wdGlvbnMsXG4gIGdldEhvc3RIZWFkZXJQbHVnaW4sXG4gIHJlc29sdmVI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