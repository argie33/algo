{"version":3,"names":["cov_ocnzwc2in","actualCoverage","express","s","require","authenticateToken","query","router","Router","get","req","res","f","json","success","data","system","version","status","available_endpoints","timestamp","Date","toISOString","use","alertTypes","id","name","description","category","parameters","conditions","error","console","details","message","userId","user","sub","limit","b","parseInt","offset","unreadOnly","unread","whereClause","params","result","length","countResult","notifications","rows","map","notification","alertId","alert_id","title","priority","isRead","read_at","readAt","createdAt","created_at","metadata","JSON","parse","pagination","total","hasMore","dbError","log","mockNotifications","symbol","currentPrice","targetPrice","now","currentVolume","averageVolume","filter","n","note","module","exports"],"sources":["alerts.js"],"sourcesContent":["const express = require('express');\nconst { authenticateToken } = require('../middleware/auth');\nconst { query } = require('../utils/database');\n\nconst router = express.Router();\n\n// Root alerts endpoint for health checks\nrouter.get('/', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      system: 'Alerts API',\n      version: '1.0.0',\n      status: 'operational',\n      available_endpoints: [\n        'GET /alerts - List user alerts',\n        'GET /alerts/types - Alert type definitions',\n        'GET /alerts/notifications - User notifications',\n        'POST /alerts - Create new alert',\n        'DELETE /alerts/:id - Delete alert'\n      ],\n      timestamp: new Date().toISOString()\n    }\n  });\n});\n\n// Apply authentication to all other routes\nrouter.use(authenticateToken);\n\n// Get alert types\nrouter.get('/types', (req, res) => {\n  try {\n    const alertTypes = [\n      {\n        id: 'price_target',\n        name: 'Price Target',\n        description: 'Alert when stock reaches target price',\n        category: 'price',\n        parameters: ['symbol', 'target_price', 'condition'],\n        conditions: ['above', 'below', 'crosses']\n      },\n      {\n        id: 'volume_spike',\n        name: 'Volume Spike',\n        description: 'Alert on unusual trading volume',\n        category: 'volume',\n        parameters: ['symbol', 'volume_threshold', 'percentage'],\n        conditions: ['above_average', 'percentage_increase']\n      },\n      {\n        id: 'technical_indicator',\n        name: 'Technical Indicator',\n        description: 'Alert based on technical analysis signals',\n        category: 'technical',\n        parameters: ['symbol', 'indicator', 'condition', 'value'],\n        conditions: ['overbought', 'oversold', 'breakout', 'breakdown']\n      },\n      {\n        id: 'earnings_announcement',\n        name: 'Earnings Announcement',\n        description: 'Alert before earnings releases',\n        category: 'fundamental',\n        parameters: ['symbol', 'days_before'],\n        conditions: ['upcoming', 'pre_market', 'after_market']\n      },\n      {\n        id: 'analyst_upgrade',\n        name: 'Analyst Rating Change',\n        description: 'Alert on analyst upgrades/downgrades',\n        category: 'analyst',\n        parameters: ['symbol', 'rating_change'],\n        conditions: ['upgrade', 'downgrade', 'any_change']\n      },\n      {\n        id: 'news_sentiment',\n        name: 'News Sentiment',\n        description: 'Alert on significant news sentiment changes',\n        category: 'sentiment',\n        parameters: ['symbol', 'sentiment_score', 'threshold'],\n        conditions: ['positive', 'negative', 'neutral']\n      }\n    ];\n\n    res.json({\n      success: true,\n      data: alertTypes,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('Error fetching alert types:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch alert types',\n      details: error.message\n    });\n  }\n});\n\n// Get user notifications\nrouter.get('/notifications', async (req, res) => {\n  try {\n    const userId = req.user.sub;\n    const limit = parseInt(req.query.limit) || 50;\n    const offset = parseInt(req.query.offset) || 0;\n    const unreadOnly = req.query.unread === 'true';\n\n    // Try to get notifications from database\n    try {\n      let whereClause = 'WHERE user_id = $1';\n      let params = [userId];\n      \n      if (unreadOnly) {\n        whereClause += ' AND read_at IS NULL';\n      }\n\n      const result = await query(`\n        SELECT \n          id,\n          alert_id,\n          title,\n          message,\n          category,\n          priority,\n          read_at,\n          created_at,\n          metadata\n        FROM alert_notifications\n        ${whereClause}\n        ORDER BY created_at DESC\n        LIMIT $${params.length + 1} OFFSET $${params.length + 2}\n      `, [...params, limit, offset]);\n\n      const countResult = await query(`\n        SELECT COUNT(*) as total\n        FROM alert_notifications\n        ${whereClause}\n      `, params);\n\n      const notifications = result.rows.map(notification => ({\n        id: notification.id,\n        alertId: notification.alert_id,\n        title: notification.title,\n        message: notification.message,\n        category: notification.category,\n        priority: notification.priority,\n        isRead: !!notification.read_at,\n        readAt: notification.read_at,\n        createdAt: notification.created_at,\n        metadata: typeof notification.metadata === 'string' \n          ? JSON.parse(notification.metadata) \n          : notification.metadata\n      }));\n\n      res.json({\n        success: true,\n        data: notifications,\n        pagination: {\n          total: parseInt(countResult.rows[0].total),\n          limit,\n          offset,\n          hasMore: offset + notifications.length < parseInt(countResult.rows[0].total)\n        },\n        timestamp: new Date().toISOString()\n      });\n\n    } catch (dbError) {\n      console.log('Database query failed for notifications, using mock data:', dbError.message);\n      \n      // Return mock notifications if database fails\n      const mockNotifications = [\n        {\n          id: 'notif-1',\n          alertId: 'alert-1',\n          title: 'Price Alert Triggered',\n          message: 'AAPL has reached your target price of $175.00',\n          category: 'price',\n          priority: 'high',\n          isRead: false,\n          readAt: null,\n          createdAt: new Date().toISOString(),\n          metadata: {\n            symbol: 'AAPL',\n            currentPrice: 175.50,\n            targetPrice: 175.00\n          }\n        },\n        {\n          id: 'notif-2',\n          alertId: 'alert-2',\n          title: 'Volume Spike Detected',\n          message: 'TSLA is experiencing unusual trading volume',\n          category: 'volume',\n          priority: 'medium',\n          isRead: true,\n          readAt: new Date(Date.now() - 3600000).toISOString(),\n          createdAt: new Date(Date.now() - 7200000).toISOString(),\n          metadata: {\n            symbol: 'TSLA',\n            currentVolume: 85000000,\n            averageVolume: 45000000\n          }\n        }\n      ];\n\n      res.json({\n        success: true,\n        data: unreadOnly ? mockNotifications.filter(n => !n.isRead) : mockNotifications,\n        pagination: {\n          total: unreadOnly ? 1 : 2,\n          limit,\n          offset,\n          hasMore: false\n        },\n        note: 'Mock notifications - database connectivity issue',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n  } catch (error) {\n    console.error('Error fetching notifications:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch notifications',\n      details: error.message\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}