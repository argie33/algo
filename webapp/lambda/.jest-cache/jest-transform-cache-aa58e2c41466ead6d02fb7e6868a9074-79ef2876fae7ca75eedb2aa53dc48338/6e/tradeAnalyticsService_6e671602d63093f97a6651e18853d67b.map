{"version":3,"names":["AlpacaService","require","query","TradeAnalyticsService","constructor","importAlpacaTrades","userId","apiKey","apiSecret","isPaper","startDate","endDate","alpaca","validation","validateCredentials","valid","Error","error","account","getAccount","updateBrokerConfig","activities","getActivities","filteredActivities","filter","activity","activityDate","Date","date","importResults","importTradeExecutions","positionsResults","reconstructPositions","analyticsResults","calculateTradeAnalytics","success","id","accountId","status","environment","console","message","broker","imported","updated","errors","apiKeyResult","apiKeyId","rows","executionData","user_id","api_key_id","trade_id","order_id","symbol","asset_class","security_type","side","quantity","Math","abs","qty","price","commission","fees","execution_time","settlement_date","venue","order_type","time_in_force","imported_at","last_updated","result","inserted","total","length","executions","positionsBySymbol","positionsCreated","positionsUpdated","execution","currentQuantity","totalBought","totalSold","buyQuantity","sellQuantity","buyValue","sellValue","positions","pos","push","parseFloat","value","grossPnl","netPnl","returnPct","firstExecution","lastExecution","holdingPeriod","Object","entries","symbolsProcessed","keys","analyticsCreated","position","analytics","calculatePositionAnalytics","entry_signal_quality","entry_timing_score","exit_signal_quality","exit_timing_score","risk_reward_ratio","alpha_generated","emotional_state_score","discipline_score","trade_pattern_type","pattern_confidence","positionsAnalyzed","return_percentage","holding_period_days","entrySignalQuality","min","max","exitSignalQuality","entryTimingScore","exitTimingScore","riskRewardRatio","marketReturn","alphaGenerated","emotionalStateScore","disciplineScore","tradePatternType","patternConfidence","isActive","getTradeAnalysisSummary","portfolioResult","recentTrades","performanceAttribution","portfolio","lastUpdated","toISOString","getTradeInsights","limit","module","exports"],"sources":["tradeAnalyticsService.js"],"sourcesContent":["const AlpacaService = require('../utils/alpacaService');\nconst { query } = require('../utils/database');\n\n/**\n * Professional Trade Analytics Service\n * Imports and analyzes trade data from Alpaca for institutional-grade analytics\n */\nclass TradeAnalyticsService {\n  constructor() {\n    // Database connection is handled by the utility\n  }\n\n  /**\n   * Import trade executions from Alpaca\n   */\n  async importAlpacaTrades(userId, apiKey, apiSecret, isPaper = true, startDate = null, endDate = null) {\n    try {\n      const alpaca = new AlpacaService(apiKey, apiSecret, isPaper);\n      \n      // Validate credentials first\n      const validation = await alpaca.validateCredentials();\n      if (!validation.valid) {\n        throw new Error(`Invalid Alpaca credentials: ${validation.error}`);\n      }\n\n      // Get account info\n      const account = await alpaca.getAccount();\n      \n      // Update or create broker API config\n      await this.updateBrokerConfig(userId, 'alpaca', isPaper, true);\n\n      // Get activities (trade executions)\n      const activities = await alpaca.getActivities(['FILL'], 500);\n      \n      // Filter by date range if specified\n      let filteredActivities = activities;\n      if (startDate || endDate) {\n        filteredActivities = activities.filter(activity => {\n          const activityDate = new Date(activity.date);\n          if (startDate && activityDate < new Date(startDate)) return false;\n          if (endDate && activityDate > new Date(endDate)) return false;\n          return true;\n        });\n      }\n\n      // Import trade executions\n      const importResults = await this.importTradeExecutions(userId, filteredActivities, 'alpaca', isPaper);\n      \n      // Reconstruct positions from executions\n      const positionsResults = await this.reconstructPositions(userId);\n      \n      // Calculate analytics for new positions\n      const analyticsResults = await this.calculateTradeAnalytics(userId);\n\n      return {\n        success: true,\n        importResults,\n        positionsResults,\n        analyticsResults,\n        account: {\n          id: account.accountId,\n          status: account.status,\n          environment: account.environment\n        }\n      };\n\n    } catch (error) {\n      console.error('Trade import error:', error);\n      \n      // Update broker config to mark as failed\n      await this.updateBrokerConfig(userId, 'alpaca', isPaper, false, error.message);\n      \n      throw new Error(`Failed to import trades: ${error.message}`);\n    }\n  }\n\n  /**\n   * Import trade executions into database\n   */\n  async importTradeExecutions(userId, activities, broker, isPaper) {\n    // Database queries will use the query function directly\n    let imported = 0;\n    let updated = 0;\n    let errors = 0;\n\n    try {\n      await query('BEGIN');\n\n      // Get API key ID for reference\n      const apiKeyResult = await query(\n        'SELECT id FROM user_api_keys WHERE user_id = $1 AND provider = $2',\n        [userId, broker]\n      );\n      \n      const apiKeyId = apiKeyResult.rows[0]?.id;\n\n      for (const activity of activities) {\n        try {\n          // Parse execution data\n          const executionData = {\n            user_id: userId,\n            api_key_id: apiKeyId,\n            broker: broker,\n            trade_id: activity.id,\n            order_id: activity.order_id || null,\n            symbol: activity.symbol,\n            asset_class: 'equity', // Alpaca is primarily equity\n            security_type: 'stock',\n            side: activity.side,\n            quantity: Math.abs(activity.qty || 0),\n            price: activity.price || 0,\n            commission: 0, // Alpaca is commission-free\n            fees: 0,\n            execution_time: activity.date,\n            settlement_date: activity.date,\n            venue: 'ALPACA',\n            order_type: 'market', // Default - would need order data for specifics\n            time_in_force: 'day',\n            imported_at: new Date(),\n            last_updated: new Date()\n          };\n\n          // Insert or update trade execution\n          const result = await query(`\n            INSERT INTO trade_executions (\n              user_id, api_key_id, broker, trade_id, order_id, symbol, asset_class, security_type,\n              side, quantity, price, commission, fees, execution_time, settlement_date,\n              venue, order_type, time_in_force, imported_at, last_updated\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)\n            ON CONFLICT (broker, trade_id) DO UPDATE SET\n              quantity = EXCLUDED.quantity,\n              price = EXCLUDED.price,\n              last_updated = EXCLUDED.last_updated\n            RETURNING id, (xmax = 0) AS inserted\n          `, [\n            executionData.user_id, executionData.api_key_id, executionData.broker,\n            executionData.trade_id, executionData.order_id, executionData.symbol,\n            executionData.asset_class, executionData.security_type, executionData.side,\n            executionData.quantity, executionData.price, executionData.commission,\n            executionData.fees, executionData.execution_time, executionData.settlement_date,\n            executionData.venue, executionData.order_type, executionData.time_in_force,\n            executionData.imported_at, executionData.last_updated\n          ]);\n\n          if (result.rows[0].inserted) {\n            imported++;\n          } else {\n            updated++;\n          }\n\n        } catch (error) {\n          console.error('Error importing execution:', error);\n          errors++;\n        }\n      }\n\n      await query('COMMIT');\n\n      return {\n        imported,\n        updated,\n        errors,\n        total: activities.length\n      };\n\n    } catch (error) {\n      await query('ROLLBACK');\n      throw error;\n    }\n  }\n\n  /**\n   * Reconstruct positions from trade executions\n   */\n  async reconstructPositions(userId) {\n    // Database queries will use the query function directly\n    \n    try {\n      await query('BEGIN');\n\n      // Get all executions for user, ordered by time\n      const executions = await query(`\n        SELECT * FROM trade_executions \n        WHERE user_id = $1 \n        ORDER BY symbol, execution_time\n      `, [userId]);\n\n      const positionsBySymbol = {};\n      let positionsCreated = 0;\n      let positionsUpdated = 0;\n\n      // Process executions to reconstruct positions\n      for (const execution of executions.rows) {\n        const symbol = execution.symbol;\n        \n        if (!positionsBySymbol[symbol]) {\n          positionsBySymbol[symbol] = {\n            symbol: symbol,\n            executions: [],\n            currentQuantity: 0,\n            totalBought: 0,\n            totalSold: 0,\n            buyQuantity: 0,\n            sellQuantity: 0,\n            buyValue: 0,\n            sellValue: 0,\n            positions: []\n          };\n        }\n\n        const pos = positionsBySymbol[symbol];\n        pos.executions.push(execution);\n\n        const qty = parseFloat(execution.quantity);\n        const price = parseFloat(execution.price);\n        const value = qty * price;\n\n        if (execution.side === 'buy') {\n          pos.buyQuantity += qty;\n          pos.buyValue += value;\n          pos.currentQuantity += qty;\n        } else {\n          pos.sellQuantity += qty;\n          pos.sellValue += value;\n          pos.currentQuantity -= qty;\n        }\n\n        // Check if position is closed\n        if (pos.currentQuantity === 0 && pos.buyQuantity > 0) {\n          // Position closed, calculate P&L\n          const grossPnl = pos.sellValue - pos.buyValue;\n          const netPnl = grossPnl; // No commissions for Alpaca\n          const returnPct = pos.buyValue > 0 ? (grossPnl / pos.buyValue) * 100 : 0;\n          \n          const firstExecution = pos.executions[0];\n          const lastExecution = pos.executions[pos.executions.length - 1];\n          \n          const holdingPeriod = (new Date(lastExecution.execution_time) - new Date(firstExecution.execution_time)) / (1000 * 60 * 60 * 24);\n          \n          // Insert closed position\n          await query(`\n            INSERT INTO position_history (\n              user_id, symbol, asset_class, opened_at, closed_at, side, total_quantity,\n              avg_entry_price, avg_exit_price, gross_pnl, net_pnl, total_commissions, total_fees,\n              return_percentage, holding_period_days, status\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)\n            ON CONFLICT (user_id, symbol, opened_at) DO UPDATE SET\n              closed_at = EXCLUDED.closed_at,\n              avg_exit_price = EXCLUDED.avg_exit_price,\n              gross_pnl = EXCLUDED.gross_pnl,\n              net_pnl = EXCLUDED.net_pnl,\n              return_percentage = EXCLUDED.return_percentage,\n              holding_period_days = EXCLUDED.holding_period_days,\n              status = EXCLUDED.status\n          `, [\n            userId, symbol, execution.asset_class, firstExecution.execution_time,\n            lastExecution.execution_time, 'long', pos.buyQuantity,\n            pos.buyValue / pos.buyQuantity, pos.sellValue / pos.sellQuantity,\n            grossPnl, netPnl, 0, 0, returnPct, holdingPeriod, 'closed'\n          ]);\n\n          positionsCreated++;\n          \n          // Reset for next position\n          pos.currentQuantity = 0;\n          pos.buyQuantity = 0;\n          pos.sellQuantity = 0;\n          pos.buyValue = 0;\n          pos.sellValue = 0;\n          pos.executions = [];\n        }\n      }\n\n      // Handle any remaining open positions\n      for (const [symbol, pos] of Object.entries(positionsBySymbol)) {\n        if (pos.currentQuantity > 0) {\n          const firstExecution = pos.executions[0];\n          \n          await query(`\n            INSERT INTO position_history (\n              user_id, symbol, asset_class, opened_at, side, total_quantity,\n              avg_entry_price, status\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n            ON CONFLICT (user_id, symbol, opened_at) DO UPDATE SET\n              total_quantity = EXCLUDED.total_quantity,\n              avg_entry_price = EXCLUDED.avg_entry_price\n          `, [\n            userId, symbol, firstExecution.asset_class, firstExecution.execution_time,\n            'long', pos.currentQuantity, pos.buyValue / pos.buyQuantity, 'open'\n          ]);\n\n          positionsUpdated++;\n        }\n      }\n\n      await query('COMMIT');\n\n      return {\n        positionsCreated,\n        positionsUpdated,\n        symbolsProcessed: Object.keys(positionsBySymbol).length\n      };\n\n    } catch (error) {\n      await query('ROLLBACK');\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate trade analytics for positions\n   */\n  async calculateTradeAnalytics(userId) {\n    // Database queries will use the query function directly\n    \n    try {\n      // Get closed positions that need analytics\n      const positions = await query(`\n        SELECT p.*, cp.sector, cp.industry, cp.market_cap\n        FROM position_history p\n        LEFT JOIN company_profile cp ON p.symbol = cp.ticker\n        WHERE p.user_id = $1 AND p.status = 'closed'\n        AND NOT EXISTS (\n          SELECT 1 FROM trade_analytics ta WHERE ta.position_id = p.id\n        )\n      `, [userId]);\n\n      let analyticsCreated = 0;\n\n      for (const position of positions.rows) {\n        // Calculate basic analytics\n        const analytics = await this.calculatePositionAnalytics(position);\n        \n        // Insert analytics\n        await query(`\n          INSERT INTO trade_analytics (\n            position_id, user_id, entry_signal_quality, entry_timing_score,\n            exit_signal_quality, exit_timing_score, risk_reward_ratio,\n            alpha_generated, emotional_state_score, discipline_score,\n            trade_pattern_type, pattern_confidence\n          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n        `, [\n          position.id, userId, analytics.entry_signal_quality, analytics.entry_timing_score,\n          analytics.exit_signal_quality, analytics.exit_timing_score, analytics.risk_reward_ratio,\n          analytics.alpha_generated, analytics.emotional_state_score, analytics.discipline_score,\n          analytics.trade_pattern_type, analytics.pattern_confidence\n        ]);\n\n        analyticsCreated++;\n      }\n\n      return {\n        analyticsCreated,\n        positionsAnalyzed: positions.rows.length\n      };\n\n    } catch (error) {\n      console.error('Error calculating trade analytics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate analytics for a single position\n   */\n  async calculatePositionAnalytics(position) {\n    // This is a simplified version - in production you'd use more sophisticated algorithms\n    const returnPct = position.return_percentage || 0;\n    const holdingPeriod = position.holding_period_days || 0;\n    \n    // Basic scoring (0-100)\n    const entrySignalQuality = Math.min(100, Math.max(0, 50 + (returnPct * 2)));\n    const exitSignalQuality = Math.min(100, Math.max(0, 50 + (returnPct * 1.5)));\n    const entryTimingScore = Math.min(100, Math.max(0, 70 - (holdingPeriod * 0.5)));\n    const exitTimingScore = Math.min(100, Math.max(0, 60 + (returnPct * 1.2)));\n    \n    // Risk-reward ratio (simplified)\n    const riskRewardRatio = Math.abs(returnPct) > 0 ? Math.max(returnPct, 0) / Math.max(Math.abs(returnPct), 1) : 0;\n    \n    // Alpha vs market (simplified - assumes 10% market return)\n    const marketReturn = 10;\n    const alphaGenerated = (returnPct - marketReturn) / 100;\n    \n    // Emotional and discipline scores (simplified)\n    const emotionalStateScore = Math.min(100, Math.max(0, 70 - Math.abs(returnPct - 5)));\n    const disciplineScore = Math.min(100, Math.max(0, 80 - (Math.abs(holdingPeriod - 30) * 0.5)));\n    \n    // Pattern recognition (simplified)\n    let tradePatternType = 'unknown';\n    let patternConfidence = 0.5;\n    \n    if (holdingPeriod < 1) {\n      tradePatternType = 'day_trading';\n      patternConfidence = 0.8;\n    } else if (holdingPeriod < 7) {\n      tradePatternType = 'swing_trading';\n      patternConfidence = 0.7;\n    } else if (holdingPeriod < 30) {\n      tradePatternType = 'short_term';\n      patternConfidence = 0.6;\n    } else {\n      tradePatternType = 'position_trading';\n      patternConfidence = 0.7;\n    }\n\n    return {\n      entry_signal_quality: entrySignalQuality,\n      entry_timing_score: entryTimingScore,\n      exit_signal_quality: exitSignalQuality,\n      exit_timing_score: exitTimingScore,\n      risk_reward_ratio: riskRewardRatio,\n      alpha_generated: alphaGenerated,\n      emotional_state_score: emotionalStateScore,\n      discipline_score: disciplineScore,\n      trade_pattern_type: tradePatternType,\n      pattern_confidence: patternConfidence\n    };\n  }\n\n  /**\n   * Update broker API configuration\n   */\n  async updateBrokerConfig(userId, broker, isPaper, isActive, error = null) {\n    // Database queries will use the query function directly\n    \n    try {\n      await query(`\n        INSERT INTO broker_api_configs (\n          user_id, broker, is_paper_trading, is_active, last_sync_status,\n          last_sync_error, last_import_date\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n        ON CONFLICT (user_id, broker) DO UPDATE SET\n          is_paper_trading = EXCLUDED.is_paper_trading,\n          is_active = EXCLUDED.is_active,\n          last_sync_status = EXCLUDED.last_sync_status,\n          last_sync_error = EXCLUDED.last_sync_error,\n          last_import_date = EXCLUDED.last_import_date,\n          updated_at = CURRENT_TIMESTAMP\n      `, [\n        userId, broker, isPaper, isActive,\n        error ? 'failed' : 'success', error,\n        isActive ? new Date() : null\n      ]);\n    } catch (error) {\n      console.error('Error updating broker config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get trade analysis summary for user\n   */\n  async getTradeAnalysisSummary(userId) {\n    // Database queries will use the query function directly\n    \n    try {\n      // Get portfolio summary\n      const portfolioResult = await query(`\n        SELECT * FROM portfolio_summary WHERE user_id = $1\n      `, [userId]);\n\n      // Get recent trades with analytics\n      const recentTrades = await query(`\n        SELECT * FROM recent_trades \n        WHERE user_id = $1 \n        ORDER BY opened_at DESC \n        LIMIT 10\n      `, [userId]);\n\n      // Get performance attribution\n      const performanceAttribution = await query(`\n        SELECT * FROM performance_attribution \n        WHERE user_id = $1 \n        ORDER BY closed_at DESC \n        LIMIT 20\n      `, [userId]);\n\n      return {\n        portfolio: portfolioResult.rows[0] || null,\n        recentTrades: recentTrades.rows,\n        performanceAttribution: performanceAttribution.rows,\n        lastUpdated: new Date().toISOString()\n      };\n\n    } catch (error) {\n      console.error('Error getting trade analysis summary:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get trade insights for user\n   */\n  async getTradeInsights(userId, limit = 10) {\n    // Database queries will use the query function directly\n    \n    try {\n      const result = await query(`\n        SELECT * FROM trade_insights \n        WHERE user_id = $1 \n        ORDER BY created_at DESC \n        LIMIT $2\n      `, [userId, limit]);\n\n      return result.rows;\n    } catch (error) {\n      console.error('Error getting trade insights:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = TradeAnalyticsService;"],"mappings":"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","ignoreList":[]}