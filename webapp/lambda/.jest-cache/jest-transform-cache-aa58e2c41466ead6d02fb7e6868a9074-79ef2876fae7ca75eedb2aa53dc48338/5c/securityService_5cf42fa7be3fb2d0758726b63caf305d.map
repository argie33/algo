{"version":3,"names":["crypto","require","EventEmitter","SecurityService","constructor","securityEvents","threatLevel","maxEventHistory","alertThresholds","failedLogins","count","timeWindow","suspiciousIPs","rateLimitViolations","authenticationAnomalies","metrics","totalEvents","criticalEvents","blockedAttacks","lastThreatAssessment","Date","now","automatedResponse","enabled","autoBlock","alertAdmin","startEventProcessor","logSecurityEvent","eventType","severity","details","req","event","id","randomUUID","timestamp","sourceIP","ip","connection","remoteAddress","userAgent","get","userId","user","sessionId","correlationId","processed","push","emit","length","slice","console","log","setInterval","processSecurityEvents","assessThreatLevel","currentTime","recentEvents","filter","eventsByType","eventsByIP","forEach","checkThresholds","events","Object","entries","threshold","triggerAlert","map","e","eventTypes","Set","size","Array","from","timeSpan","Math","max","min","eventCount","alertType","alert","getAlertSeverity","acknowledged","responseActions","warn","takeAutomatedResponse","actions","join","severityMap","threshold_exceeded","multi_vector_attack","high_frequency_attack","data_breach_attempt","unauthorized_access","privilege_escalation","lastHour","warningEvents","newThreatLevel","to","getSecurityDashboard","last24Hours","recent24h","recent1h","severities","info","warning","critical","sourceIPs","topIPs","sort","a","b","timeline","eventsPerHour","round","breakdown","topSourceIPs","exportSecurityEvents","startTime","endTime","format","filteredEvents","csvHeader","csvRows","JSON","stringify","replace","exportTime","timeRange","clearOldEvents","olderThan","cutoffTime","initialCount","removedCount","getMetrics","recentEventCount","averageEventsPerHour","criticalEventRate","topEventTypes","getTopEventTypes","lastAssessment","toISOString","type","module","exports"],"sources":["securityService.js"],"sourcesContent":["/**\n * Security Service\n * Central security management and event monitoring\n */\n\nconst crypto = require('crypto');\nconst EventEmitter = require('events');\n\nclass SecurityService extends EventEmitter {\n    constructor() {\n        super();\n        this.securityEvents = [];\n        this.threatLevel = 'low'; // low, medium, high, critical\n        this.maxEventHistory = 10000;\n        this.alertThresholds = {\n            failedLogins: { count: 10, timeWindow: 300000 }, // 10 in 5 minutes\n            suspiciousIPs: { count: 5, timeWindow: 600000 },  // 5 in 10 minutes\n            rateLimitViolations: { count: 20, timeWindow: 300000 }, // 20 in 5 minutes\n            authenticationAnomalies: { count: 3, timeWindow: 900000 } // 3 in 15 minutes\n        };\n        \n        // Security metrics\n        this.metrics = {\n            totalEvents: 0,\n            criticalEvents: 0,\n            blockedAttacks: 0,\n            lastThreatAssessment: Date.now()\n        };\n\n        // Automated threat response\n        this.automatedResponse = {\n            enabled: true,\n            autoBlock: true,\n            alertAdmin: true\n        };\n\n        // Start monitoring\n        this.startEventProcessor();\n    }\n\n    /**\n     * Log security event\n     */\n    logSecurityEvent(eventType, severity, details, req = null) {\n        const event = {\n            id: crypto.randomUUID(),\n            timestamp: Date.now(),\n            eventType,\n            severity, // info, warning, critical\n            details,\n            sourceIP: req?.ip || req?.connection?.remoteAddress || 'unknown',\n            userAgent: req?.get('User-Agent') || 'unknown',\n            userId: req?.user?.userId || req?.userId || null,\n            sessionId: req?.sessionId || null,\n            correlationId: req?.correlationId || null,\n            processed: false\n        };\n\n        this.securityEvents.push(event);\n        this.metrics.totalEvents++;\n\n        if (severity === 'critical') {\n            this.metrics.criticalEvents++;\n        }\n\n        // Emit event for real-time processing\n        this.emit('securityEvent', event);\n\n        // Trim old events to prevent memory issues\n        if (this.securityEvents.length > this.maxEventHistory) {\n            this.securityEvents = this.securityEvents.slice(-this.maxEventHistory);\n        }\n\n        console.log(`üîí Security event logged: ${eventType} [${severity}] from ${event.sourceIP}`);\n        \n        return event.id;\n    }\n\n    /**\n     * Process security events and detect patterns\n     */\n    startEventProcessor() {\n        setInterval(() => {\n            this.processSecurityEvents();\n            this.assessThreatLevel();\n        }, 30000); // Every 30 seconds\n    }\n\n    /**\n     * Process recent security events for patterns\n     */\n    processSecurityEvents() {\n        const currentTime = Date.now();\n        const recentEvents = this.securityEvents.filter(\n            event => currentTime - event.timestamp < 900000 && !event.processed\n        );\n\n        // Group events by type and IP\n        const eventsByType = {};\n        const eventsByIP = {};\n\n        recentEvents.forEach(event => {\n            // By type\n            if (!eventsByType[event.eventType]) {\n                eventsByType[event.eventType] = [];\n            }\n            eventsByType[event.eventType].push(event);\n\n            // By IP\n            if (!eventsByIP[event.sourceIP]) {\n                eventsByIP[event.sourceIP] = [];\n            }\n            eventsByIP[event.sourceIP].push(event);\n\n            // Mark as processed\n            event.processed = true;\n        });\n\n        // Check for threshold violations\n        this.checkThresholds(eventsByType, eventsByIP);\n    }\n\n    /**\n     * Check if events exceed alert thresholds\n     */\n    checkThresholds(eventsByType, eventsByIP) {\n        const currentTime = Date.now();\n\n        // Check event type thresholds\n        for (const [eventType, events] of Object.entries(eventsByType)) {\n            const threshold = this.alertThresholds[eventType];\n            if (!threshold) continue;\n\n            const recentEvents = events.filter(\n                event => currentTime - event.timestamp < threshold.timeWindow\n            );\n\n            if (recentEvents.length >= threshold.count) {\n                this.triggerAlert('threshold_exceeded', {\n                    eventType,\n                    count: recentEvents.length,\n                    threshold: threshold.count,\n                    timeWindow: threshold.timeWindow,\n                    events: recentEvents.map(e => ({ id: e.id, timestamp: e.timestamp, sourceIP: e.sourceIP }))\n                });\n            }\n        }\n\n        // Check IP-based patterns\n        for (const [ip, events] of Object.entries(eventsByIP)) {\n            // Multiple event types from same IP\n            const eventTypes = new Set(events.map(e => e.eventType));\n            if (eventTypes.size >= 3 && events.length >= 5) {\n                this.triggerAlert('multi_vector_attack', {\n                    sourceIP: ip,\n                    eventTypes: Array.from(eventTypes),\n                    totalEvents: events.length,\n                    timeSpan: Math.max(...events.map(e => e.timestamp)) - Math.min(...events.map(e => e.timestamp))\n                });\n            }\n\n            // High frequency from single IP\n            if (events.length >= 15) {\n                this.triggerAlert('high_frequency_attack', {\n                    sourceIP: ip,\n                    eventCount: events.length,\n                    timeSpan: Math.max(...events.map(e => e.timestamp)) - Math.min(...events.map(e => e.timestamp))\n                });\n            }\n        }\n    }\n\n    /**\n     * Trigger security alert\n     */\n    triggerAlert(alertType, details) {\n        const alert = {\n            id: crypto.randomUUID(),\n            timestamp: Date.now(),\n            alertType,\n            details,\n            severity: this.getAlertSeverity(alertType),\n            acknowledged: false,\n            responseActions: []\n        };\n\n        console.warn(`üö® Security alert triggered: ${alertType}`, details);\n\n        // Take automated response if enabled\n        if (this.automatedResponse.enabled) {\n            this.takeAutomatedResponse(alert);\n        }\n\n        // Emit alert for external processing\n        this.emit('securityAlert', alert);\n\n        return alert.id;\n    }\n\n    /**\n     * Take automated response to security threats\n     */\n    takeAutomatedResponse(alert) {\n        const actions = [];\n\n        switch (alert.alertType) {\n            case 'threshold_exceeded':\n                if (alert.details.eventType === 'failedLogins' && this.automatedResponse.autoBlock) {\n                    // Could trigger temporary IP blocks\n                    actions.push('rate_limit_increased');\n                }\n                break;\n\n            case 'multi_vector_attack':\n            case 'high_frequency_attack':\n                if (this.automatedResponse.autoBlock) {\n                    // Could trigger IP blacklisting\n                    actions.push('ip_blocked');\n                    this.metrics.blockedAttacks++;\n                }\n                break;\n        }\n\n        alert.responseActions = actions;\n        \n        if (actions.length > 0) {\n            console.log(`üõ°Ô∏è Automated response taken for ${alert.alertType}: ${actions.join(', ')}`);\n        }\n    }\n\n    /**\n     * Get alert severity based on type\n     */\n    getAlertSeverity(alertType) {\n        const severityMap = {\n            threshold_exceeded: 'medium',\n            multi_vector_attack: 'high',\n            high_frequency_attack: 'high',\n            data_breach_attempt: 'critical',\n            unauthorized_access: 'critical',\n            privilege_escalation: 'critical'\n        };\n\n        return severityMap[alertType] || 'medium';\n    }\n\n    /**\n     * Assess overall threat level\n     */\n    assessThreatLevel() {\n        const currentTime = Date.now();\n        const lastHour = currentTime - (60 * 60 * 1000);\n        \n        const recentEvents = this.securityEvents.filter(\n            event => event.timestamp > lastHour\n        );\n\n        const criticalEvents = recentEvents.filter(e => e.severity === 'critical').length;\n        const warningEvents = recentEvents.filter(e => e.severity === 'warning').length;\n        const totalEvents = recentEvents.length;\n\n        let newThreatLevel = 'low';\n\n        if (criticalEvents >= 5 || totalEvents >= 100) {\n            newThreatLevel = 'critical';\n        } else if (criticalEvents >= 2 || warningEvents >= 10 || totalEvents >= 50) {\n            newThreatLevel = 'high';\n        } else if (criticalEvents >= 1 || warningEvents >= 5 || totalEvents >= 20) {\n            newThreatLevel = 'medium';\n        }\n\n        if (newThreatLevel !== this.threatLevel) {\n            console.warn(`üéØ Threat level changed: ${this.threatLevel} ‚Üí ${newThreatLevel}`);\n            this.threatLevel = newThreatLevel;\n            this.emit('threatLevelChanged', { from: this.threatLevel, to: newThreatLevel });\n        }\n\n        this.metrics.lastThreatAssessment = currentTime;\n    }\n\n    /**\n     * Get security dashboard data\n     */\n    getSecurityDashboard() {\n        const currentTime = Date.now();\n        const last24Hours = currentTime - (24 * 60 * 60 * 1000);\n        const lastHour = currentTime - (60 * 60 * 1000);\n\n        const recent24h = this.securityEvents.filter(e => e.timestamp > last24Hours);\n        const recent1h = this.securityEvents.filter(e => e.timestamp > lastHour);\n\n        // Event type breakdown\n        const eventTypes = {};\n        recent24h.forEach(event => {\n            eventTypes[event.eventType] = (eventTypes[event.eventType] || 0) + 1;\n        });\n\n        // Severity breakdown\n        const severities = { info: 0, warning: 0, critical: 0 };\n        recent24h.forEach(event => {\n            severities[event.severity] = (severities[event.severity] || 0) + 1;\n        });\n\n        // Top source IPs\n        const sourceIPs = {};\n        recent24h.forEach(event => {\n            sourceIPs[event.sourceIP] = (sourceIPs[event.sourceIP] || 0) + 1;\n        });\n\n        const topIPs = Object.entries(sourceIPs)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 10)\n            .map(([ip, count]) => ({ ip, count }));\n\n        return {\n            threatLevel: this.threatLevel,\n            metrics: this.metrics,\n            timeline: {\n                last24Hours: recent24h.length,\n                lastHour: recent1h.length,\n                eventsPerHour: Math.round(recent24h.length / 24)\n            },\n            breakdown: {\n                eventTypes,\n                severities,\n                topSourceIPs: topIPs\n            },\n            recentEvents: this.securityEvents\n                .filter(e => e.timestamp > lastHour)\n                .sort((a, b) => b.timestamp - a.timestamp)\n                .slice(0, 50)\n                .map(e => ({\n                    id: e.id,\n                    timestamp: e.timestamp,\n                    eventType: e.eventType,\n                    severity: e.severity,\n                    sourceIP: e.sourceIP,\n                    details: e.details\n                }))\n        };\n    }\n\n    /**\n     * Export security events for analysis\n     */\n    exportSecurityEvents(startTime, endTime, format = 'json') {\n        const filteredEvents = this.securityEvents.filter(\n            event => event.timestamp >= startTime && event.timestamp <= endTime\n        );\n\n        if (format === 'csv') {\n            const csvHeader = 'timestamp,eventType,severity,sourceIP,userAgent,userId,details\\n';\n            const csvRows = filteredEvents.map(event => \n                `${event.timestamp},${event.eventType},${event.severity},${event.sourceIP},\"${event.userAgent}\",${event.userId || ''},\"${JSON.stringify(event.details).replace(/\"/g, '\"\"')}\"`\n            ).join('\\n');\n            \n            return csvHeader + csvRows;\n        }\n\n        return {\n            exportTime: Date.now(),\n            timeRange: { startTime, endTime },\n            eventCount: filteredEvents.length,\n            events: filteredEvents\n        };\n    }\n\n    /**\n     * Clear old security events\n     */\n    clearOldEvents(olderThan = 7 * 24 * 60 * 60 * 1000) { // 7 days default\n        const cutoffTime = Date.now() - olderThan;\n        const initialCount = this.securityEvents.length;\n        \n        this.securityEvents = this.securityEvents.filter(\n            event => event.timestamp > cutoffTime\n        );\n\n        const removedCount = initialCount - this.securityEvents.length;\n        \n        if (removedCount > 0) {\n            console.log(`üßπ Removed ${removedCount} old security events`);\n        }\n\n        return removedCount;\n    }\n\n    /**\n     * Get security metrics summary\n     */\n    getMetrics() {\n        const currentTime = Date.now();\n        const last24Hours = currentTime - (24 * 60 * 60 * 1000);\n        \n        const recentEvents = this.securityEvents.filter(\n            event => event.timestamp > last24Hours\n        );\n\n        return {\n            ...this.metrics,\n            threatLevel: this.threatLevel,\n            recentEventCount: recentEvents.length,\n            averageEventsPerHour: Math.round(recentEvents.length / 24),\n            criticalEventRate: recentEvents.filter(e => e.severity === 'critical').length / recentEvents.length,\n            topEventTypes: this.getTopEventTypes(recentEvents),\n            lastAssessment: new Date(this.metrics.lastThreatAssessment).toISOString()\n        };\n    }\n\n    /**\n     * Get top event types from recent events\n     */\n    getTopEventTypes(events) {\n        const eventTypes = {};\n        events.forEach(event => {\n            eventTypes[event.eventType] = (eventTypes[event.eventType] || 0) + 1;\n        });\n\n        return Object.entries(eventTypes)\n            .sort(([,a], [,b]) => b - a)\n            .slice(0, 5)\n            .map(([type, count]) => ({ type, count }));\n    }\n}\n\nmodule.exports = SecurityService;"],"mappings":"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","ignoreList":[]}