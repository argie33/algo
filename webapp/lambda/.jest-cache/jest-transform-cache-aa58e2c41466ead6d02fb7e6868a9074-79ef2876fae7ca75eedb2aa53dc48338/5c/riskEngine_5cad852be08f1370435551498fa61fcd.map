{"version":3,"names":["cov_w5qhr4s0y","actualCoverage","query","s","require","EventEmitter","RiskEngine","constructor","f","monitoringUsers","Map","monitoringInterval","isMonitoring","checkInterval","calculatePortfolioRisk","portfolioId","timeframe","b","confidenceLevel","holdingsResult","holdings","rows","length","portfolio_id","error","symbols","map","h","symbol","priceData","getHistoricalPrices","portfolioReturns","calculatePortfolioReturns","riskMetrics","confidence_level","volatility","calculateVolatility","var_95","calculateVaR","var_99","expected_shortfall","calculateExpectedShortfall","sharpe_ratio","calculateSharpeRatio","max_drawdown","calculateMaxDrawdown","concentration_risk","calculateConcentrationRisk","sector_exposure","calculateSectorExposure","correlation_matrix","calculateCorrelationMatrix","diversification_ratio","calculateDiversificationRatio","beta","calculatePortfolioBeta","tracking_error","calculateTrackingError","calculated_at","Date","toISOString","storeRiskMetrics","console","method","timeHorizon","lookbackDays","getPortfolioHoldings","var_value","calculateHistoricalVaR","calculateParametricVaR","calculateMonteCarloVaR","time_horizon","lookback_days","performStressTest","scenarios","shockMagnitude","correlationAdjustment","stressTestResults","shock_magnitude","correlation_adjustment","summary","name","type","magnitude","scenario","scenarioResult","runStressScenario","push","pnlValues","portfolio_pnl","worst_case_pnl","Math","min","best_case_pnl","max","average_pnl","reduce","a","scenarios_count","fail_threshold","scenarios_exceeding_threshold","filter","pnl","startRealTimeMonitoring","userId","portfolioIds","portfoliosResult","row","id","limitsResult","set","portfolios","limits","last_check","check_interval","startMonitoringLoop","user_id","portfolios_monitored","limits_configured","status","stopRealTimeMonitoring","wasMonitoring","has","delete","size","stopMonitoringLoop","was_monitoring","log","setInterval","performMonitoringCheck","emit","clearInterval","config","checkUserPortfolios","portfolioLimits","l","limit","currentValue","metric_name","undefined","checkRiskLimit","isBreached","isLimitBreached","isWarning","isWarningThreshold","existingAlertResult","createRiskAlert","severity","alertType","title","description","toFixed","threshold_value","metricName","thresholdValue","threshold_type","abs","warning_threshold","returns","mean","variance","sum","r","pow","sqrt","sortedReturns","slice","sort","index","floor","zScore","getZScore","tailReturns","riskFreeRate","excessReturns","meanExcess","maxDrawdown","peak","cumulativeReturn","return_val","drawdown","weights","weight","herfindahlIndex","w","herfindahl_index","effective_number_of_holdings","sectorExposure","forEach","holding","sector","zScores","result","mockData","prices","Array","from","_","i","random","dates","now","portfolioReturn","symbolData","metrics","getMonitoringStatus","userConfig","get","calculateRiskAttribution","attributionType","attribution_type","contributions","scenario_name","scenario_type","worst_holding","best_holding","module","exports"],"sources":["riskEngine.js"],"sourcesContent":["const { query } = require('./database');\nconst EventEmitter = require('events');\n\nclass RiskEngine extends EventEmitter {\n  constructor() {\n    super();\n    this.monitoringUsers = new Map();\n    this.monitoringInterval = null;\n    this.isMonitoring = false;\n    this.checkInterval = 300000; // 5 minutes default\n  }\n\n  async calculatePortfolioRisk(portfolioId, timeframe = '1Y', confidenceLevel = 0.95) {\n    try {\n      // Get portfolio holdings\n      const holdingsResult = await query(`\n        SELECT \n          ph.symbol,\n          ph.quantity,\n          ph.average_cost,\n          ph.current_price,\n          ph.market_value,\n          ph.weight,\n          sse.sector,\n          sse.industry\n        FROM portfolio_holdings ph\n        JOIN stock_symbols_enhanced sse ON ph.symbol = sse.symbol\n        WHERE ph.portfolio_id = $1\n      `, [portfolioId]);\n\n      const holdings = holdingsResult.rows;\n      if (holdings.length === 0) {\n        return {\n          portfolio_id: portfolioId,\n          error: 'No holdings found in portfolio'\n        };\n      }\n\n      // Get historical price data for all symbols\n      const symbols = holdings.map(h => h.symbol);\n      const priceData = await this.getHistoricalPrices(symbols, timeframe);\n\n      // Calculate portfolio returns\n      const portfolioReturns = this.calculatePortfolioReturns(holdings, priceData);\n\n      // Calculate risk metrics\n      const riskMetrics = {\n        portfolio_id: portfolioId,\n        timeframe: timeframe,\n        confidence_level: confidenceLevel,\n        \n        // Basic risk metrics\n        volatility: this.calculateVolatility(portfolioReturns),\n        var_95: this.calculateVaR(portfolioReturns, 0.95),\n        var_99: this.calculateVaR(portfolioReturns, 0.99),\n        expected_shortfall: this.calculateExpectedShortfall(portfolioReturns, confidenceLevel),\n        \n        // Performance metrics\n        sharpe_ratio: this.calculateSharpeRatio(portfolioReturns),\n        max_drawdown: this.calculateMaxDrawdown(portfolioReturns),\n        \n        // Portfolio composition metrics\n        concentration_risk: this.calculateConcentrationRisk(holdings),\n        sector_exposure: this.calculateSectorExposure(holdings),\n        \n        // Correlation and diversification\n        correlation_matrix: await this.calculateCorrelationMatrix(portfolioId),\n        diversification_ratio: this.calculateDiversificationRatio(holdings, priceData),\n        \n        // Market risk metrics\n        beta: await this.calculatePortfolioBeta(portfolioId, symbols),\n        tracking_error: await this.calculateTrackingError(portfolioId, symbols),\n        \n        calculated_at: new Date().toISOString()\n      };\n\n      // Store risk metrics\n      await this.storeRiskMetrics(portfolioId, riskMetrics);\n\n      return riskMetrics;\n    } catch (error) {\n      console.error('Error calculating portfolio risk:', error);\n      throw error;\n    }\n  }\n\n  async calculateVaR(portfolioId, method = 'historical', confidenceLevel = 0.95, timeHorizon = 1, lookbackDays = 252) {\n    try {\n      const holdings = await this.getPortfolioHoldings(portfolioId);\n      const symbols = holdings.map(h => h.symbol);\n      const priceData = await this.getHistoricalPrices(symbols, `${lookbackDays}D`);\n      \n      const portfolioReturns = this.calculatePortfolioReturns(holdings, priceData);\n      \n      let var_value;\n      \n      switch (method) {\n        case 'historical':\n          var_value = this.calculateHistoricalVaR(portfolioReturns, confidenceLevel);\n          break;\n        case 'parametric':\n          var_value = this.calculateParametricVaR(portfolioReturns, confidenceLevel, timeHorizon);\n          break;\n        case 'monte_carlo':\n          var_value = await this.calculateMonteCarloVaR(portfolioReturns, confidenceLevel, timeHorizon);\n          break;\n        default:\n          var_value = this.calculateHistoricalVaR(portfolioReturns, confidenceLevel);\n      }\n      \n      return {\n        portfolio_id: portfolioId,\n        method: method,\n        confidence_level: confidenceLevel,\n        time_horizon: timeHorizon,\n        var_value: var_value,\n        expected_shortfall: this.calculateExpectedShortfall(portfolioReturns, confidenceLevel),\n        lookback_days: lookbackDays,\n        calculated_at: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error calculating VaR:', error);\n      throw error;\n    }\n  }\n\n  async performStressTest(portfolioId, scenarios, shockMagnitude = 0.1, correlationAdjustment = false) {\n    try {\n      const holdings = await this.getPortfolioHoldings(portfolioId);\n      const symbols = holdings.map(h => h.symbol);\n      \n      const stressTestResults = {\n        portfolio_id: portfolioId,\n        shock_magnitude: shockMagnitude,\n        correlation_adjustment: correlationAdjustment,\n        scenarios: [],\n        summary: null\n      };\n\n      // Default scenarios if none provided\n      if (scenarios.length === 0) {\n        scenarios = [\n          { name: 'Market Crash', type: 'market_shock', magnitude: -0.2 },\n          { name: 'Interest Rate Shock', type: 'rate_shock', magnitude: 0.02 },\n          { name: 'Sector Rotation', type: 'sector_shock', magnitude: -0.15 },\n          { name: 'Volatility Spike', type: 'volatility_shock', magnitude: 0.5 },\n          { name: 'Credit Spread Widening', type: 'credit_shock', magnitude: 0.01 }\n        ];\n      }\n\n      // Run each scenario\n      for (const scenario of scenarios) {\n        const scenarioResult = await this.runStressScenario(\n          portfolioId,\n          holdings,\n          scenario,\n          correlationAdjustment\n        );\n        stressTestResults.scenarios.push(scenarioResult);\n      }\n\n      // Calculate summary statistics\n      const pnlValues = stressTestResults.scenarios.map(s => s.portfolio_pnl);\n      stressTestResults.summary = {\n        worst_case_pnl: Math.min(...pnlValues),\n        best_case_pnl: Math.max(...pnlValues),\n        average_pnl: pnlValues.reduce((a, b) => a + b, 0) / pnlValues.length,\n        scenarios_count: scenarios.length,\n        fail_threshold: -0.05, // 5% loss threshold\n        scenarios_exceeding_threshold: pnlValues.filter(pnl => pnl < -0.05).length\n      };\n\n      return stressTestResults;\n    } catch (error) {\n      console.error('Error performing stress test:', error);\n      throw error;\n    }\n  }\n\n  async startRealTimeMonitoring(userId, portfolioIds = [], checkInterval = 300000) {\n    try {\n      // Get user's portfolios if none specified\n      if (portfolioIds.length === 0) {\n        const portfoliosResult = await query(`\n          SELECT id FROM portfolios WHERE user_id = $1\n        `, [userId]);\n        portfolioIds = portfoliosResult.rows.map(row => row.id);\n      }\n\n      // Get risk limits for monitoring\n      const limitsResult = await query(`\n        SELECT \n          rl.portfolio_id,\n          rl.metric_name,\n          rl.threshold_value,\n          rl.warning_threshold,\n          rl.threshold_type\n        FROM risk_limits rl\n        WHERE rl.portfolio_id = ANY($1) AND rl.is_active = true\n      `, [portfolioIds]);\n\n      // Store monitoring configuration\n      this.monitoringUsers.set(userId, {\n        portfolios: portfolioIds,\n        limits: limitsResult.rows,\n        last_check: new Date(),\n        check_interval: checkInterval\n      });\n\n      // Start monitoring if not already running\n      if (!this.isMonitoring) {\n        this.startMonitoringLoop();\n      }\n\n      return {\n        user_id: userId,\n        portfolios_monitored: portfolioIds.length,\n        limits_configured: limitsResult.rows.length,\n        check_interval: checkInterval,\n        status: 'active'\n      };\n    } catch (error) {\n      console.error('Error starting real-time monitoring:', error);\n      throw error;\n    }\n  }\n\n  async stopRealTimeMonitoring(userId) {\n    try {\n      const wasMonitoring = this.monitoringUsers.has(userId);\n      this.monitoringUsers.delete(userId);\n\n      // Stop monitoring loop if no users left\n      if (this.monitoringUsers.size === 0 && this.isMonitoring) {\n        this.stopMonitoringLoop();\n      }\n\n      return {\n        user_id: userId,\n        was_monitoring: wasMonitoring,\n        status: 'stopped'\n      };\n    } catch (error) {\n      console.error('Error stopping real-time monitoring:', error);\n      throw error;\n    }\n  }\n\n  startMonitoringLoop() {\n    if (this.isMonitoring) return;\n\n    this.isMonitoring = true;\n    console.log('Starting real-time risk monitoring...');\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.performMonitoringCheck();\n      } catch (error) {\n        console.error('Error in monitoring check:', error);\n      }\n    }, this.checkInterval);\n\n    this.emit('monitoring_started');\n  }\n\n  stopMonitoringLoop() {\n    if (!this.isMonitoring) return;\n\n    this.isMonitoring = false;\n    \n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    console.log('Stopped real-time risk monitoring');\n    this.emit('monitoring_stopped');\n  }\n\n  async performMonitoringCheck() {\n    for (const [userId, config] of this.monitoringUsers) {\n      try {\n        await this.checkUserPortfolios(userId, config);\n      } catch (error) {\n        console.error(`Error checking portfolios for user ${userId}:`, error);\n      }\n    }\n  }\n\n  async checkUserPortfolios(userId, config) {\n    for (const portfolioId of config.portfolios) {\n      try {\n        // Calculate current risk metrics\n        const riskMetrics = await this.calculatePortfolioRisk(portfolioId);\n\n        // Check against limits\n        const portfolioLimits = config.limits.filter(l => l.portfolio_id === portfolioId);\n        \n        for (const limit of portfolioLimits) {\n          const currentValue = riskMetrics[limit.metric_name];\n          if (currentValue !== undefined) {\n            await this.checkRiskLimit(userId, portfolioId, limit, currentValue);\n          }\n        }\n      } catch (error) {\n        console.error(`Error checking portfolio ${portfolioId}:`, error);\n      }\n    }\n  }\n\n  async checkRiskLimit(userId, portfolioId, limit, currentValue) {\n    try {\n      const isBreached = this.isLimitBreached(limit, currentValue);\n      const isWarning = this.isWarningThreshold(limit, currentValue);\n\n      if (isBreached || isWarning) {\n        // Check if alert already exists\n        const existingAlertResult = await query(`\n          SELECT id FROM risk_alerts\n          WHERE user_id = $1 AND portfolio_id = $2 AND metric_name = $3 AND status = 'active'\n        `, [userId, portfolioId, limit.metric_name]);\n\n        if (existingAlertResult.rows.length === 0) {\n          // Create new alert\n          await this.createRiskAlert(userId, portfolioId, limit, currentValue, isBreached);\n        } else {\n          // Update existing alert\n          await query(`\n            UPDATE risk_alerts\n            SET current_value = $1, updated_at = CURRENT_TIMESTAMP\n            WHERE id = $2\n          `, [currentValue, existingAlertResult.rows[0].id]);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking risk limit:', error);\n    }\n  }\n\n  async createRiskAlert(userId, portfolioId, limit, currentValue, isBreached) {\n    try {\n      const severity = isBreached ? 'high' : 'medium';\n      const alertType = isBreached ? 'limit_breach' : 'warning_threshold';\n      \n      const title = `${limit.metric_name} ${isBreached ? 'Limit Breached' : 'Warning Threshold Exceeded'}`;\n      const description = `Portfolio ${portfolioId}: ${limit.metric_name} is ${currentValue.toFixed(4)}, ${isBreached ? 'exceeding limit' : 'approaching limit'} of ${limit.threshold_value}`;\n\n      await query(`\n        INSERT INTO risk_alerts (\n          user_id, portfolio_id, alert_type, severity, title, description,\n          metric_name, current_value, threshold_value, status, created_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'active', CURRENT_TIMESTAMP)\n      `, [\n        userId, portfolioId, alertType, severity, title, description,\n        limit.metric_name, currentValue, limit.threshold_value\n      ]);\n\n      // Emit alert event\n      this.emit('risk_alert', {\n        userId,\n        portfolioId,\n        alertType,\n        severity,\n        title,\n        description,\n        metricName: limit.metric_name,\n        currentValue,\n        thresholdValue: limit.threshold_value\n      });\n    } catch (error) {\n      console.error('Error creating risk alert:', error);\n    }\n  }\n\n  isLimitBreached(limit, currentValue) {\n    switch (limit.threshold_type) {\n      case 'greater_than':\n        return currentValue > limit.threshold_value;\n      case 'less_than':\n        return currentValue < limit.threshold_value;\n      case 'absolute':\n        return Math.abs(currentValue) > limit.threshold_value;\n      default:\n        return currentValue > limit.threshold_value;\n    }\n  }\n\n  isWarningThreshold(limit, currentValue) {\n    if (!limit.warning_threshold) return false;\n    \n    switch (limit.threshold_type) {\n      case 'greater_than':\n        return currentValue > limit.warning_threshold;\n      case 'less_than':\n        return currentValue < limit.warning_threshold;\n      case 'absolute':\n        return Math.abs(currentValue) > limit.warning_threshold;\n      default:\n        return currentValue > limit.warning_threshold;\n    }\n  }\n\n  // Helper methods for risk calculations\n  calculateVolatility(returns) {\n    const mean = returns.reduce((a, b) => a + b, 0) / returns.length;\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / (returns.length - 1);\n    return Math.sqrt(variance * 252); // Annualized volatility\n  }\n\n  calculateHistoricalVaR(returns, confidenceLevel) {\n    const sortedReturns = returns.slice().sort((a, b) => a - b);\n    const index = Math.floor((1 - confidenceLevel) * sortedReturns.length);\n    return sortedReturns[index];\n  }\n\n  calculateParametricVaR(returns, confidenceLevel, timeHorizon) {\n    const mean = returns.reduce((a, b) => a + b, 0) / returns.length;\n    const volatility = this.calculateVolatility(returns);\n    const zScore = this.getZScore(confidenceLevel);\n    \n    return mean - (zScore * volatility * Math.sqrt(timeHorizon / 252));\n  }\n\n  calculateExpectedShortfall(returns, confidenceLevel) {\n    const var_value = this.calculateHistoricalVaR(returns, confidenceLevel);\n    const tailReturns = returns.filter(r => r <= var_value);\n    return tailReturns.reduce((a, b) => a + b, 0) / tailReturns.length;\n  }\n\n  calculateSharpeRatio(returns, riskFreeRate = 0.02) {\n    const excessReturns = returns.map(r => r - riskFreeRate / 252);\n    const meanExcess = excessReturns.reduce((a, b) => a + b, 0) / excessReturns.length;\n    const volatility = this.calculateVolatility(excessReturns);\n    return (meanExcess * 252) / volatility;\n  }\n\n  calculateMaxDrawdown(returns) {\n    let maxDrawdown = 0;\n    let peak = 0;\n    let cumulativeReturn = 0;\n    \n    for (const return_val of returns) {\n      cumulativeReturn += return_val;\n      peak = Math.max(peak, cumulativeReturn);\n      const drawdown = (peak - cumulativeReturn) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n    \n    return maxDrawdown;\n  }\n\n  calculateConcentrationRisk(holdings) {\n    const weights = holdings.map(h => h.weight);\n    const herfindahlIndex = weights.reduce((sum, w) => sum + w * w, 0);\n    return {\n      herfindahl_index: herfindahlIndex,\n      effective_number_of_holdings: 1 / herfindahlIndex,\n      concentration_risk: herfindahlIndex > 0.25 ? 'high' : herfindahlIndex > 0.15 ? 'medium' : 'low'\n    };\n  }\n\n  calculateSectorExposure(holdings) {\n    const sectorExposure = {};\n    \n    holdings.forEach(holding => {\n      const sector = holding.sector || 'Unknown';\n      sectorExposure[sector] = (sectorExposure[sector] || 0) + holding.weight;\n    });\n    \n    return sectorExposure;\n  }\n\n  getZScore(confidenceLevel) {\n    // Approximate z-scores for common confidence levels\n    const zScores = {\n      0.90: 1.282,\n      0.95: 1.645,\n      0.99: 2.326,\n      0.999: 3.090\n    };\n    \n    return zScores[confidenceLevel] || 1.645;\n  }\n\n  async getPortfolioHoldings(portfolioId) {\n    const result = await query(`\n      SELECT \n        symbol,\n        quantity,\n        average_cost,\n        current_price,\n        market_value,\n        weight\n      FROM portfolio_holdings\n      WHERE portfolio_id = $1\n    `, [portfolioId]);\n    \n    return result.rows;\n  }\n\n  async getHistoricalPrices(symbols, timeframe) {\n    // This would fetch historical price data\n    // For now, return mock data structure\n    const mockData = {};\n    \n    symbols.forEach(symbol => {\n      mockData[symbol] = {\n        prices: Array.from({ length: 252 }, (_, i) => 100 + Math.random() * 20 - 10),\n        dates: Array.from({ length: 252 }, (_, i) => new Date(Date.now() - i * 24 * 60 * 60 * 1000))\n      };\n    });\n    \n    return mockData;\n  }\n\n  calculatePortfolioReturns(holdings, priceData) {\n    // Calculate portfolio returns based on holdings and price data\n    const portfolioReturns = [];\n    \n    // This is a simplified calculation - in reality you'd need to properly weight returns\n    for (let i = 1; i < 252; i++) {\n      let portfolioReturn = 0;\n      \n      holdings.forEach(holding => {\n        const symbolData = priceData[holding.symbol];\n        if (symbolData && symbolData.prices[i] && symbolData.prices[i-1]) {\n          const return_val = (symbolData.prices[i] - symbolData.prices[i-1]) / symbolData.prices[i-1];\n          portfolioReturn += return_val * holding.weight;\n        }\n      });\n      \n      portfolioReturns.push(portfolioReturn);\n    }\n    \n    return portfolioReturns;\n  }\n\n  async storeRiskMetrics(portfolioId, metrics) {\n    try {\n      await query(`\n        INSERT INTO portfolio_risk_metrics (\n          portfolio_id, volatility, var_95, var_99, expected_shortfall,\n          sharpe_ratio, max_drawdown, beta, calculated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, CURRENT_TIMESTAMP)\n        ON CONFLICT (portfolio_id) DO UPDATE SET\n          volatility = EXCLUDED.volatility,\n          var_95 = EXCLUDED.var_95,\n          var_99 = EXCLUDED.var_99,\n          expected_shortfall = EXCLUDED.expected_shortfall,\n          sharpe_ratio = EXCLUDED.sharpe_ratio,\n          max_drawdown = EXCLUDED.max_drawdown,\n          beta = EXCLUDED.beta,\n          calculated_at = EXCLUDED.calculated_at\n      `, [\n        portfolioId,\n        metrics.volatility,\n        metrics.var_95,\n        metrics.var_99,\n        metrics.expected_shortfall,\n        metrics.sharpe_ratio,\n        metrics.max_drawdown,\n        metrics.beta\n      ]);\n    } catch (error) {\n      console.error('Error storing risk metrics:', error);\n    }\n  }\n\n  async getMonitoringStatus(userId) {\n    const userConfig = this.monitoringUsers.get(userId);\n    \n    if (!userConfig) {\n      return {\n        user_id: userId,\n        status: 'not_monitoring',\n        portfolios_monitored: 0\n      };\n    }\n\n    return {\n      user_id: userId,\n      status: 'monitoring',\n      portfolios_monitored: userConfig.portfolios.length,\n      limits_configured: userConfig.limits.length,\n      last_check: userConfig.last_check,\n      check_interval: userConfig.check_interval\n    };\n  }\n\n  // Additional helper methods would be implemented here...\n  async calculateCorrelationMatrix(portfolioId) {\n    // Placeholder for correlation matrix calculation\n    return {};\n  }\n\n  calculateDiversificationRatio(holdings, priceData) {\n    // Placeholder for diversification ratio calculation\n    return 0.5;\n  }\n\n  async calculatePortfolioBeta(portfolioId, symbols) {\n    // Placeholder for portfolio beta calculation\n    return 1.0;\n  }\n\n  async calculateTrackingError(portfolioId, symbols) {\n    // Placeholder for tracking error calculation\n    return 0.02;\n  }\n\n  async calculateRiskAttribution(portfolioId, attributionType) {\n    // Placeholder for risk attribution calculation\n    return {\n      attribution_type: attributionType,\n      contributions: {}\n    };\n  }\n\n  async runStressScenario(portfolioId, holdings, scenario, correlationAdjustment) {\n    // Placeholder for stress scenario calculation\n    return {\n      scenario_name: scenario.name,\n      scenario_type: scenario.type,\n      portfolio_pnl: Math.random() * 0.2 - 0.1, // Random P&L for demo\n      worst_holding: holdings[0]?.symbol || 'N/A',\n      best_holding: holdings[1]?.symbol || 'N/A'\n    };\n  }\n\n  async calculateMonteCarloVaR(returns, confidenceLevel, timeHorizon) {\n    // Placeholder for Monte Carlo VaR calculation\n    return this.calculateHistoricalVaR(returns, confidenceLevel);\n  }\n}\n\nmodule.exports = RiskEngine;"],"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","ignoreList":[]}