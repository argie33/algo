/**
 * News Routes Unit Tests
 * Tests news route logic with real database (NO MOCKS)
 */

const request = require('supertest');
const { initializeDatabase, closeDatabase } = require('../../../utils/database');

let app;

// Mock authentication middleware to pass through
jest.mock('../../../middleware/auth', () => ({
  authenticateToken: jest.fn((req, res, next) => {
    req.user = { sub: 'test-user-123', email: 'test@example.com', username: 'testuser' };
    next();
  }),
  requireRole: jest.fn(() => (req, res, next) => {
    next();
  })
}));

describe('News Routes Unit Tests', () => {
  beforeAll(async () => {
    await initializeDatabase();
    app = require('../../../server');
  });

  afterAll(async () => {
    await closeDatabase();
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('GET /news/health', () => {
    test('should return health status without authentication', async () => {
      const response = await request(app)
        .get('/news/health');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('status', 'operational');
      expect(response.body).toHaveProperty('service', 'news');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('message', 'News service is running');
      
      // Verify timestamp is a valid ISO string
      expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);
      expect(mockQuery).not.toHaveBeenCalled(); // Health doesn't use database
    });
  });

  describe('GET /news', () => {
    test('should return news API information without authentication', async () => {
      const response = await request(app)
        .get('/news');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('message', 'News API - Ready');
      expect(response.body).toHaveProperty('status', 'operational');
      expect(response.body).toHaveProperty('timestamp');
      
      // Verify timestamp is a valid ISO string
      expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);
      expect(mockQuery).not.toHaveBeenCalled(); // Root endpoint doesn't use database
    });
  });

  describe('GET /news/recent (public)', () => {
    test('should return recent news with default parameters', async () => {
      const mockNewsData = {
        rows: [
          {
            title: 'Apple Reports Strong Q1 Earnings',
            summary: 'Apple Inc. reported better than expected quarterly earnings...',
            url: 'https://example.com/news/apple-earnings',
            source: 'Financial Times',
            category: 'earnings',
            published_at: '2023-01-15T14:30:00Z',
            sentiment: 0.8,
            symbols: ['AAPL']
          },
          {
            title: 'Tech Sector Rally Continues',
            summary: 'Technology stocks continue to outperform...',
            url: 'https://example.com/news/tech-rally',
            source: 'Reuters',
            category: 'market',
            published_at: '2023-01-15T12:15:00Z',
            sentiment: 0.6,
            symbols: ['AAPL', 'GOOGL', 'MSFT']
          }
        ]
      };

      mockQuery.mockResolvedValueOnce(mockNewsData);

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(Array.isArray(response.body.data)).toBe(true);
      expect(response.body.data).toHaveLength(2);
      expect(response.body.data[0]).toHaveProperty('title', 'Apple Reports Strong Q1 Earnings');
      expect(response.body.data[0]).toHaveProperty('sentiment', 0.8);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('news_articles'),
        [20] // default limit
      );
    });

    test('should handle custom limit parameter', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ limit: 50 });

      expect(response.status).toBe(200);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('LIMIT $1'),
        [50]
      );
    });

    test('should handle custom hours parameter', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ hours: 48 });

      expect(response.status).toBe(200);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining("INTERVAL '48 hours'"),
        [20] // default limit
      );
    });

    test('should handle category filter', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ category: 'earnings' });

      expect(response.status).toBe(200);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('category = $2'),
        [20, 'earnings']
      );
    });

    test('should combine multiple parameters', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ 
          limit: 10, 
          hours: 12, 
          category: 'market' 
        });

      expect(response.status).toBe(200);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining("INTERVAL '12 hours'"),
        [10, 'market']
      );
    });

    test('should handle empty news result', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data', []);
    });

    test('should handle database query errors', async () => {
      const dbError = new Error('Database connection failed');
      mockQuery.mockRejectedValueOnce(dbError);

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(500);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toBeDefined();
    });

    test('should validate numeric parameters', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ 
          limit: 'not_a_number',
          hours: 'also_not_a_number'
        });

      expect(response.status).toBe(200);
      // Should handle invalid numbers gracefully (parseInt should handle)
    });

    test('should prevent SQL injection in hours parameter', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent')
        .query({ hours: "24; DROP TABLE news_articles; --" });

      expect(response.status).toBe(200);
      // parseInt should prevent SQL injection by converting to number
      expect(mockQuery).toHaveBeenCalledWith(
        expect.any(String),
        expect.arrayContaining([expect.any(Number)])
      );
    });
  });

  describe('GET /news/symbols/:symbol (authenticated)', () => {
    test('should return symbol-specific news', async () => {
      const mockSymbolNews = {
        rows: [
          {
            title: 'Apple Announces New Product Line',
            summary: 'Apple unveiled its latest innovations...',
            url: 'https://example.com/apple-news',
            source: 'TechCrunch',
            category: 'product',
            published_at: '2023-01-15T16:00:00Z',
            sentiment: 0.9,
            relevance_score: 0.95
          }
        ]
      };

      mockQuery.mockResolvedValueOnce(mockSymbolNews);

      const response = await request(app)
        .get('/news/symbols/AAPL');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('symbol', 'AAPL');
      expect(response.body.data).toHaveProperty('articles');
      expect(Array.isArray(response.body.data.articles)).toBe(true);
      expect(mockQuery).toHaveBeenCalledWith(
        expect.stringContaining('symbols'),
        expect.arrayContaining(['AAPL'])
      );
    });

    test('should handle lowercase symbol conversion', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      await request(app)
        .get('/news/symbols/aapl');

      expect(mockQuery).toHaveBeenCalledWith(
        expect.any(String),
        expect.arrayContaining(['AAPL']) // Should be converted to uppercase
      );
    });

    test('should handle symbol with no news', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/symbols/UNKNOWN');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body.data).toHaveProperty('articles', []);
    });
  });

  describe('GET /news/sentiment (authenticated)', () => {
    test('should return market sentiment analysis', async () => {
      const mockSentimentData = {
        rows: [
          {
            date: '2023-01-15',
            overall_sentiment: 0.65,
            positive_articles: 45,
            negative_articles: 20,
            neutral_articles: 35,
            sector_sentiment: {
              'Technology': 0.72,
              'Healthcare': 0.58,
              'Financial': 0.61
            }
          }
        ]
      };

      mockQuery.mockResolvedValueOnce(mockSentimentData);

      const sentimentEngine = require('../../../utils/sentimentEngine');
      sentimentEngine.calculateSentimentScore.mockReturnValue(0.65);

      const response = await request(app)
        .get('/news/sentiment');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('overall_sentiment');
      expect(sentimentEngine.calculateSentimentScore).toHaveBeenCalled();
    });

    test('should handle timeframe parameter', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/sentiment')
        .query({ timeframe: '7d' });

      expect(response.status).toBe(200);
      // Should include timeframe in query logic
    });
  });

  describe('POST /news/analyze (authenticated)', () => {
    test('should analyze news impact', async () => {
      const newsAnalyzer = require('../../../utils/newsAnalyzer');
      const sentimentEngine = require('../../../utils/sentimentEngine');

      newsAnalyzer.analyzeNewsImpact.mockReturnValue({
        impact_score: 0.75,
        affected_symbols: ['AAPL'],
        category: 'earnings'
      });

      sentimentEngine.analyzeSentiment.mockReturnValue({
        sentiment: 0.8,
        confidence: 0.9
      });

      const newsData = {
        title: 'Apple Reports Record Earnings',
        content: 'Apple Inc. announced record quarterly earnings...',
        url: 'https://example.com/apple-earnings'
      };

      const response = await request(app)
        .post('/news/analyze')
        .send(newsData);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('analysis');
      expect(response.body.analysis).toHaveProperty('impact_score', 0.75);
      expect(response.body.analysis).toHaveProperty('sentiment', 0.8);
      expect(newsAnalyzer.analyzeNewsImpact).toHaveBeenCalledWith(newsData);
      expect(sentimentEngine.analyzeSentiment).toHaveBeenCalledWith(newsData.content);
    });

    test('should validate required fields', async () => {
      const response = await request(app)
        .post('/news/analyze')
        .send({
          title: 'Test Article'
          // Missing content and url
        });

      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toContain('Missing required fields');
    });

    test('should handle analysis errors', async () => {
      const newsAnalyzer = require('../../../utils/newsAnalyzer');
      newsAnalyzer.analyzeNewsImpact.mockImplementation(() => {
        throw new Error('Analysis failed');
      });

      const newsData = {
        title: 'Test Article',
        content: 'Test content',
        url: 'https://example.com'
      };

      const response = await request(app)
        .post('/news/analyze')
        .send(newsData);

      expect(response.status).toBe(500);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toContain('Analysis failed');
    });
  });

  describe('Authentication', () => {
    test('should allow public access to recent news', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(200);
      // Should work without authentication
    });

    test('should require authentication for symbol-specific news', () => {
      const { authenticateToken } = require('../../../middleware/auth');
      expect(authenticateToken).toBeDefined();
      
      // Authentication is tested through successful requests in other tests
    });
  });

  describe('Error handling', () => {
    test('should handle database connection errors gracefully', async () => {
      const dbError = new Error('Connection timeout');
      mockQuery.mockRejectedValueOnce(dbError);

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(500);
      expect(response.body).toHaveProperty('success', false);
      expect(response.body.error).toBeDefined();
    });

    test('should handle malformed database results', async () => {
      mockQuery.mockResolvedValueOnce(null); // Malformed result

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(500);
      expect(response.body).toHaveProperty('success', false);
    });
  });

  describe('Response format', () => {
    test('should return consistent JSON response format', async () => {
      const response = await request(app)
        .get('/news/health');

      expect(response.headers['content-type']).toMatch(/json/);
      expect(typeof response.body).toBe('object');
    });

    test('should include metadata in news responses', async () => {
      mockQuery.mockResolvedValueOnce({ rows: [] });

      const response = await request(app)
        .get('/news/recent');

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty('success');
      expect(response.body).toHaveProperty('data');
    });
  });
});