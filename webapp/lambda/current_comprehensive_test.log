
> financial-dashboard-lambda@1.0.0 test
> jest --coverage --coverageReporters=text --coverageReporters=html --coverageReporters=lcov

üîß Global Setup: Creating tables from setup_test_database_minimal.sql...
Using database config from environment variables
Database config loaded from environment: localhost:5432/stocks
‚úÖ Database connection pool initialized successfully
‚úÖ Real database schema loaded successfully - no mocks or demo data
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/active?priority=high&category=price&limit=25 HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/active?include_resolved=true HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts HTTP/1.1" 200 682 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts?status=resolved&limit=50 HTTP/1.1" 200 216 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_123/acknowledge HTTP/1.1" 200 288 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_456/acknowledge HTTP/1.1" 200 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_789/acknowledge HTTP/1.1" 200 288 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_snooze/snooze HTTP/1.1" 200 277 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_custom_snooze/snooze HTTP/1.1" 200 293 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/test_alert_time_validate/snooze HTTP/1.1" 200 291 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts HTTP/1.1" 201 385 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts HTTP/1.1" 201 379 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary HTTP/1.1" 200 1348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=1h HTTP/1.1" 200 1347 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=6h HTTP/1.1" 200 1347 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=24h HTTP/1.1" 200 1348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=7d HTTP/1.1" 200 1347 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=30d HTTP/1.1" 200 1354 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?timeframe=invalid HTTP/1.1" 400 115 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?include_trends=true HTTP/1.1" 200 1348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary?include_stats=true HTTP/1.1" 200 1348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary HTTP/1.1" 200 1348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/settings HTTP/1.1" 200 4706 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/settings HTTP/1.1" 200 4706 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/settings HTTP/1.1" 200 4706 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/settings HTTP/1.1" 200 4706 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/history HTTP/1.1" 200 772 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/history?limit=50&status=resolved&category=price HTTP/1.1" 200 230 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/rules HTTP/1.1" 200 508 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/rules HTTP/1.1" 200 508 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/webhooks HTTP/1.1" 200 749 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/webhooks?status=active&webhook_type=slack&limit=10 HTTP/1.1" 200 377 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts/create HTTP/1.1" 201 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts/create HTTP/1.1" 201 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts/create HTTP/1.1" 400 114 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "POST /api/alerts/create HTTP/1.1" 400 99 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "DELETE /api/alerts/delete/alert_to_delete_123 HTTP/1.1" 200 435 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "DELETE /api/alerts/delete/alert_default_reason HTTP/1.1" 200 435 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "DELETE /api/alerts/delete/ HTTP/1.1" 500 112 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/price HTTP/1.1" 200 222 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/price?symbol=AAPL HTTP/1.1" 200 222 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/price?threshold_min=100&threshold_max=200 HTTP/1.1" 200 222 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/price?alert_type=stop_loss&status=active HTTP/1.1" 200 222 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/update/alert_to_update_123 HTTP/1.1" 200 530 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/update/alert_defaults_123 HTTP/1.1" 200 485 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "PUT /api/alerts/update/ HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/settings HTTP/1.1" 200 4706 "-" "-"
FAIL tests/integration/routes/alerts.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã All alerts requested for user: dev-user-bypass, status: all

      at log (routes/alerts.js:325:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã All alerts requested for user: dev-user-bypass, status: resolved

      at log (routes/alerts.js:325:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Alert test_alert_123 acknowledge requested by user: dev-user-bypass

      at log (routes/alerts.js:425:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Alert test_alert_456 dismiss requested by user: dev-user-bypass

      at log (routes/alerts.js:425:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Alert test_alert_789 acknowledge requested by user: dev-user-bypass

      at log (routes/alerts.js:425:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üò¥ Alert test_alert_snooze snooze requested by user: dev-user-bypass for 60 minutes

      at log (routes/alerts.js:457:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üò¥ Alert test_alert_custom_snooze snooze requested by user: dev-user-bypass for 120 minutes

      at log (routes/alerts.js:457:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üò¥ Alert test_alert_time_validate snooze requested by user: dev-user-bypass for 30 minutes

      at log (routes/alerts.js:457:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üÜï New alert creation requested by user: dev-user-bypass for AAPL

      at log (routes/alerts.js:500:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üÜï New alert creation requested by user: dev-user-bypass for TSLA

      at log (routes/alerts.js:500:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 1h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 6h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 7d

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 30d

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: invalid

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Alert history requested for user: dev-user-bypass

      at log (routes/alerts.js:1287:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Alert history requested for user: dev-user-bypass

      at log (routes/alerts.js:1287:13)

    console.log
      üìã Alert rules requested for user: dev-user-bypass

      at log (routes/alerts.js:1405:13)

    console.log
      üìã Alert rules requested for user: dev-user-bypass

      at log (routes/alerts.js:1405:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîó Alert webhooks requested for user: dev-user-bypass, status: all, type: all

      at log (routes/alerts.js:1460:13)

    console.log
      üîó Fetching webhook configurations for user: dev-user-bypass

      at log (routes/alerts.js:1468:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîó Alert webhooks requested for user: dev-user-bypass, status: active, type: slack

      at log (routes/alerts.js:1460:13)

    console.log
      üîó Fetching webhook configurations for user: dev-user-bypass

      at log (routes/alerts.js:1468:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üö® Creating new alert for user: dev-user-bypass, symbol: NVDA

      at log (routes/alerts.js:1793:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üö® Creating new alert for user: dev-user-bypass, symbol: msft

      at log (routes/alerts.js:1793:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üö® Creating new alert for user: dev-user-bypass, symbol: AAPL

      at log (routes/alerts.js:1793:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üö® Creating new alert for user: dev-user-bypass, symbol: undefined

      at log (routes/alerts.js:1793:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üóëÔ∏è Deleting alert alert_to_delete_123 for user: dev-user-bypass

      at log (routes/alerts.js:1853:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üóëÔ∏è Deleting alert alert_default_reason for user: dev-user-bypass

      at log (routes/alerts.js:1853:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üóëÔ∏è Deleting alert delete for user: dev-user-bypass

      at log (routes/alerts.js:2380:13)

    console.error
      Database query error: {
        error: 'invalid input syntax for type integer: "delete"',
        query: 'DELETE FROM price_alerts \n' +
          '       WHERE id = $1 AND user_id = $2\n' +
          '       RETURNING *',
        params: '2 parameters',
        code: '22P02'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/alerts.js:2383:20

    console.error
      Delete alert error: error: invalid input syntax for type integer: "delete"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/alerts.js:2383:20 {
        length: 149,
        severity: 'ERROR',
        code: '22P02',
        detail: undefined,
        hint: undefined,
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: "unnamed portal parameter $1 = '...'",
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'numutils.c',
        line: '617',
        routine: 'pg_strtoint32_safe'
      }

      2404 |     });
      2405 |   } catch (error) {
    > 2406 |     console.error("Delete alert error:", error);
           |             ^
      2407 |     res.status(500).json({
      2408 |       success: false,
      2409 |       error: "Failed to delete alert",

      at error (routes/alerts.js:2406:13)

    console.log
      üí∞ Price alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:1908:13)

    console.log
      üí∞ Price alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:1908:13)

    console.log
      üí∞ Price alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:1908:13)

    console.log
      üí∞ Price alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:1908:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úèÔ∏è Updating alert alert_to_update_123 for user: dev-user-bypass

      at log (routes/alerts.js:2275:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úèÔ∏è Updating alert alert_defaults_123 for user: dev-user-bypass

      at log (routes/alerts.js:2275:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      üìã Alert rules requested for user: dev-user-bypass

      at log (routes/alerts.js:1405:13)

    console.log
      üìä Alerts summary requested for user: dev-user-bypass, timeframe: 24h

      at log (routes/alerts.js:544:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/active ‚Ä∫ should handle include_resolved parameter

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      62 |         .set("Authorization", "Bearer dev-bypass-token");
      63 |
    > 64 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
         |                                         ^
      65 |       expect(response.body.success).toBe(false);
      66 |     });
      67 |   });

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:64:41)

  ‚óè Alerts Routes ‚Ä∫ POST /api/alerts ‚Ä∫ should create new alert

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_user_123"
    Received: "dev-user-bypass"

      199 |       expect([200, 201]).toContain(response.status);
      200 |       expect(response.body.success).toBe(true);
    > 201 |       expect(response.body.data.user_id).toBe("test_user_123");
          |                                          ^
      202 |       expect(response.body.data.symbol).toBe("AAPL");
      203 |       expect(response.body.data.category).toBe("price");
      204 |       expect(response.body.data.condition).toBe("above");

      at Object.toBe (tests/integration/routes/alerts.integration.test.js:201:42)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/settings ‚Ä∫ should return comprehensive alert settings

    expect(received).toHaveProperty(path)

    Expected path: "metadata"
    Received path: []

    Received value: {"quick_actions": [{"action": "enable_all_notifications", "description": "Enable all notification channels", "endpoint": "PUT /api/alerts/settings/notifications"}, {"action": "pause_all_alerts", "description": "Temporarily pause all alert delivery", "endpoint": "PUT /api/alerts/settings/pause"}, {"action": "reset_to_defaults", "description": "Reset all settings to recommended defaults", "endpoint": "PUT /api/alerts/settings/reset"}, {"action": "export_settings", "description": "Export current settings as JSON", "endpoint": "GET /api/alerts/settings/export"}], "settings": {"advanced_settings": {"alert_priority_scoring": true, "auto_pause_settings": {"auto_resume": true, "vacation_end": null, "vacation_mode": false, "vacation_start": null}, "batch_alerts": false, "risk_management": {"cool_down_periods": {"high_frequency_symbols": 5, "low_frequency_symbols": 1}, "max_daily_alerts": 50}, "smart_timing": true}, "alert_categories": {"earnings_alerts": {"enabled": true, "post_earnings_enabled": true, "pre_earnings_days": 3, "surprise_threshold": 10}, "market_alerts": {"circuit_breakers": true, "economic_events": true, "enabled": true, "market_open_close": false, "sector_rotation": true, "vix_threshold": 30}, "news_alerts": {"enabled": true, "keywords_blacklist": ["crypto", "bitcoin"], "keywords_whitelist": [], "sentiment_threshold": 0.7, "sources": ["reuters", "bloomberg", "cnbc", "marketwatch"]}, "portfolio_alerts": {"corporate_actions": true, "daily_pnl_threshold": 1000, "dividend_announcements": true, "enabled": true, "margin_alerts": true, "position_change_threshold": 10}, "price_alerts": {"enabled": true, "frequency": "immediate", "include_after_hours": false, "threshold_percentage": 5}, "social_sentiment_alerts": {"enabled": false, "influencer_mentions": true, "mention_threshold": 1000, "platforms": ["twitter", "reddit", "stocktwits"], "sentiment_threshold": 0.8}, "technical_alerts": {"enabled": true, "indicators": {"bollinger_bands": {"enabled": true}, "macd_crossover": {"enabled": true}, "moving_average_cross": {"enabled": true, "periods": [20, 50]}, "rsi_overbought": {"enabled": true, "threshold": 80}, "rsi_oversold": {"enabled": true, "threshold": 20}}, "pattern_alerts": {"breakouts": true, "reversals": true, "support_resistance": true}}, "volume_alerts": {"enabled": true, "frequency": "immediate", "minimum_volume": 1000000, "threshold_multiplier": 2}}, "alert_history": {"duplicate_suppression": true, "max_alerts_per_day": 100, "retention_days": 30, "suppression_window_minutes": 15}, "created_at": "2025-01-15T10:30:00Z", "delivery_settings": {"discord_webhook": null, "email_address": "user@example.com", "phone_number": null, "push_device_tokens": ["device_token_12345"], "quiet_hours": {"days": ["monday", "tuesday", "wednesday", "thursday", "friday"], "enabled": true, "end_time": "07:00", "start_time": "22:00"}, "slack_webhook": null, "time_zone": "America/New_York"}, "integrations": {"third_party_services": {"custom_webhooks": [], "ifttt": {"enabled": false, "webhook_url": null}, "zapier": {"enabled": false, "webhook_url": null}}, "trading_platforms": {"alpaca": {"api_key_set": false, "enabled": false}, "interactive_brokers": {"api_key_set": false, "enabled": false}, "td_ameritrade": {"api_key_set": false, "enabled": false}}}, "last_settings_change": "2025-09-26T01:27:35.874Z", "notification_preferences": {"browser_enabled": false, "discord_enabled": false, "email_enabled": false, "push_enabled": false, "slack_enabled": false, "sms_enabled": false}, "subscription_info": {"alerts_limit_daily": 100, "alerts_used_today": 23, "plan": "premium", "plan_expires": "2025-12-31T23:59:59Z", "premium_features": ["unlimited_alerts", "advanced_indicators", "social_sentiment", "custom_webhooks", "alert_backtesting"]}, "updated_at": "2025-09-26T01:27:35.874Z", "user_id": "dev-user-bypass", "version": "2.1.0", "watchlist_settings": {"default_watchlist_alerts": true, "per_symbol_settings": {"AAPL": {"earnings_priority": "high", "price_threshold": 2.5, "volume_multiplier": 1.5}, "TSLA": {"price_threshold": 7.5, "social_sentiment": true, "volume_multiplier": 3}}}}, "summary": {"alerts_remaining_today": 77, "alerts_used_today": 23, "settings_last_modified": "2025-09-26T01:27:35.874Z", "subscription_plan": "premium", "total_categories_enabled": 7, "total_notification_channels": 0, "watchlist_symbols_with_custom_settings": 2}}

      330 |       expect(response.body.data).toHaveProperty("summary");
      331 |       expect(response.body.data).toHaveProperty("quick_actions");
    > 332 |       expect(response.body.data).toHaveProperty("metadata");
          |                                  ^
      333 |
      334 |       const settings = response.body.data.settings;
      335 |       expect(settings.user_id).toBe("test_user_123");

      at Object.toHaveProperty (tests/integration/routes/alerts.integration.test.js:332:34)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/history ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      390 |         .set("Authorization", "Bearer dev-bypass-token");
      391 |
    > 392 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      393 |       expect(response.body.success).toBe(false);
      394 |       expect(response.body.error).toBe("Alert history not implemented");
      395 |       expect(response.body).toHaveProperty("troubleshooting");

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:392:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/history ‚Ä∫ should handle query parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      402 |         .set("Authorization", "Bearer dev-bypass-token");
      403 |
    > 404 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      405 |       expect(response.body.success).toBe(false);
      406 |     });
      407 |   });

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:404:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/webhooks ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      448 |         .set("Authorization", "Bearer dev-bypass-token");
      449 |
    > 450 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      451 |       expect(response.body.success).toBe(false);
      452 |       expect(response.body.error).toBe("Alert webhooks not implemented");
      453 |       expect(response.body).toHaveProperty("troubleshooting");

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:450:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/webhooks ‚Ä∫ should handle webhook parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      460 |         .set("Authorization", "Bearer dev-bypass-token");
      461 |
    > 462 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      463 |       expect(response.body.success).toBe(false);
      464 |     });
      465 |   });

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:462:41)

  ‚óè Alerts Routes ‚Ä∫ POST /api/alerts/create ‚Ä∫ should create alert with required fields

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_user_123"
    Received: "dev-user-bypass"

      481 |       expect(response.body.data.alert.symbol).toBe("NVDA");
      482 |       expect(response.body.data.alert.threshold).toBe(500.0);
    > 483 |       expect(response.body.data.alert.user_id).toBe("test_user_123");
          |                                                ^
      484 |       expect(response.body.data.alert.status).toBe("active");
      485 |       expect(response.body.data).toHaveProperty("next_actions");
      486 |     });

      at Object.toBe (tests/integration/routes/alerts.integration.test.js:483:48)

  ‚óè Alerts Routes ‚Ä∫ DELETE /api/alerts/delete/:alertId ‚Ä∫ should delete alert successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: "test_user_123"
    Received: "dev-user-bypass"

      540 |       expect(response.body.success).toBe(true);
      541 |       expect(response.body.data.deleted_alert.alert_id).toBe(alertId);
    > 542 |       expect(response.body.data.deleted_alert.user_id).toBe("test_user_123");
          |                                                        ^
      543 |       expect(response.body.data.deleted_alert.status).toBe("deleted");
      544 |       expect(response.body.data.deleted_alert.deletion_reason).toBe(
      545 |         "no_longer_needed"

      at Object.toBe (tests/integration/routes/alerts.integration.test.js:542:56)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/price ‚Ä∫ should return 501 not implemented when no data

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      578 |         .set("Authorization", "Bearer dev-bypass-token");
      579 |
    > 580 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      581 |       expect(response.body.success).toBe(false);
      582 |       expect(response.body.error).toBe("Price alerts not implemented");
      583 |       expect(response.body).toHaveProperty("troubleshooting");

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:580:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/price ‚Ä∫ should handle symbol filter

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      590 |         .set("Authorization", "Bearer dev-bypass-token");
      591 |
    > 592 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      593 |       expect(response.body.success).toBe(false);
      594 |     });
      595 |

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:592:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/price ‚Ä∫ should handle threshold filters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      599 |         .set("Authorization", "Bearer dev-bypass-token");
      600 |
    > 601 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      602 |       expect(response.body.success).toBe(false);
      603 |     });
      604 |

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:601:41)

  ‚óè Alerts Routes ‚Ä∫ GET /api/alerts/price ‚Ä∫ should handle alert type filter

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      608 |         .set("Authorization", "Bearer dev-bypass-token");
      609 |
    > 610 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      611 |       expect(response.body.success).toBe(false);
      612 |     });
      613 |   });

      at Object.toContain (tests/integration/routes/alerts.integration.test.js:610:41)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/rules HTTP/1.1" 200 508 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:35 +0000] "GET /api/alerts/summary HTTP/1.1" 200 1348 "-" "-"
FAIL tests/integration/analytics/dashboard.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/dashboard

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/market-summary

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/indices

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/portfolio

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/portfolio/top-positions

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/watchlists

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Dashboard watchlists requested for user: test-user-123

      at log (routes/dashboard.js:1545:13)

    console.log
      Processing request: GET /api/dashboard/watchlists/performance

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Dashboard watchlist performance requested for user: test-user-123

      at log (routes/dashboard.js:1603:13)

    console.log
      Processing request: GET /api/dashboard/news

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/news/personalized

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/alerts/recent

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/alerts/summary

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /api/dashboard/layout

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/dashboard/preferences

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Dashboard API ‚Ä∫ Dashboard Overview ‚Ä∫ should retrieve comprehensive dashboard data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      33 |         );
      34 |
    > 35 |         expect(hasDashboardData).toBe(true);
         |                                  ^
      36 |       }
      37 |     });
      38 |

      at Object.toBe (tests/integration/analytics/dashboard.test.js:35:34)

  ‚óè Dashboard API ‚Ä∫ Dashboard Overview ‚Ä∫ should handle unauthorized dashboard access

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 500]

      40 |       const response = await request(app).get("/api/dashboard");
      41 |
    > 42 |       expect([401, 500]).toContain(response.status);
         |                          ^
      43 |     });
      44 |   });
      45 |

      at Object.toContain (tests/integration/analytics/dashboard.test.js:42:26)

  ‚óè Dashboard API ‚Ä∫ Market Summary ‚Ä∫ should provide market summary for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      48 |       const response = await request(app).get("/api/dashboard/market-summary");
      49 |
    > 50 |       expect(response.status).toBe(200);
         |                               ^
      51 |
      52 |       if (response.status === 200) {
      53 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:50:31)

  ‚óè Dashboard API ‚Ä∫ Market Summary ‚Ä∫ should include major market indices

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      66 |       const response = await request(app).get("/api/dashboard/indices");
      67 |
    > 68 |       expect(response.status).toBe(200);
         |                               ^
      69 |
      70 |       if (response.status === 200) {
      71 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:68:31)

  ‚óè Dashboard API ‚Ä∫ Portfolio Widget ‚Ä∫ should retrieve portfolio summary for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       95 |         .set("Authorization", "Bearer test-token");
       96 |
    >  97 |       expect(response.status).toBe(200);
          |                               ^
       98 |
       99 |       if (response.status === 200) {
      100 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:97:31)

  ‚óè Dashboard API ‚Ä∫ Portfolio Widget ‚Ä∫ should show top portfolio positions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      122 |         .set("Authorization", "Bearer test-token");
      123 |
    > 124 |       expect(response.status).toBe(200);
          |                               ^
      125 |
      126 |       if (response.status === 200) {
      127 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:124:31)

  ‚óè Dashboard API ‚Ä∫ News Widget ‚Ä∫ should provide market news for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      168 |       const response = await request(app).get("/api/dashboard/news?limit=10");
      169 |
    > 170 |       expect(response.status).toBe(200);
          |                               ^
      171 |
      172 |       if (response.status === 200) {
      173 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:170:31)

  ‚óè Dashboard API ‚Ä∫ News Widget ‚Ä∫ should provide personalized news based on portfolio

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      188 |         .set("Authorization", "Bearer test-token");
      189 |
    > 190 |       expect(response.status).toBe(200);
          |                               ^
      191 |
      192 |       if (response.status === 200) {
      193 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:190:31)

  ‚óè Dashboard API ‚Ä∫ Alerts Widget ‚Ä∫ should show recent alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      203 |         .set("Authorization", "Bearer test-token");
      204 |
    > 205 |       expect(response.status).toBe(200);
          |                               ^
      206 |
      207 |       if (response.status === 200) {
      208 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:205:31)

  ‚óè Dashboard API ‚Ä∫ Alerts Widget ‚Ä∫ should show alert summary

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      216 |         .set("Authorization", "Bearer test-token");
      217 |
    > 218 |       expect(response.status).toBe(200);
          |                               ^
      219 |
      220 |       if (response.status === 200) {
      221 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:218:31)

  ‚óè Dashboard API ‚Ä∫ Dashboard Customization ‚Ä∫ should save dashboard layout preferences

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      251 |         .send(layoutConfig);
      252 |
    > 253 |       expect(response.status).toBe(200);
          |                               ^
      254 |
      255 |       if (response.status === 200 || response.status === 201) {
      256 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:253:31)

  ‚óè Dashboard API ‚Ä∫ Dashboard Customization ‚Ä∫ should retrieve user dashboard preferences

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      264 |         .set("Authorization", "Bearer test-token");
      265 |
    > 266 |       expect(response.status).toBe(200);
          |                               ^
      267 |
      268 |       if (response.status === 200) {
      269 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:266:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard HTTP/1.1" 200 436 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard HTTP/1.1" 200 436 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/market-summary HTTP/1.1" 404 650 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/indices HTTP/1.1" 404 629 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/portfolio HTTP/1.1" 404 635 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/portfolio/top-positions?limit=5 HTTP/1.1" 404 701 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/watchlists HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/watchlists/performance HTTP/1.1" 200 62234 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/news?limit=10 HTTP/1.1" 404 647 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/news/personalized HTTP/1.1" 404 659 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/alerts/recent HTTP/1.1" 404 647 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/alerts/summary HTTP/1.1" 404 650 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "POST /api/dashboard/layout HTTP/1.1" 404 626 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:36 +0000] "GET /api/dashboard/preferences HTTP/1.1" 404 641 "-" "-"
FAIL tests/unit/routes/alerts.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã All alerts requested for user: dev-user-bypass, status: all

      at log (routes/alerts.js:325:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: triggered

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìç Alert distance requested for AAPL by user: dev-user-bypass

      at log (routes/alerts.js:1087:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìç Alert distance requested for INVALID by user: dev-user-bypass

      at log (routes/alerts.js:1087:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üôà Alert dismiss requested for 1 by user: dev-user-bypass

      at log (routes/alerts.js:1127:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üôà Alert dismiss requested for invalid-id by user: dev-user-bypass

      at log (routes/alerts.js:1127:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üÜï New alert creation requested by user: dev-user-bypass for AAPL

      at log (routes/alerts.js:500:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üí∞ Price alerts requested for AAPL by user: dev-user-bypass, status: all

      at log (routes/alerts.js:1168:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üí∞ Price alerts requested for AAPL by user: dev-user-bypass, status: active

      at log (routes/alerts.js:1168:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üóëÔ∏è Deleting alert 1 for user: dev-user-bypass

      at log (routes/alerts.js:2380:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üóëÔ∏è Deleting alert 99999 for user: dev-user-bypass

      at log (routes/alerts.js:2380:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Alert history requested for user: dev-user-bypass

      at log (routes/alerts.js:1287:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Alert history requested for user: dev-user-bypass

      at log (routes/alerts.js:1287:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Alert history requested for user: dev-user-bypass

      at log (routes/alerts.js:1287:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Alert settings requested for user: dev-user-bypass

      at log (routes/alerts.js:821:13)

    console.log
      No user-specific alert settings found, returning defaults

      at log (routes/alerts.js:843:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Alert settings update requested for user: dev-user-bypass

      at log (routes/alerts.js:1224:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Alert settings update requested for user: dev-user-bypass

      at log (routes/alerts.js:1224:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üí∞ Price alerts requested for INVALID_SYMBOL_123! by user: dev-user-bypass, status: all

      at log (routes/alerts.js:1168:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ POST /alerts/news ‚Ä∫ should validate news sources

    expected 400 "Bad Request", got 201 "Created"

      530 |         .set("Authorization", "Bearer dev-bypass-token")
      531 |         .send(invalidSourceData)
    > 532 |         .expect(400);
          |          ^
      533 |
      534 |       expect(response.body.success).toBe(false);
      535 |       expect(response.body.error).toContain("source");

      at Object.expect (tests/unit/routes/alerts.test.js:532:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ GET /alerts/news/recent/:symbol ‚Ä∫ should return recent news alerts

    expect(received).toHaveProperty(path)

    Expected path: "news_alerts"
    Received path: []

    Received value: {"recent_alerts": [], "summary": {"total_alerts": 0, "unique_sources": []}, "symbol": "AAPL", "time_period": "24 hours"}

      547 |       expect(response.body).toHaveProperty("data");
      548 |       expect(response.body.data).toHaveProperty("symbol", "AAPL");
    > 549 |       expect(response.body.data).toHaveProperty("news_alerts");
          |                                  ^
      550 |       expect(response.body.data).toHaveProperty("sentiment_summary");
      551 |     });
      552 |

      at Object.toHaveProperty (tests/unit/routes/alerts.test.js:549:34)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ GET /alerts/portfolio/status ‚Ä∫ should return portfolio alert status

    expect(received).toHaveProperty(path)

    Expected path: "portfolio_metrics"
    Received path: []

    Received value: {"portfolio_alerts": [], "summary": {"active_alerts": 0, "total_alerts": 0, "triggered_alerts": 0}, "triggered_summary": []}

      624 |       expect(response.body).toHaveProperty("data");
      625 |       expect(response.body.data).toBeDefined();
    > 626 |       expect(response.body.data).toHaveProperty("portfolio_metrics");
          |                                  ^
      627 |       expect(response.body.data).toHaveProperty("risk_analysis");
      628 |     });
      629 |

      at Object.toHaveProperty (tests/unit/routes/alerts.test.js:626:34)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ GET /alerts/portfolio/status ‚Ä∫ should include triggered alerts summary

    expect(received).toHaveProperty(path)

    Expected path: "total_triggered"
    Received path: []

    Received value: []

      636 |       expect(response.body.success).toBe(true);
      637 |       if (response.body.data.triggered_summary) {
    > 638 |         expect(response.body.data.triggered_summary).toHaveProperty(
          |                                                      ^
      639 |           "total_triggered"
      640 |         );
      641 |         expect(response.body.data.triggered_summary).toHaveProperty("by_type");

      at Object.toHaveProperty (tests/unit/routes/alerts.test.js:638:54)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ POST /alerts/bulk/dismiss ‚Ä∫ should dismiss multiple alerts

    expect(received).toHaveProperty(path)

    Expected path: "failed_count"
    Received path: []

    Received value: {"dismissed_alerts": [{"id": 2, "status": "dismissed", "symbol": "TSLA"}], "dismissed_count": 1, "message": "1 alerts dismissed successfully"}

      726 |         expect(response.body.success).toBe(true);
      727 |         expect(response.body.data).toBeDefined();
    > 728 |         expect(response.body.data).toHaveProperty("failed_count");
          |                                    ^
      729 |       } else {
      730 |         expect([400, 401]).toContain(response.status);
      731 |       }

      at Object.toHaveProperty (tests/unit/routes/alerts.test.js:728:36)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ GET /alerts/history ‚Ä∫ should filter by alert type

    expect(received).toBe(expected) // Object.is equality

    Expected: "price_above"
    Received: undefined

      793 |       if (response.body.data.alerts.length > 0) {
      794 |         response.body.data.alerts.forEach((alert) => {
    > 795 |           expect(alert.alert_type).toBe("price_above");
          |                                    ^
      796 |         });
      797 |       }
      798 |     });

      at toBe (tests/unit/routes/alerts.test.js:795:36)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/unit/routes/alerts.test.js:794:35)

  ‚óè Alerts Routes Unit Tests ‚Ä∫ GET /alerts/history/performance ‚Ä∫ should return alert performance analytics

    expect(received).toHaveProperty(path)

    Expected path: "alert_accuracy"
    Received path: []

    Received value: {"breakdown_by_type": [{"alert_type": "price_alert", "avg_days_to_trigger": null, "count": "1", "status": "dismissed"}], "performance_metrics": [{"active_count": "0", "alert_type": "price_alert", "avg_trigger_time_hours": null, "total_alerts": "1", "triggered_count": "0"}], "summary": {"filter_applied": "none", "total_performance_records": 1}}

      809 |       expect(response.body).toHaveProperty("data");
      810 |       expect(response.body.data).toBeDefined();
    > 811 |       expect(response.body.data).toHaveProperty("alert_accuracy");
          |                                  ^
      812 |       expect(response.body.data).toHaveProperty("response_times");
      813 |     });
      814 |

      at Object.toHaveProperty (tests/unit/routes/alerts.test.js:811:34)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/summary HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/alerts/active HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - test [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "POST /api/portfolio/analyze HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 350 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/summary HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/positions HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/analytics HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/analysis HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/risk-analysis HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/performance HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/transactions HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/alerts/active HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/backtest/results HTTP/1.1" 200 28036 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
FAIL tests/integration/auth/auth-flow.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üìä Backtest results requested - ID: all, limit: 50

      at log (routes/backtest.js:821:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Authentication Flow Integration ‚Ä∫ Token-Based Authentication Flow ‚Ä∫ should handle missing authorization header

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 403, 500]

      87 |         const response = await request(app).get(endpoint);
      88 |
    > 89 |         expect([401, 403, 500]).toContain(response.status);
         |                                 ^
      90 |
      91 |         // Should return authentication error
      92 |         if (response.status === 401 || response.status === 403) {

      at Object.toContain (tests/integration/auth/auth-flow.integration.test.js:89:33)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "POST /api/portfolio/analyze HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/nonexistent HTTP/1.1" 404 131 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:37 +0000] "GET /api/portfolio/nonexistent HTTP/1.1" 401 74 "-" "-"
FAIL tests/unit/routes/market.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      [MARKET] Debug endpoint called

      at log (routes/market.js:298:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market sectors endpoint called

      at log (routes/market.js:746:13)

    console.log
      Economic indicators endpoint called for 90 days

      at log (routes/market.js:1449:11)

    console.log
      Found 0 economic data points

      at log (routes/market.js:1511:13)

    console.log
      Processed 0 economic indicators

      at log (routes/market.js:1526:13)

    console.error
      No economic data found in database

      1529 |
      1530 |     if (!result || !Array.isArray(result.rows) || result.rows.length === 0) {
    > 1531 |       console.error("No economic data found in database");
           |               ^
      1532 |       return res.status(404).json({
      1533 |         success: false,
      1534 |         error: "No economic indicators data available",

      at error (routes/market.js:1531:15)

    console.log
      üòä Market sentiment endpoint called

      at log (routes/market.js:1892:11)

    console.log
      üòä Market sentiment endpoint called

      at log (routes/market.js:1892:11)

    console.log
      üìä Market data endpoint called

      at log (routes/market.js:71:13)

    console.log
      üìä Market data endpoint called

      at log (routes/market.js:71:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 2ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 1ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Sector performance endpoint called

      at log (routes/market.js:923:11)

    console.error
      Database query error: {
        error: 'column s.ticker does not exist',
        query: '\n' +
          '      SELECT \n' +
          '        s.sector,\n' +
          '        COUNT(*) as stock_count,\n' +
          '        AVG(CASE WHEN ((pd.close -...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:974:16

    console.error
      Sector performance query error: column s.ticker does not exist

      974 |       result = await query(marketSectorQuery);
      975 |     } catch (error) {
    > 976 |       console.error("Sector performance query error:", error.message);
          |               ^
      977 |       return res.status(500).json({
      978 |         success: false,
      979 |         error: "Sector performance query failed",

      at error (routes/market.js:976:15)

    console.log
      Sector performance endpoint called

      at log (routes/market.js:923:11)

    console.error
      Database query error: {
        error: 'column s.ticker does not exist',
        query: '\n' +
          '      SELECT \n' +
          '        s.sector,\n' +
          '        COUNT(*) as stock_count,\n' +
          '        AVG(CASE WHEN ((pd.close -...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:974:16

    console.error
      Sector performance query error: column s.ticker does not exist

      974 |       result = await query(marketSectorQuery);
      975 |     } catch (error) {
    > 976 |       console.error("Sector performance query error:", error.message);
          |               ^
      977 |       return res.status(500).json({
      978 |         success: false,
      979 |         error: "Sector performance query failed",

      at error (routes/market.js:976:15)

    console.log
      üìà Economic indicators - generating simulated data for category: all

      at log (routes/market.js:1033:13)

    console.log
      üìà Economic indicators - generating simulated data for category: inflation

      at log (routes/market.js:1033:13)

    console.log
      üìà Economic indicators - generating simulated data for category: all

      at log (routes/market.js:1033:13)

    console.log
      Market breadth endpoint called

      at log (routes/market.js:1318:11)

    console.error
      Database query error: {
        error: 'column pd1.close_price does not exist',
        query: '\n' +
          '      WITH daily_changes AS (\n' +
          '        SELECT\n' +
          '          pd1.symbol,\n' +
          '          pd1.close_price as cur...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:1380:20

    console.error
      Error fetching market breadth: error: column pd1.close_price does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/market.js:1380:20 {
        length: 113,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '79',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1419 |     });
      1420 |   } catch (error) {
    > 1421 |     console.error("Error fetching market breadth:", error);
           |             ^
      1422 |     return res.status(503).json({
      1423 |       success: false,
      1424 |       error: "Failed to fetch market breadth data",

      at error (routes/market.js:1421:13)

    console.log
      Market breadth endpoint called

      at log (routes/market.js:1318:11)

    console.error
      Database query error: {
        error: 'column pd1.close_price does not exist',
        query: '\n' +
          '      WITH daily_changes AS (\n' +
          '        SELECT\n' +
          '          pd1.symbol,\n' +
          '          pd1.close_price as cur...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:1380:20

    console.error
      Error fetching market breadth: error: column pd1.close_price does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/market.js:1380:20 {
        length: 113,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '79',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1419 |     });
      1420 |   } catch (error) {
    > 1421 |     console.error("Error fetching market breadth:", error);
           |             ^
      1422 |     return res.status(503).json({
      1423 |       success: false,
      1424 |       error: "Failed to fetch market breadth data",

      at error (routes/market.js:1421:13)

    console.log
      üìä Market summary requested

      at log (routes/market.js:147:13)

    console.error
      Database query error: {
        error: 'column "close_price" does not exist',
        query: '\n' +
          '        SELECT\n' +
          '          symbol,\n' +
          '          close_price as close,\n' +
          '          COALESCE((close - open),...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:175:23

    console.error
      Market summary queries failed: column "close_price" does not exist

      209 |
      210 |     } catch (error) {
    > 211 |       console.error("Market summary queries failed:", error.message);
          |               ^
      212 |       return res.status(500).json({
      213 |         success: false,
      214 |         error: "Failed to fetch market summary",

      at error (routes/market.js:211:15)

    console.log
      üìä Market summary requested

      at log (routes/market.js:147:13)

    console.error
      Database query error: {
        error: 'column "close_price" does not exist',
        query: '\n' +
          '        SELECT\n' +
          '          symbol,\n' +
          '          close_price as close,\n' +
          '          COALESCE((close - open),...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:175:23

    console.error
      Market summary queries failed: column "close_price" does not exist

      209 |
      210 |     } catch (error) {
    > 211 |       console.error("Market summary queries failed:", error.message);
          |               ^
      212 |       return res.status(500).json({
      213 |         success: false,
      214 |         error: "Failed to fetch market summary",

      at error (routes/market.js:211:15)

    console.log
      NAAIM data endpoint called with limit: 30

      at log (routes/market.js:1585:11)

    console.log
      üìä Recession forecast endpoint called

      at log (routes/market.js:2823:11)

    console.log
      üìà Leading indicators endpoint called

      at log (routes/market.js:2969:11)

    console.log
      üè≠ Sectoral analysis endpoint called

      at log (routes/market.js:3121:11)

    console.error
      Database query error: {
        error: 'relation "sectors_performance" does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        sector as name,\n' +
          '        AVG(performance_score) as performance,\n' +
          '        AVG(gro...',
        params: 'no parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:3169:28

    console.log
      No sector data available in database

      at log (routes/market.js:3172:15)

    console.log
      ü§ñ AI insights endpoint called

      at log (routes/market.js:3325:11)

    console.log
      üéØ Economic scenarios endpoint called

      at log (routes/market.js:3214:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìà Economic indicators - generating simulated data for category:

      at log (routes/market.js:1033:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/economic ‚Ä∫ should return economic data

    expected 200 "OK", got 404 "Not Found"

      71 |   describe("GET /market/economic", () => {
      72 |     test("should return economic data", async () => {
    > 73 |       const response = await request(app).get("/market/economic").expect(200);
         |                                                                   ^
      74 |
      75 |       expect(response.body).toHaveProperty("success");
      76 |     });

      at Object.expect (tests/unit/routes/market.test.js:73:67)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/sectors/performance ‚Ä∫ should return sector performance data

    expected 200 "OK", got 500 "Internal Server Error"

      175 |       const response = await request(app)
      176 |         .get("/market/sectors/performance")
    > 177 |         .expect(200);
          |          ^
      178 |
      179 |       expect(response.body).toBeDefined();
      180 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:177:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/sectors/performance ‚Ä∫ should handle sector performance with timeframe

    expected 200 "OK", got 500 "Internal Server Error"

      185 |       const response = await request(app)
      186 |         .get("/market/sectors/performance?timeframe=1d")
    > 187 |         .expect(200);
          |          ^
      188 |
      189 |       expect(response.body).toBeDefined();
      190 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:187:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/breadth ‚Ä∫ should return market breadth data

    expected 200 "OK", got 503 "Service Unavailable"

      237 |   describe("GET /market/breadth", () => {
      238 |     test("should return market breadth data", async () => {
    > 239 |       const response = await request(app).get("/market/breadth").expect(200);
          |                                                                  ^
      240 |
      241 |       expect(response.body).toBeDefined();
      242 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:239:66)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/breadth ‚Ä∫ should handle breadth with parameters

    expected 200 "OK", got 503 "Service Unavailable"

      247 |       const response = await request(app)
      248 |         .get("/market/breadth?period=5d")
    > 249 |         .expect(200);
          |          ^
      250 |
      251 |       expect(response.body).toBeDefined();
      252 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:249:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/summary ‚Ä∫ should return market summary

    expected 200 "OK", got 500 "Internal Server Error"

      256 |   describe("GET /market/summary", () => {
      257 |     test("should return market summary", async () => {
    > 258 |       const response = await request(app).get("/market/summary").expect(200);
          |                                                                  ^
      259 |
      260 |       expect(response.body).toBeDefined();
      261 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:258:66)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /market/summary ‚Ä∫ should handle summary with filters

    expected 200 "OK", got 500 "Internal Server Error"

      266 |       const response = await request(app)
      267 |         .get("/market/summary?include_sectors=true")
    > 268 |         .expect(200);
          |          ^
      269 |
      270 |       expect(response.body).toBeDefined();
      271 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/market.test.js:268:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Market Routes Unit Tests ‚Ä∫ AWS Failing Endpoints - Database-Driven ‚Ä∫ GET /market/recession-forecast should return database-driven recession analysis

    expect(received).toHaveProperty(path)

    Expected path: "recession_probability"
    Received path: []

    Received value: {"analysis": {"factors": ["‚úÖ Normal yield curve", "‚úÖ Low unemployment", "‚úÖ Low market stress", "‚úÖ Moderate interest rates"], "summary": "Economic indicators suggest low recession risk"}, "compositeRecessionProbability": 15, "forecastModels": [{"confidence": 85, "lastUpdated": "2025-09-26T01:27:37.667Z", "name": "NY Fed Model", "probability": 10}, {"confidence": 80, "lastUpdated": "2025-09-26T01:27:37.667Z", "name": "Goldman Sachs", "probability": 18}, {"confidence": 75, "lastUpdated": "2025-09-26T01:27:37.667Z", "name": "JP Morgan", "probability": 13}, {"confidence": 70, "lastUpdated": "2025-09-26T01:27:37.667Z", "name": "AI Ensemble", "probability": 15}], "keyIndicators": {"fedRate": 4, "sp500": 6000, "unemployment": 4, "vix": 20, "yieldCurveSpread": 0}, "riskLevel": "Low"}

      306 |
      307 |       if (response.body.data) {
    > 308 |         expect(response.body.data).toHaveProperty("recession_probability");
          |                                    ^
      309 |         expect(response.body.data).toHaveProperty("indicators");
      310 |         expect(response.body.data).toHaveProperty("analysis");
      311 |       }

      at Object.toHaveProperty (tests/unit/routes/market.test.js:308:36)

  ‚óè Market Routes Unit Tests ‚Ä∫ AWS Failing Endpoints - Database-Driven ‚Ä∫ GET /market/leading-indicators should return database-driven leading indicators

    expect(received).toHaveProperty(path)

    Expected path: "summary"
    Received path: []

    Received value: {"employment": {"payroll_change": null, "unemployment_rate": null}, "gdpGrowth": null, "indicators": [{"change": 0, "date": null, "importance": "high", "name": "Unemployment Rate", "trend": "stable", "unit": "%", "value": null}, {"change": 0, "date": null, "importance": "medium", "name": "Industrial Production", "trend": "stable", "unit": "Index", "value": null}, {"change": 0, "date": null, "importance": "medium", "name": "Housing Starts", "trend": "stable", "unit": "Thousands", "value": null}, {"change": 0, "date": null, "importance": "high", "name": "Consumer Sentiment", "trend": "stable", "unit": "Index", "value": null}], "inflation": null, "unemployment": null, "upcomingEvents": [{"date": "2025-10-03T01:27:37.674Z", "event": "Employment Report", "importance": "high"}, {"date": "2025-10-10T01:27:37.674Z", "event": "CPI Release", "importance": "high"}], "yieldCurve": {"averageLeadTime": 0, "historicalAccuracy": 65, "interpretation": "Normal yield curve indicates healthy economic conditions", "isInverted": false, "spread2y10y": 0, "spread3m10y": 0}, "yieldCurveData": [{"maturity": "2Y", "rate": null}, {"maturity": "10Y", "rate": null}]}

      324 |       if (response.body.data) {
      325 |         expect(response.body.data).toHaveProperty("indicators");
    > 326 |         expect(response.body.data).toHaveProperty("summary");
          |                                    ^
      327 |       }
      328 |     });
      329 |

      at Object.toHaveProperty (tests/unit/routes/market.test.js:326:36)

  ‚óè Market Routes Unit Tests ‚Ä∫ AWS Failing Endpoints - Database-Driven ‚Ä∫ GET /market/sectoral-analysis should return database-driven sector analysis

    expect(received).toHaveProperty(path)

    Expected path: "analysis"
    Received path: []

    Received value: {"economic_context": {"gdp_growth": null, "industrial_production": null, "unemployment_rate": null}, "sectors": [], "summary": {"overall_health": "No Data Available", "strongest_sector": "N/A", "total_sectors": 0, "weakest_sector": "N/A"}}

      340 |       if (response.body.data) {
      341 |         expect(response.body.data).toHaveProperty("sectors");
    > 342 |         expect(response.body.data).toHaveProperty("analysis");
          |                                    ^
      343 |       }
      344 |     });
      345 |

      at Object.toHaveProperty (tests/unit/routes/market.test.js:342:36)

  ‚óè Market Routes Unit Tests ‚Ä∫ AWS Failing Endpoints - Database-Driven ‚Ä∫ GET /market/ai-insights should return database-driven AI insights

    expect(received).toHaveProperty(path, value)

    Expected path: "success"
    Received path: []

    Expected value: true
    Received value: {"data": {"data_sources": {"analysis_method": "Statistical pattern recognition", "economic_data": "FRED economic series", "market_data": "Daily price and volume data"}, "insights": [{"confidence": 75, "data_source": "Composite economic indicators", "description": "Current economic indicators suggest moderate market conditions with balanced risks. Continue monitoring key metrics for emerging trends.", "impact": "Medium", "timeframe": "3-6 months", "title": "Market Stability Assessment"}], "lastUpdated": "2025-09-26T01:27:37.685Z", "model_version": "Economic AI v3.0 (Database-driven)", "summary": {"average_confidence": 75, "high_impact_insights": 0, "near_term_insights": 1, "total_insights": 1}}}

      351 |       expect(response.body).toBeDefined();
      352 |       expect(typeof response.body).toBe("object");
    > 353 |       expect(response.body).toHaveProperty("success", true);
          |                             ^
      354 |       expect(response.body).toHaveProperty("data");
      355 |
      356 |       if (response.body.data) {

      at Object.toHaveProperty (tests/unit/routes/market.test.js:353:29)

  ‚óè Market Routes Unit Tests ‚Ä∫ AWS Failing Endpoints - Database-Driven ‚Ä∫ GET /market/economic-scenarios should return database-driven economic scenarios

    expect(received).toHaveProperty(path, value)

    Expected path: "success"
    Received path: []

    Expected value: true
    Received value: {"data": {"lastUpdated": "2025-09-26T01:27:37.687Z", "scenarios": [{"description": "Soft landing with continued growth and declining inflation", "fedRate": 3, "gdpGrowth": 3.3, "name": "Bull Case", "probability": 30, "unemployment": 3.6}, {"description": "Mild slowdown with modest recession risk", "fedRate": 2.75, "gdpGrowth": 2, "name": "Base Case", "probability": 50, "unemployment": 4.4}, {"description": "Economic contraction with elevated unemployment", "fedRate": 1.5, "gdpGrowth": -0.3, "name": "Bear Case", "probability": 20, "unemployment": 5.3}], "summary": {"current_indicators": {"data_source": "economic_data table", "federal_funds_rate": 3.5, "unemployment_rate": 4.1}, "most_likely": "Base Case", "weighted_fed_rate": 2.57, "weighted_gdp_growth": 1.92, "weighted_unemployment": 4.34}}}

      376 |       expect(response.body).toBeDefined();
      377 |       expect(typeof response.body).toBe("object");
    > 378 |       expect(response.body).toHaveProperty("success", true);
          |                             ^
      379 |       expect(response.body).toHaveProperty("data");
      380 |
      381 |       if (response.body.data) {

      at Object.toHaveProperty (tests/unit/routes/market.test.js:378:29)

FAIL tests/unit/routes/analysts.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.warn
      Error checking table existence for analyst_upgrade_downgrade: TypeError: Cannot read properties of undefined (reading 'rows')
          at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:19)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:64:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:64:11

    console.warn
      Error checking table existence for analyst_upgrade_downgrade: TypeError: Cannot read properties of undefined (reading 'rows')
          at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:19)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:64:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:64:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'rows')
          at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:19)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'rows')
          at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:19)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for sentiment_analysis: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:219:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:251:11

    console.log
      üìà [GROWTH] Calculating growth estimates for AAPL

      at log (routes/analysts.js:349:13)

    console.log
      ‚úÖ [GROWTH] Calculated growth estimates for AAPL: Revenue 0%, EPS 0%

      at log (routes/analysts.js:594:13)

    console.error
      Analyst overview fetch error: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:350:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      721 |     });
      722 |   } catch (error) {
    > 723 |     console.error("Analyst overview fetch error:", error);
          |             ^
      724 |     return res.status(500).json({
      725 |       success: false,
      726 |       error: "Failed to fetch analyst overview",

      at error (routes/analysts.js:723:13)

    console.log
      üìä Analyst recommendations requested for AAPL

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for INVALID

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for AAPL

      at log (routes/analysts.js:844:13)

    console.error
      Analyst recommendations error: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:475:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      932 |     });
      933 |   } catch (error) {
    > 934 |     console.error("Analyst recommendations error:", error);
          |             ^
      935 |     res.status(500).json({
      936 |       success: false,
      937 |       error: "Failed to fetch analyst recommendations",

      at error (routes/analysts.js:934:13)

    console.log
      üéØ Price targets requested for AAPL

      at log (routes/analysts.js:947:13)

    console.log
      ü§ù Analyst consensus requested for AAPL

      at log (routes/analysts.js:1335:13)

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for analyst_upgrade_downgrade: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:64:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:64:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for earnings_estimates: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/analysts.js:17:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:128:11

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:128:11

    console.warn
      Error checking table existence for analyst_upgrade_downgrade: Error: Test error
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:822:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      17 |     return result.rows[0].exists;
      18 |   } catch (error) {
    > 19 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      20 |     return false;
      21 |   }
      22 | }

      at warn (routes/analysts.js:19:13)
      at routes/analysts.js:64:11

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/:ticker/revenue-estimates ‚Ä∫ should get revenue estimates for valid ticker

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "er.revenue as actual", ["AAPL"]
    Received
           1
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "AAPL",
            +   "analyst_upgrade_downgrade",
              ],
           2
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "AAPL",
            +   "analyst_upgrade_downgrade",
              ],
           3
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "AAPL",
            +   "earnings_estimates",
              ],

    Number of calls: 5

      145 |       expect(response.body.estimates).toHaveLength(1);
      146 |       expect(response.body.estimates[0].actual).toBe(119300000000);
    > 147 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      148 |         expect.stringContaining("er.revenue as actual"),
      149 |         ["AAPL"]
      150 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:147:25)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/:ticker/eps-revisions ‚Ä∫ should get EPS revisions for valid ticker

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      210 |
      211 |       expect(response.body.ticker).toBe("AAPL");
    > 212 |       expect(response.body.data).toHaveLength(1);
          |                                  ^
      213 |       expect(response.body.data[0].up_last30days).toBe(3);
      214 |       expect(response.body.metadata.count).toBe(1);
      215 |       expect(response.body.metadata.timestamp).toBeDefined();

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:212:34)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/:ticker/eps-revisions ‚Ä∫ should handle database errors for EPS revisions

    expected 500 "Internal Server Error", got 200 "OK"

      221 |       const response = await request(app)
      222 |         .get("/api/analysts/AAPL/eps-revisions")
    > 223 |         .expect(500);
          |          ^
      224 |
      225 |       expect(response.body.success).toBe(false);
      226 |       expect(response.body.error).toContain("Failed to fetch EPS revisions");

      at Object.expect (tests/unit/routes/analysts.test.js:223:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/:ticker/growth-estimates ‚Ä∫ should get growth estimates for valid ticker

    expect(received).toBe(expected) // Object.is equality

    Expected: "AAPL"
    Received: undefined

      277 |       expect(response.body.ticker).toBe("AAPL");
      278 |       expect(typeof response.body.data).toBe("object");
    > 279 |       expect(response.body.data.symbol).toBe("AAPL");
          |                                         ^
      280 |       expect(response.body.data.earnings_growth).toBeDefined();
      281 |       expect(response.body.data.eps_growth_from_financials).toBeDefined();
      282 |     });

      at Object.toBe (tests/unit/routes/analysts.test.js:279:41)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/recent-actions ‚Ä∫ should get recent analyst actions

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      385 |         .expect(200);
      386 |
    > 387 |       expect(response.body.data).toHaveLength(1);
          |                                  ^
      388 |       expect(response.body.data[0].action).toBe("Upgrade");
      389 |       expect(response.body.summary.date).toBe("2024-01-15");
      390 |       expect(response.body.summary.total_actions).toBe(1);

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:387:34)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/recent-actions ‚Ä∫ should handle no recent actions found

    expect(received).toBe(expected) // Object.is equality

    Expected: "No analyst actions found"
    Received: "Analyst data not yet loaded"

      401 |
      402 |       expect(response.body.data).toEqual([]);
    > 403 |       expect(response.body.message).toBe("No analyst actions found");
          |                                     ^
      404 |       expect(response.body.summary.total_actions).toBe(0);
      405 |     });
      406 |

      at Object.toBe (tests/unit/routes/analysts.test.js:403:37)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/recent-actions ‚Ä∫ should handle limit parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "LIMIT $2", ["2024-01-15", 5]
    Received
           1
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "2024-01-15",
            -   5,
            +   "analyst_upgrade_downgrade",
              ],
           2
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "2024-01-15",
            -   5,
            +   "analyst_upgrade_downgrade",
              ],
           3
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "2024-01-15",
            -   5,
            +   "earnings_estimates",
              ],

    Number of calls: 20

      417 |         .expect(200);
      418 |
    > 419 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      420 |         expect.stringContaining("LIMIT $2"),
      421 |         ["2024-01-15", 5]
      422 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:419:25)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/recommendations/:symbol ‚Ä∫ should get analyst recommendations for valid symbol

    expected 200 "OK", got 404 "Not Found"

      447 |       const response = await request(app)
      448 |         .get("/api/analysts/recommendations/AAPL")
    > 449 |         .expect(200);
          |          ^
      450 |
      451 |       expect(response.body.success).toBe(true);
      452 |       expect(response.body.data).toHaveLength(1);

      at Object.expect (tests/unit/routes/analysts.test.js:449:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should return analyst downgrades with default parameters

    expected 200 "OK", got 500 "Internal Server Error"

      503 |       const response = await request(app)
      504 |         .get("/api/analysts/downgrades")
    > 505 |         .expect(200);
          |          ^
      506 |
      507 |       expect(response.body).toMatchObject({
      508 |         success: true,

      at Object.expect (tests/unit/routes/analysts.test.js:505:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should support filtering by symbol

    expected 200 "OK", got 500 "Internal Server Error"

      584 |       const response = await request(app)
      585 |         .get("/api/analysts/downgrades?symbol=AAPL&limit=10")
    > 586 |         .expect(200);
          |          ^
      587 |
      588 |       expect(response.body.filters).toMatchObject({
      589 |         symbol: "AAPL",

      at Object.expect (tests/unit/routes/analysts.test.js:586:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should support filtering by analyst firm

    expected 200 "OK", got 500 "Internal Server Error"

      602 |       const response = await request(app)
      603 |         .get("/api/analysts/downgrades?analyst_firm=Goldman Sachs&timeframe=7d")
    > 604 |         .expect(200);
          |          ^
      605 |
      606 |       expect(response.body.filters).toMatchObject({
      607 |         analyst_firm: "Goldman Sachs",

      at Object.expect (tests/unit/routes/analysts.test.js:604:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should support filtering by severity

    expected 200 "OK", got 500 "Internal Server Error"

      620 |       const response = await request(app)
      621 |         .get("/api/analysts/downgrades?severity=severe&limit=20")
    > 622 |         .expect(200);
          |          ^
      623 |
      624 |       expect(response.body.filters).toMatchObject({
      625 |         severity: "severe",

      at Object.expect (tests/unit/routes/analysts.test.js:622:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should support minimum price impact filtering

    expected 200 "OK", got 500 "Internal Server Error"

      638 |       const response = await request(app)
      639 |         .get("/api/analysts/downgrades?min_price_impact=0.05")
    > 640 |         .expect(200);
          |          ^
      641 |
      642 |       expect(response.body.filters).toMatchObject({
      643 |         min_price_impact: 0.05,

      at Object.expect (tests/unit/routes/analysts.test.js:640:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should support different timeframe options

    expected 200 "OK", got 500 "Internal Server Error"

      660 |         const response = await request(app)
      661 |           .get(`/api/analysts/downgrades?timeframe=${timeframe}&limit=5`)
    > 662 |           .expect(200);
          |            ^
      663 |
      664 |         expect(response.body.filters.timeframe).toBe(timeframe);
      665 |         expect(response.body.data.analytics.timeframe_analyzed).toBe(timeframe);

      at Object.expect (tests/unit/routes/analysts.test.js:662:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ GET /api/analysts/downgrades ‚Ä∫ should handle errors gracefully

    expected 200 "OK", got 500 "Internal Server Error"

      671 |       const response = await request(app)
      672 |         .get("/api/analysts/downgrades?limit=invalid")
    > 673 |         .expect(200); // Our implementation handles invalid limit gracefully
          |          ^
      674 |
      675 |       expect(response.body).toHaveProperty("success", true);
      676 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/analysts.test.js:673:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle special characters in ticker symbols

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "UPPER($1)", ["BRK.B"]
    Received
           1
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "BRK.B",
            +   "analyst_upgrade_downgrade",
              ],
           2
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "BRK.B",
            +   "analyst_upgrade_downgrade",
              ],
           3
              "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
              Array [
            -   "BRK.B",
            +   "earnings_estimates",
              ],

    Number of calls: 25

      711 |         .expect(200);
      712 |
    > 713 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      714 |         expect.stringContaining("UPPER($1)"),
      715 |         ["BRK.B"]
      716 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:713:25)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle very large page numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      731 |       expect(response.body.pagination?.page || 1).toBe(999999);
      732 |       expect(response.body.pagination.hasNext).toBe(false);
    > 733 |       expect(response.body.pagination.hasPrev).toBe(true);
          |                                                ^
      734 |     });
      735 |
      736 |     test("should handle zero or negative page numbers", async () => {

      at Object.toBe (tests/unit/routes/analysts.test.js:733:48)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ Performance Testing ‚Ä∫ should handle large dataset responses efficiently

    expect(received).toHaveLength(expected)

    Expected length: 1000
    Received length: 0
    Received array:  []

      795 |       const endTime = Date.now();
      796 |
    > 797 |       expect(response.body.estimates).toHaveLength(1000);
          |                                       ^
      798 |       expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds
      799 |     });
      800 |   });

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:797:39)

  ‚óè Analysts Route - Comprehensive Unit Tests ‚Ä∫ Response Format Validation ‚Ä∫ should maintain consistent error response format

    expected 500 "Internal Server Error", got 200 "OK"

      824 |       const response = await request(app)
      825 |         .get("/api/analysts/upgrades")
    > 826 |         .expect(500);
          |          ^
      827 |
      828 |       expect(response.body.success).toBe(false);
      829 |       expect(response.body.error).toBeDefined();

      at Object.expect (tests/unit/routes/analysts.test.js:826:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/unit/routes/news.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Error analyzing sentiment: Error: Analysis failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/news.test.js:463:9)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      587 |     res.json({ success: true, data: analysis });
      588 |   } catch (error) {
    > 589 |     console.error("Error analyzing sentiment:", error);
          |             ^
      590 |     res.status(500).json({
      591 |       success: false,
      592 |       error: "Failed to analyze sentiment",

      at error (routes/news.js:589:13)

    console.log
      üì∞ News feed requested - category: technology, limit: 5

      at log (routes/news.js:802:13)

    console.log
      üì∞ News feed requested - category: technology, limit: 50

      at log (routes/news.js:802:13)

    console.log
      üìÖ Economic calendar requested - importance: high, country: US

      at log (routes/news.js:917:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè News Routes ‚Ä∫ GET /news/ ‚Ä∫ should return API status

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 1

      Object {
    -   "message": "News API - Ready",
    -   "status": "operational",
    +   "data": Array [],
        "success": true,
    -   "timestamp": Any<String>,
      }

      100 |       const response = await request(app).get("/news/").expect(200);
      101 |
    > 102 |       expect(response.body).toEqual({
          |                             ^
      103 |         success: true,
      104 |         message: "News API - Ready",
      105 |         timestamp: expect.any(String),

      at Object.toEqual (tests/unit/routes/news.test.js:102:29)

  ‚óè News Routes ‚Ä∫ GET /news/articles ‚Ä∫ should return news articles with sentiment analysis

    expect(received).toMatchObject(expected)

    - Expected  - 23
    + Received  +  2

      Object {
        "data": Object {
    -     "articles": ArrayContaining [
    -       ObjectContaining {
    -         "author": "John Smith",
    -         "category": "technology",
    -         "id": 1,
    -         "impact_score": 0.8,
    -         "keywords": Array [
    -           "tech",
    -           "earnings",
    -           "growth",
    -         ],
    -         "relevance_score": 0.9,
    -         "sentiment": Object {
    -           "confidence": 0.85,
    -           "label": "positive",
    -           "score": 0.75,
    -         },
    -         "source": "Reuters",
    -         "symbol": "AAPL",
    -         "title": "Tech Stocks Rally on Strong Earnings",
    -       },
    -     ],
    +     "articles": Array [],
          "filters": Object {
            "symbol": "AAPL",
            "timeframe": "24h",
          },
          "limit": 10,
          "offset": 0,
    -     "total": 1,
    +     "total": 0,
        },
        "success": true,
      }

      147 |         .expect(200);
      148 |
    > 149 |       expect(response.body).toMatchObject({
          |                             ^
      150 |         success: true,
      151 |         data: {
      152 |           articles: expect.arrayContaining([

      at Object.toMatchObject (tests/unit/routes/news.test.js:149:29)

  ‚óè News Routes ‚Ä∫ GET /news/articles ‚Ä∫ should handle database errors

    expected 500 "Internal Server Error", got 200 "OK"

      208 |       query.mockRejectedValue(new Error("Database connection failed"));
      209 |
    > 210 |       const response = await request(app).get("/news/articles").expect(500);
          |                                                                 ^
      211 |
      212 |       expect(response.body).toMatchObject({
      213 |         success: false,

      at Object.expect (tests/unit/routes/news.test.js:210:65)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/sentiment/:symbol ‚Ä∫ should return sentiment analysis for symbol

    expected 200 "OK", got 404 "Not Found"

      259 |         .get("/news/sentiment/AAPL")
      260 |         .query({ timeframe: "24h" })
    > 261 |         .expect(200);
          |          ^
      262 |
      263 |       expect(response.body).toMatchObject({
      264 |         success: true,

      at Object.expect (tests/unit/routes/news.test.js:261:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/sentiment/:symbol ‚Ä∫ should handle database errors

    expected 500 "Internal Server Error", got 404 "Not Found"

      300 |       const response = await request(app)
      301 |         .get("/news/sentiment/AAPL")
    > 302 |         .expect(500);
          |          ^
      303 |
      304 |       expect(response.body).toMatchObject({
      305 |         success: false,

      at Object.expect (tests/unit/routes/news.test.js:302:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/market-sentiment ‚Ä∫ should return market sentiment overview

    expected 200 "OK", got 501 "Not Implemented"

      369 |         .get("/news/market-sentiment")
      370 |         .query({ timeframe: "24h" })
    > 371 |         .expect(200);
          |          ^
      372 |
      373 |       expect(response.body).toMatchObject({
      374 |         success: true,

      at Object.expect (tests/unit/routes/news.test.js:371:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/sources ‚Ä∫ should return news sources with reliability scores

    expect(received).toMatchObject(expected)

    - Expected  - 14
    + Received  +  9

      Object {
        "data": Object {
    -     "sources": ArrayContaining [
    -       ObjectContaining {
    -         "article_count": 150,
    -         "avg_impact": 0.75,
    -         "avg_relevance": 0.85,
    +     "sources": Array [
    +       Object {
    +         "article_count": null,
    +         "avg_impact": null,
    +         "avg_relevance": null,
              "reliability_score": 0.95,
              "sentiment_distribution": Object {
    -           "negative": 30,
    -           "neutral": 30,
    -           "positive": 90,
    +           "negative": null,
    +           "neutral": null,
    +           "positive": null,
              },
              "source": "Reuters",
            },
    -       ObjectContaining {
    -         "article_count": 120,
    -         "reliability_score": 0.92,
    -         "source": "Bloomberg",
    -       },
          ],
    -     "total": 2,
    +     "total": 1,
        },
        "success": true,
      }

      506 |       const response = await request(app).get("/news/sources").expect(200);
      507 |
    > 508 |       expect(response.body).toMatchObject({
          |                             ^
      509 |         success: true,
      510 |         data: {
      511 |           sources: expect.arrayContaining([

      at Object.toMatchObject (tests/unit/routes/news.test.js:508:29)

  ‚óè News Routes ‚Ä∫ GET /news/categories ‚Ä∫ should return news categories with sentiment data

    expect(received).toMatchObject(expected)

    - Expected  - 15
    + Received  +  7

      Object {
        "data": Object {
    -     "categories": ArrayContaining [
    -       ObjectContaining {
    -         "article_count": 75,
    -         "avg_impact": 0.8,
    -         "avg_sentiment": 0.65,
    -         "category": "technology",
    -         "sentiment_label": "positive",
    -       },
    -       ObjectContaining {
    -         "article_count": 60,
    -         "avg_impact": 0.7,
    -         "avg_sentiment": 0.45,
    -         "category": "finance",
    -         "sentiment_label": "positive",
    +     "categories": Array [
    +       Object {
    +         "article_count": null,
    +         "avg_impact": null,
    +         "avg_sentiment": null,
    +         "sentiment_label": "neutral",
            },
          ],
    -     "total": 2,
    +     "total": 1,
        },
        "success": true,
      }

      563 |       const response = await request(app).get("/news/categories").expect(200);
      564 |
    > 565 |       expect(response.body).toMatchObject({
          |                             ^
      566 |         success: true,
      567 |         data: {
      568 |           categories: expect.arrayContaining([

      at Object.toMatchObject (tests/unit/routes/news.test.js:565:29)

  ‚óè News Routes ‚Ä∫ GET /news/trending ‚Ä∫ should return trending topics

    expect(received).toMatchObject(expected)

    - Expected  - 30
    + Received  +  7

    @@ -1,37 +1,14 @@
      Object {
        "data": Object {
    -     "keywords": ArrayContaining [
    -       ObjectContaining {
    -         "avg_impact": 0.85,
    -         "avg_sentiment": 0.7,
    -         "frequency": 25,
    -         "keyword": "earnings",
    -         "sentiment_label": "positive",
    -       },
    -       ObjectContaining {
    -         "avg_impact": 0.9,
    -         "avg_sentiment": 0.3,
    -         "frequency": 20,
    -         "keyword": "federal reserve",
    -         "sentiment_label": "positive",
    -       },
    -     ],
    -     "symbols": ArrayContaining [
    -       ObjectContaining {
    -         "avg_impact": 0.8,
    -         "avg_sentiment": 0.75,
    -         "mention_count": 15,
    -         "sentiment_label": "positive",
    -         "symbol": "AAPL",
    -       },
    -       ObjectContaining {
    -         "avg_impact": 0.75,
    -         "avg_sentiment": -0.2,
    -         "mention_count": 12,
    -         "sentiment_label": "negative",
    -         "symbol": "TSLA",
    +     "keywords": Array [],
    +     "symbols": Array [
    +       Object {
    +         "avg_impact": null,
    +         "avg_sentiment": null,
    +         "mention_count": null,
    +         "sentiment_label": "neutral",
            },
          ],
          "timeframe": "24h",
        },
        "success": true,

      633 |         .expect(200);
      634 |
    > 635 |       expect(response.body).toMatchObject({
          |                             ^
      636 |         success: true,
      637 |         data: {
      638 |           timeframe: "24h",

      at Object.toMatchObject (tests/unit/routes/news.test.js:635:29)

  ‚óè News Routes ‚Ä∫ GET /news/feed ‚Ä∫ should return enhanced news feed

    expect(received).toMatchObject(expected)

    - Expected  - 16
    + Received  +  3

      Object {
    -   "data": ObjectContaining {
    -     "articles": Any<Array>,
    -     "summary": ObjectContaining {
    -       "avg_impact_score": Any<Number>,
    -       "sentiment_distribution": ObjectContaining {
    -         "negative": Any<Number>,
    -         "neutral": Any<Number>,
    -         "positive": Any<Number>,
    -       },
    -       "total_articles": Any<Number>,
    -     },
    -   },
        "filters": Object {
          "category": "technology",
    -     "sentiment_filter": "ALL",
    -     "source_filter": "ALL",
    -     "symbol": "ALL",
    +     "sentiment_filter": null,
    +     "source_filter": null,
    +     "symbol": null,
          "time_range": "24h",
        },
    -   "last_updated": Any<String>,
        "success": true,
      }

      682 |         .expect(200);
      683 |
    > 684 |       expect(response.body).toMatchObject({
          |                             ^
      685 |         success: true,
      686 |         data: expect.objectContaining({
      687 |           articles: expect.any(Array),

      at Object.toMatchObject (tests/unit/routes/news.test.js:684:29)

  ‚óè News Routes ‚Ä∫ GET /news/feed ‚Ä∫ should return fallback data on error

    expect(received).toMatchObject(expected)

    - Expected  - 4
    + Received  + 0

      Object {
    -   "data": Any<Object>,
    -   "error": Any<String>,
    -   "fallback": true,
    -   "last_updated": Any<String>,
        "success": true,
      }

      727 |         .expect(200);
      728 |
    > 729 |       expect(response.body).toMatchObject({
          |                             ^
      730 |         success: true,
      731 |         data: expect.any(Object),
      732 |         fallback: true,

      at Object.toMatchObject (tests/unit/routes/news.test.js:729:29)

  ‚óè News Routes ‚Ä∫ GET /news/economic-calendar ‚Ä∫ should return economic calendar data

    expect(received).toMatchObject(expected)

    - Expected  - 10
    + Received  +  0

      Object {
    -   "data": ObjectContaining {
    -     "events": Any<Array>,
    -     "summary": ObjectContaining {
    -       "countries_covered": Any<Array>,
    -       "high_impact_events": Any<Number>,
    -       "next_major_event": Any<Object>,
    -       "total_events": Any<Number>,
    -     },
    -   },
        "filters": Object {
          "country": "US",
          "date_range": "7d",
          "importance": "high",
        },
    -   "last_updated": Any<String>,
        "success": true,
      }

      748 |         .expect(200);
      749 |
    > 750 |       expect(response.body).toMatchObject({
          |                             ^
      751 |         success: true,
      752 |         data: expect.objectContaining({
      753 |           events: expect.any(Array),

      at Object.toMatchObject (tests/unit/routes/news.test.js:750:29)

  ‚óè News Routes ‚Ä∫ GET /news/sentiment-dashboard ‚Ä∫ should return sentiment dashboard data

    expect(received).toContain(expected) // indexOf

    Expected value: 501
    Received array: [200, 503]

      779 |       // Expect 503 when news tables don't exist (test environment)
      780 |       // or 200 when they do exist with data
    > 781 |       expect([200, 503]).toContain(response.status);
          |                          ^
      782 |
      783 |       if (response.status === 200) {
      784 |         expect(response.body).toMatchObject({

      at Object.toContain (tests/unit/routes/news.test.js:781:26)

  ‚óè News Routes ‚Ä∫ GET /news/search ‚Ä∫ should return search results for valid query

    expect(received).toMatchObject(expected)

    - Expected  - 33
    + Received  +  5

      Object {
        "data": Object {
    -     "articles": ArrayContaining [
    -       ObjectContaining {
    -         "headline": "Apple reports strong earnings",
    -         "id": 1,
    -         "matching_snippet": Any<String>,
    -         "search_relevance_score": Any<Number>,
    -         "symbol": "AAPL",
    -         "time_ago": Any<String>,
    +     "articles": Array [
    +       Object {
    +         "relatedTickers": Array [
    +           "SEARCH",
    +         ],
            },
          ],
    -     "estimated_total": 1,
    -     "search_metadata": ObjectContaining {
    -       "query": "Apple earnings",
    -       "relevance_scores": ObjectContaining {
    -         "avg": Any<Number>,
    -         "max": Any<Number>,
    -         "min": Any<Number>,
        },
    -       "suggestions": Any<Array>,
    -     },
    -     "search_statistics": ObjectContaining {
    -       "sentiment_distribution": Any<Object>,
    -       "total_matches": 1,
    -       "unique_categories": 1,
    -       "unique_sources": 1,
    -     },
    -     "total_results": 1,
    -   },
    -   "filters": ObjectContaining {
    -     "category": "all",
    -     "query": "Apple earnings",
    -     "sentiment": "all",
    -     "timeframe": "30d",
    -   },
    -   "methodology": Any<Object>,
    -   "success": true,
      }

      856 |         .expect(200);
      857 |
    > 858 |       expect(response.body).toMatchObject({
          |                             ^
      859 |         success: true,
      860 |         data: {
      861 |           articles: expect.arrayContaining([

      at Object.toMatchObject (tests/unit/routes/news.test.js:858:29)

  ‚óè News Routes ‚Ä∫ GET /news/search ‚Ä∫ should require search query parameter

    expected 400 "Bad Request", got 200 "OK"

      898 |
      899 |     test("should require search query parameter", async () => {
    > 900 |       const response = await request(app).get("/news/search").expect(400);
          |                                                               ^
      901 |
      902 |       expect(response.body).toMatchObject({
      903 |         success: false,

      at Object.expect (tests/unit/routes/news.test.js:900:63)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/search ‚Ä∫ should handle empty search results

    expect(received).toMatchObject(expected)

    - Expected  - 8
    + Received  + 5

      Object {
        "data": Object {
    -     "articles": Array [],
    -     "search_metadata": Object {
    -       "query": "nonexistent",
    -       "suggestions": ArrayContaining [
    -         "Try broader search terms",
    -         "Check spelling and try synonyms",
    +     "articles": Array [
    +       Object {
    +         "relatedTickers": Array [
    +           "SEARCH",
              ],
            },
    -     "total_results": 0,
    +     ],
        },
    -   "success": true,
      }

      916 |         .expect(200);
      917 |
    > 918 |       expect(response.body).toMatchObject({
          |                             ^
      919 |         success: true,
      920 |         data: {
      921 |           articles: [],

      at Object.toMatchObject (tests/unit/routes/news.test.js:918:29)

  ‚óè News Routes ‚Ä∫ GET /news/search ‚Ä∫ should handle database errors gracefully

    expected 500 "Internal Server Error", got 200 "OK"

      937 |       const response = await request(app)
      938 |         .get("/news/search?query=test")
    > 939 |         .expect(500);
          |          ^
      940 |
      941 |       expect(response.body).toMatchObject({
      942 |         success: false,

      at Object.expect (tests/unit/routes/news.test.js:939:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè News Routes ‚Ä∫ GET /news/search ‚Ä∫ should support filtering parameters

    expect(received).toMatchObject(expected)

    Matcher error: received value must be a non-null object

    Received has value: undefined

      981 |         .expect(200);
      982 |
    > 983 |       expect(response.body.filters).toMatchObject({
          |                                     ^
      984 |         query: "AAPL",
      985 |         category: "earnings",
      986 |         sentiment: "positive",

      at Object.toMatchObject (tests/unit/routes/news.test.js:983:37)

FAIL tests/unit/routes/strategyBuilder.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      AI strategy generation request { userId: 'test-user-123', prompt: 'short', symbolCount: 2 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      AI strategy generation request {
        userId: 'test-user-123',
        prompt: 'Create a momentum strategy for AAPL',
        symbolCount: 0
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      AI strategy generation request { userId: 'test-user-123', prompt: '', symbolCount: 2 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      AI strategy generation request {
        userId: 'test-user-123',
        prompt: 'Create a momentum strategy',
        symbolCount: 0
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      AI strategy generation request { userId: 'test-user-123', prompt: 'Test strategy', symbolCount: 1 }

      at log (routes/strategyBuilder.js:167:13)

    console.error
      AI strategy generation error {
        userId: 'test-user-123',
        error: "Cannot read properties of undefined (reading 'success')"
      }

      219 |     }
      220 |   } catch (err) {
    > 221 |     console.error("AI strategy generation error", {
          |             ^
      222 |       userId: req.user?.id,
      223 |       error: err.message,
      224 |     });

      at error (routes/strategyBuilder.js:221:13)

    console.log
      AI strategy generation request {
        userId: 'test-user-123',
        prompt: 'Create a test strategy',
        symbolCount: 1
      }

      at log (routes/strategyBuilder.js:167:13)

    console.error
      AI strategy generation error {
        userId: 'test-user-123',
        error: "Cannot read properties of undefined (reading 'success')"
      }

      219 |     }
      220 |   } catch (err) {
    > 221 |     console.error("AI strategy generation error", {
          |             ^
      222 |       userId: req.user?.id,
      223 |       error: err.message,
      224 |     });

      at error (routes/strategyBuilder.js:221:13)

    console.log
      AI strategy generation request { userId: 'test-user-123', prompt: 'short', symbolCount: 0 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/ai-generate ‚Ä∫ should return error when no symbols provided

    expect(received).toBe(expected) // Object.is equality

    Expected: "No symbols provided for strategy not found"
    Received: "No symbols provided for strategy"

      130 |
      131 |       expect(response.body.success).toBe(false);
    > 132 |       expect(response.body.error).toBe(
          |                                   ^
      133 |         "No symbols provided for strategy not found"
      134 |       );
      135 |     });

      at Object.toBe (tests/unit/routes/strategyBuilder.test.js:132:35)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/ai-generate ‚Ä∫ should use default symbols array when not provided

    expect(received).toBe(expected) // Object.is equality

    Expected: "No symbols provided for strategy not found"
    Received: "No symbols provided for strategy"

      189 |         .expect(400);
      190 |
    > 191 |       expect(response.body.error).toBe(
          |                                   ^
      192 |         "No symbols provided for strategy not found"
      193 |       );
      194 |     });

      at Object.toBe (tests/unit/routes/strategyBuilder.test.js:191:35)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/validate ‚Ä∫ should validate strategy successfully

    expected 200 "OK", got 500 "Internal Server Error"

      215 |         .post("/api/strategies/validate")
      216 |         .send({ strategy: validStrategy })
    > 217 |         .expect(200);
          |          ^
      218 |
      219 |       expect(response.body).toEqual({
      220 |         success: true,

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:217:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/validate ‚Ä∫ should handle validation with errors and warnings

    expected 200 "OK", got 500 "Internal Server Error"

      280 |         .post("/api/strategies/validate")
      281 |         .send({ strategy: validStrategy })
    > 282 |         .expect(200);
          |          ^
      283 |
      284 |       expect(response.body.validation.isValid).toBe(false);
      285 |       expect(response.body.validation.errors).toHaveLength(2);

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:282:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/run-ai-strategy ‚Ä∫ should return 501 for backtest (not implemented)

    expected 501 "Not Implemented", got 200 "OK"

      306 |         .post("/api/strategies/run-ai-strategy")
      307 |         .send(validBacktestRequest)
    > 308 |         .expect(501);
          |          ^
      309 |
      310 |       expect(response.body.success).toBe(false);
      311 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:308:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/run-ai-strategy ‚Ä∫ should handle missing symbols

    expected 400 "Bad Request", got 500 "Internal Server Error"

      351 |         .post("/api/strategies/run-ai-strategy")
      352 |         .send(requestWithoutSymbols)
    > 353 |         .expect(400);
          |          ^
      354 |
      355 |       expect(response.body).toEqual({
      356 |         success: false,

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:353:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/deploy-hft ‚Ä∫ should return 501 for HFT deployment (not implemented)

    expected 501 "Not Implemented", got 500 "Internal Server Error"

      383 |         .post("/api/strategies/deploy-hft")
      384 |         .send(validDeployRequest)
    > 385 |         .expect(501);
          |          ^
      386 |
      387 |       expect(response.body.success).toBe(false);
      388 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:385:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/available-symbols ‚Ä∫ should return available symbols successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true ORDER BY symbol LIMIT 100"
    Received: "SELECT DISTINCT symbol FROM stocks WHERE market_cap > 0 ORDER BY symbol LIMIT 100"

    Number of calls: 1

      493 |       });
      494 |
    > 495 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      496 |         "SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true ORDER BY symbol LIMIT 100"
      497 |       );
      498 |     });

      at Object.toHaveBeenCalledWith (tests/unit/routes/strategyBuilder.test.js:495:25)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/available-symbols ‚Ä∫ should handle database error

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    -   "error": "Failed to retrieve available symbols",
    +   "details": "Database connection failed",
    +   "error": "Available symbols query failed",
        "success": false,
    +   "timestamp": "2025-09-26T01:27:38.199Z",
      }

      505 |         .expect(500);
      506 |
    > 507 |       expect(response.body).toEqual({
          |                             ^
      508 |         success: false,
      509 |         error: "Failed to retrieve available symbols",
      510 |       });

      at Object.toEqual (tests/unit/routes/strategyBuilder.test.js:507:29)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/available-symbols ‚Ä∫ should handle null database result

    expected 503 "Service Unavailable", got 500 "Internal Server Error"

      516 |       const response = await request(app)
      517 |         .get("/api/strategies/available-symbols")
    > 518 |         .expect(503);
          |          ^
      519 |
      520 |       expect(response.body.success).toBe(false);
      521 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:518:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/list ‚Ä∫ should return 501 for user strategies list (not implemented)

    expected 501 "Not Implemented", got 200 "OK"

      543 |       const response = await request(app)
      544 |         .get("/api/strategies/list")
    > 545 |         .expect(501);
          |          ^
      546 |
      547 |       expect(response.body.success).toBe(false);
      548 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:545:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/list ‚Ä∫ should handle query parameters

    expected 501 "Not Implemented", got 200 "OK"

      556 |           "/api/strategies/list?includeBacktests=true&includeDeployments=true"
      557 |         )
    > 558 |         .expect(501);
          |          ^
      559 |
      560 |       expect(response.body.success).toBe(false);
      561 |     });

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:558:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/templates ‚Ä∫ should handle missing strategy templates

    expect(received).toEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 26

    - Array []
    + Array [
    +   Object {
    +     "aiEnhanced": true,
    +     "complexity": "medium",
    +     "description": "Mean reversion strategy",
    +     "id": "meanReversion",
    +     "name": "Mean reversion strategy",
    +     "parameters": Array [
    +       "period",
    +       "threshold",
    +     ],
    +     "type": "meanReversion",
    +   },
    +   Object {
    +     "aiEnhanced": true,
    +     "complexity": "high",
    +     "description": "Momentum strategy",
    +     "id": "momentum",
    +     "name": "Momentum strategy",
    +     "parameters": Array [
    +       "window",
    +       "signal",
    +     ],
    +     "type": "momentum",
    +   },
    + ]

      598 |
      599 |       expect(response.body.success).toBe(true);
    > 600 |       expect(response.body.templates).toEqual([]);
          |                                       ^
      601 |       expect(response.body.count).toBe(0);
      602 |     });
      603 |   });

      at Object.toEqual (tests/unit/routes/strategyBuilder.test.js:600:39)

  ‚óè Strategy Builder Routes ‚Ä∫ Error handling and middleware ‚Ä∫ should log user actions properly

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      644 |       // Logger should be called for the request
      645 |       // Since we're mocking the logger, we can't easily verify this without more complex setup
    > 646 |       expect(mockAiGenerator.generateFromNaturalLanguage).toHaveBeenCalled();
          |                                                           ^
      647 |     });
      648 |   });
      649 |

      at Object.toHaveBeenCalled (tests/unit/routes/strategyBuilder.test.js:646:59)

FAIL tests/unit/routes/commodities.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'LIMIT must not be negative',
        query: '\n' +
          '      SELECT\n' +
          '        id,\n' +
          '        title,\n' +
          '        publisher as source,\n' +
          '        link as url,\n' +
          '        p...',
        params: '2 parameters',
        code: '2201W'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/commodities.js:756:20

    console.error
      Commodities news error: error: LIMIT must not be negative
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/commodities.js:756:20 {
        length: 90,
        severity: 'ERROR',
        code: '2201W',
        detail: undefined,
        hint: undefined,
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'nodeLimit.c',
        line: '398',
        routine: 'recompute_limits'
      }

      775 |     });
      776 |   } catch (error) {
    > 777 |     console.error("Commodities news error:", error);
          |             ^
      778 |     res.status(500).json({
      779 |       success: false,
      780 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:777:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Commodities Routes ‚Ä∫ GET /api/commodities/ ‚Ä∫ should return commodities API overview

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -10,6 +10,7 @@
          "status": "operational",
          "system": "Commodities API",
          "timestamp": Any<String>,
          "version": "1.0.0",
        },
    +   "success": true,
      }

      50 |       const response = await request(app).get("/api/commodities/").expect(200);
      51 |
    > 52 |       expect(response.body).toEqual({
         |                             ^
      53 |         data: {
      54 |           system: "Commodities API",
      55 |           version: "1.0.0",

      at Object.toEqual (tests/unit/routes/commodities.test.js:52:29)

  ‚óè Commodities Routes ‚Ä∫ GET /api/commodities/news ‚Ä∫ should include required news fields

    expect(received).toHaveProperty(path)

    Expected path: "summary"
    Received path: []

    Received value: {"category": "commodities", "id": 7, "publishedAt": "2025-09-22T04:00:05.183Z", "source": "WSJ", "symbol": "GLD", "title": "Gold Prices Surge on Economic Uncertainty", "url": "https://example.com/4"}

      438 |         const newsItem = response.body.data[0];
      439 |         expect(newsItem).toHaveProperty("title");
    > 440 |         expect(newsItem).toHaveProperty("summary");
          |                          ^
      441 |       }
      442 |     });
      443 |

      at Object.toHaveProperty (tests/unit/routes/commodities.test.js:440:26)

  ‚óè Commodities Routes ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle negative limit values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      570 |
      571 |       // Handle different possible status codes
    > 572 |       expect(response.status).toBe(200);
          |                               ^
      573 |
      574 |       if (response.status === 200) {
      575 |         // Should use default limit

      at Object.toBe (tests/unit/routes/commodities.test.js:572:31)

FAIL tests/unit/routes/sentiment.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 1d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 3d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 14d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 30d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: invalid_period

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: aapl, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: INVALID, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.error
      Sentiment analysis query failed: Database connection failed

      87 |       );
      88 |     } catch (e) {
    > 89 |       console.error('Sentiment analysis query failed:', e.message);
         |               ^
      90 |
      91 |       // Return mock data for tests when tables don't exist properly
      92 |       sentimentResult = {

      at error (routes/sentiment.js:89:15)

    console.log
      üòä Sentiment analysis for history, period: 7d

      at log (routes/sentiment.js:1831:13)

    console.log
      üòä Sentiment analysis for history, period: 7d

      at log (routes/sentiment.js:1831:13)

    console.log
      üì± Social sentiment overview requested - not implemented

      at log (routes/sentiment.js:299:13)

    console.log
      üì± Social sentiment overview requested - not implemented

      at log (routes/sentiment.js:299:13)

    console.log
      üì± Social sentiment overview requested - not implemented

      at log (routes/sentiment.js:299:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìà Trending sentiment requested - not implemented

      at log (routes/sentiment.js:1085:13)

    console.log
      üìä Market sentiment analysis requested, period: 7d

      at log (routes/sentiment.js:1796:13)

    console.log
      üìä Market sentiment analysis requested, period: 7d

      at log (routes/sentiment.js:1796:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL'; DROP TABLE sentiment; --, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: invalid-symbol-format!@#$%, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.error
      Sentiment analysis query failed: Query timeout

      87 |       );
      88 |     } catch (e) {
    > 89 |       console.error('Sentiment analysis query failed:', e.message);
         |               ^
      90 |
      91 |       // Return mock data for tests when tables don't exist properly
      92 |       sentimentResult = {

      at error (routes/sentiment.js:89:15)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.error
      Sentiment analysis error: TypeError: Cannot read properties of null (reading 'rows')
          at rows (/home/stocks/algo/webapp/lambda/routes/sentiment.js:125:43)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)

      263 |     });
      264 |   } catch (error) {
    > 265 |     console.error("Sentiment analysis error:", error);
          |             ^
      266 |     res.json({
      267 |       success: false,
      268 |       error: "Failed to perform sentiment analysis",

      at error (routes/sentiment.js:265:13)

    console.log
      üòä Sentiment analysis requested for symbol: AAPL, period: 7d

      at log (routes/sentiment.js:47:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment ‚Ä∫ should return sentiment API information without authentication

    expect(received).toHaveProperty(path, value)

    Expected path: "status"
    Received path: []

    Expected value: "operational"
    Received value: {"data": {"endpoints": ["analysis", "trends", "social", "news"], "service": "sentiment", "status": "operational"}, "message": "Sentiment API - Ready", "success": true, "timestamp": "2025-09-26T01:27:38.444Z"}

      85 |       expect(response.status).toBe(200);
      86 |       expect(response.body).toHaveProperty("message", "Sentiment API - Ready");
    > 87 |       expect(response.body).toHaveProperty("status", "operational");
         |                             ^
      88 |       expect(response.body).toHaveProperty("timestamp");
      89 |
      90 |       // Verify timestamp is a valid ISO string

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:87:29)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/analysis ‚Ä∫ should require symbol parameter

    expect(received).toHaveProperty(path, value)

    Expected path: "message"

    Expected value: "Please provide a symbol using ?symbol=TICKER"
    Received value: "Please provide a symbol parameter (e.g. ?symbol=AAPL)"

      104 |         "Symbol parameter required"
      105 |       );
    > 106 |       expect(response.body).toHaveProperty(
          |                             ^
      107 |         "message",
      108 |         "Please provide a symbol using ?symbol=TICKER"
      109 |       );

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:106:29)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/analysis ‚Ä∫ should return sentiment analysis with valid symbol

    expect(received).toHaveProperty(path, value)

    Expected path: "sentiment_score"

    Expected value: 0.75
    Received value: 0

      138 |       expect(response.body).toHaveProperty("data");
      139 |       expect(response.body.data).toHaveProperty("symbol", "AAPL");
    > 140 |       expect(response.body.data).toHaveProperty("sentiment_score", 0.75);
          |                                  ^
      141 |       expect(response.body.data).toHaveProperty("total_mentions", 80);
      142 |       expect(mockQuery).toHaveBeenCalledWith(
      143 |         expect.stringContaining("sentiment_analysis"),

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:140:34)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/analysis ‚Ä∫ should handle empty sentiment data

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 200

      214 |         .query({ symbol: "INVALID" });
      215 |
    > 216 |       expect(response.status).toBe(404);
          |                               ^
      217 |       expect(response.body).toHaveProperty("success", false);
      218 |       expect(response.body.error).toContain("No sentiment data found");
      219 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:216:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/analysis ‚Ä∫ should handle database query errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      227 |         .query({ symbol: "AAPL" });
      228 |
    > 229 |       expect(response.status).toBe(500);
          |                               ^
      230 |       expect(response.body).toHaveProperty("success", false);
      231 |       expect(response.body.error).toBeDefined();
      232 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:229:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/history ‚Ä∫ should return sentiment history for symbol

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {"metadata": {"data_quality": "simulated", "last_updated": "2025-09-26T01:27:38.479Z", "period": "7d", "period_days": 7, "symbol": "HISTORY"}, "sentiment": {"confidence": 60, "last_updated": "2025-09-26T01:27:38.479Z", "metrics": {"mention_velocity": 85, "negative_mentions": 91, "neutral_mentions": 120, "positive_mentions": 508, "sentiment_volatility": 0.17, "total_mentions": 600}, "overall_sentiment": 0.85, "period": "7d", "sentiment_label": "Bullish", "sources": {"discord": 60, "reddit": 180, "stocktwits": 90, "twitter": 270}, "symbol": "HISTORY", "trending_keywords": ["history", "bullish", "earnings", "price", "target"]}, "success": true}

      262 |       expect(response.status).toBe(200);
      263 |       expect(response.body).toHaveProperty("success", true);
    > 264 |       expect(response.body).toHaveProperty("data");
          |                             ^
      265 |       expect(response.body.data).toHaveProperty("symbol", "GOOGL");
      266 |       expect(response.body.data).toHaveProperty("history");
      267 |       expect(Array.isArray(response.body.data.history)).toBe(true);

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:264:29)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/history ‚Ä∫ should handle history limit parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "LIMIT", ArrayContaining ["AAPL", 50]

    Number of calls: 0

      281 |
      282 |       expect(response.status).toBe(200);
    > 283 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      284 |         expect.stringContaining("LIMIT"),
      285 |         expect.arrayContaining(["AAPL", 50])
      286 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/sentiment.test.js:283:25)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/market ‚Ä∫ should return overall market sentiment

    expect(received).toHaveProperty(path, value)

    Expected path: "overall_sentiment"

    Expected value: 0.62
    Received value: 0.361

      507 |       expect(response.body).toHaveProperty("success", true);
      508 |       expect(response.body).toHaveProperty("data");
    > 509 |       expect(response.body.data).toHaveProperty("overall_sentiment", 0.62);
          |                                  ^
      510 |       expect(response.body.data).toHaveProperty(
      511 |         "market_mood",
      512 |         "cautiously_optimistic"

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:509:34)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ GET /sentiment/market ‚Ä∫ should handle empty market sentiment data

    expect(received).toHaveProperty(path, value)

    Expected path: "message"
    Received path: []

    Expected value: "No market sentiment data available"
    Received value: {"fear_greed_index": 90, "market_cap_sentiment": {"large_cap": 0.645, "mid_cap": 0.508, "small_cap": 0.293}, "overall_sentiment": 0.347, "period": "7d", "vix_level": 27.36}

      526 |       expect(response.status).toBe(200);
      527 |       expect(response.body).toHaveProperty("success", true);
    > 528 |       expect(response.body.data).toHaveProperty(
          |                                  ^
      529 |         "message",
      530 |         "No market sentiment data available"
      531 |       );

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:528:34)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should sanitize symbol parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining ["AAPL'; DROP TABLE sentiment; --"]
    Received: "
            SELECT
              a.symbol,
              a.date,
              a.recommendation_mean,
              a.price_target_vs_current,
              s.news_sentiment_score as sentiment,
              s.reddit_sentiment_score,
              s.search_volume_index,
              s.news_article_count
            FROM analyst_sentiment_analysis a
            LEFT JOIN social_sentiment_analysis s ON a.symbol = s.symbol AND a.date = s.date
            WHERE a.symbol = $1
              AND a.date >= CURRENT_DATE - INTERVAL '$2 days'
            ORDER BY a.date DESC
            LIMIT 50
            ", ["AAPL'; DROP TABLE SENTIMENT; --", 7]

    Number of calls: 1

      543 |       expect(response.status).toBe(200);
      544 |       // Symbol should be sanitized and used safely in prepared statement
    > 545 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      546 |         expect.any(String),
      547 |         expect.arrayContaining(["AAPL'; DROP TABLE sentiment; --"])
      548 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/sentiment.test.js:545:25)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should handle invalid symbol format

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      554 |         .query({ symbol: "invalid-symbol-format!@#$%" });
      555 |
    > 556 |       expect(response.status).toBe(400);
          |                               ^
      557 |       expect(response.body).toHaveProperty("success", false);
      558 |       expect(response.body.error).toContain("Invalid symbol format");
      559 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:556:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should handle extremely long symbol parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      566 |         .query({ symbol: longSymbol });
      567 |
    > 568 |       expect(response.status).toBe(400);
          |                               ^
      569 |       expect(response.body).toHaveProperty("success", false);
      570 |       expect(response.body.error).toContain("Symbol too long");
      571 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:568:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle database connection timeout

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      609 |         .query({ symbol: "AAPL" });
      610 |
    > 611 |       expect(response.status).toBe(500);
          |                               ^
      612 |       expect(response.body).toHaveProperty("success", false);
      613 |       expect(response.body.error).toContain("timeout");
      614 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:611:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle malformed database results

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      621 |         .query({ symbol: "AAPL" });
      622 |
    > 623 |       expect(response.status).toBe(500);
          |                               ^
      624 |       expect(response.body).toHaveProperty("success", false);
      625 |     });
      626 |

      at Object.toBe (tests/unit/routes/sentiment.test.js:623:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle sentiment calculation errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      644 |         .query({ symbol: "AAPL" });
      645 |
    > 646 |       expect(response.status).toBe(500);
          |                               ^
      647 |       expect(response.body).toHaveProperty("success", false);
      648 |       expect(response.body.error).toContain("Sentiment calculation failed");
      649 |     });

      at Object.toBe (tests/unit/routes/sentiment.test.js:646:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include metadata in sentiment responses

    expect(received).toHaveProperty(path)

    Expected path: "data"
    Received path: []

    Received value: {"details": "Cannot read properties of null (reading 'rows')", "error": "Failed to perform sentiment analysis", "success": false}

      667 |       if (response.status === 200) {
      668 |         expect(response.body).toHaveProperty("success");
    > 669 |         expect(response.body).toHaveProperty("data");
          |                               ^
      670 |       }
      671 |     });
      672 |

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:669:31)

  ‚óè Sentiment Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include analysis metadata

    expect(received).toHaveProperty(path, value)

    Expected path: "analysis_period"
    Received path: []

    Expected value: "7d"
    Received value: {"articles_analyzed": 1, "daily_sentiment": {"2025-09-26": {"negative": 0, "neutral": 1, "positive": 0, "total": 1}}, "period": "7d", "recent_articles": [{}], "sentiment_breakdown": {"negative": 0, "negative_pct": "0.0", "neutral": 1, "neutral_pct": "100.0", "positive": 0, "positive_pct": "0.0"}, "sentiment_grade": "Neutral", "sentiment_score": 0, "symbol": "AAPL", "trend": "stable"}

      692 |       expect(response.status).toBe(200);
      693 |       expect(response.body.data).toHaveProperty("symbol");
    > 694 |       expect(response.body.data).toHaveProperty("analysis_period", "7d");
          |                                  ^
      695 |       expect(response.body.data).toHaveProperty("last_updated");
      696 |     });
      697 |   });

      at Object.toHaveProperty (tests/unit/routes/sentiment.test.js:694:34)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=1&limit=10 HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?series=GDPC1 HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?limit=5 HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=-1&limit=10 HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=0&limit=10 HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=1&limit=-5 HTTP/1.1" 400 101 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=abc&limit=def HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?page=999999&limit=1000 HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/indicators HTTP/1.1" 404 245 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/indicators HTTP/1.1" 404 245 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/indicators?category=growth HTTP/1.1" 500 158 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?start_date=2025-01-01&end_date=2025-12-31 HTTP/1.1" 200 116 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?importance=high HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?importance=medium HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?importance=low HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?country=US HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?country=EU HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?country=JP HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?country=GB HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?country=CA HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/GDPC1 HTTP/1.1" 404 380 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/GDPC1?timeframe=1Y HTTP/1.1" 404 380 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/UNEMPLOYMENT_RATE?frequency=daily HTTP/1.1" 404 428 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/INVALID_SERIES HTTP/1.1" 404 416 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/compare?series=GDPC1,UNRATE,VIXCLS HTTP/1.1" 200 285 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/compare?series=GDPC1,UNRATE&normalize=true HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/compare?series=GDPC1,UNRATE&align_period=quarterly HTTP/1.1" 200 195 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/forecast?series=GDPC1 HTTP/1.1" 404 279 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/forecast?series=UNRATE&horizon=1Q HTTP/1.1" 404 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/forecast?series=UNRATE&confidence=0.95 HTTP/1.1" 404 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/correlations?series=FEDFUNDS HTTP/1.1" 200 244 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/correlations?series=UNRATE&timeframe=5Y HTTP/1.1" 200 242 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/GDP HTTP/1.1" 404 376 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/forecast?series=UNEMPLOYMENT_RATE HTTP/1.1" 404 303 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/indicators HTTP/1.1" 404 245 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?limit=1000 HTTP/1.1" 404 56 "-" "-"
FAIL tests/integration/routes/economic.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìä Economic indicators requested, category: all

      at log (routes/economic.js:263:13)

    console.log
      üìä Economic indicators requested, category: all

      at log (routes/economic.js:263:13)

    console.log
      üìä Economic indicators requested, category: growth

      at log (routes/economic.js:263:13)

    console.error
      Database query error: {
        error: 'column "category" does not exist',
        query: '\n' +
          '      SELECT DISTINCT \n' +
          '        series_id,\n' +
          "        'Economic Indicator' as name,\n" +
          "        'economic' ...",
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/economic.js:275:30

    console.error
      Economic indicators error: error: column "category" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/economic.js:275:30 {
        length: 109,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '266',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      321 |     });
      322 |   } catch (error) {
    > 323 |     console.error("Economic indicators error:", error);
          |             ^
      324 |     return res.status(500).json({
      325 |       success: false,
      326 |       error: "Failed to fetch economic indicators",

      at error (routes/economic.js:323:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: 2025-01-01, end: 2025-12-31, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: high, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: medium, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: low, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: US

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: EU

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: JP

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: GB

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: CA

      at log (routes/economic.js:337:13)

    console.log
      üìà Economic series requested - series: GDPC1, timeframe: undefined

      at log (routes/economic.js:386:13)

    console.log
      üìà Economic series requested - series: GDPC1, timeframe: 1Y

      at log (routes/economic.js:386:13)

    console.log
      üìà Economic series requested - series: UNEMPLOYMENT_RATE, timeframe: undefined

      at log (routes/economic.js:386:13)

    console.log
      üìà Economic series requested - series: INVALID_SERIES, timeframe: undefined

      at log (routes/economic.js:386:13)

    console.log
      ‚öñÔ∏è Economic comparison requested - series: GDPC1,UNRATE,VIXCLS

      at log (routes/economic.js:678:13)

    console.log
      ‚öñÔ∏è Economic comparison requested - series: GDPC1,UNRATE

      at log (routes/economic.js:678:13)

    console.log
      ‚öñÔ∏è Economic comparison requested - series: GDPC1,UNRATE

      at log (routes/economic.js:678:13)

    console.log
      üîÆ Economic forecast requested - series: GDPC1, horizon: undefined

      at log (routes/economic.js:470:13)

    console.log
      üîÆ Economic forecast requested - series: UNRATE, horizon: 1Q

      at log (routes/economic.js:470:13)

    console.log
      üîÆ Economic forecast requested - series: UNRATE, horizon: undefined

      at log (routes/economic.js:470:13)

    console.log
      üîó Economic correlations requested - series: FEDFUNDS, timeframe: undefined

      at log (routes/economic.js:568:13)

    console.log
      üîó Economic correlations requested - series: UNRATE, timeframe: 5Y

      at log (routes/economic.js:568:13)

    console.log
      üìä Economic indicators requested, category: all

      at log (routes/economic.js:263:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: undefined, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìà Economic series requested - series: GDP, timeframe: undefined

      at log (routes/economic.js:386:13)

    console.log
      üîÆ Economic forecast requested - series: UNEMPLOYMENT_RATE, horizon: undefined

      at log (routes/economic.js:470:13)

    console.log
      üìä Economic indicators requested, category: all

      at log (routes/economic.js:263:13)

    console.log
      üìÖ Economic calendar requested - start: invalid-date, end: undefined, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.error
      Database query error: {
        error: 'invalid input syntax for type date: "invalid-date"',
        query: '\n' +
          '      SELECT \n' +
          '        series_id as event_name,\n' +
          '        date as event_date,\n' +
          '        value as forecas...',
        params: '2 parameters',
        code: '22007'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/economic.js:342:28

    console.error
      Economic calendar error: error: invalid input syntax for type date: "invalid-date"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/economic.js:342:28 {
        length: 116,
        severity: 'ERROR',
        code: '22007',
        detail: undefined,
        hint: undefined,
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'datetime.c',
        line: '4026',
        routine: 'DateTimeParseError'
      }

      368 |     });
      369 |   } catch (error) {
    > 370 |     console.error("Economic calendar error:", error);
          |             ^
      371 |     return res.status(500).json({
      372 |       success: false,
      373 |       error: "Failed to fetch economic calendar data",

      at error (routes/economic.js:370:13)

    console.log
      üìÖ Economic calendar requested - start: undefined, end: 2025-13-40, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.error
      Database query error: {
        error: 'date/time field value out of range: "2025-13-40"',
        query: '\n' +
          '      SELECT \n' +
          '        series_id as event_name,\n' +
          '        date as event_date,\n' +
          '        value as forecas...',
        params: '2 parameters',
        code: '22008'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/economic.js:342:28

    console.error
      Economic calendar error: error: date/time field value out of range: "2025-13-40"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/economic.js:342:28 {
        length: 165,
        severity: 'ERROR',
        code: '22008',
        detail: undefined,
        hint: 'Perhaps you need a different "datestyle" setting.',
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'datetime.c',
        line: '3992',
        routine: 'DateTimeParseError'
      }

      368 |     });
      369 |   } catch (error) {
    > 370 |     console.error("Economic calendar error:", error);
          |             ^
      371 |     return res.status(500).json({
      372 |       success: false,
      373 |       error: "Failed to fetch economic calendar data",

      at error (routes/economic.js:370:13)

    console.log
      üìÖ Economic calendar requested - start: 2025-12-31, end: 2025-01-01, importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìÖ Economic calendar requested - start: , end: , importance: undefined, country: undefined

      at log (routes/economic.js:337:13)

    console.log
      üìà Economic series requested - series: UNEMPLOYMENT_RATE, timeframe: undefined

      at log (routes/economic.js:386:13)

    console.log
      ‚öñÔ∏è Economic comparison requested - series: GDP,UNEMPLOYMENT_RATE,FEDERAL_FUNDS_RATE,INFLATION_RATE

      at log (routes/economic.js:678:13)

    console.log
      üîÆ Economic forecast requested - series: GDP, horizon: 1Y

      at log (routes/economic.js:470:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic (Economic Data) ‚Ä∫ should return economic data with pagination

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      22 |       const response = await request(app).get("/api/economic");
      23 |
    > 24 |       expect(response.status).toBe(200);
         |                               ^
      25 |
      26 |       if (response.status === 200) {
      27 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/economic.integration.test.js:24:31)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic (Economic Data) ‚Ä∫ should handle page and limit parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      38 |       const response = await request(app).get("/api/economic?page=1&limit=10");
      39 |
    > 40 |       expect([200, 400, 500, 503].includes(response.status)).toBe(true);
         |                                                              ^
      41 |
      42 |       if (response.status === 200) {
      43 |         expect(response.body.pagination.page).toBe(1);

      at Object.toBe (tests/integration/routes/economic.integration.test.js:40:62)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic (Economic Data) ‚Ä∫ should filter by economic series

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      64 |         );
      65 |
    > 66 |         expect([200, 400].includes(response.status)).toBe(true);
         |                                                      ^
      67 |
      68 |         if (response.status === 200 && response.body.data.length > 0) {
      69 |           response.body.data.forEach((dataPoint) => {

      at Object.toBe (tests/integration/routes/economic.integration.test.js:66:54)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic (Economic Data) ‚Ä∫ should handle invalid pagination parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      100 |         const response = await request(app).get(`/api/economic?${params}`);
      101 |
    > 102 |         expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                                ^
      103 |       }
      104 |     });
      105 |   });

      at Object.toBe (tests/integration/routes/economic.integration.test.js:102:64)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/indicators ‚Ä∫ should return available economic indicators

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      109 |       const response = await request(app).get("/api/economic/indicators");
      110 |
    > 111 |       expect(response.status).toBe(200);
          |                               ^
      112 |
      113 |       if (response.status === 200) {
      114 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/economic.integration.test.js:111:31)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/indicators ‚Ä∫ should handle category filter for indicators

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      149 |         );
      150 |
    > 151 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      152 |       }
      153 |     });
      154 |   });

      at Object.toBe (tests/integration/routes/economic.integration.test.js:151:54)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/series/:seriesId ‚Ä∫ should return specific economic series data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      224 |         );
      225 |
    > 226 |         expect(response.status).toBe(200);
          |                                 ^
      227 |
      228 |         if (response.status === 200) {
      229 |           expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/economic.integration.test.js:226:33)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/series/:seriesId ‚Ä∫ should handle timeframe parameter for series

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      244 |         );
      245 |
    > 246 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      247 |       }
      248 |     });
      249 |

      at Object.toBe (tests/integration/routes/economic.integration.test.js:246:54)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/series/:seriesId ‚Ä∫ should handle frequency parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      256 |         );
      257 |
    > 258 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      259 |       }
      260 |     });
      261 |

      at Object.toBe (tests/integration/routes/economic.integration.test.js:258:54)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/forecast ‚Ä∫ should return economic forecasts

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      313 |       );
      314 |
    > 315 |       expect(response.status).toBe(200);
          |                               ^
      316 |
      317 |       if (response.status === 200) {
      318 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/economic.integration.test.js:315:31)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/forecast ‚Ä∫ should handle forecast horizon parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      332 |         );
      333 |
    > 334 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      335 |       }
      336 |     });
      337 |

      at Object.toBe (tests/integration/routes/economic.integration.test.js:334:54)

  ‚óè Economic Routes Integration Tests ‚Ä∫ GET /api/economic/forecast ‚Ä∫ should handle confidence level parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      341 |       );
      342 |
    > 343 |       expect([200, 400].includes(response.status)).toBe(true);
          |                                                    ^
      344 |     });
      345 |   });
      346 |

      at Object.toBe (tests/integration/routes/economic.integration.test.js:343:52)

  ‚óè Economic Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle concurrent requests to economic endpoints

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      388 |
      389 |       responses.forEach((response) => {
    > 390 |         expect(response.status).toBe(200);
          |                                 ^
      391 |       });
      392 |     });
      393 |

      at toBe (tests/integration/routes/economic.integration.test.js:390:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/routes/economic.integration.test.js:389:17)

  ‚óè Economic Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle large data requests gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      395 |       const response = await request(app).get("/api/economic?limit=1000");
      396 |
    > 397 |       expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                              ^
      398 |     });
      399 |
      400 |     test("should maintain response time consistency", async () => {

      at Object.toBe (tests/integration/routes/economic.integration.test.js:397:62)

  ‚óè Economic Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should maintain response time consistency

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      403 |       const responseTime = Date.now() - startTime;
      404 |
    > 405 |       expect(response.status).toBe(200);
          |                               ^
      406 |       expect(responseTime).toBeLessThan(15000);
      407 |     });
      408 |

      at Object.toBe (tests/integration/routes/economic.integration.test.js:405:31)

  ‚óè Economic Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle database connection failures gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      441 |       const response = await request(app).get("/api/economic");
      442 |
    > 443 |       expect(response.status).toBe(200);
          |                               ^
      444 |
      445 |       if (response.status >= 500) {
      446 |         expect(response.body).toHaveProperty("error");

      at Object.toBe (tests/integration/routes/economic.integration.test.js:443:31)

  ‚óè Economic Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle SQL injection attempts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      454 |       );
      455 |
    > 456 |       expect([200, 400].includes(response.status)).toBe(true);
          |                                                    ^
      457 |     });
      458 |
      459 |     test("should handle memory pressure with large datasets", async () => {

      at Object.toBe (tests/integration/routes/economic.integration.test.js:456:52)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/indicators HTTP/1.1" 404 245 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?start_date=invalid-date HTTP/1.1" 500 247 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?end_date=2025-13-40 HTTP/1.1" 500 245 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?start_date=2025-12-31&end_date=2025-01-01 HTTP/1.1" 200 116 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/calendar?start_date=&end_date= HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/series/UNEMPLOYMENT_RATE?limit=10 HTTP/1.1" 404 428 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic?series=GDP%27%3B%20DROP%20TABLE%20economic_data%3B%20-- HTTP/1.1" 404 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/compare?series=GDP,UNEMPLOYMENT_RATE,FEDERAL_FUNDS_RATE,INFLATION_RATE&timeframe=max HTTP/1.1" 200 568 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:38 +0000] "GET /api/economic/forecast?series=GDP&horizon=1Y HTTP/1.1" 404 277 "-" "-"
FAIL tests/unit/routes/liveData.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìä Live quotes requested for symbols: popular

      at log (routes/liveData.js:634:15)

    console.error
      Database query error: {
        error: 'column p.close_price does not exist',
        query: '\n' +
          '      WITH latest_prices AS (\n' +
          '        SELECT DISTINCT ON (p.symbol)\n' +
          '          p.symbol,\n' +
          '          p...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/liveData.js:723:21

    console.error
      Live quotes error: error: column p.close_price does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/liveData.js:723:21 {
        length: 112,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '100',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

    console.log
      üìä Live quotes requested for symbols: AAPL,MSFT,GOOGL

      at log (routes/liveData.js:634:15)

    console.error
      Database query error: {
        error: 'column p.close_price does not exist',
        query: '\n' +
          '      WITH latest_prices AS (\n' +
          '        SELECT DISTINCT ON (p.symbol)\n' +
          '          p.symbol,\n' +
          '          p...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/liveData.js:723:21

    console.error
      Live quotes error: error: column p.close_price does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/liveData.js:723:21 {
        length: 112,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '100',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

    console.log
      üìä Live quotes requested for symbols: popular

      at log (routes/liveData.js:634:15)

    console.error
      Database query error: {
        error: 'column p.close_price does not exist',
        query: '\n' +
          '      WITH latest_prices AS (\n' +
          '        SELECT DISTINCT ON (p.symbol)\n' +
          '          p.symbol,\n' +
          '          p...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/liveData.js:723:21

    console.error
      Live quotes error: error: column p.close_price does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/liveData.js:723:21 {
        length: 112,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '100',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:39.200Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Processing live data stream request","correlationId":"livedata-stream-1758850059200","userId":"dev-user-bypass","symbols":"default_watchlist","type":"quotes","format":"json","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:39.201Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Live data stream request completed (test mode)","correlationId":"livedata-stream-1758850059200","duration":1,"symbols":["AAPL","MSFT","GOOGL","AMZN","TSLA","NVDA","META"],"type":"quotes","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ GET /live-data/ ‚Ä∫ should return live data info

    expect(received).toHaveProperty(path)

    Expected path: "status"
    Received path: []

    Received value: {"data": {"authentication": "Required for most endpoints", "endpoints": ["/status - Get live data service status", "/stream/:symbols - Stream real-time data for symbols (requires auth)", "/latest/:symbols - Get latest data for symbols (requires auth)", "/health - Health check endpoint", "/metrics - Performance metrics"], "message": "Live Data API - Ready", "status": "operational", "timestamp": "2025-09-26T01:27:39.167Z"}, "success": true, "timestamp": "2025-09-26T01:27:39.167Z"}

      33 |
      34 |       expect(response.body).toHaveProperty("success");
    > 35 |       expect(response.body).toHaveProperty("status");
         |                             ^
      36 |     });
      37 |   });
      38 |

      at Object.toHaveProperty (tests/unit/routes/liveData.test.js:35:29)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ GET /live-data/quotes ‚Ä∫ should return live quotes with proper structure

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [401]

      67 |         expect(response.body.data.summary).toHaveProperty("losers");
      68 |       } else {
    > 69 |         expect([401]).toContain(response.status);
         |                       ^
      70 |         expect(response.body).toHaveProperty("success", false);
      71 |       }
      72 |     });

      at Object.toContain (tests/unit/routes/liveData.test.js:69:23)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ GET /live-data/stream ‚Ä∫ should setup SSE stream with proper headers

    expect(received).toBe(expected) // Object.is equality

    Expected: "text/event-stream"
    Received: "application/json; charset=utf-8"

      107 |       if (response.status === 200) {
      108 |         // Check SSE headers are set
    > 109 |         expect(response.headers["content-type"]).toBe("text/event-stream");
          |                                                  ^
      110 |         expect(response.headers["cache-control"]).toBe("no-cache");
      111 |         expect(response.headers["connection"]).toBe("keep-alive");
      112 |       } else {

      at Object.toBe (tests/unit/routes/liveData.test.js:109:50)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ GET /live-data/optimization ‚Ä∫ should return optimization status

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401]

      139 |         expect(Array.isArray(response.body.data.recommendations)).toBe(true);
      140 |       } else {
    > 141 |         expect([401]).toContain(response.status);
          |                       ^
      142 |       }
      143 |     });
      144 |   });

      at Object.toContain (tests/unit/routes/liveData.test.js:141:23)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ POST /live-data/admin/toggle-stream ‚Ä∫ should handle stream toggle for admin

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      157 |         expect(response.body.data).toHaveProperty("active_connections");
      158 |       } else {
    > 159 |         expect([401, 403]).toContain(response.status);
          |                            ^
      160 |       }
      161 |     });
      162 |

      at Object.toContain (tests/unit/routes/liveData.test.js:159:28)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ POST /live-data/admin/toggle-stream ‚Ä∫ should validate toggle request body

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      168 |
      169 |       if (response.status !== 401) {
    > 170 |         expect([400, 422]).toContain(response.status);
          |                            ^
      171 |         expect(response.body).toHaveProperty("success", false);
      172 |       }
      173 |     });

      at Object.toContain (tests/unit/routes/liveData.test.js:170:28)

  ‚óè Live Data Routes Unit Tests ‚Ä∫ POST /live-data/admin/clear-cache ‚Ä∫ should handle cache clearing for admin

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      186 |         expect(response.body.data).toHaveProperty("cleared_entries");
      187 |       } else {
    > 188 |         expect([401, 403]).toContain(response.status);
          |                            ^
      189 |       }
      190 |     });
      191 |   });

      at Object.toContain (tests/unit/routes/liveData.test.js:188:28)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 494 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/stocks/%3Cscript%3Ealert(%27xss%27)%3C/script%3E/details HTTP/1.1" 404 166 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/stocks/AAPL%27;%20DROP%20TABLE%20stocks;%20--/details HTTP/1.1" 404 163 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/stocks/../../etc/passwd HTTP/1.1" 404 133 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/nonexistent HTTP/1.1" 404 131 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/performance HTTP/1.1" 401 64 "-" "-"
FAIL tests/integration/middleware/security-headers.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      CORS not implemented - cross-origin requests allowed without explicit headers

      at Object.log (tests/integration/middleware/security-headers.integration.test.js:66:19)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Request size limiting not implemented - recommendation for DoS protection

      at Object.log (tests/integration/middleware/security-headers.integration.test.js:192:17)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Rate limiting not implemented - recommendation for DDoS protection

      at Object.log (tests/integration/middleware/security-headers.integration.test.js:254:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio performance endpoint called for user: dev-user-bypass, timeframe: invalid

      at log (routes/portfolio.js:1196:13)

    console.log
      üìä Retrieved 0 performance data points

      at log (routes/portfolio.js:1224:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Security Headers Integration ‚Ä∫ Request Validation Security ‚Ä∫ should sanitize request parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      201 |         .set("Authorization", "Bearer dev-bypass-token");
      202 |
    > 203 |       expect([400, 422]).toContain(response.status);
          |                          ^
      204 |
      205 |       // Should handle malicious input safely
      206 |       if (response.body && typeof response.body === "string") {

      at Object.toContain (tests/integration/middleware/security-headers.integration.test.js:203:26)

  ‚óè Security Headers Integration ‚Ä∫ Request Validation Security ‚Ä∫ should prevent SQL injection attempts

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      214 |         .set("Authorization", "Bearer dev-bypass-token");
      215 |
    > 216 |       expect([400, 422]).toContain(response.status);
          |                          ^
      217 |       expect(response.headers["content-type"]).toMatch(/application\/json/);
      218 |     });
      219 |

      at Object.toContain (tests/integration/middleware/security-headers.integration.test.js:216:26)

  ‚óè Security Headers Integration ‚Ä∫ Request Validation Security ‚Ä∫ should handle path traversal attempts

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      223 |         .set("Authorization", "Bearer dev-bypass-token");
      224 |
    > 225 |       expect([400, 422]).toContain(response.status);
          |                          ^
      226 |       expect(response.headers["content-type"]).toMatch(/application\/json/);
      227 |     });
      228 |   });

      at Object.toContain (tests/integration/middleware/security-headers.integration.test.js:225:26)

  ‚óè Security Headers Integration ‚Ä∫ Authentication Security ‚Ä∫ should reject requests with malformed authentication

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [400, 422]

      352 |           .set("Authorization", token);
      353 |
    > 354 |         expect([400, 422]).toContain(response.status);
          |                            ^
      355 |         expect(response.headers["content-type"]).toMatch(/application\/json/);
      356 |
      357 |         // Should not reflect malicious content in response

      at Object.toContain (tests/integration/middleware/security-headers.integration.test.js:354:28)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio/performance?timeframe=invalid&detailed=true&complex=true HTTP/1.1" 200 456 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:39 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "Mozilla/5.0 TestAgent"
FAIL tests/unit/routes/recommendations.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should return recommendations with mocked data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      62 |       const response = await request(app).get("/recommendations");
      63 |
    > 64 |       expect(response.status).toBe(200);
         |                               ^
      65 |       expect(response.body).toHaveProperty("success", true);
      66 |       expect(response.body).toHaveProperty("recommendations");
      67 |       expect(response.body).toHaveProperty("summary");

      at Object.toBe (tests/unit/routes/recommendations.test.js:64:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle query parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      106 |       });
      107 |
    > 108 |       expect(response.status).toBe(200);
          |                               ^
      109 |       expect(response.body).toHaveProperty("success", true);
      110 |       expect(response.body.filters).toHaveProperty("symbol", "AAPL");
      111 |       expect(response.body.filters).toHaveProperty("category", "buy");

      at Object.toBe (tests/unit/routes/recommendations.test.js:108:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should include comprehensive troubleshooting information

    expect(received).toHaveProperty(path)

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      119 |       const response = await request(app).get("/recommendations");
      120 |
    > 121 |       expect(response.body.troubleshooting).toHaveProperty("suggestion");
          |                                             ^
      122 |       expect(response.body.troubleshooting).toHaveProperty("required_setup");
      123 |       expect(response.body.troubleshooting).toHaveProperty("status");
      124 |       expect(Array.isArray(response.body.troubleshooting.required_setup)).toBe(

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:121:45)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle different category parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      141 |           .query({ category });
      142 |
    > 143 |         expect(response.status).toBe(501);
          |                                 ^
      144 |         expect(response.body.filters).toHaveProperty("category", category);
      145 |         expect(response.body).toHaveProperty("success", false);
      146 |       }

      at Object.toBe (tests/unit/routes/recommendations.test.js:143:33)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should default to all category

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      152 |         .query({ symbol: "AAPL" });
      153 |
    > 154 |       expect(response.status).toBe(501);
          |                               ^
      155 |       expect(response.body.filters).toHaveProperty("category", "all"); // default value
      156 |     });
      157 |

      at Object.toBe (tests/unit/routes/recommendations.test.js:154:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle different timeframe parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      164 |           .query({ timeframe });
      165 |
    > 166 |         expect(response.status).toBe(501);
          |                                 ^
      167 |         expect(response.body.filters).toHaveProperty("timeframe", timeframe);
      168 |         expect(response.body).toHaveProperty("success", false);
      169 |       }

      at Object.toBe (tests/unit/routes/recommendations.test.js:166:33)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle analyst filter parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      175 |         .query({ analyst: "morgan_stanley" });
      176 |
    > 177 |       expect(response.status).toBe(501);
          |                               ^
      178 |       expect(response.body.filters).toHaveProperty("analyst", "morgan_stanley");
      179 |       expect(response.body).toHaveProperty("success", false);
      180 |     });

      at Object.toBe (tests/unit/routes/recommendations.test.js:177:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle limit parameter and parse as integer

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      185 |         .query({ limit: "100" });
      186 |
    > 187 |       expect(response.status).toBe(501);
          |                               ^
      188 |       expect(response.body.filters).toHaveProperty("limit", 100); // Should be parsed as number
      189 |       expect(response.body).toHaveProperty("success", false);
      190 |     });

      at Object.toBe (tests/unit/routes/recommendations.test.js:187:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle default limit parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      193 |       const response = await request(app).get("/recommendations");
      194 |
    > 195 |       expect(response.status).toBe(501);
          |                               ^
      196 |       expect(response.body.filters).toHaveProperty("limit", 20); // default value
      197 |     });
      198 |

      at Object.toBe (tests/unit/routes/recommendations.test.js:195:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle symbol parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      202 |         .query({ symbol: "GOOGL" });
      203 |
    > 204 |       expect(response.status).toBe(501);
          |                               ^
      205 |       expect(response.body).toHaveProperty("symbol", "GOOGL");
      206 |       expect(response.body).toHaveProperty("success", false);
      207 |     });

      at Object.toBe (tests/unit/routes/recommendations.test.js:204:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ GET /recommendations ‚Ä∫ should handle no symbol parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      210 |       const response = await request(app).get("/recommendations");
      211 |
    > 212 |       expect(response.status).toBe(501);
          |                               ^
      213 |       expect(response.body).toHaveProperty("symbol", null);
      214 |       expect(response.body).toHaveProperty("success", false);
      215 |     });

      at Object.toBe (tests/unit/routes/recommendations.test.js:212:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle implementation errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      257 |
      258 |       // Should still return the not implemented response
    > 259 |       expect(response.status).toBe(501);
          |                               ^
      260 |       expect(response.body).toHaveProperty("success", false);
      261 |
      262 |       // Restore console.error

      at Object.toBe (tests/unit/routes/recommendations.test.js:259:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle malformed query parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      271 |       });
      272 |
    > 273 |       expect(response.status).toBe(501);
          |                               ^
      274 |       expect(response.body).toHaveProperty("success", false);
      275 |       expect(response.body.filters).toHaveProperty("limit", NaN); // parseInt of invalid string
      276 |       expect(response.body.filters).toHaveProperty(

      at Object.toBe (tests/unit/routes/recommendations.test.js:273:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle special characters in parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      287 |       });
      288 |
    > 289 |       expect(response.status).toBe(501);
          |                               ^
      290 |       expect(response.body).toHaveProperty("success", false);
      291 |       expect(response.body).toHaveProperty(
      292 |         "symbol",

      at Object.toBe (tests/unit/routes/recommendations.test.js:289:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle empty string parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 401

      307 |       });
      308 |
    > 309 |       expect(response.status).toBe(501);
          |                               ^
      310 |       expect(response.body).toHaveProperty("symbol", "");
      311 |       expect(response.body.filters).toHaveProperty("category", "");
      312 |       expect(response.body.filters).toHaveProperty("analyst", "");

      at Object.toBe (tests/unit/routes/recommendations.test.js:309:31)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should return consistent JSON response format

    expect(received).toHaveProperty(path)

    Expected path: "timestamp"
    Received path: []

    Received value: {"code": "MISSING_TOKEN", "error": "Authentication required", "success": false}

      322 |       expect(typeof response.body).toBe("object");
      323 |       expect(response.body).toHaveProperty("success");
    > 324 |       expect(response.body).toHaveProperty("timestamp");
          |                             ^
      325 |     });
      326 |
      327 |     test("should include detailed implementation requirements", async () => {

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:324:29)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include detailed implementation requirements

    expect(received).toHaveProperty(path)

    Expected path: "details"
    Received path: []

    Received value: {"code": "MISSING_TOKEN", "error": "Authentication required", "success": false}

      328 |       const response = await request(app).get("/recommendations");
      329 |
    > 330 |       expect(response.body).toHaveProperty("details");
          |                             ^
      331 |       expect(response.body.details).toContain("analyst recommendations data");
      332 |       expect(response.body).toHaveProperty("troubleshooting");
      333 |       expect(response.body.troubleshooting).toHaveProperty("required_setup");

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:330:29)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should preserve query parameters in response

    expect(received).toHaveProperty(path, value)

    Expected path: "symbol"
    Received path: []

    Expected value: "TSLA"
    Received value: {"code": "MISSING_TOKEN", "error": "Authentication required", "success": false}

      344 |       });
      345 |
    > 346 |       expect(response.body).toHaveProperty("symbol", "TSLA");
          |                             ^
      347 |       expect(response.body.filters).toHaveProperty("category", "buy");
      348 |       expect(response.body.filters).toHaveProperty("limit", 25);
      349 |     });

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:346:29)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include all filter parameters in response

    expect(received).toHaveProperty(path)

    Expected path: "filters"
    Received path: []

    Received value: {"code": "MISSING_TOKEN", "error": "Authentication required", "success": false}

      358 |       });
      359 |
    > 360 |       expect(response.body).toHaveProperty("filters");
          |                             ^
      361 |       expect(response.body.filters).toHaveProperty("category", "hold");
      362 |       expect(response.body.filters).toHaveProperty("analyst", "jp_morgan");
      363 |       expect(response.body.filters).toHaveProperty("timeframe", "monthly");

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:360:29)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Future implementation readiness ‚Ä∫ should be ready for future implementation with proper parameter handling

    expect(received).toHaveProperty(path)

    Expected path: "symbol"
    Received path: []

    Received value: {"code": "MISSING_TOKEN", "error": "Authentication required", "success": false}

      377 |
      378 |       // Response structure should support future implementation
    > 379 |       expect(response.body).toHaveProperty("symbol");
          |                             ^
      380 |       expect(response.body).toHaveProperty("filters");
      381 |       expect(response.body).toHaveProperty("timestamp");
      382 |

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:379:29)

  ‚óè Recommendations Routes Unit Tests ‚Ä∫ Future implementation readiness ‚Ä∫ should handle all expected recommendation categories

    expect(received).toHaveProperty(path, value)

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      398 |           .query({ category });
      399 |
    > 400 |         expect(response.body.filters).toHaveProperty("category", category);
          |                                       ^
      401 |         // Future implementation should support these categories
      402 |       }
      403 |     });

      at Object.toHaveProperty (tests/unit/routes/recommendations.test.js:400:39)

FAIL tests/unit/routes/data.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üìä Data API info requested

      at log (routes/data.js:19:15)

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/data.test.js:203:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.error
      ‚ùå [DATA] Error fetching historical data for AAPL: Error: Query timeout
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/data.test.js:323:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      390 |   } catch (error) {
      391 |     try {
    > 392 |       console.error(
          |               ^
      393 |         `‚ùå [DATA] Error fetching historical data for ${symbolUpper}:`,
      394 |         error
      395 |       );

      at error (routes/data.js:392:15)

    console.error
      ‚ùå [DATA] Error fetching real-time data for AAPL: Error: Connection lost
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/data.test.js:393:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      468 |   } catch (error) {
      469 |     try {
    > 470 |       console.error(
          |               ^
      471 |         `‚ùå [DATA] Error fetching real-time data for ${symbolUpper}:`,
      472 |         error
      473 |       );

      at error (routes/data.js:470:15)

    console.error
      ‚ùå [DATA] Error fetching bulk data: Error: Database timeout
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/data.test.js:492:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      106 |   } catch (error) {
      107 |     try {
    > 108 |       console.error("‚ùå [DATA] Error fetching bulk data:", error);
          |               ^
      109 |     } catch (e) {
      110 |       // Ignore console logging errors
      111 |     }

      at error (routes/data.js:108:15)

    console.error
      ‚ùå Test cleanup error: Error: Unexpected error
          at console.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/data.test.js:74:15)
          at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:397:39
          at console.<anonymous> (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:404:13)
          at console.mockConstructor [as log] (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:148:19)
          at Object.log (/home/stocks/algo/webapp/lambda/tests/setup.js:36:13)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusHook (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:281:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:154:7)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      36 |     console.log('‚úÖ Test cleanup complete');
      37 |   } catch (error) {
    > 38 |     console.error('‚ùå Test cleanup error:', error);
         |             ^
      39 |   }
      40 | });

      at Object.error (tests/setup.js:38:13)

  ‚óè Data Routes Unit Tests ‚Ä∫ GET /data ‚Ä∫ should handle errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      77 |       const response = await request(app).get("/data");
      78 |
    > 79 |       expect(response.status).toBe(500);
         |                               ^
      80 |       expect(response.body).toHaveProperty("success", false);
      81 |       expect(response.body).toHaveProperty(
      82 |         "error",

      at Object.toBe (tests/unit/routes/data.test.js:79:31)

  ‚óè Data Routes Unit Tests ‚Ä∫ GET /data/realtime/:symbol ‚Ä∫ should return real-time data for a symbol

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "ORDER BY date DESC LIMIT 1",
    + "
          SELECT symbol, date, open, high, low, close, adj_close, volume
          FROM price_daily 
          WHERE symbol = $1 
          ORDER BY date DESC 
          LIMIT 1
        ",
      ["AAPL"],

    Number of calls: 1

      361 |       );
      362 |
    > 363 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      364 |         expect.stringContaining("ORDER BY date DESC LIMIT 1"),
      365 |         ["AAPL"]
      366 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/data.test.js:363:25)

  ‚óè Data Routes Unit Tests ‚Ä∫ GET /data/bulk ‚Ä∫ should return 400 when symbols parameter is missing

    expect(received).toHaveProperty(path, value)

    Expected path: "error"

    Expected value: "symbols parameter is required"
    Received value: "Validation error"

      463 |
      464 |       expect(response.status).toBe(400);
    > 465 |       expect(response.body).toHaveProperty(
          |                             ^
      466 |         "error",
      467 |         "symbols parameter is required"
      468 |       );

      at Object.toHaveProperty (tests/unit/routes/data.test.js:465:29)

FAIL tests/unit/routes/insider.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should return 501 status for not implemented endpoint

    expected 501 "Not Implemented", got 200 "OK"

      24 |       const response = await request(app)
      25 |         .get("/api/insider/trades/AAPL")
    > 26 |         .expect(501);
         |          ^
      27 |
      28 |       expect(response.body).toEqual({
      29 |         success: false,

      at Object.expect (tests/unit/routes/insider.test.js:26:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should convert symbol to uppercase

    expected 501 "Not Implemented", got 200 "OK"

      49 |       const response = await request(app)
      50 |         .get("/api/insider/trades/aapl")
    > 51 |         .expect(501);
         |          ^
      52 |
      53 |       expect(response.body.symbol).toBe("AAPL");
      54 |     });

      at Object.expect (tests/unit/routes/insider.test.js:51:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should log the request with symbol

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "üë• Insider trades requested for TSLA - not implemented"
    Received: "üë• Insider trades requested for TSLA"

    Number of calls: 1

      57 |       await request(app).get("/api/insider/trades/TSLA");
      58 |
    > 59 |       expect(consoleSpy).toHaveBeenCalledWith(
         |                          ^
      60 |         "üë• Insider trades requested for TSLA - not implemented"
      61 |       );
      62 |     });

      at Object.toHaveBeenCalledWith (tests/unit/routes/insider.test.js:59:26)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should include valid ISO timestamp

    expected 501 "Not Implemented", got 200 "OK"

      65 |       const response = await request(app)
      66 |         .get("/api/insider/trades/GOOGL")
    > 67 |         .expect(501);
         |          ^
      68 |
      69 |       const timestamp = response.body.timestamp;
      70 |       expect(timestamp).toMatch(

      at Object.expect (tests/unit/routes/insider.test.js:67:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should handle symbols with special characters

    expected 501 "Not Implemented", got 200 "OK"

      78 |       const response = await request(app)
      79 |         .get("/api/insider/trades/BRK.A")
    > 80 |         .expect(501);
         |          ^
      81 |
      82 |       expect(response.body.symbol).toBe("BRK.A");
      83 |       expect(response.body.success).toBe(false);

      at Object.expect (tests/unit/routes/insider.test.js:80:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should handle long symbol names

    expected 501 "Not Implemented", got 200 "OK"

      88 |       const response = await request(app)
      89 |         .get(`/api/insider/trades/${longSymbol}`)
    > 90 |         .expect(501);
         |          ^
      91 |
      92 |       expect(response.body.symbol).toBe(longSymbol);
      93 |       expect(consoleSpy).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/insider.test.js:90:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should handle empty symbol gracefully

    expected 404 "Not Found", got 500 "Internal Server Error"

       99 |       const response = await request(app)
      100 |         .get("/api/insider/trades/")
    > 101 |         .expect(404); // Express router will return 404 for missing route parameter
          |          ^
      102 |     });
      103 |
      104 |     it("should handle route error and return 500", async () => {

      at Object.expect (tests/unit/routes/insider.test.js:101:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should handle route error and return 500

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    +   "details": "Console logging failed",
        "error": "Failed to fetch insider trades",
    -   "message": "Console logging failed",
        "success": false,
    +   "symbol": "AAPL",
    +   "timestamp": "2025-09-26T01:27:40.160Z",
      }

      112 |         .expect(500);
      113 |
    > 114 |       expect(response.body).toEqual({
          |                             ^
      115 |         success: false,
      116 |         error: "Failed to fetch insider trades",
      117 |         message: "Console logging failed",

      at Object.toEqual (tests/unit/routes/insider.test.js:114:29)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should maintain consistent response structure for different symbols

    expected 501 "Not Implemented", got 200 "OK"

      130 |         const response = await request(app)
      131 |           .get(`/api/insider/trades/${symbol}`)
    > 132 |           .expect(501);
          |            ^
      133 |
      134 |         expect(response.body).toHaveProperty("success", false);
      135 |         expect(response.body.error || response.body.success).toBeDefined();

      at Object.expect (tests/unit/routes/insider.test.js:132:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should have consistent error message structure

    expected 501 "Not Implemented", got 200 "OK"

      148 |       const response = await request(app)
      149 |         .get("/api/insider/trades/TEST")
    > 150 |         .expect(501);
          |          ^
      151 |
      152 |       expect(response.body.troubleshooting.required_setup).toHaveLength(3);
      153 |       expect(response.body.troubleshooting.required_setup).toContain(

      at Object.expect (tests/unit/routes/insider.test.js:150:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Insider Routes ‚Ä∫ GET /api/insider/trades/:symbol ‚Ä∫ should handle numeric symbol inputs

    expected 501 "Not Implemented", got 200 "OK"

      165 |       const response = await request(app)
      166 |         .get("/api/insider/trades/123")
    > 167 |         .expect(501);
          |          ^
      168 |
      169 |       expect(response.body.symbol).toBe("123");
      170 |       expect(response.body.success).toBe(false);

      at Object.expect (tests/unit/routes/insider.test.js:167:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/unit/routes/sectors.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üìä Fetching sector analysis...

      at log (routes/sectors.js:124:13)

    console.log
      ‚úÖ Found 2 sectors

      at log (routes/sectors.js:184:13)

    console.log
      üìä Fetching sector analysis...

      at log (routes/sectors.js:124:13)

    console.log
      üìä Fetching sector analysis...

      at log (routes/sectors.js:124:13)

    console.log
      ‚úÖ Found 0 sectors

      at log (routes/sectors.js:184:13)

    console.log
      üìä Fetching sector analysis...

      at log (routes/sectors.js:124:13)

    console.error
      ‚ùå Error in sector analysis: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:233:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      239 |     res.json(response);
      240 |   } catch (error) {
    > 241 |     console.error("‚ùå Error in sector analysis:", error);
          |             ^
      242 |     res.status(500).json({
      243 |       success: false,
      244 |       error: error.message || "Failed to fetch sector analysis",

      at error (routes/sectors.js:241:13)

    console.log
      üìã Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

    console.log
      ‚úÖ Found 5 sectors with 5 industries

      at log (routes/sectors.js:302:13)

    console.log
      üìã Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

    console.log
      ‚úÖ Found 0 sectors with 0 industries

      at log (routes/sectors.js:302:13)

    console.log
      üìã Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

    console.error
      ‚ùå Error fetching sector list: Error: Database query failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:336:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      324 |     });
      325 |   } catch (error) {
    > 326 |     console.error("‚ùå Error fetching sector list:", error);
          |             ^
      327 |     res.status(500).json({
      328 |       success: false,
      329 |       error: error.message || "Failed to fetch sector list",

      at error (routes/sectors.js:326:13)

    console.log
      üìä Fetching detailed analysis for sector: Technology

      at log (routes/sectors.js:488:13)

    console.log
      ‚úÖ Found 2 stocks in Technology sector

      at log (routes/sectors.js:609:13)

    console.log
      üìä Fetching detailed analysis for sector: NonExistentSector

      at log (routes/sectors.js:488:13)

    console.log
      üìä Fetching detailed analysis for sector: Technology

      at log (routes/sectors.js:488:13)

    console.error
      ‚ùå Error fetching details for sector Technology: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:488:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      653 |     });
      654 |   } catch (error) {
    > 655 |     console.error(
          |             ^
      656 |       `‚ùå Error fetching details for sector ${req.params.sector}:`,
      657 |       error
      658 |     );

      at error (routes/sectors.js:655:13)

    console.log
      üìä Fetching detailed analysis for sector: Consumer Discretionary

      at log (routes/sectors.js:488:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sectors Routes ‚Ä∫ GET /sectors/analysis ‚Ä∫ should return comprehensive sector analysis with default timeframe

    expect(received).toMatchObject(expected)

    - Expected  - 25
    + Received  + 36

    @@ -1,39 +1,50 @@
      Object {
    -   "data": ObjectContaining {
    -     "sectors": ArrayContaining [
    -       ObjectContaining {
    -         "industry": Any<String>,
    -         "metrics": ObjectContaining {
    -           "avg_price": Any<String>,
    -           "performance": ObjectContaining {
    -             "daily_change": Any<String>,
    -             "monthly_change": Any<String>,
    -             "performance_rank": Any<Number>,
    -             "weekly_change": Any<String>,
    +   "data": Object {
    +     "sectors": Array [
    +       Object {
    +         "metrics": Object {
    +           "avg_price": "125.50",
    +           "performance": Object {
    +             "monthly_change": "0.00",
                },
    -           "priced_stocks": Any<Number>,
    -           "stock_count": Any<Number>,
    +           "stock_count": 145,
    +           "technicals": Object {
    +             "avg_momentum": "0.15",
    +             "avg_rsi": "65.20",
                },
    +           "volume": Object {
    +             "total_volume": 0,
    +           },
    +         },
              "sector": "Technology",
            },
    -       ObjectContaining {
    -         "industry": Any<String>,
    -         "metrics": ObjectContaining {
    -           "priced_stocks": Any<Number>,
    -           "stock_count": Any<Number>,
    +       Object {
    +         "metrics": Object {
    +           "avg_price": "98.75",
    +           "performance": Object {
    +             "monthly_change": "0.00",
    +           },
    +           "stock_count": 98,
    +           "technicals": Object {
    +             "avg_momentum": "0.08",
    +             "avg_rsi": "58.10",
    +           },
    +           "volume": Object {
    +             "total_volume": 0,
    +           },
              },
              "sector": "Healthcare",
            },
          ],
    -     "summary": ObjectContaining {
    -       "avg_market_return": Any<String>,
    -       "bearish_sectors": Any<Number>,
    -       "bullish_sectors": Any<Number>,
    -       "neutral_sectors": Any<Number>,
    -       "total_sectors": Any<Number>,
    -       "total_stocks_analyzed": Any<Number>,
    +     "summary": Object {
    +       "avg_market_return": "0.00",
    +       "bearish_sectors": 0,
    +       "bullish_sectors": 0,
    +       "neutral_sectors": 2,
    +       "total_sectors": 2,
    +       "total_stocks_analyzed": 243,
          },
          "timeframe": "daily",
        },
        "success": true,
        "timestamp": Any<String>,

      159 |       const response = await request(app).get("/sectors/analysis").expect(200);
      160 |
    > 161 |       expect(response.body).toMatchObject({
          |                             ^
      162 |         success: true,
      163 |         data: expect.objectContaining({
      164 |           timeframe: "daily",

      at Object.toMatchObject (tests/unit/routes/sectors.test.js:161:29)

  ‚óè Sectors Routes ‚Ä∫ GET /sectors/:sector/details ‚Ä∫ should return detailed sector information

    expect(received).toMatchObject(expected)

    - Expected  - 24
    + Received  + 40

    @@ -1,41 +1,57 @@
      Object {
        "data": Object {
          "industries": Any<Array>,
          "sector": "Technology",
    -     "stocks": ArrayContaining [
    -       ObjectContaining {
    -         "current_price": Any<String>,
    +     "stocks": Array [
    +       Object {
    +         "current_price": "175.25",
              "industry": "Consumer Electronics",
    -         "momentum": ObjectContaining {
    -           "jt_momentum_12_1": Any<String>,
    -           "momentum_3m": Any<String>,
    -           "momentum_6m": Any<String>,
    -           "risk_adjusted": Any<String>,
    -           "strength": Any<String>,
    +         "momentum": Object {
    +           "jt_momentum_12_1": "0.1200",
    +           "momentum_3m": "0.0800",
    +           "momentum_6m": "0.0600",
    +           "risk_adjusted": "0.1000",
    +           "strength": "85.50",
              },
              "name": "Apple Inc.",
    -         "performance": ObjectContaining {
    -           "daily_change": Any<String>,
    -           "monthly_change": Any<String>,
    -           "weekly_change": Any<String>,
    +         "performance": Object {
    +           "monthly_change": "12.50",
              },
    -         "symbol": "AAPL",
    -         "technicals": ObjectContaining {
    -           "macd": Any<String>,
    -           "macd_signal": Any<String>,
    -           "momentum": Any<String>,
    -           "rsi": Any<String>,
    -           "rsi_signal": Any<String>,
    -           "trend": Any<String>,
    +         "technicals": Object {
    +           "macd": "0.0250",
    +           "macd_signal": "bullish",
    +           "momentum": "0.15",
    +           "rsi": "65.20",
    +           "rsi_signal": "neutral",
    +           "trend": "bullish",
              },
    -         "volume": Any<Number>,
    +         "volume": 45000000,
            },
    -       ObjectContaining {
    +       Object {
    +         "current_price": "378.50",
              "industry": "Software Infrastructure",
    +         "momentum": Object {
    +           "jt_momentum_12_1": "0.0600",
    +           "momentum_3m": "0.0400",
    +           "momentum_6m": "0.0300",
    +           "risk_adjusted": "0.0500",
    +           "strength": "72.30",
    +         },
              "name": "Microsoft Corporation",
    -         "symbol": "MSFT",
    +         "performance": Object {
    +           "monthly_change": "9.75",
    +         },
    +         "technicals": Object {
    +           "macd": "0.0150",
    +           "macd_signal": "bullish",
    +           "momentum": "0.08",
    +           "rsi": "58.10",
    +           "rsi_signal": "neutral",
    +           "trend": "bullish",
    +         },
    +         "volume": 28000000,
            },
          ],
          "summary": ObjectContaining {
            "avg_jt_momentum": Any<String>,
            "avg_monthly_return": Any<String>,

      416 |         .expect(200);
      417 |
    > 418 |       expect(response.body).toMatchObject({
          |                             ^
      419 |         success: true,
      420 |         data: {
      421 |           sector: "Technology",

      at Object.toMatchObject (tests/unit/routes/sectors.test.js:418:29)

FAIL tests/unit/routes/price.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üí∞ Current price requested for AAPL

      at log (routes/price.js:60:13)

    console.log
      üí∞ Current price requested for INVALID

      at log (routes/price.js:60:13)

    console.warn
      Error checking table existence for price_daily: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/price.js:18:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/price.js:63:11

      18 |     return result.rows[0].exists;
      19 |   } catch (error) {
    > 20 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      21 |     return false;
      22 |   }
      23 | }

      at warn (routes/price.js:20:13)
      at routes/price.js:63:11

    console.log
      üí∞ Current price requested for AAPL

      at log (routes/price.js:60:13)

    console.warn
      Error checking table existence for price_daily: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/price.test.js:92:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      18 |     return result.rows[0].exists;
      19 |   } catch (error) {
    > 20 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      21 |     return false;
      22 |   }
      23 | }

      at warn (routes/price.js:20:13)
      at routes/price.js:63:11

    console.log
      ‚è∞ Intraday data requested for AAPL (interval: 5m)

      at log (routes/price.js:218:13)

    console.log
      ‚è∞ Intraday data requested for AAPL (interval: 1min)

      at log (routes/price.js:218:13)

    console.warn
      Error checking table existence for price_daily: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/price.js:18:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/price.js:223:11

      18 |     return result.rows[0].exists;
      19 |   } catch (error) {
    > 20 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      21 |     return false;
      22 |   }
      23 | }

      at warn (routes/price.js:20:13)
      at routes/price.js:223:11

    console.log
      ‚è∞ Intraday data requested for AAPL (interval: invalid)

      at log (routes/price.js:218:13)

    console.warn
      Error checking table existence for price_daily: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/price.js:18:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/price.js:223:11

      18 |     return result.rows[0].exists;
      19 |   } catch (error) {
    > 20 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      21 |     return false;
      22 |   }
      23 | }

      at warn (routes/price.js:20:13)
      at routes/price.js:223:11

    console.log
      üìà Futures prices requested for CLZ24

      at log (routes/price.js:1291:13)

    console.log
      üìà Futures data generated for CLZ24: 1 contracts

      at log (routes/price.js:1357:13)

    console.log
      üìà Futures prices requested for INVALID

      at log (routes/price.js:1291:13)

    console.log
      üìà Futures data generated for INVALID: 0 contracts

      at log (routes/price.js:1357:13)

    console.log
      üìä Batch price request for 3 symbols

      at log (routes/price.js:300:13)

    console.log
      üìä Batch price request for 101 symbols

      at log (routes/price.js:300:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol ‚Ä∫ should get current price for valid symbol

    expected 200 "OK", got 404 "Not Found"

      67 |       mockQuery.mockResolvedValue({ rows: mockPriceData });
      68 |
    > 69 |       const response = await request(app).get("/api/price/AAPL").expect(200);
         |                                                                  ^
      70 |
      71 |       expect(response.body.symbol).toBe("AAPL");
      72 |       expect(response.body.data.current_price).toBe(153.5);

      at Object.expect (tests/unit/routes/price.test.js:69:66)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol ‚Ä∫ should handle symbol not found

    expect(received).toContain(expected) // indexOf

    Expected substring: "not found"
    Received string:    "Price data not available"

      86 |
      87 |       expect(response.body.success).toBe(false);
    > 88 |       expect(response.body.error).toContain("not found");
         |                                   ^
      89 |     });
      90 |
      91 |     test("should handle database errors", async () => {

      at Object.toContain (tests/unit/routes/price.test.js:88:35)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol ‚Ä∫ should handle database errors

    expected 500 "Internal Server Error", got 404 "Not Found"

      92 |       mockQuery.mockRejectedValue(new Error("Database connection failed"));
      93 |
    > 94 |       const response = await request(app).get("/api/price/AAPL").expect(500);
         |                                                                  ^
      95 |
      96 |       expect(response.body.success).toBe(false);
      97 |       expect(response.body.error).toBeDefined();

      at Object.expect (tests/unit/routes/price.test.js:94:66)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/intraday ‚Ä∫ should return intraday data with default 5min interval

    expected 200 "OK", got 404 "Not Found"

      118 |       const response = await request(app)
      119 |         .get("/api/price/AAPL/intraday")
    > 120 |         .expect(200);
          |          ^
      121 |
      122 |       expect(response.body.symbol).toBe("AAPL");
      123 |       expect(response.body.data.interval).toBe("5min");

      at Object.expect (tests/unit/routes/price.test.js:120:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/intraday ‚Ä∫ should handle different intervals

    expected 200 "OK", got 404 "Not Found"

      134 |       const response = await request(app)
      135 |         .get("/api/price/AAPL/intraday?interval=1min")
    > 136 |         .expect(200);
          |          ^
      137 |
      138 |       expect(response.body.data.interval).toBe("1min");
      139 |       expect(mockQuery).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/price.test.js:136:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/intraday ‚Ä∫ should validate interval parameter

    expected 400 "Bad Request", got 404 "Not Found"

      146 |       const response = await request(app)
      147 |         .get("/api/price/AAPL/intraday?interval=invalid")
    > 148 |         .expect(400);
          |          ^
      149 |
      150 |       expect(response.body.success).toBe(false);
      151 |       expect(response.body.error).toContain("Invalid interval");

      at Object.expect (tests/unit/routes/price.test.js:148:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/futures/:symbol ‚Ä∫ should return futures pricing data

    expect(received).toBe(expected) // Object.is equality

    Expected: "CLZ24"
    Received: undefined

      175 |         .expect(200);
      176 |
    > 177 |       expect(response.body.symbol).toBe("CLZ24");
          |                                    ^
      178 |       expect(response.body.data).toHaveProperty("contract_details");
      179 |       expect(response.body.data).toHaveProperty("pricing_analysis");
      180 |       expect(response.body.data.contract_details).toHaveProperty(

      at Object.toBe (tests/unit/routes/price.test.js:177:36)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/futures/:symbol ‚Ä∫ should handle non-existent futures contract

    expected 404 "Not Found", got 200 "OK"

      192 |       const response = await request(app)
      193 |         .get("/api/price/futures/INVALID")
    > 194 |         .expect(404);
          |          ^
      195 |
      196 |       expect(response.body.success).toBe(false);
      197 |       expect(response.body.error).toContain("Futures contract not found");

      at Object.expect (tests/unit/routes/price.test.js:194:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/prediction ‚Ä∫ should return price prediction analysis

    expected 200 "OK", got 404 "Not Found"

      217 |       const response = await request(app)
      218 |         .get("/api/price/AAPL/prediction")
    > 219 |         .expect(200);
          |          ^
      220 |
      221 |       expect(response.body.symbol).toBe("AAPL");
      222 |       expect(response.body.data).toHaveProperty("current_analysis");

      at Object.expect (tests/unit/routes/price.test.js:219:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/prediction ‚Ä∫ should handle different timeframes

    expected 200 "OK", got 404 "Not Found"

      236 |       const response = await request(app)
      237 |         .get("/api/price/AAPL/prediction?timeframe=1w")
    > 238 |         .expect(200);
          |          ^
      239 |
      240 |       expect(response.body.data.timeframe).toBe("1w");
      241 |     });

      at Object.expect (tests/unit/routes/price.test.js:238:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/prediction ‚Ä∫ should validate timeframe parameter

    expected 400 "Bad Request", got 404 "Not Found"

      244 |       const response = await request(app)
      245 |         .get("/api/price/AAPL/prediction?timeframe=invalid")
    > 246 |         .expect(400);
          |          ^
      247 |
      248 |       expect(response.body.success).toBe(false);
      249 |       expect(response.body.error).toContain("Invalid timeframe");

      at Object.expect (tests/unit/routes/price.test.js:246:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ GET /api/price/:symbol/alerts ‚Ä∫ should return price alert recommendations

    expected 200 "OK", got 404 "Not Found"

      267 |       const response = await request(app)
      268 |         .get("/api/price/AAPL/alerts")
    > 269 |         .expect(200);
          |          ^
      270 |
      271 |       expect(response.body.symbol).toBe("AAPL");
      272 |       expect(response.body.data).toHaveProperty("current_price");

      at Object.expect (tests/unit/routes/price.test.js:269:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Price Route - Unit Tests ‚Ä∫ POST /api/price/batch ‚Ä∫ should handle batch price requests

    expect(received).toHaveProperty(path)

    Expected path: "summary"
    Received path: []

    Received value: {"prices": {"AAPL": {"error": "Price data table not yet loaded", "symbol": "AAPL", "timestamp": "2025-09-26T01:27:40.422Z"}, "GOOGL": {"error": "Price data table not yet loaded", "symbol": "GOOGL", "timestamp": "2025-09-26T01:27:40.422Z"}, "MSFT": {"error": "Price data table not yet loaded", "symbol": "MSFT", "timestamp": "2025-09-26T01:27:40.422Z"}}}

      294 |       expect(response.body.success).toBe(true);
      295 |       expect(response.body.data).toHaveProperty("prices");
    > 296 |       expect(response.body.data).toHaveProperty("summary");
          |                                  ^
      297 |       expect(Object.keys(response.body.data.prices)).toHaveLength(3);
      298 |       expect(response.body.data.prices).toHaveProperty("AAPL");
      299 |       expect(response.body.data.prices).toHaveProperty("MSFT");

      at Object.toHaveProperty (tests/unit/routes/price.test.js:296:34)

  ‚óè Price Route - Unit Tests ‚Ä∫ POST /api/price/batch ‚Ä∫ should limit batch size

    expected 400 "Bad Request", got 200 "OK"

      317 |         .post("/api/price/batch")
      318 |         .send({ symbols: tooManySymbols })
    > 319 |         .expect(400);
          |          ^
      320 |
      321 |       expect(response.body.success).toBe(false);
      322 |       expect(response.body.error).toContain("Maximum 100 symbols allowed");

      at Object.expect (tests/unit/routes/price.test.js:319:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/integration/utils/database.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'relation "non_existent_table_12345" does not exist',
        query: 'SELECT * FROM non_existent_table_12345',
        params: 'no parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:100:22)

    console.error
      Database query error: {
        error: 'syntax error at or near "INVALID"',
        query: 'INVALID SQL SYNTAX HERE',
        params: 'no parameters',
        code: '42601'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:106:22)

    console.log
      Initializing database schema...

      at log (utils/database.js:311:13)

    console.log
      ‚úÖ Created/verified table: stock_symbols

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: company_profile

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: market_data

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: technical_data_daily

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: technical_data_weekly

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: technical_data_monthly

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: stocks

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: price_daily

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: portfolio_holdings

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: portfolio_performance

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: buy_sell_daily

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: buy_sell_weekly

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: buy_sell_monthly

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: portfolio_transactions

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: technical_indicators

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: market_sentiment

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: price_alerts

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: risk_alerts

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: alert_settings

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: alert_rules

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: stock_scores

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: key_metrics

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: dividend_calendar

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: trading_strategies

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: user_risk_limits

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: trade_history

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: portfolio_summary

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: user_dashboard_settings

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: portfolio_metadata

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: swing_trading_signals

      at log (utils/database.js:1061:17)

    console.log
      ‚úÖ Created/verified table: economic_data

      at log (utils/database.js:1061:17)

    console.log
      Inserting initial economic data...

      at log (utils/database.js:1204:15)

    console.error
      Database query error: {
        error: 'column "description" of relation "economic_data" does not exist',
        query: '\n' +
          '        INSERT INTO economic_data (series_id, date, value, description, category, frequency) VALUES...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at insertInitialData (utils/database.js:1244:7)
      at initializeSchema (utils/database.js:1071:5)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

    console.warn
      Warning inserting initial data: column "description" of relation "economic_data" does not exist

      1246 |     }
      1247 |   } catch (error) {
    > 1248 |     console.warn("Warning inserting initial data:", error.message);
           |             ^
      1249 |     // Don't throw - let the application continue
      1250 |   }
      1251 | }

      at warn (utils/database.js:1248:13)
      at initializeSchema (utils/database.js:1071:5)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

    console.log
      ‚úÖ Database schema initialization completed

      at log (utils/database.js:1073:13)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Database Real Site Functionality Tests ‚Ä∫ Real Database Query Operations ‚Ä∫ should handle database errors gracefully

    error: relation "non_existent_table_12345" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:100:22)

  ‚óè Database Real Site Functionality Tests ‚Ä∫ Real Database Query Operations ‚Ä∫ should handle syntax errors gracefully

    error: syntax error at or near "INVALID"

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:106:22)

  ‚óè Database Real Site Functionality Tests ‚Ä∫ Real-World Data Operations ‚Ä∫ should handle complex analytical queries

    expect(received).toBeCloseTo(expected, precision)

    Expected: 106
    Received: 108

    Expected precision:    0
    Expected difference: < 0.5
    Received difference:   2

      613 |
      614 |       expect(parseInt(stats.data_points)).toBe(10);
    > 615 |       expect(parseFloat(stats.avg_price)).toBeCloseTo(106, 0); // Approximate average
          |                                           ^
      616 |       expect(stats.price_volatility).toBeGreaterThan(0);
      617 |       expect(stats.name).toBe("Analytics Test Corp");
      618 |     });

      at Object.toBeCloseTo (tests/integration/utils/database.integration.test.js:615:43)

FAIL tests/integration/routes/risk.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk/analysis

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analysis requested for user: dev-user-bypass, period: 1y

      at log (routes/risk.js:39:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        h.symbol, h.quantity, COALESCE(h.average_cost, 0), h.current_price,\n' +
          '        s....',
        params: '1 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/risk.js:56:28

    console.error
      Risk analysis error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/risk.js:56:28 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '400',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      227 |     });
      228 |   } catch (error) {
    > 229 |     console.error("Risk analysis error:", error);
          |             ^
      230 |     res.status(500).json({
      231 |       success: false,
      232 |       error: "Failed to perform risk analysis",

      at error (routes/risk.js:229:13)

    console.log
      Processing request: GET /risk/analysis

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analysis requested for user: dev-user-bypass, period: 1m

      at log (routes/risk.js:39:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        h.symbol, h.quantity, COALESCE(h.average_cost, 0), h.current_price,\n' +
          '        s....',
        params: '1 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/risk.js:56:28

    console.error
      Risk analysis error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/risk.js:56:28 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '400',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      227 |     });
      228 |   } catch (error) {
    > 229 |     console.error("Risk analysis error:", error);
          |             ^
      230 |     res.status(500).json({
      231 |       success: false,
      232 |       error: "Failed to perform risk analysis",

      at error (routes/risk.js:229:13)

    console.log
      Processing request: GET /risk/analysis

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analysis requested for user: dev-user-bypass, period: 1m

      at log (routes/risk.js:39:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        h.symbol, h.quantity, COALESCE(h.average_cost, 0), h.current_price,\n' +
          '        s....',
        params: '1 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/risk.js:56:28

    console.error
      Risk analysis error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/risk.js:56:28 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '400',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      227 |     });
      228 |   } catch (error) {
    > 229 |     console.error("Risk analysis error:", error);
          |             ^
      230 |     res.status(500).json({
      231 |       success: false,
      232 |       error: "Failed to perform risk analysis",

      at error (routes/risk.js:229:13)

    console.log
      Processing request: GET /risk/health

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk/nonexistent

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk/analysis

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analysis requested for user: dev-user-bypass, period: <script>alert('xss')</script>

      at log (routes/risk.js:39:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        h.symbol, h.quantity, COALESCE(h.average_cost, 0), h.current_price,\n' +
          '        s....',
        params: '1 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/risk.js:56:28

    console.error
      Risk analysis error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/risk.js:56:28 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '400',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      227 |     });
      228 |   } catch (error) {
    > 229 |     console.error("Risk analysis error:", error);
          |             ^
      230 |     res.status(500).json({
      231 |       success: false,
      232 |       error: "Failed to perform risk analysis",

      at error (routes/risk.js:229:13)

    console.log
      Processing request: GET /risk/analysis

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analysis requested for user: dev-user-bypass, period: '; DROP TABLE portfolio_holdings; --

      at log (routes/risk.js:39:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        h.symbol, h.quantity, COALESCE(h.average_cost, 0), h.current_price,\n' +
          '        s....',
        params: '1 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/risk.js:56:28

    console.error
      Risk analysis error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/risk.js:56:28 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '400',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      227 |     });
      228 |   } catch (error) {
    > 229 |     console.error("Risk analysis error:", error);
          |             ^
      230 |     res.status(500).json({
      231 |       success: false,
      232 |       error: "Failed to perform risk analysis",

      at error (routes/risk.js:229:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /risk

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Risk Routes Integration ‚Ä∫ GET /risk/analysis ‚Ä∫ should handle risk analysis requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      60 |         });
      61 |
    > 62 |       expect(response.status).toBe(200);
         |                               ^
      63 |       expect(response.body).toBeDefined();
      64 |       expect(response.body).toHaveProperty("success", true);
      65 |     });

      at Object.toBe (tests/integration/routes/risk.integration.test.js:62:31)

  ‚óè Risk Routes Integration ‚Ä∫ GET /risk/analysis ‚Ä∫ should handle different time periods

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      71 |         .query({ period: "1m" });
      72 |
    > 73 |       expect(response.status).toBe(200);
         |                               ^
      74 |       expect(response.body).toBeDefined();
      75 |       expect(response.body).toHaveProperty("success", true);
      76 |     });

      at Object.toBe (tests/integration/routes/risk.integration.test.js:73:31)

  ‚óè Risk Routes Integration ‚Ä∫ GET /risk/analysis ‚Ä∫ should handle missing query parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      81 |         .set("Authorization", "Bearer dev-bypass-token");
      82 |
    > 83 |       expect(response.status).toBe(200);
         |                               ^
      84 |       expect(response.body).toBeDefined();
      85 |       expect(response.body).toHaveProperty("success", true);
      86 |     });

      at Object.toBe (tests/integration/routes/risk.integration.test.js:83:31)

  ‚óè Risk Routes Integration ‚Ä∫ Security tests ‚Ä∫ should handle XSS attempts in query parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      144 |         });
      145 |
    > 146 |       expect(response.status).toBe(200);
          |                               ^
      147 |       expect(response.body).toBeDefined();
      148 |     });
      149 |

      at Object.toBe (tests/integration/routes/risk.integration.test.js:146:31)

  ‚óè Risk Routes Integration ‚Ä∫ Security tests ‚Ä∫ should handle malicious query parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      157 |         });
      158 |
    > 159 |       expect(response.status).toBe(200);
          |                               ^
      160 |       expect(response.body).toBeDefined();
      161 |     });
      162 |   });

      at Object.toBe (tests/integration/routes/risk.integration.test.js:159:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk?type=portfolio HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk?symbol=AAPL HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/analysis?period=1y&confidence_level=0.95 HTTP/1.1" 500 113 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/analysis?period=1m HTTP/1.1" 500 113 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/analysis HTTP/1.1" 500 113 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/health HTTP/1.1" 200 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/nonexistent HTTP/1.1" 404 614 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk?symbol=%27%3B%20DROP%20TABLE%20trading_alerts%3B%20--&type=portfolio%27%3B%20DELETE%20FROM%20risk_metrics%3B%20-- HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/analysis?period=%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E&confidence_level=%3Cimg%20src%3Dx%20onerror%3Dalert%28%27xss%27%29%3E HTTP/1.1" 500 113 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk/analysis?period=%27%3B%20DROP%20TABLE%20portfolio_holdings%3B%20--&confidence_level=999999 HTTP/1.1" 500 113 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:40 +0000] "GET /risk HTTP/1.1" 200 125 "-" "-"
FAIL tests/unit/routes/economic.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.warn
      Economic data count query returned null result, database may be unavailable

      142 |     // Add null safety check
      143 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 144 |       console.warn(
          |               ^
      145 |         "Economic data count query returned null result, database may be unavailable"
      146 |       );
      147 |       return res.status(503).json({

      at warn (routes/economic.js:144:15)

    console.error
      Economic data query failed: Database connection failed

      131 |       ]);
      132 |     } catch (error) {
    > 133 |       console.error("Economic data query failed:", error.message);
          |               ^
      134 |       return res.status(500).json({
      135 |         success: false,
      136 |         error: "Failed to fetch economic data",

      at error (routes/economic.js:133:15)

    console.warn
      Economic data count query returned null result, database may be unavailable

      142 |     // Add null safety check
      143 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 144 |       console.warn(
          |               ^
      145 |         "Economic data count query returned null result, database may be unavailable"
      146 |       );
      147 |       return res.status(503).json({

      at warn (routes/economic.js:144:15)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 100

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 10

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.error
      Error fetching economic data: Error: Query timeout
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/economic.test.js:326:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      244 |     });
      245 |   } catch (error) {
    > 246 |     console.error("Error fetching economic data:", error);
          |             ^
      247 |     // Return 200 with empty data instead of 500
      248 |     res.json({
      249 |       success: true,

      at error (routes/economic.js:246:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 50

      at log (routes/economic.js:221:13)

    console.log
      Economic data endpoint called with limit: 100

      at log (routes/economic.js:221:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Economic Routes Unit Tests ‚Ä∫ GET /economic ‚Ä∫ should filter by series parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "WHERE series_id = $1", ["GDP", 50, 0]
    Received
           1
              "
          SELECT 
            series_id,
            date,
            value
          FROM economic_data
          WHERE series_id = $1
          ORDER BY series_id, date DESC
          LIMIT $2 OFFSET $3
        ",
              Array [
            -   "GDP",
            +   "GDPC1",
                50,
                0,
              ],
           2
              "
          SELECT COUNT(*) as total FROM economic_data WHERE series_id = $1
        ",
              Array [
            -   "GDP",
            -   50,
            -   0,
            +   "GDPC1",
              ],

    Number of calls: 2

      116 |       );
      117 |
    > 118 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      119 |         expect.stringContaining("WHERE series_id = $1"),
      120 |         ["GDP", 50, 0]
      121 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/economic.test.js:118:25)

  ‚óè Economic Routes Unit Tests ‚Ä∫ GET /economic ‚Ä∫ should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"

    Expected value: "Database error"
    Received value: "Failed to fetch economic data"

      189 |       expect([200, 404, 500]).toContain(response.status);
      190 |       expect([true, false]).toContain(response.body.success);
    > 191 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      192 |       expect(response.body).toHaveProperty(
      193 |         "message",
      194 |         "Database connection failed"

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:191:29)

  ‚óè Economic Routes Unit Tests ‚Ä∫ GET /economic/data ‚Ä∫ should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"
    Received path: []

    Expected value: "Database error"
    Received value: {"count": 0, "data": [], "limit": 25, "message": "Economic data temporarily unavailable", "success": true, "timestamp": "2025-09-26T01:27:41.353Z"}

      330 |       expect([200, 404, 500]).toContain(response.status);
      331 |       expect([true, false]).toContain(response.body.success);
    > 332 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      333 |       expect(response.body).toHaveProperty("message", "Query timeout");
      334 |     });
      335 |

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:332:29)

  ‚óè Economic Routes Unit Tests ‚Ä∫ Edge cases and error handling ‚Ä∫ should handle invalid page numbers

    TypeError: Cannot read properties of undefined (reading 'limit')

      367 |
      368 |       expect(response.body.pagination?.page || 1).toBe(1); // Default page
    > 369 |       expect(response.body.pagination.limit).toBe(25); // Default limit
          |                                       ^
      370 |     });
      371 |
      372 |     test("should handle negative page and limit", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:369:39)

  ‚óè Economic Routes Unit Tests ‚Ä∫ Edge cases and error handling ‚Ä∫ should handle negative page and limit

    TypeError: Cannot read properties of undefined (reading 'limit')

      383 |
      384 |       expect(response.body.pagination?.page || 1).toBe(1); // Defaults to 1
    > 385 |       expect(response.body.pagination.limit).toBe(25); // Defaults to 25
          |                                       ^
      386 |     });
      387 |
      388 |     test("should handle very large page numbers", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:385:39)

  ‚óè Economic Routes Unit Tests ‚Ä∫ Edge cases and error handling ‚Ä∫ should handle very large page numbers

    expect(received).toMatchObject(expected)

    - Expected  - 2
    + Received  + 2

      Object {
        "hasNext": false,
        "hasPrev": true,
        "limit": 25,
        "page": 999,
    -   "total": 10,
    -   "totalPages": 1,
    +   "total": 50,
    +   "totalPages": 2,
      }

      398 |       const response = await request(app).get("/economic?page=999&limit=25");
      399 |
    > 400 |       expect(response.body.pagination).toMatchObject({
          |                                        ^
      401 |         page: 999,
      402 |         limit: 25,
      403 |         total: 10,

      at Object.toMatchObject (tests/unit/routes/economic.test.js:400:40)

  ‚óè Economic Routes Unit Tests ‚Ä∫ Edge cases and error handling ‚Ä∫ should handle empty series parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "WHERE series_id = $1", ["", 25, 0]
    Received
           1
              "
          SELECT¬∑
            series_id,
            date,
            value
          FROM economic_data¬∑¬∑¬∑¬∑¬∑¬∑¬∑
          ORDER BY series_id, date DESC
          LIMIT $1 OFFSET $2
        ",
              Array [
            -   "",
                25,
                0,
              ],
           2
              "
          SELECT COUNT(*) as total FROM economic_data¬∑
        ",
            - Array [
            -   "",
            -   25,
            -   0,
            - ]
            + Array [],

    Number of calls: 2

      443 |       const response = await request(app).get("/economic?series=");
      444 |
    > 445 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      446 |         expect.stringContaining("WHERE series_id = $1"),
      447 |         ["", 25, 0]
      448 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/economic.test.js:445:25)

  ‚óè Economic Routes Unit Tests ‚Ä∫ Response format validation ‚Ä∫ should return proper data structure

    expect(received).toHaveProperty(path)

    Expected path: "date"
    Received path: []

    Received value: {"total": "1"}

      506 |       expect(response.body.data.length).toBeGreaterThanOrEqual(0);
      507 |       expect(response.body.data[0] || {}).toBeDefined();
    > 508 |       expect(response.body.data[0]).toHaveProperty("date");
          |                                     ^
      509 |       expect(response.body.data[0]).toHaveProperty("value");
      510 |     });
      511 |   });

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:508:37)

FAIL tests/unit/routes/websocket.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üöÄ [test] Live data stream request initiated {
        symbols: 'AAPL',
        userId: 'test-use...',
        userAgent: undefined,
        ip: '::ffff:127.0.0.1',
        timestamp: '2025-09-26T01:27:41.443Z'
      }

      at log (routes/websocket.js:190:13)

    console.log
      üîç [test] Parsing requested symbols: AAPL

      at log (routes/websocket.js:199:13)

    console.log
      ‚úÖ [test] Symbols validated: { validSymbols: [ 'AAPL' ], symbolCount: 1 }

      at log (routes/websocket.js:221:13)

    console.log
      üîë [test] Retrieving user API credentials for live data access

      at log (routes/websocket.js:227:13)

    console.log
      ‚úÖ [test] API credentials retrieved in 1ms {
        provider: 'alpaca',
        environment: 'sandbox',
        keyLength: 15,
        hasSecret: true
      }

      at log (routes/websocket.js:269:15)

    console.log
      üè≠ [test] Initializing Alpaca service for live data

      at log (routes/websocket.js:311:13)

    console.log
      ‚úÖ [test] Alpaca service initialized in 0ms { environment: 'sandbox', hasApiKey: true, hasSecret: true }

      at log (routes/websocket.js:323:15)

    console.error
      ‚ùå [test] Live data stream FAILED after 6ms: {
        error: 'undefined is not iterable (cannot read property Symbol(Symbol.iterator))',
        errorStack: 'TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\n' +
          '    at Function.from (<anonymous>)\n' +
          '    at from (/home/stocks/algo/webapp/lambda/routes/websocket.js:372:36)\n' +
          '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
        errorCode: undefined,
        symbols: 'AAPL',
        impact: 'Live data stream request failed completely',
        recommendation: 'Check authentication, API credentials, and Alpaca service status'
      }

      584 |   } catch (streamError) {
      585 |     const errorDuration = Date.now() - requestStart;
    > 586 |     console.error(
          |             ^
      587 |       `‚ùå [${requestId}] Live data stream FAILED after ${errorDuration}ms:`,
      588 |       {
      589 |         error: streamError.message,

      at error (routes/websocket.js:586:13)

    console.log
      üöÄ [test] Live data stream request initiated {
        symbols: 'AAPL',
        userId: 'test-use...',
        userAgent: undefined,
        ip: '::ffff:127.0.0.1',
        timestamp: '2025-09-26T01:27:41.456Z'
      }

      at log (routes/websocket.js:190:13)

    console.log
      üîç [test] Parsing requested symbols: AAPL

      at log (routes/websocket.js:199:13)

    console.log
      ‚úÖ [test] Symbols validated: { validSymbols: [ 'AAPL' ], symbolCount: 1 }

      at log (routes/websocket.js:221:13)

    console.log
      üîë [test] Retrieving user API credentials for live data access

      at log (routes/websocket.js:227:13)

    console.error
      ‚ùå [test] No API credentials found after 0ms {
        requestedProvider: 'alpaca',
        userId: 'test-use...',
        impact: 'Live market data will not be available',
        recommendation: 'User needs to configure Alpaca API keys in settings'
      }

      236 |
      237 |       if (!credentials) {
    > 238 |         console.error(
          |                 ^
      239 |           `‚ùå [${requestId}] No API credentials found after ${credentialsDuration}ms`,
      240 |           {
      241 |             requestedProvider: "alpaca",

      at error (routes/websocket.js:238:17)

    console.log
      üöÄ [test] Live data stream request initiated {
        symbols: 'AAPL',
        userId: 'test-use...',
        userAgent: undefined,
        ip: '::ffff:127.0.0.1',
        timestamp: '2025-09-26T01:27:41.459Z'
      }

      at log (routes/websocket.js:190:13)

    console.log
      üîç [test] Parsing requested symbols: AAPL

      at log (routes/websocket.js:199:13)

    console.log
      ‚úÖ [test] Symbols validated: { validSymbols: [ 'AAPL' ], symbolCount: 1 }

      at log (routes/websocket.js:221:13)

    console.log
      üîë [test] Retrieving user API credentials for live data access

      at log (routes/websocket.js:227:13)

    console.error
      ‚ùå [test] Failed to retrieve API credentials after 0ms: {
        error: 'Database connection failed',
        errorStack: 'Error: Database connection failed\n' +
          '    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/websocket.test.js:179:9)\n' +
          '    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n' +
          '    at new Promise (<anonymous>)\n' +
          '    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n' +
          '    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n' +
          '    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
          '    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n' +
          '    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n' +
          '    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n' +
          '    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n' +
          '    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n' +
          '    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n' +
          '    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n' +
          '    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)',
        provider: 'alpaca',
        impact: 'Cannot access live market data',
        recommendation: 'Check API key configuration and database connectivity'
      }

      278 |     } catch (credentialsError) {
      279 |       const credentialsDuration = Date.now() - credentialsStart;
    > 280 |       console.error(
          |               ^
      281 |         `‚ùå [${requestId}] Failed to retrieve API credentials after ${credentialsDuration}ms:`,
      282 |         {
      283 |           error: credentialsError.message,

      at error (routes/websocket.js:280:15)

    console.log
      üöÄ [test] Live data stream request initiated {
        symbols: 'AAPL',
        userId: 'test-use...',
        userAgent: undefined,
        ip: '::ffff:127.0.0.1',
        timestamp: '2025-09-26T01:27:41.464Z'
      }

      at log (routes/websocket.js:190:13)

    console.log
      üîç [test] Parsing requested symbols: AAPL

      at log (routes/websocket.js:199:13)

    console.log
      ‚úÖ [test] Symbols validated: { validSymbols: [ 'AAPL' ], symbolCount: 1 }

      at log (routes/websocket.js:221:13)

    console.log
      üîë [test] Retrieving user API credentials for live data access

      at log (routes/websocket.js:227:13)

    console.log
      ‚úÖ [test] API credentials retrieved in 0ms {
        provider: 'alpaca',
        environment: 'sandbox',
        keyLength: 11,
        hasSecret: true
      }

      at log (routes/websocket.js:269:15)

    console.log
      üè≠ [test] Initializing Alpaca service for live data

      at log (routes/websocket.js:311:13)

    console.error
      ‚ùå [test] Alpaca service initialization FAILED after 0ms: {
        error: 'Invalid API credentials',
        errorStack: 'Error: Invalid API credentials\n' +
          '    at mockConstructor.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/websocket.test.js:202:15)\n' +
          '    at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:387:43\n' +
          '    at mockConstructor.<anonymous> (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:404:13)\n' +
          '    at new mockConstructor (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:148:19)\n' +
          '    at /home/stocks/algo/webapp/lambda/routes/websocket.js:316:27\n' +
          '    at processTicksAndRejections (node:internal/process/task_queues:95:5)',
        environment: 'sandbox',
        impact: 'Cannot initialize live data service',
        recommendation: 'Check API key validity and Alpaca service status'
      }

      331 |     } catch (alpacaError) {
      332 |       const alpacaInitDuration = Date.now() - alpacaInitStart;
    > 333 |       console.error(
          |               ^
      334 |         `‚ùå [${requestId}] Alpaca service initialization FAILED after ${alpacaInitDuration}ms:`,
      335 |         {
      336 |           error: alpacaError.message,

      at error (routes/websocket.js:333:15)

    console.log
      üöÄ [test] Live data stream request initiated {
        symbols: 'INVALID!@',
        userId: 'test-use...',
        userAgent: undefined,
        ip: '::ffff:127.0.0.1',
        timestamp: '2025-09-26T01:27:41.466Z'
      }

      at log (routes/websocket.js:190:13)

    console.log
      üîç [test] Parsing requested symbols: INVALID!@

      at log (routes/websocket.js:199:13)

    console.error
      ‚ùå [test] Invalid symbols provided: {
        originalSymbols: 'INVALID!@',
        filteredSymbols: [],
        impact: 'No valid symbols to stream'
      }

      206 |
      207 |     if (symbols.length === 0) {
    > 208 |       console.error(`‚ùå [${requestId}] Invalid symbols provided:`, {
          |               ^
      209 |         originalSymbols: req.params.symbols,
      210 |         filteredSymbols: symbols,
      211 |         impact: "No valid symbols to stream",

      at error (routes/websocket.js:208:15)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at next (tests/unit/routes/websocket.test.js:38:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at node_modules/express/lib/router/index.js:284:15
      at param (node_modules/express/lib/router/index.js:365:14)
      at param (node_modules/express/lib/router/index.js:376:14)
      at Function.process_params (node_modules/express/lib/router/index.js:421:3)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at router (node_modules/express/lib/router/index.js:47:12)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:113:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at Function.handle (node_modules/express/lib/application.js:181:10)
      at Server.app (node_modules/express/lib/express.js:39:9)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè WebSocket API Routes - API Key Dependencies ‚Ä∫ Stream Endpoint - Critical API Key Dependency ‚Ä∫ should stream market data with valid API credentials

    expected 200 "OK", got 500 "Internal Server Error"

      135 |       const response = await request(app)
      136 |         .get("/api/websocket/stream/AAPL")
    > 137 |         .expect(200);
          |          ^
      138 |
      139 |       expect(response.body.success).toBe(true);
      140 |       expect(response.body.data.symbols).toEqual(["AAPL"]);

      at Object.expect (tests/unit/routes/websocket.test.js:137:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/unit/routes/settings.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Error fetching API keys: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/settings.test.js:79:39)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      405 |     });
      406 |   } catch (error) {
    > 407 |     console.error("Error fetching API keys:", error);
          |             ^
      408 |     res.status(500).json({
      409 |       success: false,
      410 |       error: "Failed to fetch API keys",

      at error (routes/settings.js:407:13)

    console.error
      Error storing API key: Error: API key for this provider already exists
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/settings.test.js:155:21)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      508 |     });
      509 |   } catch (error) {
    > 510 |     console.error("Error storing API key:", error);
          |             ^
      511 |
      512 |     if (error.message.includes("circuit breaker")) {
      513 |       return res.status(503).json({

      at error (routes/settings.js:510:13)

    console.log
      Database not available - using default onboarding status

      at log (routes/settings.js:783:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Settings API Routes ‚Ä∫ POST /api/settings/api-keys ‚Ä∫ should add new API key successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-jwt-token", "alpaca", ObjectContaining {"apiKey": "test-api-key", "apiSecret": "test-secret", "description": "New API Key", "isSandbox": true}
    Received: "test-jwt-token", "alpaca", {"createdAt": "2025-09-26T01:27:41.568Z", "description": "New API Key", "isSandbox": true, "keyId": "test-api-key", "secret": "test-secret"}

    Number of calls: 1

      124 |       });
      125 |
    > 126 |       expect(storeApiKey).toHaveBeenCalledWith(
          |                           ^
      127 |         "test-jwt-token",
      128 |         "alpaca",
      129 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/routes/settings.test.js:126:27)

  ‚óè Settings API Routes ‚Ä∫ PUT /api/settings/api-keys/:provider ‚Ä∫ should update API key successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-jwt-token", "alpaca", ObjectContaining {"apiKey": "existing-key", "apiSecret": "existing-secret", "description": "Updated API Key", "isSandbox": false}
    Received: "test-jwt-token", "alpaca", {"description": "Updated API Key", "isSandbox": false, "keyId": undefined, "secret": undefined, "updatedAt": "2025-09-26T01:27:41.573Z"}

    Number of calls: 1

      209 |
      210 |       expect(getApiKey).toHaveBeenCalledWith("test-jwt-token", "alpaca");
    > 211 |       expect(storeApiKey).toHaveBeenCalledWith(
          |                           ^
      212 |         "test-jwt-token",
      213 |         "alpaca",
      214 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/routes/settings.test.js:211:27)

  ‚óè Settings API Routes ‚Ä∫ GET /api/settings/onboarding-status ‚Ä∫ should return onboarding status

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,9 +1,10 @@
      Object {
        "onboarding": Object {
          "completed": true,
          "configuredProviders": 1,
    +     "fallback": false,
          "hasApiKeys": true,
          "nextStep": "complete",
        },
        "success": true,
        "timestamp": Any<String>,

      275 |         .expect(200);
      276 |
    > 277 |       expect(response.body).toEqual({
          |                             ^
      278 |         success: true,
      279 |         onboarding: {
      280 |           completed: true,

      at Object.toEqual (tests/unit/routes/settings.test.js:277:29)

FAIL tests/unit/routes/etf.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for spy

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for INVALID

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.error
      ETF holdings database error: Error: Database connection failed
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/etf.test.js:215:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      194 |     });
      195 |   } catch (error) {
    > 196 |     console.error("ETF holdings database error:", error);
          |             ^
      197 |
      198 |     if (error.code === "42P01") {
      199 |       return res.status(500).json({

      at error (routes/etf.js:196:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for VTI-B

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for ETF0

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for ETF1

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for ETF2

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for ETF3

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for ETF4

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for LARGE

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.log
      üìà ETF holdings requested for SPY

      at log (routes/etf.js:20:13)

    console.error
      ETF holdings database error: Error: Test error
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/etf.test.js:629:35)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      194 |     });
      195 |   } catch (error) {
    > 196 |     console.error("ETF holdings database error:", error);
          |             ^
      197 |
      198 |     if (error.code === "42P01") {
      199 |       return res.status(500).json({

      at error (routes/etf.js:196:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè ETF Route - Comprehensive Unit Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle null database results gracefully

    expected 404 "Not Found", got 200 "OK"

      189 |       const response = await request(app)
      190 |         .get("/api/etf/SPY/holdings")
    > 191 |         .expect(404);
          |          ^
      192 |
      193 |       expect(response.body.success).toBe(false);
      194 |       expect(response.body.error).toBe("ETF not found");

      at Object.expect (tests/unit/routes/etf.test.js:191:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè ETF Route - Comprehensive Unit Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle database table not found error

    expected 500 "Internal Server Error", got 200 "OK"

      203 |       const response = await request(app)
      204 |         .get("/api/etf/SPY/holdings")
    > 205 |         .expect(500);
          |          ^
      206 |
      207 |       expect(response.body.success).toBe(false);
      208 |       expect(response.body.error).toBe("Database table not found");

      at Object.expect (tests/unit/routes/etf.test.js:205:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè ETF Route - Comprehensive Unit Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle very large limit parameter

    expected 404 "Not Found", got 200 "OK"

      416 |       const response = await request(app)
      417 |         .get("/api/etf/SPY/holdings?limit=99999")
    > 418 |         .expect(404);
          |          ^
      419 |
      420 |       expect(mockQuery).toHaveBeenCalledWith(
      421 |         expect.stringContaining("LIMIT $2"),

      at Object.expect (tests/unit/routes/etf.test.js:418:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè ETF Route - Comprehensive Unit Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle negative limit parameter

    expected 404 "Not Found", got 200 "OK"

      460 |       const response = await request(app)
      461 |         .get("/api/etf/SPY/holdings?limit=-10")
    > 462 |         .expect(404);
          |          ^
      463 |
      464 |       expect(mockQuery).toHaveBeenCalledWith(
      465 |         expect.stringContaining("LIMIT $2"),

      at Object.expect (tests/unit/routes/etf.test.js:462:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/unit/routes/user.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (enable) ‚Ä∫ should enable 2FA and save secret to database

    expected 200 "OK", got 404 "Not Found"

      62 |           userId: "test-user-123",
      63 |         })
    > 64 |         .expect(200);
         |          ^
      65 |
      66 |       expect(response.body.success).toBe(true);
      67 |       expect(response.body.message).toContain("2FA setup initiated");

      at Object.expect (tests/unit/routes/user.test.js:64:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (enable) ‚Ä∫ should handle database errors gracefully during setup

    expected 200 "OK", got 404 "Not Found"

      86 |           userId: "test-user-123",
      87 |         })
    > 88 |         .expect(200);
         |          ^
      89 |
      90 |       expect(response.body.success).toBe(true);
      91 |       expect(response.body.message).toContain("2FA setup initiated");

      at Object.expect (tests/unit/routes/user.test.js:88:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (verify) ‚Ä∫ should verify 2FA code and activate

    expected 200 "OK", got 404 "Not Found"

      115 |           code: "123456",
      116 |         })
    > 117 |         .expect(200);
          |          ^
      118 |
      119 |       expect(response.body.success).toBe(true);
      120 |       expect(response.body.message).toContain("setup completed successfully");

      at Object.expect (tests/unit/routes/user.test.js:117:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (verify) ‚Ä∫ should reject invalid 2FA codes

    expected 400 "Bad Request", got 404 "Not Found"

      148 |           code: "invalid",
      149 |         })
    > 150 |         .expect(400);
          |          ^
      151 |
      152 |       expect(response.body.success).toBe(false);
      153 |       expect(response.body.error).toBe("Invalid 2FA code");

      at Object.expect (tests/unit/routes/user.test.js:150:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (verify) ‚Ä∫ should handle missing 2FA setup

    expected 400 "Bad Request", got 404 "Not Found"

      164 |           code: "123456",
      165 |         })
    > 166 |         .expect(400);
          |          ^
      167 |
      168 |       expect(response.body.success).toBe(false);
      169 |       expect(response.body.error).toBe("No 2FA setup found");

      at Object.expect (tests/unit/routes/user.test.js:166:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (disable) ‚Ä∫ should disable 2FA after verifying current code

    expected 200 "OK", got 404 "Not Found"

      191 |           code: "123456",
      192 |         })
    > 193 |         .expect(200);
          |          ^
      194 |
      195 |       expect(response.body.success).toBe(true);
      196 |       expect(response.body.message).toContain("disabled successfully");

      at Object.expect (tests/unit/routes/user.test.js:193:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ POST /user/two-factor (disable) ‚Ä∫ should require valid code to disable

    expected 400 "Bad Request", got 404 "Not Found"

      223 |           code: "invalid",
      224 |         })
    > 225 |         .expect(400);
          |          ^
      226 |
      227 |       expect(response.body.success).toBe(false);
      228 |       expect(response.body.error).toBe("Invalid 2FA code");

      at Object.expect (tests/unit/routes/user.test.js:225:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ Error handling ‚Ä∫ should require action parameter

    expected 400 "Bad Request", got 404 "Not Found"

      237 |           userId: "test-user-123",
      238 |         })
    > 239 |         .expect(400);
          |          ^
      240 |
      241 |       expect(response.body.success).toBe(false);
      242 |       expect(response.body.error).toBe("Missing required parameters");

      at Object.expect (tests/unit/routes/user.test.js:239:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ Error handling ‚Ä∫ should require userId parameter

    expected 400 "Bad Request", got 404 "Not Found"

      249 |           action: "enable",
      250 |         })
    > 251 |         .expect(400);
          |          ^
      252 |
      253 |       expect(response.body.success).toBe(false);
      254 |       expect(response.body.error).toBe("Missing required parameters");

      at Object.expect (tests/unit/routes/user.test.js:251:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè User Routes - 2FA Functionality ‚Ä∫ Error handling ‚Ä∫ should handle invalid actions

    expected 400 "Bad Request", got 404 "Not Found"

      262 |           userId: "test-user-123",
      263 |         })
    > 264 |         .expect(400);
          |          ^
      265 |
      266 |       expect(response.body.success).toBe(false);
      267 |       expect(response.body.error).toBe("Invalid action");

      at Object.expect (tests/unit/routes/user.test.js:264:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings/dashboard HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings/trading-mode HTTP/1.1" 200 232 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "GET /api/settings/trading-mode HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "POST /api/settings/trading-mode HTTP/1.1" 200 323 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "POST /api/settings/trading-mode HTTP/1.1" 400 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:41 +0000] "POST /api/settings/trading-mode HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 331 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 331 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/api-keys HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/alpaca HTTP/1.1" 404 65 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/alpaca HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "PUT /api/settings/api-keys/alpaca HTTP/1.1" 404 79 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "PUT /api/settings/api-keys/alpaca HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "DELETE /api/settings/api-keys/alpaca HTTP/1.1" 404 65 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "DELETE /api/settings/api-keys/alpaca HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 331 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/trading-mode HTTP/1.1" 200 232 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/trading-mode HTTP/1.1" 400 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/invalid-provider-name HTTP/1.1" 404 80 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
FAIL tests/integration/routes/settings.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trading mode requested for user: dev-user-bypass

      at log (routes/settings.js:259:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîÑ Trading mode toggle requested for user: dev-user-bypass

      at log (routes/settings.js:310:13)

    console.log
      ‚úÖ Trading mode updated to paper for user: dev-user-bypass

      at log (routes/settings.js:353:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîÑ Trading mode toggle requested for user: dev-user-bypass

      at log (routes/settings.js:310:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      Provider listing error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1216:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1429:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:398:23

      1254 |     } catch (error) {
      1255 |       this.recordFailure(error);
    > 1256 |       console.error("Provider listing error:", error);
           |               ^
      1257 |       throw error; // Re-throw error so wrapper can handle it
      1258 |     }
      1259 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1256:15)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      Provider listing error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1216:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1429:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:398:23

      1254 |     } catch (error) {
      1255 |       this.recordFailure(error);
    > 1256 |       console.error("Provider listing error:", error);
           |               ^
      1257 |       throw error; // Re-throw error so wrapper can handle it
      1258 |     }
      1259 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1256:15)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:536:26

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:536:26

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trading mode requested for user: dev-user-bypass

      at log (routes/settings.js:259:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 5 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure (utils/apiKeyService.js:1255:12)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.error
      Provider listing error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1216:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1429:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:398:23

      1254 |     } catch (error) {
      1255 |       this.recordFailure(error);
    > 1256 |       console.error("Provider listing error:", error);
           |               ^
      1257 |       throw error; // Re-throw error so wrapper can handle it
      1258 |     }
      1259 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1256:15)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîÑ Trading mode toggle requested for user: dev-user-bypass

      at log (routes/settings.js:310:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 6 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure [as getApiKey] (utils/apiKeyService.js:940:12)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 7 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure [as getApiKey] (utils/apiKeyService.js:940:12)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 8 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure [as getApiKey] (utils/apiKeyService.js:940:12)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 9 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure [as getApiKey] (utils/apiKeyService.js:940:12)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 10 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure [as getApiKey] (utils/apiKeyService.js:940:12)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:421:24

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at routes/settings.js:421:24

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trading mode requested for user: dev-user-bypass

      at log (routes/settings.js:259:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key circuit breaker OPENED after 11 failures: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)

      559 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      560 |       this.circuitBreaker.state = "OPEN";
    > 561 |       console.error(
          |               ^
      562 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      563 |         error.message
      564 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:561:15)
      at ApiKeyService.recordFailure (utils/apiKeyService.js:1255:12)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.error
      Provider listing error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1216:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1429:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:398:23

      1254 |     } catch (error) {
      1255 |       this.recordFailure(error);
    > 1256 |       console.error("Provider listing error:", error);
           |               ^
      1257 |       throw error; // Re-throw error so wrapper can handle it
      1258 |     }
      1259 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1256:15)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: dev-user-bypass

      at log (routes/settings.js:44:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Settings Routes Integration Tests ‚Ä∫ GET /api/settings/api-keys (API Keys) ‚Ä∫ should return user API keys

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      145 |       if (response.status === 200) {
      146 |         expect(response.body).toHaveProperty("providers");
    > 147 |         expect(Array.isArray(response.body.providers)).toBe(true);
          |                                                        ^
      148 |       }
      149 |     });
      150 |

      at Object.toBe (tests/integration/routes/settings.integration.test.js:147:56)

  ‚óè Settings Routes Integration Tests ‚Ä∫ GET /api/settings/api-keys/:provider (Get Specific API Key) ‚Ä∫ should return specific provider API key status

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      232 |         .set("Authorization", "Bearer dev-bypass-token");
      233 |
    > 234 |       expect([200, 401].includes(response.status)).toBe(true);
          |                                                    ^
      235 |
      236 |       if (response.status === 200) {
      237 |         expect(response.body).toHaveProperty("provider", "alpaca");

      at Object.toBe (tests/integration/routes/settings.integration.test.js:234:52)

  ‚óè Settings Routes Integration Tests ‚Ä∫ DELETE /api/settings/api-keys/:provider (Delete API Key) ‚Ä∫ should delete API key

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      281 |         .set("Authorization", "Bearer dev-bypass-token");
      282 |
    > 283 |       expect([200, 401].includes(response.status)).toBe(true);
          |                                                    ^
      284 |
      285 |       if (response.status === 200) {
      286 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/settings.integration.test.js:283:52)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/%27%3B%20DROP%20TABLE%20user_api_keys%3B%20-- HTTP/1.1" 404 90 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/1%27%20OR%20%271%27%3D%271 HTTP/1.1" 404 71 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/UNION%20SELECT%20*%20FROM%20users HTTP/1.1" 404 84 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys/%3Cscript%3Ealert(%27xss%27)%3C%2Fscript%3E HTTP/1.1" 404 88 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/trading-mode HTTP/1.1" 200 232 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 331 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2899 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/apikeys HTTP/1.1" 302 44 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/settings/apikeys?broker=test&active=true HTTP/1.1" 302 68 "-" "-"
FAIL tests/unit/routes/earnings.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üìà Earnings data requested

      at log (routes/earnings.js:31:13)

    console.log
      üìà Earnings data requested

      at log (routes/earnings.js:31:13)

    console.log
      üìà Earnings details requested for symbol: AAPL

      at log (routes/earnings.js:396:13)

    console.log
      üìà Earnings details requested for symbol: INVALID

      at log (routes/earnings.js:396:13)

    console.log
      üìà Earnings data requested

      at log (routes/earnings.js:31:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Earnings Routes Unit Tests ‚Ä∫ GET /earnings ‚Ä∫ should handle calendar delegation errors

    expect(received).toMatchObject(expected)

    - Expected  - 2
    + Received  + 1

      Object {
    -   "error": Any<String>,
    -   "success": false,
    +   "success": true,
      }

      67 |
      68 |       expect([200, 404, 500]).toContain(response.status);
    > 69 |       expect(response.body).toMatchObject({
         |                             ^
      70 |         success: false,
      71 |         error: expect.any(String),
      72 |       });

      at Object.toMatchObject (tests/unit/routes/earnings.test.js:69:29)

  ‚óè Earnings Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle unexpected errors gracefully

    expect(received).toMatchObject(expected)

    - Expected  - 3
    + Received  + 1

      Object {
    -   "details": "Unexpected error",
    -   "error": Any<String>,
    -   "success": false,
    +   "success": true,
      }

      132 |
      133 |       expect([200, 404, 500]).toContain(response.status);
    > 134 |       expect(response.body).toMatchObject({
          |                             ^
      135 |         success: false,
      136 |         error: expect.any(String),
      137 |         details: "Unexpected error",

      at Object.toMatchObject (tests/unit/routes/earnings.test.js:134:29)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 400 84 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 400 110 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 400 84 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 200 11127 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 400 110 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 200 10632 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 400 68 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 400 68 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 200 244 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 400 68 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 200 490 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 400 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 400 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 200 487 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/run-ai-strategy HTTP/1.1" 500 75 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 500 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 400 89 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 400 246 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 500 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/deploy-hft HTTP/1.1" 500 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/available-symbols HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/available-symbols HTTP/1.1" 200 71 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/available-symbols HTTP/1.1" 200 71 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/list HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/list HTTP/1.1" 200 8905 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/list?includeBacktests=true&includeDeployments=true HTTP/1.1" 200 8905 "-" "-"
FAIL tests/integration/routes/strategyBuilder.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request { userId: undefined, prompt: undefined, symbolCount: 1 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request {
        userId: undefined,
        prompt: 'Create a momentum trading strategy for high-volume stocks',
        symbolCount: 0
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request { userId: undefined, prompt: 'short', symbolCount: 1 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request {
        userId: undefined,
        prompt: 'Create a momentum trading strategy based on RSI and moving averages',
        symbolCount: 2
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      {"timestamp":"2025-09-26T01:27:42.641Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Generating AI-powered strategy from natural language","correlationId":"ai-strategy-1758850062606-1txym3fgm","prompt":"Create a momentum trading strategy based on RSI and moving averages","symbolCount":2,"aiEnabled":true,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.648Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Generating AI strategy using advanced NLP engine","correlationId":"ai-strategy-1758850062606-1txym3fgm","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.650Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generation successful","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyType":"volatility_trading","confidence":0.9,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.650Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Successfully parsed AI response","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyName":"Trend_following-APPLE-VolatilityTrading-AI-FVDV","confidence":0.9,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.650Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generation successful","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyName":"Trend_following-APPLE-VolatilityTrading-AI-FVDV","strategyType":"volatility_trading","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.650Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generated successfully","correlationId":"164e7c4c","strategyName":"Trend_following-APPLE-VolatilityTrading-AI-FVDV","strategyType":"volatility_trading","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request {
        userId: undefined,
        prompt: 'Create a momentum trading strategy',
        symbolCount: 0
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request {
        userId: undefined,
        prompt: 'Create a scalping strategy for high frequency trading',
        symbolCount: 1
      }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      {"timestamp":"2025-09-26T01:27:42.659Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Generating AI-powered strategy from natural language","correlationId":"ai-strategy-1758850062606-1txym3fgm","prompt":"Create a scalping strategy for high frequency trading","symbolCount":1,"aiEnabled":true,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.660Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Generating AI strategy using advanced NLP engine","correlationId":"ai-strategy-1758850062606-1txym3fgm","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.660Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generation successful","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyType":"hft_scalping","confidence":0.9,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.660Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Successfully parsed AI response","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyName":"Balanced-SPY-HftScalping-AI-KSGD","confidence":0.9,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.661Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generation successful","correlationId":"ai-strategy-1758850062606-1txym3fgm","strategyName":"Balanced-SPY-HftScalping-AI-KSGD","strategyType":"hft_scalping","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.661Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy generated successfully","correlationId":"67bc8c64","strategyName":"Balanced-SPY-HftScalping-AI-KSGD","strategyType":"hft_scalping","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.664Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation request","correlationId":"a6c56c20","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.666Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation request","correlationId":"d9cfe5e2","strategyName":"Test Strategy","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.667Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation request","correlationId":"a6e58926","strategyName":"Test Momentum Strategy","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.668Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation completed","correlationId":"e952edca","errorCount":2,"warningCount":2,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.677Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation request","correlationId":"91b0e2bc","strategyName":"Empty Strategy","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.680Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest request","correlationId":"7043854c","strategyName":"Test Strategy","symbolCount":1,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.685Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest request","correlationId":"9b6dfb21","symbolCount":0,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.687Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest request","correlationId":"b3915e2c","strategyName":"Test Strategy","symbolCount":0,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.689Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest request","correlationId":"f67d1534","strategyName":"Test Strategy","symbolCount":2,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.691Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest request","correlationId":"566196a3","strategyName":"Test Strategy","symbolCount":0,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.691Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"AI strategy backtest error","correlationId":"f532336f","error":"Cannot read properties of undefined (reading 'length')","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.694Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment request","correlationId":"75edb4c5","strategyName":"High Performance Strategy","sharpeRatio":1.5,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.error
      Database query error: {
        error: 'column "risk_settings" of relation "trading_strategies" does not exist',
        query: '\n' +
          '        INSERT INTO trading_strategies (\n' +
          '          user_id, strategy_name, strategy_description, st...',
        params: '8 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/strategyBuilder.js:451:32

    console.log
      {"timestamp":"2025-09-26T01:27:42.696Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment failed","correlationId":"1c9aec14","error":"column \"risk_settings\" of relation \"trading_strategies\" does not exist","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.697Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment request","correlationId":"f6b1ad55","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.699Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment request","correlationId":"a960ed8e","strategyName":"Poor Performance Strategy","sharpeRatio":0.5,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.701Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment request","correlationId":"196506b3","strategyName":"High Performance Strategy","sharpeRatio":1.5,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.error
      Database query error: {
        error: 'column "risk_settings" of relation "trading_strategies" does not exist',
        query: '\n' +
          '        INSERT INTO trading_strategies (\n' +
          '          user_id, strategy_name, strategy_description, st...',
        params: '8 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/strategyBuilder.js:451:32

    console.log
      {"timestamp":"2025-09-26T01:27:42.706Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment failed","correlationId":"91a412d6","error":"column \"risk_settings\" of relation \"trading_strategies\" does not exist","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.708Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment request","correlationId":"5081e80c","strategyName":"Edge Case Strategy","sharpeRatio":1,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.error
      Database query error: {
        error: 'column "risk_settings" of relation "trading_strategies" does not exist',
        query: '\n' +
          '        INSERT INTO trading_strategies (\n' +
          '          user_id, strategy_name, strategy_description, st...',
        params: '8 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/strategyBuilder.js:451:32

    console.log
      {"timestamp":"2025-09-26T01:27:42.712Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"HFT deployment failed","correlationId":"d8771840","error":"column \"risk_settings\" of relation \"trading_strategies\" does not exist","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.717Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Available symbols request","correlationId":"317482cb","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.724Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Available symbols request","correlationId":"5d7a8559","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.727Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"User strategies list request","correlationId":"027d887f","includeBacktests":false,"includeDeployments":false,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.731Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"User strategies list request","correlationId":"3bc0b856","includeBacktests":"true","includeDeployments":"true","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.734Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"User strategies list request","correlationId":"5b477ae1","includeBacktests":"false","includeDeployments":"false","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.749Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Strategy validation request","correlationId":"4154fbb1","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      AI strategy generation request { userId: undefined, prompt: undefined, symbolCount: 0 }

      at log (routes/strategyBuilder.js:167:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.755Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Available symbols request","correlationId":"7aa75626","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      {"timestamp":"2025-09-26T01:27:42.756Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"User strategies list request","correlationId":"5af6a80b","includeBacktests":false,"includeDeployments":false,"severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/validate ‚Ä∫ should validate strategy with code

    expect(received).toHaveProperty(path)

    Expected path: "isValid"
    Received path: []

    Received value: {"errors": ["Strategy description is required", "Strategy parameters are required"], "suggestions": [], "valid": false, "warnings": ["Strategy does not generate any trading signals", "Strategy does not execute any trades"]}

      199 |         expect(response.body).toHaveProperty("success", true);
      200 |         expect(response.body).toHaveProperty("validation");
    > 201 |         expect(response.body.validation).toHaveProperty("isValid");
          |                                          ^
      202 |       }
      203 |     });
      204 |

      at Object.toHaveProperty (tests/integration/routes/strategyBuilder.integration.test.js:201:42)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/run-ai-strategy ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      252 |         });
      253 |
    > 254 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      255 |       expect(response.body).toHaveProperty("success", false);
      256 |       expect(response.body).toHaveProperty("error");
      257 |       expect(response.body.error).toContain("not implemented");

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:254:41)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/run-ai-strategy ‚Ä∫ should handle config parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      306 |         });
      307 |
    > 308 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      309 |       expect(response.body.error).toContain("not implemented");
      310 |     });
      311 |

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:308:41)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/run-ai-strategy ‚Ä∫ should handle missing symbols

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 422]

      322 |         });
      323 |
    > 324 |       expect([400, 422]).toContain(response.status);
          |                          ^
      325 |       expect(response.body).toHaveProperty("success", false);
      326 |       expect(response.body).toHaveProperty("error");
      327 |       expect(response.body.error).toContain("symbol");

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:324:26)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/deploy-hft ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected substring: "not implemented"
    Received string:    "HFT deployment failed"

      366 |       expect(response.body).toHaveProperty("success", false);
      367 |       expect(response.body).toHaveProperty("error");
    > 368 |       expect(response.body.error).toContain("not implemented");
          |                                   ^
      369 |     });
      370 |
      371 |     test("should require strategy and backtest results", async () => {

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:368:35)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/deploy-hft ‚Ä∫ should handle qualifying strategy

    expect(received).toContain(expected) // indexOf

    Expected substring: "not implemented"
    Received string:    "HFT deployment failed"

      430 |
      431 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
    > 432 |       expect(response.body.error).toContain("not implemented");
          |                                   ^
      433 |     });
      434 |
      435 |     test("should handle edge case qualification values", async () => {

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:432:35)

  ‚óè Strategy Builder Routes ‚Ä∫ POST /api/strategies/deploy-hft ‚Ä∫ should handle edge case qualification values

    expect(received).toContain(expected) // indexOf

    Expected substring: "not implemented"
    Received string:    "HFT deployment failed"

      452 |
      453 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
    > 454 |       expect(response.body.error).toContain("not implemented");
          |                                   ^
      455 |     });
      456 |   });
      457 |

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:454:35)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/list ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      506 |         .set("Authorization", "Bearer dev-bypass-token");
      507 |
    > 508 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      509 |       expect(response.body).toHaveProperty("success", false);
      510 |       expect(response.body).toHaveProperty("error");
      511 |       expect(response.body.error).toContain("not implemented");

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:508:41)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/list ‚Ä∫ should handle query parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      519 |         .set("Authorization", "Bearer dev-bypass-token");
      520 |
    > 521 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      522 |       expect(response.body.error).toContain("not implemented");
      523 |     });
      524 |

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:521:41)

  ‚óè Strategy Builder Routes ‚Ä∫ GET /api/strategies/list ‚Ä∫ should handle boolean query parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      530 |         .set("Authorization", "Bearer dev-bypass-token");
      531 |
    > 532 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      533 |       expect(response.body.error).toContain("not implemented");
      534 |     });
      535 |   });

      at Object.toContain (tests/integration/routes/strategyBuilder.integration.test.js:532:41)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/list?includeBacktests=false&includeDeployments=false HTTP/1.1" 200 8905 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 200 994 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 200 994 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/validate HTTP/1.1" 400 68 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "POST /api/strategies/ai-generate HTTP/1.1" 400 84 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 200 994 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/templates HTTP/1.1" 200 994 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/available-symbols HTTP/1.1" 200 71 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:42 +0000] "GET /api/strategies/list HTTP/1.1" 200 8905 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/portfolio/../../../etc/passwd HTTP/1.1" 404 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/portfolio/%2e%2e%2f%2e%2e%2fetc%2fpasswd HTTP/1.1" 404 150 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/portfolio/ HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/calendar/earnings?param=value% HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/calendar/earnings?param=value%ZZ HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 413 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 346 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 349 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 348 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 415 101 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
FAIL tests/integration/errors/malformed-request.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.error
      Error: SyntaxError: Unexpected token 'j', "{"incomplete": json" is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"incomplete": json',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Expected property name or '}' in JSON at position 1
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{invalid: "json"',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected token '}', ..."omplete": }" is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"nested": {"incomplete": }',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Error: SyntaxError: Unexpected non-whitespace character after JSON at position 18
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"valid": "start"}{invalid continuation}',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected non-whitespace character after JSON at position 27
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"escaped": "quote\\"break"}malformed',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Error: SyntaxError: Unexpected token 'n', "not json content" is not valid JSON
          at JSON.parse (<anonymous>)
          at createStrictSyntaxError (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:169:10)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:86:15)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: 'not json content',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Error: UnsupportedMediaTypeError: unsupported charset "ISO-8859-1"
          at jsonParser (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:130:12)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at logger (/home/stocks/algo/webapp/lambda/node_modules/morgan/index.js:144:5)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at cors (/home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:188:7)
          at /home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:224:17
          at originCallback (/home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:214:15)
          at /home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:219:13
          at optionsCallback (/home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:199:9)
          at corsMiddleware (/home/stocks/algo/webapp/lambda/node_modules/cors/lib/index.js:204:7)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:537:6)
          at xXssProtectionMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:315:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xPoweredByMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:308:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xPermittedCrossDomainPoliciesMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:301:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xFrameOptionsMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:285:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xDownloadOptionsMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:265:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xDnsPrefetchControlMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:258:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at xContentTypeOptionsMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:250:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at strictTransportSecurityMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:243:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at referrerPolicyMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:211:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at originAgentClusterMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:186:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at crossOriginResourcePolicyMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:179:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at crossOriginOpenerPolicyMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:163:3)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at contentSecurityPolicyMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:128:4)
          at internalNext (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:535:6)
          at helmetMiddleware (/home/stocks/algo/webapp/lambda/node_modules/helmet/index.cjs:539:6)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at expressInit (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/init.js:40:5)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at query (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/query.js:45:5)
          at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
          at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
          at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
          at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
          at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
          at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
          at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/application.js:181:10)
          at Server.app (/home/stocks/algo/webapp/lambda/node_modules/express/lib/express.js:39:9)
          at Server.emit (node:events:524:28)
          at parserOnIncoming (node:_http_server:1141:12)
          at HTTPParser.parserOnHeadersComplete (node:_http_common:118:17) {
        charset: 'iso-8859-1',
        type: 'charset.unsupported'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:130:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at logger (node_modules/morgan/index.js:144:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at cors (node_modules/cors/lib/index.js:188:7)
      at node_modules/cors/lib/index.js:224:17
      at originCallback (node_modules/cors/lib/index.js:214:15)
      at node_modules/cors/lib/index.js:219:13
      at optionsCallback (node_modules/cors/lib/index.js:199:9)
      at corsMiddleware (node_modules/cors/lib/index.js:204:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at internalNext (node_modules/helmet/index.cjs:537:6)
      at xXssProtectionMiddleware (node_modules/helmet/index.cjs:315:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xPoweredByMiddleware (node_modules/helmet/index.cjs:308:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xPermittedCrossDomainPoliciesMiddleware (node_modules/helmet/index.cjs:301:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xFrameOptionsMiddleware (node_modules/helmet/index.cjs:285:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xDownloadOptionsMiddleware (node_modules/helmet/index.cjs:265:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xDnsPrefetchControlMiddleware (node_modules/helmet/index.cjs:258:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at xContentTypeOptionsMiddleware (node_modules/helmet/index.cjs:250:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at strictTransportSecurityMiddleware (node_modules/helmet/index.cjs:243:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at referrerPolicyMiddleware (node_modules/helmet/index.cjs:211:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at originAgentClusterMiddleware (node_modules/helmet/index.cjs:186:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at crossOriginResourcePolicyMiddleware (node_modules/helmet/index.cjs:179:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at crossOriginOpenerPolicyMiddleware (node_modules/helmet/index.cjs:163:3)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at contentSecurityPolicyMiddleware (node_modules/helmet/index.cjs:128:4)
      at internalNext (node_modules/helmet/index.cjs:535:6)
      at helmetMiddleware (node_modules/helmet/index.cjs:539:6)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at Function.handle (node_modules/express/lib/application.js:181:10)
      at Server.app (node_modules/express/lib/express.js:39:9)

    console.error
      Error: SyntaxError: Expected ',' or '}' after property value in JSON at position 30
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"malicious": "<script>alert("xss")</script>"}',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Error: SyntaxError: Unterminated string in JSON at position 20
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"unclosed": "string',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected token 'u', ..."nction": function() "... is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"function": function() {}}',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected token 'u', ..."defined": undefined}" is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"undefined": undefined}',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected end of JSON input
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"invalid": ',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.error
      Error: SyntaxError: Unexpected end of JSON input
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"invalid": ',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview completed in 10ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Malformed Request Integration ‚Ä∫ JSON Parsing Error Scenarios ‚Ä∫ should handle malformed JSON gracefully

    expect(received).not.toContain(expected) // indexOf

    Expected substring: not ""
    Received string:        "Invalid symbols array"

      71 |         // Error should not expose the malformed content
      72 |         if (response.body?.error) {
    > 73 |           expect(response.body.error).not.toContain(test.body);
         |                                           ^
      74 |         }
      75 |       }
      76 |     });

      at Object.toContain (tests/integration/errors/malformed-request.integration.test.js:73:43)

  ‚óè Malformed Request Integration ‚Ä∫ JSON Parsing Error Scenarios ‚Ä∫ should handle JSON with dangerous characters

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 404]

      114 |
      115 |         // Should handle safely
    > 116 |         expect([200, 404]).toContain(response.status);
          |                            ^
      117 |
      118 |         if (response.status >= 400) {
      119 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/errors/malformed-request.integration.test.js:116:28)

  ‚óè Malformed Request Integration ‚Ä∫ JSON Parsing Error Scenarios ‚Ä∫ should handle deeply nested JSON structures

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 404]

      146 |
      147 |       // Should handle deep nesting gracefully
    > 148 |       expect([200, 404]).toContain(response.status);
          |                          ^
      149 |
      150 |       if (response.status >= 400) {
      151 |         expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/errors/malformed-request.integration.test.js:148:26)

  ‚óè Malformed Request Integration ‚Ä∫ HTTP Header Malformation ‚Ä∫ should handle malformed authorization headers

    TypeError: Invalid character in header content ["Authorization"]

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ‚óè Malformed Request Integration ‚Ä∫ HTTP Header Malformation ‚Ä∫ should handle malformed content-type headers

    TypeError: Invalid character in header content ["Content-Type"]

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ‚óè Malformed Request Integration ‚Ä∫ HTTP Header Malformation ‚Ä∫ should handle custom header injection attempts

    expect(received).toMatch(expected)

    Expected pattern: /invalid|malformed|header/i
    Received string:  "expect(received).not.toMatch(expected)¬∑
    Matcher error: received value must be a string¬∑
    Received has value: undefined"

      283 |         } catch (error) {
      284 |           // Some malformed headers might be rejected at HTTP level
    > 285 |           expect(error.message).toMatch(/invalid|malformed|header/i);
          |                                 ^
      286 |         }
      287 |       }
      288 |     });

      at Object.toMatch (tests/integration/errors/malformed-request.integration.test.js:285:33)

  ‚óè Malformed Request Integration ‚Ä∫ URL and Path Malformation ‚Ä∫ should handle malformed URLs and paths

    expect(received).toMatch(expected)

    Expected pattern: /invalid|malformed|url/i
    Received string:  "expect(received).toContain(expected) // indexOf¬∑
    Expected value: 200
    Received array: [400, 404, 500]"

      336 |         } catch (error) {
      337 |           // Some malformed URLs might be rejected at HTTP level
    > 338 |           expect(error.message).toMatch(/invalid|malformed|url/i);
          |                                 ^
      339 |         }
      340 |       }
      341 |     });

      at Object.toMatch (tests/integration/errors/malformed-request.integration.test.js:338:33)

  ‚óè Malformed Request Integration ‚Ä∫ URL and Path Malformation ‚Ä∫ should handle malformed query parameters

    TypeError: Request path contains unescaped characters

      at Test.request (node_modules/superagent/src/node/index.js:808:22)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

  ‚óè Malformed Request Integration ‚Ä∫ Request Body Malformation ‚Ä∫ should handle mismatched content-type and body

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 404]

      472 |           .send(test.body);
      473 |
    > 474 |         expect([200, 404]).toContain(response.status);
          |                            ^
      475 |
      476 |         if (response.status >= 400) {
      477 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/errors/malformed-request.integration.test.js:474:28)

  ‚óè Malformed Request Integration ‚Ä∫ Character Encoding Issues ‚Ä∫ should handle different character encodings

    expect(received).toContain(expected) // indexOf

    Expected value: 415
    Received array: [200, 404]

      538 |           .send(testBody);
      539 |
    > 540 |         expect([200, 404]).toContain(response.status);
          |                            ^
      541 |
      542 |         if (response.status >= 400) {
      543 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/errors/malformed-request.integration.test.js:540:28)

  ‚óè Malformed Request Integration ‚Ä∫ Error Response Consistency ‚Ä∫ should maintain consistent error format for all malformed requests

    TypeError: Invalid character in header content ["Authorization"]

      at Test.setHeader [as request] (node_modules/superagent/src/node/index.js:851:39)
      at Test.request [as end] (node_modules/superagent/src/node/index.js:986:8)
      at Test.end (node_modules/supertest/lib/test.js:118:11)
      at end (node_modules/superagent/src/request-base.js:285:12)
      at Test.Object.<anonymous>.RequestBase.then (node_modules/superagent/src/request-base.js:267:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=AAPL HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?category=buy HTTP/1.1" 200 902 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?analyst=goldman_sachs HTTP/1.1" 200 494 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?limit=50 HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?timeframe=weekly HTTP/1.1" 200 4581 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=MSFT&category=hold&limit=10 HTTP/1.1" 200 298 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=aapl HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=BRK.A HTTP/1.1" 200 299 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/aapl HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/MSFT?limit=5 HTTP/1.1" 200 1390 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/TSLA HTTP/1.1" 200 2530 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/BRK.A HTTP/1.1" 200 270 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/GOOGL HTTP/1.1" 200 2452 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/NVDA HTTP/1.1" 200 439 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/123 HTTP/1.1" 200 266 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL?limit=invalid HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL?limit=-5 HTTP/1.1" 200 439 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL?limit=99999 HTTP/1.1" 200 22124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=%20invalid%20 HTTP/1.1" 200 307 "-" "-"
FAIL tests/integration/routes/recommendations.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: AAPL, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: buy

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: MSFT, category: hold

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: aapl, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: BRK.A, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for MSFT

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for TSLA

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for BRK.A

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for GOOGL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for NVDA

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for 123

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol:  invalid , category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category:

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: BRK.A, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: MSFT, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üë®‚Äçüíº Analyst coverage requested for AAPL

      at log (routes/recommendations.js:194:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Recommendations Routes ‚Ä∫ GET /api/recommendations/analysts/:symbol ‚Ä∫ should handle extremely large limit

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      278 |         .set("Authorization", "Bearer dev-bypass-token");
      279 |
    > 280 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      281 |       expect(response.body.limit).toBe(99999);
      282 |     });
      283 |   });

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:280:41)

  ‚óè Recommendations Routes ‚Ä∫ Error Handling ‚Ä∫ should handle malformed URLs gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      315 |         .set("Authorization", "Bearer dev-bypass-token");
      316 |
    > 317 |       expect([501, 500].includes(response.status)).toBe(true);
          |                                                    ^
      318 |     });
      319 |
      320 |     test("should handle empty parameters", async () => {

      at Object.toBe (tests/integration/routes/recommendations.integration.test.js:317:52)

  ‚óè Recommendations Routes ‚Ä∫ Error Handling ‚Ä∫ should handle empty parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      323 |         .set("Authorization", "Bearer dev-bypass-token");
      324 |
    > 325 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      326 |     });
      327 |
      328 |     test("should handle URL encoded parameters", async () => {

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:325:41)

  ‚óè Recommendations Routes ‚Ä∫ Error Handling ‚Ä∫ should handle URL encoded parameters

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      331 |         .set("Authorization", "Bearer dev-bypass-token");
      332 |
    > 333 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      334 |       expect(response.body.symbol).toBe("BRK.A");
      335 |     });
      336 |   });

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:333:41)

  ‚óè Recommendations Routes ‚Ä∫ Response Structure Validation ‚Ä∫ should have consistent error response structure

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      342 |         .set("Authorization", "Bearer dev-bypass-token");
      343 |
    > 344 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      345 |       expect(response.body).toHaveProperty("success", false);
      346 |       expect(response.body).toHaveProperty("error");
      347 |       expect(response.body).toHaveProperty("details");

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:344:41)

  ‚óè Recommendations Routes ‚Ä∫ Response Structure Validation ‚Ä∫ should have consistent analyst coverage response structure

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      367 |         .set("Authorization", "Bearer dev-bypass-token");
      368 |
    > 369 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      370 |       expect(response.body).toHaveProperty("success", false);
      371 |       expect(response.body).toHaveProperty("error");
      372 |       expect(response.body).toHaveProperty("details");

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:369:41)

  ‚óè Recommendations Routes ‚Ä∫ Performance ‚Ä∫ should respond within reasonable time

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      389 |
      390 |       expect(responseTime).toBeLessThan(3000);
    > 391 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      392 |     });
      393 |
      394 |     test("should handle concurrent requests", async () => {

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:391:41)

  ‚óè Recommendations Routes ‚Ä∫ Performance ‚Ä∫ should handle concurrent requests

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      408 |
      409 |       responses.forEach((response) => {
    > 410 |         expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                           ^
      411 |       });
      412 |     });
      413 |   });

      at toContain (tests/integration/routes/recommendations.integration.test.js:410:43)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/routes/recommendations.integration.test.js:409:17)

  ‚óè Recommendations Routes ‚Ä∫ Required Setup Documentation ‚Ä∫ should document required setup for recommendations

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      419 |         .set("Authorization", "Bearer dev-bypass-token");
      420 |
    > 421 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      422 |       const setup = response.body.troubleshooting.required_setup;
      423 |
      424 |       // Should include key requirements

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:421:41)

  ‚óè Recommendations Routes ‚Ä∫ Required Setup Documentation ‚Ä∫ should document required setup for analyst coverage

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      439 |         .set("Authorization", "Bearer dev-bypass-token");
      440 |
    > 441 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      442 |       const setup = response.body.troubleshooting.required_setup;
      443 |
      444 |       // Should include key requirements

      at Object.toContain (tests/integration/routes/recommendations.integration.test.js:441:41)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=&category=&analyst= HTTP/1.1" 200 2017 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=BRK%2EA HTTP/1.1" 200 299 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations?symbol=MSFT HTTP/1.1" 200 515 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:43 +0000] "GET /api/recommendations/analysts/AAPL HTTP/1.1" 200 2412 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?status=filled HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?side=buy HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?limit=10&offset=5 HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 783 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/test-order-123 HTTP/1.1" 404 173 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/non-existent-order HTTP/1.1" 404 181 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/test-order-123 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 400 85 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 400 91 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 400 101 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 400 85 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "PUT /api/orders/test-order-123 HTTP/1.1" 400 163 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "PUT /api/orders/test-order-123 HTTP/1.1" 400 163 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "PUT /api/orders/test-order-123 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "DELETE /api/orders/test-order-123 HTTP/1.1" 400 163 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "DELETE /api/orders/non-existent-order HTTP/1.1" 400 167 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "DELETE /api/orders/test-order-123 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history HTTP/1.1" 200 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history?from=2023-01-01&to=2023-12-31 HTTP/1.1" 200 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history?include_summary=true HTTP/1.1" 200 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history HTTP/1.1" 200 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "POST /api/orders HTTP/1.1" 400 85 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?limit=invalid HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?offset=-1 HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders?status=invalid_status HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/%27%3B%20DROP%20TABLE%20orders%3B%20-- HTTP/1.1" 404 193 "-" "-"
FAIL tests/integration/routes/orders.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Order details request for user: dev-user-bypass, order: test-order-123

      at log (routes/orders.js:1964:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Order details request for user: dev-user-bypass, order: non-existent-order

      at log (routes/orders.js:1964:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: buy

      at log (routes/orders.js:399:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: undefined

      at log (routes/orders.js:399:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: buy

      at log (routes/orders.js:399:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: buy

      at log (routes/orders.js:399:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Update order request for user: dev-user-bypass, order: test-order-123

      at log (routes/orders.js:1739:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Update order request for user: dev-user-bypass, order: test-order-123

      at log (routes/orders.js:1739:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Delete order request for user: dev-user-bypass, order: test-order-123

      at log (routes/orders.js:1874:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Delete order request for user: dev-user-bypass, order: non-existent-order

      at log (routes/orders.js:1874:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Order history requested for user: dev-user-bypass

      at log (routes/orders.js:810:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Order history requested for user: dev-user-bypass

      at log (routes/orders.js:810:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Order history requested for user: dev-user-bypass

      at log (routes/orders.js:810:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Order history requested for user: dev-user-bypass

      at log (routes/orders.js:810:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: buy

      at log (routes/orders.js:399:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Order details request for user: dev-user-bypass, order: '; DROP TABLE orders; --

      at log (routes/orders.js:1964:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Order history requested for user: dev-user-bypass

      at log (routes/orders.js:810:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Orders endpoint called for user: dev-user-bypass

      at log (routes/orders.js:71:11)

    console.log
      Executing orders query with timeout protection

      at log (routes/orders.js:144:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Recent orders requested - limit: 20, days: 7, status: all

      at log (routes/orders.js:1049:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Recent orders requested - limit: 10, days: 30, status: filled

      at log (routes/orders.js:1049:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Orders Routes Integration Tests ‚Ä∫ GET /api/orders/:orderId (Get Specific Order) ‚Ä∫ should handle order lookup

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      81 |         .set("Authorization", "Bearer dev-bypass-token");
      82 |
    > 83 |       expect([200, 401].includes(response.status)).toBe(true);
         |                                                    ^
      84 |
      85 |       if (response.status === 200) {
      86 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/integration/routes/orders.integration.test.js:83:52)

  ‚óè Orders Routes Integration Tests ‚Ä∫ DELETE /api/orders/:orderId (Cancel Order) ‚Ä∫ should cancel order

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      234 |         .set("Authorization", "Bearer dev-bypass-token");
      235 |
    > 236 |       expect([200, 401].includes(response.status)).toBe(true);
          |                                                    ^
      237 |
      238 |       if (response.status === 200) {
      239 |         // Order deletion successful - no additional validation needed for this test

      at Object.toBe (tests/integration/routes/orders.integration.test.js:236:52)

  ‚óè Orders Routes Integration Tests ‚Ä∫ DELETE /api/orders/:orderId (Cancel Order) ‚Ä∫ should return 404 for non-existent order

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      246 |         .set("Authorization", "Bearer dev-bypass-token");
      247 |
    > 248 |       expect([404, 401, 403, 500].includes(response.status)).toBe(true);
          |                                                              ^
      249 |     });
      250 |
      251 |     test("should require authentication", async () => {

      at Object.toBe (tests/integration/routes/orders.integration.test.js:248:62)

  ‚óè Orders Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle SQL injection attempts safely

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      375 |           .set("Authorization", "Bearer dev-bypass-token");
      376 |
    > 377 |         expect([200, 400, 401].includes(response.status)).toBe(true);
          |                                                           ^
      378 |       }
      379 |     });
      380 |

      at Object.toBe (tests/integration/routes/orders.integration.test.js:377:59)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/history HTTP/1.1" 200 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 453 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders HTTP/1.1" 200 783 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/recent HTTP/1.1" 200 1815 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:44 +0000] "GET /api/orders/recent?limit=10&days=30&status=filled HTTP/1.1" 200 155 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance HTTP/1.1" 200 423 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/health HTTP/1.1" 200 150 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=SPY HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=QQQ HTTP/1.1" 200 258 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=IWM HTTP/1.1" 200 258 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=VTI HTTP/1.1" 200 258 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=SCHB HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?period=1d HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark?benchmark=SPY&period=1m HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=1d HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=1w HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=1m HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=3m HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=6m HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=1y HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns?type=time_weighted HTTP/1.1" 200 187 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns?type=dollar_weighted HTTP/1.1" 200 189 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns?type=both HTTP/1.1" 200 178 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution?type=sector HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution?type=security HTTP/1.1" 200 195 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution?type=allocation HTTP/1.1" 200 197 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/attribution?type=all HTTP/1.1" 200 190 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics?period=1m HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics?period=3m HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics?period=6m HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics?period=1y HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics?period=2y HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/risk HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/risk HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance HTTP/1.1" 200 423 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=invalid HTTP/1.1" 200 198 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?benchmark=INVALID_SYMBOL HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?type=unknown_type HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?start_date=invalid-date HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?end_date=2025-13-40 HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
FAIL tests/integration/routes/performance.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/benchmark (Benchmark Comparison) ‚Ä∫ should require authentication for benchmark comparison

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      64 |       const response = await request(app).get("/api/performance/benchmark");
      65 |
    > 66 |       expect([401].includes(response.status)).toBe(true);
         |                                               ^
      67 |     });
      68 |
      69 |     test("should return benchmark comparison with authentication", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:66:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/benchmark (Benchmark Comparison) ‚Ä∫ should handle different time periods

    expect(received).toHaveProperty(path, value)

    Expected path: "period"
    Received path: []

    Expected value: "1d"
    Received value: {"alpha": 0, "beta": 1, "correlation": 0.75, "outperformance": -0.1}

      122 |
      123 |         if (response.status === 200 && response.body.data.comparison) {
    > 124 |           expect(response.body.data.comparison).toHaveProperty(
          |                                                 ^
      125 |             "period",
      126 |             period
      127 |           );

      at Object.toHaveProperty (tests/integration/routes/performance.integration.test.js:124:49)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/portfolio (Portfolio Performance) ‚Ä∫ should require authentication for portfolio performance

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      168 |       const response = await request(app).get("/api/performance/portfolio");
      169 |
    > 170 |       expect([401].includes(response.status)).toBe(true);
          |                                               ^
      171 |     });
      172 |
      173 |     test("should return portfolio performance data with authentication", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:170:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/portfolio (Portfolio Performance) ‚Ä∫ should return portfolio performance data with authentication

    expect(received).toHaveProperty(path)

    Expected path: "performance"
    Received path: []

    Received value: {"average_return": 0, "max_return": 0, "min_return": 0, "period": "1y", "sharpe_ratio": 0, "total_pnl": 0, "total_positions": 0, "volatility": 0}

      181 |         expect(response.body).toHaveProperty("success", true);
      182 |         expect(response.body).toHaveProperty("data");
    > 183 |         expect(response.body.data).toHaveProperty("performance");
          |                                    ^
      184 |
      185 |         // Validate performance structure
      186 |         if (response.body.data.performance) {

      at Object.toHaveProperty (tests/integration/routes/performance.integration.test.js:183:36)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/returns (Return Calculations) ‚Ä∫ should require authentication for return calculations

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      257 |       const response = await request(app).get("/api/performance/returns");
      258 |
    > 259 |       expect([401].includes(response.status)).toBe(true);
          |                                               ^
      260 |     });
      261 |
      262 |     test("should return return calculations with authentication", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:259:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/returns (Return Calculations) ‚Ä∫ should return return calculations with authentication

    expect(received).toHaveProperty(path)

    Expected path: "returns"
    Received path: []

    Received value: {"annualized_return": 0, "calculation_type": "total", "positive_periods": 0, "total_periods": 1, "total_pnl": 0, "win_rate": 0}

      270 |         expect(response.body).toHaveProperty("success", true);
      271 |         expect(response.body).toHaveProperty("data");
    > 272 |         expect(response.body.data).toHaveProperty("returns");
          |                                    ^
      273 |
      274 |         // Validate returns structure
      275 |         if (response.body.data.returns) {

      at Object.toHaveProperty (tests/integration/routes/performance.integration.test.js:272:36)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/attribution (Performance Attribution) ‚Ä∫ should require authentication for performance attribution

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      310 |       const response = await request(app).get("/api/performance/attribution");
      311 |
    > 312 |       expect([401].includes(response.status)).toBe(true);
          |                                               ^
      313 |     });
      314 |
      315 |     test("should return performance attribution analysis", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:312:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/attribution (Performance Attribution) ‚Ä∫ should return performance attribution analysis

    expect(received).toHaveProperty(path)

    Expected path: "attribution"
    Received path: []

    Received value: {"asset_allocation": 0, "attribution_type": "sector", "interaction_effect": 0, "security_selection": 0, "total_pnl": 0, "total_positions": 1}

      323 |         expect(response.body).toHaveProperty("success", true);
      324 |         expect(response.body).toHaveProperty("data");
    > 325 |         expect(response.body.data).toHaveProperty("attribution");
          |                                    ^
      326 |
      327 |         // Validate attribution structure
      328 |         if (response.body.data.attribution) {

      at Object.toHaveProperty (tests/integration/routes/performance.integration.test.js:325:36)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/metrics (Performance Metrics) ‚Ä∫ should require authentication for performance metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      363 |       const response = await request(app).get("/api/performance/metrics");
      364 |
    > 365 |       expect([401].includes(response.status)).toBe(true);
          |                                               ^
      366 |     });
      367 |
      368 |     test("should return comprehensive performance metrics", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:365:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ GET /api/performance/risk (Risk Metrics) ‚Ä∫ should require authentication for risk metrics

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      444 |       const response = await request(app).get("/api/performance/risk");
      445 |
    > 446 |       expect([401].includes(response.status)).toBe(true);
          |                                               ^
      447 |     });
      448 |
      449 |     test("should return risk analysis metrics", async () => {

      at Object.toBe (tests/integration/routes/performance.integration.test.js:446:47)

  ‚óè Performance Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle malformed authentication tokens

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      553 |           .set("Authorization", token);
      554 |
    > 555 |         expect([401].includes(response.status)).toBe(true);
          |                                                 ^
      556 |       }
      557 |     });
      558 |

      at Object.toBe (tests/integration/routes/performance.integration.test.js:555:49)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance HTTP/1.1" 200 423 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/health HTTP/1.1" 200 150 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/benchmark HTTP/1.1" 200 256 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio HTTP/1.1" 200 193 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/returns HTTP/1.1" 200 179 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/metrics HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/performance/portfolio?period=10y HTTP/1.1" 200 194 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data HTTP/1.1" 200 306 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data HTTP/1.1" 200 306 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/AAPL HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/aapl HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/TsLa HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/NONEXISTENT HTTP/1.1" 500 571 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/ HTTP/1.1" 200 306 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/AAPL HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/TEST123 HTTP/1.1" 500 567 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/BRK.A HTTP/1.1" 500 565 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/123 HTTP/1.1" 500 563 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/%20invalid%20 HTTP/1.1" 500 569 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/DEFINITELY_NONEXISTENT_SYMBOL HTTP/1.1" 500 589 "-" "-"
FAIL tests/integration/routes/data.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìä Data API info requested

      at log (routes/data.js:19:15)

    console.log
      üìä Data API info requested

      at log (routes/data.js:19:15)

    console.log
      üìä [DATA] Fetching comprehensive data for AAPL

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for AAPL

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for TSLA

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for TSLA: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for NONEXISTENT

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for NONEXISTENT: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä Data API info requested

      at log (routes/data.js:19:15)

    console.log
      üìä [DATA] Fetching comprehensive data for AAPL

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for TEST123

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for TEST123: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for BRK.A

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for BRK.A: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for 123

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for 123: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for  INVALID

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for  INVALID : error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for DEFINITELY_NONEXISTENT_SYMBOL

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for DEFINITELY_NONEXISTENT_SYMBOL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for AAPL

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      üìä [DATA] Fetching comprehensive data for AAPL

      at log (routes/data.js:237:15)

    console.log
      üìä [DATA] Fetching comprehensive data for GOOGL

      at log (routes/data.js:237:15)

    console.log
      üìä [DATA] Fetching comprehensive data for MSFT

      at log (routes/data.js:237:15)

    console.log
      üìä [DATA] Fetching comprehensive data for TSLA

      at log (routes/data.js:237:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for GOOGL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for AAPL: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for MSFT: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.error
      Database query error: {
        error: 'column "ema_4" does not exist',
        query: '\n' +
          '      SELECT symbol, date, rsi, macd, macd_signal, macd_hist,\n' +
          '             sma_20, sma_50, ema_4, e...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 1)
      at routes/data.js:263:44

    console.error
      ‚ùå [DATA] Error fetching data for TSLA: error: column "ema_4" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 1)
          at /home/stocks/algo/webapp/lambda/routes/data.js:263:44 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '93',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      300 |   } catch (error) {
      301 |     try {
    > 302 |       console.error(`‚ùå [DATA] Error fetching data for ${symbolUpper}:`, error);
          |               ^
      303 |     } catch (e) {
      304 |       // Ignore console logging errors
      305 |     }

      at error (routes/data.js:302:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Data Routes ‚Ä∫ GET /api/data/:symbol ‚Ä∫ should handle valid symbol request

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      52 |
      53 |       // Should either return data (200) or not found (404) if no data exists
    > 54 |       expect([200, 404].includes(response.status)).toBe(true);
         |                                                    ^
      55 |
      56 |       if (response.status === 200) {
      57 |         expect(response.body.symbol).toBe("AAPL");

      at Object.toBe (tests/integration/routes/data.integration.test.js:54:52)

  ‚óè Data Routes ‚Ä∫ GET /api/data/:symbol ‚Ä∫ should convert symbol to uppercase

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      70 |       const response = await request(app).get("/api/data/aapl");
      71 |
    > 72 |       expect([200, 404].includes(response.status)).toBe(true);
         |                                                    ^
      73 |
      74 |       if (response.status === 200) {
      75 |         expect(response.body.symbol).toBe("AAPL");

      at Object.toBe (tests/integration/routes/data.integration.test.js:72:52)

  ‚óè Data Routes ‚Ä∫ GET /api/data/:symbol ‚Ä∫ should handle symbol with mixed case

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      80 |       const response = await request(app).get("/api/data/TsLa");
      81 |
    > 82 |       expect([200, 404].includes(response.status)).toBe(true);
         |                                                    ^
      83 |
      84 |       if (response.status === 200) {
      85 |         expect(response.body.symbol).toBe("TSLA");

      at Object.toBe (tests/integration/routes/data.integration.test.js:82:52)

  ‚óè Data Routes ‚Ä∫ GET /api/data/:symbol ‚Ä∫ should return 404 for non-existent symbol

    expect(received).toContain(expected) // indexOf

    Expected substring: "No data available for symbol NONEXISTENT"
    Received string:    "column \"ema_4\" does not exist"

      92 |       expect([404, 500]).toContain(response.status);
      93 |       expect(response.body).toHaveProperty("error");
    > 94 |       expect(response.body.error).toContain(
         |                                   ^
      95 |         "No data available for symbol NONEXISTENT"
      96 |       );
      97 |     });

      at Object.toContain (tests/integration/routes/data.integration.test.js:94:35)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/AAPL HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/GOOGL HTTP/1.1" 500 565 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/AAPL HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/MSFT HTTP/1.1" 500 564 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:45 +0000] "GET /api/data/TSLA HTTP/1.1" 500 564 "-" "-"
FAIL tests/integration/middleware/responseFormatter-middleware.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 6ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 2ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: NONEXISTENT, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 2ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Response Formatter Middleware Integration ‚Ä∫ Error Response Formatting ‚Ä∫ should format error responses with consistent structure

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 401

      109 |         const response = await request(app).get(scenario.endpoint);
      110 |
    > 111 |         expect(response.status).toBe(scenario.expectedStatus);
          |                                 ^
      112 |         expect(response.headers["content-type"]).toMatch(/application\/json/);
      113 |
      114 |         // Error response should have error information

      at Object.toBe (tests/integration/middleware/responseFormatter-middleware.integration.test.js:111:33)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-estimates HTTP/1.1" 200 1442 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-history HTTP/1.1" 200 2118 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/nonexistent HTTP/1.1" 404 121 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/portfolio/nonexistent HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/nonexistent HTTP/1.1" 404 121 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "POST /api/health HTTP/1.1" 404 116 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "POST /api/calendar/earnings HTTP/1.1" 404 127 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?symbol=NONEXISTENT&start_date=2050-01-01&end_date=2050-01-02 HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/health HTTP/1.1" 200 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/alerts/active HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
FAIL tests/integration/routes/calendar.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: AAPL, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 7

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: AAPL, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: NONEXISTENT, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:867:13)

    console.log
      üí∞ Dividends calendar requested - symbol: AAPL, days_ahead: 30

      at log (routes/calendar.js:867:13)

    console.log
      üìä Economic calendar requested - country: US, importance: all

      at log (routes/calendar.js:1147:13)

    console.log
      üìä Economic calendar requested - country: US, importance: all

      at log (routes/calendar.js:1147:13)

    console.log
      üìÖ Upcoming calendar events requested - days: 30, country: US, importance: all

      at log (routes/calendar.js:1560:13)

    console.log
      üìÖ Upcoming calendar events requested - days: 7, country: US, importance: all

      at log (routes/calendar.js:1560:13)

    console.log
      üìÖ Upcoming calendar events requested - days: 14, country: US, importance: all

      at log (routes/calendar.js:1560:13)

    console.log
      Calendar debug endpoint called

      at log (routes/calendar.js:272:13)

    console.log
      Table exists check: { exists: true }

      at log (routes/calendar.js:284:13)

    console.log
      Total earnings reports: { total: '5' }

      at log (routes/calendar.js:290:15)

    console.log
      Sample records: [
        {
          symbol: 'AMZN',
          event_type: 'earnings',
          start_date: 2024-02-05T06:00:00.000Z,
          title: 'AMZN Q1 2024 Earnings Report',
          eps_estimate: '0.80',
          eps_actual: '1.00'
        },
        {
          symbol: 'TSLA',
          event_type: 'earnings',
          start_date: 2024-01-30T06:00:00.000Z,
          title: 'TSLA Q1 2024 Earnings Report',
          eps_estimate: '0.73',
          eps_actual: '0.71'
        },
        {
          symbol: 'GOOGL',
          event_type: 'earnings',
          start_date: 2024-01-25T06:00:00.000Z,
          title: 'GOOGL Q1 2024 Earnings Report',
          eps_estimate: '1.59',
          eps_actual: '1.64'
        },
        {
          symbol: 'MSFT',
          event_type: 'earnings',
          start_date: 2024-01-20T06:00:00.000Z,
          title: 'MSFT Q1 2024 Earnings Report',
          eps_estimate: '2.87',
          eps_actual: '2.93'
        },
        {
          symbol: 'AAPL',
          event_type: 'earnings',
          start_date: 2024-01-15T06:00:00.000Z,
          title: 'AAPL Q1 2024 Earnings Report',
          eps_estimate: '2.10',
          eps_actual: '2.18'
        }
      ]

      at log (routes/calendar.js:302:15)

    console.log
      Calendar debug endpoint called

      at log (routes/calendar.js:272:13)

    console.log
      Table exists check: { exists: true }

      at log (routes/calendar.js:284:13)

    console.log
      Total earnings reports: { total: '5' }

      at log (routes/calendar.js:290:15)

    console.log
      Sample records: [
        {
          symbol: 'AMZN',
          event_type: 'earnings',
          start_date: 2024-02-05T06:00:00.000Z,
          title: 'AMZN Q1 2024 Earnings Report',
          eps_estimate: '0.80',
          eps_actual: '1.00'
        },
        {
          symbol: 'TSLA',
          event_type: 'earnings',
          start_date: 2024-01-30T06:00:00.000Z,
          title: 'TSLA Q1 2024 Earnings Report',
          eps_estimate: '0.73',
          eps_actual: '0.71'
        },
        {
          symbol: 'GOOGL',
          event_type: 'earnings',
          start_date: 2024-01-25T06:00:00.000Z,
          title: 'GOOGL Q1 2024 Earnings Report',
          eps_estimate: '1.59',
          eps_actual: '1.64'
        },
        {
          symbol: 'MSFT',
          event_type: 'earnings',
          start_date: 2024-01-20T06:00:00.000Z,
          title: 'MSFT Q1 2024 Earnings Report',
          eps_estimate: '2.87',
          eps_actual: '2.93'
        },
        {
          symbol: 'AAPL',
          event_type: 'earnings',
          start_date: 2024-01-15T06:00:00.000Z,
          title: 'AAPL Q1 2024 Earnings Report',
          eps_estimate: '2.10',
          eps_actual: '2.18'
        }
      ]

      at log (routes/calendar.js:302:15)

    console.log
      Calendar test endpoint called

      at log (routes/calendar.js:333:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      Calendar events endpoint called with params: { page: '2' }

      at log (routes/calendar.js:372:13)

    console.log
      Calendar events endpoint called with params: { limit: '10' }

      at log (routes/calendar.js:372:13)

    console.log
      Calendar events endpoint called with params: { type: 'upcoming' }

      at log (routes/calendar.js:372:13)

    console.error
      Database query error: {
        error: 'column "date" does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        symbol,\n' +
          '        symbol as company_name,\n' +
          '        quarter as report_date,\n' +
          '      ...',
        params: '2 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 0)
      at routes/calendar.js:792:57

    console.error
      Error fetching earnings metrics: error: column "date" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 0)
          at /home/stocks/algo/webapp/lambda/routes/calendar.js:792:57 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '880',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      836 |     });
      837 |   } catch (error) {
    > 838 |     console.error("Error fetching earnings metrics:", error);
          |             ^
      839 |     res.status(500).json({
      840 |       success: false,
      841 |       error: "Failed to fetch earnings metrics",

      at error (routes/calendar.js:838:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/earnings ‚Ä∫ should handle invalid dates gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      126 |       );
      127 |
    > 128 |       expect(response.status).toBe(200);
          |                               ^
      129 |       expect(response.body.success).toBe(true);
      130 |       expect(response.body).toHaveProperty("data");
      131 |     });

      at Object.toBe (tests/integration/routes/calendar.integration.test.js:128:31)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/economic ‚Ä∫ should return economic calendar data

    expect(received).toHaveProperty(path)

    Expected path: "troubleshooting"
    Received path: []

    Received value: {"data": {"available_filters": {"categories": ["monetary_policy", "inflation", "employment", "gdp", "consumption", "manufacturing", "sentiment", "housing"], "countries": ["US", "EU", "GB", "JP", "CA", "AU"], "importance_levels": ["all", "high", "medium", "low"]}, "economic_events": [{"actual": "3.53%", "category": "monetary_policy", "country": "US", "currency": "USD", "date": "2025-09-26", "description": "FOMC monetary policy decision and rate announcement", "event_id": "US_monetary_policy_2025-09-26", "forecast": "2.46%", "frequency": "monthly", "impact": "high", "importance": "high", "is_tentative": false, "local_time": "14:00", "previous": "3.33%", "source": "Bureau of Labor Statistics", "time": "2025-09-25T19:00:00.000Z", "title": "Federal Reserve Interest Rate Decision", "unit": "index", "volatility_expected": "high"}, {"actual": null, "category": "inflation", "country": "US", "currency": "USD", "date": "2025-10-01", "description": "Wholesale price inflation and producer costs", "event_id": "US_inflation_2025-10-01", "forecast": "4.5%", "frequency": "monthly", "impact": "medium", "importance": "medium", "is_tentative": true, "local_time": "08:30", "previous": "2.9%", "source": "Bureau of Labor Statistics", "time": "2025-09-30T13:30:00.000Z", "title": "Producer Price Index (PPI)", "unit": "percent", "volatility_expected": "medium"}, {"actual": null, "category": "sentiment", "country": "US", "currency": "USD", "date": "2025-10-03", "description": "Consumer sentiment and economic outlook confidence", "event_id": "US_sentiment_2025-10-03", "forecast": "92.5", "frequency": "monthly", "impact": "low", "importance": "low", "is_tentative": false, "local_time": "10:00", "previous": "105.7", "source": "Bureau of Labor Statistics", "time": "2025-10-02T15:00:00.000Z", "title": "Consumer Confidence Index", "unit": "index", "volatility_expected": "low"}, {"actual": null, "category": "employment", "country": "US", "currency": "USD", "date": "2025-10-03", "description": "Weekly unemployment insurance claims", "event_id": "US_employment_2025-10-03", "forecast": "271K", "frequency": "weekly", "impact": "low", "importance": "low", "is_tentative": true, "local_time": "08:30", "previous": "323K", "source": "Bureau of Labor Statistics", "time": "2025-10-02T13:30:00.000Z", "title": "Initial Jobless Claims", "unit": "jobs", "volatility_expected": "low"}, {"actual": null, "category": "employment", "country": "US", "currency": "USD", "date": "2025-10-04", "description": "Monthly employment report and unemployment rate", "event_id": "US_employment_2025-10-04", "forecast": "318K", "frequency": "monthly", "impact": "high", "importance": "high", "is_tentative": false, "local_time": "08:30", "previous": "292K", "source": "Bureau of Labor Statistics", "time": "2025-10-03T13:30:00.000Z", "title": "Non-Farm Payrolls", "unit": "jobs", "volatility_expected": "high"}, {"actual": null, "category": "gdp", "country": "US", "currency": "USD", "date": "2025-10-04", "description": "Gross Domestic Product growth rate - quarterly preliminary", "event_id": "US_gdp_2025-10-04", "forecast": "1.4%", "frequency": "quarterly", "impact": "medium", "importance": "high", "is_tentative": false, "local_time": "08:30", "previous": "2.7%", "source": "Bureau of Labor Statistics", "time": "2025-10-03T13:30:00.000Z", "title": "GDP Quarterly Growth", "unit": "index", "volatility_expected": "high"}, {"actual": null, "category": "monetary_policy", "country": "US", "currency": "USD", "date": "2025-10-08", "description": "FOMC monetary policy decision and rate announcement", "event_id": "US_monetary_policy_2025-10-08", "forecast": "5.00%", "frequency": "monthly", "impact": "high", "importance": "high", "is_tentative": false, "local_time": "14:00", "previous": "2.13%", "source": "Bureau of Labor Statistics", "time": "2025-10-07T19:00:00.000Z", "title": "Federal Reserve Interest Rate Decision", "unit": "index", "volatility_expected": "high"}, {"actual": "1.6%", "category": "inflation", "country": "US", "currency": "USD", "date": "2025-10-08", "description": "Monthly inflation rate and cost of living changes", "event_id": "US_inflation_2025-10-08", "forecast": "2.4%", "frequency": "monthly", "impact": "high", "importance": "high", "is_tentative": false, "local_time": "08:30", "previous": "2.4%", "source": "Bureau of Labor Statistics", "time": "2025-10-07T13:30:00.000Z", "title": "Consumer Price Index (CPI)", "unit": "percent", "volatility_expected": "high"}, {"actual": null, "category": "monetary_policy", "country": "US", "currency": "USD", "date": "2025-10-09", "description": "FOMC monetary policy decision and rate announcement", "event_id": "US_monetary_policy_2025-10-09", "forecast": "3.81%", "frequency": "monthly", "impact": "high", "importance": "high", "is_tentative": false, "local_time": "14:00", "previous": "4.61%", "source": "Bureau of Labor Statistics", "time": "2025-10-08T19:00:00.000Z", "title": "Federal Reserve Interest Rate Decision", "unit": "index", "volatility_expected": "high"}, {"actual": "59.5", "category": "manufacturing", "country": "US", "currency": "USD", "date": "2025-10-09", "description": "Manufacturing sector purchasing managers index", "event_id": "US_manufacturing_2025-10-09", "forecast": "47.7", "frequency": "monthly", "impact": "medium", "importance": "medium", "is_tentative": true, "local_time": "10:00", "previous": "55.7", "source": "Bureau of Labor Statistics", "time": "2025-10-08T15:00:00.000Z", "title": "ISM Manufacturing PMI", "unit": "index", "volatility_expected": "medium"}, ‚Ä¶], "filters": {"country": "US", "days_ahead": 14, "importance": "all", "limit": 30}, "summary": {"by_category": {"employment": 2, "gdp": 1, "inflation": 2, "manufacturing": 2, "monetary_policy": 3, "sentiment": 2}, "by_importance": {"high": 6, "low": 3, "medium": 3}, "country": "US", "date_range": {"days_covered": 14, "from": "2025-09-26", "to": "2025-10-10"}, "next_24h": 0, "this_week": 3, "total_events": 12, "upcoming_high_impact": 5}}, "metadata": {"currency_focus": "USD", "data_source": "simulated_economic_data", "generated_at": "2025-09-26T01:27:46.655Z", "timezone": "UTC", "total_returned": 12}, "success": true, "timestamp": "2025-09-26T01:27:46.655Z"}

      168 |       expect(response.body.data).toHaveProperty("summary");
      169 |       expect(Array.isArray(response.body.data.economic_events)).toBe(true);
    > 170 |       expect(response.body).toHaveProperty("troubleshooting");
          |                             ^
      171 |     });
      172 |
      173 |     test("should handle country parameter in 501 response", async () => {

      at Object.toHaveProperty (tests/integration/routes/calendar.integration.test.js:170:29)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/economic ‚Ä∫ should handle country parameter in 501 response

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      176 |       );
      177 |
    > 178 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      179 |       expect(response.body.success).toBe(false);
      180 |       expect(response.body.country).toBe("US");
      181 |     });

      at Object.toContain (tests/integration/routes/calendar.integration.test.js:178:41)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/upcoming ‚Ä∫ should return 501 not implemented

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      186 |       const response = await request(app).get("/api/calendar/upcoming");
      187 |
    > 188 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      189 |       expect(response.body.success).toBe(false);
      190 |       expect(response.body.error).toBe(
      191 |         "Calendar upcoming events not implemented"

      at Object.toContain (tests/integration/routes/calendar.integration.test.js:188:41)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/upcoming ‚Ä∫ should handle days parameter in 501 response

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      197 |       const response = await request(app).get("/api/calendar/upcoming?days=7");
      198 |
    > 199 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      200 |       expect(response.body.success).toBe(false);
      201 |     });
      202 |

      at Object.toContain (tests/integration/routes/calendar.integration.test.js:199:41)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/upcoming ‚Ä∫ should handle multiple parameters in 501 response

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      206 |       );
      207 |
    > 208 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
          |                                         ^
      209 |       expect(response.body.success).toBe(false);
      210 |       expect(response.body.symbol).toBe("AAPL");
      211 |     });

      at Object.toContain (tests/integration/routes/calendar.integration.test.js:208:41)

  ‚óè Calendar Routes ‚Ä∫ GET /api/calendar/earnings-metrics ‚Ä∫ should handle database dependencies gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      348 |
      349 |       // Earnings metrics requires earnings_history table
    > 350 |       expect(response.status).toBe(200);
          |                               ^
      351 |
      352 |       if (response.status === 200) {
      353 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/integration/routes/calendar.integration.test.js:350:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar HTTP/1.1" 200 120 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?start_date=2024-01-01&end_date=2024-01-31 HTTP/1.1" 200 3290 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?symbol=AAPL HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?days_ahead=7 HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?limit=10 HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?symbol=AAPL&days_ahead=30&limit=25 HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?symbol=NONEXISTENT&start_date=2050-01-01&end_date=2050-01-02 HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings?start_date=invalid-date HTTP/1.1" 400 120 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/dividends HTTP/1.1" 200 12056 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/dividends?symbol=AAPL HTTP/1.1" 200 1004 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/economic HTTP/1.1" 200 6729 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/economic?country=US HTTP/1.1" 200 4289 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/upcoming HTTP/1.1" 200 9155 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/upcoming?days=7 HTTP/1.1" 200 2732 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/upcoming?days=14&type=earnings&symbol=AAPL&limit=25 HTTP/1.1" 200 4717 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/health HTTP/1.1" 200 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/debug HTTP/1.1" 200 1007 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/debug HTTP/1.1" 200 1007 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/test HTTP/1.1" 200 1142 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/events?page=2 HTTP/1.1" 200 222 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/events?limit=10 HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/events?type=upcoming HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-estimates HTTP/1.1" 200 1442 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-estimates?page=1&limit=5 HTTP/1.1" 200 1581 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-history HTTP/1.1" 200 2118 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:46 +0000] "GET /api/calendar/earnings-metrics HTTP/1.1" 500 176 "-" "-"
FAIL tests/integration/websocket/websocket.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.error
      Error: SyntaxError: Unexpected token 'n', "not json" is not valid JSON
          at JSON.parse (<anonymous>)
          at createStrictSyntaxError (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:169:10)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:86:15)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: 'not json',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.error
      Error: SyntaxError: Unexpected token '}', "{"incomplete": }" is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"incomplete": }',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Connection Establishment ‚Ä∫ should handle WebSocket upgrade requests

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [404, 500]

      35 |
      36 |       // WebSocket upgrade might return specific status codes
    > 37 |       expect([404, 500]).toContain(response.status);
         |                          ^
      38 |
      39 |       if (response.status === 101) {
      40 |         // Successful WebSocket upgrade

      at Object.toContain (tests/integration/websocket/websocket.integration.test.js:37:26)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Connection Establishment ‚Ä∫ should validate WebSocket authentication requirements

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 404

      79 |           .set("Connection", "Upgrade");
      80 |
    > 81 |         expect(unauthResponse.status).toBe(401);
         |                                       ^
      82 |
      83 |         // Test with auth header
      84 |         const authResponse = await request(app)

      at Object.toBe (tests/integration/websocket/websocket.integration.test.js:81:39)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Message Handling ‚Ä∫ should handle invalid WebSocket message formats

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      136 |           .send(message);
      137 |
    > 138 |         expect([400, 422]).toContain(response.status);
          |                            ^
      139 |
      140 |         if (response.status === 400 || response.status === 422) {
      141 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/websocket/websocket.integration.test.js:138:28)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Error Scenarios ‚Ä∫ should handle connection errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      258 |         const response = await requestBuilder;
      259 |
    > 260 |         expect([400, 422]).toContain(response.status);
          |                            ^
      261 |
      262 |         if ([400, 404].includes(response.status)) {
      263 |           // Error responses should be properly formatted

      at Object.toContain (tests/integration/websocket/websocket.integration.test.js:260:28)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Error Scenarios ‚Ä∫ should handle malformed WebSocket messages

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      286 |           .send(message);
      287 |
    > 288 |         expect([400, 422]).toContain(response.status);
          |                            ^
      289 |
      290 |         if (response.status >= 400 && response.body) {
      291 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/websocket/websocket.integration.test.js:288:28)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Performance and Scalability ‚Ä∫ should handle concurrent WebSocket requests

    expect(received).toBeGreaterThan(expected)

    Expected: > 7
    Received:   0

      370 |       // Most connections should succeed
      371 |       const successfulConnections = results.filter((r) => r.success);
    > 372 |       expect(successfulConnections.length).toBeGreaterThan(
          |                                            ^
      373 |         concurrentConnections * 0.7
      374 |       );
      375 |

      at Object.toBeGreaterThan (tests/integration/websocket/websocket.integration.test.js:372:44)

  ‚óè WebSocket Integration ‚Ä∫ WebSocket Integration with Authentication ‚Ä∫ should handle WebSocket authentication flow

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      512 |       results.forEach((result) => {
      513 |         if (result.status) {
    > 514 |           expect(result.status).toBe(200);
          |                                 ^
      515 |           expect(result.authenticated).toBe(true);
      516 |         }
      517 |       });

      at toBe (tests/integration/websocket/websocket.integration.test.js:514:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/websocket/websocket.integration.test.js:512:15)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket HTTP/1.1" 200 411 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/portfolio HTTP/1.1" 404 129 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/portfolio HTTP/1.1" 404 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/portfolio HTTP/1.1" 404 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/portfolio HTTP/1.1" 404 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/market HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/invalid HTTP/1.1" 404 127 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/websocket/info HTTP/1.1" 404 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/subscribe/portfolio HTTP/1.1" 404 139 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/session HTTP/1.1" 404 127 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/session/validate HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/session/refresh HTTP/1.1" 404 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/websocket/validate-message HTTP/1.1" 404 136 "-" "-"
FAIL tests/integration/middleware/errorHandler-middleware.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üìä Retrieving backtest results for ID: nonexistent-id

      at log (routes/backtest.js:20:13)

    console.error
      Error: SyntaxError: Unexpected token 'j', "{"malformed": json}" is not valid JSON
          at JSON.parse (<anonymous>)
          at parse (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:92:19)
          at /home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/read.js:128:18
          at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
          at invokeCallback (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:238:16)
          at done (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:227:7)
          at IncomingMessage.onEnd (/home/stocks/algo/webapp/lambda/node_modules/raw-body/index.js:287:7)
          at IncomingMessage.emit (node:events:524:28)
          at endReadableNT (node:internal/streams/readable:1698:12)
          at processTicksAndRejections (node:internal/process/task_queues:82:21) {
        expose: true,
        statusCode: 400,
        status: 400,
        body: '{"malformed": json}',
        type: 'entity.parse.failed'
      }

      242 | app.use((err, req, res, _next) => {
      243 |   try {
    > 244 |     console.error("Error:", err);
          |             ^
      245 |   } catch (e) {
      246 |     // Ignore console logging errors
      247 |   }

      at error (server.js:244:13)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:71:5)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Layer.handle_error (node_modules/express/lib/router/layer.js:67:12)
      at trim_prefix (node_modules/express/lib/router/index.js:326:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at node_modules/body-parser/lib/read.js:130:7
      at invokeCallback (node_modules/raw-body/index.js:238:16)
      at done (node_modules/raw-body/index.js:227:7)
      at IncomingMessage.onEnd (node_modules/raw-body/index.js:287:7)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìÖ Earnings calendar requested - symbol: '; DROP TABLE users; --, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üìä Backtest results requested - ID: all, limit: 50

      at log (routes/backtest.js:821:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Error Handler Middleware Integration ‚Ä∫ Error Security and Information Disclosure ‚Ä∫ should not expose sensitive information in error responses

    expect(received).not.toMatch(expected)

    Expected pattern: not /password|secret|key|token|database|connection|stack|trace|internal/
    Received string:      "invalid token"

      142 |           // Should not expose sensitive internal information
      143 |           const errorMessage = response.body.error.toLowerCase();
    > 144 |           expect(errorMessage).not.toMatch(
          |                                    ^
      145 |             /password|secret|key|token|database|connection|stack|trace|internal/
      146 |           );
      147 |           expect(errorMessage).not.toMatch(

      at Object.toMatch (tests/integration/middleware/errorHandler-middleware.integration.test.js:144:36)

  ‚óè Error Handler Middleware Integration ‚Ä∫ Error Response Headers ‚Ä∫ should handle CORS headers in error responses

    expect(received).toContain(expected) // indexOf

    Expected value: 204
    Received array: [200, 404, 500, 501]

      214 |
      215 |       // CORS preflight for non-existent endpoint
    > 216 |       expect([200, 404, 500, 501]).toContain(response.status);
          |                                    ^
      217 |
      218 |       // Should still handle CORS appropriately even for errors
      219 |       if (response.headers["access-control-allow-origin"]) {

      at Object.toContain (tests/integration/middleware/errorHandler-middleware.integration.test.js:216:36)

  ‚óè Error Handler Middleware Integration ‚Ä∫ Error Handling Consistency Across Routes ‚Ä∫ should maintain consistent error format across all routes

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 401

      295 |         const response = await request(app).get(scenario.endpoint);
      296 |
    > 297 |         expect(response.status).toBe(scenario.expectedStatus);
          |                                 ^
      298 |         expect(response.body).toHaveProperty("success", false);
      299 |         expect(response.body).toHaveProperty("error");
      300 |         expect(response.headers["content-type"]).toMatch(/application\/json/);

      at Object.toBe (tests/integration/middleware/errorHandler-middleware.integration.test.js:297:33)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/nonexistent HTTP/1.1" 404 121 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/portfolio/invalid-endpoint HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/calendar/nonexistent-calendar-type HTTP/1.1" 404 144 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/backtest/results/nonexistent-id HTTP/1.1" 404 945 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/portfolio/invalid-action HTTP/1.1" 404 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/portfolio/positions HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/portfolio/analyze HTTP/1.1" 400 140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/calendar/earnings?symbol=%27;%20DROP%20TABLE%20users;%20-- HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/backtest/results HTTP/1.1" 200 28036 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/invalid HTTP/1.1" 404 117 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "GET /api/portfolio/invalid HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "POST /api/health HTTP/1.1" 404 116 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "PUT /api/calendar/earnings HTTP/1.1" 404 127 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:47 +0000] "DELETE /api/market/overview HTTP/1.1" 404 125 "-" "-"
FAIL tests/integration/services/aiStrategyGenerator.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Generation Workflow ‚Ä∫ should generate strategy from natural language description

    TypeError: generator.generateStrategy is not a function

      62 |       };
      63 |
    > 64 |       const result = await generator.generateStrategy(description, preferences);
         |                                      ^
      65 |
      66 |       expect(result).toHaveProperty("success", true);
      67 |       expect(result).toHaveProperty("strategy");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:64:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Generation Workflow ‚Ä∫ should handle different asset types

    TypeError: generator.generateStrategy is not a function

      76 |       const description = "Simple moving average crossover strategy";
      77 |
    > 78 |       const stockResult = await generator.generateStrategy(description, {
         |                                           ^
      79 |         risk_level: "low",
      80 |         timeframe: "1hour",
      81 |         asset_type: "stock",

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:78:43)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Generation Workflow ‚Ä∫ should validate generated strategies

    TypeError: generator.generateStrategy is not a function

      102 |       };
      103 |
    > 104 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      105 |
      106 |       expect(result.success).toBe(true);
      107 |       expect(result.strategy).toHaveProperty("validation");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:104:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Generation Workflow ‚Ä∫ should handle complex multi-indicator strategies

    TypeError: generator.generateStrategy is not a function

      120 |       };
      121 |
    > 122 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      123 |
      124 |       expect(result.success).toBe(true);
      125 |       expect(result.strategy.code).toContain("rsi");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:122:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Optimization ‚Ä∫ should optimize strategy parameters

    TypeError: generator.optimizeStrategy is not a function

      147 |       };
      148 |
    > 149 |       const result = await generator.optimizeStrategy(strategy, {
          |                                      ^
      150 |         optimization_method: "grid_search",
      151 |         metric: "sharpe_ratio",
      152 |       });

      at Object.optimizeStrategy (tests/integration/services/aiStrategyGenerator.test.js:149:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Optimization ‚Ä∫ should provide optimization explanations

    TypeError: generator.optimizeStrategy is not a function

      167 |       };
      168 |
    > 169 |       const result = await generator.optimizeStrategy(strategy, {
          |                                      ^
      170 |         optimization_method: "bayesian",
      171 |         metric: "total_return",
      172 |       });

      at Object.optimizeStrategy (tests/integration/services/aiStrategyGenerator.test.js:169:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Explanation and Documentation ‚Ä∫ should explain strategy logic clearly

    TypeError: generator.generateStrategy is not a function

      194 |       };
      195 |
    > 196 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      197 |
      198 |       expect(result.success).toBe(true);
      199 |       expect(result.strategy.explanation).toContain("RSI");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:196:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Strategy Explanation and Documentation ‚Ä∫ should provide educational content

    TypeError: generator.explainStrategy is not a function

      208 |       };
      209 |
    > 210 |       const result = await generator.explainStrategy(strategy);
          |                                      ^
      211 |
      212 |       expect(result).toHaveProperty("success", true);
      213 |       expect(result).toHaveProperty("explanation");

      at Object.explainStrategy (tests/integration/services/aiStrategyGenerator.test.js:210:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle invalid strategy descriptions gracefully

    TypeError: generator.generateStrategy is not a function

      234 |       };
      235 |
    > 236 |       const result = await generator.generateStrategy(
          |                                      ^
      237 |         invalidDescription,
      238 |         preferences
      239 |       );

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:236:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle malformed preferences

    TypeError: generator.generateStrategy is not a function

      252 |       };
      253 |
    > 254 |       const result = await generator.generateStrategy(
          |                                      ^
      255 |         description,
      256 |         invalidPreferences
      257 |       );

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:254:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should fallback to templates when AI is unavailable

    TypeError: generator.generateStrategy is not a function

      274 |       };
      275 |
    > 276 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      277 |
      278 |       expect(result.success).toBe(true);
      279 |       expect(result.strategy.code).toContain("def run_strategy");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:276:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle timeout scenarios

    TypeError: generator.generateStrategy is not a function

      293 |       generator.aiConfig.timeout = 100; // 100ms
      294 |
    > 295 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      296 |
      297 |       // Should either succeed quickly or fail gracefully with timeout
      298 |       expect(typeof result.success).toBe("boolean");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:295:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Performance and Metrics ‚Ä∫ should track generation performance metrics

    TypeError: generator.generateStrategy is not a function

      322 |
      323 |       const startTime = Date.now();
    > 324 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      325 |       const endTime = Date.now();
      326 |
      327 |       expect(result.success).toBe(true);

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:324:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Performance and Metrics ‚Ä∫ should handle concurrent strategy generation requests

    TypeError: generator.generateStrategy is not a function

      338 |       for (let i = 0; i < 3; i++) {
      339 |         requests.push(
    > 340 |           generator.generateStrategy(`RSI strategy ${i}`, {
          |                     ^
      341 |             risk_level: "medium",
      342 |             timeframe: "1day",
      343 |             asset_type: "stock",

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:340:21)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Integration with Backend Services ‚Ä∫ should integrate with database for strategy storage

    TypeError: generator.generateStrategy is not a function

      371 |       };
      372 |
    > 373 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      374 |
      375 |       expect(result.success).toBe(true);
      376 |

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:373:38)

  ‚óè AI Strategy Generator Service Integration Tests ‚Ä∫ Integration with Backend Services ‚Ä∫ should provide strategy export formats

    TypeError: generator.exportStrategy is not a function

      390 |       };
      391 |
    > 392 |       const exportResult = await generator.exportStrategy(strategy, "json");
          |                                            ^
      393 |
      394 |       expect(exportResult).toHaveProperty("success", true);
      395 |       expect(exportResult).toHaveProperty("exported_strategy");

      at Object.exportStrategy (tests/integration/services/aiStrategyGenerator.test.js:392:44)

FAIL tests/unit/routes/signals.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_weekly

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìâ Sell signals requested for daily timeframe

      at log (routes/signals.js:349:13)

    console.log
      üìâ Fetching real SELL signals from buy_sell_daily

      at log (routes/signals.js:362:13)

    console.log
      üìâ Sell signals requested for monthly timeframe

      at log (routes/signals.js:349:13)

    console.log
      üìâ Fetching real SELL signals from buy_sell_monthly

      at log (routes/signals.js:362:13)

    console.log
      üìä Technical signals requested for daily timeframe

      at log (routes/signals.js:477:13)

    console.log
      üìä Fetching technical signals from buy_sell_daily

      at log (routes/signals.js:490:13)

    console.log
      üìä Technical signals requested for daily timeframe

      at log (routes/signals.js:477:13)

    console.log
      üìä Fetching technical signals from buy_sell_daily

      at log (routes/signals.js:490:13)

    console.log
      üìä Technical signals requested for daily timeframe

      at log (routes/signals.js:477:13)

    console.log
      üìä Fetching technical signals from buy_sell_daily

      at log (routes/signals.js:490:13)

    console.log
      üìä Technical signals requested for daily timeframe filtered by symbols: AAPL, MSFT

      at log (routes/signals.js:477:13)

    console.log
      üìä Fetching technical signals from buy_sell_daily

      at log (routes/signals.js:490:13)

    console.log
      üìä Momentum signals requested for daily timeframe

      at log (routes/signals.js:609:13)

    console.log
      üìä Fetching momentum signals from buy_sell_daily

      at log (routes/signals.js:622:13)

    console.log
      üìä Momentum signals requested for daily timeframe

      at log (routes/signals.js:609:13)

    console.log
      üìä Fetching momentum signals from buy_sell_daily

      at log (routes/signals.js:622:13)

    console.log
      üìä Momentum signals requested for daily timeframe

      at log (routes/signals.js:609:13)

    console.log
      üìä Fetching momentum signals from buy_sell_daily

      at log (routes/signals.js:622:13)

    console.log
      üìà Fetching options signals

      at log (routes/signals.js:1149:13)

    console.log
      üìà Fetching options signals

      at log (routes/signals.js:1149:13)

    console.log
      üìà Fetching options signals

      at log (routes/signals.js:1149:13)

    console.log
      üìà Fetching options signals

      at log (routes/signals.js:1149:13)

    console.log
      üìà Fetching sentiment signals

      at log (routes/signals.js:1171:13)

    console.log
      üìà Fetching sentiment signals

      at log (routes/signals.js:1171:13)

    console.log
      üìà Fetching sentiment signals

      at log (routes/signals.js:1171:13)

    console.log
      üìà Fetching sentiment signals

      at log (routes/signals.js:1171:13)

    console.log
      üìà Fetching earnings signals

      at log (routes/signals.js:1193:13)

    console.log
      üìà Fetching earnings signals

      at log (routes/signals.js:1193:13)

    console.log
      üìà Fetching earnings signals

      at log (routes/signals.js:1193:13)

    console.log
      üìà Fetching crypto signals

      at log (routes/signals.js:1215:13)

    console.log
      üìà Fetching crypto signals

      at log (routes/signals.js:1215:13)

    console.log
      üìà Fetching crypto signals

      at log (routes/signals.js:1215:13)

    console.log
      üìà Fetching sector rotation signals

      at log (routes/signals.js:1268:13)

    console.log
      üìà Fetching sector rotation signals

      at log (routes/signals.js:1268:13)

    console.log
      üìà Fetching sector rotation signals

      at log (routes/signals.js:1268:13)

    console.log
      üìà Fetching historical signals

      at log (routes/signals.js:1238:13)

    console.log
      üìà Fetching historical signals

      at log (routes/signals.js:1238:13)

    console.log
      üìà Fetching historical signals

      at log (routes/signals.js:1238:13)

    console.log
      üìà Fetching historical signals

      at log (routes/signals.js:1238:13)

    console.log
      üîî Signal alerts requested

      at log (routes/signals.js:803:13)

    console.log
      üîî Signal alerts requested

      at log (routes/signals.js:803:13)

    console.log
      üìä Signal performance requested for daily

      at log (routes/signals.js:1031:13)

    console.log
      üìä Signal performance requested for daily

      at log (routes/signals.js:1031:13)

    console.log
      üìä Signal performance requested for daily

      at log (routes/signals.js:1031:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìä Signals requested for symbol: INVALID_SIGNAL_TYPE

      at log (routes/signals.js:1344:13)

    console.log
      üìä Fetching real signals for INVALID_SIGNAL_TYPE from buy_sell_daily table

      at log (routes/signals.js:1373:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      üìà Fetching real BUY signals from buy_sell_daily

      at log (routes/signals.js:235:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Signals Route - Unit Tests ‚Ä∫ POST /api/signals/custom ‚Ä∫ should create custom signal with valid criteria

    expected 201 "Created", got 401 "Unauthorized"

      562 |         .post("/api/signals/custom")
      563 |         .send(customSignal)
    > 564 |         .expect(201);
          |          ^
      565 |
      566 |       expect(response.body).toHaveProperty("success", true);
      567 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/signals.test.js:564:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Signals Route - Unit Tests ‚Ä∫ POST /api/signals/custom ‚Ä∫ should validate required fields

    expected 400 "Bad Request", got 401 "Unauthorized"

      579 |         .post("/api/signals/custom")
      580 |         .send(incompleteSignal)
    > 581 |         .expect(400);
          |          ^
      582 |
      583 |       expect(response.body).toHaveProperty("success", false);
      584 |       expect(response.body.error || response.body.success).toBeDefined();

      at Object.expect (tests/unit/routes/signals.test.js:581:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Signals Route - Unit Tests ‚Ä∫ POST /api/signals/custom ‚Ä∫ should validate criteria format

    expected 400 "Bad Request", got 401 "Unauthorized"

      595 |         .post("/api/signals/custom")
      596 |         .send(invalidSignal)
    > 597 |         .expect(400);
          |          ^
      598 |
      599 |       expect(response.body).toHaveProperty("success", false);
      600 |       expect(response.body.error).toContain("criteria");

      at Object.expect (tests/unit/routes/signals.test.js:597:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Signals Route - Unit Tests ‚Ä∫ POST /api/signals/alerts ‚Ä∫ should create new signal alert

    expected 201 "Created", got 401 "Unauthorized"

      722 |         .post("/api/signals/alerts")
      723 |         .send(alertData)
    > 724 |         .expect(201);
          |          ^
      725 |
      726 |       expect(response.body).toHaveProperty("success", true);
      727 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/signals.test.js:724:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Signals Route - Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle malformed request bodies

    expected 400 "Bad Request", got 401 "Unauthorized"

      830 |         .post("/api/signals/custom")
      831 |         .send("invalid json string")
    > 832 |         .expect(400);
          |          ^
      833 |
      834 |       expect(response.body.error || response.body.success).toBeDefined();
      835 |     });

      at Object.expect (tests/unit/routes/signals.test.js:832:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ‚óè Signals Route - Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle authentication edge cases

    expected 401 "Unauthorized", got 200 "OK"

      852 |       const response = await request(tempApp)
      853 |         .get("/api/signals/buy")
    > 854 |         .expect(401);
          |          ^
      855 |
      856 |       expect(response.body).toHaveProperty("success", false);
      857 |       expect(response.body.error || response.body.success).toBeDefined();

      at Object.expect (tests/unit/routes/signals.test.js:854:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

FAIL tests/integration/services/cross-service-integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîç Risk analyze requested - symbols: 2, portfolio: false

      at log (routes/risk.js:1605:13)

    console.log
      üìä Market data endpoint called

      at log (routes/market.js:71:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìù New order submission for user: dev-user-bypass, symbol: AAPL, side: buy

      at log (routes/orders.js:399:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üÜï New alert creation requested by user: dev-user-bypass for AAPL

      at log (routes/alerts.js:500:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîî Active alerts requested for user: dev-user-bypass, status: active

      at log (routes/alerts.js:38:13)

    console.log
      üìà Live market data requested for symbols: AAPL

      at log (routes/market.js:5718:13)

    console.log
      üìä Historical market data requested for symbols: AAPL

      at log (routes/market.js:5762:13)

    console.log
      üìä Market data endpoint called

      at log (routes/market.js:71:13)

    console.log
      üìä Market data endpoint called

      at log (routes/market.js:71:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      POST /rebalance called for user: dev-user-bypass

      at log (routes/portfolio.js:2066:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Cross-Service Integration ‚Ä∫ Portfolio ‚Üí Market Data ‚Üí Risk Analysis Integration ‚Ä∫ should integrate market data with technical analysis

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 400, 401, 500, 501]

      73 |           });
      74 |
    > 75 |         expect([200, 400, 401, 500, 501]).toContain(technicalResponse.status);
         |                                           ^
      76 |
      77 |         if (technicalResponse.status === 200) {
      78 |           expect(technicalResponse.body).toHaveProperty("success", true);

      at Object.toContain (tests/integration/services/cross-service-integration.test.js:75:43)

  ‚óè Cross-Service Integration ‚Ä∫ Authentication ‚Üí Database ‚Üí Service Integration ‚Ä∫ should handle database transactions across multiple services

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      112 |         .send(orderData);
      113 |
    > 114 |       expect(response.status).toBe(200);
          |                               ^
      115 |
      116 |       // If order is processed, it should involve:
      117 |       // 1. Order validation service

      at Object.toBe (tests/integration/services/cross-service-integration.test.js:114:31)

  ‚óè Cross-Service Integration ‚Ä∫ Error Recovery Integration ‚Ä∫ should handle service failure cascades gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      244 |         });
      245 |
    > 246 |       expect(response.status).toBe(200);
          |                               ^
      247 |
      248 |       // Should handle complex operation failures without crashing
      249 |       expect(response.body).toHaveProperty("success");

      at Object.toBe (tests/integration/services/cross-service-integration.test.js:246:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/risk/analyze HTTP/1.1" 200 628 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/market/data?symbols=AAPL&timeframe=1D HTTP/1.1" 200 585 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/technical/indicators HTTP/1.1" 404 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/orders HTTP/1.1" 400 85 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/websocket/subscribe HTTP/1.1" 200 301 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/alerts HTTP/1.1" 201 351 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/alerts/active HTTP/1.1" 200 1505 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/market/live?symbols=AAPL HTTP/1.1" 200 65 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/market/historical?symbols=AAPL&start_date=2024-01-01&end_date=2024-12-31 HTTP/1.1" 200 65 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/market/data?symbols=AAPL HTTP/1.1" 200 585 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/market/data?symbols=AAPL HTTP/1.1" 200 585 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /api/portfolio/rebalance HTTP/1.1" 400 125 "-" "-"
FAIL tests/integration/routes/auth.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: POST /auth/login

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for login

      at log (routes/auth.js:40:15)

    console.log
      Processing request: POST /auth/login

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/login

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for login

      at log (routes/auth.js:40:15)

    console.log
      Processing request: GET /auth/me

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Processing request: GET /auth/me

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /auth/me

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/confirm

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for confirmation

      at log (routes/auth.js:384:15)

    console.log
      Processing request: POST /auth/confirm

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for confirmation

      at log (routes/auth.js:384:15)

    console.log
      Processing request: POST /auth/confirm

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/forgot-password

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for forgot password

      at log (routes/auth.js:439:15)

    console.log
      Processing request: POST /auth/forgot-password

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/reset-password

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for password reset

      at log (routes/auth.js:472:15)

    console.log
      Processing request: POST /auth/reset-password

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for password reset

      at log (routes/auth.js:472:15)

    console.log
      Processing request: POST /auth/login

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for login

      at log (routes/auth.js:40:15)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: GET /auth/me

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: POST /auth/register

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß DEV: Using development auth for registration

      at log (routes/auth.js:259:15)

    console.log
      Processing request: GET /auth/health

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Authentication Routes Integration ‚Ä∫ GET /auth/me ‚Ä∫ should require valid token

    expect(received).toBe(expected) // Object.is equality

    Expected: "Access token required"
    Received: "Authentication required"

      171 |       expect(response.status).toBe(401);
      172 |       expect(response.body.success).toBe(false);
    > 173 |       expect(response.body.error).toBe("Access token required");
          |                                   ^
      174 |     });
      175 |
      176 |     test("should reject invalid token", async () => {

      at Object.toBe (tests/integration/routes/auth.integration.test.js:173:35)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 80 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 80 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 51 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 79 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 97 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/login HTTP/1.1" 401 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/login HTTP/1.1" 400 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/login HTTP/1.1" 401 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /auth/me HTTP/1.1" 200 144 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /auth/me HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /auth/me HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/confirm HTTP/1.1" 400 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/confirm HTTP/1.1" 200 59 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/confirm HTTP/1.1" 400 46 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/forgot-password HTTP/1.1" 200 53 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/forgot-password HTTP/1.1" 400 44 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/reset-password HTTP/1.1" 200 56 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/reset-password HTTP/1.1" 400 46 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/login HTTP/1.1" 401 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 422 86 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /auth/me HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 400 51 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "POST /auth/register HTTP/1.1" 422 73 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /auth/health HTTP/1.1" 200 138 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/dividend/AAPL HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/dividend/MSFT HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:49 +0000] "GET /api/dividend/JNJ HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AAPL HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT?timeframe=1Y HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT?timeframe=2Y HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT?timeframe=5Y HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT?timeframe=10Y HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT?timeframe=max HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/TSLA HTTP/1.1" 200 398 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AMZN HTTP/1.1" 200 398 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/NFLX HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/INVALID123 HTTP/1.1" 404 132 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/JNJ HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar HTTP/1.1" 501 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar?start_date=2025-01-01&end_date=2025-03-31 HTTP/1.1" 501 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar?min_amount=1.00 HTTP/1.1" 501 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar?sector=Technology HTTP/1.1" 501 225 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/aristocrats HTTP/1.1" 500 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/aristocrats?min_years=25 HTTP/1.1" 500 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/aristocrats?min_yield=2.0&max_yield=6.0 HTTP/1.1" 500 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/growth?symbol=AAPL HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/growth?symbol=MSFT&period=1Y HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/growth?symbol=JNJ HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_yield=3.0&max_yield=8.0 HTTP/1.1" 500 279 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?max_payout_ratio=60 HTTP/1.1" 500 279 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_market_cap=1000000000 HTTP/1.1" 500 289 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_yield=2.5&max_payout_ratio=70&min_market_cap=5000000000&sector=Technology HTTP/1.1" 500 297 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?sort=yield&order=desc HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?sort=payout_ratio&order=desc HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?sort=growth_rate&order=desc HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?sort=market_cap&order=desc HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/forecast?symbol=AAPL HTTP/1.1" 404 151 "-" "-"
FAIL tests/integration/routes/dividend.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üí∞ Dividend data requested for AAPL

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for JNJ

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for AAPL

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for TSLA

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for AMZN

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for NFLX

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for INVALID123

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for JNJ

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividend aristocrats requested - min_years: 25

      at log (routes/dividend.js:58:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        s.symbol,\n' +
          '        COALESCE(cp.short_name, s.symbol) as company_name,\n' +
          '        2...',
        params: '4 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/dividend.js:79:20

    console.error
      Aristocrats error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/dividend.js:79:20 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '345',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error("Aristocrats error:", error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       error: "Failed to fetch dividend aristocrats",

      at error (routes/dividend.js:113:13)

    console.log
      üí∞ Dividend aristocrats requested - min_years: 25

      at log (routes/dividend.js:58:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        s.symbol,\n' +
          '        COALESCE(cp.short_name, s.symbol) as company_name,\n' +
          '        2...',
        params: '4 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/dividend.js:79:20

    console.error
      Aristocrats error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/dividend.js:79:20 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '345',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error("Aristocrats error:", error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       error: "Failed to fetch dividend aristocrats",

      at error (routes/dividend.js:113:13)

    console.log
      üí∞ Dividend aristocrats requested - min_years: 25

      at log (routes/dividend.js:58:13)

    console.error
      Database query error: {
        error: 'missing FROM-clause entry for table "s"',
        query: '\n' +
          '      SELECT\n' +
          '        s.symbol,\n' +
          '        COALESCE(cp.short_name, s.symbol) as company_name,\n' +
          '        2...',
        params: '4 parameters',
        code: '42P01'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/dividend.js:79:20

    console.error
      Aristocrats error: error: missing FROM-clause entry for table "s"
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/dividend.js:79:20 {
        length: 113,
        severity: 'ERROR',
        code: '42P01',
        detail: undefined,
        hint: undefined,
        position: '345',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3657',
        routine: 'errorMissingRTE'
      }

      111 |     });
      112 |   } catch (error) {
    > 113 |     console.error("Aristocrats error:", error);
          |             ^
      114 |     res.status(500).json({
      115 |       success: false,
      116 |       error: "Failed to fetch dividend aristocrats",

      at error (routes/dividend.js:113:13)

    console.log
      üí∞ Dividend data requested for GROWTH

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for GROWTH

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for GROWTH

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend data requested for FORECAST

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for FORECAST

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for AAPL

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for MSFT

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for JNJ

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for KO

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for PFE

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividend data requested for AAPL

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividends calendar requested - symbol: all, days_ahead: 30

      at log (routes/dividend.js:32:11)

    console.log
      üí∞ Dividend data requested for BRK.A

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for AAPL'; DROP TABLE DIVIDENDS; --

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for AAPL

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend data requested for JNJ

      at log (routes/dividend.js:215:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      üí∞ Dividend screener requested with filters

      at log (routes/dividend.js:184:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/:symbol (Stock Dividend Data) ‚Ä∫ should return dividend data for dividend-paying stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      25 |         const response = await request(app).get(`/api/dividend/${symbol}`);
      26 |
    > 27 |         expect(response.status).toBe(200);
         |                                 ^
      28 |
      29 |         if (response.status === 200) {
      30 |           expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:27:33)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/:symbol (Stock Dividend Data) ‚Ä∫ should handle non-dividend paying stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      89 |         const response = await request(app).get(`/api/dividend/${symbol}`);
      90 |
    > 91 |         expect(response.status).toBe(200);
         |                                 ^
      92 |
      93 |         if (response.status === 200) {
      94 |           expect(response.body.data.dividends).toEqual([]);

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:91:33)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/calendar (Dividend Calendar) ‚Ä∫ should return upcoming dividend events

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 501

      124 |       const response = await request(app).get("/api/dividend/calendar");
      125 |
    > 126 |       expect(response.status).toBe(200);
          |                               ^
      127 |
      128 |       if (response.status === 200) {
      129 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:126:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/calendar (Dividend Calendar) ‚Ä∫ should handle date range for dividend calendar

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      146 |       );
      147 |
    > 148 |       expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                              ^
      149 |
      150 |       if (response.status === 200 && response.body.data.length > 0) {
      151 |         response.body.data.forEach((event) => {

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:148:62)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/calendar (Dividend Calendar) ‚Ä∫ should filter by minimum dividend amount

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      162 |       );
      163 |
    > 164 |       expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                              ^
      165 |
      166 |       if (response.status === 200 && response.body.data.length > 0) {
      167 |         response.body.data.forEach((event) => {

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:164:62)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/calendar (Dividend Calendar) ‚Ä∫ should handle sector filter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      186 |         );
      187 |
    > 188 |         expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                                ^
      189 |       }
      190 |     });
      191 |   });

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:188:64)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/aristocrats (Dividend Aristocrats) ‚Ä∫ should return dividend aristocrat stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      195 |       const response = await request(app).get("/api/dividend/aristocrats");
      196 |
    > 197 |       expect(response.status).toBe(200);
          |                               ^
      198 |
      199 |       if (response.status === 200) {
      200 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:197:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/growth (Dividend Growth Analysis) ‚Ä∫ should return dividend growth analysis

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      251 |       );
      252 |
    > 253 |       expect(response.status).toBe(200);
          |                               ^
      254 |
      255 |       if (response.status === 200) {
      256 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:253:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/growth (Dividend Growth Analysis) ‚Ä∫ should handle growth period parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      277 |         );
      278 |
    > 279 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      280 |       }
      281 |     });
      282 |

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:279:54)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/screener (Dividend Stock Screener) ‚Ä∫ should return dividend stock screening results

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      305 |       const response = await request(app).get("/api/dividend/screener");
      306 |
    > 307 |       expect(response.status).toBe(200);
          |                               ^
      308 |
      309 |       if (response.status === 200) {
      310 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:307:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/forecast (Dividend Forecasting) ‚Ä∫ should return dividend payment forecasts

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      388 |       );
      389 |
    > 390 |       expect(response.status).toBe(200);
          |                               ^
      391 |
      392 |       if (response.status === 200) {
      393 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:390:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ GET /api/dividend/forecast (Dividend Forecasting) ‚Ä∫ should handle forecast horizon parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      414 |         );
      415 |
    > 416 |         expect([200, 400].includes(response.status)).toBe(true);
          |                                                      ^
      417 |       }
      418 |     });
      419 |   });

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:416:54)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle concurrent dividend data requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      430 |
      431 |       responses.forEach((response) => {
    > 432 |         expect(response.status).toBe(200);
          |                                 ^
      433 |       });
      434 |     });
      435 |

      at toBe (tests/integration/routes/dividend.integration.test.js:432:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/routes/dividend.integration.test.js:431:17)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle invalid date formats

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      446 |         );
      447 |
    > 448 |         expect([200, 400, 500, 503].includes(response.status)).toBe(true);
          |                                                                ^
      449 |       }
      450 |     });
      451 |

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:448:64)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should maintain response time consistency

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 501

      485 |       const responseTime = Date.now() - startTime;
      486 |
    > 487 |       expect(response.status).toBe(200);
          |                               ^
      488 |       expect(responseTime).toBeLessThan(15000);
      489 |     });
      490 |

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:487:31)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle special symbol characters

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      495 |         const response = await request(app).get(`/api/dividend/${symbol}`);
      496 |
    > 497 |         expect(response.status).toBe(200);
          |                                 ^
      498 |       }
      499 |     });
      500 |

      at Object.toBe (tests/integration/routes/dividend.integration.test.js:497:33)

  ‚óè Dividend Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle stress testing with multiple concurrent requests

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      543 |       responses.forEach((response) => {
      544 |         if (response.status) {
    > 545 |           expect(response.status).toBe(200);
          |                                   ^
      546 |         }
      547 |       });
      548 |     });

      at toBe (tests/integration/routes/dividend.integration.test.js:545:35)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/routes/dividend.integration.test.js:543:17)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/forecast?symbol=MSFT&horizon=1Q HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AAPL HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/KO HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/PFE HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/JNJ HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/MSFT HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar?start_date=invalid-date HTTP/1.1" 501 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AAPL HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_yield=invalid HTTP/1.1" 500 283 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?max_payout_ratio=-50 HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_market_cap=abc HTTP/1.1" 500 283 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener?min_yield=10&max_yield=2 HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/calendar HTTP/1.1" 501 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/BRK.A HTTP/1.1" 400 144 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AAPL%27%3B%20DROP%20TABLE%20dividends%3B%20-- HTTP/1.1" 400 144 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/AAPL HTTP/1.1" 200 604 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/JNJ HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/dividend/screener HTTP/1.1" 500 280 "-" "-"
FAIL tests/integration/routes/commodities.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/prices (Current Prices) ‚Ä∫ should handle limit parameter

    expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 5
    Received:    6

      163 |
      164 |       if (response.status === 200 && response.body.data.length > 0) {
    > 165 |         expect(response.body.data.length).toBeLessThanOrEqual(5);
          |                                           ^
      166 |       }
      167 |     });
      168 |

      at Object.toBeLessThanOrEqual (tests/integration/routes/commodities.integration.test.js:165:43)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/correlations (Price Correlations) ‚Ä∫ should validate correlation strength classifications

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      295 |         response.body.data.correlations.forEach((corr) => {
      296 |           if (corr.strength) {
    > 297 |             expect(validStrengths.includes(corr.strength.toLowerCase())).toBe(
          |                                                                          ^
      298 |               true
      299 |             );
      300 |           }

      at toBe (tests/integration/routes/commodities.integration.test.js:297:74)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/routes/commodities.integration.test.js:295:41)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/news (Commodity News) ‚Ä∫ should return commodity-related news

    expect(received).toHaveProperty(path)

    Expected path: "articles"
    Received path: []

    Received value: [{"category": "commodities", "id": 7, "publishedAt": "2025-09-22T04:00:05.183Z", "source": "WSJ", "symbol": "GLD", "title": "Gold Prices Surge on Economic Uncertainty", "url": "https://example.com/4"}, {"category": "energy", "id": 8, "publishedAt": "2025-09-22T03:00:05.183Z", "source": "MarketWatch", "symbol": "OIL", "title": "Oil Futures Rise Due to Supply Concerns", "url": "https://example.com/5"}]

      312 |       if (response.status === 200) {
      313 |         expect(response.body).toHaveProperty("data");
    > 314 |         expect(response.body.data).toHaveProperty("articles");
          |                                    ^
      315 |         expect(Array.isArray(response.body.data.articles)).toBe(true);
      316 |
      317 |         if (response.body.data.articles.length > 0) {

      at Object.toHaveProperty (tests/integration/routes/commodities.integration.test.js:314:36)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/news (Commodity News) ‚Ä∫ should handle category filter for news

    TypeError: Cannot read properties of undefined (reading 'length')

      339 |         expect([200, 400].includes(response.status)).toBe(true);
      340 |
    > 341 |         if (response.status === 200 && response.body.data.articles.length > 0) {
          |                                                                    ^
      342 |           response.body.data.articles.forEach((article) => {
      343 |             expect(article.category.toLowerCase()).toBe(category.toLowerCase());
      344 |           });

      at Object.length (tests/integration/routes/commodities.integration.test.js:341:68)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/news (Commodity News) ‚Ä∫ should handle limit parameter for news

    TypeError: Cannot read properties of undefined (reading 'length')

      353 |
      354 |       if (response.status === 200) {
    > 355 |         expect(response.body.data.articles.length).toBeLessThanOrEqual(5);
          |                                            ^
      356 |       }
      357 |     });
      358 |

      at Object.length (tests/integration/routes/commodities.integration.test.js:355:44)

  ‚óè Commodities Routes Integration Tests ‚Ä∫ GET /api/commodities/news (Commodity News) ‚Ä∫ should validate news article timestamps

    TypeError: Cannot read properties of undefined (reading 'length')

      360 |       const response = await request(app).get("/api/commodities/news");
      361 |
    > 362 |       if (response.status === 200 && response.body.data.articles.length > 0) {
          |                                                                  ^
      363 |         response.body.data.articles.forEach((article) => {
      364 |           if (article.published_at) {
      365 |             expect(new Date(article.published_at)).toBeInstanceOf(Date);

      at Object.length (tests/integration/routes/commodities.integration.test.js:362:66)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities HTTP/1.1" 200 415 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities HTTP/1.1" 200 415 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/health HTTP/1.1" 200 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/categories HTTP/1.1" 200 1344 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/categories HTTP/1.1" 200 1344 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/categories HTTP/1.1" 200 1344 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?limit=5 HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=energy HTTP/1.1" 200 575 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=metals HTTP/1.1" 200 178 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=agriculture HTTP/1.1" 200 381 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations?timeframe=1W HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations?timeframe=1M HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations?timeframe=3M HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations?timeframe=1Y HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/news HTTP/1.1" 200 484 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/news?category=energy HTTP/1.1" 200 297 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/news?limit=5 HTTP/1.1" 200 483 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/news HTTP/1.1" 200 484 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities HTTP/1.1" 200 415 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/categories HTTP/1.1" 200 1344 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?limit=-1 HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?limit=abc HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=invalid-category HTTP/1.1" 200 188 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?timeframe=invalid-timeframe HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?limit=1000 HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities HTTP/1.1" 200 415 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/categories HTTP/1.1" 200 1344 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/market-summary HTTP/1.1" 200 517 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/correlations HTTP/1.1" 200 1252 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/news HTTP/1.1" 200 484 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices HTTP/1.1" 200 1372 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=%27%3B%20DROP%20TABLE%20commodities%3B%20-- HTTP/1.1" 200 201 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=1%27%20OR%20%271%27%3D%271 HTTP/1.1" 200 184 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=UNION%20SELECT%20*%20FROM%20users HTTP/1.1" 200 197 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:50 +0000] "GET /api/commodities/prices?category=%3Cscript%3Ealert(%27xss%27)%3C%2Fscript%3E HTTP/1.1" 200 201 "-" "-"
FAIL tests/integration/analytics/analysts.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/analysts/recommendations/AAPL

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìä Analyst recommendations requested for AAPL

      at log (routes/analysts.js:844:13)

    console.log
      Processing request: GET /api/analysts/recommendations/INVALID123

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìä Analyst recommendations requested for INVALID123

      at log (routes/analysts.js:844:13)

    console.log
      Processing request: GET /api/analysts/coverage/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/analysts/price-targets/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/analysts/consensus/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      ü§ù Analyst consensus requested for AAPL

      at log (routes/analysts.js:1335:13)

    console.log
      Processing request: GET /api/analysts/research

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.error
      Database query error: {
        error: 'column "firm" does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        id, symbol, firm, title, rating, price_target,\n' +
          '        published_date, analyst...',
        params: '2 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analysts.js:1562:20

    console.error
      Research reports error: error: column "firm" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:1562:20 {
        length: 104,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '35',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1589 |     });
      1590 |   } catch (error) {
    > 1591 |     console.error("Research reports error:", error);
           |             ^
      1592 |     res.status(500).json({
      1593 |       success: false,
      1594 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1591:13)

    console.log
      Processing request: GET /api/analysts/research

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.error
      Database query error: {
        error: 'column "firm" does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        id, symbol, firm, title, rating, price_target,\n' +
          '        published_date, analyst...',
        params: '2 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analysts.js:1562:20

    console.error
      Research reports error: error: column "firm" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/analysts.js:1562:20 {
        length: 104,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '35',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1589 |     });
      1590 |   } catch (error) {
    > 1591 |     console.error("Research reports error:", error);
           |             ^
      1592 |     res.status(500).json({
      1593 |       success: false,
      1594 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1591:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Analysts API ‚Ä∫ Analyst Recommendations ‚Ä∫ should retrieve analyst recommendations for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      15 |       );
      16 |
    > 17 |       expect(response.status).toBe(200);
         |                               ^
      18 |
      19 |       if (response.status === 200) {
      20 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:17:31)

  ‚óè Analysts API ‚Ä∫ Analyst Coverage ‚Ä∫ should retrieve analyst coverage for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      51 |       const response = await request(app).get("/api/analysts/coverage/AAPL");
      52 |
    > 53 |       expect(response.status).toBe(200);
         |                               ^
      54 |
      55 |       if (response.status === 200) {
      56 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:53:31)

  ‚óè Analysts API ‚Ä∫ Price Targets ‚Ä∫ should retrieve price targets for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      80 |       );
      81 |
    > 82 |       expect(response.status).toBe(200);
         |                               ^
      83 |
      84 |       if (response.status === 200) {
      85 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:82:31)

  ‚óè Analysts API ‚Ä∫ Price Targets ‚Ä∫ should provide consensus price targets

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      116 |         );
      117 |
    > 118 |         expect(hasConsensusData).toBe(true);
          |                                  ^
      119 |       }
      120 |     });
      121 |   });

      at Object.toBe (tests/integration/analytics/analysts.test.js:118:34)

  ‚óè Analysts API ‚Ä∫ Analyst Research ‚Ä∫ should retrieve research reports

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      127 |       );
      128 |
    > 129 |       expect(response.status).toBe(200);
          |                               ^
      130 |
      131 |       if (response.status === 200) {
      132 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:129:31)

  ‚óè Analysts API ‚Ä∫ Analyst Research ‚Ä∫ should filter research by analyst firm

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      147 |       );
      148 |
    > 149 |       expect(response.status).toBe(200);
          |                               ^
      150 |
      151 |       if (response.status === 200) {
      152 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:149:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/recommendations/AAPL HTTP/1.1" 404 123 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/recommendations/INVALID123 HTTP/1.1" 404 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/coverage/AAPL HTTP/1.1" 404 644 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/price-targets/AAPL HTTP/1.1" 404 659 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/consensus/AAPL HTTP/1.1" 200 337 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/research?symbol=AAPL&limit=10 HTTP/1.1" 500 103 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/analysts/research?firm=Goldman&limit=5 HTTP/1.1" 500 103 "-" "-"
FAIL tests/integration/middleware/auth-middleware.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Auth Middleware with Service Integration ‚Ä∫ Auth Middleware with Different Route Types ‚Ä∫ should protect all authenticated routes consistently

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 403, 500]

      127 |         const response = await request(app).get(route);
      128 |
    > 129 |         expect([401, 403, 500]).toContain(response.status);
          |                                 ^
      130 |
      131 |         if (response.status === 401 || response.status === 403) {
      132 |           expect(response.body).toHaveProperty("success", false);

      at Object.toContain (tests/integration/middleware/auth-middleware.integration.test.js:129:33)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 522 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "POST /api/portfolio/analyze HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/alerts/active HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/health HTTP/1.1" 200 499 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:51 +0000] "GET /api/portfolio HTTP/1.1" 401 78 "-" "-"
FAIL tests/integration/infrastructure/settings.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/settings

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Processing request: GET /api/settings/dashboard

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚öôÔ∏è Dashboard settings requested for user: test-user-123

      at log (routes/settings.js:44:13)

    console.log
      Processing request: GET /api/settings/providers

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Processing request: GET /api/settings/api-keys

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      Provider listing error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1216:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1429:14)
          at /home/stocks/algo/webapp/lambda/routes/settings.js:398:23

      1254 |     } catch (error) {
      1255 |       this.recordFailure(error);
    > 1256 |       console.error("Provider listing error:", error);
           |               ^
      1257 |       throw error; // Re-throw error so wrapper can handle it
      1258 |     }
      1259 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1256:15)
      at listProviders (utils/apiKeyService.js:1429:14)
      at routes/settings.js:398:23

    console.log
      Processing request: POST /api/settings/api-keys

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Processing request: GET /api/settings/health

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîß Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Settings Management API ‚Ä∫ API Key Management ‚Ä∫ should retrieve API keys list

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      62 |       if (response.status === 200) {
      63 |         expect(response.body).toHaveProperty("success", true);
    > 64 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      65 |       }
      66 |     });
      67 |

      at Object.toBe (tests/integration/infrastructure/settings.test.js:64:51)

  ‚óè Settings Management API ‚Ä∫ API Key Management ‚Ä∫ should handle API key creation request

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 404, 500, 501]

      79 |         .send(keyData);
      80 |
    > 81 |       expect([200, 404, 500, 501]).toContain(response.status);
         |                                    ^
      82 |
      83 |       if (response.status === 200 || response.status === 201) {
      84 |         expect(response.body).toHaveProperty("success", true);

      at Object.toContain (tests/integration/infrastructure/settings.test.js:81:36)

  ‚óè Settings Management API ‚Ä∫ Settings Health Status ‚Ä∫ should retrieve settings health status

    expect(received).toHaveProperty(path, value)

    Expected path: "success"
    Received path: []

    Expected value: true
    Received value: {"health": {"cacheStats": {"keyCache": 0, "sessionCache": 0, "timeout": 300000}, "circuitBreaker": {"failures": 1, "lastFailureTime": 1758850072182, "state": "CLOSED"}, "jwtCircuitBreaker": {"failures": 0, "lastFailureTime": 0, "state": "CLOSED"}, "services": {"encryptionAvailable": false, "jwtVerifierAvailable": true}}, "timestamp": "2025-09-26T01:27:52.222Z"}

       97 |
       98 |       if (response.status === 200) {
    >  99 |         expect(response.body).toHaveProperty("success", true);
          |                               ^
      100 |         expect(response.body).toHaveProperty("status");
      101 |       }
      102 |     });

      at Object.toHaveProperty (tests/integration/infrastructure/settings.test.js:99:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/settings HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2725 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/settings/providers HTTP/1.1" 404 632 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 331 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/settings/health HTTP/1.1" 200 335 "-" "-"
FAIL tests/integration/routes/price.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üí∞ Current price requested for AAPL

      at log (routes/price.js:60:13)

    console.log
      ‚ùå No data found for AAPL in price_daily table

      at log (routes/price.js:102:15)

    console.log
      üí∞ Current price requested for INVALID

      at log (routes/price.js:60:13)

    console.log
      ‚ùå Invalid symbol format: INVALID

      at log (routes/price.js:90:17)

    console.log
      üìà Price history requested for AAPL (period: 1Y)

      at log (routes/price.js:148:13)

    console.error
      üìä No historical data found for AAPL

      175 |
      176 |     if (!result || !result.rows || result.rows.length === 0) {
    > 177 |       console.error(
          |               ^
      178 |         `üìä No historical data found for ${symbolUpper}`
      179 |       );
      180 |

      at error (routes/price.js:177:15)

    console.log
      üìà Price history requested for AAPL (period: 1M)

      at log (routes/price.js:148:13)

    console.error
      üìä No historical data found for AAPL

      175 |
      176 |     if (!result || !result.rows || result.rows.length === 0) {
    > 177 |       console.error(
          |               ^
      178 |         `üìä No historical data found for ${symbolUpper}`
      179 |       );
      180 |

      at error (routes/price.js:177:15)

    console.log
      ‚è∞ Intraday data requested for AAPL (interval: 5m)

      at log (routes/price.js:218:13)

    console.log
      ‚è∞ Intraday data requested for AAPL (interval: 5min)

      at log (routes/price.js:218:13)

    console.log
      üìä Batch price request for 3 symbols

      at log (routes/price.js:300:13)

    console.log
      üí∞ Current price requested for ALERTS

      at log (routes/price.js:60:13)

    console.log
      ‚ùå Invalid symbol format: ALERTS

      at log (routes/price.js:90:17)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Price Routes ‚Ä∫ GET /api/price/:symbol ‚Ä∫ should return current price for symbol

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      21 |       const response = await request(app).get("/api/price/AAPL");
      22 |
    > 23 |       expect(response.status).toBe(200);
         |                               ^
      24 |       expect(response.body.success).toBe(true);
      25 |       expect(response.body.data).toHaveProperty("symbol");
      26 |       expect(response.body.data).toHaveProperty("price");

      at Object.toBe (tests/integration/routes/price.integration.test.js:23:31)

  ‚óè Price Routes ‚Ä∫ GET /api/price/:symbol/history ‚Ä∫ should return price history

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      38 |       const response = await request(app).get("/api/price/AAPL/history");
      39 |
    > 40 |       expect(response.status).toBe(200);
         |                               ^
      41 |       expect(response.body.success).toBe(true);
      42 |       expect(Array.isArray(response.body.data)).toBe(true);
      43 |     });

      at Object.toBe (tests/integration/routes/price.integration.test.js:40:31)

  ‚óè Price Routes ‚Ä∫ GET /api/price/:symbol/history ‚Ä∫ should handle period parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      48 |       );
      49 |
    > 50 |       expect(response.status).toBe(200);
         |                               ^
      51 |       expect(response.body.success).toBe(true);
      52 |     });
      53 |   });

      at Object.toBe (tests/integration/routes/price.integration.test.js:50:31)

  ‚óè Price Routes ‚Ä∫ GET /api/price/:symbol/intraday ‚Ä∫ should return intraday prices

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      57 |       const response = await request(app).get("/api/price/AAPL/intraday");
      58 |
    > 59 |       expect(response.status).toBe(200);
         |                               ^
      60 |       expect(response.body.success).toBe(true);
      61 |       expect(Array.isArray(response.body.data)).toBe(true);
      62 |     });

      at Object.toBe (tests/integration/routes/price.integration.test.js:59:31)

  ‚óè Price Routes ‚Ä∫ GET /api/price/:symbol/intraday ‚Ä∫ should handle interval parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      67 |       );
      68 |
    > 69 |       expect(response.status).toBe(200);
         |                               ^
      70 |       expect(response.body.success).toBe(true);
      71 |     });
      72 |   });

      at Object.toBe (tests/integration/routes/price.integration.test.js:69:31)

  ‚óè Price Routes ‚Ä∫ GET /api/price/alerts ‚Ä∫ should return price alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       96 |       const response = await request(app).get("/api/price/alerts");
       97 |
    >  98 |       expect(response.status).toBe(200);
          |                               ^
       99 |
      100 |       if (response.status === 200) {
      101 |         expect(response.body.success).toBe(true);

      at Object.toBe (tests/integration/routes/price.integration.test.js:98:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/AAPL HTTP/1.1" 404 102 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/INVALID HTTP/1.1" 404 131 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/AAPL/history HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/AAPL/history?period=1M HTTP/1.1" 404 151 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/AAPL/intraday HTTP/1.1" 404 121 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/AAPL/intraday?interval=5min HTTP/1.1" 404 121 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "POST /api/price/batch HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "POST /api/price/batch HTTP/1.1" 400 92 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "GET /api/price/alerts HTTP/1.1" 404 130 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:52 +0000] "POST /api/price/alerts HTTP/1.1" 400 179 "-" "-"
FAIL tests/integration/routes/news.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üì∞ Recent news requested, limit: 20, hours: 24

      at log (routes/news.js:58:13)

    console.log
      üì∞ Recent news requested, limit: 5, hours: 24

      at log (routes/news.js:58:13)

    console.log
      üì∞ Recent news requested, limit: 20, hours: 24

      at log (routes/news.js:58:13)

    console.log
      üì∞ Symbol news requested for search

      at log (routes/news.js:1521:13)

    console.log
      DEBUG: /sentiment route hit

      at log (routes/news.js:405:11)

    console.log
      News table columns: [
        'id',        'symbol',
        'headline',  'summary',
        'url',       'published_at',
        'sentiment', 'relevance_score',
        'source',    'fetched_at',
        'category',  'title'
      ]

      at log (routes/news.js:447:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè News Routes ‚Ä∫ GET /api/news ‚Ä∫ should return news API status

    expect(received).toBe(expected) // Object.is equality

    Expected: "News API - Ready"
    Received: undefined

      34 |
      35 |       expect(response.status).toBe(200);
    > 36 |       expect(response.body.message).toBe("News API - Ready");
         |                                     ^
      37 |       expect(response.body.status).toBe("operational");
      38 |       expect(response.body.timestamp).toBeDefined();
      39 |     });

      at Object.toBe (tests/integration/routes/news.integration.test.js:36:37)

  ‚óè News Routes ‚Ä∫ GET /api/news/recent ‚Ä∫ should return recent news

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      46 |       expect(response.status).toBe(200);
      47 |       expect(response.body.success).toBe(true);
    > 48 |       expect(Array.isArray(response.body.data)).toBe(true);
         |                                                 ^
      49 |
      50 |       if (response.body.data.length > 0) {
      51 |         const article = response.body.data[0];

      at Object.toBe (tests/integration/routes/news.integration.test.js:48:49)

  ‚óè News Routes ‚Ä∫ GET /api/news/recent ‚Ä∫ should handle limit parameter

    expect(received).toBeLessThanOrEqual(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      61 |       expect(response.status).toBe(200);
      62 |       expect(response.body.success).toBe(true);
    > 63 |       expect(response.body.data.length).toBeLessThanOrEqual(5);
         |                                         ^
      64 |     });
      65 |
      66 |     test("should handle category filtering", async () => {

      at Object.toBeLessThanOrEqual (tests/integration/routes/news.integration.test.js:63:41)

  ‚óè News Routes ‚Ä∫ GET /api/news/search ‚Ä∫ should search news articles

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      81 |
      82 |       if (response.status === 200) {
    > 83 |         expect(response.body.success).toBe(true);
         |                                       ^
      84 |         expect(Array.isArray(response.body.data)).toBe(true);
      85 |       }
      86 |     });

      at Object.toBe (tests/integration/routes/news.integration.test.js:83:39)

  ‚óè News Routes ‚Ä∫ GET /api/news/sentiment ‚Ä∫ should return news sentiment analysis

    expect(received).toHaveProperty(path)

    Expected path: "sentiment"
    Received path: []

    Received value: {"overall_sentiment": {"distribution": {"negative": 0, "neutral": 0, "positive": 0}, "label": "neutral", "score": 0, "total_articles": 0}, "timeframe": "24h", "timestamp": "2025-09-26T01:27:53.259Z"}

       95 |       if (response.status === 200) {
       96 |         expect(response.body.success).toBe(true);
    >  97 |         expect(response.body.data).toHaveProperty("sentiment");
          |                                    ^
       98 |       }
       99 |     });
      100 |   });

      at Object.toHaveProperty (tests/integration/routes/news.integration.test.js:97:36)

  ‚óè News Routes ‚Ä∫ GET /api/news/symbols/:symbol ‚Ä∫ should return news for specific symbol

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      104 |       const response = await request(app).get("/api/news/symbols/AAPL");
      105 |
    > 106 |       expect(response.status).toBe(200);
          |                               ^
      107 |       expect(response.body.success).toBe(true);
      108 |       expect(Array.isArray(response.body.data)).toBe(true);
      109 |     });

      at Object.toBe (tests/integration/routes/news.integration.test.js:106:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/health HTTP/1.1" 200 131 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news HTTP/1.1" 200 26 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/recent HTTP/1.1" 200 189 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/recent?limit=5 HTTP/1.1" 200 189 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/recent?category=earnings HTTP/1.1" 200 189 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/search?q=market HTTP/1.1" 200 135 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/sentiment HTTP/1.1" 200 206 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/news/symbols/AAPL HTTP/1.1" 404 127 "-" "-"
FAIL tests/integration/routes/earnings.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/earnings

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìà Earnings data requested

      at log (routes/earnings.js:31:13)

    console.log
      Processing request: GET /api/earnings/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìà Earnings details requested for symbol: AAPL

      at log (routes/earnings.js:396:13)

    console.log
      Processing request: GET /api/earnings

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìà Earnings data requested

      at log (routes/earnings.js:31:13)

    console.log
      Processing request: GET /api/calendar/earnings

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Processing request: GET /api/calendar/earnings-history

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/calendar/earnings-estimates

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/earnings/INVALID_SYMBOL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìà Earnings details requested for symbol: INVALID_SYMBOL

      at log (routes/earnings.js:396:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Earnings Data Integration ‚Ä∫ Earnings Calendar (Delegated) ‚Ä∫ should delegate symbol-specific requests to calendar

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"count": 1, "data": [{"eps_actual": "2.18", "eps_difference": "0.08", "eps_estimate": "2.10", "last_updated": "2025-09-25T03:26:22.135Z", "quarter": "2024-01-15T06:00:00.000Z", "report_date": "2024-01-15T06:00:00.000Z", "surprise_percent": "3.81", "symbol": "AAPL"}], "success": true, "symbol": "AAPL", "timestamp": "2025-09-26T01:27:53.710Z"}

      28 |
      29 |       if (response.status === 200) {
    > 30 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      31 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      32 |       }
      33 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:30:31)

  ‚óè Earnings Data Integration ‚Ä∫ Direct Calendar Earnings Access ‚Ä∫ should access earnings via calendar route directly

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"data": {"earnings": [], "grouped_by_date": {}, "summary": {"completed_reports": 0, "message": "No earnings data found for the specified criteria", "sectors_represented": 0, "total_earnings": 0, "upcoming_reports": 0}}, "success": true, "timestamp": "2025-09-26T01:27:53.723Z"}

      56 |
      57 |       if (response.status === 200) {
    > 58 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      59 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      60 |       }
      61 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:58:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/earnings HTTP/1.1" 200 2618 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/earnings/AAPL HTTP/1.1" 200 320 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/earnings?period=upcoming&limit=5 HTTP/1.1" 200 2204 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/calendar/earnings-history HTTP/1.1" 200 2118 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/calendar/earnings-estimates HTTP/1.1" 200 1442 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:53 +0000] "GET /api/earnings/INVALID_SYMBOL HTTP/1.1" 404 126 "-" "-"
FAIL tests/integration/routes/watchlist.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üéØ Watchlist performance endpoint called

      at log (routes/watchlist.js:363:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üì• Watchlist import requested for user: dev-user-bypass

      at log (routes/watchlist.js:479:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/performance ‚Ä∫ should return watchlist performance

    expect(received).toHaveProperty(path)

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      109 |       if (response.status === 200) {
      110 |         expect(response.body.success).toBe(true);
    > 111 |         expect(response.body.data).toHaveProperty("performance");
          |                                    ^
      112 |       }
      113 |     });
      114 |   });

      at Object.toHaveProperty (tests/integration/routes/watchlist.integration.test.js:111:36)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/alerts ‚Ä∫ should return price alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      124 |       if (response.status === 200) {
      125 |         expect(response.body.success).toBe(true);
    > 126 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      127 |       }
      128 |     });
      129 |   });

      at Object.toBe (tests/integration/routes/watchlist.integration.test.js:126:51)

  ‚óè Watchlist Routes ‚Ä∫ POST /api/watchlist/import ‚Ä∫ should import watchlist from CSV

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 401, 422]

      138 |         .attach("file", Buffer.from(csvData), "watchlist.csv");
      139 |
    > 140 |       expect([200, 401, 422]).toContain(response.status);
          |                               ^
      141 |
      142 |       if (response.status === 200) {
      143 |         expect(response.body.success).toBe(true);

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:140:31)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/export ‚Ä∫ should export watchlist to CSV

    expect(received).toContain(expected) // indexOf

    Expected substring: "text/csv"
    Received string:    "application/json; charset=utf-8"

      155 |
      156 |       if (response.status === 200) {
    > 157 |         expect(response.headers["content-type"]).toContain("text/csv");
          |                                                  ^
      158 |       }
      159 |     });
      160 |   });

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:157:50)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/watchlist HTTP/1.1" 200 432 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "DELETE /api/watchlist/AAPL HTTP/1.1" 400 203 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/watchlist/1 HTTP/1.1" 404 47 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "PUT /api/watchlist/AAPL HTTP/1.1" 400 178 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/watchlist/performance HTTP/1.1" 200 261 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/watchlist/alerts HTTP/1.1" 200 131 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "POST /api/watchlist/import HTTP/1.1" 400 93 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/watchlist/export HTTP/1.1" 200 131 "-" "-"
FAIL tests/integration/routes/scoring.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/scoring

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/scoring/factors

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üéØ Scoring factors requested - category: all, symbol: none

      at log (routes/scoring.js:32:13)

    console.error
      Database query error: {
        error: 'column "updated_at" does not exist',
        query: '\n' +
          '        SELECT \n' +
          "          'quality' as factor,\n" +
          '          AVG(quality_score) as avg_score,\n' +
          '         ...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/scoring.js:271:27

    console.warn
      Could not fetch factor statistics: column "updated_at" does not exist

      341 |       });
      342 |     } catch (statsError) {
    > 343 |       console.warn("Could not fetch factor statistics:", statsError.message);
          |               ^
      344 |     }
      345 |
      346 |     // Enhanced factor analysis with symbol-specific scores

      at warn (routes/scoring.js:343:15)

    console.log
      Processing request: GET /api/scoring/factors

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üéØ Scoring factors requested - category: fundamental, symbol: none

      at log (routes/scoring.js:32:13)

    console.error
      Database query error: {
        error: 'column "updated_at" does not exist',
        query: '\n' +
          '        SELECT \n' +
          "          'quality' as factor,\n" +
          '          AVG(quality_score) as avg_score,\n' +
          '         ...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/scoring.js:271:27

    console.warn
      Could not fetch factor statistics: column "updated_at" does not exist

      341 |       });
      342 |     } catch (statsError) {
    > 343 |       console.warn("Could not fetch factor statistics:", statsError.message);
          |               ^
      344 |     }
      345 |
      346 |     // Enhanced factor analysis with symbol-specific scores

      at warn (routes/scoring.js:343:15)

    console.log
      Processing request: GET /api/scoring/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/scoring/AAPL/factors

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/scoring/compare

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      Processing request: GET /api/scoring/sectors

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìä Sector scoring requested

      at log (routes/scoring.js:827:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Scoring Analysis API ‚Ä∫ Scoring Factors ‚Ä∫ should filter scoring factors by category

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      52 |       if (response.status === 200) {
      53 |         expect(response.body).toHaveProperty("success", true);
    > 54 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      55 |       }
      56 |     });
      57 |   });

      at Object.toBe (tests/integration/routes/scoring.integration.test.js:54:51)

  ‚óè Scoring Analysis API ‚Ä∫ Symbol Scoring ‚Ä∫ should calculate scoring metrics for symbol

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      61 |       const response = await request(app).get("/api/scoring/AAPL");
      62 |
    > 63 |       expect(response.status).toBe(200);
         |                               ^
      64 |
      65 |       if (response.status === 200) {
      66 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/scoring.integration.test.js:63:31)

  ‚óè Scoring Analysis API ‚Ä∫ Symbol Scoring ‚Ä∫ should provide factor-based scoring breakdown

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      87 |       const response = await request(app).get("/api/scoring/AAPL/factors");
      88 |
    > 89 |       expect(response.status).toBe(200);
         |                               ^
      90 |
      91 |       if (response.status === 200) {
      92 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/scoring.integration.test.js:89:31)

  ‚óè Scoring Analysis API ‚Ä∫ Score Comparison ‚Ä∫ should compare scores between multiple symbols

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      113 |       );
      114 |
    > 115 |       expect(response.status).toBe(200);
          |                               ^
      116 |
      117 |       if (response.status === 200) {
      118 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/routes/scoring.integration.test.js:115:31)

  ‚óè Scoring Analysis API ‚Ä∫ Sector Scoring ‚Ä∫ should provide sector-based scoring analysis

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      136 |       if (response.status === 200) {
      137 |         expect(response.body).toHaveProperty("success", true);
    > 138 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      139 |
      140 |         if (response.body.data.length > 0) {
      141 |           const sectorScoring = response.body.data[0];

      at Object.toBe (tests/integration/routes/scoring.integration.test.js:138:51)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring HTTP/1.1" 200 383 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/factors HTTP/1.1" 200 5050 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/factors?category=fundamental HTTP/1.1" 200 5059 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/AAPL HTTP/1.1" 404 614 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/AAPL/factors HTTP/1.1" 404 638 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/compare?symbols=AAPL,GOOGL,MSFT HTTP/1.1" 404 695 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:54 +0000] "GET /api/scoring/sectors HTTP/1.1" 200 340 "-" "-"
FAIL tests/performance/api-load-testing.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'column "price" of relation "stock_prices" does not exist',
        query: '\n' +
          '      INSERT INTO stock_prices (symbol, price, change_amount, change_percent, volume)\n' +
          '      VALUES ...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè API Load Testing and Performance ‚Ä∫ Concurrent Request Handling ‚Ä∫ should handle multiple concurrent health check requests

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Concurrent Request Handling ‚Ä∫ should handle concurrent authenticated requests

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Concurrent Request Handling ‚Ä∫ should maintain performance under database load

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Response Time Benchmarks ‚Ä∫ health endpoint should respond quickly

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Response Time Benchmarks ‚Ä∫ stock data endpoints should meet performance targets

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Response Time Benchmarks ‚Ä∫ should maintain performance with large response payloads

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Rate Limiting and Throttling ‚Ä∫ should handle rapid successive requests appropriately

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Rate Limiting and Throttling ‚Ä∫ should recover from rate limiting gracefully

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Memory and Resource Usage ‚Ä∫ should maintain stable memory usage under load

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Memory and Resource Usage ‚Ä∫ should handle connection cleanup properly

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Database Performance Under Load ‚Ä∫ should handle concurrent database queries efficiently

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Database Performance Under Load ‚Ä∫ should maintain query performance with data growth

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Error Handling Performance ‚Ä∫ should handle errors efficiently without performance degradation

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Error Handling Performance ‚Ä∫ should handle authentication errors efficiently

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Performance Monitoring and Metrics ‚Ä∫ should track response time metrics

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

  ‚óè API Load Testing and Performance ‚Ä∫ Performance Monitoring and Metrics ‚Ä∫ should maintain consistent performance across test run

    error: column "price" of relation "stock_prices" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/performance/api-load-testing.test.js:16:5)

FAIL tests/unit/services/alpacaIntegration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Alpaca Integration Service Unit Tests ‚Ä∫ Account Information ‚Ä∫ should retrieve account information

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-user-123", "alpaca"

    Number of calls: 0

      55 |       expect(result).toEqual(mockAccountInfo);
      56 |       expect(alpacaService.getAccountInfo).toHaveBeenCalledWith(testUserId);
    > 57 |       expect(getDecryptedApiKey).toHaveBeenCalledWith(testUserId, "alpaca");
         |                                  ^
      58 |     });
      59 |
      60 |     test("should handle account information errors", async () => {

      at Object.toHaveBeenCalledWith (tests/unit/services/alpacaIntegration.test.js:57:34)

  ‚óè Alpaca Integration Service Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle authentication failures

    expect(received).rejects.toThrow(expected)

    Expected substring: "Invalid API credentials"
    Received message:   "Request timeout"

          391 |     test("should handle network timeouts", async () => {
          392 |       alpacaService.getAccountInfo.mockRejectedValue(
        > 393 |         new Error("Request timeout")
              |         ^
          394 |       );
          395 |
          396 |       await expect(alpacaService.getAccountInfo(testUserId)).rejects.toThrow(

      at Object.<anonymous> (tests/unit/services/alpacaIntegration.test.js:393:9)
      at Object.toThrow (node_modules/expect/build/index.js:218:22)
      at Object.toThrow (tests/unit/services/alpacaIntegration.test.js:406:70)

FAIL tests/integration/routes/screener.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Screening dividend stocks with min yield: 2%

      at log (routes/screener.js:53:13)

    console.log
      Screening dividend stocks with min yield: 3%

      at log (routes/screener.js:53:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener ‚Ä∫ should return screener endpoints

    expect(received).toHaveProperty(path)

    Expected path: "message"
    Received path: []

    Received value: {"data": {"available_endpoints": ["GET /screener/screen - Main stock screening with filters", "GET /screener/ai-scan - AI-powered market scanner", "GET /screener/ai-strategies - Available AI scanning strategies", "GET /screener/templates - Pre-built screening templates", "GET /screener/factors - Available screening factors"], "status": "operational", "system": "Stock Screener API", "timestamp": "2025-09-26T01:27:55.802Z", "version": "1.0.0"}, "success": true}

      22 |
      23 |       expect(response.status).toBe(200);
    > 24 |       expect(response.body).toHaveProperty("message");
         |                             ^
      25 |       expect(response.body).toHaveProperty("endpoints");
      26 |     });
      27 |   });

      at Object.toHaveProperty (tests/integration/routes/screener.integration.test.js:24:29)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/screen ‚Ä∫ should screen stocks with basic criteria

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      33 |       );
      34 |
    > 35 |       expect(response.status).toBe(200);
         |                               ^
      36 |       expect(response.body.success).toBe(true);
      37 |       expect(Array.isArray(response.body.data)).toBe(true);
      38 |       expect(response.body.data.length).toBeLessThanOrEqual(100);

      at Object.toBe (tests/integration/routes/screener.integration.test.js:35:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/screen ‚Ä∫ should handle multiple criteria

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      44 |       );
      45 |
    > 46 |       expect(response.status).toBe(200);
         |                               ^
      47 |       expect(response.body.success).toBe(true);
      48 |       expect(Array.isArray(response.body.data)).toBe(true);
      49 |     });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:46:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/screen ‚Ä∫ should handle sector filter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      54 |       );
      55 |
    > 56 |       expect(response.status).toBe(200);
         |                               ^
      57 |       expect(response.body.success).toBe(true);
      58 |     });
      59 |   });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:56:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/presets ‚Ä∫ should return screening presets

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      63 |       const response = await request(app).get("/api/screener/presets");
      64 |
    > 65 |       expect(response.status).toBe(200);
         |                               ^
      66 |       expect(response.body.success).toBe(true);
      67 |       expect(Array.isArray(response.body.data)).toBe(true);
      68 |

      at Object.toBe (tests/integration/routes/screener.integration.test.js:65:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/presets/:presetName ‚Ä∫ should return specific preset

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      79 |       const response = await request(app).get("/api/screener/presets/growth");
      80 |
    > 81 |       expect(response.status).toBe(200);
         |                               ^
      82 |
      83 |       if (response.status === 200) {
      84 |         expect(response.body.success).toBe(true);

      at Object.toBe (tests/integration/routes/screener.integration.test.js:81:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/growth ‚Ä∫ should return growth stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      93 |       const response = await request(app).get("/api/screener/growth");
      94 |
    > 95 |       expect(response.status).toBe(200);
         |                               ^
      96 |       expect(response.body.success).toBe(true);
      97 |       expect(Array.isArray(response.body.data)).toBe(true);
      98 |     });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:95:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/growth ‚Ä∫ should handle timeframe parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      103 |       );
      104 |
    > 105 |       expect(response.status).toBe(200);
          |                               ^
      106 |       expect(response.body.success).toBe(true);
      107 |     });
      108 |   });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:105:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/value ‚Ä∫ should return value stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      112 |       const response = await request(app).get("/api/screener/value");
      113 |
    > 114 |       expect(response.status).toBe(200);
          |                               ^
      115 |       expect(response.body.success).toBe(true);
      116 |       expect(Array.isArray(response.body.data)).toBe(true);
      117 |     });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:114:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/growth ‚Ä∫ should return growth stocks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      122 |       const response = await request(app).get("/api/screener/growth");
      123 |
    > 124 |       expect(response.status).toBe(200);
          |                               ^
      125 |       expect(response.body.success).toBe(true);
      126 |       expect(Array.isArray(response.body.data)).toBe(true);
      127 |     });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:124:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/technical ‚Ä∫ should return technical screening results

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      153 |       );
      154 |
    > 155 |       expect(response.status).toBe(200);
          |                               ^
      156 |       expect(response.body.success).toBe(true);
      157 |       expect(Array.isArray(response.body.data)).toBe(true);
      158 |     });

      at Object.toBe (tests/integration/routes/screener.integration.test.js:155:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/backtest ‚Ä∫ should return backtesting results

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      196 |       );
      197 |
    > 198 |       expect(response.status).toBe(200);
          |                               ^
      199 |
      200 |       if (response.status === 200) {
      201 |         expect(response.body.success).toBe(true);

      at Object.toBe (tests/integration/routes/screener.integration.test.js:198:31)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/backtest ‚Ä∫ should require strategy parameter

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [400, 422]

      208 |       const response = await request(app).get("/api/screener/backtest");
      209 |
    > 210 |       expect([400, 422]).toContain(response.status);
          |                          ^
      211 |     });
      212 |   });
      213 |

      at Object.toContain (tests/integration/routes/screener.integration.test.js:210:26)

  ‚óè Screener Routes ‚Ä∫ GET /api/screener/export ‚Ä∫ should export screening results

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      218 |       );
      219 |
    > 220 |       expect(response.status).toBe(200);
          |                               ^
      221 |
      222 |       if (response.status === 200) {
      223 |         expect(response.headers["content-type"]).toContain("text/csv");

      at Object.toBe (tests/integration/routes/screener.integration.test.js:220:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener HTTP/1.1" 200 447 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/screen?market_cap_min=1000000000 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/screen?market_cap_min=1000000000&pe_max=25&volume_min=1000000 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/screen?sector=Technology HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/presets HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/presets/growth HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/growth HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/momentum?timeframe=1M HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/value HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/growth HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/dividend HTTP/1.1" 200 1247 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/dividend?min_yield=3 HTTP/1.1" 200 595 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/technical?rsi_min=30&rsi_max=70 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "POST /api/screener/custom HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "POST /api/screener/custom HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/backtest?strategy=momentum&start_date=2023-01-01 HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/backtest HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:55 +0000] "GET /api/screener/export?market_cap_min=1000000000&format=csv HTTP/1.1" 401 74 "-" "-"
FAIL tests/integration/routes/insider.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/insider/trades/AAPL

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üë• Insider trades requested for AAPL

      at log (routes/insider.js:25:13)

    console.log
      Processing request: GET /api/insider/trades/GOOGL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üë• Insider trades requested for GOOGL

      at log (routes/insider.js:25:13)

    console.log
      Processing request: GET /api/insider/trades/INVALID123

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üë• Insider trades requested for INVALID123

      at log (routes/insider.js:25:13)

    console.log
      Processing request: GET /api/insider/trades/AAPL

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üë• Insider trades requested for AAPL

      at log (routes/insider.js:25:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Insider Trading API ‚Ä∫ Insider Trades ‚Ä∫ should return not implemented status for insider trades

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      13 |       const response = await request(app).get("/api/insider/trades/AAPL");
      14 |
    > 15 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
         |                                         ^
      16 |       expect(response.body).toHaveProperty("success", false);
      17 |       expect(response.body).toHaveProperty(
      18 |         "error",

      at Object.toContain (tests/integration/routes/insider.integration.test.js:15:41)

  ‚óè Insider Trading API ‚Ä∫ Insider Trades ‚Ä∫ should handle different symbols correctly

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      25 |       const response = await request(app).get("/api/insider/trades/GOOGL");
      26 |
    > 27 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
         |                                         ^
      28 |       expect(response.body).toHaveProperty("success", false);
      29 |       expect(response.body).toHaveProperty(
      30 |         "error",

      at Object.toContain (tests/integration/routes/insider.integration.test.js:27:41)

  ‚óè Insider Trading API ‚Ä∫ Error handling ‚Ä∫ should handle invalid symbols

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 404, 422, 500]

      39 |       const response = await request(app).get("/api/insider/trades/INVALID123");
      40 |
    > 41 |       expect([400, 401, 404, 422, 500]).toContain(response.status);
         |                                         ^
      42 |       expect(response.body).toHaveProperty("success", false);
      43 |       expect(response.body).toHaveProperty(
      44 |         "error",

      at Object.toContain (tests/integration/routes/insider.integration.test.js:41:41)

  ‚óè Insider Trading API ‚Ä∫ Error handling ‚Ä∫ should handle server errors gracefully

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [501]

      52 |
      53 |       // Should return 501 for not implemented, not crash with 500
    > 54 |       expect([501]).toContain(response.status);
         |                     ^
      55 |       if (response.status === 501) {
      56 |         expect(response.body).toHaveProperty("success", false);
      57 |         expect(response.body).toHaveProperty("error");

      at Object.toContain (tests/integration/routes/insider.integration.test.js:54:21)

::ffff:127.0.0.1 - - [26/Sep/2025:01:27:56 +0000] "GET /api/insider/trades/AAPL HTTP/1.1" 200 265 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:56 +0000] "GET /api/insider/trades/GOOGL HTTP/1.1" 200 267 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:56 +0000] "GET /api/insider/trades/INVALID123 HTTP/1.1" 200 277 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:27:56 +0000] "GET /api/insider/trades/AAPL HTTP/1.1" 200 265 "-" "-"
FAIL tests/integration/routes/analytics.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics ‚Ä∫ should return analytics endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/performance ‚Ä∫ should return performance analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/risk ‚Ä∫ should return risk analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/allocation ‚Ä∫ should return allocation analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/returns ‚Ä∫ should return returns analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/sectors ‚Ä∫ should return sector analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/correlation ‚Ä∫ should return correlation analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/volatility ‚Ä∫ should return volatility analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ GET /api/analytics/trends ‚Ä∫ should return trend analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Analytics Routes ‚Ä∫ POST /api/analytics/custom ‚Ä∫ should handle custom analytics request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/analytics/recommendations.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Recommendations API ‚Ä∫ Stock Recommendations ‚Ä∫ should retrieve personalized stock recommendations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Stock Recommendations ‚Ä∫ should filter recommendations by type

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Sector Recommendations ‚Ä∫ should provide sector-based recommendations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Sector Recommendations ‚Ä∫ should get recommendations for specific sector

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ AI-Generated Recommendations ‚Ä∫ should provide AI-generated stock picks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ AI-Generated Recommendations ‚Ä∫ should generate portfolio allocation recommendations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Similar Stocks ‚Ä∫ should find similar stocks based on characteristics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Similar Stocks ‚Ä∫ should recommend alternatives to current holdings

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Recommendations API ‚Ä∫ Performance Tracking ‚Ä∫ should track recommendation performance

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/utils/database.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Database Module Export Tests ‚Ä∫ should export required functions

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Connection Pool Management ‚Ä∫ should initialize database and return pool object

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Connection Pool Management ‚Ä∫ should handle initialization with environment variables

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Query Execution ‚Ä∫ should execute queries through connection pool

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Query Execution ‚Ä∫ should return null when database is not initialized

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Query Execution ‚Ä∫ should handle connection errors gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Query Execution ‚Ä∫ should handle non-connection errors by throwing

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Query Execution ‚Ä∫ should handle pool exhaustion errors

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Transaction Management ‚Ä∫ should execute transaction with proper BEGIN/COMMIT

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Transaction Management ‚Ä∫ should rollback transaction on error

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Transaction Management ‚Ä∫ should handle transaction when database not initialized

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Health Check ‚Ä∫ should return health status object

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Health Check ‚Ä∫ should handle database errors gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Connection Cleanup ‚Ä∫ should close database connections

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Connection Cleanup ‚Ä∫ should handle cleanup when no pool exists

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Pool Access ‚Ä∫ should throw error when pool not initialized

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Pool Access ‚Ä∫ should return connection pool when initialized

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Error Handling Edge Cases ‚Ä∫ should handle database connection timeout errors

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Error Handling Edge Cases ‚Ä∫ should handle unexpected error formats

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Database Utilities - Unit Tests ‚Ä∫ Error Handling Edge Cases ‚Ä∫ should handle query logging for slow queries

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/utils/apiKeyService.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè API Key Service ‚Ä∫ validateJwtToken ‚Ä∫ should validate JWT token in test environment

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateJwtToken ‚Ä∫ should reject invalid JWT tokens

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateJwtToken ‚Ä∫ should handle empty or invalid token input

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateJwtToken ‚Ä∫ should accept dev-bypass-token in development

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should store API key successfully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should validate input parameters

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should validate provider name for SQL injection

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should validate required fields

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should validate field lengths

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should handle JWT validation failure

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ storeApiKey ‚Ä∫ should handle database errors

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getApiKey ‚Ä∫ should retrieve API key successfully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getApiKey ‚Ä∫ should return null for non-existent keys

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getApiKey ‚Ä∫ should handle JWT validation failure

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getApiKey ‚Ä∫ should update last used timestamp

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateApiKey ‚Ä∫ should validate API key successfully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateApiKey ‚Ä∫ should handle API key not configured

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateApiKey ‚Ä∫ should handle JWT validation failure

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ validateApiKey ‚Ä∫ should test connection when requested

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ deleteApiKey ‚Ä∫ should delete API key successfully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ deleteApiKey ‚Ä∫ should handle deletion of non-existent key

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ deleteApiKey ‚Ä∫ should handle JWT validation failure gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ deleteApiKey ‚Ä∫ should handle database errors

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ listProviders ‚Ä∫ should return list of configured providers

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ listProviders ‚Ä∫ should return empty array for no providers

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ listProviders ‚Ä∫ should handle JWT validation failure

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ listProviders ‚Ä∫ should handle database unavailable gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getDecryptedApiKey ‚Ä∫ should retrieve API key by user ID

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ getDecryptedApiKey ‚Ä∫ should return null for non-existent key

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ cache management ‚Ä∫ should invalidate session cache

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ cache management ‚Ä∫ should clear all caches

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ health status ‚Ä∫ should return health status

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ circuit breaker functionality ‚Ä∫ should handle circuit breaker failures

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ circuit breaker functionality ‚Ä∫ should test JWT circuit breaker functionality

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ security features ‚Ä∫ should use different salts for different users

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ security features ‚Ä∫ should sanitize log output

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ security features ‚Ä∫ should validate input lengths

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ encryption and decryption ‚Ä∫ should handle production encryption mode

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ encryption and decryption ‚Ä∫ should handle encryption key from environment

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ encryption and decryption ‚Ä∫ should handle secrets manager errors

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ production JWT verification ‚Ä∫ should handle Cognito JWT verification

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ production JWT verification ‚Ä∫ should handle Cognito JWT verification failure

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ production JWT verification ‚Ä∫ should use cached JWT session

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ edge cases and error handling ‚Ä∫ should handle database null result

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ edge cases and error handling ‚Ä∫ should handle missing required fields for provider

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ edge cases and error handling ‚Ä∫ should handle connection test for alpaca

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ audit logging ‚Ä∫ should log audit events

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ audit logging ‚Ä∫ should handle audit logging errors gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ development mode features ‚Ä∫ should handle development bypass token

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ development mode features ‚Ä∫ should reset circuit breaker in development

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ provider specific functionality ‚Ä∫ should handle different provider required fields

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè API Key Service ‚Ä∫ provider specific functionality ‚Ä∫ should handle unknown provider gracefully

    Database connection failed: Database connection failed - no fallback available

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/risk-management-workflow.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'DELETE FROM user_risk_limits WHERE user_id = $1',
        params: '1 parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at cleanupTestData (tests/integration/risk-management-workflow.integration.test.js:42:7)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:32:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at cleanupTestData (tests/integration/risk-management-workflow.integration.test.js:42:7)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:32:5)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'DELETE FROM user_risk_limits WHERE user_id = $1',
        params: '1 parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at cleanupTestData (tests/integration/risk-management-workflow.integration.test.js:42:7)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:37:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at cleanupTestData (tests/integration/risk-management-workflow.integration.test.js:42:7)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:37:5)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Risk Management Workflow Integration Tests ‚Ä∫ Complete Risk Management Workflow ‚Ä∫ should execute full risk management lifecycle

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Management Workflow Integration Tests ‚Ä∫ Complete Risk Management Workflow ‚Ä∫ should handle empty portfolio risk analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Management Workflow Integration Tests ‚Ä∫ Complete Risk Management Workflow ‚Ä∫ should handle multiple rapid position closes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Management Workflow Integration Tests ‚Ä∫ Complete Risk Management Workflow ‚Ä∫ should maintain data consistency across concurrent operations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Management Workflow Integration Tests ‚Ä∫ Risk Limit Compliance Checking ‚Ä∫ should detect and report risk limit violations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/database/cross-service-transaction.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Cross-Service Transaction Integration ‚Ä∫ Service Coordination Patterns ‚Ä∫ should handle cross-service transaction failure and rollback

    error: column "name" of relation "market_data" does not exist

      217 |           "INSERT INTO account_balance (user_id, balance) VALUES (1, 15000.00)"
      218 |         );
    > 219 |         await client.query(
          |         ^
      220 |           "INSERT INTO market_data (symbol, name, date, price) VALUES ('GOOGL', 'Alphabet Inc.', CURRENT_DATE, 2700.00)"
      221 |         );
      222 |       });

      at node_modules/pg/lib/client.js:545:17
      at tests/integration/database/cross-service-transaction.integration.test.js:219:9
      at transaction (utils/database.js:1415:20)
      at Object.<anonymous> (tests/integration/database/cross-service-transaction.integration.test.js:184:7)

FAIL tests/unit/routes/financials.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials ‚Ä∫ should return financials API overview

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/ping ‚Ä∫ should return ping response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should return financial statements with valid parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should require symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should handle default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should handle quarterly period

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should filter by statement type

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should handle empty results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/statements ‚Ä∫ should handle database errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/:symbol ‚Ä∫ should return basic financial overview

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/:symbol ‚Ä∫ should handle lowercase symbol conversion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/:symbol ‚Ä∫ should handle symbol not found

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/:symbol/ratios ‚Ä∫ should return financial ratios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/earnings/:symbol ‚Ä∫ should return earnings history

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/earnings/:symbol ‚Ä∫ should handle earnings limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/debug/tables ‚Ä∫ should return table structure information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ GET /financials/debug/tables ‚Ä∫ should handle debug query errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should sanitize symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should handle invalid symbol format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should validate period parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should validate type parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle database connection timeout

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle malformed database results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should return consistent JSON response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Financials Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include metadata in financial responses

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

(node:197255) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 alertCreated listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
(node:197255) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 alertResolved listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(node:197255) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 notificationSent listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
FAIL tests/unit/utils/liveDataManager.test.js
  ‚óè Console

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.error
      Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:231:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:231:23)

    console.error
      Failed to subscribe user GOOGL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:232:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:232:23)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.error
      Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:240:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:240:23)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.error
      Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:248:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:248:23)

    console.error
      Failed to subscribe user GOOGL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:249:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:249:23)

    console.error
      Failed to subscribe user TSLA to symbols: TypeError: Cannot read properties of undefined (reading 'length')
          at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
          at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:250:23)
          at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
          at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
          at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
          at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
          at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
          at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
          at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:250:23)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Live Data Manager ‚Ä∫ data provider management ‚Ä∫ should initialize with default providers

    expect(received).toBeGreaterThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      15 |     test("should initialize with default providers", () => {
      16 |       expect(liveDataManager.providers).toBeDefined();
    > 17 |       expect(liveDataManager.providers.length).toBeGreaterThan(0);
         |                                                ^
      18 |     });
      19 |
      20 |     test("should add new data provider", () => {

      at Object.toBeGreaterThan (tests/unit/utils/liveDataManager.test.js:17:48)

  ‚óè Live Data Manager ‚Ä∫ data provider management ‚Ä∫ should add new data provider

    TypeError: liveDataManager.addProvider is not a function

      26 |       };
      27 |
    > 28 |       const result = liveDataManager.addProvider(provider);
         |                                      ^
      29 |       expect(result.success).toBe(true);
      30 |       expect(
      31 |         liveDataManager.providers.some((p) => p.name === "testProvider")

      at Object.addProvider (tests/unit/utils/liveDataManager.test.js:28:38)

  ‚óè Live Data Manager ‚Ä∫ data provider management ‚Ä∫ should validate provider configuration

    TypeError: liveDataManager.validateProvider is not a function

      39 |       };
      40 |
    > 41 |       const result = liveDataManager.validateProvider(invalidProvider);
         |                                      ^
      42 |       expect(result.valid).toBe(false);
      43 |       expect(result.errors).toBeDefined();
      44 |     });

      at Object.validateProvider (tests/unit/utils/liveDataManager.test.js:41:38)

  ‚óè Live Data Manager ‚Ä∫ data provider management ‚Ä∫ should get provider status

    expect(received).toHaveProperty(path)

    Expected path: "lastUpdate"
    Received path: []

    Received value: {"connections": Map {}, "metrics": {"errors": [], "latency": [], "successRate": 100, "uptime": 0}, "name": "Alpaca Markets", "rateLimits": {"costPerRequest": 0, "maxConcurrentConnections": 1, "monthlyQuota": 1000000, "requestsPerMinute": 200}, "status": "idle", "symbols": Set {}, "usage": {"lastReset": "2025-09-26", "requestsThisMonth": 0, "requestsToday": 0, "totalCost": 0}}

      48 |
      49 |       expect(result).toHaveProperty("status");
    > 50 |       expect(result).toHaveProperty("lastUpdate");
         |                      ^
      51 |       expect(result).toHaveProperty("health");
      52 |     });
      53 |   });

      at Object.toHaveProperty (tests/unit/utils/liveDataManager.test.js:50:22)

  ‚óè Live Data Manager ‚Ä∫ real-time data streaming ‚Ä∫ should start data stream for symbol

    TypeError: liveDataManager.startStream is not a function

      57 |       const mockCallback = jest.fn();
      58 |
    > 59 |       const result = await liveDataManager.startStream("AAPL", mockCallback);
         |                                            ^
      60 |
      61 |       expect(result.success).toBe(true);
      62 |       expect(result.streamId).toBeDefined();

      at Object.startStream (tests/unit/utils/liveDataManager.test.js:59:44)

  ‚óè Live Data Manager ‚Ä∫ real-time data streaming ‚Ä∫ should stop data stream

    TypeError: liveDataManager.startStream is not a function

      65 |     test("should stop data stream", async () => {
      66 |       const mockCallback = jest.fn();
    > 67 |       const stream = await liveDataManager.startStream("AAPL", mockCallback);
         |                                            ^
      68 |
      69 |       const result = await liveDataManager.stopStream(stream.streamId);
      70 |

      at Object.startStream (tests/unit/utils/liveDataManager.test.js:67:44)

  ‚óè Live Data Manager ‚Ä∫ real-time data streaming ‚Ä∫ should handle multiple symbol streams

    TypeError: liveDataManager.startStream is not a function

      78 |       const results = await Promise.all(
      79 |         symbols.map((symbol) =>
    > 80 |           liveDataManager.startStream(symbol, mockCallback)
         |                           ^
      81 |         )
      82 |       );
      83 |

      at startStream (tests/unit/utils/liveDataManager.test.js:80:27)
          at Array.map (<anonymous>)
      at Object.map (tests/unit/utils/liveDataManager.test.js:79:17)

  ‚óè Live Data Manager ‚Ä∫ real-time data streaming ‚Ä∫ should process incoming market data

    TypeError: liveDataManager.processMarketData is not a function

      94 |       };
      95 |
    > 96 |       const result = liveDataManager.processMarketData(marketData);
         |                                      ^
      97 |
      98 |       expect(result.success).toBe(true);
      99 |       expect(result.processed).toBeDefined();

      at Object.processMarketData (tests/unit/utils/liveDataManager.test.js:96:38)

  ‚óè Live Data Manager ‚Ä∫ data caching and storage ‚Ä∫ should cache market data

    TypeError: liveDataManager.cacheData is not a function

      109 |       };
      110 |
    > 111 |       liveDataManager.cacheData("AAPL", data);
          |                       ^
      112 |       const cached = liveDataManager.getCachedData("AAPL");
      113 |
      114 |       expect(cached).toMatchObject(data);

      at Object.cacheData (tests/unit/utils/liveDataManager.test.js:111:23)

  ‚óè Live Data Manager ‚Ä∫ data caching and storage ‚Ä∫ should handle cache expiration

    TypeError: liveDataManager.cacheData is not a function

      122 |       };
      123 |
    > 124 |       liveDataManager.cacheData("AAPL", data);
          |                       ^
      125 |       const cached = liveDataManager.getCachedData("AAPL");
      126 |
      127 |       expect(cached).toBeNull();

      at Object.cacheData (tests/unit/utils/liveDataManager.test.js:124:23)

  ‚óè Live Data Manager ‚Ä∫ data caching and storage ‚Ä∫ should store data to database

    TypeError: liveDataManager.storeData is not a function

      138 |       query.mockResolvedValue({ rowCount: 1 });
      139 |
    > 140 |       const result = await liveDataManager.storeData(data);
          |                                            ^
      141 |
      142 |       expect(result.success).toBe(true);
      143 |       expect(query).toHaveBeenCalledWith(

      at Object.storeData (tests/unit/utils/liveDataManager.test.js:140:44)

  ‚óè Live Data Manager ‚Ä∫ rate limiting and throttling ‚Ä∫ should reset rate limit counters

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: undefined

      169 |       const result = liveDataManager.makeRequest("testProvider", "/test");
      170 |
    > 171 |       expect(result.rateLimited).toBe(false);
          |                                  ^
      172 |     });
      173 |
      174 |     test("should get rate limit status", () => {

      at Object.toBe (tests/unit/utils/liveDataManager.test.js:171:34)

  ‚óè Live Data Manager ‚Ä∫ rate limiting and throttling ‚Ä∫ should get rate limit status

    TypeError: liveDataManager.getRateLimitStatus is not a function

      173 |
      174 |     test("should get rate limit status", () => {
    > 175 |       const status = liveDataManager.getRateLimitStatus("alpaca");
          |                                      ^
      176 |
      177 |       expect(status).toHaveProperty("remaining");
      178 |       expect(status).toHaveProperty("resetTime");

      at Object.getRateLimitStatus (tests/unit/utils/liveDataManager.test.js:175:38)

  ‚óè Live Data Manager ‚Ä∫ data quality and validation ‚Ä∫ should validate market data format

    TypeError: liveDataManager.validateData is not a function

      190 |       };
      191 |
    > 192 |       const result = liveDataManager.validateData(validData);
          |                                      ^
      193 |       expect(result.valid).toBe(true);
      194 |     });
      195 |

      at Object.validateData (tests/unit/utils/liveDataManager.test.js:192:38)

  ‚óè Live Data Manager ‚Ä∫ data quality and validation ‚Ä∫ should reject invalid market data

    TypeError: liveDataManager.validateData is not a function

      201 |       };
      202 |
    > 203 |       const result = liveDataManager.validateData(invalidData);
          |                                      ^
      204 |       expect(result.valid).toBe(false);
      205 |       expect(result.errors).toBeDefined();
      206 |     });

      at Object.validateData (tests/unit/utils/liveDataManager.test.js:203:38)

  ‚óè Live Data Manager ‚Ä∫ data quality and validation ‚Ä∫ should detect stale data

    TypeError: liveDataManager.isDataStale is not a function

      213 |       };
      214 |
    > 215 |       const result = liveDataManager.isDataStale(staleData);
          |                                      ^
      216 |       expect(result).toBe(true);
      217 |     });
      218 |

      at Object.isDataStale (tests/unit/utils/liveDataManager.test.js:215:38)

  ‚óè Live Data Manager ‚Ä∫ data quality and validation ‚Ä∫ should calculate data freshness

    TypeError: liveDataManager.calculateFreshness is not a function

      222 |       };
      223 |
    > 224 |       const freshness = liveDataManager.calculateFreshness(data);
          |                                         ^
      225 |       expect(freshness).toBeCloseTo(60, -1); // approximately 60 seconds
      226 |     });
      227 |   });

      at Object.calculateFreshness (tests/unit/utils/liveDataManager.test.js:224:41)

  ‚óè Live Data Manager ‚Ä∫ subscription management ‚Ä∫ should manage symbol subscriptions

    TypeError: liveDataManager.getSubscriptions is not a function

      232 |       liveDataManager.subscribe("GOOGL");
      233 |
    > 234 |       const subscriptions = liveDataManager.getSubscriptions();
          |                                             ^
      235 |       expect(subscriptions).toContain("AAPL");
      236 |       expect(subscriptions).toContain("GOOGL");
      237 |     });

      at Object.getSubscriptions (tests/unit/utils/liveDataManager.test.js:234:45)

  ‚óè Live Data Manager ‚Ä∫ subscription management ‚Ä∫ should unsubscribe from symbols

    TypeError: liveDataManager.unsubscribe is not a function

      239 |     test("should unsubscribe from symbols", () => {
      240 |       liveDataManager.subscribe("AAPL");
    > 241 |       liveDataManager.unsubscribe("AAPL");
          |                       ^
      242 |
      243 |       const subscriptions = liveDataManager.getSubscriptions();
      244 |       expect(subscriptions).not.toContain("AAPL");

      at Object.unsubscribe (tests/unit/utils/liveDataManager.test.js:241:23)

  ‚óè Live Data Manager ‚Ä∫ subscription management ‚Ä∫ should get subscription statistics

    TypeError: liveDataManager.getSubscriptionStats is not a function

      250 |       liveDataManager.subscribe("TSLA");
      251 |
    > 252 |       const stats = liveDataManager.getSubscriptionStats();
          |                                     ^
      253 |       expect(stats.total).toBe(3);
      254 |       expect(stats.active).toBeDefined();
      255 |     });

      at Object.getSubscriptionStats (tests/unit/utils/liveDataManager.test.js:252:37)

  ‚óè Live Data Manager ‚Ä∫ error handling and recovery ‚Ä∫ should handle provider connection errors

    TypeError: liveDataManager.testConnection is not a function

      258 |   describe("error handling and recovery", () => {
      259 |     test("should handle provider connection errors", async () => {
    > 260 |       const result = await liveDataManager.testConnection("invalidProvider");
          |                                            ^
      261 |
      262 |       expect(result.success).toBe(false);
      263 |       expect(result.error).toBeDefined();

      at Object.testConnection (tests/unit/utils/liveDataManager.test.js:260:44)

  ‚óè Live Data Manager ‚Ä∫ error handling and recovery ‚Ä∫ should implement retry logic for failed requests

    TypeError: liveDataManager.retryRequest is not a function

      271 |         .mockResolvedValue({ success: true });
      272 |
    > 273 |       const result = await liveDataManager.retryRequest(mockRetryCallback, 3);
          |                                            ^
      274 |
      275 |       expect(result.success).toBe(true);
      276 |       expect(mockRetryCallback).toHaveBeenCalledTimes(3);

      at Object.retryRequest (tests/unit/utils/liveDataManager.test.js:273:44)

  ‚óè Live Data Manager ‚Ä∫ error handling and recovery ‚Ä∫ should handle websocket disconnections

    TypeError: liveDataManager.handleWebSocketError is not a function

      280 |       const mockWs = { readyState: 3 }; // CLOSED
      281 |
    > 282 |       const result = liveDataManager.handleWebSocketError(
          |                                      ^
      283 |         mockWs,
      284 |         new Error("Connection lost")
      285 |       );

      at Object.handleWebSocketError (tests/unit/utils/liveDataManager.test.js:282:38)

  ‚óè Live Data Manager ‚Ä∫ error handling and recovery ‚Ä∫ should implement circuit breaker pattern

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      302 |       );
      303 |
    > 304 |       expect(result.circuitOpen).toBe(true);
          |                                  ^
      305 |       expect(result.error).toContain("Circuit breaker");
      306 |     });
      307 |   });

      at Object.toBe (tests/unit/utils/liveDataManager.test.js:304:34)

  ‚óè Live Data Manager ‚Ä∫ performance monitoring ‚Ä∫ should track request latency

    TypeError: liveDataManager.getPerformanceMetrics is not a function

      312 |       await liveDataManager.makeRequest("testProvider", "/quote/AAPL");
      313 |
    > 314 |       const metrics = liveDataManager.getPerformanceMetrics();
          |                                       ^
      315 |       expect(metrics.averageLatency).toBeDefined();
      316 |       expect(metrics.requestCount).toBeGreaterThan(0);
      317 |     });

      at Object.getPerformanceMetrics (tests/unit/utils/liveDataManager.test.js:314:39)

  ‚óè Live Data Manager ‚Ä∫ performance monitoring ‚Ä∫ should monitor data throughput

    TypeError: liveDataManager.processMarketData is not a function

      319 |     test("should monitor data throughput", () => {
      320 |       for (let i = 0; i < 10; i++) {
    > 321 |         liveDataManager.processMarketData({
          |                         ^
      322 |           symbol: "AAPL",
      323 |           price: 150 + i,
      324 |           timestamp: Date.now(),

      at Object.processMarketData (tests/unit/utils/liveDataManager.test.js:321:25)

FAIL tests/integration/utils/schemaValidator.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Stock Data Validation ‚Ä∫ should reject invalid stock data

    expect(received).toContain(expected) // indexOf

    Expected value: "symbol"
    Received array: [undefined, undefined, undefined]

      55 |
      56 |       const errorFields = validation.errors.map((err) => err.field);
    > 57 |       expect(errorFields).toContain("symbol");
         |                           ^
      58 |       expect(errorFields).toContain("price");
      59 |       expect(errorFields).toContain("volume");
      60 |       expect(errorFields).toContain("timestamp");

      at Object.toContain (tests/integration/utils/schemaValidator.test.js:57:27)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Stock Data Validation ‚Ä∫ should validate portfolio data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      85 |       const validation = schemaValidator.validate(validPortfolio, "portfolio");
      86 |
    > 87 |       expect(validation.isValid).toBe(true);
         |                                  ^
      88 |       expect(validation.errors).toEqual([]);
      89 |       expect(validation.sanitizedData.holdings.length).toBe(2);
      90 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:87:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Trading Order Validation ‚Ä∫ should validate buy order

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      105 |       const validation = schemaValidator.validate(buyOrder, "tradingOrder");
      106 |
    > 107 |       expect(validation.isValid).toBe(true);
          |                                  ^
      108 |       expect(validation.sanitizedData.side).toBe("buy");
      109 |       expect(validation.sanitizedData.type).toBe("market");
      110 |       expect(validation.sanitizedData.quantity).toBe(100);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:107:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Trading Order Validation ‚Ä∫ should validate limit order with price

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      125 |       const validation = schemaValidator.validate(limitOrder, "tradingOrder");
      126 |
    > 127 |       expect(validation.isValid).toBe(true);
          |                                  ^
      128 |       expect(validation.sanitizedData.type).toBe("limit");
      129 |       expect(validation.sanitizedData.limitPrice).toBe(155.0);
      130 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:127:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Trading Order Validation ‚Ä∫ should reject invalid trading orders

    expect(received).toContain(expected) // indexOf

    Expected value: "INVALID_USER_ID"
    Received array: [undefined, undefined, undefined, undefined, undefined]

      146 |
      147 |       const errorCodes = validation.errors.map((err) => err.code);
    > 148 |       expect(errorCodes).toContain("INVALID_USER_ID");
          |                          ^
      149 |       expect(errorCodes).toContain("INVALID_SYMBOL");
      150 |       expect(errorCodes).toContain("INVALID_SIDE");
      151 |       expect(errorCodes).toContain("INVALID_QUANTITY");

      at Object.toContain (tests/integration/utils/schemaValidator.test.js:148:26)

  ‚óè Schema Validator Integration Tests ‚Ä∫ User Data Validation ‚Ä∫ should validate user registration data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      168 |       const validation = schemaValidator.validate(userData, "userRegistration");
      169 |
    > 170 |       expect(validation.isValid).toBe(true);
          |                                  ^
      171 |       expect(validation.sanitizedData.email).toBe("test@example.com");
      172 |       expect(validation.sanitizedData.country).toBe("US");
      173 |       // Password should be excluded from sanitized data for security

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:170:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ User Data Validation ‚Ä∫ should validate API key configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      189 |       const validation = schemaValidator.validate(apiKeyConfig, "apiKeyConfig");
      190 |
    > 191 |       expect(validation.isValid).toBe(true);
          |                                  ^
      192 |       expect(validation.sanitizedData.provider).toBe("alpaca");
      193 |       expect(validation.sanitizedData.environment).toBe("paper");
      194 |       expect(Array.isArray(validation.sanitizedData.permissions)).toBe(true);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:191:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Market Data Validation ‚Ä∫ should validate technical indicators

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      223 |       );
      224 |
    > 225 |       expect(validation.isValid).toBe(true);
          |                                  ^
      226 |       expect(validation.sanitizedData.indicators.rsi).toBe(65.5);
      227 |       expect(validation.sanitizedData.indicators.macd.macd).toBe(1.25);
      228 |       expect(validation.sanitizedData.indicators.bollinger.upper).toBe(155.0);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:225:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Market Data Validation ‚Ä∫ should validate earnings data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      249 |       const validation = schemaValidator.validate(earningsData, "earningsData");
      250 |
    > 251 |       expect(validation.isValid).toBe(true);
          |                                  ^
      252 |       expect(validation.sanitizedData.quarter).toBe("Q1");
      253 |       expect(validation.sanitizedData.year).toBe(2023);
      254 |       expect(validation.sanitizedData.surprise.epsPercent).toBe(4.83);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:251:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Real-time Data Validation ‚Ä∫ should validate WebSocket message format

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      276 |       );
      277 |
    > 278 |       expect(validation.isValid).toBe(true);
          |                                  ^
      279 |       expect(validation.sanitizedData.type).toBe("quote");
      280 |       expect(validation.sanitizedData.symbol).toBe("AAPL");
      281 |       expect(validation.sanitizedData.data.price).toBe(150.25);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:278:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Real-time Data Validation ‚Ä∫ should validate streaming data batch

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      312 |       );
      313 |
    > 314 |       expect(validation.isValid).toBe(true);
          |                                  ^
      315 |       expect(validation.sanitizedData.messages.length).toBe(2);
      316 |       expect(validation.sanitizedData.source).toBe("alpaca");
      317 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:314:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Custom Schema Validation ‚Ä∫ should validate with custom schema

    TypeError: schemaValidator.validateWithCustomSchema is not a function

      340 |       };
      341 |
    > 342 |       const validation = schemaValidator.validateWithCustomSchema(
          |                                          ^
      343 |         testData,
      344 |         customSchema
      345 |       );

      at Object.validateWithCustomSchema (tests/integration/utils/schemaValidator.test.js:342:42)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Custom Schema Validation ‚Ä∫ should register and use persistent custom schemas

    TypeError: schemaValidator.registerSchema is not a function

      362 |
      363 |       // Register schema
    > 364 |       schemaValidator.registerSchema(schemaName, schema);
          |                       ^
      365 |
      366 |       // Use registered schema
      367 |       const testData = { id: "test_123", value: 456 };

      at Object.registerSchema (tests/integration/utils/schemaValidator.test.js:364:23)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Data Sanitization ‚Ä∫ should sanitize and transform data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      389 |       });
      390 |
    > 391 |       expect(validation.isValid).toBe(true);
          |                                  ^
      392 |       expect(validation.sanitizedData.symbol).toBe("AAPL");
      393 |       expect(validation.sanitizedData.price).toBe(150.25);
      394 |       expect(validation.sanitizedData.description).not.toContain("<script>");

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:391:34)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Data Sanitization ‚Ä∫ should handle SQL injection attempts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      408 |       });
      409 |
    > 410 |       expect(validation.sanitized).toBe(true);
          |                                    ^
      411 |       expect(validation.sanitizedData.symbol).not.toContain("DROP TABLE");
      412 |       expect(validation.sanitizedData.userId).not.toContain("OR '1'='1");
      413 |       expect(validation.sanitizedData.description).not.toContain("DELETE FROM");

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:410:36)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should cache compiled schemas for performance

    expect(received).toBeLessThan(expected)

    Expected: < 0
    Received:   0

      452 |       expect(validation1.isValid).toBe(true);
      453 |       expect(validation2.isValid).toBe(true);
    > 454 |       expect(duration2).toBeLessThan(duration1); // Cached should be faster
          |                         ^
      455 |     });
      456 |   });
      457 |

      at Object.toBeLessThan (tests/integration/utils/schemaValidator.test.js:454:25)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle malformed data gracefully

    TypeError: Cannot read properties of null (reading 'symbol')

      729 |     // Check required fields
      730 |     for (const requiredField of schema.required) {
    > 731 |       if (data[requiredField] === undefined || data[requiredField] === null) {
          |               ^
      732 |         errors.push(`Required field "${requiredField}" is missing`);
      733 |       }
      734 |     }

      at SchemaValidator.validate (utils/schemaValidator.js:731:15)
      at Object.validate (utils/schemaValidator.js:1573:51)
      at validate (tests/integration/utils/schemaValidator.test.js:463:44)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/utils/schemaValidator.test.js:462:21)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle circular references

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      477 |       expect(
      478 |         validation.errors.some((err) => err.code === "CIRCULAR_REFERENCE")
    > 479 |       ).toBe(true);
          |         ^
      480 |     });
      481 |
      482 |     test("should handle very large numbers", () => {

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:479:9)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle very large numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      496 |       expect(
      497 |         validation.errors.some((err) => err.code === "INVALID_NUMBER")
    > 498 |       ).toBe(true);
          |         ^
      499 |     });
      500 |   });
      501 |

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:498:9)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Integration with Database ‚Ä∫ should validate data before database insertion

    TypeError: schemaValidator.validateForDatabase is not a function

      509 |       };
      510 |
    > 511 |       const validation = await schemaValidator.validateForDatabase(
          |                                                ^
      512 |         stockData,
      513 |         "stock_quotes"
      514 |       );

      at Object.validateForDatabase (tests/integration/utils/schemaValidator.test.js:511:48)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Integration with Database ‚Ä∫ should handle database constraint violations

    TypeError: schemaValidator.validateForDatabase is not a function

      527 |       };
      528 |
    > 529 |       const validation = await schemaValidator.validateForDatabase(
          |                                                ^
      530 |         duplicateData,
      531 |         "stock_quotes"
      532 |       );

      at Object.validateForDatabase (tests/integration/utils/schemaValidator.test.js:529:48)

  ‚óè Schema Validator Integration Tests ‚Ä∫ Multi-language Support ‚Ä∫ should support localized error messages

    expect(received).not.toBe(expected) // Object.is equality

    Expected: not undefined

      556 |       expect(validationEn.isValid).toBe(false);
      557 |       expect(validationEs.isValid).toBe(false);
    > 558 |       expect(validationEn.errors[0].message).not.toBe(
          |                                                  ^
      559 |         validationEs.errors[0].message
      560 |       );
      561 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:558:50)

FAIL tests/unit/routes/trades.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/health - Health check ‚Ä∫ should return trade service health status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/ - Root endpoint ‚Ä∫ should return trade API ready message

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/import/status - Trade import status ‚Ä∫ should return import status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/history - Trade history ‚Ä∫ should return user trade history with pagination

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/history - Trade history ‚Ä∫ should handle date range filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/history - Trade history ‚Ä∫ should filter by symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/history - Trade history ‚Ä∫ should support pagination parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/analytics - Trade analytics ‚Ä∫ should return trade performance analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/analytics - Trade analytics ‚Ä∫ should handle time period filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/analytics - Trade analytics ‚Ä∫ should include benchmark comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/import - Import trades ‚Ä∫ should import trades from CSV data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/import - Import trades ‚Ä∫ should validate required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/import - Import trades ‚Ä∫ should handle duplicate trades

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/import - Import trades ‚Ä∫ should handle invalid data formats

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/export - Export trades ‚Ä∫ should export trades in CSV format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/export - Export trades ‚Ä∫ should export trades in JSON format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/export - Export trades ‚Ä∫ should handle date range for export

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/brokers - Broker integration status ‚Ä∫ should return connected brokers status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/sync/:broker - Sync trades from broker ‚Ä∫ should sync trades from Alpaca

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/sync/:broker - Sync trades from broker ‚Ä∫ should handle unsupported broker

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/sync/:broker - Sync trades from broker ‚Ä∫ should validate date parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/performance - Performance analysis ‚Ä∫ should return detailed performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/performance - Performance analysis ‚Ä∫ should include benchmark comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/performance - Performance analysis ‚Ä∫ should support different time periods

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/performance/attribution - Performance attribution ‚Ä∫ should return performance attribution analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/stats - Trade statistics ‚Ä∫ should return comprehensive trade statistics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/stats - Trade statistics ‚Ä∫ should filter stats by date range

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ GET /trades/stats - Trade statistics ‚Ä∫ should group stats by time period

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/validate - Trade validation ‚Ä∫ should validate trade data before import

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/validate - Trade validation ‚Ä∫ should identify invalid trade data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/search - Advanced trade search ‚Ä∫ should search trades by multiple criteria

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ POST /trades/search - Advanced trade search ‚Ä∫ should handle empty search criteria

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should handle database connection errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should handle transaction rollback on import errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should handle malformed request data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should handle missing authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should handle various error scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trades Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should validate request parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/utils/riskEngine.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      {"timestamp":"2025-09-26T01:27:59.585Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"VaR calculation failed:","correlationId":"77234459","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:59.624Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"VaR calculation failed:","correlationId":"e37254c7","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:27:59.625Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Stock returns calculation failed for AAPL:","correlationId":"3e25a38a","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Risk Engine ‚Ä∫ portfolio risk assessment ‚Ä∫ should calculate portfolio VaR

    expect(received).toBe(expected) // Object.is equality

    Expected: "number"
    Received: "object"

      29 |
      30 |       expect(var95).toBeDefined();
    > 31 |       expect(typeof var95).toBe("number");
         |                            ^
      32 |       expect(var95).toBeGreaterThan(0);
      33 |     });
      34 |

      at Object.toBe (tests/unit/utils/riskEngine.test.js:31:28)

  ‚óè Risk Engine ‚Ä∫ risk limit monitoring ‚Ä∫ should monitor leverage limits

    expect(received).toBeCloseTo(expected, precision)

    Expected: 1.67
    Received: 0

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   1.67

      177 |       const check = riskEngine.checkLeverageLimits(portfolio, limits);
      178 |
    > 179 |       expect(check.currentLeverage).toBeCloseTo(1.67, 2);
          |                                     ^
      180 |       expect(check.exceeded).toBe(true);
      181 |     });
      182 |

      at Object.toBeCloseTo (tests/unit/utils/riskEngine.test.js:179:37)

  ‚óè Risk Engine ‚Ä∫ error handling and edge cases ‚Ä∫ should handle missing price data

    expect(received).toBeNull()

    Received: 0.2

      380 |       const volatility = await riskEngine.calculateVolatility("INVALID", 30);
      381 |
    > 382 |       expect(volatility).toBeNull();
          |                          ^
      383 |     });
      384 |
      385 |     test("should handle portfolio with zero weights", () => {

      at Object.toBeNull (tests/unit/utils/riskEngine.test.js:382:26)

  ‚óè Risk Engine ‚Ä∫ error handling and edge cases ‚Ä∫ should validate input parameters

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"confidence_level": 1.5, "error": "Portfolio data required for VaR calculation - no mock data available", "lookback_days": 252, "method": 1.5, "portfolioId": [], "time_horizon": 1}

      395 |
      396 |     test("should validate input parameters", async () => {
    > 397 |       await expect(riskEngine.calculateVaR([], 1.5, 252)).rejects.toThrow(
          |             ^
      398 |         "Confidence level must be between 0 and 1"
      399 |       );
      400 |       await expect(riskEngine.calculateVaR(null, 0.95, 252)).rejects.toThrow(

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (tests/unit/utils/riskEngine.test.js:397:13)

  ‚óè Risk Engine ‚Ä∫ error handling and edge cases ‚Ä∫ should handle database connection errors

    expect(received).toBeNull()

    Received: 0.2

      411 |       const result = await riskEngine.calculateVolatility("AAPL", 30);
      412 |
    > 413 |       expect(result).toBeNull();
          |                      ^
      414 |     });
      415 |   });
      416 | });

      at Object.toBeNull (tests/unit/utils/riskEngine.test.js:413:22)

FAIL tests/unit/routes/trading.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/ ‚Ä∫ should return trading info

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/health ‚Ä∫ should return trading health status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/debug ‚Ä∫ should return debug information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/signals ‚Ä∫ should handle trading signals request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/orders ‚Ä∫ should handle order creation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/positions ‚Ä∫ should handle positions request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/risk/portfolio ‚Ä∫ should return comprehensive portfolio risk analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/risk/portfolio ‚Ä∫ should handle empty portfolio gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/risk/limits ‚Ä∫ should create new risk limits with valid data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/risk/limits ‚Ä∫ should update existing risk limits

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/risk/limits ‚Ä∫ should validate risk limit ranges

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/risk/limits ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/risk/limits ‚Ä∫ should use default values for missing fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should successfully close an existing position

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should handle limit order position closing

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should return 404 for non-existent position

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should validate required symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/positions/:symbol/close ‚Ä∫ should handle database transaction rollback on error

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/strategies ‚Ä∫ should return available trading strategies

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/strategies ‚Ä∫ should filter strategies by type

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/strategies ‚Ä∫ should include performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/strategies ‚Ä∫ should create a new trading strategy

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/strategies ‚Ä∫ should validate required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/performance ‚Ä∫ should return trading performance analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/performance ‚Ä∫ should handle time period filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/performance ‚Ä∫ should include benchmark comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/trades ‚Ä∫ should return detailed trade analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/trades ‚Ä∫ should filter trades by symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/analytics/trades ‚Ä∫ should support pagination

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/market/status ‚Ä∫ should return current market status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/market/status ‚Ä∫ should include extended hours information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/market/hours ‚Ä∫ should return trading hours for current week

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/market/hours ‚Ä∫ should handle specific date queries

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/quotes/:symbol ‚Ä∫ should return real-time quote for valid symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/quotes/:symbol ‚Ä∫ should include bid/ask spread information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/quotes/:symbol ‚Ä∫ should handle invalid symbols gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/quotes/batch ‚Ä∫ should return quotes for multiple symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/quotes/batch ‚Ä∫ should limit batch size

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/paper/status ‚Ä∫ should return paper trading account status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/paper/status ‚Ä∫ should include performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/paper/reset ‚Ä∫ should reset paper trading account

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ POST /trading/paper/reset ‚Ä∫ should require confirmation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/orders ‚Ä∫ should return user orders with pagination

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/orders ‚Ä∫ should filter orders by status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ GET /trading/orders ‚Ä∫ should filter orders by symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ DELETE /trading/orders/:orderId ‚Ä∫ should cancel an existing order

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ DELETE /trading/orders/:orderId ‚Ä∫ should handle already filled orders

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ Trading Error Handling ‚Ä∫ should handle database connection errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ Trading Error Handling ‚Ä∫ should validate symbol format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ Trading Error Handling ‚Ä∫ should handle market closed scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ Trading Error Handling ‚Ä∫ should handle insufficient funds scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Unit Tests ‚Ä∫ Trading Error Handling ‚Ä∫ should rate limit API calls

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/utils/riskEngine.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
        query: '\n' +
          '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
        params: '7 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Portfolio Risk Assessment with Database Integration ‚Ä∫ should calculate portfolio-wide risk metrics from database

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Portfolio Risk Assessment with Database Integration ‚Ä∫ should identify concentration risk

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Portfolio Risk Assessment with Database Integration ‚Ä∫ should calculate sector allocation risk

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Historical Volatility Analysis ‚Ä∫ should calculate volatility from historical price data

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Historical Volatility Analysis ‚Ä∫ should handle insufficient data gracefully

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Historical Volatility Analysis ‚Ä∫ should calculate beta relative to market

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Value at Risk (VaR) Calculations ‚Ä∫ should calculate portfolio VaR using historical method

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Value at Risk (VaR) Calculations ‚Ä∫ should calculate VaR for different confidence levels

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Value at Risk (VaR) Calculations ‚Ä∫ should calculate parametric VaR

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Position Sizing and Risk Management ‚Ä∫ should recommend optimal position sizes

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Position Sizing and Risk Management ‚Ä∫ should validate position size against risk limits

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Correlation and Covariance Analysis ‚Ä∫ should calculate correlation matrix for portfolio

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Correlation and Covariance Analysis ‚Ä∫ should identify highly correlated positions

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Stress Testing and Scenario Analysis ‚Ä∫ should perform market crash stress test

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Stress Testing and Scenario Analysis ‚Ä∫ should perform custom scenario analysis

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Risk Monitoring and Alerts ‚Ä∫ should monitor portfolio risk limits

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Risk Monitoring and Alerts ‚Ä∫ should generate risk alerts for violations

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should handle large portfolios efficiently

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should maintain accuracy with concurrent calculations

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle empty portfolio gracefully

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle database connection errors

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  ‚óè Risk Engine Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle invalid risk parameters

    error: column "cost_basis" of relation "portfolio_holdings" does not exist

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

FAIL tests/integration/utils/apiKeyService.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: Invalid test token provided
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/apiKeyService.test.js:94:29)

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at Object.getApiKey (utils/apiKeyService.js:1404:14)
      at Object.<anonymous> (tests/integration/utils/apiKeyService.test.js:94:29)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: Invalid test token provided
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/apiKeyService.test.js:108:29)

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at Object.getApiKey (utils/apiKeyService.js:1404:14)
      at Object.<anonymous> (tests/integration/utils/apiKeyService.test.js:108:29)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key validation error: Error: JWT validation failed: Invalid test token provided
          at ApiKeyService.validateApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:976:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.validateApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1411:14)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/apiKeyService.test.js:118:26)

      1064 |       };
      1065 |     } catch (error) {
    > 1066 |       console.error("API key validation error:", error);
           |               ^
      1067 |       return {
      1068 |         valid: false,
      1069 |         error: error.message,

      at ApiKeyService.error [as validateApiKey] (utils/apiKeyService.js:1066:15)
      at Object.validateApiKey (utils/apiKeyService.js:1411:14)
      at Object.<anonymous> (tests/integration/utils/apiKeyService.test.js:118:26)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: Invalid test token provided
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/apiKeyService.test.js:218:22)

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at Object.getApiKey (utils/apiKeyService.js:1404:14)
      at Object.<anonymous> (tests/integration/utils/apiKeyService.test.js:218:22)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè API Key Service Integration Tests ‚Ä∫ API Key Encryption ‚Ä∫ should encrypt and decrypt API keys

    TypeError: apiKeyService.encryptApiKey is not a function

      24 |       const userSalt = "user-salt-456";
      25 |
    > 26 |       const encrypted = await apiKeyService.encryptApiKey(testKey, userSalt);
         |                                             ^
      27 |       expect(encrypted).toBeDefined();
      28 |       expect(encrypted).not.toBe(testKey);
      29 |

      at Object.encryptApiKey (tests/integration/utils/apiKeyService.test.js:26:45)

  ‚óè API Key Service Integration Tests ‚Ä∫ API Key Encryption ‚Ä∫ should handle encryption with different salts

    TypeError: apiKeyService.encryptApiKey is not a function

      37 |       const salt2 = "salt2";
      38 |
    > 39 |       const encrypted1 = await apiKeyService.encryptApiKey(testKey, salt1);
         |                                              ^
      40 |       const encrypted2 = await apiKeyService.encryptApiKey(testKey, salt2);
      41 |
      42 |       // Same key with different salts should produce different encrypted results

      at Object.encryptApiKey (tests/integration/utils/apiKeyService.test.js:39:46)

  ‚óè API Key Service Integration Tests ‚Ä∫ API Key Encryption ‚Ä∫ should handle decryption with wrong salt gracefully

    TypeError: apiKeyService.encryptApiKey is not a function

      57 |       const wrongSalt = "wrong-salt";
      58 |
    > 59 |       const encrypted = await apiKeyService.encryptApiKey(testKey, correctSalt);
         |                                             ^
      60 |
      61 |       // Should not decrypt correctly with wrong salt
      62 |       try {

      at Object.encryptApiKey (tests/integration/utils/apiKeyService.test.js:59:45)

  ‚óè API Key Service Integration Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should handle JWT token validation

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      134 |       expect(result).toBeDefined();
      135 |       // Invalid token should return null or false
    > 136 |       expect(result === null || result === false).toBe(true);
          |                                                   ^
      137 |     });
      138 |
      139 |     test("should check JWT circuit breaker", () => {

      at Object.toBe (tests/integration/utils/apiKeyService.test.js:136:51)

  ‚óè API Key Service Integration Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should check JWT circuit breaker

    TypeError: apiKeyService.checkJwtCircuitBreaker is not a function

      138 |
      139 |     test("should check JWT circuit breaker", () => {
    > 140 |       const circuitBreakerStatus = apiKeyService.checkJwtCircuitBreaker();
          |                                                  ^
      141 |       expect(typeof circuitBreakerStatus).toBe("boolean");
      142 |     });
      143 |

      at Object.checkJwtCircuitBreaker (tests/integration/utils/apiKeyService.test.js:140:50)

  ‚óè API Key Service Integration Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should record JWT success and failure

    expect(received).not.toThrow()

    Error name:    "TypeError"
    Error message: "apiKeyService.recordJwtSuccess is not a function"

          145 |       // These methods should not throw errors
          146 |       expect(() => {
        > 147 |         apiKeyService.recordJwtSuccess();
              |                       ^
          148 |         apiKeyService.recordJwtFailure(new Error("test error"));
          149 |       }).not.toThrow();
          150 |     });

      at recordJwtSuccess (tests/integration/utils/apiKeyService.test.js:147:23)
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.toThrow (tests/integration/utils/apiKeyService.test.js:149:14)
      at Object.toThrow (tests/integration/utils/apiKeyService.test.js:149:14)

  ‚óè API Key Service Integration Tests ‚Ä∫ Circuit Breaker Functionality ‚Ä∫ should check circuit breaker status

    TypeError: apiKeyService.checkCircuitBreaker is not a function

      153 |   describe("Circuit Breaker Functionality", () => {
      154 |     test("should check circuit breaker status", () => {
    > 155 |       const status = apiKeyService.checkCircuitBreaker();
          |                                    ^
      156 |       expect(typeof status).toBe("boolean");
      157 |     });
      158 |

      at Object.checkCircuitBreaker (tests/integration/utils/apiKeyService.test.js:155:36)

  ‚óè API Key Service Integration Tests ‚Ä∫ Circuit Breaker Functionality ‚Ä∫ should record success and failure

    expect(received).not.toThrow()

    Error name:    "TypeError"
    Error message: "apiKeyService.recordSuccess is not a function"

          160 |       // These methods should not throw errors
          161 |       expect(() => {
        > 162 |         apiKeyService.recordSuccess();
              |                       ^
          163 |         apiKeyService.recordFailure(new Error("test error"));
          164 |       }).not.toThrow();
          165 |     });

      at recordSuccess (tests/integration/utils/apiKeyService.test.js:162:23)
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.toThrow (tests/integration/utils/apiKeyService.test.js:164:14)
      at Object.toThrow (tests/integration/utils/apiKeyService.test.js:164:14)

  ‚óè API Key Service Integration Tests ‚Ä∫ Audit Logging ‚Ä∫ should log audit events

    TypeError: apiKeyService.logAuditEvent is not a function

      175 |       // Should not throw error
      176 |       await expect(
    > 177 |         apiKeyService.logAuditEvent(userId, action, provider, sessionId)
          |                       ^
      178 |       ).resolves.not.toThrow();
      179 |     });
      180 |

      at Object.logAuditEvent (tests/integration/utils/apiKeyService.test.js:177:23)

  ‚óè API Key Service Integration Tests ‚Ä∫ Audit Logging ‚Ä∫ should handle audit logging failures gracefully

    TypeError: apiKeyService.logAuditEvent is not a function

      182 |       // Should not throw even with invalid data
      183 |       await expect(
    > 184 |         apiKeyService.logAuditEvent(null, null, null, null)
          |                       ^
      185 |       ).resolves.not.toThrow();
      186 |     });
      187 |   });

      at Object.logAuditEvent (tests/integration/utils/apiKeyService.test.js:184:23)

  ‚óè API Key Service Integration Tests ‚Ä∫ Encryption Key Management ‚Ä∫ should get encryption key

    TypeError: apiKeyService.getEncryptionKey is not a function

      189 |   describe("Encryption Key Management", () => {
      190 |     test("should get encryption key", async () => {
    > 191 |       const encryptionKey = await apiKeyService.getEncryptionKey();
          |                                                 ^
      192 |       expect(encryptionKey).toBeDefined();
      193 |       expect(typeof encryptionKey).toBe("string");
      194 |     });

      at Object.getEncryptionKey (tests/integration/utils/apiKeyService.test.js:191:49)

FAIL tests/unit/utils/logger.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Logger ‚Ä∫ Initialization ‚Ä∫ should initialize with environment variables

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      43 |       const newLogger = require("../../../utils/logger");
      44 |
    > 45 |       expect(newLogger.currentLevel).toBe(3); // DEBUG level
         |                                      ^
      46 |       expect(newLogger.serviceName).toBe("test-service");
      47 |       expect(newLogger.version).toBe("2.0.0");
      48 |     });

      at Object.toBe (tests/unit/utils/logger.test.js:45:38)

  ‚óè Logger ‚Ä∫ Log Level Parsing ‚Ä∫ should default to INFO for invalid log levels

    TypeError: Cannot read properties of null (reading 'toUpperCase')

      30 |    */
      31 |   parseLogLevel(levelStr) {
    > 32 |     const level = levelStr.toUpperCase();
         |                            ^
      33 |     return LOG_LEVELS[level] !== undefined
      34 |       ? LOG_LEVELS[level]
      35 |       : LOG_LEVELS.INFO;

      at Logger.toUpperCase [as parseLogLevel] (utils/logger.js:32:28)
      at Object.parseLogLevel (tests/unit/utils/logger.test.js:69:21)

  ‚óè Logger ‚Ä∫ Output Formatting ‚Ä∫ should format output for development environment

    expect(jest.fn()).toHaveBeenCalledTimes(expected)

    Expected number of calls: 2
    Received number of calls: 1

      131 |       logger.output(logEntry);
      132 |
    > 133 |       expect(consoleSpy).toHaveBeenCalledTimes(2);
          |                          ^
      134 |       expect(consoleSpy).toHaveBeenNthCalledWith(
      135 |         1,
      136 |         "[2023-01-01T00:00:00.000Z] [INFO] [12345] Test message"

      at Object.toHaveBeenCalledTimes (tests/unit/utils/logger.test.js:133:26)

  ‚óè Logger ‚Ä∫ Output Formatting ‚Ä∫ should handle development output without extra context

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "[2023-01-01T00:00:00.000Z] [INFO] [12345] Test message"
    Received: "{\"timestamp\":\"2023-01-01T00:00:00.000Z\",\"level\":\"INFO\",\"message\":\"Test message\",\"correlationId\":\"12345\"}"

    Number of calls: 1

      171 |
      172 |       expect(consoleSpy).toHaveBeenCalledTimes(1);
    > 173 |       expect(consoleSpy).toHaveBeenCalledWith(
          |                          ^
      174 |         "[2023-01-01T00:00:00.000Z] [INFO] [12345] Test message"
      175 |       );
      176 |     });

      at Object.toHaveBeenCalledWith (tests/unit/utils/logger.test.js:173:26)

  ‚óè Logger ‚Ä∫ Warning Logging ‚Ä∫ should log warning messages

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      209 |       logger.warn("Warning message");
      210 |
    > 211 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      212 |     });
      213 |
      214 |     test("should log warning with context", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:211:26)

  ‚óè Logger ‚Ä∫ Warning Logging ‚Ä∫ should log warning with context

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      215 |       logger.warn("Warning message", { component: "test" });
      216 |
    > 217 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      218 |     });
      219 |   });
      220 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:217:26)

  ‚óè Logger ‚Ä∫ Info Logging ‚Ä∫ should log info messages

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      223 |       logger.info("Info message");
      224 |
    > 225 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      226 |     });
      227 |
      228 |     test("should log info with context", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:225:26)

  ‚óè Logger ‚Ä∫ Info Logging ‚Ä∫ should log info with context

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      229 |       logger.info("Info message", { operation: "test" });
      230 |
    > 231 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      232 |     });
      233 |   });
      234 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:231:26)

  ‚óè Logger ‚Ä∫ Debug Logging ‚Ä∫ should log debug messages when level is DEBUG

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      247 |       debugLogger.debug("Debug message");
      248 |
    > 249 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      250 |     });
      251 |   });
      252 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:249:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log database operations

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      257 |       });
      258 |
    > 259 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      260 |     });
      261 |
      262 |     test("should log API calls", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:259:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log API calls

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      263 |       logger.apiCall("GET", "/api/stocks", { statusCode: 200 });
      264 |
    > 265 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      266 |     });
      267 |
      268 |     test("should log authentication events", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:265:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log authentication events

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      269 |       logger.auth("login_attempt", { userId: "123" });
      270 |
    > 271 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      272 |     });
      273 |
      274 |     test("should log performance with normal duration", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:271:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log performance with normal duration

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      275 |       logger.performance("database_query", 1000, { table: "stocks" });
      276 |
    > 277 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      278 |     });
      279 |
      280 |     test("should log performance warning for slow operations", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:277:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log performance warning for slow operations

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      281 |       logger.performance("slow_query", 6000, { table: "stocks" });
      282 |
    > 283 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      284 |     });
      285 |
      286 |     test("should log security events", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:283:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log security events

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      287 |       logger.security("unauthorized_access", { ip: "192.168.1.1" });
      288 |
    > 289 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      290 |     });
      291 |
      292 |     test("should log user actions", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:289:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log user actions

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      293 |       logger.userAction("user123456789", "login", { method: "oauth" });
      294 |
    > 295 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      296 |     });
      297 |
      298 |     test("should log user actions for anonymous users", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:295:26)

  ‚óè Logger ‚Ä∫ Specialized Logging Methods ‚Ä∫ should log user actions for anonymous users

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      299 |       logger.userAction(null, "view_page", { page: "home" });
      300 |
    > 301 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      302 |     });
      303 |   });
      304 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:301:26)

  ‚óè Logger ‚Ä∫ Request Middleware ‚Ä∫ should handle incoming request

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      328 |       expect(req.logger).toBe(logger);
      329 |       expect(next).toHaveBeenCalled();
    > 330 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      331 |     });
      332 |
      333 |     test("should handle request with authorization header", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:330:26)

  ‚óè Logger ‚Ä∫ Error Middleware ‚Ä∫ should handle errors

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      400 |
      401 |       expect(next).toHaveBeenCalledWith(error);
    > 402 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      403 |     });
      404 |   });
      405 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:402:26)

  ‚óè Logger ‚Ä∫ Child Logger ‚Ä∫ should use child logger context in logs

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      416 |       childLogger.info("Test message", { extra: "data" });
      417 |
    > 418 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      419 |     });
      420 |   });
      421 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:418:26)

  ‚óè Logger ‚Ä∫ Application Lifecycle Logging ‚Ä∫ should log application startup

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      424 |       logger.startup({ port: 3000 });
      425 |
    > 426 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      427 |     });
      428 |
      429 |     test("should log application shutdown", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:426:26)

  ‚óè Logger ‚Ä∫ Application Lifecycle Logging ‚Ä∫ should log application shutdown

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      430 |       logger.shutdown({ reason: "SIGTERM" });
      431 |
    > 432 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      433 |     });
      434 |
      435 |     test("should log configuration loaded", () => {

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:432:26)

  ‚óè Logger ‚Ä∫ Application Lifecycle Logging ‚Ä∫ should log configuration loaded

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

      442 |       logger.configLoaded(config);
      443 |
    > 444 |       expect(consoleSpy).toHaveBeenCalled();
          |                          ^
      445 |     });
      446 |   });
      447 |

      at Object.toHaveBeenCalled (tests/unit/utils/logger.test.js:444:26)

FAIL tests/integration/utils/tradingModeHelper.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: 'SELECT trading_preferences FROM user_dashboard_settings WHERE user_id = $1',
        params: '1 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at getUserTradingMode (utils/tradingModeHelper.js:18:20)
      at Object.getCurrentRiskLimits (utils/tradingModeHelper.js:536:16)

    console.log
      Trading mode check failed, defaulting to paper: sorry, too many clients already

      at log (utils/tradingModeHelper.js:37:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: 'UPDATE user_dashboard_settings \n' +
          '       SET trading_preferences = jsonb_set(\n' +
          '         COALESCE(tradin...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.switchMode (utils/tradingModeHelper.js:315:5)
      at Object.<anonymous> (tests/integration/utils/tradingModeHelper.test.js:505:7)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Mode Management ‚Ä∫ should get current trading mode

    expect(received).toBeDefined()

    Received: undefined

      24 |
      25 |       expect(currentMode).toBeDefined();
    > 26 |       expect(currentMode.mode).toBeDefined();
         |                                ^
      27 |       expect(["paper", "live", "simulation", "backtest"]).toContain(
      28 |         currentMode.mode
      29 |       );

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:26:32)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Mode Management ‚Ä∫ should switch to paper trading mode

    expect(received).toBe(expected) // Object.is equality

    Expected: "paper"
    Received: undefined

      43 |       expect(switchResult.success).toBe(true);
      44 |       expect(switchResult.previousMode).toBeDefined();
    > 45 |       expect(switchResult.currentMode).toBe("paper");
         |                                        ^
      46 |       expect(switchResult.switchedAt).toBeDefined();
      47 |       expect(switchResult.confirmation).toBeDefined();
      48 |     });

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:45:40)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Mode Management ‚Ä∫ should switch to live trading mode with validation

    expect(received).toBe(expected) // Object.is equality

    Expected: "live"
    Received: undefined

      70 |
      71 |       if (switchResult.success) {
    > 72 |         expect(switchResult.currentMode).toBe("live");
         |                                          ^
      73 |         expect(switchResult.riskLimits).toEqual(liveConfig.riskLimits);
      74 |         expect(switchResult.safeguards).toBeDefined();
      75 |       } else {

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:72:42)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Mode Management ‚Ä∫ should handle simulation mode

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       95 |       );
       96 |
    >  97 |       expect(switchResult.success).toBe(true);
          |                                    ^
       98 |       expect(switchResult.currentMode).toBe("simulation");
       99 |       expect(switchResult.simulationSettings).toEqual(simulationConfig);
      100 |     });

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:97:36)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Mode Validation ‚Ä∫ should validate paper trading requirements

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      110 |
      111 |       expect(validation).toBeDefined();
    > 112 |       expect(validation.isValid).toBe(true);
          |                                  ^
      113 |       expect(validation.requirements).toBeDefined();
      114 |       expect(validation.checks).toBeDefined();
      115 |

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:112:34)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Mode Validation ‚Ä∫ should validate live trading requirements

    TypeError: Cannot read properties of undefined (reading 'find')

      141 |
      142 |       requiredChecks.forEach((checkName) => {
    > 143 |         const check = validation.checks.find((c) => c.name === checkName);
          |                                         ^
      144 |         expect(check).toBeDefined();
      145 |       });
      146 |     });

      at find (tests/integration/utils/tradingModeHelper.test.js:143:41)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/utils/tradingModeHelper.test.js:142:22)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Mode Validation ‚Ä∫ should prevent unauthorized mode switches

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      155 |       );
      156 |
    > 157 |       expect(switchResult.success).toBe(false);
          |                                    ^
      158 |       expect(switchResult.error).toBeDefined();
      159 |       expect(switchResult.error.code).toBe("UNAUTHORIZED");
      160 |     });

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:157:36)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Environment Configuration ‚Ä∫ should configure paper trading environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      177 |
      178 |       expect(configResult).toBeDefined();
    > 179 |       expect(configResult.success).toBe(true);
          |                                    ^
      180 |       expect(configResult.configuration).toEqual(paperConfig);
      181 |       expect(configResult.environmentReady).toBe(true);
      182 |     });

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:179:36)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Environment Configuration ‚Ä∫ should configure live trading environment

    expect(received).toBeDefined()

    Received: undefined

      204 |       } else {
      205 |         // May fail in test environment
    > 206 |         expect(configResult.error).toBeDefined();
          |                                    ^
      207 |       }
      208 |     });
      209 |

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:206:36)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Trading Environment Configuration ‚Ä∫ should handle environment health checks

    expect(received).toBeDefined()

    Received: undefined

      213 |
      214 |       expect(healthCheck).toBeDefined();
    > 215 |       expect(healthCheck.status).toBeDefined();
          |                                  ^
      216 |       expect(["healthy", "degraded", "unhealthy"]).toContain(
      217 |         healthCheck.status
      218 |       );

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:215:34)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Risk Management Integration ‚Ä∫ should enforce risk limits by trading mode

    expect(received).toBeDefined()

    Received: undefined

      245 |
      246 |       expect(riskCheck).toBeDefined();
    > 247 |       expect(riskCheck.approved).toBeDefined();
          |                                  ^
      248 |       expect(riskCheck.riskScore).toBeDefined();
      249 |       expect(riskCheck.appliedLimits).toBeDefined();
      250 |

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:247:34)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Mode-Specific Features ‚Ä∫ should track paper trading performance

    expect(received).toBeDefined()

    Received: undefined

      321 |       expect(performance).toBeDefined();
      322 |       expect(performance.totalReturn).toBeDefined();
    > 323 |       expect(performance.realizedPnL).toBeDefined();
          |                                       ^
      324 |       expect(performance.unrealizedPnL).toBeDefined();
      325 |       expect(performance.tradeCount).toBeDefined();
      326 |       expect(performance.winRate).toBeDefined();

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:323:39)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Mode-Specific Features ‚Ä∫ should handle backtesting mode

    expect(received).toBeDefined()

    Received: undefined

      348 |
      349 |       expect(backtestResult).toBeDefined();
    > 350 |       expect(backtestResult.backtestId).toBeDefined();
          |                                         ^
      351 |       expect(backtestResult.status).toBeDefined();
      352 |       expect(backtestResult.progress).toBeDefined();
      353 |

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:350:41)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Data Isolation and Security ‚Ä∫ should maintain data isolation between modes

    TypeError: tradingModeHelper.getPositions is not a function

      374 |       });
      375 |
    > 376 |       const paperPositions = await tradingModeHelper.getPositions(userId);
          |                                                      ^
      377 |
      378 |       // Switch to simulation mode
      379 |       await tradingModeHelper.switchMode(userId, "simulation");

      at Object.getPositions (tests/integration/utils/tradingModeHelper.test.js:376:54)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Data Isolation and Security ‚Ä∫ should secure live trading credentials

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      398 |
      399 |       expect(securityCheck).toBeDefined();
    > 400 |       expect(securityCheck.encrypted).toBe(true);
          |                                       ^
      401 |       expect(securityCheck.keyStrength).toBeDefined();
      402 |       expect(securityCheck.securityScore).toBeDefined();
      403 |

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:400:39)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Performance and Monitoring ‚Ä∫ should monitor mode switching performance

    expect(received).toBeDefined()

    Received: undefined

      421 |       expect(metrics.averageSwitchTime).toBeDefined();
      422 |       expect(metrics.successRate).toBeDefined();
    > 423 |       expect(metrics.activeUsers).toBeDefined();
          |                                   ^
      424 |     });
      425 |
      426 |     test("should handle concurrent mode operations", async () => {

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:423:35)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Performance and Monitoring ‚Ä∫ should handle concurrent mode operations

    TypeError: tradingModeHelper.getPositions is not a function

      432 |         tradingModeHelper.validateModeRequirements(userId, "paper"),
      433 |         tradingModeHelper.getCurrentRiskLimits(userId),
    > 434 |         tradingModeHelper.getPositions(userId),
          |                           ^
      435 |       ];
      436 |
      437 |       const results = await Promise.all(operations);

      at Object.getPositions (tests/integration/utils/tradingModeHelper.test.js:434:27)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle invalid mode transitions

    expect(received).toBe(expected) // Object.is equality

    Expected: "INVALID_MODE"
    Received: undefined

      455 |       expect(invalidTransition.success).toBe(false);
      456 |       expect(invalidTransition.error).toBeDefined();
    > 457 |       expect(invalidTransition.error.code).toBe("INVALID_MODE");
          |                                            ^
      458 |     });
      459 |
      460 |     test("should handle system failures gracefully", async () => {

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:457:44)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle system failures gracefully

    expect(received).toBeDefined()

    Received: undefined

      471 |
      472 |       expect(failureRecovery).toBeDefined();
    > 473 |       expect(failureRecovery.recovered).toBeDefined();
          |                                         ^
      474 |       expect(failureRecovery.fallbackActivated).toBeDefined();
      475 |
      476 |       if (failureRecovery.fallbackActivated) {

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:473:41)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle network connectivity issues

    expect(received).toBeDefined()

    Received: undefined

      485 |
      486 |       expect(connectivityCheck).toBeDefined();
    > 487 |       expect(connectivityCheck.status).toBeDefined();
          |                                        ^
      488 |       expect(["connected", "degraded", "disconnected"]).toContain(
      489 |         connectivityCheck.status
      490 |       );

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:487:40)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Audit and Compliance ‚Ä∫ should log all mode changes

    expect(received).toBe(expected) // Object.is equality

    Expected: "MODE_SWITCH"
    Received: "mode_switch"

      516 |
      517 |       const latestEntry = auditLog.entries[0];
    > 518 |       expect(latestEntry.action).toBe("MODE_SWITCH");
          |                                  ^
      519 |       expect(latestEntry.userId).toBe(userId);
      520 |       expect(latestEntry.details.targetMode).toBe("paper");
      521 |       expect(latestEntry.timestamp).toBeDefined();

      at Object.toBe (tests/integration/utils/tradingModeHelper.test.js:518:34)

  ‚óè Trading Mode Helper Integration Tests ‚Ä∫ Audit and Compliance ‚Ä∫ should maintain compliance records

    expect(received).toBeDefined()

    Received: undefined

      527 |
      528 |       expect(compliance).toBeDefined();
    > 529 |       expect(compliance.status).toBeDefined();
          |                                 ^
      530 |       expect(compliance.checks).toBeDefined();
      531 |       expect(compliance.lastUpdate).toBeDefined();
      532 |

      at Object.toBeDefined (tests/integration/utils/tradingModeHelper.test.js:529:33)

FAIL tests/unit/routes/performance.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/health ‚Ä∫ should return health status without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance ‚Ä∫ should return performance API information without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should return benchmark comparison with default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle custom benchmark parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle custom period parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle invalid period gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should use authenticated user ID in query

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle empty portfolio data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle database query errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/benchmark (authenticated) ‚Ä∫ should handle performance calculation errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/analytics (authenticated) ‚Ä∫ should return performance analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/analytics (authenticated) ‚Ä∫ should handle analytics calculation errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/metrics (authenticated) ‚Ä∫ should return system performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/metrics (authenticated) ‚Ä∫ should handle metrics collection errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/attribution (authenticated) ‚Ä∫ should return Brinson attribution analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/attribution (authenticated) ‚Ä∫ should handle custom benchmark for attribution

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/attribution (authenticated) ‚Ä∫ should handle custom period for attribution

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/attribution (authenticated) ‚Ä∫ should handle insufficient data for attribution

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/attribution (authenticated) ‚Ä∫ should validate attribution parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/portfolio/:symbol (authenticated) ‚Ä∫ should return symbol-specific performance

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/portfolio/:symbol (authenticated) ‚Ä∫ should handle lowercase symbol conversion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ GET /performance/portfolio/:symbol (authenticated) ‚Ä∫ should handle symbol not found

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Authentication ‚Ä∫ should allow public access to health endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Authentication ‚Ä∫ should allow public access to root endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Authentication ‚Ä∫ should require authentication for benchmark endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should validate benchmark symbol format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should sanitize period parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle database connection timeout

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle performance monitor failures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should return consistent JSON response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Performance Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include metadata in performance responses

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/screener.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Stock screening with filters: {}

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: { priceMin: '100', priceMax: '500' }

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: { marketCapMin: '1000000000', marketCapMax: '100000000000' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { volumeMin: '1000000' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { sector: 'Technology' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { peRatioMin: '10', peRatioMax: '30' }

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: { dividendYieldMin: '2', dividendYieldMax: '8' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { page: '3', limit: '100' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { limit: '1000' }

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: {
        priceMin: '50',
        priceMax: '200',
        marketCapMin: '5000000000',
        sector: 'Technology',
        peRatioMin: '15',
        peRatioMax: '25'
      }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { priceMin: 'not_a_number', marketCapMax: 'also_not_a_number' }

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: { priceMin: '10000' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: {}

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: {
        sector: "Technology'; DROP TABLE stocks; --",
        priceMin: '50; DELETE FROM screener_templates; --'
      }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { priceMin: '-1000000', priceMax: '999999999999', marketCapMin: '0' }

      at log (routes/screener.js:119:13)

    console.log
      Stock screening with filters: {}

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      Stock screening with filters: { page: '2', limit: '50' }

      at log (routes/screener.js:119:13)

    console.warn
      Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
          at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should screen stocks with default parameters

    expect(received).toHaveProperty(path)

    Expected path: "stocks"
    Received path: []

    Received value: []

      149 |       expect(response.body).toHaveProperty("success", true);
      150 |       expect(response.body).toHaveProperty("data");
    > 151 |       expect(response.body.data).toHaveProperty("stocks"); // Changed from 'results' to 'stocks'
          |                                  ^
      152 |       expect(Array.isArray(response.body.data.stocks)).toBe(true);
      153 |       expect(response.body.data.stocks).toHaveLength(2);
      154 |       expect(response.body.data.stocks[0]).toHaveProperty("symbol", "AAPL");

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:151:34)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle price filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "close >=", ArrayContaining [100, 500, 50, 0]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      170 |
      171 |       expect(response.status).toBe(200);
    > 172 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      173 |         expect.stringContaining("close >="),
      174 |         expect.arrayContaining([100, 500, 50, 0])
      175 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:172:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle market cap filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "market_cap >=", ArrayContaining [1000000000, 100000000000]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      185 |
      186 |       expect(response.status).toBe(200);
    > 187 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      188 |         expect.stringContaining("market_cap >="),
      189 |         expect.arrayContaining([1000000000, 100000000000])
      190 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:187:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle volume filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "COALESCE(md.volume, pd.volume) >=", ArrayContaining [1000000]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      200 |
      201 |       expect(response.status).toBe(200);
    > 202 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      203 |         expect.stringContaining("COALESCE(md.volume, pd.volume) >="),
      204 |         expect.arrayContaining([1000000])
      205 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:202:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle sector filter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "sector =", ArrayContaining ["Technology"]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      214 |
      215 |       expect(response.status).toBe(200);
    > 216 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      217 |         expect.stringContaining("sector ="),
      218 |         expect.arrayContaining(["Technology"])
      219 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:216:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle PE ratio filters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "km.trailing_pe >=", ArrayContaining [10, 30]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      230 |
      231 |       expect(response.status).toBe(200);
    > 232 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      233 |         expect.stringContaining("km.trailing_pe >="),
      234 |         expect.arrayContaining([10, 30])
      235 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:232:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle dividend yield filters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "km.dividend_yield >=", ArrayContaining [2, 8]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      246 |
      247 |       expect(response.status).toBe(200);
    > 248 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      249 |         expect.stringContaining("km.dividend_yield >="),
      250 |         expect.arrayContaining([2, 8])
      251 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:248:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle pagination parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining [100, 200]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      260 |
      261 |       expect(response.status).toBe(200);
    > 262 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      263 |         expect.any(String),
      264 |         expect.arrayContaining([100, 200]) // limit 100, offset 200 (page 3)
      265 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:262:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should cap limit at 500

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining [500, 0]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      274 |
      275 |       expect(response.status).toBe(200);
    > 276 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      277 |         expect.any(String),
      278 |         expect.arrayContaining([500, 0]) // Should be capped at 500
      279 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:276:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle multiple filters combined

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /pd\.close >= .* AND pd\.close <= .* AND cp\.market_cap >= .* AND cp\.sector = .* AND km\.trailing_pe >= .* AND km\.trailing_pe <=/, ArrayContaining [50, 200, 5000000000, "Technology", 15, 25]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      294 |
      295 |       expect(response.status).toBe(200);
    > 296 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      297 |         expect.stringMatching(
      298 |           /pd\.close >= .* AND pd\.close <= .* AND cp\.market_cap >= .* AND cp\.sector = .* AND km\.trailing_pe >= .* AND km\.trailing_pe <=/
      299 |         ),

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:296:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle empty results

    expect(received).toHaveProperty(path, value)

    Expected path: "stocks"
    Received path: []

    Expected value: []
    Received value: []

      324 |       expect(response.status).toBe(200);
      325 |       expect(response.body).toHaveProperty("success", true);
    > 326 |       expect(response.body.data).toHaveProperty("stocks", []);
          |                                  ^
      327 |       expect(response.body.data.pagination).toHaveProperty("totalCount", 0);
      328 |     });
      329 |

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:326:34)

  ‚óè Screener Routes Unit Tests ‚Ä∫ GET /screener/screen (authenticated) ‚Ä∫ should handle database query errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      334 |       const response = await request(app).get("/screener/screen");
      335 |
    > 336 |       expect(response.status).toBe(500);
          |                               ^
      337 |       expect(response.body).toHaveProperty("success", false);
      338 |       expect(response.body.error).toBeDefined();
      339 |     });

      at Object.toBe (tests/unit/routes/screener.test.js:336:31)

  ‚óè Screener Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should sanitize SQL injection attempts

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining ["Technology'; DROP TABLE stocks; --", 50]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      388 |       expect(response.status).toBe(200);
      389 |       // Parameters should be safely passed as prepared statement params
    > 390 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      391 |         expect.any(String),
      392 |         expect.arrayContaining([
      393 |           "Technology'; DROP TABLE stocks; --",

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:390:25)

  ‚óè Screener Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle database timeout errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      424 |       const response = await request(app).get("/screener/screen");
      425 |
    > 426 |       expect(response.status).toBe(500);
          |                               ^
      427 |       expect(response.body).toHaveProperty("success", false);
      428 |       expect(response.body.error).toBe("Database query failed");
      429 |     });

      at Object.toBe (tests/unit/routes/screener.test.js:426:31)

  ‚óè Screener Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should include pagination metadata

    expect(received).toHaveProperty(path)

    Expected path: "pagination"
    Received path: []

    Received value: []

      447 |
      448 |       expect(response.status).toBe(200);
    > 449 |       expect(response.body.data).toHaveProperty("pagination");
          |                                  ^
      450 |       expect(response.body.data.pagination).toHaveProperty("page", 2);
      451 |       expect(response.body.data.pagination).toHaveProperty("limit", 50);
      452 |       expect(response.body.data.pagination).toHaveProperty("totalCount", 250);

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:449:34)

FAIL tests/integration/utils/logger.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      {"timestamp":"2025-09-26T01:28:00.751Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error message","correlationId":"ff0f5301","userId":"test123","operation":"test","severity":"ERROR"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.754Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test warning message","correlationId":"9cee4b66","severity":"WARN"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.754Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test info message","correlationId":"6de62c9b","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.755Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database operation: SELECT * FROM company_profile","correlationId":"c80eb9f0","duration":150,"rows":25,"component":"database","operation":"SELECT * FROM company_profile","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.756Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"API call: GET /api/portfolio","correlationId":"660b9ee3","userId":"test123","component":"api-client","method":"GET","url":"/api/portfolio","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.756Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Authentication event: login_success","correlationId":"3eef2470","userId":"test123","ip":"127.0.0.1","component":"auth","event":"login_success","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.757Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Performance: portfolio_calculation completed in 250ms","correlationId":"b933dc05","symbols":10,"userId":"test123","component":"performance","operation":"portfolio_calculation","duration_ms":250,"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.758Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Security event: unauthorized_access_attempt","correlationId":"3330b20a","ip":"192.168.1.100","endpoint":"/admin","component":"security","event":"unauthorized_access_attempt","severity":"WARN"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":1758850080758,"level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"User action: portfolio_view","correlationId":"eebd6d01","symbol":"AAPL","component":"user-action","userId":"test_use...","action":"portfolio_view","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.759Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Portfolio calculation completed","correlationId":"73bbd06f","userId":"test123","portfolioId":"port456","symbols":["AAPL","GOOGL","MSFT"],"metrics":{"total_value":1250000,"gainLoss":5000,"returnPercent":5},"duration":150,"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.760Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database operation failed","correlationId":"3d74fa53","error":{"name":"Error","message":"Test database connection error","stack":"Error: Test database connection error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/logger.test.js:295:21)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","code":"DB_CONNECTION_FAILED"},"severity":"ERROR"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.783Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Configuration loaded","correlationId":"9babd0da","component":"config","config":{"appName":"test-app","version":"1.0.0","apiKey":"[REDACTED]"},"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.783Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Application starting","correlationId":"f5f28646","port":3000,"env":"test","component":"startup","nodeVersion":"v20.19.4","pid":197255,"memory":{"rss":1333342208,"heapTotal":1182863360,"heapUsed":1117397840,"external":54910548,"arrayBuffers":51445751},"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.784Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Application shutting down","correlationId":"b645972e","reason":"test_shutdown","component":"shutdown","uptime":26.60238203,"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.785Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Child logger test message","correlationId":"893e8c2f","requestId":"req_789","userId":"user_xyz","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.786Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Performance: slow_database_query completed in 6000ms","correlationId":"9773bc82","query":"SELECT * FROM large_table","component":"performance","operation":"slow_database_query","duration_ms":6000,"slow_operation":true,"severity":"WARN"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.786Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Performance: fast_api_call completed in 100ms","correlationId":"a2b01e09","endpoint":"/api/health","component":"performance","operation":"fast_api_call","duration_ms":100,"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.787Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test message","correlationId":"1d251b90","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.787Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test message","correlationId":"d03d6a14","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.788Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test message","correlationId":"909ed224","severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      {"timestamp":"2025-09-26T01:28:00.793Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Large context test","correlationId":"88af9fc6","data":[{"id":0,"value":"item_0"},{"id":1,"value":"item_1"},{"id":2,"value":"item_2"},{"id":3,"value":"item_3"},{"id":4,"value":"item_4"},{"id":5,"value":"item_5"},{"id":6,"value":"item_6"},{"id":7,"value":"item_7"},{"id":8,"value":"item_8"},{"id":9,"value":"item_9"},{"id":10,"value":"item_10"},{"id":11,"value":"item_11"},{"id":12,"value":"item_12"},{"id":13,"value":"item_13"},{"id":14,"value":"item_14"},{"id":15,"value":"item_15"},{"id":16,"value":"item_16"},{"id":17,"value":"item_17"},{"id":18,"value":"item_18"},{"id":19,"value":"item_19"},{"id":20,"value":"item_20"},{"id":21,"value":"item_21"},{"id":22,"value":"item_22"},{"id":23,"value":"item_23"},{"id":24,"value":"item_24"},{"id":25,"value":"item_25"},{"id":26,"value":"item_26"},{"id":27,"value":"item_27"},{"id":28,"value":"item_28"},{"id":29,"value":"item_29"},{"id":30,"value":"item_30"},{"id":31,"value":"item_31"},{"id":32,"value":"item_32"},{"id":33,"value":"item_33"},{"id":34,"value":"item_34"},{"id":35,"value":"item_35"},{"id":36,"value":"item_36"},{"id":37,"value":"item_37"},{"id":38,"value":"item_38"},{"id":39,"value":"item_39"},{"id":40,"value":"item_40"},{"id":41,"value":"item_41"},{"id":42,"value":"item_42"},{"id":43,"value":"item_43"},{"id":44,"value":"item_44"},{"id":45,"value":"item_45"},{"id":46,"value":"item_46"},{"id":47,"value":"item_47"},{"id":48,"value":"item_48"},{"id":49,"value":"item_49"},{"id":50,"value":"item_50"},{"id":51,"value":"item_51"},{"id":52,"value":"item_52"},{"id":53,"value":"item_53"},{"id":54,"value":"item_54"},{"id":55,"value":"item_55"},{"id":56,"value":"item_56"},{"id":57,"value":"item_57"},{"id":58,"value":"item_58"},{"id":59,"value":"item_59"},{"id":60,"value":"item_60"},{"id":61,"value":"item_61"},{"id":62,"value":"item_62"},{"id":63,"value":"item_63"},{"id":64,"value":"item_64"},{"id":65,"value":"item_65"},{"id":66,"value":"item_66"},{"id":67,"value":"item_67"},{"id":68,"value":"item_68"},{"id":69,"value":"item_69"},{"id":70,"value":"item_70"},{"id":71,"value":"item_71"},{"id":72,"value":"item_72"},{"id":73,"value":"item_73"},{"id":74,"value":"item_74"},{"id":75,"value":"item_75"},{"id":76,"value":"item_76"},{"id":77,"value":"item_77"},{"id":78,"value":"item_78"},{"id":79,"value":"item_79"},{"id":80,"value":"item_80"},{"id":81,"value":"item_81"},{"id":82,"value":"item_82"},{"id":83,"value":"item_83"},{"id":84,"value":"item_84"},{"id":85,"value":"item_85"},{"id":86,"value":"item_86"},{"id":87,"value":"item_87"},{"id":88,"value":"item_88"},{"id":89,"value":"item_89"},{"id":90,"value":"item_90"},{"id":91,"value":"item_91"},{"id":92,"value":"item_92"},{"id":93,"value":"item_93"},{"id":94,"value":"item_94"},{"id":95,"value":"item_95"},{"id":96,"value":"item_96"},{"id":97,"value":"item_97"},{"id":98,"value":"item_98"},{"id":99,"value":"item_99"},{"id":100,"value":"item_100"},{"id":101,"value":"item_101"},{"id":102,"value":"item_102"},{"id":103,"value":"item_103"},{"id":104,"value":"item_104"},{"id":105,"value":"item_105"},{"id":106,"value":"item_106"},{"id":107,"value":"item_107"},{"id":108,"value":"item_108"},{"id":109,"value":"item_109"},{"id":110,"value":"item_110"},{"id":111,"value":"item_111"},{"id":112,"value":"item_112"},{"id":113,"value":"item_113"},{"id":114,"value":"item_114"},{"id":115,"value":"item_115"},{"id":116,"value":"item_116"},{"id":117,"value":"item_117"},{"id":118,"value":"item_118"},{"id":119,"value":"item_119"},{"id":120,"value":"item_120"},{"id":121,"value":"item_121"},{"id":122,"value":"item_122"},{"id":123,"value":"item_123"},{"id":124,"value":"item_124"},{"id":125,"value":"item_125"},{"id":126,"value":"item_126"},{"id":127,"value":"item_127"},{"id":128,"value":"item_128"},{"id":129,"value":"item_129"},{"id":130,"value":"item_130"},{"id":131,"value":"item_131"},{"id":132,"value":"item_132"},{"id":133,"value":"item_133"},{"id":134,"value":"item_134"},{"id":135,"value":"item_135"},{"id":136,"value":"item_136"},{"id":137,"value":"item_137"},{"id":138,"value":"item_138"},{"id":139,"value":"item_139"},{"id":140,"value":"item_140"},{"id":141,"value":"item_141"},{"id":142,"value":"item_142"},{"id":143,"value":"item_143"},{"id":144,"value":"item_144"},{"id":145,"value":"item_145"},{"id":146,"value":"item_146"},{"id":147,"value":"item_147"},{"id":148,"value":"item_148"},{"id":149,"value":"item_149"},{"id":150,"value":"item_150"},{"id":151,"value":"item_151"},{"id":152,"value":"item_152"},{"id":153,"value":"item_153"},{"id":154,"value":"item_154"},{"id":155,"value":"item_155"},{"id":156,"value":"item_156"},{"id":157,"value":"item_157"},{"id":158,"value":"item_158"},{"id":159,"value":"item_159"},{"id":160,"value":"item_160"},{"id":161,"value":"item_161"},{"id":162,"value":"item_162"},{"id":163,"value":"item_163"},{"id":164,"value":"item_164"},{"id":165,"value":"item_165"},{"id":166,"value":"item_166"},{"id":167,"value":"item_167"},{"id":168,"value":"item_168"},{"id":169,"value":"item_169"},{"id":170,"value":"item_170"},{"id":171,"value":"item_171"},{"id":172,"value":"item_172"},{"id":173,"value":"item_173"},{"id":174,"value":"item_174"},{"id":175,"value":"item_175"},{"id":176,"value":"item_176"},{"id":177,"value":"item_177"},{"id":178,"value":"item_178"},{"id":179,"value":"item_179"},{"id":180,"value":"item_180"},{"id":181,"value":"item_181"},{"id":182,"value":"item_182"},{"id":183,"value":"item_183"},{"id":184,"value":"item_184"},{"id":185,"value":"item_185"},{"id":186,"value":"item_186"},{"id":187,"value":"item_187"},{"id":188,"value":"item_188"},{"id":189,"value":"item_189"},{"id":190,"value":"item_190"},{"id":191,"value":"item_191"},{"id":192,"value":"item_192"},{"id":193,"value":"item_193"},{"id":194,"value":"item_194"},{"id":195,"value":"item_195"},{"id":196,"value":"item_196"},{"id":197,"value":"item_197"},{"id":198,"value":"item_198"},{"id":199,"value":"item_199"},{"id":200,"value":"item_200"},{"id":201,"value":"item_201"},{"id":202,"value":"item_202"},{"id":203,"value":"item_203"},{"id":204,"value":"item_204"},{"id":205,"value":"item_205"},{"id":206,"value":"item_206"},{"id":207,"value":"item_207"},{"id":208,"value":"item_208"},{"id":209,"value":"item_209"},{"id":210,"value":"item_210"},{"id":211,"value":"item_211"},{"id":212,"value":"item_212"},{"id":213,"value":"item_213"},{"id":214,"value":"item_214"},{"id":215,"value":"item_215"},{"id":216,"value":"item_216"},{"id":217,"value":"item_217"},{"id":218,"value":"item_218"},{"id":219,"value":"item_219"},{"id":220,"value":"item_220"},{"id":221,"value":"item_221"},{"id":222,"value":"item_222"},{"id":223,"value":"item_223"},{"id":224,"value":"item_224"},{"id":225,"value":"item_225"},{"id":226,"value":"item_226"},{"id":227,"value":"item_227"},{"id":228,"value":"item_228"},{"id":229,"value":"item_229"},{"id":230,"value":"item_230"},{"id":231,"value":"item_231"},{"id":232,"value":"item_232"},{"id":233,"value":"item_233"},{"id":234,"value":"item_234"},{"id":235,"value":"item_235"},{"id":236,"value":"item_236"},{"id":237,"value":"item_237"},{"id":238,"value":"item_238"},{"id":239,"value":"item_239"},{"id":240,"value":"item_240"},{"id":241,"value":"item_241"},{"id":242,"value":"item_242"},{"id":243,"value":"item_243"},{"id":244,"value":"item_244"},{"id":245,"value":"item_245"},{"id":246,"value":"item_246"},{"id":247,"value":"item_247"},{"id":248,"value":"item_248"},{"id":249,"value":"item_249"},{"id":250,"value":"item_250"},{"id":251,"value":"item_251"},{"id":252,"value":"item_252"},{"id":253,"value":"item_253"},{"id":254,"value":"item_254"},{"id":255,"value":"item_255"},{"id":256,"value":"item_256"},{"id":257,"value":"item_257"},{"id":258,"value":"item_258"},{"id":259,"value":"item_259"},{"id":260,"value":"item_260"},{"id":261,"value":"item_261"},{"id":262,"value":"item_262"},{"id":263,"value":"item_263"},{"id":264,"value":"item_264"},{"id":265,"value":"item_265"},{"id":266,"value":"item_266"},{"id":267,"value":"item_267"},{"id":268,"value":"item_268"},{"id":269,"value":"item_269"},{"id":270,"value":"item_270"},{"id":271,"value":"item_271"},{"id":272,"value":"item_272"},{"id":273,"value":"item_273"},{"id":274,"value":"item_274"},{"id":275,"value":"item_275"},{"id":276,"value":"item_276"},{"id":277,"value":"item_277"},{"id":278,"value":"item_278"},{"id":279,"value":"item_279"},{"id":280,"value":"item_280"},{"id":281,"value":"item_281"},{"id":282,"value":"item_282"},{"id":283,"value":"item_283"},{"id":284,"value":"item_284"},{"id":285,"value":"item_285"},{"id":286,"value":"item_286"},{"id":287,"value":"item_287"},{"id":288,"value":"item_288"},{"id":289,"value":"item_289"},{"id":290,"value":"item_290"},{"id":291,"value":"item_291"},{"id":292,"value":"item_292"},{"id":293,"value":"item_293"},{"id":294,"value":"item_294"},{"id":295,"value":"item_295"},{"id":296,"value":"item_296"},{"id":297,"value":"item_297"},{"id":298,"value":"item_298"},{"id":299,"value":"item_299"},{"id":300,"value":"item_300"},{"id":301,"value":"item_301"},{"id":302,"value":"item_302"},{"id":303,"value":"item_303"},{"id":304,"value":"item_304"},{"id":305,"value":"item_305"},{"id":306,"value":"item_306"},{"id":307,"value":"item_307"},{"id":308,"value":"item_308"},{"id":309,"value":"item_309"},{"id":310,"value":"item_310"},{"id":311,"value":"item_311"},{"id":312,"value":"item_312"},{"id":313,"value":"item_313"},{"id":314,"value":"item_314"},{"id":315,"value":"item_315"},{"id":316,"value":"item_316"},{"id":317,"value":"item_317"},{"id":318,"value":"item_318"},{"id":319,"value":"item_319"},{"id":320,"value":"item_320"},{"id":321,"value":"item_321"},{"id":322,"value":"item_322"},{"id":323,"value":"item_323"},{"id":324,"value":"item_324"},{"id":325,"value":"item_325"},{"id":326,"value":"item_326"},{"id":327,"value":"item_327"},{"id":328,"value":"item_328"},{"id":329,"value":"item_329"},{"id":330,"value":"item_330"},{"id":331,"value":"item_331"},{"id":332,"value":"item_332"},{"id":333,"value":"item_333"},{"id":334,"value":"item_334"},{"id":335,"value":"item_335"},{"id":336,"value":"item_336"},{"id":337,"value":"item_337"},{"id":338,"value":"item_338"},{"id":339,"value":"item_339"},{"id":340,"value":"item_340"},{"id":341,"value":"item_341"},{"id":342,"value":"item_342"},{"id":343,"value":"item_343"},{"id":344,"value":"item_344"},{"id":345,"value":"item_345"},{"id":346,"value":"item_346"},{"id":347,"value":"item_347"},{"id":348,"value":"item_348"},{"id":349,"value":"item_349"},{"id":350,"value":"item_350"},{"id":351,"value":"item_351"},{"id":352,"value":"item_352"},{"id":353,"value":"item_353"},{"id":354,"value":"item_354"},{"id":355,"value":"item_355"},{"id":356,"value":"item_356"},{"id":357,"value":"item_357"},{"id":358,"value":"item_358"},{"id":359,"value":"item_359"},{"id":360,"value":"item_360"},{"id":361,"value":"item_361"},{"id":362,"value":"item_362"},{"id":363,"value":"item_363"},{"id":364,"value":"item_364"},{"id":365,"value":"item_365"},{"id":366,"value":"item_366"},{"id":367,"value":"item_367"},{"id":368,"value":"item_368"},{"id":369,"value":"item_369"},{"id":370,"value":"item_370"},{"id":371,"value":"item_371"},{"id":372,"value":"item_372"},{"id":373,"value":"item_373"},{"id":374,"value":"item_374"},{"id":375,"value":"item_375"},{"id":376,"value":"item_376"},{"id":377,"value":"item_377"},{"id":378,"value":"item_378"},{"id":379,"value":"item_379"},{"id":380,"value":"item_380"},{"id":381,"value":"item_381"},{"id":382,"value":"item_382"},{"id":383,"value":"item_383"},{"id":384,"value":"item_384"},{"id":385,"value":"item_385"},{"id":386,"value":"item_386"},{"id":387,"value":"item_387"},{"id":388,"value":"item_388"},{"id":389,"value":"item_389"},{"id":390,"value":"item_390"},{"id":391,"value":"item_391"},{"id":392,"value":"item_392"},{"id":393,"value":"item_393"},{"id":394,"value":"item_394"},{"id":395,"value":"item_395"},{"id":396,"value":"item_396"},{"id":397,"value":"item_397"},{"id":398,"value":"item_398"},{"id":399,"value":"item_399"},{"id":400,"value":"item_400"},{"id":401,"value":"item_401"},{"id":402,"value":"item_402"},{"id":403,"value":"item_403"},{"id":404,"value":"item_404"},{"id":405,"value":"item_405"},{"id":406,"value":"item_406"},{"id":407,"value":"item_407"},{"id":408,"value":"item_408"},{"id":409,"value":"item_409"},{"id":410,"value":"item_410"},{"id":411,"value":"item_411"},{"id":412,"value":"item_412"},{"id":413,"value":"item_413"},{"id":414,"value":"item_414"},{"id":415,"value":"item_415"},{"id":416,"value":"item_416"},{"id":417,"value":"item_417"},{"id":418,"value":"item_418"},{"id":419,"value":"item_419"},{"id":420,"value":"item_420"},{"id":421,"value":"item_421"},{"id":422,"value":"item_422"},{"id":423,"value":"item_423"},{"id":424,"value":"item_424"},{"id":425,"value":"item_425"},{"id":426,"value":"item_426"},{"id":427,"value":"item_427"},{"id":428,"value":"item_428"},{"id":429,"value":"item_429"},{"id":430,"value":"item_430"},{"id":431,"value":"item_431"},{"id":432,"value":"item_432"},{"id":433,"value":"item_433"},{"id":434,"value":"item_434"},{"id":435,"value":"item_435"},{"id":436,"value":"item_436"},{"id":437,"value":"item_437"},{"id":438,"value":"item_438"},{"id":439,"value":"item_439"},{"id":440,"value":"item_440"},{"id":441,"value":"item_441"},{"id":442,"value":"item_442"},{"id":443,"value":"item_443"},{"id":444,"value":"item_444"},{"id":445,"value":"item_445"},{"id":446,"value":"item_446"},{"id":447,"value":"item_447"},{"id":448,"value":"item_448"},{"id":449,"value":"item_449"},{"id":450,"value":"item_450"},{"id":451,"value":"item_451"},{"id":452,"value":"item_452"},{"id":453,"value":"item_453"},{"id":454,"value":"item_454"},{"id":455,"value":"item_455"},{"id":456,"value":"item_456"},{"id":457,"value":"item_457"},{"id":458,"value":"item_458"},{"id":459,"value":"item_459"},{"id":460,"value":"item_460"},{"id":461,"value":"item_461"},{"id":462,"value":"item_462"},{"id":463,"value":"item_463"},{"id":464,"value":"item_464"},{"id":465,"value":"item_465"},{"id":466,"value":"item_466"},{"id":467,"value":"item_467"},{"id":468,"value":"item_468"},{"id":469,"value":"item_469"},{"id":470,"value":"item_470"},{"id":471,"value":"item_471"},{"id":472,"value":"item_472"},{"id":473,"value":"item_473"},{"id":474,"value":"item_474"},{"id":475,"value":"item_475"},{"id":476,"value":"item_476"},{"id":477,"value":"item_477"},{"id":478,"value":"item_478"},{"id":479,"value":"item_479"},{"id":480,"value":"item_480"},{"id":481,"value":"item_481"},{"id":482,"value":"item_482"},{"id":483,"value":"item_483"},{"id":484,"value":"item_484"},{"id":485,"value":"item_485"},{"id":486,"value":"item_486"},{"id":487,"value":"item_487"},{"id":488,"value":"item_488"},{"id":489,"value":"item_489"},{"id":490,"value":"item_490"},{"id":491,"value":"item_491"},{"id":492,"value":"item_492"},{"id":493,"value":"item_493"},{"id":494,"value":"item_494"},{"id":495,"value":"item_495"},{"id":496,"value":"item_496"},{"id":497,"value":"item_497"},{"id":498,"value":"item_498"},{"id":499,"value":"item_499"},{"id":500,"value":"item_500"},{"id":501,"value":"item_501"},{"id":502,"value":"item_502"},{"id":503,"value":"item_503"},{"id":504,"value":"item_504"},{"id":505,"value":"item_505"},{"id":506,"value":"item_506"},{"id":507,"value":"item_507"},{"id":508,"value":"item_508"},{"id":509,"value":"item_509"},{"id":510,"value":"item_510"},{"id":511,"value":"item_511"},{"id":512,"value":"item_512"},{"id":513,"value":"item_513"},{"id":514,"value":"item_514"},{"id":515,"value":"item_515"},{"id":516,"value":"item_516"},{"id":517,"value":"item_517"},{"id":518,"value":"item_518"},{"id":519,"value":"item_519"},{"id":520,"value":"item_520"},{"id":521,"value":"item_521"},{"id":522,"value":"item_522"},{"id":523,"value":"item_523"},{"id":524,"value":"item_524"},{"id":525,"value":"item_525"},{"id":526,"value":"item_526"},{"id":527,"value":"item_527"},{"id":528,"value":"item_528"},{"id":529,"value":"item_529"},{"id":530,"value":"item_530"},{"id":531,"value":"item_531"},{"id":532,"value":"item_532"},{"id":533,"value":"item_533"},{"id":534,"value":"item_534"},{"id":535,"value":"item_535"},{"id":536,"value":"item_536"},{"id":537,"value":"item_537"},{"id":538,"value":"item_538"},{"id":539,"value":"item_539"},{"id":540,"value":"item_540"},{"id":541,"value":"item_541"},{"id":542,"value":"item_542"},{"id":543,"value":"item_543"},{"id":544,"value":"item_544"},{"id":545,"value":"item_545"},{"id":546,"value":"item_546"},{"id":547,"value":"item_547"},{"id":548,"value":"item_548"},{"id":549,"value":"item_549"},{"id":550,"value":"item_550"},{"id":551,"value":"item_551"},{"id":552,"value":"item_552"},{"id":553,"value":"item_553"},{"id":554,"value":"item_554"},{"id":555,"value":"item_555"},{"id":556,"value":"item_556"},{"id":557,"value":"item_557"},{"id":558,"value":"item_558"},{"id":559,"value":"item_559"},{"id":560,"value":"item_560"},{"id":561,"value":"item_561"},{"id":562,"value":"item_562"},{"id":563,"value":"item_563"},{"id":564,"value":"item_564"},{"id":565,"value":"item_565"},{"id":566,"value":"item_566"},{"id":567,"value":"item_567"},{"id":568,"value":"item_568"},{"id":569,"value":"item_569"},{"id":570,"value":"item_570"},{"id":571,"value":"item_571"},{"id":572,"value":"item_572"},{"id":573,"value":"item_573"},{"id":574,"value":"item_574"},{"id":575,"value":"item_575"},{"id":576,"value":"item_576"},{"id":577,"value":"item_577"},{"id":578,"value":"item_578"},{"id":579,"value":"item_579"},{"id":580,"value":"item_580"},{"id":581,"value":"item_581"},{"id":582,"value":"item_582"},{"id":583,"value":"item_583"},{"id":584,"value":"item_584"},{"id":585,"value":"item_585"},{"id":586,"value":"item_586"},{"id":587,"value":"item_587"},{"id":588,"value":"item_588"},{"id":589,"value":"item_589"},{"id":590,"value":"item_590"},{"id":591,"value":"item_591"},{"id":592,"value":"item_592"},{"id":593,"value":"item_593"},{"id":594,"value":"item_594"},{"id":595,"value":"item_595"},{"id":596,"value":"item_596"},{"id":597,"value":"item_597"},{"id":598,"value":"item_598"},{"id":599,"value":"item_599"},{"id":600,"value":"item_600"},{"id":601,"value":"item_601"},{"id":602,"value":"item_602"},{"id":603,"value":"item_603"},{"id":604,"value":"item_604"},{"id":605,"value":"item_605"},{"id":606,"value":"item_606"},{"id":607,"value":"item_607"},{"id":608,"value":"item_608"},{"id":609,"value":"item_609"},{"id":610,"value":"item_610"},{"id":611,"value":"item_611"},{"id":612,"value":"item_612"},{"id":613,"value":"item_613"},{"id":614,"value":"item_614"},{"id":615,"value":"item_615"},{"id":616,"value":"item_616"},{"id":617,"value":"item_617"},{"id":618,"value":"item_618"},{"id":619,"value":"item_619"},{"id":620,"value":"item_620"},{"id":621,"value":"item_621"},{"id":622,"value":"item_622"},{"id":623,"value":"item_623"},{"id":624,"value":"item_624"},{"id":625,"value":"item_625"},{"id":626,"value":"item_626"},{"id":627,"value":"item_627"},{"id":628,"value":"item_628"},{"id":629,"value":"item_629"},{"id":630,"value":"item_630"},{"id":631,"value":"item_631"},{"id":632,"value":"item_632"},{"id":633,"value":"item_633"},{"id":634,"value":"item_634"},{"id":635,"value":"item_635"},{"id":636,"value":"item_636"},{"id":637,"value":"item_637"},{"id":638,"value":"item_638"},{"id":639,"value":"item_639"},{"id":640,"value":"item_640"},{"id":641,"value":"item_641"},{"id":642,"value":"item_642"},{"id":643,"value":"item_643"},{"id":644,"value":"item_644"},{"id":645,"value":"item_645"},{"id":646,"value":"item_646"},{"id":647,"value":"item_647"},{"id":648,"value":"item_648"},{"id":649,"value":"item_649"},{"id":650,"value":"item_650"},{"id":651,"value":"item_651"},{"id":652,"value":"item_652"},{"id":653,"value":"item_653"},{"id":654,"value":"item_654"},{"id":655,"value":"item_655"},{"id":656,"value":"item_656"},{"id":657,"value":"item_657"},{"id":658,"value":"item_658"},{"id":659,"value":"item_659"},{"id":660,"value":"item_660"},{"id":661,"value":"item_661"},{"id":662,"value":"item_662"},{"id":663,"value":"item_663"},{"id":664,"value":"item_664"},{"id":665,"value":"item_665"},{"id":666,"value":"item_666"},{"id":667,"value":"item_667"},{"id":668,"value":"item_668"},{"id":669,"value":"item_669"},{"id":670,"value":"item_670"},{"id":671,"value":"item_671"},{"id":672,"value":"item_672"},{"id":673,"value":"item_673"},{"id":674,"value":"item_674"},{"id":675,"value":"item_675"},{"id":676,"value":"item_676"},{"id":677,"value":"item_677"},{"id":678,"value":"item_678"},{"id":679,"value":"item_679"},{"id":680,"value":"item_680"},{"id":681,"value":"item_681"},{"id":682,"value":"item_682"},{"id":683,"value":"item_683"},{"id":684,"value":"item_684"},{"id":685,"value":"item_685"},{"id":686,"value":"item_686"},{"id":687,"value":"item_687"},{"id":688,"value":"item_688"},{"id":689,"value":"item_689"},{"id":690,"value":"item_690"},{"id":691,"value":"item_691"},{"id":692,"value":"item_692"},{"id":693,"value":"item_693"},{"id":694,"value":"item_694"},{"id":695,"value":"item_695"},{"id":696,"value":"item_696"},{"id":697,"value":"item_697"},{"id":698,"value":"item_698"},{"id":699,"value":"item_699"},{"id":700,"value":"item_700"},{"id":701,"value":"item_701"},{"id":702,"value":"item_702"},{"id":703,"value":"item_703"},{"id":704,"value":"item_704"},{"id":705,"value":"item_705"},{"id":706,"value":"item_706"},{"id":707,"value":"item_707"},{"id":708,"value":"item_708"},{"id":709,"value":"item_709"},{"id":710,"value":"item_710"},{"id":711,"value":"item_711"},{"id":712,"value":"item_712"},{"id":713,"value":"item_713"},{"id":714,"value":"item_714"},{"id":715,"value":"item_715"},{"id":716,"value":"item_716"},{"id":717,"value":"item_717"},{"id":718,"value":"item_718"},{"id":719,"value":"item_719"},{"id":720,"value":"item_720"},{"id":721,"value":"item_721"},{"id":722,"value":"item_722"},{"id":723,"value":"item_723"},{"id":724,"value":"item_724"},{"id":725,"value":"item_725"},{"id":726,"value":"item_726"},{"id":727,"value":"item_727"},{"id":728,"value":"item_728"},{"id":729,"value":"item_729"},{"id":730,"value":"item_730"},{"id":731,"value":"item_731"},{"id":732,"value":"item_732"},{"id":733,"value":"item_733"},{"id":734,"value":"item_734"},{"id":735,"value":"item_735"},{"id":736,"value":"item_736"},{"id":737,"value":"item_737"},{"id":738,"value":"item_738"},{"id":739,"value":"item_739"},{"id":740,"value":"item_740"},{"id":741,"value":"item_741"},{"id":742,"value":"item_742"},{"id":743,"value":"item_743"},{"id":744,"value":"item_744"},{"id":745,"value":"item_745"},{"id":746,"value":"item_746"},{"id":747,"value":"item_747"},{"id":748,"value":"item_748"},{"id":749,"value":"item_749"},{"id":750,"value":"item_750"},{"id":751,"value":"item_751"},{"id":752,"value":"item_752"},{"id":753,"value":"item_753"},{"id":754,"value":"item_754"},{"id":755,"value":"item_755"},{"id":756,"value":"item_756"},{"id":757,"value":"item_757"},{"id":758,"value":"item_758"},{"id":759,"value":"item_759"},{"id":760,"value":"item_760"},{"id":761,"value":"item_761"},{"id":762,"value":"item_762"},{"id":763,"value":"item_763"},{"id":764,"value":"item_764"},{"id":765,"value":"item_765"},{"id":766,"value":"item_766"},{"id":767,"value":"item_767"},{"id":768,"value":"item_768"},{"id":769,"value":"item_769"},{"id":770,"value":"item_770"},{"id":771,"value":"item_771"},{"id":772,"value":"item_772"},{"id":773,"value":"item_773"},{"id":774,"value":"item_774"},{"id":775,"value":"item_775"},{"id":776,"value":"item_776"},{"id":777,"value":"item_777"},{"id":778,"value":"item_778"},{"id":779,"value":"item_779"},{"id":780,"value":"item_780"},{"id":781,"value":"item_781"},{"id":782,"value":"item_782"},{"id":783,"value":"item_783"},{"id":784,"value":"item_784"},{"id":785,"value":"item_785"},{"id":786,"value":"item_786"},{"id":787,"value":"item_787"},{"id":788,"value":"item_788"},{"id":789,"value":"item_789"},{"id":790,"value":"item_790"},{"id":791,"value":"item_791"},{"id":792,"value":"item_792"},{"id":793,"value":"item_793"},{"id":794,"value":"item_794"},{"id":795,"value":"item_795"},{"id":796,"value":"item_796"},{"id":797,"value":"item_797"},{"id":798,"value":"item_798"},{"id":799,"value":"item_799"},{"id":800,"value":"item_800"},{"id":801,"value":"item_801"},{"id":802,"value":"item_802"},{"id":803,"value":"item_803"},{"id":804,"value":"item_804"},{"id":805,"value":"item_805"},{"id":806,"value":"item_806"},{"id":807,"value":"item_807"},{"id":808,"value":"item_808"},{"id":809,"value":"item_809"},{"id":810,"value":"item_810"},{"id":811,"value":"item_811"},{"id":812,"value":"item_812"},{"id":813,"value":"item_813"},{"id":814,"value":"item_814"},{"id":815,"value":"item_815"},{"id":816,"value":"item_816"},{"id":817,"value":"item_817"},{"id":818,"value":"item_818"},{"id":819,"value":"item_819"},{"id":820,"value":"item_820"},{"id":821,"value":"item_821"},{"id":822,"value":"item_822"},{"id":823,"value":"item_823"},{"id":824,"value":"item_824"},{"id":825,"value":"item_825"},{"id":826,"value":"item_826"},{"id":827,"value":"item_827"},{"id":828,"value":"item_828"},{"id":829,"value":"item_829"},{"id":830,"value":"item_830"},{"id":831,"value":"item_831"},{"id":832,"value":"item_832"},{"id":833,"value":"item_833"},{"id":834,"value":"item_834"},{"id":835,"value":"item_835"},{"id":836,"value":"item_836"},{"id":837,"value":"item_837"},{"id":838,"value":"item_838"},{"id":839,"value":"item_839"},{"id":840,"value":"item_840"},{"id":841,"value":"item_841"},{"id":842,"value":"item_842"},{"id":843,"value":"item_843"},{"id":844,"value":"item_844"},{"id":845,"value":"item_845"},{"id":846,"value":"item_846"},{"id":847,"value":"item_847"},{"id":848,"value":"item_848"},{"id":849,"value":"item_849"},{"id":850,"value":"item_850"},{"id":851,"value":"item_851"},{"id":852,"value":"item_852"},{"id":853,"value":"item_853"},{"id":854,"value":"item_854"},{"id":855,"value":"item_855"},{"id":856,"value":"item_856"},{"id":857,"value":"item_857"},{"id":858,"value":"item_858"},{"id":859,"value":"item_859"},{"id":860,"value":"item_860"},{"id":861,"value":"item_861"},{"id":862,"value":"item_862"},{"id":863,"value":"item_863"},{"id":864,"value":"item_864"},{"id":865,"value":"item_865"},{"id":866,"value":"item_866"},{"id":867,"value":"item_867"},{"id":868,"value":"item_868"},{"id":869,"value":"item_869"},{"id":870,"value":"item_870"},{"id":871,"value":"item_871"},{"id":872,"value":"item_872"},{"id":873,"value":"item_873"},{"id":874,"value":"item_874"},{"id":875,"value":"item_875"},{"id":876,"value":"item_876"},{"id":877,"value":"item_877"},{"id":878,"value":"item_878"},{"id":879,"value":"item_879"},{"id":880,"value":"item_880"},{"id":881,"value":"item_881"},{"id":882,"value":"item_882"},{"id":883,"value":"item_883"},{"id":884,"value":"item_884"},{"id":885,"value":"item_885"},{"id":886,"value":"item_886"},{"id":887,"value":"item_887"},{"id":888,"value":"item_888"},{"id":889,"value":"item_889"},{"id":890,"value":"item_890"},{"id":891,"value":"item_891"},{"id":892,"value":"item_892"},{"id":893,"value":"item_893"},{"id":894,"value":"item_894"},{"id":895,"value":"item_895"},{"id":896,"value":"item_896"},{"id":897,"value":"item_897"},{"id":898,"value":"item_898"},{"id":899,"value":"item_899"},{"id":900,"value":"item_900"},{"id":901,"value":"item_901"},{"id":902,"value":"item_902"},{"id":903,"value":"item_903"},{"id":904,"value":"item_904"},{"id":905,"value":"item_905"},{"id":906,"value":"item_906"},{"id":907,"value":"item_907"},{"id":908,"value":"item_908"},{"id":909,"value":"item_909"},{"id":910,"value":"item_910"},{"id":911,"value":"item_911"},{"id":912,"value":"item_912"},{"id":913,"value":"item_913"},{"id":914,"value":"item_914"},{"id":915,"value":"item_915"},{"id":916,"value":"item_916"},{"id":917,"value":"item_917"},{"id":918,"value":"item_918"},{"id":919,"value":"item_919"},{"id":920,"value":"item_920"},{"id":921,"value":"item_921"},{"id":922,"value":"item_922"},{"id":923,"value":"item_923"},{"id":924,"value":"item_924"},{"id":925,"value":"item_925"},{"id":926,"value":"item_926"},{"id":927,"value":"item_927"},{"id":928,"value":"item_928"},{"id":929,"value":"item_929"},{"id":930,"value":"item_930"},{"id":931,"value":"item_931"},{"id":932,"value":"item_932"},{"id":933,"value":"item_933"},{"id":934,"value":"item_934"},{"id":935,"value":"item_935"},{"id":936,"value":"item_936"},{"id":937,"value":"item_937"},{"id":938,"value":"item_938"},{"id":939,"value":"item_939"},{"id":940,"value":"item_940"},{"id":941,"value":"item_941"},{"id":942,"value":"item_942"},{"id":943,"value":"item_943"},{"id":944,"value":"item_944"},{"id":945,"value":"item_945"},{"id":946,"value":"item_946"},{"id":947,"value":"item_947"},{"id":948,"value":"item_948"},{"id":949,"value":"item_949"},{"id":950,"value":"item_950"},{"id":951,"value":"item_951"},{"id":952,"value":"item_952"},{"id":953,"value":"item_953"},{"id":954,"value":"item_954"},{"id":955,"value":"item_955"},{"id":956,"value":"item_956"},{"id":957,"value":"item_957"},{"id":958,"value":"item_958"},{"id":959,"value":"item_959"},{"id":960,"value":"item_960"},{"id":961,"value":"item_961"},{"id":962,"value":"item_962"},{"id":963,"value":"item_963"},{"id":964,"value":"item_964"},{"id":965,"value":"item_965"},{"id":966,"value":"item_966"},{"id":967,"value":"item_967"},{"id":968,"value":"item_968"},{"id":969,"value":"item_969"},{"id":970,"value":"item_970"},{"id":971,"value":"item_971"},{"id":972,"value":"item_972"},{"id":973,"value":"item_973"},{"id":974,"value":"item_974"},{"id":975,"value":"item_975"},{"id":976,"value":"item_976"},{"id":977,"value":"item_977"},{"id":978,"value":"item_978"},{"id":979,"value":"item_979"},{"id":980,"value":"item_980"},{"id":981,"value":"item_981"},{"id":982,"value":"item_982"},{"id":983,"value":"item_983"},{"id":984,"value":"item_984"},{"id":985,"value":"item_985"},{"id":986,"value":"item_986"},{"id":987,"value":"item_987"},{"id":988,"value":"item_988"},{"id":989,"value":"item_989"},{"id":990,"value":"item_990"},{"id":991,"value":"item_991"},{"id":992,"value":"item_992"},{"id":993,"value":"item_993"},{"id":994,"value":"item_994"},{"id":995,"value":"item_995"},{"id":996,"value":"item_996"},{"id":997,"value":"item_997"},{"id":998,"value":"item_998"},{"id":999,"value":"item_999"}],"severity":"INFO"}

      at console.apply [as log] (tests/integration/utils/logger.test.js:28:26)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Logger Integration Tests ‚Ä∫ Error Handling ‚Ä∫ should handle circular references in context

    expect(received).not.toThrow()

    Error name:    "TypeError"
    Error message: "Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle"

          89 |     } else {
          90 |       // JSON format for production (structured logging)
        > 91 |       console.log(JSON.stringify(logEntry));
             |                        ^
          92 |     }
          93 |   }
          94 |

      at Logger.stringify [as output] (utils/logger.js:91:24)
      at Logger.output [as info] (utils/logger.js:144:10)
      at info (tests/integration/utils/logger.test.js:584:16)
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:74:11)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:320:21)
      at Object.toThrow (tests/integration/utils/logger.test.js:585:14)
      at Object.toThrow (tests/integration/utils/logger.test.js:585:14)

FAIL tests/integration/utils/performanceMonitor.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      {"timestamp":"2025-09-26T01:28:00.862Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Operation not found","correlationId":"fc615587","operationId":"non_existent_timer","severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Metrics Recording ‚Ä∫ should record custom metrics

    expect(received).toContain(expected) // indexOf

    Expected value: 42.5
    Received array: [596.0937454658412, 1184.9287526696999]

      192 |
      193 |       const values = metrics.map((m) => m.value);
    > 194 |       expect(values).toContain(42.5);
          |                      ^
      195 |       expect(values).toContain(45.0);
      196 |       expect(values).toContain(40.0);
      197 |     });

      at Object.toContain (tests/integration/utils/performanceMonitor.test.js:194:22)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Metrics Recording ‚Ä∫ should handle metrics with metadata

    expect(received).toBeDefined()

    Received: undefined

      239 |       );
      240 |
    > 241 |       expect(metric).toBeDefined();
          |                      ^
      242 |       expect(metric.metadata.endpoint).toBe("/api/test");
      243 |       expect(metric.metadata.method).toBe("GET");
      244 |     });

      at Object.toBeDefined (tests/integration/utils/performanceMonitor.test.js:241:22)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Analytics ‚Ä∫ should calculate average response times

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      259 |       );
      260 |
    > 261 |       expect(avgResponseTime).toBeGreaterThan(0);
          |                               ^
      262 |       expect(avgResponseTime).toBe(143.75); // (100 + 150 + 200 + 125) / 4
      263 |     });
      264 |

      at Object.toBeGreaterThan (tests/integration/utils/performanceMonitor.test.js:261:31)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ System Health Monitoring ‚Ä∫ should collect system health metrics

    expect(received).toHaveProperty(path)

    Expected path: "timestamp"
    Received path: []

    Received value: {"averageDuration": 109, "metrics": {"cpu": {"usage_percent": 40}, "memory": {"usage_percent": 42}}, "score": 98, "slowOperations": 0, "status": "healthy", "successRate": "100.00", "totalOperations": 17}

      300 |
      301 |       expect(health).toHaveProperty("status");
    > 302 |       expect(health).toHaveProperty("timestamp");
          |                      ^
      303 |       expect(health).toHaveProperty("metrics");
      304 |
      305 |       expect(health.metrics).toHaveProperty("memory");

      at Object.toHaveProperty (tests/integration/utils/performanceMonitor.test.js:302:22)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ System Health Monitoring ‚Ä∫ should include database health in system metrics

    expect(received).toHaveProperty(path)

    Expected path: "database"
    Received path: []

    Received value: {"cpu": {"usage_percent": 20}, "memory": {"usage_percent": 66}}

      323 |       const health = await getSystemHealth();
      324 |
    > 325 |       expect(health.metrics).toHaveProperty("database");
          |                              ^
      326 |       expect(health.metrics.database).toHaveProperty("connected");
      327 |       expect(health.metrics.database).toHaveProperty("pool_size");
      328 |       expect(health.metrics.database).toHaveProperty("active_connections");

      at Object.toHaveProperty (tests/integration/utils/performanceMonitor.test.js:325:30)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ System Health Monitoring ‚Ä∫ should detect system health status accurately

    expect(received).toBeLessThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      340 |       if (health.status === "healthy") {
      341 |         expect(health.metrics.memory.usage_percent).toBeLessThan(90);
    > 342 |         expect(health.metrics.cpu.usage).toBeLessThan(90);
          |                                          ^
      343 |       }
      344 |     });
      345 |   });

      at Object.toBeLessThan (tests/integration/utils/performanceMonitor.test.js:342:42)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Anomaly Detection ‚Ä∫ should detect trend-based anomalies

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      394 |       const anomalies = await detectAnomalies("trend_test", "1h", "trend");
      395 |
    > 396 |       expect(anomalies.length).toBeGreaterThan(0);
          |                                ^
      397 |
      398 |       const dropAnomaly = anomalies.find((a) => a.value === 50);
      399 |       expect(dropAnomaly).toBeDefined();

      at Object.toBeGreaterThan (tests/integration/utils/performanceMonitor.test.js:396:32)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Reporting ‚Ä∫ should generate comprehensive performance report

    expect(received).toHaveProperty(path)

    Expected path: "anomalies"
    Received path: []

    Received value: {"activeRequests": 1, "alerts": [], "errorRate": 0, "metrics": [{"category": "api", "name": "request_duration", "timestamp": 1758850080898, "value": 150}, {"category": "database", "name": "database_query", "timestamp": 1758850050898, "value": 200}], "recommendations": [{"category": "database", "message": "Monitor slow database operations", "priority": "high", "type": "performance"}, {"category": "api", "message": "Consider caching frequently accessed data", "priority": "medium", "type": "optimization"}], "status": "healthy", "summary": {"avg_response_time": 150, "success_rate": 95.5, "total_metrics": 2}, "timestamp": "2025-09-26T01:28:00.898Z", "totalRequests": 53, "uptime": 26.715731328}

      420 |       expect(report).toHaveProperty("summary");
      421 |       expect(report).toHaveProperty("metrics");
    > 422 |       expect(report).toHaveProperty("anomalies");
          |                      ^
      423 |       expect(report).toHaveProperty("recommendations");
      424 |       expect(report).toHaveProperty("timestamp");
      425 |

      at Object.toHaveProperty (tests/integration/utils/performanceMonitor.test.js:422:22)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Reporting ‚Ä∫ should include performance recommendations

    expect(received).toHaveProperty(path)

    Expected path: "description"
    Received path: []

    Received value: {"category": "database", "message": "Monitor slow database operations", "priority": "high", "type": "performance"}

      452 |         expect(
      453 |           recommendations.find((r) => r.type === "performance")
    > 454 |         ).toHaveProperty("description");
          |           ^
      455 |         expect(
      456 |           recommendations.find((r) => r.type === "performance")
      457 |         ).toHaveProperty("action");

      at Object.toHaveProperty (tests/integration/utils/performanceMonitor.test.js:454:11)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Benchmarking ‚Ä∫ should benchmark database operations

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 611.3400402838089

      497 |       const metrics = await getMetrics("db_benchmark", "1h", "database");
      498 |       expect(metrics.length).toBeGreaterThan(0);
    > 499 |       expect(metrics[0].value).toBe(duration);
          |                                ^
      500 |     });
      501 |
      502 |     test("should benchmark API response times", async () => {

      at Object.toBe (tests/integration/utils/performanceMonitor.test.js:499:32)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Benchmarking ‚Ä∫ should benchmark API response times

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      528 |       // Verify all metrics were recorded
      529 |       const metrics = await getMetrics("api_benchmark", "1h", "api");
    > 530 |       expect(metrics.length).toBe(operations.length);
          |                              ^
      531 |     });
      532 |
      533 |     test("should compare performance across time periods", async () => {

      at Object.toBe (tests/integration/utils/performanceMonitor.test.js:530:30)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Performance Benchmarking ‚Ä∫ should compare performance across time periods

    expect(received).toBeGreaterThan(expected)

    Expected: > 635.0411378850536
    Received:   0

      564 |         currentMetrics.length;
      565 |
    > 566 |       expect(previousAvg).toBeGreaterThan(currentAvg); // Performance improved
          |                           ^
      567 |       expect(previousAvg).toBe(105); // (100 + 110) / 2
      568 |       expect(currentAvg).toBe(92.5); // (90 + 95) / 2
      569 |     });

      at Object.toBeGreaterThan (tests/integration/utils/performanceMonitor.test.js:566:27)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle very large metric values

    expect(received).toBe(expected) // Object.is equality

    Expected: 9007199254740990
    Received: 402.5421558603467

      600 |       const metrics = await getMetrics("large_value_test", "1h", "test");
      601 |       expect(metrics.length).toBeGreaterThan(0);
    > 602 |       expect(metrics[0].value).toBe(largeValue);
          |                                ^
      603 |     });
      604 |
      605 |     test("should handle concurrent metric recording", async () => {

      at Object.toBe (tests/integration/utils/performanceMonitor.test.js:602:32)

  ‚óè Performance Monitor Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle concurrent metric recording

    expect(received).toBe(expected) // Object.is equality

    Expected: 10
    Received: 2

      614 |
      615 |       const metrics = await getMetrics("concurrent_test", "1h", "test");
    > 616 |       expect(metrics.length).toBe(10);
          |                              ^
      617 |
      618 |       // Verify all values were recorded correctly
      619 |       const values = metrics.map((m) => m.value).sort((a, b) => a - b);

      at Object.toBe (tests/integration/utils/performanceMonitor.test.js:616:30)

FAIL tests/integration/utils/newsAnalyzer.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè News Analyzer Integration Tests ‚Ä∫ News Data Processing ‚Ä∫ should analyze news sentiment

    expect(received).toBeDefined()

    Received: undefined

      34 |       expect(sentiment).toBeDefined();
      35 |       expect(sentiment.score).toBeDefined();
    > 36 |       expect(sentiment.magnitude).toBeDefined();
         |                                   ^
      37 |       expect(sentiment.label).toBeDefined();
      38 |
      39 |       expect(typeof sentiment.score).toBe("number");

      at Object.toBeDefined (tests/integration/utils/newsAnalyzer.test.js:36:35)

  ‚óè News Analyzer Integration Tests ‚Ä∫ News Data Processing ‚Ä∫ should extract key topics from news

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      54 |
      55 |       expect(Array.isArray(topics)).toBe(true);
    > 56 |       expect(topics.length).toBeGreaterThan(0);
         |                             ^
      57 |
      58 |       topics.forEach((topic) => {
      59 |         expect(topic.keyword).toBeDefined();

      at Object.toBeGreaterThan (tests/integration/utils/newsAnalyzer.test.js:56:29)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Real-time News Processing ‚Ä∫ should process news feed

    TypeError: newsAnalyzer.processNewsFeed is not a function

      83 |       ];
      84 |
    > 85 |       const processedFeed = await newsAnalyzer.processNewsFeed(newsFeed);
         |                                                ^
      86 |
      87 |       expect(Array.isArray(processedFeed)).toBe(true);
      88 |       expect(processedFeed.length).toBe(newsFeed.length);

      at Object.processNewsFeed (tests/integration/utils/newsAnalyzer.test.js:85:48)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Real-time News Processing ‚Ä∫ should handle high-volume news processing

    TypeError: newsAnalyzer.processBulkNews is not a function

      103 |
      104 |       const startTime = Date.now();
    > 105 |       const processed = await newsAnalyzer.processBulkNews(largeNewsFeed);
          |                                            ^
      106 |       const duration = Date.now() - startTime;
      107 |
      108 |       expect(processed.length).toBe(100);

      at Object.processBulkNews (tests/integration/utils/newsAnalyzer.test.js:105:44)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Symbol-Specific Analysis ‚Ä∫ should analyze news for specific symbols

    TypeError: newsAnalyzer.getSymbolNews is not a function

      119 |     test("should analyze news for specific symbols", async () => {
      120 |       const symbol = "AAPL";
    > 121 |       const symbolNews = await newsAnalyzer.getSymbolNews(symbol, {
          |                                             ^
      122 |         limit: 10,
      123 |       });
      124 |

      at Object.getSymbolNews (tests/integration/utils/newsAnalyzer.test.js:121:45)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Symbol-Specific Analysis ‚Ä∫ should calculate symbol sentiment score

    TypeError: newsAnalyzer.getSymbolSentimentScore is not a function

      133 |     test("should calculate symbol sentiment score", async () => {
      134 |       const symbol = "AAPL";
    > 135 |       const sentimentScore = await newsAnalyzer.getSymbolSentimentScore(symbol);
          |                                                 ^
      136 |
      137 |       expect(sentimentScore).toBeDefined();
      138 |       expect(sentimentScore.composite).toBeDefined();

      at Object.getSymbolSentimentScore (tests/integration/utils/newsAnalyzer.test.js:135:49)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Trend Analysis ‚Ä∫ should identify trending topics

    TypeError: newsAnalyzer.getTrendingTopics is not a function

      149 |   describe("Trend Analysis", () => {
      150 |     test("should identify trending topics", async () => {
    > 151 |       const trendingTopics = await newsAnalyzer.getTrendingTopics({
          |                                                 ^
      152 |         period: "24h",
      153 |       });
      154 |

      at Object.getTrendingTopics (tests/integration/utils/newsAnalyzer.test.js:151:49)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Trend Analysis ‚Ä∫ should analyze sentiment trends over time

    TypeError: newsAnalyzer.analyzeSentimentTrends is not a function

      167 |     test("should analyze sentiment trends over time", async () => {
      168 |       const symbol = "AAPL";
    > 169 |       const trendAnalysis = await newsAnalyzer.analyzeSentimentTrends(symbol, {
          |                                                ^
      170 |         period: "7days",
      171 |         granularity: "1hour",
      172 |       });

      at Object.analyzeSentimentTrends (tests/integration/utils/newsAnalyzer.test.js:169:48)

  ‚óè News Analyzer Integration Tests ‚Ä∫ News Source Quality ‚Ä∫ should evaluate news source credibility

    TypeError: newsAnalyzer.evaluateSourceCredibility is not a function

      191 |       for (const source of sources) {
      192 |         const credibility =
    > 193 |           await newsAnalyzer.evaluateSourceCredibility(source);
          |                              ^
      194 |
      195 |         expect(credibility).toBeDefined();
      196 |         expect(credibility.score).toBeDefined();

      at Object.evaluateSourceCredibility (tests/integration/utils/newsAnalyzer.test.js:193:30)

  ‚óè News Analyzer Integration Tests ‚Ä∫ News Source Quality ‚Ä∫ should weight analysis by source quality

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      224 |         await newsAnalyzer.analyzeSentiment(lowQualityArticle);
      225 |
    > 226 |       expect(highQualitySentiment.confidence).toBeGreaterThan(
          |                                               ^
      227 |         lowQualitySentiment.confidence
      228 |       );
      229 |       expect(highQualitySentiment.weight).toBeGreaterThan(

      at Object.toBeGreaterThan (tests/integration/utils/newsAnalyzer.test.js:226:47)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Language Processing ‚Ä∫ should handle multiple languages

    expect(received).toBe(expected) // Object.is equality

    Expected: "en"
    Received: undefined

      252 |
      253 |         expect(analysis).toBeDefined();
    > 254 |         expect(analysis.language).toBe(article.language);
          |                                   ^
      255 |         expect(analysis.sentiment).toBeDefined();
      256 |       }
      257 |     });

      at Object.toBe (tests/integration/utils/newsAnalyzer.test.js:254:35)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Language Processing ‚Ä∫ should detect article language automatically

    TypeError: newsAnalyzer.detectLanguageAndAnalyze is not a function

      264 |       };
      265 |
    > 266 |       const analysis = await newsAnalyzer.detectLanguageAndAnalyze(article);
          |                                           ^
      267 |
      268 |       expect(analysis).toBeDefined();
      269 |       expect(analysis.detectedLanguage).toBe("fr");

      at Object.detectLanguageAndAnalyze (tests/integration/utils/newsAnalyzer.test.js:266:43)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Market Impact Analysis ‚Ä∫ should predict market impact from news

    TypeError: newsAnalyzer.predictMarketImpact is not a function

      282 |       };
      283 |
    > 284 |       const marketImpact = await newsAnalyzer.predictMarketImpact(breakingNews);
          |                                               ^
      285 |
      286 |       expect(marketImpact).toBeDefined();
      287 |       expect(marketImpact.impactScore).toBeDefined();

      at Object.predictMarketImpact (tests/integration/utils/newsAnalyzer.test.js:284:47)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Market Impact Analysis ‚Ä∫ should correlate news with price movements

    TypeError: newsAnalyzer.correlateSentimentWithPrice is not a function

      298 |     test("should correlate news with price movements", async () => {
      299 |       const symbol = "AAPL";
    > 300 |       const correlation = await newsAnalyzer.correlateSentimentWithPrice(
          |                                              ^
      301 |         symbol,
      302 |         {
      303 |           period: "30days",

      at Object.correlateSentimentWithPrice (tests/integration/utils/newsAnalyzer.test.js:300:46)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Alert Integration ‚Ä∫ should trigger news-based alerts

    TypeError: newsAnalyzer.setupNewsAlert is not a function

      326 |       };
      327 |
    > 328 |       const newsAlert = await newsAnalyzer.setupNewsAlert(alertConfig);
          |                                            ^
      329 |
      330 |       expect(newsAlert).toBeDefined();
      331 |       expect(newsAlert.alertId).toBeDefined();

      at Object.setupNewsAlert (tests/integration/utils/newsAnalyzer.test.js:328:44)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Alert Integration ‚Ä∫ should process real-time news alerts

    TypeError: newsAnalyzer.processNewsAlert is not a function

      344 |       };
      345 |
    > 346 |       const alertTriggered = await newsAnalyzer.processNewsAlert(urgentNews);
          |                                                 ^
      347 |
      348 |       expect(alertTriggered).toBeDefined();
      349 |       expect(typeof alertTriggered.triggered).toBe("boolean");

      at Object.processNewsAlert (tests/integration/utils/newsAnalyzer.test.js:346:49)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should process news articles efficiently

    TypeError: newsAnalyzer.processBulkNews is not a function

      364 |
      365 |       const startTime = Date.now();
    > 366 |       const results = await newsAnalyzer.processBulkNews(testArticles);
          |                                          ^
      367 |       const duration = Date.now() - startTime;
      368 |
      369 |       expect(results.length).toBe(50);

      at Object.processBulkNews (tests/integration/utils/newsAnalyzer.test.js:366:42)

  ‚óè News Analyzer Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should handle memory efficiently with large datasets

    TypeError: newsAnalyzer.processBulkNews is not a function

      387 |       }));
      388 |
    > 389 |       await newsAnalyzer.processBulkNews(largeDataset);
          |                          ^
      390 |
      391 |       const finalMemory = process.memoryUsage().heapUsed;
      392 |       const memoryIncrease = finalMemory - initialMemory;

      at Object.processBulkNews (tests/integration/utils/newsAnalyzer.test.js:389:26)

FAIL tests/integration/utils/sentimentEngine.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      {"timestamp":"2025-09-26T01:28:01.328Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Sentiment analysis failed:","correlationId":"b322ea4a","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:01.330Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Sentiment analysis failed:","correlationId":"60ef2743","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:01.330Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Sentiment analysis failed:","correlationId":"7a19cb6c","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:01.330Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Sentiment analysis failed:","correlationId":"051f0404","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sentiment Engine Integration Tests ‚Ä∫ Score to Label Conversion ‚Ä∫ should handle invalid scores gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "neutral"
    Received: "positive"

      141 |       invalidScores.forEach((score) => {
      142 |         const label = sentimentEngine.scoreToLabel(score);
    > 143 |         expect(label).toBe("neutral");
          |                       ^
      144 |       });
      145 |     });
      146 |

      at toBe (tests/integration/utils/sentimentEngine.test.js:143:23)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/utils/sentimentEngine.test.js:141:21)

FAIL tests/integration/utils/alertSystem.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Processing and Database Integration ‚Ä∫ should create and store alerts in database

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Processing and Database Integration ‚Ä∫ should handle multiple alert types

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Processing and Database Integration ‚Ä∫ should process provider performance alerts

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Processing and Database Integration ‚Ä∫ should handle cost monitoring alerts

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Subscription and Filtering ‚Ä∫ should manage alert subscriptions

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Subscription and Filtering ‚Ä∫ should handle multiple subscriptions

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Deduplication and Rate Limiting ‚Ä∫ should deduplicate similar alerts

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Deduplication and Rate Limiting ‚Ä∫ should respect rate limiting

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Metrics and Analytics ‚Ä∫ should calculate alert statistics

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Alert Metrics and Analytics ‚Ä∫ should track alert trends

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Error Handling and Recovery ‚Ä∫ should handle invalid alert data gracefully

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Error Handling and Recovery ‚Ä∫ should recover from subscription callback errors

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Error Handling and Recovery ‚Ä∫ should handle database connectivity issues

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Configuration and Customization ‚Ä∫ should allow threshold customization

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Configuration and Customization ‚Ä∫ should support custom alert processors

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should handle high volume of alerts efficiently

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Performance and Scalability ‚Ä∫ should maintain memory usage under control

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)

  ‚óè Alert System Integration Tests ‚Ä∫ Integration with Real-Time Services ‚Ä∫ should integrate with live data monitoring

    TypeError: alertSystem.clearHistory is not a function

      26 |   beforeEach(() => {
      27 |     // Reset alert system for each test
    > 28 |     alertSystem.clearHistory();
         |                 ^
      29 |     alertSystem.clearSubscriptions();
      30 |   });
      31 |

      at Object.clearHistory (tests/integration/utils/alertSystem.test.js:28:17)


  ‚óè Test suite failed to run

    TypeError: alertSystem.stop is not a function

      19 |   afterAll(async () => {
      20 |     if (alertSystem) {
    > 21 |       alertSystem.stop();
         |                   ^
      22 |     }
      23 |     await closeDatabase();
      24 |   });

      at Object.stop (tests/integration/utils/alertSystem.test.js:21:19)

FAIL tests/integration/errors/rate-limiting.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Rate Limiting Integration ‚Ä∫ Basic Rate Limiting Scenarios ‚Ä∫ should handle rapid requests without blocking normal usage

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Basic Rate Limiting Scenarios ‚Ä∫ should return 429 for excessive rapid requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Per-Endpoint Rate Limiting ‚Ä∫ should apply different rate limits to different endpoint types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Per-Endpoint Rate Limiting ‚Ä∫ should handle authenticated vs unauthenticated rate limits

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limit Response Format ‚Ä∫ should return proper 429 error response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limit Response Format ‚Ä∫ should include helpful rate limit information in responses

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limit Recovery ‚Ä∫ should allow requests after rate limit reset period

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limit Recovery ‚Ä∫ should handle gradual recovery from rate limiting

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limiting Security ‚Ä∫ should not expose internal rate limiting configuration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limiting Security ‚Ä∫ should handle distributed rate limiting consistently

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limiting Integration with Error Handling ‚Ä∫ should maintain rate limiting during other error scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Rate Limiting Integration ‚Ä∫ Rate Limiting Integration with Error Handling ‚Ä∫ should handle rate limiting with authentication errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/services/aiStrategyGeneratorStreaming.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Constructor and Initialization ‚Ä∫ should extend AIStrategyGenerator

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Constructor and Initialization ‚Ä∫ should initialize with empty active streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateStreamId ‚Ä∫ should generate unique stream IDs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should generate strategy with streaming progress

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should handle concurrent stream limit

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should handle streaming without progress callback

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should handle empty symbols in streaming

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should clean up stream after completion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should handle streaming errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ generateWithStreaming ‚Ä∫ should handle stream timeout

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ processStreamingChunk ‚Ä∫ should process chunks and call progress callback

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ processStreamingChunk ‚Ä∫ should handle null progress callback

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ processStreamingChunk ‚Ä∫ should handle empty chunks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ processStreamingChunk ‚Ä∫ should handle very large chunks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ simulateStreamingResponse ‚Ä∫ should simulate streaming for template fallback

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ simulateStreamingResponse ‚Ä∫ should handle strategy without all fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ simulateStreamingResponse ‚Ä∫ should simulate with appropriate delays

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ stopStream ‚Ä∫ should stop active stream

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ stopStream ‚Ä∫ should handle stopping non-existent stream

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ stopStream ‚Ä∫ should handle null stream ID

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ stopAllStreams ‚Ä∫ should stop all active streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ stopAllStreams ‚Ä∫ should handle when no streams are active

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ getActiveStreams ‚Ä∫ should return active stream information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ getActiveStreams ‚Ä∫ should return empty array when no streams are active

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ getActiveStreams ‚Ä∫ should calculate stream durations correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ getStreamingMetrics ‚Ä∫ should return streaming metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ getStreamingMetrics ‚Ä∫ should handle zero active streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ calculateAverageStreamDuration ‚Ä∫ should calculate average duration correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ calculateAverageStreamDuration ‚Ä∫ should return 0 when no streams are active

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ calculateAverageStreamDuration ‚Ä∫ should handle single stream

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Stream Configuration ‚Ä∫ should allow updating streaming configuration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Stream Configuration ‚Ä∫ should respect chunk size configuration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle concurrent stream generation attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle progress callback errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle very rapid stream start/stop cycles

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle invalid stream data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle memory pressure with many streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should clean up properly on errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Integration with Base Class ‚Ä∫ should inherit all base class functionality

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Integration with Base Class ‚Ä∫ should use base class template generation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AIStrategyGeneratorStreaming Service ‚Ä∫ Integration with Base Class ‚Ä∫ should maintain correlation ID from base class

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/performance/connection-pool-stress.performance.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should handle requests up to pool limit

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should handle requests up to pool limit

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should handle pool exhaustion gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should handle pool exhaustion gracefully

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should queue requests when pool is full

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Pool Limit Testing ‚Ä∫ should queue requests when pool is full

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Connection Recovery and Resilience ‚Ä∫ should recover from connection failures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Connection Recovery and Resilience ‚Ä∫ should recover from connection failures

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Connection Recovery and Resilience ‚Ä∫ should handle idle connection cleanup

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Connection Recovery and Resilience ‚Ä∫ should handle idle connection cleanup

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Transaction Stress Testing ‚Ä∫ should handle many concurrent transactions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Transaction Stress Testing ‚Ä∫ should handle many concurrent transactions

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Transaction Stress Testing ‚Ä∫ should maintain transaction isolation under stress

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Transaction Stress Testing ‚Ä∫ should maintain transaction isolation under stress

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Resource Management and Monitoring ‚Ä∫ should provide pool status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Resource Management and Monitoring ‚Ä∫ should provide pool status information

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Resource Management and Monitoring ‚Ä∫ should handle pool shutdown gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Connection Pool Stress Integration ‚Ä∫ Resource Management and Monitoring ‚Ä∫ should handle pool shutdown gracefully

    error: sorry, too many clients already

      36 |
      37 |     // Create test table needed for transaction stress tests
    > 38 |     const client = await testPool.connect();
         |                    ^
      39 |     try {
      40 |       await client.query(`
      41 |         CREATE TABLE IF NOT EXISTS test_transaction_stress (

      at node_modules/pg-pool/index.js:45:11
      at Object.<anonymous> (tests/performance/connection-pool-stress.performance.test.js:38:20)

FAIL tests/integration/services/aiStrategyGeneratorStreaming.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Core Streaming Functionality ‚Ä∫ should generate strategy with streaming progress updates

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Core Streaming Functionality ‚Ä∫ should handle streaming without progress callback

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Core Streaming Functionality ‚Ä∫ should generate unique stream IDs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Stream Management ‚Ä∫ should track active streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Stream Management ‚Ä∫ should enforce maximum concurrent streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Stream Management ‚Ä∫ should get stream status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Stream Management ‚Ä∫ should cancel streams

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Progress Analysis ‚Ä∫ should analyze streaming progress correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Progress Analysis ‚Ä∫ should determine generation stages correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Progress Analysis ‚Ä∫ should estimate time remaining correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Error Handling ‚Ä∫ should handle streaming errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Error Handling ‚Ä∫ should clean up streams on error

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Configuration and Metrics ‚Ä∫ should provide streaming metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Configuration and Metrics ‚Ä∫ should calculate average stream duration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Configuration and Metrics ‚Ä∫ should have correct streaming configuration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Integration with Base Class ‚Ä∫ should inherit from AIStrategyGenerator

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè AI Strategy Generator Streaming Integration Tests ‚Ä∫ Integration with Base Class ‚Ä∫ should use inherited methods for strategy parsing

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/backtest/strategies HTTP/1.1" 200 23573 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/portfolio/complex-analysis HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/detailed-analysis HTTP/1.1" 404 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/backtest/results HTTP/1.1" 200 28036 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 544 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 449 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 378 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 368 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 164 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 1086 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "POST /api/backtest/run HTTP/1.1" 400 64 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 447 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 544 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:02 +0000] "GET /api/market/overview HTTP/1.1" 200 569 "-" "-"
FAIL tests/integration/errors/timeout-handling.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üìä Backtest results requested - ID: all, limit: 50

      at log (routes/backtest.js:821:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 5ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT naaim_number_mean as average,\n' +
          '          bullish as bullish_8100,\n' +
          '          bearish,\n' +
          '...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:557:27

    console.error
      NAAIM query failed: sorry, too many clients already

      575 |       }
      576 |     } catch (e) {
    > 577 |       console.error("NAAIM query failed:", e.message);
          |               ^
      578 |     }
      579 |
      580 |     // Query 3: AAII sentiment from loadaaiidata.py table

      at error (routes/market.js:577:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT naaim_number_mean as average,\n' +
          '          bullish as bullish_8100,\n' +
          '          bearish,\n' +
          '...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:557:27

    console.error
      NAAIM query failed: sorry, too many clients already

      575 |       }
      576 |     } catch (e) {
    > 577 |       console.error("NAAIM query failed:", e.message);
          |               ^
      578 |     }
      579 |
      580 |     // Query 3: AAII sentiment from loadaaiidata.py table

      at error (routes/market.js:577:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT naaim_number_mean as average,\n' +
          '          bullish as bullish_8100,\n' +
          '          bearish,\n' +
          '...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:557:27

    console.error
      NAAIM query failed: sorry, too many clients already

      575 |       }
      576 |     } catch (e) {
    > 577 |       console.error("NAAIM query failed:", e.message);
          |               ^
      578 |     }
      579 |
      580 |     // Query 3: AAII sentiment from loadaaiidata.py table

      at error (routes/market.js:577:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT bullish, neutral, bearish, date\n' +
          '        FROM aaii_sentiment\n' +
          '        ORDER BY date DE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:582:26

    console.error
      AAII query failed: sorry, too many clients already

      596 |       }
      597 |     } catch (e) {
    > 598 |       console.error("AAII query failed:", e.message);
          |               ^
      599 |     }
      600 |
      601 |     // Query 4: Market indices from market_data table (loadmarket.py)

      at error (routes/market.js:598:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT bullish, neutral, bearish, date\n' +
          '        FROM aaii_sentiment\n' +
          '        ORDER BY date DE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:582:26

    console.error
      AAII query failed: sorry, too many clients already

      596 |       }
      597 |     } catch (e) {
    > 598 |       console.error("AAII query failed:", e.message);
          |               ^
      599 |     }
      600 |
      601 |     // Query 4: Market indices from market_data table (loadmarket.py)

      at error (routes/market.js:598:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT bullish, neutral, bearish, date\n' +
          '        FROM aaii_sentiment\n' +
          '        ORDER BY date DE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:582:26

    console.error
      AAII query failed: sorry, too many clients already

      596 |       }
      597 |     } catch (e) {
    > 598 |       console.error("AAII query failed:", e.message);
          |               ^
      599 |     }
      600 |
      601 |     // Query 4: Market indices from market_data table (loadmarket.py)

      at error (routes/market.js:598:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          md.ticker as symbol,\n' +
          '          md.ticker as name,\n' +
          '          md.current_pri...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:603:29

    console.error
      Indices query failed: sorry, too many clients already

      630 |       }));
      631 |     } catch (e) {
    > 632 |       console.error("Indices query failed:", e.message);
          |               ^
      633 |       return res.status(500).json({
      634 |         success: false,
      635 |         error: "Failed to fetch market indices",

      at error (routes/market.js:632:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          md.ticker as symbol,\n' +
          '          md.ticker as name,\n' +
          '          md.current_pri...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:603:29

    console.error
      Indices query failed: sorry, too many clients already

      630 |       }));
      631 |     } catch (e) {
    > 632 |       console.error("Indices query failed:", e.message);
          |               ^
      633 |       return res.status(500).json({
      634 |         success: false,
      635 |         error: "Failed to fetch market indices",

      at error (routes/market.js:632:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.log
      Market overview completed in 36ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          md.ticker as symbol,\n' +
          '          md.ticker as name,\n' +
          '          md.current_pri...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:603:29

    console.error
      Indices query failed: sorry, too many clients already

      630 |       }));
      631 |     } catch (e) {
    > 632 |       console.error("Indices query failed:", e.message);
          |               ^
      633 |       return res.status(500).json({
      634 |         success: false,
      635 |         error: "Failed to fetch market indices",

      at error (routes/market.js:632:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.log
      Market overview completed in 33ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 32ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          SUM(CASE WHEN market_cap >= 10000000000 THEN market_cap ELSE 0 END) as lar...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:674:31

    console.error
      Market cap query failed: sorry, too many clients already

      692 |       }
      693 |     } catch (e) {
    > 694 |       console.error("Market cap query failed:", e.message);
          |               ^
      695 |     }
      696 |
      697 |     // Query 7: Economic indicators from loadecondata.py table

      at error (routes/market.js:694:15)

    console.log
      Market overview completed in 42ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 38ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          SUM(CASE WHEN market_cap >= 10000000000 THEN market_cap ELSE 0 END) as lar...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:674:31

    console.error
      Market cap query failed: sorry, too many clients already

      692 |       }
      693 |     } catch (e) {
    > 694 |       console.error("Market cap query failed:", e.message);
          |               ^
      695 |     }
      696 |
      697 |     // Query 7: Economic indicators from loadecondata.py table

      at error (routes/market.js:694:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          SUM(CASE WHEN market_cap >= 10000000000 THEN market_cap ELSE 0 END) as lar...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:674:31

    console.error
      Market cap query failed: sorry, too many clients already

      692 |       }
      693 |     } catch (e) {
    > 694 |       console.error("Market cap query failed:", e.message);
          |               ^
      695 |     }
      696 |
      697 |     // Query 7: Economic indicators from loadecondata.py table

      at error (routes/market.js:694:15)

    console.log
      Market overview completed in 39ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          "        SELECT series_id as name, value, 'Index' as unit, date as timestamp\n" +
          '        FROM economic_d...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:699:30

    console.error
      Economic query failed: sorry, too many clients already

      711 |       }));
      712 |     } catch (e) {
    > 713 |       console.error("Economic query failed:", e.message);
          |               ^
      714 |     }
      715 |
      716 |     const totalTime = Date.now() - startTime;

      at error (routes/market.js:713:15)

    console.log
      Market overview completed in 51ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 8ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT index_value as value,\n' +
          '          CASE\n' +
          "            WHEN index_value >= 75 THEN 'Extrem...",
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:528:31

    console.error
      Fear & Greed query failed: sorry, too many clients already

      550 |       }
      551 |     } catch (e) {
    > 552 |       console.error("Fear & Greed query failed:", e.message);
          |               ^
      553 |     }
      554 |
      555 |     // Query 2: NAAIM data from loadnaaim.py table

      at error (routes/market.js:552:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT bullish, neutral, bearish, date\n' +
          '        FROM aaii_sentiment\n' +
          '        ORDER BY date DE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:582:26

    console.error
      AAII query failed: sorry, too many clients already

      596 |       }
      597 |     } catch (e) {
    > 598 |       console.error("AAII query failed:", e.message);
          |               ^
      599 |     }
      600 |
      601 |     // Query 4: Market indices from market_data table (loadmarket.py)

      at error (routes/market.js:598:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT naaim_number_mean as average,\n' +
          '          bullish as bullish_8100,\n' +
          '          bearish,\n' +
          '...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:557:27

    console.error
      NAAIM query failed: sorry, too many clients already

      575 |       }
      576 |     } catch (e) {
    > 577 |       console.error("NAAIM query failed:", e.message);
          |               ^
      578 |     }
      579 |
      580 |     // Query 3: AAII sentiment from loadaaiidata.py table

      at error (routes/market.js:577:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          md.ticker as symbol,\n' +
          '          md.ticker as name,\n' +
          '          md.current_pri...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:603:29

    console.error
      Indices query failed: sorry, too many clients already

      630 |       }));
      631 |     } catch (e) {
    > 632 |       console.error("Indices query failed:", e.message);
          |               ^
      633 |       return res.status(500).json({
      634 |         success: false,
      635 |         error: "Failed to fetch market indices",

      at error (routes/market.js:632:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          COUNT(*) as total_stocks,\n' +
          '          COUNT(CASE WHEN (close - open) > 0 THE...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:643:29

    console.error
      Market breadth query failed: sorry, too many clients already

      667 |       }
      668 |     } catch (e) {
    > 669 |       console.error("Market breadth query failed:", e.message);
          |               ^
      670 |     }
      671 |
      672 |     // Query 6: Market cap from market_data table (loadmarket.py)

      at error (routes/market.js:669:15)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          md.ticker as symbol,\n' +
          '          md.ticker as name,\n' +
          '          md.current_pri...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:603:29

    console.error
      Indices query failed: sorry, too many clients already

      630 |       }));
      631 |     } catch (e) {
    > 632 |       console.error("Indices query failed:", e.message);
          |               ^
      633 |       return res.status(500).json({
      634 |         success: false,
      635 |         error: "Failed to fetch market indices",

      at error (routes/market.js:632:15)

    console.log
      Market overview completed in 25ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          "        SELECT series_id as name, value, 'Index' as unit, date as timestamp\n" +
          '        FROM economic_d...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:699:30

    console.error
      Economic query failed: sorry, too many clients already

      711 |       }));
      712 |     } catch (e) {
    > 713 |       console.error("Economic query failed:", e.message);
          |               ^
      714 |     }
      715 |
      716 |     const totalTime = Date.now() - startTime;

      at error (routes/market.js:713:15)

    console.log
      Market overview completed in 21ms using real loader tables

      at log (routes/market.js:717:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          "        SELECT series_id as name, value, 'Index' as unit, date as timestamp\n" +
          '        FROM economic_d...',
        params: 'no parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/market.js:699:30

    console.error
      Economic query failed: sorry, too many clients already

      711 |       }));
      712 |     } catch (e) {
    > 713 |       console.error("Economic query failed:", e.message);
          |               ^
      714 |     }
      715 |
      716 |     const totalTime = Date.now() - startTime;

      at error (routes/market.js:713:15)

    console.log
      Market overview completed in 24ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 2ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Timeout Handling Integration ‚Ä∫ Database Query Timeout Scenarios ‚Ä∫ should handle connection pool timeout scenarios

    expect(received).toBe(expected) // Object.is equality

    Expected: 25
    Received: 15

      210 |           timeoutRequests.length +
      211 |           errorRequests.length
    > 212 |       ).toBe(concurrentConnections);
          |         ^
      213 |
      214 |       // Should have some successful requests
      215 |       expect(successfulRequests.length).toBeGreaterThan(0);

      at Object.toBe (tests/integration/errors/timeout-handling.integration.test.js:212:9)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/health HTTP/1.1" 200 499 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/health HTTP/1.1" 200 499 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 350 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:04 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
FAIL tests/integration/streaming/streaming-data.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Streaming Data Integration ‚Ä∫ Real-Time Market Data Streaming ‚Ä∫ should handle market data requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Real-Time Market Data Streaming ‚Ä∫ should handle streaming data subscriptions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Real-Time Market Data Streaming ‚Ä∫ should handle real-time quote data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Portfolio Streaming Updates ‚Ä∫ should handle portfolio value streaming

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Portfolio Streaming Updates ‚Ä∫ should handle position streaming updates

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Data Consistency ‚Ä∫ should maintain data consistency across multiple requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Data Consistency ‚Ä∫ should handle concurrent streaming requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Error Handling ‚Ä∫ should handle invalid symbols gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Error Handling ‚Ä∫ should handle streaming service failures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Error Handling ‚Ä∫ should handle network timeout scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Performance ‚Ä∫ should deliver streaming data within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Performance ‚Ä∫ should handle high-frequency data requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Data Formats ‚Ä∫ should return consistent data formats

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Streaming Data Formats ‚Ä∫ should handle different data type requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Authentication with Streaming Data ‚Ä∫ should handle authentication for protected streaming endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Streaming Data Integration ‚Ä∫ Authentication with Streaming Data ‚Ä∫ should maintain streaming sessions with valid authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

PASS tests/performance/concurrent-transaction.performance.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/backtest/results HTTP/1.1" 200 28036 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 381 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "POST /api/portfolio/analyze HTTP/1.1" 413 124 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings-metrics HTTP/1.1" 500 176 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/analysis HTTP/1.1" 404 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/portfolio HTTP/1.1" 200 577 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 500 141 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/portfolio/analysis HTTP/1.1" 200 1277 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/detailed-analysis HTTP/1.1" 404 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:07 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:08 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
PASS tests/integration/errors/5xx-server-errors.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üìä Backtest results requested - ID: all, limit: 50

      at log (routes/backtest.js:821:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.error
      Database query error: {
        error: 'column "date" does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        symbol,\n' +
          '        symbol as company_name,\n' +
          '        quarter as report_date,\n' +
          '      ...',
        params: '2 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 0)
      at routes/calendar.js:792:57

    console.error
      Error fetching earnings metrics: error: column "date" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at async Promise.all (index 0)
          at /home/stocks/algo/webapp/lambda/routes/calendar.js:792:57 {
        length: 105,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '880',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      836 |     });
      837 |   } catch (error) {
    > 838 |     console.error("Error fetching earnings metrics:", error);
          |             ^
      839 |     res.status(500).json({
      840 |       success: false,
      841 |       error: "Failed to fetch earnings metrics",

      at error (routes/calendar.js:838:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 5ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.log
      üìÖ Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        SELECT\n' +
          '          eh.symbol,\n' +
          '          eh.quarter as report_date,\n' +
          '          eh.eps_actual,\n' +
          ' ...',
        params: '2 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/calendar.js:133:16

    console.error
      Calendar earnings query failed: sorry, too many clients already

      133 |       result = await Promise.race([queryPromise, timeoutPromise]);
      134 |     } catch (error) {
    > 135 |       console.error("Calendar earnings query failed:", error.message);
          |               ^
      136 |       return res.status(500).json({
      137 |         success: false,
      138 |         error: "Earnings calendar query failed",

      at error (routes/calendar.js:135:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio analysis requested for user: dev-user-bypass, period: 1y

      at log (routes/portfolio.js:618:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 69ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 70ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 67ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 72ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 71ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 68ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 71ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 69ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 71ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 63ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 56ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 59ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 59ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 56ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 63ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 67ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 62ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 65ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 65ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 63ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 58ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 58ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 57ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 65ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 58ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 61ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 59ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 60ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Market overview completed in 64ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio summary requested for user: dev-user-bypass

      at log (routes/portfolio.js:191:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio performance endpoint called for user: dev-user-bypass, timeframe: 1y

      at log (routes/portfolio.js:1196:13)

    console.log
      üìä Retrieved 0 performance data points

      at log (routes/portfolio.js:1224:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      Market overview endpoint called - REAL LOADER TABLES

      at log (routes/market.js:516:11)

    console.log
      Market overview completed in 3ms using real loader tables

      at log (routes/market.js:717:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìã Portfolio positions requested for user: dev-user-bypass

      at log (routes/portfolio.js:298:13)

    console.log
      Calendar events endpoint called with params: {}

      at log (routes/calendar.js:372:13)

    console.log
      üìä Backtest results requested - ID: all, limit: 50

      at log (routes/backtest.js:821:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "POST /api/portfolio/analyze HTTP/1.1" 200 355 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/summary HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/performance HTTP/1.1" 200 451 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/market/overview HTTP/1.1" 200 664 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/complex-analysis HTTP/1.1" 404 136 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/calendar/complex-metrics HTTP/1.1" 404 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/market/heavy-computation HTTP/1.1" 404 134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/portfolio/positions HTTP/1.1" 200 710 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/calendar/events HTTP/1.1" 200 223 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:09 +0000] "GET /api/backtest/results HTTP/1.1" 200 28036 "-" "-"
FAIL tests/integration/utils/database-connection.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: 'SELECT $1 as query_number, NOW() as timestamp',
        params: '1 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
          at async Promise.all (index 2)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:56:23)

    console.error
      Database query error: {
        error: 'syntax error at or near "INVALID"',
        query: 'INVALID SQL SYNTAX HERE',
        params: 'no parameters',
        code: '42601'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:208:7)

    console.warn
      ‚è±Ô∏è Slow query (1115ms): {
        query: '\n        SELECT pg_sleep(0.1), generate_series(1, 10) as num\n      ',
        rows: 10,
        duration: '1115ms'
      }

      1318 |       });
      1319 |     } else if (duration > 1000) {
    > 1320 |       console.warn(`‚è±Ô∏è Slow query (${duration}ms):`, {
           |               ^
      1321 |         query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1322 |         rows: result.rowCount,
      1323 |         duration: `${duration}ms`,

      at warn (utils/database.js:1320:15)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:217:22)

    console.error
      Database query error: {
        error: 'invalid input syntax for type integer: "not_a_number"',
        query: 'SELECT $1::int as value',
        params: '1 parameters',
        code: '22P02'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:222:7)

    console.error
      Database query error: {
        error: 'duplicate key value violates unique constraint "company_profile_pkey"',
        query: '\n' +
          '          INSERT INTO company_profile (ticker, short_name, sector)\n' +
          "          VALUES ('DUPTEST', 'Di...",
        params: 'no parameters',
        code: '23505'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:236:9)

    console.error
      Database query error: {
        error: 'sorry, too many clients already',
        query: '\n' +
          '        INSERT INTO stock_symbols (symbol, name, market_category)\n' +
          "        VALUES ($1, 'Integrity Te...",
        params: '1 parameters',
        code: '53300'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:330:7)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Database Comprehensive Integration Tests ‚Ä∫ Connection Management ‚Ä∫ should handle concurrent connections

    error: sorry, too many clients already

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
          at async Promise.all (index 2)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:56:23)

  ‚óè Database Comprehensive Integration Tests ‚Ä∫ Performance and Load Testing ‚Ä∫ should handle high concurrency scenarios

    error: sorry, too many clients already

      1409 |  */
      1410 | async function transaction(callback) {
    > 1411 |   const client = await getPool().connect();
           |                  ^
      1412 |
      1413 |   try {
      1414 |     await client.query("BEGIN");

      at node_modules/pg-pool/index.js:45:11
      at transaction (utils/database.js:1411:18)
          at async Promise.all (index 1)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:315:23)

  ‚óè Database Comprehensive Integration Tests ‚Ä∫ Data Integrity and Validation ‚Ä∫ should maintain data consistency across operations

    error: sorry, too many clients already

      1303 |     });
      1304 |
    > 1305 |     const result = await Promise.race([
           |                    ^
      1306 |       pool.query(text, params),
      1307 |       timeoutPromise,
      1308 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1305:20)
      at Object.<anonymous> (tests/integration/utils/database-connection.integration.test.js:330:7)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:10 +0000] "GET /api/health?quick=true HTTP/1.1" 200 435 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:10 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:10 +0000] "GET /api/health HTTP/1.1" 200 500 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:11 +0000] "GET /api/health/database HTTP/1.1" 200 14840 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:11 +0000] "GET /api/health/database HTTP/1.1" 200 14840 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:11 +0000] "GET /api/health/test-connection HTTP/1.1" 200 237 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:11 +0000] "GET /api/health/debug-secret HTTP/1.1" 200 392 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:11 +0000] "GET /api/health/database/diagnostics HTTP/1.1" 200 18140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:12 +0000] "GET /api/health/database/diagnostics HTTP/1.1" 200 18140 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:12 +0000] "GET /api/health/database/diagnostics HTTP/1.1" 200 18140 "-" "-"
PASS tests/integration/routes/health.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Starting health check with database...

      at log (routes/health.js:36:13)

    console.log
      Received request for /health/database

      at log (routes/health.js:535:11)

    console.log
      Received request for /health/database

      at log (routes/health.js:535:11)

    console.log
      Received request for /health/database/diagnostics

      at log (routes/health.js:784:11)

    console.log
      Received request for /health/database/diagnostics

      at log (routes/health.js:784:11)

    console.log
      Received request for /health/database/diagnostics

      at log (routes/health.js:784:11)

    console.log
      Received request for /health/database/diagnostics

      at log (routes/health.js:784:11)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:12 +0000] "GET /api/health/database/diagnostics HTTP/1.1" 200 18140 "-" "-"
FAIL tests/integration/routes/etf.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should return ETF holdings data for major ETFs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should include fund information in holdings response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should include sector allocation in holdings response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle invalid ETF symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle limit parameter validation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle invalid limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle missing symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/holdings ‚Ä∫ should handle special characters in ETF symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/performance ‚Ä∫ should return ETF performance data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/performance ‚Ä∫ should include historical performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/performance ‚Ä∫ should handle timeframe parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/performance ‚Ä∫ should compare performance against benchmark

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/analytics ‚Ä∫ should return comprehensive ETF analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/:symbol/analytics ‚Ä∫ should include risk analysis metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should return ETF screener results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle expense ratio filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle asset size filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle category filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle sector filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle dividend yield filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle multiple filters combined

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle sorting options

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/screener ‚Ä∫ should handle pagination parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/compare ‚Ä∫ should compare multiple ETFs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/compare ‚Ä∫ should handle invalid symbol in comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/compare ‚Ä∫ should handle single ETF comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/compare ‚Ä∫ should handle comparison metrics parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/trending ‚Ä∫ should return trending ETFs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/trending ‚Ä∫ should handle timeframe for trending

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/trending ‚Ä∫ should handle category filter for trending

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/flows ‚Ä∫ should return ETF flow data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/flows ‚Ä∫ should handle period parameter for flows

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ GET /api/etf/flows ‚Ä∫ should handle fund type filter for flows

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle concurrent ETF holdings requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle large holdings requests gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should maintain response time consistency

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should validate data structure consistency

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle database connection failures gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle malformed query parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle SQL injection attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle authentication edge cases for protected endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè ETF Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle stress testing with multiple concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/portfolio.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio - should return portfolio API info

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/summary - should return portfolio summary

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/positions - should return portfolio positions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/holdings - should return portfolio holdings

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/value - should return portfolio value data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/allocation - should return portfolio allocation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Core Portfolio APIs ‚Ä∫ GET /api/portfolio/allocations - should return portfolio allocations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Analytics and Analysis APIs ‚Ä∫ GET /api/portfolio/analytics - should return portfolio analytics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Performance and Returns APIs ‚Ä∫ GET /api/portfolio/returns - should return portfolio returns

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Performance and Returns APIs ‚Ä∫ GET /api/portfolio/benchmark - should return benchmark comparison

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk - should return risk assessment

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk-analysis - should return risk analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk/analysis - should return detailed risk analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk/var - should return VaR analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk/stress-test - should return stress test results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Risk Management APIs ‚Ä∫ GET /api/portfolio/risk/concentration - should return concentration risk

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Portfolio Management APIs ‚Ä∫ GET /api/portfolio/rebalance - should return rebalance recommendations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Portfolio Management APIs ‚Ä∫ GET /api/portfolio/optimization - should return optimization suggestions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Portfolio Management APIs ‚Ä∫ GET /api/portfolio/watchlist - should return portfolio watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Portfolio Management APIs ‚Ä∫ GET /api/portfolio/transactions - should return portfolio transactions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Broker Integration APIs ‚Ä∫ GET /api/portfolio/api-keys - should return API keys status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Broker Integration APIs ‚Ä∫ POST /api/portfolio/api-keys - should handle API key creation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Health and System APIs ‚Ä∫ GET /api/portfolio/health - should return portfolio service health

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Error Handling and Authentication ‚Ä∫ should require authentication for protected endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Error Handling and Authentication ‚Ä∫ should handle invalid endpoints gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Error Handling and Authentication ‚Ä∫ should handle invalid user IDs gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Error Handling and Authentication ‚Ä∫ DELETE /api/portfolio/api-keys/test-broker - should handle API key deletion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Portfolio Integration Tests - 100% Coverage ‚Ä∫ Error Handling and Authentication ‚Ä∫ GET /api/portfolio/data - should redirect to holdings endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/technical.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/ping - Basic endpoint ‚Ä∫ should return ping response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/ - Root technical endpoint ‚Ä∫ should return latest technical data for all symbols using daily timeframe

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/ - Root technical endpoint ‚Ä∫ should return 404 when technical_data_daily table doesn't exist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe - Timeframe-based data ‚Ä∫ should return daily technical data with pagination

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe - Timeframe-based data ‚Ä∫ should validate timeframe parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe - Timeframe-based data ‚Ä∫ should handle symbol filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe - Timeframe-based data ‚Ä∫ should handle RSI filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe/summary - Technical summary ‚Ä∫ should return technical summary statistics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/:timeframe/summary - Technical summary ‚Ä∫ should return fallback summary when table doesn't exist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/data/:symbol - Individual symbol data ‚Ä∫ should return latest technical data for specific symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/data/:symbol - Individual symbol data ‚Ä∫ should return 404 for non-existent symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/data/:symbol - Individual symbol data ‚Ä∫ should return fallback data when table missing

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/indicators/:symbol - Technical indicators ‚Ä∫ should return 30-day technical indicators for symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/history/:symbol - Technical history ‚Ä∫ should return technical history with custom days parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/support-resistance/:symbol - Support/Resistance levels ‚Ä∫ should return support and resistance levels

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/support-resistance/:symbol - Support/Resistance levels ‚Ä∫ should validate timeframe for support/resistance

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/daily - Filtered technical data ‚Ä∫ should handle filtered technical data requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/daily - Filtered technical data ‚Ä∫ should handle technical data queries safely

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/patterns/:symbol - Pattern recognition ‚Ä∫ should return technical pattern analysis

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/patterns/:symbol - Pattern recognition ‚Ä∫ should return fallback patterns on database errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ Error handling - Your site's error patterns ‚Ä∫ should handle database errors gracefully with fallback data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ Error handling - Your site's error patterns ‚Ä∫ should return structured error responses for invalid timeframes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ Error handling - Your site's error patterns ‚Ä∫ should handle large limit values safely

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should return chart data with default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should return chart data with custom parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should include proper OHLCV structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should include complete chart metadata

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should include chart data with proper timestamp

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should handle volume inclusion correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart/:symbol - Chart data for symbol ‚Ä∫ should handle table not exists gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart - Query-based chart endpoint ‚Ä∫ should validate timeframe parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart - Query-based chart endpoint ‚Ä∫ should validate period parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Technical Analysis Routes - Testing Your Actual Site ‚Ä∫ GET /technical/chart - Query-based chart endpoint ‚Ä∫ should filter indicators correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/errors/4xx-error-scenarios.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 400 Bad Request Scenarios ‚Ä∫ should return 400 for malformed JSON requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 400 Bad Request Scenarios ‚Ä∫ should return 400 for invalid parameter types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 400 Bad Request Scenarios ‚Ä∫ should return 400 for missing required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 400 Bad Request Scenarios ‚Ä∫ should return 400 for invalid field values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 401 Unauthorized Scenarios ‚Ä∫ should return 401 for missing authorization header

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 401 Unauthorized Scenarios ‚Ä∫ should return 401 for invalid authorization tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 401 Unauthorized Scenarios ‚Ä∫ should return 401 for malformed authorization headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 403 Forbidden Scenarios ‚Ä∫ should return 403 for insufficient permissions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 403 Forbidden Scenarios ‚Ä∫ should return 403 for resource access violations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 404 Not Found Scenarios ‚Ä∫ should return 404 for non-existent endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 404 Not Found Scenarios ‚Ä∫ should return 404 for non-existent resources

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 404 Not Found Scenarios ‚Ä∫ should return 404 for valid endpoint with invalid sub-routes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 405 Method Not Allowed Scenarios ‚Ä∫ should return 405 for unsupported HTTP methods

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 405 Method Not Allowed Scenarios ‚Ä∫ should return 405 for POST on GET-only endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 409 Conflict Scenarios ‚Ä∫ should return 409 for resource conflicts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 415 Unsupported Media Type Scenarios ‚Ä∫ should return 415 for unsupported content types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 422 Unprocessable Entity Scenarios ‚Ä∫ should return 422 for semantically invalid data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ 429 Rate Limiting Scenarios ‚Ä∫ should handle rate limiting if implemented

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ Cross-Route 4xx Error Consistency ‚Ä∫ should maintain consistent 4xx error response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè 4xx Client Error Scenarios Integration ‚Ä∫ Cross-Route 4xx Error Consistency ‚Ä∫ should not expose sensitive information in 4xx errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/backtest.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/ ‚Ä∫ should return backtest info

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/strategies ‚Ä∫ should return strategies list

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ POST /backtest/run ‚Ä∫ should handle backtest run request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/results/:id ‚Ä∫ should return backtest results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/optimize ‚Ä∫ should return optimization results for valid strategy

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/optimize ‚Ä∫ should require strategy_id parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/optimize ‚Ä∫ should handle invalid parameters JSON

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/optimize ‚Ä∫ should support different optimization types and targets

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes Unit Tests ‚Ä∫ GET /backtest/optimize ‚Ä∫ should handle optimization errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/backtest.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest ‚Ä∫ should return user backtest results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest ‚Ä∫ should handle empty results gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ POST /api/backtest ‚Ä∫ should create new backtest

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ POST /api/backtest ‚Ä∫ should create backtest with default values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/:id ‚Ä∫ should return backtest by ID

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/:id ‚Ä∫ should return 404 for non-existent backtest

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ DELETE /api/backtest/:id ‚Ä∫ should delete backtest by ID

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ DELETE /api/backtest/:id ‚Ä∫ should return 404 when deleting non-existent backtest

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/results ‚Ä∫ should return backtest results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/results ‚Ä∫ should filter results by limit

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/results ‚Ä∫ should filter results by backtest ID

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/results ‚Ä∫ should filter results by status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/symbols ‚Ä∫ should return available symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/symbols ‚Ä∫ should support search parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/symbols ‚Ä∫ should support limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/templates ‚Ä∫ should return strategy templates

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/templates ‚Ä∫ should include common strategy templates

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ POST /api/backtest/validate ‚Ä∫ should validate correct strategy code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ POST /api/backtest/validate ‚Ä∫ should detect invalid strategy code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ POST /api/backtest/validate ‚Ä∫ should require strategy code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/optimize ‚Ä∫ should return 501 not implemented or 404 not found

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Strategy Management ‚Ä∫ GET /api/backtest/strategies ‚Ä∫ should return user strategies

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Strategy Management ‚Ä∫ POST /api/backtest/strategies ‚Ä∫ should create new strategy

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Strategy Management ‚Ä∫ POST /api/backtest/strategies ‚Ä∫ should require name and code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Backtest Execution ‚Ä∫ POST /api/backtest/run ‚Ä∫ should require strategy code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Backtest Execution ‚Ä∫ POST /api/backtest/run ‚Ä∫ should require date range

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Backtest Execution ‚Ä∫ POST /api/backtest/run ‚Ä∫ should require symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Backtest Execution ‚Ä∫ POST /api/backtest/run-python ‚Ä∫ should require Python strategy code

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Backtest Execution ‚Ä∫ POST /api/backtest/run-python ‚Ä∫ should handle Python code execution

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Authentication ‚Ä∫ should require authentication for protected endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Error Handling ‚Ä∫ should handle database errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Error Handling ‚Ä∫ should validate input parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/run (Info Endpoint) ‚Ä∫ should return information about backtest run endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ GET /api/backtest/run (Info Endpoint) ‚Ä∫ should provide correct structure for backtest parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Backtest Routes ‚Ä∫ Performance ‚Ä∫ should respond within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/dashboard.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard (Dashboard Root) ‚Ä∫ should return dashboard endpoints and operational status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard (Dashboard Root) ‚Ä∫ should handle high-frequency requests without degradation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/summary (Dashboard Summary) ‚Ä∫ should return comprehensive dashboard summary data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/summary (Dashboard Summary) ‚Ä∫ should validate market overview data structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/summary (Dashboard Summary) ‚Ä∫ should validate sector performance data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/summary (Dashboard Summary) ‚Ä∫ should handle database connectivity issues gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/holdings (Portfolio Holdings) ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/holdings (Portfolio Holdings) ‚Ä∫ should return holdings data with valid authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/holdings (Portfolio Holdings) ‚Ä∫ should validate holdings data structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/holdings (Portfolio Holdings) ‚Ä∫ should handle invalid authentication tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/performance (Portfolio Performance) ‚Ä∫ should require authentication for performance data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/performance (Portfolio Performance) ‚Ä∫ should return performance data with valid authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/performance (Portfolio Performance) ‚Ä∫ should validate performance metrics structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/performance (Portfolio Performance) ‚Ä∫ should validate performance metrics calculations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/alerts (Trading Alerts) ‚Ä∫ should require authentication for alerts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/alerts (Trading Alerts) ‚Ä∫ should return alerts data with authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/alerts (Trading Alerts) ‚Ä∫ should validate alert data structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/alerts (Trading Alerts) ‚Ä∫ should handle alert summary aggregation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/market-data (Market Data) ‚Ä∫ should return comprehensive market data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/market-data (Market Data) ‚Ä∫ should validate economic indicators structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/market-data (Market Data) ‚Ä∫ should validate sector rotation data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/market-data (Market Data) ‚Ä∫ should validate market internals data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/debug (Debug Endpoint) ‚Ä∫ should return debug information about database connectivity

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/debug (Debug Endpoint) ‚Ä∫ should validate table count information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/debug (Debug Endpoint) ‚Ä∫ should validate database connection status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/overview (Market Overview) ‚Ä∫ should return market overview data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/overview (Market Overview) ‚Ä∫ should validate market status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/overview (Market Overview) ‚Ä∫ should validate top movers structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ GET /api/dashboard/overview (Market Overview) ‚Ä∫ should handle empty market data gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle concurrent requests to dashboard endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should maintain response time consistency

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle malformed authentication headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle database connection failures gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should validate numeric data integrity

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle SQL injection attempts safely

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle memory pressure with large data requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should validate response content types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Dashboard Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle authentication edge cases

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/sentiment.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment ‚Ä∫ should return sentiment API information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/health ‚Ä∫ should return health status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/ping ‚Ä∫ should return ping response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should require symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should return sentiment analysis for valid symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should handle different period parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should use default period when not specified

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should handle invalid period parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should convert symbol to uppercase

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should handle special characters in symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should validate sentiment grades

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should validate trend values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/analysis ‚Ä∫ should validate recent articles structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/social ‚Ä∫ should return 501 not implemented

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/social/:symbol ‚Ä∫ should return 501 not implemented

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/social/:symbol ‚Ä∫ should handle different symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/social/:symbol ‚Ä∫ should handle special characters in symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ GET /api/sentiment/trending ‚Ä∫ should return 501 not implemented

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Authentication ‚Ä∫ should not require authentication for public endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Authentication ‚Ä∫ should handle sentiment analysis without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Error Handling ‚Ä∫ should handle database errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Error Handling ‚Ä∫ should handle empty symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Error Handling ‚Ä∫ should handle malformed URLs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Error Handling ‚Ä∫ should handle URL encoded parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Data Validation ‚Ä∫ should return consistent response structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Data Validation ‚Ä∫ should validate sentiment score range

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Data Validation ‚Ä∫ should validate percentage values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Performance ‚Ä∫ should respond within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Performance ‚Ä∫ should handle concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle numeric symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle extremely long symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Sentiment Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle multiple query parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/security/authentication-security.test.js
  ‚óè Console

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject requests without authorization header

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject malformed authorization headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject expired JWT tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject tokens with invalid signatures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject tokens with missing required claims

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should reject tokens with future issued at time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should accept valid JWT tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ JWT Token Validation ‚Ä∫ should validate token algorithm to prevent none algorithm attack

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Session Management Security ‚Ä∫ should prevent session fixation attacks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Session Management Security ‚Ä∫ should handle concurrent requests with same token securely

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Session Management Security ‚Ä∫ should include security headers in responses

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ API Key Security ‚Ä∫ should encrypt API keys before storage

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ API Key Security ‚Ä∫ should validate API key format before processing

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ API Key Security ‚Ä∫ should not expose API keys in error messages

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ API Key Security ‚Ä∫ should use different salts for different users

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Rate Limiting and Abuse Prevention ‚Ä∫ should implement rate limiting for authentication attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Rate Limiting and Abuse Prevention ‚Ä∫ should prevent brute force attacks on protected endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Input Validation Security ‚Ä∫ should prevent header injection attacks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Input Validation Security ‚Ä∫ should sanitize JWT claims properly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Input Validation Security ‚Ä∫ should validate content-type for POST requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ CORS Security ‚Ä∫ should enforce CORS policy for cross-origin requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ CORS Security ‚Ä∫ should allow legitimate origins

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Error Information Disclosure ‚Ä∫ should not expose sensitive information in error responses

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Error Information Disclosure ‚Ä∫ should use generic error messages for security-sensitive operations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Authentication Security Tests ‚Ä∫ Timing Attack Prevention ‚Ä∫ should have consistent response times for invalid tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/middleware/errorHandler.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should handle generic errors with 500 status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should handle generic errors with 500 status

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should log error details

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should log error details

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should handle errors without message

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Generic Error Handling ‚Ä∫ should handle errors without message

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle ValidationError with 400 status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle ValidationError with 400 status

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle custom status errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle custom status errors

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL unique violation (23505)

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL unique violation (23505)

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL foreign key violation (23503)

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL foreign key violation (23503)

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL table missing (42P01)

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Specific Error Type Handling ‚Ä∫ should handle PostgreSQL table missing (42P01)

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Development Environment Behavior ‚Ä∫ should include details in development mode

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Development Environment Behavior ‚Ä∫ should include details in development mode

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Development Environment Behavior ‚Ä∫ should include validation details in development

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Development Environment Behavior ‚Ä∫ should include validation details in development

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Production Environment Behavior ‚Ä∫ should not include details in production mode

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Production Environment Behavior ‚Ä∫ should not include details in production mode

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Production Environment Behavior ‚Ä∫ should not include validation details in production

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Production Environment Behavior ‚Ä∫ should not include validation details in production

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should always include required error fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should always include required error fields

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should set correct Content-Type header

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should set correct Content-Type header

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should maintain consistent error structure across different error types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Response Format Consistency ‚Ä∫ should maintain consistent error structure across different error types

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle null error

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle null error

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle error objects without stack trace

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle error objects without stack trace

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle very long error messages

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle very long error messages

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle special characters in error messages

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ Edge Cases ‚Ä∫ should handle special characters in error messages

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ PostgreSQL Error Code Coverage ‚Ä∫ should handle unknown PostgreSQL error codes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ PostgreSQL Error Code Coverage ‚Ä∫ should handle unknown PostgreSQL error codes

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

  ‚óè Error Handler Middleware ‚Ä∫ PostgreSQL Error Code Coverage ‚Ä∫ should prioritize custom status over default for PostgreSQL errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Error Handler Middleware ‚Ä∫ PostgreSQL Error Code Coverage ‚Ä∫ should prioritize custom status over default for PostgreSQL errors

    TypeError: Cannot read properties of undefined (reading 'mockRestore')

       98 |   afterEach(() => {
       99 |     process.env.NODE_ENV = originalEnv;
    > 100 |     consoleErrorSpy.mockRestore();
          |                     ^
      101 |   });
      102 |
      103 |   describe("Generic Error Handling", () => {

      at Object.mockRestore (tests/unit/middleware/errorHandler.test.js:100:21)

FAIL tests/integration/routes/websocket.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket ‚Ä∫ should return websocket API overview

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket ‚Ä∫ should include expected endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/test ‚Ä∫ should return test endpoint response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/health ‚Ä∫ should return health status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/health ‚Ä∫ should handle dependencies gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/status ‚Ä∫ should return status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/status ‚Ä∫ should handle status errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle missing API credentials

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should validate symbols parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle single symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle multiple symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle invalid symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle mixed valid/invalid symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle symbol case conversion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should handle too many symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/stream/:symbols ‚Ä∫ should validate response structure when successful

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/trades/:symbols ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/trades/:symbols ‚Ä∫ should handle missing API credentials

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/trades/:symbols ‚Ä∫ should handle single symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/trades/:symbols ‚Ä∫ should handle multiple symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/trades/:symbols ‚Ä∫ should validate response structure when successful

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should handle missing API credentials

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should handle timeframe parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should use default timeframe when not specified

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should handle multiple symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/bars/:symbols ‚Ä∫ should handle various timeframes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should validate symbols parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should handle valid subscription

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should handle symbols case conversion

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should handle default dataTypes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ POST /api/websocket/subscribe ‚Ä∫ should handle invalid symbols array types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/subscriptions ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/subscriptions ‚Ä∫ should return user subscriptions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ DELETE /api/websocket/subscribe ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ DELETE /api/websocket/subscribe ‚Ä∫ should handle specific symbol unsubscription

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ DELETE /api/websocket/subscribe ‚Ä∫ should handle full unsubscription

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ DELETE /api/websocket/subscribe ‚Ä∫ should handle empty symbols array

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/connections ‚Ä∫ should require authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/connections ‚Ä∫ should return connection information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/connections ‚Ä∫ should handle details parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ GET /api/websocket/connections ‚Ä∫ should handle details parameter false

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Authentication and Error Handling ‚Ä∫ should handle invalid authentication tokens

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Authentication and Error Handling ‚Ä∫ should handle missing authorization header

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Authentication and Error Handling ‚Ä∫ should handle malformed request bodies

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Performance and Concurrency ‚Ä∫ should respond within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Performance and Concurrency ‚Ä∫ should handle concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Data Validation ‚Ä∫ should validate timestamp formats

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Data Validation ‚Ä∫ should validate numeric types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Data Validation ‚Ä∫ should validate array types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle empty symbol parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle special characters in symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle extremely long symbol names

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè WebSocket Routes ‚Ä∫ Edge Cases ‚Ä∫ should handle numeric symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/auth.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/login ‚Ä∫ should successfully login with valid credentials

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/login ‚Ä∫ should handle missing credentials

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/login ‚Ä∫ should handle authentication challenge

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/login ‚Ä∫ should handle NotAuthorizedException

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/login ‚Ä∫ should handle UserNotConfirmedException

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/register ‚Ä∫ should successfully register new user

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/register ‚Ä∫ should handle missing required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/register ‚Ä∫ should handle UsernameExistsException

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/confirm ‚Ä∫ should confirm user registration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/confirm ‚Ä∫ should handle CodeMismatchException

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/forgot-password ‚Ä∫ should initiate password reset

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ POST /auth/forgot-password ‚Ä∫ should handle missing username

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ GET /auth/me ‚Ä∫ should return user profile

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ GET /auth/health ‚Ä∫ should return auth service health

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ Development Mode JWT Authentication ‚Ä∫ should generate valid JWT tokens in development mode

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ Development Mode JWT Authentication ‚Ä∫ should generate JWT tokens for MFA challenge in development

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ Development Mode JWT Authentication ‚Ä∫ should generate JWT tokens for respond-to-challenge in development

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ Development Mode JWT Authentication ‚Ä∫ should use consistent JWT secret across all endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Auth Routes Unit Tests ‚Ä∫ Error handling ‚Ä∫ should handle generic Cognito errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/risk.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/health ‚Ä∫ should return health status without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk ‚Ä∫ should return risk API information without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should return risk analysis with default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should handle different period parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should handle invalid period gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should handle empty portfolio

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should use authenticated user ID in query

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should handle database query errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ GET /risk/analysis (authenticated) ‚Ä∫ should handle risk engine calculation errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Authentication middleware ‚Ä∫ should protect analysis endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Authentication middleware ‚Ä∫ should allow public health endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Authentication middleware ‚Ä∫ should allow public root endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should handle confidence level parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Parameter validation ‚Ä∫ should handle invalid confidence level

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Risk Routes Unit Tests ‚Ä∫ Response format ‚Ä∫ should return consistent JSON response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/watchlist.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/ ‚Ä∫ should return user watchlists

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/ ‚Ä∫ should handle empty watchlists

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/ ‚Ä∫ should handle database errors

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ POST /api/watchlist/ ‚Ä∫ should create new watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ POST /api/watchlist/ ‚Ä∫ should validate required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/:id ‚Ä∫ should return watchlist details

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ GET /api/watchlist/:id ‚Ä∫ should handle watchlist not found

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ POST /api/watchlist/:id/items ‚Ä∫ should add symbol to watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ POST /api/watchlist/:id/items ‚Ä∫ should validate symbol format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ DELETE /api/watchlist/:id/items/:symbol ‚Ä∫ should remove symbol from watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ DELETE /api/watchlist/:id/items/:symbol ‚Ä∫ should handle symbol not in watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ DELETE /api/watchlist/:id ‚Ä∫ should delete watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ DELETE /api/watchlist/:id ‚Ä∫ should handle watchlist not found

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ Error handling ‚Ä∫ should handle database connection failures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Watchlist Routes ‚Ä∫ Error handling ‚Ä∫ should handle invalid watchlist IDs

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/calendar.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/ ‚Ä∫ should return calendar info

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/earnings ‚Ä∫ should return earnings calendar

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/dividends ‚Ä∫ should return dividend calendar

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should return economic calendar with default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should return economic calendar with custom parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should handle invalid parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should include proper economic event structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should filter by importance correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Calendar Routes Unit Tests ‚Ä∫ GET /calendar/economic ‚Ä∫ should include available filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/metrics.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ping ‚Ä∫ should return ping status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should return comprehensive metrics with default pagination

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should handle search filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should handle sector filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should handle metric range filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should prevent SQL injection in sort parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes ‚Ä∫ GET /metrics/ ‚Ä∫ should limit page size to maximum

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/orders.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Orders Routes Unit Tests ‚Ä∫ GET /orders/ ‚Ä∫ should handle user orders request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Orders Routes Unit Tests ‚Ä∫ POST /orders/ ‚Ä∫ should handle order creation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Orders Routes Unit Tests ‚Ä∫ GET /orders/:orderId ‚Ä∫ should handle specific order request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/unit/routes/health.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Health Routes - Testing Your Actual Site ‚Ä∫ GET /health - Health check endpoint ‚Ä∫ should return quick health check when quick=true

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Health Routes - Testing Your Actual Site ‚Ä∫ GET /health - Health check endpoint ‚Ä∫ should return full health check with database testing

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Health Routes - Testing Your Actual Site ‚Ä∫ GET /health - Health check endpoint ‚Ä∫ should handle database connection failures gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Health Routes - Testing Your Actual Site ‚Ä∫ GET /health - Health check endpoint ‚Ä∫ should handle database query failures

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Health Routes - Testing Your Actual Site ‚Ä∫ Error handling ‚Ä∫ should return valid response structure for all cases

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/trading.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading (Root endpoint) ‚Ä∫ should return trading API information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading (Root endpoint) ‚Ä∫ should handle concurrent requests to root endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/health ‚Ä∫ should return health status without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/health ‚Ä∫ should return consistent health status across multiple calls

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/debug ‚Ä∫ should return debug information about trading tables

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should return all trading signals without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should handle limit parameter for signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should handle symbol filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should handle signal type filtering

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should reject invalid limit values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals ‚Ä∫ should reject excessive limit values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should return daily signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should return weekly signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should return monthly signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should reject invalid timeframes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should handle pagination parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should handle latest_only parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/signals/:timeframe ‚Ä∫ should handle symbol and signal type filters together

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/summary/:timeframe ‚Ä∫ should return daily signals summary

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/summary/:timeframe ‚Ä∫ should return weekly signals summary

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/summary/:timeframe ‚Ä∫ should reject invalid timeframes for summary

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/swing-signals ‚Ä∫ should return swing trading signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/swing-signals ‚Ä∫ should handle pagination for swing signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/:ticker/technicals ‚Ä∫ should return technical indicators for a stock

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/:ticker/technicals ‚Ä∫ should handle timeframe parameter for technicals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/:ticker/technicals ‚Ä∫ should handle monthly timeframe for technicals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/performance ‚Ä∫ should return performance summary of recent signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/performance ‚Ä∫ should handle custom days parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/performance ‚Ä∫ should handle invalid days parameter gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/positions ‚Ä∫ should return current trading positions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/positions ‚Ä∫ should return positions summary when requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/orders (Authenticated) ‚Ä∫ should require authentication for orders

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/orders (Authenticated) ‚Ä∫ should return trading orders with valid authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/orders (Authenticated) ‚Ä∫ should handle database unavailability for orders

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should require authentication for order creation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should create market buy order with valid data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should create limit sell order with valid data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should reject order with missing required fields

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should reject order with invalid order type

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should reject order with invalid side

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should reject order with invalid quantity

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should reject limit order without limit price

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ POST /api/trading/orders (Authenticated) ‚Ä∫ should handle stop limit order with valid data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/simulator ‚Ä∫ should return trading simulation results with default parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/simulator ‚Ä∫ should handle custom simulation parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/simulator ‚Ä∫ should reject invalid portfolio values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/simulator ‚Ä∫ should reject negative portfolio values

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/simulator ‚Ä∫ should reject invalid strategy

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should return all trading strategies

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should filter strategies by category

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should filter strategies by risk level

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should filter active strategies only

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should handle limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies ‚Ä∫ should combine multiple filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should return detailed strategy information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should include signals when requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should include backtest results when requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should include both signals and backtest when both requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should return strategy details without optional includes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should include signals when requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should include backtest results when requested

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should handle both signals and backtest parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ GET /api/trading/strategies/:strategyId ‚Ä∫ should handle invalid strategy ID gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle multiple complex query parameters for signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle zero and negative page numbers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle extremely large page numbers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle performance endpoint with edge case days parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle performance endpoint with very large days parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle simulator with minimum portfolio value

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle simulator with maximum realistic portfolio

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Advanced Parameter Validation ‚Ä∫ should handle simulator with extensive symbol list

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Database Edge Cases ‚Ä∫ should handle potential SQL injection in symbol parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Database Edge Cases ‚Ä∫ should handle Unicode and international symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Database Edge Cases ‚Ä∫ should handle empty string parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Database Edge Cases ‚Ä∫ should handle whitespace-only parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Performance and Load Testing ‚Ä∫ should handle multiple concurrent requests to different endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Performance and Load Testing ‚Ä∫ should handle rapid sequential requests to same endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Performance and Load Testing ‚Ä∫ should maintain response time consistency across requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Performance and Load Testing ‚Ä∫ should handle memory-intensive operations gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Data Consistency and Validation ‚Ä∫ should validate signal data structure consistency

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Data Consistency and Validation ‚Ä∫ should validate performance data calculation accuracy

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Data Consistency and Validation ‚Ä∫ should validate swing signals structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Data Consistency and Validation ‚Ä∫ should validate strategies data completeness

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Error Recovery and Resilience ‚Ä∫ should gracefully handle database connection timeouts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Error Recovery and Resilience ‚Ä∫ should handle partial data availability scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Error Recovery and Resilience ‚Ä∫ should maintain API availability during high error rates

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle malformed JSON in POST requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle very long symbol names

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle special characters in symbol parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle concurrent order submissions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle performance testing with response time validation

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle missing authentication header gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle malformed authentication token

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle large payload sizes gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle order validation edge cases

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Trading Routes Integration Tests ‚Ä∫ Edge Cases and Error Handling ‚Ä∫ should handle complex stop-limit order scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/stocks.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/ ‚Ä∫ should return stocks data with comprehensive key metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/ ‚Ä∫ should handle pagination properly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/sectors ‚Ä∫ should return sectors data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/sectors ‚Ä∫ should handle concurrent requests to sectors endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/search ‚Ä∫ should handle search with valid query

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/search ‚Ä∫ should require query parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/search ‚Ä∫ should handle empty search query

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/search ‚Ä∫ should handle search with limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/search ‚Ä∫ should require authentication for search

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/:symbol ‚Ä∫ should handle valid stock symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/:symbol ‚Ä∫ should handle invalid stock symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/:symbol ‚Ä∫ should handle very long symbol names

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/:symbol ‚Ä∫ should handle special characters in symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/trending ‚Ä∫ should return trending stocks

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/trending ‚Ä∫ should handle timeframe parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/trending ‚Ä∫ should require authentication for trending

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/screener ‚Ä∫ should return screener results

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ GET /api/stocks/screener ‚Ä∫ should handle screener filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Watchlist Operations ‚Ä∫ should handle watchlist requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Watchlist Operations ‚Ä∫ should handle adding to watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Watchlist Operations ‚Ä∫ should validate symbol parameter for watchlist add

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Watchlist Operations ‚Ä∫ should handle removing from watchlist

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock quote requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock technicals requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock options requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock insider trading requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock analysts requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock earnings requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock dividends requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock sentiment requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Stock Data Endpoints ‚Ä∫ should handle stock social requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Authentication Tests ‚Ä∫ should handle requests without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Authentication Tests ‚Ä∫ should handle malformed authorization headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Authentication Tests ‚Ä∫ should handle empty authorization headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Authentication Tests ‚Ä∫ should handle missing bearer token

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle invalid parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should validate response content types

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle SQL injection attempts safely

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle database connection issues gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Stocks Routes Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle international characters in search

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/market.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market ‚Ä∫ should return market endpoint information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/overview ‚Ä∫ should return market overview data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/overview ‚Ä∫ should handle market overview with parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/data ‚Ä∫ should return market data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/data ‚Ä∫ should handle symbol-specific market data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/sentiment ‚Ä∫ should return market sentiment data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/sentiment/history ‚Ä∫ should return sentiment history

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/sentiment/history ‚Ä∫ should handle sentiment history with time range

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/movers ‚Ä∫ should return top movers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/movers ‚Ä∫ should handle movers with type parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/indices ‚Ä∫ should return market indices

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/status ‚Ä∫ should return market status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ GET /api/market/sectors ‚Ä∫ should return sector performance

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle invalid endpoints gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle database connection issues

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ Error Handling ‚Ä∫ should handle malformed query parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ Performance Tests ‚Ä∫ should respond to overview requests within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Market Routes Unit Tests ‚Ä∫ Performance Tests ‚Ä∫ should handle concurrent overview requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/infrastructure/middleware-chains.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Middleware Chain Integration ‚Ä∫ Authentication ‚Üí Validation ‚Üí Response Pipeline ‚Ä∫ should process complete middleware chain for valid requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Authentication ‚Üí Validation ‚Üí Response Pipeline ‚Ä∫ should handle auth failure ‚Üí error formatting chain

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Authentication ‚Üí Validation ‚Üí Response Pipeline ‚Ä∫ should handle malformed authorization headers

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Cross-Route Middleware Consistency ‚Ä∫ should apply auth middleware consistently across protected routes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Cross-Route Middleware Consistency ‚Ä∫ should format responses consistently across all routes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Error Propagation Integration ‚Ä∫ should handle database connection errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Error Propagation Integration ‚Ä∫ should handle invalid route requests through middleware chain

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Request Context Propagation ‚Ä∫ should maintain user context through service calls

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Request Context Propagation ‚Ä∫ should handle concurrent requests through middleware chain

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Middleware Chain Integration ‚Ä∫ Performance Under Middleware Load ‚Ä∫ should maintain middleware chain performance

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/scores.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores/ping ‚Ä∫ should return ping response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should return scores data with AWS-compatible structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle pagination parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle search parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle sector filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle score range filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle sorting parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle limit boundary conditions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ GET /scores ‚Ä∫ should handle invalid parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Error handling ‚Ä∫ should handle invalid endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Error handling ‚Ä∫ should return consistent response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Error handling ‚Ä∫ should handle database connection issues

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Security tests ‚Ä∫ should handle SQL injection attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Security tests ‚Ä∫ should handle XSS attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Security tests ‚Ä∫ should handle large payloads

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Performance tests ‚Ä∫ should respond within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Scores Routes Integration ‚Ä∫ Performance tests ‚Ä∫ should handle concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/metrics.integration.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics/ping ‚Ä∫ should return ping response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should return metrics data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle pagination parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle search parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle sector filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle metric range filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle sorting parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle limit boundary conditions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ GET /metrics ‚Ä∫ should handle invalid parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Error handling ‚Ä∫ should handle invalid endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Error handling ‚Ä∫ should return consistent response format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Error handling ‚Ä∫ should handle database connection issues

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Performance tests ‚Ä∫ should respond within reasonable time

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Performance tests ‚Ä∫ should handle concurrent requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Query parameter validation ‚Ä∫ should handle empty query parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Query parameter validation ‚Ä∫ should handle SQL injection attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Query parameter validation ‚Ä∫ should handle XSS attempts

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Metrics Routes Integration ‚Ä∫ Query parameter validation ‚Ä∫ should handle very long input strings

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/signals.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals ‚Ä∫ should return signals with proper AWS-compatible structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/:symbol ‚Ä∫ should return symbol-specific signals

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/trending ‚Ä∫ should return trending signals with proper structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/buy ‚Ä∫ should return buy signals with AWS-compatible structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/buy ‚Ä∫ should handle filters properly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/sell ‚Ä∫ should return sell signals with AWS-compatible structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/alerts ‚Ä∫ should return alerts with AWS-compatible structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ POST /api/signals/alerts ‚Ä∫ should create signal alert successfully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ POST /api/signals/alerts ‚Ä∫ should handle missing symbol in request body

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/backtest ‚Ä∫ should return backtest results with proper structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/backtest ‚Ä∫ should handle missing parameters gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/performance ‚Ä∫ should return performance metrics with proper structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ GET /api/signals/performance ‚Ä∫ should handle timeframe parameter correctly

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Signals Routes ‚Ä∫ DELETE /api/signals/alerts/:alertId ‚Ä∫ should delete alert successfully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/streaming/sse-streaming.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Server-Sent Events Streaming ‚Ä∫ should establish SSE connection for live quotes stream

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Server-Sent Events Streaming ‚Ä∫ should handle SSE streaming with symbol filters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Server-Sent Events Streaming ‚Ä∫ should handle SSE streaming with update interval

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Quotes API ‚Ä∫ should return live quotes with comprehensive data structure

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Quotes API ‚Ä∫ should handle symbol filtering for live quotes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Quotes API ‚Ä∫ should handle pagination for live quotes

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Administration ‚Ä∫ should provide optimization status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Administration ‚Ä∫ should handle stream toggle administration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Administration ‚Ä∫ should handle cache clearing administration

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Service Health ‚Ä∫ should provide comprehensive health status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Live Data Service Health ‚Ä∫ should validate streaming service health metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Real-time Data Consistency ‚Ä∫ should maintain data consistency across SSE and API endpoints

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Real-time Data Consistency ‚Ä∫ should handle concurrent SSE connections

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle malformed SSE requests gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè SSE Streaming Integration Tests ‚Ä∫ Error Handling and Edge Cases ‚Ä∫ should handle SSE connection interruptions

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

FAIL tests/integration/routes/liveData.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.error
      Database query error: {
        error: 'Database connection failed - no fallback available',
        query: 'SELECT 1',
        params: 'no parameters',
        code: 'DB_CONNECTION_FAILED'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      Database connection error - no fallback available

      1350 |       error.code === "ECONNABORTED"
      1351 |     ) {
    > 1352 |       console.error("Database connection error - no fallback available");
           |               ^
      1353 |       error.message = `Database connection failed: ${error.message}`;
      1354 |       throw error;
      1355 |     }

      at error (utils/database.js:1352:15)
      at Object.<anonymous> (tests/setup.js:25:5)

    console.error
      ‚ùå Failed to connect to real database: Error: Database connection failed: Database connection failed - no fallback available
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1278:23)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/setup.js:25:5) {
        code: 'DB_CONNECTION_FAILED'
      }

      26 |     console.log('‚úÖ Real database connection established for tests');
      27 |   } catch (error) {
    > 28 |     console.error('‚ùå Failed to connect to real database:', error);
         |             ^
      29 |     throw error;
      30 |   }
      31 | });

      at Object.error (tests/setup.js:28:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata (Root endpoint) ‚Ä∫ should return live data API information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata (Root endpoint) ‚Ä∫ should include timestamp in response

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata (Root endpoint) ‚Ä∫ should handle concurrent requests to root endpoint

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/status ‚Ä∫ should return comprehensive service status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/status ‚Ä∫ should include correlation ID from header

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/status ‚Ä∫ should include component status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/status ‚Ä∫ should include service metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/symbols ‚Ä∫ should return available symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/symbols ‚Ä∫ should handle category filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/symbols ‚Ä∫ should handle limit parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/symbols ‚Ä∫ should handle search parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/providers ‚Ä∫ should return data provider information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/providers ‚Ä∫ should include provider status and metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/providers ‚Ä∫ should handle provider filtering by status

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/connections ‚Ä∫ should return connection status information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/connections ‚Ä∫ should include connection health metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/market (Authenticated) ‚Ä∫ should require authentication for market data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/market (Authenticated) ‚Ä∫ should return market data with authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/market (Authenticated) ‚Ä∫ should handle market status requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/market (Authenticated) ‚Ä∫ should handle sector parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should require authentication for streaming data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should handle single symbol streaming request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should handle multiple symbols streaming request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should handle streaming with interval parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should validate symbol format

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/stream/:symbols (Authenticated) ‚Ä∫ should handle too many symbols request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/latest/:symbols (Authenticated) ‚Ä∫ should require authentication for latest data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/latest/:symbols (Authenticated) ‚Ä∫ should return latest data for single symbol

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/latest/:symbols (Authenticated) ‚Ä∫ should return latest data for multiple symbols

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/latest/:symbols (Authenticated) ‚Ä∫ should handle fields parameter for latest data

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ POST /api/livedata/admin/restart (Admin) ‚Ä∫ should require authentication for admin operations

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ POST /api/livedata/admin/restart (Admin) ‚Ä∫ should handle restart request with authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ POST /api/livedata/admin/restart (Admin) ‚Ä∫ should handle restart with component parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ POST /api/livedata/admin/optimize (Admin) ‚Ä∫ should require authentication for optimization

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ POST /api/livedata/admin/optimize (Admin) ‚Ä∫ should handle optimization request

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/health ‚Ä∫ should return health status without authentication

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/health ‚Ä∫ should include uptime information

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/health ‚Ä∫ should handle detailed health check

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/metrics ‚Ä∫ should return performance metrics

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/metrics ‚Ä∫ should handle metrics time range parameter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ GET /api/livedata/metrics ‚Ä∫ should handle metrics category filter

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ WebSocket and Real-time Features ‚Ä∫ should handle WebSocket connection info

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ WebSocket and Real-time Features ‚Ä∫ should handle subscription management

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle concurrent streaming requests

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle malformed symbol parameters

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should maintain response time consistency

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle service overload gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should validate authentication edge cases

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle database connection failures gracefully

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

  ‚óè Live Data Routes Integration Tests ‚Ä∫ Performance and Edge Cases ‚Ä∫ should handle memory pressure scenarios

    Database connection failed: Database connection failed - no fallback available

      1276 |       if (!result || !pool) {
      1277 |         // Database is not available - throw error instead of fallback
    > 1278 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1279 |         error.code = "DB_CONNECTION_FAILED";
      1280 |         throw error;
      1281 |       }

      at query (utils/database.js:1278:23)
      at Object.<anonymous> (tests/setup.js:25:5)

PASS tests/unit/services/aiStrategyGenerator.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts HTTP/1.1" 200 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts HTTP/1.1" 200 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades?page=2&limit=10 HTTP/1.1" 200 2145 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades?page=invalid&limit=abc HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades?page=0&limit=-5 HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades?limit=5 HTTP/1.1" 200 1167 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/earnings-estimates HTTP/1.1" 200 405 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/aapl/earnings-estimates HTTP/1.1" 200 405 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/MSFT/earnings-estimates HTTP/1.1" 200 411 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/BRK.A/earnings-estimates HTTP/1.1" 200 87 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/INVALID123/earnings-estimates HTTP/1.1" 200 92 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/revenue-estimates HTTP/1.1" 200 159 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/MSFT/revenue-estimates HTTP/1.1" 200 159 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/googl/revenue-estimates HTTP/1.1" 200 160 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/TSLA/revenue-estimates HTTP/1.1" 200 159 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/BRK.A/revenue-estimates HTTP/1.1" 200 33 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/NVDA/revenue-estimates HTTP/1.1" 200 32 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/earnings-history HTTP/1.1" 200 166 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/MSFT/earnings-history HTTP/1.1" 200 166 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/tesla/earnings-history HTTP/1.1" 200 31 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/eps-revisions HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/MSFT/eps-revisions HTTP/1.1" 200 104 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/googl/eps-revisions HTTP/1.1" 200 105 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/eps-trend HTTP/1.1" 200 257 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/TSLA/eps-trend HTTP/1.1" 200 257 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/growth-estimates HTTP/1.1" 200 918 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/META/growth-estimates HTTP/1.1" 404 80 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/overview HTTP/1.1" 200 1424 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/MSFT/overview HTTP/1.1" 200 1424 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/GOOGL/overview HTTP/1.1" 200 1428 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/TSLA/overview HTTP/1.1" 200 1424 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/NVDA/overview HTTP/1.1" 200 1027 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/NFLX/overview HTTP/1.1" 200 1027 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions?limit=5 HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions?limit=invalid HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recommendations/AAPL HTTP/1.1" 404 123 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recommendations/aapl HTTP/1.1" 404 123 "-" "-"
PASS tests/integration/routes/analysts.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìà [GROWTH] Calculating growth estimates for AAPL

      at log (routes/analysts.js:349:13)

    console.log
      ‚úÖ [GROWTH] Calculated growth estimates for AAPL: Revenue 0%, EPS 0%

      at log (routes/analysts.js:594:13)

    console.log
      üìà [GROWTH] Calculating growth estimates for META

      at log (routes/analysts.js:349:13)

    console.log
      ‚ùå [GROWTH] No financial data found for META

      at log (routes/analysts.js:392:15)

    console.log
      üìä Analyst recommendations requested for AAPL

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for aapl

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for MSFT

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for BRK.A

      at log (routes/analysts.js:844:13)

    console.log
      üìä Analyst recommendations requested for GOOGL

      at log (routes/analysts.js:844:13)

    console.log
      üéØ Price targets requested for AAPL

      at log (routes/analysts.js:947:13)

    console.log
      üéØ Price targets requested for MSFT

      at log (routes/analysts.js:947:13)

    console.log
      üéØ Price targets requested for googl

      at log (routes/analysts.js:947:13)

    console.log
      üéØ Price targets requested for TSLA

      at log (routes/analysts.js:947:13)

    console.log
      üéØ Price targets requested for NVDA

      at log (routes/analysts.js:947:13)

    console.log
      ü§ù Analyst consensus requested for AAPL

      at log (routes/analysts.js:1335:13)

    console.log
      ü§ù Analyst consensus requested for MSFT

      at log (routes/analysts.js:1335:13)

    console.log
      ü§ù Analyst consensus requested for googl

      at log (routes/analysts.js:1335:13)

    console.log
      ü§ù Analyst consensus requested for TSLA

      at log (routes/analysts.js:1335:13)

    console.log
      ü§ù Analyst consensus requested for BRK.A

      at log (routes/analysts.js:1335:13)

    console.log
      ü§ù Analyst consensus requested for META

      at log (routes/analysts.js:1335:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recommendations/MSFT HTTP/1.1" 404 123 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recommendations/BRK.A HTTP/1.1" 404 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recommendations/GOOGL HTTP/1.1" 404 125 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/targets/AAPL HTTP/1.1" 200 417 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/targets/MSFT HTTP/1.1" 200 417 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/targets/googl HTTP/1.1" 200 418 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/targets/TSLA HTTP/1.1" 200 417 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/targets/NVDA HTTP/1.1" 200 417 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/downgrades HTTP/1.1" 500 296 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/downgrades?limit=15 HTTP/1.1" 500 296 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/AAPL HTTP/1.1" 200 337 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/MSFT HTTP/1.1" 200 337 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/googl HTTP/1.1" 200 338 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/TSLA HTTP/1.1" 200 337 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/BRK.A HTTP/1.1" 200 338 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/consensus/META HTTP/1.1" 200 337 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL%20invalid/earnings-estimates HTTP/1.1" 200 94 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/earnings-estimates HTTP/1.1" 200 132 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/A@PPL/earnings-estimates HTTP/1.1" 200 87 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts HTTP/1.1" 200 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts HTTP/1.1" 200 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts HTTP/1.1" 200 625 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/AAPL/earnings-estimates HTTP/1.1" 200 405 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades HTTP/1.1" 200 5149 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/recent-actions HTTP/1.1" 200 404 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts//earnings-estimates HTTP/1.1" 404 138 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/123/earnings-estimates HTTP/1.1" 200 85 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/upgrades?page=999999&limit=1000 HTTP/1.1" 200 163 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:25 +0000] "GET /api/analysts/BRK%2EA/earnings-estimates HTTP/1.1" 200 87 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials HTTP/1.1" 200 831 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL HTTP/1.1" 200 621 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/INVALID HTTP/1.1" 404 70 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/income HTTP/1.1" 200 2134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/income?period=annual HTTP/1.1" 200 2134 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/balance HTTP/1.1" 200 304 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/cash HTTP/1.1" 200 1273 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/ratios HTTP/1.1" 200 304 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/metrics HTTP/1.1" 200 240 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/growth HTTP/1.1" 200 264 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/AAPL/estimates HTTP/1.1" 200 368 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/compare?symbols=AAPL,MSFT,GOOGL HTTP/1.1" 200 451 "-" "-"
PASS tests/integration/routes/financials.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üí∞ [FINANCIALS] Fetching basic financial data for AAPL

      at log (routes/financials.js:1230:11)

    console.log
      üí∞ [FINANCIALS] Fetching basic financial data for INVALID

      at log (routes/financials.js:1230:11)

    console.log
      üí∞ [FINANCIALS] Fetching income data for AAPL (test endpoint)

      at log (routes/financials.js:1290:11)

    console.log
      üí∞ [FINANCIALS] Fetching income data for AAPL (test endpoint)

      at log (routes/financials.js:1290:11)

    console.log
      üí∞ [FINANCIALS] Fetching balance data for AAPL (test endpoint)

      at log (routes/financials.js:1342:11)

    console.log
      üí∞ [FINANCIALS] Fetching cash flow for AAPL via /cash endpoint (test compatibility)

      at log (routes/financials.js:1446:11)

    console.log
      üí∞ [FINANCIALS] Fetching ratios for AAPL (test endpoint)

      at log (routes/financials.js:1640:11)

    console.log
      üìä Financial metrics requested for AAPL

      at log (routes/financials.js:1725:13)

    console.log
      üìä Financial growth metrics requested for AAPL

      at log (routes/financials.js:1759:13)

    console.log
      üìä Financial estimates requested for AAPL

      at log (routes/financials.js:1790:13)

    console.log
      üí∞ [FINANCIALS] Fetching basic financial data for compare

      at log (routes/financials.js:285:13)

    console.log
      üí∞ [FINANCIALS] Fetching basic financial data for screener

      at log (routes/financials.js:200:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/compare HTTP/1.1" 400 128 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:26 +0000] "GET /api/financials/screener?pe_max=25&debt_to_equity_max=0.5 HTTP/1.1" 200 1253 "-" "-"
PASS tests/integration/utils/errorTracker.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      {"timestamp":"2025-09-26T01:28:26.979Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error for tracking","correlationId":"test-123","stack":"Error: Test error for tracking\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:30:25)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","userId":"test_user","route":"/api/test","method":"GET","category":"general","severity":"ERROR","context":{"userId":"test_user","route":"/api/test","method":"GET","correlationId":"test-123"}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.990Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Error with stack trace","stack":"Error: Error with stack trace\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:46:21)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","route":"/test-service","method":"POST","category":"general","severity":"ERROR","context":{"route":"/test-service","method":"POST"}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.992Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database connection failed","stack":"Error: Database connection failed\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:59:29)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.992Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Unauthorized access","stack":"Error: Unauthorized access\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:60:25)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.992Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Validation failed","stack":"Error: Validation failed\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:61:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"validation","severity":"ERROR","context":{"statusCode":400}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.993Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database connection timeout","stack":"Error: Database connection timeout\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:83:29)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.994Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Unauthorized","stack":"Error: Unauthorized\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:84:25)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.999Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Invalid input","stack":"Error: Invalid input\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:85:27)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"validation","severity":"ERROR","context":{"statusCode":400}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:26.999Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Minor issue","stack":"Error: Minor issue\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:86:24)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.000Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database error","stack":"Error: Database error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:112:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.000Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Auth error","stack":"Error: Auth error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:113:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.001Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Validation error","stack":"Error: Validation error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:114:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"validation","severity":"ERROR","context":{"statusCode":400}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.001Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"API error","stack":"Error: API error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:117:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"api","severity":"ERROR","context":{"statusCode":500}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.003Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 0","stack":"Error: Test error 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.003Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 1","stack":"Error: Test error 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.003Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 2","stack":"Error: Test error 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.004Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 3","stack":"Error: Test error 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.004Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 4","stack":"Error: Test error 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.004Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 5","stack":"Error: Test error 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.005Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 6","stack":"Error: Test error 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.005Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 7","stack":"Error: Test error 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.005Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 8","stack":"Error: Test error 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.005Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test error 9","stack":"Error: Test error 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:138:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.006Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Connection failed","stack":"Error: Connection failed\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:161:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.006Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Connection failed","stack":"Error: Connection failed\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:161:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.007Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Connection failed","stack":"Error: Connection failed\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:161:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.007Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Unauthorized","stack":"Error: Unauthorized\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:166:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.007Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Unauthorized","stack":"Error: Unauthorized\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:166:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.008Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 0","stack":"Error: Concurrent error 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.008Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 1","stack":"Error: Concurrent error 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.008Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 2","stack":"Error: Concurrent error 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.008Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 3","stack":"Error: Concurrent error 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.009Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 4","stack":"Error: Concurrent error 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.009Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 5","stack":"Error: Concurrent error 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.009Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 6","stack":"Error: Concurrent error 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.009Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 7","stack":"Error: Concurrent error 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.009Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 8","stack":"Error: Concurrent error 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.018Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 9","stack":"Error: Concurrent error 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.018Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 10","stack":"Error: Concurrent error 10\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.018Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 11","stack":"Error: Concurrent error 11\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.018Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 12","stack":"Error: Concurrent error 12\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.019Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 13","stack":"Error: Concurrent error 13\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.019Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 14","stack":"Error: Concurrent error 14\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.019Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 15 general errors in the last minute (threshold: 15)","correlationId":"35232d2d","category":"general","currentCount":15,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 15 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.020Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 15","stack":"Error: Concurrent error 15\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.020Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 16 general errors in the last minute (threshold: 15)","correlationId":"1d0e58f5","category":"general","currentCount":16,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 16 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.020Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 16","stack":"Error: Concurrent error 16\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.020Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 17 general errors in the last minute (threshold: 15)","correlationId":"f97de28b","category":"general","currentCount":17,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 17 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.021Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 17","stack":"Error: Concurrent error 17\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.021Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 18 general errors in the last minute (threshold: 15)","correlationId":"46f3cbe6","category":"general","currentCount":18,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 18 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.021Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 18","stack":"Error: Concurrent error 18\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.021Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 19 general errors in the last minute (threshold: 15)","correlationId":"d7c4078f","category":"general","currentCount":19,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 19 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.022Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Concurrent error 19","stack":"Error: Concurrent error 19\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:183:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.022Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 20 general errors in the last minute (threshold: 15)","correlationId":"8568a8d2","category":"general","currentCount":20,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 20 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.023Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database connection issue","stack":"Error: Database connection issue\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:201:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.023Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database timeout","stack":"Error: Database timeout\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:202:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.024Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Database connection failed 1758850107024","stack":"Error: Database connection failed 1758850107024\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:217:9)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"database","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.024Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Unauthorized access 1758850107024","stack":"Error: Unauthorized access 1758850107024\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:219:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"auth","severity":"ERROR","context":{"statusCode":401}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.024Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"API request failed 1758850107024","stack":"Error: API request failed 1758850107024\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:222:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"api","severity":"ERROR","context":{"statusCode":500}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.024Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Validation failed 1758850107024","stack":"Error: Validation failed 1758850107024\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:225:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"validation","severity":"ERROR","context":{"statusCode":400}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.025Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Context test error","correlationId":"req-456","stack":"Error: Context test error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:254:31)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","userId":"user123","route":"/api/portfolio","method":"POST","userAgent":"test-agent","ip":"127.0.0.1","category":"general","severity":"ERROR","context":{"userId":"user123","correlationId":"req-456","route":"/api/portfolio","method":"POST","userAgent":"test-agent","ip":"127.0.0.1"}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.026Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test 1","stack":"Error: Test 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:269:46)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.026Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Test 2","stack":"Error: Test 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:270:46)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.027Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 0","stack":"Error: History test 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.027Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 1","stack":"Error: History test 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.027Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 2","stack":"Error: History test 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.027Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 3","stack":"Error: History test 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.028Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 4","stack":"Error: History test 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.028Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 5","stack":"Error: History test 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.028Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 6","stack":"Error: History test 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.028Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 7","stack":"Error: History test 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.028Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 8","stack":"Error: History test 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.029Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 9","stack":"Error: History test 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.029Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 10","stack":"Error: History test 10\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.029Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 11","stack":"Error: History test 11\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.034Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 12","stack":"Error: History test 12\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.034Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 13","stack":"Error: History test 13\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.034Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 14","stack":"Error: History test 14\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.034Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 15 general errors in the last minute (threshold: 15)","correlationId":"5334eb63","category":"general","currentCount":15,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 15 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.035Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 15","stack":"Error: History test 15\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.035Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 16 general errors in the last minute (threshold: 15)","correlationId":"49bb2bce","category":"general","currentCount":16,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 16 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.035Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 16","stack":"Error: History test 16\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.035Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 17 general errors in the last minute (threshold: 15)","correlationId":"a6447e30","category":"general","currentCount":17,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 17 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.036Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 17","stack":"Error: History test 17\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.036Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 18 general errors in the last minute (threshold: 15)","correlationId":"206b1b8e","category":"general","currentCount":18,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 18 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.036Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 18","stack":"Error: History test 18\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.036Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 19 general errors in the last minute (threshold: 15)","correlationId":"5f8943ce","category":"general","currentCount":19,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 19 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.037Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 19","stack":"Error: History test 19\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.037Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 20 general errors in the last minute (threshold: 15)","correlationId":"438a754b","category":"general","currentCount":20,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 20 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.037Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 20","stack":"Error: History test 20\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.037Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 21 general errors in the last minute (threshold: 15)","correlationId":"4f158266","category":"general","currentCount":21,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 21 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.038Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 21","stack":"Error: History test 21\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.038Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 22 general errors in the last minute (threshold: 15)","correlationId":"c7f5f9af","category":"general","currentCount":22,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 22 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.038Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 22","stack":"Error: History test 22\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.038Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 23 general errors in the last minute (threshold: 15)","correlationId":"80fbfe5e","category":"general","currentCount":23,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 23 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.038Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 23","stack":"Error: History test 23\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.039Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 24 general errors in the last minute (threshold: 15)","correlationId":"5fa16493","category":"general","currentCount":24,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 24 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.039Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 24","stack":"Error: History test 24\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.039Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 25 general errors in the last minute (threshold: 15)","correlationId":"90fae412","category":"general","currentCount":25,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 25 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.039Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 25","stack":"Error: History test 25\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.039Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 26 general errors in the last minute (threshold: 15)","correlationId":"f5fbfb01","category":"general","currentCount":26,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 26 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.040Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 26","stack":"Error: History test 26\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.040Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 27 general errors in the last minute (threshold: 15)","correlationId":"89f42c78","category":"general","currentCount":27,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 27 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.040Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 27","stack":"Error: History test 27\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.040Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 28 general errors in the last minute (threshold: 15)","correlationId":"56c97389","category":"general","currentCount":28,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 28 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.040Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 28","stack":"Error: History test 28\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.041Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 29 general errors in the last minute (threshold: 15)","correlationId":"9084c073","category":"general","currentCount":29,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 29 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.041Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 29","stack":"Error: History test 29\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.041Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 30 general errors in the last minute (threshold: 15)","correlationId":"e09109d2","category":"general","currentCount":30,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 30 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.041Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 30","stack":"Error: History test 30\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.042Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 31 general errors in the last minute (threshold: 15)","correlationId":"20e168fa","category":"general","currentCount":31,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 31 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.042Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 31","stack":"Error: History test 31\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.042Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 32 general errors in the last minute (threshold: 15)","correlationId":"480dc063","category":"general","currentCount":32,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 32 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.042Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 32","stack":"Error: History test 32\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.042Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 33 general errors in the last minute (threshold: 15)","correlationId":"1894383d","category":"general","currentCount":33,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 33 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.043Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 33","stack":"Error: History test 33\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.047Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 34 general errors in the last minute (threshold: 15)","correlationId":"15be6815","category":"general","currentCount":34,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 34 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.048Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 34","stack":"Error: History test 34\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.048Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 35 general errors in the last minute (threshold: 15)","correlationId":"dbd596a1","category":"general","currentCount":35,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 35 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.048Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 35","stack":"Error: History test 35\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.048Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 36 general errors in the last minute (threshold: 15)","correlationId":"929f6fff","category":"general","currentCount":36,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 36 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.049Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 36","stack":"Error: History test 36\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.049Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 37 general errors in the last minute (threshold: 15)","correlationId":"a778c7df","category":"general","currentCount":37,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 37 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.049Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 37","stack":"Error: History test 37\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.049Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 38 general errors in the last minute (threshold: 15)","correlationId":"8b86e73d","category":"general","currentCount":38,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 38 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.050Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 38","stack":"Error: History test 38\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.050Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 39 general errors in the last minute (threshold: 15)","correlationId":"28941b05","category":"general","currentCount":39,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 39 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.050Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 39","stack":"Error: History test 39\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.050Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 40 general errors in the last minute (threshold: 15)","correlationId":"6518d476","category":"general","currentCount":40,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 40 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.051Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 40","stack":"Error: History test 40\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.051Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 41 general errors in the last minute (threshold: 15)","correlationId":"bc94839d","category":"general","currentCount":41,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 41 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.051Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 41","stack":"Error: History test 41\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.051Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 42 general errors in the last minute (threshold: 15)","correlationId":"3ffb3504","category":"general","currentCount":42,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 42 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.052Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 42","stack":"Error: History test 42\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.052Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 43 general errors in the last minute (threshold: 15)","correlationId":"5b644a3b","category":"general","currentCount":43,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 43 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.052Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 43","stack":"Error: History test 43\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.052Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 44 general errors in the last minute (threshold: 15)","correlationId":"b47bae04","category":"general","currentCount":44,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 44 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.052Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 44","stack":"Error: History test 44\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.053Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 45 general errors in the last minute (threshold: 15)","correlationId":"fa87f01d","category":"general","currentCount":45,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 45 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.053Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 45","stack":"Error: History test 45\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.053Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 46 general errors in the last minute (threshold: 15)","correlationId":"581ef3e1","category":"general","currentCount":46,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 46 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.053Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 46","stack":"Error: History test 46\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.054Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 47 general errors in the last minute (threshold: 15)","correlationId":"7df9d528","category":"general","currentCount":47,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 47 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.054Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 47","stack":"Error: History test 47\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.054Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 48 general errors in the last minute (threshold: 15)","correlationId":"2b985da6","category":"general","currentCount":48,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 48 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.054Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 48","stack":"Error: History test 48\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.055Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 49 general errors in the last minute (threshold: 15)","correlationId":"3aa2193f","category":"general","currentCount":49,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 49 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.055Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"History test 49","stack":"Error: History test 49\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:286:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.055Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 50 general errors in the last minute (threshold: 15)","correlationId":"1638f6ec","category":"general","currentCount":50,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 50 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.055Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 0","stack":"Error: Additional error 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.056Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 51 general errors in the last minute (threshold: 15)","correlationId":"50370bff","category":"general","currentCount":51,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 51 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.056Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 1","stack":"Error: Additional error 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.056Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 52 general errors in the last minute (threshold: 15)","correlationId":"74c21564","category":"general","currentCount":52,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 52 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.056Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 2","stack":"Error: Additional error 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.057Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 53 general errors in the last minute (threshold: 15)","correlationId":"a55c3168","category":"general","currentCount":53,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 53 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.057Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 3","stack":"Error: Additional error 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.057Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 54 general errors in the last minute (threshold: 15)","correlationId":"14c3cd06","category":"general","currentCount":54,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 54 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.057Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 4","stack":"Error: Additional error 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.065Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 55 general errors in the last minute (threshold: 15)","correlationId":"774bf30f","category":"general","currentCount":55,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 55 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.066Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 5","stack":"Error: Additional error 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.066Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 56 general errors in the last minute (threshold: 15)","correlationId":"e11a295d","category":"general","currentCount":56,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 56 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.066Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 6","stack":"Error: Additional error 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.066Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 57 general errors in the last minute (threshold: 15)","correlationId":"acc6a5bc","category":"general","currentCount":57,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 57 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.067Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 7","stack":"Error: Additional error 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.067Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 58 general errors in the last minute (threshold: 15)","correlationId":"4514e934","category":"general","currentCount":58,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 58 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.067Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 8","stack":"Error: Additional error 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.067Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 59 general errors in the last minute (threshold: 15)","correlationId":"d2cba1c1","category":"general","currentCount":59,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 59 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.067Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Additional error 9","stack":"Error: Additional error 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:294:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.068Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 60 general errors in the last minute (threshold: 15)","correlationId":"a075ff44","category":"general","currentCount":60,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 60 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.069Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Clear test 0","stack":"Error: Clear test 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:307:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.069Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Clear test 1","stack":"Error: Clear test 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:307:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.069Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Clear test 2","stack":"Error: Clear test 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:307:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.069Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Clear test 3","stack":"Error: Clear test 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:307:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.070Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Clear test 4","stack":"Error: Clear test 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:307:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.070Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 0","stack":"Error: Volume test 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.071Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 1","stack":"Error: Volume test 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.071Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 2","stack":"Error: Volume test 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.071Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 3","stack":"Error: Volume test 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.071Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 4","stack":"Error: Volume test 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.072Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 5","stack":"Error: Volume test 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.072Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 6","stack":"Error: Volume test 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.072Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 7","stack":"Error: Volume test 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.072Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 8","stack":"Error: Volume test 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.073Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 9","stack":"Error: Volume test 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.073Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 10","stack":"Error: Volume test 10\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.073Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 11","stack":"Error: Volume test 11\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.073Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 12","stack":"Error: Volume test 12\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.073Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 13","stack":"Error: Volume test 13\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.074Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 14","stack":"Error: Volume test 14\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.074Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 15 general errors in the last minute (threshold: 15)","correlationId":"e9436169","category":"general","currentCount":15,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 15 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.074Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 15","stack":"Error: Volume test 15\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.074Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 16 general errors in the last minute (threshold: 15)","correlationId":"29140914","category":"general","currentCount":16,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 16 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.075Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 16","stack":"Error: Volume test 16\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.075Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 17 general errors in the last minute (threshold: 15)","correlationId":"887718b4","category":"general","currentCount":17,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 17 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.075Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 17","stack":"Error: Volume test 17\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.075Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 18 general errors in the last minute (threshold: 15)","correlationId":"f33f8c4f","category":"general","currentCount":18,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 18 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.076Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 18","stack":"Error: Volume test 18\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.076Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 19 general errors in the last minute (threshold: 15)","correlationId":"6c7479a8","category":"general","currentCount":19,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 19 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.076Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 19","stack":"Error: Volume test 19\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.076Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 20 general errors in the last minute (threshold: 15)","correlationId":"6ec15db4","category":"general","currentCount":20,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 20 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.076Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 20","stack":"Error: Volume test 20\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.081Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 21 general errors in the last minute (threshold: 15)","correlationId":"41120683","category":"general","currentCount":21,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 21 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.082Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 21","stack":"Error: Volume test 21\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.082Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 22 general errors in the last minute (threshold: 15)","correlationId":"714a0c4a","category":"general","currentCount":22,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 22 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.082Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 22","stack":"Error: Volume test 22\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.082Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 23 general errors in the last minute (threshold: 15)","correlationId":"f242b5e9","category":"general","currentCount":23,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 23 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.083Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 23","stack":"Error: Volume test 23\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.083Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 24 general errors in the last minute (threshold: 15)","correlationId":"6b2212c6","category":"general","currentCount":24,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 24 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.083Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 24","stack":"Error: Volume test 24\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.083Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 25 general errors in the last minute (threshold: 15)","correlationId":"3a012879","category":"general","currentCount":25,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 25 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.083Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 25","stack":"Error: Volume test 25\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.084Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 26 general errors in the last minute (threshold: 15)","correlationId":"9a795e2b","category":"general","currentCount":26,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 26 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.084Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 26","stack":"Error: Volume test 26\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.084Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 27 general errors in the last minute (threshold: 15)","correlationId":"5d7d3351","category":"general","currentCount":27,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 27 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.084Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 27","stack":"Error: Volume test 27\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.084Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 28 general errors in the last minute (threshold: 15)","correlationId":"191ccab6","category":"general","currentCount":28,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 28 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.085Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 28","stack":"Error: Volume test 28\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.085Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 29 general errors in the last minute (threshold: 15)","correlationId":"d20f2e66","category":"general","currentCount":29,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 29 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.085Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 29","stack":"Error: Volume test 29\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.086Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 30 general errors in the last minute (threshold: 15)","correlationId":"99167958","category":"general","currentCount":30,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 30 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.086Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 30","stack":"Error: Volume test 30\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.086Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 31 general errors in the last minute (threshold: 15)","correlationId":"1cca0306","category":"general","currentCount":31,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 31 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.086Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 31","stack":"Error: Volume test 31\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.086Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 32 general errors in the last minute (threshold: 15)","correlationId":"1f76d8df","category":"general","currentCount":32,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 32 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.087Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 32","stack":"Error: Volume test 32\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.087Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 33 general errors in the last minute (threshold: 15)","correlationId":"55fbf0fd","category":"general","currentCount":33,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 33 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.087Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 33","stack":"Error: Volume test 33\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.087Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 34 general errors in the last minute (threshold: 15)","correlationId":"c7009224","category":"general","currentCount":34,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 34 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.088Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 34","stack":"Error: Volume test 34\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.088Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 35 general errors in the last minute (threshold: 15)","correlationId":"ad463345","category":"general","currentCount":35,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 35 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.088Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 35","stack":"Error: Volume test 35\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.088Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 36 general errors in the last minute (threshold: 15)","correlationId":"cc0888d1","category":"general","currentCount":36,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 36 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.089Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 36","stack":"Error: Volume test 36\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.089Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 37 general errors in the last minute (threshold: 15)","correlationId":"18162edd","category":"general","currentCount":37,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 37 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.089Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 37","stack":"Error: Volume test 37\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.089Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 38 general errors in the last minute (threshold: 15)","correlationId":"2261a827","category":"general","currentCount":38,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 38 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.089Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 38","stack":"Error: Volume test 38\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.090Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 39 general errors in the last minute (threshold: 15)","correlationId":"f462f2e2","category":"general","currentCount":39,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 39 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.090Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 39","stack":"Error: Volume test 39\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.090Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 40 general errors in the last minute (threshold: 15)","correlationId":"d4071d79","category":"general","currentCount":40,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 40 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.090Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 40","stack":"Error: Volume test 40\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.091Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 41 general errors in the last minute (threshold: 15)","correlationId":"65da9d4f","category":"general","currentCount":41,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 41 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.095Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 41","stack":"Error: Volume test 41\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.095Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 42 general errors in the last minute (threshold: 15)","correlationId":"a76f2d70","category":"general","currentCount":42,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 42 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.095Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 42","stack":"Error: Volume test 42\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.096Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 43 general errors in the last minute (threshold: 15)","correlationId":"5182c462","category":"general","currentCount":43,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 43 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.096Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 43","stack":"Error: Volume test 43\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.096Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 44 general errors in the last minute (threshold: 15)","correlationId":"c970fccf","category":"general","currentCount":44,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 44 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.096Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 44","stack":"Error: Volume test 44\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.097Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 45 general errors in the last minute (threshold: 15)","correlationId":"e959ff29","category":"general","currentCount":45,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 45 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.097Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 45","stack":"Error: Volume test 45\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.097Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 46 general errors in the last minute (threshold: 15)","correlationId":"ed92117b","category":"general","currentCount":46,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 46 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.097Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 46","stack":"Error: Volume test 46\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.097Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 47 general errors in the last minute (threshold: 15)","correlationId":"4db0a83b","category":"general","currentCount":47,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 47 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.098Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 47","stack":"Error: Volume test 47\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.098Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 48 general errors in the last minute (threshold: 15)","correlationId":"680b81d0","category":"general","currentCount":48,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 48 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.098Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 48","stack":"Error: Volume test 48\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.098Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 49 general errors in the last minute (threshold: 15)","correlationId":"e456c987","category":"general","currentCount":49,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 49 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.099Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 49","stack":"Error: Volume test 49\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.099Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 50 general errors in the last minute (threshold: 15)","correlationId":"87767fca","category":"general","currentCount":50,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 50 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.099Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 50","stack":"Error: Volume test 50\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.099Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 51 general errors in the last minute (threshold: 15)","correlationId":"c983c8a9","category":"general","currentCount":51,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 51 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.099Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 51","stack":"Error: Volume test 51\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.100Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 52 general errors in the last minute (threshold: 15)","correlationId":"bc04c122","category":"general","currentCount":52,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 52 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.100Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 52","stack":"Error: Volume test 52\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.100Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 53 general errors in the last minute (threshold: 15)","correlationId":"04520232","category":"general","currentCount":53,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 53 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.100Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 53","stack":"Error: Volume test 53\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.100Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 54 general errors in the last minute (threshold: 15)","correlationId":"d97ea966","category":"general","currentCount":54,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 54 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.101Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 54","stack":"Error: Volume test 54\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.101Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 55 general errors in the last minute (threshold: 15)","correlationId":"282d5e4f","category":"general","currentCount":55,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 55 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.101Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 55","stack":"Error: Volume test 55\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.101Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 56 general errors in the last minute (threshold: 15)","correlationId":"38064f52","category":"general","currentCount":56,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 56 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.102Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 56","stack":"Error: Volume test 56\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.102Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 57 general errors in the last minute (threshold: 15)","correlationId":"953fcf9b","category":"general","currentCount":57,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 57 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.102Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 57","stack":"Error: Volume test 57\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.102Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 58 general errors in the last minute (threshold: 15)","correlationId":"484f33a9","category":"general","currentCount":58,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 58 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.102Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 58","stack":"Error: Volume test 58\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.103Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 59 general errors in the last minute (threshold: 15)","correlationId":"e5eb601f","category":"general","currentCount":59,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 59 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.103Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 59","stack":"Error: Volume test 59\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.103Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 60 general errors in the last minute (threshold: 15)","correlationId":"1f9d937e","category":"general","currentCount":60,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 60 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.103Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 60","stack":"Error: Volume test 60\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.103Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 61 general errors in the last minute (threshold: 15)","correlationId":"8d7f7dab","category":"general","currentCount":61,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 61 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.104Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 61","stack":"Error: Volume test 61\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.104Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 62 general errors in the last minute (threshold: 15)","correlationId":"b4a06db9","category":"general","currentCount":62,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 62 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.104Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 62","stack":"Error: Volume test 62\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.104Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 63 general errors in the last minute (threshold: 15)","correlationId":"08b547e8","category":"general","currentCount":63,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 63 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.105Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 63","stack":"Error: Volume test 63\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.105Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 64 general errors in the last minute (threshold: 15)","correlationId":"991beb94","category":"general","currentCount":64,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 64 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.109Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 64","stack":"Error: Volume test 64\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.109Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 65 general errors in the last minute (threshold: 15)","correlationId":"246fddff","category":"general","currentCount":65,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 65 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.109Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 65","stack":"Error: Volume test 65\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.109Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 66 general errors in the last minute (threshold: 15)","correlationId":"9fa8128d","category":"general","currentCount":66,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 66 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.110Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 66","stack":"Error: Volume test 66\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.110Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 67 general errors in the last minute (threshold: 15)","correlationId":"74543754","category":"general","currentCount":67,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 67 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.110Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 67","stack":"Error: Volume test 67\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.110Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 68 general errors in the last minute (threshold: 15)","correlationId":"cbff1ea9","category":"general","currentCount":68,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 68 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.110Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 68","stack":"Error: Volume test 68\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.111Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 69 general errors in the last minute (threshold: 15)","correlationId":"17222985","category":"general","currentCount":69,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 69 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.111Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 69","stack":"Error: Volume test 69\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.111Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 70 general errors in the last minute (threshold: 15)","correlationId":"3408d36a","category":"general","currentCount":70,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 70 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.111Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 70","stack":"Error: Volume test 70\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.111Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 71 general errors in the last minute (threshold: 15)","correlationId":"696ac2ae","category":"general","currentCount":71,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 71 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.112Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 71","stack":"Error: Volume test 71\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.112Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 72 general errors in the last minute (threshold: 15)","correlationId":"dae4498f","category":"general","currentCount":72,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 72 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.112Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 72","stack":"Error: Volume test 72\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.112Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 73 general errors in the last minute (threshold: 15)","correlationId":"fe2e8f9c","category":"general","currentCount":73,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 73 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.112Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 73","stack":"Error: Volume test 73\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.113Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 74 general errors in the last minute (threshold: 15)","correlationId":"4480324c","category":"general","currentCount":74,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 74 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.113Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 74","stack":"Error: Volume test 74\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.113Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 75 general errors in the last minute (threshold: 15)","correlationId":"ef55c771","category":"general","currentCount":75,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 75 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.113Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 75","stack":"Error: Volume test 75\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.113Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 76 general errors in the last minute (threshold: 15)","correlationId":"4ef765cb","category":"general","currentCount":76,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 76 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.114Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 76","stack":"Error: Volume test 76\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.114Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 77 general errors in the last minute (threshold: 15)","correlationId":"41f5ddab","category":"general","currentCount":77,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 77 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.114Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 77","stack":"Error: Volume test 77\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.114Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 78 general errors in the last minute (threshold: 15)","correlationId":"f92a46f1","category":"general","currentCount":78,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 78 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.114Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 78","stack":"Error: Volume test 78\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.115Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 79 general errors in the last minute (threshold: 15)","correlationId":"8710b140","category":"general","currentCount":79,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 79 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.115Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 79","stack":"Error: Volume test 79\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.115Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 80 general errors in the last minute (threshold: 15)","correlationId":"d3cd4ca3","category":"general","currentCount":80,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 80 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.115Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 80","stack":"Error: Volume test 80\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.116Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 81 general errors in the last minute (threshold: 15)","correlationId":"07d68b4f","category":"general","currentCount":81,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 81 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.116Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 81","stack":"Error: Volume test 81\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.116Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 82 general errors in the last minute (threshold: 15)","correlationId":"78f73d1b","category":"general","currentCount":82,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 82 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.116Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 82","stack":"Error: Volume test 82\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.116Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 83 general errors in the last minute (threshold: 15)","correlationId":"6d3bf40d","category":"general","currentCount":83,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 83 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.117Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 83","stack":"Error: Volume test 83\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.117Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 84 general errors in the last minute (threshold: 15)","correlationId":"d559e49c","category":"general","currentCount":84,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 84 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.117Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 84","stack":"Error: Volume test 84\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.117Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 85 general errors in the last minute (threshold: 15)","correlationId":"5ffe36e0","category":"general","currentCount":85,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 85 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.118Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 85","stack":"Error: Volume test 85\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.118Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 86 general errors in the last minute (threshold: 15)","correlationId":"bb471291","category":"general","currentCount":86,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 86 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.118Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 86","stack":"Error: Volume test 86\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.122Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 87 general errors in the last minute (threshold: 15)","correlationId":"e7e6405e","category":"general","currentCount":87,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 87 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.122Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 87","stack":"Error: Volume test 87\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.122Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 88 general errors in the last minute (threshold: 15)","correlationId":"9182c843","category":"general","currentCount":88,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 88 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.122Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 88","stack":"Error: Volume test 88\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.122Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 89 general errors in the last minute (threshold: 15)","correlationId":"2c9c31fc","category":"general","currentCount":89,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 89 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.123Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 89","stack":"Error: Volume test 89\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.123Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 90 general errors in the last minute (threshold: 15)","correlationId":"ac0ef69c","category":"general","currentCount":90,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 90 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.123Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 90","stack":"Error: Volume test 90\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.123Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 91 general errors in the last minute (threshold: 15)","correlationId":"cd1a1131","category":"general","currentCount":91,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 91 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 91","stack":"Error: Volume test 91\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 92 general errors in the last minute (threshold: 15)","correlationId":"13a8eb10","category":"general","currentCount":92,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 92 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 92","stack":"Error: Volume test 92\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 93 general errors in the last minute (threshold: 15)","correlationId":"d5af2396","category":"general","currentCount":93,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 93 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 93","stack":"Error: Volume test 93\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.124Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 94 general errors in the last minute (threshold: 15)","correlationId":"d0b4190a","category":"general","currentCount":94,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 94 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.125Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 94","stack":"Error: Volume test 94\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.125Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 95 general errors in the last minute (threshold: 15)","correlationId":"865d1fe2","category":"general","currentCount":95,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 95 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.125Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 95","stack":"Error: Volume test 95\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.125Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 96 general errors in the last minute (threshold: 15)","correlationId":"230ac2cb","category":"general","currentCount":96,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 96 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 96","stack":"Error: Volume test 96\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 97 general errors in the last minute (threshold: 15)","correlationId":"bf40767f","category":"general","currentCount":97,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 97 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 97","stack":"Error: Volume test 97\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 98 general errors in the last minute (threshold: 15)","correlationId":"7cc2c75d","category":"general","currentCount":98,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 98 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 98","stack":"Error: Volume test 98\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.126Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 99 general errors in the last minute (threshold: 15)","correlationId":"11463328","category":"general","currentCount":99,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 99 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.127Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Volume test 99","stack":"Error: Volume test 99\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:331:37)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.127Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 100 general errors in the last minute (threshold: 15)","correlationId":"481fd5da","category":"general","currentCount":100,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 100 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.128Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 0","stack":"Error: Perf test 0\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.128Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 1","stack":"Error: Perf test 1\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.128Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 2","stack":"Error: Perf test 2\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.128Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 3","stack":"Error: Perf test 3\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.128Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 4","stack":"Error: Perf test 4\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 5","stack":"Error: Perf test 5\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 6","stack":"Error: Perf test 6\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 7","stack":"Error: Perf test 7\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 8","stack":"Error: Perf test 8\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 9","stack":"Error: Perf test 9\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.129Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 10","stack":"Error: Perf test 10\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.130Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 11","stack":"Error: Perf test 11\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.130Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 12","stack":"Error: Perf test 12\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.130Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 13","stack":"Error: Perf test 13\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.130Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 14","stack":"Error: Perf test 14\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.130Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 15 general errors in the last minute (threshold: 15)","correlationId":"3df1fd82","category":"general","currentCount":15,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 15 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.131Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 15","stack":"Error: Perf test 15\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.131Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 16 general errors in the last minute (threshold: 15)","correlationId":"b9b977ee","category":"general","currentCount":16,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 16 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.131Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 16","stack":"Error: Perf test 16\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.131Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 17 general errors in the last minute (threshold: 15)","correlationId":"1b9a1cab","category":"general","currentCount":17,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 17 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.135Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 17","stack":"Error: Perf test 17\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.135Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 18 general errors in the last minute (threshold: 15)","correlationId":"3983062a","category":"general","currentCount":18,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 18 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.135Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 18","stack":"Error: Perf test 18\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.135Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 19 general errors in the last minute (threshold: 15)","correlationId":"3d8bfc57","category":"general","currentCount":19,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 19 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.136Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 19","stack":"Error: Perf test 19\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.136Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 20 general errors in the last minute (threshold: 15)","correlationId":"18f1a7c0","category":"general","currentCount":20,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 20 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.136Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 20","stack":"Error: Perf test 20\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.136Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 21 general errors in the last minute (threshold: 15)","correlationId":"d4c5dfdc","category":"general","currentCount":21,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 21 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.136Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 21","stack":"Error: Perf test 21\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.137Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 22 general errors in the last minute (threshold: 15)","correlationId":"66f70daa","category":"general","currentCount":22,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 22 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.137Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 22","stack":"Error: Perf test 22\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.137Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 23 general errors in the last minute (threshold: 15)","correlationId":"7a236cae","category":"general","currentCount":23,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 23 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.137Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 23","stack":"Error: Perf test 23\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.137Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 24 general errors in the last minute (threshold: 15)","correlationId":"8d625516","category":"general","currentCount":24,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 24 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.138Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 24","stack":"Error: Perf test 24\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.138Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 25 general errors in the last minute (threshold: 15)","correlationId":"d07c4ec8","category":"general","currentCount":25,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 25 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.138Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 25","stack":"Error: Perf test 25\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.138Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 26 general errors in the last minute (threshold: 15)","correlationId":"2b59fd6d","category":"general","currentCount":26,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 26 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.139Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 26","stack":"Error: Perf test 26\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.139Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 27 general errors in the last minute (threshold: 15)","correlationId":"b785485c","category":"general","currentCount":27,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 27 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.139Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 27","stack":"Error: Perf test 27\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.139Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 28 general errors in the last minute (threshold: 15)","correlationId":"600e5676","category":"general","currentCount":28,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 28 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.139Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 28","stack":"Error: Perf test 28\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.140Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 29 general errors in the last minute (threshold: 15)","correlationId":"1811fe12","category":"general","currentCount":29,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 29 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.140Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 29","stack":"Error: Perf test 29\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.140Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 30 general errors in the last minute (threshold: 15)","correlationId":"7a083f85","category":"general","currentCount":30,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 30 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.140Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 30","stack":"Error: Perf test 30\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.140Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 31 general errors in the last minute (threshold: 15)","correlationId":"266ac8e2","category":"general","currentCount":31,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 31 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.141Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 31","stack":"Error: Perf test 31\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.141Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 32 general errors in the last minute (threshold: 15)","correlationId":"30c25107","category":"general","currentCount":32,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 32 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.141Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 32","stack":"Error: Perf test 32\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.141Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 33 general errors in the last minute (threshold: 15)","correlationId":"a624eb0a","category":"general","currentCount":33,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 33 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.142Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 33","stack":"Error: Perf test 33\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.142Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 34 general errors in the last minute (threshold: 15)","correlationId":"5ba33553","category":"general","currentCount":34,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 34 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.142Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 34","stack":"Error: Perf test 34\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.142Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 35 general errors in the last minute (threshold: 15)","correlationId":"8d76e66f","category":"general","currentCount":35,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 35 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.143Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 35","stack":"Error: Perf test 35\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.143Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 36 general errors in the last minute (threshold: 15)","correlationId":"87b5c5ca","category":"general","currentCount":36,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 36 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.143Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 36","stack":"Error: Perf test 36\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.143Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 37 general errors in the last minute (threshold: 15)","correlationId":"9a91e03d","category":"general","currentCount":37,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 37 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.143Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 37","stack":"Error: Perf test 37\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.144Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 38 general errors in the last minute (threshold: 15)","correlationId":"4952ae5c","category":"general","currentCount":38,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 38 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.144Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 38","stack":"Error: Perf test 38\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.144Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 39 general errors in the last minute (threshold: 15)","correlationId":"838088fd","category":"general","currentCount":39,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 39 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.144Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 39","stack":"Error: Perf test 39\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.148Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 40 general errors in the last minute (threshold: 15)","correlationId":"76f965b4","category":"general","currentCount":40,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 40 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.148Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 40","stack":"Error: Perf test 40\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.149Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 41 general errors in the last minute (threshold: 15)","correlationId":"f8fb40e2","category":"general","currentCount":41,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 41 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.149Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 41","stack":"Error: Perf test 41\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.149Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 42 general errors in the last minute (threshold: 15)","correlationId":"bf272e1e","category":"general","currentCount":42,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 42 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.149Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 42","stack":"Error: Perf test 42\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.149Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 43 general errors in the last minute (threshold: 15)","correlationId":"5b82f05e","category":"general","currentCount":43,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 43 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.150Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 43","stack":"Error: Perf test 43\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.150Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 44 general errors in the last minute (threshold: 15)","correlationId":"83a32734","category":"general","currentCount":44,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 44 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.150Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 44","stack":"Error: Perf test 44\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.150Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 45 general errors in the last minute (threshold: 15)","correlationId":"fd60cc66","category":"general","currentCount":45,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 45 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.150Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 45","stack":"Error: Perf test 45\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.151Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 46 general errors in the last minute (threshold: 15)","correlationId":"9e67c897","category":"general","currentCount":46,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 46 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.151Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 46","stack":"Error: Perf test 46\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.151Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 47 general errors in the last minute (threshold: 15)","correlationId":"9b53d591","category":"general","currentCount":47,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 47 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.151Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 47","stack":"Error: Perf test 47\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.151Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 48 general errors in the last minute (threshold: 15)","correlationId":"0b97b8a3","category":"general","currentCount":48,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 48 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.152Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 48","stack":"Error: Perf test 48\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.152Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 49 general errors in the last minute (threshold: 15)","correlationId":"7ed2a4dd","category":"general","currentCount":49,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 49 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.152Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Perf test 49","stack":"Error: Perf test 49\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:349:33)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","category":"general","severity":"ERROR","context":{}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      {"timestamp":"2025-09-26T01:28:27.152Z","level":"WARN","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"High error rate detected: 50 general errors in the last minute (threshold: 15)","correlationId":"ed99f50d","category":"general","currentCount":50,"threshold":15,"severity":"WARN"}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      üö® ALERT: High error rate detected: 50 general errors in the last minute (threshold: 15)

      at ErrorTracker.log [as sendAlert] (utils/errorTracker.js:240:13)

    console.log
      {"timestamp":"2025-09-26T01:28:27.154Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Middleware test error","correlationId":"test-123","stack":"Error: Middleware test error\n    at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/integration/utils/errorTracker.test.js:391:25)\n    at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)","name":"Error","route":"/test","method":"GET","userAgent":"test-user-agent","ip":"127.0.0.1","category":"general","severity":"ERROR","context":{"correlationId":"test-123","route":"/test","method":"GET","userAgent":"test-user-agent","ip":"127.0.0.1","body":{},"query":{},"params":{}}}

      at Logger.log [as output] (utils/logger.js:91:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/health HTTP/1.1" 200 142 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/recent HTTP/1.1" 501 475 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/recent?limit=10&days=30&symbol=AAPL&type=buy&status=executed HTTP/1.1" 501 483 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/recent HTTP/1.1" 501 475 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/recent HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/import/status HTTP/1.1" 200 69 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/import/status HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "POST /api/trades/import/alpaca HTTP/1.1" 400 129 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "POST /api/trades/import/alpaca HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/summary HTTP/1.1" 200 181 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/summary HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/positions HTTP/1.1" 200 88 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/positions?status=open&limit=10&offset=0 HTTP/1.1" 200 88 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/positions HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=1W HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=1M HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=3M HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=6M HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=1Y HTTP/1.1" 200 719 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=YTD HTTP/1.1" 200 720 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics/overview HTTP/1.1" 200 289 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics/overview HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/history HTTP/1.1" 200 578 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/history?symbol=AAPL&limit=10&offset=0&sortBy=execution_time&sortOrder=desc HTTP/1.1" 200 578 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/history HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/performance HTTP/1.1" 200 92 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/performance HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/insights HTTP/1.1" 200 332 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/insights?limit=5 HTTP/1.1" 200 332 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/insights HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/export HTTP/1.1" 200 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/export?format=csv HTTP/1.1" 200 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/export?startDate=2023-01-01&endDate=2023-12-31 HTTP/1.1" 200 157 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/export HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "DELETE /api/trades/data HTTP/1.1" 400 98 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "DELETE /api/trades/data HTTP/1.1" 200 49 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "DELETE /api/trades/data HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics?timeframe=invalid HTTP/1.1" 200 724 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/analytics/invalid-id HTTP/1.1" 400 73 "-" "-"
PASS tests/integration/routes/trades.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üïí Recent trades endpoint disabled for user: dev-user-bypass

      at log (routes/trades.js:358:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üïí Recent trades endpoint disabled for user: dev-user-bypass

      at log (routes/trades.js:358:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üïí Recent trades endpoint disabled for user: dev-user-bypass

      at log (routes/trades.js:358:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Getting trade import status for user: dev-user-bypass

      at log (routes/trades.js:634:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîÑ [TRADES] Import requested for user: dev-user-bypass

      at log (routes/trades.js:824:13)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at getUserApiKey (/home/stocks/algo/webapp/lambda/routes/trades.js:409:10)
          at /home/stocks/algo/webapp/lambda/routes/trades.js:827:25

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at getUserApiKey (routes/trades.js:409:10)
      at routes/trades.js:827:25

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Database query error: {
        error: 'column "side" does not exist',
        query: '\n' +
          '        SELECT \n' +
          '          COUNT(*) as total_trades,\n' +
          "          COUNT(CASE WHEN side = 'buy' THEN 1 E...",
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at TradeAnalyticsService.getTradeAnalysisSummary (routes/trades.js:531:29)
      at routes/trades.js:899:21

    console.error
      Trade analysis summary error: error: column "side" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at TradeAnalyticsService.getTradeAnalysisSummary (/home/stocks/algo/webapp/lambda/routes/trades.js:531:29)
          at /home/stocks/algo/webapp/lambda/routes/trades.js:899:21 {
        length: 104,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '80',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      561 |       };
      562 |     } catch (error) {
    > 563 |       console.error("Trade analysis summary error:", error);
          |               ^
      564 |       return {
      565 |         insights: [`Error: ${error.message}`],
      566 |         summary: "Analysis unavailable - database error",

      at TradeAnalyticsService.error [as getTradeAnalysisSummary] (routes/trades.js:563:15)
      at routes/trades.js:899:21

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 3M

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 1W

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 1M

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 3M

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 6M

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: 1Y

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: YTD

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user dev-user-bypass, timeframe: 3M

      at log (routes/trades.js:1268:13)

    console.log
      üìä Found 0 stored trades for analytics

      at log (routes/trades.js:1385:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Trade history request received for user: dev-user-bypass

      at log (routes/trades.js:1826:13)

    console.log
      üîë Retrieving API credentials for Alpaca...

      at log (routes/trades.js:1851:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at getUserApiKey (/home/stocks/algo/webapp/lambda/routes/trades.js:409:10)
          at /home/stocks/algo/webapp/lambda/routes/trades.js:1852:27

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at getUserApiKey (routes/trades.js:409:10)
      at routes/trades.js:1852:27

    console.log
      üîÑ No broker API credentials found, falling back to database trade data...

      at log (routes/trades.js:1957:13)

    console.log
      ‚úÖ Retrieved 2 trades from database (2 total)

      at log (routes/trades.js:2003:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Trade history request received for user: dev-user-bypass

      at log (routes/trades.js:1826:13)

    console.log
      üîë Retrieving API credentials for Alpaca...

      at log (routes/trades.js:1851:15)

    console.log
      JWT verification failed in test mode: jwt malformed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:172:19)

    console.error
      API key retrieval error: Error: JWT validation failed: JWT string does not consist of exactly 3 parts (header, payload, signature)
          at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:831:15)
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1404:14)
          at getUserApiKey (/home/stocks/algo/webapp/lambda/routes/trades.js:409:10)
          at /home/stocks/algo/webapp/lambda/routes/trades.js:1852:27

      939 |     } catch (error) {
      940 |       this.recordFailure(error);
    > 941 |       console.error("API key retrieval error:", error);
          |               ^
      942 |
      943 |       if (error.message.includes("circuit breaker")) {
      944 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:941:15)
      at getApiKey (utils/apiKeyService.js:1404:14)
      at getUserApiKey (routes/trades.js:409:10)
      at routes/trades.js:1852:27

    console.log
      üîÑ No broker API credentials found, falling back to database trade data...

      at log (routes/trades.js:1957:13)

    console.log
      ‚úÖ Retrieved 2 trades from database (2 total)

      at log (routes/trades.js:2003:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Trade analytics requested for user: dev-user-bypass, timeframe: invalid

      at log (routes/trades.js:992:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.error
      Database query error: {
        error: 'column "side" does not exist',
        query: '\n' +
          '        SELECT \n' +
          '          COUNT(*) as total_trades,\n' +
          "          COUNT(CASE WHEN side = 'buy' THEN 1 E...",
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at TradeAnalyticsService.getTradeAnalysisSummary (routes/trades.js:531:29)
      at routes/trades.js:899:21

    console.error
      Trade analysis summary error: error: column "side" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at TradeAnalyticsService.getTradeAnalysisSummary (/home/stocks/algo/webapp/lambda/routes/trades.js:531:29)
          at /home/stocks/algo/webapp/lambda/routes/trades.js:899:21 {
        length: 104,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '80',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      561 |       };
      562 |     } catch (error) {
    > 563 |       console.error("Trade analysis summary error:", error);
          |               ^
      564 |       return {
      565 |         insights: [`Error: ${error.message}`],
      566 |         summary: "Analysis unavailable - database error",

      at TradeAnalyticsService.error [as getTradeAnalysisSummary] (routes/trades.js:563:15)
      at routes/trades.js:899:21

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades HTTP/1.1" 200 281 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/health HTTP/1.1" 200 142 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:27 +0000] "GET /api/trades/summary HTTP/1.1" 200 181 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=AAPL HTTP/1.1" 200 1336 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?timeframe=weekly HTTP/1.1" 200 4477 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?limit=10&page=1 HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?limit=5&page=2 HTTP/1.1" 200 3290 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=aapl HTTP/1.1" 404 174 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=BRK.A HTTP/1.1" 404 174 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=NONEXISTENT HTTP/1.1" 404 174 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=INVALID_TEST_SYMBOL HTTP/1.1" 404 174 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?limit=invalid&page=invalid HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?limit=99999 HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?limit=-1&page=-1 HTTP/1.1" 200 2322 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
FAIL tests/integration/routes/positioning.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: AAPL, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: weekly

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: aapl, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: BRK.A, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: NONEXISTENT, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: INVALID_TEST_SYMBOL, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: AAPL, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.error
      Database query error: {
        error: 'column s.quarterly_revenue_growth does not exist',
        query: '\n' +
          '      SELECT\n' +
          '        AVG(COALESCE(s.quarterly_revenue_growth, 0)) as avg_change,\n' +
          '        COUNT(CASE...',
        params: 'no parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/positioning.js:118:34

    console.error
      Error fetching positioning summary: error: column s.quarterly_revenue_growth does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/positioning.js:118:34 {
        length: 124,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '36',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      177 |     });
      178 |   } catch (error) {
    > 179 |     console.error("Error fetching positioning summary:", error);
          |             ^
      180 |     res
      181 |       .status(500)
      182 |       .json({ success: false, error: "Failed to fetch positioning summary" });

      at error (routes/positioning.js:179:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: all, timeframe:

      at log (routes/positioning.js:29:13)

    console.log
      üìä Stock positioning data requested - symbol: BRK.A, timeframe: daily

      at log (routes/positioning.js:29:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Positioning Routes ‚Ä∫ Authentication ‚Ä∫ should require authentication for positioning summary

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      264 |       // No auth header
      265 |
    > 266 |       expect([200, 401].includes(response.status)).toBe(true);
          |                                                    ^
      267 |     });
      268 |
      269 |     test("should handle invalid authentication", async () => {

      at Object.toBe (tests/integration/routes/positioning.integration.test.js:266:52)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=AAPL HTTP/1.1" 200 1336 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/summary HTTP/1.1" 500 63 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks HTTP/1.1" 200 4476 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=&timeframe= HTTP/1.1" 200 4471 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/positioning/stocks?symbol=BRK%2EA HTTP/1.1" 404 174 "-" "-"
FAIL tests/integration/routes/sectors.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      üìà Sector performance requested, period: 1m, limit: 10

      at log (routes/sectors.js:339:13)

    console.log
      üìà Sector performance requested, period: 1M, limit: 10

      at log (routes/sectors.js:339:13)

    console.log
      üèÜ Sector leaders requested, period: 1d

      at log (routes/sectors.js:888:13)

    console.log
      üîÑ Sector rotation analysis requested, timeframe: 3m

      at log (routes/sectors.js:817:13)

    console.log
      üìä Fetching stocks for sector: Technology

      at log (routes/sectors.js:38:13)

    console.log
      ‚úÖ Found 2 stocks in Technology sector

      at log (routes/sectors.js:75:13)

    console.log
      üìä Fetching stocks for sector: Technology

      at log (routes/sectors.js:38:13)

    console.log
      ‚úÖ Found 2 stocks in Technology sector

      at log (routes/sectors.js:75:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sectors Routes ‚Ä∫ GET /api/sectors/performance ‚Ä∫ should handle period parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      47 |       );
      48 |
    > 49 |       expect(response.status).toBe(200);
         |                               ^
      50 |       expect(response.body.success).toBe(true);
      51 |     });
      52 |   });

      at Object.toBe (tests/integration/routes/sectors.integration.test.js:49:31)

  ‚óè Sectors Routes ‚Ä∫ GET /api/sectors/leaders ‚Ä∫ should return sector leaders

    expect(received).toHaveProperty(path)

    Expected path: "gainers"
    Received path: []

    Received value: {"last_updated": "2025-09-26T01:28:28.958Z", "period": "1d", "sector_breadth": {"advancing_sectors": 7, "breadth_ratio": 1.75, "declining_sectors": 4, "neutral_sectors": 0}, "top_performing_sectors": [{"return": 0, "sector": "Technology", "volume_flow": 2400000000}, {"return": 0, "sector": "Healthcare", "volume_flow": 1800000000}, {"return": 0, "sector": "Consumer Discretionary", "volume_flow": 1500000000}]}

      58 |       expect(response.status).toBe(200);
      59 |       expect(response.body.success).toBe(true);
    > 60 |       expect(response.body.data).toHaveProperty("gainers");
         |                                  ^
      61 |       expect(response.body.data).toHaveProperty("losers");
      62 |     });
      63 |   });

      at Object.toHaveProperty (tests/integration/routes/sectors.integration.test.js:60:34)

  ‚óè Sectors Routes ‚Ä∫ GET /api/sectors/rotation ‚Ä∫ should return sector rotation analysis

    expect(received).toHaveProperty(path)

    Expected path: "rotation"
    Received path: []

    Received value: {"analysis_date": "2025-09-26T01:28:28.961Z", "last_updated": "2025-09-26T01:28:28.961Z", "market_cycle": {"confidence": 0, "current_phase": "EARLY_CYCLE", "duration_estimate": 60}, "sector_rankings": [{"flow_direction": "INFLOW", "momentum": 8.2, "relative_strength": 92.5, "sector": "Technology"}, {"flow_direction": "INFLOW", "momentum": 6.1, "relative_strength": 87.3, "sector": "Healthcare"}, {"flow_direction": "OUTFLOW", "momentum": -2.4, "relative_strength": 45.8, "sector": "Financials"}, {"flow_direction": "OUTFLOW", "momentum": -4.7, "relative_strength": 38.2, "sector": "Energy"}, {"flow_direction": "NEUTRAL", "momentum": 3.8, "relative_strength": 74.1, "sector": "Consumer Discretionary"}], "timeframe": "3m"}

      69 |       expect(response.status).toBe(200);
      70 |       expect(response.body.success).toBe(true);
    > 71 |       expect(response.body.data).toHaveProperty("rotation");
         |                                  ^
      72 |       expect(response.body.data).toHaveProperty("momentum");
      73 |     });
      74 |   });

      at Object.toHaveProperty (tests/integration/routes/sectors.integration.test.js:71:34)

  ‚óè Sectors Routes ‚Ä∫ GET /api/sectors/:sector ‚Ä∫ should return specific sector data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      78 |       const response = await request(app).get("/api/sectors/Technology");
      79 |
    > 80 |       expect(response.status).toBe(200);
         |                               ^
      81 |       expect(response.body.success).toBe(true);
      82 |       expect(response.body.data).toHaveProperty("sector");
      83 |       expect(response.body.data).toHaveProperty("stocks");

      at Object.toBe (tests/integration/routes/sectors.integration.test.js:80:31)

  ‚óè Sectors Routes ‚Ä∫ GET /api/sectors/heatmap ‚Ä∫ should return sector heatmap data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      109 |       const response = await request(app).get("/api/sectors/heatmap");
      110 |
    > 111 |       expect(response.status).toBe(200);
          |                               ^
      112 |       expect(response.body.success).toBe(true);
      113 |       expect(Array.isArray(response.body.data)).toBe(true);
      114 |     });

      at Object.toBe (tests/integration/routes/sectors.integration.test.js:111:31)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors HTTP/1.1" 200 120 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/performance HTTP/1.1" 200 499 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/performance?period=1M HTTP/1.1" 400 82 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/leaders HTTP/1.1" 200 443 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/rotation HTTP/1.1" 200 734 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/Technology HTTP/1.1" 401 74 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/Technology/stocks HTTP/1.1" 200 357 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/Technology/stocks?limit=10 HTTP/1.1" 200 357 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:28 +0000] "GET /api/sectors/heatmap HTTP/1.1" 401 74 "-" "-"
FAIL tests/integration/analytics/sectors.test.js
  ‚óè Console

    console.log
      JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

    console.log
      üö® Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Processing request: GET /api/sectors/performance

      at log (index.js:429:11)

    console.log
      Initializing database connection...

      at log (index.js:388:13)

    console.log
      Database connection established successfully

      at log (index.js:414:17)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìà Sector performance requested, period: 1m, limit: 10

      at log (routes/sectors.js:339:13)

    console.log
      Processing request: GET /api/sectors/rotation

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üîÑ Sector rotation analysis requested, timeframe: 3m

      at log (routes/sectors.js:817:13)

    console.log
      Processing request: GET /api/sectors/technology/stocks

      at log (index.js:429:11)

    console.log
      Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

    console.log
      üìä Fetching stocks for sector: technology

      at log (routes/sectors.js:38:13)

    console.log
      ‚úÖ Found 2 stocks in technology sector

      at log (routes/sectors.js:75:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

  ‚óè Sectors Analysis API ‚Ä∫ Sector Performance ‚Ä∫ should retrieve sector performance data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      30 |           );
      31 |
    > 32 |           expect(hasPerformanceData).toBe(true);
         |                                      ^
      33 |         }
      34 |       }
      35 |     });

      at Object.toBe (tests/integration/analytics/sectors.test.js:32:38)

  ‚óè Sectors Analysis API ‚Ä∫ Sector Rotation ‚Ä∫ should analyze sector rotation patterns

    expect(received).toBeTruthy()

    Received: false

      52 |           );
      53 |
    > 54 |           expect(hasRotationData || Array.isArray(data)).toBeTruthy();
         |                                                          ^
      55 |         }
      56 |       }
      57 |     });

      at Object.toBeTruthy (tests/integration/analytics/sectors.test.js:54:58)

::ffff:127.0.0.1 - - [26/Sep/2025:01:28:29 +0000] "GET /api/sectors/performance HTTP/1.1" 200 499 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:29 +0000] "GET /api/sectors/rotation HTTP/1.1" 200 734 "-" "-"
::ffff:127.0.0.1 - - [26/Sep/2025:01:28:29 +0000] "GET /api/sectors/technology/stocks HTTP/1.1" 200 357 "-" "-"
PASS tests/unit/routes/stocks.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      Stocks main endpoint called with params: {}

      at log (routes/stocks.js:786:13)

    console.log
      Triggering workflow deploy

      at log (routes/stocks.js:787:13)

    console.log
      Query params: { whereClause: 'WHERE 1=1', params: [], limit: 50, offset: 0 }

      at log (routes/stocks.js:835:13)

    console.log
      Executing FAST queries with schema validation...

      at log (routes/stocks.js:920:13)

    console.log
      Executing comprehensive stocks query with timeout protection...

      at log (routes/stocks.js:923:13)

    console.log
      FAST query results: 5 stocks, 5 estimated total

      at log (routes/stocks.js:967:13)

    console.log
      üîç Stock search requested for: AAPL

      at log (routes/stocks.js:1671:13)

    console.log
      üìã Stock list endpoint called

      at log (routes/stocks.js:359:13)

    console.log
      Sectors endpoint called (public)

      at log (routes/stocks.js:32:13)

    console.log
      ‚úÖ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:75:15)

    console.log
      Individual stock request for AAPL

      at log (routes/stocks.js:642:13)

    console.log
      üîç Stock search requested for: AAPL

      at log (routes/stocks.js:1671:13)

    console.log
      üîç Stock search requested for: A

      at log (routes/stocks.js:1671:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Stock details requested for AAPL

      at log (routes/stocks.js:2576:13)

    console.log
      Stock details requested for INVALID123

      at log (routes/stocks.js:2576:13)

    console.log
      Stock details requested for AAPL

      at log (routes/stocks.js:2576:13)

    console.log
      Stock price requested for AAPL, timeframe: 1d, historical: false

      at log (routes/stocks.js:2805:13)

    console.log
      Stock price requested for AAPL, timeframe: 1d, historical: false

      at log (routes/stocks.js:2805:13)

    console.log
      Stock price requested for AAPL, timeframe: 1d, historical: true

      at log (routes/stocks.js:2805:13)

    console.log
      Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:432:13)

    console.log
      Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:432:13)

    console.log
      Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:432:13)

    console.log
      Stock recommendations requested for AAPL, criteria: all

      at log (routes/stocks.js:2753:13)

    console.log
      Stock recommendations requested for AAPL, criteria: technical

      at log (routes/stocks.js:2753:13)

    console.log
      Comparing stocks: AAPL, MSFT, GOOGL

      at log (routes/stocks.js:579:13)

    console.log
      Response status: 200

      at Object.log (tests/unit/routes/stocks.test.js:357:15)

    console.log
      Response body: {
        "success": true,
        "data": {
          "comparison": [
            {
              "symbol": "AAPL",
              "name": "Apple Inc.",
              "sector": "Technology",
              "industry": "Consumer Electronics",
              "price": null,
              "marketcap": null,
              "peratio": "25.5",
              "dividendyield": "0.52",
              "beta": 0,
              "eps": "6.15"
            },
            {
              "symbol": "MSFT",
              "name": "Microsoft Corp.",
              "sector": "Technology",
              "industry": "Software",
              "price": "350.75",
              "marketcap": "2600000000000",
              "peratio": "28.8",
              "dividendyield": "0.68",
              "beta": 0,
              "eps": "11.75"
            },
            {
              "symbol": "MSFT",
              "name": "Microsoft Corp.",
              "sector": "Technology",
              "industry": "Software",
              "price": "425.30",
              "marketcap": "3100000000000",
              "peratio": "28.8",
              "dividendyield": "0.68",
              "beta": 0,
              "eps": "11.75"
            },
            {
              "symbol": "GOOGL",
              "name": "Alphabet Inc.",
              "sector": "Technology",
              "industry": "Internet Content & Information",
              "price": "2750.40",
              "marketcap": "1800000000000",
              "peratio": "22.1",
              "dividendyield": "0.0",
              "beta": 0,
              "eps": "5.89"
            },
            {
              "symbol": "GOOGL",
              "name": "Alphabet Inc.",
              "sector": "Technology",
              "industry": "Internet Content & Information",
              "price": "138.45",
              "marketcap": "1700000000000",
              "peratio": "22.1",
              "dividendyield": "0.0",
              "beta": 0,
              "eps": "5.89"
            }
          ],
          "symbols": [
            "AAPL",
            "MSFT",
            "GOOGL"
          ],
          "timestamp": "2025-09-26T01:28:30.035Z"
        }
      }

      at Object.log (tests/unit/routes/stocks.test.js:358:15)

    console.log
      Comparing stocks: AAPL, MSFT

      at log (routes/stocks.js:579:13)

    console.log
      Comparing stocks: STOCK0, STOCK1, STOCK2, STOCK3, STOCK4

      at log (routes/stocks.js:579:13)

    console.log
      Fetching market statistics

      at log (routes/stocks.js:501:13)

    console.log
      Fetching market statistics

      at log (routes/stocks.js:501:13)

    console.log
      Individual stock request for details

      at log (routes/stocks.js:642:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/unit/routes/scores.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 0 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores requested for symbol: AAPL - using precomputed table

      at log (routes/scores.js:159:13)

    console.log
      üìä Scores requested for symbol: AAPL - using precomputed table

      at log (routes/scores.js:159:13)

    console.log
      üìä Scores requested for symbol: NONEXISTENT - using precomputed table

      at log (routes/scores.js:159:13)

    console.log
      üìä Scores requested for symbol: TEST - using precomputed table

      at log (routes/scores.js:159:13)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 0 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      üìä Scores endpoint called - using precomputed table

      at log (routes/scores.js:23:13)

    console.log
      üìä Scores query result: 3 rows from stock_scores table

      at log (routes/scores.js:56:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/integration/database/rollback-scenarios.integration.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/unit/routes/portfolio.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio holdings endpoint called for authenticated user: dev-user-bypass

      at log (routes/portfolio.js:1750:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio performance endpoint called for user: dev-user-bypass, timeframe: 1y

      at log (routes/portfolio.js:1196:13)

    console.log
      üìä Retrieved 0 performance data points

      at log (routes/portfolio.js:1224:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio analytics endpoint called for authenticated user: dev-user-bypass, timeframe: 1y

      at log (routes/portfolio.js:369:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üí∞ Portfolio value requested for user: dev-user-bypass

      at log (routes/portfolio.js:6098:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio risk analysis endpoint called for user: dev-user-bypass

      at log (routes/portfolio.js:840:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Portfolio returns requested for user: dev-user-bypass, period: 1y

      at log (routes/portfolio.js:6196:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio benchmark endpoint called for SPY, timeframe: 1y

      at log (routes/portfolio.js:1526:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio risk endpoint called for user: dev-user-bypass

      at log (routes/portfolio.js:2240:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio risk metrics endpoint called for user: dev-user-bypass

      at log (routes/portfolio.js:907:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio rebalance execution called for user: dev-user-bypass

      at log (routes/portfolio.js:2163:13)

    console.error
      Database query error: {
        error: 'null value in column "total_value" of relation "portfolio_transactions" violates not-null constraint',
        query: '\n' +
          '          INSERT INTO portfolio_transactions (\n' +
          '            user_id, symbol, transaction_type, quant...',
        params: '7 parameters',
        code: '23502'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/portfolio.js:2203:9

    console.error
      Portfolio rebalance execution error: error: null value in column "total_value" of relation "portfolio_transactions" violates not-null constraint
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/portfolio.js:2203:9 {
        length: 342,
        severity: 'ERROR',
        code: '23502',
        detail: 'Failing row contains (100, dev-user-bypass, AAPL, rebalance, 10, 150, null, 0, completed, 2025-09-25 20:28:30.512, 0, null, 0.0000).',
        hint: undefined,
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: 'public',
        table: 'portfolio_transactions',
        column: 'total_value',
        dataType: undefined,
        constraint: undefined,
        file: 'execMain.c',
        line: '2005',
        routine: 'ExecConstraints'
      }

      2224 |     });
      2225 |   } catch (error) {
    > 2226 |     console.error("Portfolio rebalance execution error:", error);
           |             ^
      2227 |     res.status(500).json({
      2228 |       success: false,
      2229 |       error: "Failed to execute rebalance",

      at error (routes/portfolio.js:2226:13)

    console.log
      Expected database schema issue: null value in column "total_value" of relation "portfolio_transactions" violates not-null constraint

      at Object.log (tests/unit/routes/portfolio.test.js:205:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio rebalance execution called for user: dev-user-bypass

      at log (routes/portfolio.js:2163:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio rebalance execution called for user: dev-user-bypass

      at log (routes/portfolio.js:2163:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio rebalance execution called for user: dev-user-bypass

      at log (routes/portfolio.js:2163:13)

    console.error
      Database query error: {
        error: 'null value in column "total_value" of relation "portfolio_transactions" violates not-null constraint',
        query: '\n' +
          '          INSERT INTO portfolio_transactions (\n' +
          '            user_id, symbol, transaction_type, quant...',
        params: '7 parameters',
        code: '23502'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/portfolio.js:2203:9

    console.error
      Portfolio rebalance execution error: error: null value in column "total_value" of relation "portfolio_transactions" violates not-null constraint
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/portfolio.js:2203:9 {
        length: 341,
        severity: 'ERROR',
        code: '23502',
        detail: 'Failing row contains (101, dev-user-bypass, AAPL, rebalance, 1, 150, null, 0, completed, 2025-09-25 20:28:30.601, 0, null, 0.0000).',
        hint: undefined,
        position: undefined,
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: 'public',
        table: 'portfolio_transactions',
        column: 'total_value',
        dataType: undefined,
        constraint: undefined,
        file: 'execMain.c',
        line: '2005',
        routine: 'ExecConstraints'
      }

      2224 |     });
      2225 |   } catch (error) {
    > 2226 |     console.error("Portfolio rebalance execution error:", error);
           |             ^
      2227 |     res.status(500).json({
      2228 |       success: false,
      2229 |       error: "Failed to execute rebalance",

      at error (routes/portfolio.js:2226:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio allocation requested for user: dev-user-bypass

      at log (routes/portfolio.js:5867:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio optimization endpoint called for authenticated user: dev-user-bypass

      at log (routes/portfolio.js:2754:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio optimization endpoint called for authenticated user: dev-user-bypass

      at log (routes/portfolio.js:2754:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio optimization endpoint called for authenticated user: dev-user-bypass

      at log (routes/portfolio.js:2754:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio optimization execution requested for user: dev-user-bypass

      at log (routes/portfolio.js:2822:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio analysis requested for user: dev-user-bypass, period: 1y

      at log (routes/portfolio.js:618:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio analysis requested for user: dev-user-bypass, period: 1y

      at log (routes/portfolio.js:618:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Portfolio analysis requested for user: dev-user-bypass, period: 1y

      at log (routes/portfolio.js:618:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio rebalance endpoint called for user: dev-user-bypass, strategy: balanced

      at log (routes/portfolio.js:1884:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      POST /rebalance called for user: dev-user-bypass

      at log (routes/portfolio.js:2066:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      POST /rebalance called for user: dev-user-bypass

      at log (routes/portfolio.js:2066:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio metrics requested for user: dev-user-bypass, period: 30d, include_risk: false

      at log (routes/portfolio.js:2880:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio metrics requested for user: dev-user-bypass, period: 30d, include_risk: true

      at log (routes/portfolio.js:2880:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio metrics requested for user: dev-user-bypass, period: 30d, include_risk: false

      at log (routes/portfolio.js:2880:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Detailed holdings requested for user: dev-user-bypass, min_value: 0, sort: market_value desc

      at log (routes/portfolio.js:3034:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Detailed holdings requested for user: dev-user-bypass, min_value: 1000, sort: market_value desc

      at log (routes/portfolio.js:3034:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Detailed holdings requested for user: dev-user-bypass, min_value: 0, sort: unrealized_pnl desc

      at log (routes/portfolio.js:3034:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üëÄ Portfolio watchlist requested for user: dev-user-bypass

      at log (routes/portfolio.js:5823:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üëÄ Portfolio watchlist requested for user: dev-user-bypass

      at log (routes/portfolio.js:5823:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio holdings endpoint called for authenticated user: dev-user-bypass

      at log (routes/portfolio.js:1750:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      Portfolio metrics requested for user: dev-user-bypass, period: invalid, include_risk: notboolean

      at log (routes/portfolio.js:2880:11)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/unit/routes/analytics.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Performance analytics requested for user: dev-user-bypass, period: 1m

      at log (routes/analytics.js:150:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      ‚ö†Ô∏è Risk analytics requested for user: dev-user-bypass, timeframe: 1m

      at log (routes/analytics.js:387:13)

    console.error
      Database query error: {
        error: 'column "daily_pnl_percent" does not exist',
        query: '\n' +
          '        SELECT\n' +
          '          DATE(created_at) as date,\n' +
          '          daily_pnl_percent\n' +
          '        FROM portfol...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analytics.js:403:27

    console.log
      ‚ö†Ô∏è portfolio_performance table not found for risk calculation

      at log (routes/analytics.js:417:15)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Asset allocation analytics requested for user: dev-user-bypass, period: current

      at log (routes/analytics.js:758:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Returns analytics requested for user: dev-user-bypass, period: 1m

      at log (routes/analytics.js:874:13)

    console.error
      Database query error: {
        error: 'column "daily_pnl_percent" does not exist',
        query: '\n' +
          '      SELECT \n' +
          '        DATE(created_at) as date,\n' +
          '        total_value, daily_pnl, total_pnl, total_pn...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analytics.js:879:31

    console.error
      Returns analytics error: error: column "daily_pnl_percent" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/analytics.js:879:31 {
        length: 118,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '120',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      953 |     });
      954 |   } catch (error) {
    > 955 |     console.error("Returns analytics error:", error);
          |             ^
      956 |     res.status(500).json({
      957 |       success: false,
      958 |       error: "Failed to fetch returns analytics",

      at error (routes/analytics.js:955:13)

    console.log
      üè≠ Public sectors analytics requested

      at log (routes/analytics.js:967:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìä Volatility analytics requested for user: dev-user-bypass, period: 1m

      at log (routes/analytics.js:1033:13)

    console.error
      Database query error: {
        error: 'column "daily_pnl_percent" does not exist',
        query: '\n' +
          '      SELECT \n' +
          '        DATE(created_at) as date,\n' +
          '        daily_pnl_percent\n' +
          '      FROM portfolio_perf...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analytics.js:1038:31

    console.error
      Volatility analytics error: error: column "daily_pnl_percent" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/analytics.js:1038:31 {
        length: 117,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '58',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1100 |     });
      1101 |   } catch (error) {
    > 1102 |     console.error("Volatility analytics error:", error);
           |             ^
      1103 |     res.status(500).json({
      1104 |       success: false,
      1105 |       error: "Failed to fetch volatility analytics",

      at error (routes/analytics.js:1102:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üìà Trends analytics requested for user: dev-user-bypass, period: 1m

      at log (routes/analytics.js:1116:13)

    console.error
      Database query error: {
        error: 'column "daily_pnl_percent" does not exist',
        query: '\n' +
          '      SELECT \n' +
          '        DATE(created_at) as date,\n' +
          '        total_value, total_pnl_percent, daily_pnl_p...',
        params: '1 parameters',
        code: '42703'
      }

      1332 |     return result;
      1333 |   } catch (error) {
    > 1334 |     console.error("Database query error:", {
           |             ^
      1335 |       error: error.message,
      1336 |       query: text.slice(0, 100) + (text.length > 100 ? "..." : ""),
      1337 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1334:13)
      at routes/analytics.js:1121:31

    console.error
      Trends analytics error: error: column "daily_pnl_percent" does not exist
          at /home/stocks/algo/webapp/lambda/node_modules/pg-pool/index.js:45:11
          at processTicksAndRejections (node:internal/process/task_queues:95:5)
          at query (/home/stocks/algo/webapp/lambda/utils/database.js:1305:20)
          at /home/stocks/algo/webapp/lambda/routes/analytics.js:1121:31 {
        length: 117,
        severity: 'ERROR',
        code: '42703',
        detail: undefined,
        hint: undefined,
        position: '90',
        internalPosition: undefined,
        internalQuery: undefined,
        where: undefined,
        schema: undefined,
        table: undefined,
        column: undefined,
        dataType: undefined,
        constraint: undefined,
        file: 'parse_relation.c',
        line: '3722',
        routine: 'errorMissingColumn'
      }

      1193 |     });
      1194 |   } catch (error) {
    > 1195 |     console.error("Trends analytics error:", error);
           |             ^
      1196 |     res.status(500).json({
      1197 |       success: false,
      1198 |       error: "Failed to fetch trends analytics",

      at error (routes/analytics.js:1195:13)

    console.log
      üîß Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

    console.log
      üî¨ Custom analytics requested for user: dev-user-bypass, type: undefined

      at log (routes/analytics.js:1209:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/unit/middleware/responseFormatter.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

PASS tests/unit/utils/tradingModeHelper.test.js
  ‚óè Console

    console.log
      Using database config from environment variables

      at log (utils/database.js:177:15)

    console.log
      Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

    console.log
      ‚úÖ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

    console.log
      ‚úÖ Real database connection established for tests

      at Object.log (tests/setup.js:26:13)

    console.log
      Trading mode check failed, defaulting to paper: Database connection failed

      at Object.log [as getUserTradingMode] (utils/tradingModeHelper.js:37:13)

    console.log
      üéØ Executing paper trading query on table: portfolio_holdings

      at Object.log [as executeWithTradingMode] (utils/tradingModeHelper.js:211:15)

    console.log
      üéØ Executing paper trading query on table: portfolio_holdings

      at Object.log [as executeWithTradingMode] (utils/tradingModeHelper.js:211:15)

    console.log
      Table portfolio_holdings not found, using fallback table: portfolio_holdings

      at Object.log [as executeWithTradingMode] (utils/tradingModeHelper.js:223:19)

    console.log
      API key check failed: Database error

      at Object.log [as checkLiveTradingRequirements] (utils/tradingModeHelper.js:158:13)

    console.log
      ‚úÖ Test cleanup complete

      at Object.log (tests/setup.js:36:13)

