/**\n * API Key Connection Testing Service\n * Provides real-time testing of API keys against actual provider endpoints\n * Part of the enhanced API key validation system\n */\n\nconst https = require('https');\nconst logger = require('./logger');\n\nclass ApiKeyTesting {\n  constructor() {\n    this.supportedProviders = ['alpaca', 'tdameritrade', 'td_ameritrade', 'polygon', 'finnhub'];\n    this.connectionTimeout = 5000; // 5 seconds\n  }\n\n  /**\n   * Test API key connection with the actual provider\n   * @param {string} provider - API provider name\n   * @param {string} apiKey - API key to test\n   * @param {string} apiSecret - API secret (if required)\n   * @returns {Object} Test result with connection status and details\n   */\n  async testConnection(provider, apiKey, apiSecret = null) {\n    const testStartTime = Date.now();\n    \n    try {\n      logger.info('🧪 Starting API key connection test', {\n        provider: provider,\n        keyLength: apiKey ? apiKey.length : 0,\n        hasSecret: !!apiSecret\n      });\n\n      const providerLower = provider.toLowerCase().trim();\n      \n      if (!this.supportedProviders.includes(providerLower)) {\n        return {\n          success: false,\n          error: `Connection testing not implemented for provider: ${provider}`,\n          errorCode: 'PROVIDER_NOT_SUPPORTED',\n          testTime: Date.now() - testStartTime,\n          suggestions: ['Use a supported provider like Alpaca or TD Ameritrade']\n        };\n      }\n      \n      switch (providerLower) {\n        case 'alpaca':\n          return await this._testAlpacaConnection(apiKey, apiSecret, testStartTime);\n          \n        case 'tdameritrade':\n        case 'td_ameritrade':\n          return await this._testTdAmeritradeConnection(apiKey, testStartTime);\n          \n        case 'polygon':\n          return await this._testPolygonConnection(apiKey, testStartTime);\n          \n        case 'finnhub':\n          return await this._testFinnhubConnection(apiKey, testStartTime);\n          \n        default:\n          return {\n            success: false,\n            error: `Provider ${provider} testing not implemented`,\n            errorCode: 'PROVIDER_NOT_IMPLEMENTED',\n            testTime: Date.now() - testStartTime,\n            suggestions: ['Use Alpaca or TD Ameritrade for connection testing']\n          };\n      }\n      \n    } catch (error) {\n      logger.error('❌ API key connection test failed', {\n        provider: provider,\n        error: error.message,\n        testTime: Date.now() - testStartTime\n      });\n      \n      return {\n        success: false,\n        error: `Connection test failed: ${error.message}`,\n        errorCode: 'CONNECTION_TEST_ERROR',\n        testTime: Date.now() - testStartTime,\n        suggestions: ['Check your network connection and try again']\n      };\n    }\n  }\n\n  /**\n   * Test Alpaca API connection\n   */\n  async _testAlpacaConnection(apiKey, apiSecret, startTime) {\n    return new Promise((resolve) => {\n      const options = {\n        hostname: 'paper-api.alpaca.markets',\n        path: '/v2/account',\n        method: 'GET',\n        headers: {\n          'APCA-API-KEY-ID': apiKey,\n          'APCA-API-SECRET-KEY': apiSecret,\n          'User-Agent': 'Financial-Platform/1.0'\n        },\n        timeout: this.connectionTimeout\n      };\n\n      const req = https.request(options, (res) => {\n        let data = '';\n        \n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        res.on('end', () => {\n          const testTime = Date.now() - startTime;\n          \n          if (res.statusCode === 200) {\n            try {\n              const accountData = JSON.parse(data);\n              logger.info('✅ Alpaca connection test successful', {\n                statusCode: res.statusCode,\n                testTime: testTime,\n                accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown'\n              });\n              \n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Successfully connected to Alpaca API',\n                accountInfo: {\n                  accountId: accountData.id ? accountData.id.substring(0, 8) + '...' : 'unknown',\n                  status: accountData.status || 'unknown',\n                  tradingBlocked: accountData.trading_blocked || false\n                },\n                suggestions: []\n              });\n            } catch (parseError) {\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Connected to Alpaca API (response parse warning)',\n                warning: 'Could not parse account data',\n                suggestions: []\n              });\n            }\n          } else if (res.statusCode === 401) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'Invalid Alpaca API credentials',\n              errorCode: 'ALPACA_INVALID_CREDENTIALS',\n              testTime: testTime,\n              suggestions: [\n                'Check your Alpaca API Key ID and Secret Key',\n                'Ensure you\\'re using the correct paper trading credentials',\n                'Verify your keys are active and not expired'\n              ]\n            });\n          } else if (res.statusCode === 403) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'Alpaca API access forbidden - check account permissions',\n              errorCode: 'ALPACA_FORBIDDEN',\n              testTime: testTime,\n              suggestions: [\n                'Verify your account is approved for API access',\n                'Check if your account is suspended or restricted',\n                'Ensure you have the necessary permissions'\n              ]\n            });\n          } else {\n            logger.warn('⚠️ Alpaca connection test failed', {\n              statusCode: res.statusCode,\n              testTime: testTime\n            });\n            \n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: `Alpaca API returned status ${res.statusCode}`,\n              errorCode: 'ALPACA_API_ERROR',\n              testTime: testTime,\n              suggestions: [\n                'Check your Alpaca API credentials',\n                'Verify your account status',\n                'Try again in a few moments'\n              ]\n            });\n          }\n        });\n      });\n\n      req.on('error', (error) => {\n        const testTime = Date.now() - startTime;\n        logger.error('❌ Alpaca connection test network error', {\n          error: error.message,\n          testTime: testTime\n        });\n        \n        resolve({\n          success: false,\n          error: `Network error: ${error.message}`,\n          errorCode: 'NETWORK_ERROR',\n          testTime: testTime,\n          suggestions: [\n            'Check your internet connection',\n            'Verify Alpaca API is accessible from your location',\n            'Try again in a few moments'\n          ]\n        });\n      });\n\n      req.on('timeout', () => {\n        const testTime = Date.now() - startTime;\n        req.destroy();\n        \n        resolve({\n          success: false,\n          error: 'Connection timeout (5 seconds)',\n          errorCode: 'TIMEOUT_ERROR',\n          testTime: testTime,\n          suggestions: [\n            'Check your internet connection speed',\n            'Try again later',\n            'Verify Alpaca API is not experiencing outages'\n          ]\n        });\n      });\n\n      req.end();\n    });\n  }\n\n  /**\n   * Test TD Ameritrade API connection\n   */\n  async _testTdAmeritradeConnection(apiKey, startTime) {\n    return new Promise((resolve) => {\n      const options = {\n        hostname: 'api.tdameritrade.com',\n        path: `/v1/marketdata/quotes?apikey=${encodeURIComponent(apiKey)}&symbol=SPY`,\n        method: 'GET',\n        headers: {\n          'User-Agent': 'Financial-Platform/1.0'\n        },\n        timeout: this.connectionTimeout\n      };\n\n      const req = https.request(options, (res) => {\n        let data = '';\n        \n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        res.on('end', () => {\n          const testTime = Date.now() - startTime;\n          \n          if (res.statusCode === 200) {\n            try {\n              const quoteData = JSON.parse(data);\n              logger.info('✅ TD Ameritrade connection test successful', {\n                statusCode: res.statusCode,\n                testTime: testTime,\n                hasQuoteData: !!quoteData.SPY\n              });\n              \n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Successfully connected to TD Ameritrade API',\n                quoteInfo: {\n                  symbol: 'SPY',\n                  hasData: !!quoteData.SPY,\n                  lastPrice: quoteData.SPY?.lastPrice || 'N/A'\n                },\n                suggestions: []\n              });\n            } catch (parseError) {\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Connected to TD Ameritrade API (response parse warning)',\n                warning: 'Could not parse quote data',\n                suggestions: []\n              });\n            }\n          } else if (res.statusCode === 401) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'Invalid TD Ameritrade Consumer Key',\n              errorCode: 'TD_INVALID_CREDENTIALS',\n              testTime: testTime,\n              suggestions: [\n                'Check your TD Ameritrade Consumer Key',\n                'Ensure the key includes @AMER.OAUTHAP suffix if required',\n                'Verify your app is approved and active'\n              ]\n            });\n          } else if (res.statusCode === 403) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'TD Ameritrade API access forbidden',\n              errorCode: 'TD_FORBIDDEN',\n              testTime: testTime,\n              suggestions: [\n                'Verify your app has market data permissions',\n                'Check if your developer account is approved',\n                'Ensure you\\'re not exceeding rate limits'\n              ]\n            });\n          } else {\n            logger.warn('⚠️ TD Ameritrade connection test failed', {\n              statusCode: res.statusCode,\n              testTime: testTime\n            });\n            \n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: `TD Ameritrade API returned status ${res.statusCode}`,\n              errorCode: 'TD_API_ERROR',\n              testTime: testTime,\n              suggestions: [\n                'Check your TD Ameritrade Consumer Key',\n                'Verify your app status and permissions',\n                'Try again in a few moments'\n              ]\n            });\n          }\n        });\n      });\n\n      req.on('error', (error) => {\n        const testTime = Date.now() - startTime;\n        logger.error('❌ TD Ameritrade connection test network error', {\n          error: error.message,\n          testTime: testTime\n        });\n        \n        resolve({\n          success: false,\n          error: `Network error: ${error.message}`,\n          errorCode: 'NETWORK_ERROR',\n          testTime: testTime,\n          suggestions: [\n            'Check your internet connection',\n            'Verify TD Ameritrade API is accessible',\n            'Try again in a few moments'\n          ]\n        });\n      });\n\n      req.on('timeout', () => {\n        const testTime = Date.now() - startTime;\n        req.destroy();\n        \n        resolve({\n          success: false,\n          error: 'Connection timeout (5 seconds)',\n          errorCode: 'TIMEOUT_ERROR',\n          testTime: testTime,\n          suggestions: [\n            'Check your internet connection speed',\n            'Try again later',\n            'Verify TD Ameritrade API is not experiencing outages'\n          ]\n        });\n      });\n\n      req.end();\n    });\n  }\n\n  /**\n   * Test Polygon API connection\n   */\n  async _testPolygonConnection(apiKey, startTime) {\n    return new Promise((resolve) => {\n      const options = {\n        hostname: 'api.polygon.io',\n        path: `/v1/marketstatus/now?apiKey=${encodeURIComponent(apiKey)}`,\n        method: 'GET',\n        headers: {\n          'User-Agent': 'Financial-Platform/1.0'\n        },\n        timeout: this.connectionTimeout\n      };\n\n      const req = https.request(options, (res) => {\n        let data = '';\n        \n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        res.on('end', () => {\n          const testTime = Date.now() - startTime;\n          \n          if (res.statusCode === 200) {\n            try {\n              const statusData = JSON.parse(data);\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Successfully connected to Polygon API',\n                marketStatus: {\n                  market: statusData.market || 'unknown',\n                  serverTime: statusData.serverTime || 'unknown'\n                },\n                suggestions: []\n              });\n            } catch (parseError) {\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Connected to Polygon API (response parse warning)',\n                suggestions: []\n              });\n            }\n          } else if (res.statusCode === 401) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'Invalid Polygon API key',\n              errorCode: 'POLYGON_INVALID_CREDENTIALS',\n              testTime: testTime,\n              suggestions: [\n                'Check your Polygon API key from https://polygon.io/dashboard',\n                'Ensure your subscription is active',\n                'Verify the key is not expired'\n              ]\n            });\n          } else {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: `Polygon API returned status ${res.statusCode}`,\n              errorCode: 'POLYGON_API_ERROR',\n              testTime: testTime,\n              suggestions: [\n                'Check your Polygon API key',\n                'Ensure your subscription is active',\n                'Verify you have sufficient API credits'\n              ]\n            });\n          }\n        });\n      });\n\n      req.on('error', (error) => {\n        resolve({\n          success: false,\n          error: `Network error: ${error.message}`,\n          errorCode: 'NETWORK_ERROR',\n          testTime: Date.now() - startTime,\n          suggestions: ['Check your internet connection', 'Try again later']\n        });\n      });\n\n      req.on('timeout', () => {\n        req.destroy();\n        resolve({\n          success: false,\n          error: 'Connection timeout (5 seconds)',\n          errorCode: 'TIMEOUT_ERROR',\n          testTime: Date.now() - startTime,\n          suggestions: ['Check your connection speed', 'Try again later']\n        });\n      });\n\n      req.end();\n    });\n  }\n\n  /**\n   * Test Finnhub API connection\n   */\n  async _testFinnhubConnection(apiKey, startTime) {\n    return new Promise((resolve) => {\n      const options = {\n        hostname: 'finnhub.io',\n        path: `/api/v1/quote?symbol=AAPL&token=${encodeURIComponent(apiKey)}`,\n        method: 'GET',\n        headers: {\n          'User-Agent': 'Financial-Platform/1.0'\n        },\n        timeout: this.connectionTimeout\n      };\n\n      const req = https.request(options, (res) => {\n        let data = '';\n        \n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        res.on('end', () => {\n          const testTime = Date.now() - startTime;\n          \n          if (res.statusCode === 200) {\n            try {\n              const quoteData = JSON.parse(data);\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Successfully connected to Finnhub API',\n                quoteInfo: {\n                  symbol: 'AAPL',\n                  currentPrice: quoteData.c || 'N/A',\n                  hasData: !!(quoteData.c || quoteData.o)\n                },\n                suggestions: []\n              });\n            } catch (parseError) {\n              resolve({\n                success: true,\n                statusCode: res.statusCode,\n                testTime: testTime,\n                message: 'Connected to Finnhub API (response parse warning)',\n                suggestions: []\n              });\n            }\n          } else if (res.statusCode === 401) {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: 'Invalid Finnhub API key',\n              errorCode: 'FINNHUB_INVALID_CREDENTIALS',\n              testTime: testTime,\n              suggestions: [\n                'Check your Finnhub API key from https://finnhub.io/dashboard',\n                'Ensure your account is active',\n                'Verify the key format is correct (20 lowercase characters)'\n              ]\n            });\n          } else {\n            resolve({\n              success: false,\n              statusCode: res.statusCode,\n              error: `Finnhub API returned status ${res.statusCode}`,\n              errorCode: 'FINNHUB_API_ERROR',\n              testTime: testTime,\n              suggestions: [\n                'Check your Finnhub API key',\n                'Ensure your account is active',\n                'Verify you have API quota remaining'\n              ]\n            });\n          }\n        });\n      });\n\n      req.on('error', (error) => {\n        resolve({\n          success: false,\n          error: `Network error: ${error.message}`,\n          errorCode: 'NETWORK_ERROR',\n          testTime: Date.now() - startTime,\n          suggestions: ['Check your internet connection', 'Try again later']\n        });\n      });\n\n      req.on('timeout', () => {\n        req.destroy();\n        resolve({\n          success: false,\n          error: 'Connection timeout (5 seconds)',\n          errorCode: 'TIMEOUT_ERROR',\n          testTime: Date.now() - startTime,\n          suggestions: ['Check your connection speed', 'Try again later']\n        });\n      });\n\n      req.end();\n    });\n  }\n\n  /**\n   * Get supported providers for connection testing\n   */\n  getSupportedProviders() {\n    return this.supportedProviders;\n  }\n\n  /**\n   * Check if a provider supports connection testing\n   */\n  isProviderSupported(provider) {\n    return this.supportedProviders.includes(provider.toLowerCase().trim());\n  }\n}\n\nmodule.exports = new ApiKeyTesting();